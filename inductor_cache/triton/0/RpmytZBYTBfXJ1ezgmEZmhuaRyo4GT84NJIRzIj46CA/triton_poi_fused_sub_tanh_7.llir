; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_sub_tanh_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = and i32 %8, 16, !dbg !12
  %12 = lshr exact i32 %11, 2, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = and i32 %8, 3, !dbg !12
  %15 = and i32 %8, 7, !dbg !12
  %16 = or disjoint i32 %13, %7, !dbg !13
  %17 = or disjoint i32 %7, %15, !dbg !13
  %18 = icmp slt i32 %16, 8, !dbg !14
  %19 = icmp slt i32 %17, 8, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %8, 3, !dbg !17
  %.lobit2 = and i32 %22, 1, !dbg !17
  %23 = lshr exact i32 %11, 3, !dbg !17
  %24 = or disjoint i32 %.lobit2, %23, !dbg !17
  %25 = or disjoint i32 %21, %14, !dbg !18
  %26 = or disjoint i32 %24, %21, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %29 = sdiv i32 %.frozen, 2, !dbg !20
  %30 = mul i32 %29, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = shl i32 %16, 2, !dbg !22
  %32 = add i32 %25, %31, !dbg !23
  %33 = sext i32 %32 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %18, %27, !dbg !25
  %36 = and i1 %19, %28, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %35) #4, !dbg !26
  %38 = shl i32 %8, 3, !dbg !26
  %39 = and i32 %38, 24, !dbg !26
  %40 = or disjoint i32 %10, %39, !dbg !26
  %41 = or disjoint i32 %40, %12, !dbg !26
  %42 = and i32 %8, 31, !dbg !26
  %43 = lshr exact i32 %39, 1, !dbg !26
  %44 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %43, !dbg !26
  %45 = getelementptr inbounds float, ptr addrspace(3) %44, i32 %41, !dbg !26
  %46 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %47 = lshr i32 %42, 3, !dbg !26
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47, !dbg !26
  %49 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %42, !dbg !26
  %50 = load float, ptr addrspace(3) %49, align 4, !dbg !26
  %51 = shl i32 %26, 1, !dbg !27
  %52 = add i32 %51, %.decomposed, !dbg !28
  %53 = shl i32 %29, 3, !dbg !29
  %54 = add i32 %52, %53, !dbg !30
  %55 = sext i32 %54 to i64, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %36) #4, !dbg !32
  %58 = bitcast i32 %57 to float, !dbg !32
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %59, 0, !dbg !33
  %60 = tail call float @llvm.nvvm.fabs.ftz.f(float %58) #4, !dbg !33
  %61 = tail call float @llvm.nvvm.fabs.f(float %58) #4, !dbg !33
  %.01.i = select i1 %.not.i, float %61, float %60, !dbg !33
  %62 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !33
  br i1 %62, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !33

__internal_fmad.exit1.i:                          ; preds = %5
  %63 = fmul float %.01.i, 0x4007154760000000, !dbg !33
  %64 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %63) #4, !dbg !33
  %65 = fadd float %64, 1.000000e+00, !dbg !33
  %66 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %65) #5, !dbg !33, !srcloc !34
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not6.i = icmp eq i32 %67, 0, !dbg !33
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %66, float -2.000000e+00, float 1.000000e+00) #4, !dbg !33
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %66, float -2.000000e+00, float 1.000000e+00) #4, !dbg !33
  %.03.i = select i1 %.not6.i, float %69, float %68, !dbg !33
  %70 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !33
  %s.0.i = select i1 %70, float 1.000000e+00, float %.03.i, !dbg !33
  %71 = bitcast float %s.0.i to i32, !dbg !33
  %72 = and i32 %57, -2147483648, !dbg !33
  %73 = or i32 %72, %71, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  br label %__nv_tanhf.exit, !dbg !33

__internal_fmad.exit3.i:                          ; preds = %5
  %75 = fmul float %58, %58, !dbg !33
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not1.i = icmp eq i32 %76, 0, !dbg !33
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %75, float 0xBFAAC795C0000000) #4, !dbg !33
  %78 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %75, float 0xBFAAC795C0000000) #4, !dbg !33
  %.06.i = select i1 %.not1.i, float %78, float %77, !dbg !33
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not2.i = icmp eq i32 %79, 0, !dbg !33
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %75, float 0x3FC10B2820000000) #4, !dbg !33
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %75, float 0x3FC10B2820000000) #4, !dbg !33
  %.05.i = select i1 %.not2.i, float %81, float %80, !dbg !33
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not3.i = icmp eq i32 %82, 0, !dbg !33
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %75, float 0xBFD5553DA0000000) #4, !dbg !33
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %75, float 0xBFD5553DA0000000) #4, !dbg !33
  %.0.i = select i1 %.not3.i, float %84, float %83, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not4.i = icmp eq i32 %85, 0, !dbg !33
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %75, float 0.000000e+00) #4, !dbg !33
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %75, float 0.000000e+00) #4, !dbg !33
  %.04.i = select i1 %.not4.i, float %87, float %86, !dbg !33
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not5.i = icmp eq i32 %88, 0, !dbg !33
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %58, float %58) #4, !dbg !33
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %58, float %58) #4, !dbg !33
  %.02.i = select i1 %.not5.i, float %90, float %89, !dbg !33
  br label %__nv_tanhf.exit, !dbg !33

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %74, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !33
  %91 = fsub float %50, %s.1.i, !dbg !35
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %93 = shl i32 %8, 2, !dbg !37
  %94 = and i32 %93, 28, !dbg !37
  %95 = or disjoint i32 %94, %.lobit2, !dbg !37
  %96 = or disjoint i32 %95, %23, !dbg !37
  %97 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !37
  %98 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %96, !dbg !37
  %99 = bitcast float %91 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %100 = lshr i32 %42, 2, !dbg !37
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !37
  %102 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %42, !dbg !37
  %103 = load i32, ptr addrspace(3) %102, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %92, i1 %35) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszqrdr6jfilkcnn2qb3epq3q5sl34vt7ifccxd6iublti4rynvj.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_poi_fused_sub_tanh_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_sub_tanh_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_sub_tanh_7", linkageName: "triton_poi_fused_sub_tanh_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 49, scope: !7)
!33 = !DILocation(line: 34, column: 26, scope: !7)
!34 = !{i32 21046}
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 25, scope: !7)
!37 = !DILocation(line: 36, column: 43, scope: !7)
!38 = !DILocation(line: 36, column: 4, scope: !7)
