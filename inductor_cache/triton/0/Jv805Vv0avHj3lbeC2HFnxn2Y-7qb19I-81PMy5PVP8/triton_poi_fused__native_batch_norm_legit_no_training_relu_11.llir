; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %12, !dbg !13
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = icmp slt i32 %23, 4, !dbg !17
  %25 = srem i32 %18, 64, !dbg !18
  %26 = add i32 %16, %22, !dbg !19
  %27 = shl i32 %26, 2, !dbg !19
  %28 = add i32 %17, %22, !dbg !19
  %29 = shl i32 %28, 2, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = and i1 %24, %19, !dbg !21
  %35 = and i1 %24, %20, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %34) #4, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %35) #4, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !22
  %47 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #4, !dbg !22
  %48 = getelementptr inbounds i8, ptr addrspace(3) %46, i32 1032, !dbg !22
  %49 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #4, !dbg !22
  %50 = getelementptr inbounds i8, ptr addrspace(3) %46, i32 2064, !dbg !22
  %51 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #4, !dbg !22
  %52 = getelementptr inbounds i8, ptr addrspace(3) %46, i32 3096, !dbg !22
  %53 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !22
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !22
  %55 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #4, !dbg !22
  %56 = getelementptr inbounds i8, ptr addrspace(3) %46, i32 1544, !dbg !22
  %57 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #4, !dbg !22
  %58 = getelementptr inbounds i8, ptr addrspace(3) %46, i32 2576, !dbg !22
  %59 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !22
  %60 = getelementptr inbounds i8, ptr addrspace(3) %46, i32 3608, !dbg !22
  %61 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !22
  %63 = load <2 x float>, ptr addrspace(3) %62, align 8, !dbg !22
  %64 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 1032, !dbg !22
  %65 = load <2 x float>, ptr addrspace(3) %64, align 8, !dbg !22
  %66 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 2064, !dbg !22
  %67 = load <2 x float>, ptr addrspace(3) %66, align 8, !dbg !22
  %68 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 3096, !dbg !22
  %69 = load <2 x float>, ptr addrspace(3) %68, align 8, !dbg !22
  %70 = sext i32 %25 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !23
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %21) #4, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !25
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %21) #4, !dbg !26
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !26
  %77 = bitcast i32 %75 to float, !dbg !26
  %78 = bitcast i32 %76 to float, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !27
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %21) #4, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !29
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %21) #4, !dbg !30
  %83 = fadd float %77, 0x3EE4F8B580000000, !dbg !31
  %84 = fadd float %78, 0x3EE4F8B580000000, !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %85, 0, !dbg !32
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %86, 0, !dbg !32
  br i1 %.not.i, label %92, label %87, !dbg !32

87:                                               ; preds = %8
  br i1 %.not1.i, label %90, label %88, !dbg !32

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

92:                                               ; preds = %8
  br i1 %.not1.i, label %95, label %93, !dbg !32

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !32
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i23 = icmp eq i32 %97, 0, !dbg !32
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i26 = icmp eq i32 %98, 0, !dbg !32
  br i1 %.not.i23, label %104, label %99, !dbg !32

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i26, label %102, label %100, !dbg !32

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i26, label %107, label %105, !dbg !32

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

__nv_sqrtf.exit27:                                ; preds = %100, %102, %105, %107
  %.0.i25 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !32
  %109 = extractvalue { i32, i32 } %72, 1, !dbg !24
  %110 = extractvalue { i32, i32 } %72, 0, !dbg !24
  %111 = extractelement <2 x float> %65, i64 1, !dbg !22
  %112 = extractelement <2 x float> %65, i64 0, !dbg !22
  %113 = extractelement <2 x float> %63, i64 1, !dbg !22
  %114 = extractelement <2 x float> %63, i64 0, !dbg !22
  %115 = extractvalue { i32, i32 } %82, 1, !dbg !30
  %116 = extractvalue { i32, i32 } %82, 0, !dbg !30
  %117 = extractvalue { i32, i32 } %80, 1, !dbg !28
  %118 = extractvalue { i32, i32 } %80, 0, !dbg !28
  %119 = lshr i32 %11, 6, !dbg !33
  %.lobit = and i32 %119, 1, !dbg !33
  %120 = or disjoint i32 %.lobit, %23, !dbg !34
  %121 = or disjoint i32 %120, 2, !dbg !34
  %122 = icmp slt i32 %121, 4, !dbg !17
  %123 = shl i32 %11, 2, !dbg !12
  %124 = and i32 %123, 252, !dbg !12
  %125 = or disjoint i32 %10, %124, !dbg !13
  %126 = icmp slt i32 %125, 256, !dbg !14
  %127 = and i1 %126, %122, !dbg !21
  %128 = icmp slt i32 %120, 4, !dbg !17
  %129 = and i1 %126, %128, !dbg !21
  %.frozen = freeze i32 %125, !dbg !35
  %130 = sdiv i32 %.frozen, 64, !dbg !35
  %131 = mul i32 %130, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %131, !dbg !18
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !36
  %134 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !24
  %135 = insertelement <2 x i32> %134, i32 %110, i64 1, !dbg !24
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !24
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !24
  %138 = shufflevector <2 x float> %69, <2 x float> %67, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %139 = insertelement <8 x float> %138, float %111, i64 4, !dbg !37
  %140 = insertelement <8 x float> %139, float %112, i64 5, !dbg !37
  %141 = insertelement <8 x float> %140, float %113, i64 6, !dbg !37
  %142 = insertelement <8 x float> %141, float %114, i64 7, !dbg !37
  %143 = fsub <8 x float> %142, %137, !dbg !37
  %144 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !30
  %145 = insertelement <2 x i32> %144, i32 %116, i64 1, !dbg !30
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !30
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %148 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !28
  %149 = insertelement <2 x i32> %148, i32 %118, i64 1, !dbg !28
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !28
  %151 = shufflevector <2 x float> %150, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %152 = insertelement <8 x float> poison, float %133, i64 0, !dbg !38
  %153 = insertelement <8 x float> %152, float %132, i64 1, !dbg !38
  %154 = shufflevector <8 x float> %153, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !38
  %155 = fmul <8 x float> %143, %154, !dbg !38
  %156 = fmul <8 x float> %155, %151, !dbg !39
  %157 = fadd <8 x float> %156, %147, !dbg !40
  %158 = fcmp olt <8 x float> %157, zeroinitializer, !dbg !41
  %159 = extractelement <8 x i1> %158, i64 7, !dbg !45
  %160 = extractelement <8 x i1> %158, i64 6, !dbg !45
  %161 = extractelement <8 x i1> %158, i64 5, !dbg !45
  %162 = extractelement <8 x i1> %158, i64 4, !dbg !45
  %163 = extractelement <8 x i1> %158, i64 3, !dbg !45
  %164 = extractelement <8 x i1> %158, i64 2, !dbg !45
  %165 = extractelement <8 x i1> %158, i64 1, !dbg !45
  %166 = extractelement <8 x i1> %158, i64 0, !dbg !45
  %167 = shl i32 %120, 6, !dbg !46
  %168 = shl i32 %121, 6, !dbg !46
  %169 = shl i32 %130, 8, !dbg !47
  %170 = add i32 %169, %.decomposed, !dbg !48
  %171 = add i32 %170, %167, !dbg !49
  %172 = add i32 %170, %168, !dbg !49
  %173 = sext i32 %171 to i64, !dbg !50
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %173, !dbg !50
  %175 = sext i32 %172 to i64, !dbg !50
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %175, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %177 = and i32 %123, 508, !dbg !51
  %bc = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %178 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %179 = select i1 %159, i32 0, i32 %178, !dbg !45
  %bc28 = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %180 = extractelement <8 x i32> %bc28, i64 6, !dbg !51
  %181 = select i1 %160, i32 0, i32 %180, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %62, i32 %179, i32 %181, i1 true) #4, !dbg !51
  %182 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 1040, !dbg !51
  %bc29 = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %183 = extractelement <8 x i32> %bc29, i64 5, !dbg !51
  %184 = select i1 %161, i32 0, i32 %183, !dbg !45
  %bc30 = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %185 = extractelement <8 x i32> %bc30, i64 4, !dbg !51
  %186 = select i1 %162, i32 0, i32 %185, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %182, i32 %184, i32 %186, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %187 = lshr i32 %123, 6, !dbg !51
  %188 = and i32 %187, 4, !dbg !51
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !51
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %177, !dbg !51
  %191 = load <4 x i32>, ptr addrspace(3) %190, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %bc31 = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %192 = extractelement <8 x i32> %bc31, i64 3, !dbg !51
  %193 = select i1 %163, i32 0, i32 %192, !dbg !45
  %bc32 = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %194 = extractelement <8 x i32> %bc32, i64 2, !dbg !51
  %195 = select i1 %164, i32 0, i32 %194, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %62, i32 %193, i32 %195, i1 true) #4, !dbg !51
  %bc33 = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %196 = extractelement <8 x i32> %bc33, i64 1, !dbg !51
  %197 = select i1 %165, i32 0, i32 %196, !dbg !45
  %bc34 = bitcast <8 x float> %157 to <8 x i32>, !dbg !51
  %198 = extractelement <8 x i32> %bc34, i64 0, !dbg !51
  %199 = select i1 %166, i32 0, i32 %198, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %182, i32 %197, i32 %199, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %200 = load <4 x i32>, ptr addrspace(3) %190, align 16, !dbg !51
  %.extract = extractelement <4 x i32> %191, i64 0, !dbg !51
  %.extract16 = extractelement <4 x i32> %191, i64 1, !dbg !51
  %.extract17 = extractelement <4 x i32> %191, i64 2, !dbg !51
  %.extract18 = extractelement <4 x i32> %191, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %174, i1 %129) #4, !dbg !51
  %.extract19 = extractelement <4 x i32> %200, i64 0, !dbg !51
  %.extract20 = extractelement <4 x i32> %200, i64 1, !dbg !51
  %.extract21 = extractelement <4 x i32> %200, i64 2, !dbg !51
  %.extract22 = extractelement <4 x i32> %200, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %176, i1 %127) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbqdwtkl7zhy2vnvmcnh77lqcu4qxzvoxmfv54n4qmjcczobkhd5.py", directory: "inductor_cache/bq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 26, column: 44, scope: !7)
!34 = !DILocation(line: 26, column: 23, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 33, scope: !7)
!47 = !DILocation(line: 50, column: 42, scope: !7)
!48 = !DILocation(line: 50, column: 30, scope: !7)
!49 = !DILocation(line: 50, column: 38, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 54, scope: !7)
!52 = !DILocation(line: 50, column: 4, scope: !7)
