; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = or disjoint i32 %10, 4, !dbg !12
  %12 = and i32 %8, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %12, 512, !dbg !12
  %17 = or disjoint i32 %12, 640, !dbg !12
  %18 = or disjoint i32 %12, 768, !dbg !12
  %19 = or disjoint i32 %12, 896, !dbg !12
  %20 = or disjoint i32 %7, %10, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = or disjoint i32 %7, %18, !dbg !13
  %29 = or disjoint i32 %7, %19, !dbg !13
  %30 = icmp slt i32 %20, 4608, !dbg !14
  %31 = icmp slt i32 %22, 4608, !dbg !14
  %32 = icmp slt i32 %23, 4608, !dbg !14
  %33 = icmp slt i32 %24, 4608, !dbg !14
  %34 = icmp slt i32 %25, 4608, !dbg !14
  %35 = icmp slt i32 %26, 4608, !dbg !14
  %36 = icmp slt i32 %27, 4608, !dbg !14
  %37 = icmp slt i32 %28, 4608, !dbg !14
  %38 = icmp slt i32 %29, 4608, !dbg !14
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %40 = sdiv i32 %.frozen, 1152, !dbg !16
  %41 = mul i32 %40, 1152, !dbg !17
  %.decomposed = sub i32 %.frozen, %41, !dbg !17
  %42 = srem i32 %21, 1152, !dbg !17
  %43 = mul i32 %39, 1152, !dbg !18
  %44 = mul i32 %40, 4718592, !dbg !19
  %45 = add i32 %44, %43, !dbg !20
  %46 = add i32 %45, %.decomposed, !dbg !21
  %47 = add i32 %45, %42, !dbg !21
  %48 = sext i32 %46 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %47 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %30) #2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %30) #2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !23
  %62 = shl i32 %22, 12, !dbg !24
  %63 = shl i32 %23, 12, !dbg !24
  %64 = shl i32 %24, 12, !dbg !24
  %65 = shl i32 %25, 12, !dbg !24
  %66 = shl i32 %26, 12, !dbg !24
  %67 = shl i32 %27, 12, !dbg !24
  %68 = shl i32 %28, 12, !dbg !24
  %69 = shl i32 %29, 12, !dbg !24
  %70 = add i32 %62, %39, !dbg !25
  %71 = add i32 %63, %39, !dbg !25
  %72 = add i32 %64, %39, !dbg !25
  %73 = add i32 %65, %39, !dbg !25
  %74 = add i32 %66, %39, !dbg !25
  %75 = add i32 %67, %39, !dbg !25
  %76 = add i32 %68, %39, !dbg !25
  %77 = add i32 %69, %39, !dbg !25
  %78 = sext i32 %70 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !26
  %80 = sext i32 %71 to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !26
  %82 = sext i32 %72 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !26
  %84 = sext i32 %73 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !26
  %86 = sext i32 %74 to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !26
  %88 = sext i32 %75 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !26
  %90 = sext i32 %76 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !26
  %92 = sext i32 %77 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !26
  %.idx = shl nuw nsw i32 %10, 3, !dbg !27
  %94 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !27
  %95 = shl nuw nsw i32 %10, 1, !dbg !27
  %96 = or disjoint i32 %95, 2, !dbg !27
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %96, !dbg !27
  %98 = or disjoint i32 %95, 4, !dbg !27
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !27
  %100 = or disjoint i32 %95, 6, !dbg !27
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !27
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !27
  %102 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !27
  %103 = or disjoint i32 %95, 10, !dbg !27
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !27
  %105 = or disjoint i32 %95, 12, !dbg !27
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !27
  %107 = or disjoint i32 %95, 14, !dbg !27
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !27
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !27
  %109 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !27
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !27
  %110 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !27
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !27
  %111 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !27
  %.idx5 = shl nuw nsw i32 %15, 3, !dbg !27
  %112 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !27
  %.idx6 = shl nuw nsw i32 %16, 3, !dbg !27
  %113 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !27
  %.idx7 = shl nuw nsw i32 %17, 3, !dbg !27
  %114 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !27
  %.idx8 = shl nuw nsw i32 %18, 3, !dbg !27
  %115 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !27
  %.idx9 = shl nuw nsw i32 %19, 3, !dbg !27
  %116 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !27
  %117 = getelementptr i1, ptr addrspace(1) %2, i64 %48, !dbg !28
  %118 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !23
  %119 = insertelement <4 x i32> %118, i32 %54, i64 1, !dbg !23
  %120 = insertelement <4 x i32> %119, i32 %55, i64 2, !dbg !23
  %121 = insertelement <4 x i32> %120, i32 %56, i64 3, !dbg !23
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !23
  %123 = fcmp olt <4 x float> %122, zeroinitializer, !dbg !29
  %124 = select <4 x i1> %123, <4 x float> zeroinitializer, <4 x float> %122, !dbg !33
  %125 = fcmp ole <4 x float> %124, zeroinitializer, !dbg !34
  %126 = extractelement <4 x float> %124, i64 0, !dbg !27
  %127 = bitcast float %126 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %127, i1 true) #2, !dbg !27
  %128 = extractelement <4 x float> %124, i64 1, !dbg !27
  %129 = bitcast float %128 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %129, i1 true) #2, !dbg !27
  %130 = extractelement <4 x float> %124, i64 2, !dbg !27
  %131 = bitcast float %130 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %131, i1 true) #2, !dbg !27
  %132 = extractelement <4 x float> %124, i64 3, !dbg !27
  %133 = bitcast float %132 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %133, i1 true) #2, !dbg !27
  %134 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !23
  %135 = insertelement <4 x i32> %134, i32 %59, i64 1, !dbg !23
  %136 = insertelement <4 x i32> %135, i32 %60, i64 2, !dbg !23
  %137 = insertelement <4 x i32> %136, i32 %61, i64 3, !dbg !23
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !23
  %139 = fcmp olt <4 x float> %138, zeroinitializer, !dbg !29
  %140 = select <4 x i1> %139, <4 x float> zeroinitializer, <4 x float> %138, !dbg !33
  %141 = fcmp ole <4 x float> %140, zeroinitializer, !dbg !34
  %142 = extractelement <4 x float> %140, i64 0, !dbg !27
  %143 = bitcast float %142 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %143, i1 true) #2, !dbg !27
  %144 = extractelement <4 x float> %140, i64 1, !dbg !27
  %145 = bitcast float %144 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %145, i1 true) #2, !dbg !27
  %146 = extractelement <4 x float> %140, i64 2, !dbg !27
  %147 = bitcast float %146 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %147, i1 true) #2, !dbg !27
  %148 = extractelement <4 x float> %140, i64 3, !dbg !27
  %149 = bitcast float %148 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %149, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %150 = load i32, ptr addrspace(3) %109, align 8, !dbg !27
  %151 = load i32, ptr addrspace(3) %110, align 8, !dbg !27
  %152 = load i32, ptr addrspace(3) %111, align 8, !dbg !27
  %153 = load i32, ptr addrspace(3) %112, align 8, !dbg !27
  %154 = load i32, ptr addrspace(3) %113, align 8, !dbg !27
  %155 = load i32, ptr addrspace(3) %114, align 8, !dbg !27
  %156 = load i32, ptr addrspace(3) %115, align 8, !dbg !27
  %157 = load i32, ptr addrspace(3) %116, align 8, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %79, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %81, i1 %32) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %83, i1 %33) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %85, i1 %34) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %87, i1 %35) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %89, i1 %36) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %91, i1 %37) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %93, i1 %38) #2, !dbg !27
  %158 = zext <4 x i1> %125 to <4 x i8>, !dbg !35
  %159 = bitcast <4 x i8> %158 to i32, !dbg !35
  %160 = zext <4 x i1> %141 to <4 x i8>, !dbg !35
  %161 = bitcast <4 x i8> %160 to i32, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %161, ptr addrspace(1) %117, i1 %30) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czomb7ro22ciqvmhk6qe5jp2ylauaaf3wnw4euhgxcdwgwzvl33n.py", directory: "inductor_cache/zo")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_7", linkageName: "triton_poi_fused_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 53, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 58, scope: !7)
!24 = !DILocation(line: 37, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 25, scope: !7)
!27 = !DILocation(line: 37, column: 46, scope: !7)
!28 = !DILocation(line: 38, column: 25, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 34, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 36, column: 19, scope: !7)
!35 = !DILocation(line: 38, column: 59, scope: !7)
!36 = !DILocation(line: 38, column: 4, scope: !7)
