; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 480, !dbg !14
  %19 = mul i32 %18, 480, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %.frozen1 = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen1, 480, !dbg !14
  %21 = mul i32 %20, 480, !dbg !15
  %.decomposed2 = sub i32 %.frozen1, %21, !dbg !15
  %22 = icmp slt i32 %.decomposed, 128, !dbg !16
  %23 = icmp slt i32 %.decomposed2, 128, !dbg !16
  %24 = shl nsw i32 %18, 7, !dbg !17
  %25 = shl nsw i32 %20, 7, !dbg !17
  %26 = add nsw i32 %24, %.decomposed, !dbg !18
  %27 = add nsw i32 %25, %.decomposed2, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = sext i32 %.decomposed to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !21
  %44 = sext i32 %.decomposed2 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !22
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !22
  %56 = add nsw i32 %.decomposed, -128, !dbg !23
  %57 = icmp ult i32 %56, 192, !dbg !23
  %58 = add nsw i32 %.decomposed2, -128, !dbg !23
  %59 = icmp ult i32 %58, 192, !dbg !23
  %60 = mul nsw i32 %18, 192, !dbg !24
  %61 = mul nsw i32 %20, 192, !dbg !24
  %62 = add nsw i32 %60, %56, !dbg !25
  %63 = add nsw i32 %61, %58, !dbg !25
  %64 = sext i32 %62 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !26
  %66 = sext i32 %63 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #1, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !27
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !27
  %78 = sext i32 %56 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !28
  %80 = sext i32 %58 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #1, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !29
  %92 = add nsw i32 %.decomposed, -320, !dbg !30
  %93 = icmp ult i32 %92, 96, !dbg !30
  %94 = add nsw i32 %.decomposed2, -320, !dbg !30
  %95 = icmp ult i32 %94, 96, !dbg !30
  %96 = mul nsw i32 %18, 96, !dbg !31
  %97 = mul nsw i32 %20, 96, !dbg !31
  %98 = add nsw i32 %96, %92, !dbg !32
  %99 = add nsw i32 %97, %94, !dbg !32
  %100 = sext i32 %98 to i64, !dbg !33
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !33
  %102 = sext i32 %99 to i64, !dbg !33
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !33
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !34
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #1, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !34
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !34
  %114 = sext i32 %92 to i64, !dbg !35
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !35
  %116 = sext i32 %94 to i64, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !35
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !36
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !36
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !36
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !36
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #1, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !36
  %128 = icmp sgt i32 %.decomposed, 415, !dbg !37
  %129 = icmp sgt i32 %.decomposed2, 415, !dbg !37
  %130 = shl nsw i32 %18, 6, !dbg !38
  %131 = shl nsw i32 %20, 6, !dbg !38
  %132 = add nsw i32 %.decomposed, -416, !dbg !39
  %133 = add nsw i32 %.decomposed2, -416, !dbg !39
  %134 = add nsw i32 %130, %132, !dbg !40
  %135 = add nsw i32 %131, %133, !dbg !40
  %136 = sext i32 %134 to i64, !dbg !41
  %137 = getelementptr float, ptr addrspace(1) %6, i64 %136, !dbg !41
  %138 = sext i32 %135 to i64, !dbg !41
  %139 = getelementptr float, ptr addrspace(1) %6, i64 %138, !dbg !41
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !42
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !42
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !42
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !42
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !42
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #1, !dbg !42
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !42
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !42
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !42
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !42
  %150 = sext i32 %132 to i64, !dbg !43
  %151 = getelementptr float, ptr addrspace(1) %7, i64 %150, !dbg !43
  %152 = sext i32 %133 to i64, !dbg !43
  %153 = getelementptr float, ptr addrspace(1) %7, i64 %152, !dbg !43
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !44
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !44
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !44
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !44
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !44
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %153, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #1, !dbg !44
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !44
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !44
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !44
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !44
  %164 = insertelement <32 x i32> poison, i32 %149, i64 0, !dbg !42
  %165 = insertelement <32 x i32> %164, i32 %148, i64 1, !dbg !42
  %166 = insertelement <32 x i32> %165, i32 %147, i64 2, !dbg !42
  %167 = insertelement <32 x i32> %166, i32 %146, i64 3, !dbg !42
  %168 = insertelement <32 x i32> %167, i32 %144, i64 4, !dbg !42
  %169 = insertelement <32 x i32> %168, i32 %143, i64 5, !dbg !42
  %170 = insertelement <32 x i32> %169, i32 %142, i64 6, !dbg !42
  %171 = insertelement <32 x i32> %170, i32 %141, i64 7, !dbg !42
  %172 = insertelement <32 x i32> %171, i32 %113, i64 8, !dbg !42
  %173 = insertelement <32 x i32> %172, i32 %112, i64 9, !dbg !42
  %174 = insertelement <32 x i32> %173, i32 %111, i64 10, !dbg !42
  %175 = insertelement <32 x i32> %174, i32 %110, i64 11, !dbg !42
  %176 = insertelement <32 x i32> %175, i32 %108, i64 12, !dbg !42
  %177 = insertelement <32 x i32> %176, i32 %107, i64 13, !dbg !42
  %178 = insertelement <32 x i32> %177, i32 %106, i64 14, !dbg !42
  %179 = insertelement <32 x i32> %178, i32 %105, i64 15, !dbg !42
  %180 = insertelement <32 x i32> %179, i32 %77, i64 16, !dbg !42
  %181 = insertelement <32 x i32> %180, i32 %76, i64 17, !dbg !42
  %182 = insertelement <32 x i32> %181, i32 %75, i64 18, !dbg !42
  %183 = insertelement <32 x i32> %182, i32 %74, i64 19, !dbg !42
  %184 = insertelement <32 x i32> %183, i32 %72, i64 20, !dbg !42
  %185 = insertelement <32 x i32> %184, i32 %71, i64 21, !dbg !42
  %186 = insertelement <32 x i32> %185, i32 %70, i64 22, !dbg !42
  %187 = insertelement <32 x i32> %186, i32 %69, i64 23, !dbg !42
  %188 = insertelement <32 x i32> %187, i32 %41, i64 24, !dbg !42
  %189 = insertelement <32 x i32> %188, i32 %40, i64 25, !dbg !42
  %190 = insertelement <32 x i32> %189, i32 %39, i64 26, !dbg !42
  %191 = insertelement <32 x i32> %190, i32 %38, i64 27, !dbg !42
  %192 = insertelement <32 x i32> %191, i32 %36, i64 28, !dbg !42
  %193 = insertelement <32 x i32> %192, i32 %35, i64 29, !dbg !42
  %194 = insertelement <32 x i32> %193, i32 %34, i64 30, !dbg !42
  %195 = insertelement <32 x i32> %194, i32 %33, i64 31, !dbg !42
  %196 = bitcast <32 x i32> %195 to <32 x float>, !dbg !42
  %197 = insertelement <32 x i32> poison, i32 %163, i64 0, !dbg !44
  %198 = insertelement <32 x i32> %197, i32 %162, i64 1, !dbg !44
  %199 = insertelement <32 x i32> %198, i32 %161, i64 2, !dbg !44
  %200 = insertelement <32 x i32> %199, i32 %160, i64 3, !dbg !44
  %201 = insertelement <32 x i32> %200, i32 %158, i64 4, !dbg !44
  %202 = insertelement <32 x i32> %201, i32 %157, i64 5, !dbg !44
  %203 = insertelement <32 x i32> %202, i32 %156, i64 6, !dbg !44
  %204 = insertelement <32 x i32> %203, i32 %155, i64 7, !dbg !44
  %205 = insertelement <32 x i32> %204, i32 %127, i64 8, !dbg !44
  %206 = insertelement <32 x i32> %205, i32 %126, i64 9, !dbg !44
  %207 = insertelement <32 x i32> %206, i32 %125, i64 10, !dbg !44
  %208 = insertelement <32 x i32> %207, i32 %124, i64 11, !dbg !44
  %209 = insertelement <32 x i32> %208, i32 %122, i64 12, !dbg !44
  %210 = insertelement <32 x i32> %209, i32 %121, i64 13, !dbg !44
  %211 = insertelement <32 x i32> %210, i32 %120, i64 14, !dbg !44
  %212 = insertelement <32 x i32> %211, i32 %119, i64 15, !dbg !44
  %213 = insertelement <32 x i32> %212, i32 %91, i64 16, !dbg !44
  %214 = insertelement <32 x i32> %213, i32 %90, i64 17, !dbg !44
  %215 = insertelement <32 x i32> %214, i32 %89, i64 18, !dbg !44
  %216 = insertelement <32 x i32> %215, i32 %88, i64 19, !dbg !44
  %217 = insertelement <32 x i32> %216, i32 %86, i64 20, !dbg !44
  %218 = insertelement <32 x i32> %217, i32 %85, i64 21, !dbg !44
  %219 = insertelement <32 x i32> %218, i32 %84, i64 22, !dbg !44
  %220 = insertelement <32 x i32> %219, i32 %83, i64 23, !dbg !44
  %221 = insertelement <32 x i32> %220, i32 %55, i64 24, !dbg !44
  %222 = insertelement <32 x i32> %221, i32 %54, i64 25, !dbg !44
  %223 = insertelement <32 x i32> %222, i32 %53, i64 26, !dbg !44
  %224 = insertelement <32 x i32> %223, i32 %52, i64 27, !dbg !44
  %225 = insertelement <32 x i32> %224, i32 %50, i64 28, !dbg !44
  %226 = insertelement <32 x i32> %225, i32 %49, i64 29, !dbg !44
  %227 = insertelement <32 x i32> %226, i32 %48, i64 30, !dbg !44
  %228 = insertelement <32 x i32> %227, i32 %47, i64 31, !dbg !44
  %229 = bitcast <32 x i32> %228 to <32 x float>, !dbg !44
  %230 = fadd <32 x float> %196, %229, !dbg !45
  %231 = fcmp olt <32 x float> %230, zeroinitializer, !dbg !46
  %232 = extractelement <32 x i1> %231, i64 31, !dbg !50
  %233 = extractelement <32 x float> %230, i64 31, !dbg !50
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !50
  %235 = extractelement <32 x i1> %231, i64 30, !dbg !50
  %236 = extractelement <32 x float> %230, i64 30, !dbg !50
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !50
  %238 = extractelement <32 x i1> %231, i64 29, !dbg !50
  %239 = extractelement <32 x float> %230, i64 29, !dbg !50
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !50
  %241 = extractelement <32 x i1> %231, i64 28, !dbg !50
  %242 = extractelement <32 x float> %230, i64 28, !dbg !50
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !50
  %244 = extractelement <32 x i1> %231, i64 27, !dbg !50
  %245 = extractelement <32 x float> %230, i64 27, !dbg !50
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !50
  %247 = extractelement <32 x i1> %231, i64 26, !dbg !50
  %248 = extractelement <32 x float> %230, i64 26, !dbg !50
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !50
  %250 = extractelement <32 x i1> %231, i64 25, !dbg !50
  %251 = extractelement <32 x float> %230, i64 25, !dbg !50
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !50
  %253 = extractelement <32 x i1> %231, i64 24, !dbg !50
  %254 = extractelement <32 x float> %230, i64 24, !dbg !50
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !50
  %256 = extractelement <32 x i1> %231, i64 23, !dbg !52
  %257 = extractelement <32 x float> %230, i64 23, !dbg !52
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !52
  %259 = extractelement <32 x i1> %231, i64 22, !dbg !52
  %260 = extractelement <32 x float> %230, i64 22, !dbg !52
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !52
  %262 = extractelement <32 x i1> %231, i64 21, !dbg !52
  %263 = extractelement <32 x float> %230, i64 21, !dbg !52
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !52
  %265 = extractelement <32 x i1> %231, i64 20, !dbg !52
  %266 = extractelement <32 x float> %230, i64 20, !dbg !52
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !52
  %268 = extractelement <32 x i1> %231, i64 19, !dbg !52
  %269 = extractelement <32 x float> %230, i64 19, !dbg !52
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !52
  %271 = extractelement <32 x i1> %231, i64 18, !dbg !52
  %272 = extractelement <32 x float> %230, i64 18, !dbg !52
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !52
  %274 = extractelement <32 x i1> %231, i64 17, !dbg !52
  %275 = extractelement <32 x float> %230, i64 17, !dbg !52
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !52
  %277 = extractelement <32 x i1> %231, i64 16, !dbg !52
  %278 = extractelement <32 x float> %230, i64 16, !dbg !52
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !52
  %280 = extractelement <32 x i1> %231, i64 15, !dbg !54
  %281 = extractelement <32 x float> %230, i64 15, !dbg !54
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !54
  %283 = extractelement <32 x i1> %231, i64 14, !dbg !54
  %284 = extractelement <32 x float> %230, i64 14, !dbg !54
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !54
  %286 = extractelement <32 x i1> %231, i64 13, !dbg !54
  %287 = extractelement <32 x float> %230, i64 13, !dbg !54
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !54
  %289 = extractelement <32 x i1> %231, i64 12, !dbg !54
  %290 = extractelement <32 x float> %230, i64 12, !dbg !54
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !54
  %292 = extractelement <32 x i1> %231, i64 11, !dbg !54
  %293 = extractelement <32 x float> %230, i64 11, !dbg !54
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !54
  %295 = extractelement <32 x i1> %231, i64 10, !dbg !54
  %296 = extractelement <32 x float> %230, i64 10, !dbg !54
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !54
  %298 = extractelement <32 x i1> %231, i64 9, !dbg !54
  %299 = extractelement <32 x float> %230, i64 9, !dbg !54
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !54
  %301 = extractelement <32 x i1> %231, i64 8, !dbg !54
  %302 = extractelement <32 x float> %230, i64 8, !dbg !54
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !54
  %304 = extractelement <32 x i1> %231, i64 7, !dbg !56
  %305 = extractelement <32 x float> %230, i64 7, !dbg !56
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !56
  %307 = extractelement <32 x i1> %231, i64 6, !dbg !56
  %308 = extractelement <32 x float> %230, i64 6, !dbg !56
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !56
  %310 = extractelement <32 x i1> %231, i64 5, !dbg !56
  %311 = extractelement <32 x float> %230, i64 5, !dbg !56
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !56
  %313 = extractelement <32 x i1> %231, i64 4, !dbg !56
  %314 = extractelement <32 x float> %230, i64 4, !dbg !56
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !56
  %316 = extractelement <32 x i1> %231, i64 3, !dbg !56
  %317 = extractelement <32 x float> %230, i64 3, !dbg !56
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !56
  %319 = extractelement <32 x i1> %231, i64 2, !dbg !56
  %320 = extractelement <32 x float> %230, i64 2, !dbg !56
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !56
  %322 = extractelement <32 x i1> %231, i64 1, !dbg !56
  %323 = extractelement <32 x float> %230, i64 1, !dbg !56
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !56
  %325 = extractelement <32 x i1> %231, i64 0, !dbg !56
  %326 = extractelement <32 x float> %230, i64 0, !dbg !56
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !56
  %328 = select i1 %128, float %306, float 0.000000e+00, !dbg !57
  %329 = select i1 %128, float %309, float 0.000000e+00, !dbg !57
  %330 = select i1 %128, float %312, float 0.000000e+00, !dbg !57
  %331 = select i1 %128, float %315, float 0.000000e+00, !dbg !57
  %332 = select i1 %129, float %318, float 0.000000e+00, !dbg !57
  %333 = select i1 %129, float %321, float 0.000000e+00, !dbg !57
  %334 = select i1 %129, float %324, float 0.000000e+00, !dbg !57
  %335 = select i1 %129, float %327, float 0.000000e+00, !dbg !57
  %336 = select i1 %93, float %282, float %328, !dbg !58
  %337 = select i1 %93, float %285, float %329, !dbg !58
  %338 = select i1 %93, float %288, float %330, !dbg !58
  %339 = select i1 %93, float %291, float %331, !dbg !58
  %340 = select i1 %95, float %294, float %332, !dbg !58
  %341 = select i1 %95, float %297, float %333, !dbg !58
  %342 = select i1 %95, float %300, float %334, !dbg !58
  %343 = select i1 %95, float %303, float %335, !dbg !58
  %344 = select i1 %57, float %258, float %336, !dbg !58
  %345 = select i1 %57, float %261, float %337, !dbg !58
  %346 = select i1 %57, float %264, float %338, !dbg !58
  %347 = select i1 %57, float %267, float %339, !dbg !58
  %348 = select i1 %59, float %270, float %340, !dbg !58
  %349 = select i1 %59, float %273, float %341, !dbg !58
  %350 = select i1 %59, float %276, float %342, !dbg !58
  %351 = select i1 %59, float %279, float %343, !dbg !58
  %352 = select i1 %22, float %234, float %344, !dbg !58
  %353 = select i1 %22, float %237, float %345, !dbg !58
  %354 = select i1 %22, float %240, float %346, !dbg !58
  %355 = select i1 %22, float %243, float %347, !dbg !58
  %356 = select i1 %23, float %246, float %348, !dbg !58
  %357 = select i1 %23, float %249, float %349, !dbg !58
  %358 = select i1 %23, float %252, float %350, !dbg !58
  %359 = select i1 %23, float %255, float %351, !dbg !58
  %360 = sext i32 %16 to i64, !dbg !59
  %361 = getelementptr float, ptr addrspace(1) %8, i64 %360, !dbg !59
  %362 = sext i32 %17 to i64, !dbg !59
  %363 = getelementptr float, ptr addrspace(1) %8, i64 %362, !dbg !59
  %364 = bitcast float %352 to i32, !dbg !60
  %365 = bitcast float %353 to i32, !dbg !60
  %366 = bitcast float %354 to i32, !dbg !60
  %367 = bitcast float %355 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %365, i32 %366, i32 %367, ptr addrspace(1) %361, i1 true) #1, !dbg !60
  %368 = bitcast float %356 to i32, !dbg !60
  %369 = bitcast float %357 to i32, !dbg !60
  %370 = bitcast float %358 to i32, !dbg !60
  %371 = bitcast float %359 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %368, i32 %369, i32 %370, i32 %371, ptr addrspace(1) %363, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4obbe4wsfxvrb6x5aosf6fgcpjt3rtjni3rkmojurclvxo4ny53.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused_cat_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_33", linkageName: "triton_poi_fused_cat_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 42, column: 20, scope: !7)
!24 = !DILocation(line: 43, column: 35, scope: !7)
!25 = !DILocation(line: 43, column: 41, scope: !7)
!26 = !DILocation(line: 43, column: 31, scope: !7)
!27 = !DILocation(line: 43, column: 56, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 45, scope: !7)
!30 = !DILocation(line: 53, column: 20, scope: !7)
!31 = !DILocation(line: 54, column: 34, scope: !7)
!32 = !DILocation(line: 54, column: 40, scope: !7)
!33 = !DILocation(line: 54, column: 31, scope: !7)
!34 = !DILocation(line: 54, column: 55, scope: !7)
!35 = !DILocation(line: 55, column: 31, scope: !7)
!36 = !DILocation(line: 55, column: 45, scope: !7)
!37 = !DILocation(line: 61, column: 20, scope: !7)
!38 = !DILocation(line: 64, column: 34, scope: !7)
!39 = !DILocation(line: 64, column: 49, scope: !7)
!40 = !DILocation(line: 64, column: 40, scope: !7)
!41 = !DILocation(line: 64, column: 31, scope: !7)
!42 = !DILocation(line: 64, column: 55, scope: !7)
!43 = !DILocation(line: 65, column: 31, scope: !7)
!44 = !DILocation(line: 65, column: 45, scope: !7)
!45 = !DILocation(line: 66, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 68, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !51)
!51 = !DILocation(line: 36, column: 40, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !53)
!53 = !DILocation(line: 47, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !55)
!55 = !DILocation(line: 58, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!57 = !DILocation(line: 70, column: 35, scope: !7)
!58 = !DILocation(line: 0, scope: !7)
!59 = !DILocation(line: 74, column: 25, scope: !7)
!60 = !DILocation(line: 74, column: 37, scope: !7)
!61 = !DILocation(line: 74, column: 4, scope: !7)
