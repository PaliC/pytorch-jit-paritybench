; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 1556, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 389, !dbg !15
  %15 = mul i32 %14, 389, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl nsw i32 %.decomposed, 2, !dbg !17
  %17 = mul i32 %14, 1568, !dbg !18
  %18 = add i32 %16, %17, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %13) #3, !dbg !21
  %22 = sext i32 %.decomposed to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %13) #3, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %13) #3, !dbg !25
  %27 = bitcast i32 %26 to float, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %13) #3, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !28
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #3, !dbg !29
  %32 = or disjoint i32 %16, 1, !dbg !30
  %33 = add i32 %32, %17, !dbg !31
  %34 = sext i32 %33 to i64, !dbg !32
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !32
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #3, !dbg !33
  %37 = or disjoint i32 %16, 2, !dbg !34
  %38 = add i32 %37, %17, !dbg !35
  %39 = sext i32 %38 to i64, !dbg !36
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !36
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %13) #3, !dbg !37
  %42 = or disjoint i32 %16, 3, !dbg !38
  %43 = add i32 %42, %17, !dbg !39
  %44 = sext i32 %43 to i64, !dbg !40
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !40
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #3, !dbg !41
  %47 = fadd float %27, 0x3EE4F8B580000000, !dbg !42
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %48, 0, !dbg !43
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %49, 0, !dbg !43
  br i1 %.not.i, label %55, label %50, !dbg !43

50:                                               ; preds = %7
  br i1 %.not1.i, label %53, label %51, !dbg !43

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

55:                                               ; preds = %7
  br i1 %.not1.i, label %58, label %56, !dbg !43

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !43
  %60 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !41
  %61 = insertelement <4 x i32> %60, i32 %41, i64 1, !dbg !41
  %62 = insertelement <4 x i32> %61, i32 %36, i64 2, !dbg !41
  %63 = insertelement <4 x i32> %62, i32 %21, i64 3, !dbg !41
  %64 = bitcast <4 x i32> %63 to <4 x float>, !dbg !41
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %66 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !45
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !45
  %68 = shufflevector <4 x float> %67, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !45
  %69 = fsub <4 x float> %64, %68, !dbg !45
  %70 = insertelement <4 x float> poison, float %65, i64 0, !dbg !46
  %71 = shufflevector <4 x float> %70, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !46
  %72 = fmul <4 x float> %69, %71, !dbg !46
  %73 = insertelement <4 x i32> poison, i32 %29, i64 0, !dbg !47
  %74 = bitcast <4 x i32> %73 to <4 x float>, !dbg !47
  %75 = shufflevector <4 x float> %74, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !47
  %76 = fmul <4 x float> %72, %75, !dbg !47
  %77 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !48
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !48
  %79 = shufflevector <4 x float> %78, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !48
  %80 = fadd <4 x float> %76, %79, !dbg !48
  %81 = fcmp olt <4 x float> %80, zeroinitializer, !dbg !49
  %82 = extractelement <4 x i1> %81, i64 3, !dbg !53
  %83 = extractelement <4 x float> %80, i64 3, !dbg !53
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !53
  %85 = extractelement <4 x i1> %81, i64 2, !dbg !55
  %86 = extractelement <4 x float> %80, i64 2, !dbg !55
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !55
  %88 = fadd float %84, %87, !dbg !57
  %89 = extractelement <4 x i1> %81, i64 1, !dbg !58
  %90 = extractelement <4 x float> %80, i64 1, !dbg !58
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !58
  %92 = fadd float %91, %88, !dbg !60
  %93 = extractelement <4 x i1> %81, i64 0, !dbg !61
  %94 = extractelement <4 x float> %80, i64 0, !dbg !61
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !61
  %96 = fadd float %95, %92, !dbg !62
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #3, !dbg !63
  %98 = sext i32 %12 to i64, !dbg !64
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %98, !dbg !64
  %100 = bitcast float %97 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %99, i1 %13) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ul4ity52tprmqfdernmq2a63xyv6ubxpz2pjopk23vlr5qjfsn.py", directory: "inductor_cache/4u")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 42, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 47, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 30, column: 31, scope: !7)
!27 = !DILocation(line: 30, column: 36, scope: !7)
!28 = !DILocation(line: 31, column: 31, scope: !7)
!29 = !DILocation(line: 31, column: 36, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 52, scope: !7)
!34 = !DILocation(line: 33, column: 35, scope: !7)
!35 = !DILocation(line: 33, column: 42, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 52, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 52, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 26, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 64, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !54)
!54 = !DILocation(line: 47, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !56)
!56 = !DILocation(line: 52, column: 42, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !59)
!59 = !DILocation(line: 58, column: 42, scope: !7)
!60 = !DILocation(line: 59, column: 20, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 68, column: 4, scope: !7)
