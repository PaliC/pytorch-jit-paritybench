; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen6 = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen6, 4096, !dbg !14
  %19 = srem i32 %18, 80, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %20 = sdiv i32 %.frozen, 64, !dbg !16
  %21 = srem i32 %20, 64, !dbg !17
  %22 = mul i32 %20, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = sdiv i32 %17, 327680, !dbg !19
  %24 = mul i32 %18, 4096, !dbg !20
  %.decomposed7 = sub i32 %.frozen6, %24, !dbg !20
  %25 = sext i32 %19 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !28
  %40 = icmp slt i32 %19, 64, !dbg !29
  %41 = sext i32 %21 to i64, !dbg !30
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !30
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %40, i1 %40) #3, !dbg !31
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %40, i1 %40) #3, !dbg !31
  %45 = lshr i64 %43, 58, !dbg !32
  %46 = and i64 %45, 32, !dbg !32
  %47 = add i64 %46, %43, !dbg !32
  %48 = sext i32 %.decomposed to i64, !dbg !33
  %49 = getelementptr i64, ptr addrspace(1) %0, i64 %48, !dbg !33
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %49, i1 %40, i1 %40, i1 %40) #3, !dbg !34
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !34
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !34
  %53 = lshr i64 %51, 58, !dbg !35
  %54 = and i64 %53, 32, !dbg !35
  %55 = lshr i64 %52, 58, !dbg !35
  %56 = and i64 %55, 32, !dbg !35
  %57 = shl i64 %47, 5, !dbg !36
  %58 = shl nsw i32 %19, 10, !dbg !37
  %59 = shl nsw i32 %23, 16, !dbg !38
  %narrow = add nsw i32 %58, %59, !dbg !35
  %60 = sext i32 %narrow to i64, !dbg !35
  %61 = add i64 %51, %60, !dbg !39
  %62 = add i64 %61, %57, !dbg !40
  %63 = add i64 %62, %54, !dbg !41
  %64 = add i64 %52, %60, !dbg !39
  %65 = add i64 %64, %57, !dbg !40
  %66 = add i64 %65, %56, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !42
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %40, i32 0, i1 %40) #3, !dbg !43
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %40, i32 0, i1 %40) #3, !dbg !43
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !44
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !44
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %40, i32 0, i1 %40) #3, !dbg !45
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %40, i32 0, i1 %40) #3, !dbg !45
  %75 = icmp sgt i32 %19, 63, !dbg !46
  %76 = shl nsw i32 %19, 12, !dbg !47
  %77 = add nsw i32 %.decomposed7, -262144, !dbg !47
  %78 = add nsw i32 %77, %59, !dbg !48
  %79 = add nsw i32 %78, %76, !dbg !49
  %80 = sext i32 %79 to i64, !dbg !50
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !50
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !51
  %83 = fadd float %31, 0x3EE4F8B580000000, !dbg !52
  %84 = fadd float %33, 0x3EE4F8B580000000, !dbg !52
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %85, 0, !dbg !53
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %86, 0, !dbg !53
  br i1 %.not.i, label %92, label %87, !dbg !53

87:                                               ; preds = %11
  br i1 %.not1.i, label %90, label %88, !dbg !53

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

92:                                               ; preds = %11
  br i1 %.not1.i, label %95, label %93, !dbg !53

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !53
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %97, 0, !dbg !53
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %98, 0, !dbg !53
  br i1 %.not.i1, label %104, label %99, !dbg !53

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !53

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !53

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %100, %102, %105, %107
  %.0.i3 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !53
  %109 = bitcast i32 %70 to float, !dbg !43
  %110 = bitcast i32 %74 to float, !dbg !45
  %111 = fmul float %109, %110, !dbg !54
  %112 = extractvalue { i32, i32 } %82, 1, !dbg !51
  %113 = bitcast i32 %112 to float, !dbg !51
  %114 = select i1 %40, float %111, float %113, !dbg !55
  %115 = bitcast i32 %28 to float, !dbg !22
  %116 = fsub float %114, %115, !dbg !56
  %117 = bitcast i32 %69 to float, !dbg !43
  %118 = bitcast i32 %73 to float, !dbg !45
  %119 = fmul float %117, %118, !dbg !54
  %120 = extractvalue { i32, i32 } %82, 0, !dbg !51
  %121 = bitcast i32 %120 to float, !dbg !51
  %122 = select i1 %40, float %119, float %121, !dbg !55
  %123 = bitcast i32 %27 to float, !dbg !22
  %124 = fsub float %122, %123, !dbg !56
  %125 = bitcast i32 %39 to float, !dbg !28
  %126 = bitcast i32 %38 to float, !dbg !28
  %127 = bitcast i32 %36 to float, !dbg !26
  %128 = bitcast i32 %35 to float, !dbg !26
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !57
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !57
  %131 = fmul float %124, %129, !dbg !58
  %132 = fmul float %116, %130, !dbg !58
  %133 = fmul float %131, %128, !dbg !59
  %134 = fmul float %132, %127, !dbg !59
  %135 = fadd float %133, %126, !dbg !60
  %136 = fadd float %134, %125, !dbg !60
  %137 = fcmp olt float %135, 0.000000e+00, !dbg !61
  %138 = fcmp olt float %136, 0.000000e+00, !dbg !61
  %139 = select i1 %137, float 0.000000e+00, float %135, !dbg !65
  %140 = select i1 %138, float 0.000000e+00, float %136, !dbg !65
  %141 = sext i32 %17 to i64, !dbg !66
  %142 = getelementptr float, ptr addrspace(1) %8, i64 %141, !dbg !66
  %143 = bitcast float %122 to i32, !dbg !67
  %144 = bitcast float %114 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 true) #3, !dbg !67
  %145 = getelementptr float, ptr addrspace(1) %9, i64 %141, !dbg !68
  %146 = bitcast float %139 to i32, !dbg !69
  %147 = bitcast float %140 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 true) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cygi5av5mv6f7nvgguqgdu5acb7mgcbi5t75mp26r7u67twq4kph.py", directory: "inductor_cache/yg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 35, scope: !7)
!32 = !DILocation(line: 43, column: 32, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 35, scope: !7)
!36 = !DILocation(line: 48, column: 42, scope: !7)
!37 = !DILocation(line: 48, column: 55, scope: !7)
!38 = !DILocation(line: 48, column: 67, scope: !7)
!39 = !DILocation(line: 48, column: 39, scope: !7)
!40 = !DILocation(line: 48, column: 49, scope: !7)
!41 = !DILocation(line: 48, column: 61, scope: !7)
!42 = !DILocation(line: 48, column: 31, scope: !7)
!43 = !DILocation(line: 48, column: 72, scope: !7)
!44 = !DILocation(line: 49, column: 31, scope: !7)
!45 = !DILocation(line: 49, column: 72, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 42, scope: !7)
!48 = !DILocation(line: 56, column: 36, scope: !7)
!49 = !DILocation(line: 56, column: 56, scope: !7)
!50 = !DILocation(line: 56, column: 31, scope: !7)
!51 = !DILocation(line: 56, column: 67, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 27, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 0, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 70, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 71, column: 25, scope: !7)
!67 = !DILocation(line: 71, column: 37, scope: !7)
!68 = !DILocation(line: 72, column: 25, scope: !7)
!69 = !DILocation(line: 72, column: 37, scope: !7)
!70 = !DILocation(line: 72, column: 4, scope: !7)
