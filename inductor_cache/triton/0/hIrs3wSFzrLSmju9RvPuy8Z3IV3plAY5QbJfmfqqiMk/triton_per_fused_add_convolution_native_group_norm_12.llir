; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_convolution_native_group_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 126, !dbg !12
  %16 = and i32 %11, 63, !dbg !12
  %17 = or disjoint i32 %16, 64, !dbg !12
  %18 = lshr i32 %16, 4, !dbg !13
  %19 = lshr i32 %17, 4, !dbg !13
  %20 = shl i32 %9, 7, !dbg !14
  %21 = or disjoint i32 %20, %15, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !17
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %.idx = shl nuw nsw i32 %15, 3, !dbg !17
  %27 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !17
  %28 = insertelement <1 x i32> poison, i32 %25, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %28, i1 true) #5, !dbg !17
  %29 = shl nuw nsw i32 %15, 1, !dbg !17
  %30 = or disjoint i32 %29, 2, !dbg !17
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !17
  %32 = insertelement <1 x i32> poison, i32 %26, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %32, i1 true) #5, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %.idx1 = shl nuw nsw i32 %16, 3, !dbg !17
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !17
  %34 = load float, ptr addrspace(3) %33, align 8, !dbg !17
  %.idx2 = shl nuw nsw i32 %17, 3, !dbg !17
  %35 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !17
  %36 = load float, ptr addrspace(3) %35, align 8, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !19
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %41 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %41, i1 true) #5, !dbg !19
  %42 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %42, i1 true) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %43 = load float, ptr addrspace(3) %33, align 8, !dbg !19
  %44 = load float, ptr addrspace(3) %35, align 8, !dbg !19
  %45 = zext nneg i32 %18 to i64, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !20
  %47 = zext nneg i32 %19 to i64, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !21
  %51 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !21
  %52 = insertelement <2 x i32> %51, i32 %50, i64 1, !dbg !21
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !21
  %54 = insertelement <2 x float> poison, float %43, i64 0, !dbg !22
  %55 = insertelement <2 x float> %54, float %44, i64 1, !dbg !22
  %56 = fadd <2 x float> %55, %53, !dbg !22
  %57 = insertelement <2 x float> poison, float %34, i64 0, !dbg !23
  %58 = insertelement <2 x float> %57, float %36, i64 1, !dbg !23
  %59 = fadd <2 x float> %58, %56, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %60 = extractelement <2 x float> %59, i64 0, !dbg !28
  %61 = extractelement <2 x float> %59, i64 1, !dbg !28
  %62 = fadd float %60, %61, !dbg !28
  %63 = select i1 %10, float %62, float 0.000000e+00, !dbg !28
  %64 = bitcast float %63 to i32, !dbg !24
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !24
  %66 = bitcast i32 %65 to float, !dbg !24
  %67 = fadd float %63, %66, !dbg !28
  %68 = bitcast float %67 to i32, !dbg !24
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !24
  %70 = bitcast i32 %69 to float, !dbg !24
  %71 = fadd float %67, %70, !dbg !28
  %72 = bitcast float %71 to i32, !dbg !24
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !24
  %74 = bitcast i32 %73 to float, !dbg !24
  %75 = fadd float %71, %74, !dbg !28
  %76 = bitcast float %75 to i32, !dbg !24
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !24
  %78 = bitcast i32 %77 to float, !dbg !24
  %79 = fadd float %75, %78, !dbg !28
  %80 = bitcast float %79 to i32, !dbg !24
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !24
  %82 = bitcast i32 %81 to float, !dbg !24
  %83 = fadd float %79, %82, !dbg !28
  %84 = icmp eq i32 %12, 0, !dbg !24
  %85 = and i32 %13, 1, !dbg !24
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !24
  %87 = bitcast float %83 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %84) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %88 = icmp slt i32 %11, 2, !dbg !24
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !24
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #5, !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !24
  %93 = bitcast i32 %92 to float, !dbg !24
  %94 = fadd float %91, %93, !dbg !28
  %95 = and i32 %11, 1, !dbg !24
  %96 = icmp eq i32 %95, 0, !dbg !24
  %97 = and i1 %88, %96, !dbg !24
  %98 = bitcast float %94 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %98, i1 %97) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %99 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 1.280000e+02) #5, !dbg !30
  %101 = fsub float %60, %100, !dbg !31
  %102 = fsub float %61, %100, !dbg !31
  %103 = fmul float %101, %101, !dbg !32
  %104 = fmul float %102, %102, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %105 = fadd float %103, %104, !dbg !35
  %106 = select i1 %10, float %105, float 0.000000e+00, !dbg !35
  %107 = bitcast float %106 to i32, !dbg !33
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = fadd float %106, %109, !dbg !35
  %111 = bitcast float %110 to i32, !dbg !33
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = fadd float %110, %113, !dbg !35
  %115 = bitcast float %114 to i32, !dbg !33
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = fadd float %114, %117, !dbg !35
  %119 = bitcast float %118 to i32, !dbg !33
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !33
  %121 = bitcast i32 %120 to float, !dbg !33
  %122 = fadd float %118, %121, !dbg !35
  %123 = bitcast float %122 to i32, !dbg !33
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !33
  %125 = bitcast i32 %124 to float, !dbg !33
  %126 = fadd float %122, %125, !dbg !35
  %127 = bitcast float %126 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %127, i1 %84) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #5, !dbg !33
  %129 = bitcast i32 %128 to float, !dbg !33
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !33
  %131 = bitcast i32 %130 to float, !dbg !33
  %132 = fadd float %129, %131, !dbg !35
  %133 = bitcast float %132 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %133, i1 %97) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %134 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 1.280000e+02) #5, !dbg !36
  %136 = fadd float %135, 0x3EE4F8B580000000, !dbg !37
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %137, 0, !dbg !38
  br i1 %.not.i, label %140, label %138, !dbg !38

138:                                              ; preds = %8
  %139 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

140:                                              ; preds = %8
  %141 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %138, %140
  %.0.i = phi float [ %139, %138 ], [ %141, %140 ], !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !39
  %143 = bitcast float %60 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #5, !dbg !39
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !39
  %145 = bitcast float %61 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !39
  %.extract = load i32, ptr addrspace(3) %146, align 8, !dbg !39
  %147 = getelementptr inbounds i8, ptr addrspace(3) %146, i32 4, !dbg !39
  %.extract4 = load i32, ptr addrspace(3) %147, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %37, i1 %10) #5, !dbg !39
  %148 = sext i32 %9 to i64, !dbg !40
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %148, !dbg !40
  %150 = icmp eq i32 %16, 0, !dbg !41
  %151 = bitcast float %.0.i to i32, !dbg !41
  %152 = and i1 %150, %10, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %149, i1 %152) #5, !dbg !41
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !42
  %154 = bitcast float %100 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %153, i1 %152) #5, !dbg !43
  %155 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !44
  %156 = bitcast float %134 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %155, i1 %152) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py", directory: "inductor_cache/4a")
!4 = !{ptr @triton_per_fused_add_convolution_native_group_norm_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_native_group_norm_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_native_group_norm_12", linkageName: "triton_per_fused_add_convolution_native_group_norm_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 44, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 41, column: 26, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 49, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !34)
!36 = !DILocation(line: 51, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 54, column: 28, scope: !7)
!39 = !DILocation(line: 55, column: 48, scope: !7)
!40 = !DILocation(line: 56, column: 25, scope: !7)
!41 = !DILocation(line: 56, column: 37, scope: !7)
!42 = !DILocation(line: 57, column: 25, scope: !7)
!43 = !DILocation(line: 57, column: 37, scope: !7)
!44 = !DILocation(line: 58, column: 25, scope: !7)
!45 = !DILocation(line: 58, column: 37, scope: !7)
!46 = !DILocation(line: 58, column: 4, scope: !7)
