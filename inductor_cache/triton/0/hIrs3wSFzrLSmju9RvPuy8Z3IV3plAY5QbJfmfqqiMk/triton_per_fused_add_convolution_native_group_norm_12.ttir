#loc = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":41:26)
#loc26 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":49:26)
#loc40 = loc(callsite(#loc1 at #loc19))
#loc43 = loc(callsite(#loc1 at #loc26))
module {
  tt.func public @triton_per_fused_add_convolution_native_group_norm_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0), %arg6: i32 loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":19:0)) attributes {noinline = false} {
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<9.99999974E-6> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.280000e+02> : tensor<1x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x128xf32> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<1x128xi32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc5)
    %5 = arith.divsi %4, %cst_2 : tensor<1x128xi32> loc(#loc6)
    %6 = arith.muli %0, %c128_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x128xi32> loc(#loc8)
    %8 = arith.addi %4, %7 : tensor<1x128xi32> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.addptr %9, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x128xi1> loc(#loc10)
    %12 = tt.load %10, %11, %cst_1 : tensor<1x128x!tt.ptr<f32>> loc(#loc10)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %13, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc11)
    %15 = tt.load %14, %11, %cst_1 : tensor<1x128x!tt.ptr<f32>> loc(#loc12)
    %16 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc13)
    %17 = tt.addptr %16, %5 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc13)
    %18 = tt.load %17 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc14)
    %19 = arith.addf %15, %18 : tensor<1x128xf32> loc(#loc15)
    %20 = arith.addf %12, %19 : tensor<1x128xf32> loc(#loc16)
    %21 = arith.select %11, %20, %cst_1 : tensor<1x128xi1>, tensor<1x128xf32> loc(#loc17)
    %22 = "tt.reduce"(%21) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc19)), %arg9: f32 loc(callsite(#loc1 at #loc19))):
      %40 = arith.addf %arg8, %arg9 : f32 loc(#loc44)
      tt.reduce.return %40 : f32 loc(#loc39)
    }) : (tensor<1x128xf32>) -> tensor<1xf32> loc(#loc39)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc21)
    %24 = arith.divf %23, %cst_0 : tensor<1x1xf32> loc(#loc22)
    %25 = tt.broadcast %24 : tensor<1x1xf32> -> tensor<1x128xf32> loc(#loc23)
    %26 = arith.subf %20, %25 : tensor<1x128xf32> loc(#loc23)
    %27 = arith.mulf %26, %26 : tensor<1x128xf32> loc(#loc24)
    %28 = arith.select %11, %27, %cst_1 : tensor<1x128xi1>, tensor<1x128xf32> loc(#loc25)
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc26)), %arg9: f32 loc(callsite(#loc1 at #loc26))):
      %40 = arith.addf %arg8, %arg9 : f32 loc(#loc45)
      tt.reduce.return %40 : f32 loc(#loc42)
    }) : (tensor<1x128xf32>) -> tensor<1xf32> loc(#loc42)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc27)
    %31 = arith.divf %30, %cst_0 : tensor<1x1xf32> loc(#loc28)
    %32 = arith.addf %31, %cst : tensor<1x1xf32> loc(#loc29)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc30)
    tt.store %14, %20, %11 : tensor<1x128x!tt.ptr<f32>> loc(#loc31)
    %34 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc32)
    tt.store %35, %33, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc33)
    %36 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc34)
    tt.store %37, %24, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc35)
    %38 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc36)
    %39 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc36)
    tt.store %39, %30, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":23:28)
#loc3 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":25:21)
#loc4 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":26:26)
#loc5 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":26:34)
#loc6 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":31:19)
#loc7 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":32:39)
#loc8 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":32:35)
#loc9 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":32:30)
#loc10 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":32:44)
#loc11 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":33:34)
#loc12 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":33:48)
#loc13 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":34:30)
#loc14 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":34:35)
#loc15 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":35:18)
#loc16 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":36:18)
#loc17 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":40:34)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":41:29)
#loc22 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":44:20)
#loc23 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":45:19)
#loc24 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":46:20)
#loc25 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":48:35)
#loc27 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":49:29)
#loc28 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":51:20)
#loc29 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":53:20)
#loc30 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":54:28)
#loc31 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":55:48)
#loc32 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":56:25)
#loc33 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":56:37)
#loc34 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":57:25)
#loc35 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":57:37)
#loc36 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":58:25)
#loc37 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":58:37)
#loc38 = loc("inductor_cache/4a/c4ad5blhetcbhrhzllpiragb6yupngbwhvrf6sipfvwbcsss4x3x.py":58:4)
#loc39 = loc(callsite(#loc18 at #loc19))
#loc41 = loc(callsite(#loc20 at #loc18))
#loc42 = loc(callsite(#loc18 at #loc26))
#loc44 = loc(callsite(#loc41 at #loc19))
#loc45 = loc(callsite(#loc41 at #loc26))
