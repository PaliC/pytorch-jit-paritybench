; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 3072, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 64, !dbg !15
  %12 = mul i32 %11, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %12, !dbg !16
  %13 = srem i32 %11, 3, !dbg !17
  %14 = sdiv i32 %9, 192, !dbg !18
  %15 = mul nsw i32 %13, 1280, !dbg !19
  %16 = shl i32 %14, 12, !dbg !20
  %17 = add i32 %16, %.decomposed, !dbg !21
  %18 = add i32 %17, %15, !dbg !22
  %19 = sext i32 %18 to i64, !dbg !23
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !23
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %10) #1, !dbg !24
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !24
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !24
  %24 = bitcast i32 %22 to float, !dbg !24
  %25 = bitcast i32 %23 to float, !dbg !24
  %26 = add i32 %17, 64, !dbg !25
  %27 = add i32 %26, %15, !dbg !26
  %28 = sext i32 %27 to i64, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !27
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %10) #1, !dbg !28
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !28
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !28
  %33 = bitcast i32 %31 to float, !dbg !28
  %34 = bitcast i32 %32 to float, !dbg !28
  %35 = add i32 %17, 128, !dbg !29
  %36 = add i32 %35, %15, !dbg !30
  %37 = sext i32 %36 to i64, !dbg !31
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !31
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %10) #1, !dbg !32
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !32
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !32
  %42 = bitcast i32 %40 to float, !dbg !32
  %43 = bitcast i32 %41 to float, !dbg !32
  %44 = add i32 %17, 192, !dbg !33
  %45 = add i32 %44, %15, !dbg !34
  %46 = sext i32 %45 to i64, !dbg !35
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !35
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %10) #1, !dbg !36
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !36
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !36
  %51 = bitcast i32 %49 to float, !dbg !36
  %52 = bitcast i32 %50 to float, !dbg !36
  %53 = add i32 %17, 256, !dbg !37
  %54 = add i32 %53, %15, !dbg !38
  %55 = sext i32 %54 to i64, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !39
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %10) #1, !dbg !40
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !40
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !40
  %60 = bitcast i32 %58 to float, !dbg !40
  %61 = bitcast i32 %59 to float, !dbg !40
  %62 = add i32 %17, 320, !dbg !41
  %63 = add i32 %62, %15, !dbg !42
  %64 = sext i32 %63 to i64, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !43
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %10) #1, !dbg !44
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !44
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !44
  %69 = bitcast i32 %67 to float, !dbg !44
  %70 = bitcast i32 %68 to float, !dbg !44
  %71 = add i32 %17, 384, !dbg !45
  %72 = add i32 %71, %15, !dbg !46
  %73 = sext i32 %72 to i64, !dbg !47
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !47
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %10) #1, !dbg !48
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !48
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !48
  %78 = bitcast i32 %76 to float, !dbg !48
  %79 = bitcast i32 %77 to float, !dbg !48
  %80 = add i32 %17, 448, !dbg !49
  %81 = add i32 %80, %15, !dbg !50
  %82 = sext i32 %81 to i64, !dbg !51
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !51
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %10) #1, !dbg !52
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !52
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !52
  %87 = bitcast i32 %85 to float, !dbg !52
  %88 = bitcast i32 %86 to float, !dbg !52
  %89 = add i32 %17, 512, !dbg !53
  %90 = add i32 %89, %15, !dbg !54
  %91 = sext i32 %90 to i64, !dbg !55
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !55
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 %10) #1, !dbg !56
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !56
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !56
  %96 = bitcast i32 %94 to float, !dbg !56
  %97 = bitcast i32 %95 to float, !dbg !56
  %98 = add i32 %17, 576, !dbg !57
  %99 = add i32 %98, %15, !dbg !58
  %100 = sext i32 %99 to i64, !dbg !59
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !59
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %101, i1 %10) #1, !dbg !60
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !60
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !60
  %105 = bitcast i32 %103 to float, !dbg !60
  %106 = bitcast i32 %104 to float, !dbg !60
  %107 = add i32 %17, 640, !dbg !61
  %108 = add i32 %107, %15, !dbg !62
  %109 = sext i32 %108 to i64, !dbg !63
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !63
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %10) #1, !dbg !64
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !64
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !64
  %114 = bitcast i32 %112 to float, !dbg !64
  %115 = bitcast i32 %113 to float, !dbg !64
  %116 = add i32 %17, 704, !dbg !65
  %117 = add i32 %116, %15, !dbg !66
  %118 = sext i32 %117 to i64, !dbg !67
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !67
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %119, i1 %10) #1, !dbg !68
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !68
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !68
  %123 = bitcast i32 %121 to float, !dbg !68
  %124 = bitcast i32 %122 to float, !dbg !68
  %125 = add i32 %17, 768, !dbg !69
  %126 = add i32 %125, %15, !dbg !70
  %127 = sext i32 %126 to i64, !dbg !71
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !71
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %128, i1 %10) #1, !dbg !72
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !72
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !72
  %132 = bitcast i32 %130 to float, !dbg !72
  %133 = bitcast i32 %131 to float, !dbg !72
  %134 = add i32 %17, 832, !dbg !73
  %135 = add i32 %134, %15, !dbg !74
  %136 = sext i32 %135 to i64, !dbg !75
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !75
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %137, i1 %10) #1, !dbg !76
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !76
  %140 = extractvalue { i32, i32 } %138, 1, !dbg !76
  %141 = bitcast i32 %139 to float, !dbg !76
  %142 = bitcast i32 %140 to float, !dbg !76
  %143 = add i32 %17, 896, !dbg !77
  %144 = add i32 %143, %15, !dbg !78
  %145 = sext i32 %144 to i64, !dbg !79
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !79
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %146, i1 %10) #1, !dbg !80
  %148 = extractvalue { i32, i32 } %147, 0, !dbg !80
  %149 = extractvalue { i32, i32 } %147, 1, !dbg !80
  %150 = bitcast i32 %148 to float, !dbg !80
  %151 = bitcast i32 %149 to float, !dbg !80
  %152 = add i32 %17, 960, !dbg !81
  %153 = add i32 %152, %15, !dbg !82
  %154 = sext i32 %153 to i64, !dbg !83
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !83
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %155, i1 %10) #1, !dbg !84
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !84
  %158 = extractvalue { i32, i32 } %156, 1, !dbg !84
  %159 = bitcast i32 %157 to float, !dbg !84
  %160 = bitcast i32 %158 to float, !dbg !84
  %161 = add i32 %17, 1024, !dbg !85
  %162 = add i32 %161, %15, !dbg !86
  %163 = sext i32 %162 to i64, !dbg !87
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !87
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %164, i1 %10) #1, !dbg !88
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !88
  %167 = extractvalue { i32, i32 } %165, 1, !dbg !88
  %168 = bitcast i32 %166 to float, !dbg !88
  %169 = bitcast i32 %167 to float, !dbg !88
  %170 = add i32 %17, 1088, !dbg !89
  %171 = add i32 %170, %15, !dbg !90
  %172 = sext i32 %171 to i64, !dbg !91
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !91
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %173, i1 %10) #1, !dbg !92
  %175 = extractvalue { i32, i32 } %174, 0, !dbg !92
  %176 = extractvalue { i32, i32 } %174, 1, !dbg !92
  %177 = bitcast i32 %175 to float, !dbg !92
  %178 = bitcast i32 %176 to float, !dbg !92
  %179 = add i32 %17, 1152, !dbg !93
  %180 = add i32 %179, %15, !dbg !94
  %181 = sext i32 %180 to i64, !dbg !95
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !95
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %182, i1 %10) #1, !dbg !96
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !96
  %185 = extractvalue { i32, i32 } %183, 1, !dbg !96
  %186 = bitcast i32 %184 to float, !dbg !96
  %187 = bitcast i32 %185 to float, !dbg !96
  %188 = add i32 %17, 1216, !dbg !97
  %189 = add i32 %188, %15, !dbg !98
  %190 = sext i32 %189 to i64, !dbg !99
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !99
  %192 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %191, i1 %10) #1, !dbg !100
  %193 = extractvalue { i32, i32 } %192, 0, !dbg !100
  %194 = extractvalue { i32, i32 } %192, 1, !dbg !100
  %195 = bitcast i32 %193 to float, !dbg !100
  %196 = bitcast i32 %194 to float, !dbg !100
  %197 = fadd float %24, %33, !dbg !101
  %198 = fadd float %25, %34, !dbg !101
  %199 = fadd float %197, %42, !dbg !102
  %200 = fadd float %198, %43, !dbg !102
  %201 = fadd float %199, %51, !dbg !103
  %202 = fadd float %200, %52, !dbg !103
  %203 = fadd float %201, %60, !dbg !104
  %204 = fadd float %202, %61, !dbg !104
  %205 = fadd float %203, %69, !dbg !105
  %206 = fadd float %204, %70, !dbg !105
  %207 = fadd float %205, %78, !dbg !106
  %208 = fadd float %206, %79, !dbg !106
  %209 = fadd float %207, %87, !dbg !107
  %210 = fadd float %208, %88, !dbg !107
  %211 = fadd float %209, %96, !dbg !108
  %212 = fadd float %210, %97, !dbg !108
  %213 = fadd float %211, %105, !dbg !109
  %214 = fadd float %212, %106, !dbg !109
  %215 = fadd float %213, %114, !dbg !110
  %216 = fadd float %214, %115, !dbg !110
  %217 = fadd float %215, %123, !dbg !111
  %218 = fadd float %216, %124, !dbg !111
  %219 = fadd float %217, %132, !dbg !112
  %220 = fadd float %218, %133, !dbg !112
  %221 = fadd float %219, %141, !dbg !113
  %222 = fadd float %220, %142, !dbg !113
  %223 = fadd float %221, %150, !dbg !114
  %224 = fadd float %222, %151, !dbg !114
  %225 = fadd float %223, %159, !dbg !115
  %226 = fadd float %224, %160, !dbg !115
  %227 = fadd float %225, %168, !dbg !116
  %228 = fadd float %226, %169, !dbg !116
  %229 = fadd float %227, %177, !dbg !117
  %230 = fadd float %228, %178, !dbg !117
  %231 = fadd float %229, %186, !dbg !118
  %232 = fadd float %230, %187, !dbg !118
  %233 = fadd float %231, %195, !dbg !119
  %234 = fadd float %232, %196, !dbg !119
  %235 = fmul float %233, 0x3FA99999A0000000, !dbg !120
  %236 = fmul float %234, 0x3FA99999A0000000, !dbg !120
  %237 = sext i32 %9 to i64, !dbg !121
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !121
  %239 = bitcast float %235 to i32, !dbg !122
  %240 = bitcast float %236 to i32, !dbg !122
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %239, i32 %240, ptr addrspace(1) %238, i1 %10) #1, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz5ufmyzuiqqeh73k27xzeku6ebvy6hcxqnznku22rfxruzyiag6.py", directory: "inductor_cache/z5")
!4 = !{ptr @triton_poi_fused_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_0", linkageName: "triton_poi_fused_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 40, scope: !7)
!20 = !DILocation(line: 28, column: 50, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 45, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 55, scope: !7)
!25 = !DILocation(line: 29, column: 40, scope: !7)
!26 = !DILocation(line: 29, column: 50, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 60, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 51, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 61, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 31, column: 51, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 61, scope: !7)
!37 = !DILocation(line: 32, column: 41, scope: !7)
!38 = !DILocation(line: 32, column: 51, scope: !7)
!39 = !DILocation(line: 32, column: 30, scope: !7)
!40 = !DILocation(line: 32, column: 61, scope: !7)
!41 = !DILocation(line: 33, column: 41, scope: !7)
!42 = !DILocation(line: 33, column: 51, scope: !7)
!43 = !DILocation(line: 33, column: 30, scope: !7)
!44 = !DILocation(line: 33, column: 61, scope: !7)
!45 = !DILocation(line: 34, column: 42, scope: !7)
!46 = !DILocation(line: 34, column: 52, scope: !7)
!47 = !DILocation(line: 34, column: 31, scope: !7)
!48 = !DILocation(line: 34, column: 62, scope: !7)
!49 = !DILocation(line: 35, column: 42, scope: !7)
!50 = !DILocation(line: 35, column: 52, scope: !7)
!51 = !DILocation(line: 35, column: 31, scope: !7)
!52 = !DILocation(line: 35, column: 62, scope: !7)
!53 = !DILocation(line: 36, column: 42, scope: !7)
!54 = !DILocation(line: 36, column: 52, scope: !7)
!55 = !DILocation(line: 36, column: 31, scope: !7)
!56 = !DILocation(line: 36, column: 62, scope: !7)
!57 = !DILocation(line: 37, column: 42, scope: !7)
!58 = !DILocation(line: 37, column: 52, scope: !7)
!59 = !DILocation(line: 37, column: 31, scope: !7)
!60 = !DILocation(line: 37, column: 62, scope: !7)
!61 = !DILocation(line: 38, column: 42, scope: !7)
!62 = !DILocation(line: 38, column: 52, scope: !7)
!63 = !DILocation(line: 38, column: 31, scope: !7)
!64 = !DILocation(line: 38, column: 62, scope: !7)
!65 = !DILocation(line: 39, column: 42, scope: !7)
!66 = !DILocation(line: 39, column: 52, scope: !7)
!67 = !DILocation(line: 39, column: 31, scope: !7)
!68 = !DILocation(line: 39, column: 62, scope: !7)
!69 = !DILocation(line: 40, column: 42, scope: !7)
!70 = !DILocation(line: 40, column: 52, scope: !7)
!71 = !DILocation(line: 40, column: 31, scope: !7)
!72 = !DILocation(line: 40, column: 62, scope: !7)
!73 = !DILocation(line: 41, column: 42, scope: !7)
!74 = !DILocation(line: 41, column: 52, scope: !7)
!75 = !DILocation(line: 41, column: 31, scope: !7)
!76 = !DILocation(line: 41, column: 62, scope: !7)
!77 = !DILocation(line: 42, column: 42, scope: !7)
!78 = !DILocation(line: 42, column: 52, scope: !7)
!79 = !DILocation(line: 42, column: 31, scope: !7)
!80 = !DILocation(line: 42, column: 62, scope: !7)
!81 = !DILocation(line: 43, column: 42, scope: !7)
!82 = !DILocation(line: 43, column: 52, scope: !7)
!83 = !DILocation(line: 43, column: 31, scope: !7)
!84 = !DILocation(line: 43, column: 62, scope: !7)
!85 = !DILocation(line: 44, column: 43, scope: !7)
!86 = !DILocation(line: 44, column: 53, scope: !7)
!87 = !DILocation(line: 44, column: 31, scope: !7)
!88 = !DILocation(line: 44, column: 63, scope: !7)
!89 = !DILocation(line: 45, column: 43, scope: !7)
!90 = !DILocation(line: 45, column: 53, scope: !7)
!91 = !DILocation(line: 45, column: 31, scope: !7)
!92 = !DILocation(line: 45, column: 63, scope: !7)
!93 = !DILocation(line: 46, column: 43, scope: !7)
!94 = !DILocation(line: 46, column: 53, scope: !7)
!95 = !DILocation(line: 46, column: 31, scope: !7)
!96 = !DILocation(line: 46, column: 63, scope: !7)
!97 = !DILocation(line: 47, column: 43, scope: !7)
!98 = !DILocation(line: 47, column: 53, scope: !7)
!99 = !DILocation(line: 47, column: 31, scope: !7)
!100 = !DILocation(line: 47, column: 63, scope: !7)
!101 = !DILocation(line: 48, column: 18, scope: !7)
!102 = !DILocation(line: 49, column: 18, scope: !7)
!103 = !DILocation(line: 50, column: 18, scope: !7)
!104 = !DILocation(line: 51, column: 18, scope: !7)
!105 = !DILocation(line: 52, column: 19, scope: !7)
!106 = !DILocation(line: 53, column: 20, scope: !7)
!107 = !DILocation(line: 54, column: 20, scope: !7)
!108 = !DILocation(line: 55, column: 20, scope: !7)
!109 = !DILocation(line: 56, column: 20, scope: !7)
!110 = !DILocation(line: 57, column: 20, scope: !7)
!111 = !DILocation(line: 58, column: 20, scope: !7)
!112 = !DILocation(line: 59, column: 20, scope: !7)
!113 = !DILocation(line: 60, column: 20, scope: !7)
!114 = !DILocation(line: 61, column: 20, scope: !7)
!115 = !DILocation(line: 62, column: 20, scope: !7)
!116 = !DILocation(line: 63, column: 20, scope: !7)
!117 = !DILocation(line: 64, column: 20, scope: !7)
!118 = !DILocation(line: 65, column: 20, scope: !7)
!119 = !DILocation(line: 66, column: 20, scope: !7)
!120 = !DILocation(line: 68, column: 20, scope: !7)
!121 = !DILocation(line: 69, column: 25, scope: !7)
!122 = !DILocation(line: 69, column: 37, scope: !7)
!123 = !DILocation(line: 69, column: 4, scope: !7)
