; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_linalg_vector_norm_30(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %4 = and i32 %3, 31, !dbg !10
  %5 = lshr i32 %3, 5, !dbg !10
  %6 = shl i32 %3, 1, !dbg !10
  %7 = and i32 %6, 126, !dbg !10
  %8 = zext nneg i32 %7 to i64, !dbg !11
  %9 = getelementptr float, ptr addrspace(1) %0, i64 %8, !dbg !11
  %10 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !12
  %11 = extractvalue { i32, i32 } %10, 0, !dbg !12
  %12 = extractvalue { i32, i32 } %10, 1, !dbg !12
  %13 = bitcast i32 %11 to float, !dbg !12
  %14 = bitcast i32 %12 to float, !dbg !12
  %15 = fmul float %13, %13, !dbg !13
  %16 = fmul float %14, %14, !dbg !13
  %17 = fadd float %15, %16, !dbg !14
  %18 = bitcast float %17 to i32, !dbg !19
  %19 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %18, i32 16, i32 31), !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = fadd float %17, %20, !dbg !14
  %22 = bitcast float %21 to i32, !dbg !19
  %23 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %22, i32 8, i32 31), !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = fadd float %21, %24, !dbg !14
  %26 = bitcast float %25 to i32, !dbg !19
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 4, i32 31), !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = fadd float %25, %28, !dbg !14
  %30 = bitcast float %29 to i32, !dbg !19
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 2, i32 31), !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = fadd float %29, %32, !dbg !14
  %34 = bitcast float %33 to i32, !dbg !19
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 1, i32 31), !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = fadd float %33, %36, !dbg !14
  %38 = icmp eq i32 %4, 0, !dbg !19
  %39 = and i32 %5, 1, !dbg !19
  %40 = zext nneg i32 %39 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i64 %40, !dbg !19
  %42 = bitcast float %37 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 %38) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %43 = icmp slt i32 %3, 2, !dbg !19
  %44 = sext i32 %3 to i64, !dbg !19
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !19
  %46 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %43) #5, !dbg !19
  %47 = bitcast i32 %46 to float, !dbg !19
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !19
  %49 = bitcast i32 %48 to float, !dbg !19
  %50 = fadd float %47, %49, !dbg !14
  %51 = and i32 %3, 1, !dbg !19
  %52 = icmp eq i32 %51, 0, !dbg !19
  %53 = and i1 %43, %52, !dbg !19
  %54 = bitcast float %50 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %54, i1 %53) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %55 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i1 = icmp eq i32 %58, 0, !dbg !20
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i4 = icmp eq i32 %59, 0, !dbg !20
  br i1 %.not.i1, label %65, label %60, !dbg !20

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !20

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !20

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

__nv_sqrtf.exit5:                                 ; preds = %61, %63, %66, %68
  %.0.i3 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !20
  %70 = fadd float %.0.i3, 0x3D71979980000000, !dbg !21
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %13, float %70) #5, !dbg !22
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %14, float %70) #5, !dbg !22
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !23
  %74 = bitcast float %71 to i32, !dbg !24
  %75 = bitcast float %72 to i32, !dbg !24
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %74, i32 %75, ptr addrspace(1) %73, i1 true) #5, !dbg !24
  ret void, !dbg !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmsl5azygrmrnnvhtiiaafzfdqw2rk47eyu2pilovqs7nmyy55ef.py", directory: "inductor_cache/ms")
!4 = !{ptr @triton_per_fused_add_div_linalg_vector_norm_30, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_linalg_vector_norm_30, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_linalg_vector_norm_30", linkageName: "triton_per_fused_add_div_linalg_vector_norm_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 18, scope: !7)
!14 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 33, column: 24, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !18)
!20 = !DILocation(line: 34, column: 26, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 25, scope: !7)
!24 = !DILocation(line: 38, column: 71, scope: !7)
!25 = !DILocation(line: 38, column: 4, scope: !7)
