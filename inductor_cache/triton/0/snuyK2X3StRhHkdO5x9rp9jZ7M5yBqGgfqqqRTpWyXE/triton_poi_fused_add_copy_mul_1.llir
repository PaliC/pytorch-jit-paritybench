; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_copy_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 6, !dbg !12
  %.lobit = and i32 %8, 1, !dbg !12
  %9 = icmp slt i32 %6, 0, !dbg !13
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %11 = shl i32 %10, 6, !dbg !15
  %12 = and i32 %7, 63, !dbg !16
  %13 = or disjoint i32 %11, %12, !dbg !17
  %14 = icmp slt i32 %13, 89401, !dbg !18
  %15 = and i1 %9, %14, !dbg !19
  %16 = add i32 %13, 89401, !dbg !20
  %17 = add i32 %13, 178802, !dbg !21
  %18 = or disjoint i32 %6, %.lobit, !dbg !22
  %19 = or disjoint i32 %18, 2, !dbg !22
  %20 = or disjoint i32 %18, 4, !dbg !22
  %21 = or disjoint i32 %18, 6, !dbg !22
  %22 = or disjoint i32 %18, 8, !dbg !22
  %23 = or disjoint i32 %18, 10, !dbg !22
  %24 = or disjoint i32 %18, 12, !dbg !22
  %25 = or disjoint i32 %18, 14, !dbg !22
  %26 = icmp slt i32 %18, 12, !dbg !13
  %27 = icmp slt i32 %19, 12, !dbg !13
  %28 = icmp slt i32 %20, 12, !dbg !13
  %29 = icmp slt i32 %21, 12, !dbg !13
  %30 = icmp slt i32 %22, 12, !dbg !13
  %31 = icmp slt i32 %23, 12, !dbg !13
  %32 = insertelement <8 x i32> poison, i32 %25, i64 0, !dbg !23
  %33 = insertelement <8 x i32> %32, i32 %24, i64 1, !dbg !23
  %34 = insertelement <8 x i32> %33, i32 %23, i64 2, !dbg !23
  %35 = insertelement <8 x i32> %34, i32 %22, i64 3, !dbg !23
  %36 = insertelement <8 x i32> %35, i32 %21, i64 4, !dbg !23
  %37 = insertelement <8 x i32> %36, i32 %20, i64 5, !dbg !23
  %38 = insertelement <8 x i32> %37, i32 %19, i64 6, !dbg !23
  %39 = insertelement <8 x i32> %38, i32 %18, i64 7, !dbg !23
  %40 = srem <8 x i32> %39, splat (i32 3), !dbg !23
  %41 = shufflevector <8 x i32> %40, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !23
  %42 = sdiv i32 %18, 3, !dbg !24
  %43 = sdiv i32 %19, 3, !dbg !24
  %44 = sdiv i32 %20, 3, !dbg !24
  %45 = sdiv i32 %21, 3, !dbg !24
  %46 = sdiv i32 %22, 3, !dbg !24
  %47 = sdiv i32 %23, 3, !dbg !24
  %48 = sdiv i32 %24, 3, !dbg !24
  %49 = sdiv i32 %25, 3, !dbg !24
  %50 = mul i32 %42, 268203, !dbg !25
  %51 = mul i32 %43, 268203, !dbg !25
  %52 = mul i32 %44, 268203, !dbg !25
  %53 = mul i32 %45, 268203, !dbg !25
  %54 = mul i32 %46, 268203, !dbg !25
  %55 = mul i32 %47, 268203, !dbg !25
  %56 = mul i32 %48, 268203, !dbg !25
  %57 = mul i32 %49, 268203, !dbg !25
  %58 = add i32 %50, %13, !dbg !26
  %59 = add i32 %13, %51, !dbg !26
  %60 = add i32 %13, %52, !dbg !26
  %61 = add i32 %13, %53, !dbg !26
  %62 = add i32 %13, %54, !dbg !26
  %63 = add i32 %13, %55, !dbg !26
  %64 = add i32 %13, %56, !dbg !26
  %65 = add i32 %13, %57, !dbg !26
  %66 = sext i32 %58 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !27
  %68 = sext i32 %59 to i64, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !27
  %70 = sext i32 %60 to i64, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !27
  %72 = sext i32 %61 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !27
  %74 = sext i32 %62 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !27
  %76 = sext i32 %63 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !27
  %78 = sext i32 %64 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !27
  %80 = sext i32 %65 to i64, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !27
  %82 = and i1 %26, %14, !dbg !19
  %83 = and i1 %27, %14, !dbg !19
  %84 = and i1 %28, %14, !dbg !19
  %85 = and i1 %29, %14, !dbg !19
  %86 = and i1 %30, %14, !dbg !19
  %87 = and i1 %31, %14, !dbg !19
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %82) #1, !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %83) #1, !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %84) #1, !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %85) #1, !dbg !28
  %95 = bitcast i32 %94 to float, !dbg !28
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %86) #1, !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %87) #1, !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %15) #1, !dbg !28
  %101 = bitcast i32 %100 to float, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %15) #1, !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = add i32 %16, %50, !dbg !29
  %105 = add i32 %16, %51, !dbg !29
  %106 = add i32 %16, %52, !dbg !29
  %107 = add i32 %16, %53, !dbg !29
  %108 = add i32 %16, %54, !dbg !29
  %109 = add i32 %16, %55, !dbg !29
  %110 = add i32 %16, %56, !dbg !29
  %111 = add i32 %16, %57, !dbg !29
  %112 = sext i32 %104 to i64, !dbg !30
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !30
  %114 = sext i32 %105 to i64, !dbg !30
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !30
  %116 = sext i32 %106 to i64, !dbg !30
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !30
  %118 = sext i32 %107 to i64, !dbg !30
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !30
  %120 = sext i32 %108 to i64, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !30
  %122 = sext i32 %109 to i64, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !30
  %124 = sext i32 %110 to i64, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !30
  %126 = sext i32 %111 to i64, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %82) #1, !dbg !31
  %129 = bitcast i32 %128 to float, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %83) #1, !dbg !31
  %131 = bitcast i32 %130 to float, !dbg !31
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %84) #1, !dbg !31
  %133 = bitcast i32 %132 to float, !dbg !31
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %85) #1, !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %86) #1, !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %87) #1, !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %15) #1, !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %15) #1, !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = add i32 %17, %50, !dbg !32
  %145 = add i32 %17, %51, !dbg !32
  %146 = add i32 %17, %52, !dbg !32
  %147 = add i32 %17, %53, !dbg !32
  %148 = add i32 %17, %54, !dbg !32
  %149 = add i32 %17, %55, !dbg !32
  %150 = add i32 %17, %56, !dbg !32
  %151 = add i32 %17, %57, !dbg !32
  %152 = sext i32 %144 to i64, !dbg !33
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !33
  %154 = sext i32 %145 to i64, !dbg !33
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !33
  %156 = sext i32 %146 to i64, !dbg !33
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !33
  %158 = sext i32 %147 to i64, !dbg !33
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !33
  %160 = sext i32 %148 to i64, !dbg !33
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !33
  %162 = sext i32 %149 to i64, !dbg !33
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !33
  %164 = sext i32 %150 to i64, !dbg !33
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !33
  %166 = sext i32 %151 to i64, !dbg !33
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !33
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %82) #1, !dbg !34
  %169 = bitcast i32 %168 to float, !dbg !34
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %83) #1, !dbg !34
  %171 = bitcast i32 %170 to float, !dbg !34
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %84) #1, !dbg !34
  %173 = bitcast i32 %172 to float, !dbg !34
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %85) #1, !dbg !34
  %175 = bitcast i32 %174 to float, !dbg !34
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %86) #1, !dbg !34
  %177 = bitcast i32 %176 to float, !dbg !34
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %87) #1, !dbg !34
  %179 = bitcast i32 %178 to float, !dbg !34
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %15) #1, !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %15) #1, !dbg !34
  %183 = bitcast i32 %182 to float, !dbg !34
  %184 = mul i32 %18, 89401, !dbg !35
  %185 = mul i32 %19, 89401, !dbg !35
  %186 = mul i32 %20, 89401, !dbg !35
  %187 = mul i32 %21, 89401, !dbg !35
  %188 = mul i32 %22, 89401, !dbg !35
  %189 = mul i32 %23, 89401, !dbg !35
  %190 = mul i32 %24, 89401, !dbg !35
  %191 = mul i32 %25, 89401, !dbg !35
  %192 = add i32 %13, %184, !dbg !36
  %193 = add i32 %13, %185, !dbg !36
  %194 = add i32 %13, %186, !dbg !36
  %195 = add i32 %13, %187, !dbg !36
  %196 = add i32 %13, %188, !dbg !36
  %197 = add i32 %13, %189, !dbg !36
  %198 = add i32 %13, %190, !dbg !36
  %199 = add i32 %13, %191, !dbg !36
  %200 = sext i32 %192 to i64, !dbg !37
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !37
  %202 = sext i32 %193 to i64, !dbg !37
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !37
  %204 = sext i32 %194 to i64, !dbg !37
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !37
  %206 = sext i32 %195 to i64, !dbg !37
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !37
  %208 = sext i32 %196 to i64, !dbg !37
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !37
  %210 = sext i32 %197 to i64, !dbg !37
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !37
  %212 = sext i32 %198 to i64, !dbg !37
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !37
  %214 = sext i32 %199 to i64, !dbg !37
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !37
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %82) #1, !dbg !38
  %217 = bitcast i32 %216 to float, !dbg !38
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %83) #1, !dbg !38
  %219 = bitcast i32 %218 to float, !dbg !38
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %84) #1, !dbg !38
  %221 = bitcast i32 %220 to float, !dbg !38
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %85) #1, !dbg !38
  %223 = bitcast i32 %222 to float, !dbg !38
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %86) #1, !dbg !38
  %225 = bitcast i32 %224 to float, !dbg !38
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %87) #1, !dbg !38
  %227 = bitcast i32 %226 to float, !dbg !38
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %15) #1, !dbg !38
  %229 = bitcast i32 %228 to float, !dbg !38
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %15) #1, !dbg !38
  %231 = bitcast i32 %230 to float, !dbg !38
  %232 = extractelement <8 x i32> %40, i64 7, !dbg !39
  %233 = icmp eq i32 %232, 2, !dbg !40
  %234 = extractelement <8 x i32> %40, i64 6, !dbg !39
  %235 = icmp eq i32 %234, 2, !dbg !40
  %236 = extractelement <8 x i32> %40, i64 5, !dbg !39
  %237 = icmp eq i32 %236, 2, !dbg !40
  %238 = extractelement <8 x i32> %40, i64 4, !dbg !39
  %239 = icmp eq i32 %238, 2, !dbg !40
  %240 = extractelement <8 x i32> %40, i64 3, !dbg !39
  %241 = icmp eq i32 %240, 2, !dbg !40
  %242 = extractelement <8 x i32> %40, i64 2, !dbg !39
  %243 = icmp eq i32 %242, 2, !dbg !40
  %244 = extractelement <8 x i32> %40, i64 1, !dbg !39
  %245 = icmp eq i32 %244, 2, !dbg !40
  %246 = extractelement <8 x i32> %40, i64 0, !dbg !39
  %247 = icmp eq i32 %246, 2, !dbg !40
  %248 = fmul float %89, 0x3FDD4FDF40000000, !dbg !41
  %249 = fmul float %91, 0x3FDD4FDF40000000, !dbg !41
  %250 = fmul float %93, 0x3FDD4FDF40000000, !dbg !41
  %251 = fmul float %95, 0x3FDD4FDF40000000, !dbg !41
  %252 = fmul float %97, 0x3FDD4FDF40000000, !dbg !41
  %253 = fmul float %99, 0x3FDD4FDF40000000, !dbg !41
  %254 = fmul float %101, 0x3FDD4FDF40000000, !dbg !41
  %255 = fmul float %103, 0x3FDD4FDF40000000, !dbg !41
  %256 = fadd float %248, 0xBF9EB851E0000000, !dbg !42
  %257 = fadd float %249, 0xBF9EB851E0000000, !dbg !42
  %258 = fadd float %250, 0xBF9EB851E0000000, !dbg !42
  %259 = fadd float %251, 0xBF9EB851E0000000, !dbg !42
  %260 = fadd float %252, 0xBF9EB851E0000000, !dbg !42
  %261 = fadd float %253, 0xBF9EB851E0000000, !dbg !42
  %262 = fadd float %254, 0xBF9EB851E0000000, !dbg !42
  %263 = fadd float %255, 0xBF9EB851E0000000, !dbg !42
  %264 = fmul float %129, 0x3FDCAC0840000000, !dbg !43
  %265 = fmul float %131, 0x3FDCAC0840000000, !dbg !43
  %266 = fmul float %133, 0x3FDCAC0840000000, !dbg !43
  %267 = fmul float %135, 0x3FDCAC0840000000, !dbg !43
  %268 = fmul float %137, 0x3FDCAC0840000000, !dbg !43
  %269 = fmul float %139, 0x3FDCAC0840000000, !dbg !43
  %270 = fmul float %141, 0x3FDCAC0840000000, !dbg !43
  %271 = fmul float %143, 0x3FDCAC0840000000, !dbg !43
  %272 = fadd float %264, 0xBFB6872B00000000, !dbg !44
  %273 = fadd float %265, 0xBFB6872B00000000, !dbg !44
  %274 = fadd float %266, 0xBFB6872B00000000, !dbg !44
  %275 = fadd float %267, 0xBFB6872B00000000, !dbg !44
  %276 = fadd float %268, 0xBFB6872B00000000, !dbg !44
  %277 = fadd float %269, 0xBFB6872B00000000, !dbg !44
  %278 = fadd float %270, 0xBFB6872B00000000, !dbg !44
  %279 = fadd float %271, 0xBFB6872B00000000, !dbg !44
  %280 = fmul float %169, 0x3FDCCCCCC0000000, !dbg !45
  %281 = fmul float %171, 0x3FDCCCCCC0000000, !dbg !45
  %282 = fmul float %173, 0x3FDCCCCCC0000000, !dbg !45
  %283 = fmul float %175, 0x3FDCCCCCC0000000, !dbg !45
  %284 = fmul float %177, 0x3FDCCCCCC0000000, !dbg !45
  %285 = fmul float %179, 0x3FDCCCCCC0000000, !dbg !45
  %286 = fmul float %181, 0x3FDCCCCCC0000000, !dbg !45
  %287 = fmul float %183, 0x3FDCCCCCC0000000, !dbg !45
  %288 = fadd float %280, 0xBFC8106240000000, !dbg !46
  %289 = fadd float %281, 0xBFC8106240000000, !dbg !46
  %290 = fadd float %282, 0xBFC8106240000000, !dbg !46
  %291 = fadd float %283, 0xBFC8106240000000, !dbg !46
  %292 = fadd float %284, 0xBFC8106240000000, !dbg !46
  %293 = fadd float %285, 0xBFC8106240000000, !dbg !46
  %294 = fadd float %286, 0xBFC8106240000000, !dbg !46
  %295 = fadd float %287, 0xBFC8106240000000, !dbg !46
  %296 = icmp eq <16 x i32> %41, <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !47
  %297 = extractelement <16 x i1> %296, i64 7, !dbg !48
  %298 = select i1 %297, float %256, float %217, !dbg !48
  %299 = extractelement <16 x i1> %296, i64 6, !dbg !48
  %300 = select i1 %299, float %257, float %219, !dbg !48
  %301 = extractelement <16 x i1> %296, i64 5, !dbg !48
  %302 = select i1 %301, float %258, float %221, !dbg !48
  %303 = extractelement <16 x i1> %296, i64 4, !dbg !48
  %304 = select i1 %303, float %259, float %223, !dbg !48
  %305 = extractelement <16 x i1> %296, i64 3, !dbg !48
  %306 = select i1 %305, float %260, float %225, !dbg !48
  %307 = extractelement <16 x i1> %296, i64 2, !dbg !48
  %308 = select i1 %307, float %261, float %227, !dbg !48
  %309 = extractelement <16 x i1> %296, i64 1, !dbg !48
  %310 = select i1 %309, float %262, float %229, !dbg !48
  %311 = extractelement <16 x i1> %296, i64 0, !dbg !48
  %312 = select i1 %311, float %263, float %231, !dbg !48
  %313 = extractelement <16 x i1> %296, i64 15, !dbg !49
  %314 = select i1 %313, float %272, float %298, !dbg !49
  %315 = extractelement <16 x i1> %296, i64 14, !dbg !49
  %316 = select i1 %315, float %273, float %300, !dbg !49
  %317 = extractelement <16 x i1> %296, i64 13, !dbg !49
  %318 = select i1 %317, float %274, float %302, !dbg !49
  %319 = extractelement <16 x i1> %296, i64 12, !dbg !49
  %320 = select i1 %319, float %275, float %304, !dbg !49
  %321 = extractelement <16 x i1> %296, i64 11, !dbg !49
  %322 = select i1 %321, float %276, float %306, !dbg !49
  %323 = extractelement <16 x i1> %296, i64 10, !dbg !49
  %324 = select i1 %323, float %277, float %308, !dbg !49
  %325 = extractelement <16 x i1> %296, i64 9, !dbg !49
  %326 = select i1 %325, float %278, float %310, !dbg !49
  %327 = extractelement <16 x i1> %296, i64 8, !dbg !49
  %328 = select i1 %327, float %279, float %312, !dbg !49
  %329 = select i1 %233, float %288, float %314, !dbg !50
  %330 = select i1 %235, float %289, float %316, !dbg !50
  %331 = select i1 %237, float %290, float %318, !dbg !50
  %332 = select i1 %239, float %291, float %320, !dbg !50
  %333 = select i1 %241, float %292, float %322, !dbg !50
  %334 = select i1 %243, float %293, float %324, !dbg !50
  %335 = select i1 %245, float %294, float %326, !dbg !50
  %336 = select i1 %247, float %295, float %328, !dbg !50
  %337 = mul i32 %13, 3, !dbg !51
  %338 = add i32 %337, %232, !dbg !39
  %339 = add i32 %338, %50, !dbg !52
  %340 = add i32 %51, %234, !dbg !39
  %341 = add i32 %340, %337, !dbg !52
  %342 = add i32 %52, %236, !dbg !39
  %343 = add i32 %342, %337, !dbg !52
  %344 = add i32 %53, %238, !dbg !39
  %345 = add i32 %344, %337, !dbg !52
  %346 = add i32 %54, %240, !dbg !39
  %347 = add i32 %346, %337, !dbg !52
  %348 = add i32 %55, %242, !dbg !39
  %349 = add i32 %348, %337, !dbg !52
  %350 = add i32 %56, %244, !dbg !39
  %351 = add i32 %350, %337, !dbg !52
  %352 = add i32 %57, %246, !dbg !39
  %353 = add i32 %352, %337, !dbg !52
  %354 = sext i32 %339 to i64, !dbg !53
  %355 = getelementptr float, ptr addrspace(1) %1, i64 %354, !dbg !53
  %356 = sext i32 %341 to i64, !dbg !53
  %357 = getelementptr float, ptr addrspace(1) %1, i64 %356, !dbg !53
  %358 = sext i32 %343 to i64, !dbg !53
  %359 = getelementptr float, ptr addrspace(1) %1, i64 %358, !dbg !53
  %360 = sext i32 %345 to i64, !dbg !53
  %361 = getelementptr float, ptr addrspace(1) %1, i64 %360, !dbg !53
  %362 = sext i32 %347 to i64, !dbg !53
  %363 = getelementptr float, ptr addrspace(1) %1, i64 %362, !dbg !53
  %364 = sext i32 %349 to i64, !dbg !53
  %365 = getelementptr float, ptr addrspace(1) %1, i64 %364, !dbg !53
  %366 = sext i32 %351 to i64, !dbg !53
  %367 = getelementptr float, ptr addrspace(1) %1, i64 %366, !dbg !53
  %368 = sext i32 %353 to i64, !dbg !53
  %369 = getelementptr float, ptr addrspace(1) %1, i64 %368, !dbg !53
  %370 = bitcast float %329 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %370, ptr addrspace(1) %355, i1 %82) #1, !dbg !54
  %371 = bitcast float %330 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %371, ptr addrspace(1) %357, i1 %83) #1, !dbg !54
  %372 = bitcast float %331 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %372, ptr addrspace(1) %359, i1 %84) #1, !dbg !54
  %373 = bitcast float %332 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %361, i1 %85) #1, !dbg !54
  %374 = bitcast float %333 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %363, i1 %86) #1, !dbg !54
  %375 = bitcast float %334 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %365, i1 %87) #1, !dbg !54
  %376 = bitcast float %335 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %376, ptr addrspace(1) %367, i1 %15) #1, !dbg !54
  %377 = bitcast float %336 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %377, ptr addrspace(1) %369, i1 %15) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py", directory: "inductor_cache/p7")
!4 = !{ptr @triton_poi_fused_add_copy_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_copy_mul_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_copy_mul_1", linkageName: "triton_poi_fused_add_copy_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 55, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 23, column: 23, scope: !7)
!23 = !DILocation(line: 28, column: 19, scope: !7)
!24 = !DILocation(line: 30, column: 19, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 47, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 56, scope: !7)
!32 = !DILocation(line: 34, column: 45, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 57, scope: !7)
!35 = !DILocation(line: 35, column: 42, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 47, scope: !7)
!39 = !DILocation(line: 64, column: 30, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 46, column: 19, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 35, scope: !7)
!49 = !DILocation(line: 62, column: 35, scope: !7)
!50 = !DILocation(line: 63, column: 34, scope: !7)
!51 = !DILocation(line: 64, column: 32, scope: !7)
!52 = !DILocation(line: 64, column: 37, scope: !7)
!53 = !DILocation(line: 64, column: 25, scope: !7)
!54 = !DILocation(line: 64, column: 56, scope: !7)
!55 = !DILocation(line: 64, column: 4, scope: !7)
