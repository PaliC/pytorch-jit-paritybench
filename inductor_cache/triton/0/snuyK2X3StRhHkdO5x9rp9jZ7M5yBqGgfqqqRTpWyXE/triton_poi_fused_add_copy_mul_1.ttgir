#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_copy_mul_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":19:0), %arg2: i32 loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":19:0), %arg3: i32 loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.580000e-01> : tensor<64x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<-3.000000e-02> : tensor<64x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4.480000e-01> : tensor<64x16xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<-0.0879999995> : tensor<64x16xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4.500000e-01> : tensor<64x16xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<-1.880000e-01> : tensor<64x16xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<12> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<89401> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<3> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<268203> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<178802> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<89401> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<2> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<3> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<0> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<1> : tensor<1x16xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<1x16xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<1x16xi32, #blocked> loc(#loc6)
    %7 = tt.get_program_id x : i32 loc(#loc7)
    %8 = arith.muli %7, %c64_i32 : i32 loc(#loc8)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %10 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc9)
    %11 = tt.splat %8 : i32 -> tensor<64x1xi32, #blocked> loc(#loc10)
    %12 = arith.addi %11, %10 : tensor<64x1xi32, #blocked> loc(#loc10)
    %13 = arith.cmpi slt, %12, %cst_6 : tensor<64x1xi32, #blocked> loc(#loc11)
    %14 = arith.remsi %5, %cst_7 : tensor<1x16xi32, #blocked> loc(#loc12)
    %15 = arith.divsi %5, %cst_7 : tensor<1x16xi32, #blocked> loc(#loc13)
    %16 = arith.muli %15, %cst_8 : tensor<1x16xi32, #blocked> loc(#loc14)
    %17 = tt.broadcast %12 : tensor<64x1xi32, #blocked> -> tensor<64x16xi32, #blocked> loc(#loc15)
    %18 = tt.broadcast %16 : tensor<1x16xi32, #blocked> -> tensor<64x16xi32, #blocked> loc(#loc15)
    %19 = arith.addi %17, %18 : tensor<64x16xi32, #blocked> loc(#loc15)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x16x!tt.ptr<f32>, #blocked> loc(#loc16)
    %21 = tt.addptr %20, %19 : tensor<64x16x!tt.ptr<f32>, #blocked>, tensor<64x16xi32, #blocked> loc(#loc16)
    %22 = tt.broadcast %13 : tensor<64x1xi1, #blocked> -> tensor<64x16xi1, #blocked> loc(#loc17)
    %23 = tt.broadcast %6 : tensor<1x16xi1, #blocked> -> tensor<64x16xi1, #blocked> loc(#loc17)
    %24 = arith.andi %22, %23 : tensor<64x16xi1, #blocked> loc(#loc17)
    %25 = tt.load %21, %24 evictionPolicy = evict_last : tensor<64x16x!tt.ptr<f32>, #blocked> loc(#loc18)
    %26 = arith.addi %12, %cst_6 : tensor<64x1xi32, #blocked> loc(#loc19)
    %27 = tt.broadcast %26 : tensor<64x1xi32, #blocked> -> tensor<64x16xi32, #blocked> loc(#loc20)
    %28 = arith.addi %27, %18 : tensor<64x16xi32, #blocked> loc(#loc20)
    %29 = tt.addptr %20, %28 : tensor<64x16x!tt.ptr<f32>, #blocked>, tensor<64x16xi32, #blocked> loc(#loc21)
    %30 = tt.load %29, %24 evictionPolicy = evict_last : tensor<64x16x!tt.ptr<f32>, #blocked> loc(#loc22)
    %31 = arith.addi %12, %cst_9 : tensor<64x1xi32, #blocked> loc(#loc23)
    %32 = tt.broadcast %31 : tensor<64x1xi32, #blocked> -> tensor<64x16xi32, #blocked> loc(#loc24)
    %33 = arith.addi %32, %18 : tensor<64x16xi32, #blocked> loc(#loc24)
    %34 = tt.addptr %20, %33 : tensor<64x16x!tt.ptr<f32>, #blocked>, tensor<64x16xi32, #blocked> loc(#loc25)
    %35 = tt.load %34, %24 evictionPolicy = evict_last : tensor<64x16x!tt.ptr<f32>, #blocked> loc(#loc26)
    %36 = arith.muli %5, %cst_10 : tensor<1x16xi32, #blocked> loc(#loc27)
    %37 = tt.broadcast %36 : tensor<1x16xi32, #blocked> -> tensor<64x16xi32, #blocked> loc(#loc28)
    %38 = arith.addi %17, %37 : tensor<64x16xi32, #blocked> loc(#loc28)
    %39 = tt.addptr %20, %38 : tensor<64x16x!tt.ptr<f32>, #blocked>, tensor<64x16xi32, #blocked> loc(#loc29)
    %40 = tt.load %39, %24 evictionPolicy = evict_last : tensor<64x16x!tt.ptr<f32>, #blocked> loc(#loc30)
    %41 = arith.cmpi eq, %14, %cst_11 : tensor<1x16xi32, #blocked> loc(#loc31)
    %42 = arith.mulf %25, %cst : tensor<64x16xf32, #blocked> loc(#loc32)
    %43 = arith.addf %42, %cst_0 : tensor<64x16xf32, #blocked> loc(#loc33)
    %44 = arith.mulf %30, %cst_1 : tensor<64x16xf32, #blocked> loc(#loc34)
    %45 = arith.addf %44, %cst_2 : tensor<64x16xf32, #blocked> loc(#loc35)
    %46 = arith.mulf %35, %cst_3 : tensor<64x16xf32, #blocked> loc(#loc36)
    %47 = arith.addf %46, %cst_4 : tensor<64x16xf32, #blocked> loc(#loc37)
    %48 = arith.cmpi eq, %14, %cst_14 : tensor<1x16xi32, #blocked> loc(#loc38)
    %49 = arith.cmpi eq, %14, %cst_13 : tensor<1x16xi32, #blocked> loc(#loc39)
    %50 = tt.broadcast %49 : tensor<1x16xi1, #blocked> -> tensor<64x16xi1, #blocked> loc(#loc40)
    %51 = arith.select %50, %43, %40 : tensor<64x16xi1, #blocked>, tensor<64x16xf32, #blocked> loc(#loc40)
    %52 = tt.broadcast %48 : tensor<1x16xi1, #blocked> -> tensor<64x16xi1, #blocked> loc(#loc41)
    %53 = arith.select %52, %45, %51 : tensor<64x16xi1, #blocked>, tensor<64x16xf32, #blocked> loc(#loc41)
    %54 = tt.broadcast %41 : tensor<1x16xi1, #blocked> -> tensor<64x16xi1, #blocked> loc(#loc42)
    %55 = arith.select %54, %47, %53 : tensor<64x16xi1, #blocked>, tensor<64x16xf32, #blocked> loc(#loc42)
    %56 = arith.muli %12, %cst_12 : tensor<64x1xi32, #blocked> loc(#loc43)
    %57 = tt.broadcast %14 : tensor<1x16xi32, #blocked> -> tensor<64x16xi32, #blocked> loc(#loc44)
    %58 = tt.broadcast %56 : tensor<64x1xi32, #blocked> -> tensor<64x16xi32, #blocked> loc(#loc44)
    %59 = arith.addi %57, %58 : tensor<64x16xi32, #blocked> loc(#loc44)
    %60 = arith.addi %59, %18 : tensor<64x16xi32, #blocked> loc(#loc45)
    %61 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x16x!tt.ptr<f32>, #blocked> loc(#loc46)
    %62 = tt.addptr %61, %60 : tensor<64x16x!tt.ptr<f32>, #blocked>, tensor<64x16xi32, #blocked> loc(#loc46)
    tt.store %62, %55, %24 : tensor<64x16x!tt.ptr<f32>, #blocked> loc(#loc47)
    tt.return loc(#loc48)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":22:28)
#loc3 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":22:33)
#loc4 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":23:44)
#loc5 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":23:23)
#loc6 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":24:21)
#loc7 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":25:28)
#loc8 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":25:33)
#loc9 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":26:44)
#loc10 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":26:23)
#loc11 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":27:21)
#loc12 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":28:19)
#loc13 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":30:19)
#loc14 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":32:42)
#loc15 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":32:35)
#loc16 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":32:30)
#loc17 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":32:55)
#loc18 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":32:47)
#loc19 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":33:39)
#loc20 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":33:44)
#loc21 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":33:31)
#loc22 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":33:56)
#loc23 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":34:40)
#loc24 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":34:45)
#loc25 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":34:31)
#loc26 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":34:57)
#loc27 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":35:42)
#loc28 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":35:36)
#loc29 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":35:31)
#loc30 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":35:47)
#loc31 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":38:19)
#loc32 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":44:18)
#loc33 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":46:19)
#loc34 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":49:20)
#loc35 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":51:20)
#loc36 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":56:20)
#loc37 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":58:20)
#loc38 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":59:20)
#loc39 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":60:20)
#loc40 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":61:35)
#loc41 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":62:35)
#loc42 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":63:34)
#loc43 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":64:32)
#loc44 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":64:30)
#loc45 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":64:37)
#loc46 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":64:25)
#loc47 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":64:56)
#loc48 = loc("inductor_cache/p7/cp7egmpznxdcfxtplj2yysvek5kc46cec5jgoljwc56htyzcbiob.py":64:4)
