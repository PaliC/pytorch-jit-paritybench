; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_72(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 8, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 254, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %19, 1, !dbg !13
  %25 = srem i32 %24, 2, !dbg !14
  %26 = sdiv i32 %23, 4, !dbg !15
  %27 = srem i32 %26, 512, !dbg !16
  %28 = shl nsw i32 %25, 1, !dbg !17
  %29 = shl i32 %23, 2, !dbg !18
  %30 = add i32 %28, %29, !dbg !19
  %31 = sext i32 %29 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = sext i32 %30 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %37 = or disjoint i32 %29, 1, !dbg !22
  %38 = or disjoint i32 %30, 1, !dbg !22
  %39 = sext i32 %37 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %38 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %45 = or disjoint i32 %29, 4, !dbg !25
  %46 = add i32 %30, 4, !dbg !25
  %47 = sext i32 %45 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !27
  %53 = or disjoint i32 %29, 5, !dbg !28
  %54 = add i32 %30, 5, !dbg !28
  %55 = sext i32 %53 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !29
  %57 = sext i32 %54 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !30
  %61 = sext i32 %27 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !33
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !34
  %67 = bitcast i32 %66 to float, !dbg !34
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !35
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !36
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !36
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !37
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !38
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !38
  %76 = fadd float %67, 0x3EE4F8B580000000, !dbg !39
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !39
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %78, 0, !dbg !40
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %79, 0, !dbg !40
  br i1 %.not.i, label %85, label %80, !dbg !40

80:                                               ; preds = %17
  br i1 %.not1.i, label %83, label %81, !dbg !40

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

85:                                               ; preds = %17
  br i1 %.not1.i, label %88, label %86, !dbg !40

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !40
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %90, 0, !dbg !40
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !40
  br i1 %.not.i1, label %97, label %92, !dbg !40

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !40

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !40

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !40
  %102 = bitcast i32 %44 to float, !dbg !24
  %103 = bitcast i32 %36 to float, !dbg !21
  %104 = fadd float %103, %102, !dbg !41
  %105 = bitcast i32 %52 to float, !dbg !27
  %106 = fadd float %104, %105, !dbg !42
  %107 = bitcast i32 %60 to float, !dbg !30
  %108 = fadd float %106, %107, !dbg !43
  %109 = fmul float %108, 2.500000e-01, !dbg !44
  %110 = bitcast i32 %64 to float, !dbg !32
  %111 = fsub float %109, %110, !dbg !45
  %112 = bitcast i32 %43 to float, !dbg !24
  %113 = bitcast i32 %35 to float, !dbg !21
  %114 = fadd float %113, %112, !dbg !41
  %115 = bitcast i32 %51 to float, !dbg !27
  %116 = fadd float %114, %115, !dbg !42
  %117 = bitcast i32 %59 to float, !dbg !30
  %118 = fadd float %116, %117, !dbg !43
  %119 = fmul float %118, 2.500000e-01, !dbg !44
  %120 = bitcast i32 %63 to float, !dbg !32
  %121 = fsub float %119, %120, !dbg !45
  %122 = bitcast i32 %75 to float, !dbg !38
  %123 = bitcast i32 %74 to float, !dbg !38
  %124 = bitcast i32 %72 to float, !dbg !36
  %125 = bitcast i32 %71 to float, !dbg !36
  %.frozen = freeze i32 %23, !dbg !46
  %126 = sdiv i32 %.frozen, 2048, !dbg !46
  %127 = mul i32 %126, 2048, !dbg !47
  %.decomposed = sub i32 %.frozen, %127, !dbg !47
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !48
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !48
  %130 = fmul float %121, %128, !dbg !49
  %131 = fmul float %111, %129, !dbg !49
  %132 = fmul float %130, %125, !dbg !50
  %133 = fmul float %131, %124, !dbg !50
  %134 = fadd float %132, %123, !dbg !51
  %135 = fadd float %133, %122, !dbg !51
  %136 = fcmp olt float %134, 0.000000e+00, !dbg !52
  %137 = fcmp olt float %135, 0.000000e+00, !dbg !52
  %138 = select i1 %136, float 0.000000e+00, float %134, !dbg !56
  %139 = select i1 %137, float 0.000000e+00, float %135, !dbg !56
  %140 = sext i32 %23 to i64, !dbg !57
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !57
  %142 = bitcast float %119 to i32, !dbg !58
  %143 = bitcast float %109 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %141, i1 true) #3, !dbg !58
  %144 = getelementptr float, ptr addrspace(1) %6, i64 %140, !dbg !59
  %145 = bitcast float %138 to i32, !dbg !60
  %146 = bitcast float %139 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %145, i32 %146, ptr addrspace(1) %144, i1 true) #3, !dbg !60
  %147 = mul i32 %126, 3072, !dbg !61
  %148 = add i32 %147, %.decomposed, !dbg !62
  %149 = sext i32 %148 to i64, !dbg !63
  %150 = getelementptr float, ptr addrspace(1) %7, i64 %149, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %150, i1 true) #3, !dbg !64
  %151 = mul i32 %126, 3200, !dbg !65
  %152 = add i32 %151, %.decomposed, !dbg !66
  %153 = sext i32 %152 to i64, !dbg !67
  %154 = getelementptr float, ptr addrspace(1) %8, i64 %153, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %154, i1 true) #3, !dbg !68
  %155 = mul i32 %126, 3328, !dbg !69
  %156 = add i32 %155, %.decomposed, !dbg !70
  %157 = sext i32 %156 to i64, !dbg !71
  %158 = getelementptr float, ptr addrspace(1) %9, i64 %157, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %158, i1 true) #3, !dbg !72
  %159 = mul i32 %126, 3456, !dbg !73
  %160 = add i32 %159, %.decomposed, !dbg !74
  %161 = sext i32 %160 to i64, !dbg !75
  %162 = getelementptr float, ptr addrspace(1) %10, i64 %161, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %162, i1 true) #3, !dbg !76
  %163 = mul i32 %126, 3584, !dbg !77
  %164 = add i32 %163, %.decomposed, !dbg !78
  %165 = sext i32 %164 to i64, !dbg !79
  %166 = getelementptr float, ptr addrspace(1) %11, i64 %165, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %166, i1 true) #3, !dbg !80
  %167 = mul i32 %126, 3712, !dbg !81
  %168 = add i32 %167, %.decomposed, !dbg !82
  %169 = sext i32 %168 to i64, !dbg !83
  %170 = getelementptr float, ptr addrspace(1) %12, i64 %169, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %170, i1 true) #3, !dbg !84
  %171 = mul i32 %126, 3840, !dbg !85
  %172 = add i32 %171, %.decomposed, !dbg !86
  %173 = sext i32 %172 to i64, !dbg !87
  %174 = getelementptr float, ptr addrspace(1) %13, i64 %173, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %174, i1 true) #3, !dbg !88
  %175 = mul i32 %126, 3968, !dbg !89
  %176 = add i32 %175, %.decomposed, !dbg !90
  %177 = sext i32 %176 to i64, !dbg !91
  %178 = getelementptr float, ptr addrspace(1) %14, i64 %177, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %178, i1 true) #3, !dbg !92
  %179 = shl i32 %126, 12, !dbg !93
  %180 = add i32 %179, %.decomposed, !dbg !94
  %181 = sext i32 %180 to i64, !dbg !95
  %182 = getelementptr float, ptr addrspace(1) %15, i64 %181, !dbg !95
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %182, i1 true) #3, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cch6dsmgz4jhnzsjwkss36aswq22nceij5qpzm2snsvb3s2tz7hx.py", directory: "inductor_cache/ch")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_72, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_72, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_72", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_72", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 27, column: 26, scope: !7)
!17 = !DILocation(line: 30, column: 32, scope: !7)
!18 = !DILocation(line: 30, column: 39, scope: !7)
!19 = !DILocation(line: 30, column: 37, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 44, scope: !7)
!22 = !DILocation(line: 31, column: 41, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 48, scope: !7)
!25 = !DILocation(line: 32, column: 41, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 48, scope: !7)
!28 = !DILocation(line: 33, column: 41, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 48, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 27, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 19, scope: !7)
!46 = !DILocation(line: 28, column: 19, scope: !7)
!47 = !DILocation(line: 29, column: 19, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 55, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 56, column: 25, scope: !7)
!58 = !DILocation(line: 56, column: 36, scope: !7)
!59 = !DILocation(line: 57, column: 25, scope: !7)
!60 = !DILocation(line: 57, column: 37, scope: !7)
!61 = !DILocation(line: 58, column: 35, scope: !7)
!62 = !DILocation(line: 58, column: 30, scope: !7)
!63 = !DILocation(line: 58, column: 25, scope: !7)
!64 = !DILocation(line: 58, column: 46, scope: !7)
!65 = !DILocation(line: 59, column: 35, scope: !7)
!66 = !DILocation(line: 59, column: 30, scope: !7)
!67 = !DILocation(line: 59, column: 25, scope: !7)
!68 = !DILocation(line: 59, column: 46, scope: !7)
!69 = !DILocation(line: 60, column: 35, scope: !7)
!70 = !DILocation(line: 60, column: 30, scope: !7)
!71 = !DILocation(line: 60, column: 25, scope: !7)
!72 = !DILocation(line: 60, column: 46, scope: !7)
!73 = !DILocation(line: 61, column: 35, scope: !7)
!74 = !DILocation(line: 61, column: 30, scope: !7)
!75 = !DILocation(line: 61, column: 25, scope: !7)
!76 = !DILocation(line: 61, column: 46, scope: !7)
!77 = !DILocation(line: 62, column: 35, scope: !7)
!78 = !DILocation(line: 62, column: 30, scope: !7)
!79 = !DILocation(line: 62, column: 25, scope: !7)
!80 = !DILocation(line: 62, column: 46, scope: !7)
!81 = !DILocation(line: 63, column: 35, scope: !7)
!82 = !DILocation(line: 63, column: 30, scope: !7)
!83 = !DILocation(line: 63, column: 25, scope: !7)
!84 = !DILocation(line: 63, column: 46, scope: !7)
!85 = !DILocation(line: 64, column: 35, scope: !7)
!86 = !DILocation(line: 64, column: 30, scope: !7)
!87 = !DILocation(line: 64, column: 25, scope: !7)
!88 = !DILocation(line: 64, column: 46, scope: !7)
!89 = !DILocation(line: 65, column: 35, scope: !7)
!90 = !DILocation(line: 65, column: 30, scope: !7)
!91 = !DILocation(line: 65, column: 25, scope: !7)
!92 = !DILocation(line: 65, column: 46, scope: !7)
!93 = !DILocation(line: 66, column: 36, scope: !7)
!94 = !DILocation(line: 66, column: 31, scope: !7)
!95 = !DILocation(line: 66, column: 26, scope: !7)
!96 = !DILocation(line: 66, column: 47, scope: !7)
!97 = !DILocation(line: 66, column: 4, scope: !7)
