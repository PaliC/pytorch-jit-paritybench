#loc = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":19:0)
#loc1 = loc(unknown)
#loc64 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":73:26)
#loc75 = loc(callsite(#loc1 at #loc64))
module {
  tt.func public @triton_per_fused_smooth_l1_loss_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<1.920000e+02> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<5.000000e-01> : tensor<1x256xf32> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x256xf32> loc(#loc1)
    %cst_2 = arith.constant dense<12> : tensor<1x256xi32> loc(#loc1)
    %cst_3 = arith.constant dense<-8> : tensor<1x256xi32> loc(#loc1)
    %cst_4 = arith.constant dense<8> : tensor<1x256xi32> loc(#loc1)
    %cst_5 = arith.constant dense<-4> : tensor<1x256xi32> loc(#loc1)
    %cst_6 = arith.constant dense<8> : tensor<1x256xi64> loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x256xf32> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<1x256xi32> loc(#loc1)
    %cst_9 = arith.constant dense<4> : tensor<1x256xi64> loc(#loc1)
    %cst_10 = arith.constant dense<4> : tensor<1x256xi32> loc(#loc1)
    %cst_11 = arith.constant dense<16> : tensor<1x256xi32> loc(#loc1)
    %cst_12 = arith.constant dense<192> : tensor<1x256xi32> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc3)
    %2 = arith.cmpi slt, %1, %cst_12 : tensor<1x256xi32> loc(#loc4)
    %3 = arith.divsi %1, %cst_11 : tensor<1x256xi32> loc(#loc5)
    %4 = arith.remsi %1, %cst_10 : tensor<1x256xi32> loc(#loc6)
    %5 = arith.divsi %1, %cst_10 : tensor<1x256xi32> loc(#loc7)
    %6 = arith.remsi %5, %cst_10 : tensor<1x256xi32> loc(#loc8)
    %7 = arith.extsi %3 : tensor<1x256xi32> to tensor<1x256xi64> loc(#loc9)
    %8 = arith.cmpi slt, %7, %cst_9 : tensor<1x256xi64> loc(#loc9)
    %9 = arith.muli %6, %cst_11 : tensor<1x256xi32> loc(#loc10)
    %10 = arith.addi %4, %9 : tensor<1x256xi32> loc(#loc11)
    %11 = arith.muli %3, %cst_8 : tensor<1x256xi32> loc(#loc12)
    %12 = arith.addi %10, %11 : tensor<1x256xi32> loc(#loc13)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc14)
    %14 = tt.addptr %13, %12 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc14)
    %15 = arith.andi %2, %8 : tensor<1x256xi1> loc(#loc15)
    %16 = tt.load %14, %15, %cst_7 : tensor<1x256x!tt.ptr<f32>> loc(#loc16)
    %17 = arith.addi %4, %cst_10 : tensor<1x256xi32> loc(#loc17)
    %18 = arith.addi %17, %9 : tensor<1x256xi32> loc(#loc18)
    %19 = arith.addi %18, %11 : tensor<1x256xi32> loc(#loc19)
    %20 = tt.addptr %13, %19 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc20)
    %21 = tt.load %20, %15, %cst_7 : tensor<1x256x!tt.ptr<f32>> loc(#loc21)
    %22 = arith.subf %16, %21 : tensor<1x256xf32> loc(#loc22)
    %23 = arith.cmpi sge, %7, %cst_9 : tensor<1x256xi64> loc(#loc23)
    %24 = arith.cmpi slt, %7, %cst_6 : tensor<1x256xi64> loc(#loc24)
    %25 = arith.andi %23, %24 : tensor<1x256xi1> loc(#loc25)
    %26 = arith.addi %3, %cst_5 : tensor<1x256xi32> loc(#loc26)
    %27 = arith.muli %26, %cst_8 : tensor<1x256xi32> loc(#loc27)
    %28 = arith.addi %18, %27 : tensor<1x256xi32> loc(#loc28)
    %29 = tt.addptr %13, %28 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc29)
    %30 = arith.andi %2, %25 : tensor<1x256xi1> loc(#loc30)
    %31 = tt.load %29, %30, %cst_7 : tensor<1x256x!tt.ptr<f32>> loc(#loc31)
    %32 = arith.addi %4, %cst_4 : tensor<1x256xi32> loc(#loc32)
    %33 = arith.addi %32, %9 : tensor<1x256xi32> loc(#loc33)
    %34 = arith.addi %33, %27 : tensor<1x256xi32> loc(#loc34)
    %35 = tt.addptr %13, %34 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc35)
    %36 = tt.load %35, %30, %cst_7 : tensor<1x256x!tt.ptr<f32>> loc(#loc36)
    %37 = arith.subf %31, %36 : tensor<1x256xf32> loc(#loc37)
    %38 = arith.cmpi sge, %7, %cst_6 : tensor<1x256xi64> loc(#loc38)
    %39 = arith.addi %3, %cst_3 : tensor<1x256xi32> loc(#loc39)
    %40 = arith.muli %39, %cst_8 : tensor<1x256xi32> loc(#loc40)
    %41 = arith.addi %33, %40 : tensor<1x256xi32> loc(#loc41)
    %42 = tt.addptr %13, %41 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc42)
    %43 = arith.andi %2, %38 : tensor<1x256xi1> loc(#loc43)
    %44 = tt.load %42, %43, %cst_7 : tensor<1x256x!tt.ptr<f32>> loc(#loc44)
    %45 = arith.addi %4, %cst_2 : tensor<1x256xi32> loc(#loc45)
    %46 = arith.addi %45, %9 : tensor<1x256xi32> loc(#loc46)
    %47 = arith.addi %46, %40 : tensor<1x256xi32> loc(#loc47)
    %48 = tt.addptr %13, %47 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc48)
    %49 = tt.load %48, %43, %cst_7 : tensor<1x256x!tt.ptr<f32>> loc(#loc49)
    %50 = arith.subf %44, %49 : tensor<1x256xf32> loc(#loc50)
    %51 = arith.select %38, %50, %cst_7 : tensor<1x256xi1>, tensor<1x256xf32> loc(#loc51)
    %52 = arith.select %25, %37, %51 : tensor<1x256xi1>, tensor<1x256xf32> loc(#loc72)
    %53 = arith.select %8, %22, %52 : tensor<1x256xi1>, tensor<1x256xf32> loc(#loc73)
    %54 = math.absf %53 : tensor<1x256xf32> loc(#loc56)
    %55 = arith.cmpf olt, %54, %cst_1 : tensor<1x256xf32> loc(#loc57)
    %56 = arith.mulf %54, %54 : tensor<1x256xf32> loc(#loc58)
    %57 = arith.mulf %56, %cst_0 : tensor<1x256xf32> loc(#loc59)
    %58 = arith.subf %54, %cst_0 : tensor<1x256xf32> loc(#loc60)
    %59 = arith.select %55, %57, %58 : tensor<1x256xi1>, tensor<1x256xf32> loc(#loc61)
    %60 = arith.select %2, %59, %cst_7 : tensor<1x256xi1>, tensor<1x256xf32> loc(#loc62)
    %61 = "tt.reduce"(%60) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc64)), %arg4: f32 loc(callsite(#loc1 at #loc64))):
      %66 = arith.addf %arg3, %arg4 : f32 loc(#loc77)
      tt.reduce.return %66 : f32 loc(#loc74)
    }) : (tensor<1x256xf32>) -> tensor<1xf32> loc(#loc74)
    %62 = tt.expand_dims %61 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc66)
    %63 = arith.divf %62, %cst : tensor<1x1xf32> loc(#loc67)
    gpu.barrier loc(#loc68)
    %64 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc69)
    %65 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc69)
    tt.store %65, %63 : tensor<1x1x!tt.ptr<f32>> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":26:26)
#loc3 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":26:34)
#loc4 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":28:21)
#loc5 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":29:19)
#loc6 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":30:19)
#loc7 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":31:21)
#loc8 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":31:26)
#loc9 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":37:18)
#loc10 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":38:54)
#loc11 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":38:51)
#loc12 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":38:63)
#loc13 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":38:59)
#loc14 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":38:30)
#loc15 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":38:96)
#loc16 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":38:88)
#loc17 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":39:50)
#loc18 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":39:55)
#loc19 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":39:63)
#loc20 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":39:30)
#loc21 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":39:92)
#loc22 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":40:18)
#loc23 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":43:20)
#loc24 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":45:19)
#loc25 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":46:20)
#loc26 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":47:75)
#loc27 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":47:68)
#loc28 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":47:64)
#loc29 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":47:31)
#loc30 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":47:108)
#loc31 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":47:100)
#loc32 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":48:51)
#loc33 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":48:56)
#loc34 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":48:64)
#loc35 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":48:31)
#loc36 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":48:100)
#loc37 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":49:20)
#loc38 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":52:20)
#loc39 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":55:75)
#loc40 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":55:68)
#loc41 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":55:64)
#loc42 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":55:31)
#loc43 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":55:108)
#loc44 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":55:100)
#loc45 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":56:52)
#loc46 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":56:57)
#loc47 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":56:65)
#loc48 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":56:31)
#loc49 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":56:101)
#loc50 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":57:20)
#loc51 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":59:35)
#loc52 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":60:35)
#loc53 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":51:35)
#loc54 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":61:33)
#loc55 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":42:32)
#loc56 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":62:24)
#loc57 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":64:20)
#loc58 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":65:20)
#loc59 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":67:20)
#loc60 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":69:20)
#loc61 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":70:35)
#loc62 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":72:35)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc66 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":73:29)
#loc67 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":75:20)
#loc68 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":76:4)
#loc69 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":77:28)
#loc70 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":77:71)
#loc71 = loc("inductor_cache/3g/c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py":77:4)
#loc72 = loc(fused[#loc52, #loc53])
#loc73 = loc(fused[#loc54, #loc55])
#loc74 = loc(callsite(#loc63 at #loc64))
#loc76 = loc(callsite(#loc65 at #loc63))
#loc77 = loc(callsite(#loc76 at #loc64))
