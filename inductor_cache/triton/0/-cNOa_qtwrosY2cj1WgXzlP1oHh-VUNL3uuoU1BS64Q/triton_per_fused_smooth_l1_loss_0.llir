; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_smooth_l1_loss_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = shl i32 %4, 2, !dbg !10
  %8 = and i32 %7, 192, !dbg !10
  %9 = and i32 %7, 240, !dbg !10
  %10 = icmp ne i32 %8, 192, !dbg !11
  %11 = icmp eq i32 %8, 0, !dbg !12
  %12 = shl i32 %4, 4, !dbg !13
  %13 = and i32 %12, 48, !dbg !13
  %14 = shl nuw nsw i32 %9, 2, !dbg !14
  %15 = or disjoint i32 %14, %13, !dbg !15
  %16 = zext nneg i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #4, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !17
  %23 = bitcast i32 %21 to float, !dbg !17
  %24 = bitcast i32 %22 to float, !dbg !17
  %25 = or disjoint i32 %13, 4, !dbg !18
  %26 = or disjoint i32 %25, %14, !dbg !19
  %27 = zext nneg i32 %26 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #4, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %34 = bitcast i32 %32 to float, !dbg !21
  %35 = bitcast i32 %33 to float, !dbg !21
  %36 = fsub float %23, %34, !dbg !22
  %37 = fsub float %24, %35, !dbg !22
  %38 = icmp samesign ugt i32 %9, 48, !dbg !23
  %39 = and i32 %4, 32, !dbg !24
  %40 = icmp eq i32 %39, 0, !dbg !24
  %41 = and i1 %40, %38, !dbg !25
  %42 = add nsw i32 %14, -256, !dbg !26
  %43 = or disjoint i32 %42, %25, !dbg !27
  %44 = sext i32 %43 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #4, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %51 = bitcast i32 %49 to float, !dbg !29
  %52 = bitcast i32 %50 to float, !dbg !29
  %53 = or disjoint i32 %13, 8, !dbg !30
  %54 = or disjoint i32 %42, %53, !dbg !31
  %55 = sext i32 %54 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !32
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #4, !dbg !33
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !33
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !33
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !33
  %62 = bitcast i32 %60 to float, !dbg !33
  %63 = bitcast i32 %61 to float, !dbg !33
  %64 = fsub float %51, %62, !dbg !34
  %65 = fsub float %52, %63, !dbg !34
  %66 = icmp samesign ugt i32 %9, 112, !dbg !35
  %67 = add nsw i32 %14, -512, !dbg !36
  %68 = or disjoint i32 %67, %53, !dbg !37
  %69 = sext i32 %68 to i64, !dbg !38
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !38
  %71 = and i1 %10, %66, !dbg !39
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #4, !dbg !40
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !40
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !40
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !40
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !40
  %77 = bitcast i32 %75 to float, !dbg !40
  %78 = bitcast i32 %76 to float, !dbg !40
  %79 = or disjoint i32 %13, %67, !dbg !41
  %80 = or disjoint i32 %79, 12, !dbg !41
  %81 = sext i32 %80 to i64, !dbg !42
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !42
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #4, !dbg !43
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !43
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !43
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !43
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !43
  %88 = bitcast i32 %86 to float, !dbg !43
  %89 = bitcast i32 %87 to float, !dbg !43
  %90 = fsub float %77, %88, !dbg !44
  %91 = fsub float %78, %89, !dbg !44
  %92 = select i1 %66, float %90, float 0.000000e+00, !dbg !45
  %93 = select i1 %66, float %91, float 0.000000e+00, !dbg !45
  %94 = select i1 %41, float %64, float %92, !dbg !46
  %95 = select i1 %41, float %65, float %93, !dbg !46
  %96 = select i1 %11, float %36, float %94, !dbg !46
  %97 = select i1 %11, float %37, float %95, !dbg !46
  %98 = tail call float @llvm.fabs.f32(float %96), !dbg !47
  %99 = tail call float @llvm.fabs.f32(float %97), !dbg !47
  %100 = fcmp olt float %98, 1.000000e+00, !dbg !48
  %101 = fcmp olt float %99, 1.000000e+00, !dbg !48
  %102 = fmul float %96, %96, !dbg !49
  %103 = fmul float %97, %97, !dbg !49
  %104 = fmul float %102, 5.000000e-01, !dbg !50
  %105 = fmul float %103, 5.000000e-01, !dbg !50
  %106 = fadd float %98, -5.000000e-01, !dbg !51
  %107 = fadd float %99, -5.000000e-01, !dbg !51
  %108 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !17
  %109 = insertelement <2 x i32> %108, i32 %20, i64 1, !dbg !17
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !17
  %111 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %112 = insertelement <2 x i32> %111, i32 %31, i64 1, !dbg !21
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !21
  %114 = fsub <2 x float> %110, %113, !dbg !22
  %115 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !29
  %116 = insertelement <2 x i32> %115, i32 %48, i64 1, !dbg !29
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !29
  %118 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !33
  %119 = insertelement <2 x i32> %118, i32 %59, i64 1, !dbg !33
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !33
  %121 = fsub <2 x float> %117, %120, !dbg !34
  %122 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !40
  %123 = insertelement <2 x i32> %122, i32 %74, i64 1, !dbg !40
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !40
  %125 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !43
  %126 = insertelement <2 x i32> %125, i32 %85, i64 1, !dbg !43
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !43
  %128 = fsub <2 x float> %124, %127, !dbg !44
  %129 = insertelement <2 x i1> poison, i1 %66, i64 0, !dbg !45
  %130 = shufflevector <2 x i1> %129, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !45
  %131 = select <2 x i1> %130, <2 x float> %128, <2 x float> zeroinitializer, !dbg !45
  %132 = insertelement <2 x i1> poison, i1 %41, i64 0, !dbg !46
  %133 = shufflevector <2 x i1> %132, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !46
  %134 = select <2 x i1> %133, <2 x float> %121, <2 x float> %131, !dbg !46
  %135 = insertelement <2 x i1> poison, i1 %11, i64 0, !dbg !46
  %136 = shufflevector <2 x i1> %135, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !46
  %137 = select <2 x i1> %136, <2 x float> %114, <2 x float> %134, !dbg !46
  %138 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %137), !dbg !47
  %139 = fcmp olt <2 x float> %138, splat (float 1.000000e+00), !dbg !48
  %140 = fmul <2 x float> %137, %137, !dbg !49
  %141 = fmul <2 x float> %140, splat (float 5.000000e-01), !dbg !50
  %142 = fadd <2 x float> %138, splat (float -5.000000e-01), !dbg !51
  %143 = select <2 x i1> %139, <2 x float> %141, <2 x float> %142, !dbg !52
  %144 = select i1 %100, float %104, float %106, !dbg !52
  %145 = select i1 %101, float %105, float %107, !dbg !52
  %shift = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %146 = fadd <2 x float> %143, %shift, !dbg !53
  %147 = extractelement <2 x float> %146, i64 0, !dbg !53
  %148 = fadd float %144, %147, !dbg !53
  %149 = fadd float %145, %148, !dbg !53
  %150 = select i1 %10, float %149, float 0.000000e+00, !dbg !53
  %151 = bitcast float %150 to i32, !dbg !58
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !58
  %153 = bitcast i32 %152 to float, !dbg !58
  %154 = fadd float %150, %153, !dbg !53
  %155 = bitcast float %154 to i32, !dbg !58
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !58
  %157 = bitcast i32 %156 to float, !dbg !58
  %158 = fadd float %154, %157, !dbg !53
  %159 = bitcast float %158 to i32, !dbg !58
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !58
  %161 = bitcast i32 %160 to float, !dbg !58
  %162 = fadd float %158, %161, !dbg !53
  %163 = bitcast float %162 to i32, !dbg !58
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !58
  %165 = bitcast i32 %164 to float, !dbg !58
  %166 = fadd float %162, %165, !dbg !53
  %167 = bitcast float %166 to i32, !dbg !58
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !58
  %169 = bitcast i32 %168 to float, !dbg !58
  %170 = fadd float %166, %169, !dbg !53
  %171 = icmp eq i32 %5, 0, !dbg !58
  %172 = and i32 %6, 1, !dbg !58
  %173 = zext nneg i32 %172 to i64, !dbg !58
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i64 %173, !dbg !58
  %175 = bitcast float %170 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 %171) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %176 = icmp slt i32 %4, 2, !dbg !58
  %177 = sext i32 %4 to i64, !dbg !58
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i64 %177, !dbg !58
  %179 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %178, i1 %176) #4, !dbg !58
  %180 = bitcast i32 %179 to float, !dbg !58
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !58
  %182 = bitcast i32 %181 to float, !dbg !58
  %183 = fadd float %180, %182, !dbg !53
  %184 = and i32 %4, 1, !dbg !58
  %185 = icmp eq i32 %184, 0, !dbg !58
  %186 = and i1 %176, %185, !dbg !58
  %187 = bitcast float %183 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %187, i1 %186) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %188 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !58
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float 1.920000e+02) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %urem = and i32 %4, 63, !dbg !61
  %190 = icmp eq i32 %urem, 0, !dbg !61
  %191 = bitcast float %189 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %191, ptr addrspace(1) %0, i1 %190) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3g6lvstsdxlxevjwm4yujwhm3fc2xvf35zkrsol6qhf3mx36jvg.py", directory: "inductor_cache/3g")
!4 = !{ptr @triton_per_fused_smooth_l1_loss_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_smooth_l1_loss_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_smooth_l1_loss_0", linkageName: "triton_per_fused_smooth_l1_loss_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 37, column: 18, scope: !7)
!13 = !DILocation(line: 38, column: 54, scope: !7)
!14 = !DILocation(line: 38, column: 63, scope: !7)
!15 = !DILocation(line: 38, column: 59, scope: !7)
!16 = !DILocation(line: 38, column: 30, scope: !7)
!17 = !DILocation(line: 38, column: 88, scope: !7)
!18 = !DILocation(line: 39, column: 55, scope: !7)
!19 = !DILocation(line: 39, column: 63, scope: !7)
!20 = !DILocation(line: 39, column: 30, scope: !7)
!21 = !DILocation(line: 39, column: 92, scope: !7)
!22 = !DILocation(line: 40, column: 18, scope: !7)
!23 = !DILocation(line: 43, column: 20, scope: !7)
!24 = !DILocation(line: 45, column: 19, scope: !7)
!25 = !DILocation(line: 46, column: 20, scope: !7)
!26 = !DILocation(line: 47, column: 68, scope: !7)
!27 = !DILocation(line: 47, column: 64, scope: !7)
!28 = !DILocation(line: 47, column: 31, scope: !7)
!29 = !DILocation(line: 47, column: 100, scope: !7)
!30 = !DILocation(line: 48, column: 56, scope: !7)
!31 = !DILocation(line: 48, column: 64, scope: !7)
!32 = !DILocation(line: 48, column: 31, scope: !7)
!33 = !DILocation(line: 48, column: 100, scope: !7)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 20, scope: !7)
!36 = !DILocation(line: 55, column: 68, scope: !7)
!37 = !DILocation(line: 55, column: 64, scope: !7)
!38 = !DILocation(line: 55, column: 31, scope: !7)
!39 = !DILocation(line: 55, column: 108, scope: !7)
!40 = !DILocation(line: 55, column: 100, scope: !7)
!41 = !DILocation(line: 56, column: 65, scope: !7)
!42 = !DILocation(line: 56, column: 31, scope: !7)
!43 = !DILocation(line: 56, column: 101, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 35, scope: !7)
!46 = !DILocation(line: 0, scope: !7)
!47 = !DILocation(line: 62, column: 24, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 65, column: 20, scope: !7)
!50 = !DILocation(line: 67, column: 20, scope: !7)
!51 = !DILocation(line: 69, column: 20, scope: !7)
!52 = !DILocation(line: 70, column: 35, scope: !7)
!53 = !DILocation(line: 256, column: 15, scope: !54, inlinedAt: !57)
!54 = distinct !DILexicalBlockFile(scope: !56, file: !55, discriminator: 0)
!55 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!56 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!57 = !DILocation(line: 73, column: 26, scope: !7)
!58 = !DILocation(line: 267, column: 36, scope: !56, inlinedAt: !57)
!59 = !DILocation(line: 75, column: 20, scope: !7)
!60 = !DILocation(line: 76, column: 4, scope: !7)
!61 = !DILocation(line: 77, column: 71, scope: !7)
!62 = !DILocation(line: 77, column: 4, scope: !7)
