; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_pow_sum_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr4 = freeze i32 %5, !dbg !11
  %6 = shl i32 %.fr4, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 1024, !dbg !14
  %12 = lshr i32 %7, 4, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = sdiv i32 %10, 64, !dbg !16
  %15 = mul i32 %14, 8128
  %16 = add i32 %15, %10
  br i1 %11, label %.split.us, label %.split

.split.us:                                        ; preds = %4, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %4 ]
  %17 = phi <4 x float> [ %34, %.split.us ], [ zeroinitializer, %4 ]
  %18 = trunc i64 %indvars.iv7 to i32, !dbg !17
  %.tr9 = or disjoint i32 %13, %18, !dbg !17
  %19 = shl i32 %.tr9, 6, !dbg !17
  %20 = add i32 %16, %19, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !19
  %29 = insertelement <4 x i32> %28, i32 %25, i64 1, !dbg !19
  %30 = insertelement <4 x i32> %29, i32 %26, i64 2, !dbg !19
  %31 = insertelement <4 x i32> %30, i32 %27, i64 3, !dbg !19
  %32 = bitcast <4 x i32> %31 to <4 x float>, !dbg !19
  %33 = fmul <4 x float> %32, %32, !dbg !20
  %34 = fadd <4 x float> %17, %33, !dbg !21
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !22
  %35 = icmp samesign ult i64 %indvars.iv7, 120, !dbg !22
  br i1 %35, label %.split.us, label %.split2.us, !dbg !22

.split:                                           ; preds = %4
  %36 = shl nuw nsw i32 %13, 6, !dbg !17
  %37 = add i32 %16, %36, !dbg !17
  %38 = sext i32 %37 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.1 = shl nuw nsw i32 %13, 6, !dbg !17
  %41 = or disjoint i32 %.tr.1, 512, !dbg !17
  %42 = add i32 %16, %41, !dbg !17
  %43 = sext i32 %42 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.2 = shl nuw nsw i32 %13, 6, !dbg !17
  %46 = or disjoint i32 %.tr.2, 1024, !dbg !17
  %47 = add i32 %16, %46, !dbg !17
  %48 = sext i32 %47 to i64, !dbg !18
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !18
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.3 = shl nuw nsw i32 %13, 6, !dbg !17
  %51 = or disjoint i32 %.tr.3, 1536, !dbg !17
  %52 = add i32 %16, %51, !dbg !17
  %53 = sext i32 %52 to i64, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !18
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.4 = shl nuw nsw i32 %13, 6, !dbg !17
  %56 = or disjoint i32 %.tr.4, 2048, !dbg !17
  %57 = add i32 %16, %56, !dbg !17
  %58 = sext i32 %57 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.5 = shl nuw nsw i32 %13, 6, !dbg !17
  %61 = or disjoint i32 %.tr.5, 2560, !dbg !17
  %62 = add i32 %16, %61, !dbg !17
  %63 = sext i32 %62 to i64, !dbg !18
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !18
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.6 = shl nuw nsw i32 %13, 6, !dbg !17
  %66 = or disjoint i32 %.tr.6, 3072, !dbg !17
  %67 = add i32 %16, %66, !dbg !17
  %68 = sext i32 %67 to i64, !dbg !18
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !18
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.7 = shl nuw nsw i32 %13, 6, !dbg !17
  %71 = or disjoint i32 %.tr.7, 3584, !dbg !17
  %72 = add i32 %16, %71, !dbg !17
  %73 = sext i32 %72 to i64, !dbg !18
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !18
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.8 = shl nuw nsw i32 %13, 6, !dbg !17
  %76 = or disjoint i32 %.tr.8, 4096, !dbg !17
  %77 = add i32 %16, %76, !dbg !17
  %78 = sext i32 %77 to i64, !dbg !18
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !18
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.9 = shl nuw nsw i32 %13, 6, !dbg !17
  %81 = or disjoint i32 %.tr.9, 4608, !dbg !17
  %82 = add i32 %16, %81, !dbg !17
  %83 = sext i32 %82 to i64, !dbg !18
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !18
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.10 = shl nuw nsw i32 %13, 6, !dbg !17
  %86 = or disjoint i32 %.tr.10, 5120, !dbg !17
  %87 = add i32 %16, %86, !dbg !17
  %88 = sext i32 %87 to i64, !dbg !18
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !18
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.11 = shl nuw nsw i32 %13, 6, !dbg !17
  %91 = or disjoint i32 %.tr.11, 5632, !dbg !17
  %92 = add i32 %16, %91, !dbg !17
  %93 = sext i32 %92 to i64, !dbg !18
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !18
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.12 = shl nuw nsw i32 %13, 6, !dbg !17
  %96 = or disjoint i32 %.tr.12, 6144, !dbg !17
  %97 = add i32 %16, %96, !dbg !17
  %98 = sext i32 %97 to i64, !dbg !18
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !18
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.13 = shl nuw nsw i32 %13, 6, !dbg !17
  %101 = or disjoint i32 %.tr.13, 6656, !dbg !17
  %102 = add i32 %16, %101, !dbg !17
  %103 = sext i32 %102 to i64, !dbg !18
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !18
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.14 = shl nuw nsw i32 %13, 6, !dbg !17
  %106 = or disjoint i32 %.tr.14, 7168, !dbg !17
  %107 = add i32 %16, %106, !dbg !17
  %108 = sext i32 %107 to i64, !dbg !18
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !18
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.15 = shl nuw nsw i32 %13, 6, !dbg !17
  %111 = or disjoint i32 %.tr.15, 7680, !dbg !17
  %112 = add i32 %16, %111, !dbg !17
  %113 = sext i32 %112 to i64, !dbg !18
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !18
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.us, %.split
  %116 = phi <4 x float> [ zeroinitializer, %.split ], [ %34, %.split.us ], !dbg !12
  %117 = lshr i32 %7, 5, !dbg !12
  %118 = and i32 %7, 63, !dbg !12
  %119 = or disjoint i32 %6, %118, !dbg !13
  %120 = icmp slt i32 %119, 1024, !dbg !14
  %121 = and i32 %7, 16, !dbg !12
  %122 = extractelement <4 x float> %116, i64 0, !dbg !23
  %123 = bitcast float %122 to i32, !dbg !23
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !23
  %125 = bitcast i32 %124 to float, !dbg !23
  %126 = fadd float %122, %125, !dbg !27
  %127 = extractelement <4 x float> %116, i64 1, !dbg !23
  %128 = bitcast float %127 to i32, !dbg !23
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !23
  %130 = bitcast i32 %129 to float, !dbg !23
  %131 = fadd float %127, %130, !dbg !27
  %132 = extractelement <4 x float> %116, i64 2, !dbg !23
  %133 = bitcast float %132 to i32, !dbg !23
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !23
  %135 = bitcast i32 %134 to float, !dbg !23
  %136 = fadd float %132, %135, !dbg !27
  %137 = extractelement <4 x float> %116, i64 3, !dbg !23
  %138 = bitcast float %137 to i32, !dbg !23
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !23
  %140 = bitcast i32 %139 to float, !dbg !23
  %141 = fadd float %137, %140, !dbg !27
  %142 = icmp eq i32 %121, 0, !dbg !23
  %143 = and i32 %117, 3, !dbg !23
  %144 = shl nuw nsw i32 %9, 2, !dbg !23
  %145 = or disjoint i32 %144, %143, !dbg !23
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !23
  %147 = bitcast float %126 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 %142) #3, !dbg !23
  %148 = or disjoint i32 %144, 4, !dbg !23
  %149 = or disjoint i32 %148, %143, !dbg !23
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !23
  %151 = bitcast float %131 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 %142) #3, !dbg !23
  %152 = or disjoint i32 %144, 8, !dbg !23
  %153 = or disjoint i32 %152, %143, !dbg !23
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !23
  %155 = bitcast float %136 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 %142) #3, !dbg !23
  %156 = or disjoint i32 %144, 12, !dbg !23
  %157 = or disjoint i32 %156, %143, !dbg !23
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !23
  %159 = bitcast float %141 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %142) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %160 = icmp slt i32 %7, 256, !dbg !23
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !23
  %162 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %161, i1 %160) #3, !dbg !23
  %163 = bitcast i32 %162 to float, !dbg !23
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !23
  %165 = bitcast i32 %164 to float, !dbg !23
  %166 = fadd float %163, %165, !dbg !27
  %167 = bitcast float %166 to i32, !dbg !23
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !23
  %169 = bitcast i32 %168 to float, !dbg !23
  %170 = fadd float %166, %169, !dbg !27
  %171 = and i32 %7, 3, !dbg !23
  %172 = icmp eq i32 %171, 0, !dbg !23
  %173 = and i1 %160, %172, !dbg !23
  %174 = bitcast float %170 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %174, i1 %173) #3, !dbg !23
  %175 = getelementptr i8, ptr addrspace(3) %161, i32 512, !dbg !23
  %176 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %175, i1 %160) #3, !dbg !23
  %177 = bitcast i32 %176 to float, !dbg !23
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !23
  %179 = bitcast i32 %178 to float, !dbg !23
  %180 = fadd float %177, %179, !dbg !27
  %181 = bitcast float %180 to i32, !dbg !23
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !23
  %183 = bitcast i32 %182 to float, !dbg !23
  %184 = fadd float %180, %183, !dbg !27
  %185 = bitcast float %184 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %185, i1 %173) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !23
  %187 = load i32, ptr addrspace(3) %186, align 16, !dbg !23
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !23
  %189 = load i32, ptr addrspace(3) %188, align 16, !dbg !23
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !23
  %191 = load i32, ptr addrspace(3) %190, align 16, !dbg !23
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !23
  %193 = load i32, ptr addrspace(3) %192, align 16, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %194, i32 %187, i32 %189, i32 %191, i32 %193, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !29
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !29
  %197 = sext i32 %119 to i64, !dbg !30
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !30
  %199 = and i32 %7, 64, !dbg !31
  %200 = icmp eq i32 %199, 0, !dbg !31
  %201 = and i1 %200, %120, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %198, i1 %201) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuk24a3sdohgngajaq4lqysb2yfp5nwywytfuxqwmrz22qpryf5f.py", directory: "inductor_cache/uk")
!4 = !{ptr @triton_red_fused_pow_sum_18, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_pow_sum_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_pow_sum_18", linkageName: "triton_red_fused_pow_sum_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 47, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 57, scope: !7)
!20 = !DILocation(line: 35, column: 22, scope: !7)
!21 = !DILocation(line: 37, column: 23, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 39, column: 25, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 39, column: 28, scope: !7)
!30 = !DILocation(line: 40, column: 25, scope: !7)
!31 = !DILocation(line: 40, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 4, scope: !7)
