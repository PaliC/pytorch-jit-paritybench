; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = shl i32 %4, 2, !dbg !10
  %8 = and i32 %7, 252, !dbg !10
  %9 = zext nneg i32 %8 to i64, !dbg !11
  %10 = getelementptr float, ptr addrspace(1) %1, i64 %9, !dbg !11
  %11 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %10, i1 true) #6, !dbg !12
  %12 = extractvalue { i32, i32, i32, i32 } %11, 0, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %11, 1, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %11, 2, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %11, 3, !dbg !12
  %16 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !12
  %17 = insertelement <2 x i32> %16, i32 %13, i64 1, !dbg !12
  %18 = bitcast <2 x i32> %17 to <2 x float>, !dbg !12
  %19 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %18), !dbg !13
  %20 = fmul <2 x float> %18, %18, !dbg !14
  %21 = fmul <2 x float> %20, %19, !dbg !15
  %22 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !12
  %23 = insertelement <2 x i32> %22, i32 %14, i64 1, !dbg !12
  %24 = bitcast <2 x i32> %23 to <2 x float>, !dbg !12
  %25 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %24), !dbg !13
  %26 = fmul <2 x float> %24, %24, !dbg !14
  %27 = fmul <2 x float> %26, %25, !dbg !15
  %shift = shufflevector <2 x float> %21, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !16
  %28 = fadd <2 x float> %21, %shift, !dbg !16
  %shift1 = shufflevector <2 x float> %27, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !16
  %29 = fadd <2 x float> %shift1, %28, !dbg !16
  %30 = fadd <2 x float> %27, %29, !dbg !16
  %31 = extractelement <2 x float> %30, i64 0, !dbg !16
  %32 = bitcast float %31 to i32, !dbg !21
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = fadd float %31, %34, !dbg !16
  %36 = bitcast float %35 to i32, !dbg !21
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = fadd float %35, %38, !dbg !16
  %40 = bitcast float %39 to i32, !dbg !21
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = fadd float %39, %42, !dbg !16
  %44 = bitcast float %43 to i32, !dbg !21
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = fadd float %43, %46, !dbg !16
  %48 = bitcast float %47 to i32, !dbg !21
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = fadd float %47, %50, !dbg !16
  %52 = icmp eq i32 %5, 0, !dbg !21
  %53 = and i32 %6, 1, !dbg !21
  %54 = zext nneg i32 %53 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !21
  %56 = bitcast float %51 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 %52) #6, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %57 = icmp slt i32 %4, 2, !dbg !21
  %58 = sext i32 %4 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !21
  %60 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %59, i1 %57) #6, !dbg !21
  %61 = bitcast i32 %60 to float, !dbg !21
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !21
  %63 = bitcast i32 %62 to float, !dbg !21
  %64 = fadd float %61, %63, !dbg !16
  %65 = and i32 %4, 1, !dbg !21
  %66 = icmp eq i32 %65, 0, !dbg !21
  %67 = and i1 %57, %66, !dbg !21
  %68 = bitcast float %64 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %68, i1 %67) #6, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %69 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %70 = fadd float %69, 0.000000e+00, !dbg !22
  %71 = tail call float @llvm.nvvm.trunc.f(float 0x3FC5555560000000) #6, !dbg !26
  %72 = fmul float %71, 2.000000e+00, !dbg !26
  %73 = fsub float 0x3FD5555560000000, %72, !dbg !26
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not.i = icmp eq i32 %74, 0, !dbg !26
  %75 = tail call float @llvm.nvvm.fabs.ftz.f(float %73) #6, !dbg !26
  %76 = tail call float @llvm.nvvm.fabs.f(float %73) #6, !dbg !26
  %.08.i = select i1 %.not.i, float %76, float %75, !dbg !26
  %77 = fcmp oeq float %.08.i, 1.000000e+00, !dbg !26
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not12.i = icmp eq i32 %78, 0, !dbg !26
  %79 = tail call float @llvm.nvvm.fabs.ftz.f(float %70) #6, !dbg !26
  %80 = tail call float @llvm.nvvm.fabs.f(float %70) #6, !dbg !26
  %.09.i = select i1 %.not12.i, float %80, float %79, !dbg !26
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not13.i = icmp eq i32 %81, 0, !dbg !26
  %82 = fcmp olt float %.09.i, 0x3810000000000000, !dbg !26
  %83 = fmul float %.09.i, 0x4170000000000000, !dbg !26
  %84 = select i1 %.not13.i, i1 %82, i1 false, !dbg !26
  %.116.i = select i1 %84, float %83, float %.09.i, !dbg !26
  %expo.i.i.1.i = select i1 %84, float -1.510000e+02, float -1.270000e+02, !dbg !26
  %85 = bitcast float %.116.i to i32, !dbg !26
  %86 = and i32 %85, 8388607, !dbg !26
  %87 = or disjoint i32 %86, 1065353216, !dbg !26
  %88 = bitcast i32 %87 to float, !dbg !26
  %89 = lshr i32 %85, 23, !dbg !26
  %90 = uitofp nneg i32 %89 to float, !dbg !26
  %91 = fadd float %expo.i.i.1.i, %90, !dbg !26
  %92 = fcmp ogt float %88, 0x3FF6A09E60000000, !dbg !26
  %93 = fmul float %88, 5.000000e-01, !dbg !26
  %94 = fadd float %91, 1.000000e+00, !dbg !26
  %expo.i.i.2.i = select i1 %92, float %94, float %91, !dbg !26
  %m.i.i.0.i = select i1 %92, float %93, float %88, !dbg !26
  %95 = fadd float %m.i.i.0.i, -1.000000e+00, !dbg !26
  %96 = fadd float %m.i.i.0.i, 1.000000e+00, !dbg !26
  %97 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %96) #7, !dbg !26, !srcloc !27
  %98 = fmul float %95, 2.000000e+00, !dbg !26
  %99 = fmul float %97, %98, !dbg !26
  %100 = fmul float %99, %99, !dbg !26
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not14.i = icmp eq i32 %101, 0, !dbg !26
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F631E1FC0000000, float %100, float 0x3F8995EC60000000) #6, !dbg !26
  %103 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F631E1FC0000000, float %100, float 0x3F8995EC60000000) #6, !dbg !26
  %.020.i = select i1 %.not14.i, float %103, float %102, !dbg !26
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not15.i = icmp eq i32 %104, 0, !dbg !26
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.020.i, float %100, float 0x3FB55557A0000000) #6, !dbg !26
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %.020.i, float %100, float 0x3FB55557A0000000) #6, !dbg !26
  %.021.i = select i1 %.not15.i, float %106, float %105, !dbg !26
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not16.i = icmp eq i32 %107, 0, !dbg !26
  %108 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.021.i, float %100) #6, !dbg !26
  %109 = tail call float @llvm.nvvm.mul.rn.f(float %.021.i, float %100) #6, !dbg !26
  %.022.i = select i1 %.not16.i, float %109, float %108, !dbg !26
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not17.i = icmp eq i32 %110, 0, !dbg !26
  %111 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.022.i, float %99) #6, !dbg !26
  %112 = tail call float @llvm.nvvm.mul.rn.f(float %.022.i, float %99) #6, !dbg !26
  %.024.i = select i1 %.not17.i, float %112, float %111, !dbg !26
  %113 = fsub float %95, %99, !dbg !26
  %114 = fmul float %113, 2.000000e+00, !dbg !26
  %115 = fneg float %99, !dbg !26
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not18.i = icmp eq i32 %116, 0, !dbg !26
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %115, float %95, float %114) #6, !dbg !26
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %115, float %95, float %114) #6, !dbg !26
  %.025.i = select i1 %.not18.i, float %118, float %117, !dbg !26
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not19.i = icmp eq i32 %119, 0, !dbg !26
  %120 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %97, float %.025.i) #6, !dbg !26
  %121 = tail call float @llvm.nvvm.mul.rn.f(float %97, float %.025.i) #6, !dbg !26
  %.026.i = select i1 %.not19.i, float %121, float %120, !dbg !26
  %122 = fadd float %99, %.024.i, !dbg !26
  %123 = fsub float %99, %122, !dbg !26
  %124 = fadd float %.024.i, %123, !dbg !26
  %125 = fadd float %.026.i, %124, !dbg !26
  %126 = fadd float %122, %125, !dbg !26
  %127 = fsub float %122, %126, !dbg !26
  %128 = fadd float %125, %127, !dbg !26
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not20.i = icmp eq i32 %129, 0, !dbg !26
  %130 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %expo.i.i.2.i, float 0x3FE62E4000000000) #6, !dbg !26
  %131 = tail call float @llvm.nvvm.mul.rn.f(float %expo.i.i.2.i, float 0x3FE62E4000000000) #6, !dbg !26
  %.019.i = select i1 %.not20.i, float %131, float %130, !dbg !26
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not21.i = icmp eq i32 %132, 0, !dbg !26
  %133 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %expo.i.i.2.i, float 0x3EB7F7D1C0000000) #6, !dbg !26
  %134 = tail call float @llvm.nvvm.mul.rn.f(float %expo.i.i.2.i, float 0x3EB7F7D1C0000000) #6, !dbg !26
  %.018.i = select i1 %.not21.i, float %134, float %133, !dbg !26
  %135 = fadd float %.019.i, %126, !dbg !26
  %136 = fsub float %.019.i, %135, !dbg !26
  %137 = fadd float %126, %136, !dbg !26
  %138 = fadd float %128, %137, !dbg !26
  %139 = fadd float %.018.i, %138, !dbg !26
  %140 = fadd float %135, %139, !dbg !26
  %141 = fsub float %135, %140, !dbg !26
  %142 = fadd float %139, %141, !dbg !26
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not22.i = icmp eq i32 %143, 0, !dbg !26
  %144 = tail call float @llvm.nvvm.fabs.ftz.f(float 0x3FD5555560000000) #6, !dbg !26
  %145 = tail call float @llvm.nvvm.fabs.f(float 0x3FD5555560000000) #6, !dbg !26
  %.027.i = select i1 %.not22.i, float %145, float %144, !dbg !26
  %146 = fcmp ogt float %.027.i, 0x46FED09BE0000000, !dbg !26
  %.013.i = select i1 %146, float 0x3F05555560000000, float 0x3FD5555560000000, !dbg !26
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not23.i = icmp eq i32 %147, 0, !dbg !26
  %148 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.013.i, float %140) #6, !dbg !26
  %149 = tail call float @llvm.nvvm.mul.rn.f(float %.013.i, float %140) #6, !dbg !26
  %.028.i = select i1 %.not23.i, float %149, float %148, !dbg !26
  %150 = fneg float %.028.i, !dbg !26
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not24.i = icmp eq i32 %151, 0, !dbg !26
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.013.i, float %140, float %150) #6, !dbg !26
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %.013.i, float %140, float %150) #6, !dbg !26
  %.029.i = select i1 %.not24.i, float %153, float %152, !dbg !26
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not25.i = icmp eq i32 %154, 0, !dbg !26
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.013.i, float %142, float %.029.i) #6, !dbg !26
  %156 = tail call float @llvm.nvvm.fma.rn.f(float %.013.i, float %142, float %.029.i) #6, !dbg !26
  %.030.i = select i1 %.not25.i, float %156, float %155, !dbg !26
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not26.i = icmp eq i32 %157, 0, !dbg !26
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0.000000e+00, float %140, float %.030.i) #6, !dbg !26
  %159 = tail call float @llvm.nvvm.fma.rn.f(float 0.000000e+00, float %140, float %.030.i) #6, !dbg !26
  %.031.i = select i1 %.not26.i, float %159, float %158, !dbg !26
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not27.i = icmp eq i32 %160, 0, !dbg !26
  %161 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.028.i, float %.031.i) #6, !dbg !26
  %162 = tail call float @llvm.nvvm.add.rn.f(float %.028.i, float %.031.i) #6, !dbg !26
  %.032.i = select i1 %.not27.i, float %162, float %161, !dbg !26
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %165 = bitcast float %.032.i to i32, !dbg !26
  %166 = icmp eq i32 %165, 1118925336, !dbg !26
  %prod.i.145.0.i = select i1 %166, float 0x40562E42E0000000, float %.032.i, !dbg !26
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not30.i = icmp eq i32 %167, 0, !dbg !26
  %168 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %prod.i.145.0.i, float 0x3FF7154760000000) #6, !dbg !26
  %169 = tail call float @llvm.nvvm.mul.rn.f(float %prod.i.145.0.i, float 0x3FF7154760000000) #6, !dbg !26
  %.017.i = select i1 %.not30.i, float %169, float %168, !dbg !26
  %170 = tail call float @llvm.nvvm.trunc.f(float %.017.i) #6, !dbg !26
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not31.i = icmp eq i32 %171, 0, !dbg !26
  %172 = tail call float @llvm.nvvm.fabs.ftz.f(float %170) #6, !dbg !26
  %173 = tail call float @llvm.nvvm.fabs.f(float %170) #6, !dbg !26
  %.023.i = select i1 %.not31.i, float %173, float %172, !dbg !26
  %174 = fcmp ogt float %.023.i, 1.260000e+02, !dbg !26
  %175 = tail call float @llvm.copysign.f32(float 1.260000e+02, float %170), !dbg !26
  %j.i.i.0.i = select i1 %174, float %175, float %170, !dbg !26
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not32.i = icmp eq i32 %176, 0, !dbg !26
  %177 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.145.0.i) #6, !dbg !26
  %178 = tail call float @llvm.nvvm.fma.rn.f(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.145.0.i) #6, !dbg !26
  %.035.i = select i1 %.not32.i, float %178, float %177, !dbg !26
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not33.i = icmp eq i32 %179, 0, !dbg !26
  %180 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %j.i.i.0.i, float 0x3E205C6100000000, float %.035.i) #6, !dbg !26
  %181 = tail call float @llvm.nvvm.fma.rn.f(float %j.i.i.0.i, float 0x3E205C6100000000, float %.035.i) #6, !dbg !26
  %.036.i = select i1 %.not33.i, float %181, float %180, !dbg !26
  %182 = fmul float %.036.i, 0x3FF7154760000000, !dbg !26
  %183 = fadd float %j.i.i.0.i, 0x4168000FE0000000, !dbg !26
  %184 = bitcast float %183 to i32, !dbg !26
  %185 = shl i32 %184, 23, !dbg !26
  %186 = bitcast i32 %185 to float, !dbg !26
  %187 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %182) #6, !dbg !26
  %188 = fmul float %187, %186, !dbg !26
  %189 = fcmp une float %188, 0x7FF0000000000000, !dbg !26
  br i1 %189, label %__internal_fmad.exit.i.i, label %__internal_accurate_powf.exit.i, !dbg !26

__internal_fmad.exit.i.i:                         ; preds = %3
  %.not29.i = icmp eq i32 %164, 0, !dbg !26
  %.not28.i = icmp eq i32 %163, 0, !dbg !26
  %190 = fneg float %.032.i, !dbg !26
  %191 = tail call float @llvm.nvvm.add.rn.f(float %.028.i, float %190) #6, !dbg !26
  %192 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.028.i, float %190) #6, !dbg !26
  %.033.i = select i1 %.not28.i, float %191, float %192, !dbg !26
  %193 = tail call float @llvm.nvvm.add.rn.f(float %.033.i, float %.031.i) #6, !dbg !26
  %194 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.033.i, float %.031.i) #6, !dbg !26
  %.034.i = select i1 %.not29.i, float %193, float %194, !dbg !26
  %195 = fadd float %.034.i, 0x3EE0000000000000, !dbg !26
  %prod.i.044.0.i = select i1 %166, float %195, float %.034.i, !dbg !26
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not34.i = icmp eq i32 %196, 0, !dbg !26
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %188, float %prod.i.044.0.i, float %188) #6, !dbg !26
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %188, float %prod.i.044.0.i, float %188) #6, !dbg !26
  %.014.i = select i1 %.not34.i, float %198, float %197, !dbg !26
  br label %__internal_accurate_powf.exit.i, !dbg !26

__internal_accurate_powf.exit.i:                  ; preds = %__internal_fmad.exit.i.i, %3
  %t.i.0.i = phi float [ %.014.i, %__internal_fmad.exit.i.i ], [ 0x7FF0000000000000, %3 ], !dbg !26
  %199 = fcmp olt float %69, 0.000000e+00, !dbg !26
  %or.cond.i = select i1 %199, i1 %77, i1 false, !dbg !26
  %200 = fcmp oeq float %69, 0.000000e+00, !dbg !26
  br i1 %200, label %201, label %204, !dbg !26

201:                                              ; preds = %__internal_accurate_powf.exit.i
  %202 = fadd float %70, %70, !dbg !26
  %203 = select i1 %77, float %202, float 0.000000e+00, !dbg !26
  br label %__internal_powf_corner_cases.exit.i, !dbg !26

204:                                              ; preds = %__internal_accurate_powf.exit.i
  %205 = fneg float %t.i.0.i, !dbg !26
  %.010.i = select i1 %or.cond.i, float %205, float %t.i.0.i, !dbg !26
  %206 = tail call float @llvm.nvvm.trunc.f(float 0x3FD5555560000000) #6, !dbg !26
  %207 = fcmp une float %206, 0x3FD5555560000000, !dbg !26
  %or.cond2.i = select i1 %199, i1 %207, i1 false, !dbg !26
  %.111.i = select i1 %or.cond2.i, float 0x7FFFFFFFE0000000, float %.010.i, !dbg !26
  br label %__internal_powf_corner_cases.exit.i, !dbg !26

__internal_powf_corner_cases.exit.i:              ; preds = %204, %201
  %.212.i = phi float [ %203, %201 ], [ %.111.i, %204 ], !dbg !26
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not35.i = icmp eq i32 %208, 0, !dbg !26
  %.01.i = select i1 %.not35.i, float %80, float %79, !dbg !26
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not36.i = icmp eq i32 %209, 0, !dbg !26
  %.02.i = select i1 %.not36.i, float %145, float %144, !dbg !26
  %210 = fadd float %.01.i, %.02.i, !dbg !26
  %211 = bitcast float %210 to i32, !dbg !26
  %212 = icmp sgt i32 %211, 2139095039, !dbg !26
  br i1 %212, label %__nv_isnanf.exit.i.i, label %__nv_powf.exit, !dbg !26

__nv_isnanf.exit.i.i:                             ; preds = %__internal_powf_corner_cases.exit.i
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not37.i = icmp eq i32 %213, 0, !dbg !26
  %.06.i = select i1 %.not37.i, float %80, float %79, !dbg !26
  %214 = fcmp uno float %.06.i, 0.000000e+00, !dbg !26
  br i1 %214, label %217, label %__nv_isnanf.exit11.i.i, !dbg !26

__nv_isnanf.exit11.i.i:                           ; preds = %__nv_isnanf.exit.i.i
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not38.i = icmp eq i32 %215, 0, !dbg !26
  %.07.i = select i1 %.not38.i, float %145, float %144, !dbg !26
  %216 = fcmp uno float %.07.i, 0.000000e+00, !dbg !26
  br i1 %216, label %217, label %__nv_isinff.exit8.i.i, !dbg !26

217:                                              ; preds = %__nv_isnanf.exit11.i.i, %__nv_isnanf.exit.i.i
  %218 = fadd float %70, 0x3FD5555560000000, !dbg !26
  br label %__nv_powf.exit, !dbg !26

__nv_isinff.exit8.i.i:                            ; preds = %__nv_isnanf.exit11.i.i
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not39.i = icmp eq i32 %219, 0, !dbg !26
  %.05.i = select i1 %.not39.i, float %145, float %144, !dbg !26
  %220 = fcmp oeq float %.05.i, 0x7FF0000000000000, !dbg !26
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not41.i = icmp eq i32 %221, 0, !dbg !26
  %.04.i = select i1 %.not41.i, float %80, float %79, !dbg !26
  br i1 %220, label %__nv_fabsf.exit5.i.i, label %__nv_isinff.exit.i.i, !dbg !26

__nv_fabsf.exit5.i.i:                             ; preds = %__nv_isinff.exit8.i.i
  %222 = fcmp ogt float %.04.i, 1.000000e+00, !dbg !26
  %223 = fcmp oeq float %69, -1.000000e+00, !dbg !26
  %224 = select i1 %222, float 0x7FF0000000000000, float 0.000000e+00, !dbg !26
  %225 = select i1 %223, float 1.000000e+00, float %224, !dbg !26
  br label %__nv_powf.exit, !dbg !26

__nv_isinff.exit.i.i:                             ; preds = %__nv_isinff.exit8.i.i
  %226 = fcmp oeq float %.04.i, 0x7FF0000000000000, !dbg !26
  br i1 %226, label %227, label %__nv_powf.exit, !dbg !26

227:                                              ; preds = %__nv_isinff.exit.i.i
  %228 = select i1 %or.cond.i, float 0xFFF0000000000000, float 0x7FF0000000000000, !dbg !26
  br label %__nv_powf.exit, !dbg !26

__nv_powf.exit:                                   ; preds = %__internal_powf_corner_cases.exit.i, %217, %__nv_fabsf.exit5.i.i, %__nv_isinff.exit.i.i, %227
  %.3.i = phi float [ %.212.i, %__internal_powf_corner_cases.exit.i ], [ %218, %217 ], [ %225, %__nv_fabsf.exit5.i.i ], [ %228, %227 ], [ %.212.i, %__nv_isinff.exit.i.i ], !dbg !26
  %229 = fcmp oeq float %69, 1.000000e+00, !dbg !26
  %230 = fmul float %.3.i, 5.000000e-01, !dbg !28
  %231 = fmul float %230, 4.000000e+00, !dbg !29
  %232 = select i1 %229, float 2.000000e+00, float %231, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %urem = and i32 %4, 63, !dbg !31
  %233 = icmp eq i32 %urem, 0, !dbg !31
  %234 = bitcast float %232 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %0, i1 %233) #6, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.trunc.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.copysign.f32(float, float) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }
attributes #7 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py", directory: "inductor_cache/ih")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_mul_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_mul_0", linkageName: "triton_per_fused_div_linalg_vector_norm_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 23, scope: !7)
!14 = !DILocation(line: 33, column: 18, scope: !7)
!15 = !DILocation(line: 34, column: 18, scope: !7)
!16 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 36, column: 57, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !20)
!22 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 36, column: 44, scope: !7)
!26 = !DILocation(line: 38, column: 31, scope: !7)
!27 = !{i32 21046}
!28 = !DILocation(line: 40, column: 19, scope: !7)
!29 = !DILocation(line: 42, column: 20, scope: !7)
!30 = !DILocation(line: 43, column: 4, scope: !7)
!31 = !DILocation(line: 44, column: 63, scope: !7)
!32 = !DILocation(line: 44, column: 4, scope: !7)
