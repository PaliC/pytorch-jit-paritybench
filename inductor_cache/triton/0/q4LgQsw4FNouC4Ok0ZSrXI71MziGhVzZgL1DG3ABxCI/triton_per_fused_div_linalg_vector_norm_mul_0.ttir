#loc = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":19:0)
#loc1 = loc(unknown)
#loc9 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":36:57)
#loc21 = loc(callsite(#loc1 at #loc9))
module {
  tt.func public @triton_per_fused_div_linalg_vector_norm_mul_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 4.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 5.000000e-01 : f32 loc(#loc1)
    %cst_1 = arith.constant 0.333333343 : f32 loc(#loc1)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>> loc(#loc4)
    %4 = math.absf %3 : tensor<256xf32> loc(#loc5)
    %5 = arith.mulf %4, %4 : tensor<256xf32> loc(#loc6)
    %6 = arith.mulf %5, %4 : tensor<256xf32> loc(#loc7)
    %7 = "tt.reduce"(%6) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc9)), %arg4: f32 loc(callsite(#loc1 at #loc9))):
      %15 = arith.addf %arg3, %arg4 : f32 loc(#loc24)
      tt.reduce.return %15 : f32 loc(#loc20)
    }) : (tensor<256xf32>) -> f32 loc(#loc20)
    %8 = arith.addf %7, %cst_2 : f32 loc(#loc23)
    %9 = tt.extern_elementwise %8, %cst_1 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (f32, f32) -> f32 loc(#loc13)
    %10 = arith.mulf %9, %cst_0 : f32 loc(#loc14)
    %11 = arith.mulf %10, %cst : f32 loc(#loc15)
    %12 = tt.splat %11 : f32 -> tensor<1xf32> loc(#loc15)
    gpu.barrier loc(#loc16)
    %13 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc17)
    %14 = tt.splat %13 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc17)
    tt.store %14, %12 : tensor<1x!tt.ptr<f32>> loc(#loc18)
    tt.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":27:26)
#loc3 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":31:30)
#loc4 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":31:35)
#loc5 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":32:23)
#loc6 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":33:18)
#loc7 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":34:18)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc12 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":36:44)
#loc13 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":38:31)
#loc14 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":40:19)
#loc15 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":42:20)
#loc16 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":43:4)
#loc17 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":44:28)
#loc18 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":44:63)
#loc19 = loc("inductor_cache/ih/cihmj3zpubk5vjkh7t4jgobcuam2wpmqbckicg242zvxxxiqjdlv.py":44:4)
#loc20 = loc(callsite(#loc8 at #loc9))
#loc22 = loc(callsite(#loc10 at #loc8))
#loc23 = loc(callsite(#loc11 at #loc12))
#loc24 = loc(callsite(#loc22 at #loc9))
