; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %13, 1, !dbg !12
  %14 = or disjoint i32 %.lobit, 2, !dbg !12
  %15 = or disjoint i32 %11, %.lobit, !dbg !13
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 8, !dbg !15
  %19 = shl i32 %12, 2, !dbg !16
  %20 = and i32 %19, 252, !dbg !16
  %21 = shl i32 %12, 1, !dbg !16
  %22 = and i32 %21, 254, !dbg !16
  %23 = or disjoint i32 %18, %20, !dbg !17
  %24 = or disjoint i32 %18, %22, !dbg !17
  %25 = icmp slt i32 %23, 256, !dbg !18
  %26 = icmp slt i32 %24, 256, !dbg !18
  %27 = shl i32 %15, 8, !dbg !19
  %28 = shl i32 %16, 8, !dbg !19
  %29 = add i32 %23, %27, !dbg !20
  %30 = add i32 %23, %28, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %25) #4, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %25) #4, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = and i32 %19, 508, !dbg !22
  %46 = lshr i32 %45, 8, !dbg !22
  %47 = or disjoint i32 %46, %45, !dbg !22
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47, !dbg !22
  %49 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #4, !dbg !22
  %50 = or disjoint i32 %45, 1, !dbg !22
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !22
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %50, !dbg !22
  %53 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !22
  %54 = or disjoint i32 %47, 2, !dbg !22
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !22
  %56 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #4, !dbg !22
  %57 = or disjoint i32 %45, 3, !dbg !22
  %58 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %57, !dbg !22
  %59 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !22
  %61 = load float, ptr addrspace(3) %60, align 8, !dbg !22
  %62 = or disjoint i32 %22, 1, !dbg !22
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !22
  %64 = load float, ptr addrspace(3) %63, align 4, !dbg !22
  %65 = or disjoint i32 %22, 257, !dbg !22
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !22
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !22
  %68 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 1032, !dbg !22
  %69 = load float, ptr addrspace(3) %68, align 8, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %70 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %70, i1 true) #4, !dbg !22
  %71 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %71, i1 true) #4, !dbg !22
  %72 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %72, i1 true) #4, !dbg !22
  %73 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %73, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %74 = load float, ptr addrspace(3) %60, align 8, !dbg !22
  %75 = load float, ptr addrspace(3) %63, align 4, !dbg !22
  %76 = load float, ptr addrspace(3) %66, align 4, !dbg !22
  %77 = load float, ptr addrspace(3) %68, align 8, !dbg !22
  %78 = sext i32 %24 to i64, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !23
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %26) #4, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !25
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %26) #4, !dbg !26
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !26
  %85 = bitcast i32 %83 to float, !dbg !26
  %86 = bitcast i32 %84 to float, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !27
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %26) #4, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !29
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %26) #4, !dbg !30
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !31
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !31
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %25) #4, !dbg !32
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %25) #4, !dbg !32
  %95 = fadd float %85, 0x3EE4F8B580000000, !dbg !33
  %96 = fadd float %86, 0x3EE4F8B580000000, !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %97, 0, !dbg !34
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %98, 0, !dbg !34
  br i1 %.not.i, label %104, label %99, !dbg !34

99:                                               ; preds = %9
  br i1 %.not1.i, label %102, label %100, !dbg !34

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

104:                                              ; preds = %9
  br i1 %.not1.i, label %107, label %105, !dbg !34

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %100, %102, %105, %107
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !34
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i16 = icmp eq i32 %109, 0, !dbg !34
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i19 = icmp eq i32 %110, 0, !dbg !34
  br i1 %.not.i16, label %116, label %111, !dbg !34

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %114, label %112, !dbg !34

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %119, label %117, !dbg !34

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

__nv_sqrtf.exit20:                                ; preds = %112, %114, %117, %119
  %.0.i18 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !34
  %121 = extractvalue { i32, i32 } %80, 1, !dbg !24
  %122 = bitcast i32 %121 to float, !dbg !24
  %123 = fsub float %77, %122, !dbg !35
  %124 = extractvalue { i32, i32 } %80, 0, !dbg !24
  %125 = bitcast i32 %124 to float, !dbg !24
  %126 = fsub float %76, %125, !dbg !35
  %127 = fsub float %75, %122, !dbg !35
  %128 = fsub float %74, %125, !dbg !35
  %129 = fsub float %69, %122, !dbg !35
  %130 = fsub float %67, %125, !dbg !35
  %131 = fsub float %64, %122, !dbg !35
  %132 = fsub float %61, %125, !dbg !35
  %133 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !32
  %141 = extractvalue { i32, i32 } %90, 1, !dbg !30
  %142 = bitcast i32 %141 to float, !dbg !30
  %143 = extractvalue { i32, i32 } %90, 0, !dbg !30
  %144 = bitcast i32 %143 to float, !dbg !30
  %145 = extractvalue { i32, i32 } %88, 1, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = extractvalue { i32, i32 } %88, 0, !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %.frozen = freeze i32 %11, !dbg !36
  %149 = sdiv i32 %.frozen, 256, !dbg !36
  %150 = mul i32 %149, 256, !dbg !37
  %.decomposed = sub i32 %.frozen, %150, !dbg !37
  %151 = and i32 %12, 127, !dbg !16
  %152 = or disjoint i32 %151, %18, !dbg !17
  %153 = or disjoint i32 %152, 128, !dbg !17
  %154 = icmp slt i32 %153, 256, !dbg !18
  %155 = icmp slt i32 %152, 256, !dbg !18
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !38
  %158 = fmul float %132, %156, !dbg !39
  %159 = fmul float %131, %157, !dbg !39
  %160 = fmul float %130, %156, !dbg !39
  %161 = fmul float %129, %157, !dbg !39
  %162 = fmul float %128, %156, !dbg !39
  %163 = fmul float %127, %157, !dbg !39
  %164 = fmul float %126, %156, !dbg !39
  %165 = fmul float %123, %157, !dbg !39
  %166 = fmul float %158, %148, !dbg !40
  %167 = fmul float %159, %146, !dbg !40
  %168 = fmul float %160, %148, !dbg !40
  %169 = fmul float %161, %146, !dbg !40
  %170 = fmul float %162, %148, !dbg !40
  %171 = fmul float %163, %146, !dbg !40
  %172 = fmul float %164, %148, !dbg !40
  %173 = fmul float %165, %146, !dbg !40
  %174 = fadd float %166, %144, !dbg !41
  %175 = fadd float %167, %142, !dbg !41
  %176 = fadd float %168, %144, !dbg !41
  %177 = fadd float %169, %142, !dbg !41
  %178 = fadd float %170, %144, !dbg !41
  %179 = fadd float %171, %142, !dbg !41
  %180 = fadd float %172, %144, !dbg !41
  %181 = fadd float %173, %142, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %182 = bitcast float %174 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %182, i1 true) #4, !dbg !41
  %183 = bitcast float %175 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %183, i1 true) #4, !dbg !41
  %184 = bitcast float %176 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %184, i1 true) #4, !dbg !41
  %185 = bitcast float %177 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %185, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %186 = bitcast float %178 to <1 x i32>, !dbg !41
  %187 = bitcast float %179 to <1 x i32>, !dbg !41
  %188 = bitcast float %180 to <1 x i32>, !dbg !41
  %189 = bitcast float %181 to <1 x i32>, !dbg !41
  %190 = insertelement <8 x i32> poison, i32 %133, i64 0, !dbg !32
  %191 = insertelement <8 x i32> %190, i32 %134, i64 1, !dbg !32
  %192 = insertelement <8 x i32> %191, i32 %135, i64 2, !dbg !32
  %193 = insertelement <8 x i32> %192, i32 %136, i64 3, !dbg !32
  %194 = insertelement <8 x i32> %193, i32 %137, i64 4, !dbg !32
  %195 = insertelement <8 x i32> %194, i32 %138, i64 5, !dbg !32
  %196 = insertelement <8 x i32> %195, i32 %139, i64 6, !dbg !32
  %197 = insertelement <8 x i32> %196, i32 %140, i64 7, !dbg !32
  %198 = bitcast <8 x i32> %197 to <8 x float>, !dbg !32
  %199 = load <4 x float>, ptr addrspace(3) %48, align 4, !dbg !41
  %200 = shufflevector <4 x float> %199, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %186, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %187, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %188, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %189, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %201 = load <4 x float>, ptr addrspace(3) %48, align 4, !dbg !41
  %202 = shufflevector <4 x float> %201, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !41
  %203 = shufflevector <4 x float> %202, <4 x float> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !42
  %204 = fadd <8 x float> %203, %198, !dbg !42
  %205 = fcmp olt <8 x float> %204, zeroinitializer, !dbg !43
  %206 = extractelement <8 x i1> %205, i64 7, !dbg !47
  %207 = extractelement <8 x float> %204, i64 7, !dbg !47
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !47
  %209 = extractelement <8 x i1> %205, i64 6, !dbg !47
  %210 = extractelement <8 x float> %204, i64 6, !dbg !47
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !47
  %212 = extractelement <8 x i1> %205, i64 5, !dbg !47
  %213 = extractelement <8 x float> %204, i64 5, !dbg !47
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !47
  %215 = extractelement <8 x i1> %205, i64 4, !dbg !47
  %216 = extractelement <8 x float> %204, i64 4, !dbg !47
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !47
  %218 = extractelement <8 x i1> %205, i64 3, !dbg !47
  %219 = extractelement <8 x float> %204, i64 3, !dbg !47
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !47
  %221 = extractelement <8 x i1> %205, i64 2, !dbg !47
  %222 = extractelement <8 x float> %204, i64 2, !dbg !47
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !47
  %224 = extractelement <8 x i1> %205, i64 1, !dbg !47
  %225 = extractelement <8 x float> %204, i64 1, !dbg !47
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !47
  %227 = extractelement <8 x i1> %205, i64 0, !dbg !47
  %228 = extractelement <8 x float> %204, i64 0, !dbg !47
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !47
  %230 = shl i32 %152, 8, !dbg !48
  %231 = shl i32 %153, 8, !dbg !48
  %232 = shl i32 %149, 16, !dbg !49
  %233 = add i32 %232, %.decomposed, !dbg !50
  %234 = add i32 %233, %230, !dbg !51
  %235 = add i32 %233, %231, !dbg !51
  %236 = sext i32 %234 to i64, !dbg !52
  %237 = getelementptr float, ptr addrspace(1) %6, i64 %236, !dbg !52
  %238 = sext i32 %235 to i64, !dbg !52
  %239 = getelementptr float, ptr addrspace(1) %6, i64 %238, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %240 = shl i32 %12, 4, !dbg !53
  %241 = and i32 %240, 1008, !dbg !53
  %242 = or disjoint i32 %241, %.lobit, !dbg !53
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !53
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %242, !dbg !53
  %245 = bitcast float %208 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !53
  %246 = or disjoint i32 %242, 4, !dbg !53
  %247 = or disjoint i32 %241, 4, !dbg !53
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !53
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !53
  %250 = bitcast float %211 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !53
  %251 = or disjoint i32 %242, 8, !dbg !53
  %252 = or disjoint i32 %241, 8, !dbg !53
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !53
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %251, !dbg !53
  %255 = bitcast float %214 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !53
  %256 = or disjoint i32 %242, 12, !dbg !53
  %257 = or disjoint i32 %241, 12, !dbg !53
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !53
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !53
  %260 = bitcast float %217 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !53
  %261 = or disjoint i32 %242, 2, !dbg !53
  %262 = getelementptr float, ptr addrspace(3) %243, i32 %261, !dbg !53
  %263 = bitcast float %220 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !53
  %264 = or disjoint i32 %242, 6, !dbg !53
  %265 = getelementptr float, ptr addrspace(3) %248, i32 %264, !dbg !53
  %266 = bitcast float %223 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !53
  %267 = or disjoint i32 %242, 10, !dbg !53
  %268 = getelementptr float, ptr addrspace(3) %253, i32 %267, !dbg !53
  %269 = bitcast float %226 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !53
  %270 = or disjoint i32 %242, 14, !dbg !53
  %271 = getelementptr float, ptr addrspace(3) %258, i32 %270, !dbg !53
  %272 = bitcast float %229 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx = shl nuw nsw i32 %45, 3, !dbg !53
  %273 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !53
  %274 = shl nuw nsw i32 %45, 1, !dbg !53
  %275 = or disjoint i32 %274, 1024, !dbg !53
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !53
  %277 = load <4 x i32>, ptr addrspace(3) %276, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %273, align 16, !dbg !53
  %278 = getelementptr inbounds i8, ptr addrspace(3) %273, i32 4, !dbg !53
  %.extract9 = load i32, ptr addrspace(3) %278, align 4, !dbg !53
  %279 = getelementptr inbounds i8, ptr addrspace(3) %273, i32 8, !dbg !53
  %.extract10 = load i32, ptr addrspace(3) %279, align 8, !dbg !53
  %280 = getelementptr inbounds i8, ptr addrspace(3) %273, i32 12, !dbg !53
  %.extract11 = load i32, ptr addrspace(3) %280, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %237, i1 %155) #4, !dbg !53
  %.extract12 = extractelement <4 x i32> %277, i64 0, !dbg !53
  %.extract13 = extractelement <4 x i32> %277, i64 1, !dbg !53
  %.extract14 = extractelement <4 x i32> %277, i64 2, !dbg !53
  %.extract15 = extractelement <4 x i32> %277, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %239, i1 %154) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cajhocpchfqhqgwjejmktbvbixrgrjpr5agaezqph2la7z3mazsf.py", directory: "inductor_cache/aj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 52, column: 34, scope: !7)
!49 = !DILocation(line: 52, column: 45, scope: !7)
!50 = !DILocation(line: 52, column: 30, scope: !7)
!51 = !DILocation(line: 52, column: 39, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 57, scope: !7)
!54 = !DILocation(line: 52, column: 4, scope: !7)
