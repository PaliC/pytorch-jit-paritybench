//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_red_fused__weight_norm_interface_7 // -- Begin function triton_red_fused__weight_norm_interface_7
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
.global .align 1 .b8 _$_str_$_2[17] = {95, 95, 67, 85, 68, 65, 95, 80, 82, 69, 67, 95, 83, 81, 82, 84};
                                        // @triton_red_fused__weight_norm_interface_7
.visible .entry triton_red_fused__weight_norm_interface_7(
	.param .u64 .ptr .global .align 1 triton_red_fused__weight_norm_interface_7_param_0,
	.param .u64 .ptr .global .align 1 triton_red_fused__weight_norm_interface_7_param_1,
	.param .u64 .ptr .global .align 1 triton_red_fused__weight_norm_interface_7_param_2,
	.param .u64 .ptr .global .align 1 triton_red_fused__weight_norm_interface_7_param_3,
	.param .u32 triton_red_fused__weight_norm_interface_7_param_4,
	.param .u32 triton_red_fused__weight_norm_interface_7_param_5
)
.reqntid 512, 1, 1
{
	.reg .pred 	%p<45>;
	.reg .b32 	%r<110>;
	.reg .f32 	%f<65>;
	.reg .b64 	%rd<30>;
	.loc	1 19 0                          // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:19:0

// %bb.0:
	ld.param.u64 	%rd9, [triton_red_fused__weight_norm_interface_7_param_3];
	ld.param.u64 	%rd8, [triton_red_fused__weight_norm_interface_7_param_2];
	ld.param.u64 	%rd7, [triton_red_fused__weight_norm_interface_7_param_1];
	ld.param.u64 	%rd6, [triton_red_fused__weight_norm_interface_7_param_0];
$L__tmp0:
	.loc	1 22 28                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:22:28
	// begin inline asm
	mov.u32 %r10, %ctaid.x;
	// end inline asm
	.loc	1 24 21                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:24:21
	setp.lt.s32 	%p26, %r10, 1024;
	.loc	1 25 33                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:25:33
	mov.u32 	%r2, %tid.x;
	and.b32  	%r3, %r2, 31;
	shr.u32 	%r4, %r2, 5;
	shl.b32 	%r11, %r2, 2;
	and.b32  	%r5, %r11, 2044;
	.loc	1 32 44                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:44
	mul.lo.s32 	%r6, %r10, 2560;
	.loc	1 32 39                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:39
	add.s32 	%r12, %r5, %r6;
	.loc	1 32 34                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:34
	cvt.s64.s32 	%rd1, %r12;
	mul.wide.s32 	%rd10, %r12, 4;
	add.s64 	%rd22, %rd7, %rd10;
	mov.b32 	%r65, 0;
	@%p26 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %.split.preheader
	.loc	1 0 34                          // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:0:34
	mov.pred 	%p12, -1;
	.loc	1 32 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:49
	// begin inline asm
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	@%p12 ld.global.L1::evict_last.v4.b32 { %r30, %r31, %r32, %r33 }, [ %rd22 + 0 ];
	@!%p12 mov.u32 %r30, %r65;
	@!%p12 mov.u32 %r31, %r65;
	@!%p12 mov.u32 %r32, %r65;
	@!%p12 mov.u32 %r33, %r65;
	// end inline asm
	mov.b32 	%f4, %r32;
	mov.b32 	%f5, %r33;
	.loc	1 33 22                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:33:22
	mul.f32 	%f6, %f4, %f4;
	mul.f32 	%f7, %f5, %f5;
	.loc	1 29 27                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:29:27
	or.b32  	%r109, %r5, 2048;
	.loc	1 30 25                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:30:25
	setp.lt.u32 	%p17, %r109, 2560;
	.loc	1 32 39                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:39
	add.s32 	%r46, %r109, %r6;
	.loc	1 32 34                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:34
	cvt.s64.s32 	%rd29, %r46;
	mul.wide.s32 	%rd16, %r46, 4;
	add.s64 	%rd15, %rd7, %rd16;
	.loc	1 32 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:49
	// begin inline asm
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	@%p17 ld.global.L1::evict_last.v4.b32 { %r38, %r39, %r40, %r41 }, [ %rd15 + 0 ];
	@!%p17 mov.u32 %r38, %r65;
	@!%p17 mov.u32 %r39, %r65;
	@!%p17 mov.u32 %r40, %r65;
	@!%p17 mov.u32 %r41, %r65;
	// end inline asm
	mov.b32 	%f8, %r40;
	mov.b32 	%f9, %r41;
	.loc	1 35 23                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:35:23
	fma.rn.f32 	%f10, %f8, %f8, %f6;
	fma.rn.f32 	%f11, %f9, %f9, %f7;
	.loc	1 32 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:49
	mov.b32 	%f12, %r30;
	mov.b32 	%f13, %r31;
	.loc	1 33 22                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:33:22
	mul.f32 	%f14, %f13, %f13;
	mul.f32 	%f15, %f12, %f12;
	.loc	1 32 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:49
	mov.b32 	%f16, %r39;
	mov.b32 	%f17, %r38;
	.loc	1 35 23                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:35:23
	fma.rn.f32 	%f18, %f17, %f17, %f15;
	fma.rn.f32 	%f19, %f16, %f16, %f14;
	.loc	1 36 46                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:36:46
	selp.f32 	%f20, %f19, %f14, %p17;
	selp.f32 	%f21, %f18, %f15, %p17;
	selp.f32 	%f22, %f10, %f6, %p17;
	selp.f32 	%f23, %f11, %f7, %p17;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	add.f32 	%f24, %f21, %f20;
	add.f32 	%f25, %f22, %f24;
	add.f32 	%f64, %f23, %f25;
	bra.uni 	$L__BB0_3;
$L__tmp2:
$L__BB0_1:                              // %.split.us.preheader
	.loc	2 0 36                          // standard.py:0:36
	mov.pred 	%p2, 0;
	.loc	1 32 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:49
	// begin inline asm
	mov.u32 %r13, 0x0;
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	@%p2 ld.global.L1::evict_last.v4.b32 { %r13, %r14, %r15, %r16 }, [ %rd22 + 0 ];
	@!%p2 mov.u32 %r13, %r65;
	@!%p2 mov.u32 %r14, %r65;
	@!%p2 mov.u32 %r15, %r65;
	@!%p2 mov.u32 %r16, %r65;
	// end inline asm
	.loc	1 29 27                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:29:27
	or.b32  	%r109, %r5, 2048;
	.loc	1 32 39                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:39
	add.s32 	%r29, %r109, %r6;
	.loc	1 32 34                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:34
	cvt.s64.s32 	%rd29, %r29;
	mul.wide.s32 	%rd13, %r29, 4;
	add.s64 	%rd12, %rd7, %rd13;
	.loc	1 32 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:32:49
	// begin inline asm
	mov.u32 %r21, 0x0;
	mov.u32 %r22, 0x0;
	mov.u32 %r23, 0x0;
	mov.u32 %r24, 0x0;
	@%p2 ld.global.L1::evict_last.v4.b32 { %r21, %r22, %r23, %r24 }, [ %rd12 + 0 ];
	@!%p2 mov.u32 %r21, %r65;
	@!%p2 mov.u32 %r22, %r65;
	@!%p2 mov.u32 %r23, %r65;
	@!%p2 mov.u32 %r24, %r65;
	// end inline asm
	mov.f32 	%f64, 0f00000000;
$L__BB0_3:                              // %.split23.us
$L__tmp3:
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r85, %f64;
	shfl.sync.bfly.b32	%r86, %r85, 16, 31, -1;
	mov.b32 	%f26, %r86;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f27, %f64, %f26;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r87, %f27;
	shfl.sync.bfly.b32	%r88, %r87, 8, 31, -1;
	mov.b32 	%f28, %r88;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f29, %f27, %f28;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r89, %f29;
	shfl.sync.bfly.b32	%r90, %r89, 4, 31, -1;
	mov.b32 	%f30, %r90;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f31, %f29, %f30;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r91, %f31;
	shfl.sync.bfly.b32	%r92, %r91, 2, 31, -1;
	mov.b32 	%f32, %r92;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f33, %f31, %f32;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r93, %f33;
	shfl.sync.bfly.b32	%r94, %r93, 1, 31, -1;
	mov.b32 	%f34, %r94;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f35, %f33, %f34;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p22, %r3, 0;
	and.b32  	%r95, %r4, 15;
	shl.b32 	%r96, %r95, 2;
	mov.u32 	%r97, global_smem;
	add.s32 	%r47, %r97, %r96;
	mov.b32 	%r48, %f35;
	// begin inline asm
	@%p22 st.shared.b32 [ %r47 + 0 ], %r48;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p23, %r2, 16;
	add.s32 	%r50, %r97, %r11;
	// begin inline asm
	@%p23 ld.shared.b32 %r49, [ %r50 + 0 ];
	// end inline asm
	mov.b32 	%f36, %r49;
	shfl.sync.bfly.b32	%r99, %r49, 8, 31, -1;
	mov.b32 	%f37, %r99;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f38, %f36, %f37;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r100, %f38;
	shfl.sync.bfly.b32	%r101, %r100, 4, 31, -1;
	mov.b32 	%f39, %r101;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f40, %f38, %f39;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r102, %f40;
	shfl.sync.bfly.b32	%r103, %r102, 2, 31, -1;
	mov.b32 	%f41, %r103;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f42, %f40, %f41;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r104, %f42;
	shfl.sync.bfly.b32	%r105, %r104, 1, 31, -1;
	mov.b32 	%f43, %r105;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f44, %f42, %f43;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r106, %r2, 15;
	setp.eq.s32 	%p42, %r106, 0;
	and.pred  	%p24, %p23, %p42;
	mov.b32 	%r52, %f44;
	// begin inline asm
	@%p24 st.shared.b32 [ %r50 + 0 ], %r52;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f45, [global_smem];
$L__tmp4:
	.loc	1 38 26                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:38:26
	sqrt.approx.ftz.f32 	%f46, %f45;
	.loc	1 39 4                          // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:39:4
	bar.sync 	0;
	.loc	1 40 28                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:40:28
	mul.wide.s32 	%rd26, %r10, 4;
	add.s64 	%rd17, %rd6, %rd26;
	.loc	1 40 39                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:40:39
	and.b32  	%r107, %r2, 511;
	setp.eq.s32 	%p43, %r107, 0;
	mov.b32 	%r53, %f46;
	and.pred  	%p25, %p43, %p26;
	// begin inline asm
	@%p25 st.global.b32 [ %rd17 + 0 ], { %r53 };
	// end inline asm
	.loc	1 41 30                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:41:30
	add.s64 	%rd18, %rd8, %rd26;
	.loc	1 41 35                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:41:35
	// begin inline asm
	mov.u32 %r54, 0x0;
	@%p26 ld.global.L1::evict_last.b32 { %r54 }, [ %rd18 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r55, 0x0;
	@%p26 ld.global.L1::evict_last.b32 { %r55 }, [ %rd18 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r56, 0x0;
	@%p26 ld.global.L1::evict_last.b32 { %r56 }, [ %rd18 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r59, 0x0;
	@%p26 ld.global.L1::evict_last.b32 { %r59 }, [ %rd18 + 0 ];
	// end inline asm
	.loc	1 47 22                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:47:22
	// begin inline asm
	div.full.f32 %r58, %r59, %r53;
	// end inline asm
	mov.b32 	%f47, %r58;
	.loc	1 46 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:46:49
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	@%p26 ld.global.L1::evict_first.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd22 + 0 ];
	@!%p26 mov.u32 %r61, %r65;
	@!%p26 mov.u32 %r62, %r65;
	@!%p26 mov.u32 %r63, %r65;
	@!%p26 mov.u32 %r64, %r65;
	// end inline asm
	mov.b32 	%f48, %r61;
	mov.b32 	%f49, %r62;
	mov.b32 	%f50, %r63;
	mov.b32 	%f51, %r64;
	.loc	1 48 22                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:48:22
	mul.f32 	%f52, %f47, %f48;
	mul.f32 	%f53, %f47, %f49;
	mul.f32 	%f54, %f47, %f50;
	mul.f32 	%f55, %f47, %f51;
	.loc	1 49 29                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:49:29
	shl.b64 	%rd27, %rd1, 2;
	add.s64 	%rd23, %rd9, %rd27;
	.loc	1 49 50                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:49:50
	mov.b32 	%r69, %f52;
	mov.b32 	%r70, %f53;
	mov.b32 	%r71, %f54;
	mov.b32 	%r72, %f55;
	// begin inline asm
	@%p26 st.global.v4.b32 [ %rd23 + 0 ], { %r69, %r70, %r71, %r72 };
	// end inline asm
	.loc	1 44 25                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:44:25
	setp.lt.u32 	%p44, %r109, 2560;
	.loc	1 46 34                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:46:34
	shl.b64 	%rd28, %rd29, 2;
	add.s64 	%rd24, %rd7, %rd28;
	.loc	1 46 57                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:46:57
	and.pred  	%p36, %p26, %p44;
	.loc	1 46 49                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:46:49
	// begin inline asm
	mov.u32 %r73, 0x0;
	mov.u32 %r74, 0x0;
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	@%p36 ld.global.L1::evict_first.v4.b32 { %r73, %r74, %r75, %r76 }, [ %rd24 + 0 ];
	@!%p36 mov.u32 %r73, %r65;
	@!%p36 mov.u32 %r74, %r65;
	@!%p36 mov.u32 %r75, %r65;
	@!%p36 mov.u32 %r76, %r65;
	// end inline asm
	mov.b32 	%f56, %r73;
	mov.b32 	%f57, %r74;
	mov.b32 	%f58, %r75;
	mov.b32 	%f59, %r76;
	.loc	1 48 22                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:48:22
	mul.f32 	%f60, %f47, %f56;
	mul.f32 	%f61, %f47, %f57;
	mul.f32 	%f62, %f47, %f58;
	mul.f32 	%f63, %f47, %f59;
	.loc	1 49 29                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:49:29
	add.s64 	%rd25, %rd9, %rd28;
	.loc	1 49 50                         // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:49:50
	mov.b32 	%r81, %f60;
	mov.b32 	%r82, %f61;
	mov.b32 	%r83, %f62;
	mov.b32 	%r84, %f63;
	// begin inline asm
	@%p36 st.global.v4.b32 [ %rd25 + 0 ], { %r81, %r82, %r83, %r84 };
	// end inline asm
	.loc	1 42 4                          // crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py:42:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/ry/crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 186                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xb3 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 114
.b8 121
.b8 110
.b8 105
.b8 98
.b8 55
.b8 117
.b8 99
.b8 114
.b8 98
.b8 107
.b8 117
.b8 97
.b8 100
.b8 101
.b8 101
.b8 108
.b8 113
.b8 55
.b8 99
.b8 118
.b8 121
.b8 100
.b8 109
.b8 115
.b8 112
.b8 104
.b8 55
.b8 102
.b8 101
.b8 101
.b8 97
.b8 113
.b8 110
.b8 122
.b8 120
.b8 99
.b8 50
.b8 104
.b8 122
.b8 106
.b8 119
.b8 105
.b8 51
.b8 103
.b8 102
.b8 51
.b8 97
.b8 114
.b8 51
.b8 99
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 114
.b8 121
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x2c DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 101
.b8 100
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 95
.b8 119
.b8 101
.b8 105
.b8 103
.b8 104
.b8 116
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 95
.b8 105
.b8 110
.b8 116
.b8 101
.b8 114
.b8 102
.b8 97
.b8 99
.b8 101
.b8 95
.b8 55
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8f:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa4:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 37                                  // DW_AT_call_line
.b8 25                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
