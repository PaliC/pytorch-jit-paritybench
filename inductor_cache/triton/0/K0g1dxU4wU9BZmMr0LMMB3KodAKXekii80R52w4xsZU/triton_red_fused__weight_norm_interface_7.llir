; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr24 = freeze i32 %7, !dbg !11
  %8 = icmp slt i32 %.fr24, 1024, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = mul i32 %.fr24, 2560, !dbg !13
  %15 = add i32 %13, %14, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  br i1 %8, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %6
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  %19 = or disjoint i32 %13, 2048, !dbg !17
  %20 = add i32 %19, %14, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  br label %.split23.us, !dbg !18

.split.preheader:                                 ; preds = %6
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %29 = bitcast i32 %27 to float, !dbg !16
  %30 = bitcast i32 %28 to float, !dbg !16
  %31 = fmul float %29, %29, !dbg !22
  %32 = fmul float %30, %30, !dbg !22
  %33 = or disjoint i32 %13, 2048, !dbg !17
  %34 = icmp samesign ult i32 %33, 2560, !dbg !23
  %35 = add i32 %33, %14, !dbg !14
  %36 = sext i32 %35 to i64, !dbg !15
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !15
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #5, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !16
  %43 = bitcast i32 %41 to float, !dbg !16
  %44 = bitcast i32 %42 to float, !dbg !16
  %45 = fmul float %43, %43, !dbg !22
  %46 = fmul float %44, %44, !dbg !22
  %47 = fadd float %31, %45, !dbg !24
  %48 = fadd float %32, %46, !dbg !24
  %49 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !16
  %50 = insertelement <2 x i32> %49, i32 %26, i64 1, !dbg !16
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !16
  %52 = fmul <2 x float> %51, %51, !dbg !22
  %53 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !16
  %54 = insertelement <2 x i32> %53, i32 %40, i64 1, !dbg !16
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !16
  %56 = fmul <2 x float> %55, %55, !dbg !22
  %57 = fadd <2 x float> %52, %56, !dbg !24
  %58 = insertelement <2 x i1> poison, i1 %34, i64 0, !dbg !25
  %59 = shufflevector <2 x i1> %58, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %60 = select <2 x i1> %59, <2 x float> %57, <2 x float> %52, !dbg !25
  %61 = select i1 %34, float %47, float %31, !dbg !25
  %62 = select i1 %34, float %48, float %32, !dbg !25
  %shift = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %63 = fadd <2 x float> %60, %shift, !dbg !18
  %64 = extractelement <2 x float> %63, i64 0, !dbg !18
  %65 = fadd float %61, %64, !dbg !18
  %66 = fadd float %62, %65, !dbg !18
  br label %.split23.us, !dbg !18

.split23.us:                                      ; preds = %.split.us.preheader, %.split.preheader
  %67 = phi float [ %66, %.split.preheader ], [ 0.000000e+00, %.split.us.preheader ], !dbg !26
  %68 = bitcast float %67 to i32, !dbg !18
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !18
  %70 = bitcast i32 %69 to float, !dbg !18
  %71 = fadd float %67, %70, !dbg !26
  %72 = bitcast float %71 to i32, !dbg !18
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !18
  %74 = bitcast i32 %73 to float, !dbg !18
  %75 = fadd float %71, %74, !dbg !26
  %76 = bitcast float %75 to i32, !dbg !18
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !18
  %78 = bitcast i32 %77 to float, !dbg !18
  %79 = fadd float %75, %78, !dbg !26
  %80 = bitcast float %79 to i32, !dbg !18
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !18
  %82 = bitcast i32 %81 to float, !dbg !18
  %83 = fadd float %79, %82, !dbg !26
  %84 = bitcast float %83 to i32, !dbg !18
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !18
  %86 = bitcast i32 %85 to float, !dbg !18
  %87 = fadd float %83, %86, !dbg !26
  %88 = icmp eq i32 %10, 0, !dbg !18
  %89 = and i32 %11, 15, !dbg !18
  %90 = zext nneg i32 %89 to i64, !dbg !18
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i64 %90, !dbg !18
  %92 = bitcast float %87 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %88) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %93 = icmp slt i32 %9, 16, !dbg !18
  %94 = sext i32 %9 to i64, !dbg !18
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i64 %94, !dbg !18
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %93) #5, !dbg !18
  %97 = bitcast i32 %96 to float, !dbg !18
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !18
  %99 = bitcast i32 %98 to float, !dbg !18
  %100 = fadd float %97, %99, !dbg !26
  %101 = bitcast float %100 to i32, !dbg !18
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !18
  %103 = bitcast i32 %102 to float, !dbg !18
  %104 = fadd float %100, %103, !dbg !26
  %105 = bitcast float %104 to i32, !dbg !18
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !18
  %107 = bitcast i32 %106 to float, !dbg !18
  %108 = fadd float %104, %107, !dbg !26
  %109 = bitcast float %108 to i32, !dbg !18
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !18
  %111 = bitcast i32 %110 to float, !dbg !18
  %112 = fadd float %108, %111, !dbg !26
  %113 = and i32 %9, 15, !dbg !18
  %114 = icmp eq i32 %113, 0, !dbg !18
  %115 = and i1 %93, %114, !dbg !18
  %116 = bitcast float %112 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %116, i1 %115) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %117 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %118, 0, !dbg !28
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %119, 0, !dbg !28
  br i1 %.not.i, label %125, label %120, !dbg !28

120:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %123, label %121, !dbg !28

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

125:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %128, label %126, !dbg !28

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %121, %123, %126, %128
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !28
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i17 = icmp eq i32 %136, 0, !dbg !28
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i20 = icmp eq i32 %137, 0, !dbg !28
  br i1 %.not.i17, label %143, label %138, !dbg !28

138:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %141, label %139, !dbg !28

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %146, label %144, !dbg !28

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

__nv_sqrtf.exit21:                                ; preds = %139, %141, %144, %146
  %.0.i19 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %148 = sext i32 %.fr24 to i64, !dbg !30
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !30
  %urem = and i32 %9, 511, !dbg !31
  %150 = icmp eq i32 %urem, 0, !dbg !31
  %151 = bitcast float %.0.i to i32, !dbg !31
  %152 = and i1 %150, %8, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %149, i1 %152) #5, !dbg !31
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !32
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %8) #5, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %8) #5, !dbg !33
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %8) #5, !dbg !33
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %8) #5, !dbg !33
  %158 = bitcast i32 %157 to float, !dbg !33
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float %.0.i19) #5, !dbg !34
  %160 = add i32 %13, %14, !dbg !35
  %161 = sext i32 %160 to i64, !dbg !36
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !36
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !37
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !37
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !37
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !37
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !37
  %168 = bitcast i32 %164 to float, !dbg !37
  %169 = bitcast i32 %165 to float, !dbg !37
  %170 = bitcast i32 %166 to float, !dbg !37
  %171 = bitcast i32 %167 to float, !dbg !37
  %172 = fmul float %159, %168, !dbg !38
  %173 = fmul float %159, %169, !dbg !38
  %174 = fmul float %159, %170, !dbg !38
  %175 = fmul float %159, %171, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %3, i64 %161, !dbg !39
  %177 = bitcast float %172 to i32, !dbg !40
  %178 = bitcast float %173 to i32, !dbg !40
  %179 = bitcast float %174 to i32, !dbg !40
  %180 = bitcast float %175 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %176, i1 %8) #5, !dbg !40
  %181 = or disjoint i32 %13, 2048, !dbg !41
  %182 = icmp samesign ult i32 %181, 2560, !dbg !42
  %183 = add i32 %181, %14, !dbg !35
  %184 = sext i32 %183 to i64, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !36
  %186 = and i1 %8, %182, !dbg !43
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #5, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !37
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !37
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !37
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !37
  %192 = bitcast i32 %188 to float, !dbg !37
  %193 = bitcast i32 %189 to float, !dbg !37
  %194 = bitcast i32 %190 to float, !dbg !37
  %195 = bitcast i32 %191 to float, !dbg !37
  %196 = fmul float %159, %192, !dbg !38
  %197 = fmul float %159, %193, !dbg !38
  %198 = fmul float %159, %194, !dbg !38
  %199 = fmul float %159, %195, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !39
  %201 = bitcast float %196 to i32, !dbg !40
  %202 = bitcast float %197 to i32, !dbg !40
  %203 = bitcast float %198 to i32, !dbg !40
  %204 = bitcast float %199 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %200, i1 %186) #5, !dbg !40
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crynib7ucrbkuadeelq7cvydmsph7feeaqnzxc2hzjwi3gf3ar3c.py", directory: "inductor_cache/ry")
!4 = !{ptr @triton_red_fused__weight_norm_interface_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_7, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_7", linkageName: "triton_red_fused__weight_norm_interface_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 37, column: 25, scope: !7)
!22 = !DILocation(line: 33, column: 22, scope: !7)
!23 = !DILocation(line: 30, column: 25, scope: !7)
!24 = !DILocation(line: 35, column: 23, scope: !7)
!25 = !DILocation(line: 36, column: 46, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !21)
!27 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!28 = !DILocation(line: 38, column: 26, scope: !7)
!29 = !DILocation(line: 39, column: 4, scope: !7)
!30 = !DILocation(line: 40, column: 28, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 47, column: 22, scope: !7)
!35 = !DILocation(line: 46, column: 39, scope: !7)
!36 = !DILocation(line: 46, column: 34, scope: !7)
!37 = !DILocation(line: 46, column: 49, scope: !7)
!38 = !DILocation(line: 48, column: 22, scope: !7)
!39 = !DILocation(line: 49, column: 29, scope: !7)
!40 = !DILocation(line: 49, column: 50, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 44, column: 25, scope: !7)
!43 = !DILocation(line: 46, column: 57, scope: !7)
!44 = !DILocation(line: 42, column: 4, scope: !7)
