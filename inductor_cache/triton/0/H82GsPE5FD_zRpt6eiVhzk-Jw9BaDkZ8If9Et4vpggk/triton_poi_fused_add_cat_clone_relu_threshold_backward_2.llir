; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %22 = sdiv i32 %.frozen, 16, !dbg !15
  %23 = srem i32 %22, 4, !dbg !16
  %24 = mul i32 %22, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %.frozen17 = freeze i32 %20, !dbg !18
  %25 = sdiv i32 %.frozen17, 64, !dbg !18
  %26 = sext i32 %20 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %21) #3, !dbg !20
  %29 = icmp slt i32 %23, 2, !dbg !21
  %30 = mul i32 %25, 64, !dbg !22
  %srem.decomposed = sub i32 %.frozen17, %30, !dbg !22
  %31 = shl nsw i32 %25, 5, !dbg !23
  %32 = add nsw i32 %31, %srem.decomposed, !dbg !24
  %33 = sext i32 %32 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = and i1 %21, %29, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !27
  %37 = sext i32 %23 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %35, i32 0, i1 %35) #3, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %35, i32 0, i1 %35) #3, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %43 = bitcast i32 %42 to float, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %45 = bitcast i32 %44 to float, !dbg !31
  %46 = fadd float %43, 0x3EE4F8B580000000, !dbg !32
  %47 = fadd float %45, 0x3EE4F8B580000000, !dbg !32
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %48, 0, !dbg !33
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %49, 0, !dbg !33
  br i1 %.not.i, label %55, label %50, !dbg !33

50:                                               ; preds = %14
  br i1 %.not1.i, label %53, label %51, !dbg !33

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

55:                                               ; preds = %14
  br i1 %.not1.i, label %58, label %56, !dbg !33

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %60, 0, !dbg !33
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !33
  br i1 %.not.i1, label %67, label %62, !dbg !33

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !33

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !33

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !33
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !34
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !35
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %35, i32 0, i1 %35) #3, !dbg !36
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %35, i32 0, i1 %35) #3, !dbg !36
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !37
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %35, i32 0, i1 %35) #3, !dbg !38
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %35, i32 0, i1 %35) #3, !dbg !38
  %80 = icmp sgt i32 %23, 1, !dbg !39
  %81 = add nsw i32 %23, -2, !dbg !40
  %82 = shl nsw i32 %81, 4, !dbg !41
  %83 = add nsw i32 %31, %.decomposed, !dbg !42
  %84 = add nsw i32 %83, %82, !dbg !43
  %85 = sext i32 %84 to i64, !dbg !44
  %86 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !44
  %87 = and i1 %21, %80, !dbg !45
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #3, !dbg !46
  %89 = sext i32 %81 to i64, !dbg !47
  %90 = getelementptr float, ptr addrspace(1) %6, i64 %89, !dbg !47
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %87, i32 0, i1 %87) #3, !dbg !48
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %87, i32 0, i1 %87) #3, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %7, i64 %89, !dbg !49
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %87, i32 0, i1 %87) #3, !dbg !50
  %95 = bitcast i32 %94 to float, !dbg !50
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %87, i32 0, i1 %87) #3, !dbg !50
  %97 = bitcast i32 %96 to float, !dbg !50
  %98 = fadd float %95, 0x3EE4F8B580000000, !dbg !51
  %99 = fadd float %97, 0x3EE4F8B580000000, !dbg !51
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i6 = icmp eq i32 %100, 0, !dbg !52
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %101, 0, !dbg !52
  br i1 %.not.i6, label %107, label %102, !dbg !52

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !52

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !52

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

__nv_sqrtf.exit10:                                ; preds = %103, %105, %108, %110
  %.0.i8 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !52
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %112, 0, !dbg !52
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %113, 0, !dbg !52
  br i1 %.not.i11, label %119, label %114, !dbg !52

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !52

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !52

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %115, %117, %120, %122
  %.0.i13 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !52
  %124 = extractvalue { i32, i32 } %88, 1, !dbg !46
  %125 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !48
  %126 = insertelement <2 x i32> %125, i32 %92, i64 1, !dbg !48
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !48
  %128 = extractvalue { i32, i32 } %88, 0, !dbg !46
  %129 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !46
  %130 = insertelement <2 x i32> %129, i32 %124, i64 1, !dbg !46
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !46
  %132 = fsub <2 x float> %131, %127, !dbg !53
  %133 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %134 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !29
  %135 = insertelement <2 x i32> %134, i32 %40, i64 1, !dbg !29
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !29
  %137 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !36
  %138 = insertelement <2 x i32> %137, i32 %76, i64 1, !dbg !36
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !36
  %140 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !38
  %141 = insertelement <2 x i32> %140, i32 %79, i64 1, !dbg !38
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !38
  %143 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %144 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !27
  %145 = insertelement <2 x i32> %144, i32 %133, i64 1, !dbg !27
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !27
  %147 = fsub <2 x float> %146, %136, !dbg !54
  %148 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %149 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %150 = sdiv i32 %20, 32, !dbg !55
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !56
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !56
  %153 = getelementptr float, ptr addrspace(1) %8, i64 %89, !dbg !57
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %87, i32 0, i1 %87) #3, !dbg !58
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %87, i32 0, i1 %87) #3, !dbg !58
  %156 = getelementptr float, ptr addrspace(1) %9, i64 %89, !dbg !59
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %87, i32 0, i1 %87) #3, !dbg !60
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %87, i32 0, i1 %87) #3, !dbg !60
  %159 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !61
  %160 = insertelement <2 x i32> %159, i32 %22, i64 1, !dbg !61
  %161 = srem <2 x i32> %160, splat (i32 2), !dbg !61
  %162 = shl nsw <2 x i32> %161, <i32 4, i32 5>, !dbg !62
  %163 = shl nsw i32 %25, 6, !dbg !63
  %164 = add i32 %163, %.decomposed, !dbg !64
  %165 = extractelement <2 x i32> %162, i64 0, !dbg !65
  %166 = add i32 %164, %165, !dbg !65
  %167 = extractelement <2 x i32> %162, i64 1, !dbg !66
  %168 = add i32 %166, %167, !dbg !66
  %169 = sext i32 %168 to i64, !dbg !67
  %170 = getelementptr float, ptr addrspace(1) %11, i64 %169, !dbg !67
  %171 = getelementptr i1, ptr addrspace(1) %12, i64 %26, !dbg !68
  %172 = insertelement <2 x float> poison, float %72, i64 0, !dbg !69
  %173 = insertelement <2 x float> %172, float %73, i64 1, !dbg !69
  %174 = fmul <2 x float> %147, %173, !dbg !69
  %175 = fmul <2 x float> %174, %139, !dbg !70
  %176 = fadd <2 x float> %175, %142, !dbg !71
  %177 = fcmp olt <2 x float> %176, zeroinitializer, !dbg !72
  %178 = select <2 x i1> %177, <2 x float> zeroinitializer, <2 x float> %176, !dbg !76
  %179 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !20
  %180 = insertelement <2 x i32> %179, i32 %148, i64 1, !dbg !20
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !20
  %182 = insertelement <2 x float> poison, float %151, i64 0, !dbg !77
  %183 = insertelement <2 x float> %182, float %152, i64 1, !dbg !77
  %184 = fmul <2 x float> %132, %183, !dbg !77
  %185 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !58
  %186 = insertelement <2 x i32> %185, i32 %155, i64 1, !dbg !58
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !58
  %188 = fmul <2 x float> %184, %187, !dbg !78
  %189 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !60
  %190 = insertelement <2 x i32> %189, i32 %158, i64 1, !dbg !60
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !60
  %192 = fadd <2 x float> %188, %191, !dbg !79
  %193 = fcmp olt <2 x float> %192, zeroinitializer, !dbg !80
  %194 = select <2 x i1> %193, <2 x float> zeroinitializer, <2 x float> %192, !dbg !82
  %195 = insertelement <2 x i1> poison, i1 %29, i64 0, !dbg !83
  %196 = shufflevector <2 x i1> %195, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !83
  %197 = select <2 x i1> %196, <2 x float> %178, <2 x float> %194, !dbg !83
  %198 = fadd <2 x float> %197, %181, !dbg !84
  %199 = fcmp olt <2 x float> %198, zeroinitializer, !dbg !85
  %200 = select <2 x i1> %199, <2 x float> zeroinitializer, <2 x float> %198, !dbg !87
  %201 = fcmp ole <2 x float> %200, zeroinitializer, !dbg !88
  %bc = bitcast <2 x float> %200 to <2 x i32>, !dbg !89
  %202 = extractelement <2 x i32> %bc, i64 0, !dbg !89
  %bc16 = bitcast <2 x float> %200 to <2 x i32>, !dbg !89
  %203 = extractelement <2 x i32> %bc16, i64 1, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %202, i32 %203, ptr addrspace(1) %170, i1 %21) #3, !dbg !89
  %204 = zext <2 x i1> %201 to <2 x i8>, !dbg !90
  %205 = bitcast <2 x i8> %204 to i16, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %205, ptr addrspace(1) %171, i1 %21) #3, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgeq4jbmgjjrof6pcynx4zm4mraaq4fuqjcxie664k6tv2ff57om.py", directory: "inductor_cache/ge")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_2", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 32, scope: !7)
!20 = !DILocation(line: 30, column: 37, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 48, scope: !7)
!24 = !DILocation(line: 36, column: 45, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 60, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 35, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 27, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 31, scope: !7)
!36 = !DILocation(line: 48, column: 36, scope: !7)
!37 = !DILocation(line: 50, column: 31, scope: !7)
!38 = !DILocation(line: 50, column: 36, scope: !7)
!39 = !DILocation(line: 56, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 47, scope: !7)
!41 = !DILocation(line: 59, column: 40, scope: !7)
!42 = !DILocation(line: 59, column: 36, scope: !7)
!43 = !DILocation(line: 59, column: 53, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 69, scope: !7)
!46 = !DILocation(line: 59, column: 61, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 60, column: 43, scope: !7)
!49 = !DILocation(line: 62, column: 31, scope: !7)
!50 = !DILocation(line: 62, column: 43, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 27, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 38, column: 18, scope: !7)
!55 = !DILocation(line: 29, column: 21, scope: !7)
!56 = !DILocation(line: 67, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 31, scope: !7)
!58 = !DILocation(line: 71, column: 43, scope: !7)
!59 = !DILocation(line: 73, column: 31, scope: !7)
!60 = !DILocation(line: 73, column: 43, scope: !7)
!61 = !DILocation(line: 29, column: 27, scope: !7)
!62 = !DILocation(line: 85, column: 33, scope: !7)
!63 = !DILocation(line: 85, column: 49, scope: !7)
!64 = !DILocation(line: 85, column: 30, scope: !7)
!65 = !DILocation(line: 85, column: 38, scope: !7)
!66 = !DILocation(line: 85, column: 46, scope: !7)
!67 = !DILocation(line: 85, column: 25, scope: !7)
!68 = !DILocation(line: 86, column: 25, scope: !7)
!69 = !DILocation(line: 47, column: 19, scope: !7)
!70 = !DILocation(line: 49, column: 20, scope: !7)
!71 = !DILocation(line: 51, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 53, column: 42, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 72, column: 20, scope: !7)
!79 = !DILocation(line: 74, column: 20, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !81)
!81 = !DILocation(line: 76, column: 42, scope: !7)
!82 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !81)
!83 = !DILocation(line: 0, scope: !7)
!84 = !DILocation(line: 80, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !86)
!86 = !DILocation(line: 82, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !86)
!88 = !DILocation(line: 84, column: 21, scope: !7)
!89 = !DILocation(line: 85, column: 61, scope: !7)
!90 = !DILocation(line: 86, column: 37, scope: !7)
!91 = !DILocation(line: 86, column: 4, scope: !7)
