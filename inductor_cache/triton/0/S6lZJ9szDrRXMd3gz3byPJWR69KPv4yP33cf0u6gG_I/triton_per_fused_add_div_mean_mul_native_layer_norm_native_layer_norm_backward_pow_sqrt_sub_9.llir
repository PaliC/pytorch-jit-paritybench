; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = icmp slt i32 %14, 16, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = lshr i32 %16, 5, !dbg !12
  %19 = shl i32 %16, 1, !dbg !12
  %20 = and i32 %19, 126, !dbg !12
  %21 = shl i32 %14, 7, !dbg !13
  %22 = or disjoint i32 %21, %20, !dbg !14
  %23 = sext i32 %22 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !15
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !16
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !18
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !18
  %32 = zext nneg i32 %20 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !19
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !20
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !20
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !21
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !22
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !22
  %41 = bitcast i32 %39 to float, !dbg !22
  %42 = bitcast i32 %40 to float, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !23
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !24
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !24
  %47 = bitcast i32 %45 to float, !dbg !24
  %48 = bitcast i32 %46 to float, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !25
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !27
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !28
  %53 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %54 = insertelement <2 x i32> %53, i32 %27, i64 1, !dbg !16
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !16
  %56 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !18
  %57 = insertelement <2 x i32> %56, i32 %31, i64 1, !dbg !18
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !18
  %59 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !20
  %60 = insertelement <2 x i32> %59, i32 %36, i64 1, !dbg !20
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !20
  %62 = fadd <2 x float> %58, %61, !dbg !29
  %63 = fadd <2 x float> %62, %55, !dbg !30
  %64 = extractelement <2 x float> %63, i64 0, !dbg !31
  %65 = extractelement <2 x float> %63, i64 1, !dbg !31
  %66 = fadd float %64, %65, !dbg !31
  %67 = select i1 %15, float %66, float 0.000000e+00, !dbg !31
  %68 = bitcast float %67 to i32, !dbg !36
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !36
  %70 = bitcast i32 %69 to float, !dbg !36
  %71 = fadd float %67, %70, !dbg !31
  %72 = bitcast float %71 to i32, !dbg !36
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !36
  %74 = bitcast i32 %73 to float, !dbg !36
  %75 = fadd float %71, %74, !dbg !31
  %76 = bitcast float %75 to i32, !dbg !36
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !36
  %78 = bitcast i32 %77 to float, !dbg !36
  %79 = fadd float %75, %78, !dbg !31
  %80 = bitcast float %79 to i32, !dbg !36
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = fadd float %79, %82, !dbg !31
  %84 = bitcast float %83 to i32, !dbg !36
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !36
  %86 = bitcast i32 %85 to float, !dbg !36
  %87 = fadd float %83, %86, !dbg !31
  %88 = icmp eq i32 %17, 0, !dbg !36
  %89 = and i32 %18, 1, !dbg !36
  %90 = zext nneg i32 %89 to i64, !dbg !36
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i64 %90, !dbg !36
  %92 = bitcast float %87 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %88) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %93 = icmp slt i32 %16, 2, !dbg !36
  %94 = sext i32 %16 to i64, !dbg !36
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i64 %94, !dbg !36
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %93) #5, !dbg !36
  %97 = bitcast i32 %96 to float, !dbg !36
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !36
  %99 = bitcast i32 %98 to float, !dbg !36
  %100 = fadd float %97, %99, !dbg !31
  %101 = and i32 %16, 1, !dbg !36
  %102 = icmp eq i32 %101, 0, !dbg !36
  %103 = and i1 %93, %102, !dbg !36
  %104 = bitcast float %100 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %104, i1 %103) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %105 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 1.280000e+02) #5, !dbg !37
  %107 = fsub float %64, %106, !dbg !38
  %108 = fsub float %65, %106, !dbg !38
  %109 = fmul float %107, %107, !dbg !39
  %110 = fmul float %108, %108, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %111 = fadd float %109, %110, !dbg !42
  %112 = select i1 %15, float %111, float 0.000000e+00, !dbg !42
  %113 = bitcast float %112 to i32, !dbg !40
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !40
  %115 = bitcast i32 %114 to float, !dbg !40
  %116 = fadd float %112, %115, !dbg !42
  %117 = bitcast float %116 to i32, !dbg !40
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !40
  %119 = bitcast i32 %118 to float, !dbg !40
  %120 = fadd float %116, %119, !dbg !42
  %121 = bitcast float %120 to i32, !dbg !40
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !40
  %123 = bitcast i32 %122 to float, !dbg !40
  %124 = fadd float %120, %123, !dbg !42
  %125 = bitcast float %124 to i32, !dbg !40
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !40
  %127 = bitcast i32 %126 to float, !dbg !40
  %128 = fadd float %124, %127, !dbg !42
  %129 = bitcast float %128 to i32, !dbg !40
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !40
  %131 = bitcast i32 %130 to float, !dbg !40
  %132 = fadd float %128, %131, !dbg !42
  %133 = bitcast float %132 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %133, i1 %88) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %93) #5, !dbg !40
  %135 = bitcast i32 %134 to float, !dbg !40
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !40
  %137 = bitcast i32 %136 to float, !dbg !40
  %138 = fadd float %135, %137, !dbg !42
  %139 = bitcast float %138 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %139, i1 %103) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %140 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 1.280000e+02) #5, !dbg !43
  %142 = fadd float %141, 0x3EE4F8B580000000, !dbg !44
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %143, 0, !dbg !45
  br i1 %.not.i, label %146, label %144, !dbg !45

144:                                              ; preds = %13
  %145 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

146:                                              ; preds = %13
  %147 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %144, %146
  %.0.i = phi float [ %145, %144 ], [ %147, %146 ], !dbg !45
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i4 = icmp eq i32 %149, 0, !dbg !45
  br i1 %.not.i4, label %152, label %150, !dbg !45

150:                                              ; preds = %__nv_rsqrtf.exit
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !45
  br label %__nv_rsqrtf.exit6, !dbg !45

152:                                              ; preds = %__nv_rsqrtf.exit
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !45
  br label %__nv_rsqrtf.exit6, !dbg !45

__nv_rsqrtf.exit6:                                ; preds = %150, %152
  %.0.i5 = phi float [ %151, %150 ], [ %153, %152 ], !dbg !45
  %154 = fmul float %107, %.0.i5, !dbg !46
  %155 = fmul float %108, %.0.i5, !dbg !46
  %156 = fmul float %154, %41, !dbg !47
  %157 = fmul float %155, %42, !dbg !47
  %158 = fadd float %156, %47, !dbg !48
  %159 = fadd float %157, %48, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %160 = fadd float %158, %159, !dbg !51
  %161 = select i1 %15, float %160, float 0.000000e+00, !dbg !51
  %162 = bitcast float %161 to i32, !dbg !49
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !49
  %164 = bitcast i32 %163 to float, !dbg !49
  %165 = fadd float %161, %164, !dbg !51
  %166 = bitcast float %165 to i32, !dbg !49
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !49
  %168 = bitcast i32 %167 to float, !dbg !49
  %169 = fadd float %165, %168, !dbg !51
  %170 = bitcast float %169 to i32, !dbg !49
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !49
  %172 = bitcast i32 %171 to float, !dbg !49
  %173 = fadd float %169, %172, !dbg !51
  %174 = bitcast float %173 to i32, !dbg !49
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !49
  %176 = bitcast i32 %175 to float, !dbg !49
  %177 = fadd float %173, %176, !dbg !51
  %178 = bitcast float %177 to i32, !dbg !49
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !49
  %180 = bitcast i32 %179 to float, !dbg !49
  %181 = fadd float %177, %180, !dbg !51
  %182 = bitcast float %181 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %182, i1 %88) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %183 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %93) #5, !dbg !49
  %184 = bitcast i32 %183 to float, !dbg !49
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !49
  %186 = bitcast i32 %185 to float, !dbg !49
  %187 = fadd float %184, %186, !dbg !51
  %188 = bitcast float %187 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %188, i1 %103) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %189 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float 1.280000e+02) #5, !dbg !52
  %191 = fsub float %158, %190, !dbg !53
  %192 = fsub float %159, %190, !dbg !53
  %193 = fmul float %191, %191, !dbg !54
  %194 = fmul float %192, %192, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %195 = fadd float %193, %194, !dbg !57
  %196 = select i1 %15, float %195, float 0.000000e+00, !dbg !57
  %197 = bitcast float %196 to i32, !dbg !55
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !55
  %199 = bitcast i32 %198 to float, !dbg !55
  %200 = fadd float %196, %199, !dbg !57
  %201 = bitcast float %200 to i32, !dbg !55
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !55
  %203 = bitcast i32 %202 to float, !dbg !55
  %204 = fadd float %200, %203, !dbg !57
  %205 = bitcast float %204 to i32, !dbg !55
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !55
  %207 = bitcast i32 %206 to float, !dbg !55
  %208 = fadd float %204, %207, !dbg !57
  %209 = bitcast float %208 to i32, !dbg !55
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !55
  %211 = bitcast i32 %210 to float, !dbg !55
  %212 = fadd float %208, %211, !dbg !57
  %213 = bitcast float %212 to i32, !dbg !55
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !55
  %215 = bitcast i32 %214 to float, !dbg !55
  %216 = fadd float %212, %215, !dbg !57
  %217 = bitcast float %216 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %217, i1 %88) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %218 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %93) #5, !dbg !55
  %219 = bitcast i32 %218 to float, !dbg !55
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !55
  %221 = bitcast i32 %220 to float, !dbg !55
  %222 = fadd float %219, %221, !dbg !57
  %223 = bitcast float %222 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %223, i1 %103) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %224 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !55
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float 1.280000e+02) #5, !dbg !58
  %226 = fadd float %225, 0x3EE4F8B580000000, !dbg !59
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i7 = icmp eq i32 %227, 0, !dbg !60
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !60
  %.not1.i = icmp eq i32 %228, 0, !dbg !60
  br i1 %.not.i7, label %234, label %229, !dbg !60

229:                                              ; preds = %__nv_rsqrtf.exit6
  br i1 %.not1.i, label %232, label %230, !dbg !60

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

234:                                              ; preds = %__nv_rsqrtf.exit6
  br i1 %.not1.i, label %237, label %235, !dbg !60

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %230, %232, %235, %237
  %.0.i8 = phi float [ %231, %230 ], [ %233, %232 ], [ %236, %235 ], [ %238, %237 ], !dbg !60
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !60
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i14 = icmp eq i32 %241, 0, !dbg !60
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !60
  %.not1.i17 = icmp eq i32 %242, 0, !dbg !60
  br i1 %.not.i14, label %248, label %243, !dbg !60

243:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %246, label %244, !dbg !60

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit18, !dbg !60

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit18, !dbg !60

248:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %251, label %249, !dbg !60

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit18, !dbg !60

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #5, !dbg !60
  br label %__nv_sqrtf.exit18, !dbg !60

__nv_sqrtf.exit18:                                ; preds = %244, %246, %249, %251
  %.0.i16 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !60
  %253 = extractvalue { i32, i32 } %52, 1, !dbg !28
  %254 = bitcast i32 %253 to float, !dbg !28
  %255 = extractvalue { i32, i32 } %52, 0, !dbg !28
  %256 = bitcast i32 %255 to float, !dbg !28
  %257 = extractvalue { i32, i32 } %50, 1, !dbg !26
  %258 = bitcast i32 %257 to float, !dbg !26
  %259 = extractvalue { i32, i32 } %50, 0, !dbg !26
  %260 = bitcast i32 %259 to float, !dbg !26
  %261 = fmul float %.0.i, 7.812500e-03, !dbg !61
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %.0.i16) #5, !dbg !62
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %.0.i16) #5, !dbg !62
  %264 = fmul float %262, %260, !dbg !63
  %265 = fmul float %263, %258, !dbg !63
  %266 = fadd float %264, %256, !dbg !64
  %267 = fadd float %265, %254, !dbg !64
  %268 = bitcast float %154 to i32, !dbg !65
  %269 = bitcast float %155 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %268, i32 %269, ptr addrspace(1) %28, i1 %15) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %270 = sext i32 %14 to i64, !dbg !67
  %271 = getelementptr float, ptr addrspace(1) %1, i64 %270, !dbg !67
  %urem = and i32 %16, 63, !dbg !68
  %272 = icmp eq i32 %urem, 0, !dbg !68
  %273 = bitcast float %190 to i32, !dbg !68
  %274 = and i1 %272, %15, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %273, ptr addrspace(1) %271, i1 %274) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %270, !dbg !70
  %276 = bitcast float %.0.i8 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %276, ptr addrspace(1) %275, i1 %274) #5, !dbg !71
  %277 = getelementptr float, ptr addrspace(1) %9, i64 %270, !dbg !72
  %278 = bitcast float %261 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %278, ptr addrspace(1) %277, i1 %274) #5, !dbg !73
  %279 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !74
  %280 = bitcast float %266 to i32, !dbg !75
  %281 = bitcast float %267 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %280, i32 %281, ptr addrspace(1) %279, i1 %15) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py", directory: "inductor_cache/tp")
!4 = !{ptr @triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9", linkageName: "triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 44, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 44, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 19, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 52, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !41)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 28, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !50)
!50 = !DILocation(line: 64, column: 26, scope: !7)
!51 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !50)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !56)
!56 = !DILocation(line: 70, column: 26, scope: !7)
!57 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !56)
!58 = !DILocation(line: 71, column: 20, scope: !7)
!59 = !DILocation(line: 72, column: 20, scope: !7)
!60 = !DILocation(line: 73, column: 27, scope: !7)
!61 = !DILocation(line: 75, column: 20, scope: !7)
!62 = !DILocation(line: 76, column: 20, scope: !7)
!63 = !DILocation(line: 77, column: 20, scope: !7)
!64 = !DILocation(line: 78, column: 20, scope: !7)
!65 = !DILocation(line: 79, column: 49, scope: !7)
!66 = !DILocation(line: 80, column: 4, scope: !7)
!67 = !DILocation(line: 81, column: 28, scope: !7)
!68 = !DILocation(line: 81, column: 40, scope: !7)
!69 = !DILocation(line: 82, column: 4, scope: !7)
!70 = !DILocation(line: 83, column: 28, scope: !7)
!71 = !DILocation(line: 83, column: 40, scope: !7)
!72 = !DILocation(line: 84, column: 25, scope: !7)
!73 = !DILocation(line: 84, column: 37, scope: !7)
!74 = !DILocation(line: 85, column: 25, scope: !7)
!75 = !DILocation(line: 85, column: 46, scope: !7)
!76 = !DILocation(line: 85, column: 4, scope: !7)
