; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 124, !dbg !12
  %18 = and i32 %15, 127, !dbg !12
  %19 = or disjoint i32 %14, %17, !dbg !13
  %20 = or disjoint i32 %14, %18, !dbg !13
  %21 = icmp slt i32 %19, 512, !dbg !14
  %22 = icmp slt i32 %20, 512, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %.lobit1 = lshr i32 %15, 5, !dbg !17
  %25 = and i32 %.lobit1, 3, !dbg !17
  %26 = or disjoint i32 %24, %25, !dbg !18
  %27 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %28 = sdiv i32 %.frozen, 128, !dbg !20
  %29 = mul i32 %28, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = srem i32 %20, 128, !dbg !21
  %.frozen6 = freeze i32 %26, !dbg !22
  %31 = sdiv i32 %.frozen6, 2, !dbg !22
  %32 = mul i32 %31, 2, !dbg !23
  %.decomposed7 = sub i32 %.frozen6, %32, !dbg !23
  %33 = shl i32 %26, 7, !dbg !24
  %34 = add i32 %33, %.decomposed, !dbg !25
  %35 = shl i32 %28, 9, !dbg !26
  %36 = add i32 %34, %35, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = and i1 %21, %27, !dbg !29
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %39) #4, !dbg !30
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !30
  %45 = and i32 %16, 508, !dbg !30
  %46 = lshr i32 %16, 5, !dbg !30
  %47 = and i32 %46, 12, !dbg !30
  %48 = add nuw nsw i32 %47, %45, !dbg !30
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %49, i32 %41, i32 %42, i32 %43, i32 %44, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !30
  %51 = load float, ptr addrspace(3) %50, align 4, !dbg !30
  %52 = add nuw nsw i32 %18, 132, !dbg !30
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !30
  %54 = load float, ptr addrspace(3) %53, align 4, !dbg !30
  %55 = add nuw nsw i32 %18, 264, !dbg !30
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %55, !dbg !30
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !30
  %58 = add nuw nsw i32 %18, 396, !dbg !30
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !30
  %60 = load float, ptr addrspace(3) %59, align 4, !dbg !30
  %61 = sext i32 %30 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #4, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %22) #4, !dbg !34
  %66 = bitcast i32 %65 to float, !dbg !34
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !35
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %22) #4, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %22) #4, !dbg !38
  %71 = sext i32 %31 to i64, !dbg !39
  %72 = getelementptr i64, ptr addrspace(1) %5, i64 %71, !dbg !39
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %27) #4, !dbg !40
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %27) #4, !dbg !40
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %27) #4, !dbg !40
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %27) #4, !dbg !40
  %77 = sext i32 %.decomposed7 to i64, !dbg !41
  %78 = getelementptr i64, ptr addrspace(1) %5, i64 %77, !dbg !41
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %27) #4, !dbg !42
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %27) #4, !dbg !42
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %27) #4, !dbg !42
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %27) #4, !dbg !42
  %83 = fadd float %66, 0x3EE4F8B580000000, !dbg !43
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %84, 0, !dbg !44
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %85, 0, !dbg !44
  br i1 %.not.i, label %91, label %86, !dbg !44

86:                                               ; preds = %12
  br i1 %.not1.i, label %89, label %87, !dbg !44

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

91:                                               ; preds = %12
  br i1 %.not1.i, label %94, label %92, !dbg !44

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !44
  %96 = icmp slt i32 %24, 4, !dbg !19
  %97 = and i1 %96, %22, !dbg !29
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %99 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 4, !dbg !46
  %100 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 8, !dbg !46
  %101 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 12, !dbg !46
  %102 = lshr i64 %76, 57, !dbg !50
  %103 = and i64 %102, 64, !dbg !50
  %104 = add i64 %103, %76, !dbg !50
  %105 = lshr i64 %82, 57, !dbg !51
  %106 = and i64 %105, 64, !dbg !51
  %107 = add i64 %106, %82, !dbg !51
  %108 = sext i32 %.decomposed to i64, !dbg !52
  %109 = shl i32 %28, 19, !dbg !53
  %110 = sext i32 %109 to i64, !dbg !54
  %.idx = shl i64 %107, 9, !dbg !55
  %111 = getelementptr i8, ptr addrspace(1) %6, i64 %.idx, !dbg !55
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %108, !dbg !55
  %.idx5 = shl i64 %104, 15, !dbg !55
  %113 = getelementptr i8, ptr addrspace(1) %112, i64 %.idx5, !dbg !55
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %110, !dbg !55
  %115 = insertelement <4 x float> poison, float %60, i64 0, !dbg !56
  %116 = insertelement <4 x float> %115, float %57, i64 1, !dbg !56
  %117 = insertelement <4 x float> %116, float %54, i64 2, !dbg !56
  %118 = insertelement <4 x float> %117, float %51, i64 3, !dbg !56
  %119 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !56
  %120 = bitcast <4 x i32> %119 to <4 x float>, !dbg !56
  %121 = shufflevector <4 x float> %120, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %122 = fsub <4 x float> %118, %121, !dbg !56
  %123 = insertelement <4 x float> poison, float %98, i64 0, !dbg !57
  %124 = shufflevector <4 x float> %123, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  %125 = fmul <4 x float> %122, %124, !dbg !57
  %126 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !58
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !58
  %128 = shufflevector <4 x float> %127, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !58
  %129 = fmul <4 x float> %125, %128, !dbg !58
  %130 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !59
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !59
  %132 = shufflevector <4 x float> %131, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !59
  %133 = fadd <4 x float> %129, %132, !dbg !59
  %134 = fcmp olt <4 x float> %133, zeroinitializer, !dbg !60
  %135 = select <4 x i1> %134, <4 x float> zeroinitializer, <4 x float> %133, !dbg !46
  %136 = extractelement <4 x float> %135, i64 3, !dbg !61
  %137 = bitcast float %136 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %137, i1 true) #4, !dbg !46
  %138 = extractelement <4 x float> %135, i64 2, !dbg !61
  %139 = bitcast float %138 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %139, i1 true) #4, !dbg !46
  %140 = extractelement <4 x float> %135, i64 1, !dbg !61
  %141 = bitcast float %140 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %141, i1 true) #4, !dbg !46
  %142 = extractelement <4 x float> %135, i64 0, !dbg !61
  %143 = bitcast float %142 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %143, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %144 = load float, ptr addrspace(3) %49, align 16, !dbg !46
  %145 = load float, ptr addrspace(3) %99, align 4, !dbg !46
  %146 = load float, ptr addrspace(3) %100, align 8, !dbg !46
  %147 = load float, ptr addrspace(3) %101, align 4, !dbg !46
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %39) #4, !dbg !62
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !62
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !62
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !62
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !62
  %153 = bitcast i32 %149 to float, !dbg !62
  %154 = bitcast i32 %150 to float, !dbg !62
  %155 = bitcast i32 %151 to float, !dbg !62
  %156 = bitcast i32 %152 to float, !dbg !62
  %157 = fadd float %144, %153, !dbg !63
  %158 = fadd float %145, %154, !dbg !63
  %159 = fadd float %146, %155, !dbg !63
  %160 = fadd float %147, %156, !dbg !63
  %161 = fcmp ole <4 x float> %135, zeroinitializer, !dbg !64
  %162 = add i32 %20, %23, !dbg !65
  %163 = shl i32 %162, 2, !dbg !65
  %164 = sext i32 %163 to i64, !dbg !66
  %165 = getelementptr float, ptr addrspace(1) %7, i64 %164, !dbg !66
  %166 = bitcast float %136 to i32, !dbg !61
  %167 = bitcast float %138 to i32, !dbg !61
  %168 = bitcast float %140 to i32, !dbg !61
  %169 = bitcast float %142 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %165, i1 %97) #4, !dbg !61
  %170 = getelementptr float, ptr addrspace(1) %8, i64 %37, !dbg !67
  %171 = bitcast float %157 to i32, !dbg !68
  %172 = bitcast float %158 to i32, !dbg !68
  %173 = bitcast float %159 to i32, !dbg !68
  %174 = bitcast float %160 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %172, i32 %173, i32 %174, ptr addrspace(1) %170, i1 %39) #4, !dbg !68
  %175 = getelementptr i1, ptr addrspace(1) %9, i64 %37, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %176 = extractelement <4 x i1> %161, i64 3, !dbg !70
  %177 = zext i1 %176 to i8, !dbg !70
  %178 = extractelement <4 x i1> %161, i64 2, !dbg !70
  %179 = zext i1 %178 to i8, !dbg !70
  %180 = extractelement <4 x i1> %161, i64 1, !dbg !70
  %181 = zext i1 %180 to i8, !dbg !70
  %182 = extractelement <4 x i1> %161, i64 0, !dbg !70
  %183 = zext i1 %182 to i8, !dbg !70
  %184 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %18, !dbg !70
  %185 = insertelement <1 x i8> poison, i8 %177, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %184, <1 x i8> %185, i1 true) #4, !dbg !70
  %186 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %52, !dbg !70
  %187 = insertelement <1 x i8> poison, i8 %179, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %186, <1 x i8> %187, i1 true) #4, !dbg !70
  %188 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !70
  %189 = insertelement <1 x i8> poison, i8 %181, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %188, <1 x i8> %189, i1 true) #4, !dbg !70
  %190 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %58, !dbg !70
  %191 = insertelement <1 x i8> poison, i8 %183, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %190, <1 x i8> %191, i1 true) #4, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %192 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %48, !dbg !70
  %193 = load <32 x i1>, ptr addrspace(3) %192, align 4, !dbg !70
  %194 = shufflevector <32 x i1> %193, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !70
  %195 = zext <4 x i1> %194 to <4 x i8>, !dbg !70
  %196 = bitcast <4 x i8> %195 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %175, i1 %39) #4, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py", directory: "inductor_cache/it")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 61, scope: !7)
!30 = !DILocation(line: 34, column: 53, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 31, scope: !7)
!42 = !DILocation(line: 40, column: 36, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 26, scope: !7)
!45 = !DILocation(line: 46, column: 18, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 53, column: 42, scope: !7)
!50 = !DILocation(line: 57, column: 35, scope: !7)
!51 = !DILocation(line: 60, column: 35, scope: !7)
!52 = !DILocation(line: 61, column: 36, scope: !7)
!53 = !DILocation(line: 61, column: 68, scope: !7)
!54 = !DILocation(line: 61, column: 61, scope: !7)
!55 = !DILocation(line: 61, column: 31, scope: !7)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 49, column: 19, scope: !7)
!58 = !DILocation(line: 50, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!61 = !DILocation(line: 65, column: 44, scope: !7)
!62 = !DILocation(line: 61, column: 73, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 21, scope: !7)
!65 = !DILocation(line: 65, column: 30, scope: !7)
!66 = !DILocation(line: 65, column: 25, scope: !7)
!67 = !DILocation(line: 66, column: 25, scope: !7)
!68 = !DILocation(line: 66, column: 55, scope: !7)
!69 = !DILocation(line: 67, column: 25, scope: !7)
!70 = !DILocation(line: 67, column: 55, scope: !7)
!71 = !DILocation(line: 67, column: 4, scope: !7)
