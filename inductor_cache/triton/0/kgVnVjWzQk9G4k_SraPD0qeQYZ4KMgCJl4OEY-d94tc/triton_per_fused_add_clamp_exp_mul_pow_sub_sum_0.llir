; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_add_clamp_exp_mul_pow_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %6, 6, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #2, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #2, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = or disjoint i32 %11, 32, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %7, i32 0, i1 %7) #2, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %7, i32 0, i1 %7) #2, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = shl i32 %6, 5, !dbg !20
  %26 = or disjoint i32 %25, %9, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %7, i32 0, i1 %7) #2, !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = fcmp ogt float %22, -3.000000e+01, !dbg !24
  %32 = fcmp ogt float %24, -3.000000e+01, !dbg !24
  %33 = fcmp uno float %22, 0.000000e+00, !dbg !28
  %34 = fcmp uno float %24, 0.000000e+00, !dbg !28
  %35 = or i1 %31, %33, !dbg !29
  %36 = or i1 %32, %34, !dbg !29
  %37 = select i1 %35, float %22, float -3.000000e+01, !dbg !30
  %38 = select i1 %36, float %24, float -3.000000e+01, !dbg !30
  %39 = fcmp olt float %37, 2.000000e+01, !dbg !31
  %40 = fcmp olt float %38, 2.000000e+01, !dbg !31
  %41 = fcmp uno float %37, 0.000000e+00, !dbg !33
  %42 = fcmp uno float %38, 0.000000e+00, !dbg !33
  %43 = or i1 %39, %41, !dbg !34
  %44 = or i1 %40, %42, !dbg !34
  %45 = select i1 %43, float %37, float 2.000000e+01, !dbg !35
  %46 = fmul float %38, 5.000000e-01, !dbg !36
  %47 = fmul float %46, 0x3FF7154760000000, !dbg !37
  %48 = select i1 %44, float %47, float 0x402CDA9940000000, !dbg !35
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #2, !dbg !37
  %50 = fmul float %49, %30, !dbg !38
  %51 = fadd float %50, %17, !dbg !39
  %52 = fmul float %15, %15, !dbg !40
  %53 = fmul float %45, 0x3FF7154760000000, !dbg !41
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #2, !dbg !41
  %55 = fadd float %52, %54, !dbg !42
  %56 = fadd float %55, -1.000000e+00, !dbg !43
  %57 = fsub float %56, %45, !dbg !44
  %58 = select i1 %7, float %57, float 0.000000e+00, !dbg !45
  %59 = bitcast float %58 to i32, !dbg !46
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !46
  %61 = bitcast i32 %60 to float, !dbg !46
  %62 = fadd float %58, %61, !dbg !50
  %63 = bitcast float %62 to i32, !dbg !46
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !46
  %65 = bitcast i32 %64 to float, !dbg !46
  %66 = fadd float %62, %65, !dbg !50
  %67 = bitcast float %66 to i32, !dbg !46
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !46
  %69 = bitcast i32 %68 to float, !dbg !46
  %70 = fadd float %66, %69, !dbg !50
  %71 = bitcast float %70 to i32, !dbg !46
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !46
  %73 = bitcast i32 %72 to float, !dbg !46
  %74 = fadd float %70, %73, !dbg !50
  %75 = bitcast float %74 to i32, !dbg !46
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !46
  %77 = bitcast i32 %76 to float, !dbg !46
  %78 = fadd float %74, %77, !dbg !50
  %79 = and i32 %8, 32, !dbg !52
  %80 = icmp eq i32 %79, 0, !dbg !52
  %81 = bitcast float %51 to i32, !dbg !52
  %82 = and i1 %80, %7, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %81, ptr addrspace(1) %28, i1 %82) #2, !dbg !52
  %83 = sext i32 %6 to i64, !dbg !53
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !53
  %urem = and i32 %8, 63, !dbg !54
  %85 = icmp eq i32 %urem, 0, !dbg !54
  %86 = bitcast float %78 to i32, !dbg !54
  %87 = and i1 %85, %7, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %84, i1 %87) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2xg3rrptq5vphggsjkl3xqyhbgnwuocgsrqmk4qgdz2tiz3px5q.py", directory: "inductor_cache/2x")
!4 = !{ptr @triton_per_fused_add_clamp_exp_mul_pow_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clamp_exp_mul_pow_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clamp_exp_mul_pow_sub_sum_0", linkageName: "triton_per_fused_add_clamp_exp_mul_pow_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 34, scope: !7)
!23 = !DILocation(line: 33, column: 47, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 35, column: 40, scope: !7)
!28 = !DILocation(line: 120, column: 21, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 120, column: 16, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 112, column: 21, scope: !25, inlinedAt: !32)
!34 = !DILocation(line: 112, column: 16, scope: !25, inlinedAt: !32)
!35 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !32)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 23, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 24, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 35, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = !DILocation(line: 51, column: 26, scope: !7)
!50 = !DILocation(line: 256, column: 15, scope: !51, inlinedAt: !49)
!51 = distinct !DILexicalBlockFile(scope: !47, file: !48, discriminator: 0)
!52 = !DILocation(line: 52, column: 48, scope: !7)
!53 = !DILocation(line: 53, column: 25, scope: !7)
!54 = !DILocation(line: 53, column: 37, scope: !7)
!55 = !DILocation(line: 53, column: 4, scope: !7)
