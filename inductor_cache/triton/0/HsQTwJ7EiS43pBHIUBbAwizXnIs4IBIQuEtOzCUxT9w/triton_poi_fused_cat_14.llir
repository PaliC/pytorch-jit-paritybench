; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 256, !dbg !14
  %19 = sdiv i32 %17, 256, !dbg !14
  %20 = srem i32 %18, 320, !dbg !15
  %21 = srem i32 %19, 320, !dbg !15
  %22 = mul i32 %18, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %.frozen37 = freeze i32 %16, !dbg !17
  %23 = sdiv i32 %.frozen37, 81920, !dbg !17
  %.frozen38 = freeze i32 %17, !dbg !17
  %24 = sdiv i32 %.frozen38, 81920, !dbg !17
  %25 = icmp slt i32 %20, 64, !dbg !18
  %26 = icmp slt i32 %21, 64, !dbg !18
  %27 = mul i32 %23, 81920, !dbg !19
  %srem.decomposed = sub i32 %.frozen37, %27, !dbg !19
  %28 = mul i32 %24, 81920, !dbg !19
  %srem1.decomposed = sub i32 %.frozen38, %28, !dbg !19
  %29 = shl nsw i32 %23, 14, !dbg !20
  %30 = shl nsw i32 %24, 14, !dbg !20
  %31 = add nsw i32 %29, %srem.decomposed, !dbg !21
  %32 = add nsw i32 %30, %srem1.decomposed, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !23
  %39 = add nsw i32 %20, -64, !dbg !24
  %40 = icmp ult i32 %39, 128, !dbg !24
  %41 = add nsw i32 %21, -64, !dbg !24
  %42 = icmp ult i32 %41, 128, !dbg !24
  %43 = shl nsw i32 %20, 8, !dbg !25
  %44 = shl nsw i32 %21, 8, !dbg !25
  %45 = shl nsw i32 %23, 15, !dbg !26
  %46 = shl nsw i32 %24, 15, !dbg !26
  %47 = add nsw i32 %45, %.decomposed, !dbg !25
  %48 = add nsw i32 %47, -16384, !dbg !27
  %49 = add nsw i32 %48, %43, !dbg !28
  %50 = add nsw i32 %46, %.decomposed, !dbg !25
  %51 = add nsw i32 %50, -16384, !dbg !27
  %52 = add nsw i32 %51, %44, !dbg !28
  %53 = sext i32 %49 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !29
  %55 = sext i32 %52 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !29
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !30
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !30
  %59 = icmp sgt i32 %20, 191, !dbg !31
  %60 = icmp sgt i32 %21, 191, !dbg !31
  %61 = add nsw i32 %20, -192, !dbg !32
  %62 = add nsw i32 %21, -192, !dbg !32
  %63 = shl nsw i32 %61, 8, !dbg !33
  %64 = shl nsw i32 %62, 8, !dbg !33
  %65 = add nsw i32 %47, %63, !dbg !34
  %66 = add nsw i32 %50, %64, !dbg !34
  %67 = sext i32 %65 to i64, !dbg !35
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !35
  %69 = sext i32 %66 to i64, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !35
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !36
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #3, !dbg !36
  %73 = sext i32 %61 to i64, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !37
  %75 = sext i32 %62 to i64, !dbg !37
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !37
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %59, i32 0, i1 %59) #3, !dbg !38
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %59, i32 0, i1 %59) #3, !dbg !38
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %59, i32 0, i1 %59) #3, !dbg !38
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %59, i32 0, i1 %59) #3, !dbg !38
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %60, i32 0, i1 %60) #3, !dbg !38
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %60, i32 0, i1 %60) #3, !dbg !38
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %60, i32 0, i1 %60) #3, !dbg !38
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %60, i32 0, i1 %60) #3, !dbg !38
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !39
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !39
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %59, i32 0, i1 %59) #3, !dbg !40
  %88 = bitcast i32 %87 to float, !dbg !40
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %59, i32 0, i1 %59) #3, !dbg !40
  %90 = bitcast i32 %89 to float, !dbg !40
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %59, i32 0, i1 %59) #3, !dbg !40
  %92 = bitcast i32 %91 to float, !dbg !40
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %59, i32 0, i1 %59) #3, !dbg !40
  %94 = bitcast i32 %93 to float, !dbg !40
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %60, i32 0, i1 %60) #3, !dbg !40
  %96 = bitcast i32 %95 to float, !dbg !40
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %60, i32 0, i1 %60) #3, !dbg !40
  %98 = bitcast i32 %97 to float, !dbg !40
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %60, i32 0, i1 %60) #3, !dbg !40
  %100 = bitcast i32 %99 to float, !dbg !40
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %60, i32 0, i1 %60) #3, !dbg !40
  %102 = bitcast i32 %101 to float, !dbg !40
  %103 = fadd float %88, 0x3EE4F8B580000000, !dbg !41
  %104 = fadd float %90, 0x3EE4F8B580000000, !dbg !41
  %105 = fadd float %92, 0x3EE4F8B580000000, !dbg !41
  %106 = fadd float %94, 0x3EE4F8B580000000, !dbg !41
  %107 = fadd float %96, 0x3EE4F8B580000000, !dbg !41
  %108 = fadd float %98, 0x3EE4F8B580000000, !dbg !41
  %109 = fadd float %100, 0x3EE4F8B580000000, !dbg !41
  %110 = fadd float %102, 0x3EE4F8B580000000, !dbg !41
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %111, 0, !dbg !42
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %112, 0, !dbg !42
  br i1 %.not.i, label %118, label %113, !dbg !42

113:                                              ; preds = %10
  br i1 %.not1.i, label %116, label %114, !dbg !42

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

118:                                              ; preds = %10
  br i1 %.not1.i, label %121, label %119, !dbg !42

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !42
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i2 = icmp eq i32 %123, 0, !dbg !42
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i5 = icmp eq i32 %124, 0, !dbg !42
  br i1 %.not.i2, label %130, label %125, !dbg !42

125:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %128, label %126, !dbg !42

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

130:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %133, label %131, !dbg !42

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

__nv_sqrtf.exit6:                                 ; preds = %126, %128, %131, %133
  %.0.i4 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !42
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i7 = icmp eq i32 %135, 0, !dbg !42
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i10 = icmp eq i32 %136, 0, !dbg !42
  br i1 %.not.i7, label %142, label %137, !dbg !42

137:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %140, label %138, !dbg !42

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !42
  br label %__nv_sqrtf.exit11, !dbg !42

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !42
  br label %__nv_sqrtf.exit11, !dbg !42

142:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %145, label %143, !dbg !42

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !42
  br label %__nv_sqrtf.exit11, !dbg !42

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !42
  br label %__nv_sqrtf.exit11, !dbg !42

__nv_sqrtf.exit11:                                ; preds = %138, %140, %143, %145
  %.0.i9 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !42
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i12 = icmp eq i32 %147, 0, !dbg !42
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i15 = icmp eq i32 %148, 0, !dbg !42
  br i1 %.not.i12, label %154, label %149, !dbg !42

149:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %152, label %150, !dbg !42

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !42
  br label %__nv_sqrtf.exit16, !dbg !42

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !42
  br label %__nv_sqrtf.exit16, !dbg !42

154:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %157, label %155, !dbg !42

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !42
  br label %__nv_sqrtf.exit16, !dbg !42

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !42
  br label %__nv_sqrtf.exit16, !dbg !42

__nv_sqrtf.exit16:                                ; preds = %150, %152, %155, %157
  %.0.i14 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !42
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i17 = icmp eq i32 %159, 0, !dbg !42
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i20 = icmp eq i32 %160, 0, !dbg !42
  br i1 %.not.i17, label %166, label %161, !dbg !42

161:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %164, label %162, !dbg !42

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !42
  br label %__nv_sqrtf.exit21, !dbg !42

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !42
  br label %__nv_sqrtf.exit21, !dbg !42

166:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %169, label %167, !dbg !42

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !42
  br label %__nv_sqrtf.exit21, !dbg !42

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !42
  br label %__nv_sqrtf.exit21, !dbg !42

__nv_sqrtf.exit21:                                ; preds = %162, %164, %167, %169
  %.0.i19 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !42
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i22 = icmp eq i32 %171, 0, !dbg !42
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i25 = icmp eq i32 %172, 0, !dbg !42
  br i1 %.not.i22, label %178, label %173, !dbg !42

173:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %176, label %174, !dbg !42

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !42
  br label %__nv_sqrtf.exit26, !dbg !42

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !42
  br label %__nv_sqrtf.exit26, !dbg !42

178:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %181, label %179, !dbg !42

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !42
  br label %__nv_sqrtf.exit26, !dbg !42

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !42
  br label %__nv_sqrtf.exit26, !dbg !42

__nv_sqrtf.exit26:                                ; preds = %174, %176, %179, %181
  %.0.i24 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !42
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i27 = icmp eq i32 %183, 0, !dbg !42
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i30 = icmp eq i32 %184, 0, !dbg !42
  br i1 %.not.i27, label %190, label %185, !dbg !42

185:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %188, label %186, !dbg !42

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit31, !dbg !42

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit31, !dbg !42

190:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %193, label %191, !dbg !42

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit31, !dbg !42

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit31, !dbg !42

__nv_sqrtf.exit31:                                ; preds = %186, %188, %191, %193
  %.0.i29 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !42
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i32 = icmp eq i32 %195, 0, !dbg !42
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i35 = icmp eq i32 %196, 0, !dbg !42
  br i1 %.not.i32, label %202, label %197, !dbg !42

197:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %200, label %198, !dbg !42

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit36, !dbg !42

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit36, !dbg !42

202:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %205, label %203, !dbg !42

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit36, !dbg !42

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit36, !dbg !42

__nv_sqrtf.exit36:                                ; preds = %198, %200, %203, %205
  %.0.i34 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !42
  %207 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !36
  %208 = bitcast i32 %207 to float, !dbg !36
  %209 = bitcast i32 %84 to float, !dbg !38
  %210 = fsub float %208, %209, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !36
  %212 = bitcast i32 %211 to float, !dbg !36
  %213 = bitcast i32 %83 to float, !dbg !38
  %214 = fsub float %212, %213, !dbg !43
  %215 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !36
  %216 = bitcast i32 %215 to float, !dbg !36
  %217 = bitcast i32 %82 to float, !dbg !38
  %218 = fsub float %216, %217, !dbg !43
  %219 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !36
  %220 = bitcast i32 %219 to float, !dbg !36
  %221 = bitcast i32 %81 to float, !dbg !38
  %222 = fsub float %220, %221, !dbg !43
  %223 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !36
  %224 = bitcast i32 %223 to float, !dbg !36
  %225 = bitcast i32 %80 to float, !dbg !38
  %226 = fsub float %224, %225, !dbg !43
  %227 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !36
  %228 = bitcast i32 %227 to float, !dbg !36
  %229 = bitcast i32 %79 to float, !dbg !38
  %230 = fsub float %228, %229, !dbg !43
  %231 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !36
  %232 = bitcast i32 %231 to float, !dbg !36
  %233 = bitcast i32 %78 to float, !dbg !38
  %234 = fsub float %232, %233, !dbg !43
  %235 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !36
  %236 = bitcast i32 %235 to float, !dbg !36
  %237 = bitcast i32 %77 to float, !dbg !38
  %238 = fsub float %236, %237, !dbg !43
  %239 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %240 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %241 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %242 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %243 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !30
  %245 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !30
  %246 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !30
  %247 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %248 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %249 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %250 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %251 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %252 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %253 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %254 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !44
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !44
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !44
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !44
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !44
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !44
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !44
  %263 = fmul float %238, %255, !dbg !45
  %264 = fmul float %234, %256, !dbg !45
  %265 = fmul float %230, %257, !dbg !45
  %266 = fmul float %226, %258, !dbg !45
  %267 = fmul float %222, %259, !dbg !45
  %268 = fmul float %218, %260, !dbg !45
  %269 = fmul float %214, %261, !dbg !45
  %270 = fmul float %210, %262, !dbg !45
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !46
  %272 = getelementptr float, ptr addrspace(1) %5, i64 %75, !dbg !46
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %59, i32 0, i1 %59) #3, !dbg !47
  %274 = bitcast i32 %273 to float, !dbg !47
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %59, i32 0, i1 %59) #3, !dbg !47
  %276 = bitcast i32 %275 to float, !dbg !47
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %59, i32 0, i1 %59) #3, !dbg !47
  %278 = bitcast i32 %277 to float, !dbg !47
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %59, i32 0, i1 %59) #3, !dbg !47
  %280 = bitcast i32 %279 to float, !dbg !47
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %60, i32 0, i1 %60) #3, !dbg !47
  %282 = bitcast i32 %281 to float, !dbg !47
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %60, i32 0, i1 %60) #3, !dbg !47
  %284 = bitcast i32 %283 to float, !dbg !47
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %60, i32 0, i1 %60) #3, !dbg !47
  %286 = bitcast i32 %285 to float, !dbg !47
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %60, i32 0, i1 %60) #3, !dbg !47
  %288 = bitcast i32 %287 to float, !dbg !47
  %289 = fmul float %263, %274, !dbg !48
  %290 = fmul float %264, %276, !dbg !48
  %291 = fmul float %265, %278, !dbg !48
  %292 = fmul float %266, %280, !dbg !48
  %293 = fmul float %267, %282, !dbg !48
  %294 = fmul float %268, %284, !dbg !48
  %295 = fmul float %269, %286, !dbg !48
  %296 = fmul float %270, %288, !dbg !48
  %297 = getelementptr float, ptr addrspace(1) %6, i64 %73, !dbg !49
  %298 = getelementptr float, ptr addrspace(1) %6, i64 %75, !dbg !49
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %59, i32 0, i1 %59) #3, !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %59, i32 0, i1 %59) #3, !dbg !50
  %302 = bitcast i32 %301 to float, !dbg !50
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %59, i32 0, i1 %59) #3, !dbg !50
  %304 = bitcast i32 %303 to float, !dbg !50
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %59, i32 0, i1 %59) #3, !dbg !50
  %306 = bitcast i32 %305 to float, !dbg !50
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %60, i32 0, i1 %60) #3, !dbg !50
  %308 = bitcast i32 %307 to float, !dbg !50
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %60, i32 0, i1 %60) #3, !dbg !50
  %310 = bitcast i32 %309 to float, !dbg !50
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %60, i32 0, i1 %60) #3, !dbg !50
  %312 = bitcast i32 %311 to float, !dbg !50
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %60, i32 0, i1 %60) #3, !dbg !50
  %314 = bitcast i32 %313 to float, !dbg !50
  %315 = fadd float %289, %300, !dbg !51
  %316 = fadd float %290, %302, !dbg !51
  %317 = fadd float %291, %304, !dbg !51
  %318 = fadd float %292, %306, !dbg !51
  %319 = fadd float %293, %308, !dbg !51
  %320 = fadd float %294, %310, !dbg !51
  %321 = fadd float %295, %312, !dbg !51
  %322 = fadd float %296, %314, !dbg !51
  %323 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !52
  %324 = getelementptr float, ptr addrspace(1) %7, i64 %69, !dbg !52
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %323, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !53
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !53
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !53
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !53
  %330 = bitcast i32 %326 to float, !dbg !53
  %331 = bitcast i32 %327 to float, !dbg !53
  %332 = bitcast i32 %328 to float, !dbg !53
  %333 = bitcast i32 %329 to float, !dbg !53
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %324, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #3, !dbg !53
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !53
  %336 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !53
  %337 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !53
  %338 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !53
  %339 = bitcast i32 %335 to float, !dbg !53
  %340 = bitcast i32 %336 to float, !dbg !53
  %341 = bitcast i32 %337 to float, !dbg !53
  %342 = bitcast i32 %338 to float, !dbg !53
  %343 = fadd float %315, %330, !dbg !54
  %344 = fadd float %316, %331, !dbg !54
  %345 = fadd float %317, %332, !dbg !54
  %346 = fadd float %318, %333, !dbg !54
  %347 = fadd float %319, %339, !dbg !54
  %348 = fadd float %320, %340, !dbg !54
  %349 = fadd float %321, %341, !dbg !54
  %350 = fadd float %322, %342, !dbg !54
  %351 = sext i32 %16 to i64, !dbg !55
  %352 = getelementptr float, ptr addrspace(1) %8, i64 %351, !dbg !55
  %353 = sext i32 %17 to i64, !dbg !55
  %354 = getelementptr float, ptr addrspace(1) %8, i64 %353, !dbg !55
  %355 = bitcast float %343 to i32, !dbg !56
  %356 = select i1 %59, i32 %355, i32 0, !dbg !57
  %357 = select i1 %40, i32 %246, i32 %356, !dbg !58
  %358 = select i1 %25, i32 %254, i32 %357, !dbg !59
  %359 = bitcast float %344 to i32, !dbg !56
  %360 = select i1 %59, i32 %359, i32 0, !dbg !57
  %361 = select i1 %40, i32 %245, i32 %360, !dbg !58
  %362 = select i1 %25, i32 %253, i32 %361, !dbg !59
  %363 = bitcast float %345 to i32, !dbg !56
  %364 = select i1 %59, i32 %363, i32 0, !dbg !57
  %365 = select i1 %40, i32 %244, i32 %364, !dbg !58
  %366 = select i1 %25, i32 %252, i32 %365, !dbg !59
  %367 = bitcast float %346 to i32, !dbg !56
  %368 = select i1 %59, i32 %367, i32 0, !dbg !57
  %369 = select i1 %40, i32 %243, i32 %368, !dbg !58
  %370 = select i1 %25, i32 %251, i32 %369, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %358, i32 %362, i32 %366, i32 %370, ptr addrspace(1) %352, i1 true) #3, !dbg !56
  %371 = bitcast float %347 to i32, !dbg !56
  %372 = select i1 %60, i32 %371, i32 0, !dbg !57
  %373 = select i1 %42, i32 %242, i32 %372, !dbg !58
  %374 = select i1 %26, i32 %250, i32 %373, !dbg !59
  %375 = bitcast float %348 to i32, !dbg !56
  %376 = select i1 %60, i32 %375, i32 0, !dbg !57
  %377 = select i1 %42, i32 %241, i32 %376, !dbg !58
  %378 = select i1 %26, i32 %249, i32 %377, !dbg !59
  %379 = bitcast float %349 to i32, !dbg !56
  %380 = select i1 %60, i32 %379, i32 0, !dbg !57
  %381 = select i1 %42, i32 %240, i32 %380, !dbg !58
  %382 = select i1 %26, i32 %248, i32 %381, !dbg !59
  %383 = bitcast float %350 to i32, !dbg !56
  %384 = select i1 %60, i32 %383, i32 0, !dbg !57
  %385 = select i1 %42, i32 %239, i32 %384, !dbg !58
  %386 = select i1 %26, i32 %247, i32 %385, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %374, i32 %378, i32 %382, i32 %386, ptr addrspace(1) %354, i1 true) #3, !dbg !56
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqe3zhh5uswgkvvmddhrxuxwlnkkfqmhzzw5ln3bwq77ge4n4qi7.py", directory: "inductor_cache/qe")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 41, scope: !7)
!26 = !DILocation(line: 38, column: 61, scope: !7)
!27 = !DILocation(line: 38, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 55, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 66, scope: !7)
!31 = !DILocation(line: 39, column: 20, scope: !7)
!32 = !DILocation(line: 42, column: 50, scope: !7)
!33 = !DILocation(line: 42, column: 41, scope: !7)
!34 = !DILocation(line: 42, column: 56, scope: !7)
!35 = !DILocation(line: 42, column: 31, scope: !7)
!36 = !DILocation(line: 42, column: 67, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 45, scope: !7)
!39 = !DILocation(line: 45, column: 31, scope: !7)
!40 = !DILocation(line: 45, column: 45, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 27, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 45, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 31, scope: !7)
!53 = !DILocation(line: 58, column: 67, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 25, scope: !7)
!56 = !DILocation(line: 64, column: 37, scope: !7)
!57 = !DILocation(line: 61, column: 35, scope: !7)
!58 = !DILocation(line: 62, column: 34, scope: !7)
!59 = !DILocation(line: 63, column: 33, scope: !7)
!60 = !DILocation(line: 64, column: 4, scope: !7)
