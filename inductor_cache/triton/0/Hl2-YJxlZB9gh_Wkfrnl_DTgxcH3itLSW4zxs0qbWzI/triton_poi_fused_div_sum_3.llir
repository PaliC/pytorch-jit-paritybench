; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_div_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = srem i32 %9, 16, !dbg !15
  %12 = sext i32 %9 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %13, i1 %10) #1, !dbg !17
  %15 = extractvalue { i32, i32 } %14, 0, !dbg !17
  %16 = extractvalue { i32, i32 } %14, 1, !dbg !17
  %17 = bitcast i32 %15 to float, !dbg !17
  %18 = bitcast i32 %16 to float, !dbg !17
  %19 = sext i32 %11 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %10) #1, !dbg !19
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = getelementptr i8, ptr addrspace(1) %20, i64 64, !dbg !20
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %10) #1, !dbg !21
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !21
  %30 = bitcast i32 %28 to float, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = getelementptr i8, ptr addrspace(1) %20, i64 128, !dbg !22
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %10) #1, !dbg !23
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !23
  %36 = bitcast i32 %34 to float, !dbg !23
  %37 = bitcast i32 %35 to float, !dbg !23
  %38 = getelementptr i8, ptr addrspace(1) %20, i64 192, !dbg !24
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %10) #1, !dbg !25
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !25
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = bitcast i32 %41 to float, !dbg !25
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %17, float %17) #1, !dbg !26
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %18, float %18) #1, !dbg !26
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %24, float %24) #1, !dbg !27
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %25, float %25) #1, !dbg !27
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %30) #1, !dbg !28
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %31) #1, !dbg !28
  %50 = fadd float %46, %48, !dbg !29
  %51 = fadd float %47, %49, !dbg !29
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %36) #1, !dbg !30
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float %37) #1, !dbg !30
  %54 = fadd float %50, %52, !dbg !31
  %55 = fadd float %51, %53, !dbg !31
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %42) #1, !dbg !32
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %43) #1, !dbg !32
  %58 = fadd float %54, %56, !dbg !33
  %59 = fadd float %55, %57, !dbg !33
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %58) #1, !dbg !34
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %59) #1, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !35
  %63 = bitcast float %60 to i32, !dbg !36
  %64 = bitcast float %61 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %63, i32 %64, ptr addrspace(1) %62, i1 %10) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdo3qwjatsq2p7yeep5tyhweiwaiblkuz3mfejf4hxmr5goybc2v.py", directory: "inductor_cache/do")
!4 = !{ptr @triton_poi_fused_div_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sum_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sum_3", linkageName: "triton_poi_fused_div_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 40, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 41, scope: !7)
!26 = !DILocation(line: 31, column: 18, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 20, scope: !7)
!33 = !DILocation(line: 38, column: 19, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 25, scope: !7)
!36 = !DILocation(line: 40, column: 37, scope: !7)
!37 = !DILocation(line: 40, column: 4, scope: !7)
