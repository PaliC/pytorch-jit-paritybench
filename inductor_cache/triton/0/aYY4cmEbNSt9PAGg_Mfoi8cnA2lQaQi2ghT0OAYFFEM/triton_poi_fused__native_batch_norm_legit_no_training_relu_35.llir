; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 384, !dbg !11
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %11 = shl i32 %10, 10, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 2, !dbg !14
  %14 = and i32 %13, 508, !dbg !14
  %15 = or disjoint i32 %14, 1, !dbg !14
  %16 = or disjoint i32 %14, 2, !dbg !14
  %17 = or disjoint i32 %14, 3, !dbg !14
  %18 = or disjoint i32 %14, 513, !dbg !14
  %19 = or disjoint i32 %14, 514, !dbg !14
  %20 = or disjoint i32 %14, 515, !dbg !14
  %21 = or disjoint i32 %11, %14, !dbg !15
  %22 = or disjoint i32 %11, %15, !dbg !15
  %23 = or disjoint i32 %11, %16, !dbg !15
  %24 = or disjoint i32 %11, %17, !dbg !15
  %25 = or disjoint i32 %21, 512, !dbg !15
  %26 = or disjoint i32 %11, %18, !dbg !15
  %27 = or disjoint i32 %11, %19, !dbg !15
  %28 = or disjoint i32 %11, %20, !dbg !15
  %29 = icmp slt i32 %21, 900, !dbg !16
  %30 = icmp slt i32 %25, 900, !dbg !16
  %.frozen = freeze i32 %8, !dbg !17
  %31 = sdiv i32 %.frozen, 96, !dbg !17
  %32 = mul i32 %31, 96, !dbg !18
  %.decomposed = sub i32 %.frozen, %32, !dbg !18
  %33 = mul i32 %21, 96, !dbg !19
  %34 = mul i32 %22, 96, !dbg !19
  %35 = mul i32 %23, 96, !dbg !19
  %36 = mul i32 %24, 96, !dbg !19
  %37 = mul i32 %25, 96, !dbg !19
  %38 = mul i32 %26, 96, !dbg !19
  %39 = mul i32 %27, 96, !dbg !19
  %40 = mul i32 %28, 96, !dbg !19
  %41 = mul i32 %31, 86400, !dbg !20
  %42 = add i32 %41, %.decomposed, !dbg !21
  %43 = add i32 %42, %33, !dbg !22
  %44 = add i32 %42, %34, !dbg !22
  %45 = add i32 %42, %35, !dbg !22
  %46 = add i32 %42, %36, !dbg !22
  %47 = add i32 %42, %37, !dbg !22
  %48 = add i32 %42, %38, !dbg !22
  %49 = add i32 %42, %39, !dbg !22
  %50 = add i32 %42, %40, !dbg !22
  %51 = sext i32 %43 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %44 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %45 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %46 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %47 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %48 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %49 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %50 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = and i1 %9, %29, !dbg !24
  %68 = and i1 %30, %9, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %67) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %67) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %67) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %67) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %68) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %68) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %68) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %68) #3, !dbg !25
  %77 = sext i32 %.decomposed to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %9) #3, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %9) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %9) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %9) #3, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %9) #3, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %9) #3, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %9) #3, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %9) #3, !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %9) #3, !dbg !31
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %9) #3, !dbg !31
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %9) #3, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %9) #3, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !32
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %9) #3, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %9) #3, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %9) #3, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %9) #3, !dbg !33
  %99 = fadd float %88, 0x3F50624DE0000000, !dbg !34
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %106, 0, !dbg !35
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !35
  br i1 %.not.i11, label %113, label %108, !dbg !35

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %111, label %109, !dbg !35

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %116, label %114, !dbg !35

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !35
  %118 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !25
  %119 = insertelement <8 x i32> %118, i32 %75, i64 1, !dbg !25
  %120 = insertelement <8 x i32> %119, i32 %74, i64 2, !dbg !25
  %121 = insertelement <8 x i32> %120, i32 %73, i64 3, !dbg !25
  %122 = insertelement <8 x i32> %121, i32 %72, i64 4, !dbg !25
  %123 = insertelement <8 x i32> %122, i32 %71, i64 5, !dbg !25
  %124 = insertelement <8 x i32> %123, i32 %70, i64 6, !dbg !25
  %125 = insertelement <8 x i32> %124, i32 %69, i64 7, !dbg !25
  %126 = bitcast <8 x i32> %125 to <8 x float>, !dbg !25
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %128 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !37
  %129 = bitcast <8 x i32> %128 to <8 x float>, !dbg !37
  %130 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %131 = fsub <8 x float> %126, %130, !dbg !37
  %132 = insertelement <8 x float> poison, float %127, i64 0, !dbg !38
  %133 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  %134 = fmul <8 x float> %131, %133, !dbg !38
  %135 = insertelement <8 x i32> poison, i32 %93, i64 0, !dbg !39
  %136 = bitcast <8 x i32> %135 to <8 x float>, !dbg !39
  %137 = shufflevector <8 x float> %136, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !39
  %138 = fmul <8 x float> %134, %137, !dbg !39
  %139 = insertelement <8 x i32> poison, i32 %98, i64 0, !dbg !40
  %140 = bitcast <8 x i32> %139 to <8 x float>, !dbg !40
  %141 = shufflevector <8 x float> %140, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  %142 = fadd <8 x float> %138, %141, !dbg !40
  %143 = fcmp olt <8 x float> %142, zeroinitializer, !dbg !41
  %144 = extractelement <8 x i1> %143, i64 7, !dbg !45
  %145 = extractelement <8 x i1> %143, i64 6, !dbg !45
  %146 = extractelement <8 x i1> %143, i64 5, !dbg !45
  %147 = extractelement <8 x i1> %143, i64 4, !dbg !45
  %148 = extractelement <8 x i1> %143, i64 3, !dbg !45
  %149 = extractelement <8 x i1> %143, i64 2, !dbg !45
  %150 = extractelement <8 x i1> %143, i64 1, !dbg !45
  %151 = extractelement <8 x i1> %143, i64 0, !dbg !45
  %152 = mul nsw i32 %.decomposed, 900, !dbg !46
  %153 = mul i32 %31, 691200, !dbg !47
  %154 = add i32 %153, %152, !dbg !48
  %155 = add i32 %154, %21, !dbg !49
  %156 = add i32 %154, %25, !dbg !49
  %157 = sext i32 %155 to i64, !dbg !50
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !50
  %159 = sext i32 %156 to i64, !dbg !50
  %160 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !50
  %bc = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %161 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %162 = select i1 %144, i32 0, i32 %161, !dbg !45
  %bc16 = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %163 = extractelement <8 x i32> %bc16, i64 6, !dbg !51
  %164 = select i1 %145, i32 0, i32 %163, !dbg !45
  %bc17 = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %165 = extractelement <8 x i32> %bc17, i64 5, !dbg !51
  %166 = select i1 %146, i32 0, i32 %165, !dbg !45
  %bc18 = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %167 = extractelement <8 x i32> %bc18, i64 4, !dbg !51
  %168 = select i1 %147, i32 0, i32 %167, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %164, i32 %166, i32 %168, ptr addrspace(1) %158, i1 %67) #3, !dbg !51
  %bc19 = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %169 = extractelement <8 x i32> %bc19, i64 3, !dbg !51
  %170 = select i1 %148, i32 0, i32 %169, !dbg !45
  %bc20 = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %171 = extractelement <8 x i32> %bc20, i64 2, !dbg !51
  %172 = select i1 %149, i32 0, i32 %171, !dbg !45
  %bc21 = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %173 = extractelement <8 x i32> %bc21, i64 1, !dbg !51
  %174 = select i1 %150, i32 0, i32 %173, !dbg !45
  %bc22 = bitcast <8 x float> %142 to <8 x i32>, !dbg !51
  %175 = extractelement <8 x i32> %bc22, i64 0, !dbg !51
  %176 = select i1 %151, i32 0, i32 %175, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %172, i32 %174, i32 %176, ptr addrspace(1) %160, i1 %68) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp4yk753sv77w2geugtptfe2k7rbtph2ule3zdn72od7ic3k2jud.py", directory: "inductor_cache/p4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 38, scope: !7)
!20 = !DILocation(line: 31, column: 49, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 43, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 62, scope: !7)
!25 = !DILocation(line: 31, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 26, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 48, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 34, scope: !7)
!47 = !DILocation(line: 49, column: 46, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 39, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 58, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
