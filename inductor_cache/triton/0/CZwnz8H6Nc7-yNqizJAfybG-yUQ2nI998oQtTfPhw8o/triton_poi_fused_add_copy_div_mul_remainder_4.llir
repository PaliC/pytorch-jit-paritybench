; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_copy_div_mul_remainder_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 192, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = srem i32 %13, 3, !dbg !16
  %15 = mul i32 %13, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = sdiv i32 %11, 48, !dbg !18
  %17 = mul nsw i32 %16, 48, !dbg !19
  %18 = add nsw i32 %17, %.decomposed, !dbg !20
  %19 = sext i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %12) #2, !dbg !22
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !22
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !22
  %24 = bitcast i32 %22 to float, !dbg !22
  %25 = bitcast i32 %23 to float, !dbg !22
  %26 = sext i32 %16 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %12) #2, !dbg !24
  %29 = bitcast i32 %28 to float, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %12) #2, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = sext i32 %18 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %12) #2, !dbg !26
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %38 = bitcast i32 %36 to float, !dbg !26
  %39 = bitcast i32 %37 to float, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #2, !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #2, !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = sext i32 %11 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %12) #2, !dbg !30
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %50 = bitcast i32 %48 to float, !dbg !30
  %51 = bitcast i32 %49 to float, !dbg !30
  %52 = icmp eq i32 %14, 1, !dbg !31
  %53 = fmul float %29, 2.550000e+02, !dbg !32
  %54 = fmul float %31, 2.550000e+02, !dbg !32
  %55 = fmul float %53, 0x3F66C16C20000000, !dbg !33
  %56 = fmul float %54, 0x3F66C16C20000000, !dbg !33
  %57 = fadd float %55, %24, !dbg !34
  %58 = fadd float %56, %25, !dbg !34
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !35
  %.not.i = icmp eq i32 %59, 0, !dbg !35
  %60 = tail call float @llvm.nvvm.floor.ftz.f(float %57), !dbg !35
  %61 = tail call float @llvm.nvvm.floor.f(float %57), !dbg !35
  %.0.i = select i1 %.not.i, float %61, float %60, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !35
  %.not.i1 = icmp eq i32 %62, 0, !dbg !35
  %63 = tail call float @llvm.nvvm.floor.ftz.f(float %58), !dbg !35
  %64 = tail call float @llvm.nvvm.floor.f(float %58), !dbg !35
  %.0.i2 = select i1 %.not.i1, float %64, float %63, !dbg !35
  %65 = fsub float %57, %.0.i, !dbg !35
  %66 = fsub float %58, %.0.i2, !dbg !35
  %67 = fcmp une float %65, 0.000000e+00, !dbg !36
  %68 = fcmp une float %66, 0.000000e+00, !dbg !36
  %69 = bitcast float %65 to i32, !dbg !37
  %70 = bitcast float %66 to i32, !dbg !37
  %71 = icmp slt i32 %69, 0, !dbg !38
  %72 = icmp slt i32 %70, 0, !dbg !38
  %73 = and i1 %67, %71, !dbg !39
  %74 = and i1 %68, %72, !dbg !39
  %75 = fadd float %65, 1.000000e+00, !dbg !40
  %76 = fadd float %66, 1.000000e+00, !dbg !40
  %77 = select i1 %73, float %75, float %65, !dbg !41
  %78 = select i1 %74, float %76, float %66, !dbg !41
  %79 = fmul float %38, %42, !dbg !42
  %80 = fmul float %39, %44, !dbg !42
  %81 = icmp eq i32 %14, 0, !dbg !43
  %82 = select i1 %81, float %77, float %50, !dbg !44
  %83 = select i1 %81, float %78, float %51, !dbg !44
  %84 = select i1 %52, float %79, float %82, !dbg !45
  %85 = select i1 %52, float %80, float %83, !dbg !45
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !46
  %87 = bitcast float %84 to i32, !dbg !47
  %88 = bitcast float %85 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %87, i32 %88, ptr addrspace(1) %86, i1 %12) #2, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "camsnhk6isxhygljpapc73c7wlclfy6kluytyyrpzk6hnwgt33kt.py", directory: "inductor_cache/am")
!4 = !{ptr @triton_poi_fused_add_copy_div_mul_remainder_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_copy_div_mul_remainder_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_copy_div_mul_remainder_4", linkageName: "triton_poi_fused_add_copy_div_mul_remainder_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 49, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 19, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 21, scope: !7)
!37 = !DILocation(line: 48, column: 31, scope: !7)
!38 = !DILocation(line: 48, column: 41, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 35, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 0, scope: !7)
!45 = !DILocation(line: 60, column: 34, scope: !7)
!46 = !DILocation(line: 61, column: 25, scope: !7)
!47 = !DILocation(line: 61, column: 37, scope: !7)
!48 = !DILocation(line: 61, column: 4, scope: !7)
