; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_cat_mean_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %10, 1, !dbg !12
  %13 = and i32 %12, 6, !dbg !12
  %14 = and i32 %10, 7, !dbg !12
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 2048, !dbg !14
  %18 = icmp slt i32 %16, 2048, !dbg !14
  %19 = lshr i32 %10, 5, !dbg !15
  %20 = lshr i32 %10, 2, !dbg !15
  %21 = and i32 %20, 15, !dbg !15
  %22 = icmp samesign ult i32 %21, 9, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen, 512, !dbg !17
  %24 = mul i32 %23, 512, !dbg !18
  %.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = icmp slt i32 %.decomposed, 256, !dbg !19
  %26 = shl nuw nsw i32 %21, 8, !dbg !20
  %27 = mul i32 %23, 2304, !dbg !21
  %28 = add i32 %27, %26, !dbg !22
  %29 = add i32 %28, %.decomposed, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %32 = and i1 %22, %25, !dbg !25
  %33 = and i1 %17, %32, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = sext i32 %.decomposed to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !28
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !29
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !29
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !29
  %42 = icmp sgt i32 %.decomposed, 255, !dbg !30
  %43 = add nsw i32 %.decomposed, -256, !dbg !31
  %44 = add i32 %28, %43, !dbg !32
  %45 = sext i32 %44 to i64, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !33
  %47 = and i1 %22, %42, !dbg !34
  %48 = and i1 %17, %47, !dbg !35
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !36
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !36
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !36
  %52 = sext i32 %43 to i64, !dbg !37
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !37
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !38
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !38
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !38
  %57 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !36
  %58 = insertelement <4 x i32> %57, i32 %50, i64 1, !dbg !36
  %59 = insertelement <4 x i32> %58, i32 %36, i64 2, !dbg !36
  %60 = insertelement <4 x i32> %59, i32 %35, i64 3, !dbg !36
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !36
  %62 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !38
  %63 = insertelement <4 x i32> %62, i32 %55, i64 1, !dbg !38
  %64 = insertelement <4 x i32> %63, i32 %41, i64 2, !dbg !38
  %65 = insertelement <4 x i32> %64, i32 %40, i64 3, !dbg !38
  %66 = bitcast <4 x i32> %65 to <4 x float>, !dbg !38
  %67 = fadd <4 x float> %61, %66, !dbg !39
  %68 = fcmp olt <4 x float> %67, zeroinitializer, !dbg !40
  %69 = extractelement <4 x i1> %68, i64 3, !dbg !44
  %70 = extractelement <4 x float> %67, i64 3, !dbg !44
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !44
  %72 = extractelement <4 x i1> %68, i64 2, !dbg !44
  %73 = extractelement <4 x float> %67, i64 2, !dbg !44
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !44
  %75 = extractelement <4 x i1> %68, i64 1, !dbg !46
  %76 = extractelement <4 x float> %67, i64 1, !dbg !46
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !46
  %78 = extractelement <4 x i1> %68, i64 0, !dbg !46
  %79 = extractelement <4 x float> %67, i64 0, !dbg !46
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !46
  %81 = select i1 %25, float %71, float %77, !dbg !47
  %82 = select i1 %25, float %74, float %80, !dbg !47
  %83 = and i1 %22, %17, !dbg !48
  %84 = select i1 %83, float %81, float 0.000000e+00, !dbg !49
  %85 = select i1 %83, float %82, float 0.000000e+00, !dbg !49
  %86 = bitcast float %84 to i32, !dbg !50
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !50
  %88 = bitcast i32 %87 to float, !dbg !50
  %89 = fadd float %84, %88, !dbg !54
  %90 = bitcast float %89 to i32, !dbg !50
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !50
  %92 = bitcast i32 %91 to float, !dbg !50
  %93 = fadd float %89, %92, !dbg !54
  %94 = bitcast float %93 to i32, !dbg !50
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !50
  %96 = bitcast i32 %95 to float, !dbg !50
  %97 = fadd float %93, %96, !dbg !54
  %98 = bitcast float %85 to i32, !dbg !50
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !50
  %100 = bitcast i32 %99 to float, !dbg !50
  %101 = fadd float %85, %100, !dbg !54
  %102 = bitcast float %101 to i32, !dbg !50
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !50
  %104 = bitcast i32 %103 to float, !dbg !50
  %105 = fadd float %101, %104, !dbg !54
  %106 = bitcast float %105 to i32, !dbg !50
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !50
  %108 = bitcast i32 %107 to float, !dbg !50
  %109 = fadd float %105, %108, !dbg !54
  %110 = icmp samesign ult i32 %11, 4, !dbg !50
  %111 = and i32 %19, 1, !dbg !50
  %112 = shl nuw nsw i32 %13, 1, !dbg !50
  %113 = or disjoint i32 %112, %111, !dbg !50
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !50
  %115 = bitcast float %97 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %110) #3, !dbg !50
  %116 = or disjoint i32 %112, 2, !dbg !50
  %117 = or disjoint i32 %116, %111, !dbg !50
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !50
  %119 = bitcast float %109 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %110) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %120 = icmp slt i32 %10, 16, !dbg !50
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !50
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #3, !dbg !50
  %123 = bitcast i32 %122 to float, !dbg !50
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !50
  %125 = bitcast i32 %124 to float, !dbg !50
  %126 = fadd float %123, %125, !dbg !54
  %127 = and i32 %10, 1, !dbg !50
  %128 = icmp eq i32 %127, 0, !dbg !50
  %129 = and i1 %120, %128, !dbg !50
  %130 = bitcast float %126 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %130, i1 %129) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !50
  %132 = load i32, ptr addrspace(3) %131, align 16, !dbg !50
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !50
  %134 = load i32, ptr addrspace(3) %133, align 8, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !56
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %135, i32 %132, i32 %134, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !56
  %137 = load float, ptr addrspace(3) %136, align 4, !dbg !56
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 9.000000e+00) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %139 = sext i32 %16 to i64, !dbg !58
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !58
  %141 = lshr i32 %11, 3, !dbg !59
  %142 = shl nuw nsw i32 %111, 2, !dbg !59
  %143 = or disjoint i32 %142, %141, !dbg !59
  %144 = icmp eq i32 %143, 0, !dbg !59
  %145 = bitcast float %138 to i32, !dbg !59
  %146 = and i1 %144, %18, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %140, i1 %146) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py", directory: "inductor_cache/5o")
!4 = !{ptr @triton_per_fused_cat_mean_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_mean_27, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_mean_27", linkageName: "triton_per_fused_cat_mean_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 37, column: 18, scope: !7)
!20 = !DILocation(line: 38, column: 34, scope: !7)
!21 = !DILocation(line: 38, column: 44, scope: !7)
!22 = !DILocation(line: 38, column: 39, scope: !7)
!23 = !DILocation(line: 38, column: 50, scope: !7)
!24 = !DILocation(line: 38, column: 30, scope: !7)
!25 = !DILocation(line: 38, column: 64, scope: !7)
!26 = !DILocation(line: 38, column: 71, scope: !7)
!27 = !DILocation(line: 38, column: 56, scope: !7)
!28 = !DILocation(line: 39, column: 30, scope: !7)
!29 = !DILocation(line: 39, column: 70, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 48, column: 60, scope: !7)
!32 = !DILocation(line: 48, column: 51, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 74, scope: !7)
!35 = !DILocation(line: 48, column: 82, scope: !7)
!36 = !DILocation(line: 48, column: 66, scope: !7)
!37 = !DILocation(line: 49, column: 31, scope: !7)
!38 = !DILocation(line: 49, column: 80, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 52, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 42, column: 40, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 57, column: 29, scope: !7)
!49 = !DILocation(line: 57, column: 43, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 58, column: 26, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
!58 = !DILocation(line: 62, column: 28, scope: !7)
!59 = !DILocation(line: 62, column: 40, scope: !7)
!60 = !DILocation(line: 62, column: 4, scope: !7)
