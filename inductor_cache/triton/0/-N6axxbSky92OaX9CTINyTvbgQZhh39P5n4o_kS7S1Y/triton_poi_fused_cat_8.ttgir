#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":19:0), %arg1: !tt.ptr<f32> loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":19:0), %arg2: !tt.ptr<f32> loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<-1.000000e+04> : tensor<256xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<25> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<-2> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<2> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<256xi64, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<256xi64, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<-1> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<256xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked1> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<256xi32, #blocked1> loc(#loc5)
    %5 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %6 = arith.addi %4, %2 : tensor<256xi32, #blocked1> loc(#loc5)
    %7 = arith.addi %5, %3 : tensor<256xi32, #blocked> loc(#loc5)
    %8 = arith.cmpi slt, %6, %cst_8 : tensor<256xi32, #blocked1> loc(#loc6)
    %9 = arith.cmpi slt, %7, %cst : tensor<256xi32, #blocked> loc(#loc6)
    %10 = arith.divsi %6, %cst_7 : tensor<256xi32, #blocked1> loc(#loc7)
    %11 = arith.remsi %10, %cst_7 : tensor<256xi32, #blocked1> loc(#loc8)
    %12 = arith.remsi %6, %cst_7 : tensor<256xi32, #blocked1> loc(#loc9)
    %13 = arith.addi %11, %cst_6 : tensor<256xi32, #blocked1> loc(#loc10)
    %14 = arith.extsi %13 : tensor<256xi32, #blocked1> to tensor<256xi64, #blocked1> loc(#loc11)
    %15 = arith.cmpi sge, %14, %cst_5 : tensor<256xi64, #blocked1> loc(#loc11)
    %16 = arith.cmpi slt, %14, %cst_4 : tensor<256xi64, #blocked1> loc(#loc12)
    %17 = arith.addi %12, %cst_3 : tensor<256xi32, #blocked1> loc(#loc13)
    %18 = arith.extsi %17 : tensor<256xi32, #blocked1> to tensor<256xi64, #blocked1> loc(#loc14)
    %19 = arith.cmpi sge, %18, %cst_5 : tensor<256xi64, #blocked1> loc(#loc14)
    %20 = arith.cmpi slt, %18, %cst_4 : tensor<256xi64, #blocked1> loc(#loc15)
    %21 = arith.andi %15, %16 : tensor<256xi1, #blocked1> loc(#loc16)
    %22 = arith.andi %21, %19 : tensor<256xi1, #blocked1> loc(#loc17)
    %23 = arith.andi %22, %20 : tensor<256xi1, #blocked1> loc(#loc18)
    %24 = arith.addi %6, %cst_2 : tensor<256xi32, #blocked1> loc(#loc19)
    %25 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %26 = tt.addptr %25, %24 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc20)
    %27 = arith.andi %23, %8 : tensor<256xi1, #blocked1> loc(#loc21)
    %28 = tt.load %26, %27, %cst_0 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %29 = arith.extsi %11 : tensor<256xi32, #blocked1> to tensor<256xi64, #blocked1> loc(#loc23)
    %30 = arith.cmpi sge, %29, %cst_5 : tensor<256xi64, #blocked1> loc(#loc23)
    %31 = arith.cmpi slt, %29, %cst_4 : tensor<256xi64, #blocked1> loc(#loc24)
    %32 = arith.addi %12, %cst_2 : tensor<256xi32, #blocked1> loc(#loc25)
    %33 = arith.extsi %32 : tensor<256xi32, #blocked1> to tensor<256xi64, #blocked1> loc(#loc26)
    %34 = arith.cmpi sge, %33, %cst_5 : tensor<256xi64, #blocked1> loc(#loc26)
    %35 = arith.cmpi slt, %33, %cst_4 : tensor<256xi64, #blocked1> loc(#loc27)
    %36 = arith.andi %30, %31 : tensor<256xi1, #blocked1> loc(#loc28)
    %37 = arith.andi %36, %34 : tensor<256xi1, #blocked1> loc(#loc29)
    %38 = arith.andi %37, %35 : tensor<256xi1, #blocked1> loc(#loc30)
    %39 = arith.andi %38, %8 : tensor<256xi1, #blocked1> loc(#loc31)
    %40 = tt.load %26, %39, %cst_0 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %41 = arith.muli %7, %cst_1 : tensor<256xi32, #blocked> loc(#loc33)
    %42 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc34)
    %43 = tt.addptr %42, %41 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc34)
    %44 = triton_gpu.convert_layout %28 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc35)
    tt.store %43, %44, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc35)
    %45 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc36)
    %46 = tt.addptr %45, %41 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc36)
    %47 = triton_gpu.convert_layout %40 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc37)
    tt.store %46, %47, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":21:28)
#loc3 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":21:33)
#loc4 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":22:36)
#loc5 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":22:23)
#loc6 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":23:21)
#loc7 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":24:21)
#loc8 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":24:26)
#loc9 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":25:19)
#loc10 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":27:18)
#loc11 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":29:19)
#loc12 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":31:18)
#loc13 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":32:15)
#loc14 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":33:19)
#loc15 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":34:18)
#loc16 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":35:18)
#loc17 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":36:18)
#loc18 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":37:19)
#loc19 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":38:38)
#loc20 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":38:31)
#loc21 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":38:51)
#loc22 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":38:43)
#loc23 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":40:21)
#loc24 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":41:20)
#loc25 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":42:19)
#loc26 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":43:21)
#loc27 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":44:20)
#loc28 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":45:20)
#loc29 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":46:20)
#loc30 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":47:20)
#loc31 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":48:51)
#loc32 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":48:43)
#loc33 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":49:28)
#loc34 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":49:25)
#loc35 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":49:40)
#loc36 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":50:25)
#loc37 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":50:40)
#loc38 = loc("inductor_cache/lj/cljib6fe64qxr7ysjnojqotn3i6c6vfnnw6jw2edlyuzpqsjywsl.py":50:4)
