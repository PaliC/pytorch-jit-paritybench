; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_relu_sub_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %16 = sdiv i32 %.frozen, 16, !dbg !14
  %17 = sdiv i32 %15, 16, !dbg !14
  %18 = srem i32 %16, 16, !dbg !15
  %19 = srem i32 %17, 16, !dbg !15
  %20 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %14, 16, !dbg !16
  %22 = sdiv i32 %13, 256, !dbg !17
  %23 = sdiv i32 %15, 256, !dbg !17
  %24 = sext i32 %18 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = sext i32 %19 to i64, !dbg !18
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %36 = sext i32 %.decomposed to i64, !dbg !20
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = sext i32 %21 to i64, !dbg !20
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !20
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !21
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !21
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !21
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !21
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !21
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !21
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !21
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !21
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !21
  %52 = getelementptr i64, ptr addrspace(1) %3, i64 %36, !dbg !22
  %53 = getelementptr i64, ptr addrspace(1) %3, i64 %38, !dbg !22
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !23
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !23
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !23
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !23
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !23
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !23
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !23
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !23
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !23
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !23
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !23
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = bitcast i32 %68 to float, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !25
  %81 = bitcast i32 %77 to float, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = lshr i64 %28, 60, !dbg !26
  %86 = and i64 %85, 8, !dbg !26
  %87 = add i64 %86, %28, !dbg !26
  %88 = lshr i64 %32, 60, !dbg !26
  %89 = and i64 %88, 8, !dbg !26
  %90 = add i64 %89, %32, !dbg !26
  %91 = lshr i64 %41, 60, !dbg !27
  %92 = and i64 %91, 8, !dbg !27
  %93 = lshr i64 %42, 60, !dbg !27
  %94 = and i64 %93, 8, !dbg !27
  %95 = lshr i64 %44, 60, !dbg !27
  %96 = and i64 %95, 8, !dbg !27
  %97 = lshr i64 %45, 60, !dbg !27
  %98 = and i64 %97, 8, !dbg !27
  %99 = lshr i64 %47, 60, !dbg !27
  %100 = and i64 %99, 8, !dbg !27
  %101 = lshr i64 %48, 60, !dbg !27
  %102 = and i64 %101, 8, !dbg !27
  %103 = lshr i64 %50, 60, !dbg !27
  %104 = and i64 %103, 8, !dbg !27
  %105 = lshr i64 %51, 60, !dbg !27
  %106 = and i64 %105, 8, !dbg !27
  %107 = shl i64 %87, 3, !dbg !28
  %108 = shl i64 %90, 3, !dbg !28
  %109 = shl nsw i32 %22, 6, !dbg !29
  %110 = shl nsw i32 %23, 6, !dbg !29
  %111 = sext i32 %109 to i64, !dbg !30
  %112 = sext i32 %110 to i64, !dbg !30
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %92, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %107, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %111, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %94, !dbg !31
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %107, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %111, !dbg !31
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %96, !dbg !31
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %107, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %111, !dbg !31
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %98, !dbg !31
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %107, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %111, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %100, !dbg !31
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %108, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %112, !dbg !31
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !31
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %102, !dbg !31
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %108, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %112, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !31
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %104, !dbg !31
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %108, !dbg !31
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %112, !dbg !31
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %106, !dbg !31
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %108, !dbg !31
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %112, !dbg !31
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !32
  %148 = bitcast i32 %147 to float, !dbg !32
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = fcmp olt float %146, 0.000000e+00, !dbg !33
  %162 = fcmp olt float %148, 0.000000e+00, !dbg !33
  %163 = fcmp olt float %150, 0.000000e+00, !dbg !33
  %164 = fcmp olt float %152, 0.000000e+00, !dbg !33
  %165 = fcmp olt float %154, 0.000000e+00, !dbg !33
  %166 = fcmp olt float %156, 0.000000e+00, !dbg !33
  %167 = fcmp olt float %158, 0.000000e+00, !dbg !33
  %168 = fcmp olt float %160, 0.000000e+00, !dbg !33
  %169 = select i1 %161, float 0.000000e+00, float %146, !dbg !37
  %170 = select i1 %162, float 0.000000e+00, float %148, !dbg !37
  %171 = select i1 %163, float 0.000000e+00, float %150, !dbg !37
  %172 = select i1 %164, float 0.000000e+00, float %152, !dbg !37
  %173 = select i1 %165, float 0.000000e+00, float %154, !dbg !37
  %174 = select i1 %166, float 0.000000e+00, float %156, !dbg !37
  %175 = select i1 %167, float 0.000000e+00, float %158, !dbg !37
  %176 = select i1 %168, float 0.000000e+00, float %160, !dbg !37
  %177 = lshr i64 %55, 60, !dbg !38
  %178 = and i64 %177, 8, !dbg !38
  %179 = lshr i64 %56, 60, !dbg !38
  %180 = and i64 %179, 8, !dbg !38
  %181 = lshr i64 %58, 60, !dbg !38
  %182 = and i64 %181, 8, !dbg !38
  %183 = lshr i64 %59, 60, !dbg !38
  %184 = and i64 %183, 8, !dbg !38
  %185 = lshr i64 %61, 60, !dbg !38
  %186 = and i64 %185, 8, !dbg !38
  %187 = lshr i64 %62, 60, !dbg !38
  %188 = and i64 %187, 8, !dbg !38
  %189 = lshr i64 %64, 60, !dbg !38
  %190 = and i64 %189, 8, !dbg !38
  %191 = lshr i64 %65, 60, !dbg !38
  %192 = and i64 %191, 8, !dbg !38
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !39
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %178, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %107, !dbg !39
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %111, !dbg !39
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %180, !dbg !39
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %107, !dbg !39
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %111, !dbg !39
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !39
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %182, !dbg !39
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %107, !dbg !39
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %111, !dbg !39
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !39
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %184, !dbg !39
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %107, !dbg !39
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %111, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !39
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %186, !dbg !39
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %108, !dbg !39
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %112, !dbg !39
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !39
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %188, !dbg !39
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %108, !dbg !39
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %112, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !39
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %190, !dbg !39
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %108, !dbg !39
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %112, !dbg !39
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !39
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %192, !dbg !39
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %108, !dbg !39
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %112, !dbg !39
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #1, !dbg !40
  %226 = bitcast i32 %225 to float, !dbg !40
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #1, !dbg !40
  %228 = bitcast i32 %227 to float, !dbg !40
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !40
  %230 = bitcast i32 %229 to float, !dbg !40
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !40
  %232 = bitcast i32 %231 to float, !dbg !40
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #1, !dbg !40
  %234 = bitcast i32 %233 to float, !dbg !40
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #1, !dbg !40
  %236 = bitcast i32 %235 to float, !dbg !40
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !40
  %238 = bitcast i32 %237 to float, !dbg !40
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !40
  %240 = bitcast i32 %239 to float, !dbg !40
  %241 = fcmp olt float %226, 0.000000e+00, !dbg !41
  %242 = fcmp olt float %228, 0.000000e+00, !dbg !41
  %243 = fcmp olt float %230, 0.000000e+00, !dbg !41
  %244 = fcmp olt float %232, 0.000000e+00, !dbg !41
  %245 = fcmp olt float %234, 0.000000e+00, !dbg !41
  %246 = fcmp olt float %236, 0.000000e+00, !dbg !41
  %247 = fcmp olt float %238, 0.000000e+00, !dbg !41
  %248 = fcmp olt float %240, 0.000000e+00, !dbg !41
  %249 = select i1 %241, float 0.000000e+00, float %226, !dbg !43
  %250 = select i1 %242, float 0.000000e+00, float %228, !dbg !43
  %251 = select i1 %243, float 0.000000e+00, float %230, !dbg !43
  %252 = select i1 %244, float 0.000000e+00, float %232, !dbg !43
  %253 = select i1 %245, float 0.000000e+00, float %234, !dbg !43
  %254 = select i1 %246, float 0.000000e+00, float %236, !dbg !43
  %255 = select i1 %247, float 0.000000e+00, float %238, !dbg !43
  %256 = select i1 %248, float 0.000000e+00, float %240, !dbg !43
  %257 = fsub float %249, %169, !dbg !44
  %258 = fsub float %250, %170, !dbg !44
  %259 = fsub float %251, %171, !dbg !44
  %260 = fsub float %252, %172, !dbg !44
  %261 = fsub float %253, %173, !dbg !44
  %262 = fsub float %254, %174, !dbg !44
  %263 = fsub float %255, %175, !dbg !44
  %264 = fsub float %256, %176, !dbg !44
  %265 = fmul float %257, %72, !dbg !45
  %266 = fmul float %258, %73, !dbg !45
  %267 = fmul float %259, %74, !dbg !45
  %268 = fmul float %260, %75, !dbg !45
  %269 = fmul float %261, %81, !dbg !45
  %270 = fmul float %262, %82, !dbg !45
  %271 = fmul float %263, %83, !dbg !45
  %272 = fmul float %264, %84, !dbg !45
  %273 = fadd float %169, %265, !dbg !46
  %274 = fadd float %170, %266, !dbg !46
  %275 = fadd float %171, %267, !dbg !46
  %276 = fadd float %172, %268, !dbg !46
  %277 = fadd float %173, %269, !dbg !46
  %278 = fadd float %174, %270, !dbg !46
  %279 = fadd float %175, %271, !dbg !46
  %280 = fadd float %176, %272, !dbg !46
  %281 = sext i32 %13 to i64, !dbg !47
  %282 = getelementptr float, ptr addrspace(1) %5, i64 %281, !dbg !47
  %283 = sext i32 %15 to i64, !dbg !47
  %284 = getelementptr float, ptr addrspace(1) %5, i64 %283, !dbg !47
  %285 = bitcast float %273 to i32, !dbg !48
  %286 = bitcast float %274 to i32, !dbg !48
  %287 = bitcast float %275 to i32, !dbg !48
  %288 = bitcast float %276 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %286, i32 %287, i32 %288, ptr addrspace(1) %282, i1 true) #1, !dbg !48
  %289 = bitcast float %277 to i32, !dbg !48
  %290 = bitcast float %278 to i32, !dbg !48
  %291 = bitcast float %279 to i32, !dbg !48
  %292 = bitcast float %280 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %290, i32 %291, i32 %292, ptr addrspace(1) %284, i1 true) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2i5s7lirjs4i7a4wruwcxclgp6zoc4s4exmln5kno7xnnv5ff77.py", directory: "inductor_cache/2i")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_relu_sub_51, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_relu_sub_51, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_relu_sub_51", linkageName: "triton_poi_fused__unsafe_index_add_mul_relu_sub_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 32, scope: !7)
!27 = !DILocation(line: 38, column: 32, scope: !7)
!28 = !DILocation(line: 39, column: 39, scope: !7)
!29 = !DILocation(line: 39, column: 49, scope: !7)
!30 = !DILocation(line: 39, column: 46, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 54, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 41, column: 42, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 44, column: 35, scope: !7)
!39 = !DILocation(line: 45, column: 31, scope: !7)
!40 = !DILocation(line: 45, column: 56, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !42)
!42 = !DILocation(line: 46, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
