; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = and i32 %10, 7, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = icmp slt i32 %16, 128, !dbg !14
  %19 = and i32 %10, 15, !dbg !15
  %20 = icmp ne i32 %19, 15, !dbg !16
  %21 = mul i32 %15, 15, !dbg !17
  %22 = mul i32 %16, 15, !dbg !17
  %23 = add i32 %21, %19, !dbg !18
  %24 = add i32 %22, %19, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = and i1 %20, %17, !dbg !20
  %30 = and i1 %20, %18, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %29, i32 0, i1 %29) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %30, i32 0, i1 %30) #5, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = sext i32 %15 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !22
  %37 = sext i32 %16 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %17) #5, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #5, !dbg !23
  %41 = fmul float %32, %32, !dbg !24
  %42 = fmul float %34, %34, !dbg !24
  %43 = select i1 %29, float %41, float 0.000000e+00, !dbg !25
  %44 = select i1 %30, float %42, float 0.000000e+00, !dbg !25
  %45 = bitcast float %43 to i32, !dbg !26
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 8, i32 31), !dbg !26
  %47 = bitcast i32 %46 to float, !dbg !26
  %48 = fadd float %43, %47, !dbg !30
  %49 = bitcast float %48 to i32, !dbg !26
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = fadd float %48, %51, !dbg !30
  %53 = bitcast float %52 to i32, !dbg !26
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !26
  %55 = bitcast i32 %54 to float, !dbg !26
  %56 = fadd float %52, %55, !dbg !30
  %57 = bitcast float %56 to i32, !dbg !26
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !26
  %59 = bitcast i32 %58 to float, !dbg !26
  %60 = fadd float %56, %59, !dbg !30
  %61 = bitcast float %44 to i32, !dbg !26
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = fadd float %44, %63, !dbg !30
  %65 = bitcast float %64 to i32, !dbg !26
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !26
  %67 = bitcast i32 %66 to float, !dbg !26
  %68 = fadd float %64, %67, !dbg !30
  %69 = bitcast float %68 to i32, !dbg !26
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = fadd float %68, %71, !dbg !30
  %73 = bitcast float %72 to i32, !dbg !26
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = fadd float %72, %75, !dbg !30
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %78 = bitcast float %60 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #5, !dbg !32
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !32
  %80 = bitcast float %76 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !32
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %83, 0, !dbg !32
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i = icmp eq i32 %84, 0, !dbg !32
  br i1 %.not.i, label %90, label %85, !dbg !32

85:                                               ; preds = %7
  br i1 %.not1.i, label %88, label %86, !dbg !32

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

90:                                               ; preds = %7
  br i1 %.not1.i, label %93, label %91, !dbg !32

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !32
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i1 = icmp eq i32 %95, 0, !dbg !32
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i4 = icmp eq i32 %96, 0, !dbg !32
  br i1 %.not.i1, label %102, label %97, !dbg !32

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !32

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !32

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %98, %100, %103, %105
  %.0.i3 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !32
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i6 = icmp eq i32 %107, 0, !dbg !32
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i9 = icmp eq i32 %108, 0, !dbg !32
  br i1 %.not.i6, label %114, label %109, !dbg !32

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !32

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !32

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %110, %112, %115, %117
  %.0.i8 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !32
  %119 = bitcast i32 %40 to float, !dbg !23
  %120 = bitcast i32 %39 to float, !dbg !23
  %121 = or disjoint i32 %9, %14, !dbg !13
  %122 = icmp slt i32 %121, 128, !dbg !14
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %.0.i3) #5, !dbg !33
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %.0.i8) #5, !dbg !33
  %125 = fmul float %123, %32, !dbg !34
  %126 = fmul float %124, %34, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %127 = sext i32 %121 to i64, !dbg !36
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !36
  %129 = and i32 %10, 56, !dbg !37
  %130 = icmp eq i32 %129, 0, !dbg !37
  %131 = bitcast float %.0.i to i32, !dbg !37
  %132 = and i1 %130, %122, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %128, i1 %132) #5, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !38
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !38
  %135 = bitcast float %125 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %133, i1 %29) #5, !dbg !39
  %136 = bitcast float %126 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %134, i1 %30) #5, !dbg !39
  %137 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !40
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %137, i1 %29) #5, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %138, i1 %30) #5, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjoyn6gnd44g2qpeopfmcj5ihra5uny4uovjo422ppa46s24ojn4.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_per_fused__weight_norm_interface_26, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_26, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_26", linkageName: "triton_per_fused__weight_norm_interface_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 41, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 37, column: 26, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 4, scope: !7)
!36 = !DILocation(line: 41, column: 28, scope: !7)
!37 = !DILocation(line: 41, column: 39, scope: !7)
!38 = !DILocation(line: 42, column: 25, scope: !7)
!39 = !DILocation(line: 42, column: 44, scope: !7)
!40 = !DILocation(line: 43, column: 25, scope: !7)
!41 = !DILocation(line: 43, column: 44, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)
