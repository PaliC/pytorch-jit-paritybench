; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = icmp slt i32 %8, 1024, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %.frozen = freeze i32 %8, !dbg !13
  %12 = sdiv i32 %.frozen, 256, !dbg !13
  %13 = mul i32 %12, 256, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl nuw nsw i32 %11, 8, !dbg !15
  %15 = shl i32 %12, 12, !dbg !16
  %16 = add nsw i32 %.decomposed, %14, !dbg !17
  %17 = add i32 %16, %15, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %9, i32 0, i1 %9) #4, !dbg !20
  %21 = bitcast i32 %20 to float, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %9, i32 0, i1 %9) #4, !dbg !20
  %23 = bitcast i32 %22 to float, !dbg !20
  %24 = shl i32 %8, 4, !dbg !21
  %25 = or disjoint i32 %24, %11, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %9, i32 0, i1 %9) #4, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %9, i32 0, i1 %9) #4, !dbg !25
  %30 = select i1 %9, float %21, float 0.000000e+00, !dbg !26
  %31 = select i1 %9, float %23, float 0.000000e+00, !dbg !26
  %32 = bitcast float %30 to i32, !dbg !27
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = fadd float %30, %34, !dbg !31
  %36 = bitcast float %35 to i32, !dbg !27
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !27
  %38 = bitcast i32 %37 to float, !dbg !27
  %39 = fadd float %35, %38, !dbg !31
  %40 = bitcast float %39 to i32, !dbg !27
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = fadd float %39, %42, !dbg !31
  %44 = bitcast float %43 to i32, !dbg !27
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = fadd float %43, %46, !dbg !31
  %48 = bitcast float %31 to i32, !dbg !27
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = fadd float %31, %50, !dbg !31
  %52 = bitcast float %51 to i32, !dbg !27
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = fadd float %51, %54, !dbg !31
  %56 = bitcast float %55 to i32, !dbg !27
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = fadd float %55, %58, !dbg !31
  %60 = bitcast float %59 to i32, !dbg !27
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = fadd float %59, %62, !dbg !31
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 1.600000e+01) #4, !dbg !33
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 1.600000e+01) #4, !dbg !33
  %66 = fsub float %21, %64, !dbg !34
  %67 = fsub float %23, %65, !dbg !34
  %68 = fmul float %66, %66, !dbg !35
  %69 = fmul float %67, %67, !dbg !35
  %70 = select i1 %9, float %68, float 0.000000e+00, !dbg !36
  %71 = select i1 %9, float %69, float 0.000000e+00, !dbg !36
  %72 = bitcast float %70 to i32, !dbg !37
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !37
  %74 = bitcast i32 %73 to float, !dbg !37
  %75 = fadd float %70, %74, !dbg !39
  %76 = bitcast float %75 to i32, !dbg !37
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !37
  %78 = bitcast i32 %77 to float, !dbg !37
  %79 = fadd float %75, %78, !dbg !39
  %80 = bitcast float %79 to i32, !dbg !37
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = fadd float %79, %82, !dbg !39
  %84 = bitcast float %83 to i32, !dbg !37
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !37
  %86 = bitcast i32 %85 to float, !dbg !37
  %87 = fadd float %83, %86, !dbg !39
  %88 = bitcast float %71 to i32, !dbg !37
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !37
  %90 = bitcast i32 %89 to float, !dbg !37
  %91 = fadd float %71, %90, !dbg !39
  %92 = bitcast float %91 to i32, !dbg !37
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !37
  %94 = bitcast i32 %93 to float, !dbg !37
  %95 = fadd float %91, %94, !dbg !39
  %96 = bitcast float %95 to i32, !dbg !37
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = fadd float %95, %98, !dbg !39
  %100 = bitcast float %99 to i32, !dbg !37
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !37
  %102 = bitcast i32 %101 to float, !dbg !37
  %103 = fadd float %99, %102, !dbg !39
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.600000e+01) #4, !dbg !40
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.600000e+01) #4, !dbg !40
  %106 = fadd float %104, 0x3EE4F8B580000000, !dbg !41
  %107 = fadd float %105, 0x3EE4F8B580000000, !dbg !41
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %108, 0, !dbg !42
  br i1 %.not.i, label %111, label %109, !dbg !42

109:                                              ; preds = %7
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

111:                                              ; preds = %7
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %109, %111
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], !dbg !42
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i1 = icmp eq i32 %113, 0, !dbg !42
  br i1 %.not.i1, label %116, label %114, !dbg !42

114:                                              ; preds = %__nv_rsqrtf.exit
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !42
  br label %__nv_rsqrtf.exit3, !dbg !42

116:                                              ; preds = %__nv_rsqrtf.exit
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !42
  br label %__nv_rsqrtf.exit3, !dbg !42

__nv_rsqrtf.exit3:                                ; preds = %114, %116
  %.0.i2 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !42
  %118 = bitcast i32 %29 to float, !dbg !25
  %119 = bitcast i32 %28 to float, !dbg !24
  %120 = fsub float %118, %64, !dbg !43
  %121 = fmul float %120, %.0.i, !dbg !44
  %122 = fadd float %121, %119, !dbg !45
  %123 = sext i32 %8 to i64, !dbg !46
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !46
  %urem = and i32 %10, 63, !dbg !47
  %125 = icmp eq i32 %urem, 0, !dbg !47
  %126 = bitcast float %.0.i2 to i32, !dbg !47
  %127 = and i1 %125, %9, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %124, i1 %127) #4, !dbg !47
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !48
  %129 = and i32 %10, 48, !dbg !49
  %130 = icmp eq i32 %129, 0, !dbg !49
  %131 = bitcast float %122 to i32, !dbg !49
  %132 = and i1 %130, %9, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %128, i1 %132) #4, !dbg !49
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !50
  %134 = bitcast float %65 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %133, i1 %127) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py", directory: "inductor_cache/mj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_6", linkageName: "triton_per_fused__native_batch_norm_legit_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 45, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 60, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 73, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 44, scope: !7)
!25 = !DILocation(line: 35, column: 55, scope: !7)
!26 = !DILocation(line: 39, column: 33, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 40, column: 24, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 35, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 48, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !38)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 28, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 58, column: 25, scope: !7)
!49 = !DILocation(line: 58, column: 45, scope: !7)
!50 = !DILocation(line: 59, column: 25, scope: !7)
!51 = !DILocation(line: 59, column: 37, scope: !7)
!52 = !DILocation(line: 59, column: 4, scope: !7)
