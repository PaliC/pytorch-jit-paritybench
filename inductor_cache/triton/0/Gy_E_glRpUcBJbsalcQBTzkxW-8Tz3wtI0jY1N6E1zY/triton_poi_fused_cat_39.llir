; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 10, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 2, !dbg !12
  %20 = and i32 %19, 508, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = or disjoint i32 %21, 512, !dbg !13
  %.frozen39 = freeze i32 %21, !dbg !14
  %23 = sdiv i32 %.frozen39, 256, !dbg !14
  %24 = sdiv i32 %22, 256, !dbg !14
  %25 = srem i32 %23, 320, !dbg !15
  %26 = srem i32 %24, 320, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %27 = sdiv i32 %.frozen, 81920, !dbg !16
  %.frozen37 = freeze i32 %22, !dbg !16
  %28 = sdiv i32 %.frozen37, 81920, !dbg !16
  %29 = icmp slt i32 %25, 256, !dbg !17
  %30 = icmp slt i32 %26, 256, !dbg !17
  %31 = mul i32 %27, 81920, !dbg !18
  %srem.decomposed = sub i32 %.frozen, %31, !dbg !18
  %32 = mul i32 %28, 81920, !dbg !18
  %srem1.decomposed = sub i32 %.frozen37, %32, !dbg !18
  %33 = shl nsw i32 %27, 16, !dbg !19
  %34 = shl nsw i32 %28, 16, !dbg !19
  %35 = add nsw i32 %33, %srem.decomposed, !dbg !20
  %36 = add nsw i32 %34, %srem1.decomposed, !dbg !20
  %37 = sext i32 %35 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %36 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !24
  %47 = sext i32 %25 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !25
  %49 = sext i32 %26 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %30, i32 0, i1 %30) #3, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %30, i32 0, i1 %30) #3, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %30, i32 0, i1 %30) #3, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %30, i32 0, i1 %30) #3, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %30, i32 0, i1 %30) #3, !dbg !28
  %70 = bitcast i32 %69 to float, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %30, i32 0, i1 %30) #3, !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %30, i32 0, i1 %30) #3, !dbg !28
  %74 = bitcast i32 %73 to float, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %30, i32 0, i1 %30) #3, !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fadd float %62, 0x3EE4F8B580000000, !dbg !29
  %78 = fadd float %64, 0x3EE4F8B580000000, !dbg !29
  %79 = fadd float %66, 0x3EE4F8B580000000, !dbg !29
  %80 = fadd float %68, 0x3EE4F8B580000000, !dbg !29
  %81 = fadd float %70, 0x3EE4F8B580000000, !dbg !29
  %82 = fadd float %72, 0x3EE4F8B580000000, !dbg !29
  %83 = fadd float %74, 0x3EE4F8B580000000, !dbg !29
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !29
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %85, 0, !dbg !30
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %86, 0, !dbg !30
  br i1 %.not.i, label %92, label %87, !dbg !30

87:                                               ; preds = %15
  br i1 %.not1.i, label %90, label %88, !dbg !30

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

92:                                               ; preds = %15
  br i1 %.not1.i, label %95, label %93, !dbg !30

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !30
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i2 = icmp eq i32 %97, 0, !dbg !30
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i5 = icmp eq i32 %98, 0, !dbg !30
  br i1 %.not.i2, label %104, label %99, !dbg !30

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %102, label %100, !dbg !30

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %107, label %105, !dbg !30

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

__nv_sqrtf.exit6:                                 ; preds = %100, %102, %105, %107
  %.0.i4 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !30
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i7 = icmp eq i32 %109, 0, !dbg !30
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i10 = icmp eq i32 %110, 0, !dbg !30
  br i1 %.not.i7, label %116, label %111, !dbg !30

111:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %114, label %112, !dbg !30

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

116:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %119, label %117, !dbg !30

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

__nv_sqrtf.exit11:                                ; preds = %112, %114, %117, %119
  %.0.i9 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !30
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i12 = icmp eq i32 %121, 0, !dbg !30
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i15 = icmp eq i32 %122, 0, !dbg !30
  br i1 %.not.i12, label %128, label %123, !dbg !30

123:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %126, label %124, !dbg !30

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

128:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %131, label %129, !dbg !30

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

__nv_sqrtf.exit16:                                ; preds = %124, %126, %129, %131
  %.0.i14 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !30
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i17 = icmp eq i32 %133, 0, !dbg !30
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i20 = icmp eq i32 %134, 0, !dbg !30
  br i1 %.not.i17, label %140, label %135, !dbg !30

135:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %138, label %136, !dbg !30

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

140:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

__nv_sqrtf.exit21:                                ; preds = %136, %138, %141, %143
  %.0.i19 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !30
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i22 = icmp eq i32 %145, 0, !dbg !30
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i25 = icmp eq i32 %146, 0, !dbg !30
  br i1 %.not.i22, label %152, label %147, !dbg !30

147:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %150, label %148, !dbg !30

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

__nv_sqrtf.exit26:                                ; preds = %148, %150, %153, %155
  %.0.i24 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !30
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i27 = icmp eq i32 %157, 0, !dbg !30
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i30 = icmp eq i32 %158, 0, !dbg !30
  br i1 %.not.i27, label %164, label %159, !dbg !30

159:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %162, label %160, !dbg !30

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

__nv_sqrtf.exit31:                                ; preds = %160, %162, %165, %167
  %.0.i29 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !30
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i32 = icmp eq i32 %169, 0, !dbg !30
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i35 = icmp eq i32 %170, 0, !dbg !30
  br i1 %.not.i32, label %176, label %171, !dbg !30

171:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %174, label %172, !dbg !30

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

176:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %179, label %177, !dbg !30

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

__nv_sqrtf.exit36:                                ; preds = %172, %174, %177, %179
  %.0.i34 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %182 = bitcast i32 %181 to float, !dbg !24
  %183 = bitcast i32 %58 to float, !dbg !26
  %184 = fsub float %182, %183, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %186 = bitcast i32 %185 to float, !dbg !24
  %187 = bitcast i32 %57 to float, !dbg !26
  %188 = fsub float %186, %187, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %190 = bitcast i32 %189 to float, !dbg !24
  %191 = bitcast i32 %56 to float, !dbg !26
  %192 = fsub float %190, %191, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %194 = bitcast i32 %193 to float, !dbg !24
  %195 = bitcast i32 %55 to float, !dbg !26
  %196 = fsub float %194, %195, !dbg !31
  %197 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %198 = bitcast i32 %197 to float, !dbg !24
  %199 = bitcast i32 %54 to float, !dbg !26
  %200 = fsub float %198, %199, !dbg !31
  %201 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %202 = bitcast i32 %201 to float, !dbg !24
  %203 = bitcast i32 %53 to float, !dbg !26
  %204 = fsub float %202, %203, !dbg !31
  %205 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %206 = bitcast i32 %205 to float, !dbg !24
  %207 = bitcast i32 %52 to float, !dbg !26
  %208 = fsub float %206, %207, !dbg !31
  %209 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %210 = bitcast i32 %209 to float, !dbg !24
  %211 = bitcast i32 %51 to float, !dbg !26
  %212 = fsub float %210, %211, !dbg !31
  %213 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %214 = bitcast i32 %213 to float, !dbg !22
  %215 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %216 = bitcast i32 %215 to float, !dbg !22
  %217 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %218 = bitcast i32 %217 to float, !dbg !22
  %219 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %220 = bitcast i32 %219 to float, !dbg !22
  %221 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %222 = bitcast i32 %221 to float, !dbg !22
  %223 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %224 = bitcast i32 %223 to float, !dbg !22
  %225 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %226 = bitcast i32 %225 to float, !dbg !22
  %227 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %228 = bitcast i32 %227 to float, !dbg !22
  %229 = or disjoint i32 %21, 2, !dbg !13
  %230 = srem i32 %229, 16, !dbg !32
  %.frozen38 = freeze i32 %21, !dbg !33
  %231 = sdiv i32 %.frozen38, 16, !dbg !33
  %232 = mul i32 %231, 16, !dbg !32
  %.decomposed = sub i32 %.frozen38, %232, !dbg !32
  %233 = sdiv i32 %22, 16, !dbg !33
  %234 = srem i32 %233, 16, !dbg !34
  %235 = srem i32 %231, 16, !dbg !34
  %236 = mul i32 %23, 256, !dbg !35
  %.decomposed40 = sub i32 %.frozen39, %236, !dbg !35
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !36
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !36
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !36
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !36
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !36
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !36
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !36
  %245 = fmul float %212, %237, !dbg !37
  %246 = fmul float %208, %238, !dbg !37
  %247 = fmul float %204, %239, !dbg !37
  %248 = fmul float %200, %240, !dbg !37
  %249 = fmul float %196, %241, !dbg !37
  %250 = fmul float %192, %242, !dbg !37
  %251 = fmul float %188, %243, !dbg !37
  %252 = fmul float %184, %244, !dbg !37
  %253 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !38
  %254 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !38
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %29, i32 0, i1 %29) #3, !dbg !39
  %256 = bitcast i32 %255 to float, !dbg !39
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %29, i32 0, i1 %29) #3, !dbg !39
  %258 = bitcast i32 %257 to float, !dbg !39
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %29, i32 0, i1 %29) #3, !dbg !39
  %260 = bitcast i32 %259 to float, !dbg !39
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %29, i32 0, i1 %29) #3, !dbg !39
  %262 = bitcast i32 %261 to float, !dbg !39
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %30, i32 0, i1 %30) #3, !dbg !39
  %264 = bitcast i32 %263 to float, !dbg !39
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %30, i32 0, i1 %30) #3, !dbg !39
  %266 = bitcast i32 %265 to float, !dbg !39
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %30, i32 0, i1 %30) #3, !dbg !39
  %268 = bitcast i32 %267 to float, !dbg !39
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %30, i32 0, i1 %30) #3, !dbg !39
  %270 = bitcast i32 %269 to float, !dbg !39
  %271 = fmul float %245, %256, !dbg !40
  %272 = fmul float %246, %258, !dbg !40
  %273 = fmul float %247, %260, !dbg !40
  %274 = fmul float %248, %262, !dbg !40
  %275 = fmul float %249, %264, !dbg !40
  %276 = fmul float %250, %266, !dbg !40
  %277 = fmul float %251, %268, !dbg !40
  %278 = fmul float %252, %270, !dbg !40
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !41
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %49, !dbg !41
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %29, i32 0, i1 %29) #3, !dbg !42
  %282 = bitcast i32 %281 to float, !dbg !42
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %29, i32 0, i1 %29) #3, !dbg !42
  %284 = bitcast i32 %283 to float, !dbg !42
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %29, i32 0, i1 %29) #3, !dbg !42
  %286 = bitcast i32 %285 to float, !dbg !42
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %29, i32 0, i1 %29) #3, !dbg !42
  %288 = bitcast i32 %287 to float, !dbg !42
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %30, i32 0, i1 %30) #3, !dbg !42
  %290 = bitcast i32 %289 to float, !dbg !42
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %30, i32 0, i1 %30) #3, !dbg !42
  %292 = bitcast i32 %291 to float, !dbg !42
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %30, i32 0, i1 %30) #3, !dbg !42
  %294 = bitcast i32 %293 to float, !dbg !42
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %30, i32 0, i1 %30) #3, !dbg !42
  %296 = bitcast i32 %295 to float, !dbg !42
  %297 = fadd float %271, %282, !dbg !43
  %298 = fadd float %272, %284, !dbg !43
  %299 = fadd float %273, %286, !dbg !43
  %300 = fadd float %274, %288, !dbg !43
  %301 = fadd float %275, %290, !dbg !43
  %302 = fadd float %276, %292, !dbg !43
  %303 = fadd float %277, %294, !dbg !43
  %304 = fadd float %278, %296, !dbg !43
  %305 = fadd float %297, %228, !dbg !44
  %306 = fadd float %298, %226, !dbg !44
  %307 = fadd float %299, %224, !dbg !44
  %308 = fadd float %300, %222, !dbg !44
  %309 = fadd float %301, %220, !dbg !44
  %310 = fadd float %302, %218, !dbg !44
  %311 = fadd float %303, %216, !dbg !44
  %312 = fadd float %304, %214, !dbg !44
  %313 = icmp sgt i32 %25, 255, !dbg !45
  %314 = icmp sgt i32 %26, 255, !dbg !45
  %315 = add nsw i32 %25, -256, !dbg !46
  %316 = add nsw i32 %26, -256, !dbg !46
  %317 = shl nsw i32 %315, 8, !dbg !47
  %318 = shl nsw i32 %316, 8, !dbg !47
  %319 = shl nsw i32 %27, 14, !dbg !48
  %320 = shl nsw i32 %28, 14, !dbg !48
  %321 = add nsw i32 %319, %.decomposed40, !dbg !49
  %322 = add nsw i32 %321, %317, !dbg !50
  %323 = add nsw i32 %320, %.decomposed40, !dbg !49
  %324 = add nsw i32 %323, %318, !dbg !50
  %325 = sext i32 %322 to i64, !dbg !51
  %326 = getelementptr float, ptr addrspace(1) %6, i64 %325, !dbg !51
  %327 = sext i32 %324 to i64, !dbg !51
  %328 = getelementptr float, ptr addrspace(1) %6, i64 %327, !dbg !51
  %329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %326, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313) #3, !dbg !52
  %330 = extractvalue { i32, i32, i32, i32 } %329, 0, !dbg !52
  %331 = extractvalue { i32, i32, i32, i32 } %329, 1, !dbg !52
  %332 = extractvalue { i32, i32, i32, i32 } %329, 2, !dbg !52
  %333 = extractvalue { i32, i32, i32, i32 } %329, 3, !dbg !52
  %334 = bitcast i32 %330 to float, !dbg !52
  %335 = bitcast i32 %331 to float, !dbg !52
  %336 = bitcast i32 %332 to float, !dbg !52
  %337 = bitcast i32 %333 to float, !dbg !52
  %338 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %328, i1 %314, i32 0, i1 %314, i32 0, i1 %314, i32 0, i1 %314, i32 0, i1 %314) #3, !dbg !52
  %339 = extractvalue { i32, i32, i32, i32 } %338, 0, !dbg !52
  %340 = extractvalue { i32, i32, i32, i32 } %338, 1, !dbg !52
  %341 = extractvalue { i32, i32, i32, i32 } %338, 2, !dbg !52
  %342 = extractvalue { i32, i32, i32, i32 } %338, 3, !dbg !52
  %343 = bitcast i32 %339 to float, !dbg !52
  %344 = bitcast i32 %340 to float, !dbg !52
  %345 = bitcast i32 %341 to float, !dbg !52
  %346 = bitcast i32 %342 to float, !dbg !52
  %347 = sext i32 %235 to i64, !dbg !53
  %348 = getelementptr i64, ptr addrspace(1) %7, i64 %347, !dbg !53
  %349 = sext i32 %234 to i64, !dbg !53
  %350 = getelementptr i64, ptr addrspace(1) %7, i64 %349, !dbg !53
  %351 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %348, i1 %313, i1 %313) #3, !dbg !54
  %352 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %348, i1 %313, i1 %313) #3, !dbg !54
  %353 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %348, i1 %313, i1 %313) #3, !dbg !54
  %354 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %348, i1 %313, i1 %313) #3, !dbg !54
  %355 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %350, i1 %314, i1 %314) #3, !dbg !54
  %356 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %350, i1 %314, i1 %314) #3, !dbg !54
  %357 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %350, i1 %314, i1 %314) #3, !dbg !54
  %358 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %350, i1 %314, i1 %314) #3, !dbg !54
  %359 = lshr i64 %351, 58, !dbg !55
  %360 = and i64 %359, 32, !dbg !55
  %361 = add i64 %360, %351, !dbg !55
  %362 = lshr i64 %355, 58, !dbg !55
  %363 = and i64 %362, 32, !dbg !55
  %364 = add i64 %363, %355, !dbg !55
  %365 = sext i32 %.decomposed to i64, !dbg !56
  %366 = getelementptr i64, ptr addrspace(1) %8, i64 %365, !dbg !56
  %367 = sext i32 %230 to i64, !dbg !56
  %368 = getelementptr i64, ptr addrspace(1) %8, i64 %367, !dbg !56
  %369 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %366, i1 %313, i1 %313, i1 %313) #3, !dbg !57
  %370 = extractvalue { i64, i64 } %369, 0, !dbg !57
  %371 = extractvalue { i64, i64 } %369, 1, !dbg !57
  %372 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %368, i1 %313, i1 %313, i1 %313) #3, !dbg !57
  %373 = extractvalue { i64, i64 } %372, 0, !dbg !57
  %374 = extractvalue { i64, i64 } %372, 1, !dbg !57
  %375 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %366, i1 %314, i1 %314, i1 %314) #3, !dbg !57
  %376 = extractvalue { i64, i64 } %375, 0, !dbg !57
  %377 = extractvalue { i64, i64 } %375, 1, !dbg !57
  %378 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %368, i1 %314, i1 %314, i1 %314) #3, !dbg !57
  %379 = extractvalue { i64, i64 } %378, 0, !dbg !57
  %380 = extractvalue { i64, i64 } %378, 1, !dbg !57
  %381 = lshr i64 %370, 58, !dbg !58
  %382 = and i64 %381, 32, !dbg !58
  %383 = lshr i64 %371, 58, !dbg !58
  %384 = and i64 %383, 32, !dbg !58
  %385 = lshr i64 %373, 58, !dbg !58
  %386 = and i64 %385, 32, !dbg !58
  %387 = lshr i64 %374, 58, !dbg !58
  %388 = and i64 %387, 32, !dbg !58
  %389 = lshr i64 %376, 58, !dbg !58
  %390 = and i64 %389, 32, !dbg !58
  %391 = lshr i64 %377, 58, !dbg !58
  %392 = and i64 %391, 32, !dbg !58
  %393 = lshr i64 %379, 58, !dbg !58
  %394 = and i64 %393, 32, !dbg !58
  %395 = lshr i64 %380, 58, !dbg !58
  %396 = and i64 %395, 32, !dbg !58
  %397 = shl i64 %361, 5, !dbg !59
  %398 = shl i64 %364, 5, !dbg !59
  %399 = shl nsw i32 %315, 10, !dbg !60
  %400 = shl nsw i32 %316, 10, !dbg !60
  %401 = sext i32 %399 to i64, !dbg !61
  %402 = sext i32 %400 to i64, !dbg !61
  %403 = sext i32 %33 to i64, !dbg !62
  %404 = sext i32 %34 to i64, !dbg !62
  %405 = getelementptr float, ptr addrspace(1) %9, i64 %370, !dbg !63
  %406 = getelementptr float, ptr addrspace(1) %405, i64 %382, !dbg !63
  %407 = getelementptr float, ptr addrspace(1) %406, i64 %397, !dbg !63
  %408 = getelementptr float, ptr addrspace(1) %407, i64 %401, !dbg !63
  %409 = getelementptr float, ptr addrspace(1) %408, i64 %403, !dbg !63
  %410 = getelementptr float, ptr addrspace(1) %9, i64 %371, !dbg !63
  %411 = getelementptr float, ptr addrspace(1) %410, i64 %384, !dbg !63
  %412 = getelementptr float, ptr addrspace(1) %411, i64 %397, !dbg !63
  %413 = getelementptr float, ptr addrspace(1) %412, i64 %401, !dbg !63
  %414 = getelementptr float, ptr addrspace(1) %413, i64 %403, !dbg !63
  %415 = getelementptr float, ptr addrspace(1) %9, i64 %373, !dbg !63
  %416 = getelementptr float, ptr addrspace(1) %415, i64 %386, !dbg !63
  %417 = getelementptr float, ptr addrspace(1) %416, i64 %397, !dbg !63
  %418 = getelementptr float, ptr addrspace(1) %417, i64 %401, !dbg !63
  %419 = getelementptr float, ptr addrspace(1) %418, i64 %403, !dbg !63
  %420 = getelementptr float, ptr addrspace(1) %9, i64 %374, !dbg !63
  %421 = getelementptr float, ptr addrspace(1) %420, i64 %388, !dbg !63
  %422 = getelementptr float, ptr addrspace(1) %421, i64 %397, !dbg !63
  %423 = getelementptr float, ptr addrspace(1) %422, i64 %401, !dbg !63
  %424 = getelementptr float, ptr addrspace(1) %423, i64 %403, !dbg !63
  %425 = getelementptr float, ptr addrspace(1) %9, i64 %376, !dbg !63
  %426 = getelementptr float, ptr addrspace(1) %425, i64 %390, !dbg !63
  %427 = getelementptr float, ptr addrspace(1) %426, i64 %398, !dbg !63
  %428 = getelementptr float, ptr addrspace(1) %427, i64 %402, !dbg !63
  %429 = getelementptr float, ptr addrspace(1) %428, i64 %404, !dbg !63
  %430 = getelementptr float, ptr addrspace(1) %9, i64 %377, !dbg !63
  %431 = getelementptr float, ptr addrspace(1) %430, i64 %392, !dbg !63
  %432 = getelementptr float, ptr addrspace(1) %431, i64 %398, !dbg !63
  %433 = getelementptr float, ptr addrspace(1) %432, i64 %402, !dbg !63
  %434 = getelementptr float, ptr addrspace(1) %433, i64 %404, !dbg !63
  %435 = getelementptr float, ptr addrspace(1) %9, i64 %379, !dbg !63
  %436 = getelementptr float, ptr addrspace(1) %435, i64 %394, !dbg !63
  %437 = getelementptr float, ptr addrspace(1) %436, i64 %398, !dbg !63
  %438 = getelementptr float, ptr addrspace(1) %437, i64 %402, !dbg !63
  %439 = getelementptr float, ptr addrspace(1) %438, i64 %404, !dbg !63
  %440 = getelementptr float, ptr addrspace(1) %9, i64 %380, !dbg !63
  %441 = getelementptr float, ptr addrspace(1) %440, i64 %396, !dbg !63
  %442 = getelementptr float, ptr addrspace(1) %441, i64 %398, !dbg !63
  %443 = getelementptr float, ptr addrspace(1) %442, i64 %402, !dbg !63
  %444 = getelementptr float, ptr addrspace(1) %443, i64 %404, !dbg !63
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %409, i1 %313, i32 0, i1 %313) #3, !dbg !64
  %446 = bitcast i32 %445 to float, !dbg !64
  %447 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %414, i1 %313, i32 0, i1 %313) #3, !dbg !64
  %448 = bitcast i32 %447 to float, !dbg !64
  %449 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %419, i1 %313, i32 0, i1 %313) #3, !dbg !64
  %450 = bitcast i32 %449 to float, !dbg !64
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 %313, i32 0, i1 %313) #3, !dbg !64
  %452 = bitcast i32 %451 to float, !dbg !64
  %453 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %429, i1 %314, i32 0, i1 %314) #3, !dbg !64
  %454 = bitcast i32 %453 to float, !dbg !64
  %455 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %434, i1 %314, i32 0, i1 %314) #3, !dbg !64
  %456 = bitcast i32 %455 to float, !dbg !64
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %439, i1 %314, i32 0, i1 %314) #3, !dbg !64
  %458 = bitcast i32 %457 to float, !dbg !64
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %444, i1 %314, i32 0, i1 %314) #3, !dbg !64
  %460 = bitcast i32 %459 to float, !dbg !64
  %461 = getelementptr i64, ptr addrspace(1) %10, i64 %365, !dbg !65
  %462 = getelementptr i64, ptr addrspace(1) %10, i64 %367, !dbg !65
  %463 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %461, i1 %313, i1 %313, i1 %313) #3, !dbg !66
  %464 = extractvalue { i64, i64 } %463, 0, !dbg !66
  %465 = extractvalue { i64, i64 } %463, 1, !dbg !66
  %466 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %462, i1 %313, i1 %313, i1 %313) #3, !dbg !66
  %467 = extractvalue { i64, i64 } %466, 0, !dbg !66
  %468 = extractvalue { i64, i64 } %466, 1, !dbg !66
  %469 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %461, i1 %314, i1 %314, i1 %314) #3, !dbg !66
  %470 = extractvalue { i64, i64 } %469, 0, !dbg !66
  %471 = extractvalue { i64, i64 } %469, 1, !dbg !66
  %472 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %462, i1 %314, i1 %314, i1 %314) #3, !dbg !66
  %473 = extractvalue { i64, i64 } %472, 0, !dbg !66
  %474 = extractvalue { i64, i64 } %472, 1, !dbg !66
  %475 = lshr i64 %464, 58, !dbg !67
  %476 = and i64 %475, 32, !dbg !67
  %477 = lshr i64 %465, 58, !dbg !67
  %478 = and i64 %477, 32, !dbg !67
  %479 = lshr i64 %467, 58, !dbg !67
  %480 = and i64 %479, 32, !dbg !67
  %481 = lshr i64 %468, 58, !dbg !67
  %482 = and i64 %481, 32, !dbg !67
  %483 = lshr i64 %470, 58, !dbg !67
  %484 = and i64 %483, 32, !dbg !67
  %485 = lshr i64 %471, 58, !dbg !67
  %486 = and i64 %485, 32, !dbg !67
  %487 = lshr i64 %473, 58, !dbg !67
  %488 = and i64 %487, 32, !dbg !67
  %489 = lshr i64 %474, 58, !dbg !67
  %490 = and i64 %489, 32, !dbg !67
  %491 = getelementptr float, ptr addrspace(1) %9, i64 %464, !dbg !68
  %492 = getelementptr float, ptr addrspace(1) %491, i64 %476, !dbg !68
  %493 = getelementptr float, ptr addrspace(1) %492, i64 %397, !dbg !68
  %494 = getelementptr float, ptr addrspace(1) %493, i64 %401, !dbg !68
  %495 = getelementptr float, ptr addrspace(1) %494, i64 %403, !dbg !68
  %496 = getelementptr float, ptr addrspace(1) %9, i64 %465, !dbg !68
  %497 = getelementptr float, ptr addrspace(1) %496, i64 %478, !dbg !68
  %498 = getelementptr float, ptr addrspace(1) %497, i64 %397, !dbg !68
  %499 = getelementptr float, ptr addrspace(1) %498, i64 %401, !dbg !68
  %500 = getelementptr float, ptr addrspace(1) %499, i64 %403, !dbg !68
  %501 = getelementptr float, ptr addrspace(1) %9, i64 %467, !dbg !68
  %502 = getelementptr float, ptr addrspace(1) %501, i64 %480, !dbg !68
  %503 = getelementptr float, ptr addrspace(1) %502, i64 %397, !dbg !68
  %504 = getelementptr float, ptr addrspace(1) %503, i64 %401, !dbg !68
  %505 = getelementptr float, ptr addrspace(1) %504, i64 %403, !dbg !68
  %506 = getelementptr float, ptr addrspace(1) %9, i64 %468, !dbg !68
  %507 = getelementptr float, ptr addrspace(1) %506, i64 %482, !dbg !68
  %508 = getelementptr float, ptr addrspace(1) %507, i64 %397, !dbg !68
  %509 = getelementptr float, ptr addrspace(1) %508, i64 %401, !dbg !68
  %510 = getelementptr float, ptr addrspace(1) %509, i64 %403, !dbg !68
  %511 = getelementptr float, ptr addrspace(1) %9, i64 %470, !dbg !68
  %512 = getelementptr float, ptr addrspace(1) %511, i64 %484, !dbg !68
  %513 = getelementptr float, ptr addrspace(1) %512, i64 %398, !dbg !68
  %514 = getelementptr float, ptr addrspace(1) %513, i64 %402, !dbg !68
  %515 = getelementptr float, ptr addrspace(1) %514, i64 %404, !dbg !68
  %516 = getelementptr float, ptr addrspace(1) %9, i64 %471, !dbg !68
  %517 = getelementptr float, ptr addrspace(1) %516, i64 %486, !dbg !68
  %518 = getelementptr float, ptr addrspace(1) %517, i64 %398, !dbg !68
  %519 = getelementptr float, ptr addrspace(1) %518, i64 %402, !dbg !68
  %520 = getelementptr float, ptr addrspace(1) %519, i64 %404, !dbg !68
  %521 = getelementptr float, ptr addrspace(1) %9, i64 %473, !dbg !68
  %522 = getelementptr float, ptr addrspace(1) %521, i64 %488, !dbg !68
  %523 = getelementptr float, ptr addrspace(1) %522, i64 %398, !dbg !68
  %524 = getelementptr float, ptr addrspace(1) %523, i64 %402, !dbg !68
  %525 = getelementptr float, ptr addrspace(1) %524, i64 %404, !dbg !68
  %526 = getelementptr float, ptr addrspace(1) %9, i64 %474, !dbg !68
  %527 = getelementptr float, ptr addrspace(1) %526, i64 %490, !dbg !68
  %528 = getelementptr float, ptr addrspace(1) %527, i64 %398, !dbg !68
  %529 = getelementptr float, ptr addrspace(1) %528, i64 %402, !dbg !68
  %530 = getelementptr float, ptr addrspace(1) %529, i64 %404, !dbg !68
  %531 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %495, i1 %313, i32 0, i1 %313) #3, !dbg !69
  %532 = bitcast i32 %531 to float, !dbg !69
  %533 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %500, i1 %313, i32 0, i1 %313) #3, !dbg !69
  %534 = bitcast i32 %533 to float, !dbg !69
  %535 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %505, i1 %313, i32 0, i1 %313) #3, !dbg !69
  %536 = bitcast i32 %535 to float, !dbg !69
  %537 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %510, i1 %313, i32 0, i1 %313) #3, !dbg !69
  %538 = bitcast i32 %537 to float, !dbg !69
  %539 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %515, i1 %314, i32 0, i1 %314) #3, !dbg !69
  %540 = bitcast i32 %539 to float, !dbg !69
  %541 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %520, i1 %314, i32 0, i1 %314) #3, !dbg !69
  %542 = bitcast i32 %541 to float, !dbg !69
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %525, i1 %314, i32 0, i1 %314) #3, !dbg !69
  %544 = bitcast i32 %543 to float, !dbg !69
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %530, i1 %314, i32 0, i1 %314) #3, !dbg !69
  %546 = bitcast i32 %545 to float, !dbg !69
  %547 = fsub float %532, %446, !dbg !70
  %548 = fsub float %534, %448, !dbg !70
  %549 = fsub float %536, %450, !dbg !70
  %550 = fsub float %538, %452, !dbg !70
  %551 = fsub float %540, %454, !dbg !70
  %552 = fsub float %542, %456, !dbg !70
  %553 = fsub float %544, %458, !dbg !70
  %554 = fsub float %546, %460, !dbg !70
  %555 = getelementptr float, ptr addrspace(1) %11, i64 %365, !dbg !71
  %556 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %555, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313) #3, !dbg !72
  %557 = extractvalue { i32, i32, i32, i32 } %556, 0, !dbg !72
  %558 = extractvalue { i32, i32, i32, i32 } %556, 1, !dbg !72
  %559 = extractvalue { i32, i32, i32, i32 } %556, 2, !dbg !72
  %560 = extractvalue { i32, i32, i32, i32 } %556, 3, !dbg !72
  %561 = bitcast i32 %557 to float, !dbg !72
  %562 = bitcast i32 %558 to float, !dbg !72
  %563 = bitcast i32 %559 to float, !dbg !72
  %564 = bitcast i32 %560 to float, !dbg !72
  %565 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %555, i1 %314, i32 0, i1 %314, i32 0, i1 %314, i32 0, i1 %314, i32 0, i1 %314) #3, !dbg !72
  %566 = extractvalue { i32, i32, i32, i32 } %565, 0, !dbg !72
  %567 = extractvalue { i32, i32, i32, i32 } %565, 1, !dbg !72
  %568 = extractvalue { i32, i32, i32, i32 } %565, 2, !dbg !72
  %569 = extractvalue { i32, i32, i32, i32 } %565, 3, !dbg !72
  %570 = bitcast i32 %566 to float, !dbg !72
  %571 = bitcast i32 %567 to float, !dbg !72
  %572 = bitcast i32 %568 to float, !dbg !72
  %573 = bitcast i32 %569 to float, !dbg !72
  %574 = fmul float %547, %561, !dbg !73
  %575 = fmul float %548, %562, !dbg !73
  %576 = fmul float %549, %563, !dbg !73
  %577 = fmul float %550, %564, !dbg !73
  %578 = fmul float %551, %570, !dbg !73
  %579 = fmul float %552, %571, !dbg !73
  %580 = fmul float %553, %572, !dbg !73
  %581 = fmul float %554, %573, !dbg !73
  %582 = fadd float %574, %446, !dbg !74
  %583 = fadd float %575, %448, !dbg !74
  %584 = fadd float %576, %450, !dbg !74
  %585 = fadd float %577, %452, !dbg !74
  %586 = fadd float %578, %454, !dbg !74
  %587 = fadd float %579, %456, !dbg !74
  %588 = fadd float %580, %458, !dbg !74
  %589 = fadd float %581, %460, !dbg !74
  %590 = fsub float %582, %334, !dbg !75
  %591 = fsub float %583, %335, !dbg !75
  %592 = fsub float %584, %336, !dbg !75
  %593 = fsub float %585, %337, !dbg !75
  %594 = fsub float %586, %343, !dbg !75
  %595 = fsub float %587, %344, !dbg !75
  %596 = fsub float %588, %345, !dbg !75
  %597 = fsub float %589, %346, !dbg !75
  %598 = getelementptr float, ptr addrspace(1) %12, i64 %347, !dbg !76
  %599 = getelementptr float, ptr addrspace(1) %12, i64 %349, !dbg !76
  %600 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %598, i1 %313, i32 0, i1 %313) #3, !dbg !77
  %601 = bitcast i32 %600 to float, !dbg !77
  %602 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %598, i1 %313, i32 0, i1 %313) #3, !dbg !77
  %603 = bitcast i32 %602 to float, !dbg !77
  %604 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %598, i1 %313, i32 0, i1 %313) #3, !dbg !77
  %605 = bitcast i32 %604 to float, !dbg !77
  %606 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %598, i1 %313, i32 0, i1 %313) #3, !dbg !77
  %607 = bitcast i32 %606 to float, !dbg !77
  %608 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %599, i1 %314, i32 0, i1 %314) #3, !dbg !77
  %609 = bitcast i32 %608 to float, !dbg !77
  %610 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %599, i1 %314, i32 0, i1 %314) #3, !dbg !77
  %611 = bitcast i32 %610 to float, !dbg !77
  %612 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %599, i1 %314, i32 0, i1 %314) #3, !dbg !77
  %613 = bitcast i32 %612 to float, !dbg !77
  %614 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %599, i1 %314, i32 0, i1 %314) #3, !dbg !77
  %615 = bitcast i32 %614 to float, !dbg !77
  %616 = fmul float %590, %601, !dbg !78
  %617 = fmul float %591, %603, !dbg !78
  %618 = fmul float %592, %605, !dbg !78
  %619 = fmul float %593, %607, !dbg !78
  %620 = fmul float %594, %609, !dbg !78
  %621 = fmul float %595, %611, !dbg !78
  %622 = fmul float %596, %613, !dbg !78
  %623 = fmul float %597, %615, !dbg !78
  %624 = fadd float %616, %334, !dbg !79
  %625 = fadd float %617, %335, !dbg !79
  %626 = fadd float %618, %336, !dbg !79
  %627 = fadd float %619, %337, !dbg !79
  %628 = fadd float %620, %343, !dbg !79
  %629 = fadd float %621, %344, !dbg !79
  %630 = fadd float %622, %345, !dbg !79
  %631 = fadd float %623, %346, !dbg !79
  %632 = select i1 %29, float %305, float %624, !dbg !80
  %633 = select i1 %29, float %306, float %625, !dbg !80
  %634 = select i1 %29, float %307, float %626, !dbg !80
  %635 = select i1 %29, float %308, float %627, !dbg !80
  %636 = select i1 %30, float %309, float %628, !dbg !80
  %637 = select i1 %30, float %310, float %629, !dbg !80
  %638 = select i1 %30, float %311, float %630, !dbg !80
  %639 = select i1 %30, float %312, float %631, !dbg !80
  %640 = sext i32 %21 to i64, !dbg !81
  %641 = getelementptr float, ptr addrspace(1) %13, i64 %640, !dbg !81
  %642 = sext i32 %22 to i64, !dbg !81
  %643 = getelementptr float, ptr addrspace(1) %13, i64 %642, !dbg !81
  %644 = bitcast float %632 to i32, !dbg !82
  %645 = bitcast float %633 to i32, !dbg !82
  %646 = bitcast float %634 to i32, !dbg !82
  %647 = bitcast float %635 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %644, i32 %645, i32 %646, i32 %647, ptr addrspace(1) %641, i1 true) #3, !dbg !82
  %648 = bitcast float %636 to i32, !dbg !82
  %649 = bitcast float %637 to i32, !dbg !82
  %650 = bitcast float %638 to i32, !dbg !82
  %651 = bitcast float %639 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %648, i32 %649, i32 %650, i32 %651, ptr addrspace(1) %643, i1 true) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccqdg6taqikmz5ghenlnz4he7cqbaax6mffnqa4xcjux5iu2poji.py", directory: "inductor_cache/cq")
!4 = !{ptr @triton_poi_fused_cat_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_39", linkageName: "triton_poi_fused_cat_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 18, scope: !7)
!18 = !DILocation(line: 35, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 52, scope: !7)
!20 = !DILocation(line: 35, column: 46, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 57, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 57, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 39, column: 30, scope: !7)
!28 = !DILocation(line: 39, column: 35, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 42, column: 27, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 28, column: 19, scope: !7)
!33 = !DILocation(line: 27, column: 21, scope: !7)
!34 = !DILocation(line: 27, column: 27, scope: !7)
!35 = !DILocation(line: 26, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 19, scope: !7)
!38 = !DILocation(line: 48, column: 31, scope: !7)
!39 = !DILocation(line: 48, column: 36, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 36, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 19, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 50, scope: !7)
!47 = !DILocation(line: 58, column: 41, scope: !7)
!48 = !DILocation(line: 58, column: 62, scope: !7)
!49 = !DILocation(line: 58, column: 36, scope: !7)
!50 = !DILocation(line: 58, column: 56, scope: !7)
!51 = !DILocation(line: 58, column: 31, scope: !7)
!52 = !DILocation(line: 58, column: 67, scope: !7)
!53 = !DILocation(line: 59, column: 31, scope: !7)
!54 = !DILocation(line: 59, column: 36, scope: !7)
!55 = !DILocation(line: 63, column: 35, scope: !7)
!56 = !DILocation(line: 64, column: 31, scope: !7)
!57 = !DILocation(line: 64, column: 36, scope: !7)
!58 = !DILocation(line: 67, column: 35, scope: !7)
!59 = !DILocation(line: 68, column: 42, scope: !7)
!60 = !DILocation(line: 68, column: 56, scope: !7)
!61 = !DILocation(line: 68, column: 50, scope: !7)
!62 = !DILocation(line: 68, column: 71, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 82, scope: !7)
!65 = !DILocation(line: 69, column: 32, scope: !7)
!66 = !DILocation(line: 69, column: 37, scope: !7)
!67 = !DILocation(line: 72, column: 35, scope: !7)
!68 = !DILocation(line: 73, column: 31, scope: !7)
!69 = !DILocation(line: 73, column: 82, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 32, scope: !7)
!72 = !DILocation(line: 75, column: 37, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 79, column: 32, scope: !7)
!77 = !DILocation(line: 79, column: 37, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 20, scope: !7)
!80 = !DILocation(line: 0, scope: !7)
!81 = !DILocation(line: 85, column: 25, scope: !7)
!82 = !DILocation(line: 85, column: 37, scope: !7)
!83 = !DILocation(line: 85, column: 4, scope: !7)
