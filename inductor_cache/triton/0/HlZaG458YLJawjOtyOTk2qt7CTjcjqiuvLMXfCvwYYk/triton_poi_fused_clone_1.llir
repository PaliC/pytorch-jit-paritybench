; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = lshr i32 %7, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 16, !dbg !14
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 5, !dbg !16
  %18 = lshr i32 %7, 2, !dbg !17
  %19 = and i32 %18, 31, !dbg !17
  %20 = and i32 %8, 28, !dbg !17
  %21 = or disjoint i32 %17, %19, !dbg !18
  %22 = or disjoint i32 %17, %20, !dbg !18
  %23 = icmp slt i32 %21, 32, !dbg !19
  %24 = icmp slt i32 %22, 32, !dbg !19
  %25 = ashr exact i32 %12, 2, !dbg !20
  %26 = mul i32 %21, 12, !dbg !21
  %27 = add i32 %26, 4, !dbg !22
  %28 = mul i32 %25, 384, !dbg !23
  %29 = add i32 %27, %28, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = and i1 %14, %23, !dbg !26
  %33 = and i1 %15, %24, !dbg !26
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %32) #2, !dbg !27
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !27
  %39 = shl i32 %13, 5, !dbg !28
  %40 = add i32 %22, %39, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %43 = shl i32 %7, 7, !dbg !31
  %44 = and i32 %43, 384, !dbg !31
  %45 = or disjoint i32 %44, %19, !dbg !31
  %46 = and i32 %8, 508, !dbg !31
  %47 = lshr exact i32 %44, 5, !dbg !31
  %48 = add nuw nsw i32 %47, %45, !dbg !31
  %49 = zext nneg i32 %48 to i64, !dbg !31
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49, !dbg !31
  %51 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #2, !dbg !31
  %52 = or disjoint i32 %45, 32, !dbg !31
  %53 = lshr i32 %52, 5, !dbg !31
  %54 = add nuw nsw i32 %53, %52, !dbg !31
  %55 = zext nneg i32 %54 to i64, !dbg !31
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55, !dbg !31
  %57 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #2, !dbg !31
  %58 = or disjoint i32 %45, 64, !dbg !31
  %59 = lshr i32 %58, 5, !dbg !31
  %60 = add nuw nsw i32 %59, %58, !dbg !31
  %61 = zext nneg i32 %60 to i64, !dbg !31
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %61, !dbg !31
  %63 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !31
  %64 = or disjoint i32 %45, 96, !dbg !31
  %65 = lshr i32 %64, 5, !dbg !31
  %66 = add nuw nsw i32 %65, %64, !dbg !31
  %67 = zext nneg i32 %66 to i64, !dbg !31
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %67, !dbg !31
  %69 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %70 = lshr i32 %46, 5, !dbg !31
  %71 = add nuw nsw i32 %70, %46, !dbg !31
  %72 = zext nneg i32 %71 to i64, !dbg !31
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %72, !dbg !31
  %74 = load i32, ptr addrspace(3) %73, align 4, !dbg !31
  %75 = or disjoint i32 %46, 1, !dbg !31
  %76 = add nuw nsw i32 %75, %70, !dbg !31
  %77 = zext nneg i32 %76 to i64, !dbg !31
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %77, !dbg !31
  %79 = load i32, ptr addrspace(3) %78, align 4, !dbg !31
  %80 = or disjoint i32 %46, 2, !dbg !31
  %81 = add nuw nsw i32 %80, %70, !dbg !31
  %82 = zext nneg i32 %81 to i64, !dbg !31
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %82, !dbg !31
  %84 = load i32, ptr addrspace(3) %83, align 4, !dbg !31
  %85 = or disjoint i32 %46, 3, !dbg !31
  %86 = add nuw nsw i32 %85, %70, !dbg !31
  %87 = zext nneg i32 %86 to i64, !dbg !31
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !31
  %89 = load i32, ptr addrspace(3) %88, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %74, i32 %79, i32 %84, i32 %89, ptr addrspace(1) %42, i1 %33) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crcactnrjcrv4zfqndg2ddcwup6m7ek52ayisrwe2u3kdweoeunp.py", directory: "inductor_cache/rc")
!4 = !{ptr @triton_poi_fused_clone_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_1", linkageName: "triton_poi_fused_clone_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 64, scope: !7)
!27 = !DILocation(line: 32, column: 56, scope: !7)
!28 = !DILocation(line: 33, column: 33, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 44, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
