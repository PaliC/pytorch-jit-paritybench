; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 256, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %20 = sdiv i32 %.frozen, 64, !dbg !15
  %21 = srem i32 %18, 16, !dbg !16
  %22 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !17
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %24 = sdiv <2 x i32> %23, <i32 16, i32 4>, !dbg !17
  %25 = srem <2 x i32> %24, splat (i32 4), !dbg !18
  %26 = srem i32 %18, 4, !dbg !19
  %27 = sext i32 %18 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %19) #3, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %19) #3, !dbg !23
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %34 = bitcast i32 %32 to float, !dbg !23
  %35 = bitcast i32 %33 to float, !dbg !23
  %36 = extractelement <2 x i32> %25, i64 0, !dbg !24
  %37 = sext i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #3, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #3, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %37, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %8, i64 %37, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %19) #3, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %19) #3, !dbg !32
  %52 = icmp slt i32 %36, 2, !dbg !33
  %53 = mul i32 %20, 64, !dbg !34
  %srem.decomposed = sub i32 %.frozen, %53, !dbg !34
  %54 = shl nsw i32 %20, 6, !dbg !35
  %55 = add i32 %54, %srem.decomposed, !dbg !36
  %56 = sext i32 %55 to i64, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !37
  %58 = and i1 %19, %52, !dbg !38
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !39
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !39
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !39
  %62 = bitcast i32 %60 to float, !dbg !39
  %63 = bitcast i32 %61 to float, !dbg !39
  %64 = shl nsw i32 %36, 2, !dbg !24
  %65 = extractelement <2 x i32> %25, i64 1, !dbg !40
  %66 = add nsw i32 %64, %65, !dbg !40
  %67 = sext i32 %66 to i64, !dbg !41
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !41
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %58, i32 0, i1 %58) #3, !dbg !42
  %70 = bitcast i32 %69 to float, !dbg !42
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %58, i32 0, i1 %58) #3, !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = fadd float %62, %70, !dbg !43
  %74 = fadd float %63, %72, !dbg !43
  %75 = icmp sgt i32 %36, 1, !dbg !44
  %76 = add nsw i32 %21, 32, !dbg !45
  %77 = add nsw i32 %36, -2, !dbg !46
  %78 = shl nsw i32 %77, 4, !dbg !47
  %79 = add nsw i32 %76, %54, !dbg !48
  %80 = add i32 %79, %78, !dbg !49
  %81 = sext i32 %80 to i64, !dbg !50
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !50
  %83 = and i1 %19, %75, !dbg !51
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #3, !dbg !52
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !52
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !52
  %87 = bitcast i32 %85 to float, !dbg !52
  %88 = bitcast i32 %86 to float, !dbg !52
  %89 = shl nsw i32 %77, 2, !dbg !53
  %90 = add nsw i32 %89, %26, !dbg !54
  %91 = sext i32 %90 to i64, !dbg !55
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !55
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #3, !dbg !56
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !56
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !56
  %96 = bitcast i32 %94 to float, !dbg !56
  %97 = bitcast i32 %95 to float, !dbg !56
  %98 = fadd float %87, %96, !dbg !57
  %99 = fadd float %88, %97, !dbg !57
  %100 = select i1 %52, float %73, float %98, !dbg !58
  %101 = select i1 %52, float %74, float %99, !dbg !58
  %102 = fcmp oge float %100, 0.000000e+00, !dbg !59
  %103 = fcmp oge float %101, 0.000000e+00, !dbg !59
  %104 = select i1 %102, float 1.000000e+00, float -1.000000e+00, !dbg !60
  %105 = select i1 %103, float 1.000000e+00, float -1.000000e+00, !dbg !60
  %106 = fmul float %104, %34, !dbg !61
  %107 = fmul float %105, %35, !dbg !61
  %108 = fsub float %106, %106, !dbg !62
  %109 = fsub float %107, %107, !dbg !62
  %110 = fmul float %100, %104, !dbg !63
  %111 = fmul float %101, %105, !dbg !63
  %112 = fmul float %110, %108, !dbg !64
  %113 = fmul float %111, %109, !dbg !64
  %114 = fmul float %112, 0x3FF7154760000000, !dbg !65
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #3, !dbg !65
  %116 = fmul float %113, 0x3FF7154760000000, !dbg !65
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #3, !dbg !65
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %115) #3, !dbg !66
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %117) #3, !dbg !66
  %120 = fadd float %43, 0x3EE4F8B580000000, !dbg !67
  %121 = fadd float %45, 0x3EE4F8B580000000, !dbg !67
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %122, 0, !dbg !68
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %123, 0, !dbg !68
  br i1 %.not.i, label %129, label %124, !dbg !68

124:                                              ; preds = %12
  br i1 %.not1.i, label %127, label %125, !dbg !68

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

129:                                              ; preds = %12
  br i1 %.not1.i, label %132, label %130, !dbg !68

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %125, %127, %130, %132
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !68
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i1 = icmp eq i32 %134, 0, !dbg !68
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i4 = icmp eq i32 %135, 0, !dbg !68
  br i1 %.not.i1, label %141, label %136, !dbg !68

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %139, label %137, !dbg !68

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %144, label %142, !dbg !68

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

__nv_sqrtf.exit5:                                 ; preds = %137, %139, %142, %144
  %.0.i3 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !68
  %146 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %147 = bitcast i32 %146 to float, !dbg !21
  %148 = fmul float %119, %147, !dbg !69
  %149 = bitcast i32 %40 to float, !dbg !26
  %150 = fsub float %148, %149, !dbg !70
  %151 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %152 = bitcast i32 %151 to float, !dbg !21
  %153 = fmul float %118, %152, !dbg !69
  %154 = bitcast i32 %39 to float, !dbg !26
  %155 = fsub float %153, %154, !dbg !70
  %156 = bitcast i32 %51 to float, !dbg !32
  %157 = bitcast i32 %50 to float, !dbg !32
  %158 = bitcast i32 %48 to float, !dbg !30
  %159 = bitcast i32 %47 to float, !dbg !30
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !71
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !71
  %162 = fmul float %155, %160, !dbg !72
  %163 = fmul float %150, %161, !dbg !72
  %164 = fmul float %162, %159, !dbg !73
  %165 = fmul float %163, %158, !dbg !73
  %166 = fadd float %164, %157, !dbg !74
  %167 = fadd float %165, %156, !dbg !74
  %168 = fcmp olt float %166, 0.000000e+00, !dbg !75
  %169 = fcmp olt float %167, 0.000000e+00, !dbg !75
  %170 = select i1 %168, float 0.000000e+00, float %166, !dbg !79
  %171 = select i1 %169, float 0.000000e+00, float %167, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %146, ptr addrspace(1) %28, i1 %19) #3, !dbg !80
  %172 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !81
  %173 = bitcast float %100 to i32, !dbg !82
  %174 = bitcast float %101 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %19) #3, !dbg !82
  %175 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !83
  %176 = bitcast float %170 to i32, !dbg !84
  %177 = bitcast float %171 to i32, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 %19) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgtbae4rn723exxeisoye6dozlyex7cbus6iidkcxzkocley2phs.py", directory: "inductor_cache/gt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_unfold_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 34, scope: !7)
!21 = !DILocation(line: 30, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 42, column: 38, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 35, scope: !7)
!35 = !DILocation(line: 41, column: 48, scope: !7)
!36 = !DILocation(line: 41, column: 45, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 60, scope: !7)
!39 = !DILocation(line: 41, column: 53, scope: !7)
!40 = !DILocation(line: 42, column: 35, scope: !7)
!41 = !DILocation(line: 42, column: 30, scope: !7)
!42 = !DILocation(line: 42, column: 44, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 36, scope: !7)
!46 = !DILocation(line: 49, column: 52, scope: !7)
!47 = !DILocation(line: 49, column: 45, scope: !7)
!48 = !DILocation(line: 49, column: 41, scope: !7)
!49 = !DILocation(line: 49, column: 58, scope: !7)
!50 = !DILocation(line: 49, column: 31, scope: !7)
!51 = !DILocation(line: 49, column: 74, scope: !7)
!52 = !DILocation(line: 49, column: 66, scope: !7)
!53 = !DILocation(line: 50, column: 39, scope: !7)
!54 = !DILocation(line: 50, column: 36, scope: !7)
!55 = !DILocation(line: 50, column: 31, scope: !7)
!56 = !DILocation(line: 50, column: 52, scope: !7)
!57 = !DILocation(line: 51, column: 20, scope: !7)
!58 = !DILocation(line: 0, scope: !7)
!59 = !DILocation(line: 56, column: 21, scope: !7)
!60 = !DILocation(line: 59, column: 35, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 20, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 24, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 27, scope: !7)
!69 = !DILocation(line: 66, column: 20, scope: !7)
!70 = !DILocation(line: 67, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 20, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 76, column: 20, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlockFile(scope: !7, file: !77, discriminator: 0)
!77 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!78 = !DILocation(line: 78, column: 42, scope: !7)
!79 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !78)
!80 = !DILocation(line: 79, column: 39, scope: !7)
!81 = !DILocation(line: 80, column: 25, scope: !7)
!82 = !DILocation(line: 80, column: 37, scope: !7)
!83 = !DILocation(line: 81, column: 25, scope: !7)
!84 = !DILocation(line: 81, column: 37, scope: !7)
!85 = !DILocation(line: 81, column: 4, scope: !7)
