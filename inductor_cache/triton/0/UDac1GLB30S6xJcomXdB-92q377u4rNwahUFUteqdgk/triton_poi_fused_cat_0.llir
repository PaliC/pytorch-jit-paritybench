; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %22 = sdiv i32 %.frozen, 4, !dbg !14
  %23 = srem i32 %22, 122880, !dbg !15
  %24 = mul i32 %22, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %21, 4, !dbg !16
  %.frozen39 = freeze i32 %20, !dbg !17
  %26 = sdiv i32 %.frozen39, 491520, !dbg !17
  %27 = icmp slt i32 %23, 16384, !dbg !18
  %28 = shl nsw i32 %23, 2, !dbg !19
  %29 = mul i32 %26, 491520, !dbg !20
  %srem.decomposed = sub i32 %.frozen39, %29, !dbg !20
  %30 = add nsw i32 %28, %25, !dbg !20
  %31 = sdiv i32 %srem.decomposed, 16, !dbg !21
  %32 = mul i32 %31, 16, !dbg !22
  %.decomposed40 = sub i32 %srem.decomposed, %32, !dbg !22
  %.frozen41 = freeze i32 %30, !dbg !21
  %33 = sdiv i32 %.frozen41, 16, !dbg !21
  %34 = mul i32 %33, 16, !dbg !22
  %.decomposed42 = sub i32 %.frozen41, %34, !dbg !22
  %35 = shl nsw i32 %.decomposed40, 12, !dbg !23
  %36 = shl nsw i32 %.decomposed42, 12, !dbg !23
  %37 = shl nsw i32 %26, 16, !dbg !24
  %38 = add nsw i32 %37, %srem.decomposed, !dbg !25
  %39 = add nsw i32 %30, %37, !dbg !25
  %40 = sdiv i32 %38, 65536, !dbg !26
  %41 = sdiv i32 %39, 65536, !dbg !26
  %.lhs.trunc = trunc nsw i32 %40 to i16, !dbg !27
  %42 = srem i16 %.lhs.trunc, 4, !dbg !27
  %.sext = sext i16 %42 to i32, !dbg !27
  %.lhs.trunc1 = trunc nsw i32 %41 to i16, !dbg !27
  %43 = srem i16 %.lhs.trunc1, 4, !dbg !27
  %.sext2 = sext i16 %43 to i32, !dbg !27
  %44 = shl nsw i32 %.sext, 16, !dbg !28
  %45 = shl nsw i32 %.sext2, 16, !dbg !28
  %.lhs.trunc3 = trunc nsw i32 %31 to i16, !dbg !29
  %46 = srem i16 %.lhs.trunc3, 4096, !dbg !29
  %.sext4 = sext i16 %46 to i32, !dbg !29
  %.lhs.trunc5 = trunc nsw i32 %33 to i16, !dbg !29
  %47 = srem i16 %.lhs.trunc5, 4096, !dbg !29
  %.sext6 = sext i16 %47 to i32, !dbg !29
  %48 = add nsw i32 %35, %.sext4, !dbg !30
  %49 = add nsw i32 %48, %44, !dbg !31
  %50 = add nsw i32 %36, %.sext6, !dbg !30
  %51 = add nsw i32 %50, %45, !dbg !31
  %52 = sext i32 %49 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !32
  %54 = sext i32 %51 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %27, i32 0, i1 %27) #1, !dbg !33
  %57 = bitcast i32 %56 to float, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %27, i32 0, i1 %27) #1, !dbg !33
  %59 = bitcast i32 %58 to float, !dbg !33
  %60 = sext i32 %.decomposed40 to i64, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !34
  %62 = sext i32 %.decomposed42 to i64, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %27, i32 0, i1 %27) #1, !dbg !35
  %65 = bitcast i32 %64 to float, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %27, i32 0, i1 %27) #1, !dbg !35
  %67 = bitcast i32 %66 to float, !dbg !35
  %68 = fadd float %57, %65, !dbg !36
  %69 = fadd float %59, %67, !dbg !36
  %70 = add nsw i32 %23, -16384, !dbg !37
  %71 = icmp ult i32 %70, 24576, !dbg !37
  %72 = add nsw i32 %28, -65536, !dbg !38
  %73 = add nsw i32 %72, %.decomposed, !dbg !39
  %74 = add nsw i32 %72, %25, !dbg !39
  %75 = sdiv i32 %73, 24, !dbg !40
  %76 = mul i32 %75, 24, !dbg !41
  %.decomposed43 = sub i32 %73, %76, !dbg !41
  %.frozen44 = freeze i32 %74, !dbg !40
  %77 = sdiv i32 %.frozen44, 24, !dbg !40
  %78 = mul i32 %77, 24, !dbg !41
  %.decomposed45 = sub i32 %.frozen44, %78, !dbg !41
  %79 = shl nsw i32 %.decomposed43, 12, !dbg !42
  %80 = shl nsw i32 %.decomposed45, 12, !dbg !42
  %81 = mul nsw i32 %26, 98304, !dbg !43
  %82 = add nsw i32 %73, %81, !dbg !44
  %83 = add nsw i32 %74, %81, !dbg !44
  %84 = sdiv i32 %82, 98304, !dbg !45
  %85 = sdiv i32 %83, 98304, !dbg !45
  %.lhs.trunc7 = trunc nsw i32 %84 to i16, !dbg !46
  %86 = srem i16 %.lhs.trunc7, 4, !dbg !46
  %.sext8 = sext i16 %86 to i32, !dbg !46
  %.lhs.trunc9 = trunc nsw i32 %85 to i16, !dbg !46
  %87 = srem i16 %.lhs.trunc9, 4, !dbg !46
  %.sext10 = sext i16 %87 to i32, !dbg !46
  %88 = mul nsw i32 %.sext8, 98304, !dbg !47
  %89 = mul nsw i32 %.sext10, 98304, !dbg !47
  %.lhs.trunc11 = trunc nsw i32 %75 to i16, !dbg !48
  %90 = srem i16 %.lhs.trunc11, 4096, !dbg !48
  %.sext12 = sext i16 %90 to i32, !dbg !48
  %.lhs.trunc13 = trunc nsw i32 %77 to i16, !dbg !48
  %91 = srem i16 %.lhs.trunc13, 4096, !dbg !48
  %.sext14 = sext i16 %91 to i32, !dbg !48
  %92 = add nsw i32 %79, %.sext12, !dbg !49
  %93 = add nsw i32 %92, %88, !dbg !50
  %94 = add nsw i32 %80, %.sext14, !dbg !49
  %95 = add nsw i32 %94, %89, !dbg !50
  %96 = sext i32 %93 to i64, !dbg !51
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !51
  %98 = sext i32 %95 to i64, !dbg !51
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !51
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %71, i32 0, i1 %71) #1, !dbg !52
  %101 = bitcast i32 %100 to float, !dbg !52
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %71, i32 0, i1 %71) #1, !dbg !52
  %103 = bitcast i32 %102 to float, !dbg !52
  %104 = sext i32 %.decomposed43 to i64, !dbg !53
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !53
  %106 = sext i32 %.decomposed45 to i64, !dbg !53
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !53
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %71, i32 0, i1 %71) #1, !dbg !54
  %109 = bitcast i32 %108 to float, !dbg !54
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %71, i32 0, i1 %71) #1, !dbg !54
  %111 = bitcast i32 %110 to float, !dbg !54
  %112 = fadd float %101, %109, !dbg !55
  %113 = fadd float %103, %111, !dbg !55
  %114 = add nsw i32 %23, -40960, !dbg !56
  %115 = icmp ult i32 %114, 24576, !dbg !56
  %116 = add nsw i32 %28, -163840, !dbg !57
  %117 = add nsw i32 %116, %.decomposed, !dbg !58
  %118 = add nsw i32 %116, %25, !dbg !58
  %119 = sdiv i32 %117, 24, !dbg !59
  %120 = mul i32 %119, 24, !dbg !60
  %.decomposed46 = sub i32 %117, %120, !dbg !60
  %.frozen47 = freeze i32 %118, !dbg !59
  %121 = sdiv i32 %.frozen47, 24, !dbg !59
  %122 = mul i32 %121, 24, !dbg !60
  %.decomposed48 = sub i32 %.frozen47, %122, !dbg !60
  %123 = shl nsw i32 %.decomposed46, 12, !dbg !61
  %124 = shl nsw i32 %.decomposed48, 12, !dbg !61
  %125 = add nsw i32 %117, %81, !dbg !62
  %126 = add nsw i32 %118, %81, !dbg !62
  %127 = sdiv i32 %125, 98304, !dbg !63
  %128 = sdiv i32 %126, 98304, !dbg !63
  %.lhs.trunc15 = trunc nsw i32 %127 to i16, !dbg !64
  %129 = srem i16 %.lhs.trunc15, 4, !dbg !64
  %.sext16 = sext i16 %129 to i32, !dbg !64
  %.lhs.trunc17 = trunc nsw i32 %128 to i16, !dbg !64
  %130 = srem i16 %.lhs.trunc17, 4, !dbg !64
  %.sext18 = sext i16 %130 to i32, !dbg !64
  %131 = mul nsw i32 %.sext16, 98304, !dbg !65
  %132 = mul nsw i32 %.sext18, 98304, !dbg !65
  %.lhs.trunc19 = trunc nsw i32 %119 to i16, !dbg !66
  %133 = srem i16 %.lhs.trunc19, 4096, !dbg !66
  %.sext20 = sext i16 %133 to i32, !dbg !66
  %.lhs.trunc21 = trunc nsw i32 %121 to i16, !dbg !66
  %134 = srem i16 %.lhs.trunc21, 4096, !dbg !66
  %.sext22 = sext i16 %134 to i32, !dbg !66
  %135 = add nsw i32 %123, %.sext20, !dbg !67
  %136 = add nsw i32 %135, %131, !dbg !68
  %137 = add nsw i32 %124, %.sext22, !dbg !67
  %138 = add nsw i32 %137, %132, !dbg !68
  %139 = sext i32 %136 to i64, !dbg !69
  %140 = getelementptr float, ptr addrspace(1) %4, i64 %139, !dbg !69
  %141 = sext i32 %138 to i64, !dbg !69
  %142 = getelementptr float, ptr addrspace(1) %4, i64 %141, !dbg !69
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %115, i32 0, i1 %115) #1, !dbg !70
  %144 = bitcast i32 %143 to float, !dbg !70
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %115, i32 0, i1 %115) #1, !dbg !70
  %146 = bitcast i32 %145 to float, !dbg !70
  %147 = sext i32 %.decomposed46 to i64, !dbg !71
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %147, !dbg !71
  %149 = sext i32 %.decomposed48 to i64, !dbg !71
  %150 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !71
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %115, i32 0, i1 %115) #1, !dbg !72
  %152 = bitcast i32 %151 to float, !dbg !72
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %115, i32 0, i1 %115) #1, !dbg !72
  %154 = bitcast i32 %153 to float, !dbg !72
  %155 = fadd float %144, %152, !dbg !73
  %156 = fadd float %146, %154, !dbg !73
  %157 = add nsw i32 %23, -65536, !dbg !74
  %158 = icmp ult i32 %157, 24576, !dbg !74
  %159 = add nsw i32 %28, -262144, !dbg !75
  %160 = add nsw i32 %159, %.decomposed, !dbg !76
  %161 = add nsw i32 %159, %25, !dbg !76
  %162 = sdiv i32 %160, 24, !dbg !77
  %163 = mul i32 %162, 24, !dbg !78
  %.decomposed49 = sub i32 %160, %163, !dbg !78
  %.frozen50 = freeze i32 %161, !dbg !77
  %164 = sdiv i32 %.frozen50, 24, !dbg !77
  %165 = mul i32 %164, 24, !dbg !78
  %.decomposed51 = sub i32 %.frozen50, %165, !dbg !78
  %166 = shl nsw i32 %.decomposed49, 12, !dbg !79
  %167 = shl nsw i32 %.decomposed51, 12, !dbg !79
  %168 = add nsw i32 %160, %81, !dbg !80
  %169 = add nsw i32 %161, %81, !dbg !80
  %170 = sdiv i32 %168, 98304, !dbg !81
  %171 = sdiv i32 %169, 98304, !dbg !81
  %.lhs.trunc23 = trunc nsw i32 %170 to i16, !dbg !82
  %172 = srem i16 %.lhs.trunc23, 4, !dbg !82
  %.sext24 = sext i16 %172 to i32, !dbg !82
  %.lhs.trunc25 = trunc nsw i32 %171 to i16, !dbg !82
  %173 = srem i16 %.lhs.trunc25, 4, !dbg !82
  %.sext26 = sext i16 %173 to i32, !dbg !82
  %174 = mul nsw i32 %.sext24, 98304, !dbg !83
  %175 = mul nsw i32 %.sext26, 98304, !dbg !83
  %.lhs.trunc27 = trunc nsw i32 %162 to i16, !dbg !84
  %176 = srem i16 %.lhs.trunc27, 4096, !dbg !84
  %.sext28 = sext i16 %176 to i32, !dbg !84
  %.lhs.trunc29 = trunc nsw i32 %164 to i16, !dbg !84
  %177 = srem i16 %.lhs.trunc29, 4096, !dbg !84
  %.sext30 = sext i16 %177 to i32, !dbg !84
  %178 = add nsw i32 %166, %.sext28, !dbg !85
  %179 = add nsw i32 %178, %174, !dbg !86
  %180 = add nsw i32 %167, %.sext30, !dbg !85
  %181 = add nsw i32 %180, %175, !dbg !86
  %182 = sext i32 %179 to i64, !dbg !87
  %183 = getelementptr float, ptr addrspace(1) %6, i64 %182, !dbg !87
  %184 = sext i32 %181 to i64, !dbg !87
  %185 = getelementptr float, ptr addrspace(1) %6, i64 %184, !dbg !87
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %158, i32 0, i1 %158) #1, !dbg !88
  %187 = bitcast i32 %186 to float, !dbg !88
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %158, i32 0, i1 %158) #1, !dbg !88
  %189 = bitcast i32 %188 to float, !dbg !88
  %190 = sext i32 %.decomposed49 to i64, !dbg !89
  %191 = getelementptr float, ptr addrspace(1) %7, i64 %190, !dbg !89
  %192 = sext i32 %.decomposed51 to i64, !dbg !89
  %193 = getelementptr float, ptr addrspace(1) %7, i64 %192, !dbg !89
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %158, i32 0, i1 %158) #1, !dbg !90
  %195 = bitcast i32 %194 to float, !dbg !90
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %158, i32 0, i1 %158) #1, !dbg !90
  %197 = bitcast i32 %196 to float, !dbg !90
  %198 = fadd float %187, %195, !dbg !91
  %199 = fadd float %189, %197, !dbg !91
  %200 = add nsw i32 %23, -90112, !dbg !92
  %201 = icmp ult i32 %200, 16384, !dbg !92
  %202 = add nsw i32 %28, -360448, !dbg !93
  %203 = add nsw i32 %202, %.decomposed, !dbg !94
  %204 = add nsw i32 %202, %25, !dbg !94
  %205 = sdiv i32 %203, 16, !dbg !95
  %206 = mul i32 %205, 16, !dbg !96
  %.decomposed52 = sub i32 %203, %206, !dbg !96
  %.frozen53 = freeze i32 %204, !dbg !95
  %207 = sdiv i32 %.frozen53, 16, !dbg !95
  %208 = mul i32 %207, 16, !dbg !96
  %.decomposed54 = sub i32 %.frozen53, %208, !dbg !96
  %209 = shl nsw i32 %.decomposed52, 12, !dbg !97
  %210 = shl nsw i32 %.decomposed54, 12, !dbg !97
  %211 = add nsw i32 %203, %37, !dbg !98
  %212 = add nsw i32 %204, %37, !dbg !98
  %213 = sdiv i32 %211, 65536, !dbg !99
  %214 = sdiv i32 %212, 65536, !dbg !99
  %.lhs.trunc31 = trunc nsw i32 %213 to i16, !dbg !100
  %215 = srem i16 %.lhs.trunc31, 4, !dbg !100
  %.sext32 = sext i16 %215 to i32, !dbg !100
  %.lhs.trunc33 = trunc nsw i32 %214 to i16, !dbg !100
  %216 = srem i16 %.lhs.trunc33, 4, !dbg !100
  %.sext34 = sext i16 %216 to i32, !dbg !100
  %217 = shl nsw i32 %.sext32, 16, !dbg !101
  %218 = shl nsw i32 %.sext34, 16, !dbg !101
  %219 = srem i32 %205, 4096, !dbg !102
  %220 = srem i32 %207, 4096, !dbg !102
  %221 = add nsw i32 %219, %209, !dbg !103
  %222 = add nsw i32 %221, %217, !dbg !104
  %223 = add nsw i32 %220, %210, !dbg !103
  %224 = add nsw i32 %223, %218, !dbg !104
  %225 = sext i32 %222 to i64, !dbg !105
  %226 = getelementptr float, ptr addrspace(1) %8, i64 %225, !dbg !105
  %227 = sext i32 %224 to i64, !dbg !105
  %228 = getelementptr float, ptr addrspace(1) %8, i64 %227, !dbg !105
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %201, i32 0, i1 %201) #1, !dbg !106
  %230 = bitcast i32 %229 to float, !dbg !106
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %201, i32 0, i1 %201) #1, !dbg !106
  %232 = bitcast i32 %231 to float, !dbg !106
  %233 = sext i32 %.decomposed52 to i64, !dbg !107
  %234 = getelementptr float, ptr addrspace(1) %9, i64 %233, !dbg !107
  %235 = sext i32 %.decomposed54 to i64, !dbg !107
  %236 = getelementptr float, ptr addrspace(1) %9, i64 %235, !dbg !107
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %201, i32 0, i1 %201) #1, !dbg !108
  %238 = bitcast i32 %237 to float, !dbg !108
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %201, i32 0, i1 %201) #1, !dbg !108
  %240 = bitcast i32 %239 to float, !dbg !108
  %241 = fadd float %230, %238, !dbg !109
  %242 = fadd float %232, %240, !dbg !109
  %243 = icmp sgt i32 %23, 106495, !dbg !110
  %244 = add nsw i32 %28, -425984, !dbg !111
  %245 = add nsw i32 %244, %.decomposed, !dbg !112
  %246 = add nsw i32 %244, %25, !dbg !112
  %247 = sdiv i32 %245, 16, !dbg !113
  %248 = mul i32 %247, 16, !dbg !114
  %.decomposed55 = sub i32 %245, %248, !dbg !114
  %.frozen56 = freeze i32 %246, !dbg !113
  %249 = sdiv i32 %.frozen56, 16, !dbg !113
  %250 = mul i32 %249, 16, !dbg !114
  %.decomposed57 = sub i32 %.frozen56, %250, !dbg !114
  %251 = shl nsw i32 %.decomposed55, 12, !dbg !115
  %252 = shl nsw i32 %.decomposed57, 12, !dbg !115
  %253 = add nsw i32 %245, %37, !dbg !116
  %254 = add nsw i32 %246, %37, !dbg !116
  %255 = sdiv i32 %253, 65536, !dbg !117
  %256 = sdiv i32 %254, 65536, !dbg !117
  %.lhs.trunc35 = trunc nsw i32 %255 to i16, !dbg !118
  %257 = srem i16 %.lhs.trunc35, 4, !dbg !118
  %.sext36 = sext i16 %257 to i32, !dbg !118
  %.lhs.trunc37 = trunc nsw i32 %256 to i16, !dbg !118
  %258 = srem i16 %.lhs.trunc37, 4, !dbg !118
  %.sext38 = sext i16 %258 to i32, !dbg !118
  %259 = shl nsw i32 %.sext36, 16, !dbg !119
  %260 = shl nsw i32 %.sext38, 16, !dbg !119
  %261 = srem i32 %247, 4096, !dbg !120
  %262 = srem i32 %249, 4096, !dbg !120
  %263 = add nsw i32 %261, %251, !dbg !121
  %264 = add nsw i32 %263, %259, !dbg !122
  %265 = add nsw i32 %262, %252, !dbg !121
  %266 = add nsw i32 %265, %260, !dbg !122
  %267 = sext i32 %264 to i64, !dbg !123
  %268 = getelementptr float, ptr addrspace(1) %10, i64 %267, !dbg !123
  %269 = sext i32 %266 to i64, !dbg !123
  %270 = getelementptr float, ptr addrspace(1) %10, i64 %269, !dbg !123
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %243, i32 0, i1 %243) #1, !dbg !124
  %272 = bitcast i32 %271 to float, !dbg !124
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %243, i32 0, i1 %243) #1, !dbg !124
  %274 = bitcast i32 %273 to float, !dbg !124
  %275 = sext i32 %.decomposed55 to i64, !dbg !125
  %276 = getelementptr float, ptr addrspace(1) %11, i64 %275, !dbg !125
  %277 = sext i32 %.decomposed57 to i64, !dbg !125
  %278 = getelementptr float, ptr addrspace(1) %11, i64 %277, !dbg !125
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %243, i32 0, i1 %243) #1, !dbg !126
  %280 = bitcast i32 %279 to float, !dbg !126
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %243, i32 0, i1 %243) #1, !dbg !126
  %282 = bitcast i32 %281 to float, !dbg !126
  %283 = fadd float %272, %280, !dbg !127
  %284 = fadd float %274, %282, !dbg !127
  %285 = select i1 %243, float %283, float 0.000000e+00, !dbg !128
  %286 = select i1 %243, float %284, float 0.000000e+00, !dbg !128
  %287 = select i1 %201, float %241, float %285, !dbg !129
  %288 = select i1 %201, float %242, float %286, !dbg !129
  %289 = select i1 %158, float %198, float %287, !dbg !129
  %290 = select i1 %158, float %199, float %288, !dbg !129
  %291 = select i1 %115, float %155, float %289, !dbg !129
  %292 = select i1 %115, float %156, float %290, !dbg !129
  %293 = select i1 %71, float %112, float %291, !dbg !129
  %294 = select i1 %71, float %113, float %292, !dbg !129
  %295 = select i1 %27, float %68, float %293, !dbg !129
  %296 = select i1 %27, float %69, float %294, !dbg !129
  %297 = sext i32 %20 to i64, !dbg !130
  %298 = getelementptr float, ptr addrspace(1) %12, i64 %297, !dbg !130
  %299 = bitcast float %295 to i32, !dbg !131
  %300 = bitcast float %296 to i32, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %299, i32 %300, ptr addrspace(1) %298, i1 true) #1, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c64izzbgmessc4ppnvumn2vm2yn3rxmmiwz6xbibwyl46mvse5r6.py", directory: "inductor_cache/64")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 46, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 132, scope: !7)
!22 = !DILocation(line: 33, column: 53, scope: !7)
!23 = !DILocation(line: 33, column: 37, scope: !7)
!24 = !DILocation(line: 33, column: 90, scope: !7)
!25 = !DILocation(line: 33, column: 84, scope: !7)
!26 = !DILocation(line: 33, column: 97, scope: !7)
!27 = !DILocation(line: 33, column: 106, scope: !7)
!28 = !DILocation(line: 33, column: 68, scope: !7)
!29 = !DILocation(line: 33, column: 138, scope: !7)
!30 = !DILocation(line: 33, column: 60, scope: !7)
!31 = !DILocation(line: 33, column: 114, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 147, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 53, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 47, scope: !7)
!39 = !DILocation(line: 42, column: 44, scope: !7)
!40 = !DILocation(line: 42, column: 166, scope: !7)
!41 = !DILocation(line: 42, column: 65, scope: !7)
!42 = !DILocation(line: 42, column: 38, scope: !7)
!43 = !DILocation(line: 42, column: 113, scope: !7)
!44 = !DILocation(line: 42, column: 107, scope: !7)
!45 = !DILocation(line: 42, column: 120, scope: !7)
!46 = !DILocation(line: 42, column: 129, scope: !7)
!47 = !DILocation(line: 42, column: 80, scope: !7)
!48 = !DILocation(line: 42, column: 172, scope: !7)
!49 = !DILocation(line: 42, column: 72, scope: !7)
!50 = !DILocation(line: 42, column: 137, scope: !7)
!51 = !DILocation(line: 42, column: 31, scope: !7)
!52 = !DILocation(line: 42, column: 181, scope: !7)
!53 = !DILocation(line: 43, column: 32, scope: !7)
!54 = !DILocation(line: 43, column: 65, scope: !7)
!55 = !DILocation(line: 44, column: 20, scope: !7)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 47, scope: !7)
!58 = !DILocation(line: 51, column: 44, scope: !7)
!59 = !DILocation(line: 51, column: 166, scope: !7)
!60 = !DILocation(line: 51, column: 65, scope: !7)
!61 = !DILocation(line: 51, column: 38, scope: !7)
!62 = !DILocation(line: 51, column: 107, scope: !7)
!63 = !DILocation(line: 51, column: 120, scope: !7)
!64 = !DILocation(line: 51, column: 129, scope: !7)
!65 = !DILocation(line: 51, column: 80, scope: !7)
!66 = !DILocation(line: 51, column: 172, scope: !7)
!67 = !DILocation(line: 51, column: 72, scope: !7)
!68 = !DILocation(line: 51, column: 137, scope: !7)
!69 = !DILocation(line: 51, column: 31, scope: !7)
!70 = !DILocation(line: 51, column: 181, scope: !7)
!71 = !DILocation(line: 52, column: 32, scope: !7)
!72 = !DILocation(line: 52, column: 65, scope: !7)
!73 = !DILocation(line: 53, column: 20, scope: !7)
!74 = !DILocation(line: 59, column: 20, scope: !7)
!75 = !DILocation(line: 60, column: 47, scope: !7)
!76 = !DILocation(line: 60, column: 44, scope: !7)
!77 = !DILocation(line: 60, column: 166, scope: !7)
!78 = !DILocation(line: 60, column: 65, scope: !7)
!79 = !DILocation(line: 60, column: 38, scope: !7)
!80 = !DILocation(line: 60, column: 107, scope: !7)
!81 = !DILocation(line: 60, column: 120, scope: !7)
!82 = !DILocation(line: 60, column: 129, scope: !7)
!83 = !DILocation(line: 60, column: 80, scope: !7)
!84 = !DILocation(line: 60, column: 172, scope: !7)
!85 = !DILocation(line: 60, column: 72, scope: !7)
!86 = !DILocation(line: 60, column: 137, scope: !7)
!87 = !DILocation(line: 60, column: 31, scope: !7)
!88 = !DILocation(line: 60, column: 181, scope: !7)
!89 = !DILocation(line: 61, column: 32, scope: !7)
!90 = !DILocation(line: 61, column: 65, scope: !7)
!91 = !DILocation(line: 62, column: 20, scope: !7)
!92 = !DILocation(line: 68, column: 20, scope: !7)
!93 = !DILocation(line: 69, column: 47, scope: !7)
!94 = !DILocation(line: 69, column: 44, scope: !7)
!95 = !DILocation(line: 69, column: 166, scope: !7)
!96 = !DILocation(line: 69, column: 65, scope: !7)
!97 = !DILocation(line: 69, column: 38, scope: !7)
!98 = !DILocation(line: 69, column: 107, scope: !7)
!99 = !DILocation(line: 69, column: 120, scope: !7)
!100 = !DILocation(line: 69, column: 129, scope: !7)
!101 = !DILocation(line: 69, column: 80, scope: !7)
!102 = !DILocation(line: 69, column: 172, scope: !7)
!103 = !DILocation(line: 69, column: 72, scope: !7)
!104 = !DILocation(line: 69, column: 137, scope: !7)
!105 = !DILocation(line: 69, column: 31, scope: !7)
!106 = !DILocation(line: 69, column: 181, scope: !7)
!107 = !DILocation(line: 70, column: 32, scope: !7)
!108 = !DILocation(line: 70, column: 65, scope: !7)
!109 = !DILocation(line: 71, column: 20, scope: !7)
!110 = !DILocation(line: 74, column: 20, scope: !7)
!111 = !DILocation(line: 77, column: 48, scope: !7)
!112 = !DILocation(line: 77, column: 45, scope: !7)
!113 = !DILocation(line: 77, column: 170, scope: !7)
!114 = !DILocation(line: 77, column: 67, scope: !7)
!115 = !DILocation(line: 77, column: 39, scope: !7)
!116 = !DILocation(line: 77, column: 110, scope: !7)
!117 = !DILocation(line: 77, column: 123, scope: !7)
!118 = !DILocation(line: 77, column: 132, scope: !7)
!119 = !DILocation(line: 77, column: 82, scope: !7)
!120 = !DILocation(line: 77, column: 176, scope: !7)
!121 = !DILocation(line: 77, column: 74, scope: !7)
!122 = !DILocation(line: 77, column: 140, scope: !7)
!123 = !DILocation(line: 77, column: 32, scope: !7)
!124 = !DILocation(line: 77, column: 185, scope: !7)
!125 = !DILocation(line: 78, column: 33, scope: !7)
!126 = !DILocation(line: 78, column: 67, scope: !7)
!127 = !DILocation(line: 79, column: 20, scope: !7)
!128 = !DILocation(line: 81, column: 35, scope: !7)
!129 = !DILocation(line: 0, scope: !7)
!130 = !DILocation(line: 87, column: 25, scope: !7)
!131 = !DILocation(line: 87, column: 37, scope: !7)
!132 = !DILocation(line: 87, column: 4, scope: !7)
