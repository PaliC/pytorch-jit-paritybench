; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 784, !dbg !14
  %16 = icmp slt i32 %14, 784, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 6, !dbg !16
  %19 = shl i32 %8, 4, !dbg !17
  %20 = and i32 %19, 48, !dbg !17
  %21 = lshr i32 %8, 4, !dbg !17
  %22 = and i32 %21, 15, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %23, 8, !dbg !18
  %26 = or disjoint i32 %23, 12, !dbg !18
  %27 = or disjoint i32 %18, %22, !dbg !18
  %28 = or disjoint i32 %27, 16, !dbg !18
  %29 = or disjoint i32 %27, 32, !dbg !18
  %30 = or disjoint i32 %27, 48, !dbg !18
  %31 = icmp slt i32 %23, 64, !dbg !19
  %32 = icmp slt i32 %27, 64, !dbg !19
  %33 = icmp slt i32 %28, 64, !dbg !19
  %34 = icmp slt i32 %29, 64, !dbg !19
  %35 = icmp slt i32 %30, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %36 = sdiv i32 %.frozen, 14, !dbg !20
  %37 = mul i32 %36, 14, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %.frozen40 = freeze i32 %14, !dbg !22
  %38 = sdiv i32 %.frozen40, 196, !dbg !22
  %39 = mul i32 %38, 196, !dbg !23
  %.decomposed41 = sub i32 %.frozen40, %39, !dbg !23
  %40 = shl nsw i32 %.decomposed, 7, !dbg !24
  %41 = mul i32 %36, 3584, !dbg !25
  %42 = add i32 %41, %40, !dbg !26
  %43 = add i32 %42, %23, !dbg !27
  %44 = add i32 %42, %24, !dbg !27
  %45 = add i32 %42, %25, !dbg !27
  %46 = add i32 %42, %26, !dbg !27
  %47 = sext i32 %43 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = sext i32 %44 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %45 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %46 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = and i1 %15, %31, !dbg !29
  %56 = and i1 %16, %32, !dbg !29
  %57 = and i1 %33, %16, !dbg !29
  %58 = and i1 %34, %16, !dbg !29
  %59 = and i1 %35, %16, !dbg !29
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %55) #2, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %55) #2, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %55) #2, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %55) #2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !30
  %80 = or disjoint i32 %42, 64, !dbg !31
  %81 = add i32 %80, %23, !dbg !32
  %82 = add i32 %80, %24, !dbg !32
  %83 = add i32 %80, %25, !dbg !32
  %84 = add i32 %80, %26, !dbg !32
  %85 = sext i32 %81 to i64, !dbg !33
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !33
  %87 = sext i32 %82 to i64, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !33
  %89 = sext i32 %83 to i64, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !33
  %91 = sext i32 %84 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !33
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %55) #2, !dbg !34
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %55) #2, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %55) #2, !dbg !34
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !34
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %55) #2, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !34
  %113 = add i32 %42, 1792, !dbg !35
  %114 = add i32 %113, %23, !dbg !36
  %115 = add i32 %113, %24, !dbg !36
  %116 = add i32 %113, %25, !dbg !36
  %117 = add i32 %113, %26, !dbg !36
  %118 = sext i32 %114 to i64, !dbg !37
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !37
  %120 = sext i32 %115 to i64, !dbg !37
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !37
  %122 = sext i32 %116 to i64, !dbg !37
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !37
  %124 = sext i32 %117 to i64, !dbg !37
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !37
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %55) #2, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !38
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %55) #2, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !38
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %55) #2, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !38
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %55) #2, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !38
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !38
  %146 = add i32 %42, 1856, !dbg !39
  %147 = add i32 %146, %23, !dbg !40
  %148 = add i32 %146, %24, !dbg !40
  %149 = add i32 %146, %25, !dbg !40
  %150 = add i32 %146, %26, !dbg !40
  %151 = sext i32 %147 to i64, !dbg !41
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !41
  %153 = sext i32 %148 to i64, !dbg !41
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !41
  %155 = sext i32 %149 to i64, !dbg !41
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !41
  %157 = sext i32 %150 to i64, !dbg !41
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !41
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %55) #2, !dbg !42
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !42
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !42
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !42
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !42
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %55) #2, !dbg !42
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !42
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !42
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !42
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !42
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %55) #2, !dbg !42
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !42
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !42
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !42
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !42
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %55) #2, !dbg !42
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !42
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !42
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !42
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !42
  %179 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !30
  %180 = insertelement <4 x i32> %179, i32 %62, i64 1, !dbg !30
  %181 = insertelement <4 x i32> %180, i32 %63, i64 2, !dbg !30
  %182 = insertelement <4 x i32> %181, i32 %64, i64 3, !dbg !30
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !30
  %184 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !34
  %185 = insertelement <4 x i32> %184, i32 %95, i64 1, !dbg !34
  %186 = insertelement <4 x i32> %185, i32 %96, i64 2, !dbg !34
  %187 = insertelement <4 x i32> %186, i32 %97, i64 3, !dbg !34
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !34
  %189 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !38
  %190 = insertelement <4 x i32> %189, i32 %128, i64 1, !dbg !38
  %191 = insertelement <4 x i32> %190, i32 %129, i64 2, !dbg !38
  %192 = insertelement <4 x i32> %191, i32 %130, i64 3, !dbg !38
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !38
  %194 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !42
  %195 = insertelement <4 x i32> %194, i32 %161, i64 1, !dbg !42
  %196 = insertelement <4 x i32> %195, i32 %162, i64 2, !dbg !42
  %197 = insertelement <4 x i32> %196, i32 %163, i64 3, !dbg !42
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !42
  %199 = fcmp ogt <4 x float> %188, %183, !dbg !43
  %200 = zext <4 x i1> %199 to <4 x i8>, !dbg !44
  %201 = fcmp uno <4 x float> %188, zeroinitializer, !dbg !45
  %202 = or <4 x i1> %199, %201, !dbg !49
  %.v = select <4 x i1> %202, <4 x i32> %187, <4 x i32> %182, !dbg !50
  %203 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %204 = fcmp olt <4 x float> %203, %193, !dbg !51
  %205 = select <4 x i1> %204, <4 x i8> splat (i8 2), <4 x i8> %200, !dbg !52
  %206 = fcmp uno <4 x float> %193, zeroinitializer, !dbg !53
  %207 = or <4 x i1> %204, %206, !dbg !55
  %.v33 = select <4 x i1> %207, <4 x i32> %192, <4 x i32> %.v, !dbg !56
  %208 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !56
  %209 = shufflevector <4 x float> %208, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %210 = fcmp olt <4 x float> %208, %198, !dbg !57
  %211 = shufflevector <4 x i1> %210, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %212 = select <4 x i1> %210, <4 x i8> splat (i8 3), <4 x i8> %205, !dbg !58
  %213 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !30
  %214 = insertelement <4 x i32> %213, i32 %67, i64 1, !dbg !30
  %215 = insertelement <4 x i32> %214, i32 %68, i64 2, !dbg !30
  %216 = insertelement <4 x i32> %215, i32 %69, i64 3, !dbg !30
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !30
  %218 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !34
  %219 = insertelement <4 x i32> %218, i32 %100, i64 1, !dbg !34
  %220 = insertelement <4 x i32> %219, i32 %101, i64 2, !dbg !34
  %221 = insertelement <4 x i32> %220, i32 %102, i64 3, !dbg !34
  %222 = bitcast <4 x i32> %221 to <4 x float>, !dbg !34
  %223 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !38
  %224 = insertelement <4 x i32> %223, i32 %133, i64 1, !dbg !38
  %225 = insertelement <4 x i32> %224, i32 %134, i64 2, !dbg !38
  %226 = insertelement <4 x i32> %225, i32 %135, i64 3, !dbg !38
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !38
  %228 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !42
  %229 = insertelement <4 x i32> %228, i32 %166, i64 1, !dbg !42
  %230 = insertelement <4 x i32> %229, i32 %167, i64 2, !dbg !42
  %231 = insertelement <4 x i32> %230, i32 %168, i64 3, !dbg !42
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !42
  %233 = fcmp ogt <4 x float> %222, %217, !dbg !43
  %234 = zext <4 x i1> %233 to <4 x i8>, !dbg !44
  %235 = fcmp uno <4 x float> %222, zeroinitializer, !dbg !45
  %236 = or <4 x i1> %233, %235, !dbg !49
  %.v34 = select <4 x i1> %236, <4 x i32> %221, <4 x i32> %216, !dbg !50
  %237 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !50
  %238 = fcmp olt <4 x float> %237, %227, !dbg !51
  %239 = select <4 x i1> %238, <4 x i8> splat (i8 2), <4 x i8> %234, !dbg !52
  %240 = fcmp uno <4 x float> %227, zeroinitializer, !dbg !53
  %241 = or <4 x i1> %238, %240, !dbg !55
  %.v35 = select <4 x i1> %241, <4 x i32> %226, <4 x i32> %.v34, !dbg !56
  %242 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !56
  %243 = shufflevector <4 x float> %242, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %244 = fcmp olt <4 x float> %242, %232, !dbg !57
  %245 = shufflevector <4 x i1> %244, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %246 = select <4 x i1> %244, <4 x i8> splat (i8 3), <4 x i8> %239, !dbg !58
  %247 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !30
  %248 = insertelement <4 x i32> %247, i32 %72, i64 1, !dbg !30
  %249 = insertelement <4 x i32> %248, i32 %73, i64 2, !dbg !30
  %250 = insertelement <4 x i32> %249, i32 %74, i64 3, !dbg !30
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !30
  %252 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !34
  %253 = insertelement <4 x i32> %252, i32 %105, i64 1, !dbg !34
  %254 = insertelement <4 x i32> %253, i32 %106, i64 2, !dbg !34
  %255 = insertelement <4 x i32> %254, i32 %107, i64 3, !dbg !34
  %256 = bitcast <4 x i32> %255 to <4 x float>, !dbg !34
  %257 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !38
  %258 = insertelement <4 x i32> %257, i32 %138, i64 1, !dbg !38
  %259 = insertelement <4 x i32> %258, i32 %139, i64 2, !dbg !38
  %260 = insertelement <4 x i32> %259, i32 %140, i64 3, !dbg !38
  %261 = bitcast <4 x i32> %260 to <4 x float>, !dbg !38
  %262 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !42
  %263 = insertelement <4 x i32> %262, i32 %171, i64 1, !dbg !42
  %264 = insertelement <4 x i32> %263, i32 %172, i64 2, !dbg !42
  %265 = insertelement <4 x i32> %264, i32 %173, i64 3, !dbg !42
  %266 = bitcast <4 x i32> %265 to <4 x float>, !dbg !42
  %267 = fcmp ogt <4 x float> %256, %251, !dbg !43
  %268 = zext <4 x i1> %267 to <4 x i8>, !dbg !44
  %269 = fcmp uno <4 x float> %256, zeroinitializer, !dbg !45
  %270 = or <4 x i1> %267, %269, !dbg !49
  %.v36 = select <4 x i1> %270, <4 x i32> %255, <4 x i32> %250, !dbg !50
  %271 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !50
  %272 = fcmp olt <4 x float> %271, %261, !dbg !51
  %273 = select <4 x i1> %272, <4 x i8> splat (i8 2), <4 x i8> %268, !dbg !52
  %274 = fcmp uno <4 x float> %261, zeroinitializer, !dbg !53
  %275 = or <4 x i1> %272, %274, !dbg !55
  %.v37 = select <4 x i1> %275, <4 x i32> %260, <4 x i32> %.v36, !dbg !56
  %276 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !56
  %277 = fcmp olt <4 x float> %276, %266, !dbg !57
  %278 = select <4 x i1> %277, <4 x i8> splat (i8 3), <4 x i8> %273, !dbg !58
  %279 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !30
  %280 = insertelement <4 x i32> %279, i32 %77, i64 1, !dbg !30
  %281 = insertelement <4 x i32> %280, i32 %78, i64 2, !dbg !30
  %282 = insertelement <4 x i32> %281, i32 %79, i64 3, !dbg !30
  %283 = bitcast <4 x i32> %282 to <4 x float>, !dbg !30
  %284 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !34
  %285 = insertelement <4 x i32> %284, i32 %110, i64 1, !dbg !34
  %286 = insertelement <4 x i32> %285, i32 %111, i64 2, !dbg !34
  %287 = insertelement <4 x i32> %286, i32 %112, i64 3, !dbg !34
  %288 = bitcast <4 x i32> %287 to <4 x float>, !dbg !34
  %289 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !38
  %290 = insertelement <4 x i32> %289, i32 %143, i64 1, !dbg !38
  %291 = insertelement <4 x i32> %290, i32 %144, i64 2, !dbg !38
  %292 = insertelement <4 x i32> %291, i32 %145, i64 3, !dbg !38
  %293 = bitcast <4 x i32> %292 to <4 x float>, !dbg !38
  %294 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !42
  %295 = insertelement <4 x i32> %294, i32 %176, i64 1, !dbg !42
  %296 = insertelement <4 x i32> %295, i32 %177, i64 2, !dbg !42
  %297 = insertelement <4 x i32> %296, i32 %178, i64 3, !dbg !42
  %298 = bitcast <4 x i32> %297 to <4 x float>, !dbg !42
  %299 = fcmp ogt <4 x float> %288, %283, !dbg !43
  %300 = zext <4 x i1> %299 to <4 x i8>, !dbg !44
  %301 = fcmp uno <4 x float> %288, zeroinitializer, !dbg !45
  %302 = or <4 x i1> %299, %301, !dbg !49
  %.v38 = select <4 x i1> %302, <4 x i32> %287, <4 x i32> %282, !dbg !50
  %303 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !50
  %304 = fcmp olt <4 x float> %303, %293, !dbg !51
  %305 = select <4 x i1> %304, <4 x i8> splat (i8 2), <4 x i8> %300, !dbg !52
  %306 = fcmp uno <4 x float> %293, zeroinitializer, !dbg !53
  %307 = or <4 x i1> %304, %306, !dbg !55
  %.v39 = select <4 x i1> %307, <4 x i32> %292, <4 x i32> %.v38, !dbg !56
  %308 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !56
  %309 = fcmp olt <4 x float> %308, %298, !dbg !57
  %310 = select <4 x i1> %309, <4 x i8> splat (i8 3), <4 x i8> %305, !dbg !58
  %311 = bitcast i32 %160 to float, !dbg !59
  %312 = bitcast i32 %161 to float, !dbg !59
  %313 = bitcast i32 %162 to float, !dbg !59
  %314 = bitcast i32 %163 to float, !dbg !59
  %315 = bitcast i32 %165 to float, !dbg !59
  %316 = bitcast i32 %166 to float, !dbg !59
  %317 = bitcast i32 %167 to float, !dbg !59
  %318 = bitcast i32 %168 to float, !dbg !59
  %319 = shufflevector <4 x float> %298, <4 x float> %266, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %320 = insertelement <16 x float> %319, float %318, i64 8, !dbg !59
  %321 = insertelement <16 x float> %320, float %317, i64 9, !dbg !59
  %322 = insertelement <16 x float> %321, float %316, i64 10, !dbg !59
  %323 = insertelement <16 x float> %322, float %315, i64 11, !dbg !59
  %324 = insertelement <16 x float> %323, float %314, i64 12, !dbg !59
  %325 = insertelement <16 x float> %324, float %313, i64 13, !dbg !59
  %326 = insertelement <16 x float> %325, float %312, i64 14, !dbg !59
  %327 = insertelement <16 x float> %326, float %311, i64 15, !dbg !59
  %328 = fcmp uno <16 x float> %327, zeroinitializer, !dbg !59
  %329 = shufflevector <4 x i1> %309, <4 x i1> %277, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %330 = shufflevector <16 x i1> %329, <16 x i1> %245, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %331 = shufflevector <16 x i1> %330, <16 x i1> %211, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !61
  %332 = or <16 x i1> %331, %328, !dbg !61
  %333 = shufflevector <4 x float> %308, <4 x float> %276, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %334 = shufflevector <16 x float> %333, <16 x float> %243, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %335 = shufflevector <16 x float> %334, <16 x float> %209, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !62
  %336 = select <16 x i1> %332, <16 x float> %327, <16 x float> %335, !dbg !62
  %337 = fcmp olt <16 x float> %336, zeroinitializer, !dbg !63
  %338 = extractelement <16 x i1> %337, i64 15, !dbg !65
  %339 = extractelement <16 x float> %336, i64 15, !dbg !65
  %340 = select i1 %338, float 0.000000e+00, float %339, !dbg !65
  %341 = extractelement <16 x i1> %337, i64 14, !dbg !65
  %342 = extractelement <16 x float> %336, i64 14, !dbg !65
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !65
  %344 = extractelement <16 x i1> %337, i64 13, !dbg !65
  %345 = extractelement <16 x float> %336, i64 13, !dbg !65
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !65
  %347 = extractelement <16 x i1> %337, i64 12, !dbg !65
  %348 = extractelement <16 x float> %336, i64 12, !dbg !65
  %349 = select i1 %347, float 0.000000e+00, float %348, !dbg !65
  %350 = extractelement <16 x i1> %337, i64 11, !dbg !65
  %351 = extractelement <16 x float> %336, i64 11, !dbg !65
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !65
  %353 = extractelement <16 x i1> %337, i64 10, !dbg !65
  %354 = extractelement <16 x float> %336, i64 10, !dbg !65
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !65
  %356 = extractelement <16 x i1> %337, i64 9, !dbg !65
  %357 = extractelement <16 x float> %336, i64 9, !dbg !65
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !65
  %359 = extractelement <16 x i1> %337, i64 8, !dbg !65
  %360 = extractelement <16 x float> %336, i64 8, !dbg !65
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !65
  %362 = extractelement <16 x i1> %337, i64 7, !dbg !65
  %363 = extractelement <16 x float> %336, i64 7, !dbg !65
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !65
  %365 = extractelement <16 x i1> %337, i64 6, !dbg !65
  %366 = extractelement <16 x float> %336, i64 6, !dbg !65
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !65
  %368 = extractelement <16 x i1> %337, i64 5, !dbg !65
  %369 = extractelement <16 x float> %336, i64 5, !dbg !65
  %370 = select i1 %368, float 0.000000e+00, float %369, !dbg !65
  %371 = extractelement <16 x i1> %337, i64 4, !dbg !65
  %372 = extractelement <16 x float> %336, i64 4, !dbg !65
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !65
  %374 = extractelement <16 x i1> %337, i64 3, !dbg !65
  %375 = extractelement <16 x float> %336, i64 3, !dbg !65
  %376 = select i1 %374, float 0.000000e+00, float %375, !dbg !65
  %377 = extractelement <16 x i1> %337, i64 2, !dbg !65
  %378 = extractelement <16 x float> %336, i64 2, !dbg !65
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !65
  %380 = extractelement <16 x i1> %337, i64 1, !dbg !65
  %381 = extractelement <16 x float> %336, i64 1, !dbg !65
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !65
  %383 = extractelement <16 x i1> %337, i64 0, !dbg !65
  %384 = extractelement <16 x float> %336, i64 0, !dbg !65
  %385 = select i1 %383, float 0.000000e+00, float %384, !dbg !65
  %386 = shl i32 %13, 6, !dbg !66
  %387 = add i32 %23, %386, !dbg !67
  %388 = sext i32 %387 to i64, !dbg !68
  %389 = getelementptr i8, ptr addrspace(1) %1, i64 %388, !dbg !68
  %390 = bitcast <4 x i8> %212 to i32, !dbg !69
  %391 = bitcast <4 x i8> %246 to i32, !dbg !69
  %392 = bitcast <4 x i8> %278 to i32, !dbg !69
  %393 = bitcast <4 x i8> %310 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %390, i32 %391, i32 %392, i32 %393, ptr addrspace(1) %389, i1 %55) #2, !dbg !69
  %394 = mul i32 %27, 196, !dbg !70
  %395 = mul i32 %28, 196, !dbg !70
  %396 = mul i32 %29, 196, !dbg !70
  %397 = mul i32 %30, 196, !dbg !70
  %398 = mul i32 %38, 12544, !dbg !71
  %399 = add i32 %398, %.decomposed41, !dbg !72
  %400 = add i32 %399, %394, !dbg !73
  %401 = add i32 %399, %395, !dbg !73
  %402 = add i32 %399, %396, !dbg !73
  %403 = add i32 %399, %397, !dbg !73
  %404 = sext i32 %400 to i64, !dbg !74
  %405 = getelementptr float, ptr addrspace(1) %2, i64 %404, !dbg !74
  %406 = sext i32 %401 to i64, !dbg !74
  %407 = getelementptr float, ptr addrspace(1) %2, i64 %406, !dbg !74
  %408 = sext i32 %402 to i64, !dbg !74
  %409 = getelementptr float, ptr addrspace(1) %2, i64 %408, !dbg !74
  %410 = sext i32 %403 to i64, !dbg !74
  %411 = getelementptr float, ptr addrspace(1) %2, i64 %410, !dbg !74
  %412 = shl i32 %8, 10, !dbg !75
  %413 = and i32 %412, 3072, !dbg !75
  %414 = or disjoint i32 %413, %10, !dbg !75
  %415 = and i32 %11, 1020, !dbg !75
  %416 = lshr exact i32 %413, 2, !dbg !75
  %417 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %416, !dbg !75
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %414, !dbg !75
  %419 = bitcast float %340 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #2, !dbg !75
  %420 = or disjoint i32 %414, 64, !dbg !75
  %421 = lshr i32 %420, 4, !dbg !75
  %422 = and i32 %421, 196, !dbg !75
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %422, !dbg !75
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %420, !dbg !75
  %425 = bitcast float %343 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #2, !dbg !75
  %426 = or disjoint i32 %414, 128, !dbg !75
  %427 = lshr i32 %426, 4, !dbg !75
  %428 = and i32 %427, 200, !dbg !75
  %429 = getelementptr float, ptr addrspace(3) @global_smem, i32 %428, !dbg !75
  %430 = getelementptr float, ptr addrspace(3) %429, i32 %426, !dbg !75
  %431 = bitcast float %346 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 true) #2, !dbg !75
  %432 = or disjoint i32 %414, 192, !dbg !75
  %433 = lshr i32 %432, 4, !dbg !75
  %434 = and i32 %433, 204, !dbg !75
  %435 = getelementptr float, ptr addrspace(3) @global_smem, i32 %434, !dbg !75
  %436 = getelementptr float, ptr addrspace(3) %435, i32 %432, !dbg !75
  %437 = bitcast float %349 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 true) #2, !dbg !75
  %438 = or disjoint i32 %414, 256, !dbg !75
  %439 = lshr i32 %438, 4, !dbg !75
  %440 = and i32 %439, 208, !dbg !75
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !75
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %438, !dbg !75
  %443 = bitcast float %352 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 true) #2, !dbg !75
  %444 = or disjoint i32 %414, 320, !dbg !75
  %445 = lshr i32 %444, 4, !dbg !75
  %446 = and i32 %445, 212, !dbg !75
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %446, !dbg !75
  %448 = getelementptr float, ptr addrspace(3) %447, i32 %444, !dbg !75
  %449 = bitcast float %355 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #2, !dbg !75
  %450 = or disjoint i32 %414, 384, !dbg !75
  %451 = lshr i32 %450, 4, !dbg !75
  %452 = and i32 %451, 216, !dbg !75
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !75
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %450, !dbg !75
  %455 = bitcast float %358 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %455, i1 true) #2, !dbg !75
  %456 = or disjoint i32 %414, 448, !dbg !75
  %457 = lshr i32 %456, 4, !dbg !75
  %458 = and i32 %457, 220, !dbg !75
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !75
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %456, !dbg !75
  %461 = bitcast float %361 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 true) #2, !dbg !75
  %462 = or disjoint i32 %414, 512, !dbg !75
  %463 = lshr i32 %462, 4, !dbg !75
  %464 = and i32 %463, 224, !dbg !75
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !75
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %462, !dbg !75
  %467 = bitcast float %364 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 true) #2, !dbg !75
  %468 = or disjoint i32 %414, 576, !dbg !75
  %469 = lshr i32 %468, 4, !dbg !75
  %470 = and i32 %469, 228, !dbg !75
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !75
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %468, !dbg !75
  %473 = bitcast float %367 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #2, !dbg !75
  %474 = or disjoint i32 %414, 640, !dbg !75
  %475 = lshr i32 %474, 4, !dbg !75
  %476 = and i32 %475, 232, !dbg !75
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !75
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %474, !dbg !75
  %479 = bitcast float %370 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #2, !dbg !75
  %480 = or disjoint i32 %414, 704, !dbg !75
  %481 = lshr i32 %480, 4, !dbg !75
  %482 = and i32 %481, 236, !dbg !75
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !75
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %480, !dbg !75
  %485 = bitcast float %373 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %485, i1 true) #2, !dbg !75
  %486 = or disjoint i32 %414, 768, !dbg !75
  %487 = lshr i32 %486, 4, !dbg !75
  %488 = and i32 %487, 240, !dbg !75
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !75
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %486, !dbg !75
  %491 = bitcast float %376 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 true) #2, !dbg !75
  %492 = or disjoint i32 %414, 832, !dbg !75
  %493 = lshr i32 %492, 4, !dbg !75
  %494 = and i32 %493, 244, !dbg !75
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i32 %494, !dbg !75
  %496 = getelementptr float, ptr addrspace(3) %495, i32 %492, !dbg !75
  %497 = bitcast float %379 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #2, !dbg !75
  %498 = or disjoint i32 %414, 896, !dbg !75
  %499 = lshr i32 %498, 4, !dbg !75
  %500 = and i32 %499, 248, !dbg !75
  %501 = getelementptr float, ptr addrspace(3) @global_smem, i32 %500, !dbg !75
  %502 = getelementptr float, ptr addrspace(3) %501, i32 %498, !dbg !75
  %503 = bitcast float %382 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, <1 x i32> %503, i1 true) #2, !dbg !75
  %504 = or disjoint i32 %414, 960, !dbg !75
  %505 = lshr i32 %504, 4, !dbg !75
  %506 = and i32 %505, 252, !dbg !75
  %507 = getelementptr float, ptr addrspace(3) @global_smem, i32 %506, !dbg !75
  %508 = getelementptr float, ptr addrspace(3) %507, i32 %504, !dbg !75
  %509 = bitcast float %385 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %509, i1 true) #2, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %510 = lshr i32 %11, 4, !dbg !75
  %511 = and i32 %510, 60, !dbg !75
  %512 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %511, !dbg !75
  %513 = getelementptr inbounds float, ptr addrspace(3) %512, i32 %415, !dbg !75
  %514 = or disjoint i32 %415, 1024, !dbg !75
  %515 = lshr i32 %514, 4, !dbg !75
  %516 = and i32 %515, 124, !dbg !75
  %517 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %516, !dbg !75
  %518 = getelementptr inbounds float, ptr addrspace(3) %517, i32 %514, !dbg !75
  %519 = load <4 x i32>, ptr addrspace(3) %518, align 16, !dbg !75
  %520 = or disjoint i32 %415, 2048, !dbg !75
  %521 = lshr i32 %520, 4, !dbg !75
  %522 = and i32 %521, 188, !dbg !75
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %522, !dbg !75
  %524 = getelementptr inbounds float, ptr addrspace(3) %523, i32 %520, !dbg !75
  %525 = load <4 x i32>, ptr addrspace(3) %524, align 16, !dbg !75
  %526 = or disjoint i32 %415, 3072, !dbg !75
  %527 = lshr i32 %526, 4, !dbg !75
  %528 = and i32 %527, 252, !dbg !75
  %529 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %528, !dbg !75
  %530 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %526, !dbg !75
  %531 = load <4 x i32>, ptr addrspace(3) %530, align 16, !dbg !75
  %.extract = load i32, ptr addrspace(3) %513, align 16, !dbg !75
  %532 = getelementptr inbounds i8, ptr addrspace(3) %513, i32 4, !dbg !75
  %.extract18 = load i32, ptr addrspace(3) %532, align 4, !dbg !75
  %533 = getelementptr inbounds i8, ptr addrspace(3) %513, i32 8, !dbg !75
  %.extract19 = load i32, ptr addrspace(3) %533, align 8, !dbg !75
  %534 = getelementptr inbounds i8, ptr addrspace(3) %513, i32 12, !dbg !75
  %.extract20 = load i32, ptr addrspace(3) %534, align 4, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %405, i1 %56) #2, !dbg !75
  %.extract21 = extractelement <4 x i32> %519, i64 0, !dbg !75
  %.extract22 = extractelement <4 x i32> %519, i64 1, !dbg !75
  %.extract23 = extractelement <4 x i32> %519, i64 2, !dbg !75
  %.extract24 = extractelement <4 x i32> %519, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %407, i1 %57) #2, !dbg !75
  %.extract25 = extractelement <4 x i32> %525, i64 0, !dbg !75
  %.extract26 = extractelement <4 x i32> %525, i64 1, !dbg !75
  %.extract27 = extractelement <4 x i32> %525, i64 2, !dbg !75
  %.extract28 = extractelement <4 x i32> %525, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %409, i1 %58) #2, !dbg !75
  %.extract29 = extractelement <4 x i32> %531, i64 0, !dbg !75
  %.extract30 = extractelement <4 x i32> %531, i64 1, !dbg !75
  %.extract31 = extractelement <4 x i32> %531, i64 2, !dbg !75
  %.extract32 = extractelement <4 x i32> %531, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %411, i1 %59) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdyhrp4t2kxpjbmmpk3riujudyxfsk2phaotj7nw5cefgsu26a4u.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 40, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 59, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 43, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!63 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !64)
!64 = !DILocation(line: 52, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !64)
!66 = !DILocation(line: 53, column: 33, scope: !7)
!67 = !DILocation(line: 53, column: 30, scope: !7)
!68 = !DILocation(line: 53, column: 25, scope: !7)
!69 = !DILocation(line: 53, column: 45, scope: !7)
!70 = !DILocation(line: 54, column: 34, scope: !7)
!71 = !DILocation(line: 54, column: 45, scope: !7)
!72 = !DILocation(line: 54, column: 30, scope: !7)
!73 = !DILocation(line: 54, column: 39, scope: !7)
!74 = !DILocation(line: 54, column: 25, scope: !7)
!75 = !DILocation(line: 54, column: 57, scope: !7)
!76 = !DILocation(line: 54, column: 4, scope: !7)
