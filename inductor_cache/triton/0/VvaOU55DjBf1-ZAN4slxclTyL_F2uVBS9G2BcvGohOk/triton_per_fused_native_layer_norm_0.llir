; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %8, 31, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 64, !dbg !14
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = shl i32 %8, 2, !dbg !15
  %17 = and i32 %16, 4, !dbg !15
  %18 = shl i32 %12, 3, !dbg !16
  %19 = or disjoint i32 %18, %17, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = fadd float %27, %28, !dbg !20
  %32 = fadd float %31, %29, !dbg !20
  %33 = fadd float %32, %30, !dbg !20
  %34 = select i1 %14, float %33, float 0.000000e+00, !dbg !20
  %35 = bitcast float %34 to i32, !dbg !25
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = fadd float %34, %37, !dbg !20
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %40 = bitcast float %38 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %42 = load float, ptr addrspace(3) %41, align 4, !dbg !26
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 8.000000e+00) #3, !dbg !26
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 8.000000e+00) #3, !dbg !26
  %45 = fsub float %27, %44, !dbg !27
  %46 = fsub float %28, %44, !dbg !27
  %47 = fsub float %29, %44, !dbg !27
  %48 = fsub float %30, %44, !dbg !27
  %49 = fmul float %45, %45, !dbg !28
  %50 = fmul float %46, %46, !dbg !28
  %51 = fmul float %47, %47, !dbg !28
  %52 = fmul float %48, %48, !dbg !28
  %53 = fadd float %49, %50, !dbg !29
  %54 = fadd float %51, %53, !dbg !29
  %55 = fadd float %52, %54, !dbg !29
  %56 = select i1 %14, float %55, float 0.000000e+00, !dbg !29
  %57 = bitcast float %56 to i32, !dbg !31
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = fadd float %56, %59, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %61 = bitcast float %60 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %61, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %62 = load i32, ptr addrspace(3) %41, align 4, !dbg !32
  %63 = sext i32 %13 to i64, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !33
  %65 = and i32 %8, 32, !dbg !34
  %66 = icmp eq i32 %65, 0, !dbg !34
  %67 = bitcast float %43 to i32, !dbg !34
  %68 = and i1 %66, %15, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %67, ptr addrspace(1) %64, i1 %68) #3, !dbg !34
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %62, ptr addrspace(1) %69, i1 %68) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctm6rk7ukw223jlzkjpuftubn7djc4ct3nopehvp4wolnjnhkxmw.py", directory: "inductor_cache/tm")
!4 = !{ptr @triton_per_fused_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_layer_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_layer_norm_0", linkageName: "triton_per_fused_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 37, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 42, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 44, column: 29, scope: !7)
!33 = !DILocation(line: 45, column: 25, scope: !7)
!34 = !DILocation(line: 45, column: 37, scope: !7)
!35 = !DILocation(line: 46, column: 25, scope: !7)
!36 = !DILocation(line: 46, column: 37, scope: !7)
!37 = !DILocation(line: 46, column: 4, scope: !7)
