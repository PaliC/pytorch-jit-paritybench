#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":24:0)
#loc1 = loc(unknown)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_constant_pad_nd_cumsum_mul_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":24:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":24:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":24:0), %arg3: i32 loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":24:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c-16_i32 = arith.constant -16 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c144_i32 = arith.constant 144 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e-03> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99899959> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<1x16xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<-1> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9> : tensor<1x16xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.cmpi slt, %3, %cst_5 : tensor<1x16xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %0, %c16_i32 : i32 loc(#loc6)
    %6 = arith.divsi %0, %c16_i32 : i32 loc(#loc7)
    %7 = arith.addi %3, %cst_4 : tensor<1x16xi32, #blocked> loc(#loc8)
    %8 = arith.extsi %7 : tensor<1x16xi32, #blocked> to tensor<1x16xi64, #blocked> loc(#loc9)
    %9 = arith.cmpi sge, %8, %cst_3 : tensor<1x16xi64, #blocked> loc(#loc9)
    %10 = arith.addi %5, %c-16_i32 : i32 loc(#loc10)
    %11 = arith.muli %3, %cst_2 : tensor<1x16xi32, #blocked> loc(#loc11)
    %12 = tt.splat %10 : i32 -> tensor<1x16xi32, #blocked> loc(#loc12)
    %13 = arith.addi %12, %11 : tensor<1x16xi32, #blocked> loc(#loc12)
    %14 = arith.muli %6, %c128_i32 : i32 loc(#loc13)
    %15 = tt.splat %14 : i32 -> tensor<1x16xi32, #blocked> loc(#loc14)
    %16 = arith.addi %13, %15 : tensor<1x16xi32, #blocked> loc(#loc14)
    %17 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %18 = tt.addptr %17, %16 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc15)
    %19 = arith.andi %4, %9 : tensor<1x16xi1, #blocked> loc(#loc16)
    %20 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc17)
    %21 = arith.andi %19, %20 : tensor<1x16xi1, #blocked> loc(#loc17)
    %22 = tt.load %18, %21, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc18)
    %23 = arith.mulf %22, %cst_1 : tensor<1x16xf32, #blocked> loc(#loc19)
    %24 = arith.select %9, %23, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc20)
    %25 = "tt.scan"(%24) <{axis = 1 : i32, reverse = false}> ({
    ^bb0(%arg4: f32 loc(unknown), %arg5: f32 loc(unknown)):
      %34 = arith.addf %arg4, %arg5 : f32 loc(#loc30)
      tt.scan.return %34 : f32 loc(#loc21)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1x16xf32, #blocked> loc(#loc21)
    %26 = tt.splat %5 : i32 -> tensor<1x16xi32, #blocked> loc(#loc23)
    %27 = arith.addi %26, %11 : tensor<1x16xi32, #blocked> loc(#loc23)
    %28 = arith.muli %6, %c144_i32 : i32 loc(#loc24)
    %29 = tt.splat %28 : i32 -> tensor<1x16xi32, #blocked> loc(#loc25)
    %30 = arith.addi %27, %29 : tensor<1x16xi32, #blocked> loc(#loc25)
    %31 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc26)
    %32 = tt.addptr %31, %30 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc26)
    %33 = arith.andi %4, %20 : tensor<1x16xi1, #blocked> loc(#loc27)
    tt.store %32, %25, %33 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":28:28)
#loc3 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":30:21)
#loc4 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":31:34)
#loc5 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":33:21)
#loc6 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":35:19)
#loc7 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":36:19)
#loc8 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":37:18)
#loc9 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":39:19)
#loc10 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:38)
#loc11 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:46)
#loc12 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:43)
#loc13 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:55)
#loc14 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:51)
#loc15 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:30)
#loc16 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:68)
#loc17 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:75)
#loc18 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":40:60)
#loc19 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":42:18)
#loc20 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":44:32)
#loc21 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":47:45)
#loc22 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":13:20)
#loc23 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":48:30)
#loc24 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":48:42)
#loc25 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":48:38)
#loc26 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":48:25)
#loc27 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":48:62)
#loc28 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":48:54)
#loc29 = loc("inductor_cache/vl/cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py":48:4)
#loc30 = loc(callsite(#loc22 at #loc21))
