#loc = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0)
#loc1 = loc(unknown)
#loc38 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":48:26)
#loc45 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":56:26)
#loc61 = loc(callsite(#loc1 at #loc38))
#loc64 = loc(callsite(#loc1 at #loc45))
module {
  tt.func public @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<7.812500e-03> : tensor<8x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<1.280000e+02> : tensor<8x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<8x128xf32> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<8x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<8x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc9)
    %9 = arith.divsi %5, %cst_4 : tensor<8x1xi32> loc(#loc10)
    %10 = arith.remsi %5, %cst_4 : tensor<8x1xi32> loc(#loc11)
    %11 = arith.muli %9, %cst_3 : tensor<8x1xi32> loc(#loc12)
    %12 = tt.broadcast %8 : tensor<1x128xi32> -> tensor<8x128xi32> loc(#loc13)
    %13 = tt.broadcast %11 : tensor<8x1xi32> -> tensor<8x128xi32> loc(#loc13)
    %14 = arith.addi %12, %13 : tensor<8x128xi32> loc(#loc13)
    %15 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>> loc(#loc14)
    %16 = tt.addptr %15, %14 : tensor<8x128x!tt.ptr<f32>>, tensor<8x128xi32> loc(#loc14)
    %17 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x128xi1> loc(#loc15)
    %18 = tt.load %16, %17, %cst_2 evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>> loc(#loc15)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.addptr %19, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc16)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc17)
    %22 = arith.muli %10, %cst_3 : tensor<8x1xi32> loc(#loc18)
    %23 = tt.broadcast %22 : tensor<8x1xi32> -> tensor<8x128xi32> loc(#loc19)
    %24 = arith.addi %12, %23 : tensor<8x128xi32> loc(#loc19)
    %25 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>> loc(#loc20)
    %26 = tt.addptr %25, %24 : tensor<8x128x!tt.ptr<f32>>, tensor<8x128xi32> loc(#loc20)
    %27 = tt.load %26, %17, %cst_2 evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>> loc(#loc21)
    %28 = arith.muli %5, %cst_3 : tensor<8x1xi32> loc(#loc22)
    %29 = tt.broadcast %28 : tensor<8x1xi32> -> tensor<8x128xi32> loc(#loc23)
    %30 = arith.addi %12, %29 : tensor<8x128xi32> loc(#loc23)
    %31 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>> loc(#loc24)
    %32 = tt.addptr %31, %30 : tensor<8x128x!tt.ptr<f32>>, tensor<8x128xi32> loc(#loc24)
    %33 = tt.load %32, %17, %cst_2 : tensor<8x128x!tt.ptr<f32>> loc(#loc25)
    %34 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc26)
    %35 = tt.addptr %34, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc26)
    %36 = tt.load %35 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc27)
    %37 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc28)
    %38 = tt.addptr %37, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc28)
    %39 = tt.load %38 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc29)
    %40 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc30)
    %41 = tt.addptr %40, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc30)
    %42 = tt.load %41 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc31)
    %43 = tt.broadcast %21 : tensor<1x128xf32> -> tensor<8x128xf32> loc(#loc32)
    %44 = arith.addf %18, %43 : tensor<8x128xf32> loc(#loc32)
    %45 = arith.addf %44, %27 : tensor<8x128xf32> loc(#loc33)
    %46 = tt.broadcast %36 : tensor<1x128xf32> -> tensor<8x128xf32> loc(#loc34)
    %47 = arith.addf %33, %46 : tensor<8x128xf32> loc(#loc34)
    %48 = arith.addf %45, %47 : tensor<8x128xf32> loc(#loc35)
    %49 = arith.select %17, %48, %cst_2 : tensor<8x128xi1>, tensor<8x128xf32> loc(#loc36)
    %50 = "tt.reduce"(%49) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc38)), %arg12: f32 loc(callsite(#loc1 at #loc38))):
      %73 = arith.addf %arg11, %arg12 : f32 loc(#loc65)
      tt.reduce.return %73 : f32 loc(#loc60)
    }) : (tensor<8x128xf32>) -> tensor<8xf32> loc(#loc60)
    %51 = tt.expand_dims %50 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc40)
    %52 = arith.divf %51, %cst_1 : tensor<8x1xf32> loc(#loc41)
    %53 = tt.broadcast %52 : tensor<8x1xf32> -> tensor<8x128xf32> loc(#loc42)
    %54 = arith.subf %48, %53 : tensor<8x128xf32> loc(#loc42)
    %55 = arith.mulf %54, %54 : tensor<8x128xf32> loc(#loc43)
    %56 = arith.select %17, %55, %cst_2 : tensor<8x128xi1>, tensor<8x128xf32> loc(#loc44)
    %57 = "tt.reduce"(%56) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc45)), %arg12: f32 loc(callsite(#loc1 at #loc45))):
      %73 = arith.addf %arg11, %arg12 : f32 loc(#loc66)
      tt.reduce.return %73 : f32 loc(#loc63)
    }) : (tensor<8x128xf32>) -> tensor<8xf32> loc(#loc63)
    %58 = tt.expand_dims %57 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc46)
    %59 = arith.divf %58, %cst_1 : tensor<8x1xf32> loc(#loc47)
    %60 = arith.addf %59, %cst_0 : tensor<8x1xf32> loc(#loc48)
    %61 = tt.extern_elementwise %60 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32>) -> tensor<8x1xf32> loc(#loc49)
    %62 = tt.broadcast %61 : tensor<8x1xf32> -> tensor<8x128xf32> loc(#loc50)
    %63 = arith.mulf %54, %62 : tensor<8x128xf32> loc(#loc50)
    %64 = tt.broadcast %39 : tensor<1x128xf32> -> tensor<8x128xf32> loc(#loc51)
    %65 = arith.mulf %63, %64 : tensor<8x128xf32> loc(#loc51)
    %66 = tt.broadcast %42 : tensor<1x128xf32> -> tensor<8x128xf32> loc(#loc52)
    %67 = arith.addf %65, %66 : tensor<8x128xf32> loc(#loc52)
    %68 = arith.mulf %61, %cst : tensor<8x1xf32> loc(#loc53)
    tt.store %32, %63, %17 : tensor<8x128x!tt.ptr<f32>> loc(#loc54)
    %69 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>> loc(#loc55)
    %70 = tt.addptr %69, %30 : tensor<8x128x!tt.ptr<f32>>, tensor<8x128xi32> loc(#loc55)
    tt.store %70, %67, %17 : tensor<8x128x!tt.ptr<f32>> loc(#loc56)
    %71 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc57)
    %72 = tt.addptr %71, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc57)
    tt.store %72, %68, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc58)
    tt.return loc(#loc59)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":23:28)
#loc3 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":23:33)
#loc4 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":24:36)
#loc5 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":24:44)
#loc6 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":24:23)
#loc7 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":25:21)
#loc8 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":26:26)
#loc9 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":26:34)
#loc10 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":30:19)
#loc11 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":31:19)
#loc12 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:39)
#loc13 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:35)
#loc14 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:30)
#loc15 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:44)
#loc16 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":34:30)
#loc17 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":34:35)
#loc18 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:39)
#loc19 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:35)
#loc20 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:30)
#loc21 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:44)
#loc22 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:43)
#loc23 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:39)
#loc24 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:34)
#loc25 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:48)
#loc26 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":37:30)
#loc27 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":37:35)
#loc28 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":38:31)
#loc29 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":38:36)
#loc30 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":39:31)
#loc31 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":39:36)
#loc32 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":40:18)
#loc33 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":41:18)
#loc34 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":42:18)
#loc35 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":43:18)
#loc36 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":47:35)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc40 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":48:29)
#loc41 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":51:20)
#loc42 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":52:19)
#loc43 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":53:20)
#loc44 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":55:35)
#loc46 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":56:29)
#loc47 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":59:20)
#loc48 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":61:20)
#loc49 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":62:28)
#loc50 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":63:20)
#loc51 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":64:20)
#loc52 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":65:20)
#loc53 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":67:20)
#loc54 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":68:49)
#loc55 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":69:25)
#loc56 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":69:46)
#loc57 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":70:25)
#loc58 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":70:37)
#loc59 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":70:4)
#loc60 = loc(callsite(#loc37 at #loc38))
#loc62 = loc(callsite(#loc39 at #loc37))
#loc63 = loc(callsite(#loc37 at #loc45))
#loc65 = loc(callsite(#loc62 at #loc38))
#loc66 = loc(callsite(#loc62 at #loc45))
