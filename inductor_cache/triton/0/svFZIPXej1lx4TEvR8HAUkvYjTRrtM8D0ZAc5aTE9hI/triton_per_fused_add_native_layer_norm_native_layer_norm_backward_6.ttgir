#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0)
#loc1 = loc(unknown)
#loc36 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":48:26)
#loc43 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":56:26)
#loc59 = loc(callsite(#loc1 at #loc36))
#loc62 = loc(callsite(#loc1 at #loc43))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.280000e+02> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<1.280000e+02> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<7.812500e-03> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_4 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_3 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc7)
    %14 = arith.divsi %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = arith.remsi %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc9)
    %16 = arith.muli %14, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %13 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc11)
    %18 = tt.broadcast %16 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc11)
    %19 = arith.addi %17, %18 : tensor<8x128xi32, #blocked> loc(#loc11)
    %20 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %19 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc12)
    %22 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc13)
    %23 = tt.load %21, %22, %cst_0 evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %24 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %25 = tt.addptr %24, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc14)
    %26 = tt.load %25 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %27 = arith.muli %15, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc16)
    %28 = tt.broadcast %27 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc17)
    %29 = arith.addi %17, %28 : tensor<8x128xi32, #blocked> loc(#loc17)
    %30 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc18)
    %31 = tt.addptr %30, %29 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc18)
    %32 = tt.load %31, %22, %cst_0 evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %33 = arith.muli %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc20)
    %34 = tt.broadcast %33 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc21)
    %35 = arith.addi %17, %34 : tensor<8x128xi32, #blocked> loc(#loc21)
    %36 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc22)
    %37 = tt.addptr %36, %35 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc22)
    %38 = tt.load %37, %22, %cst_0 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc23)
    %39 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc24)
    %40 = tt.addptr %39, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc24)
    %41 = tt.load %40 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %42 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc26)
    %43 = tt.addptr %42, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc26)
    %44 = tt.load %43 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc27)
    %45 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc28)
    %46 = tt.addptr %45, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc28)
    %47 = tt.load %46 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc29)
    %48 = tt.broadcast %26 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc30)
    %49 = arith.addf %23, %48 : tensor<8x128xf32, #blocked> loc(#loc30)
    %50 = arith.addf %49, %32 : tensor<8x128xf32, #blocked> loc(#loc31)
    %51 = tt.broadcast %41 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc32)
    %52 = arith.addf %38, %51 : tensor<8x128xf32, #blocked> loc(#loc32)
    %53 = arith.addf %50, %52 : tensor<8x128xf32, #blocked> loc(#loc33)
    %54 = arith.select %22, %53, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc34)
    %55 = "tt.reduce"(%54) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc36)), %arg12: f32 loc(callsite(#loc1 at #loc36))):
      %83 = arith.addf %arg11, %arg12 : f32 loc(#loc63)
      tt.reduce.return %83 : f32 loc(#loc58)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc58)
    %56 = tt.expand_dims %55 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc38)
    %57 = arith.divf %56, %cst : tensor<8x1xf32, #blocked> loc(#loc39)
    %58 = tt.broadcast %57 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc40)
    %59 = arith.subf %53, %58 : tensor<8x128xf32, #blocked> loc(#loc40)
    %60 = arith.mulf %59, %59 : tensor<8x128xf32, #blocked> loc(#loc41)
    %61 = arith.select %22, %60, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc42)
    %62 = "tt.reduce"(%61) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc43)), %arg12: f32 loc(callsite(#loc1 at #loc43))):
      %83 = arith.addf %arg11, %arg12 : f32 loc(#loc64)
      tt.reduce.return %83 : f32 loc(#loc61)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc61)
    %63 = triton_gpu.convert_layout %62 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc44)
    %64 = tt.expand_dims %63 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc45)
    %65 = tt.expand_dims %62 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc45)
    %66 = arith.divf %64, %cst_7 : tensor<8x1xf32, #blocked1> loc(#loc46)
    %67 = arith.divf %65, %cst : tensor<8x1xf32, #blocked> loc(#loc46)
    %68 = arith.addf %66, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc47)
    %69 = arith.addf %67, %cst_5 : tensor<8x1xf32, #blocked> loc(#loc47)
    %70 = tt.extern_elementwise %68 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked1>) -> tensor<8x1xf32, #blocked1> loc(#loc48)
    %71 = tt.extern_elementwise %69 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc48)
    %72 = tt.broadcast %71 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc49)
    %73 = arith.mulf %59, %72 : tensor<8x128xf32, #blocked> loc(#loc49)
    %74 = tt.broadcast %44 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc50)
    %75 = arith.mulf %73, %74 : tensor<8x128xf32, #blocked> loc(#loc50)
    %76 = tt.broadcast %47 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc51)
    %77 = arith.addf %75, %76 : tensor<8x128xf32, #blocked> loc(#loc51)
    %78 = arith.mulf %70, %cst_8 : tensor<8x1xf32, #blocked1> loc(#loc44)
    tt.store %37, %73, %22 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc52)
    %79 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc53)
    %80 = tt.addptr %79, %35 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc53)
    tt.store %80, %77, %22 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc54)
    %81 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc55)
    %82 = tt.addptr %81, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc55)
    tt.store %82, %78, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    tt.return loc(#loc57)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":23:28)
#loc3 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":23:33)
#loc4 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":24:44)
#loc5 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":24:23)
#loc6 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":25:21)
#loc7 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":26:34)
#loc8 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":30:19)
#loc9 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":31:19)
#loc10 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:39)
#loc11 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:35)
#loc12 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:30)
#loc13 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":33:44)
#loc14 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":34:30)
#loc15 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":34:35)
#loc16 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:39)
#loc17 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:35)
#loc18 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:30)
#loc19 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":35:44)
#loc20 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:43)
#loc21 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:39)
#loc22 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:34)
#loc23 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":36:48)
#loc24 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":37:30)
#loc25 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":37:35)
#loc26 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":38:31)
#loc27 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":38:36)
#loc28 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":39:31)
#loc29 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":39:36)
#loc30 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":40:18)
#loc31 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":41:18)
#loc32 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":42:18)
#loc33 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":43:18)
#loc34 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":47:35)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc38 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":48:29)
#loc39 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":51:20)
#loc40 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":52:19)
#loc41 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":53:20)
#loc42 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":55:35)
#loc44 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":67:20)
#loc45 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":56:29)
#loc46 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":59:20)
#loc47 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":61:20)
#loc48 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":62:28)
#loc49 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":63:20)
#loc50 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":64:20)
#loc51 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":65:20)
#loc52 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":68:49)
#loc53 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":69:25)
#loc54 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":69:46)
#loc55 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":70:25)
#loc56 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":70:37)
#loc57 = loc("inductor_cache/jr/cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py":70:4)
#loc58 = loc(callsite(#loc35 at #loc36))
#loc60 = loc(callsite(#loc37 at #loc35))
#loc61 = loc(callsite(#loc35 at #loc43))
#loc63 = loc(callsite(#loc60 at #loc36))
#loc64 = loc(callsite(#loc60 at #loc43))
