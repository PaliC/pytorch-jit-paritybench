; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 5, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %14, 7, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = icmp slt i32 %18, 16, !dbg !14
  %20 = shl i32 %14, 2, !dbg !15
  %21 = and i32 %20, 124, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %22 = sdiv i32 %.frozen, 4, !dbg !16
  %23 = mul i32 %22, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = shl i32 %22, 7, !dbg !18
  %25 = or disjoint i32 %24, %21, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = zext nneg i32 %21 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = shl nsw i32 %.decomposed, 7, !dbg !24
  %41 = or disjoint i32 %40, %21, !dbg !25
  %42 = sext i32 %41 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = shl i32 %18, 7, !dbg !28
  %50 = or disjoint i32 %49, %21, !dbg !29
  %51 = sext i32 %50 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !31
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !31
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !31
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !31
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !32
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #5, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !33
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !33
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !33
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !34
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #5, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !36
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !37
  %68 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !21
  %69 = insertelement <2 x i32> %68, i32 %31, i64 1, !dbg !21
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !21
  %71 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !23
  %72 = insertelement <2 x i32> %71, i32 %38, i64 1, !dbg !23
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !23
  %74 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !27
  %75 = insertelement <2 x i32> %74, i32 %47, i64 1, !dbg !27
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !27
  %77 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !31
  %78 = insertelement <2 x i32> %77, i32 %56, i64 1, !dbg !31
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !31
  %80 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !33
  %81 = insertelement <2 x i32> %80, i32 %62, i64 1, !dbg !33
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !33
  %83 = fadd <2 x float> %70, %73, !dbg !38
  %84 = fadd <2 x float> %83, %76, !dbg !39
  %85 = fadd <2 x float> %79, %82, !dbg !40
  %86 = fadd <2 x float> %84, %85, !dbg !41
  %87 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !21
  %88 = insertelement <2 x i32> %87, i32 %30, i64 1, !dbg !21
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !21
  %90 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !23
  %91 = insertelement <2 x i32> %90, i32 %37, i64 1, !dbg !23
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !23
  %93 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !27
  %94 = insertelement <2 x i32> %93, i32 %46, i64 1, !dbg !27
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !27
  %96 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !31
  %97 = insertelement <2 x i32> %96, i32 %55, i64 1, !dbg !31
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !31
  %99 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !33
  %100 = insertelement <2 x i32> %99, i32 %61, i64 1, !dbg !33
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !33
  %102 = fadd <2 x float> %89, %92, !dbg !38
  %103 = fadd <2 x float> %102, %95, !dbg !39
  %104 = fadd <2 x float> %98, %101, !dbg !40
  %105 = fadd <2 x float> %103, %104, !dbg !41
  %shift = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %106 = fadd <2 x float> %105, %shift, !dbg !42
  %shift13 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %107 = fadd <2 x float> %shift13, %106, !dbg !42
  %108 = fadd <2 x float> %86, %107, !dbg !42
  %109 = extractelement <2 x float> %108, i64 0, !dbg !42
  %110 = select i1 %19, float %109, float 0.000000e+00, !dbg !42
  %111 = bitcast float %110 to i32, !dbg !47
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !47
  %113 = bitcast i32 %112 to float, !dbg !47
  %114 = fadd float %110, %113, !dbg !42
  %115 = bitcast float %114 to i32, !dbg !47
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !47
  %117 = bitcast i32 %116 to float, !dbg !47
  %118 = fadd float %114, %117, !dbg !42
  %119 = bitcast float %118 to i32, !dbg !47
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !47
  %121 = bitcast i32 %120 to float, !dbg !47
  %122 = fadd float %118, %121, !dbg !42
  %123 = bitcast float %122 to i32, !dbg !47
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !47
  %125 = bitcast i32 %124 to float, !dbg !47
  %126 = fadd float %122, %125, !dbg !42
  %127 = bitcast float %126 to i32, !dbg !47
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !47
  %129 = bitcast i32 %128 to float, !dbg !47
  %130 = fadd float %126, %129, !dbg !42
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 1.280000e+02) #5, !dbg !48
  %132 = insertelement <2 x float> poison, float %131, i64 0, !dbg !49
  %133 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %134 = fsub <2 x float> %105, %133, !dbg !49
  %135 = fsub <2 x float> %86, %133, !dbg !49
  %136 = fmul <2 x float> %134, %134, !dbg !50
  %137 = fmul <2 x float> %135, %135, !dbg !50
  %shift14 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %138 = fadd <2 x float> %136, %shift14, !dbg !51
  %shift15 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %139 = fadd <2 x float> %shift15, %138, !dbg !51
  %140 = fadd <2 x float> %137, %139, !dbg !51
  %141 = extractelement <2 x float> %140, i64 0, !dbg !51
  %142 = select i1 %19, float %141, float 0.000000e+00, !dbg !51
  %143 = bitcast float %142 to i32, !dbg !53
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 16, i32 31), !dbg !53
  %145 = bitcast i32 %144 to float, !dbg !53
  %146 = fadd float %142, %145, !dbg !51
  %147 = bitcast float %146 to i32, !dbg !53
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !53
  %149 = bitcast i32 %148 to float, !dbg !53
  %150 = fadd float %146, %149, !dbg !51
  %151 = bitcast float %150 to i32, !dbg !53
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 4, i32 31), !dbg !53
  %153 = bitcast i32 %152 to float, !dbg !53
  %154 = fadd float %150, %153, !dbg !51
  %155 = bitcast float %154 to i32, !dbg !53
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !53
  %157 = bitcast i32 %156 to float, !dbg !53
  %158 = fadd float %154, %157, !dbg !51
  %159 = bitcast float %158 to i32, !dbg !53
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !53
  %161 = bitcast i32 %160 to float, !dbg !53
  %162 = fadd float %158, %161, !dbg !51
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !54
  %164 = bitcast float %162 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !54
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !54
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 1.280000e+02) #5, !dbg !55
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 1.280000e+02) #5, !dbg !55
  %169 = fadd float %167, 0x3EE4F8B580000000, !dbg !56
  %170 = fadd float %168, 0x3EE4F8B580000000, !dbg !56
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i = icmp eq i32 %171, 0, !dbg !57
  br i1 %.not.i, label %174, label %172, !dbg !57

172:                                              ; preds = %11
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

174:                                              ; preds = %11
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %172, %174
  %.0.i = phi float [ %173, %172 ], [ %175, %174 ], !dbg !57
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i10 = icmp eq i32 %179, 0, !dbg !57
  br i1 %.not.i10, label %182, label %180, !dbg !57

180:                                              ; preds = %__nv_rsqrtf.exit
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %170), !dbg !57
  br label %__nv_rsqrtf.exit12, !dbg !57

182:                                              ; preds = %__nv_rsqrtf.exit
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %170), !dbg !57
  br label %__nv_rsqrtf.exit12, !dbg !57

__nv_rsqrtf.exit12:                               ; preds = %180, %182
  %.0.i11 = phi float [ %181, %180 ], [ %183, %182 ], !dbg !57
  %184 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !37
  %185 = bitcast i32 %184 to float, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !37
  %187 = bitcast i32 %186 to float, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !37
  %189 = bitcast i32 %188 to float, !dbg !37
  %190 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !37
  %191 = bitcast i32 %190 to float, !dbg !37
  %192 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !35
  %193 = bitcast i32 %192 to float, !dbg !35
  %194 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !35
  %195 = bitcast i32 %194 to float, !dbg !35
  %196 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !35
  %197 = bitcast i32 %196 to float, !dbg !35
  %198 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = or disjoint i32 %13, %17, !dbg !13
  %201 = icmp slt i32 %200, 16, !dbg !14
  %202 = extractelement <2 x float> %134, i64 0, !dbg !58
  %203 = fmul float %202, %.0.i11, !dbg !58
  %204 = extractelement <2 x float> %134, i64 1, !dbg !58
  %205 = fmul float %204, %.0.i11, !dbg !58
  %206 = extractelement <2 x float> %135, i64 1, !dbg !58
  %207 = fmul float %206, %.0.i11, !dbg !58
  %208 = extractelement <2 x float> %135, i64 0, !dbg !58
  %209 = fmul float %208, %.0.i11, !dbg !58
  %210 = fmul float %203, %199, !dbg !59
  %211 = fmul float %205, %197, !dbg !59
  %212 = fmul float %207, %195, !dbg !59
  %213 = fmul float %209, %193, !dbg !59
  %214 = fadd float %210, %191, !dbg !60
  %215 = fadd float %211, %189, !dbg !60
  %216 = fadd float %212, %187, !dbg !60
  %217 = fadd float %213, %185, !dbg !60
  %218 = fmul float %.0.i, 7.812500e-03, !dbg !54
  %219 = bitcast float %203 to i32, !dbg !61
  %220 = bitcast float %205 to i32, !dbg !61
  %221 = bitcast float %207 to i32, !dbg !61
  %222 = bitcast float %209 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %220, i32 %221, i32 %222, ptr addrspace(1) %52, i1 %19) #5, !dbg !61
  %223 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !62
  %224 = bitcast float %214 to i32, !dbg !63
  %225 = bitcast float %215 to i32, !dbg !63
  %226 = bitcast float %216 to i32, !dbg !63
  %227 = bitcast float %217 to i32, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %225, i32 %226, i32 %227, ptr addrspace(1) %223, i1 %19) #5, !dbg !63
  %228 = sext i32 %200 to i64, !dbg !64
  %229 = getelementptr float, ptr addrspace(1) %8, i64 %228, !dbg !64
  %230 = and i32 %14, 248, !dbg !65
  %231 = icmp eq i32 %230, 0, !dbg !65
  %232 = bitcast float %218 to i32, !dbg !65
  %233 = and i1 %231, %201, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %232, ptr addrspace(1) %229, i1 %233) #5, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py", directory: "inductor_cache/jr")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 39, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 44, scope: !7)
!28 = !DILocation(line: 36, column: 43, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 34, scope: !7)
!31 = !DILocation(line: 36, column: 48, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 39, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!46 = !DILocation(line: 48, column: 26, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 19, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !52)
!52 = !DILocation(line: 56, column: 26, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 28, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 20, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 68, column: 49, scope: !7)
!62 = !DILocation(line: 69, column: 25, scope: !7)
!63 = !DILocation(line: 69, column: 46, scope: !7)
!64 = !DILocation(line: 70, column: 25, scope: !7)
!65 = !DILocation(line: 70, column: 37, scope: !7)
!66 = !DILocation(line: 70, column: 4, scope: !7)
