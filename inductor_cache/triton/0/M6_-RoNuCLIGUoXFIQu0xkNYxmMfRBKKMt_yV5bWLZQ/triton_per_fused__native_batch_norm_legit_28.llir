; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 7, !dbg !13
  %12 = and i32 %11, 8064, !dbg !13
  %.frozen = freeze i32 %6, !dbg !14
  %13 = sdiv i32 %.frozen, 128, !dbg !14
  %14 = shl i32 %13, 13, !dbg !15
  %15 = mul i32 %13, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = add nsw i32 %.decomposed, %12, !dbg !17
  %17 = add i32 %16, %14, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %7, i32 0, i1 %7) #5, !dbg !20
  %21 = bitcast i32 %20 to float, !dbg !20
  %22 = select i1 %7, float %21, float 0.000000e+00, !dbg !21
  %23 = bitcast float %22 to i32, !dbg !22
  %24 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %23, i32 16, i32 31), !dbg !22
  %25 = bitcast i32 %24 to float, !dbg !22
  %26 = fadd float %22, %25, !dbg !26
  %27 = bitcast float %26 to i32, !dbg !22
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 8, i32 31), !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = fadd float %26, %29, !dbg !26
  %31 = bitcast float %30 to i32, !dbg !22
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 4, i32 31), !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = fadd float %30, %33, !dbg !26
  %35 = bitcast float %34 to i32, !dbg !22
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 2, i32 31), !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = fadd float %34, %37, !dbg !26
  %39 = bitcast float %38 to i32, !dbg !22
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 1, i32 31), !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = fadd float %38, %41, !dbg !26
  %43 = icmp eq i32 %9, 0, !dbg !22
  %44 = and i32 %10, 1, !dbg !22
  %45 = zext nneg i32 %44 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i64 %45, !dbg !22
  %47 = bitcast float %42 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 %43) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %48 = icmp slt i32 %8, 2, !dbg !22
  %49 = sext i32 %8 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i64 %49, !dbg !22
  %51 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %50, i1 %48) #5, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = fadd float %52, %54, !dbg !26
  %56 = and i32 %8, 1, !dbg !22
  %57 = icmp eq i32 %56, 0, !dbg !22
  %58 = and i1 %48, %57, !dbg !22
  %59 = bitcast float %55 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %59, i1 %58) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %60 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 6.400000e+01) #5, !dbg !28
  %62 = fsub float %21, %61, !dbg !29
  %63 = fmul float %62, %62, !dbg !30
  %64 = select i1 %7, float %63, float 0.000000e+00, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %65 = bitcast float %64 to i32, !dbg !32
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = fadd float %64, %67, !dbg !34
  %69 = bitcast float %68 to i32, !dbg !32
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = fadd float %68, %71, !dbg !34
  %73 = bitcast float %72 to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %72, %75, !dbg !34
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !34
  %81 = bitcast float %80 to i32, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %80, %83, !dbg !34
  %85 = bitcast float %84 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %85, i1 %43) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %50, i1 %48) #5, !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !32
  %89 = bitcast i32 %88 to float, !dbg !32
  %90 = fadd float %87, %89, !dbg !34
  %91 = bitcast float %90 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %91, i1 %58) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 6.400000e+01) #5, !dbg !35
  %94 = fadd float %93, 0x3EE4F8B580000000, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %95, 0, !dbg !37
  br i1 %.not.i, label %98, label %96, !dbg !37

96:                                               ; preds = %5
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

98:                                               ; preds = %5
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %96, %98
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %100 = sext i32 %6 to i64, !dbg !39
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !39
  %urem = and i32 %8, 63, !dbg !40
  %102 = icmp eq i32 %urem, 0, !dbg !40
  %103 = bitcast float %.0.i to i32, !dbg !40
  %104 = and i1 %102, %7, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %101, i1 %104) #5, !dbg !40
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !41
  %106 = bitcast float %61 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %105, i1 %104) #5, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdtowktg3jlqifd7up5nrmemcxra3zod2esq42z7msagpm2nddbq.py", directory: "inductor_cache/dt")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_28, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_28", linkageName: "triton_per_fused__native_batch_norm_legit_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 34, scope: !7)
!14 = !DILocation(line: 31, column: 51, scope: !7)
!15 = !DILocation(line: 31, column: 45, scope: !7)
!16 = !DILocation(line: 31, column: 65, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 60, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 73, scope: !7)
!21 = !DILocation(line: 35, column: 33, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 40, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 43, column: 35, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !33)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 28, scope: !7)
!38 = !DILocation(line: 50, column: 4, scope: !7)
!39 = !DILocation(line: 51, column: 28, scope: !7)
!40 = !DILocation(line: 51, column: 40, scope: !7)
!41 = !DILocation(line: 52, column: 25, scope: !7)
!42 = !DILocation(line: 52, column: 37, scope: !7)
!43 = !DILocation(line: 52, column: 4, scope: !7)
