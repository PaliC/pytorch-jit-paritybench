; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 8, !dbg !16
  %19 = shl i32 %8, 4, !dbg !17
  %20 = and i32 %19, 240, !dbg !17
  %21 = lshr i32 %8, 2, !dbg !17
  %22 = and i32 %21, 63, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %23, 8, !dbg !18
  %26 = or disjoint i32 %23, 12, !dbg !18
  %27 = or disjoint i32 %18, %22, !dbg !18
  %28 = or disjoint i32 %27, 64, !dbg !18
  %29 = or disjoint i32 %27, 128, !dbg !18
  %30 = or disjoint i32 %27, 192, !dbg !18
  %31 = icmp slt i32 %23, 768, !dbg !19
  %32 = icmp slt i32 %27, 768, !dbg !19
  %33 = icmp slt i32 %28, 768, !dbg !19
  %34 = icmp slt i32 %29, 768, !dbg !19
  %35 = icmp slt i32 %30, 768, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %36 = sdiv i32 %.frozen, 2, !dbg !20
  %37 = mul i32 %36, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %38 = srem i32 %36, 2, !dbg !22
  %39 = sdiv i32 %13, 4, !dbg !23
  %40 = ashr exact i32 %14, 2, !dbg !23
  %41 = mul nsw i32 %.decomposed, 1536, !dbg !24
  %42 = mul nsw i32 %38, 9216, !dbg !25
  %43 = mul i32 %39, 27648, !dbg !26
  %44 = add i32 %43, %41, !dbg !27
  %45 = add i32 %44, %23, !dbg !28
  %46 = add i32 %45, %42, !dbg !29
  %47 = add i32 %44, %24, !dbg !28
  %48 = add i32 %47, %42, !dbg !29
  %49 = add i32 %44, %25, !dbg !28
  %50 = add i32 %49, %42, !dbg !29
  %51 = add i32 %44, %26, !dbg !28
  %52 = add i32 %51, %42, !dbg !29
  %53 = sext i32 %46 to i64, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !30
  %55 = sext i32 %48 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !30
  %57 = sext i32 %50 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = sext i32 %52 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = and i1 %15, %31, !dbg !31
  %62 = and i1 %16, %32, !dbg !31
  %63 = and i1 %33, %16, !dbg !31
  %64 = and i1 %34, %16, !dbg !31
  %65 = and i1 %35, %16, !dbg !31
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %61) #2, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !32
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !32
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #2, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !32
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %61) #2, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !32
  %86 = add i32 %44, 768, !dbg !33
  %87 = add i32 %86, %23, !dbg !34
  %88 = add i32 %87, %42, !dbg !35
  %89 = add i32 %86, %24, !dbg !34
  %90 = add i32 %89, %42, !dbg !35
  %91 = add i32 %86, %25, !dbg !34
  %92 = add i32 %91, %42, !dbg !35
  %93 = add i32 %86, %26, !dbg !34
  %94 = add i32 %93, %42, !dbg !35
  %95 = sext i32 %88 to i64, !dbg !36
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !36
  %97 = sext i32 %90 to i64, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !36
  %99 = sext i32 %92 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !36
  %101 = sext i32 %94 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !36
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %61) #2, !dbg !37
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !37
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !37
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !37
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !37
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %61) #2, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !37
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %61) #2, !dbg !37
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !37
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !37
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !37
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !37
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %61) #2, !dbg !37
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !37
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !37
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !37
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !37
  %123 = add i32 %44, 1536, !dbg !38
  %124 = add i32 %123, %23, !dbg !39
  %125 = add i32 %124, %42, !dbg !40
  %126 = add i32 %123, %24, !dbg !39
  %127 = add i32 %126, %42, !dbg !40
  %128 = add i32 %123, %25, !dbg !39
  %129 = add i32 %128, %42, !dbg !40
  %130 = add i32 %123, %26, !dbg !39
  %131 = add i32 %130, %42, !dbg !40
  %132 = sext i32 %125 to i64, !dbg !41
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !41
  %134 = sext i32 %127 to i64, !dbg !41
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !41
  %136 = sext i32 %129 to i64, !dbg !41
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !41
  %138 = sext i32 %131 to i64, !dbg !41
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !41
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 %61) #2, !dbg !42
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !42
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !42
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !42
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !42
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %61) #2, !dbg !42
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !42
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !42
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !42
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !42
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %61) #2, !dbg !42
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !42
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !42
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !42
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !42
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %61) #2, !dbg !42
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !42
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !42
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !42
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !42
  %160 = add i32 %44, 4608, !dbg !43
  %161 = add i32 %160, %23, !dbg !44
  %162 = add i32 %161, %42, !dbg !45
  %163 = add i32 %160, %24, !dbg !44
  %164 = add i32 %163, %42, !dbg !45
  %165 = add i32 %160, %25, !dbg !44
  %166 = add i32 %165, %42, !dbg !45
  %167 = add i32 %160, %26, !dbg !44
  %168 = add i32 %167, %42, !dbg !45
  %169 = sext i32 %162 to i64, !dbg !46
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !46
  %171 = sext i32 %164 to i64, !dbg !46
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !46
  %173 = sext i32 %166 to i64, !dbg !46
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !46
  %175 = sext i32 %168 to i64, !dbg !46
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !46
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %61) #2, !dbg !47
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !47
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !47
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !47
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !47
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %61) #2, !dbg !47
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !47
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !47
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !47
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !47
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %61) #2, !dbg !47
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !47
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !47
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !47
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !47
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %61) #2, !dbg !47
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !47
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !47
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !47
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !47
  %197 = add i32 %44, 5376, !dbg !48
  %198 = add i32 %197, %23, !dbg !49
  %199 = add i32 %198, %42, !dbg !50
  %200 = add i32 %197, %24, !dbg !49
  %201 = add i32 %200, %42, !dbg !50
  %202 = add i32 %197, %25, !dbg !49
  %203 = add i32 %202, %42, !dbg !50
  %204 = add i32 %197, %26, !dbg !49
  %205 = add i32 %204, %42, !dbg !50
  %206 = sext i32 %199 to i64, !dbg !51
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !51
  %208 = sext i32 %201 to i64, !dbg !51
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !51
  %210 = sext i32 %203 to i64, !dbg !51
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !51
  %212 = sext i32 %205 to i64, !dbg !51
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !51
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 %61) #2, !dbg !52
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !52
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !52
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !52
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !52
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %209, i1 %61) #2, !dbg !52
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !52
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !52
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !52
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !52
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %211, i1 %61) #2, !dbg !52
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !52
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !52
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !52
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !52
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %61) #2, !dbg !52
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !52
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !52
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !52
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !52
  %234 = add i32 %44, 6144, !dbg !53
  %235 = add i32 %234, %23, !dbg !54
  %236 = add i32 %235, %42, !dbg !55
  %237 = add i32 %234, %24, !dbg !54
  %238 = add i32 %237, %42, !dbg !55
  %239 = add i32 %234, %25, !dbg !54
  %240 = add i32 %239, %42, !dbg !55
  %241 = add i32 %234, %26, !dbg !54
  %242 = add i32 %241, %42, !dbg !55
  %243 = sext i32 %236 to i64, !dbg !56
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !56
  %245 = sext i32 %238 to i64, !dbg !56
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !56
  %247 = sext i32 %240 to i64, !dbg !56
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !56
  %249 = sext i32 %242 to i64, !dbg !56
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !56
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %244, i1 %61) #2, !dbg !57
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !57
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !57
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !57
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !57
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %246, i1 %61) #2, !dbg !57
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !57
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !57
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !57
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !57
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %248, i1 %61) #2, !dbg !57
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !57
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !57
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !57
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !57
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %250, i1 %61) #2, !dbg !57
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !57
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !57
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !57
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !57
  %271 = add i32 %44, 9216, !dbg !58
  %272 = add i32 %271, %23, !dbg !59
  %273 = add i32 %272, %42, !dbg !60
  %274 = add i32 %271, %24, !dbg !59
  %275 = add i32 %274, %42, !dbg !60
  %276 = add i32 %271, %25, !dbg !59
  %277 = add i32 %276, %42, !dbg !60
  %278 = add i32 %271, %26, !dbg !59
  %279 = add i32 %278, %42, !dbg !60
  %280 = sext i32 %273 to i64, !dbg !61
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !61
  %282 = sext i32 %275 to i64, !dbg !61
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !61
  %284 = sext i32 %277 to i64, !dbg !61
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !61
  %286 = sext i32 %279 to i64, !dbg !61
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !61
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %281, i1 %61) #2, !dbg !62
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !62
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !62
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !62
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !62
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %283, i1 %61) #2, !dbg !62
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !62
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !62
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !62
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !62
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %285, i1 %61) #2, !dbg !62
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !62
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !62
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !62
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !62
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %287, i1 %61) #2, !dbg !62
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !62
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !62
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !62
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !62
  %308 = add i32 %44, 9984, !dbg !63
  %309 = add i32 %308, %23, !dbg !64
  %310 = add i32 %309, %42, !dbg !65
  %311 = add i32 %308, %24, !dbg !64
  %312 = add i32 %311, %42, !dbg !65
  %313 = add i32 %308, %25, !dbg !64
  %314 = add i32 %313, %42, !dbg !65
  %315 = add i32 %308, %26, !dbg !64
  %316 = add i32 %315, %42, !dbg !65
  %317 = sext i32 %310 to i64, !dbg !66
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !66
  %319 = sext i32 %312 to i64, !dbg !66
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !66
  %321 = sext i32 %314 to i64, !dbg !66
  %322 = getelementptr float, ptr addrspace(1) %0, i64 %321, !dbg !66
  %323 = sext i32 %316 to i64, !dbg !66
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !66
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %318, i1 %61) #2, !dbg !67
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !67
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !67
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !67
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !67
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %320, i1 %61) #2, !dbg !67
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !67
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !67
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !67
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !67
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %322, i1 %61) #2, !dbg !67
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !67
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !67
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !67
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !67
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %324, i1 %61) #2, !dbg !67
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !67
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !67
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !67
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !67
  %345 = add i32 %44, 10752, !dbg !68
  %346 = add i32 %345, %23, !dbg !69
  %347 = add i32 %346, %42, !dbg !70
  %348 = add i32 %345, %24, !dbg !69
  %349 = add i32 %348, %42, !dbg !70
  %350 = add i32 %345, %25, !dbg !69
  %351 = add i32 %350, %42, !dbg !70
  %352 = add i32 %345, %26, !dbg !69
  %353 = add i32 %352, %42, !dbg !70
  %354 = sext i32 %347 to i64, !dbg !71
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !71
  %356 = sext i32 %349 to i64, !dbg !71
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !71
  %358 = sext i32 %351 to i64, !dbg !71
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !71
  %360 = sext i32 %353 to i64, !dbg !71
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !71
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %355, i1 %61) #2, !dbg !72
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !72
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !72
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !72
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !72
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %357, i1 %61) #2, !dbg !72
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !72
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !72
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !72
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !72
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %359, i1 %61) #2, !dbg !72
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !72
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !72
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !72
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !72
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %361, i1 %61) #2, !dbg !72
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !72
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !72
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !72
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !72
  %382 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !32
  %383 = insertelement <4 x i32> %382, i32 %68, i64 1, !dbg !32
  %384 = insertelement <4 x i32> %383, i32 %69, i64 2, !dbg !32
  %385 = insertelement <4 x i32> %384, i32 %70, i64 3, !dbg !32
  %386 = bitcast <4 x i32> %385 to <4 x float>, !dbg !32
  %387 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !37
  %388 = insertelement <4 x i32> %387, i32 %105, i64 1, !dbg !37
  %389 = insertelement <4 x i32> %388, i32 %106, i64 2, !dbg !37
  %390 = insertelement <4 x i32> %389, i32 %107, i64 3, !dbg !37
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !37
  %392 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !42
  %393 = insertelement <4 x i32> %392, i32 %142, i64 1, !dbg !42
  %394 = insertelement <4 x i32> %393, i32 %143, i64 2, !dbg !42
  %395 = insertelement <4 x i32> %394, i32 %144, i64 3, !dbg !42
  %396 = bitcast <4 x i32> %395 to <4 x float>, !dbg !42
  %397 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !47
  %398 = insertelement <4 x i32> %397, i32 %179, i64 1, !dbg !47
  %399 = insertelement <4 x i32> %398, i32 %180, i64 2, !dbg !47
  %400 = insertelement <4 x i32> %399, i32 %181, i64 3, !dbg !47
  %401 = bitcast <4 x i32> %400 to <4 x float>, !dbg !47
  %402 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !52
  %403 = insertelement <4 x i32> %402, i32 %216, i64 1, !dbg !52
  %404 = insertelement <4 x i32> %403, i32 %217, i64 2, !dbg !52
  %405 = insertelement <4 x i32> %404, i32 %218, i64 3, !dbg !52
  %406 = bitcast <4 x i32> %405 to <4 x float>, !dbg !52
  %407 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !57
  %408 = insertelement <4 x i32> %407, i32 %253, i64 1, !dbg !57
  %409 = insertelement <4 x i32> %408, i32 %254, i64 2, !dbg !57
  %410 = insertelement <4 x i32> %409, i32 %255, i64 3, !dbg !57
  %411 = bitcast <4 x i32> %410 to <4 x float>, !dbg !57
  %412 = insertelement <4 x i32> poison, i32 %289, i64 0, !dbg !62
  %413 = insertelement <4 x i32> %412, i32 %290, i64 1, !dbg !62
  %414 = insertelement <4 x i32> %413, i32 %291, i64 2, !dbg !62
  %415 = insertelement <4 x i32> %414, i32 %292, i64 3, !dbg !62
  %416 = bitcast <4 x i32> %415 to <4 x float>, !dbg !62
  %417 = insertelement <4 x i32> poison, i32 %326, i64 0, !dbg !67
  %418 = insertelement <4 x i32> %417, i32 %327, i64 1, !dbg !67
  %419 = insertelement <4 x i32> %418, i32 %328, i64 2, !dbg !67
  %420 = insertelement <4 x i32> %419, i32 %329, i64 3, !dbg !67
  %421 = bitcast <4 x i32> %420 to <4 x float>, !dbg !67
  %422 = insertelement <4 x i32> poison, i32 %363, i64 0, !dbg !72
  %423 = insertelement <4 x i32> %422, i32 %364, i64 1, !dbg !72
  %424 = insertelement <4 x i32> %423, i32 %365, i64 2, !dbg !72
  %425 = insertelement <4 x i32> %424, i32 %366, i64 3, !dbg !72
  %426 = bitcast <4 x i32> %425 to <4 x float>, !dbg !72
  %427 = fcmp ogt <4 x float> %391, %386, !dbg !73
  %428 = fcmp uno <4 x float> %391, zeroinitializer, !dbg !77
  %429 = or <4 x i1> %427, %428, !dbg !78
  %.v = select <4 x i1> %429, <4 x i32> %390, <4 x i32> %385, !dbg !79
  %430 = bitcast <4 x i32> %.v to <4 x float>, !dbg !79
  %431 = fcmp olt <4 x float> %430, %396, !dbg !80
  %432 = fcmp uno <4 x float> %396, zeroinitializer, !dbg !82
  %433 = or <4 x i1> %431, %432, !dbg !83
  %.v34 = select <4 x i1> %433, <4 x i32> %395, <4 x i32> %.v, !dbg !84
  %434 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !84
  %435 = fcmp olt <4 x float> %434, %401, !dbg !85
  %436 = fcmp uno <4 x float> %401, zeroinitializer, !dbg !87
  %437 = or <4 x i1> %435, %436, !dbg !88
  %.v35 = select <4 x i1> %437, <4 x i32> %400, <4 x i32> %.v34, !dbg !89
  %438 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !89
  %439 = fcmp olt <4 x float> %438, %406, !dbg !90
  %440 = fcmp uno <4 x float> %406, zeroinitializer, !dbg !92
  %441 = or <4 x i1> %439, %440, !dbg !93
  %.v36 = select <4 x i1> %441, <4 x i32> %405, <4 x i32> %.v35, !dbg !94
  %442 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !94
  %443 = fcmp olt <4 x float> %442, %411, !dbg !95
  %444 = fcmp uno <4 x float> %411, zeroinitializer, !dbg !97
  %445 = or <4 x i1> %443, %444, !dbg !98
  %.v37 = select <4 x i1> %445, <4 x i32> %410, <4 x i32> %.v36, !dbg !99
  %446 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !99
  %447 = fcmp olt <4 x float> %446, %416, !dbg !100
  %448 = fcmp uno <4 x float> %416, zeroinitializer, !dbg !102
  %449 = or <4 x i1> %447, %448, !dbg !103
  %.v38 = select <4 x i1> %449, <4 x i32> %415, <4 x i32> %.v37, !dbg !104
  %450 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !104
  %451 = fcmp olt <4 x float> %450, %421, !dbg !105
  %452 = fcmp uno <4 x float> %421, zeroinitializer, !dbg !107
  %453 = or <4 x i1> %451, %452, !dbg !108
  %.v39 = select <4 x i1> %453, <4 x i32> %420, <4 x i32> %.v38, !dbg !109
  %454 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !109
  %455 = fcmp olt <4 x float> %454, %426, !dbg !110
  %456 = bitcast i32 %363 to float, !dbg !112
  %457 = fcmp uno float %456, 0.000000e+00, !dbg !112
  %458 = bitcast i32 %364 to float, !dbg !112
  %459 = fcmp uno float %458, 0.000000e+00, !dbg !112
  %460 = bitcast i32 %365 to float, !dbg !112
  %461 = fcmp uno float %460, 0.000000e+00, !dbg !112
  %462 = bitcast i32 %366 to float, !dbg !112
  %463 = fcmp uno float %462, 0.000000e+00, !dbg !112
  %464 = extractelement <4 x i1> %455, i64 0, !dbg !113
  %465 = or i1 %464, %457, !dbg !113
  %466 = extractelement <4 x i1> %455, i64 1, !dbg !113
  %467 = or i1 %466, %459, !dbg !113
  %468 = extractelement <4 x i1> %455, i64 2, !dbg !113
  %469 = or i1 %468, %461, !dbg !113
  %470 = extractelement <4 x i1> %455, i64 3, !dbg !113
  %471 = or i1 %470, %463, !dbg !113
  %472 = zext <4 x i1> %427 to <4 x i8>, !dbg !114
  %473 = select <4 x i1> %431, <4 x i8> splat (i8 2), <4 x i8> %472, !dbg !115
  %474 = select <4 x i1> %435, <4 x i8> splat (i8 3), <4 x i8> %473, !dbg !116
  %475 = select <4 x i1> %439, <4 x i8> splat (i8 4), <4 x i8> %474, !dbg !117
  %476 = select <4 x i1> %443, <4 x i8> splat (i8 5), <4 x i8> %475, !dbg !118
  %477 = select <4 x i1> %447, <4 x i8> splat (i8 6), <4 x i8> %476, !dbg !119
  %478 = select <4 x i1> %451, <4 x i8> splat (i8 7), <4 x i8> %477, !dbg !120
  %479 = select <4 x i1> %455, <4 x i8> splat (i8 8), <4 x i8> %478, !dbg !121
  %480 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !32
  %481 = insertelement <4 x i32> %480, i32 %73, i64 1, !dbg !32
  %482 = insertelement <4 x i32> %481, i32 %74, i64 2, !dbg !32
  %483 = insertelement <4 x i32> %482, i32 %75, i64 3, !dbg !32
  %484 = bitcast <4 x i32> %483 to <4 x float>, !dbg !32
  %485 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !37
  %486 = insertelement <4 x i32> %485, i32 %110, i64 1, !dbg !37
  %487 = insertelement <4 x i32> %486, i32 %111, i64 2, !dbg !37
  %488 = insertelement <4 x i32> %487, i32 %112, i64 3, !dbg !37
  %489 = bitcast <4 x i32> %488 to <4 x float>, !dbg !37
  %490 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !42
  %491 = insertelement <4 x i32> %490, i32 %147, i64 1, !dbg !42
  %492 = insertelement <4 x i32> %491, i32 %148, i64 2, !dbg !42
  %493 = insertelement <4 x i32> %492, i32 %149, i64 3, !dbg !42
  %494 = bitcast <4 x i32> %493 to <4 x float>, !dbg !42
  %495 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !47
  %496 = insertelement <4 x i32> %495, i32 %184, i64 1, !dbg !47
  %497 = insertelement <4 x i32> %496, i32 %185, i64 2, !dbg !47
  %498 = insertelement <4 x i32> %497, i32 %186, i64 3, !dbg !47
  %499 = bitcast <4 x i32> %498 to <4 x float>, !dbg !47
  %500 = insertelement <4 x i32> poison, i32 %220, i64 0, !dbg !52
  %501 = insertelement <4 x i32> %500, i32 %221, i64 1, !dbg !52
  %502 = insertelement <4 x i32> %501, i32 %222, i64 2, !dbg !52
  %503 = insertelement <4 x i32> %502, i32 %223, i64 3, !dbg !52
  %504 = bitcast <4 x i32> %503 to <4 x float>, !dbg !52
  %505 = insertelement <4 x i32> poison, i32 %257, i64 0, !dbg !57
  %506 = insertelement <4 x i32> %505, i32 %258, i64 1, !dbg !57
  %507 = insertelement <4 x i32> %506, i32 %259, i64 2, !dbg !57
  %508 = insertelement <4 x i32> %507, i32 %260, i64 3, !dbg !57
  %509 = bitcast <4 x i32> %508 to <4 x float>, !dbg !57
  %510 = insertelement <4 x i32> poison, i32 %294, i64 0, !dbg !62
  %511 = insertelement <4 x i32> %510, i32 %295, i64 1, !dbg !62
  %512 = insertelement <4 x i32> %511, i32 %296, i64 2, !dbg !62
  %513 = insertelement <4 x i32> %512, i32 %297, i64 3, !dbg !62
  %514 = bitcast <4 x i32> %513 to <4 x float>, !dbg !62
  %515 = insertelement <4 x i32> poison, i32 %331, i64 0, !dbg !67
  %516 = insertelement <4 x i32> %515, i32 %332, i64 1, !dbg !67
  %517 = insertelement <4 x i32> %516, i32 %333, i64 2, !dbg !67
  %518 = insertelement <4 x i32> %517, i32 %334, i64 3, !dbg !67
  %519 = bitcast <4 x i32> %518 to <4 x float>, !dbg !67
  %520 = insertelement <4 x i32> poison, i32 %368, i64 0, !dbg !72
  %521 = insertelement <4 x i32> %520, i32 %369, i64 1, !dbg !72
  %522 = insertelement <4 x i32> %521, i32 %370, i64 2, !dbg !72
  %523 = insertelement <4 x i32> %522, i32 %371, i64 3, !dbg !72
  %524 = bitcast <4 x i32> %523 to <4 x float>, !dbg !72
  %525 = fcmp ogt <4 x float> %489, %484, !dbg !73
  %526 = fcmp uno <4 x float> %489, zeroinitializer, !dbg !77
  %527 = or <4 x i1> %525, %526, !dbg !78
  %.v40 = select <4 x i1> %527, <4 x i32> %488, <4 x i32> %483, !dbg !79
  %528 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !79
  %529 = fcmp olt <4 x float> %528, %494, !dbg !80
  %530 = fcmp uno <4 x float> %494, zeroinitializer, !dbg !82
  %531 = or <4 x i1> %529, %530, !dbg !83
  %.v41 = select <4 x i1> %531, <4 x i32> %493, <4 x i32> %.v40, !dbg !84
  %532 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !84
  %533 = fcmp olt <4 x float> %532, %499, !dbg !85
  %534 = fcmp uno <4 x float> %499, zeroinitializer, !dbg !87
  %535 = or <4 x i1> %533, %534, !dbg !88
  %.v42 = select <4 x i1> %535, <4 x i32> %498, <4 x i32> %.v41, !dbg !89
  %536 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !89
  %537 = fcmp olt <4 x float> %536, %504, !dbg !90
  %538 = fcmp uno <4 x float> %504, zeroinitializer, !dbg !92
  %539 = or <4 x i1> %537, %538, !dbg !93
  %.v43 = select <4 x i1> %539, <4 x i32> %503, <4 x i32> %.v42, !dbg !94
  %540 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !94
  %541 = fcmp olt <4 x float> %540, %509, !dbg !95
  %542 = fcmp uno <4 x float> %509, zeroinitializer, !dbg !97
  %543 = or <4 x i1> %541, %542, !dbg !98
  %.v44 = select <4 x i1> %543, <4 x i32> %508, <4 x i32> %.v43, !dbg !99
  %544 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !99
  %545 = fcmp olt <4 x float> %544, %514, !dbg !100
  %546 = fcmp uno <4 x float> %514, zeroinitializer, !dbg !102
  %547 = or <4 x i1> %545, %546, !dbg !103
  %.v45 = select <4 x i1> %547, <4 x i32> %513, <4 x i32> %.v44, !dbg !104
  %548 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !104
  %549 = fcmp olt <4 x float> %548, %519, !dbg !105
  %550 = fcmp uno <4 x float> %519, zeroinitializer, !dbg !107
  %551 = or <4 x i1> %549, %550, !dbg !108
  %.v46 = select <4 x i1> %551, <4 x i32> %518, <4 x i32> %.v45, !dbg !109
  %552 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !109
  %553 = fcmp olt <4 x float> %552, %524, !dbg !110
  %554 = bitcast i32 %368 to float, !dbg !112
  %555 = fcmp uno float %554, 0.000000e+00, !dbg !112
  %556 = bitcast i32 %369 to float, !dbg !112
  %557 = fcmp uno float %556, 0.000000e+00, !dbg !112
  %558 = bitcast i32 %370 to float, !dbg !112
  %559 = fcmp uno float %558, 0.000000e+00, !dbg !112
  %560 = bitcast i32 %371 to float, !dbg !112
  %561 = fcmp uno float %560, 0.000000e+00, !dbg !112
  %562 = extractelement <4 x i1> %553, i64 0, !dbg !113
  %563 = or i1 %562, %555, !dbg !113
  %564 = extractelement <4 x i1> %553, i64 1, !dbg !113
  %565 = or i1 %564, %557, !dbg !113
  %566 = extractelement <4 x i1> %553, i64 2, !dbg !113
  %567 = or i1 %566, %559, !dbg !113
  %568 = extractelement <4 x i1> %553, i64 3, !dbg !113
  %569 = or i1 %568, %561, !dbg !113
  %570 = zext <4 x i1> %525 to <4 x i8>, !dbg !114
  %571 = select <4 x i1> %529, <4 x i8> splat (i8 2), <4 x i8> %570, !dbg !115
  %572 = select <4 x i1> %533, <4 x i8> splat (i8 3), <4 x i8> %571, !dbg !116
  %573 = select <4 x i1> %537, <4 x i8> splat (i8 4), <4 x i8> %572, !dbg !117
  %574 = select <4 x i1> %541, <4 x i8> splat (i8 5), <4 x i8> %573, !dbg !118
  %575 = select <4 x i1> %545, <4 x i8> splat (i8 6), <4 x i8> %574, !dbg !119
  %576 = select <4 x i1> %549, <4 x i8> splat (i8 7), <4 x i8> %575, !dbg !120
  %577 = select <4 x i1> %553, <4 x i8> splat (i8 8), <4 x i8> %576, !dbg !121
  %578 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !32
  %579 = insertelement <4 x i32> %578, i32 %78, i64 1, !dbg !32
  %580 = insertelement <4 x i32> %579, i32 %79, i64 2, !dbg !32
  %581 = insertelement <4 x i32> %580, i32 %80, i64 3, !dbg !32
  %582 = bitcast <4 x i32> %581 to <4 x float>, !dbg !32
  %583 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !37
  %584 = insertelement <4 x i32> %583, i32 %115, i64 1, !dbg !37
  %585 = insertelement <4 x i32> %584, i32 %116, i64 2, !dbg !37
  %586 = insertelement <4 x i32> %585, i32 %117, i64 3, !dbg !37
  %587 = bitcast <4 x i32> %586 to <4 x float>, !dbg !37
  %588 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !42
  %589 = insertelement <4 x i32> %588, i32 %152, i64 1, !dbg !42
  %590 = insertelement <4 x i32> %589, i32 %153, i64 2, !dbg !42
  %591 = insertelement <4 x i32> %590, i32 %154, i64 3, !dbg !42
  %592 = bitcast <4 x i32> %591 to <4 x float>, !dbg !42
  %593 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !47
  %594 = insertelement <4 x i32> %593, i32 %189, i64 1, !dbg !47
  %595 = insertelement <4 x i32> %594, i32 %190, i64 2, !dbg !47
  %596 = insertelement <4 x i32> %595, i32 %191, i64 3, !dbg !47
  %597 = bitcast <4 x i32> %596 to <4 x float>, !dbg !47
  %598 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !52
  %599 = insertelement <4 x i32> %598, i32 %226, i64 1, !dbg !52
  %600 = insertelement <4 x i32> %599, i32 %227, i64 2, !dbg !52
  %601 = insertelement <4 x i32> %600, i32 %228, i64 3, !dbg !52
  %602 = bitcast <4 x i32> %601 to <4 x float>, !dbg !52
  %603 = insertelement <4 x i32> poison, i32 %262, i64 0, !dbg !57
  %604 = insertelement <4 x i32> %603, i32 %263, i64 1, !dbg !57
  %605 = insertelement <4 x i32> %604, i32 %264, i64 2, !dbg !57
  %606 = insertelement <4 x i32> %605, i32 %265, i64 3, !dbg !57
  %607 = bitcast <4 x i32> %606 to <4 x float>, !dbg !57
  %608 = insertelement <4 x i32> poison, i32 %299, i64 0, !dbg !62
  %609 = insertelement <4 x i32> %608, i32 %300, i64 1, !dbg !62
  %610 = insertelement <4 x i32> %609, i32 %301, i64 2, !dbg !62
  %611 = insertelement <4 x i32> %610, i32 %302, i64 3, !dbg !62
  %612 = bitcast <4 x i32> %611 to <4 x float>, !dbg !62
  %613 = insertelement <4 x i32> poison, i32 %336, i64 0, !dbg !67
  %614 = insertelement <4 x i32> %613, i32 %337, i64 1, !dbg !67
  %615 = insertelement <4 x i32> %614, i32 %338, i64 2, !dbg !67
  %616 = insertelement <4 x i32> %615, i32 %339, i64 3, !dbg !67
  %617 = bitcast <4 x i32> %616 to <4 x float>, !dbg !67
  %618 = insertelement <4 x i32> poison, i32 %373, i64 0, !dbg !72
  %619 = insertelement <4 x i32> %618, i32 %374, i64 1, !dbg !72
  %620 = insertelement <4 x i32> %619, i32 %375, i64 2, !dbg !72
  %621 = insertelement <4 x i32> %620, i32 %376, i64 3, !dbg !72
  %622 = bitcast <4 x i32> %621 to <4 x float>, !dbg !72
  %623 = fcmp ogt <4 x float> %587, %582, !dbg !73
  %624 = fcmp uno <4 x float> %587, zeroinitializer, !dbg !77
  %625 = or <4 x i1> %623, %624, !dbg !78
  %.v47 = select <4 x i1> %625, <4 x i32> %586, <4 x i32> %581, !dbg !79
  %626 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !79
  %627 = fcmp olt <4 x float> %626, %592, !dbg !80
  %628 = fcmp uno <4 x float> %592, zeroinitializer, !dbg !82
  %629 = or <4 x i1> %627, %628, !dbg !83
  %.v48 = select <4 x i1> %629, <4 x i32> %591, <4 x i32> %.v47, !dbg !84
  %630 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !84
  %631 = fcmp olt <4 x float> %630, %597, !dbg !85
  %632 = fcmp uno <4 x float> %597, zeroinitializer, !dbg !87
  %633 = or <4 x i1> %631, %632, !dbg !88
  %.v49 = select <4 x i1> %633, <4 x i32> %596, <4 x i32> %.v48, !dbg !89
  %634 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !89
  %635 = fcmp olt <4 x float> %634, %602, !dbg !90
  %636 = fcmp uno <4 x float> %602, zeroinitializer, !dbg !92
  %637 = or <4 x i1> %635, %636, !dbg !93
  %.v50 = select <4 x i1> %637, <4 x i32> %601, <4 x i32> %.v49, !dbg !94
  %638 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !94
  %639 = fcmp olt <4 x float> %638, %607, !dbg !95
  %640 = fcmp uno <4 x float> %607, zeroinitializer, !dbg !97
  %641 = or <4 x i1> %639, %640, !dbg !98
  %.v51 = select <4 x i1> %641, <4 x i32> %606, <4 x i32> %.v50, !dbg !99
  %642 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !99
  %643 = fcmp olt <4 x float> %642, %612, !dbg !100
  %644 = fcmp uno <4 x float> %612, zeroinitializer, !dbg !102
  %645 = or <4 x i1> %643, %644, !dbg !103
  %.v52 = select <4 x i1> %645, <4 x i32> %611, <4 x i32> %.v51, !dbg !104
  %646 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !104
  %647 = fcmp olt <4 x float> %646, %617, !dbg !105
  %648 = fcmp uno <4 x float> %617, zeroinitializer, !dbg !107
  %649 = or <4 x i1> %647, %648, !dbg !108
  %.v53 = select <4 x i1> %649, <4 x i32> %616, <4 x i32> %.v52, !dbg !109
  %650 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !109
  %651 = fcmp olt <4 x float> %650, %622, !dbg !110
  %652 = bitcast i32 %373 to float, !dbg !112
  %653 = fcmp uno float %652, 0.000000e+00, !dbg !112
  %654 = bitcast i32 %374 to float, !dbg !112
  %655 = fcmp uno float %654, 0.000000e+00, !dbg !112
  %656 = bitcast i32 %375 to float, !dbg !112
  %657 = fcmp uno float %656, 0.000000e+00, !dbg !112
  %658 = bitcast i32 %376 to float, !dbg !112
  %659 = fcmp uno float %658, 0.000000e+00, !dbg !112
  %660 = extractelement <4 x i1> %651, i64 0, !dbg !113
  %661 = or i1 %660, %653, !dbg !113
  %662 = extractelement <4 x i1> %651, i64 1, !dbg !113
  %663 = or i1 %662, %655, !dbg !113
  %664 = extractelement <4 x i1> %651, i64 2, !dbg !113
  %665 = or i1 %664, %657, !dbg !113
  %666 = extractelement <4 x i1> %651, i64 3, !dbg !113
  %667 = or i1 %666, %659, !dbg !113
  %668 = zext <4 x i1> %623 to <4 x i8>, !dbg !114
  %669 = select <4 x i1> %627, <4 x i8> splat (i8 2), <4 x i8> %668, !dbg !115
  %670 = select <4 x i1> %631, <4 x i8> splat (i8 3), <4 x i8> %669, !dbg !116
  %671 = select <4 x i1> %635, <4 x i8> splat (i8 4), <4 x i8> %670, !dbg !117
  %672 = select <4 x i1> %639, <4 x i8> splat (i8 5), <4 x i8> %671, !dbg !118
  %673 = select <4 x i1> %643, <4 x i8> splat (i8 6), <4 x i8> %672, !dbg !119
  %674 = select <4 x i1> %647, <4 x i8> splat (i8 7), <4 x i8> %673, !dbg !120
  %675 = select <4 x i1> %651, <4 x i8> splat (i8 8), <4 x i8> %674, !dbg !121
  %676 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !32
  %677 = insertelement <4 x i32> %676, i32 %83, i64 1, !dbg !32
  %678 = insertelement <4 x i32> %677, i32 %84, i64 2, !dbg !32
  %679 = insertelement <4 x i32> %678, i32 %85, i64 3, !dbg !32
  %680 = bitcast <4 x i32> %679 to <4 x float>, !dbg !32
  %681 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !37
  %682 = insertelement <4 x i32> %681, i32 %120, i64 1, !dbg !37
  %683 = insertelement <4 x i32> %682, i32 %121, i64 2, !dbg !37
  %684 = insertelement <4 x i32> %683, i32 %122, i64 3, !dbg !37
  %685 = bitcast <4 x i32> %684 to <4 x float>, !dbg !37
  %686 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !42
  %687 = insertelement <4 x i32> %686, i32 %157, i64 1, !dbg !42
  %688 = insertelement <4 x i32> %687, i32 %158, i64 2, !dbg !42
  %689 = insertelement <4 x i32> %688, i32 %159, i64 3, !dbg !42
  %690 = bitcast <4 x i32> %689 to <4 x float>, !dbg !42
  %691 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !47
  %692 = insertelement <4 x i32> %691, i32 %194, i64 1, !dbg !47
  %693 = insertelement <4 x i32> %692, i32 %195, i64 2, !dbg !47
  %694 = insertelement <4 x i32> %693, i32 %196, i64 3, !dbg !47
  %695 = bitcast <4 x i32> %694 to <4 x float>, !dbg !47
  %696 = insertelement <4 x i32> poison, i32 %230, i64 0, !dbg !52
  %697 = insertelement <4 x i32> %696, i32 %231, i64 1, !dbg !52
  %698 = insertelement <4 x i32> %697, i32 %232, i64 2, !dbg !52
  %699 = insertelement <4 x i32> %698, i32 %233, i64 3, !dbg !52
  %700 = bitcast <4 x i32> %699 to <4 x float>, !dbg !52
  %701 = insertelement <4 x i32> poison, i32 %267, i64 0, !dbg !57
  %702 = insertelement <4 x i32> %701, i32 %268, i64 1, !dbg !57
  %703 = insertelement <4 x i32> %702, i32 %269, i64 2, !dbg !57
  %704 = insertelement <4 x i32> %703, i32 %270, i64 3, !dbg !57
  %705 = bitcast <4 x i32> %704 to <4 x float>, !dbg !57
  %706 = insertelement <4 x i32> poison, i32 %304, i64 0, !dbg !62
  %707 = insertelement <4 x i32> %706, i32 %305, i64 1, !dbg !62
  %708 = insertelement <4 x i32> %707, i32 %306, i64 2, !dbg !62
  %709 = insertelement <4 x i32> %708, i32 %307, i64 3, !dbg !62
  %710 = bitcast <4 x i32> %709 to <4 x float>, !dbg !62
  %711 = insertelement <4 x i32> poison, i32 %341, i64 0, !dbg !67
  %712 = insertelement <4 x i32> %711, i32 %342, i64 1, !dbg !67
  %713 = insertelement <4 x i32> %712, i32 %343, i64 2, !dbg !67
  %714 = insertelement <4 x i32> %713, i32 %344, i64 3, !dbg !67
  %715 = bitcast <4 x i32> %714 to <4 x float>, !dbg !67
  %716 = insertelement <4 x i32> poison, i32 %378, i64 0, !dbg !72
  %717 = insertelement <4 x i32> %716, i32 %379, i64 1, !dbg !72
  %718 = insertelement <4 x i32> %717, i32 %380, i64 2, !dbg !72
  %719 = insertelement <4 x i32> %718, i32 %381, i64 3, !dbg !72
  %720 = bitcast <4 x i32> %719 to <4 x float>, !dbg !72
  %721 = fcmp ogt <4 x float> %685, %680, !dbg !73
  %722 = fcmp uno <4 x float> %685, zeroinitializer, !dbg !77
  %723 = or <4 x i1> %721, %722, !dbg !78
  %.v54 = select <4 x i1> %723, <4 x i32> %684, <4 x i32> %679, !dbg !79
  %724 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !79
  %725 = fcmp olt <4 x float> %724, %690, !dbg !80
  %726 = fcmp uno <4 x float> %690, zeroinitializer, !dbg !82
  %727 = or <4 x i1> %725, %726, !dbg !83
  %.v55 = select <4 x i1> %727, <4 x i32> %689, <4 x i32> %.v54, !dbg !84
  %728 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !84
  %729 = fcmp olt <4 x float> %728, %695, !dbg !85
  %730 = fcmp uno <4 x float> %695, zeroinitializer, !dbg !87
  %731 = or <4 x i1> %729, %730, !dbg !88
  %.v56 = select <4 x i1> %731, <4 x i32> %694, <4 x i32> %.v55, !dbg !89
  %732 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !89
  %733 = fcmp olt <4 x float> %732, %700, !dbg !90
  %734 = fcmp uno <4 x float> %700, zeroinitializer, !dbg !92
  %735 = or <4 x i1> %733, %734, !dbg !93
  %.v57 = select <4 x i1> %735, <4 x i32> %699, <4 x i32> %.v56, !dbg !94
  %736 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !94
  %737 = fcmp olt <4 x float> %736, %705, !dbg !95
  %738 = fcmp uno <4 x float> %705, zeroinitializer, !dbg !97
  %739 = or <4 x i1> %737, %738, !dbg !98
  %.v58 = select <4 x i1> %739, <4 x i32> %704, <4 x i32> %.v57, !dbg !99
  %740 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !99
  %741 = fcmp olt <4 x float> %740, %710, !dbg !100
  %742 = fcmp uno <4 x float> %710, zeroinitializer, !dbg !102
  %743 = or <4 x i1> %741, %742, !dbg !103
  %.v59 = select <4 x i1> %743, <4 x i32> %709, <4 x i32> %.v58, !dbg !104
  %744 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !104
  %745 = fcmp olt <4 x float> %744, %715, !dbg !105
  %746 = fcmp uno <4 x float> %715, zeroinitializer, !dbg !107
  %747 = or <4 x i1> %745, %746, !dbg !108
  %.v60 = select <4 x i1> %747, <4 x i32> %714, <4 x i32> %.v59, !dbg !109
  %748 = bitcast <4 x i32> %.v60 to <4 x float>, !dbg !109
  %749 = fcmp olt <4 x float> %748, %720, !dbg !110
  %750 = bitcast i32 %378 to float, !dbg !112
  %751 = fcmp uno float %750, 0.000000e+00, !dbg !112
  %752 = bitcast i32 %379 to float, !dbg !112
  %753 = fcmp uno float %752, 0.000000e+00, !dbg !112
  %754 = bitcast i32 %380 to float, !dbg !112
  %755 = fcmp uno float %754, 0.000000e+00, !dbg !112
  %756 = bitcast i32 %381 to float, !dbg !112
  %757 = fcmp uno float %756, 0.000000e+00, !dbg !112
  %758 = extractelement <4 x i1> %749, i64 0, !dbg !113
  %759 = or i1 %758, %751, !dbg !113
  %760 = extractelement <4 x i1> %749, i64 1, !dbg !113
  %761 = or i1 %760, %753, !dbg !113
  %762 = extractelement <4 x i1> %749, i64 2, !dbg !113
  %763 = or i1 %762, %755, !dbg !113
  %764 = extractelement <4 x i1> %749, i64 3, !dbg !113
  %765 = or i1 %764, %757, !dbg !113
  %766 = zext <4 x i1> %721 to <4 x i8>, !dbg !114
  %767 = select <4 x i1> %725, <4 x i8> splat (i8 2), <4 x i8> %766, !dbg !115
  %768 = select <4 x i1> %729, <4 x i8> splat (i8 3), <4 x i8> %767, !dbg !116
  %769 = select <4 x i1> %733, <4 x i8> splat (i8 4), <4 x i8> %768, !dbg !117
  %770 = select <4 x i1> %737, <4 x i8> splat (i8 5), <4 x i8> %769, !dbg !118
  %771 = select <4 x i1> %741, <4 x i8> splat (i8 6), <4 x i8> %770, !dbg !119
  %772 = select <4 x i1> %745, <4 x i8> splat (i8 7), <4 x i8> %771, !dbg !120
  %773 = select <4 x i1> %749, <4 x i8> splat (i8 8), <4 x i8> %772, !dbg !121
  %774 = shl i32 %27, 2, !dbg !122
  %775 = shl i32 %28, 2, !dbg !122
  %776 = shl i32 %29, 2, !dbg !122
  %777 = shl i32 %30, 2, !dbg !122
  %778 = mul i32 %40, 5120, !dbg !123
  %779 = add i32 %774, %778, !dbg !124
  %780 = add i32 %778, %775, !dbg !124
  %781 = add i32 %778, %776, !dbg !124
  %782 = add i32 %778, %777, !dbg !124
  %783 = sext i32 %779 to i64, !dbg !125
  %784 = getelementptr float, ptr addrspace(1) %1, i64 %783, !dbg !125
  %785 = sext i32 %780 to i64, !dbg !125
  %786 = getelementptr float, ptr addrspace(1) %1, i64 %785, !dbg !125
  %787 = sext i32 %781 to i64, !dbg !125
  %788 = getelementptr float, ptr addrspace(1) %1, i64 %787, !dbg !125
  %789 = sext i32 %782 to i64, !dbg !125
  %790 = getelementptr float, ptr addrspace(1) %1, i64 %789, !dbg !125
  %791 = shl i32 %8, 8, !dbg !126
  %792 = and i32 %791, 3840, !dbg !126
  %793 = or disjoint i32 %792, %10, !dbg !126
  %794 = and i32 %11, 1020, !dbg !126
  %795 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %792, !dbg !126
  %796 = getelementptr float, ptr addrspace(3) %795, i32 %793, !dbg !126
  %797 = extractelement <4 x i32> %.v39, i64 0, !dbg !126
  %798 = select i1 %465, i32 %363, i32 %797, !dbg !127
  %799 = insertelement <1 x i32> poison, i32 %798, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %796, <1 x i32> %799, i1 true) #2, !dbg !126
  %800 = or disjoint i32 %793, 16, !dbg !126
  %801 = lshr i32 %800, 2, !dbg !126
  %802 = and i32 %801, 964, !dbg !126
  %803 = getelementptr float, ptr addrspace(3) @global_smem, i32 %802, !dbg !126
  %804 = getelementptr float, ptr addrspace(3) %803, i32 %800, !dbg !126
  %805 = extractelement <4 x i32> %.v39, i64 1, !dbg !126
  %806 = select i1 %467, i32 %364, i32 %805, !dbg !127
  %807 = insertelement <1 x i32> poison, i32 %806, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %804, <1 x i32> %807, i1 true) #2, !dbg !126
  %808 = or disjoint i32 %793, 32, !dbg !126
  %809 = lshr i32 %808, 2, !dbg !126
  %810 = and i32 %809, 968, !dbg !126
  %811 = getelementptr float, ptr addrspace(3) @global_smem, i32 %810, !dbg !126
  %812 = getelementptr float, ptr addrspace(3) %811, i32 %808, !dbg !126
  %813 = extractelement <4 x i32> %.v39, i64 2, !dbg !126
  %814 = select i1 %469, i32 %365, i32 %813, !dbg !127
  %815 = insertelement <1 x i32> poison, i32 %814, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %812, <1 x i32> %815, i1 true) #2, !dbg !126
  %816 = or disjoint i32 %793, 48, !dbg !126
  %817 = lshr i32 %816, 2, !dbg !126
  %818 = and i32 %817, 972, !dbg !126
  %819 = getelementptr float, ptr addrspace(3) @global_smem, i32 %818, !dbg !126
  %820 = getelementptr float, ptr addrspace(3) %819, i32 %816, !dbg !126
  %821 = extractelement <4 x i32> %.v39, i64 3, !dbg !126
  %822 = select i1 %471, i32 %366, i32 %821, !dbg !127
  %823 = insertelement <1 x i32> poison, i32 %822, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %820, <1 x i32> %823, i1 true) #2, !dbg !126
  %824 = or disjoint i32 %793, 64, !dbg !126
  %825 = lshr i32 %824, 2, !dbg !126
  %826 = and i32 %825, 976, !dbg !126
  %827 = getelementptr float, ptr addrspace(3) @global_smem, i32 %826, !dbg !126
  %828 = getelementptr float, ptr addrspace(3) %827, i32 %824, !dbg !126
  %829 = extractelement <4 x i32> %.v46, i64 0, !dbg !126
  %830 = select i1 %563, i32 %368, i32 %829, !dbg !127
  %831 = insertelement <1 x i32> poison, i32 %830, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %828, <1 x i32> %831, i1 true) #2, !dbg !126
  %832 = or disjoint i32 %793, 80, !dbg !126
  %833 = lshr i32 %832, 2, !dbg !126
  %834 = and i32 %833, 980, !dbg !126
  %835 = getelementptr float, ptr addrspace(3) @global_smem, i32 %834, !dbg !126
  %836 = getelementptr float, ptr addrspace(3) %835, i32 %832, !dbg !126
  %837 = extractelement <4 x i32> %.v46, i64 1, !dbg !126
  %838 = select i1 %565, i32 %369, i32 %837, !dbg !127
  %839 = insertelement <1 x i32> poison, i32 %838, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %836, <1 x i32> %839, i1 true) #2, !dbg !126
  %840 = or disjoint i32 %793, 96, !dbg !126
  %841 = lshr i32 %840, 2, !dbg !126
  %842 = and i32 %841, 984, !dbg !126
  %843 = getelementptr float, ptr addrspace(3) @global_smem, i32 %842, !dbg !126
  %844 = getelementptr float, ptr addrspace(3) %843, i32 %840, !dbg !126
  %845 = extractelement <4 x i32> %.v46, i64 2, !dbg !126
  %846 = select i1 %567, i32 %370, i32 %845, !dbg !127
  %847 = insertelement <1 x i32> poison, i32 %846, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %847, i1 true) #2, !dbg !126
  %848 = or disjoint i32 %793, 112, !dbg !126
  %849 = lshr i32 %848, 2, !dbg !126
  %850 = and i32 %849, 988, !dbg !126
  %851 = getelementptr float, ptr addrspace(3) @global_smem, i32 %850, !dbg !126
  %852 = getelementptr float, ptr addrspace(3) %851, i32 %848, !dbg !126
  %853 = extractelement <4 x i32> %.v46, i64 3, !dbg !126
  %854 = select i1 %569, i32 %371, i32 %853, !dbg !127
  %855 = insertelement <1 x i32> poison, i32 %854, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %852, <1 x i32> %855, i1 true) #2, !dbg !126
  %856 = or disjoint i32 %793, 128, !dbg !126
  %857 = lshr i32 %856, 2, !dbg !126
  %858 = and i32 %857, 992, !dbg !126
  %859 = getelementptr float, ptr addrspace(3) @global_smem, i32 %858, !dbg !126
  %860 = getelementptr float, ptr addrspace(3) %859, i32 %856, !dbg !126
  %861 = extractelement <4 x i32> %.v53, i64 0, !dbg !126
  %862 = select i1 %661, i32 %373, i32 %861, !dbg !127
  %863 = insertelement <1 x i32> poison, i32 %862, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %860, <1 x i32> %863, i1 true) #2, !dbg !126
  %864 = or disjoint i32 %793, 144, !dbg !126
  %865 = lshr i32 %864, 2, !dbg !126
  %866 = and i32 %865, 996, !dbg !126
  %867 = getelementptr float, ptr addrspace(3) @global_smem, i32 %866, !dbg !126
  %868 = getelementptr float, ptr addrspace(3) %867, i32 %864, !dbg !126
  %869 = extractelement <4 x i32> %.v53, i64 1, !dbg !126
  %870 = select i1 %663, i32 %374, i32 %869, !dbg !127
  %871 = insertelement <1 x i32> poison, i32 %870, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %868, <1 x i32> %871, i1 true) #2, !dbg !126
  %872 = or disjoint i32 %793, 160, !dbg !126
  %873 = lshr i32 %872, 2, !dbg !126
  %874 = and i32 %873, 1000, !dbg !126
  %875 = getelementptr float, ptr addrspace(3) @global_smem, i32 %874, !dbg !126
  %876 = getelementptr float, ptr addrspace(3) %875, i32 %872, !dbg !126
  %877 = extractelement <4 x i32> %.v53, i64 2, !dbg !126
  %878 = select i1 %665, i32 %375, i32 %877, !dbg !127
  %879 = insertelement <1 x i32> poison, i32 %878, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %876, <1 x i32> %879, i1 true) #2, !dbg !126
  %880 = or disjoint i32 %793, 176, !dbg !126
  %881 = lshr i32 %880, 2, !dbg !126
  %882 = and i32 %881, 1004, !dbg !126
  %883 = getelementptr float, ptr addrspace(3) @global_smem, i32 %882, !dbg !126
  %884 = getelementptr float, ptr addrspace(3) %883, i32 %880, !dbg !126
  %885 = extractelement <4 x i32> %.v53, i64 3, !dbg !126
  %886 = select i1 %667, i32 %376, i32 %885, !dbg !127
  %887 = insertelement <1 x i32> poison, i32 %886, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %884, <1 x i32> %887, i1 true) #2, !dbg !126
  %888 = or disjoint i32 %793, 192, !dbg !126
  %889 = lshr i32 %888, 2, !dbg !126
  %890 = and i32 %889, 1008, !dbg !126
  %891 = getelementptr float, ptr addrspace(3) @global_smem, i32 %890, !dbg !126
  %892 = getelementptr float, ptr addrspace(3) %891, i32 %888, !dbg !126
  %893 = extractelement <4 x i32> %.v60, i64 0, !dbg !126
  %894 = select i1 %759, i32 %378, i32 %893, !dbg !127
  %895 = insertelement <1 x i32> poison, i32 %894, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %895, i1 true) #2, !dbg !126
  %896 = or disjoint i32 %793, 208, !dbg !126
  %897 = lshr i32 %896, 2, !dbg !126
  %898 = and i32 %897, 1012, !dbg !126
  %899 = getelementptr float, ptr addrspace(3) @global_smem, i32 %898, !dbg !126
  %900 = getelementptr float, ptr addrspace(3) %899, i32 %896, !dbg !126
  %901 = extractelement <4 x i32> %.v60, i64 1, !dbg !126
  %902 = select i1 %761, i32 %379, i32 %901, !dbg !127
  %903 = insertelement <1 x i32> poison, i32 %902, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %900, <1 x i32> %903, i1 true) #2, !dbg !126
  %904 = or disjoint i32 %793, 224, !dbg !126
  %905 = lshr i32 %904, 2, !dbg !126
  %906 = and i32 %905, 1016, !dbg !126
  %907 = getelementptr float, ptr addrspace(3) @global_smem, i32 %906, !dbg !126
  %908 = getelementptr float, ptr addrspace(3) %907, i32 %904, !dbg !126
  %909 = extractelement <4 x i32> %.v60, i64 2, !dbg !126
  %910 = select i1 %763, i32 %380, i32 %909, !dbg !127
  %911 = insertelement <1 x i32> poison, i32 %910, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %908, <1 x i32> %911, i1 true) #2, !dbg !126
  %912 = or disjoint i32 %793, 240, !dbg !126
  %913 = lshr i32 %912, 2, !dbg !126
  %914 = and i32 %913, 1020, !dbg !126
  %915 = getelementptr float, ptr addrspace(3) @global_smem, i32 %914, !dbg !126
  %916 = getelementptr float, ptr addrspace(3) %915, i32 %912, !dbg !126
  %917 = extractelement <4 x i32> %.v60, i64 3, !dbg !126
  %918 = select i1 %765, i32 %381, i32 %917, !dbg !127
  %919 = insertelement <1 x i32> poison, i32 %918, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %916, <1 x i32> %919, i1 true) #2, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %920 = and i32 %8, 252, !dbg !126
  %921 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %920, !dbg !126
  %922 = getelementptr inbounds float, ptr addrspace(3) %921, i32 %794, !dbg !126
  %923 = or disjoint i32 %794, 1024, !dbg !126
  %924 = lshr exact i32 %923, 2, !dbg !126
  %925 = and i32 %924, 508, !dbg !126
  %926 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %925, !dbg !126
  %927 = getelementptr inbounds float, ptr addrspace(3) %926, i32 %923, !dbg !126
  %928 = load <4 x i32>, ptr addrspace(3) %927, align 16, !dbg !126
  %929 = or disjoint i32 %794, 2048, !dbg !126
  %930 = lshr exact i32 %929, 2, !dbg !126
  %931 = and i32 %930, 764, !dbg !126
  %932 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %931, !dbg !126
  %933 = getelementptr inbounds float, ptr addrspace(3) %932, i32 %929, !dbg !126
  %934 = load <4 x i32>, ptr addrspace(3) %933, align 16, !dbg !126
  %935 = or disjoint i32 %794, 3072, !dbg !126
  %936 = lshr exact i32 %935, 2, !dbg !126
  %937 = and i32 %936, 1020, !dbg !126
  %938 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %937, !dbg !126
  %939 = getelementptr inbounds float, ptr addrspace(3) %938, i32 %935, !dbg !126
  %940 = load <4 x i32>, ptr addrspace(3) %939, align 16, !dbg !126
  %.extract = load i32, ptr addrspace(3) %922, align 16, !dbg !126
  %941 = getelementptr inbounds i8, ptr addrspace(3) %922, i32 4, !dbg !126
  %.extract19 = load i32, ptr addrspace(3) %941, align 4, !dbg !126
  %942 = getelementptr inbounds i8, ptr addrspace(3) %922, i32 8, !dbg !126
  %.extract20 = load i32, ptr addrspace(3) %942, align 8, !dbg !126
  %943 = getelementptr inbounds i8, ptr addrspace(3) %922, i32 12, !dbg !126
  %.extract21 = load i32, ptr addrspace(3) %943, align 4, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %784, i1 %62) #2, !dbg !126
  %.extract22 = extractelement <4 x i32> %928, i64 0, !dbg !126
  %.extract23 = extractelement <4 x i32> %928, i64 1, !dbg !126
  %.extract24 = extractelement <4 x i32> %928, i64 2, !dbg !126
  %.extract25 = extractelement <4 x i32> %928, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %786, i1 %63) #2, !dbg !126
  %.extract26 = extractelement <4 x i32> %934, i64 0, !dbg !126
  %.extract27 = extractelement <4 x i32> %934, i64 1, !dbg !126
  %.extract28 = extractelement <4 x i32> %934, i64 2, !dbg !126
  %.extract29 = extractelement <4 x i32> %934, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %788, i1 %64) #2, !dbg !126
  %.extract30 = extractelement <4 x i32> %940, i64 0, !dbg !126
  %.extract31 = extractelement <4 x i32> %940, i64 1, !dbg !126
  %.extract32 = extractelement <4 x i32> %940, i64 2, !dbg !126
  %.extract33 = extractelement <4 x i32> %940, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %790, i1 %65) #2, !dbg !126
  %944 = mul i32 %13, 768, !dbg !128
  %945 = add i32 %23, %944, !dbg !129
  %946 = sext i32 %945 to i64, !dbg !130
  %947 = getelementptr i8, ptr addrspace(1) %2, i64 %946, !dbg !130
  %948 = bitcast <4 x i8> %479 to i32, !dbg !131
  %949 = bitcast <4 x i8> %577 to i32, !dbg !131
  %950 = bitcast <4 x i8> %675 to i32, !dbg !131
  %951 = bitcast <4 x i8> %773 to i32, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %948, i32 %949, i32 %950, i32 %951, ptr addrspace(1) %947, i1 %61) #2, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwnd6u37dv6kl6n7ugdargbrkq4q7kmkvwvee6mbmwrlwmhopcjb.py", directory: "inductor_cache/wn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_42", linkageName: "triton_poi_fused_max_pool2d_with_indices_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 61, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 55, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 74, scope: !7)
!32 = !DILocation(line: 34, column: 66, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 51, scope: !7)
!35 = !DILocation(line: 35, column: 61, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 72, scope: !7)
!38 = !DILocation(line: 36, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 52, scope: !7)
!40 = !DILocation(line: 36, column: 62, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 73, scope: !7)
!43 = !DILocation(line: 37, column: 42, scope: !7)
!44 = !DILocation(line: 37, column: 52, scope: !7)
!45 = !DILocation(line: 37, column: 62, scope: !7)
!46 = !DILocation(line: 37, column: 30, scope: !7)
!47 = !DILocation(line: 37, column: 73, scope: !7)
!48 = !DILocation(line: 38, column: 42, scope: !7)
!49 = !DILocation(line: 38, column: 52, scope: !7)
!50 = !DILocation(line: 38, column: 62, scope: !7)
!51 = !DILocation(line: 38, column: 30, scope: !7)
!52 = !DILocation(line: 38, column: 73, scope: !7)
!53 = !DILocation(line: 39, column: 42, scope: !7)
!54 = !DILocation(line: 39, column: 52, scope: !7)
!55 = !DILocation(line: 39, column: 62, scope: !7)
!56 = !DILocation(line: 39, column: 30, scope: !7)
!57 = !DILocation(line: 39, column: 73, scope: !7)
!58 = !DILocation(line: 40, column: 43, scope: !7)
!59 = !DILocation(line: 40, column: 53, scope: !7)
!60 = !DILocation(line: 40, column: 63, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 74, scope: !7)
!63 = !DILocation(line: 41, column: 43, scope: !7)
!64 = !DILocation(line: 41, column: 53, scope: !7)
!65 = !DILocation(line: 41, column: 63, scope: !7)
!66 = !DILocation(line: 41, column: 31, scope: !7)
!67 = !DILocation(line: 41, column: 74, scope: !7)
!68 = !DILocation(line: 42, column: 44, scope: !7)
!69 = !DILocation(line: 42, column: 54, scope: !7)
!70 = !DILocation(line: 42, column: 64, scope: !7)
!71 = !DILocation(line: 42, column: 31, scope: !7)
!72 = !DILocation(line: 42, column: 75, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 43, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 44, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 45, column: 40, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 46, column: 40, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 47, column: 41, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 48, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 49, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 50, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 76, column: 32, scope: !7)
!123 = !DILocation(line: 76, column: 42, scope: !7)
!124 = !DILocation(line: 76, column: 37, scope: !7)
!125 = !DILocation(line: 76, column: 25, scope: !7)
!126 = !DILocation(line: 76, column: 54, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!128 = !DILocation(line: 77, column: 34, scope: !7)
!129 = !DILocation(line: 77, column: 30, scope: !7)
!130 = !DILocation(line: 77, column: 25, scope: !7)
!131 = !DILocation(line: 77, column: 46, scope: !7)
!132 = !DILocation(line: 77, column: 4, scope: !7)
