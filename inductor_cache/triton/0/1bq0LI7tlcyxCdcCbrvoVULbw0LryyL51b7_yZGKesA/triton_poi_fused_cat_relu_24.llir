; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen, 256, !dbg !14
  %17 = mul i32 %16, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %17, !dbg !15
  %18 = sdiv i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %.decomposed, 128, !dbg !16
  %20 = shl nsw i32 %16, 7, !dbg !17
  %21 = shl nsw i32 %18, 7, !dbg !17
  %22 = add nsw i32 %20, %.decomposed, !dbg !18
  %23 = add nsw i32 %21, %.decomposed, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !20
  %30 = sext i32 %.decomposed to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = fadd float %40, 0x3EE4F8B580000000, !dbg !25
  %54 = fadd float %41, 0x3EE4F8B580000000, !dbg !25
  %55 = fadd float %42, 0x3EE4F8B580000000, !dbg !25
  %56 = fadd float %43, 0x3EE4F8B580000000, !dbg !25
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !25
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !25
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !25
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !25
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %61, 0, !dbg !26
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %62, 0, !dbg !26
  br i1 %.not.i, label %68, label %63, !dbg !26

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !26

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

68:                                               ; preds = %8
  br i1 %.not1.i, label %71, label %69, !dbg !26

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !26
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %73, 0, !dbg !26
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %74, 0, !dbg !26
  br i1 %.not.i1, label %80, label %75, !dbg !26

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !26

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !26

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %76, %78, %81, %83
  %.0.i3 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !26
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %85, 0, !dbg !26
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %86, 0, !dbg !26
  br i1 %.not.i6, label %92, label %87, !dbg !26

87:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %90, label %88, !dbg !26

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

92:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %95, label %93, !dbg !26

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %88, %90, %93, %95
  %.0.i8 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !26
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %97, 0, !dbg !26
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %98, 0, !dbg !26
  br i1 %.not.i11, label %104, label %99, !dbg !26

99:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %102, label %100, !dbg !26

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

104:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %107, label %105, !dbg !26

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %100, %102, %105, %107
  %.0.i13 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !26
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i16 = icmp eq i32 %109, 0, !dbg !26
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i19 = icmp eq i32 %110, 0, !dbg !26
  br i1 %.not.i16, label %116, label %111, !dbg !26

111:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %114, label %112, !dbg !26

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

116:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %119, label %117, !dbg !26

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %112, %114, %117, %119
  %.0.i18 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !26
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i21 = icmp eq i32 %121, 0, !dbg !26
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i24 = icmp eq i32 %122, 0, !dbg !26
  br i1 %.not.i21, label %128, label %123, !dbg !26

123:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %126, label %124, !dbg !26

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

128:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %131, label %129, !dbg !26

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

__nv_sqrtf.exit25:                                ; preds = %124, %126, %129, %131
  %.0.i23 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !26
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i26 = icmp eq i32 %133, 0, !dbg !26
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i29 = icmp eq i32 %134, 0, !dbg !26
  br i1 %.not.i26, label %140, label %135, !dbg !26

135:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %138, label %136, !dbg !26

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

140:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %143, label %141, !dbg !26

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

__nv_sqrtf.exit30:                                ; preds = %136, %138, %141, %143
  %.0.i28 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !26
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i31 = icmp eq i32 %145, 0, !dbg !26
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i34 = icmp eq i32 %146, 0, !dbg !26
  br i1 %.not.i31, label %152, label %147, !dbg !26

147:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %150, label %148, !dbg !26

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

152:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %155, label %153, !dbg !26

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

__nv_sqrtf.exit35:                                ; preds = %148, %150, %153, %155
  %.0.i33 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !26
  %157 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %158 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %159 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %160 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %161 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %162 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %163 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %164 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %165 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %166 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %167 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %168 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %169 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %171 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %172 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !27
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !27
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !27
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !27
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !27
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !27
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !28
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !29
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !29
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !29
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !29
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !29
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !29
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !29
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !29
  %192 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !30
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !31
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !31
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !31
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !31
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !31
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !31
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !31
  %203 = icmp sgt i32 %.decomposed, 127, !dbg !32
  %204 = sext i32 %22 to i64, !dbg !33
  %205 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !33
  %206 = getelementptr i8, ptr addrspace(1) %205, i64 -512, !dbg !33
  %207 = sext i32 %23 to i64, !dbg !33
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %207, !dbg !33
  %209 = getelementptr i8, ptr addrspace(1) %208, i64 -512, !dbg !33
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %206, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #3, !dbg !34
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !34
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !34
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !34
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !34
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %209, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #3, !dbg !34
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !34
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !34
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !34
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !34
  %220 = insertelement <8 x i32> poison, i32 %157, i64 0, !dbg !20
  %221 = insertelement <8 x i32> %220, i32 %159, i64 1, !dbg !20
  %222 = insertelement <8 x i32> %221, i32 %161, i64 2, !dbg !20
  %223 = insertelement <8 x i32> %222, i32 %163, i64 3, !dbg !20
  %224 = insertelement <8 x i32> %223, i32 %165, i64 4, !dbg !20
  %225 = insertelement <8 x i32> %224, i32 %167, i64 5, !dbg !20
  %226 = insertelement <8 x i32> %225, i32 %169, i64 6, !dbg !20
  %227 = insertelement <8 x i32> %226, i32 %171, i64 7, !dbg !20
  %228 = bitcast <8 x i32> %227 to <8 x float>, !dbg !20
  %229 = insertelement <8 x i32> poison, i32 %158, i64 0, !dbg !22
  %230 = insertelement <8 x i32> %229, i32 %160, i64 1, !dbg !22
  %231 = insertelement <8 x i32> %230, i32 %162, i64 2, !dbg !22
  %232 = insertelement <8 x i32> %231, i32 %164, i64 3, !dbg !22
  %233 = insertelement <8 x i32> %232, i32 %166, i64 4, !dbg !22
  %234 = insertelement <8 x i32> %233, i32 %168, i64 5, !dbg !22
  %235 = insertelement <8 x i32> %234, i32 %170, i64 6, !dbg !22
  %236 = insertelement <8 x i32> %235, i32 %172, i64 7, !dbg !22
  %237 = bitcast <8 x i32> %236 to <8 x float>, !dbg !22
  %238 = fsub <8 x float> %228, %237, !dbg !35
  %239 = insertelement <8 x float> poison, float %180, i64 0, !dbg !36
  %240 = insertelement <8 x float> %239, float %179, i64 1, !dbg !36
  %241 = insertelement <8 x float> %240, float %178, i64 2, !dbg !36
  %242 = insertelement <8 x float> %241, float %177, i64 3, !dbg !36
  %243 = insertelement <8 x float> %242, float %176, i64 4, !dbg !36
  %244 = insertelement <8 x float> %243, float %175, i64 5, !dbg !36
  %245 = insertelement <8 x float> %244, float %174, i64 6, !dbg !36
  %246 = insertelement <8 x float> %245, float %173, i64 7, !dbg !36
  %247 = fmul <8 x float> %238, %246, !dbg !36
  %248 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !29
  %249 = insertelement <8 x i32> %248, i32 %190, i64 1, !dbg !29
  %250 = insertelement <8 x i32> %249, i32 %189, i64 2, !dbg !29
  %251 = insertelement <8 x i32> %250, i32 %188, i64 3, !dbg !29
  %252 = insertelement <8 x i32> %251, i32 %186, i64 4, !dbg !29
  %253 = insertelement <8 x i32> %252, i32 %185, i64 5, !dbg !29
  %254 = insertelement <8 x i32> %253, i32 %184, i64 6, !dbg !29
  %255 = insertelement <8 x i32> %254, i32 %183, i64 7, !dbg !29
  %256 = bitcast <8 x i32> %255 to <8 x float>, !dbg !29
  %257 = fmul <8 x float> %247, %256, !dbg !37
  %258 = insertelement <8 x i32> poison, i32 %202, i64 0, !dbg !31
  %259 = insertelement <8 x i32> %258, i32 %201, i64 1, !dbg !31
  %260 = insertelement <8 x i32> %259, i32 %200, i64 2, !dbg !31
  %261 = insertelement <8 x i32> %260, i32 %199, i64 3, !dbg !31
  %262 = insertelement <8 x i32> %261, i32 %197, i64 4, !dbg !31
  %263 = insertelement <8 x i32> %262, i32 %196, i64 5, !dbg !31
  %264 = insertelement <8 x i32> %263, i32 %195, i64 6, !dbg !31
  %265 = insertelement <8 x i32> %264, i32 %194, i64 7, !dbg !31
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !31
  %267 = fadd <8 x float> %257, %266, !dbg !38
  %268 = insertelement <8 x i32> poison, i32 %219, i64 0, !dbg !34
  %269 = insertelement <8 x i32> %268, i32 %218, i64 1, !dbg !34
  %270 = insertelement <8 x i32> %269, i32 %217, i64 2, !dbg !34
  %271 = insertelement <8 x i32> %270, i32 %216, i64 3, !dbg !34
  %272 = insertelement <8 x i32> %271, i32 %214, i64 4, !dbg !34
  %273 = insertelement <8 x i32> %272, i32 %213, i64 5, !dbg !34
  %274 = insertelement <8 x i32> %273, i32 %212, i64 6, !dbg !34
  %275 = insertelement <8 x i32> %274, i32 %211, i64 7, !dbg !34
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !34
  %277 = insertelement <8 x i1> poison, i1 %19, i64 0, !dbg !39
  %278 = shufflevector <8 x i1> %277, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !39
  %279 = select <8 x i1> %278, <8 x float> %267, <8 x float> %276, !dbg !39
  %280 = fcmp olt <8 x float> %279, zeroinitializer, !dbg !40
  %281 = extractelement <8 x i1> %280, i64 7, !dbg !44
  %282 = extractelement <8 x i1> %280, i64 6, !dbg !44
  %283 = extractelement <8 x i1> %280, i64 5, !dbg !44
  %284 = extractelement <8 x i1> %280, i64 4, !dbg !44
  %285 = extractelement <8 x i1> %280, i64 3, !dbg !44
  %286 = extractelement <8 x i1> %280, i64 2, !dbg !44
  %287 = extractelement <8 x i1> %280, i64 1, !dbg !44
  %288 = extractelement <8 x i1> %280, i64 0, !dbg !44
  %289 = sext i32 %14 to i64, !dbg !45
  %290 = getelementptr float, ptr addrspace(1) %6, i64 %289, !dbg !45
  %291 = sext i32 %15 to i64, !dbg !45
  %292 = getelementptr float, ptr addrspace(1) %6, i64 %291, !dbg !45
  %bc = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %293 = extractelement <8 x i32> %bc, i64 7, !dbg !46
  %294 = select i1 %281, i32 0, i32 %293, !dbg !44
  %bc36 = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %295 = extractelement <8 x i32> %bc36, i64 6, !dbg !46
  %296 = select i1 %282, i32 0, i32 %295, !dbg !44
  %bc37 = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %297 = extractelement <8 x i32> %bc37, i64 5, !dbg !46
  %298 = select i1 %283, i32 0, i32 %297, !dbg !44
  %bc38 = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %299 = extractelement <8 x i32> %bc38, i64 4, !dbg !46
  %300 = select i1 %284, i32 0, i32 %299, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %296, i32 %298, i32 %300, ptr addrspace(1) %290, i1 true) #3, !dbg !46
  %bc39 = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %301 = extractelement <8 x i32> %bc39, i64 3, !dbg !46
  %302 = select i1 %285, i32 0, i32 %301, !dbg !44
  %bc40 = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %303 = extractelement <8 x i32> %bc40, i64 2, !dbg !46
  %304 = select i1 %286, i32 0, i32 %303, !dbg !44
  %bc41 = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %305 = extractelement <8 x i32> %bc41, i64 1, !dbg !46
  %306 = select i1 %287, i32 0, i32 %305, !dbg !44
  %bc42 = bitcast <8 x float> %279 to <8 x i32>, !dbg !46
  %307 = extractelement <8 x i32> %bc42, i64 0, !dbg !46
  %308 = select i1 %288, i32 0, i32 %307, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %304, i32 %306, i32 %308, ptr addrspace(1) %292, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clu3vte2hyuxi3ovv7jkzrsr443f33nyefmmg32tkka5neliyvty.py", directory: "inductor_cache/lu")
!4 = !{ptr @triton_poi_fused_cat_relu_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_24", linkageName: "triton_poi_fused_cat_relu_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 53, column: 31, scope: !7)
!34 = !DILocation(line: 53, column: 56, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 0, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 56, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 25, scope: !7)
!46 = !DILocation(line: 57, column: 37, scope: !7)
!47 = !DILocation(line: 57, column: 4, scope: !7)
