; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_convolution_native_group_norm_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 128, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %11, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = shl i32 %11, 2, !dbg !12
  %19 = and i32 %18, 2044, !dbg !12
  %20 = srem i32 %9, 32, !dbg !13
  %21 = lshr i32 %14, 8, !dbg !14
  %22 = lshr i32 %15, 8, !dbg !14
  %23 = lshr i32 %16, 8, !dbg !14
  %24 = lshr i32 %17, 8, !dbg !14
  %25 = shl i32 %9, 11, !dbg !15
  %26 = or disjoint i32 %25, %19, !dbg !16
  %27 = sext i32 %26 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = bitcast i32 %30 to float, !dbg !18
  %35 = bitcast i32 %31 to float, !dbg !18
  %36 = bitcast i32 %32 to float, !dbg !18
  %37 = bitcast i32 %33 to float, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !22
  %.idx = shl nuw nsw i32 %19, 3, !dbg !22
  %54 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !22
  %55 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #5, !dbg !22
  %56 = shl nuw nsw i32 %19, 1, !dbg !22
  %57 = or disjoint i32 %56, 2, !dbg !22
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %57, !dbg !22
  %59 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #5, !dbg !22
  %60 = or disjoint i32 %56, 4, !dbg !22
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !22
  %62 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #5, !dbg !22
  %63 = or disjoint i32 %56, 6, !dbg !22
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !22
  %65 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !22
  %66 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !22
  %67 = load float, ptr addrspace(3) %66, align 8, !dbg !22
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !22
  %68 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !22
  %69 = load float, ptr addrspace(3) %68, align 8, !dbg !22
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !22
  %70 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !22
  %71 = load float, ptr addrspace(3) %70, align 8, !dbg !22
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !22
  %72 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !22
  %73 = load float, ptr addrspace(3) %72, align 8, !dbg !22
  %74 = shl nsw i32 %20, 3, !dbg !23
  %75 = or disjoint i32 %74, %21, !dbg !24
  %76 = or disjoint i32 %74, %22, !dbg !24
  %77 = or disjoint i32 %74, %23, !dbg !24
  %78 = or disjoint i32 %74, %24, !dbg !24
  %79 = sext i32 %75 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !25
  %81 = sext i32 %76 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !25
  %83 = sext i32 %77 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !25
  %85 = sext i32 %78 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %88 = bitcast i32 %87 to float, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %90 = bitcast i32 %89 to float, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %92 = bitcast i32 %91 to float, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %94 = bitcast i32 %93 to float, !dbg !26
  %95 = fadd float %34, %44, !dbg !27
  %96 = fadd float %35, %45, !dbg !27
  %97 = fadd float %36, %46, !dbg !27
  %98 = fadd float %37, %47, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %99 = bitcast float %95 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %99, i1 true) #5, !dbg !27
  %100 = bitcast float %96 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %100, i1 true) #5, !dbg !27
  %101 = bitcast float %97 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %101, i1 true) #5, !dbg !27
  %102 = bitcast float %98 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %102, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %103 = load float, ptr addrspace(3) %66, align 8, !dbg !27
  %104 = load float, ptr addrspace(3) %68, align 8, !dbg !27
  %105 = load float, ptr addrspace(3) %70, align 8, !dbg !27
  %106 = load float, ptr addrspace(3) %72, align 8, !dbg !27
  %107 = fadd float %67, %88, !dbg !28
  %108 = fadd float %69, %90, !dbg !28
  %109 = fadd float %71, %92, !dbg !28
  %110 = fadd float %73, %94, !dbg !28
  %111 = fadd float %107, %103, !dbg !29
  %112 = fadd float %108, %104, !dbg !29
  %113 = fadd float %109, %105, !dbg !29
  %114 = fadd float %110, %106, !dbg !29
  %115 = select i1 %10, float %111, float 0.000000e+00, !dbg !30
  %116 = select i1 %10, float %112, float 0.000000e+00, !dbg !30
  %117 = select i1 %10, float %113, float 0.000000e+00, !dbg !30
  %118 = select i1 %10, float %114, float 0.000000e+00, !dbg !30
  %119 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  %121 = bitcast float %111 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #5, !dbg !32
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !32
  %123 = bitcast float %112 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #5, !dbg !32
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !32
  %125 = bitcast float %113 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #5, !dbg !32
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !32
  %127 = bitcast float %114 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !32
  %.extract = load i32, ptr addrspace(3) %128, align 16, !dbg !32
  %129 = getelementptr inbounds i8, ptr addrspace(3) %128, i32 4, !dbg !32
  %.extract8 = load i32, ptr addrspace(3) %129, align 4, !dbg !32
  %130 = getelementptr inbounds i8, ptr addrspace(3) %128, i32 8, !dbg !32
  %.extract9 = load i32, ptr addrspace(3) %130, align 8, !dbg !32
  %131 = getelementptr inbounds i8, ptr addrspace(3) %128, i32 12, !dbg !32
  %.extract10 = load i32, ptr addrspace(3) %131, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %48, i1 %10) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %132 = fsub float %116, %115, !dbg !37
  %133 = select i1 %10, float 2.000000e+00, float 0.000000e+00, !dbg !39
  %134 = fcmp oeq float %133, 0.000000e+00, !dbg !40
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %133) #5, !dbg !41
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !42
  %137 = fmul float %132, %136, !dbg !43
  %138 = fadd float %115, %137, !dbg !44
  %139 = fmul float %132, %132, !dbg !45
  %140 = fmul float %119, %139, !dbg !46
  %141 = fmul float %140, %136, !dbg !47
  %142 = fadd float %141, 0.000000e+00, !dbg !48
  %143 = fsub float %117, %138, !dbg !37
  %144 = select i1 %10, float 3.000000e+00, float 0.000000e+00, !dbg !39
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !40
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %144) #5, !dbg !41
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !42
  %148 = fmul float %147, %143, !dbg !43
  %149 = fadd float %138, %148, !dbg !44
  %150 = fmul float %143, %143, !dbg !45
  %151 = fmul float %133, %150, !dbg !46
  %152 = fmul float %147, %151, !dbg !47
  %153 = fadd float %142, %152, !dbg !48
  %154 = fsub float %118, %149, !dbg !37
  %155 = select i1 %10, float 4.000000e+00, float 0.000000e+00, !dbg !39
  %156 = fcmp oeq float %155, 0.000000e+00, !dbg !40
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %155) #5, !dbg !41
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !42
  %159 = fmul float %158, %154, !dbg !43
  %160 = fadd float %149, %159, !dbg !44
  %161 = fmul float %154, %154, !dbg !45
  %162 = fmul float %144, %161, !dbg !46
  %163 = fmul float %158, %162, !dbg !47
  %164 = fadd float %153, %163, !dbg !48
  %165 = bitcast float %160 to i32, !dbg !33
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !33
  %167 = bitcast i32 %166 to float, !dbg !33
  %168 = bitcast float %164 to i32, !dbg !33
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 16, i32 31), !dbg !33
  %170 = bitcast i32 %169 to float, !dbg !33
  %171 = bitcast float %155 to i32, !dbg !33
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 16, i32 31), !dbg !33
  %173 = bitcast i32 %172 to float, !dbg !33
  %174 = fsub float %167, %160, !dbg !37
  %175 = fadd float %155, %173, !dbg !39
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !40
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %175) #5, !dbg !41
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !42
  %179 = fmul float %178, %174, !dbg !43
  %180 = fadd float %160, %179, !dbg !44
  %181 = fadd float %164, %170, !dbg !49
  %182 = fmul float %174, %174, !dbg !45
  %183 = fmul float %155, %182, !dbg !46
  %184 = fmul float %178, %183, !dbg !47
  %185 = fadd float %181, %184, !dbg !48
  %186 = bitcast float %180 to i32, !dbg !33
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 8, i32 31), !dbg !33
  %188 = bitcast i32 %187 to float, !dbg !33
  %189 = bitcast float %185 to i32, !dbg !33
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !33
  %191 = bitcast i32 %190 to float, !dbg !33
  %192 = bitcast float %175 to i32, !dbg !33
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !33
  %194 = bitcast i32 %193 to float, !dbg !33
  %195 = fsub float %188, %180, !dbg !37
  %196 = fadd float %175, %194, !dbg !39
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !40
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %196) #5, !dbg !41
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !42
  %200 = fmul float %195, %199, !dbg !43
  %201 = fadd float %180, %200, !dbg !44
  %202 = fadd float %185, %191, !dbg !49
  %203 = fmul float %195, %195, !dbg !45
  %204 = fmul float %175, %203, !dbg !46
  %205 = fmul float %199, %204, !dbg !47
  %206 = fadd float %202, %205, !dbg !48
  %207 = bitcast float %201 to i32, !dbg !33
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !33
  %209 = bitcast i32 %208 to float, !dbg !33
  %210 = bitcast float %206 to i32, !dbg !33
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !33
  %212 = bitcast i32 %211 to float, !dbg !33
  %213 = bitcast float %196 to i32, !dbg !33
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !33
  %215 = bitcast i32 %214 to float, !dbg !33
  %216 = fsub float %209, %201, !dbg !37
  %217 = fadd float %196, %215, !dbg !39
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !40
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %217) #5, !dbg !41
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !42
  %221 = fmul float %216, %220, !dbg !43
  %222 = fadd float %201, %221, !dbg !44
  %223 = fadd float %206, %212, !dbg !49
  %224 = fmul float %216, %216, !dbg !45
  %225 = fmul float %196, %224, !dbg !46
  %226 = fmul float %220, %225, !dbg !47
  %227 = fadd float %223, %226, !dbg !48
  %228 = bitcast float %222 to i32, !dbg !33
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 2, i32 31), !dbg !33
  %230 = bitcast i32 %229 to float, !dbg !33
  %231 = bitcast float %227 to i32, !dbg !33
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !33
  %233 = bitcast i32 %232 to float, !dbg !33
  %234 = bitcast float %217 to i32, !dbg !33
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !33
  %236 = bitcast i32 %235 to float, !dbg !33
  %237 = fsub float %230, %222, !dbg !37
  %238 = fadd float %217, %236, !dbg !39
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !40
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %238) #5, !dbg !41
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !42
  %242 = fmul float %237, %241, !dbg !43
  %243 = fadd float %222, %242, !dbg !44
  %244 = fadd float %227, %233, !dbg !49
  %245 = fmul float %237, %237, !dbg !45
  %246 = fmul float %217, %245, !dbg !46
  %247 = fmul float %241, %246, !dbg !47
  %248 = fadd float %244, %247, !dbg !48
  %249 = bitcast float %243 to i32, !dbg !33
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 1, i32 31), !dbg !33
  %251 = bitcast i32 %250 to float, !dbg !33
  %252 = bitcast float %248 to i32, !dbg !33
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !33
  %254 = bitcast i32 %253 to float, !dbg !33
  %255 = bitcast float %238 to i32, !dbg !33
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !33
  %257 = bitcast i32 %256 to float, !dbg !33
  %258 = fsub float %251, %243, !dbg !37
  %259 = fadd float %238, %257, !dbg !39
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !40
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %259) #5, !dbg !41
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !42
  %263 = fmul float %258, %262, !dbg !43
  %264 = fadd float %243, %263, !dbg !44
  %265 = fadd float %248, %254, !dbg !49
  %266 = fmul float %258, %258, !dbg !45
  %267 = fmul float %238, %266, !dbg !46
  %268 = fmul float %262, %267, !dbg !47
  %269 = fadd float %265, %268, !dbg !48
  %270 = icmp eq i32 %12, 0, !dbg !33
  %271 = and i32 %13, 15, !dbg !33
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !33
  %273 = bitcast float %264 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 %270) #5, !dbg !33
  %274 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %271, !dbg !33
  %275 = bitcast float %269 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 %270) #5, !dbg !33
  %276 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %271, !dbg !33
  %277 = bitcast float %259 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 %270) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %278 = icmp slt i32 %11, 16, !dbg !33
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !33
  %280 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %279, i1 %278) #5, !dbg !33
  %281 = bitcast i32 %280 to float, !dbg !33
  %282 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %11, !dbg !33
  %283 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %282, i1 %278) #5, !dbg !33
  %284 = bitcast i32 %283 to float, !dbg !33
  %285 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %11, !dbg !33
  %286 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %285, i1 %278) #5, !dbg !33
  %287 = bitcast i32 %286 to float, !dbg !33
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 8, i32 31), !dbg !33
  %289 = bitcast i32 %288 to float, !dbg !33
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 8, i32 31), !dbg !33
  %291 = bitcast i32 %290 to float, !dbg !33
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 8, i32 31), !dbg !33
  %293 = bitcast i32 %292 to float, !dbg !33
  %294 = fsub float %289, %281, !dbg !37
  %295 = fadd float %287, %293, !dbg !39
  %296 = fcmp oeq float %295, 0.000000e+00, !dbg !40
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %295) #5, !dbg !41
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !42
  %299 = fmul float %294, %298, !dbg !43
  %300 = fadd float %299, %281, !dbg !44
  %301 = fadd float %284, %291, !dbg !49
  %302 = fmul float %294, %294, !dbg !45
  %303 = fmul float %302, %287, !dbg !46
  %304 = fmul float %303, %298, !dbg !47
  %305 = fadd float %301, %304, !dbg !48
  %306 = bitcast float %300 to i32, !dbg !33
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !33
  %308 = bitcast i32 %307 to float, !dbg !33
  %309 = bitcast float %305 to i32, !dbg !33
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !33
  %311 = bitcast i32 %310 to float, !dbg !33
  %312 = bitcast float %295 to i32, !dbg !33
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !33
  %314 = bitcast i32 %313 to float, !dbg !33
  %315 = fsub float %308, %300, !dbg !37
  %316 = fadd float %295, %314, !dbg !39
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !40
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %316) #5, !dbg !41
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !42
  %320 = fmul float %315, %319, !dbg !43
  %321 = fadd float %300, %320, !dbg !44
  %322 = fadd float %305, %311, !dbg !49
  %323 = fmul float %315, %315, !dbg !45
  %324 = fmul float %295, %323, !dbg !46
  %325 = fmul float %319, %324, !dbg !47
  %326 = fadd float %322, %325, !dbg !48
  %327 = bitcast float %321 to i32, !dbg !33
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 2, i32 31), !dbg !33
  %329 = bitcast i32 %328 to float, !dbg !33
  %330 = bitcast float %326 to i32, !dbg !33
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !33
  %332 = bitcast i32 %331 to float, !dbg !33
  %333 = bitcast float %316 to i32, !dbg !33
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !33
  %335 = bitcast i32 %334 to float, !dbg !33
  %336 = fsub float %329, %321, !dbg !37
  %337 = fadd float %316, %335, !dbg !39
  %338 = fcmp oeq float %337, 0.000000e+00, !dbg !40
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float %337) #5, !dbg !41
  %340 = select i1 %338, float 0.000000e+00, float %339, !dbg !42
  %341 = fmul float %336, %340, !dbg !43
  %342 = fadd float %321, %341, !dbg !44
  %343 = fadd float %326, %332, !dbg !49
  %344 = fmul float %336, %336, !dbg !45
  %345 = fmul float %316, %344, !dbg !46
  %346 = fmul float %340, %345, !dbg !47
  %347 = fadd float %343, %346, !dbg !48
  %348 = bitcast float %342 to i32, !dbg !33
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !33
  %350 = bitcast i32 %349 to float, !dbg !33
  %351 = bitcast float %347 to i32, !dbg !33
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !33
  %353 = bitcast i32 %352 to float, !dbg !33
  %354 = bitcast float %337 to i32, !dbg !33
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !33
  %356 = bitcast i32 %355 to float, !dbg !33
  %357 = fsub float %350, %342, !dbg !37
  %358 = fadd float %337, %356, !dbg !39
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !40
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %358) #5, !dbg !41
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !42
  %362 = fmul float %357, %361, !dbg !43
  %363 = fadd float %342, %362, !dbg !44
  %364 = fadd float %347, %353, !dbg !49
  %365 = fmul float %357, %357, !dbg !45
  %366 = fmul float %337, %365, !dbg !46
  %367 = fmul float %361, %366, !dbg !47
  %368 = fadd float %364, %367, !dbg !48
  %369 = and i32 %11, 15, !dbg !33
  %370 = icmp eq i32 %369, 0, !dbg !33
  %371 = and i1 %278, %370, !dbg !33
  %372 = bitcast float %363 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %372, i1 %371) #5, !dbg !33
  %373 = bitcast float %368 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %373, i1 %371) #5, !dbg !33
  %374 = bitcast float %358 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %374, i1 %371) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %375 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %376 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !33
  %377 = sext i32 %9 to i64, !dbg !50
  %378 = getelementptr float, ptr addrspace(1) %5, i64 %377, !dbg !50
  %379 = icmp eq i32 %14, 0, !dbg !51
  %380 = and i1 %379, %10, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %378, i1 %380) #5, !dbg !51
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %376, float 2.048000e+03) #5, !dbg !52
  %382 = fadd float %381, 0x3EE4F8B580000000, !dbg !53
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i = icmp eq i32 %383, 0, !dbg !54
  br i1 %.not.i, label %386, label %384, !dbg !54

384:                                              ; preds = %8
  %385 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %382), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

386:                                              ; preds = %8
  %387 = tail call float @llvm.nvvm.rsqrt.approx.f(float %382), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

__nv_rsqrtf.exit:                                 ; preds = %384, %386
  %.0.i = phi float [ %385, %384 ], [ %387, %386 ], !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %388 = getelementptr float, ptr addrspace(1) %1, i64 %377, !dbg !56
  %389 = bitcast float %.0.i to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %388, i1 %380) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxirgymlacytgi4dnezqkpbfaj2adsefzhwarwsxdxz5ggnesjdh.py", directory: "inductor_cache/xi")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_55, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_55, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_55", linkageName: "triton_red_fused_add_convolution_native_group_norm_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 23, scope: !7)
!15 = !DILocation(line: 36, column: 44, scope: !7)
!16 = !DILocation(line: 36, column: 39, scope: !7)
!17 = !DILocation(line: 36, column: 34, scope: !7)
!18 = !DILocation(line: 36, column: 49, scope: !7)
!19 = !DILocation(line: 37, column: 34, scope: !7)
!20 = !DILocation(line: 37, column: 49, scope: !7)
!21 = !DILocation(line: 38, column: 38, scope: !7)
!22 = !DILocation(line: 38, column: 53, scope: !7)
!23 = !DILocation(line: 39, column: 41, scope: !7)
!24 = !DILocation(line: 39, column: 39, scope: !7)
!25 = !DILocation(line: 39, column: 34, scope: !7)
!26 = !DILocation(line: 39, column: 46, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 41, column: 22, scope: !7)
!29 = !DILocation(line: 42, column: 22, scope: !7)
!30 = !DILocation(line: 47, column: 60, scope: !7)
!31 = !DILocation(line: 49, column: 64, scope: !7)
!32 = !DILocation(line: 50, column: 53, scope: !7)
!33 = !DILocation(line: 204, column: 46, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 52, column: 41, scope: !7)
!37 = !DILocation(line: 192, column: 21, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 193, column: 28, scope: !38, inlinedAt: !36)
!40 = !DILocation(line: 194, column: 39, scope: !38, inlinedAt: !36)
!41 = !DILocation(line: 194, column: 60, scope: !38, inlinedAt: !36)
!42 = !DILocation(line: 194, column: 49, scope: !38, inlinedAt: !36)
!43 = !DILocation(line: 196, column: 25, scope: !38, inlinedAt: !36)
!44 = !DILocation(line: 196, column: 17, scope: !38, inlinedAt: !36)
!45 = !DILocation(line: 197, column: 30, scope: !38, inlinedAt: !36)
!46 = !DILocation(line: 197, column: 38, scope: !38, inlinedAt: !36)
!47 = !DILocation(line: 197, column: 49, scope: !38, inlinedAt: !36)
!48 = !DILocation(line: 197, column: 22, scope: !38, inlinedAt: !36)
!49 = !DILocation(line: 197, column: 15, scope: !38, inlinedAt: !36)
!50 = !DILocation(line: 57, column: 25, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 59, column: 19, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 28, scope: !7)
!55 = !DILocation(line: 63, column: 4, scope: !7)
!56 = !DILocation(line: 64, column: 28, scope: !7)
!57 = !DILocation(line: 64, column: 40, scope: !7)
!58 = !DILocation(line: 64, column: 4, scope: !7)
