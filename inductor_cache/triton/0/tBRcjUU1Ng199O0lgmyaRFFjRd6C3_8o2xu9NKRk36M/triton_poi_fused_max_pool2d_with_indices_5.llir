; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit18 = lshr i32 %8, 4, !dbg !12
  %9 = and i32 %.lobit18, 3, !dbg !12
  %10 = and i32 %8, 64, !dbg !12
  %11 = lshr exact i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %12, %7, !dbg !13
  %16 = or disjoint i32 %7, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 7, !dbg !15
  %19 = shl i32 %8, 3, !dbg !16
  %20 = and i32 %19, 120, !dbg !16
  %21 = lshr i32 %8, 1, !dbg !16
  %22 = and i32 %21, 63, !dbg !16
  %23 = or disjoint i32 %18, %20, !dbg !17
  %24 = or disjoint i32 %23, 4, !dbg !17
  %25 = or disjoint i32 %18, %22, !dbg !17
  %26 = or disjoint i32 %25, 64, !dbg !17
  %27 = icmp slt i32 %23, 96, !dbg !18
  %28 = icmp slt i32 %25, 96, !dbg !18
  %29 = icmp slt i32 %26, 96, !dbg !18
  %30 = sdiv i32 %15, 32, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %31 = sdiv i32 %.frozen, 1024, !dbg !20
  %32 = mul i32 %31, 1024, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %33 = mul i32 %30, 12288, !dbg !22
  %34 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !23
  %35 = insertelement <2 x i32> %34, i32 %30, i64 1, !dbg !23
  %36 = srem <2 x i32> %35, splat (i32 32), !dbg !23
  %37 = extractelement <2 x i32> %36, i64 1, !dbg !24
  %38 = icmp sgt i32 %37, 0, !dbg !25
  %39 = icmp sgt <2 x i32> %36, <i32 0, i32 -1>, !dbg !26
  %40 = extractelement <2 x i1> %39, i64 0, !dbg !27
  %41 = and i1 %40, %38, !dbg !27
  %42 = extractelement <2 x i32> %36, i64 0, !dbg !24
  %43 = mul nsw i32 %42, 192, !dbg !28
  %44 = add i32 %33, %43, !dbg !29
  %45 = add i32 %44, -6240, !dbg !30
  %46 = add i32 %45, %23, !dbg !31
  %47 = add i32 %45, %24, !dbg !31
  %48 = sext i32 %46 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !32
  %50 = sext i32 %47 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !32
  %52 = and i1 %27, %41, !dbg !33
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52) #2, !dbg !34
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !34
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !34
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !34
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !34
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52) #2, !dbg !34
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !34
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !34
  %63 = icmp sgt i32 %42, -1, !dbg !35
  %64 = and i1 %63, %38, !dbg !36
  %65 = add i32 %44, -6144, !dbg !37
  %66 = add i32 %65, %23, !dbg !38
  %67 = add i32 %65, %24, !dbg !38
  %68 = sext i32 %66 to i64, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !39
  %70 = sext i32 %67 to i64, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !39
  %72 = and i1 %27, %64, !dbg !40
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !41
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !41
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !41
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !41
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !41
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !41
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !41
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !41
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !41
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !41
  %83 = add i32 %44, -6048, !dbg !42
  %84 = add i32 %83, %23, !dbg !43
  %85 = add i32 %83, %24, !dbg !43
  %86 = sext i32 %84 to i64, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !44
  %88 = sext i32 %85 to i64, !dbg !44
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !44
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !45
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !45
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !45
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !45
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !45
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !45
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !45
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !45
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !45
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !45
  %100 = extractelement <2 x i1> %39, i64 1, !dbg !46
  %101 = and i1 %40, %100, !dbg !46
  %102 = add i32 %44, -96, !dbg !47
  %103 = add i32 %102, %23, !dbg !48
  %104 = add i32 %102, %24, !dbg !48
  %105 = sext i32 %103 to i64, !dbg !49
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !49
  %107 = sext i32 %104 to i64, !dbg !49
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !49
  %109 = and i1 %27, %101, !dbg !50
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109) #2, !dbg !51
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !51
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !51
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !51
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !51
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109) #2, !dbg !51
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !51
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !51
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !51
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !51
  %120 = or i32 %37, %42, !dbg !24
  %121 = icmp sgt i32 %120, -1, !dbg !24
  %122 = add i32 %44, %23, !dbg !52
  %123 = add i32 %44, %24, !dbg !52
  %124 = sext i32 %122 to i64, !dbg !53
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !53
  %126 = sext i32 %123 to i64, !dbg !53
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !53
  %128 = and i1 %27, %121, !dbg !54
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !55
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !55
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !55
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !55
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !55
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !55
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !55
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !55
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !55
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !55
  %139 = add i32 %44, 96, !dbg !56
  %140 = add i32 %139, %23, !dbg !57
  %141 = add i32 %139, %24, !dbg !57
  %142 = sext i32 %140 to i64, !dbg !58
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !58
  %144 = sext i32 %141 to i64, !dbg !58
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !58
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !59
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !59
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !59
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !59
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !59
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !59
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !59
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !59
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !59
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !59
  %156 = add i32 %44, 6048, !dbg !60
  %157 = add i32 %156, %23, !dbg !61
  %158 = add i32 %156, %24, !dbg !61
  %159 = sext i32 %157 to i64, !dbg !62
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !62
  %161 = sext i32 %158 to i64, !dbg !62
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !62
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109) #2, !dbg !63
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !63
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !63
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !63
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !63
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109) #2, !dbg !63
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !63
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !63
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !63
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !63
  %173 = add i32 %44, 6144, !dbg !64
  %174 = add i32 %173, %23, !dbg !65
  %175 = add i32 %173, %24, !dbg !65
  %176 = sext i32 %174 to i64, !dbg !66
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !66
  %178 = sext i32 %175 to i64, !dbg !66
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !66
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !67
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !67
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !67
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !67
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !67
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !67
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !67
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !67
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !67
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !67
  %190 = add i32 %44, 6240, !dbg !68
  %191 = add i32 %190, %23, !dbg !69
  %192 = add i32 %190, %24, !dbg !69
  %193 = sext i32 %191 to i64, !dbg !70
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !70
  %195 = sext i32 %192 to i64, !dbg !70
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !70
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !71
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !71
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !71
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !71
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !71
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #2, !dbg !71
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !71
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !71
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !71
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !71
  %207 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !34
  %208 = insertelement <4 x i32> %207, i32 %55, i64 1, !dbg !34
  %209 = insertelement <4 x i32> %208, i32 %56, i64 2, !dbg !34
  %210 = insertelement <4 x i32> %209, i32 %57, i64 3, !dbg !34
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !34
  %212 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !41
  %213 = insertelement <4 x i32> %212, i32 %75, i64 1, !dbg !41
  %214 = insertelement <4 x i32> %213, i32 %76, i64 2, !dbg !41
  %215 = insertelement <4 x i32> %214, i32 %77, i64 3, !dbg !41
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !41
  %217 = fcmp ogt <4 x float> %216, %211, !dbg !72
  %218 = fcmp uno <4 x float> %216, zeroinitializer, !dbg !76
  %219 = or <4 x i1> %217, %218, !dbg !77
  %.v = select <4 x i1> %219, <4 x i32> %215, <4 x i32> %210, !dbg !78
  %220 = bitcast <4 x i32> %.v to <4 x float>, !dbg !78
  %221 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !45
  %222 = insertelement <4 x i32> %221, i32 %92, i64 1, !dbg !45
  %223 = insertelement <4 x i32> %222, i32 %93, i64 2, !dbg !45
  %224 = insertelement <4 x i32> %223, i32 %94, i64 3, !dbg !45
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !45
  %226 = fcmp olt <4 x float> %220, %225, !dbg !79
  %227 = fcmp uno <4 x float> %225, zeroinitializer, !dbg !81
  %228 = or <4 x i1> %227, %226, !dbg !82
  %.v19 = select <4 x i1> %228, <4 x i32> %224, <4 x i32> %.v, !dbg !83
  %229 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !83
  %230 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !51
  %231 = insertelement <4 x i32> %230, i32 %112, i64 1, !dbg !51
  %232 = insertelement <4 x i32> %231, i32 %113, i64 2, !dbg !51
  %233 = insertelement <4 x i32> %232, i32 %114, i64 3, !dbg !51
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !51
  %235 = fcmp olt <4 x float> %229, %234, !dbg !84
  %236 = fcmp uno <4 x float> %234, zeroinitializer, !dbg !86
  %237 = or <4 x i1> %236, %235, !dbg !87
  %.v20 = select <4 x i1> %237, <4 x i32> %233, <4 x i32> %.v19, !dbg !88
  %238 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !88
  %239 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !55
  %240 = insertelement <4 x i32> %239, i32 %131, i64 1, !dbg !55
  %241 = insertelement <4 x i32> %240, i32 %132, i64 2, !dbg !55
  %242 = insertelement <4 x i32> %241, i32 %133, i64 3, !dbg !55
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !55
  %244 = fcmp olt <4 x float> %238, %243, !dbg !89
  %245 = fcmp uno <4 x float> %243, zeroinitializer, !dbg !91
  %246 = or <4 x i1> %245, %244, !dbg !92
  %.v21 = select <4 x i1> %246, <4 x i32> %242, <4 x i32> %.v20, !dbg !93
  %247 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !93
  %248 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !59
  %249 = insertelement <4 x i32> %248, i32 %148, i64 1, !dbg !59
  %250 = insertelement <4 x i32> %249, i32 %149, i64 2, !dbg !59
  %251 = insertelement <4 x i32> %250, i32 %150, i64 3, !dbg !59
  %252 = bitcast <4 x i32> %251 to <4 x float>, !dbg !59
  %253 = fcmp olt <4 x float> %247, %252, !dbg !94
  %254 = fcmp uno <4 x float> %252, zeroinitializer, !dbg !96
  %255 = or <4 x i1> %254, %253, !dbg !97
  %.v22 = select <4 x i1> %255, <4 x i32> %251, <4 x i32> %.v21, !dbg !98
  %256 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !98
  %257 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !63
  %258 = insertelement <4 x i32> %257, i32 %165, i64 1, !dbg !63
  %259 = insertelement <4 x i32> %258, i32 %166, i64 2, !dbg !63
  %260 = insertelement <4 x i32> %259, i32 %167, i64 3, !dbg !63
  %261 = bitcast <4 x i32> %260 to <4 x float>, !dbg !63
  %262 = fcmp olt <4 x float> %256, %261, !dbg !99
  %263 = fcmp uno <4 x float> %261, zeroinitializer, !dbg !101
  %264 = or <4 x i1> %263, %262, !dbg !102
  %.v23 = select <4 x i1> %264, <4 x i32> %260, <4 x i32> %.v22, !dbg !103
  %265 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !103
  %266 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !67
  %267 = insertelement <4 x i32> %266, i32 %182, i64 1, !dbg !67
  %268 = insertelement <4 x i32> %267, i32 %183, i64 2, !dbg !67
  %269 = insertelement <4 x i32> %268, i32 %184, i64 3, !dbg !67
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !67
  %271 = fcmp olt <4 x float> %265, %270, !dbg !104
  %272 = fcmp uno <4 x float> %270, zeroinitializer, !dbg !106
  %273 = or <4 x i1> %272, %271, !dbg !107
  %.v24 = select <4 x i1> %273, <4 x i32> %269, <4 x i32> %.v23, !dbg !108
  %274 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !108
  %275 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !71
  %276 = insertelement <4 x i32> %275, i32 %199, i64 1, !dbg !71
  %277 = insertelement <4 x i32> %276, i32 %200, i64 2, !dbg !71
  %278 = insertelement <4 x i32> %277, i32 %201, i64 3, !dbg !71
  %279 = bitcast <4 x i32> %278 to <4 x float>, !dbg !71
  %280 = fcmp olt <4 x float> %274, %279, !dbg !109
  %281 = extractelement <4 x i1> %280, i64 0, !dbg !111
  %282 = extractelement <4 x i1> %280, i64 1, !dbg !111
  %283 = extractelement <4 x i1> %280, i64 2, !dbg !111
  %284 = extractelement <4 x i1> %280, i64 3, !dbg !111
  %285 = zext <4 x i1> %217 to <4 x i8>, !dbg !112
  %286 = select <4 x i1> %226, <4 x i8> splat (i8 2), <4 x i8> %285, !dbg !113
  %287 = select <4 x i1> %235, <4 x i8> splat (i8 3), <4 x i8> %286, !dbg !114
  %288 = select <4 x i1> %244, <4 x i8> splat (i8 4), <4 x i8> %287, !dbg !115
  %289 = select <4 x i1> %253, <4 x i8> splat (i8 5), <4 x i8> %288, !dbg !116
  %290 = select <4 x i1> %262, <4 x i8> splat (i8 6), <4 x i8> %289, !dbg !117
  %291 = select <4 x i1> %271, <4 x i8> splat (i8 7), <4 x i8> %290, !dbg !118
  %292 = select <4 x i1> %280, <4 x i8> splat (i8 8), <4 x i8> %291, !dbg !119
  %293 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !34
  %294 = insertelement <4 x i32> %293, i32 %60, i64 1, !dbg !34
  %295 = insertelement <4 x i32> %294, i32 %61, i64 2, !dbg !34
  %296 = insertelement <4 x i32> %295, i32 %62, i64 3, !dbg !34
  %297 = bitcast <4 x i32> %296 to <4 x float>, !dbg !34
  %298 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !41
  %299 = insertelement <4 x i32> %298, i32 %80, i64 1, !dbg !41
  %300 = insertelement <4 x i32> %299, i32 %81, i64 2, !dbg !41
  %301 = insertelement <4 x i32> %300, i32 %82, i64 3, !dbg !41
  %302 = bitcast <4 x i32> %301 to <4 x float>, !dbg !41
  %303 = fcmp ogt <4 x float> %302, %297, !dbg !72
  %304 = fcmp uno <4 x float> %302, zeroinitializer, !dbg !76
  %305 = or <4 x i1> %303, %304, !dbg !77
  %.v25 = select <4 x i1> %305, <4 x i32> %301, <4 x i32> %296, !dbg !78
  %306 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !78
  %307 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !45
  %308 = insertelement <4 x i32> %307, i32 %97, i64 1, !dbg !45
  %309 = insertelement <4 x i32> %308, i32 %98, i64 2, !dbg !45
  %310 = insertelement <4 x i32> %309, i32 %99, i64 3, !dbg !45
  %311 = bitcast <4 x i32> %310 to <4 x float>, !dbg !45
  %312 = fcmp olt <4 x float> %306, %311, !dbg !79
  %313 = fcmp uno <4 x float> %311, zeroinitializer, !dbg !81
  %314 = or <4 x i1> %313, %312, !dbg !82
  %.v26 = select <4 x i1> %314, <4 x i32> %310, <4 x i32> %.v25, !dbg !83
  %315 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !83
  %316 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !51
  %317 = insertelement <4 x i32> %316, i32 %117, i64 1, !dbg !51
  %318 = insertelement <4 x i32> %317, i32 %118, i64 2, !dbg !51
  %319 = insertelement <4 x i32> %318, i32 %119, i64 3, !dbg !51
  %320 = bitcast <4 x i32> %319 to <4 x float>, !dbg !51
  %321 = fcmp olt <4 x float> %315, %320, !dbg !84
  %322 = fcmp uno <4 x float> %320, zeroinitializer, !dbg !86
  %323 = or <4 x i1> %322, %321, !dbg !87
  %.v27 = select <4 x i1> %323, <4 x i32> %319, <4 x i32> %.v26, !dbg !88
  %324 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !88
  %325 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !55
  %326 = insertelement <4 x i32> %325, i32 %136, i64 1, !dbg !55
  %327 = insertelement <4 x i32> %326, i32 %137, i64 2, !dbg !55
  %328 = insertelement <4 x i32> %327, i32 %138, i64 3, !dbg !55
  %329 = bitcast <4 x i32> %328 to <4 x float>, !dbg !55
  %330 = fcmp olt <4 x float> %324, %329, !dbg !89
  %331 = fcmp uno <4 x float> %329, zeroinitializer, !dbg !91
  %332 = or <4 x i1> %331, %330, !dbg !92
  %.v28 = select <4 x i1> %332, <4 x i32> %328, <4 x i32> %.v27, !dbg !93
  %333 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !93
  %334 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !59
  %335 = insertelement <4 x i32> %334, i32 %153, i64 1, !dbg !59
  %336 = insertelement <4 x i32> %335, i32 %154, i64 2, !dbg !59
  %337 = insertelement <4 x i32> %336, i32 %155, i64 3, !dbg !59
  %338 = bitcast <4 x i32> %337 to <4 x float>, !dbg !59
  %339 = fcmp olt <4 x float> %333, %338, !dbg !94
  %340 = fcmp uno <4 x float> %338, zeroinitializer, !dbg !96
  %341 = or <4 x i1> %340, %339, !dbg !97
  %.v29 = select <4 x i1> %341, <4 x i32> %337, <4 x i32> %.v28, !dbg !98
  %342 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !98
  %343 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !63
  %344 = insertelement <4 x i32> %343, i32 %170, i64 1, !dbg !63
  %345 = insertelement <4 x i32> %344, i32 %171, i64 2, !dbg !63
  %346 = insertelement <4 x i32> %345, i32 %172, i64 3, !dbg !63
  %347 = bitcast <4 x i32> %346 to <4 x float>, !dbg !63
  %348 = fcmp olt <4 x float> %342, %347, !dbg !99
  %349 = fcmp uno <4 x float> %347, zeroinitializer, !dbg !101
  %350 = or <4 x i1> %349, %348, !dbg !102
  %.v30 = select <4 x i1> %350, <4 x i32> %346, <4 x i32> %.v29, !dbg !103
  %351 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !103
  %352 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !67
  %353 = insertelement <4 x i32> %352, i32 %187, i64 1, !dbg !67
  %354 = insertelement <4 x i32> %353, i32 %188, i64 2, !dbg !67
  %355 = insertelement <4 x i32> %354, i32 %189, i64 3, !dbg !67
  %356 = bitcast <4 x i32> %355 to <4 x float>, !dbg !67
  %357 = fcmp olt <4 x float> %351, %356, !dbg !104
  %358 = fcmp uno <4 x float> %356, zeroinitializer, !dbg !106
  %359 = or <4 x i1> %358, %357, !dbg !107
  %.v31 = select <4 x i1> %359, <4 x i32> %355, <4 x i32> %.v30, !dbg !108
  %360 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !108
  %361 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !71
  %362 = insertelement <4 x i32> %361, i32 %204, i64 1, !dbg !71
  %363 = insertelement <4 x i32> %362, i32 %205, i64 2, !dbg !71
  %364 = insertelement <4 x i32> %363, i32 %206, i64 3, !dbg !71
  %365 = bitcast <4 x i32> %364 to <4 x float>, !dbg !71
  %366 = fcmp olt <4 x float> %360, %365, !dbg !109
  %367 = shufflevector <4 x float> %365, <4 x float> %279, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !120
  %368 = fcmp uno <8 x float> %367, zeroinitializer, !dbg !120
  %369 = extractelement <8 x i1> %368, i64 7, !dbg !111
  %370 = or i1 %369, %281, !dbg !111
  %371 = extractelement <8 x i1> %368, i64 6, !dbg !111
  %372 = or i1 %371, %282, !dbg !111
  %373 = extractelement <8 x i1> %368, i64 5, !dbg !111
  %374 = or i1 %373, %283, !dbg !111
  %375 = extractelement <8 x i1> %368, i64 4, !dbg !111
  %376 = or i1 %375, %284, !dbg !111
  %377 = extractelement <4 x i1> %366, i64 0, !dbg !111
  %378 = extractelement <8 x i1> %368, i64 3, !dbg !111
  %379 = or i1 %378, %377, !dbg !111
  %380 = extractelement <4 x i1> %366, i64 1, !dbg !111
  %381 = extractelement <8 x i1> %368, i64 2, !dbg !111
  %382 = or i1 %381, %380, !dbg !111
  %383 = extractelement <4 x i1> %366, i64 2, !dbg !111
  %384 = extractelement <8 x i1> %368, i64 1, !dbg !111
  %385 = or i1 %384, %383, !dbg !111
  %386 = extractelement <4 x i1> %366, i64 3, !dbg !111
  %387 = extractelement <8 x i1> %368, i64 0, !dbg !111
  %388 = or i1 %387, %386, !dbg !111
  %389 = zext <4 x i1> %303 to <4 x i8>, !dbg !112
  %390 = select <4 x i1> %312, <4 x i8> splat (i8 2), <4 x i8> %389, !dbg !113
  %391 = select <4 x i1> %321, <4 x i8> splat (i8 3), <4 x i8> %390, !dbg !114
  %392 = select <4 x i1> %330, <4 x i8> splat (i8 4), <4 x i8> %391, !dbg !115
  %393 = select <4 x i1> %339, <4 x i8> splat (i8 5), <4 x i8> %392, !dbg !116
  %394 = select <4 x i1> %348, <4 x i8> splat (i8 6), <4 x i8> %393, !dbg !117
  %395 = select <4 x i1> %357, <4 x i8> splat (i8 7), <4 x i8> %394, !dbg !118
  %396 = select <4 x i1> %366, <4 x i8> splat (i8 8), <4 x i8> %395, !dbg !119
  %397 = shl i32 %25, 10, !dbg !121
  %398 = shl i32 %26, 10, !dbg !121
  %399 = mul i32 %31, 98304, !dbg !122
  %400 = add i32 %399, %.decomposed, !dbg !123
  %401 = add i32 %400, %397, !dbg !124
  %402 = add i32 %400, %398, !dbg !124
  %403 = sext i32 %401 to i64, !dbg !125
  %404 = getelementptr float, ptr addrspace(1) %1, i64 %403, !dbg !125
  %405 = sext i32 %402 to i64, !dbg !125
  %406 = getelementptr float, ptr addrspace(1) %1, i64 %405, !dbg !125
  %407 = shl i32 %8, 6, !dbg !126
  %408 = and i32 %407, 960, !dbg !126
  %409 = or disjoint i32 %9, %408, !dbg !126
  %410 = or disjoint i32 %409, %11, !dbg !126
  %411 = and i32 %13, 56, !dbg !126
  %412 = shl i32 %8, 2, !dbg !126
  %413 = and i32 %412, 64, !dbg !126
  %414 = or disjoint i32 %411, %413, !dbg !126
  %415 = shl i32 %8, 2, !dbg !126
  %416 = and i32 %415, 128, !dbg !126
  %417 = or disjoint i32 %414, %416, !dbg !126
  %418 = shl nuw nsw i32 %10, 2, !dbg !126
  %419 = or disjoint i32 %417, %418, !dbg !126
  %420 = or disjoint i32 %419, %14, !dbg !126
  %421 = lshr exact i32 %408, 1, !dbg !126
  %422 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %421, !dbg !126
  %423 = getelementptr inbounds float, ptr addrspace(3) %422, i32 %410, !dbg !126
  %424 = extractelement <4 x i32> %.v24, i64 0, !dbg !126
  %425 = select i1 %370, i32 %198, i32 %424, !dbg !127
  %426 = insertelement <1 x i32> poison, i32 %425, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %426, i1 true) #2, !dbg !126
  %427 = or disjoint i32 %410, 8, !dbg !126
  %428 = lshr i32 %427, 1, !dbg !126
  %429 = and i32 %428, 484, !dbg !126
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %429, !dbg !126
  %431 = getelementptr inbounds float, ptr addrspace(3) %430, i32 %427, !dbg !126
  %432 = extractelement <4 x i32> %.v24, i64 1, !dbg !126
  %433 = select i1 %372, i32 %199, i32 %432, !dbg !127
  %434 = insertelement <1 x i32> poison, i32 %433, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %434, i1 true) #2, !dbg !126
  %435 = or disjoint i32 %410, 16, !dbg !126
  %436 = lshr i32 %435, 1, !dbg !126
  %437 = and i32 %436, 488, !dbg !126
  %438 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %437, !dbg !126
  %439 = getelementptr inbounds float, ptr addrspace(3) %438, i32 %435, !dbg !126
  %440 = extractelement <4 x i32> %.v24, i64 2, !dbg !126
  %441 = select i1 %374, i32 %200, i32 %440, !dbg !127
  %442 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %442, i1 true) #2, !dbg !126
  %443 = or disjoint i32 %410, 24, !dbg !126
  %444 = lshr i32 %443, 1, !dbg !126
  %445 = and i32 %444, 492, !dbg !126
  %446 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %445, !dbg !126
  %447 = getelementptr inbounds float, ptr addrspace(3) %446, i32 %443, !dbg !126
  %448 = extractelement <4 x i32> %.v24, i64 3, !dbg !126
  %449 = select i1 %376, i32 %201, i32 %448, !dbg !127
  %450 = insertelement <1 x i32> poison, i32 %449, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %450, i1 true) #2, !dbg !126
  %451 = or disjoint i32 %410, 32, !dbg !126
  %452 = lshr i32 %451, 1, !dbg !126
  %453 = and i32 %452, 496, !dbg !126
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !126
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %451, !dbg !126
  %456 = extractelement <4 x i32> %.v31, i64 0, !dbg !126
  %457 = select i1 %379, i32 %203, i32 %456, !dbg !127
  %458 = insertelement <1 x i32> poison, i32 %457, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %458, i1 true) #2, !dbg !126
  %459 = or disjoint i32 %410, 40, !dbg !126
  %460 = lshr i32 %459, 1, !dbg !126
  %461 = and i32 %460, 500, !dbg !126
  %462 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %461, !dbg !126
  %463 = getelementptr inbounds float, ptr addrspace(3) %462, i32 %459, !dbg !126
  %464 = extractelement <4 x i32> %.v31, i64 1, !dbg !126
  %465 = select i1 %382, i32 %204, i32 %464, !dbg !127
  %466 = insertelement <1 x i32> poison, i32 %465, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %466, i1 true) #2, !dbg !126
  %467 = or disjoint i32 %410, 48, !dbg !126
  %468 = lshr i32 %467, 1, !dbg !126
  %469 = and i32 %468, 504, !dbg !126
  %470 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %469, !dbg !126
  %471 = getelementptr inbounds float, ptr addrspace(3) %470, i32 %467, !dbg !126
  %472 = extractelement <4 x i32> %.v31, i64 2, !dbg !126
  %473 = select i1 %385, i32 %205, i32 %472, !dbg !127
  %474 = insertelement <1 x i32> poison, i32 %473, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %474, i1 true) #2, !dbg !126
  %475 = or disjoint i32 %410, 56, !dbg !126
  %476 = lshr i32 %475, 1, !dbg !126
  %477 = and i32 %476, 508, !dbg !126
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %477, !dbg !126
  %479 = getelementptr inbounds float, ptr addrspace(3) %478, i32 %475, !dbg !126
  %480 = extractelement <4 x i32> %.v31, i64 3, !dbg !126
  %481 = select i1 %388, i32 %206, i32 %480, !dbg !127
  %482 = insertelement <1 x i32> poison, i32 %481, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %482, i1 true) #2, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %483 = lshr exact i32 %419, 1, !dbg !126
  %484 = getelementptr float, ptr addrspace(3) @global_smem, i32 %483, !dbg !126
  %485 = getelementptr float, ptr addrspace(3) %484, i32 %420, !dbg !126
  %486 = or disjoint i32 %420, 512, !dbg !126
  %487 = lshr exact i32 %486, 1, !dbg !126
  %488 = and i32 %487, 2147483644, !dbg !126
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !126
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %486, !dbg !126
  %491 = load <4 x i32>, ptr addrspace(3) %490, align 16, !dbg !126
  %.extract = load i32, ptr addrspace(3) %485, align 16, !dbg !126
  %492 = getelementptr inbounds i8, ptr addrspace(3) %485, i32 4, !dbg !126
  %.extract11 = load i32, ptr addrspace(3) %492, align 4, !dbg !126
  %493 = getelementptr inbounds i8, ptr addrspace(3) %485, i32 8, !dbg !126
  %.extract12 = load i32, ptr addrspace(3) %493, align 8, !dbg !126
  %494 = getelementptr inbounds i8, ptr addrspace(3) %485, i32 12, !dbg !126
  %.extract13 = load i32, ptr addrspace(3) %494, align 4, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %404, i1 %28) #2, !dbg !126
  %.extract14 = extractelement <4 x i32> %491, i64 0, !dbg !126
  %.extract15 = extractelement <4 x i32> %491, i64 1, !dbg !126
  %.extract16 = extractelement <4 x i32> %491, i64 2, !dbg !126
  %.extract17 = extractelement <4 x i32> %491, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %406, i1 %29) #2, !dbg !126
  %495 = mul i32 %15, 96, !dbg !128
  %496 = add i32 %23, %495, !dbg !129
  %497 = sext i32 %496 to i64, !dbg !130
  %498 = getelementptr i8, ptr addrspace(1) %2, i64 %497, !dbg !130
  %499 = bitcast <4 x i8> %292 to i32, !dbg !131
  %500 = bitcast <4 x i8> %396 to i32, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %499, i32 %500, ptr addrspace(1) %498, i1 %27) #2, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctofodevne6aa27t2z3azvbbbpioq25rzemwswu7x6ed6uyq5dg5.py", directory: "inductor_cache/to")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 46, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 68, column: 20, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 41, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 74, scope: !7)
!34 = !DILocation(line: 46, column: 66, scope: !7)
!35 = !DILocation(line: 48, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 19, scope: !7)
!37 = !DILocation(line: 52, column: 46, scope: !7)
!38 = !DILocation(line: 52, column: 55, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 74, scope: !7)
!41 = !DILocation(line: 52, column: 66, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 55, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 66, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 44, scope: !7)
!48 = !DILocation(line: 66, column: 53, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 72, scope: !7)
!51 = !DILocation(line: 66, column: 64, scope: !7)
!52 = !DILocation(line: 69, column: 45, scope: !7)
!53 = !DILocation(line: 69, column: 31, scope: !7)
!54 = !DILocation(line: 69, column: 64, scope: !7)
!55 = !DILocation(line: 69, column: 56, scope: !7)
!56 = !DILocation(line: 72, column: 41, scope: !7)
!57 = !DILocation(line: 72, column: 50, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 61, scope: !7)
!60 = !DILocation(line: 79, column: 43, scope: !7)
!61 = !DILocation(line: 79, column: 52, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 63, scope: !7)
!64 = !DILocation(line: 82, column: 43, scope: !7)
!65 = !DILocation(line: 82, column: 52, scope: !7)
!66 = !DILocation(line: 82, column: 31, scope: !7)
!67 = !DILocation(line: 82, column: 63, scope: !7)
!68 = !DILocation(line: 85, column: 43, scope: !7)
!69 = !DILocation(line: 85, column: 52, scope: !7)
!70 = !DILocation(line: 85, column: 31, scope: !7)
!71 = !DILocation(line: 85, column: 63, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 53, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !80)
!80 = !DILocation(line: 60, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !90)
!90 = !DILocation(line: 70, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !95)
!95 = !DILocation(line: 73, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !105)
!105 = !DILocation(line: 83, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !110)
!110 = !DILocation(line: 86, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !110)
!112 = !DILocation(line: 90, column: 35, scope: !7)
!113 = !DILocation(line: 93, column: 35, scope: !7)
!114 = !DILocation(line: 96, column: 35, scope: !7)
!115 = !DILocation(line: 99, column: 35, scope: !7)
!116 = !DILocation(line: 102, column: 35, scope: !7)
!117 = !DILocation(line: 105, column: 35, scope: !7)
!118 = !DILocation(line: 108, column: 35, scope: !7)
!119 = !DILocation(line: 111, column: 35, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !110)
!121 = !DILocation(line: 112, column: 35, scope: !7)
!122 = !DILocation(line: 112, column: 46, scope: !7)
!123 = !DILocation(line: 112, column: 30, scope: !7)
!124 = !DILocation(line: 112, column: 40, scope: !7)
!125 = !DILocation(line: 112, column: 25, scope: !7)
!126 = !DILocation(line: 112, column: 58, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !110)
!128 = !DILocation(line: 113, column: 33, scope: !7)
!129 = !DILocation(line: 113, column: 30, scope: !7)
!130 = !DILocation(line: 113, column: 25, scope: !7)
!131 = !DILocation(line: 113, column: 45, scope: !7)
!132 = !DILocation(line: 113, column: 4, scope: !7)
