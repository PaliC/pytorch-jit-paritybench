; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = shl i32 %10, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %9, %11, !dbg !13
  %18 = or disjoint i32 %9, %12, !dbg !13
  %19 = or disjoint i32 %9, %13, !dbg !13
  %20 = or disjoint i32 %9, %14, !dbg !13
  %21 = or disjoint i32 %9, %16, !dbg !13
  %22 = or disjoint i32 %21, 512, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %24 = icmp slt i32 %23, 289, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %25 = sdiv i32 %.frozen, 768, !dbg !16
  %26 = mul i32 %25, 768, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %.frozen36 = freeze i32 %22, !dbg !16
  %27 = sdiv i32 %.frozen36, 768, !dbg !16
  %28 = mul i32 %27, 768, !dbg !17
  %.decomposed37 = sub i32 %.frozen36, %28, !dbg !17
  %.frozen38 = freeze i32 %23, !dbg !18
  %29 = sdiv i32 %.frozen38, 17, !dbg !18
  %30 = mul i32 %29, 17, !dbg !19
  %.decomposed39 = sub i32 %.frozen38, %30, !dbg !19
  %31 = mul i32 %17, 289, !dbg !20
  %32 = mul i32 %18, 289, !dbg !20
  %33 = mul i32 %19, 289, !dbg !20
  %34 = mul i32 %20, 289, !dbg !20
  %35 = add i32 %31, 147968, !dbg !20
  %36 = add i32 %31, 184960, !dbg !20
  %37 = add i32 %31, 221952, !dbg !20
  %38 = add i32 %31, 258944, !dbg !20
  %39 = add i32 %31, %23, !dbg !21
  %40 = add i32 %32, %23, !dbg !21
  %41 = add i32 %33, %23, !dbg !21
  %42 = add i32 %34, %23, !dbg !21
  %43 = add i32 %23, %35, !dbg !21
  %44 = add i32 %23, %36, !dbg !21
  %45 = add i32 %23, %37, !dbg !21
  %46 = add i32 %23, %38, !dbg !21
  %47 = sext i32 %39 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %40 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %41 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %42 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %43 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %44 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %45 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %46 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %24) #2, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %24) #2, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %24) #2, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %24) #2, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #2, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %24) #2, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %24) #2, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %24) #2, !dbg !23
  %71 = icmp sgt i32 %.decomposed39, 0, !dbg !24
  %72 = add i32 %23, -18, !dbg !25
  %73 = add i32 %31, %72, !dbg !26
  %74 = add i32 %32, %72, !dbg !26
  %75 = add i32 %33, %72, !dbg !26
  %76 = add i32 %34, %72, !dbg !26
  %77 = add i32 %72, %35, !dbg !26
  %78 = add i32 %72, %36, !dbg !26
  %79 = add i32 %72, %37, !dbg !26
  %80 = add i32 %72, %38, !dbg !26
  %81 = sext i32 %73 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !27
  %83 = sext i32 %74 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !27
  %85 = sext i32 %75 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !27
  %87 = sext i32 %76 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !27
  %89 = sext i32 %77 to i64, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !27
  %91 = sext i32 %78 to i64, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !27
  %93 = sext i32 %79 to i64, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !27
  %95 = sext i32 %80 to i64, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !27
  %97 = add i32 %23, -17, !dbg !28
  %98 = icmp ult i32 %97, 272, !dbg !28
  %99 = and i1 %98, %71, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %101 = bitcast i32 %100 to float, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %99, i32 0, i1 %99) #2, !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = icmp sgt i32 %.decomposed39, -1, !dbg !30
  %117 = add i32 %31, %97, !dbg !31
  %118 = add i32 %32, %97, !dbg !31
  %119 = add i32 %33, %97, !dbg !31
  %120 = add i32 %34, %97, !dbg !31
  %121 = add i32 %97, %35, !dbg !31
  %122 = add i32 %97, %36, !dbg !31
  %123 = add i32 %97, %37, !dbg !31
  %124 = add i32 %97, %38, !dbg !31
  %125 = sext i32 %117 to i64, !dbg !32
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !32
  %127 = sext i32 %118 to i64, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !32
  %129 = sext i32 %119 to i64, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !32
  %131 = sext i32 %120 to i64, !dbg !32
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !32
  %133 = sext i32 %121 to i64, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !32
  %135 = sext i32 %122 to i64, !dbg !32
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !32
  %137 = sext i32 %123 to i64, !dbg !32
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !32
  %139 = sext i32 %124 to i64, !dbg !32
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !32
  %141 = and i1 %98, %116, !dbg !33
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %147 = bitcast i32 %146 to float, !dbg !34
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %149 = bitcast i32 %148 to float, !dbg !34
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %151 = bitcast i32 %150 to float, !dbg !34
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %153 = bitcast i32 %152 to float, !dbg !34
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %155 = bitcast i32 %154 to float, !dbg !34
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %141, i32 0, i1 %141) #2, !dbg !34
  %157 = bitcast i32 %156 to float, !dbg !34
  %158 = fadd float %101, %143, !dbg !35
  %159 = fadd float %103, %145, !dbg !35
  %160 = fadd float %105, %147, !dbg !35
  %161 = fadd float %107, %149, !dbg !35
  %162 = fadd float %109, %151, !dbg !35
  %163 = fadd float %111, %153, !dbg !35
  %164 = fadd float %113, %155, !dbg !35
  %165 = fadd float %115, %157, !dbg !35
  %166 = add nsw i32 %.decomposed39, 1, !dbg !36
  %167 = icmp ult i32 %166, 17, !dbg !36
  %168 = add i32 %23, -16, !dbg !37
  %169 = add i32 %31, %168, !dbg !38
  %170 = add i32 %32, %168, !dbg !38
  %171 = add i32 %33, %168, !dbg !38
  %172 = add i32 %34, %168, !dbg !38
  %173 = add i32 %168, %35, !dbg !38
  %174 = add i32 %168, %36, !dbg !38
  %175 = add i32 %168, %37, !dbg !38
  %176 = add i32 %168, %38, !dbg !38
  %177 = sext i32 %169 to i64, !dbg !39
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !39
  %179 = sext i32 %170 to i64, !dbg !39
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !39
  %181 = sext i32 %171 to i64, !dbg !39
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !39
  %183 = sext i32 %172 to i64, !dbg !39
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !39
  %185 = sext i32 %173 to i64, !dbg !39
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !39
  %187 = sext i32 %174 to i64, !dbg !39
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !39
  %189 = sext i32 %175 to i64, !dbg !39
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !39
  %191 = sext i32 %176 to i64, !dbg !39
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !39
  %193 = and i1 %98, %167, !dbg !40
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %195 = bitcast i32 %194 to float, !dbg !41
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %197 = bitcast i32 %196 to float, !dbg !41
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %199 = bitcast i32 %198 to float, !dbg !41
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %201 = bitcast i32 %200 to float, !dbg !41
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %203 = bitcast i32 %202 to float, !dbg !41
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %205 = bitcast i32 %204 to float, !dbg !41
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %207 = bitcast i32 %206 to float, !dbg !41
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %193, i32 0, i1 %193) #2, !dbg !41
  %209 = bitcast i32 %208 to float, !dbg !41
  %210 = fadd float %158, %195, !dbg !42
  %211 = fadd float %159, %197, !dbg !42
  %212 = fadd float %160, %199, !dbg !42
  %213 = fadd float %161, %201, !dbg !42
  %214 = fadd float %162, %203, !dbg !42
  %215 = fadd float %163, %205, !dbg !42
  %216 = fadd float %164, %207, !dbg !42
  %217 = fadd float %165, %209, !dbg !42
  %218 = add i32 %23, -1, !dbg !43
  %219 = add i32 %31, %218, !dbg !44
  %220 = add i32 %32, %218, !dbg !44
  %221 = add i32 %33, %218, !dbg !44
  %222 = add i32 %34, %218, !dbg !44
  %223 = add i32 %218, %35, !dbg !44
  %224 = add i32 %218, %36, !dbg !44
  %225 = add i32 %218, %37, !dbg !44
  %226 = add i32 %218, %38, !dbg !44
  %227 = sext i32 %219 to i64, !dbg !45
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !45
  %229 = sext i32 %220 to i64, !dbg !45
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !45
  %231 = sext i32 %221 to i64, !dbg !45
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !45
  %233 = sext i32 %222 to i64, !dbg !45
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !45
  %235 = sext i32 %223 to i64, !dbg !45
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !45
  %237 = sext i32 %224 to i64, !dbg !45
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !45
  %239 = sext i32 %225 to i64, !dbg !45
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !45
  %241 = sext i32 %226 to i64, !dbg !45
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !45
  %243 = add i32 %23, 16, !dbg !46
  %244 = icmp ult i32 %243, 305, !dbg !46
  %245 = and i1 %244, %71, !dbg !46
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %247 = bitcast i32 %246 to float, !dbg !47
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %249 = bitcast i32 %248 to float, !dbg !47
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %251 = bitcast i32 %250 to float, !dbg !47
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %253 = bitcast i32 %252 to float, !dbg !47
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %255 = bitcast i32 %254 to float, !dbg !47
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %257 = bitcast i32 %256 to float, !dbg !47
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %259 = bitcast i32 %258 to float, !dbg !47
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %245, i32 0, i1 %245) #2, !dbg !47
  %261 = bitcast i32 %260 to float, !dbg !47
  %262 = fadd float %210, %247, !dbg !48
  %263 = fadd float %211, %249, !dbg !48
  %264 = fadd float %212, %251, !dbg !48
  %265 = fadd float %213, %253, !dbg !48
  %266 = fadd float %214, %255, !dbg !48
  %267 = fadd float %215, %257, !dbg !48
  %268 = fadd float %216, %259, !dbg !48
  %269 = fadd float %217, %261, !dbg !48
  %270 = and i1 %244, %116, !dbg !49
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %272 = bitcast i32 %271 to float, !dbg !50
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %274 = bitcast i32 %273 to float, !dbg !50
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %276 = bitcast i32 %275 to float, !dbg !50
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %278 = bitcast i32 %277 to float, !dbg !50
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %280 = bitcast i32 %279 to float, !dbg !50
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %282 = bitcast i32 %281 to float, !dbg !50
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %284 = bitcast i32 %283 to float, !dbg !50
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %270, i32 0, i1 %270) #2, !dbg !50
  %286 = bitcast i32 %285 to float, !dbg !50
  %287 = fadd float %262, %272, !dbg !51
  %288 = fadd float %263, %274, !dbg !51
  %289 = fadd float %264, %276, !dbg !51
  %290 = fadd float %265, %278, !dbg !51
  %291 = fadd float %266, %280, !dbg !51
  %292 = fadd float %267, %282, !dbg !51
  %293 = fadd float %268, %284, !dbg !51
  %294 = fadd float %269, %286, !dbg !51
  %295 = add i32 %23, 1, !dbg !52
  %296 = add i32 %31, %295, !dbg !53
  %297 = add i32 %32, %295, !dbg !53
  %298 = add i32 %33, %295, !dbg !53
  %299 = add i32 %34, %295, !dbg !53
  %300 = add i32 %295, %35, !dbg !53
  %301 = add i32 %295, %36, !dbg !53
  %302 = add i32 %295, %37, !dbg !53
  %303 = add i32 %295, %38, !dbg !53
  %304 = sext i32 %296 to i64, !dbg !54
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %304, !dbg !54
  %306 = sext i32 %297 to i64, !dbg !54
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !54
  %308 = sext i32 %298 to i64, !dbg !54
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !54
  %310 = sext i32 %299 to i64, !dbg !54
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !54
  %312 = sext i32 %300 to i64, !dbg !54
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !54
  %314 = sext i32 %301 to i64, !dbg !54
  %315 = getelementptr float, ptr addrspace(1) %0, i64 %314, !dbg !54
  %316 = sext i32 %302 to i64, !dbg !54
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !54
  %318 = sext i32 %303 to i64, !dbg !54
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !54
  %320 = and i1 %244, %167, !dbg !55
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %322 = bitcast i32 %321 to float, !dbg !56
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %324 = bitcast i32 %323 to float, !dbg !56
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %326 = bitcast i32 %325 to float, !dbg !56
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %328 = bitcast i32 %327 to float, !dbg !56
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %330 = bitcast i32 %329 to float, !dbg !56
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %332 = bitcast i32 %331 to float, !dbg !56
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %317, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %334 = bitcast i32 %333 to float, !dbg !56
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %319, i1 %320, i32 0, i1 %320) #2, !dbg !56
  %336 = bitcast i32 %335 to float, !dbg !56
  %337 = fadd float %287, %322, !dbg !57
  %338 = fadd float %288, %324, !dbg !57
  %339 = fadd float %289, %326, !dbg !57
  %340 = fadd float %290, %328, !dbg !57
  %341 = fadd float %291, %330, !dbg !57
  %342 = fadd float %292, %332, !dbg !57
  %343 = fadd float %293, %334, !dbg !57
  %344 = fadd float %294, %336, !dbg !57
  %345 = add i32 %31, %243, !dbg !58
  %346 = add i32 %32, %243, !dbg !58
  %347 = add i32 %33, %243, !dbg !58
  %348 = add i32 %34, %243, !dbg !58
  %349 = add i32 %243, %35, !dbg !58
  %350 = add i32 %243, %36, !dbg !58
  %351 = add i32 %243, %37, !dbg !58
  %352 = add i32 %243, %38, !dbg !58
  %353 = sext i32 %345 to i64, !dbg !59
  %354 = getelementptr float, ptr addrspace(1) %0, i64 %353, !dbg !59
  %355 = sext i32 %346 to i64, !dbg !59
  %356 = getelementptr float, ptr addrspace(1) %0, i64 %355, !dbg !59
  %357 = sext i32 %347 to i64, !dbg !59
  %358 = getelementptr float, ptr addrspace(1) %0, i64 %357, !dbg !59
  %359 = sext i32 %348 to i64, !dbg !59
  %360 = getelementptr float, ptr addrspace(1) %0, i64 %359, !dbg !59
  %361 = sext i32 %349 to i64, !dbg !59
  %362 = getelementptr float, ptr addrspace(1) %0, i64 %361, !dbg !59
  %363 = sext i32 %350 to i64, !dbg !59
  %364 = getelementptr float, ptr addrspace(1) %0, i64 %363, !dbg !59
  %365 = sext i32 %351 to i64, !dbg !59
  %366 = getelementptr float, ptr addrspace(1) %0, i64 %365, !dbg !59
  %367 = sext i32 %352 to i64, !dbg !59
  %368 = getelementptr float, ptr addrspace(1) %0, i64 %367, !dbg !59
  %369 = add i32 %23, 33, !dbg !60
  %370 = icmp ult i32 %369, 305, !dbg !60
  %371 = and i1 %370, %71, !dbg !60
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %354, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %373 = bitcast i32 %372 to float, !dbg !61
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %356, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %375 = bitcast i32 %374 to float, !dbg !61
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %358, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %377 = bitcast i32 %376 to float, !dbg !61
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %360, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %379 = bitcast i32 %378 to float, !dbg !61
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %362, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %381 = bitcast i32 %380 to float, !dbg !61
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %364, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %383 = bitcast i32 %382 to float, !dbg !61
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %366, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %385 = bitcast i32 %384 to float, !dbg !61
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %371, i32 0, i1 %371) #2, !dbg !61
  %387 = bitcast i32 %386 to float, !dbg !61
  %388 = fadd float %337, %373, !dbg !62
  %389 = fadd float %338, %375, !dbg !62
  %390 = fadd float %339, %377, !dbg !62
  %391 = fadd float %340, %379, !dbg !62
  %392 = fadd float %341, %381, !dbg !62
  %393 = fadd float %342, %383, !dbg !62
  %394 = fadd float %343, %385, !dbg !62
  %395 = fadd float %344, %387, !dbg !62
  %396 = add i32 %23, 17, !dbg !63
  %397 = add i32 %31, %396, !dbg !64
  %398 = add i32 %32, %396, !dbg !64
  %399 = add i32 %33, %396, !dbg !64
  %400 = add i32 %34, %396, !dbg !64
  %401 = add i32 %396, %35, !dbg !64
  %402 = add i32 %396, %36, !dbg !64
  %403 = add i32 %396, %37, !dbg !64
  %404 = add i32 %396, %38, !dbg !64
  %405 = sext i32 %397 to i64, !dbg !65
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !65
  %407 = sext i32 %398 to i64, !dbg !65
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !65
  %409 = sext i32 %399 to i64, !dbg !65
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !65
  %411 = sext i32 %400 to i64, !dbg !65
  %412 = getelementptr float, ptr addrspace(1) %0, i64 %411, !dbg !65
  %413 = sext i32 %401 to i64, !dbg !65
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !65
  %415 = sext i32 %402 to i64, !dbg !65
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !65
  %417 = sext i32 %403 to i64, !dbg !65
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !65
  %419 = sext i32 %404 to i64, !dbg !65
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !65
  %421 = and i1 %370, %116, !dbg !66
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %423 = bitcast i32 %422 to float, !dbg !67
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %425 = bitcast i32 %424 to float, !dbg !67
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %410, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %427 = bitcast i32 %426 to float, !dbg !67
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %412, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %429 = bitcast i32 %428 to float, !dbg !67
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %414, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %431 = bitcast i32 %430 to float, !dbg !67
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %416, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %433 = bitcast i32 %432 to float, !dbg !67
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %418, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %435 = bitcast i32 %434 to float, !dbg !67
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %420, i1 %421, i32 0, i1 %421) #2, !dbg !67
  %437 = bitcast i32 %436 to float, !dbg !67
  %438 = fadd float %388, %423, !dbg !68
  %439 = fadd float %389, %425, !dbg !68
  %440 = fadd float %390, %427, !dbg !68
  %441 = fadd float %391, %429, !dbg !68
  %442 = fadd float %392, %431, !dbg !68
  %443 = fadd float %393, %433, !dbg !68
  %444 = fadd float %394, %435, !dbg !68
  %445 = fadd float %395, %437, !dbg !68
  %446 = add i32 %23, 18, !dbg !69
  %447 = add i32 %31, %446, !dbg !70
  %448 = add i32 %32, %446, !dbg !70
  %449 = add i32 %33, %446, !dbg !70
  %450 = add i32 %34, %446, !dbg !70
  %451 = add i32 %446, %35, !dbg !70
  %452 = add i32 %446, %36, !dbg !70
  %453 = add i32 %446, %37, !dbg !70
  %454 = add i32 %446, %38, !dbg !70
  %455 = sext i32 %447 to i64, !dbg !71
  %456 = getelementptr float, ptr addrspace(1) %0, i64 %455, !dbg !71
  %457 = sext i32 %448 to i64, !dbg !71
  %458 = getelementptr float, ptr addrspace(1) %0, i64 %457, !dbg !71
  %459 = sext i32 %449 to i64, !dbg !71
  %460 = getelementptr float, ptr addrspace(1) %0, i64 %459, !dbg !71
  %461 = sext i32 %450 to i64, !dbg !71
  %462 = getelementptr float, ptr addrspace(1) %0, i64 %461, !dbg !71
  %463 = sext i32 %451 to i64, !dbg !71
  %464 = getelementptr float, ptr addrspace(1) %0, i64 %463, !dbg !71
  %465 = sext i32 %452 to i64, !dbg !71
  %466 = getelementptr float, ptr addrspace(1) %0, i64 %465, !dbg !71
  %467 = sext i32 %453 to i64, !dbg !71
  %468 = getelementptr float, ptr addrspace(1) %0, i64 %467, !dbg !71
  %469 = sext i32 %454 to i64, !dbg !71
  %470 = getelementptr float, ptr addrspace(1) %0, i64 %469, !dbg !71
  %471 = and i1 %370, %167, !dbg !72
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %456, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %473 = bitcast i32 %472 to float, !dbg !73
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %458, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %475 = bitcast i32 %474 to float, !dbg !73
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %460, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %477 = bitcast i32 %476 to float, !dbg !73
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %462, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %479 = bitcast i32 %478 to float, !dbg !73
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %464, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %481 = bitcast i32 %480 to float, !dbg !73
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %466, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %483 = bitcast i32 %482 to float, !dbg !73
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %485 = bitcast i32 %484 to float, !dbg !73
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %470, i1 %471, i32 0, i1 %471) #2, !dbg !73
  %487 = bitcast i32 %486 to float, !dbg !73
  %488 = fadd float %438, %473, !dbg !74
  %489 = fadd float %439, %475, !dbg !74
  %490 = fadd float %440, %477, !dbg !74
  %491 = fadd float %441, %479, !dbg !74
  %492 = fadd float %442, %481, !dbg !74
  %493 = fadd float %443, %483, !dbg !74
  %494 = fadd float %444, %485, !dbg !74
  %495 = fadd float %445, %487, !dbg !74
  %496 = mul nsw i32 %.decomposed39, %29, !dbg !75
  %497 = add nsw i32 %.decomposed39, 2, !dbg !76
  %498 = add nsw i32 %29, 2, !dbg !77
  %499 = insertelement <2 x i32> <i32 poison, i32 271>, i32 %.decomposed39, i64 0, !dbg !78
  %500 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %23, i64 1, !dbg !78
  %501 = icmp slt <2 x i32> %499, %500, !dbg !78
  %502 = insertelement <2 x i32> <i32 poison, i32 18>, i32 %497, i64 0, !dbg !79
  %503 = select <2 x i1> %501, <2 x i32> %502, <2 x i32> zeroinitializer, !dbg !79
  %504 = insertelement <2 x i32> %499, i32 272, i64 1, !dbg !80
  %505 = insertelement <2 x i32> %500, i32 15, i64 0, !dbg !80
  %506 = icmp sgt <2 x i32> %504, %505, !dbg !80
  %507 = insertelement <2 x i32> <i32 18, i32 poison>, i32 %498, i64 1, !dbg !81
  %508 = select <2 x i1> %506, <2 x i32> %507, <2 x i32> zeroinitializer, !dbg !81
  %509 = add nsw <2 x i32> %508, %503, !dbg !82
  %510 = extractelement <2 x i32> %509, i64 0, !dbg !83
  %511 = extractelement <2 x i32> %509, i64 1, !dbg !84
  %512 = mul i32 %510, %511, !dbg !85
  %.neg32 = mul nsw i32 %511, %.decomposed39, !dbg !84
  %.neg33 = mul i32 %510, %29, !dbg !84
  %reass.add = add i32 %.neg32, %.neg33
  %513 = add nsw i32 %29, %.decomposed39, !dbg !86
  %reass.sub35 = sub i32 %496, %513, !dbg !86
  %514 = add i32 %reass.sub35, 1, !dbg !86
  %515 = add i32 %514, %510, !dbg !83
  %516 = add i32 %515, %511, !dbg !84
  %517 = add i32 %516, %512, !dbg !87
  %518 = sub i32 %517, %reass.add, !dbg !88
  %519 = sitofp i32 %518 to float, !dbg !89
  %520 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float %519) #2, !dbg !89
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %489, float %519) #2, !dbg !89
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %490, float %519) #2, !dbg !89
  %523 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %491, float %519) #2, !dbg !89
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %492, float %519) #2, !dbg !89
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %493, float %519) #2, !dbg !89
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %494, float %519) #2, !dbg !89
  %527 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %495, float %519) #2, !dbg !89
  %528 = mul i32 %23, 768, !dbg !90
  %529 = add i32 %.decomposed, %528, !dbg !91
  %530 = mul i32 %25, 221952, !dbg !92
  %531 = mul i32 %27, 221952, !dbg !92
  %532 = add i32 %529, %530, !dbg !93
  %533 = add i32 %531, %.decomposed37, !dbg !91
  %534 = add i32 %533, %528, !dbg !93
  %535 = sext i32 %532 to i64, !dbg !94
  %536 = getelementptr float, ptr addrspace(1) %1, i64 %535, !dbg !94
  %537 = sext i32 %534 to i64, !dbg !94
  %538 = getelementptr float, ptr addrspace(1) %1, i64 %537, !dbg !94
  %539 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !95
  %540 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %540, i1 true) #2, !dbg !95
  %541 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !95
  %542 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %542, i1 true) #2, !dbg !95
  %543 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !95
  %544 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #2, !dbg !95
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !95
  %546 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %545, <1 x i32> %546, i1 true) #2, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !95
  %548 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %549 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %549, i1 true) #2, !dbg !95
  %550 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %550, i1 true) #2, !dbg !95
  %551 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %551, i1 true) #2, !dbg !95
  %552 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %545, <1 x i32> %552, i1 true) #2, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %553 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !95
  %.extract = extractelement <4 x i32> %548, i64 0, !dbg !95
  %.extract8 = extractelement <4 x i32> %548, i64 1, !dbg !95
  %.extract9 = extractelement <4 x i32> %548, i64 2, !dbg !95
  %.extract10 = extractelement <4 x i32> %548, i64 3, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %536, i1 %24) #2, !dbg !95
  %.extract11 = extractelement <4 x i32> %553, i64 0, !dbg !95
  %.extract12 = extractelement <4 x i32> %553, i64 1, !dbg !95
  %.extract13 = extractelement <4 x i32> %553, i64 2, !dbg !95
  %.extract14 = extractelement <4 x i32> %553, i64 3, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %538, i1 %24) #2, !dbg !95
  %554 = getelementptr float, ptr addrspace(1) %2, i64 %535, !dbg !96
  %555 = getelementptr float, ptr addrspace(1) %2, i64 %537, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %554, i1 %24) #2, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %555, i1 %24) #2, !dbg !97
  %556 = getelementptr float, ptr addrspace(1) %3, i64 %535, !dbg !98
  %557 = getelementptr float, ptr addrspace(1) %3, i64 %537, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %556, i1 %24) #2, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %557, i1 %24) #2, !dbg !99
  %558 = getelementptr float, ptr addrspace(1) %4, i64 %535, !dbg !100
  %559 = getelementptr float, ptr addrspace(1) %4, i64 %537, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %560 = bitcast float %520 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %560, i1 true) #2, !dbg !101
  %561 = bitcast float %521 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %561, i1 true) #2, !dbg !101
  %562 = bitcast float %522 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %562, i1 true) #2, !dbg !101
  %563 = bitcast float %523 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %545, <1 x i32> %563, i1 true) #2, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %564 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %565 = bitcast float %524 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %565, i1 true) #2, !dbg !101
  %566 = bitcast float %525 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %566, i1 true) #2, !dbg !101
  %567 = bitcast float %526 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %567, i1 true) #2, !dbg !101
  %568 = bitcast float %527 to <1 x i32>, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %545, <1 x i32> %568, i1 true) #2, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %569 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !101
  %.extract22 = extractelement <4 x i32> %564, i64 0, !dbg !101
  %.extract23 = extractelement <4 x i32> %564, i64 1, !dbg !101
  %.extract24 = extractelement <4 x i32> %564, i64 2, !dbg !101
  %.extract25 = extractelement <4 x i32> %564, i64 3, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %558, i1 %24) #2, !dbg !101
  %.extract26 = extractelement <4 x i32> %569, i64 0, !dbg !101
  %.extract27 = extractelement <4 x i32> %569, i64 1, !dbg !101
  %.extract28 = extractelement <4 x i32> %569, i64 2, !dbg !101
  %.extract29 = extractelement <4 x i32> %569, i64 3, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %559, i1 %24) #2, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rnneett6okjia5wtfz2xfhswrwg2hoxr24ssxgxzupp5utevyy.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_29", linkageName: "triton_poi_fused_avg_pool2d_convolution_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 39, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 44, scope: !7)
!24 = !DILocation(line: 42, column: 19, scope: !7)
!25 = !DILocation(line: 46, column: 39, scope: !7)
!26 = !DILocation(line: 46, column: 44, scope: !7)
!27 = !DILocation(line: 46, column: 31, scope: !7)
!28 = !DILocation(line: 46, column: 61, scope: !7)
!29 = !DILocation(line: 46, column: 53, scope: !7)
!30 = !DILocation(line: 48, column: 21, scope: !7)
!31 = !DILocation(line: 52, column: 44, scope: !7)
!32 = !DILocation(line: 52, column: 31, scope: !7)
!33 = !DILocation(line: 52, column: 61, scope: !7)
!34 = !DILocation(line: 52, column: 53, scope: !7)
!35 = !DILocation(line: 53, column: 20, scope: !7)
!36 = !DILocation(line: 57, column: 20, scope: !7)
!37 = !DILocation(line: 59, column: 39, scope: !7)
!38 = !DILocation(line: 59, column: 44, scope: !7)
!39 = !DILocation(line: 59, column: 31, scope: !7)
!40 = !DILocation(line: 59, column: 61, scope: !7)
!41 = !DILocation(line: 59, column: 53, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 66, column: 38, scope: !7)
!44 = !DILocation(line: 66, column: 43, scope: !7)
!45 = !DILocation(line: 66, column: 31, scope: !7)
!46 = !DILocation(line: 66, column: 60, scope: !7)
!47 = !DILocation(line: 66, column: 52, scope: !7)
!48 = !DILocation(line: 67, column: 20, scope: !7)
!49 = !DILocation(line: 69, column: 53, scope: !7)
!50 = !DILocation(line: 69, column: 45, scope: !7)
!51 = !DILocation(line: 70, column: 20, scope: !7)
!52 = !DILocation(line: 72, column: 35, scope: !7)
!53 = !DILocation(line: 72, column: 40, scope: !7)
!54 = !DILocation(line: 72, column: 31, scope: !7)
!55 = !DILocation(line: 72, column: 57, scope: !7)
!56 = !DILocation(line: 72, column: 49, scope: !7)
!57 = !DILocation(line: 73, column: 20, scope: !7)
!58 = !DILocation(line: 79, column: 41, scope: !7)
!59 = !DILocation(line: 79, column: 31, scope: !7)
!60 = !DILocation(line: 79, column: 58, scope: !7)
!61 = !DILocation(line: 79, column: 50, scope: !7)
!62 = !DILocation(line: 80, column: 20, scope: !7)
!63 = !DILocation(line: 82, column: 36, scope: !7)
!64 = !DILocation(line: 82, column: 41, scope: !7)
!65 = !DILocation(line: 82, column: 31, scope: !7)
!66 = !DILocation(line: 82, column: 58, scope: !7)
!67 = !DILocation(line: 82, column: 50, scope: !7)
!68 = !DILocation(line: 83, column: 20, scope: !7)
!69 = !DILocation(line: 85, column: 36, scope: !7)
!70 = !DILocation(line: 85, column: 41, scope: !7)
!71 = !DILocation(line: 85, column: 31, scope: !7)
!72 = !DILocation(line: 85, column: 58, scope: !7)
!73 = !DILocation(line: 85, column: 50, scope: !7)
!74 = !DILocation(line: 86, column: 20, scope: !7)
!75 = !DILocation(line: 87, column: 43, scope: !7)
!76 = !DILocation(line: 87, column: 70, scope: !7)
!77 = !DILocation(line: 87, column: 129, scope: !7)
!78 = !DILocation(line: 87, column: 101, scope: !7)
!79 = !DILocation(line: 87, column: 89, scope: !7)
!80 = !DILocation(line: 87, column: 66, scope: !7)
!81 = !DILocation(line: 87, column: 57, scope: !7)
!82 = !DILocation(line: 87, column: 77, scope: !7)
!83 = !DILocation(line: 87, column: 48, scope: !7)
!84 = !DILocation(line: 87, column: 240, scope: !7)
!85 = !DILocation(line: 87, column: 108, scope: !7)
!86 = !DILocation(line: 87, column: 40, scope: !7)
!87 = !DILocation(line: 87, column: 311, scope: !7)
!88 = !DILocation(line: 87, column: 372, scope: !7)
!89 = !DILocation(line: 88, column: 20, scope: !7)
!90 = !DILocation(line: 89, column: 34, scope: !7)
!91 = !DILocation(line: 89, column: 30, scope: !7)
!92 = !DILocation(line: 89, column: 46, scope: !7)
!93 = !DILocation(line: 89, column: 39, scope: !7)
!94 = !DILocation(line: 89, column: 25, scope: !7)
!95 = !DILocation(line: 89, column: 57, scope: !7)
!96 = !DILocation(line: 90, column: 25, scope: !7)
!97 = !DILocation(line: 90, column: 57, scope: !7)
!98 = !DILocation(line: 91, column: 25, scope: !7)
!99 = !DILocation(line: 91, column: 57, scope: !7)
!100 = !DILocation(line: 92, column: 25, scope: !7)
!101 = !DILocation(line: 92, column: 58, scope: !7)
!102 = !DILocation(line: 92, column: 4, scope: !7)
