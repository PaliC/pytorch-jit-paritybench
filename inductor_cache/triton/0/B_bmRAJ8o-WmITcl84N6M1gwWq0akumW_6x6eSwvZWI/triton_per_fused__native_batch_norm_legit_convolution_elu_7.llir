; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_elu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 63, !dbg !12
  %14 = srem i32 %8, 32, !dbg !13
  %15 = shl i32 %8, 6, !dbg !14
  %16 = or disjoint i32 %15, %13, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %9, i32 0, i1 %9) #5, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = sext i32 %14 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %9) #5, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = fadd float %20, %24, !dbg !20
  %26 = select i1 %9, float %25, float 0.000000e+00, !dbg !21
  %27 = bitcast float %26 to i32, !dbg !22
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 16, i32 31), !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = fadd float %26, %29, !dbg !26
  %31 = bitcast float %30 to i32, !dbg !22
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 8, i32 31), !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = fadd float %30, %33, !dbg !26
  %35 = bitcast float %34 to i32, !dbg !22
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = fadd float %34, %37, !dbg !26
  %39 = bitcast float %38 to i32, !dbg !22
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = fadd float %38, %41, !dbg !26
  %43 = bitcast float %42 to i32, !dbg !22
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = fadd float %42, %45, !dbg !26
  %47 = icmp eq i32 %11, 0, !dbg !22
  %48 = and i32 %12, 1, !dbg !22
  %49 = zext nneg i32 %48 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i64 %49, !dbg !22
  %51 = bitcast float %46 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 %47) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %52 = icmp slt i32 %10, 2, !dbg !22
  %53 = sext i32 %10 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53, !dbg !22
  %55 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %52) #5, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !22
  %58 = bitcast i32 %57 to float, !dbg !22
  %59 = fadd float %56, %58, !dbg !26
  %60 = and i32 %10, 1, !dbg !22
  %61 = icmp eq i32 %60, 0, !dbg !22
  %62 = and i1 %52, %61, !dbg !22
  %63 = bitcast float %59 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %63, i1 %62) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %64 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 6.400000e+01) #5, !dbg !28
  %66 = fsub float %25, %65, !dbg !29
  %67 = fmul float %66, %66, !dbg !30
  %68 = select i1 %9, float %67, float 0.000000e+00, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %69 = bitcast float %68 to i32, !dbg !32
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = fadd float %68, %71, !dbg !34
  %73 = bitcast float %72 to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %72, %75, !dbg !34
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !34
  %81 = bitcast float %80 to i32, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %80, %83, !dbg !34
  %85 = bitcast float %84 to i32, !dbg !32
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = fadd float %84, %87, !dbg !34
  %89 = bitcast float %88 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %89, i1 %47) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %52) #5, !dbg !32
  %91 = bitcast i32 %90 to float, !dbg !32
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !32
  %93 = bitcast i32 %92 to float, !dbg !32
  %94 = fadd float %91, %93, !dbg !34
  %95 = bitcast float %94 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %95, i1 %62) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %96 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 6.400000e+01) #5, !dbg !35
  %98 = fadd float %97, 0x3EE4F8B580000000, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %99, 0, !dbg !37
  br i1 %.not.i, label %102, label %100, !dbg !37

100:                                              ; preds = %7
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

102:                                              ; preds = %7
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %100, %102
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], !dbg !37
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i1 = icmp eq i32 %104, 0, !dbg !37
  br i1 %.not.i1, label %107, label %105, !dbg !37

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

__nv_rsqrtf.exit3:                                ; preds = %105, %107
  %.0.i2 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !37
  %109 = fmul float %66, %.0.i2, !dbg !38
  %110 = fmul float %109, 0x3FF7154760000000, !dbg !39
  %111 = tail call float @llvm.nvvm.round.f(float %110) #5, !dbg !39
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i4 = icmp eq i32 %112, 0, !dbg !39
  %113 = tail call float @llvm.nvvm.fabs.ftz.f(float %109) #5, !dbg !39
  %114 = tail call float @llvm.nvvm.fabs.f(float %109) #5, !dbg !39
  %.03.i = select i1 %.not.i4, float %114, float %113, !dbg !39
  %115 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !39
  %t.0.i = select i1 %115, float 0.000000e+00, float %111, !dbg !39
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %118 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !39
  %j.0.i = select i1 %118, float 1.270000e+02, float %t.0.i, !dbg !39
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not8.i = icmp eq i32 %124, 0, !dbg !39
  br i1 %.not8.i, label %127, label %125, !dbg !39

125:                                              ; preds = %__nv_rsqrtf.exit3
  %126 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #5, !dbg !39
  br label %__nv_expm1f.exit, !dbg !39

127:                                              ; preds = %__nv_rsqrtf.exit3
  %128 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #5, !dbg !39
  br label %__nv_expm1f.exit, !dbg !39

__nv_expm1f.exit:                                 ; preds = %125, %127
  %.0.i5 = phi float [ %126, %125 ], [ %128, %127 ], !dbg !39
  %129 = fcmp ogt float %109, 0.000000e+00, !dbg !40
  %.not7.i = icmp eq i32 %123, 0, !dbg !39
  %.not6.i = icmp eq i32 %122, 0, !dbg !39
  %.not5.i = icmp eq i32 %121, 0, !dbg !39
  %.not4.i = icmp eq i32 %120, 0, !dbg !39
  %.not3.i = icmp eq i32 %119, 0, !dbg !39
  %.not2.i = icmp eq i32 %117, 0, !dbg !39
  %130 = fneg float %t.0.i, !dbg !39
  %.not1.i = icmp eq i32 %116, 0, !dbg !39
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %130, float 0x3FE62E4000000000, float %109) #5, !dbg !39
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %130, float 0x3FE62E4000000000, float %109) #5, !dbg !39
  %.04.i = select i1 %.not1.i, float %131, float %132, !dbg !39
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %130, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !39
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %130, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !39
  %.05.i = select i1 %.not2.i, float %133, float %134, !dbg !39
  %135 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !39
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !39
  %.07.i = select i1 %.not3.i, float %135, float %136, !dbg !39
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !39
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !39
  %.08.i = select i1 %.not4.i, float %137, float %138, !dbg !39
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !39
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !39
  %.09.i = select i1 %.not5.i, float %139, float %140, !dbg !39
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !39
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !39
  %.06.i = select i1 %.not6.i, float %141, float %142, !dbg !39
  %143 = fmul float %.05.i, %.06.i, !dbg !39
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %143, float %.05.i, float %.05.i) #5, !dbg !39
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %143, float %.05.i, float %.05.i) #5, !dbg !39
  %.01.i = select i1 %.not7.i, float %144, float %145, !dbg !39
  %146 = fadd float %.0.i5, -1.000000e+00, !dbg !39
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not9.i = icmp eq i32 %147, 0, !dbg !39
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i5, float %146) #5, !dbg !39
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i5, float %146) #5, !dbg !39
  %.02.i = select i1 %.not9.i, float %149, float %148, !dbg !39
  %150 = fadd float %.02.i, %.02.i, !dbg !39
  %u.0.i = select i1 %118, float %150, float %.02.i, !dbg !39
  %151 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !39
  %u.1.i = select i1 %151, float 0x7FF0000000000000, float %u.0.i, !dbg !39
  %152 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !39
  %u.2.i = select i1 %152, float -1.000000e+00, float %u.1.i, !dbg !39
  %153 = fcmp oeq float %109, 0.000000e+00, !dbg !39
  %154 = fadd float %109, %109, !dbg !39
  %u.3.i = select i1 %153, float %154, float %u.2.i, !dbg !39
  %155 = select i1 %129, float %109, float %u.3.i, !dbg !41
  %156 = bitcast float %25 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %18, i1 %9) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %157 = sext i32 %8 to i64, !dbg !44
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !44
  %159 = icmp eq i32 %13, 0, !dbg !45
  %160 = bitcast float %.0.i to i32, !dbg !45
  %161 = and i1 %159, %9, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %158, i1 %161) #5, !dbg !45
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !46
  %163 = bitcast float %155 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %162, i1 %9) #5, !dbg !47
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !48
  %165 = bitcast float %65 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %164, i1 %161) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cstfuc7xoddti5sdjdtknsadujzkwuksuc3ls3akoqnxsxpam5yt.py", directory: "inductor_cache/st")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_elu_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_elu_7, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_elu_7", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_elu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 38, column: 33, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 39, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 42, column: 19, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 35, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 47, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 51, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 28, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 28, scope: !7)
!40 = !DILocation(line: 56, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 35, scope: !7)
!42 = !DILocation(line: 62, column: 47, scope: !7)
!43 = !DILocation(line: 63, column: 4, scope: !7)
!44 = !DILocation(line: 64, column: 28, scope: !7)
!45 = !DILocation(line: 64, column: 40, scope: !7)
!46 = !DILocation(line: 65, column: 25, scope: !7)
!47 = !DILocation(line: 65, column: 45, scope: !7)
!48 = !DILocation(line: 66, column: 25, scope: !7)
!49 = !DILocation(line: 66, column: 37, scope: !7)
!50 = !DILocation(line: 66, column: 4, scope: !7)
