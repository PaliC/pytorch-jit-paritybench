; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 127, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = or disjoint i32 %12, 128, !dbg !15
  %14 = or disjoint i32 %12, 256, !dbg !15
  %15 = or disjoint i32 %12, 384, !dbg !15
  %16 = or disjoint i32 %12, 512, !dbg !15
  %17 = or disjoint i32 %12, 640, !dbg !15
  %18 = or disjoint i32 %12, 768, !dbg !15
  %19 = or disjoint i32 %12, 896, !dbg !15
  %20 = icmp slt i32 %12, 961, !dbg !16
  %21 = icmp slt i32 %13, 961, !dbg !16
  %22 = icmp slt i32 %14, 961, !dbg !16
  %23 = icmp slt i32 %15, 961, !dbg !16
  %24 = icmp slt i32 %16, 961, !dbg !16
  %25 = icmp slt i32 %17, 961, !dbg !16
  %26 = icmp slt i32 %18, 961, !dbg !16
  %27 = icmp slt i32 %19, 961, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %28 = sdiv i32 %.frozen, 64, !dbg !17
  %29 = mul i32 %28, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = shl i32 %12, 6, !dbg !19
  %31 = shl i32 %13, 6, !dbg !19
  %32 = shl i32 %14, 6, !dbg !19
  %33 = shl i32 %15, 6, !dbg !19
  %34 = shl i32 %16, 6, !dbg !19
  %35 = shl i32 %17, 6, !dbg !19
  %36 = shl i32 %18, 6, !dbg !19
  %37 = shl i32 %19, 6, !dbg !19
  %38 = mul i32 %28, 61504, !dbg !20
  %39 = add i32 %38, %.decomposed, !dbg !21
  %40 = add i32 %39, %30, !dbg !22
  %41 = add i32 %39, %31, !dbg !22
  %42 = add i32 %39, %32, !dbg !22
  %43 = add i32 %39, %33, !dbg !22
  %44 = add i32 %39, %34, !dbg !22
  %45 = add i32 %39, %35, !dbg !22
  %46 = add i32 %39, %36, !dbg !22
  %47 = add i32 %39, %37, !dbg !22
  %48 = sext i32 %40 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %41 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %42 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %43 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %44 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %45 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %46 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %47 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = and i1 %7, %20, !dbg !24
  %65 = and i1 %21, %7, !dbg !24
  %66 = and i1 %22, %7, !dbg !24
  %67 = and i1 %23, %7, !dbg !24
  %68 = and i1 %24, %7, !dbg !24
  %69 = and i1 %25, %7, !dbg !24
  %70 = and i1 %26, %7, !dbg !24
  %71 = and i1 %27, %7, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %64) #1, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %65) #1, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %66) #1, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %67) #1, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %68) #1, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %69) #1, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %70) #1, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %71) #1, !dbg !25
  %80 = sext i32 %.decomposed to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %7) #1, !dbg !27
  %83 = insertelement <8 x i32> poison, i32 %79, i64 0, !dbg !25
  %84 = insertelement <8 x i32> %83, i32 %78, i64 1, !dbg !25
  %85 = insertelement <8 x i32> %84, i32 %77, i64 2, !dbg !25
  %86 = insertelement <8 x i32> %85, i32 %76, i64 3, !dbg !25
  %87 = insertelement <8 x i32> %86, i32 %75, i64 4, !dbg !25
  %88 = insertelement <8 x i32> %87, i32 %74, i64 5, !dbg !25
  %89 = insertelement <8 x i32> %88, i32 %73, i64 6, !dbg !25
  %90 = insertelement <8 x i32> %89, i32 %72, i64 7, !dbg !25
  %91 = bitcast <8 x i32> %90 to <8 x float>, !dbg !25
  %92 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !28
  %93 = bitcast <8 x i32> %92 to <8 x float>, !dbg !28
  %94 = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !28
  %95 = fadd <8 x float> %94, %91, !dbg !28
  %96 = fcmp olt <8 x float> %95, zeroinitializer, !dbg !29
  %97 = extractelement <8 x i1> %96, i64 7, !dbg !33
  %98 = extractelement <8 x i1> %96, i64 6, !dbg !33
  %99 = extractelement <8 x i1> %96, i64 5, !dbg !33
  %100 = extractelement <8 x i1> %96, i64 4, !dbg !33
  %101 = extractelement <8 x i1> %96, i64 3, !dbg !33
  %102 = extractelement <8 x i1> %96, i64 2, !dbg !33
  %103 = extractelement <8 x i1> %96, i64 1, !dbg !33
  %104 = extractelement <8 x i1> %96, i64 0, !dbg !33
  %105 = mul i32 %6, 961, !dbg !34
  %106 = add i32 %12, %105, !dbg !35
  %107 = add i32 %105, %13, !dbg !35
  %108 = add i32 %105, %14, !dbg !35
  %109 = add i32 %105, %15, !dbg !35
  %110 = add i32 %105, %16, !dbg !35
  %111 = add i32 %105, %17, !dbg !35
  %112 = add i32 %105, %18, !dbg !35
  %113 = add i32 %105, %19, !dbg !35
  %114 = sext i32 %106 to i64, !dbg !36
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !36
  %116 = sext i32 %107 to i64, !dbg !36
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !36
  %118 = sext i32 %108 to i64, !dbg !36
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !36
  %120 = sext i32 %109 to i64, !dbg !36
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !36
  %122 = sext i32 %110 to i64, !dbg !36
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !36
  %124 = sext i32 %111 to i64, !dbg !36
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !36
  %126 = sext i32 %112 to i64, !dbg !36
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !36
  %128 = sext i32 %113 to i64, !dbg !36
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !36
  %bc = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %130 = extractelement <8 x i32> %bc, i64 7, !dbg !37
  %131 = select i1 %97, i32 0, i32 %130, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %115, i1 %64) #1, !dbg !37
  %bc1 = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %132 = extractelement <8 x i32> %bc1, i64 6, !dbg !37
  %133 = select i1 %98, i32 0, i32 %132, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %117, i1 %65) #1, !dbg !37
  %bc2 = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %134 = extractelement <8 x i32> %bc2, i64 5, !dbg !37
  %135 = select i1 %99, i32 0, i32 %134, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %119, i1 %66) #1, !dbg !37
  %bc3 = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %136 = extractelement <8 x i32> %bc3, i64 4, !dbg !37
  %137 = select i1 %100, i32 0, i32 %136, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %121, i1 %67) #1, !dbg !37
  %bc4 = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %138 = extractelement <8 x i32> %bc4, i64 3, !dbg !37
  %139 = select i1 %101, i32 0, i32 %138, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %123, i1 %68) #1, !dbg !37
  %bc5 = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %140 = extractelement <8 x i32> %bc5, i64 2, !dbg !37
  %141 = select i1 %102, i32 0, i32 %140, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %125, i1 %69) #1, !dbg !37
  %bc6 = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %142 = extractelement <8 x i32> %bc6, i64 1, !dbg !37
  %143 = select i1 %103, i32 0, i32 %142, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %127, i1 %70) #1, !dbg !37
  %bc7 = bitcast <8 x float> %95 to <8 x i32>, !dbg !37
  %144 = extractelement <8 x i32> %bc7, i64 0, !dbg !37
  %145 = select i1 %104, i32 0, i32 %144, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %129, i1 %71) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cstaarsnbemu4daenwrw2iv3lbe5sphuamdxrw5evpkjhyzh5pvz.py", directory: "inductor_cache/st")
!4 = !{ptr @triton_poi_fused_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_2", linkageName: "triton_poi_fused_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 62, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 34, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 45, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
