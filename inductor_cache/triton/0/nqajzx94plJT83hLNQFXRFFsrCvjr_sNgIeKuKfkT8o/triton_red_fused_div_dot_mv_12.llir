; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_div_dot_mv_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = shl i32 %7, 2, !dbg !10
  %10 = and i32 %9, 2044, !dbg !10
  %11 = zext nneg i32 %10 to i64, !dbg !11
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !12
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %12, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !13
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !13
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %24 = or disjoint i64 %11, 2048, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !12
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !13
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !13
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !13
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !13
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !14
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !15
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !15
  %37 = or disjoint i64 %11, 4096, !dbg !16
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !12
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !13
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !13
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !13
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !13
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !14
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !15
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !15
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !15
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !15
  %50 = or disjoint i64 %11, 6144, !dbg !16
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !12
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !13
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !13
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !13
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !13
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !14
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !15
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !15
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !15
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !15
  %63 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !13
  %64 = insertelement <2 x i32> %63, i32 %15, i64 1, !dbg !13
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !13
  %66 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !15
  %67 = insertelement <2 x i32> %66, i32 %21, i64 1, !dbg !15
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !15
  %69 = fmul <2 x float> %65, %68, !dbg !17
  %70 = fadd <2 x float> %69, zeroinitializer, !dbg !18
  %71 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !13
  %72 = insertelement <2 x i32> %71, i32 %28, i64 1, !dbg !13
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !13
  %74 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !15
  %75 = insertelement <2 x i32> %74, i32 %34, i64 1, !dbg !15
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !15
  %77 = fmul <2 x float> %73, %76, !dbg !17
  %78 = fadd <2 x float> %70, %77, !dbg !18
  %79 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !13
  %80 = insertelement <2 x i32> %79, i32 %41, i64 1, !dbg !13
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !13
  %82 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !15
  %83 = insertelement <2 x i32> %82, i32 %47, i64 1, !dbg !15
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !15
  %85 = fmul <2 x float> %81, %84, !dbg !17
  %86 = fadd <2 x float> %78, %85, !dbg !18
  %87 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !13
  %88 = insertelement <2 x i32> %87, i32 %54, i64 1, !dbg !13
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !13
  %90 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !15
  %91 = insertelement <2 x i32> %90, i32 %60, i64 1, !dbg !15
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !15
  %93 = fmul <2 x float> %89, %92, !dbg !17
  %94 = fadd <2 x float> %86, %93, !dbg !18
  %95 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !13
  %96 = insertelement <2 x i32> %95, i32 %16, i64 1, !dbg !13
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !13
  %98 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %99 = insertelement <2 x i32> %98, i32 %22, i64 1, !dbg !15
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !15
  %101 = fmul <2 x float> %97, %100, !dbg !17
  %102 = fadd <2 x float> %101, zeroinitializer, !dbg !18
  %103 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !13
  %104 = insertelement <2 x i32> %103, i32 %29, i64 1, !dbg !13
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !13
  %106 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !15
  %107 = insertelement <2 x i32> %106, i32 %35, i64 1, !dbg !15
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !15
  %109 = fmul <2 x float> %105, %108, !dbg !17
  %110 = fadd <2 x float> %102, %109, !dbg !18
  %111 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !13
  %112 = insertelement <2 x i32> %111, i32 %42, i64 1, !dbg !13
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !13
  %114 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !15
  %115 = insertelement <2 x i32> %114, i32 %48, i64 1, !dbg !15
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !15
  %117 = fmul <2 x float> %113, %116, !dbg !17
  %118 = fadd <2 x float> %110, %117, !dbg !18
  %119 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !13
  %120 = insertelement <2 x i32> %119, i32 %55, i64 1, !dbg !13
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !13
  %122 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !15
  %123 = insertelement <2 x i32> %122, i32 %61, i64 1, !dbg !15
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !15
  %125 = fmul <2 x float> %121, %124, !dbg !17
  %126 = fadd <2 x float> %118, %125, !dbg !18
  %127 = lshr i32 %7, 5, !dbg !10
  %shift = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %128 = fadd <2 x float> %94, %shift, !dbg !19
  %shift5 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %129 = fadd <2 x float> %shift5, %128, !dbg !19
  %130 = fadd <2 x float> %126, %129, !dbg !19
  %131 = extractelement <2 x float> %130, i64 0, !dbg !19
  %132 = bitcast float %131 to i32, !dbg !24
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !24
  %134 = bitcast i32 %133 to float, !dbg !24
  %135 = fadd float %131, %134, !dbg !19
  %136 = bitcast float %135 to i32, !dbg !24
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !24
  %138 = bitcast i32 %137 to float, !dbg !24
  %139 = fadd float %135, %138, !dbg !19
  %140 = bitcast float %139 to i32, !dbg !24
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 4, i32 31), !dbg !24
  %142 = bitcast i32 %141 to float, !dbg !24
  %143 = fadd float %139, %142, !dbg !19
  %144 = bitcast float %143 to i32, !dbg !24
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !24
  %146 = bitcast i32 %145 to float, !dbg !24
  %147 = fadd float %143, %146, !dbg !19
  %148 = bitcast float %147 to i32, !dbg !24
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !24
  %150 = bitcast i32 %149 to float, !dbg !24
  %151 = fadd float %147, %150, !dbg !19
  %152 = icmp eq i32 %8, 0, !dbg !24
  %153 = and i32 %127, 15, !dbg !24
  %154 = zext nneg i32 %153 to i64, !dbg !24
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i64 %154, !dbg !24
  %156 = bitcast float %151 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 %152) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %157 = icmp slt i32 %7, 16, !dbg !24
  %158 = sext i32 %7 to i64, !dbg !24
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i64 %158, !dbg !24
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %157) #3, !dbg !24
  %161 = bitcast i32 %160 to float, !dbg !24
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !24
  %163 = bitcast i32 %162 to float, !dbg !24
  %164 = fadd float %161, %163, !dbg !19
  %165 = bitcast float %164 to i32, !dbg !24
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !24
  %167 = bitcast i32 %166 to float, !dbg !24
  %168 = fadd float %164, %167, !dbg !19
  %169 = bitcast float %168 to i32, !dbg !24
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !24
  %171 = bitcast i32 %170 to float, !dbg !24
  %172 = fadd float %168, %171, !dbg !19
  %173 = bitcast float %172 to i32, !dbg !24
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !24
  %175 = bitcast i32 %174 to float, !dbg !24
  %176 = fadd float %172, %175, !dbg !19
  %177 = and i32 %7, 15, !dbg !24
  %178 = icmp eq i32 %177, 0, !dbg !24
  %179 = and i1 %157, %178, !dbg !24
  %180 = bitcast float %176 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %180, i1 %179) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %181 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !25
  %183 = bitcast i32 %182 to float, !dbg !25
  %184 = fmul float %181, %183, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %urem = and i32 %7, 511, !dbg !28
  %185 = icmp eq i32 %urem, 0, !dbg !28
  %186 = bitcast float %184 to i32, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %0, i1 %185) #3, !dbg !28
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %12, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !29
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !29
  %192 = bitcast i32 %188 to float, !dbg !29
  %193 = bitcast i32 %189 to float, !dbg !29
  %194 = bitcast i32 %190 to float, !dbg !29
  %195 = bitcast i32 %191 to float, !dbg !29
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %184) #3, !dbg !30
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %184) #3, !dbg !30
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %184) #3, !dbg !30
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %184) #3, !dbg !30
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %11, !dbg !31
  %201 = bitcast float %196 to i32, !dbg !32
  %202 = bitcast float %197 to i32, !dbg !32
  %203 = bitcast float %198 to i32, !dbg !32
  %204 = bitcast float %199 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %200, i1 true) #3, !dbg !32
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !29
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !29
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !29
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !29
  %210 = bitcast i32 %206 to float, !dbg !29
  %211 = bitcast i32 %207 to float, !dbg !29
  %212 = bitcast i32 %208 to float, !dbg !29
  %213 = bitcast i32 %209 to float, !dbg !29
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %184) #3, !dbg !30
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %184) #3, !dbg !30
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %184) #3, !dbg !30
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %184) #3, !dbg !30
  %218 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !31
  %219 = bitcast float %214 to i32, !dbg !32
  %220 = bitcast float %215 to i32, !dbg !32
  %221 = bitcast float %216 to i32, !dbg !32
  %222 = bitcast float %217 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %220, i32 %221, i32 %222, ptr addrspace(1) %218, i1 true) #3, !dbg !32
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !29
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !29
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !29
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !29
  %228 = bitcast i32 %224 to float, !dbg !29
  %229 = bitcast i32 %225 to float, !dbg !29
  %230 = bitcast i32 %226 to float, !dbg !29
  %231 = bitcast i32 %227 to float, !dbg !29
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %184) #3, !dbg !30
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %184) #3, !dbg !30
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %184) #3, !dbg !30
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %184) #3, !dbg !30
  %236 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !31
  %237 = bitcast float %232 to i32, !dbg !32
  %238 = bitcast float %233 to i32, !dbg !32
  %239 = bitcast float %234 to i32, !dbg !32
  %240 = bitcast float %235 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %236, i1 true) #3, !dbg !32
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !29
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !29
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !29
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !29
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !29
  %246 = bitcast i32 %242 to float, !dbg !29
  %247 = bitcast i32 %243 to float, !dbg !29
  %248 = bitcast i32 %244 to float, !dbg !29
  %249 = bitcast i32 %245 to float, !dbg !29
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %184) #3, !dbg !30
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %184) #3, !dbg !30
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %184) #3, !dbg !30
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %184) #3, !dbg !30
  %254 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !31
  %255 = bitcast float %250 to i32, !dbg !32
  %256 = bitcast float %251 to i32, !dbg !32
  %257 = bitcast float %252 to i32, !dbg !32
  %258 = bitcast float %253 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %255, i32 %256, i32 %257, i32 %258, ptr addrspace(1) %254, i1 true) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c55nnjncgaoolydem3lsmgbogctb4jef2kdni3obmn7gridqw7mw.py", directory: "inductor_cache/55")
!4 = !{ptr @triton_red_fused_div_dot_mv_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_div_dot_mv_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_div_dot_mv_12", linkageName: "triton_red_fused_div_dot_mv_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 31, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 28, column: 27, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 35, column: 23, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 37, column: 25, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 38, column: 19, scope: !7)
!26 = !DILocation(line: 40, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 4, scope: !7)
!28 = !DILocation(line: 42, column: 70, scope: !7)
!29 = !DILocation(line: 47, column: 39, scope: !7)
!30 = !DILocation(line: 48, column: 23, scope: !7)
!31 = !DILocation(line: 49, column: 29, scope: !7)
!32 = !DILocation(line: 49, column: 76, scope: !7)
!33 = !DILocation(line: 43, column: 4, scope: !7)
