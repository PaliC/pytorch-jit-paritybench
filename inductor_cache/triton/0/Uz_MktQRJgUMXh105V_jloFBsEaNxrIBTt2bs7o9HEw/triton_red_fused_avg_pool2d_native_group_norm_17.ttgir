#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0)
#loc1 = loc(unknown)
#loc60 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":54:44)
#loc95 = loc(callsite(#loc1 at #loc60))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_avg_pool2d_native_group_norm_17(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.500000e-01> : tensor<64x4xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5.120000e+02> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<64x1xf32, #blocked> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_4 = arith.constant dense<512> : tensor<1x4xi32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<128> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<512> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<8> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<2> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<32> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<2048> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<1> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<16> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<17> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<512> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<1.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_5 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_6 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x4xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %8, %cst_11 : tensor<64x1xi32, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<64x1xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc9)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc10)
    %19 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc11)
    %20 = tt.broadcast %11 : tensor<64x1xi1, #blocked1> -> tensor<64x4xi1, #blocked1> loc(#loc11)
    %21 = arith.muli %9, %cst_15 : tensor<64x1xi32, #blocked1> loc(#loc12)
    %22 = tt.broadcast %21 : tensor<64x1xi32, #blocked1> -> tensor<64x4xi32, #blocked1> loc(#loc13)
    %23 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x4x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %24:3 = scf.for %arg7 = %c0_i32 to %c512_i32 step %c4_i32 iter_args(%arg8 = %cst, %arg9 = %cst, %arg10 = %cst) -> (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>)  : i32 {
      %37 = tt.splat %arg7 : i32 -> tensor<1x4xi32, #blocked> loc(#loc16)
      %38 = tt.splat %arg7 : i32 -> tensor<1x4xi32, #blocked1> loc(#loc16)
      %39 = arith.addi %37, %14 : tensor<1x4xi32, #blocked> loc(#loc16)
      %40 = arith.addi %38, %15 : tensor<1x4xi32, #blocked1> loc(#loc16)
      %41 = arith.cmpi slt, %39, %cst_7 : tensor<1x4xi32, #blocked> loc(#loc17)
      %42 = arith.cmpi slt, %40, %cst_4 : tensor<1x4xi32, #blocked1> loc(#loc17)
      %43 = arith.remsi %39, %cst_8 : tensor<1x4xi32, #blocked> loc(#loc18)
      %44 = arith.divsi %39, %cst_8 : tensor<1x4xi32, #blocked> loc(#loc19)
      %45 = arith.muli %43, %cst_9 : tensor<1x4xi32, #blocked> loc(#loc20)
      %46 = arith.muli %44, %cst_10 : tensor<1x4xi32, #blocked> loc(#loc21)
      %47 = arith.addi %45, %46 : tensor<1x4xi32, #blocked> loc(#loc22)
      %48 = tt.broadcast %47 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc9)
      %49 = arith.addi %48, %17 : tensor<64x4xi32, #blocked> loc(#loc9)
      %50 = tt.addptr %18, %49 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc10)
      %51 = tt.broadcast %41 : tensor<1x4xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc11)
      %52 = tt.broadcast %42 : tensor<1x4xi1, #blocked1> -> tensor<64x4xi1, #blocked1> loc(#loc11)
      %53 = arith.andi %51, %19 : tensor<64x4xi1, #blocked> loc(#loc11)
      %54 = arith.andi %52, %20 : tensor<64x4xi1, #blocked1> loc(#loc11)
      %55 = tt.load %50, %53, %cst evictionPolicy = evict_last : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc23)
      %56 = arith.addi %45, %cst_12 : tensor<1x4xi32, #blocked> loc(#loc24)
      %57 = arith.addi %56, %46 : tensor<1x4xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc26)
      %59 = arith.addi %58, %17 : tensor<64x4xi32, #blocked> loc(#loc26)
      %60 = tt.addptr %18, %59 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc27)
      %61 = tt.load %60, %53, %cst evictionPolicy = evict_last : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc28)
      %62 = arith.addi %45, %cst_13 : tensor<1x4xi32, #blocked> loc(#loc29)
      %63 = arith.addi %62, %46 : tensor<1x4xi32, #blocked> loc(#loc30)
      %64 = tt.broadcast %63 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc31)
      %65 = arith.addi %64, %17 : tensor<64x4xi32, #blocked> loc(#loc31)
      %66 = tt.addptr %18, %65 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc32)
      %67 = tt.load %66, %53, %cst evictionPolicy = evict_last : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc33)
      %68 = arith.addi %45, %cst_14 : tensor<1x4xi32, #blocked> loc(#loc34)
      %69 = arith.addi %68, %46 : tensor<1x4xi32, #blocked> loc(#loc35)
      %70 = tt.broadcast %69 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc36)
      %71 = arith.addi %70, %17 : tensor<64x4xi32, #blocked> loc(#loc36)
      %72 = tt.addptr %18, %71 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc37)
      %73 = tt.load %72, %53, %cst evictionPolicy = evict_last : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc38)
      %74 = arith.addf %61, %55 : tensor<64x4xf32, #blocked> loc(#loc39)
      %75 = arith.addf %67, %74 : tensor<64x4xf32, #blocked> loc(#loc40)
      %76 = arith.addf %73, %75 : tensor<64x4xf32, #blocked> loc(#loc41)
      %77 = arith.mulf %76, %cst_0 : tensor<64x4xf32, #blocked> loc(#loc42)
      %78 = arith.cmpi eq, %arg7, %c0_i32 : i32 loc(#loc43)
      %79:3 = scf.if %78 -> (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>) {
        scf.yield %cst, %77, %cst_16 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc86)
      } else {
        %87 = arith.subf %77, %arg8 : tensor<64x4xf32, #blocked> loc(#loc87)
        %88 = arith.addf %arg10, %cst_16 : tensor<64x4xf32, #blocked> loc(#loc88)
        %89 = arith.divf %87, %88 : tensor<64x4xf32, #blocked> loc(#loc89)
        %90 = arith.addf %arg8, %89 : tensor<64x4xf32, #blocked> loc(#loc90)
        %91 = arith.subf %77, %90 : tensor<64x4xf32, #blocked> loc(#loc91)
        %92 = arith.mulf %87, %91 : tensor<64x4xf32, #blocked> loc(#loc92)
        %93 = arith.addf %arg9, %92 : tensor<64x4xf32, #blocked> loc(#loc93)
        scf.yield %93, %90, %88 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc93)
      } loc(#loc85)
      %80 = arith.select %53, %79#1, %arg8 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc54)
      %81 = arith.select %53, %79#0, %arg9 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc55)
      %82 = arith.select %53, %79#2, %arg10 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc56)
      %83 = tt.broadcast %40 : tensor<1x4xi32, #blocked1> -> tensor<64x4xi32, #blocked1> loc(#loc13)
      %84 = arith.addi %83, %22 : tensor<64x4xi32, #blocked1> loc(#loc13)
      %85 = tt.addptr %23, %84 : tensor<64x4x!tt.ptr<f32>, #blocked1>, tensor<64x4xi32, #blocked1> loc(#loc14)
      %86 = triton_gpu.convert_layout %77 : tensor<64x4xf32, #blocked> -> tensor<64x4xf32, #blocked1> loc(#loc57)
      tt.store %85, %86, %54 : tensor<64x4x!tt.ptr<f32>, #blocked1> loc(#loc57)
      scf.yield %80, %81, %82 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc58)
    } loc(#loc15)
    %25:3 = "tt.reduce"(%24#0, %24#1, %24#2) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc60)), %arg8: f32 loc(callsite(#loc1 at #loc60)), %arg9: f32 loc(callsite(#loc1 at #loc60)), %arg10: f32 loc(callsite(#loc1 at #loc60)), %arg11: f32 loc(callsite(#loc1 at #loc60)), %arg12: f32 loc(callsite(#loc1 at #loc60))):
      %37 = arith.subf %arg10, %arg7 : f32 loc(#loc108)
      %38 = arith.addf %arg9, %arg12 : f32 loc(#loc109)
      %39 = arith.cmpf oeq, %38, %cst_3 : f32 loc(#loc110)
      %40 = arith.divf %arg12, %38 : f32 loc(#loc111)
      %41 = arith.select %39, %cst_3, %40 : f32 loc(#loc112)
      %42 = arith.mulf %37, %41 : f32 loc(#loc113)
      %43 = arith.addf %arg7, %42 : f32 loc(#loc114)
      %44 = arith.addf %arg8, %arg11 : f32 loc(#loc115)
      %45 = arith.mulf %37, %37 : f32 loc(#loc116)
      %46 = arith.mulf %45, %arg9 : f32 loc(#loc117)
      %47 = arith.mulf %46, %41 : f32 loc(#loc118)
      %48 = arith.addf %44, %47 : f32 loc(#loc119)
      tt.reduce.return %43, %48, %38 : f32, f32, f32 loc(#loc94)
    }) : (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc94)
    %26 = tt.expand_dims %25#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc73)
    %27 = tt.expand_dims %25#1 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc74)
    %28 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc75)
    %29 = tt.addptr %28, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc75)
    tt.store %29, %26, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc76)
    %30 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc77)
    %31 = tt.addptr %30, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc77)
    tt.store %31, %27, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc78)
    %32 = arith.divf %27, %cst_1 : tensor<64x1xf32, #blocked> loc(#loc79)
    %33 = arith.addf %32, %cst_2 : tensor<64x1xf32, #blocked> loc(#loc80)
    %34 = tt.extern_elementwise %33 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32, #blocked>) -> tensor<64x1xf32, #blocked> loc(#loc81)
    %35 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc82)
    %36 = tt.addptr %35, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc82)
    tt.store %36, %34, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc83)
    tt.return loc(#loc84)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":22:28)
#loc3 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":22:33)
#loc4 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":23:44)
#loc5 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":23:23)
#loc6 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":24:21)
#loc7 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":25:33)
#loc8 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:54)
#loc9 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:49)
#loc10 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:34)
#loc11 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:67)
#loc12 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":52:38)
#loc13 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":52:34)
#loc14 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":52:29)
#loc15 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":30:36)
#loc16 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":31:27)
#loc17 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":32:25)
#loc18 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":33:23)
#loc19 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":34:23)
#loc20 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:36)
#loc21 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:44)
#loc22 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:41)
#loc23 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":36:59)
#loc24 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":37:38)
#loc25 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":37:45)
#loc26 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":37:53)
#loc27 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":37:34)
#loc28 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":37:63)
#loc29 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":38:39)
#loc30 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":38:46)
#loc31 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":38:54)
#loc32 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":38:34)
#loc33 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":38:64)
#loc34 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":39:39)
#loc35 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":39:46)
#loc36 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":39:54)
#loc37 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":39:34)
#loc38 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":39:64)
#loc39 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":40:22)
#loc40 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":41:22)
#loc41 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":42:22)
#loc42 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":44:22)
#loc43 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":47:65)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc45 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":47:54)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc54 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":49:62)
#loc55 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":50:58)
#loc56 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":51:66)
#loc57 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":52:49)
#loc58 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":52:8)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc67 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc69 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc70 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc71 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc73 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":56:22)
#loc74 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":57:22)
#loc75 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":59:25)
#loc76 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":59:37)
#loc77 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":60:25)
#loc78 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":60:37)
#loc79 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":62:20)
#loc80 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":64:20)
#loc81 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":65:28)
#loc82 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":66:25)
#loc83 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":66:37)
#loc84 = loc("inductor_cache/m3/cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py":66:4)
#loc85 = loc(callsite(#loc44 at #loc45))
#loc86 = loc(callsite(#loc46 at #loc45))
#loc87 = loc(callsite(#loc47 at #loc45))
#loc88 = loc(callsite(#loc48 at #loc45))
#loc89 = loc(callsite(#loc49 at #loc45))
#loc90 = loc(callsite(#loc50 at #loc45))
#loc91 = loc(callsite(#loc51 at #loc45))
#loc92 = loc(callsite(#loc52 at #loc45))
#loc93 = loc(callsite(#loc53 at #loc45))
#loc94 = loc(callsite(#loc59 at #loc60))
#loc96 = loc(callsite(#loc61 at #loc59))
#loc97 = loc(callsite(#loc62 at #loc59))
#loc98 = loc(callsite(#loc63 at #loc59))
#loc99 = loc(callsite(#loc64 at #loc59))
#loc100 = loc(callsite(#loc65 at #loc59))
#loc101 = loc(callsite(#loc66 at #loc59))
#loc102 = loc(callsite(#loc67 at #loc59))
#loc103 = loc(callsite(#loc68 at #loc59))
#loc104 = loc(callsite(#loc69 at #loc59))
#loc105 = loc(callsite(#loc70 at #loc59))
#loc106 = loc(callsite(#loc71 at #loc59))
#loc107 = loc(callsite(#loc72 at #loc59))
#loc108 = loc(callsite(#loc96 at #loc60))
#loc109 = loc(callsite(#loc97 at #loc60))
#loc110 = loc(callsite(#loc98 at #loc60))
#loc111 = loc(callsite(#loc99 at #loc60))
#loc112 = loc(callsite(#loc100 at #loc60))
#loc113 = loc(callsite(#loc101 at #loc60))
#loc114 = loc(callsite(#loc102 at #loc60))
#loc115 = loc(callsite(#loc103 at #loc60))
#loc116 = loc(callsite(#loc104 at #loc60))
#loc117 = loc(callsite(#loc105 at #loc60))
#loc118 = loc(callsite(#loc106 at #loc60))
#loc119 = loc(callsite(#loc107 at #loc60))
