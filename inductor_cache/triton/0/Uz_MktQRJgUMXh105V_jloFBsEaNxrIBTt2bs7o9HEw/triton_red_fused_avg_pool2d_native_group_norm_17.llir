; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = and i32 %9, 63, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 128, !dbg !14
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = lshr i32 %9, 6, !dbg !15
  %19 = shl i32 %14, 11, !dbg !16
  %20 = shl i32 %15, 9, !dbg !17
  %21 = and i32 %18, 3
  %22 = or disjoint i32 %20, %10
  %23 = shl i32 %9, 2
  %24 = and i32 %23, 252
  %.reass = or disjoint i32 %24, %21
  %25 = and i32 %9, 255
  %26 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %24
  %27 = getelementptr float, ptr addrspace(3) %26, i32 %.reass
  %28 = lshr i32 %25, 2
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %28
  %30 = getelementptr inbounds float, ptr addrspace(3) %29, i32 %25
  %31 = sext i32 %22 to i64, !dbg !18
  %32 = shl nuw nsw i32 %21, 1, !dbg !19
  %33 = or disjoint i32 %32, %19, !dbg !20
  %34 = sext i32 %33 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %37 = or disjoint i32 %33, 1, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %16, i32 0, i1 %16) #5, !dbg !25
  %41 = or disjoint i32 %33, 16, !dbg !26
  %42 = sext i32 %41 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %16, i32 0, i1 %16) #5, !dbg !28
  %45 = or disjoint i32 %33, 17, !dbg !29
  %46 = sext i32 %45 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %16, i32 0, i1 %16) #5, !dbg !31
  %49 = bitcast i32 %36 to float, !dbg !22
  %50 = bitcast i32 %40 to float, !dbg !25
  %51 = fadd float %49, %50, !dbg !32
  %52 = bitcast i32 %44 to float, !dbg !28
  %53 = fadd float %51, %52, !dbg !33
  %54 = bitcast i32 %48 to float, !dbg !31
  %55 = fadd float %53, %54, !dbg !34
  %56 = fmul float %55, 2.500000e-01, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %58 = bitcast float %56 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %58, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %59 = load i32, ptr addrspace(3) %30, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %59, ptr addrspace(1) %57, i1 %17) #5, !dbg !37
  %60 = select i1 %16, float 1.000000e+00, float 0.000000e+00, !dbg !38
  %61 = select i1 %16, float %56, float 0.000000e+00, !dbg !39
  %invariant.op = or disjoint i32 %19, 1, !dbg !18
  %invariant.op14 = or disjoint i32 %19, 16, !dbg !18
  %invariant.op16 = or disjoint i32 %19, 17, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  br label %62, !dbg !18

62:                                               ; preds = %.peel.next, %62
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %62 ]
  %63 = phi float [ %60, %.peel.next ], [ %103, %62 ]
  %64 = phi float [ 0.000000e+00, %.peel.next ], [ %102, %62 ]
  %65 = phi float [ %61, %.peel.next ], [ %101, %62 ]
  %66 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !40
  %.masked = and i32 %66, 4, !dbg !40
  %67 = or disjoint i32 %21, %.masked, !dbg !40
  %68 = shl nuw nsw i32 %67, 1, !dbg !19
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !41
  %69 = shl nuw nsw i32 %indvars.iv.tr, 2, !dbg !41
  %70 = and i32 %69, 2016, !dbg !41
  %71 = or disjoint i32 %68, %70, !dbg !42
  %72 = or disjoint i32 %71, %19, !dbg !20
  %73 = sext i32 %72 to i64, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !21
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %.reass13 = or disjoint i32 %71, %invariant.op
  %77 = sext i32 %.reass13 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %16, i32 0, i1 %16) #5, !dbg !25
  %80 = bitcast i32 %79 to float, !dbg !25
  %81 = or disjoint i32 %68, %69, !dbg !43
  %.reass15 = or i32 %81, %invariant.op14
  %82 = sext i32 %.reass15 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %16, i32 0, i1 %16) #5, !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %.reass17 = or i32 %81, %invariant.op16
  %86 = sext i32 %.reass17 to i64, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %16, i32 0, i1 %16) #5, !dbg !31
  %89 = bitcast i32 %88 to float, !dbg !31
  %90 = fadd float %76, %80, !dbg !32
  %91 = fadd float %90, %85, !dbg !33
  %92 = fadd float %91, %89, !dbg !34
  %93 = fmul float %92, 2.500000e-01, !dbg !35
  %94 = fsub float %93, %65, !dbg !44
  %95 = fadd float %63, 1.000000e+00, !dbg !48
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %95) #5, !dbg !49
  %97 = fadd float %65, %96, !dbg !50
  %98 = fsub float %93, %97, !dbg !51
  %99 = fmul float %94, %98, !dbg !52
  %100 = fadd float %64, %99, !dbg !53
  %101 = select i1 %16, float %97, float %65, !dbg !39
  %102 = select i1 %16, float %100, float %64, !dbg !54
  %103 = select i1 %16, float %95, float %63, !dbg !38
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %104 = bitcast float %93 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %104, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %105 = load i32, ptr addrspace(3) %30, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %gep, i1 %17) #5, !dbg !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !18
  %106 = icmp samesign ult i64 %indvars.iv, 508, !dbg !18
  br i1 %106, label %62, label %.loopexit, !dbg !18, !llvm.loop !55

.loopexit:                                        ; preds = %62
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %107 = shl nuw nsw i32 %11, 2, !dbg !57
  %108 = or disjoint i32 %107, %21, !dbg !57
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !57
  %110 = bitcast float %101 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #5, !dbg !57
  %111 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %108, !dbg !57
  %112 = bitcast float %102 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #5, !dbg !57
  %113 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %108, !dbg !57
  %114 = bitcast float %103 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %115 = icmp slt i32 %9, 256, !dbg !57
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !57
  %117 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %116, i1 %115) #5, !dbg !57
  %118 = bitcast i32 %117 to float, !dbg !57
  %119 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %9, !dbg !57
  %120 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %119, i1 %115) #5, !dbg !57
  %121 = bitcast i32 %120 to float, !dbg !57
  %122 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %9, !dbg !57
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %122, i1 %115) #5, !dbg !57
  %124 = bitcast i32 %123 to float, !dbg !57
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !57
  %126 = bitcast i32 %125 to float, !dbg !57
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !57
  %128 = bitcast i32 %127 to float, !dbg !57
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !57
  %130 = bitcast i32 %129 to float, !dbg !57
  %131 = fsub float %126, %118, !dbg !59
  %132 = fadd float %124, %130, !dbg !61
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !62
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %132) #5, !dbg !63
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !64
  %136 = fmul float %131, %135, !dbg !65
  %137 = fadd float %136, %118, !dbg !66
  %138 = fadd float %121, %128, !dbg !67
  %139 = fmul float %131, %131, !dbg !68
  %140 = fmul float %139, %124, !dbg !69
  %141 = fmul float %140, %135, !dbg !70
  %142 = fadd float %138, %141, !dbg !71
  %143 = bitcast float %137 to i32, !dbg !57
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !57
  %145 = bitcast i32 %144 to float, !dbg !57
  %146 = bitcast float %142 to i32, !dbg !57
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !57
  %148 = bitcast i32 %147 to float, !dbg !57
  %149 = bitcast float %132 to i32, !dbg !57
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !57
  %151 = bitcast i32 %150 to float, !dbg !57
  %152 = fsub float %145, %137, !dbg !59
  %153 = fadd float %132, %151, !dbg !61
  %154 = fcmp oeq float %153, 0.000000e+00, !dbg !62
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %153) #5, !dbg !63
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !64
  %157 = fmul float %152, %156, !dbg !65
  %158 = fadd float %137, %157, !dbg !66
  %159 = fadd float %142, %148, !dbg !67
  %160 = fmul float %152, %152, !dbg !68
  %161 = fmul float %132, %160, !dbg !69
  %162 = fmul float %156, %161, !dbg !70
  %163 = fadd float %159, %162, !dbg !71
  %164 = icmp eq i32 %10, 0, !dbg !57
  %165 = and i1 %115, %164, !dbg !57
  %166 = bitcast float %158 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %166, i1 %165) #5, !dbg !57
  %167 = bitcast float %163 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %167, i1 %165) #5, !dbg !57
  %168 = bitcast float %153 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %168, i1 %165) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !57
  %170 = load i32, ptr addrspace(3) %169, align 16, !dbg !57
  %171 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %107, !dbg !57
  %172 = load float, ptr addrspace(3) %171, align 16, !dbg !57
  %173 = sext i32 %14 to i64, !dbg !72
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !72
  %175 = icmp eq i32 %21, 0, !dbg !73
  %176 = and i1 %175, %16, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %174, i1 %176) #5, !dbg !73
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %173, !dbg !74
  %178 = bitcast float %172 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %177, i1 %176) #5, !dbg !75
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 5.120000e+02) #5, !dbg !76
  %180 = fadd float %179, 0x3EE4F8B580000000, !dbg !77
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !78
  %.not.i = icmp eq i32 %181, 0, !dbg !78
  br i1 %.not.i, label %184, label %182, !dbg !78

182:                                              ; preds = %.loopexit
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %180), !dbg !78
  br label %__nv_rsqrtf.exit, !dbg !78

184:                                              ; preds = %.loopexit
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %180), !dbg !78
  br label %__nv_rsqrtf.exit, !dbg !78

__nv_rsqrtf.exit:                                 ; preds = %182, %184
  %.0.i = phi float [ %183, %182 ], [ %185, %184 ], !dbg !78
  %186 = getelementptr float, ptr addrspace(1) %4, i64 %173, !dbg !79
  %187 = bitcast float %.0.i to i32, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %186, i1 %176) #5, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py", directory: "inductor_cache/m3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_17", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 54, scope: !7)
!17 = !DILocation(line: 52, column: 38, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 36, column: 36, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 59, scope: !7)
!23 = !DILocation(line: 37, column: 53, scope: !7)
!24 = !DILocation(line: 37, column: 34, scope: !7)
!25 = !DILocation(line: 37, column: 63, scope: !7)
!26 = !DILocation(line: 38, column: 54, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 64, scope: !7)
!29 = !DILocation(line: 39, column: 54, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 64, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 22, scope: !7)
!34 = !DILocation(line: 42, column: 22, scope: !7)
!35 = !DILocation(line: 44, column: 22, scope: !7)
!36 = !DILocation(line: 52, column: 29, scope: !7)
!37 = !DILocation(line: 52, column: 49, scope: !7)
!38 = !DILocation(line: 51, column: 66, scope: !7)
!39 = !DILocation(line: 49, column: 62, scope: !7)
!40 = !DILocation(line: 33, column: 23, scope: !7)
!41 = !DILocation(line: 36, column: 44, scope: !7)
!42 = !DILocation(line: 36, column: 41, scope: !7)
!43 = !DILocation(line: 38, column: 46, scope: !7)
!44 = !DILocation(line: 183, column: 24, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 47, column: 54, scope: !7)
!48 = !DILocation(line: 184, column: 30, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 185, column: 34, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 185, column: 26, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 186, column: 39, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 186, column: 31, scope: !45, inlinedAt: !47)
!53 = !DILocation(line: 186, column: 22, scope: !45, inlinedAt: !47)
!54 = !DILocation(line: 50, column: 58, scope: !7)
!55 = distinct !{!55, !56}
!56 = !{!"llvm.loop.peeled.count", i32 1}
!57 = !DILocation(line: 204, column: 46, scope: !45, inlinedAt: !58)
!58 = !DILocation(line: 54, column: 44, scope: !7)
!59 = !DILocation(line: 192, column: 21, scope: !60, inlinedAt: !58)
!60 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!61 = !DILocation(line: 193, column: 28, scope: !60, inlinedAt: !58)
!62 = !DILocation(line: 194, column: 39, scope: !60, inlinedAt: !58)
!63 = !DILocation(line: 194, column: 60, scope: !60, inlinedAt: !58)
!64 = !DILocation(line: 194, column: 49, scope: !60, inlinedAt: !58)
!65 = !DILocation(line: 196, column: 25, scope: !60, inlinedAt: !58)
!66 = !DILocation(line: 196, column: 17, scope: !60, inlinedAt: !58)
!67 = !DILocation(line: 197, column: 15, scope: !60, inlinedAt: !58)
!68 = !DILocation(line: 197, column: 30, scope: !60, inlinedAt: !58)
!69 = !DILocation(line: 197, column: 38, scope: !60, inlinedAt: !58)
!70 = !DILocation(line: 197, column: 49, scope: !60, inlinedAt: !58)
!71 = !DILocation(line: 197, column: 22, scope: !60, inlinedAt: !58)
!72 = !DILocation(line: 59, column: 25, scope: !7)
!73 = !DILocation(line: 59, column: 37, scope: !7)
!74 = !DILocation(line: 60, column: 25, scope: !7)
!75 = !DILocation(line: 60, column: 37, scope: !7)
!76 = !DILocation(line: 62, column: 20, scope: !7)
!77 = !DILocation(line: 64, column: 20, scope: !7)
!78 = !DILocation(line: 65, column: 28, scope: !7)
!79 = !DILocation(line: 66, column: 25, scope: !7)
!80 = !DILocation(line: 66, column: 37, scope: !7)
!81 = !DILocation(line: 66, column: 4, scope: !7)
