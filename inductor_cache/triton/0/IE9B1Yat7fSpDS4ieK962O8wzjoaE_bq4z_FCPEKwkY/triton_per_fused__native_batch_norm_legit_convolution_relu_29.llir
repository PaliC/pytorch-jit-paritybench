; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = and i32 %10, 31, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = icmp slt i32 %15, 2048, !dbg !14
  %18 = icmp slt i32 %16, 2048, !dbg !14
  %19 = shl i32 %10, 2, !dbg !15
  %20 = and i32 %19, 60, !dbg !15
  %21 = srem i32 %15, 512, !dbg !16
  %22 = srem i32 %16, 512, !dbg !16
  %23 = shl i32 %15, 6, !dbg !17
  %24 = shl i32 %16, 6, !dbg !17
  %25 = or disjoint i32 %23, %20, !dbg !18
  %26 = or disjoint i32 %24, %20, !dbg !18
  %27 = sext i32 %25 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %26 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %41 = sext i32 %21 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !21
  %43 = sext i32 %22 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #5, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #5, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #5, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #5, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #5, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #5, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #5, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #5, !dbg !22
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !23
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !23
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !23
  %56 = insertelement <8 x i32> poison, i32 %40, i64 0, !dbg !20
  %57 = insertelement <8 x i32> %56, i32 %39, i64 1, !dbg !20
  %58 = insertelement <8 x i32> %57, i32 %38, i64 2, !dbg !20
  %59 = insertelement <8 x i32> %58, i32 %37, i64 3, !dbg !20
  %60 = insertelement <8 x i32> %59, i32 %35, i64 4, !dbg !20
  %61 = insertelement <8 x i32> %60, i32 %34, i64 5, !dbg !20
  %62 = insertelement <8 x i32> %61, i32 %33, i64 6, !dbg !20
  %63 = insertelement <8 x i32> %62, i32 %32, i64 7, !dbg !20
  %64 = bitcast <8 x i32> %63 to <8 x float>, !dbg !20
  %65 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !22
  %66 = insertelement <2 x i32> %65, i32 %48, i64 1, !dbg !22
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !22
  %68 = shufflevector <2 x float> %67, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !22
  %69 = fadd <8 x float> %68, %64, !dbg !24
  %70 = extractelement <8 x float> %69, i64 6, !dbg !25
  %71 = extractelement <8 x float> %69, i64 7, !dbg !25
  %72 = fadd float %71, %70, !dbg !25
  %73 = extractelement <8 x float> %69, i64 5, !dbg !25
  %74 = fadd float %73, %72, !dbg !25
  %75 = extractelement <8 x float> %69, i64 4, !dbg !25
  %76 = fadd float %75, %74, !dbg !25
  %77 = select i1 %17, float %76, float 0.000000e+00, !dbg !25
  %78 = extractelement <8 x float> %69, i64 2, !dbg !25
  %79 = extractelement <8 x float> %69, i64 3, !dbg !25
  %80 = fadd float %79, %78, !dbg !25
  %81 = extractelement <8 x float> %69, i64 1, !dbg !25
  %82 = fadd float %81, %80, !dbg !25
  %83 = extractelement <8 x float> %69, i64 0, !dbg !25
  %84 = fadd float %83, %82, !dbg !25
  %85 = select i1 %18, float %84, float 0.000000e+00, !dbg !25
  %86 = bitcast float %77 to i32, !dbg !30
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !30
  %88 = bitcast i32 %87 to float, !dbg !30
  %89 = fadd float %77, %88, !dbg !25
  %90 = bitcast float %89 to i32, !dbg !30
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !30
  %92 = bitcast i32 %91 to float, !dbg !30
  %93 = fadd float %89, %92, !dbg !25
  %94 = bitcast float %93 to i32, !dbg !30
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = fadd float %93, %96, !dbg !25
  %98 = bitcast float %97 to i32, !dbg !30
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = fadd float %97, %100, !dbg !25
  %102 = bitcast float %85 to i32, !dbg !30
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = fadd float %85, %104, !dbg !25
  %106 = bitcast float %105 to i32, !dbg !30
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = fadd float %105, %108, !dbg !25
  %110 = bitcast float %109 to i32, !dbg !30
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = fadd float %109, %112, !dbg !25
  %114 = bitcast float %113 to i32, !dbg !30
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !30
  %116 = bitcast i32 %115 to float, !dbg !30
  %117 = fadd float %113, %116, !dbg !25
  %118 = bitcast float %101 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %118, i1 true) #5, !dbg !23
  %119 = bitcast float %117 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %119, i1 true) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %120 = load float, ptr addrspace(3) %55, align 4, !dbg !23
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 6.400000e+01) #5, !dbg !23
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 6.400000e+01) #5, !dbg !23
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 6.400000e+01) #5, !dbg !23
  %124 = insertelement <8 x float> poison, float %123, i64 0, !dbg !31
  %125 = insertelement <8 x float> %124, float %122, i64 1, !dbg !31
  %126 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !31
  %127 = fsub <8 x float> %69, %126, !dbg !31
  %128 = fmul <8 x float> %127, %127, !dbg !32
  %129 = fmul <8 x float> %127, %127, !dbg !32
  %130 = fmul <8 x float> %127, %127, !dbg !32
  %131 = fmul <8 x float> %127, %127, !dbg !32
  %132 = fmul <8 x float> %127, %127, !dbg !32
  %133 = fmul <8 x float> %127, %127, !dbg !32
  %134 = fmul <8 x float> %127, %127, !dbg !32
  %135 = fmul <8 x float> %127, %127, !dbg !32
  %shift = shufflevector <8 x float> %128, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison>, !dbg !33
  %136 = fadd <8 x float> %shift, %129, !dbg !33
  %shift26 = shufflevector <8 x float> %136, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison>, !dbg !33
  %137 = fadd <8 x float> %130, %shift26, !dbg !33
  %shift27 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !33
  %138 = fadd <8 x float> %131, %shift27, !dbg !33
  %139 = extractelement <8 x float> %138, i64 4, !dbg !33
  %140 = select i1 %17, float %139, float 0.000000e+00, !dbg !33
  %shift28 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %141 = fadd <8 x float> %shift28, %133, !dbg !33
  %shift29 = shufflevector <8 x float> %141, <8 x float> poison, <8 x i32> <i32 poison, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %142 = fadd <8 x float> %134, %shift29, !dbg !33
  %shift30 = shufflevector <8 x float> %142, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %143 = fadd <8 x float> %135, %shift30, !dbg !33
  %144 = extractelement <8 x float> %143, i64 0, !dbg !33
  %145 = select i1 %18, float %144, float 0.000000e+00, !dbg !33
  %146 = bitcast float %140 to i32, !dbg !35
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !35
  %148 = bitcast i32 %147 to float, !dbg !35
  %149 = fadd float %140, %148, !dbg !33
  %150 = bitcast float %149 to i32, !dbg !35
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !35
  %152 = bitcast i32 %151 to float, !dbg !35
  %153 = fadd float %149, %152, !dbg !33
  %154 = bitcast float %153 to i32, !dbg !35
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !35
  %156 = bitcast i32 %155 to float, !dbg !35
  %157 = fadd float %153, %156, !dbg !33
  %158 = bitcast float %157 to i32, !dbg !35
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !35
  %160 = bitcast i32 %159 to float, !dbg !35
  %161 = fadd float %157, %160, !dbg !33
  %162 = bitcast float %145 to i32, !dbg !35
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !35
  %164 = bitcast i32 %163 to float, !dbg !35
  %165 = fadd float %145, %164, !dbg !33
  %166 = bitcast float %165 to i32, !dbg !35
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !35
  %168 = bitcast i32 %167 to float, !dbg !35
  %169 = fadd float %165, %168, !dbg !33
  %170 = bitcast float %169 to i32, !dbg !35
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !35
  %172 = bitcast i32 %171 to float, !dbg !35
  %173 = fadd float %169, %172, !dbg !33
  %174 = bitcast float %173 to i32, !dbg !35
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !35
  %176 = bitcast i32 %175 to float, !dbg !35
  %177 = fadd float %173, %176, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %178 = bitcast float %161 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %178, i1 true) #5, !dbg !36
  %179 = bitcast float %177 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %179, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %180 = load float, ptr addrspace(3) %55, align 4, !dbg !36
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float 6.400000e+01) #5, !dbg !37
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float 6.400000e+01) #5, !dbg !37
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 6.400000e+01) #5, !dbg !37
  %184 = fadd float %181, 0x3EE4F8B580000000, !dbg !38
  %185 = fadd float %182, 0x3EE4F8B580000000, !dbg !38
  %186 = fadd float %183, 0x3EE4F8B580000000, !dbg !38
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %187, 0, !dbg !36
  br i1 %.not.i, label %190, label %188, !dbg !36

188:                                              ; preds = %7
  %189 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %184), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

190:                                              ; preds = %7
  %191 = tail call float @llvm.nvvm.rsqrt.approx.f(float %184), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %188, %190
  %.0.i = phi float [ %189, %188 ], [ %191, %190 ], !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i11 = icmp eq i32 %195, 0, !dbg !36
  br i1 %.not.i11, label %198, label %196, !dbg !36

196:                                              ; preds = %__nv_rsqrtf.exit
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %185), !dbg !36
  br label %__nv_rsqrtf.exit13, !dbg !36

198:                                              ; preds = %__nv_rsqrtf.exit
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %185), !dbg !36
  br label %__nv_rsqrtf.exit13, !dbg !36

__nv_rsqrtf.exit13:                               ; preds = %196, %198
  %.0.i12 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !36
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i23 = icmp eq i32 %203, 0, !dbg !36
  br i1 %.not.i23, label %206, label %204, !dbg !36

204:                                              ; preds = %__nv_rsqrtf.exit13
  %205 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %186), !dbg !36
  br label %__nv_rsqrtf.exit25, !dbg !36

206:                                              ; preds = %__nv_rsqrtf.exit13
  %207 = tail call float @llvm.nvvm.rsqrt.approx.f(float %186), !dbg !36
  br label %__nv_rsqrtf.exit25, !dbg !36

__nv_rsqrtf.exit25:                               ; preds = %204, %206
  %.0.i24 = phi float [ %205, %204 ], [ %207, %206 ], !dbg !36
  %208 = or disjoint i32 %9, %14, !dbg !13
  %209 = icmp slt i32 %208, 2048, !dbg !14
  %210 = insertelement <8 x float> poison, float %.0.i24, i64 0, !dbg !39
  %211 = insertelement <8 x float> %210, float %.0.i12, i64 1, !dbg !39
  %212 = shufflevector <8 x float> %211, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %213 = fmul <8 x float> %127, %212, !dbg !39
  %214 = fcmp olt <8 x float> %213, zeroinitializer, !dbg !40
  %215 = extractelement <8 x i1> %214, i64 7, !dbg !44
  %216 = extractelement <8 x i1> %214, i64 6, !dbg !44
  %217 = extractelement <8 x i1> %214, i64 5, !dbg !44
  %218 = extractelement <8 x i1> %214, i64 4, !dbg !44
  %219 = extractelement <8 x i1> %214, i64 3, !dbg !44
  %220 = extractelement <8 x i1> %214, i64 2, !dbg !44
  %221 = extractelement <8 x i1> %214, i64 1, !dbg !44
  %222 = extractelement <8 x i1> %214, i64 0, !dbg !44
  %223 = bitcast float %71 to i32, !dbg !45
  %224 = bitcast float %70 to i32, !dbg !45
  %225 = bitcast float %73 to i32, !dbg !45
  %226 = bitcast float %75 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %224, i32 %225, i32 %226, ptr addrspace(1) %28, i1 %17) #5, !dbg !45
  %227 = bitcast float %79 to i32, !dbg !45
  %228 = bitcast float %78 to i32, !dbg !45
  %229 = bitcast float %81 to i32, !dbg !45
  %230 = bitcast float %83 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %228, i32 %229, i32 %230, ptr addrspace(1) %30, i1 %18) #5, !dbg !45
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !46
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !46
  %bc = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %233 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %234 = select i1 %215, i32 0, i32 %233, !dbg !44
  %bc31 = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %235 = extractelement <8 x i32> %bc31, i64 6, !dbg !47
  %236 = select i1 %216, i32 0, i32 %235, !dbg !44
  %bc32 = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %237 = extractelement <8 x i32> %bc32, i64 5, !dbg !47
  %238 = select i1 %217, i32 0, i32 %237, !dbg !44
  %bc33 = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %239 = extractelement <8 x i32> %bc33, i64 4, !dbg !47
  %240 = select i1 %218, i32 0, i32 %239, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %236, i32 %238, i32 %240, ptr addrspace(1) %231, i1 %17) #5, !dbg !47
  %bc34 = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %241 = extractelement <8 x i32> %bc34, i64 3, !dbg !47
  %242 = select i1 %219, i32 0, i32 %241, !dbg !44
  %bc35 = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %243 = extractelement <8 x i32> %bc35, i64 2, !dbg !47
  %244 = select i1 %220, i32 0, i32 %243, !dbg !44
  %bc36 = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %245 = extractelement <8 x i32> %bc36, i64 1, !dbg !47
  %246 = select i1 %221, i32 0, i32 %245, !dbg !44
  %bc37 = bitcast <8 x float> %213 to <8 x i32>, !dbg !47
  %247 = extractelement <8 x i32> %bc37, i64 0, !dbg !47
  %248 = select i1 %222, i32 0, i32 %247, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %242, i32 %244, i32 %246, i32 %248, ptr addrspace(1) %232, i1 %18) #5, !dbg !47
  %249 = sext i32 %208 to i64, !dbg !48
  %250 = getelementptr float, ptr addrspace(1) %4, i64 %249, !dbg !48
  %251 = and i32 %10, 224, !dbg !49
  %252 = icmp eq i32 %251, 0, !dbg !49
  %253 = bitcast float %.0.i to i32, !dbg !49
  %254 = and i1 %252, %209, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %253, ptr addrspace(1) %250, i1 %254) #5, !dbg !49
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !50
  %256 = bitcast float %121 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %256, ptr addrspace(1) %255, i1 %254) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c52x2tmhe3ttoe265veuolcv3mlb4gdzsdar3a6ven6bjfpccrea.py", directory: "inductor_cache/52")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_relu_29", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 42, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 39, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !34)
!36 = !DILocation(line: 53, column: 28, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 56, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 47, scope: !7)
!46 = !DILocation(line: 58, column: 25, scope: !7)
!47 = !DILocation(line: 58, column: 45, scope: !7)
!48 = !DILocation(line: 59, column: 25, scope: !7)
!49 = !DILocation(line: 59, column: 37, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
