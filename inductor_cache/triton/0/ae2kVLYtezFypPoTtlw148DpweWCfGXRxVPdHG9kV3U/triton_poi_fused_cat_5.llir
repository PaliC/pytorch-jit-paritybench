; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.fr = freeze i32 %8, !dbg !11
  %9 = shl i32 %.fr, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 1152, !dbg !14
  %14 = sdiv i32 %12, 18, !dbg !15
  %15 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !16
  %16 = insertelement <2 x i32> %15, i32 %12, i64 1, !dbg !16
  %17 = srem <2 x i32> %16, <i32 16, i32 18>, !dbg !16
  %18 = extractelement <2 x i32> %17, i64 1, !dbg !17
  %19 = icmp slt i32 %18, 9, !dbg !18
  %20 = shl nsw i32 %18, 4, !dbg !19
  %21 = extractelement <2 x i32> %17, i64 0, !dbg !20
  %22 = add nsw i32 %21, %20, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = and i1 %13, %19, !dbg !22
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %24, i1 %25, i1 %25) #2, !dbg !23
  %27 = sext i32 %18 to i64, !dbg !24
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %25, i1 %25) #2, !dbg !25
  %30 = srem i32 %12, 288, !dbg !26
  %31 = sub nsw i32 %12, %30, !dbg !26
  %32 = add i32 %31, %22, !dbg !27
  %33 = sext i32 %32 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %25, i32 0, i1 %25) #2, !dbg !29
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not.i = icmp eq i32 %36, 0, !dbg !30
  %37 = icmp sgt i32 %18, 8, !dbg !17
  %38 = and i1 %13, %37, !dbg !31
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %24, i1 %38, i1 %38) #2, !dbg !32
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %38, i1 %38) #2, !dbg !33
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %38, i32 0, i1 %38) #2, !dbg !34
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !35
  %.not.i7 = icmp eq i32 %42, 0, !dbg !35
  %43 = insertelement <2 x i64> poison, i64 %39, i64 0, !dbg !36
  %44 = insertelement <2 x i64> %43, i64 %26, i64 1, !dbg !36
  %45 = sitofp <2 x i64> %44 to <2 x float>, !dbg !36
  %46 = insertelement <2 x i64> poison, i64 %40, i64 0, !dbg !37
  %47 = insertelement <2 x i64> %46, i64 %29, i64 1, !dbg !37
  %48 = sitofp <2 x i64> %47 to <2 x float>, !dbg !37
  %49 = fadd <2 x float> %45, %48, !dbg !38
  %50 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !34
  %51 = insertelement <2 x i32> %50, i32 %35, i64 1, !dbg !34
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !34
  %53 = fadd <2 x float> %49, %52, !dbg !39
  %54 = extractelement <2 x float> %53, i64 1, !dbg !30
  %55 = tail call float @llvm.nvvm.floor.ftz.f(float %54), !dbg !30
  %56 = tail call float @llvm.nvvm.floor.f(float %54), !dbg !30
  %.0.i = select i1 %.not.i, float %56, float %55, !dbg !30
  %.inv = fcmp ole float %.0.i, 0.000000e+00, !dbg !40
  %57 = select i1 %.inv, float 0.000000e+00, float %.0.i, !dbg !40
  %58 = fcmp olt float %57, 5.000000e+00, !dbg !44
  %59 = fcmp uno float %57, 0.000000e+00, !dbg !46
  %60 = or i1 %58, %59, !dbg !47
  %61 = select i1 %60, float %57, float 5.000000e+00, !dbg !48
  %62 = extractelement <2 x float> %53, i64 0, !dbg !35
  %63 = tail call float @llvm.nvvm.floor.ftz.f(float %62), !dbg !35
  %64 = tail call float @llvm.nvvm.floor.f(float %62), !dbg !35
  %.0.i8 = select i1 %.not.i7, float %64, float %63, !dbg !35
  %.inv2 = fcmp ole float %.0.i8, 0.000000e+00, !dbg !49
  %65 = select i1 %.inv2, float 0.000000e+00, float %.0.i8, !dbg !49
  %66 = fcmp olt float %65, 5.000000e+00, !dbg !51
  %67 = fcmp uno float %65, 0.000000e+00, !dbg !53
  %68 = or i1 %66, %67, !dbg !54
  %69 = select i1 %68, float %65, float 5.000000e+00, !dbg !55
  %70 = select i1 %19, float %61, float %69, !dbg !56
  %71 = fadd float %.0.i, 1.000000e+00, !dbg !57
  %72 = fadd float %.0.i8, 1.000000e+00, !dbg !58
  %73 = shufflevector <2 x float> %53, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !59
  %74 = insertelement <4 x float> %73, float %72, i64 2, !dbg !59
  %75 = insertelement <4 x float> %74, float %71, i64 3, !dbg !59
  %76 = fcmp ole <4 x float> %75, zeroinitializer, !dbg !59
  %77 = select <4 x i1> %76, <4 x float> zeroinitializer, <4 x float> %75, !dbg !59
  %78 = extractelement <4 x float> %77, i64 3, !dbg !61
  %79 = fcmp uno float %78, 0.000000e+00, !dbg !61
  %80 = fcmp olt <4 x float> %77, splat (float 5.000000e+00), !dbg !63
  %81 = extractelement <4 x i1> %80, i64 3, !dbg !65
  %82 = or i1 %81, %79, !dbg !65
  %83 = select i1 %82, float %78, float 5.000000e+00, !dbg !66
  %84 = extractelement <4 x float> %77, i64 2, !dbg !67
  %85 = fcmp uno float %84, 0.000000e+00, !dbg !67
  %86 = extractelement <4 x i1> %80, i64 2, !dbg !69
  %87 = or i1 %86, %85, !dbg !69
  %88 = select i1 %87, float %84, float 5.000000e+00, !dbg !70
  %89 = select i1 %19, float %83, float %88, !dbg !56
  %90 = extractelement <4 x float> %77, i64 1, !dbg !71
  %91 = fcmp uno float %90, 0.000000e+00, !dbg !71
  %92 = extractelement <4 x i1> %80, i64 1, !dbg !73
  %93 = or i1 %92, %91, !dbg !73
  %94 = select i1 %93, float %90, float 5.000000e+00, !dbg !74
  %95 = extractelement <4 x float> %77, i64 0, !dbg !75
  %96 = fcmp uno float %95, 0.000000e+00, !dbg !75
  %97 = extractelement <4 x i1> %80, i64 0, !dbg !76
  %98 = or i1 %97, %96, !dbg !76
  %99 = select i1 %98, float %95, float 5.000000e+00, !dbg !77
  %100 = select i1 %19, float %94, float %99, !dbg !56
  %101 = sext i32 %12 to i64, !dbg !78
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !78
  %103 = bitcast float %70 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %102, i1 %13) #2, !dbg !79
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !80
  %105 = bitcast float %89 to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %104, i1 %13) #2, !dbg !81
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !82
  %107 = bitcast float %100 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %106, i1 %13) #2, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck3ovkkjalo4tfsafhnapqicxsq46dnfek2m2h73lbsuyyms33j5.py", directory: "inductor_cache/k3")
!4 = !{ptr @triton_poi_fused_cat_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 47, column: 20, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 52, scope: !7)
!23 = !DILocation(line: 33, column: 45, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 50, scope: !7)
!27 = !DILocation(line: 38, column: 46, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 55, scope: !7)
!30 = !DILocation(line: 40, column: 28, scope: !7)
!31 = !DILocation(line: 50, column: 67, scope: !7)
!32 = !DILocation(line: 50, column: 59, scope: !7)
!33 = !DILocation(line: 52, column: 49, scope: !7)
!34 = !DILocation(line: 55, column: 68, scope: !7)
!35 = !DILocation(line: 57, column: 28, scope: !7)
!36 = !DILocation(line: 51, column: 21, scope: !7)
!37 = !DILocation(line: 53, column: 21, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 20, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 42, column: 42, scope: !7)
!44 = !DILocation(line: 110, column: 15, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 44, column: 42, scope: !7)
!46 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !45)
!47 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !45)
!48 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !45)
!49 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !50)
!50 = !DILocation(line: 59, column: 42, scope: !7)
!51 = !DILocation(line: 110, column: 15, scope: !41, inlinedAt: !52)
!52 = !DILocation(line: 61, column: 42, scope: !7)
!53 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !52)
!54 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !52)
!55 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !52)
!56 = !DILocation(line: 0, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 72, column: 20, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !60)
!60 = !DILocation(line: 82, column: 42, scope: !7)
!61 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !62)
!62 = !DILocation(line: 68, column: 42, scope: !7)
!63 = !DILocation(line: 110, column: 15, scope: !41, inlinedAt: !64)
!64 = !DILocation(line: 83, column: 42, scope: !7)
!65 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !62)
!66 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !62)
!67 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !68)
!68 = !DILocation(line: 74, column: 42, scope: !7)
!69 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !68)
!70 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !68)
!71 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !72)
!72 = !DILocation(line: 79, column: 42, scope: !7)
!73 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !72)
!74 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !72)
!75 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !64)
!76 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !64)
!77 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !64)
!78 = !DILocation(line: 87, column: 25, scope: !7)
!79 = !DILocation(line: 87, column: 37, scope: !7)
!80 = !DILocation(line: 88, column: 25, scope: !7)
!81 = !DILocation(line: 88, column: 37, scope: !7)
!82 = !DILocation(line: 89, column: 25, scope: !7)
!83 = !DILocation(line: 89, column: 37, scope: !7)
!84 = !DILocation(line: 89, column: 4, scope: !7)
