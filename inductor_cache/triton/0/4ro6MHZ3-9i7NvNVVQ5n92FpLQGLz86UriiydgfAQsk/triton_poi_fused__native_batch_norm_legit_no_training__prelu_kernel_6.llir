; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = srem i32 %19, 32, !dbg !14
  %22 = sext i32 %19 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !15
  %24 = sext i32 %20 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !15
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %28 = sext i32 %21 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = bitcast i32 %45 to float, !dbg !20
  %50 = bitcast i32 %46 to float, !dbg !20
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !21
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !22
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !31
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !33
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !34
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !34
  %88 = fadd float %38, 0x3EE4F8B580000000, !dbg !35
  %89 = fadd float %39, 0x3EE4F8B580000000, !dbg !35
  %90 = fadd float %40, 0x3EE4F8B580000000, !dbg !35
  %91 = fadd float %41, 0x3EE4F8B580000000, !dbg !35
  %92 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %93 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %94 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %95 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %96, 0, !dbg !36
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %97, 0, !dbg !36
  br i1 %.not.i, label %103, label %98, !dbg !36

98:                                               ; preds = %13
  br i1 %.not1.i, label %101, label %99, !dbg !36

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

103:                                              ; preds = %13
  br i1 %.not1.i, label %106, label %104, !dbg !36

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %108, 0, !dbg !36
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %109, 0, !dbg !36
  br i1 %.not.i1, label %115, label %110, !dbg !36

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %113, label %111, !dbg !36

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !36

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %111, %113, %116, %118
  %.0.i3 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !36
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %120, 0, !dbg !36
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %121, 0, !dbg !36
  br i1 %.not.i6, label %127, label %122, !dbg !36

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !36

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

127:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %130, label %128, !dbg !36

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %123, %125, %128, %130
  %.0.i8 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %132, 0, !dbg !36
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %133, 0, !dbg !36
  br i1 %.not.i11, label %139, label %134, !dbg !36

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !36

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !36

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %135, %137, %140, %142
  %.0.i13 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %144, 0, !dbg !36
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %145, 0, !dbg !36
  br i1 %.not.i16, label %151, label %146, !dbg !36

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !36

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

151:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %154, label %152, !dbg !36

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %147, %149, %152, %154
  %.0.i18 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %156, 0, !dbg !36
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %157, 0, !dbg !36
  br i1 %.not.i21, label %163, label %158, !dbg !36

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !36

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

163:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %166, label %164, !dbg !36

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %159, %161, %164, %166
  %.0.i23 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %168, 0, !dbg !36
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %169, 0, !dbg !36
  br i1 %.not.i26, label %175, label %170, !dbg !36

170:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %173, label %171, !dbg !36

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

175:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %178, label %176, !dbg !36

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %171, %173, %176, %178
  %.0.i28 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %180, 0, !dbg !36
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %181, 0, !dbg !36
  br i1 %.not.i31, label %187, label %182, !dbg !36

182:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %185, label %183, !dbg !36

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

187:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %190, label %188, !dbg !36

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %183, %185, %188, %190
  %.0.i33 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !36
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %200 = fadd float %69, 0x3EE4F8B580000000, !dbg !38
  %201 = fadd float %70, 0x3EE4F8B580000000, !dbg !38
  %202 = fadd float %71, 0x3EE4F8B580000000, !dbg !38
  %203 = fadd float %72, 0x3EE4F8B580000000, !dbg !38
  %204 = fadd float %78, 0x3EE4F8B580000000, !dbg !38
  %205 = fadd float %79, 0x3EE4F8B580000000, !dbg !38
  %206 = fadd float %80, 0x3EE4F8B580000000, !dbg !38
  %207 = fadd float %81, 0x3EE4F8B580000000, !dbg !38
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i36 = icmp eq i32 %208, 0, !dbg !39
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i39 = icmp eq i32 %209, 0, !dbg !39
  br i1 %.not.i36, label %215, label %210, !dbg !39

210:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %213, label %211, !dbg !39

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

215:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %218, label %216, !dbg !39

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

__nv_sqrtf.exit40:                                ; preds = %211, %213, %216, %218
  %.0.i38 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !39
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i41 = icmp eq i32 %220, 0, !dbg !39
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i44 = icmp eq i32 %221, 0, !dbg !39
  br i1 %.not.i41, label %227, label %222, !dbg !39

222:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %225, label %223, !dbg !39

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

227:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %230, label %228, !dbg !39

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

__nv_sqrtf.exit45:                                ; preds = %223, %225, %228, %230
  %.0.i43 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !39
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i46 = icmp eq i32 %232, 0, !dbg !39
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i49 = icmp eq i32 %233, 0, !dbg !39
  br i1 %.not.i46, label %239, label %234, !dbg !39

234:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %237, label %235, !dbg !39

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

239:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %242, label %240, !dbg !39

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

__nv_sqrtf.exit50:                                ; preds = %235, %237, %240, %242
  %.0.i48 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !39
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i51 = icmp eq i32 %244, 0, !dbg !39
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i54 = icmp eq i32 %245, 0, !dbg !39
  br i1 %.not.i51, label %251, label %246, !dbg !39

246:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %249, label %247, !dbg !39

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

251:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %254, label %252, !dbg !39

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

__nv_sqrtf.exit55:                                ; preds = %247, %249, %252, %254
  %.0.i53 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !39
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i56 = icmp eq i32 %256, 0, !dbg !39
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i59 = icmp eq i32 %257, 0, !dbg !39
  br i1 %.not.i56, label %263, label %258, !dbg !39

258:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %261, label %259, !dbg !39

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

263:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %266, label %264, !dbg !39

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

__nv_sqrtf.exit60:                                ; preds = %259, %261, %264, %266
  %.0.i58 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !39
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i61 = icmp eq i32 %268, 0, !dbg !39
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i64 = icmp eq i32 %269, 0, !dbg !39
  br i1 %.not.i61, label %275, label %270, !dbg !39

270:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %273, label %271, !dbg !39

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

275:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %278, label %276, !dbg !39

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

__nv_sqrtf.exit65:                                ; preds = %271, %273, %276, %278
  %.0.i63 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !39
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i66 = icmp eq i32 %280, 0, !dbg !39
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i69 = icmp eq i32 %281, 0, !dbg !39
  br i1 %.not.i66, label %287, label %282, !dbg !39

282:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %285, label %283, !dbg !39

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

287:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %290, label %288, !dbg !39

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

__nv_sqrtf.exit70:                                ; preds = %283, %285, %288, %290
  %.0.i68 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !39
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i71 = icmp eq i32 %292, 0, !dbg !39
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i74 = icmp eq i32 %293, 0, !dbg !39
  br i1 %.not.i71, label %299, label %294, !dbg !39

294:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %297, label %295, !dbg !39

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

299:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %302, label %300, !dbg !39

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

__nv_sqrtf.exit75:                                ; preds = %295, %297, %300, %302
  %.0.i73 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !39
  %304 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %305 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %306 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !22
  %307 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %308 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %309 = bitcast i32 %308 to float, !dbg !26
  %310 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %311 = bitcast i32 %310 to float, !dbg !28
  %312 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %313 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %314 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !22
  %315 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %316 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %317 = bitcast i32 %316 to float, !dbg !26
  %318 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %319 = bitcast i32 %318 to float, !dbg !28
  %320 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %321 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %322 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !22
  %323 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %324 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %325 = bitcast i32 %324 to float, !dbg !26
  %326 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %327 = bitcast i32 %326 to float, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %329 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %330 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !22
  %331 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %332 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %333 = bitcast i32 %332 to float, !dbg !26
  %334 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %335 = bitcast i32 %334 to float, !dbg !28
  %336 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %337 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %338 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !22
  %339 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %340 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %341 = bitcast i32 %340 to float, !dbg !26
  %342 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %343 = bitcast i32 %342 to float, !dbg !28
  %344 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %345 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %346 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !22
  %347 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %348 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %349 = bitcast i32 %348 to float, !dbg !26
  %350 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %351 = bitcast i32 %350 to float, !dbg !28
  %352 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %353 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %354 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !22
  %355 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %356 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %357 = bitcast i32 %356 to float, !dbg !26
  %358 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %359 = bitcast i32 %358 to float, !dbg !28
  %360 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %361 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %362 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !22
  %363 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %364 = insertelement <8 x i32> poison, i32 %360, i64 0, !dbg !16
  %365 = insertelement <8 x i32> %364, i32 %352, i64 1, !dbg !16
  %366 = insertelement <8 x i32> %365, i32 %344, i64 2, !dbg !16
  %367 = insertelement <8 x i32> %366, i32 %336, i64 3, !dbg !16
  %368 = insertelement <8 x i32> %367, i32 %328, i64 4, !dbg !16
  %369 = insertelement <8 x i32> %368, i32 %320, i64 5, !dbg !16
  %370 = insertelement <8 x i32> %369, i32 %312, i64 6, !dbg !16
  %371 = insertelement <8 x i32> %370, i32 %304, i64 7, !dbg !16
  %372 = bitcast <8 x i32> %371 to <8 x float>, !dbg !16
  %373 = insertelement <8 x i32> poison, i32 %361, i64 0, !dbg !18
  %374 = insertelement <8 x i32> %373, i32 %353, i64 1, !dbg !18
  %375 = insertelement <8 x i32> %374, i32 %345, i64 2, !dbg !18
  %376 = insertelement <8 x i32> %375, i32 %337, i64 3, !dbg !18
  %377 = insertelement <8 x i32> %376, i32 %329, i64 4, !dbg !18
  %378 = insertelement <8 x i32> %377, i32 %321, i64 5, !dbg !18
  %379 = insertelement <8 x i32> %378, i32 %313, i64 6, !dbg !18
  %380 = insertelement <8 x i32> %379, i32 %305, i64 7, !dbg !18
  %381 = bitcast <8 x i32> %380 to <8 x float>, !dbg !18
  %382 = fsub <8 x float> %372, %381, !dbg !40
  %383 = insertelement <8 x float> poison, float %192, i64 0, !dbg !41
  %384 = insertelement <8 x float> %383, float %193, i64 1, !dbg !41
  %385 = insertelement <8 x float> %384, float %194, i64 2, !dbg !41
  %386 = insertelement <8 x float> %385, float %195, i64 3, !dbg !41
  %387 = insertelement <8 x float> %386, float %196, i64 4, !dbg !41
  %388 = insertelement <8 x float> %387, float %197, i64 5, !dbg !41
  %389 = insertelement <8 x float> %388, float %198, i64 6, !dbg !41
  %390 = insertelement <8 x float> %389, float %199, i64 7, !dbg !41
  %391 = fmul <8 x float> %382, %390, !dbg !41
  %392 = insertelement <8 x i32> poison, i32 %362, i64 0, !dbg !22
  %393 = insertelement <8 x i32> %392, i32 %354, i64 1, !dbg !22
  %394 = insertelement <8 x i32> %393, i32 %346, i64 2, !dbg !22
  %395 = insertelement <8 x i32> %394, i32 %338, i64 3, !dbg !22
  %396 = insertelement <8 x i32> %395, i32 %330, i64 4, !dbg !22
  %397 = insertelement <8 x i32> %396, i32 %322, i64 5, !dbg !22
  %398 = insertelement <8 x i32> %397, i32 %314, i64 6, !dbg !22
  %399 = insertelement <8 x i32> %398, i32 %306, i64 7, !dbg !22
  %400 = bitcast <8 x i32> %399 to <8 x float>, !dbg !22
  %401 = fmul <8 x float> %391, %400, !dbg !42
  %402 = insertelement <8 x i32> poison, i32 %363, i64 0, !dbg !24
  %403 = insertelement <8 x i32> %402, i32 %355, i64 1, !dbg !24
  %404 = insertelement <8 x i32> %403, i32 %347, i64 2, !dbg !24
  %405 = insertelement <8 x i32> %404, i32 %339, i64 3, !dbg !24
  %406 = insertelement <8 x i32> %405, i32 %331, i64 4, !dbg !24
  %407 = insertelement <8 x i32> %406, i32 %323, i64 5, !dbg !24
  %408 = insertelement <8 x i32> %407, i32 %315, i64 6, !dbg !24
  %409 = insertelement <8 x i32> %408, i32 %307, i64 7, !dbg !24
  %410 = bitcast <8 x i32> %409 to <8 x float>, !dbg !24
  %411 = fadd <8 x float> %401, %410, !dbg !43
  %412 = extractelement <8 x float> %411, i64 7, !dbg !44
  %413 = fmul float %412, %309, !dbg !45
  %414 = fcmp ogt <8 x float> %411, zeroinitializer, !dbg !46
  %415 = extractelement <8 x i1> %414, i64 7, !dbg !44
  %416 = select i1 %415, float %412, float %413, !dbg !44
  %417 = fsub float %416, %311, !dbg !47
  %418 = extractelement <8 x float> %411, i64 6, !dbg !44
  %419 = fmul float %418, %317, !dbg !45
  %420 = extractelement <8 x i1> %414, i64 6, !dbg !44
  %421 = select i1 %420, float %418, float %419, !dbg !44
  %422 = fsub float %421, %319, !dbg !47
  %423 = extractelement <8 x float> %411, i64 5, !dbg !44
  %424 = fmul float %423, %325, !dbg !45
  %425 = extractelement <8 x i1> %414, i64 5, !dbg !44
  %426 = select i1 %425, float %423, float %424, !dbg !44
  %427 = fsub float %426, %327, !dbg !47
  %428 = extractelement <8 x float> %411, i64 4, !dbg !44
  %429 = fmul float %428, %333, !dbg !45
  %430 = extractelement <8 x i1> %414, i64 4, !dbg !44
  %431 = select i1 %430, float %428, float %429, !dbg !44
  %432 = fsub float %431, %335, !dbg !47
  %433 = extractelement <8 x float> %411, i64 3, !dbg !44
  %434 = fmul float %433, %341, !dbg !45
  %435 = extractelement <8 x i1> %414, i64 3, !dbg !44
  %436 = select i1 %435, float %433, float %434, !dbg !44
  %437 = fsub float %436, %343, !dbg !47
  %438 = extractelement <8 x float> %411, i64 2, !dbg !44
  %439 = fmul float %438, %349, !dbg !45
  %440 = extractelement <8 x i1> %414, i64 2, !dbg !44
  %441 = select i1 %440, float %438, float %439, !dbg !44
  %442 = fsub float %441, %351, !dbg !47
  %443 = extractelement <8 x float> %411, i64 1, !dbg !44
  %444 = fmul float %443, %357, !dbg !45
  %445 = extractelement <8 x i1> %414, i64 1, !dbg !44
  %446 = select i1 %445, float %443, float %444, !dbg !44
  %447 = fsub float %446, %359, !dbg !47
  %448 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %449 = bitcast i32 %448 to float, !dbg !26
  %450 = extractelement <8 x float> %411, i64 0, !dbg !44
  %451 = fmul float %450, %449, !dbg !45
  %452 = extractelement <8 x i1> %414, i64 0, !dbg !44
  %453 = select i1 %452, float %450, float %451, !dbg !44
  %454 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %455 = bitcast i32 %454 to float, !dbg !28
  %456 = fsub float %453, %455, !dbg !47
  %457 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !34
  %458 = bitcast i32 %457 to float, !dbg !34
  %459 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !34
  %460 = bitcast i32 %459 to float, !dbg !34
  %461 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !34
  %462 = bitcast i32 %461 to float, !dbg !34
  %463 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !34
  %464 = bitcast i32 %463 to float, !dbg !34
  %465 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !34
  %466 = bitcast i32 %465 to float, !dbg !34
  %467 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !34
  %468 = bitcast i32 %467 to float, !dbg !34
  %469 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !34
  %470 = bitcast i32 %469 to float, !dbg !34
  %471 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !34
  %472 = bitcast i32 %471 to float, !dbg !34
  %473 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !32
  %474 = bitcast i32 %473 to float, !dbg !32
  %475 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !32
  %476 = bitcast i32 %475 to float, !dbg !32
  %477 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !32
  %478 = bitcast i32 %477 to float, !dbg !32
  %479 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !32
  %480 = bitcast i32 %479 to float, !dbg !32
  %481 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !32
  %482 = bitcast i32 %481 to float, !dbg !32
  %483 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !32
  %484 = bitcast i32 %483 to float, !dbg !32
  %485 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !32
  %486 = bitcast i32 %485 to float, !dbg !32
  %487 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !32
  %488 = bitcast i32 %487 to float, !dbg !32
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !48
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !48
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !48
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !48
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !48
  %494 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !48
  %495 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !48
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !48
  %497 = fmul float %456, %489, !dbg !49
  %498 = fmul float %447, %490, !dbg !49
  %499 = fmul float %442, %491, !dbg !49
  %500 = fmul float %437, %492, !dbg !49
  %501 = fmul float %432, %493, !dbg !49
  %502 = fmul float %427, %494, !dbg !49
  %503 = fmul float %422, %495, !dbg !49
  %504 = fmul float %417, %496, !dbg !49
  %505 = fmul float %497, %488, !dbg !50
  %506 = fmul float %498, %486, !dbg !50
  %507 = fmul float %499, %484, !dbg !50
  %508 = fmul float %500, %482, !dbg !50
  %509 = fmul float %501, %480, !dbg !50
  %510 = fmul float %502, %478, !dbg !50
  %511 = fmul float %503, %476, !dbg !50
  %512 = fmul float %504, %474, !dbg !50
  %513 = fadd float %505, %472, !dbg !51
  %514 = fadd float %506, %470, !dbg !51
  %515 = fadd float %507, %468, !dbg !51
  %516 = fadd float %508, %466, !dbg !51
  %517 = fadd float %509, %464, !dbg !51
  %518 = fadd float %510, %462, !dbg !51
  %519 = fadd float %511, %460, !dbg !51
  %520 = fadd float %512, %458, !dbg !51
  %521 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !52
  %522 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !52
  %523 = bitcast float %453 to i32, !dbg !53
  %524 = bitcast float %446 to i32, !dbg !53
  %525 = bitcast float %441 to i32, !dbg !53
  %526 = bitcast float %436 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %523, i32 %524, i32 %525, i32 %526, ptr addrspace(1) %521, i1 true) #3, !dbg !53
  %527 = bitcast float %431 to i32, !dbg !53
  %528 = bitcast float %426 to i32, !dbg !53
  %529 = bitcast float %421 to i32, !dbg !53
  %530 = bitcast float %416 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %527, i32 %528, i32 %529, i32 %530, ptr addrspace(1) %522, i1 true) #3, !dbg !53
  %531 = getelementptr float, ptr addrspace(1) %11, i64 %22, !dbg !54
  %532 = getelementptr float, ptr addrspace(1) %11, i64 %24, !dbg !54
  %533 = bitcast float %513 to i32, !dbg !55
  %534 = bitcast float %514 to i32, !dbg !55
  %535 = bitcast float %515 to i32, !dbg !55
  %536 = bitcast float %516 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %533, i32 %534, i32 %535, i32 %536, ptr addrspace(1) %531, i1 true) #3, !dbg !55
  %537 = bitcast float %517 to i32, !dbg !55
  %538 = bitcast float %518 to i32, !dbg !55
  %539 = bitcast float %519 to i32, !dbg !55
  %540 = bitcast float %520 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %537, i32 %538, i32 %539, i32 %540, ptr addrspace(1) %532, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cessebyicxhldj6i73za5hiz4mhszhlyoqedptkbhuxhb4r44cfs.py", directory: "inductor_cache/es")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 27, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 35, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 19, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 28, scope: !7)
!53 = !DILocation(line: 59, column: 40, scope: !7)
!54 = !DILocation(line: 60, column: 25, scope: !7)
!55 = !DILocation(line: 60, column: 37, scope: !7)
!56 = !DILocation(line: 60, column: 4, scope: !7)
