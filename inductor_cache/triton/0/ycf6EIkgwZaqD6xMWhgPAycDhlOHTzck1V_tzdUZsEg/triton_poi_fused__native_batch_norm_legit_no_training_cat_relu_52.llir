; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 38912, !dbg !14
  %17 = sdiv i32 %15, 4, !dbg !15
  %18 = srem i32 %17, 2432, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen, 9728, !dbg !17
  %20 = sext i32 %18 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %16) #3, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %16) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !25
  %35 = icmp slt i32 %18, 2048, !dbg !26
  %36 = mul i32 %19, 9728, !dbg !27
  %srem.decomposed = sub i32 %.frozen, %36, !dbg !27
  %37 = mul nsw i32 %19, 9216, !dbg !28
  %38 = add nsw i32 %37, %srem.decomposed, !dbg !29
  %39 = sext i32 %38 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !30
  %41 = and i1 %16, %35, !dbg !31
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !32
  %43 = mul nsw i32 %19, 8704, !dbg !33
  %44 = add nsw i32 %43, %srem.decomposed, !dbg !34
  %45 = sext i32 %44 to i64, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !35
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !36
  %48 = and i32 %18, -256, !dbg !37
  %49 = icmp eq i32 %48, 2048, !dbg !37
  %50 = and i1 %16, %49, !dbg !38
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !39
  %52 = icmp sgt i32 %18, 2303, !dbg !40
  %53 = sext i32 %44 to i64, !dbg !41
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !41
  %55 = getelementptr i8, ptr addrspace(1) %54, i64 -4096, !dbg !41
  %56 = and i1 %16, %52, !dbg !42
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !43
  %58 = fadd float %26, 0x3F50624DE0000000, !dbg !44
  %59 = fadd float %28, 0x3F50624DE0000000, !dbg !44
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %60, 0, !dbg !45
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %61, 0, !dbg !45
  br i1 %.not.i, label %67, label %62, !dbg !45

62:                                               ; preds = %9
  br i1 %.not1.i, label %65, label %63, !dbg !45

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

67:                                               ; preds = %9
  br i1 %.not1.i, label %70, label %68, !dbg !45

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !45
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i4 = icmp eq i32 %72, 0, !dbg !45
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i7 = icmp eq i32 %73, 0, !dbg !45
  br i1 %.not.i4, label %79, label %74, !dbg !45

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %77, label %75, !dbg !45

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !45
  br label %__nv_sqrtf.exit8, !dbg !45

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !45
  br label %__nv_sqrtf.exit8, !dbg !45

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %82, label %80, !dbg !45

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !45
  br label %__nv_sqrtf.exit8, !dbg !45

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !45
  br label %__nv_sqrtf.exit8, !dbg !45

__nv_sqrtf.exit8:                                 ; preds = %75, %77, %80, %82
  %.0.i6 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !45
  %84 = extractvalue { i32, i32 } %42, 1, !dbg !32
  %85 = bitcast i32 %84 to float, !dbg !32
  %86 = extractvalue { i32, i32 } %47, 1, !dbg !36
  %87 = bitcast i32 %86 to float, !dbg !36
  %88 = fadd float %85, %87, !dbg !46
  %89 = icmp slt i32 %18, 2304, !dbg !47
  %90 = extractvalue { i32, i32 } %51, 1, !dbg !39
  %91 = extractvalue { i32, i32 } %57, 1, !dbg !43
  %.v3 = select i1 %89, i32 %90, i32 %91, !dbg !48
  %92 = bitcast i32 %.v3 to float, !dbg !48
  %93 = select i1 %35, float %88, float %92, !dbg !49
  %94 = bitcast i32 %23 to float, !dbg !19
  %95 = fsub float %93, %94, !dbg !50
  %96 = extractvalue { i32, i32 } %42, 0, !dbg !32
  %97 = bitcast i32 %96 to float, !dbg !32
  %98 = extractvalue { i32, i32 } %47, 0, !dbg !36
  %99 = bitcast i32 %98 to float, !dbg !36
  %100 = fadd float %97, %99, !dbg !46
  %101 = extractvalue { i32, i32 } %51, 0, !dbg !39
  %102 = extractvalue { i32, i32 } %57, 0, !dbg !43
  %.v = select i1 %89, i32 %101, i32 %102, !dbg !48
  %103 = bitcast i32 %.v to float, !dbg !48
  %104 = select i1 %35, float %100, float %103, !dbg !49
  %105 = bitcast i32 %22 to float, !dbg !19
  %106 = fsub float %104, %105, !dbg !50
  %107 = bitcast i32 %34 to float, !dbg !25
  %108 = bitcast i32 %33 to float, !dbg !25
  %109 = bitcast i32 %31 to float, !dbg !23
  %110 = bitcast i32 %30 to float, !dbg !23
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !51
  %113 = fmul float %106, %111, !dbg !52
  %114 = fmul float %95, %112, !dbg !52
  %115 = fmul float %113, %110, !dbg !53
  %116 = fmul float %114, %109, !dbg !53
  %117 = fadd float %115, %108, !dbg !54
  %118 = fadd float %116, %107, !dbg !54
  %119 = fcmp olt float %117, 0.000000e+00, !dbg !55
  %120 = fcmp olt float %118, 0.000000e+00, !dbg !55
  %121 = select i1 %119, float 0.000000e+00, float %117, !dbg !59
  %122 = select i1 %120, float 0.000000e+00, float %118, !dbg !59
  %123 = sext i32 %15 to i64, !dbg !60
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %123, !dbg !60
  %125 = bitcast float %104 to i32, !dbg !61
  %126 = bitcast float %93 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %125, i32 %126, ptr addrspace(1) %124, i1 %16) #3, !dbg !61
  %127 = getelementptr float, ptr addrspace(1) %7, i64 %123, !dbg !62
  %128 = bitcast float %121 to i32, !dbg !63
  %129 = bitcast float %122 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %127, i1 %16) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7ooo3w7cobtadxrvm7poasbxhc65aihp4cg25em47pvntpoox5.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 49, scope: !7)
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 61, scope: !7)
!32 = !DILocation(line: 37, column: 54, scope: !7)
!33 = !DILocation(line: 38, column: 49, scope: !7)
!34 = !DILocation(line: 38, column: 44, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 54, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 80, scope: !7)
!39 = !DILocation(line: 51, column: 72, scope: !7)
!40 = !DILocation(line: 52, column: 21, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 91, scope: !7)
!43 = !DILocation(line: 56, column: 83, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 27, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 35, scope: !7)
!49 = !DILocation(line: 0, scope: !7)
!50 = !DILocation(line: 61, column: 20, scope: !7)
!51 = !DILocation(line: 66, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 20, scope: !7)
!53 = !DILocation(line: 70, column: 20, scope: !7)
!54 = !DILocation(line: 71, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 74, column: 25, scope: !7)
!61 = !DILocation(line: 74, column: 37, scope: !7)
!62 = !DILocation(line: 75, column: 25, scope: !7)
!63 = !DILocation(line: 75, column: 37, scope: !7)
!64 = !DILocation(line: 75, column: 4, scope: !7)
