; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 6, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 8, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 5, !dbg !16
  %19 = lshr i32 %12, 2, !dbg !17
  %20 = and i32 %19, 31, !dbg !17
  %21 = or disjoint i32 %18, %20, !dbg !18
  %22 = shl i32 %21, 1, !dbg !19
  %23 = shl i32 %15, 12, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %16) #4, !dbg !23
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %1, i1 %16) #4, !dbg !24
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %2, i1 %16) #4, !dbg !25
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !25
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !25
  %32 = bitcast i32 %30 to float, !dbg !25
  %33 = bitcast i32 %31 to float, !dbg !25
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %3, i1 %16) #4, !dbg !26
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %4, i1 %16) #4, !dbg !27
  %36 = fadd float %32, 0x3EE4F8B580000000, !dbg !28
  %37 = fadd float %33, 0x3EE4F8B580000000, !dbg !28
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %38, 0, !dbg !29
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %39, 0, !dbg !29
  br i1 %.not.i, label %45, label %40, !dbg !29

40:                                               ; preds = %9
  br i1 %.not1.i, label %43, label %41, !dbg !29

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

45:                                               ; preds = %9
  br i1 %.not1.i, label %48, label %46, !dbg !29

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %41, %43, %46, %48
  %.0.i = phi float [ %42, %41 ], [ %44, %43 ], [ %47, %46 ], [ %49, %48 ], !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i3 = icmp eq i32 %50, 0, !dbg !29
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i6 = icmp eq i32 %51, 0, !dbg !29
  br i1 %.not.i3, label %57, label %52, !dbg !29

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %55, label %53, !dbg !29

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %60, label %58, !dbg !29

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

__nv_sqrtf.exit7:                                 ; preds = %53, %55, %58, %60
  %.0.i5 = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !29
  %62 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %63 = extractvalue { i32, i32 } %28, 1, !dbg !24
  %64 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %65 = extractvalue { i32, i32 } %28, 0, !dbg !24
  %66 = extractvalue { i32, i32 } %35, 1, !dbg !27
  %67 = extractvalue { i32, i32 } %35, 0, !dbg !27
  %68 = extractvalue { i32, i32 } %34, 1, !dbg !26
  %69 = extractvalue { i32, i32 } %34, 0, !dbg !26
  %70 = and i32 %13, 30, !dbg !17
  %71 = or disjoint i32 %18, %70, !dbg !18
  %72 = lshr i32 %12, 4, !dbg !12
  %73 = and i32 %72, 7, !dbg !12
  %74 = or disjoint i32 %11, %73, !dbg !13
  %75 = icmp slt i32 %74, 8, !dbg !14
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !30
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !30
  %78 = shl i32 %74, 12, !dbg !31
  %79 = add i32 %71, %78, !dbg !32
  %80 = sext i32 %79 to i64, !dbg !33
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !33
  %82 = shl i32 %12, 6, !dbg !34
  %83 = and i32 %82, 192, !dbg !34
  %84 = or disjoint i32 %83, %20, !dbg !34
  %85 = and i32 %13, 254, !dbg !34
  %86 = lshr exact i32 %83, 3, !dbg !34
  %87 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %86, !dbg !34
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %84, !dbg !34
  %89 = or disjoint i32 %84, 32, !dbg !34
  %90 = lshr i32 %89, 5, !dbg !34
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !34
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !34
  %93 = lshr i32 %85, 5, !dbg !34
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %93, !dbg !34
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %85, !dbg !34
  %96 = or disjoint i32 %85, 1, !dbg !34
  %97 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %96, !dbg !34
  %98 = getelementptr i1, ptr addrspace(1) %6, i64 %25, !dbg !35
  %99 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !23
  %100 = insertelement <2 x i32> %99, i32 %62, i64 1, !dbg !23
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !23
  %102 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !24
  %103 = insertelement <2 x i32> %102, i32 %63, i64 1, !dbg !24
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !24
  %105 = fsub <2 x float> %101, %104, !dbg !36
  %106 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !27
  %107 = insertelement <2 x i32> %106, i32 %66, i64 1, !dbg !27
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !27
  %109 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !26
  %110 = insertelement <2 x i32> %109, i32 %68, i64 1, !dbg !26
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !26
  %112 = insertelement <2 x float> poison, float %76, i64 0, !dbg !37
  %113 = insertelement <2 x float> %112, float %77, i64 1, !dbg !37
  %114 = fmul <2 x float> %105, %113, !dbg !37
  %115 = fmul <2 x float> %114, %111, !dbg !38
  %116 = fadd <2 x float> %115, %108, !dbg !39
  %117 = fcmp olt <2 x float> %116, zeroinitializer, !dbg !40
  %118 = select <2 x i1> %117, <2 x float> zeroinitializer, <2 x float> %116, !dbg !44
  %119 = fcmp ole <2 x float> %118, zeroinitializer, !dbg !45
  %120 = extractelement <2 x float> %118, i64 0, !dbg !34
  %121 = bitcast float %120 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %121, i1 true) #4, !dbg !34
  %122 = extractelement <2 x float> %118, i64 1, !dbg !34
  %123 = bitcast float %122 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %123, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %124 = load i32, ptr addrspace(3) %95, align 4, !dbg !34
  %125 = load i32, ptr addrspace(3) %97, align 4, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %81, i1 %75) #4, !dbg !34
  %126 = zext <2 x i1> %119 to <2 x i8>, !dbg !46
  %127 = bitcast <2 x i8> %126 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %127, ptr addrspace(1) %98, i1 %16) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm2bzjaawz4kie6xaips5j6hqukrgmbf37w3n7lkja33zonu4o42.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 52, column: 35, scope: !7)
!32 = !DILocation(line: 52, column: 30, scope: !7)
!33 = !DILocation(line: 52, column: 25, scope: !7)
!34 = !DILocation(line: 52, column: 47, scope: !7)
!35 = !DILocation(line: 53, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 49, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 51, column: 21, scope: !7)
!46 = !DILocation(line: 53, column: 54, scope: !7)
!47 = !DILocation(line: 53, column: 4, scope: !7)
