; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 1024, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = or disjoint i32 %13, 8, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %15 = sdiv i32 %.frozen, 16, !dbg !16
  %16 = mul i32 %15, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = shl nuw nsw i32 %13, 8, !dbg !18
  %18 = shl nuw nsw i32 %14, 8, !dbg !18
  %19 = shl i32 %15, 7, !dbg !19
  %20 = or disjoint i32 %19, %13, !dbg !20
  %21 = or disjoint i32 %19, %14, !dbg !20
  %22 = or disjoint i32 %20, 16, !dbg !20
  %23 = or disjoint i32 %20, 24, !dbg !20
  %24 = or disjoint i32 %20, 32, !dbg !20
  %25 = or disjoint i32 %20, 40, !dbg !20
  %26 = or disjoint i32 %20, 48, !dbg !20
  %27 = or disjoint i32 %20, 56, !dbg !20
  %28 = or disjoint i32 %20, 64, !dbg !20
  %29 = or disjoint i32 %20, 72, !dbg !20
  %30 = or disjoint i32 %20, 80, !dbg !20
  %31 = or disjoint i32 %20, 88, !dbg !20
  %32 = or disjoint i32 %20, 96, !dbg !20
  %33 = or disjoint i32 %20, 104, !dbg !20
  %34 = or disjoint i32 %20, 112, !dbg !20
  %35 = or disjoint i32 %20, 120, !dbg !20
  %36 = sdiv i32 %20, 16, !dbg !21
  %37 = sdiv i32 %21, 16, !dbg !21
  %38 = sdiv i32 %22, 16, !dbg !21
  %39 = sdiv i32 %23, 16, !dbg !21
  %40 = sdiv i32 %24, 16, !dbg !21
  %41 = sdiv i32 %25, 16, !dbg !21
  %42 = sdiv i32 %26, 16, !dbg !21
  %43 = sdiv i32 %27, 16, !dbg !21
  %44 = sdiv i32 %28, 16, !dbg !21
  %45 = sdiv i32 %29, 16, !dbg !21
  %46 = sdiv i32 %30, 16, !dbg !21
  %47 = sdiv i32 %31, 16, !dbg !21
  %48 = sdiv i32 %32, 16, !dbg !21
  %49 = sdiv i32 %33, 16, !dbg !21
  %50 = sdiv i32 %34, 16, !dbg !21
  %51 = sdiv i32 %35, 16, !dbg !21
  %52 = srem i32 %36, 16, !dbg !22
  %53 = srem i32 %37, 16, !dbg !22
  %54 = srem i32 %38, 16, !dbg !22
  %55 = srem i32 %39, 16, !dbg !22
  %56 = srem i32 %40, 16, !dbg !22
  %57 = srem i32 %41, 16, !dbg !22
  %58 = srem i32 %42, 16, !dbg !22
  %59 = srem i32 %43, 16, !dbg !22
  %60 = srem i32 %44, 16, !dbg !22
  %61 = srem i32 %45, 16, !dbg !22
  %62 = srem i32 %46, 16, !dbg !22
  %63 = srem i32 %47, 16, !dbg !22
  %64 = srem i32 %48, 16, !dbg !22
  %65 = srem i32 %49, 16, !dbg !22
  %66 = srem i32 %50, 16, !dbg !22
  %67 = srem i32 %51, 16, !dbg !22
  %68 = shl nsw i32 %52, 12, !dbg !23
  %69 = shl nsw i32 %53, 12, !dbg !23
  %70 = shl nsw i32 %54, 12, !dbg !23
  %71 = shl nsw i32 %55, 12, !dbg !23
  %72 = shl nsw i32 %56, 12, !dbg !23
  %73 = shl nsw i32 %57, 12, !dbg !23
  %74 = shl nsw i32 %58, 12, !dbg !23
  %75 = shl nsw i32 %59, 12, !dbg !23
  %76 = shl nsw i32 %60, 12, !dbg !23
  %77 = shl nsw i32 %61, 12, !dbg !23
  %78 = shl nsw i32 %62, 12, !dbg !23
  %79 = shl nsw i32 %63, 12, !dbg !23
  %80 = shl nsw i32 %64, 12, !dbg !23
  %81 = shl nsw i32 %65, 12, !dbg !23
  %82 = shl nsw i32 %66, 12, !dbg !23
  %83 = shl nsw i32 %67, 12, !dbg !23
  %84 = or disjoint i32 %17, %71, !dbg !24
  %85 = or disjoint i32 %17, %73, !dbg !24
  %86 = or disjoint i32 %17, %75, !dbg !24
  %87 = or disjoint i32 %17, %77, !dbg !24
  %88 = or disjoint i32 %17, %79, !dbg !24
  %89 = or disjoint i32 %17, %81, !dbg !24
  %90 = or disjoint i32 %17, %83, !dbg !24
  %91 = shl nsw i32 %.decomposed, 13, !dbg !25
  %92 = add i32 %20, %91, !dbg !26
  %93 = add i32 %21, %91, !dbg !26
  %94 = add i32 %22, %91, !dbg !26
  %95 = add i32 %23, %91, !dbg !26
  %96 = add i32 %24, %91, !dbg !26
  %97 = add i32 %25, %91, !dbg !26
  %98 = add i32 %26, %91, !dbg !26
  %99 = add i32 %27, %91, !dbg !26
  %100 = add i32 %28, %91, !dbg !26
  %101 = add i32 %29, %91, !dbg !26
  %102 = add i32 %30, %91, !dbg !26
  %103 = add i32 %31, %91, !dbg !26
  %104 = add i32 %32, %91, !dbg !26
  %105 = add i32 %33, %91, !dbg !26
  %106 = add i32 %34, %91, !dbg !26
  %107 = add i32 %35, %91, !dbg !26
  %108 = sdiv i32 %92, 65536, !dbg !27
  %109 = sdiv i32 %93, 65536, !dbg !27
  %110 = sdiv i32 %94, 65536, !dbg !27
  %111 = sdiv i32 %95, 65536, !dbg !27
  %112 = sdiv i32 %96, 65536, !dbg !27
  %113 = sdiv i32 %97, 65536, !dbg !27
  %114 = sdiv i32 %98, 65536, !dbg !27
  %115 = sdiv i32 %99, 65536, !dbg !27
  %116 = sdiv i32 %100, 65536, !dbg !27
  %117 = sdiv i32 %101, 65536, !dbg !27
  %118 = sdiv i32 %102, 65536, !dbg !27
  %119 = sdiv i32 %103, 65536, !dbg !27
  %120 = sdiv i32 %104, 65536, !dbg !27
  %121 = sdiv i32 %105, 65536, !dbg !27
  %122 = sdiv i32 %106, 65536, !dbg !27
  %123 = sdiv i32 %107, 65536, !dbg !27
  %124 = shl nsw i32 %108, 16, !dbg !28
  %125 = shl nsw i32 %109, 16, !dbg !28
  %126 = shl nsw i32 %110, 16, !dbg !28
  %127 = shl nsw i32 %111, 16, !dbg !28
  %128 = shl nsw i32 %112, 16, !dbg !28
  %129 = shl nsw i32 %113, 16, !dbg !28
  %130 = shl nsw i32 %114, 16, !dbg !28
  %131 = shl nsw i32 %115, 16, !dbg !28
  %132 = shl nsw i32 %116, 16, !dbg !28
  %133 = shl nsw i32 %117, 16, !dbg !28
  %134 = shl nsw i32 %118, 16, !dbg !28
  %135 = shl nsw i32 %119, 16, !dbg !28
  %136 = shl nsw i32 %120, 16, !dbg !28
  %137 = shl nsw i32 %121, 16, !dbg !28
  %138 = shl nsw i32 %122, 16, !dbg !28
  %139 = shl nsw i32 %123, 16, !dbg !28
  %140 = sdiv i32 %92, 256, !dbg !29
  %141 = sdiv i32 %93, 256, !dbg !29
  %142 = sdiv i32 %94, 256, !dbg !29
  %143 = sdiv i32 %95, 256, !dbg !29
  %144 = sdiv i32 %96, 256, !dbg !29
  %145 = sdiv i32 %97, 256, !dbg !29
  %146 = sdiv i32 %98, 256, !dbg !29
  %147 = sdiv i32 %99, 256, !dbg !29
  %148 = sdiv i32 %100, 256, !dbg !29
  %149 = sdiv i32 %101, 256, !dbg !29
  %150 = sdiv i32 %102, 256, !dbg !29
  %151 = sdiv i32 %103, 256, !dbg !29
  %152 = sdiv i32 %104, 256, !dbg !29
  %153 = sdiv i32 %105, 256, !dbg !29
  %154 = sdiv i32 %106, 256, !dbg !29
  %155 = sdiv i32 %107, 256, !dbg !29
  %156 = srem i32 %140, 256, !dbg !30
  %157 = srem i32 %141, 256, !dbg !30
  %158 = srem i32 %142, 256, !dbg !30
  %159 = srem i32 %143, 256, !dbg !30
  %160 = srem i32 %144, 256, !dbg !30
  %161 = srem i32 %145, 256, !dbg !30
  %162 = srem i32 %146, 256, !dbg !30
  %163 = srem i32 %147, 256, !dbg !30
  %164 = srem i32 %148, 256, !dbg !30
  %165 = srem i32 %149, 256, !dbg !30
  %166 = srem i32 %150, 256, !dbg !30
  %167 = srem i32 %151, 256, !dbg !30
  %168 = srem i32 %152, 256, !dbg !30
  %169 = srem i32 %153, 256, !dbg !30
  %170 = srem i32 %154, 256, !dbg !30
  %171 = srem i32 %155, 256, !dbg !30
  %172 = add i32 %156, %124, !dbg !24
  %173 = add i32 %172, %17, !dbg !31
  %174 = add i32 %173, %68, !dbg !32
  %175 = add i32 %157, %125, !dbg !24
  %176 = add i32 %175, %18, !dbg !31
  %177 = add i32 %176, %69, !dbg !32
  %178 = add i32 %158, %126, !dbg !24
  %179 = add i32 %178, %17, !dbg !31
  %180 = add i32 %179, %70, !dbg !32
  %181 = add i32 %159, %127, !dbg !24
  %182 = add i32 %181, 2048, !dbg !31
  %183 = add i32 %182, %84, !dbg !32
  %184 = add i32 %160, %128, !dbg !24
  %185 = add i32 %184, %17, !dbg !31
  %186 = add i32 %185, %72, !dbg !32
  %187 = add i32 %161, %129, !dbg !24
  %188 = add i32 %187, 2048, !dbg !31
  %189 = add i32 %188, %85, !dbg !32
  %190 = add i32 %162, %130, !dbg !24
  %191 = add i32 %190, %17, !dbg !31
  %192 = add i32 %191, %74, !dbg !32
  %193 = add i32 %163, %131, !dbg !24
  %194 = add i32 %193, 2048, !dbg !31
  %195 = add i32 %194, %86, !dbg !32
  %196 = add i32 %164, %132, !dbg !24
  %197 = add i32 %196, %17, !dbg !31
  %198 = add i32 %197, %76, !dbg !32
  %199 = add i32 %165, %133, !dbg !24
  %200 = add i32 %199, 2048, !dbg !31
  %201 = add i32 %200, %87, !dbg !32
  %202 = add i32 %166, %134, !dbg !24
  %203 = add i32 %202, %17, !dbg !31
  %204 = add i32 %203, %78, !dbg !32
  %205 = add i32 %167, %135, !dbg !24
  %206 = add i32 %205, 2048, !dbg !31
  %207 = add i32 %206, %88, !dbg !32
  %208 = add i32 %168, %136, !dbg !24
  %209 = add i32 %208, %17, !dbg !31
  %210 = add i32 %209, %80, !dbg !32
  %211 = add i32 %169, %137, !dbg !24
  %212 = add i32 %211, 2048, !dbg !31
  %213 = add i32 %212, %89, !dbg !32
  %214 = add i32 %170, %138, !dbg !24
  %215 = add i32 %214, %17, !dbg !31
  %216 = add i32 %215, %82, !dbg !32
  %217 = add i32 %171, %139, !dbg !24
  %218 = add i32 %217, 2048, !dbg !31
  %219 = add i32 %218, %90, !dbg !32
  %220 = sext i32 %174 to i64, !dbg !33
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !33
  %222 = sext i32 %177 to i64, !dbg !33
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !33
  %224 = sext i32 %180 to i64, !dbg !33
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !33
  %226 = sext i32 %183 to i64, !dbg !33
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !33
  %228 = sext i32 %186 to i64, !dbg !33
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !33
  %230 = sext i32 %189 to i64, !dbg !33
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !33
  %232 = sext i32 %192 to i64, !dbg !33
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !33
  %234 = sext i32 %195 to i64, !dbg !33
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !33
  %236 = sext i32 %198 to i64, !dbg !33
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !33
  %238 = sext i32 %201 to i64, !dbg !33
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !33
  %240 = sext i32 %204 to i64, !dbg !33
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !33
  %242 = sext i32 %207 to i64, !dbg !33
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !33
  %244 = sext i32 %210 to i64, !dbg !33
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !33
  %246 = sext i32 %213 to i64, !dbg !33
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !33
  %248 = sext i32 %216 to i64, !dbg !33
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !33
  %250 = sext i32 %219 to i64, !dbg !33
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !33
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %253 = bitcast i32 %252 to float, !dbg !34
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %255 = bitcast i32 %254 to float, !dbg !34
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %257 = bitcast i32 %256 to float, !dbg !34
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %259 = bitcast i32 %258 to float, !dbg !34
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %261 = bitcast i32 %260 to float, !dbg !34
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %263 = bitcast i32 %262 to float, !dbg !34
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %274 = sext i32 %156 to i64, !dbg !35
  %275 = getelementptr float, ptr addrspace(1) %1, i64 %274, !dbg !35
  %276 = sext i32 %157 to i64, !dbg !35
  %277 = getelementptr float, ptr addrspace(1) %1, i64 %276, !dbg !35
  %278 = sext i32 %158 to i64, !dbg !35
  %279 = getelementptr float, ptr addrspace(1) %1, i64 %278, !dbg !35
  %280 = sext i32 %159 to i64, !dbg !35
  %281 = getelementptr float, ptr addrspace(1) %1, i64 %280, !dbg !35
  %282 = sext i32 %160 to i64, !dbg !35
  %283 = getelementptr float, ptr addrspace(1) %1, i64 %282, !dbg !35
  %284 = sext i32 %161 to i64, !dbg !35
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %284, !dbg !35
  %286 = sext i32 %162 to i64, !dbg !35
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !35
  %288 = sext i32 %163 to i64, !dbg !35
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %288, !dbg !35
  %290 = sext i32 %164 to i64, !dbg !35
  %291 = getelementptr float, ptr addrspace(1) %1, i64 %290, !dbg !35
  %292 = sext i32 %165 to i64, !dbg !35
  %293 = getelementptr float, ptr addrspace(1) %1, i64 %292, !dbg !35
  %294 = sext i32 %166 to i64, !dbg !35
  %295 = getelementptr float, ptr addrspace(1) %1, i64 %294, !dbg !35
  %296 = sext i32 %167 to i64, !dbg !35
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %296, !dbg !35
  %298 = sext i32 %168 to i64, !dbg !35
  %299 = getelementptr float, ptr addrspace(1) %1, i64 %298, !dbg !35
  %300 = sext i32 %169 to i64, !dbg !35
  %301 = getelementptr float, ptr addrspace(1) %1, i64 %300, !dbg !35
  %302 = sext i32 %170 to i64, !dbg !35
  %303 = getelementptr float, ptr addrspace(1) %1, i64 %302, !dbg !35
  %304 = sext i32 %171 to i64, !dbg !35
  %305 = getelementptr float, ptr addrspace(1) %1, i64 %304, !dbg !35
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %307 = bitcast i32 %306 to float, !dbg !36
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %309 = bitcast i32 %308 to float, !dbg !36
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %311 = bitcast i32 %310 to float, !dbg !36
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %313 = bitcast i32 %312 to float, !dbg !36
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %315 = bitcast i32 %314 to float, !dbg !36
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %317 = bitcast i32 %316 to float, !dbg !36
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %295, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %301, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %328 = or disjoint i32 %17, 131072, !dbg !37
  %329 = or disjoint i32 %17, 133120, !dbg !37
  %330 = add i32 %172, %328, !dbg !38
  %331 = add i32 %330, %68, !dbg !39
  %332 = add i32 %175, 131072, !dbg !40
  %333 = add i32 %332, %18, !dbg !38
  %334 = add i32 %333, %69, !dbg !39
  %335 = add i32 %178, %328, !dbg !38
  %336 = add i32 %335, %70, !dbg !39
  %337 = add i32 %181, %329, !dbg !38
  %338 = add i32 %337, %71, !dbg !39
  %339 = add i32 %184, %328, !dbg !38
  %340 = add i32 %339, %72, !dbg !39
  %341 = add i32 %187, %329, !dbg !38
  %342 = add i32 %341, %73, !dbg !39
  %343 = add i32 %190, %328, !dbg !38
  %344 = add i32 %343, %74, !dbg !39
  %345 = add i32 %193, %329, !dbg !38
  %346 = add i32 %345, %75, !dbg !39
  %347 = add i32 %196, %328, !dbg !38
  %348 = add i32 %347, %76, !dbg !39
  %349 = add i32 %199, %329, !dbg !38
  %350 = add i32 %349, %77, !dbg !39
  %351 = add i32 %202, %328, !dbg !38
  %352 = add i32 %351, %78, !dbg !39
  %353 = add i32 %205, %329, !dbg !38
  %354 = add i32 %353, %79, !dbg !39
  %355 = add i32 %208, %328, !dbg !38
  %356 = add i32 %355, %80, !dbg !39
  %357 = add i32 %211, %329, !dbg !38
  %358 = add i32 %357, %81, !dbg !39
  %359 = add i32 %214, %328, !dbg !38
  %360 = add i32 %359, %82, !dbg !39
  %361 = add i32 %217, %329, !dbg !38
  %362 = add i32 %361, %83, !dbg !39
  %363 = sext i32 %331 to i64, !dbg !41
  %364 = getelementptr float, ptr addrspace(1) %0, i64 %363, !dbg !41
  %365 = sext i32 %334 to i64, !dbg !41
  %366 = getelementptr float, ptr addrspace(1) %0, i64 %365, !dbg !41
  %367 = sext i32 %336 to i64, !dbg !41
  %368 = getelementptr float, ptr addrspace(1) %0, i64 %367, !dbg !41
  %369 = sext i32 %338 to i64, !dbg !41
  %370 = getelementptr float, ptr addrspace(1) %0, i64 %369, !dbg !41
  %371 = sext i32 %340 to i64, !dbg !41
  %372 = getelementptr float, ptr addrspace(1) %0, i64 %371, !dbg !41
  %373 = sext i32 %342 to i64, !dbg !41
  %374 = getelementptr float, ptr addrspace(1) %0, i64 %373, !dbg !41
  %375 = sext i32 %344 to i64, !dbg !41
  %376 = getelementptr float, ptr addrspace(1) %0, i64 %375, !dbg !41
  %377 = sext i32 %346 to i64, !dbg !41
  %378 = getelementptr float, ptr addrspace(1) %0, i64 %377, !dbg !41
  %379 = sext i32 %348 to i64, !dbg !41
  %380 = getelementptr float, ptr addrspace(1) %0, i64 %379, !dbg !41
  %381 = sext i32 %350 to i64, !dbg !41
  %382 = getelementptr float, ptr addrspace(1) %0, i64 %381, !dbg !41
  %383 = sext i32 %352 to i64, !dbg !41
  %384 = getelementptr float, ptr addrspace(1) %0, i64 %383, !dbg !41
  %385 = sext i32 %354 to i64, !dbg !41
  %386 = getelementptr float, ptr addrspace(1) %0, i64 %385, !dbg !41
  %387 = sext i32 %356 to i64, !dbg !41
  %388 = getelementptr float, ptr addrspace(1) %0, i64 %387, !dbg !41
  %389 = sext i32 %358 to i64, !dbg !41
  %390 = getelementptr float, ptr addrspace(1) %0, i64 %389, !dbg !41
  %391 = sext i32 %360 to i64, !dbg !41
  %392 = getelementptr float, ptr addrspace(1) %0, i64 %391, !dbg !41
  %393 = sext i32 %362 to i64, !dbg !41
  %394 = getelementptr float, ptr addrspace(1) %0, i64 %393, !dbg !41
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %364, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %396 = bitcast i32 %395 to float, !dbg !42
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %366, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %398 = bitcast i32 %397 to float, !dbg !42
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %400 = bitcast i32 %399 to float, !dbg !42
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %370, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %402 = bitcast i32 %401 to float, !dbg !42
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %372, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %404 = bitcast i32 %403 to float, !dbg !42
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %374, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %406 = bitcast i32 %405 to float, !dbg !42
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %376, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %378, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %380, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %382, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %384, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %386, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %394, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %417 = fadd float %253, %307, !dbg !43
  %418 = fadd float %255, %309, !dbg !43
  %419 = fadd float %257, %311, !dbg !43
  %420 = fadd float %259, %313, !dbg !43
  %421 = fadd float %261, %315, !dbg !43
  %422 = fadd float %263, %317, !dbg !43
  %423 = fadd float %307, %396, !dbg !44
  %424 = fadd float %309, %398, !dbg !44
  %425 = fadd float %311, %400, !dbg !44
  %426 = fadd float %313, %402, !dbg !44
  %427 = fadd float %315, %404, !dbg !44
  %428 = fadd float %317, %406, !dbg !44
  %429 = fsub float %417, %423, !dbg !45
  %430 = fsub float %418, %424, !dbg !45
  %431 = fsub float %419, %425, !dbg !45
  %432 = fsub float %420, %426, !dbg !45
  %433 = fsub float %421, %427, !dbg !45
  %434 = fsub float %422, %428, !dbg !45
  %435 = fmul float %429, %429, !dbg !46
  %436 = fmul float %430, %430, !dbg !46
  %437 = fmul float %431, %431, !dbg !46
  %438 = fmul float %432, %432, !dbg !46
  %439 = fmul float %433, %433, !dbg !46
  %440 = fmul float %434, %434, !dbg !46
  %441 = insertelement <2 x i32> poison, i32 %264, i64 0, !dbg !34
  %442 = insertelement <2 x i32> %441, i32 %265, i64 1, !dbg !34
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !34
  %444 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !36
  %445 = insertelement <2 x i32> %444, i32 %319, i64 1, !dbg !36
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !36
  %447 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !42
  %448 = insertelement <2 x i32> %447, i32 %408, i64 1, !dbg !42
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !42
  %450 = fadd <2 x float> %443, %446, !dbg !43
  %451 = fadd <2 x float> %446, %449, !dbg !44
  %452 = fsub <2 x float> %450, %451, !dbg !45
  %453 = fmul <2 x float> %452, %452, !dbg !46
  %454 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !34
  %455 = insertelement <2 x i32> %454, i32 %267, i64 1, !dbg !34
  %456 = bitcast <2 x i32> %455 to <2 x float>, !dbg !34
  %457 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !36
  %458 = insertelement <2 x i32> %457, i32 %321, i64 1, !dbg !36
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !36
  %460 = insertelement <2 x i32> poison, i32 %409, i64 0, !dbg !42
  %461 = insertelement <2 x i32> %460, i32 %410, i64 1, !dbg !42
  %462 = bitcast <2 x i32> %461 to <2 x float>, !dbg !42
  %463 = fadd <2 x float> %456, %459, !dbg !43
  %464 = fadd <2 x float> %459, %462, !dbg !44
  %465 = fsub <2 x float> %463, %464, !dbg !45
  %466 = fmul <2 x float> %465, %465, !dbg !46
  %467 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !34
  %468 = insertelement <2 x i32> %467, i32 %269, i64 1, !dbg !34
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !34
  %470 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !36
  %471 = insertelement <2 x i32> %470, i32 %323, i64 1, !dbg !36
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !36
  %473 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !42
  %474 = insertelement <2 x i32> %473, i32 %412, i64 1, !dbg !42
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !42
  %476 = fadd <2 x float> %469, %472, !dbg !43
  %477 = fadd <2 x float> %472, %475, !dbg !44
  %478 = fsub <2 x float> %476, %477, !dbg !45
  %479 = fmul <2 x float> %478, %478, !dbg !46
  %480 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !34
  %481 = insertelement <2 x i32> %480, i32 %271, i64 1, !dbg !34
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !34
  %483 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !36
  %484 = insertelement <2 x i32> %483, i32 %325, i64 1, !dbg !36
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !36
  %486 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !42
  %487 = insertelement <2 x i32> %486, i32 %414, i64 1, !dbg !42
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !42
  %489 = fadd <2 x float> %482, %485, !dbg !43
  %490 = fadd <2 x float> %485, %488, !dbg !44
  %491 = fsub <2 x float> %489, %490, !dbg !45
  %492 = fmul <2 x float> %491, %491, !dbg !46
  %493 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !34
  %494 = insertelement <2 x i32> %493, i32 %273, i64 1, !dbg !34
  %495 = bitcast <2 x i32> %494 to <2 x float>, !dbg !34
  %496 = insertelement <2 x i32> poison, i32 %326, i64 0, !dbg !36
  %497 = insertelement <2 x i32> %496, i32 %327, i64 1, !dbg !36
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !36
  %499 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !42
  %500 = insertelement <2 x i32> %499, i32 %416, i64 1, !dbg !42
  %501 = bitcast <2 x i32> %500 to <2 x float>, !dbg !42
  %502 = fadd <2 x float> %495, %498, !dbg !43
  %503 = fadd <2 x float> %498, %501, !dbg !44
  %504 = fsub <2 x float> %502, %503, !dbg !45
  %505 = fmul <2 x float> %504, %504, !dbg !46
  %506 = fadd float %435, %436, !dbg !47
  %507 = fadd float %506, %437, !dbg !47
  %508 = fadd float %507, %438, !dbg !47
  %509 = fadd float %508, %439, !dbg !47
  %510 = fadd float %509, %440, !dbg !47
  %511 = extractelement <2 x float> %453, i64 0, !dbg !47
  %512 = fadd float %510, %511, !dbg !47
  %513 = extractelement <2 x float> %453, i64 1, !dbg !47
  %514 = fadd float %512, %513, !dbg !47
  %515 = extractelement <2 x float> %466, i64 0, !dbg !47
  %516 = fadd float %514, %515, !dbg !47
  %517 = extractelement <2 x float> %466, i64 1, !dbg !47
  %518 = fadd float %516, %517, !dbg !47
  %519 = extractelement <2 x float> %479, i64 0, !dbg !47
  %520 = fadd float %518, %519, !dbg !47
  %521 = extractelement <2 x float> %479, i64 1, !dbg !47
  %522 = fadd float %520, %521, !dbg !47
  %523 = extractelement <2 x float> %492, i64 0, !dbg !47
  %524 = fadd float %522, %523, !dbg !47
  %525 = extractelement <2 x float> %492, i64 1, !dbg !47
  %526 = fadd float %524, %525, !dbg !47
  %527 = extractelement <2 x float> %505, i64 0, !dbg !47
  %528 = fadd float %526, %527, !dbg !47
  %529 = extractelement <2 x float> %505, i64 1, !dbg !47
  %530 = fadd float %528, %529, !dbg !47
  %531 = shl nuw nsw i32 %9, 3, !dbg !52
  %532 = or disjoint i32 %531, %13, !dbg !52
  %533 = getelementptr float, ptr addrspace(3) @global_smem, i32 %532, !dbg !52
  %534 = bitcast float %530 to i32, !dbg !52
  %535 = select i1 %11, i32 %534, i32 0, !dbg !47
  %536 = insertelement <1 x i32> poison, i32 %535, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %533, <1 x i32> %536, i1 true) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %537 = icmp slt i32 %8, 256, !dbg !52
  %538 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !52
  %539 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %538, i1 %537) #3, !dbg !52
  %540 = bitcast i32 %539 to float, !dbg !52
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 4, i32 31), !dbg !52
  %542 = bitcast i32 %541 to float, !dbg !52
  %543 = fadd float %540, %542, !dbg !47
  %544 = bitcast float %543 to i32, !dbg !52
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 2, i32 31), !dbg !52
  %546 = bitcast i32 %545 to float, !dbg !52
  %547 = fadd float %543, %546, !dbg !47
  %548 = bitcast float %547 to i32, !dbg !52
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 1, i32 31), !dbg !52
  %550 = bitcast i32 %549 to float, !dbg !52
  %551 = fadd float %547, %550, !dbg !47
  %552 = and i32 %8, 7, !dbg !52
  %553 = icmp eq i32 %552, 0, !dbg !52
  %554 = and i1 %537, %553, !dbg !52
  %555 = bitcast float %551 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %538, <1 x i32> %555, i1 %554) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %556 = getelementptr float, ptr addrspace(3) @global_smem, i32 %531, !dbg !52
  %557 = load i32, ptr addrspace(3) %556, align 16, !dbg !52
  %558 = sext i32 %10 to i64, !dbg !53
  %559 = getelementptr float, ptr addrspace(1) %2, i64 %558, !dbg !53
  %560 = icmp eq i32 %13, 0, !dbg !54
  %561 = and i1 %560, %11, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %557, ptr addrspace(1) %559, i1 %561) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb7zp2htq3yapr37cpdirczttpokve7uwyjrfgggem5trs3gbhiu.py", directory: "inductor_cache/b7")
!4 = !{ptr @triton_per_fused_mean_pow_sub_17, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_17", linkageName: "triton_per_fused_mean_pow_sub_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 66, scope: !7)
!20 = !DILocation(line: 33, column: 62, scope: !7)
!21 = !DILocation(line: 33, column: 73, scope: !7)
!22 = !DILocation(line: 33, column: 79, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 113, scope: !7)
!26 = !DILocation(line: 33, column: 108, scope: !7)
!27 = !DILocation(line: 33, column: 120, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 159, scope: !7)
!30 = !DILocation(line: 33, column: 166, scope: !7)
!31 = !DILocation(line: 33, column: 86, scope: !7)
!32 = !DILocation(line: 33, column: 131, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 174, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 73, scope: !7)
!37 = !DILocation(line: 35, column: 39, scope: !7)
!38 = !DILocation(line: 35, column: 95, scope: !7)
!39 = !DILocation(line: 35, column: 140, scope: !7)
!40 = !DILocation(line: 35, column: 57, scope: !7)
!41 = !DILocation(line: 35, column: 30, scope: !7)
!42 = !DILocation(line: 35, column: 183, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!51 = !DILocation(line: 42, column: 25, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 43, column: 25, scope: !7)
!54 = !DILocation(line: 43, column: 37, scope: !7)
!55 = !DILocation(line: 43, column: 4, scope: !7)
