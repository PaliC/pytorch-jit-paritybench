; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mul_relu_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = icmp slt i32 %10, 3916800, !dbg !14
  %13 = icmp slt i32 %11, 3916800, !dbg !14
  %14 = srem i32 %10, 1088, !dbg !15
  %15 = srem i32 %11, 1088, !dbg !15
  %16 = sext i32 %10 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = sext i32 %11 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 %12) #1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %30 = sext i32 %14 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = sext i32 %15 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %12) #1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %12) #1, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %56 = insertelement <8 x i32> poison, i32 %29, i64 0, !dbg !17
  %57 = insertelement <8 x i32> %56, i32 %28, i64 1, !dbg !17
  %58 = insertelement <8 x i32> %57, i32 %27, i64 2, !dbg !17
  %59 = insertelement <8 x i32> %58, i32 %26, i64 3, !dbg !17
  %60 = insertelement <8 x i32> %59, i32 %24, i64 4, !dbg !17
  %61 = insertelement <8 x i32> %60, i32 %23, i64 5, !dbg !17
  %62 = insertelement <8 x i32> %61, i32 %22, i64 6, !dbg !17
  %63 = insertelement <8 x i32> %62, i32 %21, i64 7, !dbg !17
  %64 = bitcast <8 x i32> %63 to <8 x float>, !dbg !17
  %65 = insertelement <8 x i32> poison, i32 %43, i64 0, !dbg !19
  %66 = insertelement <8 x i32> %65, i32 %42, i64 1, !dbg !19
  %67 = insertelement <8 x i32> %66, i32 %41, i64 2, !dbg !19
  %68 = insertelement <8 x i32> %67, i32 %40, i64 3, !dbg !19
  %69 = insertelement <8 x i32> %68, i32 %38, i64 4, !dbg !19
  %70 = insertelement <8 x i32> %69, i32 %37, i64 5, !dbg !19
  %71 = insertelement <8 x i32> %70, i32 %36, i64 6, !dbg !19
  %72 = insertelement <8 x i32> %71, i32 %35, i64 7, !dbg !19
  %73 = bitcast <8 x i32> %72 to <8 x float>, !dbg !19
  %74 = insertelement <8 x i32> poison, i32 %55, i64 0, !dbg !21
  %75 = insertelement <8 x i32> %74, i32 %54, i64 1, !dbg !21
  %76 = insertelement <8 x i32> %75, i32 %53, i64 2, !dbg !21
  %77 = insertelement <8 x i32> %76, i32 %52, i64 3, !dbg !21
  %78 = insertelement <8 x i32> %77, i32 %50, i64 4, !dbg !21
  %79 = insertelement <8 x i32> %78, i32 %49, i64 5, !dbg !21
  %80 = insertelement <8 x i32> %79, i32 %48, i64 6, !dbg !21
  %81 = insertelement <8 x i32> %80, i32 %47, i64 7, !dbg !21
  %82 = bitcast <8 x i32> %81 to <8 x float>, !dbg !21
  %83 = fadd <8 x float> %64, %73, !dbg !22
  %84 = fmul <8 x float> %83, splat (float 0x3FB99999A0000000), !dbg !23
  %85 = fadd <8 x float> %84, %82, !dbg !24
  %86 = fcmp olt <8 x float> %85, zeroinitializer, !dbg !25
  %87 = extractelement <8 x i1> %86, i64 7, !dbg !29
  %88 = extractelement <8 x i1> %86, i64 6, !dbg !29
  %89 = extractelement <8 x i1> %86, i64 5, !dbg !29
  %90 = extractelement <8 x i1> %86, i64 4, !dbg !29
  %91 = extractelement <8 x i1> %86, i64 3, !dbg !29
  %92 = extractelement <8 x i1> %86, i64 2, !dbg !29
  %93 = extractelement <8 x i1> %86, i64 1, !dbg !29
  %94 = extractelement <8 x i1> %86, i64 0, !dbg !29
  %bc = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %95 = extractelement <8 x i32> %bc, i64 7, !dbg !30
  %96 = select i1 %87, i32 0, i32 %95, !dbg !29
  %bc1 = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %97 = extractelement <8 x i32> %bc1, i64 6, !dbg !30
  %98 = select i1 %88, i32 0, i32 %97, !dbg !29
  %bc2 = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %99 = extractelement <8 x i32> %bc2, i64 5, !dbg !30
  %100 = select i1 %89, i32 0, i32 %99, !dbg !29
  %bc3 = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %101 = extractelement <8 x i32> %bc3, i64 4, !dbg !30
  %102 = select i1 %90, i32 0, i32 %101, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %96, i32 %98, i32 %100, i32 %102, ptr addrspace(1) %17, i1 %12) #1, !dbg !30
  %bc4 = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %103 = extractelement <8 x i32> %bc4, i64 3, !dbg !30
  %104 = select i1 %91, i32 0, i32 %103, !dbg !29
  %bc5 = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %105 = extractelement <8 x i32> %bc5, i64 2, !dbg !30
  %106 = select i1 %92, i32 0, i32 %105, !dbg !29
  %bc6 = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %107 = extractelement <8 x i32> %bc6, i64 1, !dbg !30
  %108 = select i1 %93, i32 0, i32 %107, !dbg !29
  %bc7 = bitcast <8 x float> %85 to <8 x i32>, !dbg !30
  %109 = extractelement <8 x i32> %bc7, i64 0, !dbg !30
  %110 = select i1 %94, i32 0, i32 %109, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %104, i32 %106, i32 %108, i32 %110, ptr addrspace(1) %19, i1 %13) #1, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crnlbut7k27d3vnkeq6azo2ixygqdlcdlk4h3psp3sy5y3u2552l.py", directory: "inductor_cache/rn")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_relu_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_relu_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_relu_41", linkageName: "triton_poi_fused_add_convolution_mul_relu_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 31, column: 18, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 34, column: 40, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 35, column: 39, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
