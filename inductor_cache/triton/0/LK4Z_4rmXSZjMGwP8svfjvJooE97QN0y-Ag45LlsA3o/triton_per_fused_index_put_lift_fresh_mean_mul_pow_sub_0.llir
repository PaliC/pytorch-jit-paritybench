; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_index_put_lift_fresh_mean_mul_pow_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %24 = insertelement <2 x i32> %23, i32 %14, i64 1, !dbg !12
  %25 = bitcast <2 x i32> %24 to <2 x float>, !dbg !12
  %26 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %27 = insertelement <2 x i32> %26, i32 %20, i64 1, !dbg !14
  %28 = bitcast <2 x i32> %27 to <2 x float>, !dbg !14
  %29 = fcmp olt <2 x float> %25, splat (float 0x3FD21CAC00000000), !dbg !15
  %30 = select <2 x i1> %29, <2 x float> splat (float 1.000000e+00), <2 x float> %25, !dbg !16
  %31 = fcmp olt <2 x float> %30, splat (float 0x3FD6978D40000000), !dbg !17
  %32 = select <2 x i1> %31, <2 x float> splat (float 2.000000e+00), <2 x float> %30, !dbg !18
  %33 = fcmp olt <2 x float> %32, splat (float 0x3FDB22D0E0000000), !dbg !19
  %34 = select <2 x i1> %33, <2 x float> splat (float 5.000000e+00), <2 x float> %32, !dbg !20
  %35 = fcmp olt <2 x float> %34, splat (float 0x3FE2147AE0000000), !dbg !21
  %36 = select <2 x i1> %35, <2 x float> splat (float 1.000000e+01), <2 x float> %34, !dbg !22
  %37 = fcmp olt <2 x float> %36, splat (float 1.000000e+00), !dbg !23
  %38 = select <2 x i1> %37, <2 x float> splat (float 3.000000e+01), <2 x float> %36, !dbg !24
  %39 = fsub <2 x float> %25, %28, !dbg !25
  %40 = fmul <2 x float> %39, %39, !dbg !26
  %41 = fmul <2 x float> %40, %38, !dbg !27
  %42 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !12
  %43 = insertelement <2 x i32> %42, i32 %15, i64 1, !dbg !12
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !12
  %45 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %46 = insertelement <2 x i32> %45, i32 %21, i64 1, !dbg !14
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !14
  %48 = fcmp olt <2 x float> %44, splat (float 0x3FD21CAC00000000), !dbg !15
  %49 = select <2 x i1> %48, <2 x float> splat (float 1.000000e+00), <2 x float> %44, !dbg !16
  %50 = fcmp olt <2 x float> %49, splat (float 0x3FD6978D40000000), !dbg !17
  %51 = select <2 x i1> %50, <2 x float> splat (float 2.000000e+00), <2 x float> %49, !dbg !18
  %52 = fcmp olt <2 x float> %51, splat (float 0x3FDB22D0E0000000), !dbg !19
  %53 = select <2 x i1> %52, <2 x float> splat (float 5.000000e+00), <2 x float> %51, !dbg !20
  %54 = fcmp olt <2 x float> %53, splat (float 0x3FE2147AE0000000), !dbg !21
  %55 = select <2 x i1> %54, <2 x float> splat (float 1.000000e+01), <2 x float> %53, !dbg !22
  %56 = fcmp olt <2 x float> %55, splat (float 1.000000e+00), !dbg !23
  %57 = select <2 x i1> %56, <2 x float> splat (float 3.000000e+01), <2 x float> %55, !dbg !24
  %58 = fsub <2 x float> %44, %47, !dbg !25
  %59 = fmul <2 x float> %58, %58, !dbg !26
  %60 = fmul <2 x float> %59, %57, !dbg !27
  %shift = shufflevector <2 x float> %41, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %61 = fadd <2 x float> %41, %shift, !dbg !28
  %shift1 = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %62 = fadd <2 x float> %shift1, %61, !dbg !28
  %63 = fadd <2 x float> %60, %62, !dbg !28
  %64 = extractelement <2 x float> %63, i64 0, !dbg !28
  %65 = bitcast float %64 to i32, !dbg !33
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !33
  %67 = bitcast i32 %66 to float, !dbg !33
  %68 = fadd float %64, %67, !dbg !28
  %69 = bitcast float %68 to i32, !dbg !33
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !33
  %71 = bitcast i32 %70 to float, !dbg !33
  %72 = fadd float %68, %71, !dbg !28
  %73 = bitcast float %72 to i32, !dbg !33
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !33
  %75 = bitcast i32 %74 to float, !dbg !33
  %76 = fadd float %72, %75, !dbg !28
  %77 = bitcast float %76 to i32, !dbg !33
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = fadd float %76, %79, !dbg !28
  %81 = bitcast float %80 to i32, !dbg !33
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !33
  %83 = bitcast i32 %82 to float, !dbg !33
  %84 = fadd float %80, %83, !dbg !28
  %85 = icmp eq i32 %6, 0, !dbg !33
  %86 = and i32 %7, 1, !dbg !33
  %87 = zext nneg i32 %86 to i64, !dbg !33
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i64 %87, !dbg !33
  %89 = bitcast float %84 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 %85) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %90 = icmp slt i32 %5, 2, !dbg !33
  %91 = sext i32 %5 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i64 %91, !dbg !33
  %93 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %92, i1 %90) #3, !dbg !33
  %94 = bitcast i32 %93 to float, !dbg !33
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !33
  %96 = bitcast i32 %95 to float, !dbg !33
  %97 = fadd float %94, %96, !dbg !28
  %98 = and i32 %5, 1, !dbg !33
  %99 = icmp eq i32 %98, 0, !dbg !33
  %100 = and i1 %90, %99, !dbg !33
  %101 = bitcast float %97 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %101, i1 %100) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %102 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %103 = fadd float %102, 0.000000e+00, !dbg !34
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 2.560000e+02) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %urem = and i32 %5, 63, !dbg !40
  %105 = icmp eq i32 %urem, 0, !dbg !40
  %106 = bitcast float %104 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %0, i1 %105) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvucrizbnaktj73km6wa77wto5u4ktgti7ywag6vnm7w42noxrgm.py", directory: "inductor_cache/vu")
!4 = !{ptr @triton_per_fused_index_put_lift_fresh_mean_mul_pow_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_index_put_lift_fresh_mean_mul_pow_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_index_put_lift_fresh_mean_mul_pow_sub_0", linkageName: "triton_per_fused_index_put_lift_fresh_mean_mul_pow_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 31, scope: !7)
!14 = !DILocation(line: 32, column: 36, scope: !7)
!15 = !DILocation(line: 34, column: 18, scope: !7)
!16 = !DILocation(line: 36, column: 32, scope: !7)
!17 = !DILocation(line: 38, column: 18, scope: !7)
!18 = !DILocation(line: 40, column: 32, scope: !7)
!19 = !DILocation(line: 42, column: 19, scope: !7)
!20 = !DILocation(line: 44, column: 35, scope: !7)
!21 = !DILocation(line: 46, column: 20, scope: !7)
!22 = !DILocation(line: 48, column: 35, scope: !7)
!23 = !DILocation(line: 49, column: 20, scope: !7)
!24 = !DILocation(line: 51, column: 35, scope: !7)
!25 = !DILocation(line: 52, column: 19, scope: !7)
!26 = !DILocation(line: 53, column: 20, scope: !7)
!27 = !DILocation(line: 54, column: 20, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 56, column: 59, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 73, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 56, column: 45, scope: !7)
!38 = !DILocation(line: 58, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 4, scope: !7)
!40 = !DILocation(line: 60, column: 63, scope: !7)
!41 = !DILocation(line: 60, column: 4, scope: !7)
