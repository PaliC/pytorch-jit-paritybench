; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %22 = or disjoint i32 %20, 2, !dbg !13
  %23 = or disjoint i32 %20, 3, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %24 = sdiv i32 %.frozen, 16, !dbg !14
  %25 = mul i32 %24, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %25, !dbg !15
  %26 = srem i32 %21, 16, !dbg !15
  %27 = srem i32 %22, 16, !dbg !15
  %28 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !16
  %29 = insertelement <2 x i32> %28, i32 %23, i64 1, !dbg !16
  %30 = srem <2 x i32> %29, splat (i32 16), !dbg !16
  %31 = sdiv i32 %20, 256, !dbg !17
  %32 = srem i32 %31, 64, !dbg !18
  %33 = sext i32 %32 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !32
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !32
  %77 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %82 = extractelement <2 x i32> %30, i64 0, !dbg !35
  %83 = icmp sgt i32 %82, 0, !dbg !36
  %84 = shl nsw i32 %.decomposed, 1, !dbg !37
  %85 = shl nsw i32 %26, 1, !dbg !37
  %86 = shl nsw i32 %27, 1, !dbg !37
  %87 = extractelement <2 x i32> %30, i64 1, !dbg !35
  %88 = shl nsw i32 %87, 1, !dbg !37
  %89 = icmp sgt i32 %.decomposed, 0, !dbg !38
  %90 = icmp sgt i32 %26, 0, !dbg !38
  %91 = icmp sgt i32 %27, 0, !dbg !38
  %92 = icmp sgt i32 %87, 0, !dbg !38
  %93 = and i1 %89, %83, !dbg !39
  %94 = and i1 %90, %83, !dbg !39
  %95 = and i1 %91, %83, !dbg !39
  %96 = and i1 %92, %83, !dbg !39
  %97 = shl i32 %24, 6, !dbg !40
  %98 = add i32 %97, %84, !dbg !41
  %99 = add i32 %98, -33, !dbg !42
  %100 = add i32 %97, %85, !dbg !41
  %101 = add i32 %100, -33, !dbg !42
  %102 = add i32 %97, %86, !dbg !41
  %103 = add i32 %102, -33, !dbg !42
  %104 = add i32 %97, %88, !dbg !41
  %105 = add i32 %104, -33, !dbg !42
  %106 = sext i32 %99 to i64, !dbg !43
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !43
  %108 = sext i32 %101 to i64, !dbg !43
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !43
  %110 = sext i32 %103 to i64, !dbg !43
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !43
  %112 = sext i32 %105 to i64, !dbg !43
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !43
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %93, i32 -8388608, i1 %93) #3, !dbg !44
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %94, i32 -8388608, i1 %94) #3, !dbg !44
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %95, i32 -8388608, i1 %95) #3, !dbg !44
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %96, i32 -8388608, i1 %96) #3, !dbg !44
  %118 = icmp sgt i32 %.decomposed, -1, !dbg !45
  %119 = icmp sgt i32 %26, -1, !dbg !45
  %120 = icmp sgt i32 %27, -1, !dbg !45
  %121 = icmp sgt i32 %87, -1, !dbg !45
  %122 = and i1 %118, %83, !dbg !46
  %123 = and i1 %119, %83, !dbg !46
  %124 = and i1 %120, %83, !dbg !46
  %125 = and i1 %121, %83, !dbg !46
  %126 = add i32 %98, -32, !dbg !47
  %127 = add i32 %100, -32, !dbg !47
  %128 = add i32 %102, -32, !dbg !47
  %129 = add i32 %104, -32, !dbg !47
  %130 = sext i32 %126 to i64, !dbg !48
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !48
  %132 = sext i32 %127 to i64, !dbg !48
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !48
  %134 = sext i32 %128 to i64, !dbg !48
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !48
  %136 = sext i32 %129 to i64, !dbg !48
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !48
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %122, i32 -8388608, i1 %122) #3, !dbg !49
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %123, i32 -8388608, i1 %123) #3, !dbg !49
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %124, i32 -8388608, i1 %124) #3, !dbg !49
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %125, i32 -8388608, i1 %125) #3, !dbg !49
  %142 = add i32 %98, -31, !dbg !50
  %143 = add i32 %100, -31, !dbg !50
  %144 = add i32 %102, -31, !dbg !50
  %145 = add i32 %104, -31, !dbg !50
  %146 = sext i32 %142 to i64, !dbg !51
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !51
  %148 = sext i32 %143 to i64, !dbg !51
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !51
  %150 = sext i32 %144 to i64, !dbg !51
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !51
  %152 = sext i32 %145 to i64, !dbg !51
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !51
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %122, i32 -8388608, i1 %122) #3, !dbg !52
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %123, i32 -8388608, i1 %123) #3, !dbg !52
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %124, i32 -8388608, i1 %124) #3, !dbg !52
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %125, i32 -8388608, i1 %125) #3, !dbg !52
  %158 = icmp sgt i32 %82, -1, !dbg !53
  %159 = and i1 %89, %158, !dbg !54
  %160 = and i1 %90, %158, !dbg !54
  %161 = and i1 %91, %158, !dbg !54
  %162 = and i1 %92, %158, !dbg !54
  %163 = add i32 %98, -1, !dbg !55
  %164 = sext i32 %163 to i64, !dbg !56
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !56
  %166 = sext i32 %100 to i64, !dbg !56
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !56
  %168 = getelementptr i8, ptr addrspace(1) %167, i64 -4, !dbg !56
  %169 = sext i32 %102 to i64, !dbg !56
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !56
  %171 = getelementptr i8, ptr addrspace(1) %170, i64 -4, !dbg !56
  %172 = sext i32 %104 to i64, !dbg !56
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !56
  %174 = getelementptr i8, ptr addrspace(1) %173, i64 -4, !dbg !56
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %159, i32 -8388608, i1 %159) #3, !dbg !57
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %160, i32 -8388608, i1 %160) #3, !dbg !57
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %161, i32 -8388608, i1 %161) #3, !dbg !57
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %162, i32 -8388608, i1 %162) #3, !dbg !57
  %179 = or i32 %82, %.decomposed, !dbg !35
  %180 = icmp sgt i32 %179, -1, !dbg !35
  %181 = or i32 %82, %26, !dbg !35
  %182 = icmp sgt i32 %181, -1, !dbg !35
  %183 = or i32 %82, %27, !dbg !35
  %184 = icmp sgt i32 %183, -1, !dbg !35
  %185 = or i32 %82, %87, !dbg !35
  %186 = icmp sgt i32 %185, -1, !dbg !35
  %187 = sext i32 %98 to i64, !dbg !58
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !58
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %180, i32 -8388608, i1 %180) #3, !dbg !59
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %182, i32 -8388608, i1 %182) #3, !dbg !59
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %184, i32 -8388608, i1 %184) #3, !dbg !59
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %186, i32 -8388608, i1 %186) #3, !dbg !59
  %193 = or disjoint i32 %98, 1, !dbg !60
  %194 = or disjoint i32 %100, 1, !dbg !60
  %195 = or disjoint i32 %102, 1, !dbg !60
  %196 = or disjoint i32 %104, 1, !dbg !60
  %197 = sext i32 %193 to i64, !dbg !61
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !61
  %199 = sext i32 %194 to i64, !dbg !61
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !61
  %201 = sext i32 %195 to i64, !dbg !61
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !61
  %203 = sext i32 %196 to i64, !dbg !61
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !61
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %180, i32 -8388608, i1 %180) #3, !dbg !62
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %182, i32 -8388608, i1 %182) #3, !dbg !62
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %184, i32 -8388608, i1 %184) #3, !dbg !62
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %186, i32 -8388608, i1 %186) #3, !dbg !62
  %209 = add i32 %98, 31, !dbg !63
  %210 = add i32 %100, 31, !dbg !63
  %211 = add i32 %102, 31, !dbg !63
  %212 = add i32 %104, 31, !dbg !63
  %213 = sext i32 %209 to i64, !dbg !64
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !64
  %215 = sext i32 %210 to i64, !dbg !64
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !64
  %217 = sext i32 %211 to i64, !dbg !64
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !64
  %219 = sext i32 %212 to i64, !dbg !64
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !64
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %159, i32 -8388608, i1 %159) #3, !dbg !65
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %160, i32 -8388608, i1 %160) #3, !dbg !65
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %161, i32 -8388608, i1 %161) #3, !dbg !65
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %162, i32 -8388608, i1 %162) #3, !dbg !65
  %225 = add i32 %98, 32, !dbg !66
  %226 = add i32 %100, 32, !dbg !66
  %227 = add i32 %102, 32, !dbg !66
  %228 = add i32 %104, 32, !dbg !66
  %229 = sext i32 %225 to i64, !dbg !67
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !67
  %231 = sext i32 %226 to i64, !dbg !67
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !67
  %233 = sext i32 %227 to i64, !dbg !67
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !67
  %235 = sext i32 %228 to i64, !dbg !67
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !67
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %180, i32 -8388608, i1 %180) #3, !dbg !68
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %182, i32 -8388608, i1 %182) #3, !dbg !68
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %184, i32 -8388608, i1 %184) #3, !dbg !68
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %186, i32 -8388608, i1 %186) #3, !dbg !68
  %241 = add i32 %98, 33, !dbg !69
  %242 = add i32 %100, 33, !dbg !69
  %243 = add i32 %102, 33, !dbg !69
  %244 = add i32 %104, 33, !dbg !69
  %245 = sext i32 %241 to i64, !dbg !70
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !70
  %247 = sext i32 %242 to i64, !dbg !70
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !70
  %249 = sext i32 %243 to i64, !dbg !70
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !70
  %251 = sext i32 %244 to i64, !dbg !70
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !70
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %180, i32 -8388608, i1 %180) #3, !dbg !71
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %182, i32 -8388608, i1 %182) #3, !dbg !71
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %184, i32 -8388608, i1 %184) #3, !dbg !71
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %186, i32 -8388608, i1 %186) #3, !dbg !71
  %257 = fadd float %41, 0x3F50624DE0000000, !dbg !72
  %258 = fadd float %43, 0x3F50624DE0000000, !dbg !72
  %259 = fadd float %45, 0x3F50624DE0000000, !dbg !72
  %260 = fadd float %47, 0x3F50624DE0000000, !dbg !72
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i = icmp eq i32 %261, 0, !dbg !73
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i = icmp eq i32 %262, 0, !dbg !73
  br i1 %.not.i, label %268, label %263, !dbg !73

263:                                              ; preds = %14
  br i1 %.not1.i, label %266, label %264, !dbg !73

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

268:                                              ; preds = %14
  br i1 %.not1.i, label %271, label %269, !dbg !73

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

__nv_sqrtf.exit:                                  ; preds = %264, %266, %269, %271
  %.0.i = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !73
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i1 = icmp eq i32 %273, 0, !dbg !73
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i4 = icmp eq i32 %274, 0, !dbg !73
  br i1 %.not.i1, label %280, label %275, !dbg !73

275:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %278, label %276, !dbg !73

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %258) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %258) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

280:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %283, label %281, !dbg !73

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %258) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %258) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

__nv_sqrtf.exit5:                                 ; preds = %276, %278, %281, %283
  %.0.i3 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !73
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i6 = icmp eq i32 %285, 0, !dbg !73
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i9 = icmp eq i32 %286, 0, !dbg !73
  br i1 %.not.i6, label %292, label %287, !dbg !73

287:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %290, label %288, !dbg !73

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %259) #3, !dbg !73
  br label %__nv_sqrtf.exit10, !dbg !73

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %259) #3, !dbg !73
  br label %__nv_sqrtf.exit10, !dbg !73

292:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %295, label %293, !dbg !73

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %259) #3, !dbg !73
  br label %__nv_sqrtf.exit10, !dbg !73

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %259) #3, !dbg !73
  br label %__nv_sqrtf.exit10, !dbg !73

__nv_sqrtf.exit10:                                ; preds = %288, %290, %293, %295
  %.0.i8 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !73
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i11 = icmp eq i32 %297, 0, !dbg !73
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i14 = icmp eq i32 %298, 0, !dbg !73
  br i1 %.not.i11, label %304, label %299, !dbg !73

299:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %302, label %300, !dbg !73

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %260) #3, !dbg !73
  br label %__nv_sqrtf.exit15, !dbg !73

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %260) #3, !dbg !73
  br label %__nv_sqrtf.exit15, !dbg !73

304:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %307, label %305, !dbg !73

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %260) #3, !dbg !73
  br label %__nv_sqrtf.exit15, !dbg !73

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %260) #3, !dbg !73
  br label %__nv_sqrtf.exit15, !dbg !73

__nv_sqrtf.exit15:                                ; preds = %300, %302, %305, %307
  %.0.i13 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !73
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !74
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !74
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !74
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !74
  %313 = fadd float %65, 0x3F50624DE0000000, !dbg !75
  %314 = fadd float %67, 0x3F50624DE0000000, !dbg !75
  %315 = fadd float %69, 0x3F50624DE0000000, !dbg !75
  %316 = fadd float %71, 0x3F50624DE0000000, !dbg !75
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i16 = icmp eq i32 %317, 0, !dbg !76
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i19 = icmp eq i32 %318, 0, !dbg !76
  br i1 %.not.i16, label %324, label %319, !dbg !76

319:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %322, label %320, !dbg !76

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %313) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %313) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

324:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %327, label %325, !dbg !76

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.f(float %313) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.f(float %313) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

__nv_sqrtf.exit20:                                ; preds = %320, %322, %325, %327
  %.0.i18 = phi float [ %321, %320 ], [ %323, %322 ], [ %326, %325 ], [ %328, %327 ], !dbg !76
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i21 = icmp eq i32 %329, 0, !dbg !76
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i24 = icmp eq i32 %330, 0, !dbg !76
  br i1 %.not.i21, label %336, label %331, !dbg !76

331:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %334, label %332, !dbg !76

332:                                              ; preds = %331
  %333 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %314) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

334:                                              ; preds = %331
  %335 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %314) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

336:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %339, label %337, !dbg !76

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.f(float %314) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.f(float %314) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

__nv_sqrtf.exit25:                                ; preds = %332, %334, %337, %339
  %.0.i23 = phi float [ %333, %332 ], [ %335, %334 ], [ %338, %337 ], [ %340, %339 ], !dbg !76
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i26 = icmp eq i32 %341, 0, !dbg !76
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i29 = icmp eq i32 %342, 0, !dbg !76
  br i1 %.not.i26, label %348, label %343, !dbg !76

343:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %346, label %344, !dbg !76

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

348:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %351, label %349, !dbg !76

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

__nv_sqrtf.exit30:                                ; preds = %344, %346, %349, %351
  %.0.i28 = phi float [ %345, %344 ], [ %347, %346 ], [ %350, %349 ], [ %352, %351 ], !dbg !76
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i31 = icmp eq i32 %353, 0, !dbg !76
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i34 = icmp eq i32 %354, 0, !dbg !76
  br i1 %.not.i31, label %360, label %355, !dbg !76

355:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %358, label %356, !dbg !76

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

360:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %363, label %361, !dbg !76

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

__nv_sqrtf.exit35:                                ; preds = %356, %358, %361, %363
  %.0.i33 = phi float [ %357, %356 ], [ %359, %358 ], [ %362, %361 ], [ %364, %363 ], !dbg !76
  %365 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !49
  %366 = insertelement <4 x i32> %365, i32 %139, i64 1, !dbg !49
  %367 = insertelement <4 x i32> %366, i32 %140, i64 2, !dbg !49
  %368 = insertelement <4 x i32> %367, i32 %141, i64 3, !dbg !49
  %369 = bitcast <4 x i32> %368 to <4 x float>, !dbg !49
  %370 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !44
  %371 = insertelement <4 x i32> %370, i32 %115, i64 1, !dbg !44
  %372 = insertelement <4 x i32> %371, i32 %116, i64 2, !dbg !44
  %373 = insertelement <4 x i32> %372, i32 %117, i64 3, !dbg !44
  %374 = bitcast <4 x i32> %373 to <4 x float>, !dbg !44
  %375 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !52
  %376 = insertelement <4 x i32> %375, i32 %155, i64 1, !dbg !52
  %377 = insertelement <4 x i32> %376, i32 %156, i64 2, !dbg !52
  %378 = insertelement <4 x i32> %377, i32 %157, i64 3, !dbg !52
  %379 = bitcast <4 x i32> %378 to <4 x float>, !dbg !52
  %380 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !57
  %381 = insertelement <4 x i32> %380, i32 %176, i64 1, !dbg !57
  %382 = insertelement <4 x i32> %381, i32 %177, i64 2, !dbg !57
  %383 = insertelement <4 x i32> %382, i32 %178, i64 3, !dbg !57
  %384 = bitcast <4 x i32> %383 to <4 x float>, !dbg !57
  %385 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !59
  %386 = insertelement <4 x i32> %385, i32 %190, i64 1, !dbg !59
  %387 = insertelement <4 x i32> %386, i32 %191, i64 2, !dbg !59
  %388 = insertelement <4 x i32> %387, i32 %192, i64 3, !dbg !59
  %389 = bitcast <4 x i32> %388 to <4 x float>, !dbg !59
  %390 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !62
  %391 = insertelement <4 x i32> %390, i32 %206, i64 1, !dbg !62
  %392 = insertelement <4 x i32> %391, i32 %207, i64 2, !dbg !62
  %393 = insertelement <4 x i32> %392, i32 %208, i64 3, !dbg !62
  %394 = bitcast <4 x i32> %393 to <4 x float>, !dbg !62
  %395 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !65
  %396 = insertelement <4 x i32> %395, i32 %222, i64 1, !dbg !65
  %397 = insertelement <4 x i32> %396, i32 %223, i64 2, !dbg !65
  %398 = insertelement <4 x i32> %397, i32 %224, i64 3, !dbg !65
  %399 = bitcast <4 x i32> %398 to <4 x float>, !dbg !65
  %400 = insertelement <4 x i32> poison, i32 %237, i64 0, !dbg !68
  %401 = insertelement <4 x i32> %400, i32 %238, i64 1, !dbg !68
  %402 = insertelement <4 x i32> %401, i32 %239, i64 2, !dbg !68
  %403 = insertelement <4 x i32> %402, i32 %240, i64 3, !dbg !68
  %404 = bitcast <4 x i32> %403 to <4 x float>, !dbg !68
  %405 = insertelement <4 x i32> poison, i32 %253, i64 0, !dbg !71
  %406 = insertelement <4 x i32> %405, i32 %254, i64 1, !dbg !71
  %407 = insertelement <4 x i32> %406, i32 %255, i64 2, !dbg !71
  %408 = insertelement <4 x i32> %407, i32 %256, i64 3, !dbg !71
  %409 = bitcast <4 x i32> %408 to <4 x float>, !dbg !71
  %410 = insertelement <8 x i32> poison, i32 %62, i64 0, !dbg !28
  %411 = insertelement <8 x i32> %410, i32 %61, i64 1, !dbg !28
  %412 = insertelement <8 x i32> %411, i32 %60, i64 2, !dbg !28
  %413 = insertelement <8 x i32> %412, i32 %59, i64 3, !dbg !28
  %414 = insertelement <8 x i32> %413, i32 %38, i64 4, !dbg !28
  %415 = insertelement <8 x i32> %414, i32 %37, i64 5, !dbg !28
  %416 = insertelement <8 x i32> %415, i32 %36, i64 6, !dbg !28
  %417 = insertelement <8 x i32> %416, i32 %35, i64 7, !dbg !28
  %418 = bitcast <8 x i32> %417 to <8 x float>, !dbg !28
  %419 = fcmp uno <4 x float> %389, zeroinitializer, !dbg !77
  %420 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !32
  %421 = insertelement <8 x i32> %420, i32 %75, i64 1, !dbg !32
  %422 = insertelement <8 x i32> %421, i32 %74, i64 2, !dbg !32
  %423 = insertelement <8 x i32> %422, i32 %73, i64 3, !dbg !32
  %424 = insertelement <8 x i32> %423, i32 %52, i64 4, !dbg !32
  %425 = insertelement <8 x i32> %424, i32 %51, i64 5, !dbg !32
  %426 = insertelement <8 x i32> %425, i32 %50, i64 6, !dbg !32
  %427 = insertelement <8 x i32> %426, i32 %49, i64 7, !dbg !32
  %428 = bitcast <8 x i32> %427 to <8 x float>, !dbg !32
  %429 = insertelement <8 x i32> poison, i32 %81, i64 0, !dbg !34
  %430 = insertelement <8 x i32> %429, i32 %80, i64 1, !dbg !34
  %431 = insertelement <8 x i32> %430, i32 %79, i64 2, !dbg !34
  %432 = insertelement <8 x i32> %431, i32 %78, i64 3, !dbg !34
  %433 = insertelement <8 x i32> %432, i32 %57, i64 4, !dbg !34
  %434 = insertelement <8 x i32> %433, i32 %56, i64 5, !dbg !34
  %435 = insertelement <8 x i32> %434, i32 %55, i64 6, !dbg !34
  %436 = insertelement <8 x i32> %435, i32 %54, i64 7, !dbg !34
  %437 = bitcast <8 x i32> %436 to <8 x float>, !dbg !34
  %438 = fcmp ogt <4 x float> %369, %374, !dbg !81
  %439 = fcmp uno <4 x float> %369, zeroinitializer, !dbg !83
  %440 = or <4 x i1> %438, %439, !dbg !84
  %.v = select <4 x i1> %440, <4 x i32> %368, <4 x i32> %373, !dbg !85
  %441 = bitcast <4 x i32> %.v to <4 x float>, !dbg !85
  %442 = fcmp olt <4 x float> %441, %379, !dbg !86
  %443 = fcmp uno <4 x float> %379, zeroinitializer, !dbg !88
  %444 = or <4 x i1> %442, %443, !dbg !89
  %.v36 = select <4 x i1> %444, <4 x i32> %378, <4 x i32> %.v, !dbg !90
  %445 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !90
  %446 = fcmp olt <4 x float> %445, %384, !dbg !91
  %447 = fcmp uno <4 x float> %384, zeroinitializer, !dbg !93
  %448 = or <4 x i1> %446, %447, !dbg !94
  %.v37 = select <4 x i1> %448, <4 x i32> %383, <4 x i32> %.v36, !dbg !95
  %449 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !95
  %450 = fcmp olt <4 x float> %449, %389, !dbg !96
  %451 = or <4 x i1> %450, %419, !dbg !97
  %.v38 = select <4 x i1> %451, <4 x i32> %388, <4 x i32> %.v37, !dbg !98
  %452 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !98
  %453 = fcmp olt <4 x float> %452, %394, !dbg !99
  %454 = fcmp uno <4 x float> %394, zeroinitializer, !dbg !101
  %455 = or <4 x i1> %453, %454, !dbg !102
  %.v39 = select <4 x i1> %455, <4 x i32> %393, <4 x i32> %.v38, !dbg !103
  %456 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !103
  %457 = fcmp olt <4 x float> %456, %399, !dbg !104
  %458 = fcmp uno <4 x float> %399, zeroinitializer, !dbg !106
  %459 = or <4 x i1> %457, %458, !dbg !107
  %.v40 = select <4 x i1> %459, <4 x i32> %398, <4 x i32> %.v39, !dbg !108
  %460 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !108
  %461 = fcmp olt <4 x float> %460, %404, !dbg !109
  %462 = fcmp uno <4 x float> %404, zeroinitializer, !dbg !111
  %463 = or <4 x i1> %461, %462, !dbg !112
  %.v41 = select <4 x i1> %463, <4 x i32> %403, <4 x i32> %.v40, !dbg !113
  %464 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !113
  %465 = fcmp olt <4 x float> %464, %409, !dbg !114
  %466 = zext <4 x i1> %438 to <4 x i8>, !dbg !116
  %467 = select <4 x i1> %442, <4 x i8> splat (i8 2), <4 x i8> %466, !dbg !117
  %468 = select <4 x i1> %446, <4 x i8> splat (i8 3), <4 x i8> %467, !dbg !118
  %469 = select <4 x i1> %450, <4 x i8> splat (i8 4), <4 x i8> %468, !dbg !119
  %470 = select <4 x i1> %453, <4 x i8> splat (i8 5), <4 x i8> %469, !dbg !120
  %471 = select <4 x i1> %457, <4 x i8> splat (i8 6), <4 x i8> %470, !dbg !121
  %472 = select <4 x i1> %461, <4 x i8> splat (i8 7), <4 x i8> %471, !dbg !122
  %473 = select <4 x i1> %465, <4 x i8> splat (i8 8), <4 x i8> %472, !dbg !123
  %474 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !124
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !124
  %476 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !124
  %477 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !124
  %478 = fcmp uno <4 x float> %409, zeroinitializer, !dbg !125
  %479 = or <4 x i1> %465, %478, !dbg !126
  %.v42 = select <4 x i1> %479, <4 x i32> %408, <4 x i32> %.v41, !dbg !127
  %480 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !127
  %481 = shufflevector <4 x float> %480, <4 x float> poison, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 3, i32 2, i32 1, i32 0>, !dbg !127
  %482 = fsub <8 x float> %481, %418, !dbg !128
  %483 = insertelement <8 x float> poison, float %477, i64 0, !dbg !129
  %484 = insertelement <8 x float> %483, float %476, i64 1, !dbg !129
  %485 = insertelement <8 x float> %484, float %475, i64 2, !dbg !129
  %486 = insertelement <8 x float> %485, float %474, i64 3, !dbg !129
  %487 = insertelement <8 x float> %486, float %312, i64 4, !dbg !129
  %488 = insertelement <8 x float> %487, float %311, i64 5, !dbg !129
  %489 = insertelement <8 x float> %488, float %310, i64 6, !dbg !129
  %490 = insertelement <8 x float> %489, float %309, i64 7, !dbg !129
  %491 = fmul <8 x float> %482, %490, !dbg !129
  %492 = fmul <8 x float> %491, %428, !dbg !130
  %493 = fadd <8 x float> %492, %437, !dbg !131
  %494 = fcmp olt <8 x float> %493, zeroinitializer, !dbg !132
  %495 = extractelement <8 x i1> %494, i64 4, !dbg !134
  %496 = extractelement <8 x i1> %494, i64 5, !dbg !134
  %497 = extractelement <8 x i1> %494, i64 6, !dbg !134
  %498 = extractelement <8 x i1> %494, i64 7, !dbg !134
  %499 = extractelement <8 x i1> %494, i64 3, !dbg !136
  %500 = extractelement <8 x i1> %494, i64 2, !dbg !136
  %501 = extractelement <8 x i1> %494, i64 1, !dbg !136
  %502 = extractelement <8 x i1> %494, i64 0, !dbg !136
  %503 = sext i32 %20 to i64, !dbg !137
  %504 = getelementptr float, ptr addrspace(1) %9, i64 %503, !dbg !137
  %505 = extractelement <4 x i32> %.v42, i64 0, !dbg !138
  %506 = extractelement <4 x i32> %.v42, i64 1, !dbg !138
  %507 = extractelement <4 x i32> %.v42, i64 2, !dbg !138
  %508 = extractelement <4 x i32> %.v42, i64 3, !dbg !138
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %505, i32 %506, i32 %507, i32 %508, ptr addrspace(1) %504, i1 true) #3, !dbg !138
  %509 = getelementptr i8, ptr addrspace(1) %10, i64 %503, !dbg !139
  %510 = bitcast <4 x i8> %473 to i32, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %510, ptr addrspace(1) %509, i1 true) #3, !dbg !140
  %511 = getelementptr float, ptr addrspace(1) %11, i64 %503, !dbg !141
  %bc = bitcast <8 x float> %493 to <8 x i32>, !dbg !142
  %512 = extractelement <8 x i32> %bc, i64 7, !dbg !142
  %513 = select i1 %498, i32 0, i32 %512, !dbg !134
  %bc43 = bitcast <8 x float> %493 to <8 x i32>, !dbg !142
  %514 = extractelement <8 x i32> %bc43, i64 6, !dbg !142
  %515 = select i1 %497, i32 0, i32 %514, !dbg !134
  %bc44 = bitcast <8 x float> %493 to <8 x i32>, !dbg !142
  %516 = extractelement <8 x i32> %bc44, i64 5, !dbg !142
  %517 = select i1 %496, i32 0, i32 %516, !dbg !134
  %bc45 = bitcast <8 x float> %493 to <8 x i32>, !dbg !142
  %518 = extractelement <8 x i32> %bc45, i64 4, !dbg !142
  %519 = select i1 %495, i32 0, i32 %518, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %513, i32 %515, i32 %517, i32 %519, ptr addrspace(1) %511, i1 true) #3, !dbg !142
  %520 = getelementptr float, ptr addrspace(1) %12, i64 %503, !dbg !143
  %bc46 = bitcast <8 x float> %493 to <8 x i32>, !dbg !144
  %521 = extractelement <8 x i32> %bc46, i64 3, !dbg !144
  %522 = select i1 %499, i32 0, i32 %521, !dbg !136
  %bc47 = bitcast <8 x float> %493 to <8 x i32>, !dbg !144
  %523 = extractelement <8 x i32> %bc47, i64 2, !dbg !144
  %524 = select i1 %500, i32 0, i32 %523, !dbg !136
  %bc48 = bitcast <8 x float> %493 to <8 x i32>, !dbg !144
  %525 = extractelement <8 x i32> %bc48, i64 1, !dbg !144
  %526 = select i1 %501, i32 0, i32 %525, !dbg !136
  %bc49 = bitcast <8 x float> %493 to <8 x i32>, !dbg !144
  %527 = extractelement <8 x i32> %bc49, i64 0, !dbg !144
  %528 = select i1 %502, i32 0, i32 %527, !dbg !136
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %524, i32 %526, i32 %528, ptr addrspace(1) %520, i1 true) #3, !dbg !144
  ret void, !dbg !145
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjk7cijecz4qsjo7e44q6mozuyy64643ugcn3xjvntpz245t4lca.py", directory: "inductor_cache/jk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 32, scope: !7)
!32 = !DILocation(line: 35, column: 37, scope: !7)
!33 = !DILocation(line: 36, column: 32, scope: !7)
!34 = !DILocation(line: 36, column: 37, scope: !7)
!35 = !DILocation(line: 70, column: 20, scope: !7)
!36 = !DILocation(line: 39, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 19, scope: !7)
!40 = !DILocation(line: 48, column: 49, scope: !7)
!41 = !DILocation(line: 48, column: 39, scope: !7)
!42 = !DILocation(line: 48, column: 46, scope: !7)
!43 = !DILocation(line: 48, column: 31, scope: !7)
!44 = !DILocation(line: 48, column: 54, scope: !7)
!45 = !DILocation(line: 50, column: 21, scope: !7)
!46 = !DILocation(line: 53, column: 19, scope: !7)
!47 = !DILocation(line: 54, column: 46, scope: !7)
!48 = !DILocation(line: 54, column: 31, scope: !7)
!49 = !DILocation(line: 54, column: 54, scope: !7)
!50 = !DILocation(line: 61, column: 46, scope: !7)
!51 = !DILocation(line: 61, column: 31, scope: !7)
!52 = !DILocation(line: 61, column: 54, scope: !7)
!53 = !DILocation(line: 64, column: 21, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 68, column: 45, scope: !7)
!56 = !DILocation(line: 68, column: 31, scope: !7)
!57 = !DILocation(line: 68, column: 53, scope: !7)
!58 = !DILocation(line: 71, column: 31, scope: !7)
!59 = !DILocation(line: 71, column: 46, scope: !7)
!60 = !DILocation(line: 74, column: 42, scope: !7)
!61 = !DILocation(line: 74, column: 31, scope: !7)
!62 = !DILocation(line: 74, column: 50, scope: !7)
!63 = !DILocation(line: 81, column: 43, scope: !7)
!64 = !DILocation(line: 81, column: 31, scope: !7)
!65 = !DILocation(line: 81, column: 51, scope: !7)
!66 = !DILocation(line: 84, column: 43, scope: !7)
!67 = !DILocation(line: 84, column: 31, scope: !7)
!68 = !DILocation(line: 84, column: 51, scope: !7)
!69 = !DILocation(line: 87, column: 43, scope: !7)
!70 = !DILocation(line: 87, column: 31, scope: !7)
!71 = !DILocation(line: 87, column: 51, scope: !7)
!72 = !DILocation(line: 116, column: 20, scope: !7)
!73 = !DILocation(line: 117, column: 27, scope: !7)
!74 = !DILocation(line: 119, column: 20, scope: !7)
!75 = !DILocation(line: 128, column: 20, scope: !7)
!76 = !DILocation(line: 129, column: 27, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 72, column: 42, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !82)
!82 = !DILocation(line: 55, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !87)
!87 = !DILocation(line: 62, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !92)
!92 = !DILocation(line: 69, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!97 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !80)
!98 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!99 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !100)
!100 = !DILocation(line: 75, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !105)
!105 = !DILocation(line: 82, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !110)
!110 = !DILocation(line: 85, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !115)
!115 = !DILocation(line: 88, column: 42, scope: !7)
!116 = !DILocation(line: 92, column: 35, scope: !7)
!117 = !DILocation(line: 95, column: 35, scope: !7)
!118 = !DILocation(line: 98, column: 35, scope: !7)
!119 = !DILocation(line: 101, column: 35, scope: !7)
!120 = !DILocation(line: 104, column: 35, scope: !7)
!121 = !DILocation(line: 107, column: 35, scope: !7)
!122 = !DILocation(line: 110, column: 35, scope: !7)
!123 = !DILocation(line: 113, column: 35, scope: !7)
!124 = !DILocation(line: 130, column: 20, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !115)
!126 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !115)
!127 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !115)
!128 = !DILocation(line: 127, column: 20, scope: !7)
!129 = !DILocation(line: 132, column: 21, scope: !7)
!130 = !DILocation(line: 133, column: 22, scope: !7)
!131 = !DILocation(line: 134, column: 22, scope: !7)
!132 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !133)
!133 = !DILocation(line: 135, column: 43, scope: !7)
!134 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !135)
!135 = !DILocation(line: 126, column: 42, scope: !7)
!136 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !133)
!137 = !DILocation(line: 136, column: 25, scope: !7)
!138 = !DILocation(line: 136, column: 37, scope: !7)
!139 = !DILocation(line: 137, column: 25, scope: !7)
!140 = !DILocation(line: 137, column: 37, scope: !7)
!141 = !DILocation(line: 138, column: 25, scope: !7)
!142 = !DILocation(line: 138, column: 37, scope: !7)
!143 = !DILocation(line: 139, column: 25, scope: !7)
!144 = !DILocation(line: 139, column: 38, scope: !7)
!145 = !DILocation(line: 139, column: 4, scope: !7)
