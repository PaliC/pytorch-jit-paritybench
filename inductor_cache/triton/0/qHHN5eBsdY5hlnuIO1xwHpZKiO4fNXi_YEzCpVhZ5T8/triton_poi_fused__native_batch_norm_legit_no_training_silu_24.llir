; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = icmp slt i32 %21, 256, !dbg !14
  %26 = icmp slt i32 %22, 256, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %28 = shl i32 %27, 6, !dbg !16
  %29 = or disjoint i32 %28, %18, !dbg !17
  %30 = icmp slt i32 %29, 256, !dbg !18
  %31 = shl i32 %19, 8, !dbg !19
  %32 = shl i32 %20, 8, !dbg !19
  %33 = shl i32 %21, 8, !dbg !19
  %34 = shl i32 %22, 8, !dbg !19
  %35 = add i32 %29, %31, !dbg !20
  %36 = add i32 %29, %32, !dbg !20
  %37 = add i32 %29, %33, !dbg !20
  %38 = add i32 %29, %34, !dbg !20
  %39 = sext i32 %35 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %36 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = sext i32 %37 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = sext i32 %38 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !21
  %47 = and i1 %23, %30, !dbg !22
  %48 = and i1 %24, %30, !dbg !22
  %49 = and i1 %25, %30, !dbg !22
  %50 = and i1 %26, %30, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %47) #4, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %48) #4, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %49) #4, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %50) #4, !dbg !23
  %55 = sext i32 %29 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %30) #4, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %30) #4, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = bitcast i32 %62 to float, !dbg !27
  %67 = bitcast i32 %63 to float, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !28
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %30) #4, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !30
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %30) #4, !dbg !31
  %72 = fadd float %64, 0x3F50624DE0000000, !dbg !32
  %73 = fadd float %65, 0x3F50624DE0000000, !dbg !32
  %74 = fadd float %66, 0x3F50624DE0000000, !dbg !32
  %75 = fadd float %67, 0x3F50624DE0000000, !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %76, 0, !dbg !33
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %77, 0, !dbg !33
  br i1 %.not.i, label %83, label %78, !dbg !33

78:                                               ; preds = %8
  br i1 %.not1.i, label %81, label %79, !dbg !33

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

83:                                               ; preds = %8
  br i1 %.not1.i, label %86, label %84, !dbg !33

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !33
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i31 = icmp eq i32 %88, 0, !dbg !33
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i34 = icmp eq i32 %89, 0, !dbg !33
  br i1 %.not.i31, label %95, label %90, !dbg !33

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %93, label %91, !dbg !33

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %98, label %96, !dbg !33

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

__nv_sqrtf.exit35:                                ; preds = %91, %93, %96, %98
  %.0.i33 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !33
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i36 = icmp eq i32 %100, 0, !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i39 = icmp eq i32 %101, 0, !dbg !33
  br i1 %.not.i36, label %107, label %102, !dbg !33

102:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %105, label %103, !dbg !33

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit40, !dbg !33

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit40, !dbg !33

107:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %110, label %108, !dbg !33

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit40, !dbg !33

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit40, !dbg !33

__nv_sqrtf.exit40:                                ; preds = %103, %105, %108, %110
  %.0.i38 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !33
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i41 = icmp eq i32 %112, 0, !dbg !33
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i44 = icmp eq i32 %113, 0, !dbg !33
  br i1 %.not.i41, label %119, label %114, !dbg !33

114:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %117, label %115, !dbg !33

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

119:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %122, label %120, !dbg !33

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

__nv_sqrtf.exit45:                                ; preds = %115, %117, %120, %122
  %.0.i43 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %125 = bitcast i32 %124 to float, !dbg !23
  %126 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %127 = bitcast i32 %126 to float, !dbg !25
  %128 = fsub float %125, %127, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %130 = bitcast i32 %129 to float, !dbg !23
  %131 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %132 = bitcast i32 %131 to float, !dbg !25
  %133 = fsub float %130, %132, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %135 = bitcast i32 %134 to float, !dbg !23
  %136 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = fsub float %135, %137, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %140 = bitcast i32 %139 to float, !dbg !23
  %141 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %142 = bitcast i32 %141 to float, !dbg !25
  %143 = fsub float %140, %142, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %145 = bitcast i32 %144 to float, !dbg !23
  %146 = fsub float %145, %127, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %148 = bitcast i32 %147 to float, !dbg !23
  %149 = fsub float %148, %132, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %151 = bitcast i32 %150 to float, !dbg !23
  %152 = fsub float %151, %137, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %154 = bitcast i32 %153 to float, !dbg !23
  %155 = fsub float %154, %142, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %157 = bitcast i32 %156 to float, !dbg !23
  %158 = fsub float %157, %127, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %160 = bitcast i32 %159 to float, !dbg !23
  %161 = fsub float %160, %132, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %163 = bitcast i32 %162 to float, !dbg !23
  %164 = fsub float %163, %137, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %166 = bitcast i32 %165 to float, !dbg !23
  %167 = fsub float %166, %142, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %169 = bitcast i32 %168 to float, !dbg !23
  %170 = fsub float %169, %127, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %172 = bitcast i32 %171 to float, !dbg !23
  %173 = fsub float %172, %132, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %175 = bitcast i32 %174 to float, !dbg !23
  %176 = fsub float %175, %137, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %178 = bitcast i32 %177 to float, !dbg !23
  %179 = fsub float %178, %142, !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !31
  %181 = bitcast i32 %180 to float, !dbg !31
  %182 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !31
  %183 = bitcast i32 %182 to float, !dbg !31
  %184 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !31
  %185 = bitcast i32 %184 to float, !dbg !31
  %186 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !31
  %187 = bitcast i32 %186 to float, !dbg !31
  %188 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !29
  %189 = bitcast i32 %188 to float, !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !29
  %191 = bitcast i32 %190 to float, !dbg !29
  %192 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !29
  %193 = bitcast i32 %192 to float, !dbg !29
  %194 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !29
  %195 = bitcast i32 %194 to float, !dbg !29
  %196 = or disjoint i32 %28, %16, !dbg !17
  %197 = icmp slt i32 %196, 256, !dbg !18
  %198 = or disjoint i32 %10, %18, !dbg !13
  %199 = icmp slt i32 %198, 256, !dbg !14
  %200 = and i1 %199, %197, !dbg !22
  %201 = or disjoint i32 %28, %15, !dbg !17
  %202 = icmp slt i32 %201, 256, !dbg !18
  %203 = and i1 %199, %202, !dbg !22
  %204 = or disjoint i32 %28, %14, !dbg !17
  %205 = icmp slt i32 %204, 256, !dbg !18
  %206 = and i1 %199, %205, !dbg !22
  %207 = or disjoint i32 %28, %13, !dbg !17
  %208 = icmp slt i32 %207, 256, !dbg !18
  %209 = and i1 %199, %208, !dbg !22
  %.frozen = freeze i32 %198, !dbg !35
  %210 = sdiv i32 %.frozen, 64, !dbg !35
  %211 = mul i32 %210, 64, !dbg !36
  %.decomposed = sub i32 %.frozen, %211, !dbg !36
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !37
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !37
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !37
  %216 = fmul float %179, %212, !dbg !38
  %217 = fmul float %176, %213, !dbg !38
  %218 = fmul float %173, %214, !dbg !38
  %219 = fmul float %170, %215, !dbg !38
  %220 = fmul float %167, %212, !dbg !38
  %221 = fmul float %164, %213, !dbg !38
  %222 = fmul float %161, %214, !dbg !38
  %223 = fmul float %158, %215, !dbg !38
  %224 = fmul float %155, %212, !dbg !38
  %225 = fmul float %152, %213, !dbg !38
  %226 = fmul float %149, %214, !dbg !38
  %227 = fmul float %146, %215, !dbg !38
  %228 = fmul float %143, %212, !dbg !38
  %229 = fmul float %138, %213, !dbg !38
  %230 = fmul float %133, %214, !dbg !38
  %231 = fmul float %128, %215, !dbg !38
  %232 = fmul float %216, %195, !dbg !39
  %233 = fmul float %217, %193, !dbg !39
  %234 = fmul float %218, %191, !dbg !39
  %235 = fmul float %219, %189, !dbg !39
  %236 = fmul float %220, %195, !dbg !39
  %237 = fmul float %221, %193, !dbg !39
  %238 = fmul float %222, %191, !dbg !39
  %239 = fmul float %223, %189, !dbg !39
  %240 = fmul float %224, %195, !dbg !39
  %241 = fmul float %225, %193, !dbg !39
  %242 = fmul float %226, %191, !dbg !39
  %243 = fmul float %227, %189, !dbg !39
  %244 = fmul float %228, %195, !dbg !39
  %245 = fmul float %229, %193, !dbg !39
  %246 = fmul float %230, %191, !dbg !39
  %247 = fmul float %231, %189, !dbg !39
  %248 = fadd float %232, %187, !dbg !40
  %249 = fadd float %233, %185, !dbg !40
  %250 = fadd float %234, %183, !dbg !40
  %251 = fadd float %235, %181, !dbg !40
  %252 = fadd float %236, %187, !dbg !40
  %253 = fadd float %237, %185, !dbg !40
  %254 = fadd float %238, %183, !dbg !40
  %255 = fadd float %239, %181, !dbg !40
  %256 = fadd float %240, %187, !dbg !40
  %257 = fadd float %241, %185, !dbg !40
  %258 = fadd float %242, %183, !dbg !40
  %259 = fadd float %243, %181, !dbg !40
  %260 = fadd float %244, %187, !dbg !40
  %261 = fadd float %245, %185, !dbg !40
  %262 = fadd float %246, %183, !dbg !40
  %263 = fadd float %247, %181, !dbg !40
  %264 = fsub float 0.000000e+00, %248, !dbg !41
  %265 = fsub float 0.000000e+00, %249, !dbg !41
  %266 = fsub float 0.000000e+00, %250, !dbg !41
  %267 = fsub float 0.000000e+00, %251, !dbg !41
  %268 = fsub float 0.000000e+00, %252, !dbg !41
  %269 = fsub float 0.000000e+00, %253, !dbg !41
  %270 = fsub float 0.000000e+00, %254, !dbg !41
  %271 = fsub float 0.000000e+00, %255, !dbg !41
  %272 = fsub float 0.000000e+00, %256, !dbg !41
  %273 = fsub float 0.000000e+00, %257, !dbg !41
  %274 = fsub float 0.000000e+00, %258, !dbg !41
  %275 = fsub float 0.000000e+00, %259, !dbg !41
  %276 = fsub float 0.000000e+00, %260, !dbg !41
  %277 = fsub float 0.000000e+00, %261, !dbg !41
  %278 = fsub float 0.000000e+00, %262, !dbg !41
  %279 = fsub float 0.000000e+00, %263, !dbg !41
  %280 = fmul float %264, 0x3FF7154760000000, !dbg !45
  %281 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %280) #4, !dbg !45
  %282 = fmul float %265, 0x3FF7154760000000, !dbg !45
  %283 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %282) #4, !dbg !45
  %284 = fmul float %266, 0x3FF7154760000000, !dbg !45
  %285 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %284) #4, !dbg !45
  %286 = fmul float %267, 0x3FF7154760000000, !dbg !45
  %287 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %286) #4, !dbg !45
  %288 = fmul float %268, 0x3FF7154760000000, !dbg !45
  %289 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %288) #4, !dbg !45
  %290 = fmul float %269, 0x3FF7154760000000, !dbg !45
  %291 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %290) #4, !dbg !45
  %292 = fmul float %270, 0x3FF7154760000000, !dbg !45
  %293 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %292) #4, !dbg !45
  %294 = fmul float %271, 0x3FF7154760000000, !dbg !45
  %295 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %294) #4, !dbg !45
  %296 = fmul float %272, 0x3FF7154760000000, !dbg !45
  %297 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %296) #4, !dbg !45
  %298 = fmul float %273, 0x3FF7154760000000, !dbg !45
  %299 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %298) #4, !dbg !45
  %300 = fmul float %274, 0x3FF7154760000000, !dbg !45
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %300) #4, !dbg !45
  %302 = fmul float %275, 0x3FF7154760000000, !dbg !45
  %303 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %302) #4, !dbg !45
  %304 = fmul float %276, 0x3FF7154760000000, !dbg !45
  %305 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %304) #4, !dbg !45
  %306 = fmul float %277, 0x3FF7154760000000, !dbg !45
  %307 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %306) #4, !dbg !45
  %308 = fmul float %278, 0x3FF7154760000000, !dbg !45
  %309 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %308) #4, !dbg !45
  %310 = fmul float %279, 0x3FF7154760000000, !dbg !45
  %311 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %310) #4, !dbg !45
  %312 = fadd float %281, 1.000000e+00, !dbg !46
  %313 = fadd float %283, 1.000000e+00, !dbg !46
  %314 = fadd float %285, 1.000000e+00, !dbg !46
  %315 = fadd float %287, 1.000000e+00, !dbg !46
  %316 = fadd float %289, 1.000000e+00, !dbg !46
  %317 = fadd float %291, 1.000000e+00, !dbg !46
  %318 = fadd float %293, 1.000000e+00, !dbg !46
  %319 = fadd float %295, 1.000000e+00, !dbg !46
  %320 = fadd float %297, 1.000000e+00, !dbg !46
  %321 = fadd float %299, 1.000000e+00, !dbg !46
  %322 = fadd float %301, 1.000000e+00, !dbg !46
  %323 = fadd float %303, 1.000000e+00, !dbg !46
  %324 = fadd float %305, 1.000000e+00, !dbg !46
  %325 = fadd float %307, 1.000000e+00, !dbg !46
  %326 = fadd float %309, 1.000000e+00, !dbg !46
  %327 = fadd float %311, 1.000000e+00, !dbg !46
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %312) #4, !dbg !47
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #4, !dbg !47
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #4, !dbg !47
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %315) #4, !dbg !47
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %316) #4, !dbg !47
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %317) #4, !dbg !47
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %318) #4, !dbg !47
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %319) #4, !dbg !47
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %320) #4, !dbg !47
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %321) #4, !dbg !47
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %322) #4, !dbg !47
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %323) #4, !dbg !47
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %324) #4, !dbg !47
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %325) #4, !dbg !47
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %326) #4, !dbg !47
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %327) #4, !dbg !47
  %344 = fmul float %248, %328, !dbg !48
  %345 = fmul float %249, %329, !dbg !48
  %346 = fmul float %250, %330, !dbg !48
  %347 = fmul float %251, %331, !dbg !48
  %348 = fmul float %252, %332, !dbg !48
  %349 = fmul float %253, %333, !dbg !48
  %350 = fmul float %254, %334, !dbg !48
  %351 = fmul float %255, %335, !dbg !48
  %352 = fmul float %256, %336, !dbg !48
  %353 = fmul float %257, %337, !dbg !48
  %354 = fmul float %258, %338, !dbg !48
  %355 = fmul float %259, %339, !dbg !48
  %356 = fmul float %260, %340, !dbg !48
  %357 = fmul float %261, %341, !dbg !48
  %358 = fmul float %262, %342, !dbg !48
  %359 = fmul float %263, %343, !dbg !48
  %360 = shl i32 %207, 6, !dbg !49
  %361 = shl i32 %204, 6, !dbg !49
  %362 = shl i32 %201, 6, !dbg !49
  %363 = shl i32 %196, 6, !dbg !49
  %364 = shl i32 %210, 14, !dbg !50
  %365 = add i32 %364, %.decomposed, !dbg !51
  %366 = add i32 %365, %360, !dbg !52
  %367 = add i32 %365, %361, !dbg !52
  %368 = add i32 %365, %362, !dbg !52
  %369 = add i32 %365, %363, !dbg !52
  %370 = sext i32 %366 to i64, !dbg !53
  %371 = getelementptr float, ptr addrspace(1) %5, i64 %370, !dbg !53
  %372 = sext i32 %367 to i64, !dbg !53
  %373 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !53
  %374 = sext i32 %368 to i64, !dbg !53
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !53
  %376 = sext i32 %369 to i64, !dbg !53
  %377 = getelementptr float, ptr addrspace(1) %5, i64 %376, !dbg !53
  %378 = shl i32 %11, 8, !dbg !54
  %379 = and i32 %378, 3840, !dbg !54
  %380 = or disjoint i32 %379, %13, !dbg !54
  %381 = and i32 %17, 1020, !dbg !54
  %382 = lshr exact i32 %379, 2, !dbg !54
  %383 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %382, !dbg !54
  %384 = getelementptr float, ptr addrspace(3) %383, i32 %380, !dbg !54
  %385 = bitcast float %344 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !54
  %386 = or disjoint i32 %380, 64, !dbg !54
  %387 = lshr i32 %386, 4, !dbg !54
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !54
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %386, !dbg !54
  %390 = bitcast float %345 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !54
  %391 = or disjoint i32 %380, 128, !dbg !54
  %392 = lshr i32 %391, 4, !dbg !54
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %392, !dbg !54
  %394 = getelementptr float, ptr addrspace(3) %393, i32 %391, !dbg !54
  %395 = bitcast float %346 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %395, i1 true) #4, !dbg !54
  %396 = or disjoint i32 %380, 192, !dbg !54
  %397 = lshr i32 %396, 4, !dbg !54
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i32 %397, !dbg !54
  %399 = getelementptr float, ptr addrspace(3) %398, i32 %396, !dbg !54
  %400 = bitcast float %347 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #4, !dbg !54
  %401 = or disjoint i32 %380, 16, !dbg !54
  %402 = getelementptr float, ptr addrspace(3) %383, i32 %401, !dbg !54
  %403 = bitcast float %348 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #4, !dbg !54
  %404 = or disjoint i32 %380, 80, !dbg !54
  %405 = lshr i32 %404, 4, !dbg !54
  %406 = and i32 %405, 244, !dbg !54
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %406, !dbg !54
  %408 = getelementptr float, ptr addrspace(3) %407, i32 %404, !dbg !54
  %409 = bitcast float %349 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 true) #4, !dbg !54
  %410 = or disjoint i32 %380, 144, !dbg !54
  %411 = lshr i32 %410, 4, !dbg !54
  %412 = and i32 %411, 248, !dbg !54
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i32 %412, !dbg !54
  %414 = getelementptr float, ptr addrspace(3) %413, i32 %410, !dbg !54
  %415 = bitcast float %350 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #4, !dbg !54
  %416 = or disjoint i32 %380, 208, !dbg !54
  %417 = lshr i32 %416, 4, !dbg !54
  %418 = and i32 %417, 252, !dbg !54
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i32 %418, !dbg !54
  %420 = getelementptr float, ptr addrspace(3) %419, i32 %416, !dbg !54
  %421 = bitcast float %351 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #4, !dbg !54
  %422 = or disjoint i32 %380, 32, !dbg !54
  %423 = getelementptr float, ptr addrspace(3) %383, i32 %422, !dbg !54
  %424 = bitcast float %352 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #4, !dbg !54
  %425 = or disjoint i32 %380, 96, !dbg !54
  %426 = lshr i32 %425, 4, !dbg !54
  %427 = and i32 %426, 244, !dbg !54
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %427, !dbg !54
  %429 = getelementptr float, ptr addrspace(3) %428, i32 %425, !dbg !54
  %430 = bitcast float %353 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #4, !dbg !54
  %431 = or disjoint i32 %380, 160, !dbg !54
  %432 = lshr i32 %431, 4, !dbg !54
  %433 = and i32 %432, 248, !dbg !54
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i32 %433, !dbg !54
  %435 = getelementptr float, ptr addrspace(3) %434, i32 %431, !dbg !54
  %436 = bitcast float %354 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #4, !dbg !54
  %437 = or disjoint i32 %380, 224, !dbg !54
  %438 = lshr i32 %437, 4, !dbg !54
  %439 = and i32 %438, 252, !dbg !54
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %439, !dbg !54
  %441 = getelementptr float, ptr addrspace(3) %440, i32 %437, !dbg !54
  %442 = bitcast float %355 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #4, !dbg !54
  %443 = or disjoint i32 %380, 48, !dbg !54
  %444 = getelementptr float, ptr addrspace(3) %383, i32 %443, !dbg !54
  %445 = bitcast float %356 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %445, i1 true) #4, !dbg !54
  %446 = or disjoint i32 %380, 112, !dbg !54
  %447 = lshr i32 %446, 4, !dbg !54
  %448 = and i32 %447, 244, !dbg !54
  %449 = getelementptr float, ptr addrspace(3) @global_smem, i32 %448, !dbg !54
  %450 = getelementptr float, ptr addrspace(3) %449, i32 %446, !dbg !54
  %451 = bitcast float %357 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %451, i1 true) #4, !dbg !54
  %452 = or disjoint i32 %380, 176, !dbg !54
  %453 = lshr i32 %452, 4, !dbg !54
  %454 = and i32 %453, 248, !dbg !54
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %454, !dbg !54
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %452, !dbg !54
  %457 = bitcast float %358 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %457, i1 true) #4, !dbg !54
  %458 = or disjoint i32 %380, 240, !dbg !54
  %459 = lshr i32 %458, 4, !dbg !54
  %460 = and i32 %459, 252, !dbg !54
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !54
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %458, !dbg !54
  %463 = bitcast float %359 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %463, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %464 = lshr i32 %17, 4, !dbg !54
  %465 = and i32 %464, 60, !dbg !54
  %466 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %465, !dbg !54
  %467 = getelementptr inbounds float, ptr addrspace(3) %466, i32 %381, !dbg !54
  %468 = or disjoint i32 %381, 1024, !dbg !54
  %469 = lshr i32 %468, 4, !dbg !54
  %470 = and i32 %469, 124, !dbg !54
  %471 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %470, !dbg !54
  %472 = getelementptr inbounds float, ptr addrspace(3) %471, i32 %468, !dbg !54
  %473 = load <4 x i32>, ptr addrspace(3) %472, align 16, !dbg !54
  %474 = or disjoint i32 %381, 2048, !dbg !54
  %475 = lshr i32 %474, 4, !dbg !54
  %476 = and i32 %475, 188, !dbg !54
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %476, !dbg !54
  %478 = getelementptr inbounds float, ptr addrspace(3) %477, i32 %474, !dbg !54
  %479 = load <4 x i32>, ptr addrspace(3) %478, align 16, !dbg !54
  %480 = or disjoint i32 %381, 3072, !dbg !54
  %481 = lshr i32 %480, 4, !dbg !54
  %482 = and i32 %481, 252, !dbg !54
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %482, !dbg !54
  %484 = getelementptr inbounds float, ptr addrspace(3) %483, i32 %480, !dbg !54
  %485 = load <4 x i32>, ptr addrspace(3) %484, align 16, !dbg !54
  %.extract = load i32, ptr addrspace(3) %467, align 16, !dbg !54
  %486 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 4, !dbg !54
  %.extract16 = load i32, ptr addrspace(3) %486, align 4, !dbg !54
  %487 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 8, !dbg !54
  %.extract17 = load i32, ptr addrspace(3) %487, align 8, !dbg !54
  %488 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 12, !dbg !54
  %.extract18 = load i32, ptr addrspace(3) %488, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %371, i1 %209) #4, !dbg !54
  %.extract19 = extractelement <4 x i32> %473, i64 0, !dbg !54
  %.extract20 = extractelement <4 x i32> %473, i64 1, !dbg !54
  %.extract21 = extractelement <4 x i32> %473, i64 2, !dbg !54
  %.extract22 = extractelement <4 x i32> %473, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %373, i1 %206) #4, !dbg !54
  %.extract23 = extractelement <4 x i32> %479, i64 0, !dbg !54
  %.extract24 = extractelement <4 x i32> %479, i64 1, !dbg !54
  %.extract25 = extractelement <4 x i32> %479, i64 2, !dbg !54
  %.extract26 = extractelement <4 x i32> %479, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %375, i1 %203) #4, !dbg !54
  %.extract27 = extractelement <4 x i32> %485, i64 0, !dbg !54
  %.extract28 = extractelement <4 x i32> %485, i64 1, !dbg !54
  %.extract29 = extractelement <4 x i32> %485, i64 2, !dbg !54
  %.extract30 = extractelement <4 x i32> %485, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %377, i1 %200) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co4u73qqxj6nnudofstjn7ltmymj3ft37kpit5co67umt772d3y5.py", directory: "inductor_cache/o4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 48, column: 23, scope: !7)
!45 = !DILocation(line: 47, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 20, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 47, column: 16, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 33, scope: !7)
!50 = !DILocation(line: 50, column: 44, scope: !7)
!51 = !DILocation(line: 50, column: 30, scope: !7)
!52 = !DILocation(line: 50, column: 38, scope: !7)
!53 = !DILocation(line: 50, column: 25, scope: !7)
!54 = !DILocation(line: 50, column: 56, scope: !7)
!55 = !DILocation(line: 50, column: 4, scope: !7)
