; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 4000, !dbg !14
  %12 = lshr i32 %7, 4, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %14 = sdiv i32 %.frozen, 1000, !dbg !16
  %15 = mul i32 %14, 1000, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = mul i32 %14, 4096000, !dbg !18
  %17 = add i32 %16, %.decomposed
  %18 = zext nneg i32 %13 to i64, !dbg !19
  %19 = insertelement <4 x i1> poison, i1 %11, i64 0, !dbg !20
  %20 = shufflevector <4 x i1> %19, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  br label %21, !dbg !19

21:                                               ; preds = %4, %21
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %21 ]
  %22 = phi <4 x float> [ splat (float 0xFFF0000000000000), %4 ], [ %56, %21 ]
  %23 = phi <4 x i64> [ splat (i64 9223372036854775807), %4 ], [ %57, %21 ]
  %24 = or disjoint i64 %indvars.iv, %18, !dbg !21
  %25 = trunc i64 %24 to i32, !dbg !22
  %26 = mul i32 %25, 1000, !dbg !22
  %27 = add i32 %17, %26, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #3, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !24
  %35 = fcmp uno <4 x float> %22, zeroinitializer, !dbg !25
  %36 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !24
  %37 = insertelement <4 x i32> %36, i32 %33, i64 1, !dbg !24
  %38 = insertelement <4 x i32> %37, i32 %32, i64 2, !dbg !24
  %39 = insertelement <4 x i32> %38, i32 %31, i64 3, !dbg !24
  %40 = bitcast <4 x i32> %39 to <4 x float>, !dbg !24
  %41 = fcmp ogt <4 x float> %22, %40, !dbg !29
  %42 = fcmp oeq <4 x float> %22, %40, !dbg !30
  %43 = fcmp uno <4 x float> %40, zeroinitializer, !dbg !31
  %44 = xor <4 x i1> %43, splat (i1 true), !dbg !32
  %45 = and <4 x i1> %35, %44, !dbg !33
  %46 = or <4 x i1> %41, %45, !dbg !34
  %47 = and <4 x i1> %35, %43, !dbg !35
  %48 = or <4 x i1> %42, %47, !dbg !36
  %49 = insertelement <4 x i64> poison, i64 %24, i64 0, !dbg !37
  %50 = shufflevector <4 x i64> %49, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !37
  %51 = icmp slt <4 x i64> %23, %50, !dbg !37
  %52 = and <4 x i1> %51, %48, !dbg !38
  %53 = or <4 x i1> %46, %52, !dbg !39
  %54 = select <4 x i1> %53, <4 x float> %22, <4 x float> %40, !dbg !40
  %55 = select <4 x i1> %53, <4 x i64> %23, <4 x i64> %50, !dbg !41
  %56 = select <4 x i1> %20, <4 x float> %54, <4 x float> %22, !dbg !20
  %57 = select <4 x i1> %20, <4 x i64> %55, <4 x i64> %23, !dbg !42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !19
  %58 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !19
  br i1 %58, label %21, label %59, !dbg !19

59:                                               ; preds = %21
  %60 = lshr i32 %7, 5, !dbg !12
  %61 = and i32 %7, 63, !dbg !12
  %62 = or disjoint i32 %6, %61, !dbg !13
  %63 = icmp slt i32 %62, 4000, !dbg !14
  %64 = and i32 %7, 16, !dbg !12
  %65 = extractelement <4 x float> %56, i64 3, !dbg !43
  %66 = bitcast float %65 to i32, !dbg !43
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !43
  %68 = extractelement <4 x i64> %57, i64 3, !dbg !45
  %69 = bitcast <4 x i64> %57 to <8 x i32>, !dbg !43
  %70 = extractelement <8 x i32> %69, i64 7, !dbg !43
  %71 = trunc i64 %68 to i32, !dbg !43
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !43
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !43
  %74 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !43
  %75 = insertelement <2 x i32> %74, i32 %73, i64 1, !dbg !43
  %76 = bitcast <2 x i32> %75 to i64, !dbg !43
  %77 = fcmp uno float %65, 0.000000e+00, !dbg !47
  %78 = icmp slt i64 %68, %76, !dbg !45
  %79 = extractelement <4 x float> %56, i64 2, !dbg !43
  %80 = bitcast float %79 to i32, !dbg !43
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !43
  %82 = extractelement <4 x i64> %57, i64 2, !dbg !45
  %83 = bitcast <4 x i64> %57 to <8 x i32>, !dbg !43
  %84 = extractelement <8 x i32> %83, i64 5, !dbg !43
  %85 = trunc i64 %82 to i32, !dbg !43
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !43
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !43
  %88 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !43
  %89 = insertelement <2 x i32> %88, i32 %87, i64 1, !dbg !43
  %90 = bitcast <2 x i32> %89 to i64, !dbg !43
  %91 = fcmp uno float %79, 0.000000e+00, !dbg !47
  %92 = icmp slt i64 %82, %90, !dbg !45
  %93 = extractelement <4 x float> %56, i64 1, !dbg !43
  %94 = bitcast float %93 to i32, !dbg !43
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !43
  %96 = extractelement <4 x i64> %57, i64 1, !dbg !45
  %97 = bitcast <4 x i64> %57 to <8 x i32>, !dbg !43
  %98 = extractelement <8 x i32> %97, i64 3, !dbg !43
  %99 = trunc i64 %96 to i32, !dbg !43
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !43
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !43
  %102 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !43
  %103 = insertelement <2 x i32> %102, i32 %101, i64 1, !dbg !43
  %104 = bitcast <2 x i32> %103 to i64, !dbg !43
  %105 = fcmp uno float %93, 0.000000e+00, !dbg !47
  %106 = icmp slt i64 %96, %104, !dbg !45
  %107 = extractelement <4 x float> %56, i64 0, !dbg !43
  %108 = bitcast float %107 to i32, !dbg !43
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !43
  %110 = extractelement <4 x i64> %57, i64 0, !dbg !45
  %111 = bitcast <4 x i64> %57 to <8 x i32>, !dbg !43
  %112 = extractelement <8 x i32> %111, i64 1, !dbg !43
  %113 = trunc i64 %110 to i32, !dbg !43
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !43
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !43
  %116 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !43
  %117 = insertelement <2 x i32> %116, i32 %115, i64 1, !dbg !43
  %118 = bitcast <2 x i32> %117 to i64, !dbg !43
  %119 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !43
  %120 = insertelement <4 x i32> %119, i32 %95, i64 1, !dbg !43
  %121 = insertelement <4 x i32> %120, i32 %81, i64 2, !dbg !43
  %122 = insertelement <4 x i32> %121, i32 %67, i64 3, !dbg !43
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !43
  %124 = bitcast i32 %67 to float, !dbg !48
  %125 = fcmp ogt float %65, %124, !dbg !49
  %126 = fcmp uno float %124, 0.000000e+00, !dbg !48
  %127 = xor i1 %126, true, !dbg !50
  %128 = and i1 %77, %127, !dbg !51
  %129 = or i1 %125, %128, !dbg !52
  %130 = and i1 %77, %126, !dbg !53
  %131 = fcmp oeq <4 x float> %56, %123, !dbg !54
  %132 = extractelement <4 x i1> %131, i64 3, !dbg !55
  %133 = or i1 %132, %130, !dbg !55
  %134 = and i1 %133, %78, !dbg !56
  %135 = or i1 %129, %134, !dbg !57
  %136 = select i1 %135, i64 %68, i64 %76, !dbg !58
  %137 = bitcast i32 %81 to float, !dbg !48
  %138 = fcmp ogt float %79, %137, !dbg !49
  %139 = fcmp uno float %137, 0.000000e+00, !dbg !48
  %140 = xor i1 %139, true, !dbg !50
  %141 = and i1 %91, %140, !dbg !51
  %142 = or i1 %138, %141, !dbg !52
  %143 = and i1 %91, %139, !dbg !53
  %144 = extractelement <4 x i1> %131, i64 2, !dbg !55
  %145 = or i1 %144, %143, !dbg !55
  %146 = and i1 %145, %92, !dbg !56
  %147 = or i1 %142, %146, !dbg !57
  %148 = select i1 %147, i64 %82, i64 %90, !dbg !58
  %149 = bitcast i32 %95 to float, !dbg !48
  %150 = fcmp ogt float %93, %149, !dbg !49
  %151 = fcmp uno float %149, 0.000000e+00, !dbg !48
  %152 = xor i1 %151, true, !dbg !50
  %153 = and i1 %105, %152, !dbg !51
  %154 = or i1 %150, %153, !dbg !52
  %155 = and i1 %105, %151, !dbg !53
  %156 = extractelement <4 x i1> %131, i64 1, !dbg !55
  %157 = or i1 %156, %155, !dbg !55
  %158 = and i1 %157, %106, !dbg !56
  %159 = or i1 %154, %158, !dbg !57
  %160 = select i1 %159, i64 %96, i64 %104, !dbg !58
  %161 = bitcast i32 %109 to float, !dbg !48
  %162 = fcmp ogt float %107, %161, !dbg !49
  %163 = fcmp uno float %107, 0.000000e+00, !dbg !47
  %164 = fcmp uno float %161, 0.000000e+00, !dbg !48
  %165 = xor i1 %164, true, !dbg !50
  %166 = and i1 %163, %165, !dbg !51
  %167 = or i1 %162, %166, !dbg !52
  %168 = and i1 %163, %164, !dbg !53
  %169 = extractelement <4 x i1> %131, i64 0, !dbg !55
  %170 = or i1 %169, %168, !dbg !55
  %171 = icmp slt i64 %110, %118, !dbg !45
  %172 = and i1 %170, %171, !dbg !56
  %173 = or i1 %167, %172, !dbg !57
  %174 = select i1 %173, i64 %110, i64 %118, !dbg !58
  %175 = icmp eq i32 %64, 0, !dbg !43
  %176 = and i32 %60, 3, !dbg !43
  %177 = shl nuw nsw i32 %9, 2, !dbg !43
  %178 = or disjoint i32 %177, %176, !dbg !43
  %179 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %178, !dbg !43
  %180 = select i1 %135, i32 %66, i32 %67, !dbg !59
  %181 = insertelement <1 x i32> poison, i32 %180, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %181, i1 %175) #3, !dbg !43
  %182 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %178, !dbg !43
  %183 = insertelement <1 x i64> poison, i64 %136, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %182, <1 x i64> %183, i1 %175) #3, !dbg !43
  %184 = or disjoint i32 %177, 4, !dbg !43
  %185 = or disjoint i32 %184, %176, !dbg !43
  %186 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %185, !dbg !43
  %187 = select i1 %147, i32 %80, i32 %81, !dbg !59
  %188 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %188, i1 %175) #3, !dbg !43
  %189 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %185, !dbg !43
  %190 = insertelement <1 x i64> poison, i64 %148, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %189, <1 x i64> %190, i1 %175) #3, !dbg !43
  %191 = or disjoint i32 %177, 8, !dbg !43
  %192 = or disjoint i32 %191, %176, !dbg !43
  %193 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %192, !dbg !43
  %194 = select i1 %159, i32 %94, i32 %95, !dbg !59
  %195 = insertelement <1 x i32> poison, i32 %194, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %195, i1 %175) #3, !dbg !43
  %196 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %192, !dbg !43
  %197 = insertelement <1 x i64> poison, i64 %160, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %196, <1 x i64> %197, i1 %175) #3, !dbg !43
  %198 = or disjoint i32 %177, 12, !dbg !43
  %199 = or disjoint i32 %198, %176, !dbg !43
  %200 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %199, !dbg !43
  %201 = select i1 %173, i32 %108, i32 %109, !dbg !59
  %202 = insertelement <1 x i32> poison, i32 %201, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %202, i1 %175) #3, !dbg !43
  %203 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %199, !dbg !43
  %204 = insertelement <1 x i64> poison, i64 %174, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %203, <1 x i64> %204, i1 %175) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %205 = icmp slt i32 %7, 256, !dbg !43
  %206 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %7, !dbg !43
  %207 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %206, i1 %205) #3, !dbg !43
  %208 = bitcast i32 %207 to float, !dbg !43
  %209 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %7, !dbg !43
  %210 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %209, i1 %205) #3, !dbg !43
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !43
  %212 = bitcast i32 %211 to float, !dbg !43
  %extelt.offset4 = lshr i64 %210, 32, !dbg !43
  %213 = trunc nuw i64 %extelt.offset4 to i32, !dbg !43
  %214 = trunc i64 %210 to i32, !dbg !43
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !43
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !43
  %217 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !43
  %218 = insertelement <2 x i32> %217, i32 %216, i64 1, !dbg !43
  %219 = bitcast <2 x i32> %218 to i64, !dbg !43
  %220 = fcmp ogt float %208, %212, !dbg !49
  %221 = fcmp oeq float %208, %212, !dbg !54
  %222 = fcmp uno float %208, 0.000000e+00, !dbg !47
  %223 = fcmp uno float %212, 0.000000e+00, !dbg !48
  %224 = xor i1 %223, true, !dbg !50
  %225 = and i1 %222, %224, !dbg !51
  %226 = or i1 %220, %225, !dbg !52
  %227 = and i1 %222, %223, !dbg !53
  %228 = or i1 %221, %227, !dbg !55
  %229 = icmp slt i64 %210, %219, !dbg !45
  %230 = and i1 %228, %229, !dbg !56
  %231 = or i1 %226, %230, !dbg !57
  %232 = select i1 %231, float %208, float %212, !dbg !59
  %233 = select i1 %231, i64 %210, i64 %219, !dbg !58
  %234 = bitcast float %232 to i32, !dbg !43
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !43
  %236 = bitcast i32 %235 to float, !dbg !43
  %extelt.offset5 = lshr i64 %233, 32, !dbg !43
  %237 = trunc nuw i64 %extelt.offset5 to i32, !dbg !43
  %238 = trunc i64 %233 to i32, !dbg !43
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 1, i32 31), !dbg !43
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !43
  %241 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !43
  %242 = insertelement <2 x i32> %241, i32 %240, i64 1, !dbg !43
  %243 = bitcast <2 x i32> %242 to i64, !dbg !43
  %244 = fcmp ogt float %232, %236, !dbg !49
  %245 = fcmp oeq float %232, %236, !dbg !54
  %246 = fcmp uno float %232, 0.000000e+00, !dbg !47
  %247 = fcmp uno float %236, 0.000000e+00, !dbg !48
  %248 = xor i1 %247, true, !dbg !50
  %249 = and i1 %246, %248, !dbg !51
  %250 = or i1 %244, %249, !dbg !52
  %251 = and i1 %247, %246, !dbg !53
  %252 = or i1 %245, %251, !dbg !55
  %253 = icmp slt i64 %233, %243, !dbg !45
  %254 = and i1 %253, %252, !dbg !56
  %255 = or i1 %250, %254, !dbg !57
  %256 = select i1 %255, i64 %233, i64 %243, !dbg !58
  %257 = and i32 %7, 3, !dbg !43
  %258 = icmp eq i32 %257, 0, !dbg !43
  %259 = and i1 %205, %258, !dbg !43
  %260 = select i1 %255, i32 %234, i32 %235, !dbg !59
  %261 = insertelement <1 x i32> poison, i32 %260, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %261, i1 %259) #3, !dbg !43
  %262 = insertelement <1 x i64> poison, i64 %256, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %209, <1 x i64> %262, i1 %259) #3, !dbg !43
  %263 = add i32 %7, 128, !dbg !43
  %264 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %263, !dbg !43
  %265 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %264, i1 %205) #3, !dbg !43
  %266 = bitcast i32 %265 to float, !dbg !43
  %267 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %263, !dbg !43
  %268 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %267, i1 %205) #3, !dbg !43
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !43
  %270 = bitcast i32 %269 to float, !dbg !43
  %extelt.offset6 = lshr i64 %268, 32, !dbg !43
  %271 = trunc nuw i64 %extelt.offset6 to i32, !dbg !43
  %272 = trunc i64 %268 to i32, !dbg !43
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !43
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !43
  %275 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !43
  %276 = insertelement <2 x i32> %275, i32 %274, i64 1, !dbg !43
  %277 = bitcast <2 x i32> %276 to i64, !dbg !43
  %278 = fcmp ogt float %266, %270, !dbg !49
  %279 = fcmp oeq float %266, %270, !dbg !54
  %280 = fcmp uno float %266, 0.000000e+00, !dbg !47
  %281 = fcmp uno float %270, 0.000000e+00, !dbg !48
  %282 = xor i1 %281, true, !dbg !50
  %283 = and i1 %280, %282, !dbg !51
  %284 = or i1 %278, %283, !dbg !52
  %285 = and i1 %280, %281, !dbg !53
  %286 = or i1 %279, %285, !dbg !55
  %287 = icmp slt i64 %268, %277, !dbg !45
  %288 = and i1 %286, %287, !dbg !56
  %289 = or i1 %284, %288, !dbg !57
  %290 = select i1 %289, float %266, float %270, !dbg !59
  %291 = select i1 %289, i64 %268, i64 %277, !dbg !58
  %292 = bitcast float %290 to i32, !dbg !43
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !43
  %294 = bitcast i32 %293 to float, !dbg !43
  %extelt.offset7 = lshr i64 %291, 32, !dbg !43
  %295 = trunc nuw i64 %extelt.offset7 to i32, !dbg !43
  %296 = trunc i64 %291 to i32, !dbg !43
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !43
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !43
  %299 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !43
  %300 = insertelement <2 x i32> %299, i32 %298, i64 1, !dbg !43
  %301 = bitcast <2 x i32> %300 to i64, !dbg !43
  %302 = fcmp ogt float %290, %294, !dbg !49
  %303 = fcmp oeq float %290, %294, !dbg !54
  %304 = fcmp uno float %290, 0.000000e+00, !dbg !47
  %305 = fcmp uno float %294, 0.000000e+00, !dbg !48
  %306 = xor i1 %305, true, !dbg !50
  %307 = and i1 %304, %306, !dbg !51
  %308 = or i1 %302, %307, !dbg !52
  %309 = and i1 %305, %304, !dbg !53
  %310 = or i1 %303, %309, !dbg !55
  %311 = icmp slt i64 %291, %301, !dbg !45
  %312 = and i1 %311, %310, !dbg !56
  %313 = or i1 %308, %312, !dbg !57
  %314 = select i1 %313, i64 %291, i64 %301, !dbg !58
  %315 = select i1 %313, i32 %292, i32 %293, !dbg !59
  %316 = insertelement <1 x i32> poison, i32 %315, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %316, i1 %259) #3, !dbg !43
  %317 = insertelement <1 x i64> poison, i64 %314, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %267, <1 x i64> %317, i1 %259) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %318 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %177, !dbg !43
  %319 = load i64, ptr addrspace(3) %318, align 16, !dbg !43
  %320 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %184, !dbg !43
  %321 = load i64, ptr addrspace(3) %320, align 16, !dbg !43
  %322 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %191, !dbg !43
  %323 = load i64, ptr addrspace(3) %322, align 16, !dbg !43
  %324 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %198, !dbg !43
  %325 = load i64, ptr addrspace(3) %324, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %326 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %9, !dbg !60
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %326, i64 %319, i64 %321, i1 true) #3, !dbg !60
  %327 = getelementptr inbounds i8, ptr addrspace(3) %326, i32 16, !dbg !60
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %327, i64 %323, i64 %325, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %328 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %61, !dbg !60
  %329 = load i64, ptr addrspace(3) %328, align 8, !dbg !60
  %330 = sext i32 %62 to i64, !dbg !61
  %331 = getelementptr i64, ptr addrspace(1) %1, i64 %330, !dbg !61
  %332 = and i32 %7, 64, !dbg !62
  %333 = icmp eq i32 %332, 0, !dbg !62
  %334 = and i1 %333, %63, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %329, ptr addrspace(1) %331, i1 %334) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py", directory: "inductor_cache/6g")
!4 = !{ptr @triton_red_fused_max_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_1", linkageName: "triton_red_fused_max_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 57, scope: !7)
!19 = !DILocation(line: 31, column: 36, scope: !7)
!20 = !DILocation(line: 40, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 27, scope: !7)
!22 = !DILocation(line: 35, column: 49, scope: !7)
!23 = !DILocation(line: 35, column: 34, scope: !7)
!24 = !DILocation(line: 35, column: 62, scope: !7)
!25 = !DILocation(line: 155, column: 29, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 38, column: 38, scope: !7)
!29 = !DILocation(line: 152, column: 21, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 153, column: 23, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 156, column: 29, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 157, column: 32, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 157, column: 28, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 157, column: 16, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 159, column: 29, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 159, column: 17, scope: !26, inlinedAt: !28)
!37 = !DILocation(line: 162, column: 31, scope: !26, inlinedAt: !28)
!38 = !DILocation(line: 162, column: 21, scope: !26, inlinedAt: !28)
!39 = !DILocation(line: 162, column: 12, scope: !26, inlinedAt: !28)
!40 = !DILocation(line: 163, column: 35, scope: !26, inlinedAt: !28)
!41 = !DILocation(line: 163, column: 69, scope: !26, inlinedAt: !28)
!42 = !DILocation(line: 41, column: 64, scope: !7)
!43 = !DILocation(line: 173, column: 42, scope: !26, inlinedAt: !44)
!44 = !DILocation(line: 42, column: 75, scope: !7)
!45 = !DILocation(line: 162, column: 31, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!47 = !DILocation(line: 155, column: 29, scope: !46, inlinedAt: !44)
!48 = !DILocation(line: 156, column: 29, scope: !46, inlinedAt: !44)
!49 = !DILocation(line: 152, column: 21, scope: !46, inlinedAt: !44)
!50 = !DILocation(line: 157, column: 32, scope: !46, inlinedAt: !44)
!51 = !DILocation(line: 157, column: 28, scope: !46, inlinedAt: !44)
!52 = !DILocation(line: 157, column: 16, scope: !46, inlinedAt: !44)
!53 = !DILocation(line: 159, column: 29, scope: !46, inlinedAt: !44)
!54 = !DILocation(line: 153, column: 23, scope: !46, inlinedAt: !44)
!55 = !DILocation(line: 159, column: 17, scope: !46, inlinedAt: !44)
!56 = !DILocation(line: 162, column: 21, scope: !46, inlinedAt: !44)
!57 = !DILocation(line: 162, column: 12, scope: !46, inlinedAt: !44)
!58 = !DILocation(line: 163, column: 69, scope: !46, inlinedAt: !44)
!59 = !DILocation(line: 163, column: 35, scope: !46, inlinedAt: !44)
!60 = !DILocation(line: 43, column: 20, scope: !7)
!61 = !DILocation(line: 44, column: 25, scope: !7)
!62 = !DILocation(line: 44, column: 36, scope: !7)
!63 = !DILocation(line: 44, column: 4, scope: !7)
