#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":19:0)
#loc1 = loc(unknown)
#loc39 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":42:75)
#loc59 = loc(callsite(#loc1 at #loc39))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_max_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<64x8xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9223372036854775807> : tensor<64x8xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<true> : tensor<64x8xi1, #blocked> loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<4000> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4000> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1000> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1000> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<4096000> : tensor<64x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_4 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst_5 : tensor<64x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %8, %cst_5 : tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %14 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc10)
    %17 = arith.muli %15, %cst_8 : tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.broadcast %17 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc12)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc13)
    %20 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
    %21:2 = scf.for %arg4 = %c0_i32 to %c4096_i32 step %c8_i32 iter_args(%arg5 = %cst, %arg6 = %cst_0) -> (tensor<64x8xf32, #blocked>, tensor<64x8xi64, #blocked>)  : i32 {
      %27 = tt.splat %arg4 : i32 -> tensor<1x8xi32, #blocked> loc(#loc16)
      %28 = arith.addi %27, %13 : tensor<1x8xi32, #blocked> loc(#loc16)
      %29 = arith.cmpi slt, %28, %cst_6 : tensor<1x8xi32, #blocked> loc(#loc17)
      %30 = arith.muli %28, %cst_7 : tensor<1x8xi32, #blocked> loc(#loc18)
      %31 = tt.broadcast %30 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc10)
      %32 = arith.addi %16, %31 : tensor<64x8xi32, #blocked> loc(#loc10)
      %33 = arith.addi %32, %18 : tensor<64x8xi32, #blocked> loc(#loc12)
      %34 = tt.addptr %19, %33 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc13)
      %35 = tt.broadcast %29 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
      %36 = arith.andi %35, %20 : tensor<64x8xi1, #blocked> loc(#loc14)
      %37 = tt.load %34, %36, %cst_2 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc19)
      %38 = arith.cmpf ogt, %arg5, %37 : tensor<64x8xf32, #blocked> loc(#loc44)
      %39 = arith.cmpf oeq, %arg5, %37 : tensor<64x8xf32, #blocked> loc(#loc45)
      %40 = arith.cmpf une, %arg5, %arg5 : tensor<64x8xf32, #blocked> loc(#loc46)
      %41 = arith.cmpf une, %37, %37 : tensor<64x8xf32, #blocked> loc(#loc47)
      %42 = arith.xori %41, %cst_1 : tensor<64x8xi1, #blocked> loc(#loc48)
      %43 = arith.andi %40, %42 : tensor<64x8xi1, #blocked> loc(#loc49)
      %44 = arith.ori %38, %43 : tensor<64x8xi1, #blocked> loc(#loc50)
      %45 = arith.andi %40, %41 : tensor<64x8xi1, #blocked> loc(#loc51)
      %46 = arith.ori %39, %45 : tensor<64x8xi1, #blocked> loc(#loc52)
      %47 = arith.extsi %28 : tensor<1x8xi32, #blocked> to tensor<1x8xi64, #blocked> loc(#loc53)
      %48 = tt.broadcast %47 : tensor<1x8xi64, #blocked> -> tensor<64x8xi64, #blocked> loc(#loc53)
      %49 = arith.cmpi slt, %arg6, %48 : tensor<64x8xi64, #blocked> loc(#loc53)
      %50 = arith.andi %46, %49 : tensor<64x8xi1, #blocked> loc(#loc54)
      %51 = arith.ori %44, %50 : tensor<64x8xi1, #blocked> loc(#loc55)
      %52 = arith.select %51, %arg5, %37 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc56)
      %53 = arith.select %51, %arg6, %48 : tensor<64x8xi1, #blocked>, tensor<64x8xi64, #blocked> loc(#loc57)
      %54 = arith.select %36, %52, %arg5 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc35)
      %55 = arith.select %36, %53, %arg6 : tensor<64x8xi1, #blocked>, tensor<64x8xi64, #blocked> loc(#loc36)
      scf.yield %54, %55 : tensor<64x8xf32, #blocked>, tensor<64x8xi64, #blocked> loc(#loc37)
    } loc(#loc15)
    %22:2 = "tt.reduce"(%21#0, %21#1) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc39)), %arg5: i64 loc(callsite(#loc1 at #loc39)), %arg6: f32 loc(callsite(#loc1 at #loc39)), %arg7: i64 loc(callsite(#loc1 at #loc39))):
      %27 = arith.cmpf ogt, %arg4, %arg6 : f32 loc(#loc74)
      %28 = arith.cmpf oeq, %arg4, %arg6 : f32 loc(#loc75)
      %29 = arith.cmpf une, %arg4, %arg4 : f32 loc(#loc76)
      %30 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc77)
      %31 = arith.xori %30, %true : i1 loc(#loc78)
      %32 = arith.andi %29, %31 : i1 loc(#loc79)
      %33 = arith.ori %27, %32 : i1 loc(#loc80)
      %34 = arith.andi %29, %30 : i1 loc(#loc81)
      %35 = arith.ori %28, %34 : i1 loc(#loc82)
      %36 = arith.cmpi slt, %arg5, %arg7 : i64 loc(#loc83)
      %37 = arith.andi %35, %36 : i1 loc(#loc84)
      %38 = arith.ori %33, %37 : i1 loc(#loc85)
      %39 = arith.select %38, %arg4, %arg6 : f32 loc(#loc86)
      %40 = arith.select %38, %arg5, %arg7 : i64 loc(#loc87)
      tt.reduce.return %39, %40 : f32, i64 loc(#loc58)
    }) : (tensor<64x8xf32, #blocked>, tensor<64x8xi64, #blocked>) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc58)
    %23 = triton_gpu.convert_layout %22#1 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc40)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc40)
    %25 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<64x1x!tt.ptr<i64>, #blocked1> loc(#loc41)
    %26 = tt.addptr %25, %9 : tensor<64x1x!tt.ptr<i64>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc41)
    tt.store %26, %24, %11 : tensor<64x1x!tt.ptr<i64>, #blocked1> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":22:28)
#loc3 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":22:33)
#loc4 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":23:44)
#loc5 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":23:23)
#loc6 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":24:21)
#loc7 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":25:33)
#loc8 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":26:19)
#loc9 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":27:19)
#loc10 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":35:39)
#loc11 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":35:57)
#loc12 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":35:49)
#loc13 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":35:34)
#loc14 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":35:70)
#loc15 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":31:36)
#loc16 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":32:27)
#loc17 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":33:25)
#loc18 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":35:44)
#loc19 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":35:62)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":152:21)
#loc21 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":38:38)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":153:23)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":155:29)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":156:29)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":157:32)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":157:28)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":157:16)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":159:29)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":159:17)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":162:31)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":162:21)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":162:12)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":163:35)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":163:69)
#loc35 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":40:52)
#loc36 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":41:64)
#loc37 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":41:8)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":173:42)
#loc40 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":43:20)
#loc41 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":44:25)
#loc42 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":44:36)
#loc43 = loc("inductor_cache/6g/c6gssomhgd23sy47654vydeqvvql3iu4ad3bepj3lynj4ro2b7h7.py":44:4)
#loc44 = loc(callsite(#loc20 at #loc21))
#loc45 = loc(callsite(#loc22 at #loc21))
#loc46 = loc(callsite(#loc23 at #loc21))
#loc47 = loc(callsite(#loc24 at #loc21))
#loc48 = loc(callsite(#loc25 at #loc21))
#loc49 = loc(callsite(#loc26 at #loc21))
#loc50 = loc(callsite(#loc27 at #loc21))
#loc51 = loc(callsite(#loc28 at #loc21))
#loc52 = loc(callsite(#loc29 at #loc21))
#loc53 = loc(callsite(#loc30 at #loc21))
#loc54 = loc(callsite(#loc31 at #loc21))
#loc55 = loc(callsite(#loc32 at #loc21))
#loc56 = loc(callsite(#loc33 at #loc21))
#loc57 = loc(callsite(#loc34 at #loc21))
#loc58 = loc(callsite(#loc38 at #loc39))
#loc60 = loc(callsite(#loc20 at #loc38))
#loc61 = loc(callsite(#loc22 at #loc38))
#loc62 = loc(callsite(#loc23 at #loc38))
#loc63 = loc(callsite(#loc24 at #loc38))
#loc64 = loc(callsite(#loc25 at #loc38))
#loc65 = loc(callsite(#loc26 at #loc38))
#loc66 = loc(callsite(#loc27 at #loc38))
#loc67 = loc(callsite(#loc28 at #loc38))
#loc68 = loc(callsite(#loc29 at #loc38))
#loc69 = loc(callsite(#loc30 at #loc38))
#loc70 = loc(callsite(#loc31 at #loc38))
#loc71 = loc(callsite(#loc32 at #loc38))
#loc72 = loc(callsite(#loc33 at #loc38))
#loc73 = loc(callsite(#loc34 at #loc38))
#loc74 = loc(callsite(#loc60 at #loc39))
#loc75 = loc(callsite(#loc61 at #loc39))
#loc76 = loc(callsite(#loc62 at #loc39))
#loc77 = loc(callsite(#loc63 at #loc39))
#loc78 = loc(callsite(#loc64 at #loc39))
#loc79 = loc(callsite(#loc65 at #loc39))
#loc80 = loc(callsite(#loc66 at #loc39))
#loc81 = loc(callsite(#loc67 at #loc39))
#loc82 = loc(callsite(#loc68 at #loc39))
#loc83 = loc(callsite(#loc69 at #loc39))
#loc84 = loc(callsite(#loc70 at #loc39))
#loc85 = loc(callsite(#loc71 at #loc39))
#loc86 = loc(callsite(#loc72 at #loc39))
#loc87 = loc(callsite(#loc73 at #loc39))
