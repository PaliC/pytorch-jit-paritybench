; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 2, !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = or disjoint i32 %17, 32, !dbg !12
  %19 = shl i32 %15, 2, !dbg !12
  %20 = and i32 %19, 12, !dbg !12
  %21 = or disjoint i32 %14, %17, !dbg !13
  %22 = or disjoint i32 %14, %18, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %24 = shl i32 %23, 4, !dbg !15
  %25 = or disjoint i32 %24, %20, !dbg !16
  %26 = icmp slt i32 %25, 16, !dbg !17
  %27 = shl i32 %21, 4, !dbg !18
  %28 = shl i32 %22, 4, !dbg !18
  %29 = add i32 %25, %27, !dbg !19
  %30 = add i32 %25, %28, !dbg !19
  %31 = sext i32 %29 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = sext i32 %30 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %26) #4, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %26) #4, !dbg !21
  %37 = sext i32 %25 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %26) #4, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #4, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %26) #4, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = bitcast i32 %47 to float, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %26) #4, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !30
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %26) #4, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !32
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %26) #4, !dbg !33
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %26) #4, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #4, !dbg !34
  %61 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %62 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %63 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %64 = fadd float %51, 0x3EE4F8B580000000, !dbg !35
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %65, 0, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %66, 0, !dbg !36
  br i1 %.not.i, label %72, label %67, !dbg !36

67:                                               ; preds = %12
  br i1 %.not1.i, label %70, label %68, !dbg !36

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %12
  br i1 %.not1.i, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i17 = icmp eq i32 %77, 0, !dbg !36
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i20 = icmp eq i32 %78, 0, !dbg !36
  br i1 %.not.i17, label %84, label %79, !dbg !36

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %82, label %80, !dbg !36

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

__nv_sqrtf.exit21:                                ; preds = %80, %82, %85, %87
  %.0.i19 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i22 = icmp eq i32 %89, 0, !dbg !36
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i25 = icmp eq i32 %90, 0, !dbg !36
  br i1 %.not.i22, label %96, label %91, !dbg !36

91:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %94, label %92, !dbg !36

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

__nv_sqrtf.exit26:                                ; preds = %92, %94, %97, %99
  %.0.i24 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !36
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i27 = icmp eq i32 %101, 0, !dbg !36
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i30 = icmp eq i32 %102, 0, !dbg !36
  br i1 %.not.i27, label %108, label %103, !dbg !36

103:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %106, label %104, !dbg !36

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

108:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %111, label %109, !dbg !36

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

__nv_sqrtf.exit31:                                ; preds = %104, %106, %109, %111
  %.0.i29 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !36
  %113 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !21
  %114 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %115 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !21
  %117 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !21
  %120 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %122 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !21
  %123 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %125 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %126 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %127 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %128 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %129 = bitcast i32 %60 to float, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !33
  %131 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !33
  %138 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !31
  %139 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !31
  %140 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !29
  %143 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !29
  %144 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !29
  %145 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !29
  %146 = and i32 %19, 60, !dbg !12
  %147 = or disjoint i32 %14, %146, !dbg !13
  %.frozen = freeze i32 %147, !dbg !37
  %148 = sdiv i32 %.frozen, 1024, !dbg !37
  %149 = mul i32 %148, 1024, !dbg !38
  %.decomposed = sub i32 %.frozen, %149, !dbg !38
  %150 = lshr i32 %15, 4, !dbg !39
  %151 = and i32 %150, 7, !dbg !39
  %152 = or disjoint i32 %151, %24, !dbg !16
  %153 = or disjoint i32 %152, 8, !dbg !16
  %154 = icmp slt i32 %153, 16, !dbg !17
  %155 = icmp slt i32 %152, 16, !dbg !17
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !40
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !40
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !40
  %160 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !23
  %161 = insertelement <4 x i32> %160, i32 %117, i64 1, !dbg !23
  %162 = insertelement <4 x i32> %161, i32 %120, i64 2, !dbg !23
  %163 = insertelement <4 x i32> %162, i32 %123, i64 3, !dbg !23
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !23
  %165 = shufflevector <4 x float> %164, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %166 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !25
  %167 = insertelement <4 x i32> %166, i32 %118, i64 1, !dbg !25
  %168 = insertelement <4 x i32> %167, i32 %121, i64 2, !dbg !25
  %169 = insertelement <4 x i32> %168, i32 %124, i64 3, !dbg !25
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !25
  %171 = shufflevector <4 x float> %170, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %172 = insertelement <8 x i32> poison, i32 %113, i64 0, !dbg !21
  %173 = insertelement <8 x i32> %172, i32 %116, i64 1, !dbg !21
  %174 = insertelement <8 x i32> %173, i32 %119, i64 2, !dbg !21
  %175 = insertelement <8 x i32> %174, i32 %122, i64 3, !dbg !21
  %176 = insertelement <8 x i32> %175, i32 %125, i64 4, !dbg !21
  %177 = insertelement <8 x i32> %176, i32 %126, i64 5, !dbg !21
  %178 = insertelement <8 x i32> %177, i32 %127, i64 6, !dbg !21
  %179 = insertelement <8 x i32> %178, i32 %128, i64 7, !dbg !21
  %180 = bitcast <8 x i32> %179 to <8 x float>, !dbg !21
  %181 = fadd <8 x float> %165, %180, !dbg !41
  %182 = fsub <8 x float> %181, %171, !dbg !42
  %183 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !33
  %184 = insertelement <8 x i32> %183, i32 %131, i64 1, !dbg !33
  %185 = insertelement <8 x i32> %184, i32 %132, i64 2, !dbg !33
  %186 = insertelement <8 x i32> %185, i32 %133, i64 3, !dbg !33
  %187 = insertelement <8 x i32> %186, i32 %134, i64 4, !dbg !33
  %188 = insertelement <8 x i32> %187, i32 %135, i64 5, !dbg !33
  %189 = insertelement <8 x i32> %188, i32 %136, i64 6, !dbg !33
  %190 = insertelement <8 x i32> %189, i32 %137, i64 7, !dbg !33
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !33
  %192 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !31
  %193 = insertelement <4 x i32> %192, i32 %139, i64 1, !dbg !31
  %194 = insertelement <4 x i32> %193, i32 %140, i64 2, !dbg !31
  %195 = insertelement <4 x i32> %194, i32 %141, i64 3, !dbg !31
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !31
  %197 = shufflevector <4 x float> %196, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %198 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !29
  %199 = insertelement <4 x i32> %198, i32 %143, i64 1, !dbg !29
  %200 = insertelement <4 x i32> %199, i32 %144, i64 2, !dbg !29
  %201 = insertelement <4 x i32> %200, i32 %145, i64 3, !dbg !29
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !29
  %203 = shufflevector <4 x float> %202, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %204 = insertelement <8 x float> poison, float %159, i64 0, !dbg !43
  %205 = insertelement <8 x float> %204, float %158, i64 1, !dbg !43
  %206 = insertelement <8 x float> %205, float %157, i64 2, !dbg !43
  %207 = insertelement <8 x float> %206, float %156, i64 3, !dbg !43
  %208 = shufflevector <8 x float> %207, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !43
  %209 = fmul <8 x float> %182, %208, !dbg !43
  %210 = fmul <8 x float> %209, %203, !dbg !44
  %211 = fadd <8 x float> %210, %197, !dbg !45
  %212 = fadd <8 x float> %211, %191, !dbg !46
  %213 = fcmp ogt <8 x float> %212, zeroinitializer, !dbg !47
  %214 = extractelement <8 x float> %212, i64 7, !dbg !48
  %215 = fmul float %214, %129, !dbg !49
  %216 = extractelement <8 x float> %212, i64 6, !dbg !48
  %217 = fmul float %216, %129, !dbg !49
  %218 = extractelement <8 x float> %212, i64 5, !dbg !48
  %219 = fmul float %218, %129, !dbg !49
  %220 = extractelement <8 x float> %212, i64 4, !dbg !48
  %221 = fmul float %220, %129, !dbg !49
  %222 = extractelement <8 x float> %212, i64 3, !dbg !48
  %223 = fmul float %222, %129, !dbg !49
  %224 = extractelement <8 x float> %212, i64 2, !dbg !48
  %225 = fmul float %224, %129, !dbg !49
  %226 = extractelement <8 x float> %212, i64 1, !dbg !48
  %227 = fmul float %226, %129, !dbg !49
  %228 = extractelement <8 x float> %212, i64 0, !dbg !48
  %229 = fmul float %228, %129, !dbg !49
  %230 = extractelement <8 x i1> %213, i64 7, !dbg !50
  %231 = select i1 %230, float %214, float %215, !dbg !50
  %232 = extractelement <8 x i1> %213, i64 6, !dbg !50
  %233 = select i1 %232, float %216, float %217, !dbg !50
  %234 = extractelement <8 x i1> %213, i64 5, !dbg !50
  %235 = select i1 %234, float %218, float %219, !dbg !50
  %236 = extractelement <8 x i1> %213, i64 4, !dbg !50
  %237 = select i1 %236, float %220, float %221, !dbg !50
  %238 = extractelement <8 x i1> %213, i64 3, !dbg !50
  %239 = select i1 %238, float %222, float %223, !dbg !50
  %240 = extractelement <8 x i1> %213, i64 2, !dbg !50
  %241 = select i1 %240, float %224, float %225, !dbg !50
  %242 = extractelement <8 x i1> %213, i64 1, !dbg !50
  %243 = select i1 %242, float %226, float %227, !dbg !50
  %244 = extractelement <8 x i1> %213, i64 0, !dbg !50
  %245 = select i1 %244, float %228, float %229, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %bc = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %246 = extractelement <8 x i32> %bc, i64 7, !dbg !52
  %bc32 = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %247 = extractelement <8 x i32> %bc32, i64 6, !dbg !52
  %bc33 = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %248 = extractelement <8 x i32> %bc33, i64 5, !dbg !52
  %bc34 = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %249 = extractelement <8 x i32> %bc34, i64 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %247, i32 %248, i32 %249, ptr addrspace(1) %32, i1 %26) #4, !dbg !52
  %bc35 = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %250 = extractelement <8 x i32> %bc35, i64 3, !dbg !52
  %bc36 = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %251 = extractelement <8 x i32> %bc36, i64 2, !dbg !52
  %bc37 = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %252 = extractelement <8 x i32> %bc37, i64 1, !dbg !52
  %bc38 = bitcast <8 x float> %181 to <8 x i32>, !dbg !52
  %253 = extractelement <8 x i32> %bc38, i64 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %251, i32 %252, i32 %253, ptr addrspace(1) %34, i1 %26) #4, !dbg !52
  %254 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !53
  %255 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !53
  %256 = bitcast float %214 to i32, !dbg !48
  %257 = bitcast float %216 to i32, !dbg !48
  %258 = bitcast float %218 to i32, !dbg !48
  %259 = bitcast float %220 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %256, i32 %257, i32 %258, i32 %259, ptr addrspace(1) %254, i1 %26) #4, !dbg !48
  %260 = bitcast float %222 to i32, !dbg !48
  %261 = bitcast float %224 to i32, !dbg !48
  %262 = bitcast float %226 to i32, !dbg !48
  %263 = bitcast float %228 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %255, i1 %26) #4, !dbg !48
  %264 = shl i32 %152, 10, !dbg !54
  %265 = shl i32 %153, 10, !dbg !54
  %266 = shl i32 %148, 14, !dbg !55
  %267 = add i32 %266, %.decomposed, !dbg !56
  %268 = add i32 %267, %264, !dbg !57
  %269 = add i32 %267, %265, !dbg !57
  %270 = sext i32 %268 to i64, !dbg !58
  %271 = getelementptr float, ptr addrspace(1) %9, i64 %270, !dbg !58
  %272 = sext i32 %269 to i64, !dbg !58
  %273 = getelementptr float, ptr addrspace(1) %9, i64 %272, !dbg !58
  %274 = shl i32 %15, 8, !dbg !59
  %275 = and i32 %274, 768, !dbg !59
  %276 = or disjoint i32 %275, %17, !dbg !59
  %277 = and i32 %19, 508, !dbg !59
  %278 = lshr exact i32 %275, 2, !dbg !59
  %279 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %278, !dbg !59
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !59
  %281 = bitcast float %231 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !59
  %282 = or disjoint i32 %276, 64, !dbg !59
  %283 = lshr i32 %282, 4, !dbg !59
  %284 = and i32 %283, 52, !dbg !59
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !59
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !59
  %287 = bitcast float %233 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !59
  %288 = or disjoint i32 %276, 128, !dbg !59
  %289 = lshr i32 %288, 4, !dbg !59
  %290 = and i32 %289, 56, !dbg !59
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !59
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !59
  %293 = bitcast float %235 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !59
  %294 = or disjoint i32 %276, 192, !dbg !59
  %295 = lshr i32 %294, 4, !dbg !59
  %296 = and i32 %295, 60, !dbg !59
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !59
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %294, !dbg !59
  %299 = bitcast float %237 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !59
  %300 = or disjoint i32 %276, 32, !dbg !59
  %301 = getelementptr float, ptr addrspace(3) %279, i32 %300, !dbg !59
  %302 = bitcast float %239 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !59
  %303 = or disjoint i32 %276, 96, !dbg !59
  %304 = lshr i32 %303, 4, !dbg !59
  %305 = and i32 %304, 52, !dbg !59
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !59
  %307 = getelementptr float, ptr addrspace(3) %306, i32 %303, !dbg !59
  %308 = bitcast float %241 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !59
  %309 = or disjoint i32 %276, 160, !dbg !59
  %310 = lshr i32 %309, 4, !dbg !59
  %311 = and i32 %310, 56, !dbg !59
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %311, !dbg !59
  %313 = getelementptr float, ptr addrspace(3) %312, i32 %309, !dbg !59
  %314 = bitcast float %243 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #4, !dbg !59
  %315 = or disjoint i32 %276, 224, !dbg !59
  %316 = lshr i32 %315, 4, !dbg !59
  %317 = and i32 %316, 60, !dbg !59
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !59
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %315, !dbg !59
  %320 = bitcast float %245 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %321 = lshr i32 %19, 4, !dbg !59
  %322 = and i32 %321, 28, !dbg !59
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %322, !dbg !59
  %324 = getelementptr inbounds float, ptr addrspace(3) %323, i32 %277, !dbg !59
  %325 = or disjoint i32 %277, 512, !dbg !59
  %326 = lshr i32 %325, 4, !dbg !59
  %327 = and i32 %326, 60, !dbg !59
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !59
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %325, !dbg !59
  %330 = load <4 x i32>, ptr addrspace(3) %329, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %324, align 16, !dbg !59
  %331 = getelementptr inbounds i8, ptr addrspace(3) %324, i32 4, !dbg !59
  %.extract10 = load i32, ptr addrspace(3) %331, align 4, !dbg !59
  %332 = getelementptr inbounds i8, ptr addrspace(3) %324, i32 8, !dbg !59
  %.extract11 = load i32, ptr addrspace(3) %332, align 8, !dbg !59
  %333 = getelementptr inbounds i8, ptr addrspace(3) %324, i32 12, !dbg !59
  %.extract12 = load i32, ptr addrspace(3) %333, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %271, i1 %155) #4, !dbg !59
  %.extract13 = extractelement <4 x i32> %330, i64 0, !dbg !59
  %.extract14 = extractelement <4 x i32> %330, i64 1, !dbg !59
  %.extract15 = extractelement <4 x i32> %330, i64 2, !dbg !59
  %.extract16 = extractelement <4 x i32> %330, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %273, i1 %154) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfqt4pmzsz6crjntf63rptlcqidr5wxw62teq4xaps3knv2ujq7j.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 44, scope: !7)
!34 = !DILocation(line: 39, column: 20, scope: !7)
!35 = !DILocation(line: 44, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 26, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 26, column: 44, scope: !7)
!40 = !DILocation(line: 47, column: 19, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 18, scope: !7)
!43 = !DILocation(line: 50, column: 19, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 60, column: 45, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 35, scope: !7)
!51 = !DILocation(line: 58, column: 4, scope: !7)
!52 = !DILocation(line: 59, column: 47, scope: !7)
!53 = !DILocation(line: 60, column: 25, scope: !7)
!54 = !DILocation(line: 61, column: 35, scope: !7)
!55 = !DILocation(line: 61, column: 46, scope: !7)
!56 = !DILocation(line: 61, column: 30, scope: !7)
!57 = !DILocation(line: 61, column: 40, scope: !7)
!58 = !DILocation(line: 61, column: 25, scope: !7)
!59 = !DILocation(line: 61, column: 58, scope: !7)
!60 = !DILocation(line: 61, column: 4, scope: !7)
