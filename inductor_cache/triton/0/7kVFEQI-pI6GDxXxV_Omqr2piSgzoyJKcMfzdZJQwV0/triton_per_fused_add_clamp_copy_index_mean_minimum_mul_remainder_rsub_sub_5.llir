; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 12, !dbg !14
  %14 = shl i32 %9, 1, !dbg !15
  %15 = and i32 %14, 14, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %16 = sdiv i32 %.frozen, 3, !dbg !16
  %17 = mul i32 %16, 3, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = or disjoint i32 %15, 32, !dbg !18
  %19 = mul i32 %16, 48, !dbg !19
  %20 = add i32 %18, %19, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !22
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !22
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !22
  %26 = bitcast i32 %24 to float, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = sext i32 %16 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #3, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = or disjoint i32 %19, %15, !dbg !25
  %34 = sext i32 %33 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !27
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %39 = or disjoint i32 %15, 16, !dbg !28
  %40 = add i32 %39, %19, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !31
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %46 = bitcast i32 %44 to float, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %13) #3, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %13) #3, !dbg !33
  %51 = bitcast i32 %50 to float, !dbg !33
  %52 = icmp slt i32 %.decomposed, 1, !dbg !34
  %53 = icmp slt i32 %.decomposed, 2, !dbg !35
  %54 = select i1 %53, float 3.000000e+00, float 1.000000e+00, !dbg !36
  %55 = select i1 %52, float 5.000000e+00, float %54, !dbg !37
  %56 = fmul float %26, %32, !dbg !38
  %57 = fmul float %27, %32, !dbg !38
  %58 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !27
  %59 = insertelement <2 x i32> %58, i32 %38, i64 1, !dbg !27
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !27
  %61 = fcmp ole <2 x float> %60, zeroinitializer, !dbg !39
  %62 = select <2 x i1> %61, <2 x float> zeroinitializer, <2 x float> %60, !dbg !39
  %63 = fcmp olt <2 x float> %62, splat (float 1.000000e+00), !dbg !43
  %64 = fcmp uno <2 x float> %62, zeroinitializer, !dbg !45
  %65 = or <2 x i1> %63, %64, !dbg !46
  %66 = fmul <2 x float> %62, splat (float 6.000000e+00), !dbg !47
  %67 = select <2 x i1> %65, <2 x float> %66, <2 x float> splat (float 6.000000e+00), !dbg !48
  %68 = insertelement <2 x float> poison, float %55, i64 0, !dbg !49
  %69 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %70 = fadd <2 x float> %69, %67, !dbg !49
  %71 = extractelement <2 x float> %70, i64 0, !dbg !50
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 6.000000e+00) #3, !dbg !50
  %73 = extractelement <2 x float> %70, i64 1, !dbg !50
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 6.000000e+00) #3, !dbg !50
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %76 = tail call float @llvm.nvvm.floor.ftz.f(float %72), !dbg !50
  %77 = tail call float @llvm.nvvm.floor.f(float %72), !dbg !50
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %79 = tail call float @llvm.nvvm.floor.ftz.f(float %74), !dbg !50
  %80 = tail call float @llvm.nvvm.floor.f(float %74), !dbg !50
  %81 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !50
  %82 = insertelement <2 x i32> %81, i32 %78, i64 1, !dbg !50
  %83 = icmp eq <2 x i32> %82, zeroinitializer, !dbg !50
  %84 = insertelement <2 x float> poison, float %77, i64 0, !dbg !50
  %85 = insertelement <2 x float> %84, float %80, i64 1, !dbg !50
  %86 = insertelement <2 x float> poison, float %76, i64 0, !dbg !50
  %87 = insertelement <2 x float> %86, float %79, i64 1, !dbg !50
  %88 = select <2 x i1> %83, <2 x float> %85, <2 x float> %87, !dbg !50
  %89 = fmul <2 x float> %88, splat (float 6.000000e+00), !dbg !50
  %.inv5 = fcmp ole float %57, 0.000000e+00, !dbg !51
  %90 = select i1 %.inv5, float 0.000000e+00, float %57, !dbg !51
  %91 = fcmp olt float %90, 1.000000e+00, !dbg !53
  %92 = fcmp uno float %90, 0.000000e+00, !dbg !55
  %93 = or i1 %91, %92, !dbg !56
  %94 = select i1 %93, float %90, float 1.000000e+00, !dbg !57
  %.inv7 = fcmp ole float %47, 0.000000e+00, !dbg !58
  %95 = select i1 %.inv7, float 0.000000e+00, float %47, !dbg !58
  %96 = fcmp olt float %95, 1.000000e+00, !dbg !60
  %97 = fcmp uno float %95, 0.000000e+00, !dbg !62
  %98 = or i1 %96, %97, !dbg !63
  %99 = insertelement <2 x float> poison, float %56, i64 0, !dbg !51
  %100 = insertelement <2 x float> %99, float %46, i64 1, !dbg !51
  %101 = fcmp ole <2 x float> %100, zeroinitializer, !dbg !51
  %102 = select <2 x i1> %101, <2 x float> zeroinitializer, <2 x float> %100, !dbg !51
  %103 = fcmp olt <2 x float> %102, splat (float 1.000000e+00), !dbg !53
  %104 = fcmp uno <2 x float> %102, zeroinitializer, !dbg !55
  %105 = or <2 x i1> %103, %104, !dbg !56
  %106 = select <2 x i1> %105, <2 x float> %102, <2 x float> splat (float 1.000000e+00), !dbg !57
  %107 = select i1 %98, float %95, float 1.000000e+00, !dbg !64
  %108 = fsub <2 x float> %70, %89, !dbg !50
  %109 = fcmp une <2 x float> %108, zeroinitializer, !dbg !65
  %110 = bitcast <2 x float> %108 to <2 x i32>, !dbg !66
  %111 = icmp slt <2 x i32> %110, zeroinitializer, !dbg !67
  %112 = and <2 x i1> %109, %111, !dbg !68
  %113 = fadd <2 x float> %108, splat (float 6.000000e+00), !dbg !69
  %114 = select <2 x i1> %112, <2 x float> %113, <2 x float> %108, !dbg !70
  %115 = fsub <2 x float> splat (float 4.000000e+00), %114, !dbg !71
  %116 = fcmp olt <2 x float> %114, %115, !dbg !72
  %117 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !74
  %118 = or <2 x i1> %117, %116, !dbg !75
  %119 = select <2 x i1> %118, <2 x float> %114, <2 x float> %115, !dbg !76
  %120 = fcmp ole <2 x float> %119, zeroinitializer, !dbg !77
  %121 = select <2 x i1> %120, <2 x float> zeroinitializer, <2 x float> %119, !dbg !77
  %122 = insertelement <2 x float> %106, float %94, i64 1, !dbg !79
  %123 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !79
  %124 = insertelement <2 x float> %123, float %107, i64 1, !dbg !79
  %125 = fmul <2 x float> %122, %124, !dbg !79
  %126 = fcmp olt <2 x float> %121, splat (float 1.000000e+00), !dbg !80
  %127 = fcmp uno <2 x float> %121, zeroinitializer, !dbg !82
  %128 = or <2 x i1> %126, %127, !dbg !83
  %129 = select <2 x i1> %128, <2 x float> %121, <2 x float> splat (float 1.000000e+00), !dbg !84
  %130 = fmul <2 x float> %125, %129, !dbg !85
  %131 = fsub <2 x float> %122, %130, !dbg !86
  %132 = extractelement <2 x float> %131, i64 0, !dbg !87
  %133 = extractelement <2 x float> %131, i64 1, !dbg !87
  %134 = fadd float %132, %133, !dbg !87
  %135 = select i1 %13, float %134, float 0.000000e+00, !dbg !87
  %136 = bitcast float %135 to i32, !dbg !92
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !92
  %138 = bitcast i32 %137 to float, !dbg !92
  %139 = fadd float %135, %138, !dbg !87
  %140 = bitcast float %139 to i32, !dbg !92
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !92
  %142 = bitcast i32 %141 to float, !dbg !92
  %143 = fadd float %139, %142, !dbg !87
  %144 = bitcast float %143 to i32, !dbg !92
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !92
  %146 = bitcast i32 %145 to float, !dbg !92
  %147 = fadd float %143, %146, !dbg !87
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 1.600000e+01) #3, !dbg !93
  %149 = fsub float %132, %148, !dbg !94
  %150 = fsub float %133, %148, !dbg !94
  %151 = fmul float %149, %51, !dbg !95
  %152 = fmul float %150, %51, !dbg !95
  %153 = fadd float %148, %151, !dbg !96
  %154 = fadd float %148, %152, !dbg !96
  %.inv8 = fcmp ole float %153, 0.000000e+00, !dbg !97
  %155 = select i1 %.inv8, float 0.000000e+00, float %153, !dbg !97
  %.inv9 = fcmp ole float %154, 0.000000e+00, !dbg !97
  %156 = select i1 %.inv9, float 0.000000e+00, float %154, !dbg !97
  %157 = fcmp olt float %155, 1.000000e+00, !dbg !99
  %158 = fcmp olt float %156, 1.000000e+00, !dbg !99
  %159 = fcmp uno float %155, 0.000000e+00, !dbg !101
  %160 = fcmp uno float %156, 0.000000e+00, !dbg !101
  %161 = or i1 %157, %159, !dbg !102
  %162 = or i1 %158, %160, !dbg !102
  %163 = shl i32 %12, 4, !dbg !103
  %164 = or disjoint i32 %163, %15, !dbg !104
  %165 = sext i32 %164 to i64, !dbg !105
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !105
  %167 = bitcast float %155 to i32, !dbg !106
  %168 = select i1 %161, i32 %167, i32 1065353216, !dbg !107
  %169 = bitcast float %156 to i32, !dbg !106
  %170 = select i1 %162, i32 %169, i32 1065353216, !dbg !107
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %168, i32 %170, ptr addrspace(1) %166, i1 %13) #3, !dbg !106
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py", directory: "inductor_cache/py")
!4 = !{ptr @triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5", linkageName: "triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 41, scope: !7)
!21 = !DILocation(line: 33, column: 31, scope: !7)
!22 = !DILocation(line: 33, column: 49, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 44, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 41, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 49, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 32, scope: !7)
!37 = !DILocation(line: 47, column: 32, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 54, column: 42, scope: !7)
!43 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 55, column: 42, scope: !7)
!45 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !44)
!46 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !44)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !44)
!49 = !DILocation(line: 58, column: 19, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !52)
!52 = !DILocation(line: 73, column: 42, scope: !7)
!53 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !54)
!54 = !DILocation(line: 74, column: 42, scope: !7)
!55 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !54)
!56 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !54)
!57 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !54)
!58 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !59)
!59 = !DILocation(line: 78, column: 42, scope: !7)
!60 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !61)
!61 = !DILocation(line: 79, column: 42, scope: !7)
!62 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !61)
!63 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !61)
!64 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !61)
!65 = !DILocation(line: 60, column: 21, scope: !7)
!66 = !DILocation(line: 61, column: 31, scope: !7)
!67 = !DILocation(line: 61, column: 41, scope: !7)
!68 = !DILocation(line: 64, column: 20, scope: !7)
!69 = !DILocation(line: 65, column: 20, scope: !7)
!70 = !DILocation(line: 66, column: 35, scope: !7)
!71 = !DILocation(line: 68, column: 20, scope: !7)
!72 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !73)
!73 = !DILocation(line: 69, column: 42, scope: !7)
!74 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !73)
!75 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !73)
!76 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !73)
!77 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !78)
!78 = !DILocation(line: 70, column: 42, scope: !7)
!79 = !DILocation(line: 80, column: 20, scope: !7)
!80 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !81)
!81 = !DILocation(line: 81, column: 42, scope: !7)
!82 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !81)
!83 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !81)
!84 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !81)
!85 = !DILocation(line: 82, column: 20, scope: !7)
!86 = !DILocation(line: 83, column: 20, scope: !7)
!87 = !DILocation(line: 256, column: 15, scope: !88, inlinedAt: !91)
!88 = distinct !DILexicalBlockFile(scope: !90, file: !89, discriminator: 0)
!89 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!90 = distinct !DILexicalBlockFile(scope: !7, file: !89, discriminator: 0)
!91 = !DILocation(line: 86, column: 26, scope: !7)
!92 = !DILocation(line: 267, column: 36, scope: !90, inlinedAt: !91)
!93 = !DILocation(line: 88, column: 20, scope: !7)
!94 = !DILocation(line: 89, column: 20, scope: !7)
!95 = !DILocation(line: 90, column: 20, scope: !7)
!96 = !DILocation(line: 91, column: 20, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !98)
!98 = !DILocation(line: 92, column: 42, scope: !7)
!99 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !100)
!100 = !DILocation(line: 93, column: 42, scope: !7)
!101 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !100)
!102 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !100)
!103 = !DILocation(line: 94, column: 36, scope: !7)
!104 = !DILocation(line: 94, column: 33, scope: !7)
!105 = !DILocation(line: 94, column: 28, scope: !7)
!106 = !DILocation(line: 94, column: 48, scope: !7)
!107 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !100)
!108 = !DILocation(line: 94, column: 4, scope: !7)
