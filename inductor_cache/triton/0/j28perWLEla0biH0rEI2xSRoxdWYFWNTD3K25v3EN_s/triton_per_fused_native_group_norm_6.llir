; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 2048, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %13 = sdiv i32 %.frozen, 8, !dbg !13
  %14 = mul i32 %13, 8, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = srem i32 %13, 64, !dbg !15
  %16 = sdiv i32 %7, 512, !dbg !16
  %17 = shl nsw i32 %.decomposed, 3, !dbg !17
  %18 = shl nsw i32 %15, 7, !dbg !18
  %19 = or disjoint i32 %18, %12, !dbg !19
  %20 = or disjoint i32 %19, 64, !dbg !19
  %21 = sdiv i32 %19, 1024, !dbg !20
  %22 = mul i32 %21, 1024, !dbg !21
  %.decomposed1 = sub i32 %19, %22, !dbg !21
  %23 = sdiv i32 %20, 1024, !dbg !20
  %24 = mul i32 %23, 1024, !dbg !21
  %.decomposed2 = sub i32 %20, %24, !dbg !21
  %25 = shl nsw i32 %.decomposed1, 6, !dbg !22
  %26 = shl nsw i32 %.decomposed2, 6, !dbg !22
  %27 = shl i32 %16, 16, !dbg !23
  %28 = add i32 %27, %17, !dbg !24
  %29 = add i32 %28, %21, !dbg !25
  %30 = add i32 %29, %25, !dbg !26
  %31 = add i32 %28, %23, !dbg !25
  %32 = add i32 %31, %26, !dbg !26
  %33 = sext i32 %30 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !27
  %35 = sext i32 %32 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %8, i32 0, i1 %8) #3, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %8, i32 0, i1 %8) #3, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = fadd float %38, %40, !dbg !29
  %42 = select i1 %8, float %41, float 0.000000e+00, !dbg !29
  %43 = bitcast float %42 to i32, !dbg !34
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !34
  %45 = bitcast i32 %44 to float, !dbg !34
  %46 = fadd float %42, %45, !dbg !29
  %47 = bitcast float %46 to i32, !dbg !34
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !34
  %49 = bitcast i32 %48 to float, !dbg !34
  %50 = fadd float %46, %49, !dbg !29
  %51 = bitcast float %50 to i32, !dbg !34
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = fadd float %50, %53, !dbg !29
  %55 = bitcast float %54 to i32, !dbg !34
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = fadd float %54, %57, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !34
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = fadd float %58, %61, !dbg !29
  %63 = icmp eq i32 %10, 0, !dbg !34
  %64 = and i32 %11, 1, !dbg !34
  %65 = zext nneg i32 %64 to i64, !dbg !34
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65, !dbg !34
  %67 = bitcast float %62 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %63) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %68 = icmp slt i32 %9, 2, !dbg !34
  %69 = sext i32 %9 to i64, !dbg !34
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !34
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #3, !dbg !34
  %72 = bitcast i32 %71 to float, !dbg !34
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = fadd float %72, %74, !dbg !29
  %76 = and i32 %9, 1, !dbg !34
  %77 = icmp eq i32 %76, 0, !dbg !34
  %78 = and i1 %68, %77, !dbg !34
  %79 = bitcast float %75 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %79, i1 %78) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %80 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.280000e+02) #3, !dbg !35
  %82 = fsub float %38, %81, !dbg !36
  %83 = fsub float %40, %81, !dbg !36
  %84 = fmul float %82, %82, !dbg !37
  %85 = fmul float %83, %83, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %86 = fadd float %84, %85, !dbg !40
  %87 = select i1 %8, float %86, float 0.000000e+00, !dbg !40
  %88 = bitcast float %87 to i32, !dbg !38
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = fadd float %87, %90, !dbg !40
  %92 = bitcast float %91 to i32, !dbg !38
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !38
  %94 = bitcast i32 %93 to float, !dbg !38
  %95 = fadd float %91, %94, !dbg !40
  %96 = bitcast float %95 to i32, !dbg !38
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !38
  %98 = bitcast i32 %97 to float, !dbg !38
  %99 = fadd float %95, %98, !dbg !40
  %100 = bitcast float %99 to i32, !dbg !38
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !38
  %102 = bitcast i32 %101 to float, !dbg !38
  %103 = fadd float %99, %102, !dbg !40
  %104 = bitcast float %103 to i32, !dbg !38
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !38
  %106 = bitcast i32 %105 to float, !dbg !38
  %107 = fadd float %103, %106, !dbg !40
  %108 = bitcast float %107 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %108, i1 %63) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #3, !dbg !38
  %110 = bitcast i32 %109 to float, !dbg !38
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !38
  %112 = bitcast i32 %111 to float, !dbg !38
  %113 = fadd float %110, %112, !dbg !40
  %114 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %114, i1 %78) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %115 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %116 = sext i32 %7 to i64, !dbg !41
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !41
  %118 = icmp eq i32 %12, 0, !dbg !42
  %119 = bitcast float %81 to i32, !dbg !42
  %120 = and i1 %118, %8, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %117, i1 %120) #3, !dbg !42
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %121, i1 %120) #3, !dbg !44
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %122, i1 %120) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu25qegcjiwknbanwn23iq3hdqj4jk7ajw74cjrq6mxas6t66cea.py", directory: "inductor_cache/u2")
!4 = !{ptr @triton_per_fused_native_group_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_6", linkageName: "triton_per_fused_native_group_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 21, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 31, column: 26, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 32, scope: !7)
!18 = !DILocation(line: 34, column: 52, scope: !7)
!19 = !DILocation(line: 34, column: 48, scope: !7)
!20 = !DILocation(line: 34, column: 96, scope: !7)
!21 = !DILocation(line: 34, column: 58, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 73, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 67, scope: !7)
!26 = !DILocation(line: 34, column: 79, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 104, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 39, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 47, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !39)
!41 = !DILocation(line: 48, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 37, scope: !7)
!43 = !DILocation(line: 49, column: 25, scope: !7)
!44 = !DILocation(line: 49, column: 37, scope: !7)
!45 = !DILocation(line: 50, column: 25, scope: !7)
!46 = !DILocation(line: 50, column: 36, scope: !7)
!47 = !DILocation(line: 50, column: 4, scope: !7)
