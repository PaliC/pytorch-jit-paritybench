; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = srem i32 %11, 4, !dbg !15
  %14 = sext i32 %11 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %12) #3, !dbg !17
  %17 = sext i32 %13 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %12) #3, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !20
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %12) #3, !dbg !21
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !21
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !21
  %24 = bitcast i32 %22 to float, !dbg !21
  %25 = bitcast i32 %23 to float, !dbg !21
  %26 = fadd float %24, 0x3EE4F8B580000000, !dbg !22
  %27 = fadd float %25, 0x3EE4F8B580000000, !dbg !22
  %28 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i = icmp eq i32 %28, 0, !dbg !23
  %29 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i = icmp eq i32 %29, 0, !dbg !23
  br i1 %.not.i, label %35, label %30, !dbg !23

30:                                               ; preds = %5
  br i1 %.not1.i, label %33, label %31, !dbg !23

31:                                               ; preds = %30
  %32 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

33:                                               ; preds = %30
  %34 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

35:                                               ; preds = %5
  br i1 %.not1.i, label %38, label %36, !dbg !23

36:                                               ; preds = %35
  %37 = tail call float @llvm.nvvm.sqrt.rn.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

38:                                               ; preds = %35
  %39 = tail call float @llvm.nvvm.sqrt.approx.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %31, %33, %36, %38
  %.0.i = phi float [ %32, %31 ], [ %34, %33 ], [ %37, %36 ], [ %39, %38 ], !dbg !23
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i1 = icmp eq i32 %40, 0, !dbg !23
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i4 = icmp eq i32 %41, 0, !dbg !23
  br i1 %.not.i1, label %47, label %42, !dbg !23

42:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %45, label %43, !dbg !23

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %27) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %27) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

47:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %50, label %48, !dbg !23

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %27) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %27) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

__nv_sqrtf.exit5:                                 ; preds = %43, %45, %48, %50
  %.0.i3 = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !23
  %52 = extractvalue { i32, i32 } %16, 1, !dbg !17
  %53 = bitcast i32 %52 to float, !dbg !17
  %54 = extractvalue { i32, i32 } %19, 1, !dbg !19
  %55 = bitcast i32 %54 to float, !dbg !19
  %56 = fsub float %53, %55, !dbg !24
  %57 = extractvalue { i32, i32 } %16, 0, !dbg !17
  %58 = bitcast i32 %57 to float, !dbg !17
  %59 = extractvalue { i32, i32 } %19, 0, !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = fsub float %58, %60, !dbg !24
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %.0.i) #3, !dbg !25
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %.0.i3) #3, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !26
  %65 = bitcast float %62 to i32, !dbg !27
  %66 = bitcast float %63 to i32, !dbg !27
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %64, i1 %12) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwgszsgit3glyfedwgzvkbvpbw7nz7mpqv7hdj3h54nzo7d6r2j3.py", directory: "inductor_cache/wg")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_sub_0", linkageName: "triton_poi_fused_add_div_sqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 18, scope: !7)
!23 = !DILocation(line: 32, column: 26, scope: !7)
!24 = !DILocation(line: 29, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 25, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 4, scope: !7)
