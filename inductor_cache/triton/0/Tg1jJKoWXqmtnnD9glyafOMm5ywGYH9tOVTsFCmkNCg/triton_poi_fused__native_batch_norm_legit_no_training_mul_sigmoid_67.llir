; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_67(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = icmp slt i32 %13, 44928, !dbg !14
  %16 = srem i32 %13, 702, !dbg !15
  %17 = srem i32 %14, 702, !dbg !15
  %18 = sext i32 %13 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %15) #3, !dbg !17
  %21 = sext i32 %16 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = sext i32 %17 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %15) #3, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %15) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %15) #3, !dbg !21
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = bitcast i32 %31 to float, !dbg !21
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %15) #3, !dbg !21
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !21
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !21
  %37 = bitcast i32 %35 to float, !dbg !21
  %38 = bitcast i32 %36 to float, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !22
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %15) #3, !dbg !23
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %15) #3, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #3, !dbg !25
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %15) #3, !dbg !25
  %47 = fadd float %32, 0x3EE4F8B580000000, !dbg !26
  %48 = fadd float %33, 0x3EE4F8B580000000, !dbg !26
  %49 = fadd float %37, 0x3EE4F8B580000000, !dbg !26
  %50 = fadd float %38, 0x3EE4F8B580000000, !dbg !26
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %51, 0, !dbg !27
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %52, 0, !dbg !27
  br i1 %.not.i, label %58, label %53, !dbg !27

53:                                               ; preds = %7
  br i1 %.not1.i, label %56, label %54, !dbg !27

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

58:                                               ; preds = %7
  br i1 %.not1.i, label %61, label %59, !dbg !27

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !27
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %63, 0, !dbg !27
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %64, 0, !dbg !27
  br i1 %.not.i1, label %70, label %65, !dbg !27

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !27

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !27

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %66, %68, %71, %73
  %.0.i3 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !27
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %75, 0, !dbg !27
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %76, 0, !dbg !27
  br i1 %.not.i6, label %82, label %77, !dbg !27

77:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %80, label %78, !dbg !27

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

82:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %85, label %83, !dbg !27

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %78, %80, %83, %85
  %.0.i8 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !27
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %87, 0, !dbg !27
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %88, 0, !dbg !27
  br i1 %.not.i11, label %94, label %89, !dbg !27

89:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %92, label %90, !dbg !27

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

94:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %97, label %95, !dbg !27

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %90, %92, %95, %97
  %.0.i13 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %100 = bitcast i32 %99 to float, !dbg !17
  %101 = extractvalue { i32, i32 } %26, 1, !dbg !19
  %102 = bitcast i32 %101 to float, !dbg !19
  %103 = fsub float %100, %102, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %105 = bitcast i32 %104 to float, !dbg !17
  %106 = extractvalue { i32, i32 } %26, 0, !dbg !19
  %107 = bitcast i32 %106 to float, !dbg !19
  %108 = fsub float %105, %107, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %110 = bitcast i32 %109 to float, !dbg !17
  %111 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %112 = bitcast i32 %111 to float, !dbg !19
  %113 = fsub float %110, %112, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %115 = bitcast i32 %114 to float, !dbg !17
  %116 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %117 = bitcast i32 %116 to float, !dbg !19
  %118 = fsub float %115, %117, !dbg !28
  %119 = extractvalue { i32, i32 } %46, 1, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = extractvalue { i32, i32 } %46, 0, !dbg !25
  %122 = bitcast i32 %121 to float, !dbg !25
  %123 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %126 = bitcast i32 %125 to float, !dbg !25
  %127 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %128 = bitcast i32 %127 to float, !dbg !23
  %129 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %130 = bitcast i32 %129 to float, !dbg !23
  %131 = extractvalue { i32, i32 } %41, 1, !dbg !23
  %132 = bitcast i32 %131 to float, !dbg !23
  %133 = extractvalue { i32, i32 } %41, 0, !dbg !23
  %134 = bitcast i32 %133 to float, !dbg !23
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %139 = fmul float %118, %135, !dbg !30
  %140 = fmul float %113, %136, !dbg !30
  %141 = fmul float %108, %137, !dbg !30
  %142 = fmul float %103, %138, !dbg !30
  %143 = fmul float %139, %134, !dbg !31
  %144 = fmul float %140, %132, !dbg !31
  %145 = fmul float %141, %130, !dbg !31
  %146 = fmul float %142, %128, !dbg !31
  %147 = fadd float %143, %126, !dbg !32
  %148 = fadd float %144, %124, !dbg !32
  %149 = fadd float %145, %122, !dbg !32
  %150 = fadd float %146, %120, !dbg !32
  %151 = fsub float 0.000000e+00, %147, !dbg !33
  %152 = fsub float 0.000000e+00, %148, !dbg !33
  %153 = fsub float 0.000000e+00, %149, !dbg !33
  %154 = fsub float 0.000000e+00, %150, !dbg !33
  %155 = fmul float %151, 0x3FF7154760000000, !dbg !37
  %156 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %155) #3, !dbg !37
  %157 = fmul float %152, 0x3FF7154760000000, !dbg !37
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #3, !dbg !37
  %159 = fmul float %153, 0x3FF7154760000000, !dbg !37
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #3, !dbg !37
  %161 = fmul float %154, 0x3FF7154760000000, !dbg !37
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #3, !dbg !37
  %163 = fadd float %156, 1.000000e+00, !dbg !38
  %164 = fadd float %158, 1.000000e+00, !dbg !38
  %165 = fadd float %160, 1.000000e+00, !dbg !38
  %166 = fadd float %162, 1.000000e+00, !dbg !38
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %163) #3, !dbg !39
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %164) #3, !dbg !39
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %165) #3, !dbg !39
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %166) #3, !dbg !39
  %171 = fmul float %147, %167, !dbg !40
  %172 = fmul float %148, %168, !dbg !40
  %173 = fmul float %149, %169, !dbg !40
  %174 = fmul float %150, %170, !dbg !40
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !41
  %176 = bitcast float %171 to i32, !dbg !42
  %177 = bitcast float %172 to i32, !dbg !42
  %178 = bitcast float %173 to i32, !dbg !42
  %179 = bitcast float %174 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %175, i1 %15) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqx3ivtgbf3v6qlsxcodksex5uf2vn7p5pwgenyla4vajeosmi3e.py", directory: "inductor_cache/qx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_67, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_67, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_67", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_67", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 30, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 42, column: 23, scope: !7)
!37 = !DILocation(line: 47, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 20, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 16, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 28, scope: !7)
!42 = !DILocation(line: 44, column: 40, scope: !7)
!43 = !DILocation(line: 44, column: 4, scope: !7)
