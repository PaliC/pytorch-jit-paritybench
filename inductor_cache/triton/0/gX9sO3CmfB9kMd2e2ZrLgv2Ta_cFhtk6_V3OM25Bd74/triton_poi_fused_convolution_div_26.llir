; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %10 = mul i32 %9, %8, !dbg !13
  %11 = add i32 %10, %7, !dbg !14
  %12 = shl i32 %11, 8, !dbg !15
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %14 = shl i32 %13, 2, !dbg !16
  %15 = and i32 %14, 252, !dbg !16
  %16 = lshr i32 %13, 4, !dbg !16
  %17 = and i32 %16, 15, !dbg !16
  %18 = or disjoint i32 %12, %15, !dbg !17
  %19 = or disjoint i32 %12, %17, !dbg !17
  %20 = or disjoint i32 %19, 16, !dbg !17
  %21 = or disjoint i32 %19, 32, !dbg !17
  %22 = or disjoint i32 %19, 48, !dbg !17
  %23 = or disjoint i32 %19, 64, !dbg !17
  %24 = or disjoint i32 %19, 80, !dbg !17
  %25 = or disjoint i32 %19, 96, !dbg !17
  %26 = or disjoint i32 %19, 112, !dbg !17
  %27 = or disjoint i32 %19, 128, !dbg !17
  %28 = or disjoint i32 %19, 144, !dbg !17
  %29 = or disjoint i32 %19, 160, !dbg !17
  %30 = or disjoint i32 %19, 176, !dbg !17
  %31 = or disjoint i32 %19, 192, !dbg !17
  %32 = or disjoint i32 %19, 208, !dbg !17
  %33 = or disjoint i32 %19, 224, !dbg !17
  %34 = or disjoint i32 %19, 240, !dbg !17
  %35 = icmp slt i32 %18, 131072, !dbg !18
  %36 = icmp slt i32 %19, 131072, !dbg !18
  %37 = icmp slt i32 %20, 131072, !dbg !18
  %38 = icmp slt i32 %21, 131072, !dbg !18
  %39 = icmp slt i32 %22, 131072, !dbg !18
  %40 = icmp slt i32 %23, 131072, !dbg !18
  %41 = icmp slt i32 %24, 131072, !dbg !18
  %42 = icmp slt i32 %25, 131072, !dbg !18
  %43 = icmp slt i32 %26, 131072, !dbg !18
  %44 = icmp slt i32 %27, 131072, !dbg !18
  %45 = icmp slt i32 %28, 131072, !dbg !18
  %46 = icmp slt i32 %29, 131072, !dbg !18
  %47 = icmp slt i32 %30, 131072, !dbg !18
  %48 = icmp slt i32 %31, 131072, !dbg !18
  %49 = icmp slt i32 %32, 131072, !dbg !18
  %50 = icmp slt i32 %33, 131072, !dbg !18
  %51 = icmp slt i32 %34, 131072, !dbg !18
  %52 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %53 = shl i32 %52, 4, !dbg !20
  %54 = lshr i32 %13, 6, !dbg !21
  %55 = and i32 %54, 3, !dbg !21
  %56 = and i32 %13, 15, !dbg !21
  %57 = or disjoint i32 %53, %55, !dbg !22
  %58 = or disjoint i32 %57, 4, !dbg !22
  %59 = or disjoint i32 %57, 8, !dbg !22
  %60 = or disjoint i32 %53, %56, !dbg !22
  %61 = icmp slt i32 %57, 9, !dbg !23
  %62 = icmp slt i32 %58, 9, !dbg !23
  %63 = icmp slt i32 %59, 9, !dbg !23
  %64 = icmp slt i32 %53, 0, !dbg !23
  %65 = icmp slt i32 %60, 9, !dbg !23
  %.frozen = freeze i32 %18, !dbg !24
  %66 = sdiv i32 %.frozen, 256, !dbg !24
  %67 = mul i32 %66, 256, !dbg !25
  %.decomposed = sub i32 %.frozen, %67, !dbg !25
  %68 = shl i32 %57, 8, !dbg !26
  %69 = shl i32 %58, 8, !dbg !26
  %70 = shl i32 %59, 8, !dbg !26
  %71 = or disjoint i32 %68, 3072, !dbg !26
  %72 = mul i32 %66, 2304, !dbg !27
  %73 = add i32 %72, %.decomposed, !dbg !28
  %74 = add i32 %73, %68, !dbg !29
  %75 = add i32 %73, %69, !dbg !29
  %76 = add i32 %73, %70, !dbg !29
  %77 = add i32 %73, %71, !dbg !29
  %78 = sext i32 %74 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %75 to i64, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = sext i32 %76 to i64, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = sext i32 %77 to i64, !dbg !30
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !30
  %86 = and i1 %61, %35, !dbg !31
  %87 = and i1 %62, %35, !dbg !31
  %88 = and i1 %63, %35, !dbg !31
  %89 = and i1 %64, %35, !dbg !31
  %90 = and i1 %65, %36, !dbg !31
  %91 = and i1 %37, %65, !dbg !31
  %92 = and i1 %38, %65, !dbg !31
  %93 = and i1 %39, %65, !dbg !31
  %94 = and i1 %40, %65, !dbg !31
  %95 = and i1 %41, %65, !dbg !31
  %96 = and i1 %42, %65, !dbg !31
  %97 = and i1 %43, %65, !dbg !31
  %98 = and i1 %44, %65, !dbg !31
  %99 = and i1 %45, %65, !dbg !31
  %100 = and i1 %46, %65, !dbg !31
  %101 = and i1 %47, %65, !dbg !31
  %102 = and i1 %48, %65, !dbg !31
  %103 = and i1 %49, %65, !dbg !31
  %104 = and i1 %50, %65, !dbg !31
  %105 = and i1 %51, %65, !dbg !31
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %86) #2, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !32
  %111 = bitcast i32 %107 to float, !dbg !32
  %112 = bitcast i32 %108 to float, !dbg !32
  %113 = bitcast i32 %109 to float, !dbg !32
  %114 = bitcast i32 %110 to float, !dbg !32
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %87) #2, !dbg !32
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !32
  %120 = bitcast i32 %116 to float, !dbg !32
  %121 = bitcast i32 %117 to float, !dbg !32
  %122 = bitcast i32 %118 to float, !dbg !32
  %123 = bitcast i32 %119 to float, !dbg !32
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %88) #2, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !32
  %129 = bitcast i32 %125 to float, !dbg !32
  %130 = bitcast i32 %126 to float, !dbg !32
  %131 = bitcast i32 %127 to float, !dbg !32
  %132 = bitcast i32 %128 to float, !dbg !32
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %89) #2, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !32
  %138 = bitcast i32 %134 to float, !dbg !32
  %139 = bitcast i32 %135 to float, !dbg !32
  %140 = bitcast i32 %136 to float, !dbg !32
  %141 = bitcast i32 %137 to float, !dbg !32
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !33
  %143 = bitcast i32 %142 to float, !dbg !33
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %143) #2, !dbg !34
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %143) #2, !dbg !34
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %143) #2, !dbg !34
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %143) #2, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %143) #2, !dbg !34
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %143) #2, !dbg !34
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %143) #2, !dbg !34
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %143) #2, !dbg !34
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %143) #2, !dbg !34
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %143) #2, !dbg !34
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %143) #2, !dbg !34
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %143) #2, !dbg !34
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %143) #2, !dbg !34
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %143) #2, !dbg !34
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %143) #2, !dbg !34
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %143) #2, !dbg !34
  %160 = mul i32 %19, 9, !dbg !35
  %161 = mul i32 %20, 9, !dbg !35
  %162 = mul i32 %21, 9, !dbg !35
  %163 = mul i32 %22, 9, !dbg !35
  %164 = mul i32 %23, 9, !dbg !35
  %165 = mul i32 %24, 9, !dbg !35
  %166 = mul i32 %25, 9, !dbg !35
  %167 = mul i32 %26, 9, !dbg !35
  %168 = mul i32 %27, 9, !dbg !35
  %169 = mul i32 %28, 9, !dbg !35
  %170 = mul i32 %29, 9, !dbg !35
  %171 = mul i32 %30, 9, !dbg !35
  %172 = mul i32 %31, 9, !dbg !35
  %173 = mul i32 %32, 9, !dbg !35
  %174 = mul i32 %33, 9, !dbg !35
  %175 = mul i32 %34, 9, !dbg !35
  %176 = add i32 %160, %60, !dbg !36
  %177 = add i32 %60, %161, !dbg !36
  %178 = add i32 %60, %162, !dbg !36
  %179 = add i32 %60, %163, !dbg !36
  %180 = add i32 %60, %164, !dbg !36
  %181 = add i32 %60, %165, !dbg !36
  %182 = add i32 %60, %166, !dbg !36
  %183 = add i32 %60, %167, !dbg !36
  %184 = add i32 %60, %168, !dbg !36
  %185 = add i32 %60, %169, !dbg !36
  %186 = add i32 %60, %170, !dbg !36
  %187 = add i32 %60, %171, !dbg !36
  %188 = add i32 %60, %172, !dbg !36
  %189 = add i32 %60, %173, !dbg !36
  %190 = add i32 %60, %174, !dbg !36
  %191 = add i32 %60, %175, !dbg !36
  %192 = sext i32 %176 to i64, !dbg !37
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !37
  %194 = sext i32 %177 to i64, !dbg !37
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !37
  %196 = sext i32 %178 to i64, !dbg !37
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !37
  %198 = sext i32 %179 to i64, !dbg !37
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %198, !dbg !37
  %200 = sext i32 %180 to i64, !dbg !37
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %200, !dbg !37
  %202 = sext i32 %181 to i64, !dbg !37
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !37
  %204 = sext i32 %182 to i64, !dbg !37
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !37
  %206 = sext i32 %183 to i64, !dbg !37
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %206, !dbg !37
  %208 = sext i32 %184 to i64, !dbg !37
  %209 = getelementptr float, ptr addrspace(1) %2, i64 %208, !dbg !37
  %210 = sext i32 %185 to i64, !dbg !37
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %210, !dbg !37
  %212 = sext i32 %186 to i64, !dbg !37
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %212, !dbg !37
  %214 = sext i32 %187 to i64, !dbg !37
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %214, !dbg !37
  %216 = sext i32 %188 to i64, !dbg !37
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %216, !dbg !37
  %218 = sext i32 %189 to i64, !dbg !37
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !37
  %220 = sext i32 %190 to i64, !dbg !37
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !37
  %222 = sext i32 %191 to i64, !dbg !37
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %222, !dbg !37
  %224 = shl i32 %13, 6, !dbg !38
  %225 = and i32 %224, 4032, !dbg !38
  %226 = or disjoint i32 %225, %55, !dbg !38
  %227 = and i32 %13, 255, !dbg !38
  %228 = lshr exact i32 %225, 2, !dbg !38
  %229 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %228, !dbg !38
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %226, !dbg !38
  %231 = bitcast float %144 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !38
  %232 = or disjoint i32 %226, 16, !dbg !38
  %233 = lshr i32 %232, 4, !dbg !38
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !38
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !38
  %236 = bitcast float %145 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !38
  %237 = or disjoint i32 %226, 32, !dbg !38
  %238 = lshr i32 %237, 4, !dbg !38
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !38
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !38
  %241 = bitcast float %146 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !38
  %242 = or disjoint i32 %226, 48, !dbg !38
  %243 = lshr i32 %242, 4, !dbg !38
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !38
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %242, !dbg !38
  %246 = bitcast float %147 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !38
  %247 = or disjoint i32 %226, 4, !dbg !38
  %248 = getelementptr float, ptr addrspace(3) %229, i32 %247, !dbg !38
  %249 = bitcast float %148 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !38
  %250 = or disjoint i32 %226, 20, !dbg !38
  %251 = lshr i32 %250, 4, !dbg !38
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !38
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %250, !dbg !38
  %254 = bitcast float %149 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !38
  %255 = or disjoint i32 %226, 36, !dbg !38
  %256 = lshr i32 %255, 4, !dbg !38
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !38
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %255, !dbg !38
  %259 = bitcast float %150 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !38
  %260 = or disjoint i32 %226, 52, !dbg !38
  %261 = lshr i32 %260, 4, !dbg !38
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !38
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !38
  %264 = bitcast float %151 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !38
  %265 = or disjoint i32 %226, 8, !dbg !38
  %266 = getelementptr float, ptr addrspace(3) %229, i32 %265, !dbg !38
  %267 = bitcast float %152 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !38
  %268 = or disjoint i32 %226, 24, !dbg !38
  %269 = lshr i32 %268, 4, !dbg !38
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !38
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !38
  %272 = bitcast float %153 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !38
  %273 = or disjoint i32 %226, 40, !dbg !38
  %274 = lshr i32 %273, 4, !dbg !38
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !38
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %273, !dbg !38
  %277 = bitcast float %154 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #2, !dbg !38
  %278 = or disjoint i32 %226, 56, !dbg !38
  %279 = lshr i32 %278, 4, !dbg !38
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !38
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !38
  %282 = bitcast float %155 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !38
  %283 = or disjoint i32 %226, 12, !dbg !38
  %284 = getelementptr float, ptr addrspace(3) %229, i32 %283, !dbg !38
  %285 = bitcast float %156 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !38
  %286 = or disjoint i32 %226, 28, !dbg !38
  %287 = lshr i32 %286, 4, !dbg !38
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !38
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !38
  %290 = bitcast float %157 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #2, !dbg !38
  %291 = or disjoint i32 %226, 44, !dbg !38
  %292 = lshr i32 %291, 4, !dbg !38
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !38
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %291, !dbg !38
  %295 = bitcast float %158 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #2, !dbg !38
  %296 = or disjoint i32 %226, 60, !dbg !38
  %297 = lshr i32 %296, 4, !dbg !38
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !38
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %296, !dbg !38
  %300 = bitcast float %159 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %301 = lshr i32 %227, 4, !dbg !38
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !38
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %227, !dbg !38
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !38
  %305 = or disjoint i32 %227, 256, !dbg !38
  %306 = lshr i32 %305, 4, !dbg !38
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !38
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !38
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !38
  %310 = or disjoint i32 %227, 512, !dbg !38
  %311 = lshr i32 %310, 4, !dbg !38
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !38
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !38
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !38
  %315 = or disjoint i32 %227, 768, !dbg !38
  %316 = lshr i32 %315, 4, !dbg !38
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !38
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !38
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !38
  %320 = or disjoint i32 %227, 1024, !dbg !38
  %321 = lshr i32 %320, 4, !dbg !38
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !38
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !38
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !38
  %325 = or disjoint i32 %227, 1280, !dbg !38
  %326 = lshr i32 %325, 4, !dbg !38
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !38
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !38
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !38
  %330 = or disjoint i32 %227, 1536, !dbg !38
  %331 = lshr i32 %330, 4, !dbg !38
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !38
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !38
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !38
  %335 = or disjoint i32 %227, 1792, !dbg !38
  %336 = lshr i32 %335, 4, !dbg !38
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !38
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %335, !dbg !38
  %339 = load i32, ptr addrspace(3) %338, align 4, !dbg !38
  %340 = or disjoint i32 %227, 2048, !dbg !38
  %341 = lshr i32 %340, 4, !dbg !38
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !38
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !38
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !38
  %345 = or disjoint i32 %227, 2304, !dbg !38
  %346 = lshr i32 %345, 4, !dbg !38
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !38
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !38
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !38
  %350 = or disjoint i32 %227, 2560, !dbg !38
  %351 = lshr i32 %350, 4, !dbg !38
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !38
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %350, !dbg !38
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !38
  %355 = or disjoint i32 %227, 2816, !dbg !38
  %356 = lshr i32 %355, 4, !dbg !38
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !38
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !38
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !38
  %360 = or disjoint i32 %227, 3072, !dbg !38
  %361 = lshr i32 %360, 4, !dbg !38
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !38
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !38
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !38
  %365 = or disjoint i32 %227, 3328, !dbg !38
  %366 = lshr i32 %365, 4, !dbg !38
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !38
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !38
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !38
  %370 = or disjoint i32 %227, 3584, !dbg !38
  %371 = lshr i32 %370, 4, !dbg !38
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !38
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !38
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !38
  %375 = or disjoint i32 %227, 3840, !dbg !38
  %376 = lshr i32 %375, 4, !dbg !38
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !38
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %375, !dbg !38
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %193, i1 %90) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %195, i1 %91) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %197, i1 %92) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %199, i1 %93) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %201, i1 %94) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %203, i1 %95) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %205, i1 %96) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %207, i1 %97) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %209, i1 %98) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %211, i1 %99) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %213, i1 %100) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %215, i1 %101) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %217, i1 %102) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %219, i1 %103) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %221, i1 %104) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %379, ptr addrspace(1) %223, i1 %105) #2, !dbg !38
  %380 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !39
  %381 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !39
  %382 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !39
  %383 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !39
  %384 = bitcast float %144 to i32, !dbg !40
  %385 = bitcast float %145 to i32, !dbg !40
  %386 = bitcast float %146 to i32, !dbg !40
  %387 = bitcast float %147 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %385, i32 %386, i32 %387, ptr addrspace(1) %380, i1 %86) #2, !dbg !40
  %388 = bitcast float %148 to i32, !dbg !40
  %389 = bitcast float %149 to i32, !dbg !40
  %390 = bitcast float %150 to i32, !dbg !40
  %391 = bitcast float %151 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %388, i32 %389, i32 %390, i32 %391, ptr addrspace(1) %381, i1 %87) #2, !dbg !40
  %392 = bitcast float %152 to i32, !dbg !40
  %393 = bitcast float %153 to i32, !dbg !40
  %394 = bitcast float %154 to i32, !dbg !40
  %395 = bitcast float %155 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %393, i32 %394, i32 %395, ptr addrspace(1) %382, i1 %88) #2, !dbg !40
  %396 = bitcast float %156 to i32, !dbg !40
  %397 = bitcast float %157 to i32, !dbg !40
  %398 = bitcast float %158 to i32, !dbg !40
  %399 = bitcast float %159 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %396, i32 %397, i32 %398, i32 %399, ptr addrspace(1) %383, i1 %89) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5k5drpvhioohlytcynxgdftagqgno3q4r22niz5cxrqb5vmf35v.py", directory: "inductor_cache/5k")
!4 = !{ptr @triton_poi_fused_convolution_div_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_26", linkageName: "triton_poi_fused_convolution_div_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 30, column: 19, scope: !7)
!25 = !DILocation(line: 29, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 39, scope: !7)
!27 = !DILocation(line: 32, column: 49, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 44, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 62, scope: !7)
!32 = !DILocation(line: 32, column: 54, scope: !7)
!33 = !DILocation(line: 33, column: 19, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 25, scope: !7)
!38 = !DILocation(line: 36, column: 43, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 55, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
