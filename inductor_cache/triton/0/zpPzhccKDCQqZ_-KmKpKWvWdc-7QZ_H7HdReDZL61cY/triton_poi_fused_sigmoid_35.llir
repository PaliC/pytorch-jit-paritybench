; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_sigmoid_35(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = lshr i32 %7, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 6, !dbg !16
  %20 = lshr i32 %7, 2, !dbg !17
  %21 = and i32 %20, 31, !dbg !17
  %22 = and i32 %8, 60, !dbg !17
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = or disjoint i32 %23, 32, !dbg !18
  %25 = or disjoint i32 %19, %22, !dbg !18
  %26 = icmp slt i32 %23, 1600, !dbg !19
  %27 = icmp slt i32 %24, 1600, !dbg !19
  %28 = icmp slt i32 %25, 1600, !dbg !19
  %29 = ashr exact i32 %12, 2, !dbg !20
  %30 = mul i32 %23, 12, !dbg !21
  %31 = mul i32 %24, 12, !dbg !21
  %32 = mul i32 %29, 19200, !dbg !22
  %33 = add i32 %30, %32, !dbg !23
  %34 = add i32 %32, %31, !dbg !23
  %35 = sext i32 %33 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = and i1 %15, %26, !dbg !25
  %40 = and i1 %27, %15, !dbg !25
  %41 = and i1 %16, %28, !dbg !25
  %42 = and i1 %17, %28, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = fsub float 0.000000e+00, %48, !dbg !27
  %62 = fsub float 0.000000e+00, %49, !dbg !27
  %63 = fsub float 0.000000e+00, %50, !dbg !27
  %64 = fsub float 0.000000e+00, %51, !dbg !27
  %65 = fsub float 0.000000e+00, %57, !dbg !27
  %66 = fsub float 0.000000e+00, %58, !dbg !27
  %67 = fsub float 0.000000e+00, %59, !dbg !27
  %68 = fsub float 0.000000e+00, %60, !dbg !27
  %69 = fmul float %61, 0x3FF7154760000000, !dbg !31
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #2, !dbg !31
  %71 = fmul float %62, 0x3FF7154760000000, !dbg !31
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #2, !dbg !31
  %73 = fmul float %63, 0x3FF7154760000000, !dbg !31
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #2, !dbg !31
  %75 = fmul float %64, 0x3FF7154760000000, !dbg !31
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #2, !dbg !31
  %77 = fmul float %65, 0x3FF7154760000000, !dbg !31
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #2, !dbg !31
  %79 = fmul float %66, 0x3FF7154760000000, !dbg !31
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #2, !dbg !31
  %81 = fmul float %67, 0x3FF7154760000000, !dbg !31
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #2, !dbg !31
  %83 = fmul float %68, 0x3FF7154760000000, !dbg !31
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #2, !dbg !31
  %85 = fadd float %70, 1.000000e+00, !dbg !32
  %86 = fadd float %72, 1.000000e+00, !dbg !32
  %87 = fadd float %74, 1.000000e+00, !dbg !32
  %88 = fadd float %76, 1.000000e+00, !dbg !32
  %89 = fadd float %78, 1.000000e+00, !dbg !32
  %90 = fadd float %80, 1.000000e+00, !dbg !32
  %91 = fadd float %82, 1.000000e+00, !dbg !32
  %92 = fadd float %84, 1.000000e+00, !dbg !32
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %85) #2, !dbg !33
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #2, !dbg !33
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #2, !dbg !33
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #2, !dbg !33
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #2, !dbg !33
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %90) #2, !dbg !33
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #2, !dbg !33
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #2, !dbg !33
  %101 = mul i32 %13, 1600, !dbg !34
  %102 = mul i32 %14, 1600, !dbg !34
  %103 = add i32 %25, %101, !dbg !35
  %104 = add i32 %25, %102, !dbg !35
  %105 = sext i32 %103 to i64, !dbg !36
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !36
  %107 = sext i32 %104 to i64, !dbg !36
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !36
  %109 = shl i32 %7, 8, !dbg !37
  %110 = and i32 %109, 768, !dbg !37
  %111 = or disjoint i32 %110, %21, !dbg !37
  %112 = and i32 %8, 508, !dbg !37
  %113 = lshr exact i32 %110, 6, !dbg !37
  %114 = add nuw nsw i32 %113, %111, !dbg !37
  %115 = zext nneg i32 %114 to i64, !dbg !37
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !37
  %117 = bitcast float %93 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !37
  %118 = or disjoint i32 %111, 64, !dbg !37
  %119 = lshr i32 %118, 6, !dbg !37
  %120 = add nuw nsw i32 %119, %118, !dbg !37
  %121 = zext nneg i32 %120 to i64, !dbg !37
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !37
  %123 = bitcast float %94 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !37
  %124 = or disjoint i32 %111, 128, !dbg !37
  %125 = lshr i32 %124, 6, !dbg !37
  %126 = add nuw nsw i32 %125, %124, !dbg !37
  %127 = zext nneg i32 %126 to i64, !dbg !37
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !37
  %129 = bitcast float %95 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !37
  %130 = or disjoint i32 %111, 192, !dbg !37
  %131 = lshr i32 %130, 6, !dbg !37
  %132 = add nuw nsw i32 %131, %130, !dbg !37
  %133 = zext nneg i32 %132 to i64, !dbg !37
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !37
  %135 = bitcast float %96 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !37
  %136 = or disjoint i32 %111, 32, !dbg !37
  %137 = add nuw nsw i32 %136, %113, !dbg !37
  %138 = zext nneg i32 %137 to i64, !dbg !37
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !37
  %140 = bitcast float %97 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !37
  %141 = or disjoint i32 %111, 96, !dbg !37
  %142 = lshr i32 %141, 6, !dbg !37
  %143 = add nuw nsw i32 %142, %141, !dbg !37
  %144 = zext nneg i32 %143 to i64, !dbg !37
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !37
  %146 = bitcast float %98 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !37
  %147 = or disjoint i32 %111, 160, !dbg !37
  %148 = lshr i32 %147, 6, !dbg !37
  %149 = add nuw nsw i32 %148, %147, !dbg !37
  %150 = zext nneg i32 %149 to i64, !dbg !37
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !37
  %152 = bitcast float %99 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !37
  %153 = or disjoint i32 %111, 224, !dbg !37
  %154 = lshr i32 %153, 6, !dbg !37
  %155 = add nuw nsw i32 %154, %153, !dbg !37
  %156 = zext nneg i32 %155 to i64, !dbg !37
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %156, !dbg !37
  %158 = bitcast float %100 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %159 = lshr i32 %112, 6, !dbg !37
  %160 = add nuw nsw i32 %159, %112, !dbg !37
  %161 = zext nneg i32 %160 to i64, !dbg !37
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %161, !dbg !37
  %163 = load i32, ptr addrspace(3) %162, align 4, !dbg !37
  %164 = or disjoint i32 %112, 1, !dbg !37
  %165 = add nuw nsw i32 %164, %159, !dbg !37
  %166 = zext nneg i32 %165 to i64, !dbg !37
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %166, !dbg !37
  %168 = load i32, ptr addrspace(3) %167, align 4, !dbg !37
  %169 = or disjoint i32 %112, 2, !dbg !37
  %170 = add nuw nsw i32 %169, %159, !dbg !37
  %171 = zext nneg i32 %170 to i64, !dbg !37
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %171, !dbg !37
  %173 = load i32, ptr addrspace(3) %172, align 4, !dbg !37
  %174 = or disjoint i32 %112, 3, !dbg !37
  %175 = add nuw nsw i32 %174, %159, !dbg !37
  %176 = zext nneg i32 %175 to i64, !dbg !37
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !37
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !37
  %179 = or disjoint i32 %112, 512, !dbg !37
  %180 = lshr i32 %179, 6, !dbg !37
  %181 = add nuw nsw i32 %180, %179, !dbg !37
  %182 = zext nneg i32 %181 to i64, !dbg !37
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !37
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !37
  %185 = or disjoint i32 %112, 513, !dbg !37
  %186 = lshr i32 %185, 6, !dbg !37
  %187 = add nuw nsw i32 %186, %185, !dbg !37
  %188 = zext nneg i32 %187 to i64, !dbg !37
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !37
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !37
  %191 = or disjoint i32 %112, 514, !dbg !37
  %192 = lshr i32 %191, 6, !dbg !37
  %193 = add nuw nsw i32 %192, %191, !dbg !37
  %194 = zext nneg i32 %193 to i64, !dbg !37
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !37
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !37
  %197 = or disjoint i32 %112, 515, !dbg !37
  %198 = lshr i32 %197, 6, !dbg !37
  %199 = add nuw nsw i32 %198, %197, !dbg !37
  %200 = zext nneg i32 %199 to i64, !dbg !37
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %200, !dbg !37
  %202 = load i32, ptr addrspace(3) %201, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %163, i32 %168, i32 %173, i32 %178, ptr addrspace(1) %106, i1 %41) #2, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %184, i32 %190, i32 %196, i32 %202, ptr addrspace(1) %108, i1 %42) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu5vvplw6mnzdmkhdxpnpcasz7jzlmlud7klp2fzpfkuajoxtv7a.py", directory: "inductor_cache/u5")
!4 = !{ptr @triton_poi_fused_sigmoid_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_sigmoid_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_sigmoid_35", linkageName: "triton_poi_fused_sigmoid_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 62, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 47, column: 30, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 33, column: 22, scope: !7)
!31 = !DILocation(line: 47, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 47, column: 16, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 25, scope: !7)
!37 = !DILocation(line: 34, column: 46, scope: !7)
!38 = !DILocation(line: 34, column: 4, scope: !7)
