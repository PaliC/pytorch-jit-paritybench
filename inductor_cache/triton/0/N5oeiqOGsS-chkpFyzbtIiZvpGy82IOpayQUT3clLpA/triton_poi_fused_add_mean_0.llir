; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mean_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !20
  %26 = or disjoint i32 %13, 1, !dbg !21
  %27 = or disjoint i32 %13, 5, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %12) #1, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #1, !dbg !23
  %34 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #1, !dbg !27
  %40 = or disjoint i32 %13, 2, !dbg !28
  %41 = or disjoint i32 %13, 6, !dbg !28
  %42 = sext i32 %40 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = sext i32 %41 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #1, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #1, !dbg !30
  %48 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #1, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %12) #1, !dbg !34
  %54 = or disjoint i32 %13, 3, !dbg !35
  %55 = or disjoint i32 %13, 7, !dbg !35
  %56 = sext i32 %54 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !36
  %58 = sext i32 %55 to i64, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #1, !dbg !37
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %12) #1, !dbg !37
  %62 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #1, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #1, !dbg !41
  %68 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !17
  %69 = insertelement <2 x i32> %68, i32 %32, i64 1, !dbg !17
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !17
  %71 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %72 = insertelement <2 x i32> %71, i32 %35, i64 1, !dbg !18
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !18
  %74 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !20
  %75 = insertelement <2 x i32> %74, i32 %38, i64 1, !dbg !20
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !20
  %77 = fadd <2 x float> %70, %73, !dbg !42
  %78 = fadd <2 x float> %77, %76, !dbg !43
  %79 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %80 = insertelement <2 x i32> %79, i32 %33, i64 1, !dbg !17
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !17
  %82 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !20
  %83 = insertelement <2 x i32> %82, i32 %39, i64 1, !dbg !20
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !20
  %85 = fadd <2 x float> %81, %73, !dbg !42
  %86 = fadd <2 x float> %85, %84, !dbg !43
  %shift = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %87 = fadd <2 x float> %78, %shift, !dbg !44
  %shift1 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %88 = fadd <2 x float> %86, %shift1, !dbg !44
  %89 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !30
  %90 = insertelement <2 x i32> %89, i32 %60, i64 1, !dbg !30
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !30
  %92 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !32
  %93 = insertelement <2 x i32> %92, i32 %63, i64 1, !dbg !32
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !32
  %95 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !34
  %96 = insertelement <2 x i32> %95, i32 %66, i64 1, !dbg !34
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !34
  %98 = fadd <2 x float> %91, %94, !dbg !45
  %99 = fadd <2 x float> %98, %97, !dbg !46
  %100 = fadd <2 x float> %87, %99, !dbg !47
  %101 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !30
  %102 = insertelement <2 x i32> %101, i32 %61, i64 1, !dbg !30
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !30
  %104 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !34
  %105 = insertelement <2 x i32> %104, i32 %67, i64 1, !dbg !34
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !34
  %107 = fadd <2 x float> %103, %94, !dbg !45
  %108 = fadd <2 x float> %107, %106, !dbg !46
  %109 = fadd <2 x float> %88, %108, !dbg !47
  %shift2 = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %110 = fadd <2 x float> %100, %shift2, !dbg !48
  %111 = extractelement <2 x float> %110, i64 0, !dbg !48
  %shift3 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %112 = fadd <2 x float> %109, %shift3, !dbg !48
  %113 = extractelement <2 x float> %112, i64 0, !dbg !48
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 4.000000e+00) #1, !dbg !49
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 4.000000e+00) #1, !dbg !49
  %116 = sext i32 %11 to i64, !dbg !50
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !50
  %118 = bitcast float %114 to i32, !dbg !51
  %119 = bitcast float %115 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 %12) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciefvq5bn3un7nhvxupfh5moe4kjkt4fbd4erdkzuqtfobnzxmfl.py", directory: "inductor_cache/ie")
!4 = !{ptr @triton_poi_fused_add_mean_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mean_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mean_0", linkageName: "triton_poi_fused_add_mean_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 29, column: 34, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 42, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 20, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 42, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 20, scope: !7)
!40 = !DILocation(line: 40, column: 31, scope: !7)
!41 = !DILocation(line: 40, column: 42, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 25, scope: !7)
!51 = !DILocation(line: 54, column: 37, scope: !7)
!52 = !DILocation(line: 54, column: 4, scope: !7)
