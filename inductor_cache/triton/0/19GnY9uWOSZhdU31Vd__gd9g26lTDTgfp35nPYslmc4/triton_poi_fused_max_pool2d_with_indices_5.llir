; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %14 = sdiv i32 %.frozen, 8, !dbg !14
  %15 = mul i32 %14, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = srem i32 %11, 8, !dbg !15
  %17 = srem i32 %12, 8, !dbg !15
  %18 = srem i32 %13, 8, !dbg !15
  %19 = shl nsw i32 %.decomposed, 1, !dbg !16
  %20 = shl nsw i32 %16, 1, !dbg !16
  %21 = shl nsw i32 %17, 1, !dbg !16
  %22 = shl nsw i32 %18, 1, !dbg !16
  %23 = shl i32 %14, 5, !dbg !17
  %24 = add i32 %19, %23, !dbg !18
  %25 = add i32 %23, %20, !dbg !18
  %26 = add i32 %23, %21, !dbg !18
  %27 = add i32 %23, %22, !dbg !18
  %28 = sext i32 %24 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = sext i32 %25 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %26 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = sext i32 %27 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !20
  %40 = or disjoint i32 %24, 1, !dbg !21
  %41 = or disjoint i32 %25, 1, !dbg !21
  %42 = or disjoint i32 %26, 1, !dbg !21
  %43 = or disjoint i32 %27, 1, !dbg !21
  %44 = sext i32 %40 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %41 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = sext i32 %42 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %43 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !23
  %56 = or disjoint i32 %23, 16, !dbg !24
  %57 = add i32 %56, %19, !dbg !25
  %58 = add i32 %56, %20, !dbg !25
  %59 = add i32 %56, %21, !dbg !25
  %60 = add i32 %56, %22, !dbg !25
  %61 = sext i32 %57 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !26
  %63 = sext i32 %58 to i64, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !26
  %65 = sext i32 %59 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !26
  %67 = sext i32 %60 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !27
  %73 = or disjoint i32 %23, 17, !dbg !28
  %74 = add i32 %73, %19, !dbg !29
  %75 = add i32 %73, %20, !dbg !29
  %76 = add i32 %73, %21, !dbg !29
  %77 = add i32 %73, %22, !dbg !29
  %78 = sext i32 %74 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %75 to i64, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = sext i32 %76 to i64, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = sext i32 %77 to i64, !dbg !30
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !31
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !31
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !31
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !31
  %90 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !20
  %91 = insertelement <4 x i32> %90, i32 %37, i64 1, !dbg !20
  %92 = insertelement <4 x i32> %91, i32 %38, i64 2, !dbg !20
  %93 = insertelement <4 x i32> %92, i32 %39, i64 3, !dbg !20
  %94 = bitcast <4 x i32> %93 to <4 x float>, !dbg !20
  %95 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !23
  %96 = insertelement <4 x i32> %95, i32 %53, i64 1, !dbg !23
  %97 = insertelement <4 x i32> %96, i32 %54, i64 2, !dbg !23
  %98 = insertelement <4 x i32> %97, i32 %55, i64 3, !dbg !23
  %99 = bitcast <4 x i32> %98 to <4 x float>, !dbg !23
  %100 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !27
  %101 = insertelement <4 x i32> %100, i32 %70, i64 1, !dbg !27
  %102 = insertelement <4 x i32> %101, i32 %71, i64 2, !dbg !27
  %103 = insertelement <4 x i32> %102, i32 %72, i64 3, !dbg !27
  %104 = bitcast <4 x i32> %103 to <4 x float>, !dbg !27
  %105 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !31
  %106 = insertelement <4 x i32> %105, i32 %87, i64 1, !dbg !31
  %107 = insertelement <4 x i32> %106, i32 %88, i64 2, !dbg !31
  %108 = insertelement <4 x i32> %107, i32 %89, i64 3, !dbg !31
  %109 = bitcast <4 x i32> %108 to <4 x float>, !dbg !31
  %110 = fcmp ogt <4 x float> %99, %94, !dbg !32
  %111 = fcmp uno <4 x float> %99, zeroinitializer, !dbg !36
  %112 = or <4 x i1> %110, %111, !dbg !37
  %.v = select <4 x i1> %112, <4 x i32> %98, <4 x i32> %93, !dbg !38
  %113 = bitcast <4 x i32> %.v to <4 x float>, !dbg !38
  %114 = fcmp olt <4 x float> %113, %104, !dbg !39
  %115 = fcmp uno <4 x float> %104, zeroinitializer, !dbg !41
  %116 = or <4 x i1> %114, %115, !dbg !42
  %.v1 = select <4 x i1> %116, <4 x i32> %103, <4 x i32> %.v, !dbg !43
  %117 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !43
  %118 = fcmp olt <4 x float> %117, %109, !dbg !44
  %119 = fcmp uno <4 x float> %109, zeroinitializer, !dbg !46
  %120 = or <4 x i1> %118, %119, !dbg !47
  %121 = extractelement <4 x i1> %120, i64 0, !dbg !47
  %122 = or <4 x i1> %118, %119, !dbg !47
  %123 = extractelement <4 x i1> %122, i64 1, !dbg !47
  %124 = or <4 x i1> %118, %119, !dbg !47
  %125 = extractelement <4 x i1> %124, i64 2, !dbg !47
  %126 = or <4 x i1> %118, %119, !dbg !47
  %127 = extractelement <4 x i1> %126, i64 3, !dbg !47
  %128 = zext <4 x i1> %110 to <4 x i8>, !dbg !48
  %129 = select <4 x i1> %114, <4 x i8> splat (i8 2), <4 x i8> %128, !dbg !49
  %130 = select <4 x i1> %118, <4 x i8> splat (i8 3), <4 x i8> %129, !dbg !50
  %131 = sext i32 %10 to i64, !dbg !51
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !51
  %133 = extractelement <4 x i32> %.v1, i64 0, !dbg !52
  %134 = select i1 %121, i32 %86, i32 %133, !dbg !53
  %135 = extractelement <4 x i32> %.v1, i64 1, !dbg !52
  %136 = select i1 %123, i32 %87, i32 %135, !dbg !53
  %137 = extractelement <4 x i32> %.v1, i64 2, !dbg !52
  %138 = select i1 %125, i32 %88, i32 %137, !dbg !53
  %139 = extractelement <4 x i32> %.v1, i64 3, !dbg !52
  %140 = select i1 %127, i32 %89, i32 %139, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %134, i32 %136, i32 %138, i32 %140, ptr addrspace(1) %132, i1 true) #1, !dbg !52
  %141 = getelementptr i8, ptr addrspace(1) %2, i64 %131, !dbg !54
  %142 = bitcast <4 x i8> %130 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %141, i1 true) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czqax677ca5u7pxo5deqpqa5cq2mmsmw7ghqji6scpatesgfufoj.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 32, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 49, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 50, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 50, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 31, column: 40, scope: !7)
!36 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 32, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !40)
!44 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !45)
!45 = !DILocation(line: 33, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !45)
!48 = !DILocation(line: 37, column: 33, scope: !7)
!49 = !DILocation(line: 40, column: 35, scope: !7)
!50 = !DILocation(line: 43, column: 35, scope: !7)
!51 = !DILocation(line: 44, column: 25, scope: !7)
!52 = !DILocation(line: 44, column: 36, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !45)
!54 = !DILocation(line: 45, column: 25, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 45, column: 4, scope: !7)
