#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0)
#loc1 = loc(unknown)
#loc17 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":41:59)
#loc25 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":49:59)
#loc38 = loc(callsite(#loc1 at #loc17))
#loc42 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_37(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %c768_i32 = arith.constant 768 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant 7.680000e+02 : f32 loc(#loc1)
    %cst_2 = arith.constant 9.99999997E-7 : f32 loc(#loc1)
    %cst_3 = arith.constant 0.00130208337 : f32 loc(#loc1)
    %cst_4 = arith.constant dense<768> : tensor<1024xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc3)
    %2 = arith.cmpi slt, %1, %cst_4 : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = arith.muli %0, %c768_i32 : i32 loc(#loc5)
    %4 = tt.splat %3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %5 = arith.addi %1, %4 : tensor<1024xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %2, %cst : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %5 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %11 = tt.load %10, %2, %cst : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.addptr %12, %1 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc11)
    %14 = tt.load %13, %2, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = arith.addf %11, %14 : tensor<1024xf32, #blocked> loc(#loc13)
    %16 = arith.addf %8, %15 : tensor<1024xf32, #blocked> loc(#loc14)
    %17 = arith.select %2, %16, %cst : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc15)
    %18 = "tt.reduce"(%17) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc17)), %arg8: f32 loc(callsite(#loc1 at #loc17))):
      %38 = arith.addf %arg7, %arg8 : f32 loc(#loc44)
      tt.reduce.return %38 : f32 loc(#loc37)
    }) : (tensor<1024xf32, #blocked>) -> f32 loc(#loc37)
    %19 = arith.addf %18, %cst_0 : f32 loc(#loc40)
    %20 = arith.divf %19, %cst_1 : f32 loc(#loc21)
    %21 = tt.splat %20 : f32 -> tensor<1024xf32, #blocked> loc(#loc22)
    %22 = arith.subf %16, %21 : tensor<1024xf32, #blocked> loc(#loc22)
    %23 = arith.mulf %22, %22 : tensor<1024xf32, #blocked> loc(#loc23)
    %24 = arith.select %2, %23, %cst : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc24)
    %25 = "tt.reduce"(%24) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc25)), %arg8: f32 loc(callsite(#loc1 at #loc25))):
      %38 = arith.addf %arg7, %arg8 : f32 loc(#loc45)
      tt.reduce.return %38 : f32 loc(#loc41)
    }) : (tensor<1024xf32, #blocked>) -> f32 loc(#loc41)
    %26 = arith.addf %25, %cst_0 : f32 loc(#loc43)
    %27 = arith.divf %26, %cst_1 : f32 loc(#loc27)
    %28 = arith.addf %27, %cst_2 : f32 loc(#loc28)
    %29 = tt.extern_elementwise %28 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (f32) -> f32 loc(#loc29)
    %30 = tt.splat %29 : f32 -> tensor<1024xf32, #blocked> loc(#loc30)
    %31 = arith.mulf %22, %30 : tensor<1024xf32, #blocked> loc(#loc30)
    %32 = arith.mulf %29, %cst_3 : f32 loc(#loc31)
    %33 = tt.splat %32 : f32 -> tensor<1xf32, #blocked1> loc(#loc31)
    %34 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc32)
    %35 = tt.addptr %34, %5 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc32)
    tt.store %35, %31, %2 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc33)
    %36 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    tt.store %37, %33 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":24:28)
#loc3 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":27:26)
#loc4 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":29:21)
#loc5 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":32:39)
#loc6 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":32:35)
#loc7 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":32:30)
#loc8 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":32:44)
#loc9 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":33:30)
#loc10 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":33:44)
#loc11 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":34:30)
#loc12 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":34:35)
#loc13 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":35:18)
#loc14 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":36:18)
#loc15 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":40:34)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc20 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":41:45)
#loc21 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":44:20)
#loc22 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":45:19)
#loc23 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":46:20)
#loc24 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":48:35)
#loc26 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":49:45)
#loc27 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":52:20)
#loc28 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":54:20)
#loc29 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":55:28)
#loc30 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":56:20)
#loc31 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":58:20)
#loc32 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":59:25)
#loc33 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":59:46)
#loc34 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":60:25)
#loc35 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":60:37)
#loc36 = loc("inductor_cache/nn/cnns5m4ublqtxhokmc3zhdpytsgzzzbs65dwfsbrey3hykgr7wpg.py":60:4)
#loc37 = loc(callsite(#loc16 at #loc17))
#loc39 = loc(callsite(#loc18 at #loc16))
#loc40 = loc(callsite(#loc19 at #loc20))
#loc41 = loc(callsite(#loc16 at #loc25))
#loc43 = loc(callsite(#loc19 at #loc26))
#loc44 = loc(callsite(#loc39 at #loc17))
#loc45 = loc(callsite(#loc39 at #loc25))
