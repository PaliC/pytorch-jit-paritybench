; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 240, !dbg !12
  %15 = and i32 %12, 255, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %20, 512, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 4, !dbg !16
  %25 = lshr i32 %12, 4, !dbg !17
  %26 = and i32 %25, 15, !dbg !17
  %27 = or disjoint i32 %24, %26, !dbg !18
  %28 = icmp slt i32 %27, 64, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %29 = sdiv i32 %.frozen, 128, !dbg !20
  %30 = mul i32 %29, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = srem i32 %17, 128, !dbg !21
  %32 = srem i32 %18, 128, !dbg !21
  %33 = srem i32 %19, 128, !dbg !21
  %34 = srem i32 %20, 128, !dbg !21
  %35 = shl i32 %27, 7, !dbg !22
  %36 = shl i32 %29, 13, !dbg !23
  %37 = add i32 %36, %35, !dbg !24
  %38 = add i32 %37, %.decomposed, !dbg !25
  %39 = add i32 %37, %31, !dbg !25
  %40 = add i32 %37, %32, !dbg !25
  %41 = add i32 %37, %33, !dbg !25
  %42 = sext i32 %38 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %39 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %40 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = sext i32 %41 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = and i1 %21, %28, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %50) #4, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %50) #4, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %50) #4, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %71 = and i32 %13, 4080, !dbg !28
  %72 = and i32 %12, 240, !dbg !28
  %73 = add nuw nsw i32 %71, %72, !dbg !28
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %52, i32 %53, i32 %54, i32 %55, i1 true) #4, !dbg !28
  %75 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 16, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %75, i32 %57, i32 %58, i32 %59, i32 %60, i1 true) #4, !dbg !28
  %76 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 32, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %76, i32 %62, i32 %63, i32 %64, i32 %65, i1 true) #4, !dbg !28
  %77 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 48, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %77, i32 %67, i32 %68, i32 %69, i32 %70, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !28
  %80 = add nuw nsw i32 %15, 272, !dbg !28
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !28
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !28
  %83 = add nuw nsw i32 %15, 544, !dbg !28
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83, !dbg !28
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %86 = add nuw nsw i32 %15, 816, !dbg !28
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %86, !dbg !28
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !28
  %89 = add nuw nsw i32 %15, 1088, !dbg !28
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89, !dbg !28
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !28
  %92 = add nuw nsw i32 %15, 1360, !dbg !28
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !28
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !28
  %95 = add nuw nsw i32 %15, 1632, !dbg !28
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !28
  %98 = add nuw nsw i32 %15, 1904, !dbg !28
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !28
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !28
  %101 = add nuw nsw i32 %15, 2176, !dbg !28
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !28
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !28
  %104 = add nuw nsw i32 %15, 2448, !dbg !28
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !28
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !28
  %107 = add nuw nsw i32 %15, 2720, !dbg !28
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !28
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !28
  %110 = add nuw nsw i32 %15, 2992, !dbg !28
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !28
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !28
  %113 = add nuw nsw i32 %15, 3264, !dbg !28
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !28
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !28
  %116 = add nuw nsw i32 %15, 3536, !dbg !28
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !28
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !28
  %119 = add nuw nsw i32 %15, 3808, !dbg !28
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !28
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !28
  %122 = add nuw nsw i32 %15, 4080, !dbg !28
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !28
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !28
  %125 = sext i32 %34 to i64, !dbg !29
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %22) #4, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !31
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %22) #4, !dbg !32
  %130 = bitcast i32 %129 to float, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %22) #4, !dbg !34
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %125, !dbg !35
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %22) #4, !dbg !36
  %135 = fadd float %130, 0x3EE4F8B580000000, !dbg !37
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %136, 0, !dbg !38
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %137, 0, !dbg !38
  br i1 %.not.i, label %143, label %138, !dbg !38

138:                                              ; preds = %9
  br i1 %.not1.i, label %141, label %139, !dbg !38

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

143:                                              ; preds = %9
  br i1 %.not1.i, label %146, label %144, !dbg !38

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %139, %141, %144, %146
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !38
  %148 = shl i32 %12, 2, !dbg !17
  %149 = and i32 %148, 12, !dbg !17
  %150 = or disjoint i32 %24, %149, !dbg !18
  %151 = icmp slt i32 %150, 64, !dbg !19
  %152 = lshr i32 %12, 2, !dbg !12
  %153 = and i32 %152, 63, !dbg !12
  %154 = or disjoint i32 %153, %11, !dbg !13
  %155 = or disjoint i32 %154, 192, !dbg !13
  %156 = icmp slt i32 %155, 512, !dbg !14
  %157 = and i1 %156, %151, !dbg !27
  %158 = or disjoint i32 %154, 128, !dbg !13
  %159 = icmp slt i32 %158, 512, !dbg !14
  %160 = and i1 %159, %151, !dbg !27
  %161 = or disjoint i32 %154, 64, !dbg !13
  %162 = icmp slt i32 %161, 512, !dbg !14
  %163 = and i1 %162, %151, !dbg !27
  %164 = icmp slt i32 %154, 512, !dbg !14
  %165 = and i1 %164, %151, !dbg !27
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %167 = insertelement <16 x float> poison, float %124, i64 0, !dbg !40
  %168 = insertelement <16 x float> %167, float %121, i64 1, !dbg !40
  %169 = insertelement <16 x float> %168, float %118, i64 2, !dbg !40
  %170 = insertelement <16 x float> %169, float %115, i64 3, !dbg !40
  %171 = insertelement <16 x float> %170, float %112, i64 4, !dbg !40
  %172 = insertelement <16 x float> %171, float %109, i64 5, !dbg !40
  %173 = insertelement <16 x float> %172, float %106, i64 6, !dbg !40
  %174 = insertelement <16 x float> %173, float %103, i64 7, !dbg !40
  %175 = insertelement <16 x float> %174, float %100, i64 8, !dbg !40
  %176 = insertelement <16 x float> %175, float %97, i64 9, !dbg !40
  %177 = insertelement <16 x float> %176, float %94, i64 10, !dbg !40
  %178 = insertelement <16 x float> %177, float %91, i64 11, !dbg !40
  %179 = insertelement <16 x float> %178, float %88, i64 12, !dbg !40
  %180 = insertelement <16 x float> %179, float %85, i64 13, !dbg !40
  %181 = insertelement <16 x float> %180, float %82, i64 14, !dbg !40
  %182 = insertelement <16 x float> %181, float %79, i64 15, !dbg !40
  %183 = insertelement <16 x i32> poison, i32 %127, i64 0, !dbg !40
  %184 = bitcast <16 x i32> %183 to <16 x float>, !dbg !40
  %185 = shufflevector <16 x float> %184, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %186 = fsub <16 x float> %182, %185, !dbg !40
  %187 = insertelement <16 x float> poison, float %166, i64 0, !dbg !41
  %188 = shufflevector <16 x float> %187, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %189 = fmul <16 x float> %186, %188, !dbg !41
  %190 = insertelement <16 x i32> poison, i32 %132, i64 0, !dbg !42
  %191 = bitcast <16 x i32> %190 to <16 x float>, !dbg !42
  %192 = shufflevector <16 x float> %191, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %193 = fmul <16 x float> %189, %192, !dbg !42
  %194 = insertelement <16 x i32> poison, i32 %134, i64 0, !dbg !43
  %195 = bitcast <16 x i32> %194 to <16 x float>, !dbg !43
  %196 = shufflevector <16 x float> %195, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %197 = fadd <16 x float> %193, %196, !dbg !43
  %198 = fcmp olt <16 x float> %197, zeroinitializer, !dbg !44
  %199 = select <16 x i1> %198, <16 x float> zeroinitializer, <16 x float> %197, !dbg !48
  %200 = fcmp ole <16 x float> %199, zeroinitializer, !dbg !49
  %201 = shl i32 %154, 6, !dbg !50
  %202 = shl i32 %161, 6, !dbg !50
  %203 = shl i32 %158, 6, !dbg !50
  %204 = shl i32 %155, 6, !dbg !50
  %205 = add i32 %150, %201, !dbg !51
  %206 = add i32 %150, %202, !dbg !51
  %207 = add i32 %150, %203, !dbg !51
  %208 = add i32 %150, %204, !dbg !51
  %209 = sext i32 %205 to i64, !dbg !52
  %210 = getelementptr float, ptr addrspace(1) %5, i64 %209, !dbg !52
  %211 = sext i32 %206 to i64, !dbg !52
  %212 = getelementptr float, ptr addrspace(1) %5, i64 %211, !dbg !52
  %213 = sext i32 %207 to i64, !dbg !52
  %214 = getelementptr float, ptr addrspace(1) %5, i64 %213, !dbg !52
  %215 = sext i32 %208 to i64, !dbg !52
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %217 = and i32 %148, 1020, !dbg !53
  %218 = lshr exact i32 %71, 2, !dbg !53
  %219 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %218, !dbg !53
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %71, !dbg !53
  %221 = extractelement <16 x float> %199, i64 15, !dbg !53
  %222 = bitcast float %221 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %222, i1 true) #4, !dbg !53
  %223 = or disjoint i32 %71, 1, !dbg !53
  %224 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %223, !dbg !53
  %225 = extractelement <16 x float> %199, i64 14, !dbg !53
  %226 = bitcast float %225 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %226, i1 true) #4, !dbg !53
  %227 = or disjoint i32 %71, 2, !dbg !53
  %228 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %227, !dbg !53
  %229 = extractelement <16 x float> %199, i64 13, !dbg !53
  %230 = bitcast float %229 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %230, i1 true) #4, !dbg !53
  %231 = or disjoint i32 %71, 3, !dbg !53
  %232 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %231, !dbg !53
  %233 = extractelement <16 x float> %199, i64 12, !dbg !53
  %234 = bitcast float %233 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %234, i1 true) #4, !dbg !53
  %235 = or disjoint i32 %71, 4, !dbg !53
  %236 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %235, !dbg !53
  %237 = extractelement <16 x float> %199, i64 11, !dbg !53
  %238 = bitcast float %237 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %238, i1 true) #4, !dbg !53
  %239 = or disjoint i32 %71, 5, !dbg !53
  %240 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %239, !dbg !53
  %241 = extractelement <16 x float> %199, i64 10, !dbg !53
  %242 = bitcast float %241 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %242, i1 true) #4, !dbg !53
  %243 = or disjoint i32 %71, 6, !dbg !53
  %244 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %243, !dbg !53
  %245 = extractelement <16 x float> %199, i64 9, !dbg !53
  %246 = bitcast float %245 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %246, i1 true) #4, !dbg !53
  %247 = or disjoint i32 %71, 7, !dbg !53
  %248 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %247, !dbg !53
  %249 = extractelement <16 x float> %199, i64 8, !dbg !53
  %250 = bitcast float %249 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %250, i1 true) #4, !dbg !53
  %251 = or disjoint i32 %71, 8, !dbg !53
  %252 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %251, !dbg !53
  %253 = extractelement <16 x float> %199, i64 7, !dbg !53
  %254 = bitcast float %253 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %254, i1 true) #4, !dbg !53
  %255 = or disjoint i32 %71, 9, !dbg !53
  %256 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %255, !dbg !53
  %257 = extractelement <16 x float> %199, i64 6, !dbg !53
  %258 = bitcast float %257 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %258, i1 true) #4, !dbg !53
  %259 = or disjoint i32 %71, 10, !dbg !53
  %260 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %259, !dbg !53
  %261 = extractelement <16 x float> %199, i64 5, !dbg !53
  %262 = bitcast float %261 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %262, i1 true) #4, !dbg !53
  %263 = or disjoint i32 %71, 11, !dbg !53
  %264 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %263, !dbg !53
  %265 = extractelement <16 x float> %199, i64 4, !dbg !53
  %266 = bitcast float %265 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %266, i1 true) #4, !dbg !53
  %267 = or disjoint i32 %71, 12, !dbg !53
  %268 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %267, !dbg !53
  %269 = extractelement <16 x float> %199, i64 3, !dbg !53
  %270 = bitcast float %269 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %270, i1 true) #4, !dbg !53
  %271 = or disjoint i32 %71, 13, !dbg !53
  %272 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %271, !dbg !53
  %273 = extractelement <16 x float> %199, i64 2, !dbg !53
  %274 = bitcast float %273 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %274, i1 true) #4, !dbg !53
  %275 = or disjoint i32 %71, 14, !dbg !53
  %276 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %275, !dbg !53
  %277 = extractelement <16 x float> %199, i64 1, !dbg !53
  %278 = bitcast float %277 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %278, i1 true) #4, !dbg !53
  %279 = or disjoint i32 %71, 15, !dbg !53
  %280 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %279, !dbg !53
  %281 = extractelement <16 x float> %199, i64 0, !dbg !53
  %282 = bitcast float %281 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %282, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %283 = lshr i32 %217, 4, !dbg !53
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !53
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %217, !dbg !53
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !53
  %287 = or disjoint i32 %217, 1, !dbg !53
  %288 = getelementptr float, ptr addrspace(3) %284, i32 %287, !dbg !53
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !53
  %290 = or disjoint i32 %217, 2, !dbg !53
  %291 = getelementptr float, ptr addrspace(3) %284, i32 %290, !dbg !53
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !53
  %293 = or disjoint i32 %217, 3, !dbg !53
  %294 = getelementptr float, ptr addrspace(3) %284, i32 %293, !dbg !53
  %295 = load i32, ptr addrspace(3) %294, align 4, !dbg !53
  %296 = or disjoint i32 %217, 1024, !dbg !53
  %297 = lshr i32 %296, 4, !dbg !53
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !53
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %296, !dbg !53
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !53
  %301 = or disjoint i32 %217, 1025, !dbg !53
  %302 = lshr i32 %301, 4, !dbg !53
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !53
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %301, !dbg !53
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !53
  %306 = or disjoint i32 %217, 1026, !dbg !53
  %307 = lshr i32 %306, 4, !dbg !53
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !53
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %306, !dbg !53
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !53
  %311 = or disjoint i32 %217, 1027, !dbg !53
  %312 = lshr i32 %311, 4, !dbg !53
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %312, !dbg !53
  %314 = getelementptr float, ptr addrspace(3) %313, i32 %311, !dbg !53
  %315 = load i32, ptr addrspace(3) %314, align 4, !dbg !53
  %316 = or disjoint i32 %217, 2048, !dbg !53
  %317 = lshr i32 %316, 4, !dbg !53
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !53
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %316, !dbg !53
  %320 = load i32, ptr addrspace(3) %319, align 4, !dbg !53
  %321 = or disjoint i32 %217, 2049, !dbg !53
  %322 = lshr i32 %321, 4, !dbg !53
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i32 %322, !dbg !53
  %324 = getelementptr float, ptr addrspace(3) %323, i32 %321, !dbg !53
  %325 = load i32, ptr addrspace(3) %324, align 4, !dbg !53
  %326 = or disjoint i32 %217, 2050, !dbg !53
  %327 = lshr i32 %326, 4, !dbg !53
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !53
  %329 = getelementptr float, ptr addrspace(3) %328, i32 %326, !dbg !53
  %330 = load i32, ptr addrspace(3) %329, align 4, !dbg !53
  %331 = or disjoint i32 %217, 2051, !dbg !53
  %332 = lshr i32 %331, 4, !dbg !53
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !53
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !53
  %335 = load i32, ptr addrspace(3) %334, align 4, !dbg !53
  %336 = or disjoint i32 %217, 3072, !dbg !53
  %337 = lshr i32 %336, 4, !dbg !53
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !53
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !53
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !53
  %341 = or disjoint i32 %217, 3073, !dbg !53
  %342 = lshr i32 %341, 4, !dbg !53
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !53
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !53
  %345 = load i32, ptr addrspace(3) %344, align 4, !dbg !53
  %346 = or disjoint i32 %217, 3074, !dbg !53
  %347 = lshr i32 %346, 4, !dbg !53
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %347, !dbg !53
  %349 = getelementptr float, ptr addrspace(3) %348, i32 %346, !dbg !53
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !53
  %351 = or disjoint i32 %217, 3075, !dbg !53
  %352 = lshr i32 %351, 4, !dbg !53
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i32 %352, !dbg !53
  %354 = getelementptr float, ptr addrspace(3) %353, i32 %351, !dbg !53
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %289, i32 %292, i32 %295, ptr addrspace(1) %210, i1 %165) #4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %305, i32 %310, i32 %315, ptr addrspace(1) %212, i1 %163) #4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %325, i32 %330, i32 %335, ptr addrspace(1) %214, i1 %160) #4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %345, i32 %350, i32 %355, ptr addrspace(1) %216, i1 %157) #4, !dbg !53
  %356 = getelementptr i1, ptr addrspace(1) %6, i64 %42, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %357 = extractelement <16 x i1> %200, i64 15, !dbg !55
  %358 = zext i1 %357 to i8, !dbg !55
  %359 = extractelement <16 x i1> %200, i64 14, !dbg !55
  %360 = zext i1 %359 to i8, !dbg !55
  %361 = extractelement <16 x i1> %200, i64 13, !dbg !55
  %362 = zext i1 %361 to i8, !dbg !55
  %363 = extractelement <16 x i1> %200, i64 12, !dbg !55
  %364 = zext i1 %363 to i8, !dbg !55
  %365 = extractelement <16 x i1> %200, i64 11, !dbg !55
  %366 = zext i1 %365 to i8, !dbg !55
  %367 = extractelement <16 x i1> %200, i64 10, !dbg !55
  %368 = zext i1 %367 to i8, !dbg !55
  %369 = extractelement <16 x i1> %200, i64 9, !dbg !55
  %370 = zext i1 %369 to i8, !dbg !55
  %371 = extractelement <16 x i1> %200, i64 8, !dbg !55
  %372 = zext i1 %371 to i8, !dbg !55
  %373 = extractelement <16 x i1> %200, i64 7, !dbg !55
  %374 = zext i1 %373 to i8, !dbg !55
  %375 = extractelement <16 x i1> %200, i64 6, !dbg !55
  %376 = zext i1 %375 to i8, !dbg !55
  %377 = extractelement <16 x i1> %200, i64 5, !dbg !55
  %378 = zext i1 %377 to i8, !dbg !55
  %379 = extractelement <16 x i1> %200, i64 4, !dbg !55
  %380 = zext i1 %379 to i8, !dbg !55
  %381 = extractelement <16 x i1> %200, i64 3, !dbg !55
  %382 = zext i1 %381 to i8, !dbg !55
  %383 = extractelement <16 x i1> %200, i64 2, !dbg !55
  %384 = zext i1 %383 to i8, !dbg !55
  %385 = extractelement <16 x i1> %200, i64 1, !dbg !55
  %386 = zext i1 %385 to i8, !dbg !55
  %387 = extractelement <16 x i1> %200, i64 0, !dbg !55
  %388 = zext i1 %387 to i8, !dbg !55
  %389 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !55
  %390 = insertelement <1 x i8> poison, i8 %358, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %389, <1 x i8> %390, i1 true) #4, !dbg !55
  %391 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %80, !dbg !55
  %392 = insertelement <1 x i8> poison, i8 %360, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %391, <1 x i8> %392, i1 true) #4, !dbg !55
  %393 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !55
  %394 = insertelement <1 x i8> poison, i8 %362, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %393, <1 x i8> %394, i1 true) #4, !dbg !55
  %395 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %86, !dbg !55
  %396 = insertelement <1 x i8> poison, i8 %364, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %395, <1 x i8> %396, i1 true) #4, !dbg !55
  %397 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %89, !dbg !55
  %398 = insertelement <1 x i8> poison, i8 %366, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %397, <1 x i8> %398, i1 true) #4, !dbg !55
  %399 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %92, !dbg !55
  %400 = insertelement <1 x i8> poison, i8 %368, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %399, <1 x i8> %400, i1 true) #4, !dbg !55
  %401 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !55
  %402 = insertelement <1 x i8> poison, i8 %370, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %401, <1 x i8> %402, i1 true) #4, !dbg !55
  %403 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %98, !dbg !55
  %404 = insertelement <1 x i8> poison, i8 %372, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %403, <1 x i8> %404, i1 true) #4, !dbg !55
  %405 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %101, !dbg !55
  %406 = insertelement <1 x i8> poison, i8 %374, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %405, <1 x i8> %406, i1 true) #4, !dbg !55
  %407 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %104, !dbg !55
  %408 = insertelement <1 x i8> poison, i8 %376, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %407, <1 x i8> %408, i1 true) #4, !dbg !55
  %409 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !55
  %410 = insertelement <1 x i8> poison, i8 %378, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %409, <1 x i8> %410, i1 true) #4, !dbg !55
  %411 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !55
  %412 = insertelement <1 x i8> poison, i8 %380, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %411, <1 x i8> %412, i1 true) #4, !dbg !55
  %413 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %113, !dbg !55
  %414 = insertelement <1 x i8> poison, i8 %382, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %413, <1 x i8> %414, i1 true) #4, !dbg !55
  %415 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %116, !dbg !55
  %416 = insertelement <1 x i8> poison, i8 %384, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %415, <1 x i8> %416, i1 true) #4, !dbg !55
  %417 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %119, !dbg !55
  %418 = insertelement <1 x i8> poison, i8 %386, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %417, <1 x i8> %418, i1 true) #4, !dbg !55
  %419 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %122, !dbg !55
  %420 = insertelement <1 x i8> poison, i8 %388, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %419, <1 x i8> %420, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %421 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %73, !dbg !55
  %422 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !55
  %423 = bitcast <4 x i32> %422 to <128 x i1>, !dbg !55
  %424 = extractelement <128 x i1> %423, i64 24, !dbg !55
  %425 = extractelement <128 x i1> %423, i64 56, !dbg !55
  %426 = extractelement <128 x i1> %423, i64 88, !dbg !55
  %427 = extractelement <128 x i1> %423, i64 120, !dbg !55
  %428 = bitcast <4 x i32> %422 to <16 x i8>, !dbg !55
  %429 = extractelement <16 x i8> %428, i64 0, !dbg !55
  %430 = and i8 %429, 1, !dbg !55
  %431 = shufflevector <16 x i8> %428, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !55
  %432 = and <2 x i8> %431, splat (i8 1), !dbg !55
  %433 = zext i1 %424 to i8, !dbg !55
  %434 = extractelement <16 x i8> %428, i64 4, !dbg !55
  %435 = and i8 %434, 1, !dbg !55
  %436 = shufflevector <16 x i8> %428, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !55
  %437 = and <2 x i8> %436, splat (i8 1), !dbg !55
  %438 = zext i1 %425 to i8, !dbg !55
  %439 = extractelement <16 x i8> %428, i64 8, !dbg !55
  %440 = and i8 %439, 1, !dbg !55
  %441 = shufflevector <16 x i8> %428, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !55
  %442 = and <2 x i8> %441, splat (i8 1), !dbg !55
  %443 = zext i1 %426 to i8, !dbg !55
  %444 = extractelement <16 x i8> %428, i64 12, !dbg !55
  %445 = and i8 %444, 1, !dbg !55
  %446 = shufflevector <16 x i8> %428, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !55
  %447 = and <2 x i8> %446, splat (i8 1), !dbg !55
  %448 = zext i1 %427 to i8, !dbg !55
  %449 = insertelement <4 x i8> poison, i8 %430, i64 0, !dbg !55
  %450 = shufflevector <2 x i8> %432, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %451 = shufflevector <4 x i8> %449, <4 x i8> %450, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !55
  %452 = insertelement <4 x i8> %451, i8 %433, i64 3, !dbg !55
  %453 = bitcast <4 x i8> %452 to i32, !dbg !55
  %454 = insertelement <4 x i8> poison, i8 %435, i64 0, !dbg !55
  %455 = shufflevector <2 x i8> %437, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %456 = shufflevector <4 x i8> %454, <4 x i8> %455, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !55
  %457 = insertelement <4 x i8> %456, i8 %438, i64 3, !dbg !55
  %458 = bitcast <4 x i8> %457 to i32, !dbg !55
  %459 = insertelement <4 x i8> poison, i8 %440, i64 0, !dbg !55
  %460 = shufflevector <2 x i8> %442, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %461 = shufflevector <4 x i8> %459, <4 x i8> %460, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !55
  %462 = insertelement <4 x i8> %461, i8 %443, i64 3, !dbg !55
  %463 = bitcast <4 x i8> %462 to i32, !dbg !55
  %464 = insertelement <4 x i8> poison, i8 %445, i64 0, !dbg !55
  %465 = shufflevector <2 x i8> %447, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %466 = shufflevector <4 x i8> %464, <4 x i8> %465, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !55
  %467 = insertelement <4 x i8> %466, i8 %448, i64 3, !dbg !55
  %468 = bitcast <4 x i8> %467 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %458, i32 %463, i32 %468, ptr addrspace(1) %356, i1 %50) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm5iormxdcs5jszhs2aydlbrwv7kausmedxsoh2yuumioowga4ce.py", directory: "inductor_cache/m5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 51, column: 21, scope: !7)
!50 = !DILocation(line: 52, column: 33, scope: !7)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 45, scope: !7)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 56, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
