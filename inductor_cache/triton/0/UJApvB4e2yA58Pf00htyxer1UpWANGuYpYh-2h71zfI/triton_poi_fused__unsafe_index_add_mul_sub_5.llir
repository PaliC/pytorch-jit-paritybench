; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = lshr i32 %13, 3, !dbg !17
  %21 = and i32 %20, 15, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = or disjoint i32 %22, 16, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %24 = sdiv i32 %.frozen, 64, !dbg !19
  %.frozen1 = freeze i32 %23, !dbg !19
  %25 = sdiv i32 %.frozen1, 64, !dbg !19
  %26 = mul i32 %24, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = mul i32 %25, 64, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %27, !dbg !20
  %.frozen3 = freeze i32 %16, !dbg !21
  %28 = sdiv i32 %.frozen3, 128, !dbg !21
  %29 = mul i32 %28, 128, !dbg !22
  %.decomposed4 = sub i32 %.frozen3, %29, !dbg !22
  %30 = sext i32 %24 to i64, !dbg !23
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %25 to i64, !dbg !23
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !24
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !24
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !24
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !24
  %42 = sext i32 %.decomposed to i64, !dbg !25
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !25
  %44 = sext i32 %.decomposed2 to i64, !dbg !25
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !25
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !26
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !26
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !26
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !26
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !26
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !26
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !26
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !26
  %54 = getelementptr i64, ptr addrspace(1) %3, i64 %42, !dbg !27
  %55 = getelementptr i64, ptr addrspace(1) %3, i64 %44, !dbg !27
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !28
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !28
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !28
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !28
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !30
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !30
  %74 = getelementptr i64, ptr addrspace(1) %5, i64 %30, !dbg !31
  %75 = getelementptr i64, ptr addrspace(1) %5, i64 %32, !dbg !31
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !32
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !32
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !32
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !32
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !32
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !32
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !32
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !33
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !34
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !34
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !34
  %90 = bitcast i32 %89 to float, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !34
  %95 = bitcast i32 %94 to float, !dbg !34
  %96 = add i64 %37, 5, !dbg !35
  %97 = add i64 %41, 5, !dbg !35
  %98 = icmp slt i64 %37, 0, !dbg !36
  %99 = icmp slt i64 %41, 0, !dbg !36
  %100 = select i1 %98, i64 %96, i64 %37, !dbg !37
  %101 = select i1 %99, i64 %97, i64 %41, !dbg !37
  %102 = icmp slt i64 %49, 0, !dbg !38
  %103 = icmp slt i64 %53, 0, !dbg !38
  %104 = shl i64 %49, 7, !dbg !39
  %105 = add i64 %104, 640, !dbg !39
  %106 = select i1 %102, i64 %105, i64 %104, !dbg !39
  %107 = shl i64 %53, 7, !dbg !39
  %108 = add i64 %107, 640, !dbg !39
  %109 = select i1 %103, i64 %108, i64 %107, !dbg !39
  %110 = sext i32 %.decomposed4 to i64, !dbg !40
  %111 = mul i64 %100, 640, !dbg !41
  %112 = mul i64 %101, 640, !dbg !41
  %113 = mul i32 %28, 3200, !dbg !42
  %114 = sext i32 %113 to i64, !dbg !43
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !44
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %110, !dbg !44
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %111, !dbg !44
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %114, !dbg !44
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !44
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %110, !dbg !44
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %112, !dbg !44
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %114, !dbg !44
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %17) #1, !dbg !45
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !45
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !45
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !45
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !45
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %17) #1, !dbg !45
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !45
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !45
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !45
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !45
  %133 = icmp slt i64 %59, 0, !dbg !46
  %134 = icmp slt i64 %63, 0, !dbg !46
  %135 = shl i64 %59, 7, !dbg !47
  %136 = add i64 %135, 640, !dbg !47
  %137 = select i1 %133, i64 %136, i64 %135, !dbg !47
  %138 = shl i64 %63, 7, !dbg !47
  %139 = add i64 %138, 640, !dbg !47
  %140 = select i1 %134, i64 %139, i64 %138, !dbg !47
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !48
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %110, !dbg !48
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %111, !dbg !48
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %114, !dbg !48
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !48
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %110, !dbg !48
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %112, !dbg !48
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %114, !dbg !48
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 %17) #1, !dbg !49
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !49
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !49
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !49
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !49
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %148, i1 %17) #1, !dbg !49
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !49
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !49
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !49
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !49
  %159 = add i64 %79, 5, !dbg !50
  %160 = add i64 %83, 5, !dbg !50
  %161 = icmp slt i64 %79, 0, !dbg !51
  %162 = icmp slt i64 %83, 0, !dbg !51
  %163 = select i1 %161, i64 %159, i64 %79, !dbg !52
  %164 = select i1 %162, i64 %160, i64 %83, !dbg !52
  %165 = mul i64 %163, 640, !dbg !53
  %166 = mul i64 %164, 640, !dbg !53
  %167 = getelementptr float, ptr addrspace(1) %116, i64 %165, !dbg !54
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %114, !dbg !54
  %169 = getelementptr float, ptr addrspace(1) %120, i64 %166, !dbg !54
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %114, !dbg !54
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %17) #1, !dbg !55
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !55
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !55
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !55
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !55
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %17) #1, !dbg !55
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !55
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !55
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !55
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !55
  %181 = getelementptr float, ptr addrspace(1) %142, i64 %165, !dbg !56
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %114, !dbg !56
  %183 = getelementptr float, ptr addrspace(1) %146, i64 %166, !dbg !56
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %114, !dbg !56
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %17) #1, !dbg !57
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !57
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !57
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !57
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !57
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %184, i1 %17) #1, !dbg !57
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !57
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !57
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !57
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !57
  %195 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !55
  %196 = insertelement <2 x i32> %195, i32 %124, i64 1, !dbg !55
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !55
  %198 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !57
  %199 = insertelement <2 x i32> %198, i32 %150, i64 1, !dbg !57
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !57
  %201 = fsub <2 x float> %200, %197, !dbg !58
  %202 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !59
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !59
  %204 = shufflevector <2 x float> %203, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %205 = fmul <2 x float> %201, %204, !dbg !59
  %206 = fadd <2 x float> %205, %197, !dbg !60
  %207 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !55
  %208 = insertelement <2 x i32> %207, i32 %125, i64 1, !dbg !55
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !55
  %210 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !57
  %211 = insertelement <2 x i32> %210, i32 %151, i64 1, !dbg !57
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !57
  %213 = fsub <2 x float> %212, %209, !dbg !58
  %214 = fmul <2 x float> %213, %204, !dbg !59
  %215 = fadd <2 x float> %214, %209, !dbg !60
  %216 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !55
  %217 = insertelement <2 x i32> %216, i32 %126, i64 1, !dbg !55
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !55
  %219 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !57
  %220 = insertelement <2 x i32> %219, i32 %152, i64 1, !dbg !57
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !57
  %222 = fsub <2 x float> %221, %218, !dbg !58
  %223 = fmul <2 x float> %222, %204, !dbg !59
  %224 = fadd <2 x float> %223, %218, !dbg !60
  %225 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !55
  %226 = insertelement <2 x i32> %225, i32 %127, i64 1, !dbg !55
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !55
  %228 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !57
  %229 = insertelement <2 x i32> %228, i32 %153, i64 1, !dbg !57
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !57
  %231 = fsub <2 x float> %230, %227, !dbg !58
  %232 = fmul <2 x float> %231, %204, !dbg !59
  %233 = fadd <2 x float> %232, %227, !dbg !60
  %234 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !55
  %235 = insertelement <2 x i32> %234, i32 %129, i64 1, !dbg !55
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !55
  %237 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !57
  %238 = insertelement <2 x i32> %237, i32 %155, i64 1, !dbg !57
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !57
  %240 = fsub <2 x float> %239, %236, !dbg !58
  %241 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !59
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !59
  %243 = shufflevector <2 x float> %242, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %244 = fmul <2 x float> %240, %243, !dbg !59
  %245 = fadd <2 x float> %244, %236, !dbg !60
  %246 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !55
  %247 = insertelement <2 x i32> %246, i32 %130, i64 1, !dbg !55
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !55
  %249 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !57
  %250 = insertelement <2 x i32> %249, i32 %156, i64 1, !dbg !57
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !57
  %252 = fsub <2 x float> %251, %248, !dbg !58
  %253 = fmul <2 x float> %252, %243, !dbg !59
  %254 = fadd <2 x float> %253, %248, !dbg !60
  %255 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !55
  %256 = insertelement <2 x i32> %255, i32 %131, i64 1, !dbg !55
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !55
  %258 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !57
  %259 = insertelement <2 x i32> %258, i32 %157, i64 1, !dbg !57
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !57
  %261 = fsub <2 x float> %260, %257, !dbg !58
  %262 = fmul <2 x float> %261, %243, !dbg !59
  %263 = fadd <2 x float> %262, %257, !dbg !60
  %264 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !55
  %265 = insertelement <2 x i32> %264, i32 %132, i64 1, !dbg !55
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !55
  %267 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !57
  %268 = insertelement <2 x i32> %267, i32 %158, i64 1, !dbg !57
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !57
  %270 = fsub <2 x float> %269, %266, !dbg !58
  %271 = fmul <2 x float> %270, %243, !dbg !59
  %272 = fadd <2 x float> %271, %266, !dbg !60
  %273 = extractelement <2 x float> %206, i64 0, !dbg !61
  %274 = extractelement <2 x float> %206, i64 1, !dbg !62
  %275 = fsub float %273, %274, !dbg !61
  %276 = extractelement <2 x float> %215, i64 0, !dbg !61
  %277 = extractelement <2 x float> %215, i64 1, !dbg !62
  %278 = fsub float %276, %277, !dbg !61
  %279 = extractelement <2 x float> %224, i64 0, !dbg !61
  %280 = extractelement <2 x float> %224, i64 1, !dbg !62
  %281 = fsub float %279, %280, !dbg !61
  %282 = extractelement <2 x float> %233, i64 0, !dbg !61
  %283 = extractelement <2 x float> %233, i64 1, !dbg !62
  %284 = fsub float %282, %283, !dbg !61
  %285 = extractelement <2 x float> %245, i64 0, !dbg !61
  %286 = extractelement <2 x float> %245, i64 1, !dbg !62
  %287 = fsub float %285, %286, !dbg !61
  %288 = extractelement <2 x float> %254, i64 0, !dbg !61
  %289 = extractelement <2 x float> %254, i64 1, !dbg !62
  %290 = fsub float %288, %289, !dbg !61
  %291 = extractelement <2 x float> %263, i64 0, !dbg !61
  %292 = extractelement <2 x float> %263, i64 1, !dbg !62
  %293 = fsub float %291, %292, !dbg !61
  %294 = extractelement <2 x float> %272, i64 0, !dbg !61
  %295 = extractelement <2 x float> %272, i64 1, !dbg !62
  %296 = fsub float %294, %295, !dbg !61
  %297 = fmul float %275, %90, !dbg !63
  %298 = fmul float %278, %90, !dbg !63
  %299 = fmul float %281, %90, !dbg !63
  %300 = fmul float %284, %90, !dbg !63
  %301 = fmul float %287, %95, !dbg !63
  %302 = fmul float %290, %95, !dbg !63
  %303 = fmul float %293, %95, !dbg !63
  %304 = fmul float %296, %95, !dbg !63
  %305 = fadd float %274, %297, !dbg !62
  %306 = fadd float %277, %298, !dbg !62
  %307 = fadd float %280, %299, !dbg !62
  %308 = fadd float %283, %300, !dbg !62
  %309 = fadd float %286, %301, !dbg !62
  %310 = fadd float %289, %302, !dbg !62
  %311 = fadd float %292, %303, !dbg !62
  %312 = fadd float %295, %304, !dbg !62
  %313 = shl i32 %22, 7, !dbg !64
  %314 = shl i32 %23, 7, !dbg !64
  %315 = shl i32 %28, 19, !dbg !65
  %316 = add i32 %315, %.decomposed4, !dbg !66
  %317 = add i32 %316, %313, !dbg !67
  %318 = add i32 %316, %314, !dbg !67
  %319 = sext i32 %317 to i64, !dbg !68
  %320 = getelementptr float, ptr addrspace(1) %7, i64 %319, !dbg !68
  %321 = sext i32 %318 to i64, !dbg !68
  %322 = getelementptr float, ptr addrspace(1) %7, i64 %321, !dbg !68
  %323 = bitcast float %305 to i32, !dbg !69
  %324 = bitcast float %306 to i32, !dbg !69
  %325 = bitcast float %307 to i32, !dbg !69
  %326 = bitcast float %308 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %323, i32 %324, i32 %325, i32 %326, ptr addrspace(1) %320, i1 %17) #1, !dbg !69
  %327 = bitcast float %309 to i32, !dbg !69
  %328 = bitcast float %310 to i32, !dbg !69
  %329 = bitcast float %311 to i32, !dbg !69
  %330 = bitcast float %312 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %327, i32 %328, i32 %329, i32 %330, ptr addrspace(1) %322, i1 %17) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmn6coy37qzpcg4bfjezdd44ithvz7bliibnw6zzzd5unnduwe3i.py", directory: "inductor_cache/mn")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_5", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 32, scope: !7)
!38 = !DILocation(line: 45, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 39, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 47, column: 50, scope: !7)
!42 = !DILocation(line: 47, column: 62, scope: !7)
!43 = !DILocation(line: 47, column: 57, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !7)
!45 = !DILocation(line: 47, column: 67, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 40, scope: !7)
!48 = !DILocation(line: 51, column: 31, scope: !7)
!49 = !DILocation(line: 51, column: 69, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 35, scope: !7)
!53 = !DILocation(line: 58, column: 51, scope: !7)
!54 = !DILocation(line: 58, column: 31, scope: !7)
!55 = !DILocation(line: 58, column: 69, scope: !7)
!56 = !DILocation(line: 59, column: 31, scope: !7)
!57 = !DILocation(line: 59, column: 70, scope: !7)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 34, scope: !7)
!65 = !DILocation(line: 66, column: 46, scope: !7)
!66 = !DILocation(line: 66, column: 30, scope: !7)
!67 = !DILocation(line: 66, column: 39, scope: !7)
!68 = !DILocation(line: 66, column: 25, scope: !7)
!69 = !DILocation(line: 66, column: 58, scope: !7)
!70 = !DILocation(line: 66, column: 4, scope: !7)
