; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_58(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 33792, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 528, !dbg !15
  %19 = mul i32 %18, 528, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = icmp slt i32 %.decomposed, 112, !dbg !17
  %21 = mul nsw i32 %18, 112, !dbg !18
  %22 = add nsw i32 %21, %.decomposed, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = and i1 %17, %20, !dbg !21
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !22
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !22
  %29 = sext i32 %.decomposed to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %34 = add nsw i32 %.decomposed, -112, !dbg !25
  %35 = icmp ult i32 %34, 288, !dbg !25
  %36 = mul nsw i32 %18, 288, !dbg !26
  %37 = add nsw i32 %36, %34, !dbg !27
  %38 = sext i32 %37 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %40 = and i1 %17, %35, !dbg !29
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !30
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !30
  %44 = sext i32 %34 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !32
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %49 = add nsw i32 %.decomposed, -400, !dbg !33
  %50 = icmp ult i32 %49, 64, !dbg !33
  %51 = shl nsw i32 %18, 6, !dbg !34
  %52 = add nsw i32 %51, %49, !dbg !35
  %53 = sext i32 %52 to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !36
  %55 = and i1 %17, %50, !dbg !37
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !38
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !38
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !38
  %59 = sext i32 %49 to i64, !dbg !39
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !39
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !40
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !40
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !40
  %64 = icmp sgt i32 %.decomposed, 463, !dbg !41
  %65 = add nsw i32 %.decomposed, -464, !dbg !42
  %66 = add nsw i32 %51, %65, !dbg !43
  %67 = sext i32 %66 to i64, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %67, !dbg !44
  %69 = and i1 %17, %64, !dbg !45
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !46
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !46
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !46
  %73 = sext i32 %65 to i64, !dbg !47
  %74 = getelementptr float, ptr addrspace(1) %7, i64 %73, !dbg !47
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !48
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !48
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !48
  %78 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !46
  %79 = insertelement <8 x i32> %78, i32 %71, i64 1, !dbg !46
  %80 = insertelement <8 x i32> %79, i32 %58, i64 2, !dbg !46
  %81 = insertelement <8 x i32> %80, i32 %57, i64 3, !dbg !46
  %82 = insertelement <8 x i32> %81, i32 %43, i64 4, !dbg !46
  %83 = insertelement <8 x i32> %82, i32 %42, i64 5, !dbg !46
  %84 = insertelement <8 x i32> %83, i32 %28, i64 6, !dbg !46
  %85 = insertelement <8 x i32> %84, i32 %27, i64 7, !dbg !46
  %86 = bitcast <8 x i32> %85 to <8 x float>, !dbg !46
  %87 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !48
  %88 = insertelement <8 x i32> %87, i32 %76, i64 1, !dbg !48
  %89 = insertelement <8 x i32> %88, i32 %63, i64 2, !dbg !48
  %90 = insertelement <8 x i32> %89, i32 %62, i64 3, !dbg !48
  %91 = insertelement <8 x i32> %90, i32 %48, i64 4, !dbg !48
  %92 = insertelement <8 x i32> %91, i32 %47, i64 5, !dbg !48
  %93 = insertelement <8 x i32> %92, i32 %33, i64 6, !dbg !48
  %94 = insertelement <8 x i32> %93, i32 %32, i64 7, !dbg !48
  %95 = bitcast <8 x i32> %94 to <8 x float>, !dbg !48
  %96 = fadd <8 x float> %86, %95, !dbg !49
  %97 = fcmp olt <8 x float> %96, zeroinitializer, !dbg !50
  %98 = extractelement <8 x i1> %97, i64 7, !dbg !54
  %99 = extractelement <8 x float> %96, i64 7, !dbg !54
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !54
  %101 = extractelement <8 x i1> %97, i64 6, !dbg !54
  %102 = extractelement <8 x float> %96, i64 6, !dbg !54
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !54
  %104 = extractelement <8 x i1> %97, i64 5, !dbg !56
  %105 = extractelement <8 x float> %96, i64 5, !dbg !56
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !56
  %107 = extractelement <8 x i1> %97, i64 4, !dbg !56
  %108 = extractelement <8 x float> %96, i64 4, !dbg !56
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !56
  %110 = extractelement <8 x i1> %97, i64 3, !dbg !58
  %111 = extractelement <8 x float> %96, i64 3, !dbg !58
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !58
  %113 = extractelement <8 x i1> %97, i64 2, !dbg !58
  %114 = extractelement <8 x float> %96, i64 2, !dbg !58
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !58
  %116 = extractelement <8 x i1> %97, i64 1, !dbg !60
  %117 = extractelement <8 x float> %96, i64 1, !dbg !60
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !60
  %119 = extractelement <8 x i1> %97, i64 0, !dbg !60
  %120 = extractelement <8 x float> %96, i64 0, !dbg !60
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !60
  %122 = select i1 %64, float %118, float 0.000000e+00, !dbg !61
  %123 = select i1 %64, float %121, float 0.000000e+00, !dbg !61
  %124 = select i1 %50, float %112, float %122, !dbg !62
  %125 = select i1 %50, float %115, float %123, !dbg !62
  %126 = select i1 %35, float %106, float %124, !dbg !62
  %127 = select i1 %35, float %109, float %125, !dbg !62
  %128 = select i1 %20, float %100, float %126, !dbg !62
  %129 = select i1 %20, float %103, float %127, !dbg !62
  %130 = sext i32 %16 to i64, !dbg !63
  %131 = getelementptr float, ptr addrspace(1) %8, i64 %130, !dbg !63
  %132 = bitcast float %128 to i32, !dbg !64
  %133 = bitcast float %129 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %133, ptr addrspace(1) %131, i1 %17) #1, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvtyg3dnbiuoqijsodxshjuo7zsjsa3otgucc3uyxcwnnv7jivkv.py", directory: "inductor_cache/vt")
!4 = !{ptr @triton_poi_fused_cat_58, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_58, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_58", linkageName: "triton_poi_fused_cat_58", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 42, column: 20, scope: !7)
!26 = !DILocation(line: 43, column: 35, scope: !7)
!27 = !DILocation(line: 43, column: 41, scope: !7)
!28 = !DILocation(line: 43, column: 31, scope: !7)
!29 = !DILocation(line: 43, column: 64, scope: !7)
!30 = !DILocation(line: 43, column: 56, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 45, scope: !7)
!33 = !DILocation(line: 53, column: 20, scope: !7)
!34 = !DILocation(line: 54, column: 34, scope: !7)
!35 = !DILocation(line: 54, column: 40, scope: !7)
!36 = !DILocation(line: 54, column: 31, scope: !7)
!37 = !DILocation(line: 54, column: 63, scope: !7)
!38 = !DILocation(line: 54, column: 55, scope: !7)
!39 = !DILocation(line: 55, column: 31, scope: !7)
!40 = !DILocation(line: 55, column: 45, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 64, column: 49, scope: !7)
!43 = !DILocation(line: 64, column: 40, scope: !7)
!44 = !DILocation(line: 64, column: 31, scope: !7)
!45 = !DILocation(line: 64, column: 63, scope: !7)
!46 = !DILocation(line: 64, column: 55, scope: !7)
!47 = !DILocation(line: 65, column: 31, scope: !7)
!48 = !DILocation(line: 65, column: 45, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 68, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !55)
!55 = !DILocation(line: 36, column: 40, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !57)
!57 = !DILocation(line: 47, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !59)
!59 = !DILocation(line: 58, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 70, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 74, column: 25, scope: !7)
!64 = !DILocation(line: 74, column: 37, scope: !7)
!65 = !DILocation(line: 74, column: 4, scope: !7)
