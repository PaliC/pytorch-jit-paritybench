; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %18 = shl i32 %17, 9, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 510, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %.frozen = freeze i32 %22, !dbg !14
  %23 = sdiv i32 %.frozen, 128, !dbg !14
  %24 = srem i32 %23, 128, !dbg !15
  %25 = mul i32 %23, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %25, !dbg !16
  %26 = sdiv i32 %22, 16384, !dbg !17
  %27 = srem i32 %26, 512, !dbg !18
  %28 = sext i32 %24 to i64, !dbg !19
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %32 = sext i32 %.decomposed to i64, !dbg !21
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !21
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !22
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !22
  %37 = sext i32 %27 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !26
  %44 = getelementptr i64, ptr addrspace(1) %7, i64 %28, !dbg !27
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !28
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !28
  %47 = getelementptr i64, ptr addrspace(1) %8, i64 %32, !dbg !29
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !30
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !30
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !32
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %55 = sext i32 %22 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !33
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !34
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !34
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %10, i64 %37, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %11, i64 %55, !dbg !37
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !38
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !38
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %12, i64 %37, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !40
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %13, i64 %28, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !42
  %74 = bitcast i32 %73 to float, !dbg !42
  %75 = lshr i64 %30, 57, !dbg !43
  %76 = and i64 %75, 64, !dbg !43
  %77 = add i64 %76, %30, !dbg !43
  %78 = lshr i64 %35, 57, !dbg !44
  %79 = and i64 %78, 64, !dbg !44
  %80 = add i64 %79, %35, !dbg !44
  %81 = lshr i64 %36, 57, !dbg !44
  %82 = and i64 %81, 64, !dbg !44
  %83 = add i64 %82, %36, !dbg !44
  %84 = shl i64 %77, 6, !dbg !45
  %85 = shl nsw i32 %26, 12, !dbg !46
  %86 = sext i32 %85 to i64, !dbg !47
  %87 = add i64 %84, %86, !dbg !48
  %88 = add i64 %87, %80, !dbg !47
  %89 = add i64 %87, %83, !dbg !47
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !49
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !49
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !50
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !50
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !51
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !51
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !52
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !52
  %98 = lshr i64 %45, 57, !dbg !53
  %99 = and i64 %98, 64, !dbg !53
  %100 = add i64 %99, %45, !dbg !53
  %101 = shl i64 %100, 6, !dbg !54
  %102 = add i64 %101, %86, !dbg !55
  %103 = add i64 %102, %80, !dbg !56
  %104 = add i64 %102, %83, !dbg !56
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !57
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !57
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !58
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !58
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %103, !dbg !59
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %104, !dbg !59
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !60
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !60
  %113 = lshr i64 %49, 57, !dbg !61
  %114 = and i64 %113, 64, !dbg !61
  %115 = add i64 %114, %49, !dbg !61
  %116 = lshr i64 %50, 57, !dbg !61
  %117 = and i64 %116, 64, !dbg !61
  %118 = add i64 %117, %50, !dbg !61
  %119 = add i64 %102, %115, !dbg !62
  %120 = add i64 %102, %118, !dbg !62
  %121 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !63
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %120, !dbg !63
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !64
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !64
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %119, !dbg !65
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !65
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !66
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !66
  %129 = add i64 %87, %115, !dbg !67
  %130 = add i64 %87, %118, !dbg !67
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !68
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !68
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #1, !dbg !69
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !69
  %135 = getelementptr float, ptr addrspace(1) %5, i64 %129, !dbg !70
  %136 = getelementptr float, ptr addrspace(1) %5, i64 %130, !dbg !70
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !71
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !71
  %139 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !50
  %140 = insertelement <2 x i32> %139, i32 %107, i64 1, !dbg !50
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !50
  %142 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !72
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !72
  %144 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %145 = fadd <2 x float> %144, %141, !dbg !72
  %146 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !52
  %147 = insertelement <2 x i32> %146, i32 %111, i64 1, !dbg !52
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !52
  %149 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !73
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !73
  %151 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %152 = fadd <2 x float> %151, %148, !dbg !73
  %153 = fadd <2 x float> %145, %152, !dbg !74
  %154 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !69
  %155 = insertelement <2 x i32> %154, i32 %123, i64 1, !dbg !69
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !69
  %157 = fadd <2 x float> %144, %156, !dbg !75
  %158 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !71
  %159 = insertelement <2 x i32> %158, i32 %127, i64 1, !dbg !71
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !71
  %161 = fadd <2 x float> %151, %160, !dbg !76
  %162 = fadd <2 x float> %157, %161, !dbg !77
  %163 = fsub <2 x float> %162, %153, !dbg !78
  %164 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !79
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !79
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %167 = fmul <2 x float> %163, %166, !dbg !79
  %168 = fadd <2 x float> %153, %167, !dbg !80
  %169 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !50
  %170 = insertelement <2 x i32> %169, i32 %108, i64 1, !dbg !50
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !50
  %172 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !72
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !72
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %175 = fadd <2 x float> %174, %171, !dbg !72
  %176 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !52
  %177 = insertelement <2 x i32> %176, i32 %112, i64 1, !dbg !52
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !52
  %179 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !73
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !73
  %181 = shufflevector <2 x float> %180, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %182 = fadd <2 x float> %181, %178, !dbg !73
  %183 = fadd <2 x float> %175, %182, !dbg !74
  %184 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !69
  %185 = insertelement <2 x i32> %184, i32 %124, i64 1, !dbg !69
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !69
  %187 = fadd <2 x float> %174, %186, !dbg !75
  %188 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !71
  %189 = insertelement <2 x i32> %188, i32 %128, i64 1, !dbg !71
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !71
  %191 = fadd <2 x float> %181, %190, !dbg !76
  %192 = fadd <2 x float> %187, %191, !dbg !77
  %193 = fsub <2 x float> %192, %183, !dbg !78
  %194 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !79
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !79
  %196 = shufflevector <2 x float> %195, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %197 = fmul <2 x float> %193, %196, !dbg !79
  %198 = fadd <2 x float> %183, %197, !dbg !80
  %199 = extractelement <2 x float> %168, i64 0, !dbg !81
  %200 = extractelement <2 x float> %168, i64 1, !dbg !82
  %201 = fsub float %199, %200, !dbg !81
  %202 = extractelement <2 x float> %198, i64 0, !dbg !81
  %203 = extractelement <2 x float> %198, i64 1, !dbg !82
  %204 = fsub float %202, %203, !dbg !81
  %205 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !34
  %206 = insertelement <2 x i32> %205, i32 %65, i64 1, !dbg !34
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !34
  %208 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !36
  %209 = insertelement <2 x i32> %208, i32 %68, i64 1, !dbg !36
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !36
  %211 = fadd <2 x float> %207, %210, !dbg !83
  %212 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !34
  %213 = insertelement <2 x i32> %212, i32 %66, i64 1, !dbg !34
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !34
  %215 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !36
  %216 = insertelement <2 x i32> %215, i32 %69, i64 1, !dbg !36
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !36
  %218 = fadd <2 x float> %214, %217, !dbg !83
  %shift = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !84
  %219 = fadd <2 x float> %211, %shift, !dbg !84
  %220 = extractelement <2 x float> %219, i64 0, !dbg !84
  %shift1 = shufflevector <2 x float> %218, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !84
  %221 = fadd <2 x float> %218, %shift1, !dbg !84
  %222 = extractelement <2 x float> %221, i64 0, !dbg !84
  %223 = fmul float %201, %72, !dbg !85
  %224 = fmul float %204, %74, !dbg !85
  %225 = fadd float %200, %223, !dbg !82
  %226 = fadd float %203, %224, !dbg !82
  %227 = fadd float %220, %225, !dbg !86
  %228 = fadd float %222, %226, !dbg !86
  %229 = fcmp olt float %227, 0.000000e+00, !dbg !87
  %230 = fcmp olt float %228, 0.000000e+00, !dbg !87
  %231 = select i1 %229, float 0.000000e+00, float %227, !dbg !91
  %232 = select i1 %230, float 0.000000e+00, float %228, !dbg !91
  %233 = bitcast float %227 to i32, !dbg !92
  %234 = bitcast float %228 to i32, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %233, i32 %234, ptr addrspace(1) %56, i1 true) #1, !dbg !92
  %235 = getelementptr float, ptr addrspace(1) %14, i64 %55, !dbg !93
  %236 = bitcast float %231 to i32, !dbg !94
  %237 = bitcast float %232 to i32, !dbg !94
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %236, i32 %237, ptr addrspace(1) %235, i1 true) #1, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcvoqrtyqvqkgdv3bbjf6lhynoqt32375ss62lxvcjodow4qt3g.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 44, column: 32, scope: !7)
!44 = !DILocation(line: 47, column: 32, scope: !7)
!45 = !DILocation(line: 48, column: 40, scope: !7)
!46 = !DILocation(line: 48, column: 52, scope: !7)
!47 = !DILocation(line: 48, column: 47, scope: !7)
!48 = !DILocation(line: 48, column: 37, scope: !7)
!49 = !DILocation(line: 48, column: 30, scope: !7)
!50 = !DILocation(line: 48, column: 57, scope: !7)
!51 = !DILocation(line: 50, column: 31, scope: !7)
!52 = !DILocation(line: 50, column: 58, scope: !7)
!53 = !DILocation(line: 55, column: 35, scope: !7)
!54 = !DILocation(line: 56, column: 41, scope: !7)
!55 = !DILocation(line: 56, column: 38, scope: !7)
!56 = !DILocation(line: 56, column: 49, scope: !7)
!57 = !DILocation(line: 56, column: 31, scope: !7)
!58 = !DILocation(line: 56, column: 59, scope: !7)
!59 = !DILocation(line: 58, column: 31, scope: !7)
!60 = !DILocation(line: 58, column: 59, scope: !7)
!61 = !DILocation(line: 63, column: 35, scope: !7)
!62 = !DILocation(line: 64, column: 50, scope: !7)
!63 = !DILocation(line: 64, column: 31, scope: !7)
!64 = !DILocation(line: 64, column: 60, scope: !7)
!65 = !DILocation(line: 66, column: 31, scope: !7)
!66 = !DILocation(line: 66, column: 60, scope: !7)
!67 = !DILocation(line: 72, column: 49, scope: !7)
!68 = !DILocation(line: 72, column: 31, scope: !7)
!69 = !DILocation(line: 72, column: 59, scope: !7)
!70 = !DILocation(line: 74, column: 31, scope: !7)
!71 = !DILocation(line: 74, column: 59, scope: !7)
!72 = !DILocation(line: 49, column: 19, scope: !7)
!73 = !DILocation(line: 51, column: 20, scope: !7)
!74 = !DILocation(line: 52, column: 20, scope: !7)
!75 = !DILocation(line: 73, column: 20, scope: !7)
!76 = !DILocation(line: 75, column: 20, scope: !7)
!77 = !DILocation(line: 76, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 80, column: 20, scope: !7)
!82 = !DILocation(line: 85, column: 20, scope: !7)
!83 = !DILocation(line: 81, column: 20, scope: !7)
!84 = !DILocation(line: 83, column: 20, scope: !7)
!85 = !DILocation(line: 84, column: 20, scope: !7)
!86 = !DILocation(line: 86, column: 20, scope: !7)
!87 = !DILocation(line: 118, column: 15, scope: !88, inlinedAt: !90)
!88 = distinct !DILexicalBlockFile(scope: !7, file: !89, discriminator: 0)
!89 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!90 = !DILocation(line: 88, column: 42, scope: !7)
!91 = !DILocation(line: 121, column: 29, scope: !88, inlinedAt: !90)
!92 = !DILocation(line: 89, column: 40, scope: !7)
!93 = !DILocation(line: 90, column: 25, scope: !7)
!94 = !DILocation(line: 90, column: 37, scope: !7)
!95 = !DILocation(line: 90, column: 4, scope: !7)
