; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_min_sub_sum_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %.lobit, 2, !dbg !12
  %11 = or disjoint i32 %.lobit, 4, !dbg !12
  %12 = or disjoint i32 %.lobit, 6, !dbg !12
  %13 = and i32 %8, 7, !dbg !12
  %14 = or disjoint i32 %7, %.lobit, !dbg !13
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = icmp slt i32 %14, 64, !dbg !14
  %20 = icmp slt i32 %15, 64, !dbg !14
  %21 = icmp slt i32 %16, 64, !dbg !14
  %22 = icmp slt i32 %17, 64, !dbg !14
  %23 = icmp slt i32 %18, 64, !dbg !14
  %24 = and i32 %8, 31, !dbg !15
  %25 = icmp samesign ult i32 %24, 25, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %26 = sdiv i32 %.frozen, 16, !dbg !17
  %27 = mul i32 %26, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %.frozen4 = freeze i32 %15, !dbg !17
  %28 = sdiv i32 %.frozen4, 16, !dbg !17
  %29 = mul i32 %28, 16, !dbg !18
  %.decomposed5 = sub i32 %.frozen4, %29, !dbg !18
  %.frozen6 = freeze i32 %16, !dbg !17
  %30 = sdiv i32 %.frozen6, 16, !dbg !17
  %31 = mul i32 %30, 16, !dbg !18
  %.decomposed7 = sub i32 %.frozen6, %31, !dbg !18
  %.frozen8 = freeze i32 %17, !dbg !17
  %32 = sdiv i32 %.frozen8, 16, !dbg !17
  %33 = mul i32 %32, 16, !dbg !18
  %.decomposed9 = sub i32 %.frozen8, %33, !dbg !18
  %34 = mul nsw i32 %.decomposed, 25, !dbg !19
  %35 = mul nsw i32 %.decomposed5, 25, !dbg !19
  %36 = mul nsw i32 %.decomposed7, 25, !dbg !19
  %37 = mul nsw i32 %.decomposed9, 25, !dbg !19
  %38 = mul i32 %26, 1600, !dbg !20
  %39 = mul i32 %28, 1600, !dbg !20
  %40 = mul i32 %30, 1600, !dbg !20
  %41 = mul i32 %32, 1600, !dbg !20
  %42 = add i32 %38, %34, !dbg !21
  %43 = add i32 %42, %24, !dbg !22
  %44 = add i32 %39, %35, !dbg !21
  %45 = add i32 %44, %24, !dbg !22
  %46 = add i32 %40, %36, !dbg !21
  %47 = add i32 %46, %24, !dbg !22
  %48 = add i32 %41, %37, !dbg !21
  %49 = add i32 %48, %24, !dbg !22
  %50 = sext i32 %43 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %45 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %47 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %49 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = and i1 %25, %19, !dbg !24
  %59 = and i1 %25, %20, !dbg !24
  %60 = and i1 %25, %21, !dbg !24
  %61 = and i1 %25, %22, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %58, i32 0, i1 %58) #4, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %59, i32 0, i1 %59) #4, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %60, i32 0, i1 %60) #4, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %61, i32 0, i1 %61) #4, !dbg !25
  %66 = shl i32 %26, 6, !dbg !26
  %67 = shl i32 %28, 6, !dbg !26
  %68 = shl i32 %30, 6, !dbg !26
  %69 = shl i32 %32, 6, !dbg !26
  %70 = add i32 %66, %.decomposed, !dbg !27
  %71 = add i32 %67, %.decomposed5, !dbg !27
  %72 = add i32 %68, %.decomposed7, !dbg !27
  %73 = add i32 %69, %.decomposed9, !dbg !27
  %74 = sext i32 %70 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !28
  %76 = sext i32 %71 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !28
  %78 = sext i32 %72 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = sext i32 %73 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %19) #4, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %20) #4, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %21) #4, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %22) #4, !dbg !29
  %86 = add nuw nsw i32 %24, 400, !dbg !30
  %87 = add i32 %42, %86, !dbg !31
  %88 = add i32 %44, %86, !dbg !31
  %89 = add i32 %46, %86, !dbg !31
  %90 = add i32 %48, %86, !dbg !31
  %91 = sext i32 %87 to i64, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !32
  %93 = sext i32 %88 to i64, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !32
  %95 = sext i32 %89 to i64, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !32
  %97 = sext i32 %90 to i64, !dbg !32
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %58, i32 0, i1 %58) #4, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %59, i32 0, i1 %59) #4, !dbg !33
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %60, i32 0, i1 %60) #4, !dbg !33
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %61, i32 0, i1 %61) #4, !dbg !33
  %103 = add i32 %70, 16, !dbg !34
  %104 = add i32 %71, 16, !dbg !34
  %105 = add i32 %72, 16, !dbg !34
  %106 = add i32 %73, 16, !dbg !34
  %107 = sext i32 %103 to i64, !dbg !35
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !35
  %109 = sext i32 %104 to i64, !dbg !35
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !35
  %111 = sext i32 %105 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !35
  %113 = sext i32 %106 to i64, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !35
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %19) #4, !dbg !36
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %20) #4, !dbg !36
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %21) #4, !dbg !36
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %22) #4, !dbg !36
  %119 = or disjoint i32 %24, 800, !dbg !37
  %120 = add i32 %42, %119, !dbg !38
  %121 = add i32 %44, %119, !dbg !38
  %122 = add i32 %46, %119, !dbg !38
  %123 = add i32 %48, %119, !dbg !38
  %124 = sext i32 %120 to i64, !dbg !39
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !39
  %126 = sext i32 %121 to i64, !dbg !39
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !39
  %128 = sext i32 %122 to i64, !dbg !39
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !39
  %130 = sext i32 %123 to i64, !dbg !39
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !39
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %58, i32 0, i1 %58) #4, !dbg !40
  %133 = bitcast i32 %132 to float, !dbg !40
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %59, i32 0, i1 %59) #4, !dbg !40
  %135 = bitcast i32 %134 to float, !dbg !40
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %60, i32 0, i1 %60) #4, !dbg !40
  %137 = bitcast i32 %136 to float, !dbg !40
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %61, i32 0, i1 %61) #4, !dbg !40
  %139 = bitcast i32 %138 to float, !dbg !40
  %140 = add i32 %70, 32, !dbg !41
  %141 = add i32 %71, 32, !dbg !41
  %142 = add i32 %72, 32, !dbg !41
  %143 = add i32 %73, 32, !dbg !41
  %144 = sext i32 %140 to i64, !dbg !42
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !42
  %146 = sext i32 %141 to i64, !dbg !42
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !42
  %148 = sext i32 %142 to i64, !dbg !42
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !42
  %150 = sext i32 %143 to i64, !dbg !42
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !42
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %19) #4, !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %20) #4, !dbg !43
  %155 = bitcast i32 %154 to float, !dbg !43
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %21) #4, !dbg !43
  %157 = bitcast i32 %156 to float, !dbg !43
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %22) #4, !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = add nuw nsw i32 %24, 1200, !dbg !44
  %161 = add i32 %42, %160, !dbg !45
  %162 = add i32 %44, %160, !dbg !45
  %163 = add i32 %46, %160, !dbg !45
  %164 = add i32 %48, %160, !dbg !45
  %165 = sext i32 %161 to i64, !dbg !46
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !46
  %167 = sext i32 %162 to i64, !dbg !46
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !46
  %169 = sext i32 %163 to i64, !dbg !46
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !46
  %171 = sext i32 %164 to i64, !dbg !46
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !46
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %58, i32 0, i1 %58) #4, !dbg !47
  %174 = bitcast i32 %173 to float, !dbg !47
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %59, i32 0, i1 %59) #4, !dbg !47
  %176 = bitcast i32 %175 to float, !dbg !47
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %60, i32 0, i1 %60) #4, !dbg !47
  %178 = bitcast i32 %177 to float, !dbg !47
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %61, i32 0, i1 %61) #4, !dbg !47
  %180 = bitcast i32 %179 to float, !dbg !47
  %181 = add i32 %70, 48, !dbg !48
  %182 = add i32 %71, 48, !dbg !48
  %183 = add i32 %72, 48, !dbg !48
  %184 = add i32 %73, 48, !dbg !48
  %185 = sext i32 %181 to i64, !dbg !49
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !49
  %187 = sext i32 %182 to i64, !dbg !49
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !49
  %189 = sext i32 %183 to i64, !dbg !49
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !49
  %191 = sext i32 %184 to i64, !dbg !49
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !49
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %19) #4, !dbg !50
  %194 = bitcast i32 %193 to float, !dbg !50
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %20) #4, !dbg !50
  %196 = bitcast i32 %195 to float, !dbg !50
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %21) #4, !dbg !50
  %198 = bitcast i32 %197 to float, !dbg !50
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %22) #4, !dbg !50
  %200 = bitcast i32 %199 to float, !dbg !50
  %201 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !25
  %202 = insertelement <2 x i32> %201, i32 %99, i64 1, !dbg !25
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !25
  %204 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !29
  %205 = insertelement <2 x i32> %204, i32 %115, i64 1, !dbg !29
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !29
  %207 = fsub <2 x float> %203, %206, !dbg !51
  %208 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %207), !dbg !52
  %209 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !25
  %210 = insertelement <2 x i32> %209, i32 %100, i64 1, !dbg !25
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !25
  %212 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !29
  %213 = insertelement <2 x i32> %212, i32 %116, i64 1, !dbg !29
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !29
  %215 = fsub <2 x float> %211, %214, !dbg !51
  %216 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %215), !dbg !52
  %217 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !25
  %218 = insertelement <2 x i32> %217, i32 %101, i64 1, !dbg !25
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !25
  %220 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !29
  %221 = insertelement <2 x i32> %220, i32 %117, i64 1, !dbg !29
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !29
  %223 = fsub <2 x float> %219, %222, !dbg !51
  %224 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %223), !dbg !52
  %225 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !25
  %226 = insertelement <2 x i32> %225, i32 %102, i64 1, !dbg !25
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !25
  %228 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !29
  %229 = insertelement <2 x i32> %228, i32 %118, i64 1, !dbg !29
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !29
  %231 = fsub <2 x float> %227, %230, !dbg !51
  %232 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %231), !dbg !52
  %shift = shufflevector <2 x float> %208, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %233 = fadd <2 x float> %208, %shift, !dbg !53
  %234 = extractelement <2 x float> %233, i64 0, !dbg !53
  %shift1 = shufflevector <2 x float> %216, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %235 = fadd <2 x float> %216, %shift1, !dbg !53
  %236 = extractelement <2 x float> %235, i64 0, !dbg !53
  %shift2 = shufflevector <2 x float> %224, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %237 = fadd <2 x float> %224, %shift2, !dbg !53
  %238 = extractelement <2 x float> %237, i64 0, !dbg !53
  %shift3 = shufflevector <2 x float> %232, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %239 = fadd <2 x float> %232, %shift3, !dbg !53
  %240 = extractelement <2 x float> %239, i64 0, !dbg !53
  %241 = fsub float %133, %153, !dbg !54
  %242 = fsub float %135, %155, !dbg !54
  %243 = fsub float %137, %157, !dbg !54
  %244 = fsub float %139, %159, !dbg !54
  %245 = tail call float @llvm.fabs.f32(float %241), !dbg !55
  %246 = tail call float @llvm.fabs.f32(float %242), !dbg !55
  %247 = tail call float @llvm.fabs.f32(float %243), !dbg !55
  %248 = tail call float @llvm.fabs.f32(float %244), !dbg !55
  %249 = fadd float %234, %245, !dbg !56
  %250 = fadd float %236, %246, !dbg !56
  %251 = fadd float %238, %247, !dbg !56
  %252 = fadd float %240, %248, !dbg !56
  %253 = fsub float %174, %194, !dbg !57
  %254 = fsub float %176, %196, !dbg !57
  %255 = fsub float %178, %198, !dbg !57
  %256 = fsub float %180, %200, !dbg !57
  %257 = tail call float @llvm.fabs.f32(float %253), !dbg !58
  %258 = tail call float @llvm.fabs.f32(float %254), !dbg !58
  %259 = tail call float @llvm.fabs.f32(float %255), !dbg !58
  %260 = tail call float @llvm.fabs.f32(float %256), !dbg !58
  %261 = fadd float %249, %257, !dbg !59
  %262 = fadd float %250, %258, !dbg !59
  %263 = fadd float %251, %259, !dbg !59
  %264 = fadd float %252, %260, !dbg !59
  %265 = select i1 %58, float %261, float 0x7FF0000000000000, !dbg !60
  %266 = select i1 %59, float %262, float 0x7FF0000000000000, !dbg !60
  %267 = select i1 %60, float %263, float 0x7FF0000000000000, !dbg !60
  %268 = select i1 %61, float %264, float 0x7FF0000000000000, !dbg !60
  %269 = bitcast float %265 to i32, !dbg !61
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 16, i32 31), !dbg !61
  %271 = bitcast i32 %270 to float, !dbg !61
  %272 = fcmp olt float %265, %271, !dbg !65
  %273 = fcmp uno float %265, 0.000000e+00, !dbg !67
  %274 = or i1 %272, %273, !dbg !68
  %275 = select i1 %274, float %265, float %271, !dbg !69
  %276 = bitcast float %275 to i32, !dbg !61
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 8, i32 31), !dbg !61
  %278 = bitcast i32 %277 to float, !dbg !61
  %279 = fcmp olt float %275, %278, !dbg !65
  %280 = fcmp uno float %275, 0.000000e+00, !dbg !67
  %281 = or i1 %279, %280, !dbg !68
  %282 = select i1 %281, float %275, float %278, !dbg !69
  %283 = bitcast float %282 to i32, !dbg !61
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !61
  %285 = bitcast i32 %284 to float, !dbg !61
  %286 = fcmp olt float %282, %285, !dbg !65
  %287 = fcmp uno float %282, 0.000000e+00, !dbg !67
  %288 = or i1 %286, %287, !dbg !68
  %289 = select i1 %288, float %282, float %285, !dbg !69
  %290 = bitcast float %289 to i32, !dbg !61
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !61
  %292 = bitcast i32 %291 to float, !dbg !61
  %293 = fcmp olt float %289, %292, !dbg !65
  %294 = fcmp uno float %289, 0.000000e+00, !dbg !67
  %295 = or i1 %293, %294, !dbg !68
  %296 = select i1 %295, float %289, float %292, !dbg !69
  %297 = bitcast float %296 to i32, !dbg !61
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !61
  %299 = bitcast i32 %298 to float, !dbg !61
  %300 = fcmp olt float %296, %299, !dbg !65
  %301 = fcmp uno float %296, 0.000000e+00, !dbg !67
  %302 = or i1 %300, %301, !dbg !68
  %303 = bitcast float %266 to i32, !dbg !61
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 16, i32 31), !dbg !61
  %305 = bitcast i32 %304 to float, !dbg !61
  %306 = fcmp olt float %266, %305, !dbg !65
  %307 = fcmp uno float %266, 0.000000e+00, !dbg !67
  %308 = or i1 %307, %306, !dbg !68
  %309 = select i1 %308, float %266, float %305, !dbg !69
  %310 = bitcast float %309 to i32, !dbg !61
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 8, i32 31), !dbg !61
  %312 = bitcast i32 %311 to float, !dbg !61
  %313 = fcmp olt float %309, %312, !dbg !65
  %314 = fcmp uno float %309, 0.000000e+00, !dbg !67
  %315 = or i1 %313, %314, !dbg !68
  %316 = select i1 %315, float %309, float %312, !dbg !69
  %317 = bitcast float %316 to i32, !dbg !61
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 4, i32 31), !dbg !61
  %319 = bitcast i32 %318 to float, !dbg !61
  %320 = fcmp olt float %316, %319, !dbg !65
  %321 = fcmp uno float %316, 0.000000e+00, !dbg !67
  %322 = or i1 %320, %321, !dbg !68
  %323 = select i1 %322, float %316, float %319, !dbg !69
  %324 = bitcast float %323 to i32, !dbg !61
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 2, i32 31), !dbg !61
  %326 = bitcast i32 %325 to float, !dbg !61
  %327 = fcmp olt float %323, %326, !dbg !65
  %328 = fcmp uno float %323, 0.000000e+00, !dbg !67
  %329 = or i1 %327, %328, !dbg !68
  %330 = select i1 %329, float %323, float %326, !dbg !69
  %331 = bitcast float %330 to i32, !dbg !61
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 1, i32 31), !dbg !61
  %333 = bitcast i32 %332 to float, !dbg !61
  %334 = fcmp olt float %330, %333, !dbg !65
  %335 = fcmp uno float %330, 0.000000e+00, !dbg !67
  %336 = or i1 %334, %335, !dbg !68
  %337 = bitcast float %267 to i32, !dbg !61
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 16, i32 31), !dbg !61
  %339 = bitcast i32 %338 to float, !dbg !61
  %340 = fcmp olt float %267, %339, !dbg !65
  %341 = fcmp uno float %267, 0.000000e+00, !dbg !67
  %342 = or i1 %341, %340, !dbg !68
  %343 = select i1 %342, float %267, float %339, !dbg !69
  %344 = bitcast float %343 to i32, !dbg !61
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 8, i32 31), !dbg !61
  %346 = bitcast i32 %345 to float, !dbg !61
  %347 = fcmp olt float %343, %346, !dbg !65
  %348 = fcmp uno float %343, 0.000000e+00, !dbg !67
  %349 = or i1 %347, %348, !dbg !68
  %350 = select i1 %349, float %343, float %346, !dbg !69
  %351 = bitcast float %350 to i32, !dbg !61
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 4, i32 31), !dbg !61
  %353 = bitcast i32 %352 to float, !dbg !61
  %354 = fcmp olt float %350, %353, !dbg !65
  %355 = fcmp uno float %350, 0.000000e+00, !dbg !67
  %356 = or i1 %354, %355, !dbg !68
  %357 = select i1 %356, float %350, float %353, !dbg !69
  %358 = bitcast float %357 to i32, !dbg !61
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !61
  %360 = bitcast i32 %359 to float, !dbg !61
  %361 = fcmp olt float %357, %360, !dbg !65
  %362 = fcmp uno float %357, 0.000000e+00, !dbg !67
  %363 = or i1 %361, %362, !dbg !68
  %364 = select i1 %363, float %357, float %360, !dbg !69
  %365 = bitcast float %364 to i32, !dbg !61
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 1, i32 31), !dbg !61
  %367 = bitcast i32 %366 to float, !dbg !61
  %368 = fcmp olt float %364, %367, !dbg !65
  %369 = fcmp uno float %364, 0.000000e+00, !dbg !67
  %370 = or i1 %368, %369, !dbg !68
  %371 = bitcast float %268 to i32, !dbg !61
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 16, i32 31), !dbg !61
  %373 = bitcast i32 %372 to float, !dbg !61
  %374 = fcmp olt float %268, %373, !dbg !65
  %375 = fcmp uno float %268, 0.000000e+00, !dbg !67
  %376 = or i1 %375, %374, !dbg !68
  %377 = select i1 %376, float %268, float %373, !dbg !69
  %378 = bitcast float %377 to i32, !dbg !61
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 8, i32 31), !dbg !61
  %380 = bitcast i32 %379 to float, !dbg !61
  %381 = fcmp olt float %377, %380, !dbg !65
  %382 = fcmp uno float %377, 0.000000e+00, !dbg !67
  %383 = or i1 %381, %382, !dbg !68
  %384 = select i1 %383, float %377, float %380, !dbg !69
  %385 = bitcast float %384 to i32, !dbg !61
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 4, i32 31), !dbg !61
  %387 = bitcast i32 %386 to float, !dbg !61
  %388 = fcmp olt float %384, %387, !dbg !65
  %389 = fcmp uno float %384, 0.000000e+00, !dbg !67
  %390 = or i1 %388, %389, !dbg !68
  %391 = select i1 %390, float %384, float %387, !dbg !69
  %392 = bitcast float %391 to i32, !dbg !61
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !61
  %394 = bitcast i32 %393 to float, !dbg !61
  %395 = fcmp olt float %391, %394, !dbg !65
  %396 = fcmp uno float %391, 0.000000e+00, !dbg !67
  %397 = or i1 %395, %396, !dbg !68
  %398 = select i1 %397, float %391, float %394, !dbg !69
  %399 = bitcast float %398 to i32, !dbg !61
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !61
  %401 = bitcast i32 %400 to float, !dbg !61
  %402 = fcmp olt float %398, %401, !dbg !65
  %403 = fcmp uno float %398, 0.000000e+00, !dbg !67
  %404 = or i1 %402, %403, !dbg !68
  %405 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !70
  %406 = select i1 %302, i32 %297, i32 %298, !dbg !69
  %407 = insertelement <1 x i32> poison, i32 %406, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %407, i1 true) #4, !dbg !70
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !70
  %409 = select i1 %336, i32 %331, i32 %332, !dbg !69
  %410 = insertelement <1 x i32> poison, i32 %409, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %410, i1 true) #4, !dbg !70
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !70
  %412 = select i1 %370, i32 %365, i32 %366, !dbg !69
  %413 = insertelement <1 x i32> poison, i32 %412, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %413, i1 true) #4, !dbg !70
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !70
  %415 = select i1 %404, i32 %399, i32 %400, !dbg !69
  %416 = insertelement <1 x i32> poison, i32 %415, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %416, i1 true) #4, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !70
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !70
  %419 = sext i32 %18 to i64, !dbg !71
  %420 = getelementptr float, ptr addrspace(1) %2, i64 %419, !dbg !71
  %421 = and i32 %8, 56, !dbg !72
  %422 = icmp eq i32 %421, 0, !dbg !72
  %423 = and i1 %422, %23, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %420, i1 %423) #4, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3kpyfkc3u46cfbwlve2ggkj55b36r5tltaxutdhxbinrhfzoj4.py", directory: "inductor_cache/j3")
!4 = !{ptr @triton_per_fused_abs_min_sub_sum_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_min_sub_sum_21, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_min_sub_sum_21", linkageName: "triton_per_fused_abs_min_sub_sum_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 38, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 61, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 38, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 43, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 49, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 59, scope: !7)
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 48, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 49, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 59, scope: !7)
!41 = !DILocation(line: 38, column: 41, scope: !7)
!42 = !DILocation(line: 38, column: 31, scope: !7)
!43 = !DILocation(line: 38, column: 49, scope: !7)
!44 = !DILocation(line: 39, column: 38, scope: !7)
!45 = !DILocation(line: 39, column: 51, scope: !7)
!46 = !DILocation(line: 39, column: 31, scope: !7)
!47 = !DILocation(line: 39, column: 61, scope: !7)
!48 = !DILocation(line: 40, column: 41, scope: !7)
!49 = !DILocation(line: 40, column: 31, scope: !7)
!50 = !DILocation(line: 40, column: 49, scope: !7)
!51 = !DILocation(line: 41, column: 18, scope: !7)
!52 = !DILocation(line: 42, column: 23, scope: !7)
!53 = !DILocation(line: 45, column: 18, scope: !7)
!54 = !DILocation(line: 46, column: 19, scope: !7)
!55 = !DILocation(line: 47, column: 24, scope: !7)
!56 = !DILocation(line: 48, column: 19, scope: !7)
!57 = !DILocation(line: 49, column: 20, scope: !7)
!58 = !DILocation(line: 50, column: 24, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 53, column: 43, scope: !7)
!61 = !DILocation(line: 126, column: 29, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 54, column: 39, scope: !7)
!65 = !DILocation(line: 110, column: 15, scope: !66, inlinedAt: !64)
!66 = distinct !DILexicalBlockFile(scope: !62, file: !63, discriminator: 0)
!67 = !DILocation(line: 112, column: 21, scope: !66, inlinedAt: !64)
!68 = !DILocation(line: 112, column: 16, scope: !66, inlinedAt: !64)
!69 = !DILocation(line: 113, column: 29, scope: !66, inlinedAt: !64)
!70 = !DILocation(line: 54, column: 42, scope: !7)
!71 = !DILocation(line: 55, column: 25, scope: !7)
!72 = !DILocation(line: 55, column: 37, scope: !7)
!73 = !DILocation(line: 55, column: 4, scope: !7)
