; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %17 = sdiv i32 %.frozen, 128, !dbg !14
  %18 = mul i32 %17, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %14, 128, !dbg !15
  %20 = srem i32 %17, 16, !dbg !16
  %21 = sdiv i32 %13, 2048, !dbg !17
  %22 = shl nsw i32 %20, 9, !dbg !18
  %23 = shl i32 %21, 15, !dbg !19
  %24 = add i32 %22, %23, !dbg !20
  %25 = add i32 %24, %.decomposed, !dbg !21
  %26 = add i32 %24, %19, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = or disjoint i32 %24, 128, !dbg !24
  %42 = add nsw i32 %41, %.decomposed, !dbg !25
  %43 = add nsw i32 %41, %19, !dbg !25
  %44 = sext i32 %42 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %43 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %58 = or disjoint i32 %24, 256, !dbg !28
  %59 = add nsw i32 %58, %.decomposed, !dbg !29
  %60 = add nsw i32 %58, %19, !dbg !29
  %61 = sext i32 %59 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = sext i32 %60 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !31
  %75 = or disjoint i32 %24, 384, !dbg !32
  %76 = add nsw i32 %75, %.decomposed, !dbg !33
  %77 = add nsw i32 %75, %19, !dbg !33
  %78 = sext i32 %76 to i64, !dbg !34
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !34
  %80 = sext i32 %77 to i64, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !34
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !35
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !35
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !35
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !35
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !35
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !35
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !35
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !35
  %92 = add i32 %24, 8192, !dbg !36
  %93 = add i32 %92, %.decomposed, !dbg !37
  %94 = add i32 %92, %19, !dbg !37
  %95 = sext i32 %93 to i64, !dbg !38
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !38
  %97 = sext i32 %94 to i64, !dbg !38
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !38
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !39
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !39
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !39
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !39
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !39
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !39
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !39
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !39
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !39
  %109 = add i32 %24, 8320, !dbg !40
  %110 = add nsw i32 %109, %.decomposed, !dbg !41
  %111 = add nsw i32 %109, %19, !dbg !41
  %112 = sext i32 %110 to i64, !dbg !42
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !42
  %114 = sext i32 %111 to i64, !dbg !42
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !42
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 true) #2, !dbg !43
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !43
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !43
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !43
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !43
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 true) #2, !dbg !43
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !43
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !43
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !43
  %126 = add i32 %24, 8448, !dbg !44
  %127 = add nsw i32 %126, %.decomposed, !dbg !45
  %128 = add nsw i32 %126, %19, !dbg !45
  %129 = sext i32 %127 to i64, !dbg !46
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !46
  %131 = sext i32 %128 to i64, !dbg !46
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !46
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !47
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !47
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !47
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !47
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !47
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 true) #2, !dbg !47
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !47
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !47
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !47
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !47
  %143 = add i32 %24, 8576, !dbg !48
  %144 = add nsw i32 %143, %.decomposed, !dbg !49
  %145 = add nsw i32 %143, %19, !dbg !49
  %146 = sext i32 %144 to i64, !dbg !50
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !50
  %148 = sext i32 %145 to i64, !dbg !50
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !50
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 true) #2, !dbg !51
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !51
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !51
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !51
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !51
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !51
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !51
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !51
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !51
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !51
  %160 = add i32 %24, 16384, !dbg !52
  %161 = add i32 %160, %.decomposed, !dbg !53
  %162 = add i32 %160, %19, !dbg !53
  %163 = sext i32 %161 to i64, !dbg !54
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !54
  %165 = sext i32 %162 to i64, !dbg !54
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !54
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 true) #2, !dbg !55
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !55
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !55
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !55
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !55
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 true) #2, !dbg !55
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !55
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !55
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !55
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !55
  %177 = add i32 %24, 16512, !dbg !56
  %178 = add nsw i32 %177, %.decomposed, !dbg !57
  %179 = add nsw i32 %177, %19, !dbg !57
  %180 = sext i32 %178 to i64, !dbg !58
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !58
  %182 = sext i32 %179 to i64, !dbg !58
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !58
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 true) #2, !dbg !59
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !59
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !59
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !59
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !59
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 true) #2, !dbg !59
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !59
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !59
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !59
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !59
  %194 = add i32 %24, 16640, !dbg !60
  %195 = add nsw i32 %194, %.decomposed, !dbg !61
  %196 = add nsw i32 %194, %19, !dbg !61
  %197 = sext i32 %195 to i64, !dbg !62
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !62
  %199 = sext i32 %196 to i64, !dbg !62
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !62
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 true) #2, !dbg !63
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !63
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !63
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !63
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !63
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %200, i1 true) #2, !dbg !63
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !63
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !63
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !63
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !63
  %211 = add i32 %24, 16768, !dbg !64
  %212 = add nsw i32 %211, %.decomposed, !dbg !65
  %213 = add nsw i32 %211, %19, !dbg !65
  %214 = sext i32 %212 to i64, !dbg !66
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !66
  %216 = sext i32 %213 to i64, !dbg !66
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !66
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 true) #2, !dbg !67
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !67
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !67
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !67
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !67
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 true) #2, !dbg !67
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !67
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !67
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !67
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !67
  %228 = add i32 %24, 24576, !dbg !68
  %229 = add i32 %228, %.decomposed, !dbg !69
  %230 = add i32 %228, %19, !dbg !69
  %231 = sext i32 %229 to i64, !dbg !70
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !70
  %233 = sext i32 %230 to i64, !dbg !70
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !70
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %232, i1 true) #2, !dbg !71
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !71
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !71
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !71
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !71
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %234, i1 true) #2, !dbg !71
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !71
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !71
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !71
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !71
  %245 = add i32 %24, 24704, !dbg !72
  %246 = add nsw i32 %245, %.decomposed, !dbg !73
  %247 = add nsw i32 %245, %19, !dbg !73
  %248 = sext i32 %246 to i64, !dbg !74
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !74
  %250 = sext i32 %247 to i64, !dbg !74
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !74
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 true) #2, !dbg !75
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !75
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !75
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !75
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !75
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 true) #2, !dbg !75
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !75
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !75
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !75
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !75
  %262 = add i32 %24, 24832, !dbg !76
  %263 = add nsw i32 %262, %.decomposed, !dbg !77
  %264 = add nsw i32 %262, %19, !dbg !77
  %265 = sext i32 %263 to i64, !dbg !78
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !78
  %267 = sext i32 %264 to i64, !dbg !78
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !78
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %266, i1 true) #2, !dbg !79
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !79
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !79
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !79
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !79
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %268, i1 true) #2, !dbg !79
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !79
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !79
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !79
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !79
  %279 = add i32 %24, 24960, !dbg !80
  %280 = add nsw i32 %279, %.decomposed, !dbg !81
  %281 = add nsw i32 %279, %19, !dbg !81
  %282 = sext i32 %280 to i64, !dbg !82
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !82
  %284 = sext i32 %281 to i64, !dbg !82
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !82
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %283, i1 true) #2, !dbg !83
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !83
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !83
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !83
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !83
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %285, i1 true) #2, !dbg !83
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !83
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !83
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !83
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !83
  %296 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !23
  %297 = insertelement <4 x i32> %296, i32 %33, i64 1, !dbg !23
  %298 = insertelement <4 x i32> %297, i32 %34, i64 2, !dbg !23
  %299 = insertelement <4 x i32> %298, i32 %35, i64 3, !dbg !23
  %300 = bitcast <4 x i32> %299 to <4 x float>, !dbg !23
  %301 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !27
  %302 = insertelement <4 x i32> %301, i32 %50, i64 1, !dbg !27
  %303 = insertelement <4 x i32> %302, i32 %51, i64 2, !dbg !27
  %304 = insertelement <4 x i32> %303, i32 %52, i64 3, !dbg !27
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !27
  %306 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !31
  %307 = insertelement <4 x i32> %306, i32 %67, i64 1, !dbg !31
  %308 = insertelement <4 x i32> %307, i32 %68, i64 2, !dbg !31
  %309 = insertelement <4 x i32> %308, i32 %69, i64 3, !dbg !31
  %310 = bitcast <4 x i32> %309 to <4 x float>, !dbg !31
  %311 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !35
  %312 = insertelement <4 x i32> %311, i32 %84, i64 1, !dbg !35
  %313 = insertelement <4 x i32> %312, i32 %85, i64 2, !dbg !35
  %314 = insertelement <4 x i32> %313, i32 %86, i64 3, !dbg !35
  %315 = bitcast <4 x i32> %314 to <4 x float>, !dbg !35
  %316 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !39
  %317 = insertelement <4 x i32> %316, i32 %101, i64 1, !dbg !39
  %318 = insertelement <4 x i32> %317, i32 %102, i64 2, !dbg !39
  %319 = insertelement <4 x i32> %318, i32 %103, i64 3, !dbg !39
  %320 = bitcast <4 x i32> %319 to <4 x float>, !dbg !39
  %321 = fcmp ogt <4 x float> %305, %300, !dbg !84
  %322 = fcmp uno <4 x float> %305, zeroinitializer, !dbg !88
  %323 = or <4 x i1> %321, %322, !dbg !89
  %.v = select <4 x i1> %323, <4 x i32> %304, <4 x i32> %299, !dbg !90
  %324 = bitcast <4 x i32> %.v to <4 x float>, !dbg !90
  %325 = fcmp olt <4 x float> %324, %310, !dbg !91
  %326 = fcmp uno <4 x float> %310, zeroinitializer, !dbg !93
  %327 = or <4 x i1> %326, %325, !dbg !94
  %.v15 = select <4 x i1> %327, <4 x i32> %309, <4 x i32> %.v, !dbg !95
  %328 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !95
  %329 = fcmp olt <4 x float> %328, %315, !dbg !96
  %330 = fcmp uno <4 x float> %315, zeroinitializer, !dbg !98
  %331 = or <4 x i1> %330, %329, !dbg !99
  %.v16 = select <4 x i1> %331, <4 x i32> %314, <4 x i32> %.v15, !dbg !100
  %332 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !100
  %333 = fcmp olt <4 x float> %332, %320, !dbg !101
  %334 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !43
  %335 = insertelement <4 x i32> %334, i32 %118, i64 1, !dbg !43
  %336 = insertelement <4 x i32> %335, i32 %119, i64 2, !dbg !43
  %337 = insertelement <4 x i32> %336, i32 %120, i64 3, !dbg !43
  %338 = bitcast <4 x i32> %337 to <4 x float>, !dbg !43
  %339 = fcmp uno <4 x float> %320, zeroinitializer, !dbg !103
  %340 = or <4 x i1> %339, %333, !dbg !104
  %.v17 = select <4 x i1> %340, <4 x i32> %319, <4 x i32> %.v16, !dbg !105
  %341 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !105
  %342 = fcmp olt <4 x float> %341, %338, !dbg !106
  %343 = fcmp uno <4 x float> %338, zeroinitializer, !dbg !108
  %344 = or <4 x i1> %343, %342, !dbg !109
  %.v18 = select <4 x i1> %344, <4 x i32> %337, <4 x i32> %.v17, !dbg !110
  %345 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !110
  %346 = zext <4 x i1> %321 to <4 x i8>, !dbg !111
  %347 = select <4 x i1> %325, <4 x i8> splat (i8 2), <4 x i8> %346, !dbg !112
  %348 = select <4 x i1> %329, <4 x i8> splat (i8 3), <4 x i8> %347, !dbg !113
  %349 = select <4 x i1> %333, <4 x i8> splat (i8 4), <4 x i8> %348, !dbg !114
  %350 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !23
  %351 = insertelement <4 x i32> %350, i32 %38, i64 1, !dbg !23
  %352 = insertelement <4 x i32> %351, i32 %39, i64 2, !dbg !23
  %353 = insertelement <4 x i32> %352, i32 %40, i64 3, !dbg !23
  %354 = bitcast <4 x i32> %353 to <4 x float>, !dbg !23
  %355 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !27
  %356 = insertelement <4 x i32> %355, i32 %55, i64 1, !dbg !27
  %357 = insertelement <4 x i32> %356, i32 %56, i64 2, !dbg !27
  %358 = insertelement <4 x i32> %357, i32 %57, i64 3, !dbg !27
  %359 = bitcast <4 x i32> %358 to <4 x float>, !dbg !27
  %360 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !31
  %361 = insertelement <4 x i32> %360, i32 %72, i64 1, !dbg !31
  %362 = insertelement <4 x i32> %361, i32 %73, i64 2, !dbg !31
  %363 = insertelement <4 x i32> %362, i32 %74, i64 3, !dbg !31
  %364 = bitcast <4 x i32> %363 to <4 x float>, !dbg !31
  %365 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !35
  %366 = insertelement <4 x i32> %365, i32 %89, i64 1, !dbg !35
  %367 = insertelement <4 x i32> %366, i32 %90, i64 2, !dbg !35
  %368 = insertelement <4 x i32> %367, i32 %91, i64 3, !dbg !35
  %369 = bitcast <4 x i32> %368 to <4 x float>, !dbg !35
  %370 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !39
  %371 = insertelement <4 x i32> %370, i32 %106, i64 1, !dbg !39
  %372 = insertelement <4 x i32> %371, i32 %107, i64 2, !dbg !39
  %373 = insertelement <4 x i32> %372, i32 %108, i64 3, !dbg !39
  %374 = bitcast <4 x i32> %373 to <4 x float>, !dbg !39
  %375 = fcmp ogt <4 x float> %359, %354, !dbg !84
  %376 = fcmp uno <4 x float> %359, zeroinitializer, !dbg !88
  %377 = or <4 x i1> %375, %376, !dbg !89
  %.v19 = select <4 x i1> %377, <4 x i32> %358, <4 x i32> %353, !dbg !90
  %378 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !90
  %379 = fcmp olt <4 x float> %378, %364, !dbg !91
  %380 = fcmp uno <4 x float> %364, zeroinitializer, !dbg !93
  %381 = or <4 x i1> %380, %379, !dbg !94
  %.v20 = select <4 x i1> %381, <4 x i32> %363, <4 x i32> %.v19, !dbg !95
  %382 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !95
  %383 = fcmp olt <4 x float> %382, %369, !dbg !96
  %384 = fcmp uno <4 x float> %369, zeroinitializer, !dbg !98
  %385 = or <4 x i1> %384, %383, !dbg !99
  %.v21 = select <4 x i1> %385, <4 x i32> %368, <4 x i32> %.v20, !dbg !100
  %386 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !100
  %387 = fcmp olt <4 x float> %386, %374, !dbg !101
  %388 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !43
  %389 = insertelement <4 x i32> %388, i32 %123, i64 1, !dbg !43
  %390 = insertelement <4 x i32> %389, i32 %124, i64 2, !dbg !43
  %391 = insertelement <4 x i32> %390, i32 %125, i64 3, !dbg !43
  %392 = bitcast <4 x i32> %391 to <4 x float>, !dbg !43
  %393 = fcmp uno <4 x float> %374, zeroinitializer, !dbg !103
  %394 = or <4 x i1> %393, %387, !dbg !104
  %.v22 = select <4 x i1> %394, <4 x i32> %373, <4 x i32> %.v21, !dbg !105
  %395 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !105
  %396 = fcmp olt <4 x float> %395, %392, !dbg !106
  %397 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !108
  %398 = or <4 x i1> %397, %396, !dbg !109
  %.v23 = select <4 x i1> %398, <4 x i32> %391, <4 x i32> %.v22, !dbg !110
  %399 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !110
  %400 = zext <4 x i1> %375 to <4 x i8>, !dbg !111
  %401 = select <4 x i1> %379, <4 x i8> splat (i8 2), <4 x i8> %400, !dbg !112
  %402 = select <4 x i1> %383, <4 x i8> splat (i8 3), <4 x i8> %401, !dbg !113
  %403 = select <4 x i1> %387, <4 x i8> splat (i8 4), <4 x i8> %402, !dbg !114
  %404 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !51
  %405 = insertelement <4 x i32> %404, i32 %152, i64 1, !dbg !51
  %406 = insertelement <4 x i32> %405, i32 %153, i64 2, !dbg !51
  %407 = insertelement <4 x i32> %406, i32 %154, i64 3, !dbg !51
  %408 = bitcast <4 x i32> %407 to <4 x float>, !dbg !51
  %409 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !55
  %410 = insertelement <4 x i32> %409, i32 %169, i64 1, !dbg !55
  %411 = insertelement <4 x i32> %410, i32 %170, i64 2, !dbg !55
  %412 = insertelement <4 x i32> %411, i32 %171, i64 3, !dbg !55
  %413 = bitcast <4 x i32> %412 to <4 x float>, !dbg !55
  %414 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !59
  %415 = insertelement <4 x i32> %414, i32 %186, i64 1, !dbg !59
  %416 = insertelement <4 x i32> %415, i32 %187, i64 2, !dbg !59
  %417 = insertelement <4 x i32> %416, i32 %188, i64 3, !dbg !59
  %418 = bitcast <4 x i32> %417 to <4 x float>, !dbg !59
  %419 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !63
  %420 = insertelement <4 x i32> %419, i32 %203, i64 1, !dbg !63
  %421 = insertelement <4 x i32> %420, i32 %204, i64 2, !dbg !63
  %422 = insertelement <4 x i32> %421, i32 %205, i64 3, !dbg !63
  %423 = bitcast <4 x i32> %422 to <4 x float>, !dbg !63
  %424 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !67
  %425 = insertelement <4 x i32> %424, i32 %220, i64 1, !dbg !67
  %426 = insertelement <4 x i32> %425, i32 %221, i64 2, !dbg !67
  %427 = insertelement <4 x i32> %426, i32 %222, i64 3, !dbg !67
  %428 = bitcast <4 x i32> %427 to <4 x float>, !dbg !67
  %429 = insertelement <4 x i32> poison, i32 %236, i64 0, !dbg !71
  %430 = insertelement <4 x i32> %429, i32 %237, i64 1, !dbg !71
  %431 = insertelement <4 x i32> %430, i32 %238, i64 2, !dbg !71
  %432 = insertelement <4 x i32> %431, i32 %239, i64 3, !dbg !71
  %433 = bitcast <4 x i32> %432 to <4 x float>, !dbg !71
  %434 = insertelement <4 x i32> poison, i32 %253, i64 0, !dbg !75
  %435 = insertelement <4 x i32> %434, i32 %254, i64 1, !dbg !75
  %436 = insertelement <4 x i32> %435, i32 %255, i64 2, !dbg !75
  %437 = insertelement <4 x i32> %436, i32 %256, i64 3, !dbg !75
  %438 = bitcast <4 x i32> %437 to <4 x float>, !dbg !75
  %439 = insertelement <4 x i32> poison, i32 %270, i64 0, !dbg !79
  %440 = insertelement <4 x i32> %439, i32 %271, i64 1, !dbg !79
  %441 = insertelement <4 x i32> %440, i32 %272, i64 2, !dbg !79
  %442 = insertelement <4 x i32> %441, i32 %273, i64 3, !dbg !79
  %443 = bitcast <4 x i32> %442 to <4 x float>, !dbg !79
  %444 = insertelement <4 x i32> poison, i32 %287, i64 0, !dbg !83
  %445 = insertelement <4 x i32> %444, i32 %288, i64 1, !dbg !83
  %446 = insertelement <4 x i32> %445, i32 %289, i64 2, !dbg !83
  %447 = insertelement <4 x i32> %446, i32 %290, i64 3, !dbg !83
  %448 = bitcast <4 x i32> %447 to <4 x float>, !dbg !83
  %449 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !47
  %450 = insertelement <4 x i32> %449, i32 %135, i64 1, !dbg !47
  %451 = insertelement <4 x i32> %450, i32 %136, i64 2, !dbg !47
  %452 = insertelement <4 x i32> %451, i32 %137, i64 3, !dbg !47
  %453 = bitcast <4 x i32> %452 to <4 x float>, !dbg !47
  %454 = fcmp uno <4 x float> %453, zeroinitializer, !dbg !115
  %455 = fcmp olt <4 x float> %345, %453, !dbg !117
  %456 = or <4 x i1> %454, %455, !dbg !118
  %.v24 = select <4 x i1> %456, <4 x i32> %452, <4 x i32> %.v18, !dbg !119
  %457 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !119
  %458 = fcmp olt <4 x float> %457, %408, !dbg !120
  %459 = fcmp uno <4 x float> %408, zeroinitializer, !dbg !122
  %460 = or <4 x i1> %459, %458, !dbg !123
  %.v25 = select <4 x i1> %460, <4 x i32> %407, <4 x i32> %.v24, !dbg !124
  %461 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !124
  %462 = fcmp olt <4 x float> %461, %413, !dbg !125
  %463 = fcmp uno <4 x float> %413, zeroinitializer, !dbg !127
  %464 = or <4 x i1> %463, %462, !dbg !128
  %.v26 = select <4 x i1> %464, <4 x i32> %412, <4 x i32> %.v25, !dbg !129
  %465 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !129
  %466 = fcmp olt <4 x float> %465, %418, !dbg !130
  %467 = fcmp uno <4 x float> %418, zeroinitializer, !dbg !132
  %468 = or <4 x i1> %467, %466, !dbg !133
  %.v27 = select <4 x i1> %468, <4 x i32> %417, <4 x i32> %.v26, !dbg !134
  %469 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !134
  %470 = fcmp olt <4 x float> %469, %423, !dbg !135
  %471 = fcmp uno <4 x float> %423, zeroinitializer, !dbg !137
  %472 = or <4 x i1> %471, %470, !dbg !138
  %.v28 = select <4 x i1> %472, <4 x i32> %422, <4 x i32> %.v27, !dbg !139
  %473 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !139
  %474 = fcmp olt <4 x float> %473, %428, !dbg !140
  %475 = fcmp uno <4 x float> %428, zeroinitializer, !dbg !142
  %476 = or <4 x i1> %475, %474, !dbg !143
  %.v29 = select <4 x i1> %476, <4 x i32> %427, <4 x i32> %.v28, !dbg !144
  %477 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !144
  %478 = fcmp olt <4 x float> %477, %433, !dbg !145
  %479 = fcmp uno <4 x float> %433, zeroinitializer, !dbg !147
  %480 = or <4 x i1> %479, %478, !dbg !148
  %.v30 = select <4 x i1> %480, <4 x i32> %432, <4 x i32> %.v29, !dbg !149
  %481 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !149
  %482 = fcmp olt <4 x float> %481, %438, !dbg !150
  %483 = fcmp uno <4 x float> %438, zeroinitializer, !dbg !152
  %484 = or <4 x i1> %483, %482, !dbg !153
  %.v31 = select <4 x i1> %484, <4 x i32> %437, <4 x i32> %.v30, !dbg !154
  %485 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !154
  %486 = fcmp olt <4 x float> %485, %443, !dbg !155
  %487 = fcmp uno <4 x float> %443, zeroinitializer, !dbg !157
  %488 = or <4 x i1> %487, %486, !dbg !158
  %.v32 = select <4 x i1> %488, <4 x i32> %442, <4 x i32> %.v31, !dbg !159
  %489 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !159
  %490 = fcmp olt <4 x float> %489, %448, !dbg !160
  %491 = extractelement <4 x i1> %490, i64 0, !dbg !162
  %492 = extractelement <4 x i1> %490, i64 1, !dbg !162
  %493 = extractelement <4 x i1> %490, i64 2, !dbg !162
  %494 = extractelement <4 x i1> %490, i64 3, !dbg !162
  %495 = select <4 x i1> %342, <4 x i8> splat (i8 5), <4 x i8> %349, !dbg !163
  %496 = select <4 x i1> %455, <4 x i8> splat (i8 6), <4 x i8> %495, !dbg !164
  %497 = select <4 x i1> %458, <4 x i8> splat (i8 7), <4 x i8> %496, !dbg !165
  %498 = select <4 x i1> %462, <4 x i8> splat (i8 8), <4 x i8> %497, !dbg !166
  %499 = select <4 x i1> %466, <4 x i8> splat (i8 9), <4 x i8> %498, !dbg !167
  %500 = select <4 x i1> %470, <4 x i8> splat (i8 10), <4 x i8> %499, !dbg !168
  %501 = select <4 x i1> %474, <4 x i8> splat (i8 11), <4 x i8> %500, !dbg !169
  %502 = select <4 x i1> %478, <4 x i8> splat (i8 12), <4 x i8> %501, !dbg !170
  %503 = select <4 x i1> %482, <4 x i8> splat (i8 13), <4 x i8> %502, !dbg !171
  %504 = select <4 x i1> %486, <4 x i8> splat (i8 14), <4 x i8> %503, !dbg !172
  %505 = select <4 x i1> %490, <4 x i8> splat (i8 15), <4 x i8> %504, !dbg !173
  %506 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !51
  %507 = insertelement <4 x i32> %506, i32 %157, i64 1, !dbg !51
  %508 = insertelement <4 x i32> %507, i32 %158, i64 2, !dbg !51
  %509 = insertelement <4 x i32> %508, i32 %159, i64 3, !dbg !51
  %510 = bitcast <4 x i32> %509 to <4 x float>, !dbg !51
  %511 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !55
  %512 = insertelement <4 x i32> %511, i32 %174, i64 1, !dbg !55
  %513 = insertelement <4 x i32> %512, i32 %175, i64 2, !dbg !55
  %514 = insertelement <4 x i32> %513, i32 %176, i64 3, !dbg !55
  %515 = bitcast <4 x i32> %514 to <4 x float>, !dbg !55
  %516 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !59
  %517 = insertelement <4 x i32> %516, i32 %191, i64 1, !dbg !59
  %518 = insertelement <4 x i32> %517, i32 %192, i64 2, !dbg !59
  %519 = insertelement <4 x i32> %518, i32 %193, i64 3, !dbg !59
  %520 = bitcast <4 x i32> %519 to <4 x float>, !dbg !59
  %521 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !63
  %522 = insertelement <4 x i32> %521, i32 %208, i64 1, !dbg !63
  %523 = insertelement <4 x i32> %522, i32 %209, i64 2, !dbg !63
  %524 = insertelement <4 x i32> %523, i32 %210, i64 3, !dbg !63
  %525 = bitcast <4 x i32> %524 to <4 x float>, !dbg !63
  %526 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !67
  %527 = insertelement <4 x i32> %526, i32 %225, i64 1, !dbg !67
  %528 = insertelement <4 x i32> %527, i32 %226, i64 2, !dbg !67
  %529 = insertelement <4 x i32> %528, i32 %227, i64 3, !dbg !67
  %530 = bitcast <4 x i32> %529 to <4 x float>, !dbg !67
  %531 = insertelement <4 x i32> poison, i32 %241, i64 0, !dbg !71
  %532 = insertelement <4 x i32> %531, i32 %242, i64 1, !dbg !71
  %533 = insertelement <4 x i32> %532, i32 %243, i64 2, !dbg !71
  %534 = insertelement <4 x i32> %533, i32 %244, i64 3, !dbg !71
  %535 = bitcast <4 x i32> %534 to <4 x float>, !dbg !71
  %536 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !75
  %537 = insertelement <4 x i32> %536, i32 %259, i64 1, !dbg !75
  %538 = insertelement <4 x i32> %537, i32 %260, i64 2, !dbg !75
  %539 = insertelement <4 x i32> %538, i32 %261, i64 3, !dbg !75
  %540 = bitcast <4 x i32> %539 to <4 x float>, !dbg !75
  %541 = insertelement <4 x i32> poison, i32 %275, i64 0, !dbg !79
  %542 = insertelement <4 x i32> %541, i32 %276, i64 1, !dbg !79
  %543 = insertelement <4 x i32> %542, i32 %277, i64 2, !dbg !79
  %544 = insertelement <4 x i32> %543, i32 %278, i64 3, !dbg !79
  %545 = bitcast <4 x i32> %544 to <4 x float>, !dbg !79
  %546 = insertelement <4 x i32> poison, i32 %292, i64 0, !dbg !83
  %547 = insertelement <4 x i32> %546, i32 %293, i64 1, !dbg !83
  %548 = insertelement <4 x i32> %547, i32 %294, i64 2, !dbg !83
  %549 = insertelement <4 x i32> %548, i32 %295, i64 3, !dbg !83
  %550 = bitcast <4 x i32> %549 to <4 x float>, !dbg !83
  %551 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !47
  %552 = insertelement <4 x i32> %551, i32 %140, i64 1, !dbg !47
  %553 = insertelement <4 x i32> %552, i32 %141, i64 2, !dbg !47
  %554 = insertelement <4 x i32> %553, i32 %142, i64 3, !dbg !47
  %555 = bitcast <4 x i32> %554 to <4 x float>, !dbg !47
  %556 = fcmp uno <4 x float> %555, zeroinitializer, !dbg !115
  %557 = fcmp olt <4 x float> %399, %555, !dbg !117
  %558 = or <4 x i1> %556, %557, !dbg !118
  %.v33 = select <4 x i1> %558, <4 x i32> %554, <4 x i32> %.v23, !dbg !119
  %559 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !119
  %560 = fcmp olt <4 x float> %559, %510, !dbg !120
  %561 = fcmp uno <4 x float> %510, zeroinitializer, !dbg !122
  %562 = or <4 x i1> %561, %560, !dbg !123
  %.v34 = select <4 x i1> %562, <4 x i32> %509, <4 x i32> %.v33, !dbg !124
  %563 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !124
  %564 = fcmp olt <4 x float> %563, %515, !dbg !125
  %565 = fcmp uno <4 x float> %515, zeroinitializer, !dbg !127
  %566 = or <4 x i1> %565, %564, !dbg !128
  %.v35 = select <4 x i1> %566, <4 x i32> %514, <4 x i32> %.v34, !dbg !129
  %567 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !129
  %568 = fcmp olt <4 x float> %567, %520, !dbg !130
  %569 = fcmp uno <4 x float> %520, zeroinitializer, !dbg !132
  %570 = or <4 x i1> %569, %568, !dbg !133
  %.v36 = select <4 x i1> %570, <4 x i32> %519, <4 x i32> %.v35, !dbg !134
  %571 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !134
  %572 = fcmp olt <4 x float> %571, %525, !dbg !135
  %573 = fcmp uno <4 x float> %525, zeroinitializer, !dbg !137
  %574 = or <4 x i1> %573, %572, !dbg !138
  %.v37 = select <4 x i1> %574, <4 x i32> %524, <4 x i32> %.v36, !dbg !139
  %575 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !139
  %576 = fcmp olt <4 x float> %575, %530, !dbg !140
  %577 = fcmp uno <4 x float> %530, zeroinitializer, !dbg !142
  %578 = or <4 x i1> %577, %576, !dbg !143
  %.v38 = select <4 x i1> %578, <4 x i32> %529, <4 x i32> %.v37, !dbg !144
  %579 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !144
  %580 = fcmp olt <4 x float> %579, %535, !dbg !145
  %581 = fcmp uno <4 x float> %535, zeroinitializer, !dbg !147
  %582 = or <4 x i1> %581, %580, !dbg !148
  %.v39 = select <4 x i1> %582, <4 x i32> %534, <4 x i32> %.v38, !dbg !149
  %583 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !149
  %584 = fcmp olt <4 x float> %583, %540, !dbg !150
  %585 = fcmp uno <4 x float> %540, zeroinitializer, !dbg !152
  %586 = or <4 x i1> %585, %584, !dbg !153
  %.v40 = select <4 x i1> %586, <4 x i32> %539, <4 x i32> %.v39, !dbg !154
  %587 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !154
  %588 = fcmp olt <4 x float> %587, %545, !dbg !155
  %589 = fcmp uno <4 x float> %545, zeroinitializer, !dbg !157
  %590 = or <4 x i1> %589, %588, !dbg !158
  %.v41 = select <4 x i1> %590, <4 x i32> %544, <4 x i32> %.v40, !dbg !159
  %591 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !159
  %592 = fcmp olt <4 x float> %591, %550, !dbg !160
  %593 = shufflevector <4 x float> %550, <4 x float> %448, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !174
  %594 = fcmp uno <8 x float> %593, zeroinitializer, !dbg !174
  %595 = extractelement <8 x i1> %594, i64 7, !dbg !162
  %596 = or i1 %595, %491, !dbg !162
  %597 = extractelement <8 x i1> %594, i64 6, !dbg !162
  %598 = or i1 %597, %492, !dbg !162
  %599 = extractelement <8 x i1> %594, i64 5, !dbg !162
  %600 = or i1 %599, %493, !dbg !162
  %601 = extractelement <8 x i1> %594, i64 4, !dbg !162
  %602 = or i1 %601, %494, !dbg !162
  %603 = extractelement <4 x i1> %592, i64 0, !dbg !162
  %604 = extractelement <8 x i1> %594, i64 3, !dbg !162
  %605 = or i1 %604, %603, !dbg !162
  %606 = extractelement <4 x i1> %592, i64 1, !dbg !162
  %607 = extractelement <8 x i1> %594, i64 2, !dbg !162
  %608 = or i1 %607, %606, !dbg !162
  %609 = extractelement <4 x i1> %592, i64 2, !dbg !162
  %610 = extractelement <8 x i1> %594, i64 1, !dbg !162
  %611 = or i1 %610, %609, !dbg !162
  %612 = extractelement <4 x i1> %592, i64 3, !dbg !162
  %613 = extractelement <8 x i1> %594, i64 0, !dbg !162
  %614 = or i1 %613, %612, !dbg !162
  %615 = select <4 x i1> %396, <4 x i8> splat (i8 5), <4 x i8> %403, !dbg !163
  %616 = select <4 x i1> %557, <4 x i8> splat (i8 6), <4 x i8> %615, !dbg !164
  %617 = select <4 x i1> %560, <4 x i8> splat (i8 7), <4 x i8> %616, !dbg !165
  %618 = select <4 x i1> %564, <4 x i8> splat (i8 8), <4 x i8> %617, !dbg !166
  %619 = select <4 x i1> %568, <4 x i8> splat (i8 9), <4 x i8> %618, !dbg !167
  %620 = select <4 x i1> %572, <4 x i8> splat (i8 10), <4 x i8> %619, !dbg !168
  %621 = select <4 x i1> %576, <4 x i8> splat (i8 11), <4 x i8> %620, !dbg !169
  %622 = select <4 x i1> %580, <4 x i8> splat (i8 12), <4 x i8> %621, !dbg !170
  %623 = select <4 x i1> %584, <4 x i8> splat (i8 13), <4 x i8> %622, !dbg !171
  %624 = select <4 x i1> %588, <4 x i8> splat (i8 14), <4 x i8> %623, !dbg !172
  %625 = select <4 x i1> %592, <4 x i8> splat (i8 15), <4 x i8> %624, !dbg !173
  %626 = sext i32 %15 to i64, !dbg !175
  %627 = getelementptr float, ptr addrspace(1) %1, i64 %626, !dbg !175
  %628 = sext i32 %16 to i64, !dbg !175
  %629 = getelementptr float, ptr addrspace(1) %1, i64 %628, !dbg !175
  %630 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !176
  %631 = extractelement <4 x i32> %.v32, i64 0, !dbg !176
  %632 = select i1 %596, i32 %287, i32 %631, !dbg !177
  %633 = extractelement <4 x i32> %.v32, i64 1, !dbg !176
  %634 = select i1 %598, i32 %288, i32 %633, !dbg !177
  %635 = extractelement <4 x i32> %.v32, i64 2, !dbg !176
  %636 = select i1 %600, i32 %289, i32 %635, !dbg !177
  %637 = extractelement <4 x i32> %.v32, i64 3, !dbg !176
  %638 = select i1 %602, i32 %290, i32 %637, !dbg !177
  %639 = extractelement <4 x i32> %.v41, i64 0, !dbg !176
  %640 = select i1 %605, i32 %292, i32 %639, !dbg !177
  %641 = extractelement <4 x i32> %.v41, i64 1, !dbg !176
  %642 = select i1 %608, i32 %293, i32 %641, !dbg !177
  %643 = extractelement <4 x i32> %.v41, i64 2, !dbg !176
  %644 = select i1 %611, i32 %294, i32 %643, !dbg !177
  %645 = extractelement <4 x i32> %.v41, i64 3, !dbg !176
  %646 = select i1 %614, i32 %295, i32 %645, !dbg !177
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %630, i32 %632, i32 %634, i32 %636, i32 %638, i1 true) #2, !dbg !176
  %647 = getelementptr inbounds i8, ptr addrspace(3) %630, i32 16, !dbg !176
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %647, i32 %640, i32 %642, i32 %644, i32 %646, i1 true) #2, !dbg !176
  tail call void @llvm.nvvm.barrier0(), !dbg !176
  %648 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !176
  %649 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !176
  %650 = load <4 x i32>, ptr addrspace(3) %649, align 16, !dbg !176
  %.extract = load i32, ptr addrspace(3) %648, align 16, !dbg !176
  %651 = getelementptr inbounds i8, ptr addrspace(3) %648, i32 4, !dbg !176
  %.extract8 = load i32, ptr addrspace(3) %651, align 4, !dbg !176
  %652 = getelementptr inbounds i8, ptr addrspace(3) %648, i32 8, !dbg !176
  %.extract9 = load i32, ptr addrspace(3) %652, align 8, !dbg !176
  %653 = getelementptr inbounds i8, ptr addrspace(3) %648, i32 12, !dbg !176
  %.extract10 = load i32, ptr addrspace(3) %653, align 4, !dbg !176
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %627, i1 true) #2, !dbg !176
  %.extract11 = extractelement <4 x i32> %650, i64 0, !dbg !176
  %.extract12 = extractelement <4 x i32> %650, i64 1, !dbg !176
  %.extract13 = extractelement <4 x i32> %650, i64 2, !dbg !176
  %.extract14 = extractelement <4 x i32> %650, i64 3, !dbg !176
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %629, i1 true) #2, !dbg !176
  %654 = sext i32 %13 to i64, !dbg !178
  %655 = getelementptr i8, ptr addrspace(1) %2, i64 %654, !dbg !178
  %656 = bitcast <4 x i8> %505 to i32, !dbg !179
  %657 = bitcast <4 x i8> %625 to i32, !dbg !179
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %656, i32 %657, ptr addrspace(1) %655, i1 true) #2, !dbg !179
  ret void, !dbg !180
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr6sruo5dx4zhvu3ga6n7sod43g3vd4xsm5l5vkeitsqfceqklqx.py", directory: "inductor_cache/r6")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 61, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 41, scope: !7)
!33 = !DILocation(line: 31, column: 50, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 32, column: 51, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 62, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 33, column: 51, scope: !7)
!42 = !DILocation(line: 33, column: 30, scope: !7)
!43 = !DILocation(line: 33, column: 62, scope: !7)
!44 = !DILocation(line: 34, column: 43, scope: !7)
!45 = !DILocation(line: 34, column: 52, scope: !7)
!46 = !DILocation(line: 34, column: 31, scope: !7)
!47 = !DILocation(line: 34, column: 63, scope: !7)
!48 = !DILocation(line: 35, column: 43, scope: !7)
!49 = !DILocation(line: 35, column: 52, scope: !7)
!50 = !DILocation(line: 35, column: 31, scope: !7)
!51 = !DILocation(line: 35, column: 63, scope: !7)
!52 = !DILocation(line: 36, column: 44, scope: !7)
!53 = !DILocation(line: 36, column: 53, scope: !7)
!54 = !DILocation(line: 36, column: 31, scope: !7)
!55 = !DILocation(line: 36, column: 64, scope: !7)
!56 = !DILocation(line: 37, column: 44, scope: !7)
!57 = !DILocation(line: 37, column: 53, scope: !7)
!58 = !DILocation(line: 37, column: 31, scope: !7)
!59 = !DILocation(line: 37, column: 64, scope: !7)
!60 = !DILocation(line: 38, column: 44, scope: !7)
!61 = !DILocation(line: 38, column: 53, scope: !7)
!62 = !DILocation(line: 38, column: 31, scope: !7)
!63 = !DILocation(line: 38, column: 64, scope: !7)
!64 = !DILocation(line: 39, column: 44, scope: !7)
!65 = !DILocation(line: 39, column: 53, scope: !7)
!66 = !DILocation(line: 39, column: 31, scope: !7)
!67 = !DILocation(line: 39, column: 64, scope: !7)
!68 = !DILocation(line: 40, column: 44, scope: !7)
!69 = !DILocation(line: 40, column: 53, scope: !7)
!70 = !DILocation(line: 40, column: 31, scope: !7)
!71 = !DILocation(line: 40, column: 64, scope: !7)
!72 = !DILocation(line: 41, column: 44, scope: !7)
!73 = !DILocation(line: 41, column: 53, scope: !7)
!74 = !DILocation(line: 41, column: 31, scope: !7)
!75 = !DILocation(line: 41, column: 64, scope: !7)
!76 = !DILocation(line: 42, column: 44, scope: !7)
!77 = !DILocation(line: 42, column: 53, scope: !7)
!78 = !DILocation(line: 42, column: 31, scope: !7)
!79 = !DILocation(line: 42, column: 64, scope: !7)
!80 = !DILocation(line: 43, column: 44, scope: !7)
!81 = !DILocation(line: 43, column: 53, scope: !7)
!82 = !DILocation(line: 43, column: 31, scope: !7)
!83 = !DILocation(line: 43, column: 64, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !87)
!85 = distinct !DILexicalBlockFile(scope: !7, file: !86, discriminator: 0)
!86 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!87 = !DILocation(line: 44, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !92)
!92 = !DILocation(line: 45, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !97)
!97 = !DILocation(line: 46, column: 40, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !102)
!102 = !DILocation(line: 47, column: 40, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !107)
!107 = !DILocation(line: 48, column: 41, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !107)
!111 = !DILocation(line: 62, column: 35, scope: !7)
!112 = !DILocation(line: 65, column: 35, scope: !7)
!113 = !DILocation(line: 68, column: 35, scope: !7)
!114 = !DILocation(line: 71, column: 35, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !116)
!116 = !DILocation(line: 49, column: 42, scope: !7)
!117 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !116)
!120 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !121)
!121 = !DILocation(line: 50, column: 42, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !121)
!123 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !121)
!124 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !121)
!125 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !126)
!126 = !DILocation(line: 51, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !126)
!130 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !131)
!131 = !DILocation(line: 52, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !136)
!136 = !DILocation(line: 53, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !136)
!140 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !141)
!141 = !DILocation(line: 54, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !141)
!143 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !141)
!144 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !141)
!145 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !146)
!146 = !DILocation(line: 55, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !146)
!150 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !151)
!151 = !DILocation(line: 56, column: 42, scope: !7)
!152 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !151)
!153 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !151)
!154 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !151)
!155 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !156)
!156 = !DILocation(line: 57, column: 42, scope: !7)
!157 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !156)
!158 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !156)
!159 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !156)
!160 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !161)
!161 = !DILocation(line: 58, column: 42, scope: !7)
!162 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !161)
!163 = !DILocation(line: 74, column: 35, scope: !7)
!164 = !DILocation(line: 77, column: 35, scope: !7)
!165 = !DILocation(line: 80, column: 35, scope: !7)
!166 = !DILocation(line: 83, column: 35, scope: !7)
!167 = !DILocation(line: 86, column: 35, scope: !7)
!168 = !DILocation(line: 89, column: 35, scope: !7)
!169 = !DILocation(line: 92, column: 35, scope: !7)
!170 = !DILocation(line: 95, column: 35, scope: !7)
!171 = !DILocation(line: 98, column: 35, scope: !7)
!172 = !DILocation(line: 101, column: 35, scope: !7)
!173 = !DILocation(line: 104, column: 35, scope: !7)
!174 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !161)
!175 = !DILocation(line: 105, column: 25, scope: !7)
!176 = !DILocation(line: 105, column: 37, scope: !7)
!177 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !161)
!178 = !DILocation(line: 106, column: 25, scope: !7)
!179 = !DILocation(line: 106, column: 37, scope: !7)
!180 = !DILocation(line: 106, column: 4, scope: !7)
