; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_clone_mean_view_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = and i32 %8, 31, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = icmp slt i32 %15, 512, !dbg !14
  %20 = icmp slt i32 %16, 512, !dbg !14
  %21 = icmp slt i32 %17, 512, !dbg !14
  %22 = icmp slt i32 %18, 512, !dbg !14
  %23 = and i32 %12, 60, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %24 = sdiv i32 %.frozen, 128, !dbg !16
  %25 = mul i32 %24, 128, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = shl i32 %15, 6, !dbg !18
  %27 = shl i32 %16, 6, !dbg !18
  %28 = or disjoint i32 %26, %23, !dbg !19
  %29 = or disjoint i32 %27, %23, !dbg !19
  %30 = sext i32 %28 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %39 = bitcast i32 %35 to float, !dbg !21
  %40 = bitcast i32 %36 to float, !dbg !21
  %41 = bitcast i32 %37 to float, !dbg !21
  %42 = bitcast i32 %38 to float, !dbg !21
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !21
  %48 = bitcast i32 %44 to float, !dbg !21
  %49 = bitcast i32 %45 to float, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = fadd float %39, %40, !dbg !22
  %53 = fadd float %52, %41, !dbg !22
  %54 = fadd float %53, %42, !dbg !22
  %55 = select i1 %19, float %54, float 0.000000e+00, !dbg !22
  %56 = fadd float %48, %49, !dbg !22
  %57 = fadd float %56, %50, !dbg !22
  %58 = fadd float %57, %51, !dbg !22
  %59 = select i1 %20, float %58, float 0.000000e+00, !dbg !22
  %60 = bitcast float %55 to i32, !dbg !27
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = fadd float %55, %62, !dbg !22
  %64 = bitcast float %63 to i32, !dbg !27
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !27
  %66 = bitcast i32 %65 to float, !dbg !27
  %67 = fadd float %63, %66, !dbg !22
  %68 = bitcast float %67 to i32, !dbg !27
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !27
  %70 = bitcast i32 %69 to float, !dbg !27
  %71 = fadd float %67, %70, !dbg !22
  %72 = bitcast float %71 to i32, !dbg !27
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !27
  %74 = bitcast i32 %73 to float, !dbg !27
  %75 = fadd float %71, %74, !dbg !22
  %76 = bitcast float %59 to i32, !dbg !27
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !27
  %78 = bitcast i32 %77 to float, !dbg !27
  %79 = fadd float %59, %78, !dbg !22
  %80 = bitcast float %79 to i32, !dbg !27
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = fadd float %79, %82, !dbg !22
  %84 = bitcast float %83 to i32, !dbg !27
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !27
  %86 = bitcast i32 %85 to float, !dbg !27
  %87 = fadd float %83, %86, !dbg !22
  %88 = bitcast float %87 to i32, !dbg !27
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !27
  %90 = bitcast i32 %89 to float, !dbg !27
  %91 = fadd float %87, %90, !dbg !22
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !28
  %93 = bitcast float %75 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #3, !dbg !28
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %95 = bitcast float %91 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !28
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 6.400000e+01) #3, !dbg !28
  %99 = shl i32 %8, 4, !dbg !29
  %100 = and i32 %99, 3968, !dbg !29
  %101 = shl i32 %24, 13, !dbg !30
  %102 = add i32 %101, %.decomposed, !dbg !31
  %103 = add i32 %102, %100, !dbg !32
  %104 = add i32 %102, 4096, !dbg !31
  %105 = add nuw i32 %104, %100, !dbg !32
  %106 = sext i32 %103 to i64, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !33
  %108 = sext i32 %105 to i64, !dbg !33
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %110 = shl i32 %8, 7, !dbg !34
  %111 = and i32 %110, 1920, !dbg !34
  %112 = or disjoint i32 %111, %10, !dbg !34
  %113 = and i32 %12, 1020, !dbg !34
  %114 = lshr exact i32 %111, 3, !dbg !34
  %115 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %114, !dbg !34
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %112, !dbg !34
  %117 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #3, !dbg !34
  %118 = or disjoint i32 %112, 32, !dbg !34
  %119 = lshr i32 %118, 5, !dbg !34
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !34
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !34
  %122 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #3, !dbg !34
  %123 = or disjoint i32 %112, 64, !dbg !34
  %124 = lshr i32 %123, 5, !dbg !34
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !34
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !34
  %127 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #3, !dbg !34
  %128 = or disjoint i32 %112, 96, !dbg !34
  %129 = lshr i32 %128, 5, !dbg !34
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !34
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !34
  %132 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #3, !dbg !34
  %133 = or disjoint i32 %112, 16, !dbg !34
  %134 = getelementptr float, ptr addrspace(3) %115, i32 %133, !dbg !34
  %135 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #3, !dbg !34
  %136 = or disjoint i32 %112, 48, !dbg !34
  %137 = lshr i32 %136, 5, !dbg !34
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !34
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !34
  %140 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #3, !dbg !34
  %141 = or disjoint i32 %112, 80, !dbg !34
  %142 = lshr i32 %141, 5, !dbg !34
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !34
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !34
  %145 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #3, !dbg !34
  %146 = or disjoint i32 %112, 112, !dbg !34
  %147 = lshr i32 %146, 5, !dbg !34
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !34
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !34
  %150 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %151 = lshr i32 %113, 5, !dbg !34
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !34
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %113, !dbg !34
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !34
  %155 = or disjoint i32 %113, 1, !dbg !34
  %156 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %155, !dbg !34
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !34
  %158 = or disjoint i32 %113, 2, !dbg !34
  %159 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %158, !dbg !34
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !34
  %161 = or disjoint i32 %113, 3, !dbg !34
  %162 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %161, !dbg !34
  %163 = load i32, ptr addrspace(3) %162, align 4, !dbg !34
  %164 = or disjoint i32 %113, 1024, !dbg !34
  %165 = lshr i32 %164, 5, !dbg !34
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %165, !dbg !34
  %167 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %164, !dbg !34
  %168 = load i32, ptr addrspace(3) %167, align 4, !dbg !34
  %169 = or disjoint i32 %113, 1025, !dbg !34
  %170 = lshr i32 %169, 5, !dbg !34
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !34
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %169, !dbg !34
  %173 = load i32, ptr addrspace(3) %172, align 4, !dbg !34
  %174 = or disjoint i32 %113, 1026, !dbg !34
  %175 = lshr i32 %174, 5, !dbg !34
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !34
  %177 = getelementptr inbounds float, ptr addrspace(3) %176, i32 %174, !dbg !34
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !34
  %179 = or disjoint i32 %113, 1027, !dbg !34
  %180 = lshr i32 %179, 5, !dbg !34
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %180, !dbg !34
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %179, !dbg !34
  %183 = load i32, ptr addrspace(3) %182, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %157, i32 %160, i32 %163, ptr addrspace(1) %107, i1 %21) #3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %168, i32 %173, i32 %178, i32 %183, ptr addrspace(1) %109, i1 %21) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %184 = sext i32 %18 to i64, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !36
  %186 = and i32 %8, 224, !dbg !37
  %187 = icmp eq i32 %186, 0, !dbg !37
  %188 = bitcast float %98 to i32, !dbg !37
  %189 = and i1 %187, %22, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %185, i1 %189) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cerznj6yrsvfgv5jrh6kaww6ufm5dlap5ncgdd2fy2kac6edyxu7.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_per_fused_clone_mean_view_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_clone_mean_view_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_clone_mean_view_33", linkageName: "triton_per_fused_clone_mean_view_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 34, scope: !7)
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 39, scope: !7)
!33 = !DILocation(line: 39, column: 25, scope: !7)
!34 = !DILocation(line: 39, column: 55, scope: !7)
!35 = !DILocation(line: 40, column: 4, scope: !7)
!36 = !DILocation(line: 41, column: 28, scope: !7)
!37 = !DILocation(line: 41, column: 39, scope: !7)
!38 = !DILocation(line: 41, column: 4, scope: !7)
