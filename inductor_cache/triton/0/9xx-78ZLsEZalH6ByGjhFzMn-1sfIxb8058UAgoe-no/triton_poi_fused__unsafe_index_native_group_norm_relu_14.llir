; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_native_group_norm_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 64, !dbg !14
  %16 = srem i32 %15, 64, !dbg !15
  %17 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sdiv i32 %14, 4096, !dbg !17
  %19 = srem i32 %18, 64, !dbg !18
  %20 = sext i32 %16 to i64, !dbg !19
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !20
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !20
  %24 = sext i32 %.decomposed to i64, !dbg !21
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !22
  %27 = extractvalue { i64, i64 } %26, 0, !dbg !22
  %28 = extractvalue { i64, i64 } %26, 1, !dbg !22
  %29 = sdiv i32 %14, 16384, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !27
  %38 = bitcast i32 %37 to float, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = sext i32 %19 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !31
  %49 = bitcast i32 %48 to float, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !31
  %51 = bitcast i32 %50 to float, !dbg !31
  %52 = lshr i64 %22, 58, !dbg !32
  %53 = and i64 %52, 32, !dbg !32
  %54 = add i64 %53, %22, !dbg !32
  %55 = lshr i64 %27, 58, !dbg !33
  %56 = and i64 %55, 32, !dbg !33
  %57 = lshr i64 %28, 58, !dbg !33
  %58 = and i64 %57, 32, !dbg !33
  %59 = shl i64 %54, 5, !dbg !34
  %60 = shl nsw i32 %18, 10, !dbg !35
  %61 = sext i32 %60 to i64, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %56, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %59, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %61, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %58, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %59, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %61, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = fsub float %71, %33, !dbg !39
  %75 = fsub float %73, %35, !dbg !39
  %76 = fmul float %74, %38, !dbg !40
  %77 = fmul float %75, %40, !dbg !40
  %78 = fmul float %76, %44, !dbg !41
  %79 = fmul float %77, %46, !dbg !41
  %80 = fadd float %78, %49, !dbg !42
  %81 = fadd float %79, %51, !dbg !42
  %82 = fcmp olt float %80, 0.000000e+00, !dbg !43
  %83 = fcmp olt float %81, 0.000000e+00, !dbg !43
  %84 = select i1 %82, float 0.000000e+00, float %80, !dbg !47
  %85 = select i1 %83, float 0.000000e+00, float %81, !dbg !47
  %86 = sext i32 %14 to i64, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %86, !dbg !48
  %88 = bitcast float %84 to i32, !dbg !49
  %89 = bitcast float %85 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %87, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7settmejruugw7z4di24epzjqvk7ryojd7lrdfumpgzje7623co.py", directory: "inductor_cache/7s")
!4 = !{ptr @triton_poi_fused__unsafe_index_native_group_norm_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_native_group_norm_relu_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_native_group_norm_relu_14", linkageName: "triton_poi_fused__unsafe_index_native_group_norm_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 37, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 41, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 41, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 52, scope: !7)
!36 = !DILocation(line: 42, column: 47, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 57, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
