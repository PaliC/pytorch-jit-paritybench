; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = mul i32 %6, 2304, !dbg !13
  %13 = add i32 %11, %12, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !16
  %24 = bitcast i32 %23 to float, !dbg !16
  %25 = select i1 %7, float %24, float 0.000000e+00, !dbg !17
  %26 = select i1 %7, float %22, float 0.000000e+00, !dbg !17
  %27 = select i1 %7, float %20, float 0.000000e+00, !dbg !17
  %28 = select i1 %7, float %18, float 0.000000e+00, !dbg !17
  %29 = select i1 %7, float 1.000000e+00, float 0.000000e+00, !dbg !18
  %30 = or disjoint i32 %11, 2048, !dbg !19
  %31 = icmp samesign ult i32 %30, 2304, !dbg !20
  %32 = add i32 %30, %12, !dbg !14
  %33 = sext i32 %32 to i64, !dbg !15
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !15
  %35 = and i1 %7, %31, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #5, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !16
  %38 = bitcast i32 %37 to float, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !16
  %40 = bitcast i32 %39 to float, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !16
  %42 = bitcast i32 %41 to float, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !16
  %44 = bitcast i32 %43 to float, !dbg !16
  %45 = fsub float %44, %25, !dbg !22
  %46 = fsub float %42, %26, !dbg !22
  %47 = fsub float %40, %27, !dbg !22
  %48 = fsub float %38, %28, !dbg !22
  %49 = fadd float %29, 1.000000e+00, !dbg !26
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %49) #5, !dbg !27
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float %49) #5, !dbg !27
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %49) #5, !dbg !27
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float %49) #5, !dbg !27
  %54 = fadd float %25, %50, !dbg !28
  %55 = fsub float %44, %54, !dbg !29
  %56 = fmul float %45, %55, !dbg !30
  %57 = fadd float %56, 0.000000e+00, !dbg !31
  %58 = fadd float %26, %51, !dbg !28
  %59 = fsub float %42, %58, !dbg !29
  %60 = fmul float %46, %59, !dbg !30
  %61 = fadd float %60, 0.000000e+00, !dbg !31
  %62 = fadd float %27, %52, !dbg !28
  %63 = fsub float %40, %62, !dbg !29
  %64 = fmul float %47, %63, !dbg !30
  %65 = fadd float %64, 0.000000e+00, !dbg !31
  %66 = fadd float %28, %53, !dbg !28
  %67 = fsub float %38, %66, !dbg !29
  %68 = fmul float %48, %67, !dbg !30
  %69 = fadd float %68, 0.000000e+00, !dbg !31
  %70 = select i1 %35, float %54, float %25, !dbg !17
  %71 = select i1 %35, float %58, float %26, !dbg !17
  %72 = select i1 %35, float %62, float %27, !dbg !17
  %73 = select i1 %35, float %66, float %28, !dbg !17
  %74 = select i1 %35, float %65, float 0.000000e+00, !dbg !32
  %75 = select i1 %35, float %69, float 0.000000e+00, !dbg !32
  %76 = select i1 %35, float %49, float %29, !dbg !18
  %77 = select i1 %35, float %49, float %29, !dbg !18
  %78 = select i1 %35, float %49, float %29, !dbg !18
  %79 = select i1 %35, float %49, float %29, !dbg !18
  %80 = lshr i32 %8, 5, !dbg !12
  %81 = fsub float %71, %70, !dbg !33
  %82 = fadd float %76, %77, !dbg !36
  %83 = fcmp oeq float %82, 0.000000e+00, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %82) #5, !dbg !38
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !39
  %86 = fmul float %81, %85, !dbg !40
  %87 = fadd float %70, %86, !dbg !41
  %88 = fadd float %57, %61, !dbg !42
  %89 = select i1 %35, float %88, float 0.000000e+00, !dbg !42
  %90 = fmul float %81, %81, !dbg !43
  %91 = fmul float %90, %76, !dbg !44
  %92 = fmul float %91, %85, !dbg !45
  %93 = fadd float %89, %92, !dbg !46
  %94 = fsub float %72, %87, !dbg !33
  %95 = fadd float %78, %82, !dbg !36
  %96 = fcmp oeq float %95, 0.000000e+00, !dbg !37
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %95) #5, !dbg !38
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !39
  %99 = fmul float %98, %94, !dbg !40
  %100 = fadd float %87, %99, !dbg !41
  %101 = fadd float %74, %93, !dbg !42
  %102 = fmul float %94, %94, !dbg !43
  %103 = fmul float %82, %102, !dbg !44
  %104 = fmul float %98, %103, !dbg !45
  %105 = fadd float %101, %104, !dbg !46
  %106 = fsub float %73, %100, !dbg !33
  %107 = fadd float %79, %95, !dbg !36
  %108 = fcmp oeq float %107, 0.000000e+00, !dbg !37
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %107) #5, !dbg !38
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !39
  %111 = fmul float %110, %106, !dbg !40
  %112 = fadd float %100, %111, !dbg !41
  %113 = fadd float %75, %105, !dbg !42
  %114 = fmul float %106, %106, !dbg !43
  %115 = fmul float %95, %114, !dbg !44
  %116 = fmul float %110, %115, !dbg !45
  %117 = fadd float %113, %116, !dbg !46
  %118 = bitcast float %112 to i32, !dbg !47
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !47
  %120 = bitcast i32 %119 to float, !dbg !47
  %121 = bitcast float %117 to i32, !dbg !47
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 16, i32 31), !dbg !47
  %123 = bitcast i32 %122 to float, !dbg !47
  %124 = bitcast float %107 to i32, !dbg !47
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !47
  %126 = bitcast i32 %125 to float, !dbg !47
  %127 = fsub float %120, %112, !dbg !33
  %128 = fadd float %107, %126, !dbg !36
  %129 = fcmp oeq float %128, 0.000000e+00, !dbg !37
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %128) #5, !dbg !38
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !39
  %132 = fmul float %131, %127, !dbg !40
  %133 = fadd float %112, %132, !dbg !41
  %134 = fadd float %117, %123, !dbg !42
  %135 = fmul float %127, %127, !dbg !43
  %136 = fmul float %107, %135, !dbg !44
  %137 = fmul float %131, %136, !dbg !45
  %138 = fadd float %134, %137, !dbg !46
  %139 = bitcast float %133 to i32, !dbg !47
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !47
  %141 = bitcast i32 %140 to float, !dbg !47
  %142 = bitcast float %138 to i32, !dbg !47
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !47
  %144 = bitcast i32 %143 to float, !dbg !47
  %145 = bitcast float %128 to i32, !dbg !47
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !47
  %147 = bitcast i32 %146 to float, !dbg !47
  %148 = fsub float %141, %133, !dbg !33
  %149 = fadd float %128, %147, !dbg !36
  %150 = fcmp oeq float %149, 0.000000e+00, !dbg !37
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %149) #5, !dbg !38
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !39
  %153 = fmul float %148, %152, !dbg !40
  %154 = fadd float %133, %153, !dbg !41
  %155 = fadd float %138, %144, !dbg !42
  %156 = fmul float %148, %148, !dbg !43
  %157 = fmul float %128, %156, !dbg !44
  %158 = fmul float %152, %157, !dbg !45
  %159 = fadd float %155, %158, !dbg !46
  %160 = bitcast float %154 to i32, !dbg !47
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !47
  %162 = bitcast i32 %161 to float, !dbg !47
  %163 = bitcast float %159 to i32, !dbg !47
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !47
  %165 = bitcast i32 %164 to float, !dbg !47
  %166 = bitcast float %149 to i32, !dbg !47
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !47
  %168 = bitcast i32 %167 to float, !dbg !47
  %169 = fsub float %162, %154, !dbg !33
  %170 = fadd float %149, %168, !dbg !36
  %171 = fcmp oeq float %170, 0.000000e+00, !dbg !37
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %170) #5, !dbg !38
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !39
  %174 = fmul float %169, %173, !dbg !40
  %175 = fadd float %154, %174, !dbg !41
  %176 = fadd float %159, %165, !dbg !42
  %177 = fmul float %169, %169, !dbg !43
  %178 = fmul float %149, %177, !dbg !44
  %179 = fmul float %173, %178, !dbg !45
  %180 = fadd float %176, %179, !dbg !46
  %181 = bitcast float %175 to i32, !dbg !47
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !47
  %183 = bitcast i32 %182 to float, !dbg !47
  %184 = bitcast float %180 to i32, !dbg !47
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !47
  %186 = bitcast i32 %185 to float, !dbg !47
  %187 = bitcast float %170 to i32, !dbg !47
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !47
  %189 = bitcast i32 %188 to float, !dbg !47
  %190 = fsub float %183, %175, !dbg !33
  %191 = fadd float %170, %189, !dbg !36
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !37
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %191) #5, !dbg !38
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !39
  %195 = fmul float %190, %194, !dbg !40
  %196 = fadd float %175, %195, !dbg !41
  %197 = fadd float %180, %186, !dbg !42
  %198 = fmul float %190, %190, !dbg !43
  %199 = fmul float %170, %198, !dbg !44
  %200 = fmul float %194, %199, !dbg !45
  %201 = fadd float %197, %200, !dbg !46
  %202 = bitcast float %196 to i32, !dbg !47
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !47
  %204 = bitcast i32 %203 to float, !dbg !47
  %205 = bitcast float %201 to i32, !dbg !47
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !47
  %207 = bitcast i32 %206 to float, !dbg !47
  %208 = bitcast float %191 to i32, !dbg !47
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 1, i32 31), !dbg !47
  %210 = bitcast i32 %209 to float, !dbg !47
  %211 = fsub float %204, %196, !dbg !33
  %212 = fadd float %191, %210, !dbg !36
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !37
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %212) #5, !dbg !38
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !39
  %216 = fmul float %211, %215, !dbg !40
  %217 = fadd float %196, %216, !dbg !41
  %218 = fadd float %201, %207, !dbg !42
  %219 = fmul float %211, %211, !dbg !43
  %220 = fmul float %191, %219, !dbg !44
  %221 = fmul float %215, %220, !dbg !45
  %222 = fadd float %218, %221, !dbg !46
  %223 = icmp eq i32 %9, 0, !dbg !47
  %224 = and i32 %80, 15, !dbg !47
  %225 = zext nneg i32 %224 to i64, !dbg !47
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !47
  %227 = bitcast float %217 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 %223) #5, !dbg !47
  %228 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %225, !dbg !47
  %229 = bitcast float %222 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 %223) #5, !dbg !47
  %230 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %225, !dbg !47
  %231 = bitcast float %212 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 %223) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %232 = icmp slt i32 %8, 16, !dbg !47
  %233 = sext i32 %8 to i64, !dbg !47
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i64 %233, !dbg !47
  %235 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %232) #5, !dbg !47
  %236 = bitcast i32 %235 to float, !dbg !47
  %237 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %233, !dbg !47
  %238 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %237, i1 %232) #5, !dbg !47
  %239 = bitcast i32 %238 to float, !dbg !47
  %240 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %233, !dbg !47
  %241 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %240, i1 %232) #5, !dbg !47
  %242 = bitcast i32 %241 to float, !dbg !47
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !47
  %244 = bitcast i32 %243 to float, !dbg !47
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !47
  %246 = bitcast i32 %245 to float, !dbg !47
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !47
  %248 = bitcast i32 %247 to float, !dbg !47
  %249 = fsub float %244, %236, !dbg !33
  %250 = fadd float %242, %248, !dbg !36
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !37
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %250) #5, !dbg !38
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !39
  %254 = fmul float %249, %253, !dbg !40
  %255 = fadd float %254, %236, !dbg !41
  %256 = fadd float %239, %246, !dbg !42
  %257 = fmul float %249, %249, !dbg !43
  %258 = fmul float %257, %242, !dbg !44
  %259 = fmul float %258, %253, !dbg !45
  %260 = fadd float %256, %259, !dbg !46
  %261 = bitcast float %255 to i32, !dbg !47
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !47
  %263 = bitcast i32 %262 to float, !dbg !47
  %264 = bitcast float %260 to i32, !dbg !47
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !47
  %266 = bitcast i32 %265 to float, !dbg !47
  %267 = bitcast float %250 to i32, !dbg !47
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !47
  %269 = bitcast i32 %268 to float, !dbg !47
  %270 = fsub float %263, %255, !dbg !33
  %271 = fadd float %250, %269, !dbg !36
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !37
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %271) #5, !dbg !38
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !39
  %275 = fmul float %270, %274, !dbg !40
  %276 = fadd float %255, %275, !dbg !41
  %277 = fadd float %260, %266, !dbg !42
  %278 = fmul float %270, %270, !dbg !43
  %279 = fmul float %250, %278, !dbg !44
  %280 = fmul float %274, %279, !dbg !45
  %281 = fadd float %277, %280, !dbg !46
  %282 = bitcast float %276 to i32, !dbg !47
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !47
  %284 = bitcast i32 %283 to float, !dbg !47
  %285 = bitcast float %281 to i32, !dbg !47
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !47
  %287 = bitcast i32 %286 to float, !dbg !47
  %288 = bitcast float %271 to i32, !dbg !47
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !47
  %290 = bitcast i32 %289 to float, !dbg !47
  %291 = fsub float %284, %276, !dbg !33
  %292 = fadd float %271, %290, !dbg !36
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !37
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %292) #5, !dbg !38
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !39
  %296 = fmul float %291, %295, !dbg !40
  %297 = fadd float %276, %296, !dbg !41
  %298 = fadd float %281, %287, !dbg !42
  %299 = fmul float %291, %291, !dbg !43
  %300 = fmul float %271, %299, !dbg !44
  %301 = fmul float %295, %300, !dbg !45
  %302 = fadd float %298, %301, !dbg !46
  %303 = bitcast float %297 to i32, !dbg !47
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !47
  %305 = bitcast i32 %304 to float, !dbg !47
  %306 = bitcast float %302 to i32, !dbg !47
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !47
  %308 = bitcast i32 %307 to float, !dbg !47
  %309 = bitcast float %292 to i32, !dbg !47
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !47
  %311 = bitcast i32 %310 to float, !dbg !47
  %312 = fsub float %305, %297, !dbg !33
  %313 = fadd float %292, %311, !dbg !36
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !37
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #5, !dbg !38
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !39
  %317 = fmul float %312, %316, !dbg !40
  %318 = fadd float %297, %317, !dbg !41
  %319 = fadd float %302, %308, !dbg !42
  %320 = fmul float %312, %312, !dbg !43
  %321 = fmul float %292, %320, !dbg !44
  %322 = fmul float %316, %321, !dbg !45
  %323 = fadd float %319, %322, !dbg !46
  %324 = and i32 %8, 15, !dbg !47
  %325 = icmp eq i32 %324, 0, !dbg !47
  %326 = and i1 %232, %325, !dbg !47
  %327 = bitcast float %318 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %327, i1 %326) #5, !dbg !47
  %328 = bitcast float %323 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %328, i1 %326) #5, !dbg !47
  %329 = bitcast float %313 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %329, i1 %326) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %330 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %331 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !47
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float 2.304000e+03) #5, !dbg !48
  %333 = fadd float %332, 0x3DDB7CDFE0000000, !dbg !49
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %334, 0, !dbg !50
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i = icmp eq i32 %335, 0, !dbg !50
  br i1 %.not.i, label %341, label %336, !dbg !50

336:                                              ; preds = %5
  br i1 %.not1.i, label %339, label %337, !dbg !50

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

341:                                              ; preds = %5
  br i1 %.not1.i, label %344, label %342, !dbg !50

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %337, %339, %342, %344
  %.0.i = phi float [ %338, %337 ], [ %340, %339 ], [ %343, %342 ], [ %345, %344 ], !dbg !50
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i24 = icmp eq i32 %352, 0, !dbg !50
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i27 = icmp eq i32 %353, 0, !dbg !50
  br i1 %.not.i24, label %359, label %354, !dbg !50

354:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %357, label %355, !dbg !50

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

359:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %362, label %360, !dbg !50

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

__nv_sqrtf.exit28:                                ; preds = %355, %357, %360, %362
  %.0.i26 = phi float [ %356, %355 ], [ %358, %357 ], [ %361, %360 ], [ %363, %362 ], !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %364 = sext i32 %6 to i64, !dbg !52
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !52
  %urem = and i32 %8, 511, !dbg !53
  %366 = icmp eq i32 %urem, 0, !dbg !53
  %367 = bitcast float %.0.i to i32, !dbg !53
  %368 = and i1 %366, %7, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %365, i1 %368) #5, !dbg !53
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !54
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !54
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !54
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !54
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !54
  %374 = bitcast i32 %370 to float, !dbg !54
  %375 = bitcast i32 %371 to float, !dbg !54
  %376 = bitcast i32 %372 to float, !dbg !54
  %377 = bitcast i32 %373 to float, !dbg !54
  %378 = fsub float %374, %330, !dbg !55
  %379 = fsub float %375, %330, !dbg !55
  %380 = fsub float %376, %330, !dbg !55
  %381 = fsub float %377, %330, !dbg !55
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %.0.i26) #5, !dbg !56
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float %.0.i26) #5, !dbg !56
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %.0.i26) #5, !dbg !56
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float %.0.i26) #5, !dbg !56
  %386 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !57
  %387 = bitcast float %382 to i32, !dbg !58
  %388 = bitcast float %383 to i32, !dbg !58
  %389 = bitcast float %384 to i32, !dbg !58
  %390 = bitcast float %385 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %386, i1 %7) #5, !dbg !58
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #5, !dbg !54
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !54
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !54
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !54
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !54
  %396 = bitcast i32 %392 to float, !dbg !54
  %397 = bitcast i32 %393 to float, !dbg !54
  %398 = bitcast i32 %394 to float, !dbg !54
  %399 = bitcast i32 %395 to float, !dbg !54
  %400 = fsub float %396, %330, !dbg !55
  %401 = fsub float %397, %330, !dbg !55
  %402 = fsub float %398, %330, !dbg !55
  %403 = fsub float %399, %330, !dbg !55
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float %.0.i26) #5, !dbg !56
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float %.0.i26) #5, !dbg !56
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %402, float %.0.i26) #5, !dbg !56
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %.0.i26) #5, !dbg !56
  %408 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !57
  %409 = bitcast float %404 to i32, !dbg !58
  %410 = bitcast float %405 to i32, !dbg !58
  %411 = bitcast float %406 to i32, !dbg !58
  %412 = bitcast float %407 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %409, i32 %410, i32 %411, i32 %412, ptr addrspace(1) %408, i1 %35) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3cc4n22ixxizywfrfy6cd2i36gsbvod2jvazj5mobjpg524blgh.py", directory: "inductor_cache/3c")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_13, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_13, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_13", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 39, scope: !7)
!15 = !DILocation(line: 34, column: 34, scope: !7)
!16 = !DILocation(line: 34, column: 49, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 41, column: 64, scope: !7)
!19 = !DILocation(line: 31, column: 27, scope: !7)
!20 = !DILocation(line: 32, column: 25, scope: !7)
!21 = !DILocation(line: 34, column: 57, scope: !7)
!22 = !DILocation(line: 183, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 184, column: 30, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 185, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 185, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 186, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 186, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 186, column: 22, scope: !23, inlinedAt: !25)
!32 = !DILocation(line: 40, column: 56, scope: !7)
!33 = !DILocation(line: 192, column: 21, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!35 = !DILocation(line: 43, column: 41, scope: !7)
!36 = !DILocation(line: 193, column: 28, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 194, column: 39, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 194, column: 60, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 49, scope: !34, inlinedAt: !35)
!40 = !DILocation(line: 196, column: 25, scope: !34, inlinedAt: !35)
!41 = !DILocation(line: 196, column: 17, scope: !34, inlinedAt: !35)
!42 = !DILocation(line: 197, column: 15, scope: !34, inlinedAt: !35)
!43 = !DILocation(line: 197, column: 30, scope: !34, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 38, scope: !34, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 49, scope: !34, inlinedAt: !35)
!46 = !DILocation(line: 197, column: 22, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 204, column: 46, scope: !23, inlinedAt: !35)
!48 = !DILocation(line: 49, column: 18, scope: !7)
!49 = !DILocation(line: 51, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 26, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
!52 = !DILocation(line: 54, column: 28, scope: !7)
!53 = !DILocation(line: 54, column: 39, scope: !7)
!54 = !DILocation(line: 59, column: 50, scope: !7)
!55 = !DILocation(line: 60, column: 24, scope: !7)
!56 = !DILocation(line: 61, column: 24, scope: !7)
!57 = !DILocation(line: 62, column: 29, scope: !7)
!58 = !DILocation(line: 62, column: 51, scope: !7)
!59 = !DILocation(line: 55, column: 4, scope: !7)
