; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 1020, !dbg !11
  %14 = shl i32 %8, 10, !dbg !12
  %15 = or disjoint i32 %14, %13, !dbg !13
  %16 = sext i32 %15 to i64, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !14
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = bitcast i32 %21 to float, !dbg !15
  %26 = bitcast i32 %22 to float, !dbg !15
  %27 = sext i32 %8 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !17
  %30 = bitcast i32 %29 to float, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = fadd float %23, %24, !dbg !24
  %41 = fadd float %40, %25, !dbg !24
  %42 = fadd float %41, %26, !dbg !24
  %43 = bitcast float %42 to i32, !dbg !29
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = fadd float %42, %45, !dbg !24
  %47 = bitcast float %46 to i32, !dbg !29
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = fadd float %46, %49, !dbg !24
  %51 = bitcast float %50 to i32, !dbg !29
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = fadd float %50, %53, !dbg !24
  %55 = bitcast float %54 to i32, !dbg !29
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !29
  %57 = bitcast i32 %56 to float, !dbg !29
  %58 = fadd float %54, %57, !dbg !24
  %59 = bitcast float %58 to i32, !dbg !29
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = fadd float %58, %61, !dbg !24
  %63 = icmp eq i32 %10, 0, !dbg !29
  %64 = and i32 %11, 7, !dbg !29
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !29
  %66 = bitcast float %62 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %63) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %67 = icmp slt i32 %9, 8, !dbg !29
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  %69 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #3, !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = fadd float %70, %72, !dbg !24
  %74 = bitcast float %73 to i32, !dbg !29
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = fadd float %73, %76, !dbg !24
  %78 = bitcast float %77 to i32, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %77, %80, !dbg !24
  %82 = and i32 %9, 7, !dbg !29
  %83 = icmp eq i32 %82, 0, !dbg !29
  %84 = and i1 %67, %83, !dbg !29
  %85 = bitcast float %81 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %85, i1 %84) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %86 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %87 = fadd float %86, 0.000000e+00, !dbg !30
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float 2.621440e+05) #3, !dbg !34
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 6.553600e+04) #3, !dbg !35
  %90 = fadd float %88, %89, !dbg !36
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 1.638400e+04) #3, !dbg !37
  %92 = fadd float %90, %91, !dbg !38
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 4.096000e+03) #3, !dbg !39
  %94 = fadd float %92, %93, !dbg !40
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.024000e+03) #3, !dbg !41
  %96 = fadd float %94, %95, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %urem = and i32 %9, 255, !dbg !44
  %97 = icmp eq i32 %urem, 0, !dbg !44
  %98 = bitcast float %96 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %28, i1 %97) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb2fox44rt6ogiihra7ub3gdnco2f3lmglgwkfewnxtg2eggcedr.py", directory: "inductor_cache/b2")
!4 = !{ptr @triton_per_fused_add_mean_30, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_30", linkageName: "triton_per_fused_add_mean_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 40, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 45, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 34, column: 30, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 31, scope: !7)
!21 = !DILocation(line: 35, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 31, scope: !7)
!23 = !DILocation(line: 36, column: 36, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 38, column: 57, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 38, column: 44, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 19, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 4, scope: !7)
!44 = !DILocation(line: 54, column: 40, scope: !7)
!45 = !DILocation(line: 54, column: 4, scope: !7)
