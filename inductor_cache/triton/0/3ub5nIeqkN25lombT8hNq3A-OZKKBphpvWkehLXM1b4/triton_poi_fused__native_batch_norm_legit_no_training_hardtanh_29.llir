; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 1020, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 2, !dbg !15
  %17 = or disjoint i32 %16, 1, !dbg !16
  %18 = or disjoint i32 %16, 2, !dbg !16
  %19 = or disjoint i32 %16, 3, !dbg !16
  %20 = icmp slt i32 %16, 4, !dbg !17
  %21 = icmp slt i32 %17, 4, !dbg !17
  %22 = icmp slt i32 %18, 4, !dbg !17
  %23 = icmp slt i32 %19, 4, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %24 = sdiv i32 %.frozen, 1024, !dbg !18
  %25 = mul i32 %24, 1024, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = shl i32 %17, 10, !dbg !20
  %27 = shl i32 %18, 10, !dbg !20
  %28 = shl i32 %19, 10, !dbg !20
  %29 = shl i32 %24, 12, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = add i32 %24, %15, !dbg !23
  %32 = shl i32 %31, 12, !dbg !23
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %30, %26, !dbg !23
  %35 = add i32 %30, %27, !dbg !23
  %36 = add i32 %30, %28, !dbg !23
  %37 = sext i32 %33 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %34 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %35 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %36 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #4, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %21) #4, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %23) #4, !dbg !25
  %49 = sext i32 %.decomposed to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !30
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !32
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !33
  %66 = fadd float %58, 0x3EE4F8B580000000, !dbg !34
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !34
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %70, 0, !dbg !35
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %71, 0, !dbg !35
  br i1 %.not.i, label %77, label %72, !dbg !35

72:                                               ; preds = %8
  br i1 %.not1.i, label %75, label %73, !dbg !35

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !35

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i16 = icmp eq i32 %82, 0, !dbg !35
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i19 = icmp eq i32 %83, 0, !dbg !35
  br i1 %.not.i16, label %89, label %84, !dbg !35

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %87, label %85, !dbg !35

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %92, label %90, !dbg !35

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %85, %87, %90, %92
  %.0.i18 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i21 = icmp eq i32 %94, 0, !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i24 = icmp eq i32 %95, 0, !dbg !35
  br i1 %.not.i21, label %101, label %96, !dbg !35

96:                                               ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %99, label %97, !dbg !35

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

101:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %97, %99, %102, %104
  %.0.i23 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i26 = icmp eq i32 %106, 0, !dbg !35
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i29 = icmp eq i32 %107, 0, !dbg !35
  br i1 %.not.i26, label %113, label %108, !dbg !35

108:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %111, label %109, !dbg !35

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

113:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %116, label %114, !dbg !35

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %109, %111, %114, %116
  %.0.i28 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !35
  %118 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %121 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %123 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %125 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %127 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %128 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %129 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %130 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %134 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %136 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !31
  %146 = and i32 %11, 255, !dbg !12
  %147 = or disjoint i32 %146, 768, !dbg !12
  %148 = or disjoint i32 %10, %147, !dbg !13
  %149 = or disjoint i32 %146, 512, !dbg !12
  %150 = or disjoint i32 %10, %149, !dbg !13
  %151 = or disjoint i32 %146, 256, !dbg !12
  %152 = or disjoint i32 %10, %151, !dbg !13
  %153 = or disjoint i32 %10, %146, !dbg !13
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !36
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !36
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !36
  %158 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !27
  %159 = insertelement <4 x i32> %158, i32 %121, i64 1, !dbg !27
  %160 = insertelement <4 x i32> %159, i32 %123, i64 2, !dbg !27
  %161 = insertelement <4 x i32> %160, i32 %125, i64 3, !dbg !27
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !27
  %163 = shufflevector <4 x float> %162, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %164 = insertelement <16 x i32> poison, i32 %118, i64 0, !dbg !25
  %165 = insertelement <16 x i32> %164, i32 %120, i64 1, !dbg !25
  %166 = insertelement <16 x i32> %165, i32 %122, i64 2, !dbg !25
  %167 = insertelement <16 x i32> %166, i32 %124, i64 3, !dbg !25
  %168 = insertelement <16 x i32> %167, i32 %126, i64 4, !dbg !25
  %169 = insertelement <16 x i32> %168, i32 %127, i64 5, !dbg !25
  %170 = insertelement <16 x i32> %169, i32 %128, i64 6, !dbg !25
  %171 = insertelement <16 x i32> %170, i32 %129, i64 7, !dbg !25
  %172 = insertelement <16 x i32> %171, i32 %130, i64 8, !dbg !25
  %173 = insertelement <16 x i32> %172, i32 %131, i64 9, !dbg !25
  %174 = insertelement <16 x i32> %173, i32 %132, i64 10, !dbg !25
  %175 = insertelement <16 x i32> %174, i32 %133, i64 11, !dbg !25
  %176 = insertelement <16 x i32> %175, i32 %134, i64 12, !dbg !25
  %177 = insertelement <16 x i32> %176, i32 %135, i64 13, !dbg !25
  %178 = insertelement <16 x i32> %177, i32 %136, i64 14, !dbg !25
  %179 = insertelement <16 x i32> %178, i32 %137, i64 15, !dbg !25
  %180 = bitcast <16 x i32> %179 to <16 x float>, !dbg !25
  %181 = fsub <16 x float> %180, %163, !dbg !37
  %182 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !33
  %183 = insertelement <4 x i32> %182, i32 %139, i64 1, !dbg !33
  %184 = insertelement <4 x i32> %183, i32 %140, i64 2, !dbg !33
  %185 = insertelement <4 x i32> %184, i32 %141, i64 3, !dbg !33
  %186 = bitcast <4 x i32> %185 to <4 x float>, !dbg !33
  %187 = shufflevector <4 x float> %186, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %188 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !31
  %189 = insertelement <4 x i32> %188, i32 %143, i64 1, !dbg !31
  %190 = insertelement <4 x i32> %189, i32 %144, i64 2, !dbg !31
  %191 = insertelement <4 x i32> %190, i32 %145, i64 3, !dbg !31
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !31
  %193 = shufflevector <4 x float> %192, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %194 = insertelement <16 x float> poison, float %157, i64 0, !dbg !38
  %195 = insertelement <16 x float> %194, float %156, i64 1, !dbg !38
  %196 = insertelement <16 x float> %195, float %155, i64 2, !dbg !38
  %197 = insertelement <16 x float> %196, float %154, i64 3, !dbg !38
  %198 = shufflevector <16 x float> %197, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %199 = fmul <16 x float> %181, %198, !dbg !38
  %200 = fmul <16 x float> %199, %193, !dbg !39
  %201 = fadd <16 x float> %200, %187, !dbg !40
  %202 = fcmp ole <16 x float> %201, zeroinitializer, !dbg !41
  %203 = select <16 x i1> %202, <16 x float> zeroinitializer, <16 x float> %201, !dbg !41
  %204 = fcmp olt <16 x float> %203, splat (float 6.000000e+00), !dbg !45
  %205 = extractelement <16 x float> %203, i64 15, !dbg !47
  %206 = fcmp uno float %205, 0.000000e+00, !dbg !48
  %207 = extractelement <16 x float> %203, i64 14, !dbg !47
  %208 = fcmp uno float %207, 0.000000e+00, !dbg !48
  %209 = extractelement <16 x float> %203, i64 13, !dbg !47
  %210 = fcmp uno float %209, 0.000000e+00, !dbg !48
  %211 = extractelement <16 x float> %203, i64 12, !dbg !47
  %212 = fcmp uno float %211, 0.000000e+00, !dbg !48
  %213 = extractelement <16 x float> %203, i64 11, !dbg !47
  %214 = fcmp uno float %213, 0.000000e+00, !dbg !48
  %215 = extractelement <16 x float> %203, i64 10, !dbg !47
  %216 = fcmp uno float %215, 0.000000e+00, !dbg !48
  %217 = extractelement <16 x float> %203, i64 9, !dbg !47
  %218 = fcmp uno float %217, 0.000000e+00, !dbg !48
  %219 = extractelement <16 x float> %203, i64 8, !dbg !47
  %220 = fcmp uno float %219, 0.000000e+00, !dbg !48
  %221 = extractelement <16 x float> %203, i64 7, !dbg !47
  %222 = fcmp uno float %221, 0.000000e+00, !dbg !48
  %223 = extractelement <16 x float> %203, i64 6, !dbg !47
  %224 = fcmp uno float %223, 0.000000e+00, !dbg !48
  %225 = extractelement <16 x float> %203, i64 5, !dbg !47
  %226 = fcmp uno float %225, 0.000000e+00, !dbg !48
  %227 = extractelement <16 x float> %203, i64 4, !dbg !47
  %228 = fcmp uno float %227, 0.000000e+00, !dbg !48
  %229 = extractelement <16 x float> %203, i64 3, !dbg !47
  %230 = fcmp uno float %229, 0.000000e+00, !dbg !48
  %231 = extractelement <16 x float> %203, i64 2, !dbg !47
  %232 = fcmp uno float %231, 0.000000e+00, !dbg !48
  %233 = extractelement <16 x float> %203, i64 1, !dbg !47
  %234 = fcmp uno float %233, 0.000000e+00, !dbg !48
  %235 = extractelement <16 x float> %203, i64 0, !dbg !47
  %236 = fcmp uno float %235, 0.000000e+00, !dbg !48
  %237 = extractelement <16 x i1> %204, i64 15, !dbg !49
  %238 = or i1 %237, %206, !dbg !49
  %239 = extractelement <16 x i1> %204, i64 14, !dbg !49
  %240 = or i1 %239, %208, !dbg !49
  %241 = extractelement <16 x i1> %204, i64 13, !dbg !49
  %242 = or i1 %241, %210, !dbg !49
  %243 = extractelement <16 x i1> %204, i64 12, !dbg !49
  %244 = or i1 %243, %212, !dbg !49
  %245 = extractelement <16 x i1> %204, i64 11, !dbg !49
  %246 = or i1 %245, %214, !dbg !49
  %247 = extractelement <16 x i1> %204, i64 10, !dbg !49
  %248 = or i1 %247, %216, !dbg !49
  %249 = extractelement <16 x i1> %204, i64 9, !dbg !49
  %250 = or i1 %249, %218, !dbg !49
  %251 = extractelement <16 x i1> %204, i64 8, !dbg !49
  %252 = or i1 %251, %220, !dbg !49
  %253 = extractelement <16 x i1> %204, i64 7, !dbg !49
  %254 = or i1 %253, %222, !dbg !49
  %255 = extractelement <16 x i1> %204, i64 6, !dbg !49
  %256 = or i1 %255, %224, !dbg !49
  %257 = extractelement <16 x i1> %204, i64 5, !dbg !49
  %258 = or i1 %257, %226, !dbg !49
  %259 = extractelement <16 x i1> %204, i64 4, !dbg !49
  %260 = or i1 %259, %228, !dbg !49
  %261 = extractelement <16 x i1> %204, i64 3, !dbg !49
  %262 = or i1 %261, %230, !dbg !49
  %263 = extractelement <16 x i1> %204, i64 2, !dbg !49
  %264 = or i1 %263, %232, !dbg !49
  %265 = extractelement <16 x i1> %204, i64 1, !dbg !49
  %266 = or i1 %265, %234, !dbg !49
  %267 = extractelement <16 x i1> %204, i64 0, !dbg !49
  %268 = or i1 %267, %236, !dbg !49
  %269 = add i32 %153, %15, !dbg !50
  %270 = shl i32 %269, 2, !dbg !50
  %271 = add i32 %152, %15, !dbg !50
  %272 = shl i32 %271, 2, !dbg !50
  %273 = add i32 %150, %15, !dbg !50
  %274 = shl i32 %273, 2, !dbg !50
  %275 = add i32 %148, %15, !dbg !50
  %276 = shl i32 %275, 2, !dbg !50
  %277 = sext i32 %270 to i64, !dbg !51
  %278 = getelementptr float, ptr addrspace(1) %5, i64 %277, !dbg !51
  %279 = sext i32 %272 to i64, !dbg !51
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %279, !dbg !51
  %281 = sext i32 %274 to i64, !dbg !51
  %282 = getelementptr float, ptr addrspace(1) %5, i64 %281, !dbg !51
  %283 = sext i32 %276 to i64, !dbg !51
  %284 = getelementptr float, ptr addrspace(1) %5, i64 %283, !dbg !51
  %285 = shl i32 %11, 4, !dbg !47
  %286 = and i32 %285, 4080, !dbg !47
  %287 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %286, !dbg !47
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %286, !dbg !47
  %289 = bitcast float %205 to i32, !dbg !47
  %290 = select i1 %238, i32 %289, i32 1086324736, !dbg !52
  %291 = insertelement <1 x i32> poison, i32 %290, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %291, i1 true) #4, !dbg !47
  %292 = or disjoint i32 %286, 4, !dbg !47
  %293 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %292, !dbg !47
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %292, !dbg !47
  %295 = bitcast float %207 to i32, !dbg !47
  %296 = select i1 %240, i32 %295, i32 1086324736, !dbg !52
  %297 = insertelement <1 x i32> poison, i32 %296, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %297, i1 true) #4, !dbg !47
  %298 = or disjoint i32 %286, 8, !dbg !47
  %299 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %298, !dbg !47
  %300 = getelementptr float, ptr addrspace(3) %299, i32 %298, !dbg !47
  %301 = bitcast float %209 to i32, !dbg !47
  %302 = select i1 %242, i32 %301, i32 1086324736, !dbg !52
  %303 = insertelement <1 x i32> poison, i32 %302, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %303, i1 true) #4, !dbg !47
  %304 = or disjoint i32 %286, 12, !dbg !47
  %305 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %304, !dbg !47
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %304, !dbg !47
  %307 = bitcast float %211 to i32, !dbg !47
  %308 = select i1 %244, i32 %307, i32 1086324736, !dbg !52
  %309 = insertelement <1 x i32> poison, i32 %308, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %309, i1 true) #4, !dbg !47
  %310 = or disjoint i32 %286, 1, !dbg !47
  %311 = getelementptr float, ptr addrspace(3) %287, i32 %310, !dbg !47
  %312 = bitcast float %213 to i32, !dbg !47
  %313 = select i1 %246, i32 %312, i32 1086324736, !dbg !52
  %314 = insertelement <1 x i32> poison, i32 %313, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %314, i1 true) #4, !dbg !47
  %315 = or disjoint i32 %286, 5, !dbg !47
  %316 = lshr i32 %315, 2, !dbg !47
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i32 %316, !dbg !47
  %318 = getelementptr float, ptr addrspace(3) %317, i32 %315, !dbg !47
  %319 = bitcast float %215 to i32, !dbg !47
  %320 = select i1 %248, i32 %319, i32 1086324736, !dbg !52
  %321 = insertelement <1 x i32> poison, i32 %320, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %321, i1 true) #4, !dbg !47
  %322 = or disjoint i32 %286, 9, !dbg !47
  %323 = lshr i32 %322, 2, !dbg !47
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i32 %323, !dbg !47
  %325 = getelementptr float, ptr addrspace(3) %324, i32 %322, !dbg !47
  %326 = bitcast float %217 to i32, !dbg !47
  %327 = select i1 %250, i32 %326, i32 1086324736, !dbg !52
  %328 = insertelement <1 x i32> poison, i32 %327, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %328, i1 true) #4, !dbg !47
  %329 = or disjoint i32 %286, 13, !dbg !47
  %330 = lshr i32 %329, 2, !dbg !47
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !47
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %329, !dbg !47
  %333 = bitcast float %219 to i32, !dbg !47
  %334 = select i1 %252, i32 %333, i32 1086324736, !dbg !52
  %335 = insertelement <1 x i32> poison, i32 %334, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %335, i1 true) #4, !dbg !47
  %336 = or disjoint i32 %286, 2, !dbg !47
  %337 = getelementptr float, ptr addrspace(3) %287, i32 %336, !dbg !47
  %338 = bitcast float %221 to i32, !dbg !47
  %339 = select i1 %254, i32 %338, i32 1086324736, !dbg !52
  %340 = insertelement <1 x i32> poison, i32 %339, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %340, i1 true) #4, !dbg !47
  %341 = or disjoint i32 %286, 6, !dbg !47
  %342 = lshr i32 %341, 2, !dbg !47
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !47
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !47
  %345 = bitcast float %223 to i32, !dbg !47
  %346 = select i1 %256, i32 %345, i32 1086324736, !dbg !52
  %347 = insertelement <1 x i32> poison, i32 %346, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %347, i1 true) #4, !dbg !47
  %348 = or disjoint i32 %286, 10, !dbg !47
  %349 = lshr i32 %348, 2, !dbg !47
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %349, !dbg !47
  %351 = getelementptr float, ptr addrspace(3) %350, i32 %348, !dbg !47
  %352 = bitcast float %225 to i32, !dbg !47
  %353 = select i1 %258, i32 %352, i32 1086324736, !dbg !52
  %354 = insertelement <1 x i32> poison, i32 %353, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %354, i1 true) #4, !dbg !47
  %355 = or disjoint i32 %286, 14, !dbg !47
  %356 = lshr i32 %355, 2, !dbg !47
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !47
  %358 = getelementptr float, ptr addrspace(3) %357, i32 %355, !dbg !47
  %359 = bitcast float %227 to i32, !dbg !47
  %360 = select i1 %260, i32 %359, i32 1086324736, !dbg !52
  %361 = insertelement <1 x i32> poison, i32 %360, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %361, i1 true) #4, !dbg !47
  %362 = or disjoint i32 %286, 3, !dbg !47
  %363 = getelementptr float, ptr addrspace(3) %287, i32 %362, !dbg !47
  %364 = bitcast float %229 to i32, !dbg !47
  %365 = select i1 %262, i32 %364, i32 1086324736, !dbg !52
  %366 = insertelement <1 x i32> poison, i32 %365, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %366, i1 true) #4, !dbg !47
  %367 = or disjoint i32 %286, 7, !dbg !47
  %368 = lshr i32 %367, 2, !dbg !47
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i32 %368, !dbg !47
  %370 = getelementptr float, ptr addrspace(3) %369, i32 %367, !dbg !47
  %371 = bitcast float %231 to i32, !dbg !47
  %372 = select i1 %264, i32 %371, i32 1086324736, !dbg !52
  %373 = insertelement <1 x i32> poison, i32 %372, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %373, i1 true) #4, !dbg !47
  %374 = or disjoint i32 %286, 11, !dbg !47
  %375 = lshr i32 %374, 2, !dbg !47
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %375, !dbg !47
  %377 = getelementptr float, ptr addrspace(3) %376, i32 %374, !dbg !47
  %378 = bitcast float %233 to i32, !dbg !47
  %379 = select i1 %266, i32 %378, i32 1086324736, !dbg !52
  %380 = insertelement <1 x i32> poison, i32 %379, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %380, i1 true) #4, !dbg !47
  %381 = or disjoint i32 %286, 15, !dbg !47
  %382 = lshr i32 %381, 2, !dbg !47
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %382, !dbg !47
  %384 = getelementptr float, ptr addrspace(3) %383, i32 %381, !dbg !47
  %385 = bitcast float %235 to i32, !dbg !47
  %386 = select i1 %268, i32 %385, i32 1086324736, !dbg !52
  %387 = insertelement <1 x i32> poison, i32 %386, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %387, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %388 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %13, !dbg !47
  %390 = load i32, ptr addrspace(3) %389, align 4, !dbg !47
  %391 = or disjoint i32 %13, 1, !dbg !47
  %392 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %391, !dbg !47
  %393 = load i32, ptr addrspace(3) %392, align 4, !dbg !47
  %394 = or disjoint i32 %13, 2, !dbg !47
  %395 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %394, !dbg !47
  %396 = load i32, ptr addrspace(3) %395, align 4, !dbg !47
  %397 = or disjoint i32 %13, 3, !dbg !47
  %398 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %397, !dbg !47
  %399 = load i32, ptr addrspace(3) %398, align 4, !dbg !47
  %400 = or disjoint i32 %13, 1024, !dbg !47
  %401 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %400, !dbg !47
  %402 = getelementptr inbounds float, ptr addrspace(3) %401, i32 %400, !dbg !47
  %403 = load i32, ptr addrspace(3) %402, align 4, !dbg !47
  %404 = or disjoint i32 %13, 1025, !dbg !47
  %405 = lshr i32 %404, 2, !dbg !47
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %405, !dbg !47
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %404, !dbg !47
  %408 = load i32, ptr addrspace(3) %407, align 4, !dbg !47
  %409 = or disjoint i32 %13, 1026, !dbg !47
  %410 = lshr i32 %409, 2, !dbg !47
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !47
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %409, !dbg !47
  %413 = load i32, ptr addrspace(3) %412, align 4, !dbg !47
  %414 = or disjoint i32 %13, 1027, !dbg !47
  %415 = lshr i32 %414, 2, !dbg !47
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !47
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %414, !dbg !47
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !47
  %419 = or disjoint i32 %13, 2048, !dbg !47
  %420 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %419, !dbg !47
  %421 = getelementptr inbounds float, ptr addrspace(3) %420, i32 %419, !dbg !47
  %422 = load i32, ptr addrspace(3) %421, align 4, !dbg !47
  %423 = or disjoint i32 %13, 2049, !dbg !47
  %424 = lshr i32 %423, 2, !dbg !47
  %425 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %424, !dbg !47
  %426 = getelementptr inbounds float, ptr addrspace(3) %425, i32 %423, !dbg !47
  %427 = load i32, ptr addrspace(3) %426, align 4, !dbg !47
  %428 = or disjoint i32 %13, 2050, !dbg !47
  %429 = lshr i32 %428, 2, !dbg !47
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %429, !dbg !47
  %431 = getelementptr inbounds float, ptr addrspace(3) %430, i32 %428, !dbg !47
  %432 = load i32, ptr addrspace(3) %431, align 4, !dbg !47
  %433 = or disjoint i32 %13, 2051, !dbg !47
  %434 = lshr i32 %433, 2, !dbg !47
  %435 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %434, !dbg !47
  %436 = getelementptr inbounds float, ptr addrspace(3) %435, i32 %433, !dbg !47
  %437 = load i32, ptr addrspace(3) %436, align 4, !dbg !47
  %438 = or disjoint i32 %13, 3072, !dbg !47
  %439 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %438, !dbg !47
  %440 = getelementptr inbounds float, ptr addrspace(3) %439, i32 %438, !dbg !47
  %441 = load i32, ptr addrspace(3) %440, align 4, !dbg !47
  %442 = or disjoint i32 %13, 3073, !dbg !47
  %443 = lshr i32 %442, 2, !dbg !47
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !47
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %442, !dbg !47
  %446 = load i32, ptr addrspace(3) %445, align 4, !dbg !47
  %447 = or disjoint i32 %13, 3074, !dbg !47
  %448 = lshr i32 %447, 2, !dbg !47
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !47
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %447, !dbg !47
  %451 = load i32, ptr addrspace(3) %450, align 4, !dbg !47
  %452 = or disjoint i32 %13, 3075, !dbg !47
  %453 = lshr i32 %452, 2, !dbg !47
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !47
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %452, !dbg !47
  %456 = load i32, ptr addrspace(3) %455, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %390, i32 %393, i32 %396, i32 %399, ptr addrspace(1) %278, i1 %20) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %403, i32 %408, i32 %413, i32 %418, ptr addrspace(1) %280, i1 %20) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %422, i32 %427, i32 %432, i32 %437, ptr addrspace(1) %282, i1 %20) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %441, i32 %446, i32 %451, i32 %456, ptr addrspace(1) %284, i1 %20) #4, !dbg !47
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caxjlbwh7isqbjkvz4uzybgyznzuqnywllimudyhhy4rlig2dkne.py", directory: "inductor_cache/ax")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 110, column: 15, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 52, column: 44, scope: !7)
!48 = !DILocation(line: 112, column: 21, scope: !42, inlinedAt: !46)
!49 = !DILocation(line: 112, column: 16, scope: !42, inlinedAt: !46)
!50 = !DILocation(line: 52, column: 30, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 113, column: 29, scope: !42, inlinedAt: !46)
!53 = !DILocation(line: 52, column: 4, scope: !7)
