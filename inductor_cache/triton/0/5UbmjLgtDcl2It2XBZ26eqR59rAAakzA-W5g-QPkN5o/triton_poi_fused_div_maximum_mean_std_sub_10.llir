; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_maximum_mean_std_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 8, !dbg !13
  %13 = icmp slt i32 %11, 12, !dbg !14
  %14 = icmp slt i32 %12, 12, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %16 = shl i32 %15, 6, !dbg !16
  %17 = shl i32 %8, 2, !dbg !17
  %18 = and i32 %17, 60, !dbg !17
  %19 = or disjoint i32 %16, %18, !dbg !18
  %20 = sdiv i32 %11, 3, !dbg !19
  %21 = sdiv i32 %12, 3, !dbg !19
  %22 = shl i32 %11, 12, !dbg !20
  %23 = shl i32 %12, 12, !dbg !20
  %24 = add i32 %19, %22, !dbg !21
  %25 = add i32 %19, %23, !dbg !21
  %26 = sext i32 %24 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %13) #4, !dbg !23
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %14) #4, !dbg !23
  %32 = sext i32 %20 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = sext i32 %21 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #4, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #4, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #4, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #4, !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #4, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #4, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #4, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #4, !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #4, !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #4, !dbg !27
  %51 = bitcast i32 %50 to float, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #4, !dbg !27
  %53 = bitcast i32 %52 to float, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #4, !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %14) #4, !dbg !27
  %57 = bitcast i32 %56 to float, !dbg !27
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %14) #4, !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %14) #4, !dbg !27
  %61 = bitcast i32 %60 to float, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %14) #4, !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 1.228800e+04) #4, !dbg !28
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.228800e+04) #4, !dbg !28
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 1.228700e+04) #4, !dbg !29
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 1.228700e+04) #4, !dbg !29
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 1.228700e+04) #4, !dbg !29
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 1.228700e+04) #4, !dbg !29
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 1.228700e+04) #4, !dbg !29
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 1.228700e+04) #4, !dbg !29
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 1.228700e+04) #4, !dbg !29
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 1.228700e+04) #4, !dbg !29
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i13 = icmp eq i32 %80, 0, !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i16 = icmp eq i32 %81, 0, !dbg !30
  br i1 %.not.i13, label %87, label %82, !dbg !30

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %85, label %83, !dbg !30

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %90, label %88, !dbg !30

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

__nv_sqrtf.exit17:                                ; preds = %83, %85, %88, %90
  %.0.i15 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !30
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i33 = icmp eq i32 %98, 0, !dbg !30
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i36 = icmp eq i32 %99, 0, !dbg !30
  br i1 %.not.i33, label %105, label %100, !dbg !30

100:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %103, label %101, !dbg !30

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

105:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %108, label %106, !dbg !30

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

__nv_sqrtf.exit37:                                ; preds = %101, %103, %106, %108
  %.0.i35 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %111 = bitcast i32 %110 to float, !dbg !23
  %112 = fsub float %111, %65, !dbg !31
  %113 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %114 = bitcast i32 %113 to float, !dbg !23
  %115 = fsub float %114, %65, !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %117 = bitcast i32 %116 to float, !dbg !23
  %118 = fsub float %117, %65, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %120 = bitcast i32 %119 to float, !dbg !23
  %121 = fsub float %120, %65, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %123 = bitcast i32 %122 to float, !dbg !23
  %124 = fsub float %123, %64, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %126 = bitcast i32 %125 to float, !dbg !23
  %127 = fsub float %126, %64, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %129 = bitcast i32 %128 to float, !dbg !23
  %130 = fsub float %129, %64, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %132 = bitcast i32 %131 to float, !dbg !23
  %133 = fsub float %132, %64, !dbg !31
  %134 = and i32 %8, 64, !dbg !12
  %.lobit = lshr exact i32 %134, 6, !dbg !12
  %135 = or disjoint i32 %.lobit, %7, !dbg !13
  %136 = or disjoint i32 %135, 14, !dbg !13
  %.frozen = freeze i32 %136, !dbg !19
  %137 = sdiv i32 %.frozen, 3, !dbg !19
  %138 = mul i32 %137, 3, !dbg !32
  %.decomposed = sub i32 %.frozen, %138, !dbg !32
  %139 = or disjoint i32 %135, 12, !dbg !13
  %.frozen38 = freeze i32 %139, !dbg !19
  %140 = sdiv i32 %.frozen38, 3, !dbg !19
  %141 = mul i32 %140, 3, !dbg !32
  %.decomposed39 = sub i32 %.frozen38, %141, !dbg !32
  %142 = or disjoint i32 %135, 10, !dbg !13
  %.frozen40 = freeze i32 %142, !dbg !19
  %143 = sdiv i32 %.frozen40, 3, !dbg !19
  %144 = mul i32 %143, 3, !dbg !32
  %.decomposed41 = sub i32 %.frozen40, %144, !dbg !32
  %145 = or disjoint i32 %135, 8, !dbg !13
  %.frozen42 = freeze i32 %145, !dbg !19
  %146 = sdiv i32 %.frozen42, 3, !dbg !19
  %147 = mul i32 %146, 3, !dbg !32
  %.decomposed43 = sub i32 %.frozen42, %147, !dbg !32
  %148 = or disjoint i32 %135, 6, !dbg !13
  %.frozen44 = freeze i32 %148, !dbg !19
  %149 = sdiv i32 %.frozen44, 3, !dbg !19
  %150 = mul i32 %149, 3, !dbg !32
  %.decomposed45 = sub i32 %.frozen44, %150, !dbg !32
  %151 = or disjoint i32 %135, 4, !dbg !13
  %.frozen46 = freeze i32 %151, !dbg !19
  %152 = sdiv i32 %.frozen46, 3, !dbg !19
  %153 = mul i32 %152, 3, !dbg !32
  %.decomposed47 = sub i32 %.frozen46, %153, !dbg !32
  %154 = or disjoint i32 %135, 2, !dbg !13
  %.frozen48 = freeze i32 %154, !dbg !19
  %155 = sdiv i32 %.frozen48, 3, !dbg !19
  %156 = mul i32 %155, 3, !dbg !32
  %.decomposed49 = sub i32 %.frozen48, %156, !dbg !32
  %.frozen50 = freeze i32 %135, !dbg !19
  %157 = sdiv i32 %.frozen50, 3, !dbg !19
  %158 = mul i32 %157, 3, !dbg !32
  %.decomposed51 = sub i32 %.frozen50, %158, !dbg !32
  %159 = and i32 %8, 63, !dbg !17
  %160 = or disjoint i32 %16, %159, !dbg !18
  %161 = icmp slt i32 %7, 0, !dbg !14
  %162 = icmp slt i32 %142, 12, !dbg !14
  %163 = icmp slt i32 %145, 12, !dbg !14
  %164 = icmp slt i32 %148, 12, !dbg !14
  %165 = icmp slt i32 %151, 12, !dbg !14
  %166 = icmp slt i32 %154, 12, !dbg !14
  %167 = icmp slt i32 %135, 12, !dbg !14
  %168 = fcmp ogt float %.0.i15, 0x3F8279A740000000, !dbg !33
  %169 = fcmp ogt float %.0.i35, 0x3F8279A740000000, !dbg !33
  %170 = fcmp uno float %.0.i15, 0.000000e+00, !dbg !37
  %171 = fcmp uno float %.0.i35, 0.000000e+00, !dbg !37
  %172 = or i1 %168, %170, !dbg !38
  %173 = or i1 %169, %171, !dbg !38
  %174 = select i1 %172, float %.0.i15, float 0x3F8279A740000000, !dbg !39
  %175 = select i1 %173, float %.0.i35, float 0x3F8279A740000000, !dbg !39
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %174) #4, !dbg !40
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %174) #4, !dbg !40
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %174) #4, !dbg !40
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %174) #4, !dbg !40
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %175) #4, !dbg !40
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %175) #4, !dbg !40
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %175) #4, !dbg !40
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %175) #4, !dbg !40
  %184 = mul i32 %160, 3, !dbg !41
  %185 = add i32 %184, %.decomposed51, !dbg !42
  %186 = add i32 %184, %.decomposed49, !dbg !42
  %187 = add i32 %184, %.decomposed47, !dbg !42
  %188 = add i32 %184, %.decomposed45, !dbg !42
  %189 = add i32 %184, %.decomposed43, !dbg !42
  %190 = add i32 %184, %.decomposed41, !dbg !42
  %191 = add i32 %184, %.decomposed39, !dbg !42
  %192 = add i32 %184, %.decomposed, !dbg !42
  %193 = mul i32 %157, 12288, !dbg !43
  %194 = mul i32 %155, 12288, !dbg !43
  %195 = mul i32 %152, 12288, !dbg !43
  %196 = mul i32 %149, 12288, !dbg !43
  %197 = mul i32 %146, 12288, !dbg !43
  %198 = mul i32 %143, 12288, !dbg !43
  %199 = mul i32 %140, 12288, !dbg !43
  %200 = mul i32 %137, 12288, !dbg !43
  %201 = add i32 %185, %193, !dbg !44
  %202 = add i32 %186, %194, !dbg !44
  %203 = add i32 %187, %195, !dbg !44
  %204 = add i32 %188, %196, !dbg !44
  %205 = add i32 %189, %197, !dbg !44
  %206 = add i32 %190, %198, !dbg !44
  %207 = add i32 %191, %199, !dbg !44
  %208 = add i32 %192, %200, !dbg !44
  %209 = sext i32 %201 to i64, !dbg !45
  %210 = getelementptr float, ptr addrspace(1) %3, i64 %209, !dbg !45
  %211 = sext i32 %202 to i64, !dbg !45
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !45
  %213 = sext i32 %203 to i64, !dbg !45
  %214 = getelementptr float, ptr addrspace(1) %3, i64 %213, !dbg !45
  %215 = sext i32 %204 to i64, !dbg !45
  %216 = getelementptr float, ptr addrspace(1) %3, i64 %215, !dbg !45
  %217 = sext i32 %205 to i64, !dbg !45
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %217, !dbg !45
  %219 = sext i32 %206 to i64, !dbg !45
  %220 = getelementptr float, ptr addrspace(1) %3, i64 %219, !dbg !45
  %221 = sext i32 %207 to i64, !dbg !45
  %222 = getelementptr float, ptr addrspace(1) %3, i64 %221, !dbg !45
  %223 = sext i32 %208 to i64, !dbg !45
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %223, !dbg !45
  %225 = and i32 %17, 192, !dbg !46
  %226 = shl nuw nsw i32 %134, 2, !dbg !46
  %227 = or disjoint i32 %225, %226, !dbg !46
  %228 = or disjoint i32 %227, %18, !dbg !46
  %229 = and i32 %8, 127, !dbg !46
  %230 = lshr exact i32 %227, 4, !dbg !46
  %231 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %230, !dbg !46
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %228, !dbg !46
  %233 = bitcast float %176 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !46
  %234 = or disjoint i32 %228, 1, !dbg !46
  %235 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %234, !dbg !46
  %236 = bitcast float %177 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !46
  %237 = or disjoint i32 %228, 2, !dbg !46
  %238 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %237, !dbg !46
  %239 = bitcast float %178 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !46
  %240 = or disjoint i32 %228, 3, !dbg !46
  %241 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %240, !dbg !46
  %242 = bitcast float %179 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %243 = lshr i32 %229, 6, !dbg !46
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !46
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %229, !dbg !46
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !46
  %247 = or disjoint i32 %229, 128, !dbg !46
  %248 = lshr i32 %247, 6, !dbg !46
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !46
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %247, !dbg !46
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !46
  %252 = or disjoint i32 %229, 256, !dbg !46
  %253 = lshr i32 %252, 6, !dbg !46
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !46
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %252, !dbg !46
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !46
  %257 = or disjoint i32 %229, 384, !dbg !46
  %258 = lshr i32 %257, 6, !dbg !46
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !46
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !46
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %262 = bitcast float %180 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %262, i1 true) #4, !dbg !46
  %263 = bitcast float %181 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %263, i1 true) #4, !dbg !46
  %264 = bitcast float %182 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %264, i1 true) #4, !dbg !46
  %265 = bitcast float %183 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %265, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %266 = load i32, ptr addrspace(3) %245, align 4, !dbg !46
  %267 = load i32, ptr addrspace(3) %250, align 4, !dbg !46
  %268 = load i32, ptr addrspace(3) %255, align 4, !dbg !46
  %269 = load i32, ptr addrspace(3) %260, align 4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %246, ptr addrspace(1) %210, i1 %167) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %212, i1 %166) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %256, ptr addrspace(1) %214, i1 %165) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %261, ptr addrspace(1) %216, i1 %164) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %266, ptr addrspace(1) %218, i1 %163) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %220, i1 %162) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %268, ptr addrspace(1) %222, i1 %161) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %269, ptr addrspace(1) %224, i1 %161) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czburxbxpl4x2h3i7nb2t3dkbaio57k3476gzlfal5idesiyomos.py", directory: "inductor_cache/zb")
!4 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_maximum_mean_std_sub_10", linkageName: "triton_poi_fused_div_maximum_mean_std_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 42, column: 41, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 32, scope: !7)
!42 = !DILocation(line: 44, column: 30, scope: !7)
!43 = !DILocation(line: 44, column: 43, scope: !7)
!44 = !DILocation(line: 44, column: 37, scope: !7)
!45 = !DILocation(line: 44, column: 25, scope: !7)
!46 = !DILocation(line: 44, column: 55, scope: !7)
!47 = !DILocation(line: 44, column: 4, scope: !7)
