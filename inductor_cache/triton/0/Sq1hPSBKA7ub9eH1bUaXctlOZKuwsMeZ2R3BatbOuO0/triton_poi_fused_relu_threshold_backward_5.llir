; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = or disjoint i32 %7, 4, !dbg !12
  %9 = or disjoint i32 %7, 8, !dbg !12
  %10 = or disjoint i32 %7, 12, !dbg !12
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !13
  %12 = shl i32 %11, 8, !dbg !14
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %14 = and i32 %13, 255, !dbg !15
  %15 = or disjoint i32 %12, %14, !dbg !16
  %16 = icmp slt i32 %15, 3721, !dbg !17
  %.frozen = freeze i32 %7, !dbg !18
  %17 = sdiv i32 %.frozen, 4096, !dbg !18
  %18 = mul i32 %17, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %18, !dbg !19
  %19 = srem i32 %8, 4096, !dbg !19
  %20 = srem i32 %9, 4096, !dbg !19
  %21 = srem i32 %10, 4096, !dbg !19
  %22 = shl i32 %15, 12, !dbg !20
  %23 = mul i32 %17, 15241216, !dbg !21
  %24 = add i32 %22, %23, !dbg !22
  %25 = add i32 %24, %.decomposed, !dbg !23
  %26 = add i32 %24, %19, !dbg !23
  %27 = add i32 %24, %20, !dbg !23
  %28 = add i32 %24, %21, !dbg !23
  %29 = sext i32 %25 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = sext i32 %26 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %27 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %28 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %16) #1, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #1, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %16) #1, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %16) #1, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = mul i32 %6, 59536, !dbg !26
  %58 = add i32 %57, 3721, !dbg !26
  %59 = add i32 %57, 7442, !dbg !26
  %60 = add i32 %57, 11163, !dbg !26
  %61 = mul i32 %8, 3721, !dbg !26
  %62 = add i32 %57, 18605, !dbg !26
  %63 = add i32 %57, 22326, !dbg !26
  %64 = add i32 %57, 26047, !dbg !26
  %65 = mul i32 %9, 3721, !dbg !26
  %66 = add i32 %57, 33489, !dbg !26
  %67 = add i32 %57, 37210, !dbg !26
  %68 = add i32 %57, 40931, !dbg !26
  %69 = mul i32 %10, 3721, !dbg !26
  %70 = add i32 %57, 48373, !dbg !26
  %71 = add i32 %57, 52094, !dbg !26
  %72 = add i32 %57, 55815, !dbg !26
  %73 = add i32 %15, %57, !dbg !27
  %74 = add i32 %58, %15, !dbg !27
  %75 = add i32 %59, %15, !dbg !27
  %76 = add i32 %60, %15, !dbg !27
  %77 = add i32 %15, %61, !dbg !27
  %78 = add i32 %62, %15, !dbg !27
  %79 = add i32 %63, %15, !dbg !27
  %80 = add i32 %64, %15, !dbg !27
  %81 = add i32 %15, %65, !dbg !27
  %82 = add i32 %66, %15, !dbg !27
  %83 = add i32 %67, %15, !dbg !27
  %84 = add i32 %68, %15, !dbg !27
  %85 = add i32 %15, %69, !dbg !27
  %86 = add i32 %70, %15, !dbg !27
  %87 = add i32 %71, %15, !dbg !27
  %88 = add i32 %72, %15, !dbg !27
  %89 = sext i32 %73 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !28
  %91 = sext i32 %74 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !28
  %93 = sext i32 %75 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !28
  %95 = sext i32 %76 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !28
  %97 = sext i32 %77 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !28
  %99 = sext i32 %78 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !28
  %101 = sext i32 %79 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !28
  %103 = sext i32 %80 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !28
  %105 = sext i32 %81 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !28
  %107 = sext i32 %82 to i64, !dbg !28
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !28
  %109 = sext i32 %83 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !28
  %111 = sext i32 %84 to i64, !dbg !28
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !28
  %113 = sext i32 %85 to i64, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !28
  %115 = sext i32 %86 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !28
  %117 = sext i32 %87 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !28
  %119 = sext i32 %88 to i64, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !28
  %121 = getelementptr i1, ptr addrspace(1) %2, i64 %29, !dbg !29
  %122 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !25
  %123 = insertelement <4 x i32> %122, i32 %39, i64 1, !dbg !25
  %124 = insertelement <4 x i32> %123, i32 %40, i64 2, !dbg !25
  %125 = insertelement <4 x i32> %124, i32 %41, i64 3, !dbg !25
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !25
  %127 = fcmp olt <4 x float> %126, zeroinitializer, !dbg !30
  %128 = select <4 x i1> %127, <4 x float> zeroinitializer, <4 x float> %126, !dbg !34
  %129 = fcmp ole <4 x float> %128, zeroinitializer, !dbg !35
  %bc = bitcast <4 x float> %128 to <4 x i32>, !dbg !36
  %130 = extractelement <4 x i32> %bc, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %90, i1 %16) #1, !dbg !36
  %bc1 = bitcast <4 x float> %128 to <4 x i32>, !dbg !36
  %131 = extractelement <4 x i32> %bc1, i64 1, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %92, i1 %16) #1, !dbg !36
  %bc2 = bitcast <4 x float> %128 to <4 x i32>, !dbg !36
  %132 = extractelement <4 x i32> %bc2, i64 2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %94, i1 %16) #1, !dbg !36
  %bc3 = bitcast <4 x float> %128 to <4 x i32>, !dbg !36
  %133 = extractelement <4 x i32> %bc3, i64 3, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %96, i1 %16) #1, !dbg !36
  %134 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !25
  %135 = insertelement <4 x i32> %134, i32 %44, i64 1, !dbg !25
  %136 = insertelement <4 x i32> %135, i32 %45, i64 2, !dbg !25
  %137 = insertelement <4 x i32> %136, i32 %46, i64 3, !dbg !25
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !25
  %139 = fcmp olt <4 x float> %138, zeroinitializer, !dbg !30
  %140 = select <4 x i1> %139, <4 x float> zeroinitializer, <4 x float> %138, !dbg !34
  %141 = fcmp ole <4 x float> %140, zeroinitializer, !dbg !35
  %bc4 = bitcast <4 x float> %140 to <4 x i32>, !dbg !36
  %142 = extractelement <4 x i32> %bc4, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %98, i1 %16) #1, !dbg !36
  %bc5 = bitcast <4 x float> %140 to <4 x i32>, !dbg !36
  %143 = extractelement <4 x i32> %bc5, i64 1, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %100, i1 %16) #1, !dbg !36
  %bc6 = bitcast <4 x float> %140 to <4 x i32>, !dbg !36
  %144 = extractelement <4 x i32> %bc6, i64 2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %102, i1 %16) #1, !dbg !36
  %bc7 = bitcast <4 x float> %140 to <4 x i32>, !dbg !36
  %145 = extractelement <4 x i32> %bc7, i64 3, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %104, i1 %16) #1, !dbg !36
  %146 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !25
  %147 = insertelement <4 x i32> %146, i32 %49, i64 1, !dbg !25
  %148 = insertelement <4 x i32> %147, i32 %50, i64 2, !dbg !25
  %149 = insertelement <4 x i32> %148, i32 %51, i64 3, !dbg !25
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !25
  %151 = fcmp olt <4 x float> %150, zeroinitializer, !dbg !30
  %152 = select <4 x i1> %151, <4 x float> zeroinitializer, <4 x float> %150, !dbg !34
  %153 = fcmp ole <4 x float> %152, zeroinitializer, !dbg !35
  %bc8 = bitcast <4 x float> %152 to <4 x i32>, !dbg !36
  %154 = extractelement <4 x i32> %bc8, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %106, i1 %16) #1, !dbg !36
  %bc9 = bitcast <4 x float> %152 to <4 x i32>, !dbg !36
  %155 = extractelement <4 x i32> %bc9, i64 1, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %108, i1 %16) #1, !dbg !36
  %bc10 = bitcast <4 x float> %152 to <4 x i32>, !dbg !36
  %156 = extractelement <4 x i32> %bc10, i64 2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %110, i1 %16) #1, !dbg !36
  %bc11 = bitcast <4 x float> %152 to <4 x i32>, !dbg !36
  %157 = extractelement <4 x i32> %bc11, i64 3, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %112, i1 %16) #1, !dbg !36
  %158 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !25
  %159 = insertelement <4 x i32> %158, i32 %54, i64 1, !dbg !25
  %160 = insertelement <4 x i32> %159, i32 %55, i64 2, !dbg !25
  %161 = insertelement <4 x i32> %160, i32 %56, i64 3, !dbg !25
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !25
  %163 = fcmp olt <4 x float> %162, zeroinitializer, !dbg !30
  %164 = select <4 x i1> %163, <4 x float> zeroinitializer, <4 x float> %162, !dbg !34
  %165 = fcmp ole <4 x float> %164, zeroinitializer, !dbg !35
  %bc12 = bitcast <4 x float> %164 to <4 x i32>, !dbg !36
  %166 = extractelement <4 x i32> %bc12, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %114, i1 %16) #1, !dbg !36
  %bc13 = bitcast <4 x float> %164 to <4 x i32>, !dbg !36
  %167 = extractelement <4 x i32> %bc13, i64 1, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %116, i1 %16) #1, !dbg !36
  %bc14 = bitcast <4 x float> %164 to <4 x i32>, !dbg !36
  %168 = extractelement <4 x i32> %bc14, i64 2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %118, i1 %16) #1, !dbg !36
  %bc15 = bitcast <4 x float> %164 to <4 x i32>, !dbg !36
  %169 = extractelement <4 x i32> %bc15, i64 3, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %120, i1 %16) #1, !dbg !36
  %170 = zext <4 x i1> %129 to <4 x i8>, !dbg !37
  %171 = bitcast <4 x i8> %170 to i32, !dbg !37
  %172 = zext <4 x i1> %141 to <4 x i8>, !dbg !37
  %173 = bitcast <4 x i8> %172 to i32, !dbg !37
  %174 = zext <4 x i1> %153 to <4 x i8>, !dbg !37
  %175 = bitcast <4 x i8> %174 to i32, !dbg !37
  %176 = zext <4 x i1> %165 to <4 x i8>, !dbg !37
  %177 = bitcast <4 x i8> %176 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %173, i32 %175, i32 %177, ptr addrspace(1) %121, i1 %16) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbuclcgsihuoleqvv56zaqbyoa447jzxe7coqyebbwpg27d6hqb.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_5", linkageName: "triton_poi_fused_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 54, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 59, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 25, scope: !7)
!29 = !DILocation(line: 38, column: 25, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 34, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 36, column: 19, scope: !7)
!36 = !DILocation(line: 37, column: 46, scope: !7)
!37 = !DILocation(line: 38, column: 60, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
