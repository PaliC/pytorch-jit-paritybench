; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = sdiv i32 %18, 16, !dbg !14
  %20 = srem i32 %19, 1024, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !26
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !35
  %55 = fadd float %30, 0x3EE4F8B580000000, !dbg !36
  %56 = fadd float %32, 0x3EE4F8B580000000, !dbg !36
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %57, 0, !dbg !37
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %58, 0, !dbg !37
  br i1 %.not.i, label %64, label %59, !dbg !37

59:                                               ; preds = %12
  br i1 %.not1.i, label %62, label %60, !dbg !37

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

64:                                               ; preds = %12
  br i1 %.not1.i, label %67, label %65, !dbg !37

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !37
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %69, 0, !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !37
  br i1 %.not.i1, label %76, label %71, !dbg !37

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !37

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !37
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %83 = fadd float %46, 0x3EE4F8B580000000, !dbg !39
  %84 = fadd float %48, 0x3EE4F8B580000000, !dbg !39
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %85, 0, !dbg !40
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %86, 0, !dbg !40
  br i1 %.not.i6, label %92, label %87, !dbg !40

87:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %90, label %88, !dbg !40

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

92:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %95, label %93, !dbg !40

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %88, %90, %93, %95
  %.0.i8 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !40
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %97, 0, !dbg !40
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %98, 0, !dbg !40
  br i1 %.not.i11, label %104, label %99, !dbg !40

99:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %102, label %100, !dbg !40

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

104:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %107, label %105, !dbg !40

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %100, %102, %105, %107
  %.0.i13 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !40
  %109 = extractvalue { i32, i32 } %40, 1, !dbg !27
  %110 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %111 = insertelement <2 x i32> %110, i32 %43, i64 1, !dbg !19
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !19
  %113 = extractvalue { i32, i32 } %40, 0, !dbg !27
  %114 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %115 = insertelement <2 x i32> %114, i32 %42, i64 1, !dbg !19
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !19
  %117 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %118 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %119 = insertelement <2 x i32> %118, i32 %51, i64 1, !dbg !23
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !23
  %121 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !25
  %122 = insertelement <2 x i32> %121, i32 %54, i64 1, !dbg !25
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !25
  %124 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %125 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %126 = insertelement <2 x i32> %125, i32 %50, i64 1, !dbg !23
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !23
  %128 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !25
  %129 = insertelement <2 x i32> %128, i32 %53, i64 1, !dbg !25
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !25
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %133 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !17
  %134 = insertelement <2 x i32> %133, i32 %113, i64 1, !dbg !17
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !17
  %136 = fsub <2 x float> %135, %116, !dbg !42
  %137 = insertelement <2 x float> poison, float %81, i64 0, !dbg !43
  %138 = insertelement <2 x float> %137, float %131, i64 1, !dbg !43
  %139 = fmul <2 x float> %136, %138, !dbg !43
  %140 = fmul <2 x float> %139, %127, !dbg !44
  %141 = fadd <2 x float> %140, %130, !dbg !45
  %142 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !17
  %143 = insertelement <2 x i32> %142, i32 %109, i64 1, !dbg !17
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !17
  %145 = fsub <2 x float> %144, %112, !dbg !42
  %146 = insertelement <2 x float> poison, float %82, i64 0, !dbg !43
  %147 = insertelement <2 x float> %146, float %132, i64 1, !dbg !43
  %148 = fmul <2 x float> %145, %147, !dbg !43
  %149 = fmul <2 x float> %148, %120, !dbg !44
  %150 = fadd <2 x float> %149, %123, !dbg !45
  %shift = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %151 = fadd <2 x float> %141, %shift, !dbg !46
  %152 = extractelement <2 x float> %151, i64 0, !dbg !46
  %shift16 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %153 = fadd <2 x float> %150, %shift16, !dbg !46
  %154 = extractelement <2 x float> %153, i64 0, !dbg !46
  %155 = fcmp olt float %152, 0.000000e+00, !dbg !47
  %156 = fcmp olt float %154, 0.000000e+00, !dbg !47
  %157 = select i1 %155, float 0.000000e+00, float %152, !dbg !51
  %158 = select i1 %156, float 0.000000e+00, float %154, !dbg !51
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !52
  %160 = bitcast float %157 to i32, !dbg !53
  %161 = bitcast float %158 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %159, i1 true) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5yrx3jmtvppk2t5fnhvybi244vvfjjyeebsvhjuapkzffpo73m4.py", directory: "inductor_cache/5y")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 26, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 27, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 57, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 58, column: 28, scope: !7)
!53 = !DILocation(line: 58, column: 40, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
