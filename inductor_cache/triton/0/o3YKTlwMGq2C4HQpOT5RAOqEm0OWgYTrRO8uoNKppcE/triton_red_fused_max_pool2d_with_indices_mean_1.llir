; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_pool2d_with_indices_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = and i32 %9, 64, !dbg !12
  %12 = lshr i32 %9, 1, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %.lobit = lshr exact i32 %11, 6, !dbg !15
  %18 = shl i32 %9, 2, !dbg !15
  %19 = and i32 %18, 4, !dbg !15
  %20 = shl i32 %14, 10, !dbg !16
  %21 = shl i32 %15, 8, !dbg !17
  %22 = add i32 %20, -33
  %23 = add i32 %20, -32
  %24 = add i32 %20, -31
  %25 = add i32 %20, -1
  %26 = or disjoint i32 %21, %19
  %27 = shl i32 %9, 3
  %28 = and i32 %27, 504
  %29 = or disjoint i32 %28, %.lobit
  %30 = and i32 %18, 252
  %31 = shl nuw nsw i32 %11, 2
  %32 = or disjoint i32 %30, %31
  %33 = lshr exact i32 %28, 1
  %34 = add nuw nsw i32 %33, %29
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %34
  %36 = or disjoint i32 %29, 2
  %37 = add nuw nsw i32 %36, %33
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %37
  %39 = or disjoint i32 %29, 4
  %40 = add nuw nsw i32 %39, %33
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %40
  %42 = or disjoint i32 %29, 6
  %43 = add nuw nsw i32 %42, %33
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %43
  %45 = lshr exact i32 %32, 1
  %46 = and i32 %45, 252
  %47 = add nuw nsw i32 %46, %32
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %34
  %50 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %37
  %51 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %40
  %52 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %43
  %53 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %47
  %54 = sext i32 %26 to i64, !dbg !18
  %invariant.op = or disjoint i32 %20, 1, !dbg !18
  %invariant.op19 = or disjoint i32 %20, 1, !dbg !18
  %invariant.op21 = or disjoint i32 %20, 1, !dbg !18
  %invariant.op23 = or disjoint i32 %20, 31, !dbg !18
  %55 = getelementptr inbounds i8, ptr addrspace(3) %48, i32 4
  %56 = getelementptr inbounds i8, ptr addrspace(3) %48, i32 8
  %57 = getelementptr inbounds i8, ptr addrspace(3) %48, i32 12
  %58 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !19
  %59 = shufflevector <4 x i1> %58, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %60, !dbg !18

60:                                               ; preds = %6, %60
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %60 ]
  %61 = phi <4 x float> [ zeroinitializer, %6 ], [ %380, %60 ]
  %62 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !20
  %.masked = and i32 %62, 8, !dbg !20
  %63 = or disjoint i32 %.masked, %.lobit, !dbg !20
  %64 = icmp samesign ugt i64 %indvars.iv, 15, !dbg !21
  %65 = shl nuw nsw i32 %63, 1, !dbg !22
  %66 = or disjoint i32 %65, 4, !dbg !22
  %67 = or disjoint i32 %65, 8, !dbg !22
  %68 = or disjoint i32 %65, 12, !dbg !22
  %69 = icmp ne i32 %63, 0, !dbg !23
  %70 = and i1 %64, %69, !dbg !24
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !25
  %71 = shl nuw nsw i32 %indvars.iv.tr, 2, !dbg !25
  %72 = and i32 %71, 960, !dbg !25
  %73 = add i32 %22, %72, !dbg !26
  %74 = add nuw nsw i32 %73, %65, !dbg !27
  %75 = add nuw nsw i32 %73, %66, !dbg !27
  %76 = add nuw nsw i32 %73, %67, !dbg !27
  %77 = add nuw nsw i32 %73, %68, !dbg !27
  %78 = sext i32 %74 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = sext i32 %75 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = sext i32 %76 to i64, !dbg !28
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !28
  %84 = sext i32 %77 to i64, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !28
  %86 = and i1 %16, %70, !dbg !29
  %87 = and i1 %16, %64, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %86, i32 -8388608, i1 %86) #3, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %87, i32 -8388608, i1 %87) #3, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %87, i32 -8388608, i1 %87) #3, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %87, i32 -8388608, i1 %87) #3, !dbg !30
  %92 = add i32 %23, %72, !dbg !31
  %93 = or disjoint i32 %92, %65, !dbg !32
  %94 = or disjoint i32 %92, %66, !dbg !32
  %95 = or disjoint i32 %92, %67, !dbg !32
  %96 = or disjoint i32 %92, %68, !dbg !32
  %97 = sext i32 %93 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !33
  %99 = sext i32 %94 to i64, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !33
  %101 = sext i32 %95 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !33
  %103 = sext i32 %96 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !33
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %87, i32 -8388608, i1 %87) #3, !dbg !34
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %87, i32 -8388608, i1 %87) #3, !dbg !34
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %87, i32 -8388608, i1 %87) #3, !dbg !34
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %87, i32 -8388608, i1 %87) #3, !dbg !34
  %109 = add i32 %24, %72, !dbg !35
  %110 = or disjoint i32 %109, %65, !dbg !36
  %111 = or disjoint i32 %109, %66, !dbg !36
  %112 = or disjoint i32 %109, %67, !dbg !36
  %113 = or disjoint i32 %109, %68, !dbg !36
  %114 = sext i32 %110 to i64, !dbg !37
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !37
  %116 = sext i32 %111 to i64, !dbg !37
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !37
  %118 = sext i32 %112 to i64, !dbg !37
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !37
  %120 = sext i32 %113 to i64, !dbg !37
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !37
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %87, i32 -8388608, i1 %87) #3, !dbg !38
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %87, i32 -8388608, i1 %87) #3, !dbg !38
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %87, i32 -8388608, i1 %87) #3, !dbg !38
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %87, i32 -8388608, i1 %87) #3, !dbg !38
  %126 = add i32 %25, %72, !dbg !39
  %127 = add i32 %126, %65, !dbg !40
  %128 = add i32 %126, %66, !dbg !40
  %129 = add i32 %126, %67, !dbg !40
  %130 = add i32 %126, %68, !dbg !40
  %131 = sext i32 %127 to i64, !dbg !41
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !41
  %133 = sext i32 %128 to i64, !dbg !41
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !41
  %135 = sext i32 %129 to i64, !dbg !41
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !41
  %137 = sext i32 %130 to i64, !dbg !41
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !41
  %139 = and i1 %16, %69, !dbg !42
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %139, i32 -8388608, i1 %139) #3, !dbg !43
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %16, i32 -8388608, i1 %16) #3, !dbg !43
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %16, i32 -8388608, i1 %16) #3, !dbg !43
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %16, i32 -8388608, i1 %16) #3, !dbg !43
  %144 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !30
  %145 = insertelement <4 x i32> %144, i32 %89, i64 1, !dbg !30
  %146 = insertelement <4 x i32> %145, i32 %90, i64 2, !dbg !30
  %147 = insertelement <4 x i32> %146, i32 %91, i64 3, !dbg !30
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !30
  %149 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !34
  %150 = insertelement <4 x i32> %149, i32 %106, i64 1, !dbg !34
  %151 = insertelement <4 x i32> %150, i32 %107, i64 2, !dbg !34
  %152 = insertelement <4 x i32> %151, i32 %108, i64 3, !dbg !34
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !34
  %154 = fcmp ogt <4 x float> %153, %148, !dbg !44
  %155 = fcmp uno <4 x float> %153, zeroinitializer, !dbg !48
  %156 = or <4 x i1> %154, %155, !dbg !49
  %.v = select <4 x i1> %156, <4 x i32> %152, <4 x i32> %147, !dbg !50
  %157 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %158 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !38
  %159 = insertelement <4 x i32> %158, i32 %123, i64 1, !dbg !38
  %160 = insertelement <4 x i32> %159, i32 %124, i64 2, !dbg !38
  %161 = insertelement <4 x i32> %160, i32 %125, i64 3, !dbg !38
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !38
  %163 = fcmp olt <4 x float> %157, %162, !dbg !51
  %164 = fcmp uno <4 x float> %162, zeroinitializer, !dbg !53
  %165 = or <4 x i1> %163, %164, !dbg !54
  %.v30 = select <4 x i1> %165, <4 x i32> %161, <4 x i32> %.v, !dbg !55
  %166 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !55
  %167 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !43
  %168 = insertelement <4 x i32> %167, i32 %141, i64 1, !dbg !43
  %169 = insertelement <4 x i32> %168, i32 %142, i64 2, !dbg !43
  %170 = insertelement <4 x i32> %169, i32 %143, i64 3, !dbg !43
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !43
  %172 = fcmp olt <4 x float> %166, %171, !dbg !56
  %173 = fcmp uno <4 x float> %171, zeroinitializer, !dbg !58
  %174 = or <4 x i1> %172, %173, !dbg !59
  %.v31 = select <4 x i1> %174, <4 x i32> %170, <4 x i32> %.v30, !dbg !60
  %175 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !60
  %176 = or disjoint i32 %66, %72, !dbg !61
  %177 = or disjoint i32 %67, %72, !dbg !61
  %178 = or disjoint i32 %68, %72, !dbg !61
  %179 = or disjoint i32 %72, %20, !dbg !61
  %180 = or disjoint i32 %179, %65, !dbg !62
  %181 = or i32 %176, %20, !dbg !62
  %182 = or i32 %177, %20, !dbg !62
  %183 = or i32 %178, %20, !dbg !62
  %184 = sext i32 %180 to i64, !dbg !63
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !63
  %186 = sext i32 %181 to i64, !dbg !63
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !63
  %188 = sext i32 %182 to i64, !dbg !63
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !63
  %190 = sext i32 %183 to i64, !dbg !63
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !63
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %196 = insertelement <4 x i32> poison, i32 %192, i64 0, !dbg !64
  %197 = insertelement <4 x i32> %196, i32 %193, i64 1, !dbg !64
  %198 = insertelement <4 x i32> %197, i32 %194, i64 2, !dbg !64
  %199 = insertelement <4 x i32> %198, i32 %195, i64 3, !dbg !64
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !64
  %201 = fcmp olt <4 x float> %175, %200, !dbg !65
  %202 = fcmp uno <4 x float> %200, zeroinitializer, !dbg !67
  %203 = or <4 x i1> %201, %202, !dbg !68
  %204 = or disjoint i32 %180, 1, !dbg !69
  %.reass = or i32 %176, %invariant.op
  %.reass20 = or i32 %177, %invariant.op19
  %.reass22 = or i32 %178, %invariant.op21
  %205 = sext i32 %204 to i64, !dbg !70
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !70
  %207 = sext i32 %.reass to i64, !dbg !70
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %207, !dbg !70
  %209 = sext i32 %.reass20 to i64, !dbg !70
  %210 = getelementptr float, ptr addrspace(1) %1, i64 %209, !dbg !70
  %211 = sext i32 %.reass22 to i64, !dbg !70
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %211, !dbg !70
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %217 = add nuw nsw i32 %65, 31, !dbg !72
  %218 = or disjoint i32 %217, %72, !dbg !73
  %219 = or disjoint i32 %218, %20, !dbg !74
  %.reass24 = or disjoint i32 %72, %invariant.op23
  %220 = add nuw nsw i32 %.reass24, %66, !dbg !74
  %221 = add nuw nsw i32 %.reass24, %67, !dbg !74
  %222 = add nuw nsw i32 %.reass24, %68, !dbg !74
  %223 = sext i32 %219 to i64, !dbg !75
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !75
  %225 = sext i32 %220 to i64, !dbg !75
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !75
  %227 = sext i32 %221 to i64, !dbg !75
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !75
  %229 = sext i32 %222 to i64, !dbg !75
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !75
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %139, i32 -8388608, i1 %139) #3, !dbg !76
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %16, i32 -8388608, i1 %16) #3, !dbg !76
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %16, i32 -8388608, i1 %16) #3, !dbg !76
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %16, i32 -8388608, i1 %16) #3, !dbg !76
  %235 = or disjoint i32 %66, %71, !dbg !77
  %236 = or i32 %235, 32, !dbg !77
  %237 = or disjoint i32 %67, %71, !dbg !77
  %238 = or i32 %237, 32, !dbg !77
  %239 = or disjoint i32 %68, %71, !dbg !77
  %240 = or i32 %239, 32, !dbg !77
  %241 = or disjoint i32 %65, %20, !dbg !77
  %242 = or i32 %241, %71, !dbg !78
  %243 = or i32 %242, 32, !dbg !78
  %244 = add i32 %236, %20, !dbg !78
  %245 = add i32 %238, %20, !dbg !78
  %246 = add i32 %240, %20, !dbg !78
  %247 = sext i32 %243 to i64, !dbg !79
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !79
  %249 = sext i32 %244 to i64, !dbg !79
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !79
  %251 = sext i32 %245 to i64, !dbg !79
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !79
  %253 = sext i32 %246 to i64, !dbg !79
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !79
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %16, i32 -8388608, i1 %16) #3, !dbg !80
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %16, i32 -8388608, i1 %16) #3, !dbg !80
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %16, i32 -8388608, i1 %16) #3, !dbg !80
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %16, i32 -8388608, i1 %16) #3, !dbg !80
  %259 = or i32 %235, 33, !dbg !81
  %260 = or i32 %237, 33, !dbg !81
  %261 = or i32 %239, 33, !dbg !81
  %262 = or i32 %242, 33, !dbg !82
  %263 = add i32 %259, %20, !dbg !82
  %264 = add i32 %260, %20, !dbg !82
  %265 = add i32 %261, %20, !dbg !82
  %266 = sext i32 %262 to i64, !dbg !83
  %267 = getelementptr float, ptr addrspace(1) %1, i64 %266, !dbg !83
  %268 = sext i32 %263 to i64, !dbg !83
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %268, !dbg !83
  %270 = sext i32 %264 to i64, !dbg !83
  %271 = getelementptr float, ptr addrspace(1) %1, i64 %270, !dbg !83
  %272 = sext i32 %265 to i64, !dbg !83
  %273 = getelementptr float, ptr addrspace(1) %1, i64 %272, !dbg !83
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %16, i32 -8388608, i1 %16) #3, !dbg !84
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %16, i32 -8388608, i1 %16) #3, !dbg !84
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %16, i32 -8388608, i1 %16) #3, !dbg !84
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %16, i32 -8388608, i1 %16) #3, !dbg !84
  %278 = extractelement <4 x i1> %154, i64 0, !dbg !85
  %279 = zext i1 %278 to i8, !dbg !85
  %280 = extractelement <4 x i1> %154, i64 1, !dbg !85
  %281 = zext i1 %280 to i8, !dbg !85
  %282 = extractelement <4 x i1> %154, i64 2, !dbg !85
  %283 = zext i1 %282 to i8, !dbg !85
  %284 = extractelement <4 x i1> %154, i64 3, !dbg !85
  %285 = zext i1 %284 to i8, !dbg !85
  %286 = extractelement <4 x i1> %163, i64 0, !dbg !86
  %287 = select i1 %286, i8 2, i8 %279, !dbg !86
  %288 = extractelement <4 x i1> %163, i64 1, !dbg !86
  %289 = select i1 %288, i8 2, i8 %281, !dbg !86
  %290 = extractelement <4 x i1> %163, i64 2, !dbg !86
  %291 = select i1 %290, i8 2, i8 %283, !dbg !86
  %292 = extractelement <4 x i1> %163, i64 3, !dbg !86
  %293 = select i1 %292, i8 2, i8 %285, !dbg !86
  %294 = extractelement <4 x i1> %172, i64 0, !dbg !87
  %295 = select i1 %294, i8 3, i8 %287, !dbg !87
  %296 = extractelement <4 x i1> %172, i64 1, !dbg !87
  %297 = select i1 %296, i8 3, i8 %289, !dbg !87
  %298 = extractelement <4 x i1> %172, i64 2, !dbg !87
  %299 = select i1 %298, i8 3, i8 %291, !dbg !87
  %300 = extractelement <4 x i1> %172, i64 3, !dbg !87
  %301 = select i1 %300, i8 3, i8 %293, !dbg !87
  %302 = extractelement <4 x i1> %201, i64 0, !dbg !88
  %303 = select i1 %302, i8 4, i8 %295, !dbg !88
  %304 = extractelement <4 x i1> %201, i64 1, !dbg !88
  %305 = select i1 %304, i8 4, i8 %297, !dbg !88
  %306 = extractelement <4 x i1> %201, i64 2, !dbg !88
  %307 = select i1 %306, i8 4, i8 %299, !dbg !88
  %308 = extractelement <4 x i1> %201, i64 3, !dbg !88
  %309 = select i1 %308, i8 4, i8 %301, !dbg !88
  %.v32 = select <4 x i1> %203, <4 x i32> %199, <4 x i32> %.v31, !dbg !89
  %310 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !89
  %311 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !71
  %312 = insertelement <4 x i32> %311, i32 %214, i64 1, !dbg !71
  %313 = insertelement <4 x i32> %312, i32 %215, i64 2, !dbg !71
  %314 = insertelement <4 x i32> %313, i32 %216, i64 3, !dbg !71
  %315 = bitcast <4 x i32> %314 to <4 x float>, !dbg !71
  %316 = fcmp olt <4 x float> %310, %315, !dbg !90
  %317 = fcmp uno <4 x float> %315, zeroinitializer, !dbg !92
  %318 = or <4 x i1> %316, %317, !dbg !93
  %.v33 = select <4 x i1> %318, <4 x i32> %314, <4 x i32> %.v32, !dbg !94
  %319 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !94
  %320 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !76
  %321 = insertelement <4 x i32> %320, i32 %232, i64 1, !dbg !76
  %322 = insertelement <4 x i32> %321, i32 %233, i64 2, !dbg !76
  %323 = insertelement <4 x i32> %322, i32 %234, i64 3, !dbg !76
  %324 = bitcast <4 x i32> %323 to <4 x float>, !dbg !76
  %325 = fcmp olt <4 x float> %319, %324, !dbg !95
  %326 = fcmp uno <4 x float> %324, zeroinitializer, !dbg !97
  %327 = or <4 x i1> %325, %326, !dbg !98
  %.v34 = select <4 x i1> %327, <4 x i32> %323, <4 x i32> %.v33, !dbg !99
  %328 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !99
  %329 = insertelement <4 x i32> poison, i32 %255, i64 0, !dbg !80
  %330 = insertelement <4 x i32> %329, i32 %256, i64 1, !dbg !80
  %331 = insertelement <4 x i32> %330, i32 %257, i64 2, !dbg !80
  %332 = insertelement <4 x i32> %331, i32 %258, i64 3, !dbg !80
  %333 = bitcast <4 x i32> %332 to <4 x float>, !dbg !80
  %334 = fcmp olt <4 x float> %328, %333, !dbg !100
  %335 = fcmp uno <4 x float> %333, zeroinitializer, !dbg !102
  %336 = or <4 x i1> %334, %335, !dbg !103
  %.v35 = select <4 x i1> %336, <4 x i32> %332, <4 x i32> %.v34, !dbg !104
  %337 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !104
  %338 = insertelement <4 x i32> poison, i32 %274, i64 0, !dbg !84
  %339 = insertelement <4 x i32> %338, i32 %275, i64 1, !dbg !84
  %340 = insertelement <4 x i32> %339, i32 %276, i64 2, !dbg !84
  %341 = insertelement <4 x i32> %340, i32 %277, i64 3, !dbg !84
  %342 = bitcast <4 x i32> %341 to <4 x float>, !dbg !84
  %343 = fcmp olt <4 x float> %337, %342, !dbg !105
  %344 = fcmp uno <4 x float> %342, zeroinitializer, !dbg !107
  %345 = or <4 x i1> %343, %344, !dbg !108
  %.v36 = select <4 x i1> %345, <4 x i32> %341, <4 x i32> %.v35, !dbg !109
  %346 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !109
  %347 = extractelement <4 x i1> %316, i64 0, !dbg !110
  %348 = select i1 %347, i8 5, i8 %303, !dbg !110
  %349 = extractelement <4 x i1> %316, i64 1, !dbg !110
  %350 = select i1 %349, i8 5, i8 %305, !dbg !110
  %351 = extractelement <4 x i1> %316, i64 2, !dbg !110
  %352 = select i1 %351, i8 5, i8 %307, !dbg !110
  %353 = extractelement <4 x i1> %316, i64 3, !dbg !110
  %354 = select i1 %353, i8 5, i8 %309, !dbg !110
  %355 = extractelement <4 x i1> %325, i64 0, !dbg !111
  %356 = select i1 %355, i8 6, i8 %348, !dbg !111
  %357 = extractelement <4 x i1> %325, i64 1, !dbg !111
  %358 = select i1 %357, i8 6, i8 %350, !dbg !111
  %359 = extractelement <4 x i1> %325, i64 2, !dbg !111
  %360 = select i1 %359, i8 6, i8 %352, !dbg !111
  %361 = extractelement <4 x i1> %325, i64 3, !dbg !111
  %362 = select i1 %361, i8 6, i8 %354, !dbg !111
  %363 = extractelement <4 x i1> %334, i64 0, !dbg !112
  %364 = select i1 %363, i8 7, i8 %356, !dbg !112
  %365 = extractelement <4 x i1> %334, i64 1, !dbg !112
  %366 = select i1 %365, i8 7, i8 %358, !dbg !112
  %367 = extractelement <4 x i1> %334, i64 2, !dbg !112
  %368 = select i1 %367, i8 7, i8 %360, !dbg !112
  %369 = extractelement <4 x i1> %334, i64 3, !dbg !112
  %370 = select i1 %369, i8 7, i8 %362, !dbg !112
  %371 = extractelement <4 x i1> %343, i64 0, !dbg !113
  %372 = select i1 %371, i8 8, i8 %364, !dbg !113
  %373 = extractelement <4 x i1> %343, i64 1, !dbg !113
  %374 = select i1 %373, i8 8, i8 %366, !dbg !113
  %375 = extractelement <4 x i1> %343, i64 2, !dbg !113
  %376 = select i1 %375, i8 8, i8 %368, !dbg !113
  %377 = extractelement <4 x i1> %343, i64 3, !dbg !113
  %378 = select i1 %377, i8 8, i8 %370, !dbg !113
  %379 = fadd <4 x float> %61, %346, !dbg !114
  %380 = select <4 x i1> %59, <4 x float> %379, <4 x float> %61, !dbg !19
  %381 = add nuw nsw i64 %indvars.iv, %54, !dbg !115
  %382 = getelementptr float, ptr addrspace(1) %2, i64 %381, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %383 = extractelement <4 x float> %346, i64 0, !dbg !117
  %384 = bitcast float %383 to <1 x i32>, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %384, i1 true) #3, !dbg !117
  %385 = extractelement <4 x float> %346, i64 1, !dbg !117
  %386 = bitcast float %385 to <1 x i32>, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %386, i1 true) #3, !dbg !117
  %387 = extractelement <4 x float> %346, i64 2, !dbg !117
  %388 = bitcast float %387 to <1 x i32>, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %388, i1 true) #3, !dbg !117
  %389 = extractelement <4 x float> %346, i64 3, !dbg !117
  %390 = bitcast float %389 to <1 x i32>, !dbg !117
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %390, i1 true) #3, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %.extract = load i32, ptr addrspace(3) %48, align 16, !dbg !117
  %.extract10 = load i32, ptr addrspace(3) %55, align 4, !dbg !117
  %.extract11 = load i32, ptr addrspace(3) %56, align 8, !dbg !117
  %.extract12 = load i32, ptr addrspace(3) %57, align 4, !dbg !117
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %382, i1 %17) #3, !dbg !117
  %391 = getelementptr i8, ptr addrspace(1) %3, i64 %381, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %392 = insertelement <1 x i8> poison, i8 %372, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %49, <1 x i8> %392, i1 true) #3, !dbg !119
  %393 = insertelement <1 x i8> poison, i8 %374, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %50, <1 x i8> %393, i1 true) #3, !dbg !119
  %394 = insertelement <1 x i8> poison, i8 %376, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %51, <1 x i8> %394, i1 true) #3, !dbg !119
  %395 = insertelement <1 x i8> poison, i8 %378, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %52, <1 x i8> %395, i1 true) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %396 = load i32, ptr addrspace(3) %53, align 4, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %391, i1 %17) #3, !dbg !119
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !18
  %397 = icmp samesign ult i64 %indvars.iv, 248, !dbg !18
  br i1 %397, label %60, label %398, !dbg !18

398:                                              ; preds = %60
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %shift = shufflevector <4 x float> %380, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !124
  %399 = fadd <4 x float> %380, %shift, !dbg !124
  %shift28 = shufflevector <4 x float> %380, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !124
  %400 = fadd <4 x float> %shift28, %399, !dbg !124
  %shift29 = shufflevector <4 x float> %380, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !124
  %401 = fadd <4 x float> %shift29, %400, !dbg !124
  %402 = extractelement <4 x float> %401, i64 0, !dbg !124
  %403 = lshr i32 %9, 6, !dbg !120
  %404 = and i32 %403, 1, !dbg !120
  %405 = shl nuw nsw i32 %10, 1, !dbg !120
  %406 = or disjoint i32 %405, %404, !dbg !120
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %406, !dbg !120
  %408 = bitcast float %402 to <1 x i32>, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #3, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %409 = icmp slt i32 %9, 128, !dbg !120
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !120
  %411 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %410, i1 %409) #3, !dbg !120
  %412 = bitcast i32 %411 to float, !dbg !120
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !120
  %414 = bitcast i32 %413 to float, !dbg !120
  %415 = fadd float %412, %414, !dbg !124
  %416 = and i32 %9, 1, !dbg !120
  %417 = icmp eq i32 %416, 0, !dbg !120
  %418 = and i1 %409, %417, !dbg !120
  %419 = bitcast float %415 to <1 x i32>, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %419, i1 %418) #3, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %420 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !120
  %421 = load float, ptr addrspace(3) %420, align 8, !dbg !120
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float 2.560000e+02) #3, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %423 = sext i32 %14 to i64, !dbg !128
  %424 = getelementptr float, ptr addrspace(1) %0, i64 %423, !dbg !128
  %425 = icmp eq i32 %404, 0, !dbg !129
  %426 = bitcast float %422 to i32, !dbg !129
  %427 = and i1 %425, %16, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %426, ptr addrspace(1) %424, i1 %427) #3, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_pool2d_with_indices_mean_1", linkageName: "triton_red_fused_max_pool2d_with_indices_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 45, column: 63, scope: !7)
!17 = !DILocation(line: 114, column: 38, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 113, column: 48, scope: !7)
!20 = !DILocation(line: 32, column: 23, scope: !7)
!21 = !DILocation(line: 36, column: 23, scope: !7)
!22 = !DILocation(line: 40, column: 24, scope: !7)
!23 = !DILocation(line: 41, column: 23, scope: !7)
!24 = !DILocation(line: 44, column: 23, scope: !7)
!25 = !DILocation(line: 45, column: 53, scope: !7)
!26 = !DILocation(line: 45, column: 50, scope: !7)
!27 = !DILocation(line: 45, column: 58, scope: !7)
!28 = !DILocation(line: 45, column: 35, scope: !7)
!29 = !DILocation(line: 45, column: 84, scope: !7)
!30 = !DILocation(line: 45, column: 68, scope: !7)
!31 = !DILocation(line: 51, column: 50, scope: !7)
!32 = !DILocation(line: 51, column: 58, scope: !7)
!33 = !DILocation(line: 51, column: 35, scope: !7)
!34 = !DILocation(line: 51, column: 68, scope: !7)
!35 = !DILocation(line: 58, column: 50, scope: !7)
!36 = !DILocation(line: 58, column: 58, scope: !7)
!37 = !DILocation(line: 58, column: 35, scope: !7)
!38 = !DILocation(line: 58, column: 68, scope: !7)
!39 = !DILocation(line: 65, column: 49, scope: !7)
!40 = !DILocation(line: 65, column: 57, scope: !7)
!41 = !DILocation(line: 65, column: 35, scope: !7)
!42 = !DILocation(line: 65, column: 83, scope: !7)
!43 = !DILocation(line: 65, column: 67, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 52, column: 46, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 59, column: 46, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 66, column: 46, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!61 = !DILocation(line: 68, column: 42, scope: !7)
!62 = !DILocation(line: 68, column: 50, scope: !7)
!63 = !DILocation(line: 68, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 60, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !66)
!66 = !DILocation(line: 69, column: 46, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !66)
!69 = !DILocation(line: 71, column: 54, scope: !7)
!70 = !DILocation(line: 71, column: 35, scope: !7)
!71 = !DILocation(line: 71, column: 64, scope: !7)
!72 = !DILocation(line: 78, column: 40, scope: !7)
!73 = !DILocation(line: 78, column: 47, scope: !7)
!74 = !DILocation(line: 78, column: 55, scope: !7)
!75 = !DILocation(line: 78, column: 35, scope: !7)
!76 = !DILocation(line: 78, column: 65, scope: !7)
!77 = !DILocation(line: 81, column: 47, scope: !7)
!78 = !DILocation(line: 81, column: 55, scope: !7)
!79 = !DILocation(line: 81, column: 35, scope: !7)
!80 = !DILocation(line: 81, column: 65, scope: !7)
!81 = !DILocation(line: 84, column: 47, scope: !7)
!82 = !DILocation(line: 84, column: 55, scope: !7)
!83 = !DILocation(line: 84, column: 35, scope: !7)
!84 = !DILocation(line: 84, column: 65, scope: !7)
!85 = !DILocation(line: 89, column: 39, scope: !7)
!86 = !DILocation(line: 92, column: 39, scope: !7)
!87 = !DILocation(line: 95, column: 39, scope: !7)
!88 = !DILocation(line: 98, column: 39, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !66)
!90 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !91)
!91 = !DILocation(line: 72, column: 46, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !96)
!96 = !DILocation(line: 79, column: 46, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !101)
!101 = !DILocation(line: 82, column: 46, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !106)
!106 = !DILocation(line: 85, column: 46, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !106)
!110 = !DILocation(line: 101, column: 39, scope: !7)
!111 = !DILocation(line: 104, column: 39, scope: !7)
!112 = !DILocation(line: 107, column: 39, scope: !7)
!113 = !DILocation(line: 110, column: 39, scope: !7)
!114 = !DILocation(line: 112, column: 25, scope: !7)
!115 = !DILocation(line: 114, column: 34, scope: !7)
!116 = !DILocation(line: 114, column: 29, scope: !7)
!117 = !DILocation(line: 114, column: 50, scope: !7)
!118 = !DILocation(line: 115, column: 29, scope: !7)
!119 = !DILocation(line: 115, column: 50, scope: !7)
!120 = !DILocation(line: 267, column: 36, scope: !121, inlinedAt: !123)
!121 = distinct !DILexicalBlockFile(scope: !7, file: !122, discriminator: 0)
!122 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!123 = !DILocation(line: 116, column: 27, scope: !7)
!124 = !DILocation(line: 256, column: 15, scope: !125, inlinedAt: !123)
!125 = distinct !DILexicalBlockFile(scope: !121, file: !122, discriminator: 0)
!126 = !DILocation(line: 118, column: 20, scope: !7)
!127 = !DILocation(line: 119, column: 4, scope: !7)
!128 = !DILocation(line: 120, column: 28, scope: !7)
!129 = !DILocation(line: 120, column: 40, scope: !7)
!130 = !DILocation(line: 120, column: 4, scope: !7)
