; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sub_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %.lobit = and i32 %14, 1, !dbg !12
  %15 = shl i32 %13, 2, !dbg !12
  %16 = and i32 %15, 12, !dbg !12
  %17 = or disjoint i32 %12, %.lobit, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 4, !dbg !13
  %20 = or disjoint i32 %17, 6, !dbg !13
  %21 = or disjoint i32 %17, 8, !dbg !13
  %22 = or disjoint i32 %17, 10, !dbg !13
  %23 = or disjoint i32 %17, 12, !dbg !13
  %24 = or disjoint i32 %17, 14, !dbg !13
  %25 = or disjoint i32 %12, %16, !dbg !13
  %26 = icmp slt i32 %17, 16, !dbg !14
  %27 = icmp slt i32 %18, 16, !dbg !14
  %28 = icmp slt i32 %19, 16, !dbg !14
  %29 = icmp slt i32 %20, 16, !dbg !14
  %30 = icmp slt i32 %21, 16, !dbg !14
  %31 = icmp slt i32 %22, 16, !dbg !14
  %32 = icmp slt i32 %23, 16, !dbg !14
  %33 = icmp slt i32 %24, 16, !dbg !14
  %34 = icmp slt i32 %25, 16, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %36 = shl i32 %35, 6, !dbg !16
  %37 = and i32 %13, 63, !dbg !17
  %38 = lshr i32 %13, 2, !dbg !17
  %39 = and i32 %38, 31, !dbg !17
  %40 = or disjoint i32 %36, %37, !dbg !18
  %41 = or disjoint i32 %36, %39, !dbg !18
  %42 = or disjoint i32 %41, 32, !dbg !18
  %43 = icmp slt i32 %40, 64, !dbg !19
  %44 = icmp slt i32 %41, 64, !dbg !19
  %45 = icmp slt i32 %42, 64, !dbg !19
  %.frozen = freeze i32 %40, !dbg !20
  %46 = sdiv i32 %.frozen, 8, !dbg !20
  %47 = mul i32 %46, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %47, !dbg !21
  %48 = sext i32 %46 to i64, !dbg !22
  %49 = getelementptr i64, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %43) #2, !dbg !23
  %51 = sext i32 %.decomposed to i64, !dbg !24
  %52 = getelementptr i64, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %43) #2, !dbg !25
  %54 = getelementptr i64, ptr addrspace(1) %3, i64 %51, !dbg !26
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %43) #2, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %43) #2, !dbg !29
  %58 = getelementptr i64, ptr addrspace(1) %5, i64 %48, !dbg !30
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %43) #2, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !32
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %43) #2, !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = lshr i64 %50, 61, !dbg !34
  %64 = and i64 %63, 4, !dbg !34
  %65 = add i64 %64, %50, !dbg !34
  %66 = lshr i64 %53, 61, !dbg !35
  %67 = and i64 %66, 4, !dbg !35
  %68 = shl i64 %65, 2, !dbg !36
  %69 = shl i32 %17, 4, !dbg !37
  %70 = shl i32 %18, 4, !dbg !37
  %71 = shl i32 %19, 4, !dbg !37
  %72 = shl i32 %20, 4, !dbg !37
  %73 = shl i32 %21, 4, !dbg !37
  %74 = shl i32 %22, 4, !dbg !37
  %75 = shl i32 %23, 4, !dbg !37
  %76 = shl i32 %24, 4, !dbg !37
  %77 = sext i32 %69 to i64, !dbg !38
  %78 = sext i32 %70 to i64, !dbg !38
  %79 = sext i32 %71 to i64, !dbg !38
  %80 = sext i32 %72 to i64, !dbg !38
  %81 = sext i32 %73 to i64, !dbg !38
  %82 = sext i32 %74 to i64, !dbg !38
  %83 = sext i32 %75 to i64, !dbg !38
  %84 = sext i32 %76 to i64, !dbg !38
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !39
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %53, !dbg !39
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %68, !dbg !39
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %77, !dbg !39
  %89 = getelementptr float, ptr addrspace(1) %87, i64 %78, !dbg !39
  %90 = getelementptr float, ptr addrspace(1) %87, i64 %79, !dbg !39
  %91 = getelementptr float, ptr addrspace(1) %87, i64 %80, !dbg !39
  %92 = getelementptr float, ptr addrspace(1) %87, i64 %81, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %87, i64 %82, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %87, i64 %83, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %87, i64 %84, !dbg !39
  %96 = and i1 %26, %43, !dbg !40
  %97 = and i1 %27, %43, !dbg !40
  %98 = and i1 %28, %43, !dbg !40
  %99 = and i1 %29, %43, !dbg !40
  %100 = and i1 %30, %43, !dbg !40
  %101 = and i1 %31, %43, !dbg !40
  %102 = and i1 %32, %43, !dbg !40
  %103 = and i1 %33, %43, !dbg !40
  %104 = and i1 %34, %44, !dbg !40
  %105 = and i1 %45, %34, !dbg !40
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %96) #2, !dbg !41
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %97) #2, !dbg !41
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %98) #2, !dbg !41
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %99) #2, !dbg !41
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %100) #2, !dbg !41
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %101) #2, !dbg !41
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %102) #2, !dbg !41
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %103) #2, !dbg !41
  %114 = lshr i64 %55, 61, !dbg !42
  %115 = and i64 %114, 4, !dbg !42
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !43
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %55, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %68, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %77, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %118, i64 %78, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %118, i64 %79, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %118, i64 %80, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %118, i64 %81, !dbg !43
  %124 = getelementptr float, ptr addrspace(1) %118, i64 %82, !dbg !43
  %125 = getelementptr float, ptr addrspace(1) %118, i64 %83, !dbg !43
  %126 = getelementptr float, ptr addrspace(1) %118, i64 %84, !dbg !43
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %96) #2, !dbg !44
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %97) #2, !dbg !44
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %98) #2, !dbg !44
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %99) #2, !dbg !44
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %100) #2, !dbg !44
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %101) #2, !dbg !44
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %102) #2, !dbg !44
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %103) #2, !dbg !44
  %135 = lshr i64 %59, 61, !dbg !45
  %136 = and i64 %135, 4, !dbg !45
  %137 = add i64 %136, %59, !dbg !45
  %138 = shl i64 %137, 2, !dbg !46
  %139 = getelementptr float, ptr addrspace(1) %86, i64 %138, !dbg !47
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %77, !dbg !47
  %141 = getelementptr float, ptr addrspace(1) %139, i64 %78, !dbg !47
  %142 = getelementptr float, ptr addrspace(1) %139, i64 %79, !dbg !47
  %143 = getelementptr float, ptr addrspace(1) %139, i64 %80, !dbg !47
  %144 = getelementptr float, ptr addrspace(1) %139, i64 %81, !dbg !47
  %145 = getelementptr float, ptr addrspace(1) %139, i64 %82, !dbg !47
  %146 = getelementptr float, ptr addrspace(1) %139, i64 %83, !dbg !47
  %147 = getelementptr float, ptr addrspace(1) %139, i64 %84, !dbg !47
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %96) #2, !dbg !48
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %97) #2, !dbg !48
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %98) #2, !dbg !48
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %99) #2, !dbg !48
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %100) #2, !dbg !48
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %101) #2, !dbg !48
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %102) #2, !dbg !48
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %103) #2, !dbg !48
  %156 = getelementptr float, ptr addrspace(1) %117, i64 %138, !dbg !49
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %77, !dbg !49
  %158 = getelementptr float, ptr addrspace(1) %156, i64 %78, !dbg !49
  %159 = getelementptr float, ptr addrspace(1) %156, i64 %79, !dbg !49
  %160 = getelementptr float, ptr addrspace(1) %156, i64 %80, !dbg !49
  %161 = getelementptr float, ptr addrspace(1) %156, i64 %81, !dbg !49
  %162 = getelementptr float, ptr addrspace(1) %156, i64 %82, !dbg !49
  %163 = getelementptr float, ptr addrspace(1) %156, i64 %83, !dbg !49
  %164 = getelementptr float, ptr addrspace(1) %156, i64 %84, !dbg !49
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %96) #2, !dbg !50
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %97) #2, !dbg !50
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %98) #2, !dbg !50
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %99) #2, !dbg !50
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %100) #2, !dbg !50
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %101) #2, !dbg !50
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %102) #2, !dbg !50
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %103) #2, !dbg !50
  %173 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !48
  %174 = insertelement <2 x i32> %173, i32 %106, i64 1, !dbg !48
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !48
  %176 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !50
  %177 = insertelement <2 x i32> %176, i32 %127, i64 1, !dbg !50
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !50
  %179 = fsub <2 x float> %178, %175, !dbg !51
  %180 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !52
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !52
  %182 = shufflevector <2 x float> %181, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %183 = fmul <2 x float> %179, %182, !dbg !52
  %184 = fadd <2 x float> %183, %175, !dbg !53
  %185 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !48
  %186 = insertelement <2 x i32> %185, i32 %107, i64 1, !dbg !48
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !48
  %188 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !50
  %189 = insertelement <2 x i32> %188, i32 %128, i64 1, !dbg !50
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !50
  %191 = fsub <2 x float> %190, %187, !dbg !51
  %192 = fmul <2 x float> %191, %182, !dbg !52
  %193 = fadd <2 x float> %192, %187, !dbg !53
  %194 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !48
  %195 = insertelement <2 x i32> %194, i32 %108, i64 1, !dbg !48
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !48
  %197 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !50
  %198 = insertelement <2 x i32> %197, i32 %129, i64 1, !dbg !50
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !50
  %200 = fsub <2 x float> %199, %196, !dbg !51
  %201 = fmul <2 x float> %200, %182, !dbg !52
  %202 = fadd <2 x float> %201, %196, !dbg !53
  %203 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !48
  %204 = insertelement <2 x i32> %203, i32 %109, i64 1, !dbg !48
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !48
  %206 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !50
  %207 = insertelement <2 x i32> %206, i32 %130, i64 1, !dbg !50
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !50
  %209 = fsub <2 x float> %208, %205, !dbg !51
  %210 = fmul <2 x float> %209, %182, !dbg !52
  %211 = fadd <2 x float> %210, %205, !dbg !53
  %212 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !48
  %213 = insertelement <2 x i32> %212, i32 %110, i64 1, !dbg !48
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !48
  %215 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !50
  %216 = insertelement <2 x i32> %215, i32 %131, i64 1, !dbg !50
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !50
  %218 = fsub <2 x float> %217, %214, !dbg !51
  %219 = fmul <2 x float> %218, %182, !dbg !52
  %220 = fadd <2 x float> %219, %214, !dbg !53
  %221 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !48
  %222 = insertelement <2 x i32> %221, i32 %111, i64 1, !dbg !48
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !48
  %224 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !50
  %225 = insertelement <2 x i32> %224, i32 %132, i64 1, !dbg !50
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !50
  %227 = fsub <2 x float> %226, %223, !dbg !51
  %228 = fmul <2 x float> %227, %182, !dbg !52
  %229 = fadd <2 x float> %228, %223, !dbg !53
  %230 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !48
  %231 = insertelement <2 x i32> %230, i32 %112, i64 1, !dbg !48
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !48
  %233 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !50
  %234 = insertelement <2 x i32> %233, i32 %133, i64 1, !dbg !50
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !50
  %236 = fsub <2 x float> %235, %232, !dbg !51
  %237 = fmul <2 x float> %236, %182, !dbg !52
  %238 = fadd <2 x float> %237, %232, !dbg !53
  %239 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !48
  %240 = insertelement <2 x i32> %239, i32 %113, i64 1, !dbg !48
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !48
  %242 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !50
  %243 = insertelement <2 x i32> %242, i32 %134, i64 1, !dbg !50
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !50
  %245 = fsub <2 x float> %244, %241, !dbg !51
  %246 = fmul <2 x float> %245, %182, !dbg !52
  %247 = fadd <2 x float> %246, %241, !dbg !53
  %248 = extractelement <2 x float> %184, i64 0, !dbg !54
  %249 = extractelement <2 x float> %184, i64 1, !dbg !55
  %250 = fsub float %248, %249, !dbg !54
  %251 = extractelement <2 x float> %193, i64 0, !dbg !54
  %252 = extractelement <2 x float> %193, i64 1, !dbg !55
  %253 = fsub float %251, %252, !dbg !54
  %254 = extractelement <2 x float> %202, i64 0, !dbg !54
  %255 = extractelement <2 x float> %202, i64 1, !dbg !55
  %256 = fsub float %254, %255, !dbg !54
  %257 = extractelement <2 x float> %211, i64 0, !dbg !54
  %258 = extractelement <2 x float> %211, i64 1, !dbg !55
  %259 = fsub float %257, %258, !dbg !54
  %260 = extractelement <2 x float> %220, i64 0, !dbg !54
  %261 = extractelement <2 x float> %220, i64 1, !dbg !55
  %262 = fsub float %260, %261, !dbg !54
  %263 = extractelement <2 x float> %229, i64 0, !dbg !54
  %264 = extractelement <2 x float> %229, i64 1, !dbg !55
  %265 = fsub float %263, %264, !dbg !54
  %266 = extractelement <2 x float> %238, i64 0, !dbg !54
  %267 = extractelement <2 x float> %238, i64 1, !dbg !55
  %268 = fsub float %266, %267, !dbg !54
  %269 = extractelement <2 x float> %247, i64 0, !dbg !54
  %270 = extractelement <2 x float> %247, i64 1, !dbg !55
  %271 = fsub float %269, %270, !dbg !54
  %272 = fmul float %250, %62, !dbg !56
  %273 = fmul float %253, %62, !dbg !56
  %274 = fmul float %256, %62, !dbg !56
  %275 = fmul float %259, %62, !dbg !56
  %276 = fmul float %262, %62, !dbg !56
  %277 = fmul float %265, %62, !dbg !56
  %278 = fmul float %268, %62, !dbg !56
  %279 = fmul float %271, %62, !dbg !56
  %280 = fadd float %249, %272, !dbg !55
  %281 = fadd float %252, %273, !dbg !55
  %282 = fadd float %255, %274, !dbg !55
  %283 = fadd float %258, %275, !dbg !55
  %284 = fadd float %261, %276, !dbg !55
  %285 = fadd float %264, %277, !dbg !55
  %286 = fadd float %267, %278, !dbg !55
  %287 = fadd float %270, %279, !dbg !55
  %288 = shl i32 %41, 2, !dbg !57
  %289 = shl i32 %42, 2, !dbg !57
  %290 = shl i32 %25, 6, !dbg !58
  %291 = add i32 %288, %290, !dbg !59
  %292 = add i32 %290, %289, !dbg !59
  %293 = sext i32 %291 to i64, !dbg !60
  %294 = getelementptr float, ptr addrspace(1) %7, i64 %293, !dbg !60
  %295 = sext i32 %292 to i64, !dbg !60
  %296 = getelementptr float, ptr addrspace(1) %7, i64 %295, !dbg !60
  %297 = shl i32 %13, 4, !dbg !61
  %298 = and i32 %297, 1008, !dbg !61
  %299 = or disjoint i32 %298, %.lobit, !dbg !61
  %300 = and i32 %15, 508, !dbg !61
  %301 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %298, !dbg !61
  %302 = getelementptr float, ptr addrspace(3) %301, i32 %299, !dbg !61
  %303 = bitcast float %280 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #2, !dbg !61
  %304 = or disjoint i32 %299, 2, !dbg !61
  %305 = getelementptr float, ptr addrspace(3) %301, i32 %304, !dbg !61
  %306 = bitcast float %281 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #2, !dbg !61
  %307 = or disjoint i32 %299, 4, !dbg !61
  %308 = getelementptr float, ptr addrspace(3) %301, i32 %307, !dbg !61
  %309 = bitcast float %282 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #2, !dbg !61
  %310 = or disjoint i32 %299, 6, !dbg !61
  %311 = getelementptr float, ptr addrspace(3) %301, i32 %310, !dbg !61
  %312 = bitcast float %283 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #2, !dbg !61
  %313 = or disjoint i32 %299, 8, !dbg !61
  %314 = getelementptr float, ptr addrspace(3) %301, i32 %313, !dbg !61
  %315 = bitcast float %284 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #2, !dbg !61
  %316 = or disjoint i32 %299, 10, !dbg !61
  %317 = getelementptr float, ptr addrspace(3) %301, i32 %316, !dbg !61
  %318 = bitcast float %285 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !61
  %319 = or disjoint i32 %299, 12, !dbg !61
  %320 = getelementptr float, ptr addrspace(3) %301, i32 %319, !dbg !61
  %321 = bitcast float %286 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #2, !dbg !61
  %322 = or disjoint i32 %299, 14, !dbg !61
  %323 = getelementptr float, ptr addrspace(3) %301, i32 %322, !dbg !61
  %324 = bitcast float %287 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #2, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %325 = and i32 %13, 124, !dbg !61
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !61
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %300, !dbg !61
  %328 = or disjoint i32 %300, 512, !dbg !61
  %329 = lshr exact i32 %328, 2, !dbg !61
  %330 = and i32 %329, 252, !dbg !61
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %330, !dbg !61
  %332 = getelementptr inbounds float, ptr addrspace(3) %331, i32 %328, !dbg !61
  %333 = load <4 x i32>, ptr addrspace(3) %332, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %327, align 16, !dbg !61
  %334 = getelementptr inbounds i8, ptr addrspace(3) %327, i32 4, !dbg !61
  %.extract12 = load i32, ptr addrspace(3) %334, align 4, !dbg !61
  %335 = getelementptr inbounds i8, ptr addrspace(3) %327, i32 8, !dbg !61
  %.extract13 = load i32, ptr addrspace(3) %335, align 8, !dbg !61
  %336 = getelementptr inbounds i8, ptr addrspace(3) %327, i32 12, !dbg !61
  %.extract14 = load i32, ptr addrspace(3) %336, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %294, i1 %104) #2, !dbg !61
  %.extract15 = extractelement <4 x i32> %333, i64 0, !dbg !61
  %.extract16 = extractelement <4 x i32> %333, i64 1, !dbg !61
  %.extract17 = extractelement <4 x i32> %333, i64 2, !dbg !61
  %.extract18 = extractelement <4 x i32> %333, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %296, i1 %105) #2, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr5wik46bu77lp74unegitkntspjmgac5rkji7mpr3fs42s3d2b.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_48", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 46, column: 32, scope: !7)
!36 = !DILocation(line: 47, column: 39, scope: !7)
!37 = !DILocation(line: 47, column: 49, scope: !7)
!38 = !DILocation(line: 47, column: 46, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !7)
!40 = !DILocation(line: 47, column: 62, scope: !7)
!41 = !DILocation(line: 47, column: 54, scope: !7)
!42 = !DILocation(line: 50, column: 35, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 56, scope: !7)
!45 = !DILocation(line: 57, column: 35, scope: !7)
!46 = !DILocation(line: 58, column: 40, scope: !7)
!47 = !DILocation(line: 58, column: 31, scope: !7)
!48 = !DILocation(line: 58, column: 56, scope: !7)
!49 = !DILocation(line: 59, column: 31, scope: !7)
!50 = !DILocation(line: 59, column: 57, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 32, scope: !7)
!58 = !DILocation(line: 66, column: 41, scope: !7)
!59 = !DILocation(line: 66, column: 37, scope: !7)
!60 = !DILocation(line: 66, column: 25, scope: !7)
!61 = !DILocation(line: 66, column: 53, scope: !7)
!62 = !DILocation(line: 66, column: 4, scope: !7)
