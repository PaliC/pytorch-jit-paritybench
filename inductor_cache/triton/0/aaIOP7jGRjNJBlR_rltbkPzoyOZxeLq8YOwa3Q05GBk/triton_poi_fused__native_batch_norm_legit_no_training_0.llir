; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 40, !dbg !14
  %17 = srem i32 %15, 10, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %16) #3, !dbg !17
  %21 = sext i32 %17 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !20
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %16) #3, !dbg !21
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = bitcast i32 %27 to float, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !26
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %16) #3, !dbg !27
  %36 = fadd float %28, 0x3EE4F8B580000000, !dbg !28
  %37 = fadd float %29, 0x3EE4F8B580000000, !dbg !28
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %38, 0, !dbg !29
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %39, 0, !dbg !29
  br i1 %.not.i, label %45, label %40, !dbg !29

40:                                               ; preds = %9
  br i1 %.not1.i, label %43, label %41, !dbg !29

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

45:                                               ; preds = %9
  br i1 %.not1.i, label %48, label %46, !dbg !29

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %41, %43, %46, %48
  %.0.i = phi float [ %42, %41 ], [ %44, %43 ], [ %47, %46 ], [ %49, %48 ], !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %50, 0, !dbg !29
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %51, 0, !dbg !29
  br i1 %.not.i1, label %57, label %52, !dbg !29

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !29

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !29

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %53, %55, %58, %60
  %.0.i3 = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !29
  %62 = extractvalue { i32, i32 } %20, 1, !dbg !17
  %63 = bitcast i32 %62 to float, !dbg !17
  %64 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %65 = bitcast i32 %64 to float, !dbg !19
  %66 = fsub float %63, %65, !dbg !30
  %67 = extractvalue { i32, i32 } %20, 0, !dbg !17
  %68 = bitcast i32 %67 to float, !dbg !17
  %69 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %70 = bitcast i32 %69 to float, !dbg !19
  %71 = fsub float %68, %70, !dbg !30
  %72 = extractvalue { i32, i32 } %35, 1, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = extractvalue { i32, i32 } %35, 0, !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %79 = bitcast i32 %78 to float, !dbg !25
  %80 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %81 = bitcast i32 %80 to float, !dbg !23
  %82 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %83 = bitcast i32 %82 to float, !dbg !23
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %86 = fmul float %71, %84, !dbg !32
  %87 = fmul float %66, %85, !dbg !32
  %88 = fmul float %86, %83, !dbg !33
  %89 = fmul float %87, %81, !dbg !33
  %90 = fadd float %88, %79, !dbg !34
  %91 = fadd float %89, %77, !dbg !34
  %92 = fsub float %75, %70, !dbg !35
  %93 = fsub float %73, %65, !dbg !35
  %94 = fmul float %92, %84, !dbg !36
  %95 = fmul float %93, %85, !dbg !36
  %96 = fmul float %94, %83, !dbg !37
  %97 = fmul float %95, %81, !dbg !37
  %98 = fadd float %96, %79, !dbg !38
  %99 = fadd float %97, %77, !dbg !38
  %100 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !39
  %101 = bitcast float %90 to i32, !dbg !40
  %102 = bitcast float %91 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %16) #3, !dbg !40
  %103 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !41
  %104 = bitcast float %98 to i32, !dbg !42
  %105 = bitcast float %99 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %105, ptr addrspace(1) %103, i1 %16) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cklh3ljipyx3relmue2vbq3vio3ryf55zikkfxmismbemplxr3ja.py", directory: "inductor_cache/kl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 26, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 25, scope: !7)
!40 = !DILocation(line: 47, column: 37, scope: !7)
!41 = !DILocation(line: 48, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 37, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
