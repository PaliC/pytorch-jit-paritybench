; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 10, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 2, !dbg !12
  %22 = and i32 %21, 508, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 512, !dbg !13
  %25 = srem i32 %23, 32, !dbg !14
  %26 = sext i32 %23 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !15
  %28 = sext i32 %24 to i64, !dbg !15
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !15
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !16
  %32 = sext i32 %25 to i64, !dbg !17
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !20
  %51 = bitcast i32 %47 to float, !dbg !20
  %52 = bitcast i32 %48 to float, !dbg !20
  %53 = bitcast i32 %49 to float, !dbg !20
  %54 = bitcast i32 %50 to float, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !23
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !28
  %68 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !29
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !30
  %74 = bitcast i32 %70 to float, !dbg !30
  %75 = bitcast i32 %71 to float, !dbg !30
  %76 = bitcast i32 %72 to float, !dbg !30
  %77 = bitcast i32 %73 to float, !dbg !30
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = bitcast i32 %79 to float, !dbg !30
  %84 = bitcast i32 %80 to float, !dbg !30
  %85 = bitcast i32 %81 to float, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !31
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !32
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !33
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !34
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !34
  %93 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !35
  %94 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !35
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !36
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !37
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !38
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !38
  %100 = getelementptr float, ptr addrspace(1) %13, i64 %32, !dbg !39
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !40
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !40
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !40
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !40
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !40
  %106 = bitcast i32 %102 to float, !dbg !40
  %107 = bitcast i32 %103 to float, !dbg !40
  %108 = bitcast i32 %104 to float, !dbg !40
  %109 = bitcast i32 %105 to float, !dbg !40
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !40
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !40
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !40
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !40
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !40
  %115 = bitcast i32 %111 to float, !dbg !40
  %116 = bitcast i32 %112 to float, !dbg !40
  %117 = bitcast i32 %113 to float, !dbg !40
  %118 = bitcast i32 %114 to float, !dbg !40
  %119 = getelementptr float, ptr addrspace(1) %14, i64 %32, !dbg !41
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !42
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !42
  %122 = getelementptr float, ptr addrspace(1) %15, i64 %32, !dbg !43
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !44
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !44
  %125 = fadd float %42, 0x3EE4F8B580000000, !dbg !45
  %126 = fadd float %43, 0x3EE4F8B580000000, !dbg !45
  %127 = fadd float %44, 0x3EE4F8B580000000, !dbg !45
  %128 = fadd float %45, 0x3EE4F8B580000000, !dbg !45
  %129 = fadd float %51, 0x3EE4F8B580000000, !dbg !45
  %130 = fadd float %52, 0x3EE4F8B580000000, !dbg !45
  %131 = fadd float %53, 0x3EE4F8B580000000, !dbg !45
  %132 = fadd float %54, 0x3EE4F8B580000000, !dbg !45
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %133, 0, !dbg !46
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %134, 0, !dbg !46
  br i1 %.not.i, label %140, label %135, !dbg !46

135:                                              ; preds = %17
  br i1 %.not1.i, label %138, label %136, !dbg !46

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

140:                                              ; preds = %17
  br i1 %.not1.i, label %143, label %141, !dbg !46

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !46
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %145, 0, !dbg !46
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %146, 0, !dbg !46
  br i1 %.not.i1, label %152, label %147, !dbg !46

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !46

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %155, label %153, !dbg !46

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %148, %150, %153, %155
  %.0.i3 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !46
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %157, 0, !dbg !46
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %158, 0, !dbg !46
  br i1 %.not.i6, label %164, label %159, !dbg !46

159:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %162, label %160, !dbg !46

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

164:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %167, label %165, !dbg !46

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %160, %162, %165, %167
  %.0.i8 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !46
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %169, 0, !dbg !46
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %170, 0, !dbg !46
  br i1 %.not.i11, label %176, label %171, !dbg !46

171:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %174, label %172, !dbg !46

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

176:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %179, label %177, !dbg !46

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %172, %174, %177, %179
  %.0.i13 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !46
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i16 = icmp eq i32 %181, 0, !dbg !46
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i19 = icmp eq i32 %182, 0, !dbg !46
  br i1 %.not.i16, label %188, label %183, !dbg !46

183:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %186, label %184, !dbg !46

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

188:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %191, label %189, !dbg !46

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

__nv_sqrtf.exit20:                                ; preds = %184, %186, %189, %191
  %.0.i18 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !46
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i21 = icmp eq i32 %193, 0, !dbg !46
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i24 = icmp eq i32 %194, 0, !dbg !46
  br i1 %.not.i21, label %200, label %195, !dbg !46

195:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %198, label %196, !dbg !46

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

200:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %203, label %201, !dbg !46

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

__nv_sqrtf.exit25:                                ; preds = %196, %198, %201, %203
  %.0.i23 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !46
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i26 = icmp eq i32 %205, 0, !dbg !46
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i29 = icmp eq i32 %206, 0, !dbg !46
  br i1 %.not.i26, label %212, label %207, !dbg !46

207:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %210, label %208, !dbg !46

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

212:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %215, label %213, !dbg !46

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

__nv_sqrtf.exit30:                                ; preds = %208, %210, %213, %215
  %.0.i28 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !46
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i31 = icmp eq i32 %217, 0, !dbg !46
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i34 = icmp eq i32 %218, 0, !dbg !46
  br i1 %.not.i31, label %224, label %219, !dbg !46

219:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %222, label %220, !dbg !46

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

224:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %227, label %225, !dbg !46

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

__nv_sqrtf.exit35:                                ; preds = %220, %222, %225, %227
  %.0.i33 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !46
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !47
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !47
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !47
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !47
  %237 = fadd float %74, 0x3EE4F8B580000000, !dbg !48
  %238 = fadd float %75, 0x3EE4F8B580000000, !dbg !48
  %239 = fadd float %76, 0x3EE4F8B580000000, !dbg !48
  %240 = fadd float %77, 0x3EE4F8B580000000, !dbg !48
  %241 = fadd float %83, 0x3EE4F8B580000000, !dbg !48
  %242 = fadd float %84, 0x3EE4F8B580000000, !dbg !48
  %243 = fadd float %85, 0x3EE4F8B580000000, !dbg !48
  %244 = fadd float %86, 0x3EE4F8B580000000, !dbg !48
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i36 = icmp eq i32 %245, 0, !dbg !49
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i39 = icmp eq i32 %246, 0, !dbg !49
  br i1 %.not.i36, label %252, label %247, !dbg !49

247:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %250, label %248, !dbg !49

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %237) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %237) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

252:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %255, label %253, !dbg !49

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %237) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %237) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

__nv_sqrtf.exit40:                                ; preds = %248, %250, %253, %255
  %.0.i38 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !49
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i41 = icmp eq i32 %257, 0, !dbg !49
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i44 = icmp eq i32 %258, 0, !dbg !49
  br i1 %.not.i41, label %264, label %259, !dbg !49

259:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %262, label %260, !dbg !49

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %238) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %238) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

264:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %267, label %265, !dbg !49

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %238) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %238) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

__nv_sqrtf.exit45:                                ; preds = %260, %262, %265, %267
  %.0.i43 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !49
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i46 = icmp eq i32 %269, 0, !dbg !49
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i49 = icmp eq i32 %270, 0, !dbg !49
  br i1 %.not.i46, label %276, label %271, !dbg !49

271:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %274, label %272, !dbg !49

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %239) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %239) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

276:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %279, label %277, !dbg !49

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %239) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %239) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

__nv_sqrtf.exit50:                                ; preds = %272, %274, %277, %279
  %.0.i48 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !49
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i51 = icmp eq i32 %281, 0, !dbg !49
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i54 = icmp eq i32 %282, 0, !dbg !49
  br i1 %.not.i51, label %288, label %283, !dbg !49

283:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %286, label %284, !dbg !49

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

288:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %291, label %289, !dbg !49

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

__nv_sqrtf.exit55:                                ; preds = %284, %286, %289, %291
  %.0.i53 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !49
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i56 = icmp eq i32 %293, 0, !dbg !49
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i59 = icmp eq i32 %294, 0, !dbg !49
  br i1 %.not.i56, label %300, label %295, !dbg !49

295:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %298, label %296, !dbg !49

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %241) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %241) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

300:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %303, label %301, !dbg !49

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %241) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %241) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

__nv_sqrtf.exit60:                                ; preds = %296, %298, %301, %303
  %.0.i58 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !49
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i61 = icmp eq i32 %305, 0, !dbg !49
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i64 = icmp eq i32 %306, 0, !dbg !49
  br i1 %.not.i61, label %312, label %307, !dbg !49

307:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %310, label %308, !dbg !49

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %242) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %242) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

312:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %315, label %313, !dbg !49

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.f(float %242) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.f(float %242) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

__nv_sqrtf.exit65:                                ; preds = %308, %310, %313, %315
  %.0.i63 = phi float [ %309, %308 ], [ %311, %310 ], [ %314, %313 ], [ %316, %315 ], !dbg !49
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i66 = icmp eq i32 %317, 0, !dbg !49
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i69 = icmp eq i32 %318, 0, !dbg !49
  br i1 %.not.i66, label %324, label %319, !dbg !49

319:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %322, label %320, !dbg !49

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %243) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %243) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

324:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %327, label %325, !dbg !49

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.f(float %243) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.f(float %243) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

__nv_sqrtf.exit70:                                ; preds = %320, %322, %325, %327
  %.0.i68 = phi float [ %321, %320 ], [ %323, %322 ], [ %326, %325 ], [ %328, %327 ], !dbg !49
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i71 = icmp eq i32 %329, 0, !dbg !49
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i74 = icmp eq i32 %330, 0, !dbg !49
  br i1 %.not.i71, label %336, label %331, !dbg !49

331:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %334, label %332, !dbg !49

332:                                              ; preds = %331
  %333 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %244) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

334:                                              ; preds = %331
  %335 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %244) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

336:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %339, label %337, !dbg !49

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.f(float %244) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.f(float %244) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

__nv_sqrtf.exit75:                                ; preds = %332, %334, %337, %339
  %.0.i73 = phi float [ %333, %332 ], [ %335, %334 ], [ %338, %337 ], [ %340, %339 ], !dbg !49
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !50
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !50
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !50
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !50
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !50
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !50
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !50
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !50
  %349 = fadd float %106, 0x3EE4F8B580000000, !dbg !51
  %350 = fadd float %107, 0x3EE4F8B580000000, !dbg !51
  %351 = fadd float %108, 0x3EE4F8B580000000, !dbg !51
  %352 = fadd float %109, 0x3EE4F8B580000000, !dbg !51
  %353 = fadd float %115, 0x3EE4F8B580000000, !dbg !51
  %354 = fadd float %116, 0x3EE4F8B580000000, !dbg !51
  %355 = fadd float %117, 0x3EE4F8B580000000, !dbg !51
  %356 = fadd float %118, 0x3EE4F8B580000000, !dbg !51
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i76 = icmp eq i32 %357, 0, !dbg !52
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i79 = icmp eq i32 %358, 0, !dbg !52
  br i1 %.not.i76, label %364, label %359, !dbg !52

359:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %362, label %360, !dbg !52

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %349) #3, !dbg !52
  br label %__nv_sqrtf.exit80, !dbg !52

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %349) #3, !dbg !52
  br label %__nv_sqrtf.exit80, !dbg !52

364:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %367, label %365, !dbg !52

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.f(float %349) #3, !dbg !52
  br label %__nv_sqrtf.exit80, !dbg !52

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.f(float %349) #3, !dbg !52
  br label %__nv_sqrtf.exit80, !dbg !52

__nv_sqrtf.exit80:                                ; preds = %360, %362, %365, %367
  %.0.i78 = phi float [ %361, %360 ], [ %363, %362 ], [ %366, %365 ], [ %368, %367 ], !dbg !52
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i81 = icmp eq i32 %369, 0, !dbg !52
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i84 = icmp eq i32 %370, 0, !dbg !52
  br i1 %.not.i81, label %376, label %371, !dbg !52

371:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %374, label %372, !dbg !52

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %350) #3, !dbg !52
  br label %__nv_sqrtf.exit85, !dbg !52

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %350) #3, !dbg !52
  br label %__nv_sqrtf.exit85, !dbg !52

376:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %379, label %377, !dbg !52

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.f(float %350) #3, !dbg !52
  br label %__nv_sqrtf.exit85, !dbg !52

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.f(float %350) #3, !dbg !52
  br label %__nv_sqrtf.exit85, !dbg !52

__nv_sqrtf.exit85:                                ; preds = %372, %374, %377, %379
  %.0.i83 = phi float [ %373, %372 ], [ %375, %374 ], [ %378, %377 ], [ %380, %379 ], !dbg !52
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i86 = icmp eq i32 %381, 0, !dbg !52
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i89 = icmp eq i32 %382, 0, !dbg !52
  br i1 %.not.i86, label %388, label %383, !dbg !52

383:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %386, label %384, !dbg !52

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %351) #3, !dbg !52
  br label %__nv_sqrtf.exit90, !dbg !52

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %351) #3, !dbg !52
  br label %__nv_sqrtf.exit90, !dbg !52

388:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %391, label %389, !dbg !52

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.f(float %351) #3, !dbg !52
  br label %__nv_sqrtf.exit90, !dbg !52

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.f(float %351) #3, !dbg !52
  br label %__nv_sqrtf.exit90, !dbg !52

__nv_sqrtf.exit90:                                ; preds = %384, %386, %389, %391
  %.0.i88 = phi float [ %385, %384 ], [ %387, %386 ], [ %390, %389 ], [ %392, %391 ], !dbg !52
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i91 = icmp eq i32 %393, 0, !dbg !52
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i94 = icmp eq i32 %394, 0, !dbg !52
  br i1 %.not.i91, label %400, label %395, !dbg !52

395:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %398, label %396, !dbg !52

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %352) #3, !dbg !52
  br label %__nv_sqrtf.exit95, !dbg !52

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %352) #3, !dbg !52
  br label %__nv_sqrtf.exit95, !dbg !52

400:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %403, label %401, !dbg !52

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.f(float %352) #3, !dbg !52
  br label %__nv_sqrtf.exit95, !dbg !52

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.f(float %352) #3, !dbg !52
  br label %__nv_sqrtf.exit95, !dbg !52

__nv_sqrtf.exit95:                                ; preds = %396, %398, %401, %403
  %.0.i93 = phi float [ %397, %396 ], [ %399, %398 ], [ %402, %401 ], [ %404, %403 ], !dbg !52
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i96 = icmp eq i32 %405, 0, !dbg !52
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i99 = icmp eq i32 %406, 0, !dbg !52
  br i1 %.not.i96, label %412, label %407, !dbg !52

407:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %410, label %408, !dbg !52

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %353) #3, !dbg !52
  br label %__nv_sqrtf.exit100, !dbg !52

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %353) #3, !dbg !52
  br label %__nv_sqrtf.exit100, !dbg !52

412:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %415, label %413, !dbg !52

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.f(float %353) #3, !dbg !52
  br label %__nv_sqrtf.exit100, !dbg !52

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.f(float %353) #3, !dbg !52
  br label %__nv_sqrtf.exit100, !dbg !52

__nv_sqrtf.exit100:                               ; preds = %408, %410, %413, %415
  %.0.i98 = phi float [ %409, %408 ], [ %411, %410 ], [ %414, %413 ], [ %416, %415 ], !dbg !52
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i101 = icmp eq i32 %417, 0, !dbg !52
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i104 = icmp eq i32 %418, 0, !dbg !52
  br i1 %.not.i101, label %424, label %419, !dbg !52

419:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %422, label %420, !dbg !52

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %354) #3, !dbg !52
  br label %__nv_sqrtf.exit105, !dbg !52

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %354) #3, !dbg !52
  br label %__nv_sqrtf.exit105, !dbg !52

424:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %427, label %425, !dbg !52

425:                                              ; preds = %424
  %426 = tail call float @llvm.nvvm.sqrt.rn.f(float %354) #3, !dbg !52
  br label %__nv_sqrtf.exit105, !dbg !52

427:                                              ; preds = %424
  %428 = tail call float @llvm.nvvm.sqrt.approx.f(float %354) #3, !dbg !52
  br label %__nv_sqrtf.exit105, !dbg !52

__nv_sqrtf.exit105:                               ; preds = %420, %422, %425, %427
  %.0.i103 = phi float [ %421, %420 ], [ %423, %422 ], [ %426, %425 ], [ %428, %427 ], !dbg !52
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i106 = icmp eq i32 %429, 0, !dbg !52
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i109 = icmp eq i32 %430, 0, !dbg !52
  br i1 %.not.i106, label %436, label %431, !dbg !52

431:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %434, label %432, !dbg !52

432:                                              ; preds = %431
  %433 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %355) #3, !dbg !52
  br label %__nv_sqrtf.exit110, !dbg !52

434:                                              ; preds = %431
  %435 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %355) #3, !dbg !52
  br label %__nv_sqrtf.exit110, !dbg !52

436:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %439, label %437, !dbg !52

437:                                              ; preds = %436
  %438 = tail call float @llvm.nvvm.sqrt.rn.f(float %355) #3, !dbg !52
  br label %__nv_sqrtf.exit110, !dbg !52

439:                                              ; preds = %436
  %440 = tail call float @llvm.nvvm.sqrt.approx.f(float %355) #3, !dbg !52
  br label %__nv_sqrtf.exit110, !dbg !52

__nv_sqrtf.exit110:                               ; preds = %432, %434, %437, %439
  %.0.i108 = phi float [ %433, %432 ], [ %435, %434 ], [ %438, %437 ], [ %440, %439 ], !dbg !52
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i111 = icmp eq i32 %441, 0, !dbg !52
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i114 = icmp eq i32 %442, 0, !dbg !52
  br i1 %.not.i111, label %448, label %443, !dbg !52

443:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %446, label %444, !dbg !52

444:                                              ; preds = %443
  %445 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %356) #3, !dbg !52
  br label %__nv_sqrtf.exit115, !dbg !52

446:                                              ; preds = %443
  %447 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %356) #3, !dbg !52
  br label %__nv_sqrtf.exit115, !dbg !52

448:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %451, label %449, !dbg !52

449:                                              ; preds = %448
  %450 = tail call float @llvm.nvvm.sqrt.rn.f(float %356) #3, !dbg !52
  br label %__nv_sqrtf.exit115, !dbg !52

451:                                              ; preds = %448
  %452 = tail call float @llvm.nvvm.sqrt.approx.f(float %356) #3, !dbg !52
  br label %__nv_sqrtf.exit115, !dbg !52

__nv_sqrtf.exit115:                               ; preds = %444, %446, %449, %451
  %.0.i113 = phi float [ %445, %444 ], [ %447, %446 ], [ %450, %449 ], [ %452, %451 ], !dbg !52
  %453 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !36
  %454 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !38
  %455 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !36
  %456 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !38
  %457 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !36
  %458 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !38
  %459 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !36
  %460 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !38
  %461 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !36
  %462 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !38
  %463 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !36
  %464 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !38
  %465 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !36
  %466 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !38
  %467 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !36
  %468 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !38
  %469 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !16
  %470 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %471 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !22
  %472 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %473 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %474 = bitcast i32 %473 to float, !dbg !26
  %475 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %476 = bitcast i32 %475 to float, !dbg !28
  %477 = fsub float %474, %476, !dbg !53
  %478 = fmul float %477, %348, !dbg !54
  %479 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !32
  %480 = bitcast i32 %479 to float, !dbg !32
  %481 = fmul float %478, %480, !dbg !55
  %482 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !34
  %483 = bitcast i32 %482 to float, !dbg !34
  %484 = fadd float %481, %483, !dbg !56
  %485 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !16
  %486 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %487 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !22
  %488 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %489 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %490 = bitcast i32 %489 to float, !dbg !26
  %491 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %492 = bitcast i32 %491 to float, !dbg !28
  %493 = fsub float %490, %492, !dbg !53
  %494 = fmul float %493, %347, !dbg !54
  %495 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !32
  %496 = bitcast i32 %495 to float, !dbg !32
  %497 = fmul float %494, %496, !dbg !55
  %498 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !34
  %499 = bitcast i32 %498 to float, !dbg !34
  %500 = fadd float %497, %499, !dbg !56
  %501 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !16
  %502 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %503 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !22
  %504 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %505 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %506 = bitcast i32 %505 to float, !dbg !26
  %507 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %508 = bitcast i32 %507 to float, !dbg !28
  %509 = fsub float %506, %508, !dbg !53
  %510 = fmul float %509, %346, !dbg !54
  %511 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !32
  %512 = bitcast i32 %511 to float, !dbg !32
  %513 = fmul float %510, %512, !dbg !55
  %514 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !34
  %515 = bitcast i32 %514 to float, !dbg !34
  %516 = fadd float %513, %515, !dbg !56
  %517 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !16
  %518 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %519 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !22
  %520 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %521 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %522 = bitcast i32 %521 to float, !dbg !26
  %523 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %524 = bitcast i32 %523 to float, !dbg !28
  %525 = fsub float %522, %524, !dbg !53
  %526 = fmul float %525, %345, !dbg !54
  %527 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !32
  %528 = bitcast i32 %527 to float, !dbg !32
  %529 = fmul float %526, %528, !dbg !55
  %530 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !34
  %531 = bitcast i32 %530 to float, !dbg !34
  %532 = fadd float %529, %531, !dbg !56
  %533 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %534 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %535 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !22
  %536 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !24
  %537 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %538 = bitcast i32 %537 to float, !dbg !26
  %539 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %540 = bitcast i32 %539 to float, !dbg !28
  %541 = fsub float %538, %540, !dbg !53
  %542 = fmul float %541, %344, !dbg !54
  %543 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !32
  %544 = bitcast i32 %543 to float, !dbg !32
  %545 = fmul float %542, %544, !dbg !55
  %546 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !34
  %547 = bitcast i32 %546 to float, !dbg !34
  %548 = fadd float %545, %547, !dbg !56
  %549 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %550 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %551 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !22
  %552 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !24
  %553 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %554 = bitcast i32 %553 to float, !dbg !26
  %555 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %556 = bitcast i32 %555 to float, !dbg !28
  %557 = fsub float %554, %556, !dbg !53
  %558 = fmul float %557, %343, !dbg !54
  %559 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !32
  %560 = bitcast i32 %559 to float, !dbg !32
  %561 = fmul float %558, %560, !dbg !55
  %562 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !34
  %563 = bitcast i32 %562 to float, !dbg !34
  %564 = fadd float %561, %563, !dbg !56
  %565 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %566 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %567 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !22
  %568 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !24
  %569 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %570 = bitcast i32 %569 to float, !dbg !26
  %571 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %572 = bitcast i32 %571 to float, !dbg !28
  %573 = fsub float %570, %572, !dbg !53
  %574 = fmul float %573, %342, !dbg !54
  %575 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !32
  %576 = bitcast i32 %575 to float, !dbg !32
  %577 = fmul float %574, %576, !dbg !55
  %578 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !34
  %579 = bitcast i32 %578 to float, !dbg !34
  %580 = fadd float %577, %579, !dbg !56
  %581 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %582 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %583 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !22
  %584 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !24
  %585 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %586 = bitcast i32 %585 to float, !dbg !26
  %587 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %588 = bitcast i32 %587 to float, !dbg !28
  %589 = fsub float %586, %588, !dbg !53
  %590 = fmul float %589, %341, !dbg !54
  %591 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !32
  %592 = bitcast i32 %591 to float, !dbg !32
  %593 = fmul float %590, %592, !dbg !55
  %594 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !34
  %595 = bitcast i32 %594 to float, !dbg !34
  %596 = fadd float %593, %595, !dbg !56
  %597 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !44
  %598 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !44
  %599 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !44
  %600 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !44
  %601 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !44
  %602 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !44
  %603 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !44
  %604 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !44
  %605 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !42
  %606 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !42
  %607 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !42
  %608 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !42
  %609 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !42
  %610 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !42
  %611 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !42
  %612 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !42
  %613 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i78) #3, !dbg !57
  %614 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i83) #3, !dbg !57
  %615 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i88) #3, !dbg !57
  %616 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i93) #3, !dbg !57
  %617 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i98) #3, !dbg !57
  %618 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i103) #3, !dbg !57
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i108) #3, !dbg !57
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i113) #3, !dbg !57
  %621 = insertelement <2 x i32> poison, i32 %581, i64 0, !dbg !16
  %622 = insertelement <2 x i32> %621, i32 %467, i64 1, !dbg !16
  %623 = bitcast <2 x i32> %622 to <2 x float>, !dbg !16
  %624 = insertelement <2 x i32> poison, i32 %582, i64 0, !dbg !18
  %625 = insertelement <2 x i32> %624, i32 %468, i64 1, !dbg !18
  %626 = bitcast <2 x i32> %625 to <2 x float>, !dbg !18
  %627 = fsub <2 x float> %623, %626, !dbg !58
  %628 = insertelement <2 x i32> poison, i32 %584, i64 0, !dbg !24
  %629 = insertelement <2 x i32> %628, i32 %604, i64 1, !dbg !24
  %630 = bitcast <2 x i32> %629 to <2 x float>, !dbg !24
  %631 = insertelement <2 x i32> poison, i32 %583, i64 0, !dbg !22
  %632 = insertelement <2 x i32> %631, i32 %612, i64 1, !dbg !22
  %633 = bitcast <2 x i32> %632 to <2 x float>, !dbg !22
  %634 = insertelement <2 x float> poison, float %229, i64 0, !dbg !59
  %635 = insertelement <2 x float> %634, float %613, i64 1, !dbg !59
  %636 = fmul <2 x float> %627, %635, !dbg !59
  %637 = fmul <2 x float> %636, %633, !dbg !60
  %638 = fadd <2 x float> %637, %630, !dbg !61
  %639 = extractelement <2 x float> %638, i64 0, !dbg !62
  %640 = fadd float %639, %596, !dbg !62
  %641 = insertelement <2 x i32> poison, i32 %565, i64 0, !dbg !16
  %642 = insertelement <2 x i32> %641, i32 %465, i64 1, !dbg !16
  %643 = bitcast <2 x i32> %642 to <2 x float>, !dbg !16
  %644 = insertelement <2 x i32> poison, i32 %566, i64 0, !dbg !18
  %645 = insertelement <2 x i32> %644, i32 %466, i64 1, !dbg !18
  %646 = bitcast <2 x i32> %645 to <2 x float>, !dbg !18
  %647 = fsub <2 x float> %643, %646, !dbg !58
  %648 = insertelement <2 x i32> poison, i32 %568, i64 0, !dbg !24
  %649 = insertelement <2 x i32> %648, i32 %603, i64 1, !dbg !24
  %650 = bitcast <2 x i32> %649 to <2 x float>, !dbg !24
  %651 = insertelement <2 x i32> poison, i32 %567, i64 0, !dbg !22
  %652 = insertelement <2 x i32> %651, i32 %611, i64 1, !dbg !22
  %653 = bitcast <2 x i32> %652 to <2 x float>, !dbg !22
  %654 = insertelement <2 x float> poison, float %230, i64 0, !dbg !59
  %655 = insertelement <2 x float> %654, float %614, i64 1, !dbg !59
  %656 = fmul <2 x float> %647, %655, !dbg !59
  %657 = fmul <2 x float> %656, %653, !dbg !60
  %658 = fadd <2 x float> %657, %650, !dbg !61
  %659 = extractelement <2 x float> %658, i64 0, !dbg !62
  %660 = fadd float %659, %580, !dbg !62
  %661 = insertelement <2 x i32> poison, i32 %549, i64 0, !dbg !16
  %662 = insertelement <2 x i32> %661, i32 %463, i64 1, !dbg !16
  %663 = bitcast <2 x i32> %662 to <2 x float>, !dbg !16
  %664 = insertelement <2 x i32> poison, i32 %550, i64 0, !dbg !18
  %665 = insertelement <2 x i32> %664, i32 %464, i64 1, !dbg !18
  %666 = bitcast <2 x i32> %665 to <2 x float>, !dbg !18
  %667 = fsub <2 x float> %663, %666, !dbg !58
  %668 = insertelement <2 x i32> poison, i32 %552, i64 0, !dbg !24
  %669 = insertelement <2 x i32> %668, i32 %602, i64 1, !dbg !24
  %670 = bitcast <2 x i32> %669 to <2 x float>, !dbg !24
  %671 = insertelement <2 x i32> poison, i32 %551, i64 0, !dbg !22
  %672 = insertelement <2 x i32> %671, i32 %610, i64 1, !dbg !22
  %673 = bitcast <2 x i32> %672 to <2 x float>, !dbg !22
  %674 = insertelement <2 x float> poison, float %231, i64 0, !dbg !59
  %675 = insertelement <2 x float> %674, float %615, i64 1, !dbg !59
  %676 = fmul <2 x float> %667, %675, !dbg !59
  %677 = fmul <2 x float> %676, %673, !dbg !60
  %678 = fadd <2 x float> %677, %670, !dbg !61
  %679 = extractelement <2 x float> %678, i64 0, !dbg !62
  %680 = fadd float %679, %564, !dbg !62
  %681 = insertelement <2 x i32> poison, i32 %533, i64 0, !dbg !16
  %682 = insertelement <2 x i32> %681, i32 %461, i64 1, !dbg !16
  %683 = bitcast <2 x i32> %682 to <2 x float>, !dbg !16
  %684 = insertelement <2 x i32> poison, i32 %534, i64 0, !dbg !18
  %685 = insertelement <2 x i32> %684, i32 %462, i64 1, !dbg !18
  %686 = bitcast <2 x i32> %685 to <2 x float>, !dbg !18
  %687 = fsub <2 x float> %683, %686, !dbg !58
  %688 = insertelement <2 x i32> poison, i32 %536, i64 0, !dbg !24
  %689 = insertelement <2 x i32> %688, i32 %601, i64 1, !dbg !24
  %690 = bitcast <2 x i32> %689 to <2 x float>, !dbg !24
  %691 = insertelement <2 x i32> poison, i32 %535, i64 0, !dbg !22
  %692 = insertelement <2 x i32> %691, i32 %609, i64 1, !dbg !22
  %693 = bitcast <2 x i32> %692 to <2 x float>, !dbg !22
  %694 = insertelement <2 x float> poison, float %232, i64 0, !dbg !59
  %695 = insertelement <2 x float> %694, float %616, i64 1, !dbg !59
  %696 = fmul <2 x float> %687, %695, !dbg !59
  %697 = fmul <2 x float> %696, %693, !dbg !60
  %698 = fadd <2 x float> %697, %690, !dbg !61
  %699 = extractelement <2 x float> %698, i64 0, !dbg !62
  %700 = fadd float %699, %548, !dbg !62
  %701 = insertelement <2 x i32> poison, i32 %517, i64 0, !dbg !16
  %702 = insertelement <2 x i32> %701, i32 %459, i64 1, !dbg !16
  %703 = bitcast <2 x i32> %702 to <2 x float>, !dbg !16
  %704 = insertelement <2 x i32> poison, i32 %518, i64 0, !dbg !18
  %705 = insertelement <2 x i32> %704, i32 %460, i64 1, !dbg !18
  %706 = bitcast <2 x i32> %705 to <2 x float>, !dbg !18
  %707 = fsub <2 x float> %703, %706, !dbg !58
  %708 = insertelement <2 x i32> poison, i32 %520, i64 0, !dbg !24
  %709 = insertelement <2 x i32> %708, i32 %600, i64 1, !dbg !24
  %710 = bitcast <2 x i32> %709 to <2 x float>, !dbg !24
  %711 = insertelement <2 x i32> poison, i32 %519, i64 0, !dbg !22
  %712 = insertelement <2 x i32> %711, i32 %608, i64 1, !dbg !22
  %713 = bitcast <2 x i32> %712 to <2 x float>, !dbg !22
  %714 = insertelement <2 x float> poison, float %233, i64 0, !dbg !59
  %715 = insertelement <2 x float> %714, float %617, i64 1, !dbg !59
  %716 = fmul <2 x float> %707, %715, !dbg !59
  %717 = fmul <2 x float> %716, %713, !dbg !60
  %718 = fadd <2 x float> %717, %710, !dbg !61
  %719 = extractelement <2 x float> %718, i64 0, !dbg !62
  %720 = fadd float %719, %532, !dbg !62
  %721 = insertelement <2 x i32> poison, i32 %501, i64 0, !dbg !16
  %722 = insertelement <2 x i32> %721, i32 %457, i64 1, !dbg !16
  %723 = bitcast <2 x i32> %722 to <2 x float>, !dbg !16
  %724 = insertelement <2 x i32> poison, i32 %502, i64 0, !dbg !18
  %725 = insertelement <2 x i32> %724, i32 %458, i64 1, !dbg !18
  %726 = bitcast <2 x i32> %725 to <2 x float>, !dbg !18
  %727 = fsub <2 x float> %723, %726, !dbg !58
  %728 = insertelement <2 x i32> poison, i32 %504, i64 0, !dbg !24
  %729 = insertelement <2 x i32> %728, i32 %599, i64 1, !dbg !24
  %730 = bitcast <2 x i32> %729 to <2 x float>, !dbg !24
  %731 = insertelement <2 x i32> poison, i32 %503, i64 0, !dbg !22
  %732 = insertelement <2 x i32> %731, i32 %607, i64 1, !dbg !22
  %733 = bitcast <2 x i32> %732 to <2 x float>, !dbg !22
  %734 = insertelement <2 x float> poison, float %234, i64 0, !dbg !59
  %735 = insertelement <2 x float> %734, float %618, i64 1, !dbg !59
  %736 = fmul <2 x float> %727, %735, !dbg !59
  %737 = fmul <2 x float> %736, %733, !dbg !60
  %738 = fadd <2 x float> %737, %730, !dbg !61
  %739 = extractelement <2 x float> %738, i64 0, !dbg !62
  %740 = fadd float %739, %516, !dbg !62
  %741 = insertelement <2 x i32> poison, i32 %485, i64 0, !dbg !16
  %742 = insertelement <2 x i32> %741, i32 %455, i64 1, !dbg !16
  %743 = bitcast <2 x i32> %742 to <2 x float>, !dbg !16
  %744 = insertelement <2 x i32> poison, i32 %486, i64 0, !dbg !18
  %745 = insertelement <2 x i32> %744, i32 %456, i64 1, !dbg !18
  %746 = bitcast <2 x i32> %745 to <2 x float>, !dbg !18
  %747 = fsub <2 x float> %743, %746, !dbg !58
  %748 = insertelement <2 x i32> poison, i32 %488, i64 0, !dbg !24
  %749 = insertelement <2 x i32> %748, i32 %598, i64 1, !dbg !24
  %750 = bitcast <2 x i32> %749 to <2 x float>, !dbg !24
  %751 = insertelement <2 x i32> poison, i32 %487, i64 0, !dbg !22
  %752 = insertelement <2 x i32> %751, i32 %606, i64 1, !dbg !22
  %753 = bitcast <2 x i32> %752 to <2 x float>, !dbg !22
  %754 = insertelement <2 x float> poison, float %235, i64 0, !dbg !59
  %755 = insertelement <2 x float> %754, float %619, i64 1, !dbg !59
  %756 = fmul <2 x float> %747, %755, !dbg !59
  %757 = fmul <2 x float> %756, %753, !dbg !60
  %758 = fadd <2 x float> %757, %750, !dbg !61
  %759 = extractelement <2 x float> %758, i64 0, !dbg !62
  %760 = fadd float %759, %500, !dbg !62
  %761 = insertelement <2 x i32> poison, i32 %469, i64 0, !dbg !16
  %762 = insertelement <2 x i32> %761, i32 %453, i64 1, !dbg !16
  %763 = bitcast <2 x i32> %762 to <2 x float>, !dbg !16
  %764 = insertelement <2 x i32> poison, i32 %470, i64 0, !dbg !18
  %765 = insertelement <2 x i32> %764, i32 %454, i64 1, !dbg !18
  %766 = bitcast <2 x i32> %765 to <2 x float>, !dbg !18
  %767 = fsub <2 x float> %763, %766, !dbg !58
  %768 = insertelement <2 x i32> poison, i32 %472, i64 0, !dbg !24
  %769 = insertelement <2 x i32> %768, i32 %597, i64 1, !dbg !24
  %770 = bitcast <2 x i32> %769 to <2 x float>, !dbg !24
  %771 = insertelement <2 x i32> poison, i32 %471, i64 0, !dbg !22
  %772 = insertelement <2 x i32> %771, i32 %605, i64 1, !dbg !22
  %773 = bitcast <2 x i32> %772 to <2 x float>, !dbg !22
  %774 = insertelement <2 x float> poison, float %236, i64 0, !dbg !59
  %775 = insertelement <2 x float> %774, float %620, i64 1, !dbg !59
  %776 = fmul <2 x float> %767, %775, !dbg !59
  %777 = fmul <2 x float> %776, %773, !dbg !60
  %778 = fadd <2 x float> %777, %770, !dbg !61
  %779 = extractelement <2 x float> %778, i64 0, !dbg !62
  %780 = fadd float %779, %484, !dbg !62
  %781 = extractelement <2 x float> %638, i64 1, !dbg !63
  %782 = fadd float %640, %781, !dbg !63
  %783 = extractelement <2 x float> %658, i64 1, !dbg !63
  %784 = fadd float %660, %783, !dbg !63
  %785 = extractelement <2 x float> %678, i64 1, !dbg !63
  %786 = fadd float %680, %785, !dbg !63
  %787 = extractelement <2 x float> %698, i64 1, !dbg !63
  %788 = fadd float %700, %787, !dbg !63
  %789 = extractelement <2 x float> %718, i64 1, !dbg !63
  %790 = fadd float %720, %789, !dbg !63
  %791 = extractelement <2 x float> %738, i64 1, !dbg !63
  %792 = fadd float %740, %791, !dbg !63
  %793 = extractelement <2 x float> %758, i64 1, !dbg !63
  %794 = fadd float %760, %793, !dbg !63
  %795 = extractelement <2 x float> %778, i64 1, !dbg !63
  %796 = fadd float %780, %795, !dbg !63
  %797 = fsub float 0.000000e+00, %782, !dbg !64
  %798 = fsub float 0.000000e+00, %784, !dbg !64
  %799 = fsub float 0.000000e+00, %786, !dbg !64
  %800 = fsub float 0.000000e+00, %788, !dbg !64
  %801 = fsub float 0.000000e+00, %790, !dbg !64
  %802 = fsub float 0.000000e+00, %792, !dbg !64
  %803 = fsub float 0.000000e+00, %794, !dbg !64
  %804 = fsub float 0.000000e+00, %796, !dbg !64
  %805 = fmul float %797, 0x3FF7154760000000, !dbg !68
  %806 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %805) #3, !dbg !68
  %807 = fmul float %798, 0x3FF7154760000000, !dbg !68
  %808 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %807) #3, !dbg !68
  %809 = fmul float %799, 0x3FF7154760000000, !dbg !68
  %810 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %809) #3, !dbg !68
  %811 = fmul float %800, 0x3FF7154760000000, !dbg !68
  %812 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %811) #3, !dbg !68
  %813 = fmul float %801, 0x3FF7154760000000, !dbg !68
  %814 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %813) #3, !dbg !68
  %815 = fmul float %802, 0x3FF7154760000000, !dbg !68
  %816 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %815) #3, !dbg !68
  %817 = fmul float %803, 0x3FF7154760000000, !dbg !68
  %818 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %817) #3, !dbg !68
  %819 = fmul float %804, 0x3FF7154760000000, !dbg !68
  %820 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %819) #3, !dbg !68
  %821 = fadd float %806, 1.000000e+00, !dbg !69
  %822 = fadd float %808, 1.000000e+00, !dbg !69
  %823 = fadd float %810, 1.000000e+00, !dbg !69
  %824 = fadd float %812, 1.000000e+00, !dbg !69
  %825 = fadd float %814, 1.000000e+00, !dbg !69
  %826 = fadd float %816, 1.000000e+00, !dbg !69
  %827 = fadd float %818, 1.000000e+00, !dbg !69
  %828 = fadd float %820, 1.000000e+00, !dbg !69
  %829 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %821) #3, !dbg !70
  %830 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %822) #3, !dbg !70
  %831 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %823) #3, !dbg !70
  %832 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %824) #3, !dbg !70
  %833 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %825) #3, !dbg !70
  %834 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %826) #3, !dbg !70
  %835 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %827) #3, !dbg !70
  %836 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %828) #3, !dbg !70
  %837 = fmul float %782, %829, !dbg !71
  %838 = fmul float %784, %830, !dbg !71
  %839 = fmul float %786, %831, !dbg !71
  %840 = fmul float %788, %832, !dbg !71
  %841 = fmul float %790, %833, !dbg !71
  %842 = fmul float %792, %834, !dbg !71
  %843 = fmul float %794, %835, !dbg !71
  %844 = fmul float %796, %836, !dbg !71
  %845 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !72
  %846 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !72
  %847 = bitcast float %837 to i32, !dbg !73
  %848 = bitcast float %838 to i32, !dbg !73
  %849 = bitcast float %839 to i32, !dbg !73
  %850 = bitcast float %840 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %847, i32 %848, i32 %849, i32 %850, ptr addrspace(1) %845, i1 true) #3, !dbg !73
  %851 = bitcast float %841 to i32, !dbg !73
  %852 = bitcast float %842 to i32, !dbg !73
  %853 = bitcast float %843 to i32, !dbg !73
  %854 = bitcast float %844 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %851, i32 %852, i32 %853, i32 %854, ptr addrspace(1) %846, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr4bvqt3lbapchsof7ppea7yspun7kcukp5kt2g2tfvu24fr7a3s.py", directory: "inductor_cache/r4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 40, column: 32, scope: !7)
!44 = !DILocation(line: 40, column: 37, scope: !7)
!45 = !DILocation(line: 43, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 26, scope: !7)
!47 = !DILocation(line: 46, column: 18, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 27, scope: !7)
!50 = !DILocation(line: 55, column: 19, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 27, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 19, scope: !7)
!58 = !DILocation(line: 41, column: 18, scope: !7)
!59 = !DILocation(line: 49, column: 19, scope: !7)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 60, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 47, column: 30, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!67 = !DILocation(line: 70, column: 23, scope: !7)
!68 = !DILocation(line: 47, column: 29, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 47, column: 20, scope: !65, inlinedAt: !67)
!70 = !DILocation(line: 47, column: 16, scope: !65, inlinedAt: !67)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 28, scope: !7)
!73 = !DILocation(line: 72, column: 40, scope: !7)
!74 = !DILocation(line: 72, column: 4, scope: !7)
