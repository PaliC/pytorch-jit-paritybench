; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 384, !dbg !14
  %21 = icmp slt i32 %16, 384, !dbg !14
  %22 = icmp slt i32 %17, 384, !dbg !14
  %23 = icmp slt i32 %18, 384, !dbg !14
  %24 = icmp slt i32 %19, 384, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 1, !dbg !16
  %.frozen = freeze i32 %19, !dbg !17
  %27 = sdiv i32 %.frozen, 96, !dbg !17
  %28 = mul i32 %27, 96, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %29 = shl i32 %15, 12, !dbg !19
  %30 = shl i32 %16, 12, !dbg !19
  %31 = shl i32 %17, 12, !dbg !19
  %32 = shl i32 %18, 12, !dbg !19
  %33 = add i32 %29, %26, !dbg !20
  %34 = add i32 %30, %26, !dbg !20
  %35 = add i32 %31, %26, !dbg !20
  %36 = add i32 %32, %26, !dbg !20
  %37 = sext i32 %33 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %34 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %35 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = sext i32 %36 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !22
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !22
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %21) #2, !dbg !22
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !22
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !22
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #2, !dbg !22
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !22
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !22
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %23) #2, !dbg !22
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !22
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !22
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !22
  %58 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !22
  %59 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 2064, !dbg !22
  %60 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !22
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !22
  %62 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !22
  %63 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 2576, !dbg !22
  %64 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !22
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !22
  %66 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !22
  %67 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 3088, !dbg !22
  %68 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !22
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !22
  %70 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !22
  %71 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 3600, !dbg !22
  %72 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !22
  %74 = or disjoint i32 %14, 512, !dbg !22
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !22
  %76 = getelementptr i8, ptr addrspace(3) %75, i32 16, !dbg !22
  %77 = sext i32 %.decomposed to i64, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !23
  %79 = load <4 x float>, ptr addrspace(3) %73, align 16, !dbg !22
  %80 = shufflevector <4 x float> %79, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !22
  %81 = load <4 x float>, ptr addrspace(3) %76, align 16, !dbg !22
  %82 = shufflevector <4 x float> %81, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !22
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %24) #2, !dbg !24
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !24
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !24
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !24
  %88 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !24
  %89 = insertelement <4 x i32> %88, i32 %86, i64 1, !dbg !24
  %90 = insertelement <4 x i32> %89, i32 %85, i64 2, !dbg !24
  %91 = insertelement <4 x i32> %90, i32 %84, i64 3, !dbg !24
  %92 = bitcast <4 x i32> %91 to <4 x float>, !dbg !24
  %93 = shufflevector <4 x float> %92, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !24
  %94 = shufflevector <4 x float> %82, <4 x float> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !25
  %95 = fadd <8 x float> %94, %93, !dbg !25
  %96 = fcmp olt <8 x float> %95, zeroinitializer, !dbg !26
  %97 = extractelement <8 x i1> %96, i64 7, !dbg !30
  %98 = extractelement <8 x i1> %96, i64 6, !dbg !30
  %99 = extractelement <8 x i1> %96, i64 5, !dbg !30
  %100 = extractelement <8 x i1> %96, i64 4, !dbg !30
  %101 = extractelement <8 x i1> %96, i64 3, !dbg !30
  %102 = extractelement <8 x i1> %96, i64 2, !dbg !30
  %103 = extractelement <8 x i1> %96, i64 1, !dbg !30
  %104 = extractelement <8 x i1> %96, i64 0, !dbg !30
  %105 = mul i32 %25, 192, !dbg !31
  %106 = add i32 %.decomposed, %105, !dbg !32
  %107 = mul i32 %27, 393216, !dbg !33
  %108 = add i32 %106, %107, !dbg !34
  %109 = add i32 %106, 96, !dbg !32
  %110 = add i32 %109, %107, !dbg !34
  %111 = sext i32 %108 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !35
  %113 = sext i32 %110 to i64, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !35
  %bc = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %115 = extractelement <8 x i32> %bc, i64 7, !dbg !36
  %116 = select i1 %97, i32 0, i32 %115, !dbg !30
  %bc8 = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %117 = extractelement <8 x i32> %bc8, i64 6, !dbg !36
  %118 = select i1 %98, i32 0, i32 %117, !dbg !30
  %bc9 = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %119 = extractelement <8 x i32> %bc9, i64 5, !dbg !36
  %120 = select i1 %99, i32 0, i32 %119, !dbg !30
  %bc10 = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %121 = extractelement <8 x i32> %bc10, i64 4, !dbg !36
  %122 = select i1 %100, i32 0, i32 %121, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %116, i32 %118, i32 %120, i32 %122, ptr addrspace(1) %112, i1 %24) #2, !dbg !36
  %bc11 = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %123 = extractelement <8 x i32> %bc11, i64 3, !dbg !36
  %124 = select i1 %101, i32 0, i32 %123, !dbg !30
  %bc12 = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %125 = extractelement <8 x i32> %bc12, i64 2, !dbg !36
  %126 = select i1 %102, i32 0, i32 %125, !dbg !30
  %bc13 = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %127 = extractelement <8 x i32> %bc13, i64 1, !dbg !36
  %128 = select i1 %103, i32 0, i32 %127, !dbg !30
  %bc14 = bitcast <8 x float> %95 to <8 x i32>, !dbg !36
  %129 = extractelement <8 x i32> %bc14, i64 0, !dbg !36
  %130 = select i1 %104, i32 0, i32 %129, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %124, i32 %126, i32 %128, i32 %130, ptr addrspace(1) %114, i1 %24) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp2wn3ejmsha5hn4vmb4gldqjeqnfuay2armejfescyld2dom7cv.py", directory: "inductor_cache/p2")
!4 = !{ptr @triton_poi_fused_convolution_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_1", linkageName: "triton_poi_fused_convolution_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 36, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 37, column: 33, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 45, scope: !7)
!34 = !DILocation(line: 37, column: 38, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 56, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
