; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 5, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %15, 16, !dbg !12
  %18 = or disjoint i32 %15, 24, !dbg !12
  %19 = shl i32 %13, 2, !dbg !12
  %20 = and i32 %19, 28, !dbg !12
  %21 = or disjoint i32 %12, %15, !dbg !13
  %22 = or disjoint i32 %12, %16, !dbg !13
  %23 = or disjoint i32 %12, %17, !dbg !13
  %24 = or disjoint i32 %12, %18, !dbg !13
  %25 = or disjoint i32 %12, %20, !dbg !13
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %27 = shl i32 %26, 7, !dbg !15
  %28 = and i32 %19, 124, !dbg !16
  %29 = lshr i32 %13, 3, !dbg !16
  %30 = and i32 %29, 31, !dbg !16
  %31 = or disjoint i32 %27, %28, !dbg !17
  %32 = or disjoint i32 %27, %30, !dbg !17
  %33 = or disjoint i32 %32, 32, !dbg !17
  %34 = or disjoint i32 %32, 64, !dbg !17
  %35 = or disjoint i32 %32, 96, !dbg !17
  %36 = icmp slt i32 %31, 128, !dbg !18
  %37 = icmp slt i32 %32, 128, !dbg !18
  %38 = icmp slt i32 %33, 128, !dbg !18
  %39 = icmp slt i32 %34, 128, !dbg !18
  %40 = icmp slt i32 %35, 128, !dbg !18
  %.frozen = freeze i32 %25, !dbg !19
  %41 = sdiv i32 %.frozen, 1024, !dbg !19
  %42 = mul i32 %41, 1024, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %43 = shl i32 %21, 7, !dbg !21
  %44 = shl i32 %22, 7, !dbg !21
  %45 = shl i32 %23, 7, !dbg !21
  %46 = shl i32 %24, 7, !dbg !21
  %47 = add i32 %31, %43, !dbg !22
  %48 = add i32 %31, %44, !dbg !22
  %49 = add i32 %31, %45, !dbg !22
  %50 = add i32 %31, %46, !dbg !22
  %51 = sext i32 %47 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %48 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %49 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %50 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %36) #2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !24
  %64 = bitcast i32 %60 to float, !dbg !24
  %65 = bitcast i32 %61 to float, !dbg !24
  %66 = bitcast i32 %62 to float, !dbg !24
  %67 = bitcast i32 %63 to float, !dbg !24
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %36) #2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = bitcast i32 %72 to float, !dbg !24
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %36) #2, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = bitcast i32 %81 to float, !dbg !24
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %36) #2, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !24
  %91 = bitcast i32 %87 to float, !dbg !24
  %92 = bitcast i32 %88 to float, !dbg !24
  %93 = bitcast i32 %89 to float, !dbg !24
  %94 = bitcast i32 %90 to float, !dbg !24
  %95 = sext i32 %31 to i64, !dbg !25
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !25
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %36) #2, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !27
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %36) #2, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = bitcast i32 %110 to float, !dbg !28
  %115 = bitcast i32 %111 to float, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !29
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !29
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !29
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !29
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %36) #2, !dbg !30
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !30
  %125 = bitcast i32 %121 to float, !dbg !30
  %126 = bitcast i32 %122 to float, !dbg !30
  %127 = bitcast i32 %123 to float, !dbg !30
  %128 = bitcast i32 %124 to float, !dbg !30
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %36) #2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !30
  %134 = bitcast i32 %130 to float, !dbg !30
  %135 = bitcast i32 %131 to float, !dbg !30
  %136 = bitcast i32 %132 to float, !dbg !30
  %137 = bitcast i32 %133 to float, !dbg !30
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %36) #2, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !30
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !30
  %143 = bitcast i32 %139 to float, !dbg !30
  %144 = bitcast i32 %140 to float, !dbg !30
  %145 = bitcast i32 %141 to float, !dbg !30
  %146 = bitcast i32 %142 to float, !dbg !30
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %36) #2, !dbg !30
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !30
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !30
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !30
  %152 = bitcast i32 %148 to float, !dbg !30
  %153 = bitcast i32 %149 to float, !dbg !30
  %154 = bitcast i32 %150 to float, !dbg !30
  %155 = bitcast i32 %151 to float, !dbg !30
  %156 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !31
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %36) #2, !dbg !32
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !32
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !32
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !32
  %162 = bitcast i32 %158 to float, !dbg !32
  %163 = bitcast i32 %159 to float, !dbg !32
  %164 = bitcast i32 %160 to float, !dbg !32
  %165 = bitcast i32 %161 to float, !dbg !32
  %166 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !33
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 %36) #2, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !34
  %172 = bitcast i32 %168 to float, !dbg !34
  %173 = bitcast i32 %169 to float, !dbg !34
  %174 = bitcast i32 %170 to float, !dbg !34
  %175 = bitcast i32 %171 to float, !dbg !34
  %176 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !35
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %36) #2, !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !36
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !36
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !36
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !36
  %182 = bitcast i32 %178 to float, !dbg !36
  %183 = bitcast i32 %179 to float, !dbg !36
  %184 = bitcast i32 %180 to float, !dbg !36
  %185 = bitcast i32 %181 to float, !dbg !36
  %186 = fadd float %64, %102, !dbg !37
  %187 = fadd float %65, %103, !dbg !37
  %188 = fadd float %66, %104, !dbg !37
  %189 = fadd float %67, %105, !dbg !37
  %190 = fadd float %73, %102, !dbg !37
  %191 = fadd float %74, %103, !dbg !37
  %192 = fadd float %75, %104, !dbg !37
  %193 = fadd float %76, %105, !dbg !37
  %194 = fadd float %82, %102, !dbg !37
  %195 = fadd float %83, %103, !dbg !37
  %196 = fadd float %84, %104, !dbg !37
  %197 = fadd float %85, %105, !dbg !37
  %198 = fadd float %91, %102, !dbg !37
  %199 = fadd float %92, %103, !dbg !37
  %200 = fadd float %93, %104, !dbg !37
  %201 = fadd float %94, %105, !dbg !37
  %202 = fmul float %112, %125, !dbg !38
  %203 = fmul float %113, %126, !dbg !38
  %204 = fmul float %114, %127, !dbg !38
  %205 = fmul float %115, %128, !dbg !38
  %206 = fmul float %112, %134, !dbg !38
  %207 = fmul float %113, %135, !dbg !38
  %208 = fmul float %114, %136, !dbg !38
  %209 = fmul float %115, %137, !dbg !38
  %210 = fmul float %112, %143, !dbg !38
  %211 = fmul float %113, %144, !dbg !38
  %212 = fmul float %114, %145, !dbg !38
  %213 = fmul float %115, %146, !dbg !38
  %214 = fmul float %112, %152, !dbg !38
  %215 = fmul float %113, %153, !dbg !38
  %216 = fmul float %114, %154, !dbg !38
  %217 = fmul float %115, %155, !dbg !38
  %218 = fadd float %202, %162, !dbg !39
  %219 = fadd float %203, %163, !dbg !39
  %220 = fadd float %204, %164, !dbg !39
  %221 = fadd float %205, %165, !dbg !39
  %222 = fadd float %206, %162, !dbg !39
  %223 = fadd float %207, %163, !dbg !39
  %224 = fadd float %208, %164, !dbg !39
  %225 = fadd float %209, %165, !dbg !39
  %226 = fadd float %210, %162, !dbg !39
  %227 = fadd float %211, %163, !dbg !39
  %228 = fadd float %212, %164, !dbg !39
  %229 = fadd float %213, %165, !dbg !39
  %230 = fadd float %214, %162, !dbg !39
  %231 = fadd float %215, %163, !dbg !39
  %232 = fadd float %216, %164, !dbg !39
  %233 = fadd float %217, %165, !dbg !39
  %234 = fmul float %186, %172, !dbg !40
  %235 = fmul float %187, %173, !dbg !40
  %236 = fmul float %188, %174, !dbg !40
  %237 = fmul float %189, %175, !dbg !40
  %238 = fmul float %190, %172, !dbg !40
  %239 = fmul float %191, %173, !dbg !40
  %240 = fmul float %192, %174, !dbg !40
  %241 = fmul float %193, %175, !dbg !40
  %242 = fmul float %194, %172, !dbg !40
  %243 = fmul float %195, %173, !dbg !40
  %244 = fmul float %196, %174, !dbg !40
  %245 = fmul float %197, %175, !dbg !40
  %246 = fmul float %198, %172, !dbg !40
  %247 = fmul float %199, %173, !dbg !40
  %248 = fmul float %200, %174, !dbg !40
  %249 = fmul float %201, %175, !dbg !40
  %250 = fadd float %234, %182, !dbg !41
  %251 = fadd float %235, %183, !dbg !41
  %252 = fadd float %236, %184, !dbg !41
  %253 = fadd float %237, %185, !dbg !41
  %254 = fadd float %238, %182, !dbg !41
  %255 = fadd float %239, %183, !dbg !41
  %256 = fadd float %240, %184, !dbg !41
  %257 = fadd float %241, %185, !dbg !41
  %258 = fadd float %242, %182, !dbg !41
  %259 = fadd float %243, %183, !dbg !41
  %260 = fadd float %244, %184, !dbg !41
  %261 = fadd float %245, %185, !dbg !41
  %262 = fadd float %246, %182, !dbg !41
  %263 = fadd float %247, %183, !dbg !41
  %264 = fadd float %248, %184, !dbg !41
  %265 = fadd float %249, %185, !dbg !41
  %266 = fadd float %218, %250, !dbg !42
  %267 = fadd float %219, %251, !dbg !42
  %268 = fadd float %220, %252, !dbg !42
  %269 = fadd float %221, %253, !dbg !42
  %270 = fadd float %222, %254, !dbg !42
  %271 = fadd float %223, %255, !dbg !42
  %272 = fadd float %224, %256, !dbg !42
  %273 = fadd float %225, %257, !dbg !42
  %274 = fadd float %226, %258, !dbg !42
  %275 = fadd float %227, %259, !dbg !42
  %276 = fadd float %228, %260, !dbg !42
  %277 = fadd float %229, %261, !dbg !42
  %278 = fadd float %230, %262, !dbg !42
  %279 = fadd float %231, %263, !dbg !42
  %280 = fadd float %232, %264, !dbg !42
  %281 = fadd float %233, %265, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %282 = bitcast float %186 to i32, !dbg !44
  %283 = bitcast float %187 to i32, !dbg !44
  %284 = bitcast float %188 to i32, !dbg !44
  %285 = bitcast float %189 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %282, i32 %283, i32 %284, i32 %285, ptr addrspace(1) %52, i1 %36) #2, !dbg !44
  %286 = bitcast float %190 to i32, !dbg !44
  %287 = bitcast float %191 to i32, !dbg !44
  %288 = bitcast float %192 to i32, !dbg !44
  %289 = bitcast float %193 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %54, i1 %36) #2, !dbg !44
  %290 = bitcast float %194 to i32, !dbg !44
  %291 = bitcast float %195 to i32, !dbg !44
  %292 = bitcast float %196 to i32, !dbg !44
  %293 = bitcast float %197 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %56, i1 %36) #2, !dbg !44
  %294 = bitcast float %198 to i32, !dbg !44
  %295 = bitcast float %199 to i32, !dbg !44
  %296 = bitcast float %200 to i32, !dbg !44
  %297 = bitcast float %201 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %295, i32 %296, i32 %297, ptr addrspace(1) %58, i1 %36) #2, !dbg !44
  %298 = shl i32 %32, 10, !dbg !45
  %299 = shl i32 %33, 10, !dbg !45
  %300 = shl i32 %34, 10, !dbg !45
  %301 = shl i32 %35, 10, !dbg !45
  %302 = shl i32 %41, 17, !dbg !46
  %303 = add i32 %302, %.decomposed, !dbg !47
  %304 = add i32 %303, %298, !dbg !48
  %305 = add i32 %303, %299, !dbg !48
  %306 = add i32 %303, %300, !dbg !48
  %307 = add i32 %303, %301, !dbg !48
  %308 = sext i32 %304 to i64, !dbg !49
  %309 = getelementptr float, ptr addrspace(1) %7, i64 %308, !dbg !49
  %310 = sext i32 %305 to i64, !dbg !49
  %311 = getelementptr float, ptr addrspace(1) %7, i64 %310, !dbg !49
  %312 = sext i32 %306 to i64, !dbg !49
  %313 = getelementptr float, ptr addrspace(1) %7, i64 %312, !dbg !49
  %314 = sext i32 %307 to i64, !dbg !49
  %315 = getelementptr float, ptr addrspace(1) %7, i64 %314, !dbg !49
  %316 = shl i32 %13, 7, !dbg !50
  %317 = and i32 %316, 3968, !dbg !50
  %318 = or disjoint i32 %317, %15, !dbg !50
  %319 = and i32 %19, 1020, !dbg !50
  %320 = lshr exact i32 %317, 1, !dbg !50
  %321 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %320, !dbg !50
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %318, !dbg !50
  %323 = bitcast float %266 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #2, !dbg !50
  %324 = or disjoint i32 %318, 32, !dbg !50
  %325 = lshr i32 %324, 3, !dbg !50
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !50
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !50
  %328 = bitcast float %267 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #2, !dbg !50
  %329 = or disjoint i32 %318, 64, !dbg !50
  %330 = lshr i32 %329, 3, !dbg !50
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !50
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %329, !dbg !50
  %333 = bitcast float %268 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !50
  %334 = or disjoint i32 %318, 96, !dbg !50
  %335 = lshr i32 %334, 3, !dbg !50
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !50
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %334, !dbg !50
  %338 = bitcast float %269 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #2, !dbg !50
  %339 = or disjoint i32 %318, 8, !dbg !50
  %340 = getelementptr float, ptr addrspace(3) %321, i32 %339, !dbg !50
  %341 = bitcast float %270 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #2, !dbg !50
  %342 = or disjoint i32 %318, 40, !dbg !50
  %343 = lshr i32 %342, 3, !dbg !50
  %344 = and i32 %343, 500, !dbg !50
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %344, !dbg !50
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %342, !dbg !50
  %347 = bitcast float %271 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #2, !dbg !50
  %348 = or disjoint i32 %318, 72, !dbg !50
  %349 = lshr i32 %348, 3, !dbg !50
  %350 = and i32 %349, 504, !dbg !50
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i32 %350, !dbg !50
  %352 = getelementptr float, ptr addrspace(3) %351, i32 %348, !dbg !50
  %353 = bitcast float %272 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #2, !dbg !50
  %354 = or disjoint i32 %318, 104, !dbg !50
  %355 = lshr i32 %354, 3, !dbg !50
  %356 = and i32 %355, 508, !dbg !50
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !50
  %358 = getelementptr float, ptr addrspace(3) %357, i32 %354, !dbg !50
  %359 = bitcast float %273 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #2, !dbg !50
  %360 = or disjoint i32 %318, 16, !dbg !50
  %361 = getelementptr float, ptr addrspace(3) %321, i32 %360, !dbg !50
  %362 = bitcast float %274 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #2, !dbg !50
  %363 = or disjoint i32 %318, 48, !dbg !50
  %364 = lshr i32 %363, 3, !dbg !50
  %365 = and i32 %364, 500, !dbg !50
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !50
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %363, !dbg !50
  %368 = bitcast float %275 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #2, !dbg !50
  %369 = or disjoint i32 %318, 80, !dbg !50
  %370 = lshr i32 %369, 3, !dbg !50
  %371 = and i32 %370, 504, !dbg !50
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %371, !dbg !50
  %373 = getelementptr float, ptr addrspace(3) %372, i32 %369, !dbg !50
  %374 = bitcast float %276 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #2, !dbg !50
  %375 = or disjoint i32 %318, 112, !dbg !50
  %376 = lshr i32 %375, 3, !dbg !50
  %377 = and i32 %376, 508, !dbg !50
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !50
  %379 = getelementptr float, ptr addrspace(3) %378, i32 %375, !dbg !50
  %380 = bitcast float %277 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #2, !dbg !50
  %381 = or disjoint i32 %318, 24, !dbg !50
  %382 = getelementptr float, ptr addrspace(3) %321, i32 %381, !dbg !50
  %383 = bitcast float %278 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %383, i1 true) #2, !dbg !50
  %384 = or disjoint i32 %318, 56, !dbg !50
  %385 = lshr i32 %384, 3, !dbg !50
  %386 = and i32 %385, 500, !dbg !50
  %387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %386, !dbg !50
  %388 = getelementptr float, ptr addrspace(3) %387, i32 %384, !dbg !50
  %389 = bitcast float %279 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #2, !dbg !50
  %390 = or disjoint i32 %318, 88, !dbg !50
  %391 = lshr i32 %390, 3, !dbg !50
  %392 = and i32 %391, 504, !dbg !50
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %392, !dbg !50
  %394 = getelementptr float, ptr addrspace(3) %393, i32 %390, !dbg !50
  %395 = bitcast float %280 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %395, i1 true) #2, !dbg !50
  %396 = or disjoint i32 %318, 120, !dbg !50
  %397 = lshr i32 %396, 3, !dbg !50
  %398 = and i32 %397, 508, !dbg !50
  %399 = getelementptr float, ptr addrspace(3) @global_smem, i32 %398, !dbg !50
  %400 = getelementptr float, ptr addrspace(3) %399, i32 %396, !dbg !50
  %401 = bitcast float %281 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %402 = lshr i32 %19, 3, !dbg !50
  %403 = and i32 %402, 124, !dbg !50
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %403, !dbg !50
  %405 = getelementptr inbounds float, ptr addrspace(3) %404, i32 %319, !dbg !50
  %406 = or disjoint i32 %319, 1024, !dbg !50
  %407 = lshr i32 %406, 3, !dbg !50
  %408 = and i32 %407, 252, !dbg !50
  %409 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %408, !dbg !50
  %410 = getelementptr inbounds float, ptr addrspace(3) %409, i32 %406, !dbg !50
  %411 = load <4 x i32>, ptr addrspace(3) %410, align 16, !dbg !50
  %412 = or disjoint i32 %319, 2048, !dbg !50
  %413 = lshr i32 %412, 3, !dbg !50
  %414 = and i32 %413, 380, !dbg !50
  %415 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %414, !dbg !50
  %416 = getelementptr inbounds float, ptr addrspace(3) %415, i32 %412, !dbg !50
  %417 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !50
  %418 = or disjoint i32 %319, 3072, !dbg !50
  %419 = lshr i32 %418, 3, !dbg !50
  %420 = and i32 %419, 508, !dbg !50
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %420, !dbg !50
  %422 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %418, !dbg !50
  %423 = load <4 x i32>, ptr addrspace(3) %422, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %405, align 16, !dbg !50
  %424 = getelementptr inbounds i8, ptr addrspace(3) %405, i32 4, !dbg !50
  %.extract19 = load i32, ptr addrspace(3) %424, align 4, !dbg !50
  %425 = getelementptr inbounds i8, ptr addrspace(3) %405, i32 8, !dbg !50
  %.extract20 = load i32, ptr addrspace(3) %425, align 8, !dbg !50
  %426 = getelementptr inbounds i8, ptr addrspace(3) %405, i32 12, !dbg !50
  %.extract21 = load i32, ptr addrspace(3) %426, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %309, i1 %37) #2, !dbg !50
  %.extract22 = extractelement <4 x i32> %411, i64 0, !dbg !50
  %.extract23 = extractelement <4 x i32> %411, i64 1, !dbg !50
  %.extract24 = extractelement <4 x i32> %411, i64 2, !dbg !50
  %.extract25 = extractelement <4 x i32> %411, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %311, i1 %38) #2, !dbg !50
  %.extract26 = extractelement <4 x i32> %417, i64 0, !dbg !50
  %.extract27 = extractelement <4 x i32> %417, i64 1, !dbg !50
  %.extract28 = extractelement <4 x i32> %417, i64 2, !dbg !50
  %.extract29 = extractelement <4 x i32> %417, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %313, i1 %39) #2, !dbg !50
  %.extract30 = extractelement <4 x i32> %423, i64 0, !dbg !50
  %.extract31 = extractelement <4 x i32> %423, i64 1, !dbg !50
  %.extract32 = extractelement <4 x i32> %423, i64 2, !dbg !50
  %.extract33 = extractelement <4 x i32> %423, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %315, i1 %40) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct7uvtjgkgkfacsvs7wgbp6upmzkfflzf2c72n7bif547y773bu3.py", directory: "inductor_cache/t7")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_18", linkageName: "triton_poi_fused_add_convolution_mul_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 44, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 35, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
!44 = !DILocation(line: 46, column: 48, scope: !7)
!45 = !DILocation(line: 47, column: 35, scope: !7)
!46 = !DILocation(line: 47, column: 47, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !7)
!48 = !DILocation(line: 47, column: 40, scope: !7)
!49 = !DILocation(line: 47, column: 25, scope: !7)
!50 = !DILocation(line: 47, column: 59, scope: !7)
!51 = !DILocation(line: 47, column: 4, scope: !7)
