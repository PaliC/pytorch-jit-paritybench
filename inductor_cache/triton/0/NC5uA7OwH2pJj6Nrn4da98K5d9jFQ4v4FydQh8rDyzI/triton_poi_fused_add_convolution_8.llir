; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = srem i32 %13, 24, !dbg !14
  %15 = sext i32 %13 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !16
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !16
  %20 = sext i32 %14 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !18
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %29 = bitcast i32 %27 to float, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %35 = bitcast i32 %33 to float, !dbg !22
  %36 = bitcast i32 %34 to float, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !24
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !26
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %45 = fadd float %29, %35, !dbg !27
  %46 = fadd float %30, %36, !dbg !27
  %47 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %48 = insertelement <2 x i32> %47, i32 %39, i64 1, !dbg !16
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !16
  %50 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %51 = insertelement <2 x i32> %50, i32 %43, i64 1, !dbg !18
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !18
  %53 = fadd <2 x float> %49, %52, !dbg !28
  %54 = extractelement <2 x float> %53, i64 0, !dbg !29
  %55 = fadd float %54, %45, !dbg !29
  %56 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !16
  %57 = insertelement <2 x i32> %56, i32 %40, i64 1, !dbg !16
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !16
  %59 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %60 = insertelement <2 x i32> %59, i32 %44, i64 1, !dbg !18
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !18
  %62 = fadd <2 x float> %58, %61, !dbg !28
  %63 = extractelement <2 x float> %62, i64 0, !dbg !29
  %64 = fadd float %63, %46, !dbg !29
  %65 = extractelement <2 x float> %53, i64 1, !dbg !30
  %66 = fadd float %55, %65, !dbg !30
  %67 = extractelement <2 x float> %62, i64 1, !dbg !30
  %68 = fadd float %64, %67, !dbg !30
  %69 = bitcast float %66 to i32, !dbg !31
  %70 = bitcast float %68 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %69, i32 %70, ptr addrspace(1) %16, i1 true) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyt4ynvetew2ytdibx3li7nqespogtwx3wgzogyu2rw5xtgi3zh4.py", directory: "inductor_cache/yt")
!4 = !{ptr @triton_poi_fused_add_convolution_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_8", linkageName: "triton_poi_fused_add_convolution_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 32, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 19, scope: !7)
!31 = !DILocation(line: 37, column: 40, scope: !7)
!32 = !DILocation(line: 37, column: 4, scope: !7)
