; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 256, !dbg !14
  %15 = srem i32 %14, 24, !dbg !15
  %16 = mul i32 %14, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen1 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen1, 6144, !dbg !17
  %18 = icmp slt i32 %15, 6, !dbg !18
  %19 = mul i32 %17, 6144, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %19, !dbg !19
  %20 = mul nsw i32 %17, 1536, !dbg !20
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !23
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !23
  %27 = bitcast i32 %25 to float, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = shl nsw i32 %17, 10, !dbg !24
  %30 = add nsw i32 %29, %.decomposed, !dbg !25
  %31 = sext i32 %30 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !26
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !27
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !27
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !27
  %36 = bitcast i32 %34 to float, !dbg !27
  %37 = bitcast i32 %35 to float, !dbg !27
  %38 = fsub float 0.000000e+00, %36, !dbg !28
  %39 = fsub float 0.000000e+00, %37, !dbg !28
  %40 = fmul float %38, 0x3FF7154760000000, !dbg !32
  %41 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %40) #1, !dbg !32
  %42 = fmul float %39, 0x3FF7154760000000, !dbg !32
  %43 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %42) #1, !dbg !32
  %44 = fadd float %41, 1.000000e+00, !dbg !33
  %45 = fadd float %43, 1.000000e+00, !dbg !33
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %44) #1, !dbg !34
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %45) #1, !dbg !34
  %48 = fmul float %46, %27, !dbg !35
  %49 = fmul float %47, %28, !dbg !35
  %50 = fadd float %48, %27, !dbg !36
  %51 = fadd float %49, %28, !dbg !36
  %52 = add nsw i32 %15, -6, !dbg !37
  %53 = icmp ult i32 %52, 6, !dbg !37
  %54 = shl nsw i32 %15, 8, !dbg !38
  %55 = add nsw i32 %20, %.decomposed, !dbg !38
  %56 = add nsw i32 %55, -1536, !dbg !39
  %57 = add nsw i32 %56, %54, !dbg !40
  %58 = sext i32 %57 to i64, !dbg !41
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !41
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !42
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !42
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !42
  %63 = bitcast i32 %61 to float, !dbg !42
  %64 = bitcast i32 %62 to float, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !43
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !44
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !44
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !44
  %69 = bitcast i32 %67 to float, !dbg !44
  %70 = bitcast i32 %68 to float, !dbg !44
  %71 = fadd float %63, %69, !dbg !45
  %72 = fadd float %64, %70, !dbg !45
  %73 = getelementptr i8, ptr addrspace(1) %32, i64 1024, !dbg !46
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !47
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !47
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !47
  %77 = bitcast i32 %75 to float, !dbg !47
  %78 = bitcast i32 %76 to float, !dbg !47
  %79 = fsub float 0.000000e+00, %77, !dbg !48
  %80 = fsub float 0.000000e+00, %78, !dbg !48
  %81 = fmul float %79, 0x3FF7154760000000, !dbg !50
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !50
  %83 = fmul float %80, 0x3FF7154760000000, !dbg !50
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !50
  %85 = fadd float %82, 1.000000e+00, !dbg !51
  %86 = fadd float %84, 1.000000e+00, !dbg !51
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %85) #1, !dbg !52
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #1, !dbg !52
  %89 = fmul float %71, %87, !dbg !53
  %90 = fmul float %72, %88, !dbg !53
  %91 = fadd float %71, %89, !dbg !54
  %92 = fadd float %72, %90, !dbg !54
  %93 = add nsw i32 %15, -12, !dbg !55
  %94 = icmp ult i32 %93, 6, !dbg !55
  %95 = add nsw i32 %55, -3072, !dbg !56
  %96 = add nsw i32 %95, %54, !dbg !57
  %97 = sext i32 %96 to i64, !dbg !58
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !58
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %98, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !59
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !59
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !59
  %102 = bitcast i32 %100 to float, !dbg !59
  %103 = bitcast i32 %101 to float, !dbg !59
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !60
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %104, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !61
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !61
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !61
  %108 = bitcast i32 %106 to float, !dbg !61
  %109 = bitcast i32 %107 to float, !dbg !61
  %110 = fadd float %102, %108, !dbg !62
  %111 = fadd float %103, %109, !dbg !62
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !63
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %112, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !64
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !64
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !64
  %116 = bitcast i32 %114 to float, !dbg !64
  %117 = bitcast i32 %115 to float, !dbg !64
  %118 = fadd float %110, %116, !dbg !65
  %119 = fadd float %111, %117, !dbg !65
  %120 = getelementptr i8, ptr addrspace(1) %32, i64 2048, !dbg !66
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !67
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !67
  %123 = extractvalue { i32, i32 } %121, 1, !dbg !67
  %124 = bitcast i32 %122 to float, !dbg !67
  %125 = bitcast i32 %123 to float, !dbg !67
  %126 = fsub float 0.000000e+00, %124, !dbg !68
  %127 = fsub float 0.000000e+00, %125, !dbg !68
  %128 = fmul float %126, 0x3FF7154760000000, !dbg !70
  %129 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %128) #1, !dbg !70
  %130 = fmul float %127, 0x3FF7154760000000, !dbg !70
  %131 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %130) #1, !dbg !70
  %132 = fadd float %129, 1.000000e+00, !dbg !71
  %133 = fadd float %131, 1.000000e+00, !dbg !71
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %132) #1, !dbg !72
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %133) #1, !dbg !72
  %136 = fmul float %118, %134, !dbg !73
  %137 = fmul float %119, %135, !dbg !73
  %138 = fadd float %118, %136, !dbg !74
  %139 = fadd float %119, %137, !dbg !74
  %140 = icmp sgt i32 %15, 17, !dbg !75
  %141 = add nsw i32 %55, -4608, !dbg !76
  %142 = add nsw i32 %141, %54, !dbg !77
  %143 = sext i32 %142 to i64, !dbg !78
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !78
  %145 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %144, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #1, !dbg !79
  %146 = extractvalue { i32, i32 } %145, 0, !dbg !79
  %147 = extractvalue { i32, i32 } %145, 1, !dbg !79
  %148 = bitcast i32 %146 to float, !dbg !79
  %149 = bitcast i32 %147 to float, !dbg !79
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !80
  %151 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %150, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #1, !dbg !81
  %152 = extractvalue { i32, i32 } %151, 0, !dbg !81
  %153 = extractvalue { i32, i32 } %151, 1, !dbg !81
  %154 = bitcast i32 %152 to float, !dbg !81
  %155 = bitcast i32 %153 to float, !dbg !81
  %156 = fadd float %148, %154, !dbg !82
  %157 = fadd float %149, %155, !dbg !82
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !83
  %159 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %158, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #1, !dbg !84
  %160 = extractvalue { i32, i32 } %159, 0, !dbg !84
  %161 = extractvalue { i32, i32 } %159, 1, !dbg !84
  %162 = bitcast i32 %160 to float, !dbg !84
  %163 = bitcast i32 %161 to float, !dbg !84
  %164 = fadd float %156, %162, !dbg !85
  %165 = fadd float %157, %163, !dbg !85
  %166 = getelementptr float, ptr addrspace(1) %4, i64 %143, !dbg !86
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %166, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #1, !dbg !87
  %168 = extractvalue { i32, i32 } %167, 0, !dbg !87
  %169 = extractvalue { i32, i32 } %167, 1, !dbg !87
  %170 = bitcast i32 %168 to float, !dbg !87
  %171 = bitcast i32 %169 to float, !dbg !87
  %172 = fadd float %164, %170, !dbg !88
  %173 = fadd float %165, %171, !dbg !88
  %174 = getelementptr i8, ptr addrspace(1) %32, i64 3072, !dbg !89
  %175 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %174, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #1, !dbg !90
  %176 = extractvalue { i32, i32 } %175, 0, !dbg !90
  %177 = extractvalue { i32, i32 } %175, 1, !dbg !90
  %178 = bitcast i32 %176 to float, !dbg !90
  %179 = bitcast i32 %177 to float, !dbg !90
  %180 = fsub float 0.000000e+00, %178, !dbg !91
  %181 = fsub float 0.000000e+00, %179, !dbg !91
  %182 = fmul float %180, 0x3FF7154760000000, !dbg !93
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #1, !dbg !93
  %184 = fmul float %181, 0x3FF7154760000000, !dbg !93
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #1, !dbg !93
  %186 = fadd float %183, 1.000000e+00, !dbg !94
  %187 = fadd float %185, 1.000000e+00, !dbg !94
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %186) #1, !dbg !95
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %187) #1, !dbg !95
  %190 = fmul float %172, %188, !dbg !96
  %191 = fmul float %173, %189, !dbg !96
  %192 = fadd float %172, %190, !dbg !97
  %193 = fadd float %173, %191, !dbg !97
  %194 = select i1 %140, float %192, float 0.000000e+00, !dbg !98
  %195 = select i1 %140, float %193, float 0.000000e+00, !dbg !98
  %196 = select i1 %94, float %138, float %194, !dbg !99
  %197 = select i1 %94, float %139, float %195, !dbg !99
  %198 = select i1 %53, float %91, float %196, !dbg !99
  %199 = select i1 %53, float %92, float %197, !dbg !99
  %200 = select i1 %18, float %50, float %198, !dbg !99
  %201 = select i1 %18, float %51, float %199, !dbg !99
  %202 = sext i32 %13 to i64, !dbg !100
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !100
  %204 = bitcast float %200 to i32, !dbg !101
  %205 = bitcast float %201 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %204, i32 %205, ptr addrspace(1) %203, i1 true) #1, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxaeomutaktlasp3vppc6t3qv766uhj4zccelhjtqxa6lsxn43o4.py", directory: "inductor_cache/xa")
!4 = !{ptr @triton_poi_fused_cat_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_9", linkageName: "triton_poi_fused_cat_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 35, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 41, scope: !7)
!39 = !DILocation(line: 44, column: 36, scope: !7)
!40 = !DILocation(line: 44, column: 54, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 64, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 64, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 31, scope: !7)
!47 = !DILocation(line: 47, column: 52, scope: !7)
!48 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !49)
!49 = !DILocation(line: 48, column: 23, scope: !7)
!50 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !49)
!51 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !49)
!52 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !49)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 57, column: 55, scope: !7)
!58 = !DILocation(line: 57, column: 31, scope: !7)
!59 = !DILocation(line: 57, column: 65, scope: !7)
!60 = !DILocation(line: 58, column: 31, scope: !7)
!61 = !DILocation(line: 58, column: 65, scope: !7)
!62 = !DILocation(line: 59, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 31, scope: !7)
!64 = !DILocation(line: 60, column: 65, scope: !7)
!65 = !DILocation(line: 61, column: 20, scope: !7)
!66 = !DILocation(line: 62, column: 31, scope: !7)
!67 = !DILocation(line: 62, column: 52, scope: !7)
!68 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !69)
!69 = !DILocation(line: 63, column: 23, scope: !7)
!70 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !69)
!71 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !69)
!72 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !69)
!73 = !DILocation(line: 64, column: 20, scope: !7)
!74 = !DILocation(line: 65, column: 20, scope: !7)
!75 = !DILocation(line: 68, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 36, scope: !7)
!77 = !DILocation(line: 71, column: 55, scope: !7)
!78 = !DILocation(line: 71, column: 31, scope: !7)
!79 = !DILocation(line: 71, column: 65, scope: !7)
!80 = !DILocation(line: 72, column: 31, scope: !7)
!81 = !DILocation(line: 72, column: 65, scope: !7)
!82 = !DILocation(line: 73, column: 20, scope: !7)
!83 = !DILocation(line: 74, column: 31, scope: !7)
!84 = !DILocation(line: 74, column: 65, scope: !7)
!85 = !DILocation(line: 75, column: 20, scope: !7)
!86 = !DILocation(line: 76, column: 31, scope: !7)
!87 = !DILocation(line: 76, column: 65, scope: !7)
!88 = !DILocation(line: 77, column: 20, scope: !7)
!89 = !DILocation(line: 78, column: 31, scope: !7)
!90 = !DILocation(line: 78, column: 52, scope: !7)
!91 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !92)
!92 = !DILocation(line: 79, column: 23, scope: !7)
!93 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !92)
!94 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !92)
!95 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !92)
!96 = !DILocation(line: 80, column: 20, scope: !7)
!97 = !DILocation(line: 81, column: 20, scope: !7)
!98 = !DILocation(line: 83, column: 35, scope: !7)
!99 = !DILocation(line: 0, scope: !7)
!100 = !DILocation(line: 87, column: 25, scope: !7)
!101 = !DILocation(line: 87, column: 37, scope: !7)
!102 = !DILocation(line: 87, column: 4, scope: !7)
