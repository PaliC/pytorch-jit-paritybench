; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_leaky_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = icmp slt i32 %18, 256, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = or disjoint i32 %22, %16, !dbg !17
  %24 = icmp slt i32 %23, 1024, !dbg !18
  %25 = shl i32 %17, 8, !dbg !19
  %26 = shl i32 %18, 8, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %27 = sdiv i32 %.frozen, 256, !dbg !20
  %28 = shl i32 %27, 16, !dbg !21
  %29 = mul i32 %27, 256, !dbg !22
  %.decomposed = sub i32 %.frozen, %29, !dbg !22
  %30 = add i32 %28, %.decomposed, !dbg !23
  %31 = add i32 %30, %25, !dbg !24
  %32 = add i32 %30, %26, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = and i1 %19, %24, !dbg !26
  %38 = and i1 %20, %24, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %37) #4, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %38) #4, !dbg !27
  %41 = sext i32 %23 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !30
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !31
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !31
  %50 = bitcast i32 %46 to float, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %24) #4, !dbg !33
  %56 = sext i32 %.decomposed to i64, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !34
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %24) #4, !dbg !35
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 2.560000e+02) #4, !dbg !36
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 2.560000e+02) #4, !dbg !36
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 2.560000e+02) #4, !dbg !36
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 2.560000e+02) #4, !dbg !36
  %63 = fadd float %59, 0x3EE4F8B580000000, !dbg !37
  %64 = fadd float %60, 0x3EE4F8B580000000, !dbg !37
  %65 = fadd float %61, 0x3EE4F8B580000000, !dbg !37
  %66 = fadd float %62, 0x3EE4F8B580000000, !dbg !37
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %67, 0, !dbg !38
  br i1 %.not.i, label %70, label %68, !dbg !38

68:                                               ; preds = %8
  %69 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

70:                                               ; preds = %8
  %71 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %68, %70
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], !dbg !38
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i15 = icmp eq i32 %72, 0, !dbg !38
  br i1 %.not.i15, label %75, label %73, !dbg !38

73:                                               ; preds = %__nv_rsqrtf.exit
  %74 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %64), !dbg !38
  br label %__nv_rsqrtf.exit17, !dbg !38

75:                                               ; preds = %__nv_rsqrtf.exit
  %76 = tail call float @llvm.nvvm.rsqrt.approx.f(float %64), !dbg !38
  br label %__nv_rsqrtf.exit17, !dbg !38

__nv_rsqrtf.exit17:                               ; preds = %73, %75
  %.0.i16 = phi float [ %74, %73 ], [ %76, %75 ], !dbg !38
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i18 = icmp eq i32 %77, 0, !dbg !38
  br i1 %.not.i18, label %80, label %78, !dbg !38

78:                                               ; preds = %__nv_rsqrtf.exit17
  %79 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %65), !dbg !38
  br label %__nv_rsqrtf.exit20, !dbg !38

80:                                               ; preds = %__nv_rsqrtf.exit17
  %81 = tail call float @llvm.nvvm.rsqrt.approx.f(float %65), !dbg !38
  br label %__nv_rsqrtf.exit20, !dbg !38

__nv_rsqrtf.exit20:                               ; preds = %78, %80
  %.0.i19 = phi float [ %79, %78 ], [ %81, %80 ], !dbg !38
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i21 = icmp eq i32 %82, 0, !dbg !38
  br i1 %.not.i21, label %85, label %83, !dbg !38

83:                                               ; preds = %__nv_rsqrtf.exit20
  %84 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %66), !dbg !38
  br label %__nv_rsqrtf.exit23, !dbg !38

85:                                               ; preds = %__nv_rsqrtf.exit20
  %86 = tail call float @llvm.nvvm.rsqrt.approx.f(float %66), !dbg !38
  br label %__nv_rsqrtf.exit23, !dbg !38

__nv_rsqrtf.exit23:                               ; preds = %83, %85
  %.0.i22 = phi float [ %84, %83 ], [ %86, %85 ], !dbg !38
  %87 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !35
  %100 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !35
  %101 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !35
  %102 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !35
  %103 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !33
  %104 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !33
  %105 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !33
  %106 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !33
  %107 = or disjoint i32 %22, %14, !dbg !17
  %108 = icmp slt i32 %107, 1024, !dbg !18
  %109 = or disjoint i32 %10, %16, !dbg !13
  %110 = icmp slt i32 %109, 256, !dbg !14
  %111 = and i1 %110, %108, !dbg !26
  %112 = or disjoint i32 %22, %13, !dbg !17
  %113 = icmp slt i32 %112, 1024, !dbg !18
  %114 = and i1 %110, %113, !dbg !26
  %115 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !29
  %116 = insertelement <4 x i32> %115, i32 %90, i64 1, !dbg !29
  %117 = insertelement <4 x i32> %116, i32 %92, i64 2, !dbg !29
  %118 = insertelement <4 x i32> %117, i32 %94, i64 3, !dbg !29
  %119 = bitcast <4 x i32> %118 to <4 x float>, !dbg !29
  %120 = shufflevector <4 x float> %119, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %121 = insertelement <8 x i32> poison, i32 %87, i64 0, !dbg !27
  %122 = insertelement <8 x i32> %121, i32 %89, i64 1, !dbg !27
  %123 = insertelement <8 x i32> %122, i32 %91, i64 2, !dbg !27
  %124 = insertelement <8 x i32> %123, i32 %93, i64 3, !dbg !27
  %125 = insertelement <8 x i32> %124, i32 %95, i64 4, !dbg !27
  %126 = insertelement <8 x i32> %125, i32 %96, i64 5, !dbg !27
  %127 = insertelement <8 x i32> %126, i32 %97, i64 6, !dbg !27
  %128 = insertelement <8 x i32> %127, i32 %98, i64 7, !dbg !27
  %129 = bitcast <8 x i32> %128 to <8 x float>, !dbg !27
  %130 = fsub <8 x float> %129, %120, !dbg !39
  %131 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !35
  %132 = insertelement <4 x i32> %131, i32 %100, i64 1, !dbg !35
  %133 = insertelement <4 x i32> %132, i32 %101, i64 2, !dbg !35
  %134 = insertelement <4 x i32> %133, i32 %102, i64 3, !dbg !35
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !35
  %136 = shufflevector <4 x float> %135, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %137 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !33
  %138 = insertelement <4 x i32> %137, i32 %104, i64 1, !dbg !33
  %139 = insertelement <4 x i32> %138, i32 %105, i64 2, !dbg !33
  %140 = insertelement <4 x i32> %139, i32 %106, i64 3, !dbg !33
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !33
  %142 = shufflevector <4 x float> %141, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %143 = insertelement <8 x float> poison, float %.0.i22, i64 0, !dbg !40
  %144 = insertelement <8 x float> %143, float %.0.i19, i64 1, !dbg !40
  %145 = insertelement <8 x float> %144, float %.0.i16, i64 2, !dbg !40
  %146 = insertelement <8 x float> %145, float %.0.i, i64 3, !dbg !40
  %147 = shufflevector <8 x float> %146, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %148 = fmul <8 x float> %130, %147, !dbg !40
  %149 = fmul <8 x float> %148, %142, !dbg !41
  %150 = fadd <8 x float> %149, %136, !dbg !42
  %151 = fcmp ogt <8 x float> %150, zeroinitializer, !dbg !43
  %152 = extractelement <8 x float> %150, i64 7, !dbg !44
  %153 = fmul float %152, 0x3FC99999A0000000, !dbg !45
  %154 = extractelement <8 x float> %150, i64 6, !dbg !44
  %155 = fmul float %154, 0x3FC99999A0000000, !dbg !45
  %156 = extractelement <8 x float> %150, i64 5, !dbg !44
  %157 = fmul float %156, 0x3FC99999A0000000, !dbg !45
  %158 = extractelement <8 x float> %150, i64 4, !dbg !44
  %159 = fmul float %158, 0x3FC99999A0000000, !dbg !45
  %160 = extractelement <8 x float> %150, i64 3, !dbg !44
  %161 = fmul float %160, 0x3FC99999A0000000, !dbg !45
  %162 = extractelement <8 x float> %150, i64 2, !dbg !44
  %163 = fmul float %162, 0x3FC99999A0000000, !dbg !45
  %164 = extractelement <8 x float> %150, i64 1, !dbg !44
  %165 = fmul float %164, 0x3FC99999A0000000, !dbg !45
  %166 = extractelement <8 x float> %150, i64 0, !dbg !44
  %167 = fmul float %166, 0x3FC99999A0000000, !dbg !45
  %168 = extractelement <8 x i1> %151, i64 7, !dbg !44
  %169 = select i1 %168, float %152, float %153, !dbg !44
  %170 = extractelement <8 x i1> %151, i64 6, !dbg !44
  %171 = select i1 %170, float %154, float %155, !dbg !44
  %172 = extractelement <8 x i1> %151, i64 5, !dbg !44
  %173 = select i1 %172, float %156, float %157, !dbg !44
  %174 = extractelement <8 x i1> %151, i64 4, !dbg !44
  %175 = select i1 %174, float %158, float %159, !dbg !44
  %176 = extractelement <8 x i1> %151, i64 3, !dbg !44
  %177 = select i1 %176, float %160, float %161, !dbg !44
  %178 = extractelement <8 x i1> %151, i64 2, !dbg !44
  %179 = select i1 %178, float %162, float %163, !dbg !44
  %180 = extractelement <8 x i1> %151, i64 1, !dbg !44
  %181 = select i1 %180, float %164, float %165, !dbg !44
  %182 = extractelement <8 x i1> %151, i64 0, !dbg !44
  %183 = select i1 %182, float %166, float %167, !dbg !44
  %184 = shl i32 %112, 8, !dbg !46
  %185 = shl i32 %107, 8, !dbg !46
  %186 = add i32 %184, %109, !dbg !47
  %187 = add i32 %185, %109, !dbg !47
  %188 = sext i32 %186 to i64, !dbg !48
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !48
  %190 = sext i32 %187 to i64, !dbg !48
  %191 = getelementptr float, ptr addrspace(1) %5, i64 %190, !dbg !48
  %192 = shl i32 %11, 7, !dbg !49
  %193 = and i32 %192, 896, !dbg !49
  %194 = or disjoint i32 %193, %13, !dbg !49
  %195 = and i32 %15, 508, !dbg !49
  %196 = lshr exact i32 %193, 1, !dbg !49
  %197 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %196, !dbg !49
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %194, !dbg !49
  %199 = bitcast float %169 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #4, !dbg !49
  %200 = or disjoint i32 %194, 32, !dbg !49
  %201 = lshr i32 %200, 3, !dbg !49
  %202 = and i32 %201, 116, !dbg !49
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !49
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %200, !dbg !49
  %205 = bitcast float %171 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !49
  %206 = or disjoint i32 %194, 64, !dbg !49
  %207 = lshr i32 %206, 3, !dbg !49
  %208 = and i32 %207, 120, !dbg !49
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !49
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %206, !dbg !49
  %211 = bitcast float %173 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #4, !dbg !49
  %212 = or disjoint i32 %194, 96, !dbg !49
  %213 = lshr i32 %212, 3, !dbg !49
  %214 = and i32 %213, 124, !dbg !49
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !49
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %212, !dbg !49
  %217 = bitcast float %175 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #4, !dbg !49
  %218 = or disjoint i32 %194, 16, !dbg !49
  %219 = getelementptr float, ptr addrspace(3) %197, i32 %218, !dbg !49
  %220 = bitcast float %177 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !49
  %221 = or disjoint i32 %194, 48, !dbg !49
  %222 = lshr i32 %221, 3, !dbg !49
  %223 = and i32 %222, 116, !dbg !49
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !49
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %221, !dbg !49
  %226 = bitcast float %179 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !49
  %227 = or disjoint i32 %194, 80, !dbg !49
  %228 = lshr i32 %227, 3, !dbg !49
  %229 = and i32 %228, 120, !dbg !49
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !49
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %227, !dbg !49
  %232 = bitcast float %181 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !49
  %233 = or disjoint i32 %194, 112, !dbg !49
  %234 = lshr i32 %233, 3, !dbg !49
  %235 = and i32 %234, 124, !dbg !49
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !49
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %233, !dbg !49
  %238 = bitcast float %183 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %239 = lshr i32 %15, 3, !dbg !49
  %240 = and i32 %239, 60, !dbg !49
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !49
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %195, !dbg !49
  %243 = or disjoint i32 %195, 512, !dbg !49
  %244 = lshr i32 %243, 3, !dbg !49
  %245 = and i32 %244, 124, !dbg !49
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !49
  %247 = getelementptr inbounds float, ptr addrspace(3) %246, i32 %243, !dbg !49
  %248 = load <4 x i32>, ptr addrspace(3) %247, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %242, align 16, !dbg !49
  %249 = getelementptr inbounds i8, ptr addrspace(3) %242, i32 4, !dbg !49
  %.extract8 = load i32, ptr addrspace(3) %249, align 4, !dbg !49
  %250 = getelementptr inbounds i8, ptr addrspace(3) %242, i32 8, !dbg !49
  %.extract9 = load i32, ptr addrspace(3) %250, align 8, !dbg !49
  %251 = getelementptr inbounds i8, ptr addrspace(3) %242, i32 12, !dbg !49
  %.extract10 = load i32, ptr addrspace(3) %251, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %189, i1 %114) #4, !dbg !49
  %.extract11 = extractelement <4 x i32> %248, i64 0, !dbg !49
  %.extract12 = extractelement <4 x i32> %248, i64 1, !dbg !49
  %.extract13 = extractelement <4 x i32> %248, i64 2, !dbg !49
  %.extract14 = extractelement <4 x i32> %248, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %191, i1 %111) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 34, scope: !7)
!20 = !DILocation(line: 30, column: 52, scope: !7)
!21 = !DILocation(line: 30, column: 46, scope: !7)
!22 = !DILocation(line: 30, column: 66, scope: !7)
!23 = !DILocation(line: 30, column: 39, scope: !7)
!24 = !DILocation(line: 30, column: 61, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 82, scope: !7)
!27 = !DILocation(line: 30, column: 74, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 35, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 36, scope: !7)
!34 = !DILocation(line: 34, column: 32, scope: !7)
!35 = !DILocation(line: 34, column: 44, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 27, scope: !7)
!39 = !DILocation(line: 35, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 34, scope: !7)
!47 = !DILocation(line: 49, column: 30, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 46, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
