; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_unsqueeze_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %15 = and i32 %14, 3, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = and i32 %16, 12, !dbg !12
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = or disjoint i32 %18, 4, !dbg !13
  %20 = or disjoint i32 %18, 8, !dbg !13
  %21 = or disjoint i32 %18, 12, !dbg !13
  %22 = or disjoint i32 %12, %17, !dbg !13
  %23 = icmp slt i32 %18, 16, !dbg !14
  %24 = icmp slt i32 %19, 16, !dbg !14
  %25 = icmp slt i32 %20, 16, !dbg !14
  %26 = icmp slt i32 %21, 16, !dbg !14
  %27 = icmp slt i32 %22, 16, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = shl i32 %28, 8, !dbg !16
  %30 = and i32 %16, 252, !dbg !17
  %31 = lshr i32 %13, 2, !dbg !17
  %32 = and i32 %31, 63, !dbg !17
  %33 = or disjoint i32 %29, %30, !dbg !18
  %34 = or disjoint i32 %29, %32, !dbg !18
  %35 = or disjoint i32 %34, 64, !dbg !18
  %36 = or disjoint i32 %34, 128, !dbg !18
  %37 = or disjoint i32 %34, 192, !dbg !18
  %38 = icmp slt i32 %33, 256, !dbg !19
  %39 = icmp slt i32 %34, 256, !dbg !19
  %40 = icmp slt i32 %35, 256, !dbg !19
  %41 = icmp slt i32 %36, 256, !dbg !19
  %42 = icmp slt i32 %37, 256, !dbg !19
  %43 = shl i32 %18, 8, !dbg !20
  %44 = shl i32 %19, 8, !dbg !20
  %45 = shl i32 %20, 8, !dbg !20
  %46 = shl i32 %21, 8, !dbg !20
  %47 = add i32 %33, %43, !dbg !21
  %48 = add i32 %33, %44, !dbg !21
  %49 = add i32 %33, %45, !dbg !21
  %50 = add i32 %33, %46, !dbg !21
  %51 = sext i32 %47 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %48 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %49 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %50 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = and i1 %23, %38, !dbg !23
  %60 = and i1 %24, %38, !dbg !23
  %61 = and i1 %25, %38, !dbg !23
  %62 = and i1 %26, %38, !dbg !23
  %63 = and i1 %27, %39, !dbg !23
  %64 = and i1 %40, %27, !dbg !23
  %65 = and i1 %41, %27, !dbg !23
  %66 = and i1 %42, %27, !dbg !23
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = bitcast i32 %68 to float, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !24
  %81 = bitcast i32 %77 to float, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !24
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !24
  %90 = bitcast i32 %86 to float, !dbg !24
  %91 = bitcast i32 %87 to float, !dbg !24
  %92 = bitcast i32 %88 to float, !dbg !24
  %93 = bitcast i32 %89 to float, !dbg !24
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #2, !dbg !24
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !24
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !24
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !24
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !24
  %99 = bitcast i32 %95 to float, !dbg !24
  %100 = bitcast i32 %96 to float, !dbg !24
  %101 = bitcast i32 %97 to float, !dbg !24
  %102 = bitcast i32 %98 to float, !dbg !24
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !25
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !25
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !25
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !25
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %59) #2, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !26
  %112 = bitcast i32 %108 to float, !dbg !26
  %113 = bitcast i32 %109 to float, !dbg !26
  %114 = bitcast i32 %110 to float, !dbg !26
  %115 = bitcast i32 %111 to float, !dbg !26
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %60) #2, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !26
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !26
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !26
  %121 = bitcast i32 %117 to float, !dbg !26
  %122 = bitcast i32 %118 to float, !dbg !26
  %123 = bitcast i32 %119 to float, !dbg !26
  %124 = bitcast i32 %120 to float, !dbg !26
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %61) #2, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !26
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !26
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !26
  %130 = bitcast i32 %126 to float, !dbg !26
  %131 = bitcast i32 %127 to float, !dbg !26
  %132 = bitcast i32 %128 to float, !dbg !26
  %133 = bitcast i32 %129 to float, !dbg !26
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %62) #2, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !26
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !26
  %139 = bitcast i32 %135 to float, !dbg !26
  %140 = bitcast i32 %136 to float, !dbg !26
  %141 = bitcast i32 %137 to float, !dbg !26
  %142 = bitcast i32 %138 to float, !dbg !26
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !27
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !27
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !27
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !27
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %59) #2, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !28
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !28
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !28
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !28
  %152 = bitcast i32 %148 to float, !dbg !28
  %153 = bitcast i32 %149 to float, !dbg !28
  %154 = bitcast i32 %150 to float, !dbg !28
  %155 = bitcast i32 %151 to float, !dbg !28
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 %60) #2, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !28
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !28
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !28
  %161 = bitcast i32 %157 to float, !dbg !28
  %162 = bitcast i32 %158 to float, !dbg !28
  %163 = bitcast i32 %159 to float, !dbg !28
  %164 = bitcast i32 %160 to float, !dbg !28
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %61) #2, !dbg !28
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !28
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !28
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !28
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !28
  %170 = bitcast i32 %166 to float, !dbg !28
  %171 = bitcast i32 %167 to float, !dbg !28
  %172 = bitcast i32 %168 to float, !dbg !28
  %173 = bitcast i32 %169 to float, !dbg !28
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %146, i1 %62) #2, !dbg !28
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !28
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !28
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !28
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !28
  %179 = bitcast i32 %175 to float, !dbg !28
  %180 = bitcast i32 %176 to float, !dbg !28
  %181 = bitcast i32 %177 to float, !dbg !28
  %182 = bitcast i32 %178 to float, !dbg !28
  %183 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !29
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !29
  %185 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !29
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !29
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %59) #2, !dbg !30
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !30
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !30
  %192 = bitcast i32 %188 to float, !dbg !30
  %193 = bitcast i32 %189 to float, !dbg !30
  %194 = bitcast i32 %190 to float, !dbg !30
  %195 = bitcast i32 %191 to float, !dbg !30
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %184, i1 %60) #2, !dbg !30
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !30
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !30
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !30
  %201 = bitcast i32 %197 to float, !dbg !30
  %202 = bitcast i32 %198 to float, !dbg !30
  %203 = bitcast i32 %199 to float, !dbg !30
  %204 = bitcast i32 %200 to float, !dbg !30
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %61) #2, !dbg !30
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !30
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !30
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !30
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !30
  %210 = bitcast i32 %206 to float, !dbg !30
  %211 = bitcast i32 %207 to float, !dbg !30
  %212 = bitcast i32 %208 to float, !dbg !30
  %213 = bitcast i32 %209 to float, !dbg !30
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %62) #2, !dbg !30
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !30
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !30
  %219 = bitcast i32 %215 to float, !dbg !30
  %220 = bitcast i32 %216 to float, !dbg !30
  %221 = bitcast i32 %217 to float, !dbg !30
  %222 = bitcast i32 %218 to float, !dbg !30
  %223 = fadd float %72, %112, !dbg !31
  %224 = fadd float %73, %113, !dbg !31
  %225 = fadd float %74, %114, !dbg !31
  %226 = fadd float %75, %115, !dbg !31
  %227 = fadd float %81, %121, !dbg !31
  %228 = fadd float %82, %122, !dbg !31
  %229 = fadd float %83, %123, !dbg !31
  %230 = fadd float %84, %124, !dbg !31
  %231 = fadd float %90, %130, !dbg !31
  %232 = fadd float %91, %131, !dbg !31
  %233 = fadd float %92, %132, !dbg !31
  %234 = fadd float %93, %133, !dbg !31
  %235 = fadd float %99, %139, !dbg !31
  %236 = fadd float %100, %140, !dbg !31
  %237 = fadd float %101, %141, !dbg !31
  %238 = fadd float %102, %142, !dbg !31
  %239 = fadd float %223, %152, !dbg !32
  %240 = fadd float %224, %153, !dbg !32
  %241 = fadd float %225, %154, !dbg !32
  %242 = fadd float %226, %155, !dbg !32
  %243 = fadd float %227, %161, !dbg !32
  %244 = fadd float %228, %162, !dbg !32
  %245 = fadd float %229, %163, !dbg !32
  %246 = fadd float %230, %164, !dbg !32
  %247 = fadd float %231, %170, !dbg !32
  %248 = fadd float %232, %171, !dbg !32
  %249 = fadd float %233, %172, !dbg !32
  %250 = fadd float %234, %173, !dbg !32
  %251 = fadd float %235, %179, !dbg !32
  %252 = fadd float %236, %180, !dbg !32
  %253 = fadd float %237, %181, !dbg !32
  %254 = fadd float %238, %182, !dbg !32
  %255 = fadd float %239, %192, !dbg !33
  %256 = fadd float %240, %193, !dbg !33
  %257 = fadd float %241, %194, !dbg !33
  %258 = fadd float %242, %195, !dbg !33
  %259 = fadd float %243, %201, !dbg !33
  %260 = fadd float %244, %202, !dbg !33
  %261 = fadd float %245, %203, !dbg !33
  %262 = fadd float %246, %204, !dbg !33
  %263 = fadd float %247, %210, !dbg !33
  %264 = fadd float %248, %211, !dbg !33
  %265 = fadd float %249, %212, !dbg !33
  %266 = fadd float %250, %213, !dbg !33
  %267 = fadd float %251, %219, !dbg !33
  %268 = fadd float %252, %220, !dbg !33
  %269 = fadd float %253, %221, !dbg !33
  %270 = fadd float %254, %222, !dbg !33
  %271 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !34
  %272 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !34
  %273 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !34
  %274 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %68, i32 %69, i32 %70, i32 %71, ptr addrspace(1) %271, i1 %59) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %77, i32 %78, i32 %79, i32 %80, ptr addrspace(1) %272, i1 %60) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %86, i32 %87, i32 %88, i32 %89, ptr addrspace(1) %273, i1 %61) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %274, i1 %62) #2, !dbg !35
  %275 = shl i32 %34, 4, !dbg !36
  %276 = shl i32 %35, 4, !dbg !36
  %277 = shl i32 %36, 4, !dbg !36
  %278 = shl i32 %37, 4, !dbg !36
  %279 = add i32 %275, %22, !dbg !37
  %280 = add i32 %22, %276, !dbg !37
  %281 = add i32 %22, %277, !dbg !37
  %282 = add i32 %22, %278, !dbg !37
  %283 = sext i32 %279 to i64, !dbg !38
  %284 = getelementptr float, ptr addrspace(1) %5, i64 %283, !dbg !38
  %285 = sext i32 %280 to i64, !dbg !38
  %286 = getelementptr float, ptr addrspace(1) %5, i64 %285, !dbg !38
  %287 = sext i32 %281 to i64, !dbg !38
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %287, !dbg !38
  %289 = sext i32 %282 to i64, !dbg !38
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %289, !dbg !38
  %291 = shl i32 %13, 6, !dbg !39
  %292 = and i32 %291, 4032, !dbg !39
  %293 = or disjoint i32 %292, %15, !dbg !39
  %294 = and i32 %16, 1020, !dbg !39
  %295 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %292, !dbg !39
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %293, !dbg !39
  %297 = bitcast float %223 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #2, !dbg !39
  %298 = or disjoint i32 %293, 16, !dbg !39
  %299 = lshr i32 %298, 2, !dbg !39
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i32 %299, !dbg !39
  %301 = getelementptr float, ptr addrspace(3) %300, i32 %298, !dbg !39
  %302 = bitcast float %224 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #2, !dbg !39
  %303 = or disjoint i32 %293, 32, !dbg !39
  %304 = lshr i32 %303, 2, !dbg !39
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !39
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %303, !dbg !39
  %307 = bitcast float %225 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #2, !dbg !39
  %308 = or disjoint i32 %293, 48, !dbg !39
  %309 = lshr i32 %308, 2, !dbg !39
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !39
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %308, !dbg !39
  %312 = bitcast float %226 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #2, !dbg !39
  %313 = or disjoint i32 %293, 4, !dbg !39
  %314 = getelementptr float, ptr addrspace(3) %295, i32 %313, !dbg !39
  %315 = bitcast float %227 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #2, !dbg !39
  %316 = or disjoint i32 %293, 20, !dbg !39
  %317 = lshr i32 %316, 2, !dbg !39
  %318 = and i32 %317, 1012, !dbg !39
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i32 %318, !dbg !39
  %320 = getelementptr float, ptr addrspace(3) %319, i32 %316, !dbg !39
  %321 = bitcast float %228 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #2, !dbg !39
  %322 = or disjoint i32 %293, 36, !dbg !39
  %323 = lshr i32 %322, 2, !dbg !39
  %324 = and i32 %323, 1016, !dbg !39
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %324, !dbg !39
  %326 = getelementptr float, ptr addrspace(3) %325, i32 %322, !dbg !39
  %327 = bitcast float %229 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #2, !dbg !39
  %328 = or disjoint i32 %293, 52, !dbg !39
  %329 = lshr i32 %328, 2, !dbg !39
  %330 = and i32 %329, 1020, !dbg !39
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !39
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %328, !dbg !39
  %333 = bitcast float %230 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !39
  %334 = or disjoint i32 %293, 8, !dbg !39
  %335 = getelementptr float, ptr addrspace(3) %295, i32 %334, !dbg !39
  %336 = bitcast float %231 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #2, !dbg !39
  %337 = or disjoint i32 %293, 24, !dbg !39
  %338 = lshr i32 %337, 2, !dbg !39
  %339 = and i32 %338, 1012, !dbg !39
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i32 %339, !dbg !39
  %341 = getelementptr float, ptr addrspace(3) %340, i32 %337, !dbg !39
  %342 = bitcast float %232 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #2, !dbg !39
  %343 = or disjoint i32 %293, 40, !dbg !39
  %344 = lshr i32 %343, 2, !dbg !39
  %345 = and i32 %344, 1016, !dbg !39
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i32 %345, !dbg !39
  %347 = getelementptr float, ptr addrspace(3) %346, i32 %343, !dbg !39
  %348 = bitcast float %233 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #2, !dbg !39
  %349 = or disjoint i32 %293, 56, !dbg !39
  %350 = lshr i32 %349, 2, !dbg !39
  %351 = and i32 %350, 1020, !dbg !39
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i32 %351, !dbg !39
  %353 = getelementptr float, ptr addrspace(3) %352, i32 %349, !dbg !39
  %354 = bitcast float %234 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #2, !dbg !39
  %355 = or disjoint i32 %293, 12, !dbg !39
  %356 = getelementptr float, ptr addrspace(3) %295, i32 %355, !dbg !39
  %357 = bitcast float %235 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #2, !dbg !39
  %358 = or disjoint i32 %293, 28, !dbg !39
  %359 = lshr i32 %358, 2, !dbg !39
  %360 = and i32 %359, 1012, !dbg !39
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %360, !dbg !39
  %362 = getelementptr float, ptr addrspace(3) %361, i32 %358, !dbg !39
  %363 = bitcast float %236 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #2, !dbg !39
  %364 = or disjoint i32 %293, 44, !dbg !39
  %365 = lshr i32 %364, 2, !dbg !39
  %366 = and i32 %365, 1016, !dbg !39
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %366, !dbg !39
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %364, !dbg !39
  %369 = bitcast float %237 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #2, !dbg !39
  %370 = or disjoint i32 %293, 60, !dbg !39
  %371 = lshr i32 %370, 2, !dbg !39
  %372 = and i32 %371, 1020, !dbg !39
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i32 %372, !dbg !39
  %374 = getelementptr float, ptr addrspace(3) %373, i32 %370, !dbg !39
  %375 = bitcast float %238 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %376 = and i32 %13, 252, !dbg !39
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !39
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %294, !dbg !39
  %379 = or disjoint i32 %294, 1024, !dbg !39
  %380 = lshr exact i32 %379, 2, !dbg !39
  %381 = and i32 %380, 508, !dbg !39
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %381, !dbg !39
  %383 = getelementptr inbounds float, ptr addrspace(3) %382, i32 %379, !dbg !39
  %384 = load <4 x i32>, ptr addrspace(3) %383, align 16, !dbg !39
  %385 = or disjoint i32 %294, 2048, !dbg !39
  %386 = lshr exact i32 %385, 2, !dbg !39
  %387 = and i32 %386, 764, !dbg !39
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %387, !dbg !39
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %385, !dbg !39
  %390 = load <4 x i32>, ptr addrspace(3) %389, align 16, !dbg !39
  %391 = or disjoint i32 %294, 3072, !dbg !39
  %392 = lshr exact i32 %391, 2, !dbg !39
  %393 = and i32 %392, 1020, !dbg !39
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %393, !dbg !39
  %395 = getelementptr inbounds float, ptr addrspace(3) %394, i32 %391, !dbg !39
  %396 = load <4 x i32>, ptr addrspace(3) %395, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %378, align 16, !dbg !39
  %397 = getelementptr inbounds i8, ptr addrspace(3) %378, i32 4, !dbg !39
  %.extract19 = load i32, ptr addrspace(3) %397, align 4, !dbg !39
  %398 = getelementptr inbounds i8, ptr addrspace(3) %378, i32 8, !dbg !39
  %.extract20 = load i32, ptr addrspace(3) %398, align 8, !dbg !39
  %399 = getelementptr inbounds i8, ptr addrspace(3) %378, i32 12, !dbg !39
  %.extract21 = load i32, ptr addrspace(3) %399, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %284, i1 %63) #2, !dbg !39
  %.extract22 = extractelement <4 x i32> %384, i64 0, !dbg !39
  %.extract23 = extractelement <4 x i32> %384, i64 1, !dbg !39
  %.extract24 = extractelement <4 x i32> %384, i64 2, !dbg !39
  %.extract25 = extractelement <4 x i32> %384, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %286, i1 %64) #2, !dbg !39
  %.extract26 = extractelement <4 x i32> %390, i64 0, !dbg !39
  %.extract27 = extractelement <4 x i32> %390, i64 1, !dbg !39
  %.extract28 = extractelement <4 x i32> %390, i64 2, !dbg !39
  %.extract29 = extractelement <4 x i32> %390, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %288, i1 %65) #2, !dbg !39
  %.extract30 = extractelement <4 x i32> %396, i64 0, !dbg !39
  %.extract31 = extractelement <4 x i32> %396, i64 1, !dbg !39
  %.extract32 = extractelement <4 x i32> %396, i64 2, !dbg !39
  %.extract33 = extractelement <4 x i32> %396, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %290, i1 %66) #2, !dbg !39
  %400 = getelementptr float, ptr addrspace(1) %6, i64 %283, !dbg !40
  %401 = getelementptr float, ptr addrspace(1) %6, i64 %285, !dbg !40
  %402 = getelementptr float, ptr addrspace(1) %6, i64 %287, !dbg !40
  %403 = getelementptr float, ptr addrspace(1) %6, i64 %289, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %404 = bitcast float %239 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %404, i1 true) #2, !dbg !41
  %405 = bitcast float %240 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %405, i1 true) #2, !dbg !41
  %406 = bitcast float %241 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %406, i1 true) #2, !dbg !41
  %407 = bitcast float %242 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %407, i1 true) #2, !dbg !41
  %408 = bitcast float %243 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %408, i1 true) #2, !dbg !41
  %409 = bitcast float %244 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %409, i1 true) #2, !dbg !41
  %410 = bitcast float %245 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %410, i1 true) #2, !dbg !41
  %411 = bitcast float %246 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %411, i1 true) #2, !dbg !41
  %412 = bitcast float %247 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %412, i1 true) #2, !dbg !41
  %413 = bitcast float %248 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %413, i1 true) #2, !dbg !41
  %414 = bitcast float %249 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %414, i1 true) #2, !dbg !41
  %415 = bitcast float %250 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %415, i1 true) #2, !dbg !41
  %416 = bitcast float %251 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %416, i1 true) #2, !dbg !41
  %417 = bitcast float %252 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %417, i1 true) #2, !dbg !41
  %418 = bitcast float %253 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %418, i1 true) #2, !dbg !41
  %419 = bitcast float %254 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %419, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %420 = load <4 x i32>, ptr addrspace(3) %383, align 16, !dbg !41
  %421 = load <4 x i32>, ptr addrspace(3) %389, align 16, !dbg !41
  %422 = load <4 x i32>, ptr addrspace(3) %395, align 16, !dbg !41
  %.extract49 = load i32, ptr addrspace(3) %378, align 16, !dbg !41
  %.extract50 = load i32, ptr addrspace(3) %397, align 4, !dbg !41
  %.extract51 = load i32, ptr addrspace(3) %398, align 8, !dbg !41
  %.extract52 = load i32, ptr addrspace(3) %399, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract49, i32 %.extract50, i32 %.extract51, i32 %.extract52, ptr addrspace(1) %400, i1 %63) #2, !dbg !41
  %.extract53 = extractelement <4 x i32> %420, i64 0, !dbg !41
  %.extract54 = extractelement <4 x i32> %420, i64 1, !dbg !41
  %.extract55 = extractelement <4 x i32> %420, i64 2, !dbg !41
  %.extract56 = extractelement <4 x i32> %420, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract53, i32 %.extract54, i32 %.extract55, i32 %.extract56, ptr addrspace(1) %401, i1 %64) #2, !dbg !41
  %.extract57 = extractelement <4 x i32> %421, i64 0, !dbg !41
  %.extract58 = extractelement <4 x i32> %421, i64 1, !dbg !41
  %.extract59 = extractelement <4 x i32> %421, i64 2, !dbg !41
  %.extract60 = extractelement <4 x i32> %421, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract57, i32 %.extract58, i32 %.extract59, i32 %.extract60, ptr addrspace(1) %402, i1 %65) #2, !dbg !41
  %.extract61 = extractelement <4 x i32> %422, i64 0, !dbg !41
  %.extract62 = extractelement <4 x i32> %422, i64 1, !dbg !41
  %.extract63 = extractelement <4 x i32> %422, i64 2, !dbg !41
  %.extract64 = extractelement <4 x i32> %422, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract61, i32 %.extract62, i32 %.extract63, i32 %.extract64, ptr addrspace(1) %403, i1 %66) #2, !dbg !41
  %423 = getelementptr float, ptr addrspace(1) %7, i64 %283, !dbg !42
  %424 = getelementptr float, ptr addrspace(1) %7, i64 %285, !dbg !42
  %425 = getelementptr float, ptr addrspace(1) %7, i64 %287, !dbg !42
  %426 = getelementptr float, ptr addrspace(1) %7, i64 %289, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %427 = bitcast float %255 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %427, i1 true) #2, !dbg !43
  %428 = bitcast float %256 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %428, i1 true) #2, !dbg !43
  %429 = bitcast float %257 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %429, i1 true) #2, !dbg !43
  %430 = bitcast float %258 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %430, i1 true) #2, !dbg !43
  %431 = bitcast float %259 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %431, i1 true) #2, !dbg !43
  %432 = bitcast float %260 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %432, i1 true) #2, !dbg !43
  %433 = bitcast float %261 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %433, i1 true) #2, !dbg !43
  %434 = bitcast float %262 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %434, i1 true) #2, !dbg !43
  %435 = bitcast float %263 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %435, i1 true) #2, !dbg !43
  %436 = bitcast float %264 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %436, i1 true) #2, !dbg !43
  %437 = bitcast float %265 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %437, i1 true) #2, !dbg !43
  %438 = bitcast float %266 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %438, i1 true) #2, !dbg !43
  %439 = bitcast float %267 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %439, i1 true) #2, !dbg !43
  %440 = bitcast float %268 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %440, i1 true) #2, !dbg !43
  %441 = bitcast float %269 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %441, i1 true) #2, !dbg !43
  %442 = bitcast float %270 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %442, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %443 = load <4 x i32>, ptr addrspace(3) %383, align 16, !dbg !43
  %444 = load <4 x i32>, ptr addrspace(3) %389, align 16, !dbg !43
  %445 = load <4 x i32>, ptr addrspace(3) %395, align 16, !dbg !43
  %.extract80 = load i32, ptr addrspace(3) %378, align 16, !dbg !43
  %.extract81 = load i32, ptr addrspace(3) %397, align 4, !dbg !43
  %.extract82 = load i32, ptr addrspace(3) %398, align 8, !dbg !43
  %.extract83 = load i32, ptr addrspace(3) %399, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract80, i32 %.extract81, i32 %.extract82, i32 %.extract83, ptr addrspace(1) %423, i1 %63) #2, !dbg !43
  %.extract84 = extractelement <4 x i32> %443, i64 0, !dbg !43
  %.extract85 = extractelement <4 x i32> %443, i64 1, !dbg !43
  %.extract86 = extractelement <4 x i32> %443, i64 2, !dbg !43
  %.extract87 = extractelement <4 x i32> %443, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract84, i32 %.extract85, i32 %.extract86, i32 %.extract87, ptr addrspace(1) %424, i1 %64) #2, !dbg !43
  %.extract88 = extractelement <4 x i32> %444, i64 0, !dbg !43
  %.extract89 = extractelement <4 x i32> %444, i64 1, !dbg !43
  %.extract90 = extractelement <4 x i32> %444, i64 2, !dbg !43
  %.extract91 = extractelement <4 x i32> %444, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract88, i32 %.extract89, i32 %.extract90, i32 %.extract91, ptr addrspace(1) %425, i1 %65) #2, !dbg !43
  %.extract92 = extractelement <4 x i32> %445, i64 0, !dbg !43
  %.extract93 = extractelement <4 x i32> %445, i64 1, !dbg !43
  %.extract94 = extractelement <4 x i32> %445, i64 2, !dbg !43
  %.extract95 = extractelement <4 x i32> %445, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract92, i32 %.extract93, i32 %.extract94, i32 %.extract95, ptr addrspace(1) %426, i1 %66) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c46lohvunymdxqfk57ycmydw243fgfzyorvbxmbieje5o7tmqgdu.py", directory: "inductor_cache/46")
!4 = !{ptr @triton_poi_fused_add_unsqueeze_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_unsqueeze_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_unsqueeze_5", linkageName: "triton_poi_fused_add_unsqueeze_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 52, scope: !7)
!24 = !DILocation(line: 30, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 44, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 44, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 45, scope: !7)
!36 = !DILocation(line: 38, column: 33, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 44, scope: !7)
!40 = !DILocation(line: 39, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 44, scope: !7)
!42 = !DILocation(line: 40, column: 25, scope: !7)
!43 = !DILocation(line: 40, column: 44, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
