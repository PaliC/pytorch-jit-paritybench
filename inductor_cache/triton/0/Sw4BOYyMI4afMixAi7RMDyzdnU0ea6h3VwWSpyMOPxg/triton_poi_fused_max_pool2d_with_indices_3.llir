; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = icmp slt i32 %10, 57600, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %15 = sdiv i32 %.frozen, 15, !dbg !15
  %16 = mul i32 %15, 15, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen2 = freeze i32 %11, !dbg !15
  %17 = sdiv i32 %.frozen2, 15, !dbg !15
  %18 = mul i32 %17, 15, !dbg !16
  %.decomposed3 = sub i32 %.frozen2, %18, !dbg !16
  %.frozen4 = freeze i32 %12, !dbg !15
  %19 = sdiv i32 %.frozen4, 15, !dbg !15
  %20 = mul i32 %19, 15, !dbg !16
  %.decomposed5 = sub i32 %.frozen4, %20, !dbg !16
  %.frozen6 = freeze i32 %13, !dbg !15
  %21 = sdiv i32 %.frozen6, 15, !dbg !15
  %22 = mul i32 %21, 15, !dbg !16
  %.decomposed7 = sub i32 %.frozen6, %22, !dbg !16
  %.frozen8 = freeze i32 %10, !dbg !17
  %23 = sdiv i32 %.frozen8, 14400, !dbg !17
  %24 = mul i32 %23, 14400, !dbg !18
  %.decomposed9 = sub i32 %.frozen8, %24, !dbg !18
  %25 = shl nsw i32 %.decomposed, 1, !dbg !19
  %26 = shl nsw i32 %.decomposed3, 1, !dbg !19
  %27 = shl nsw i32 %.decomposed5, 1, !dbg !19
  %28 = shl nsw i32 %.decomposed7, 1, !dbg !19
  %29 = mul i32 %15, 60, !dbg !20
  %30 = mul i32 %17, 60, !dbg !20
  %31 = mul i32 %19, 60, !dbg !20
  %32 = mul i32 %21, 60, !dbg !20
  %33 = add i32 %25, %29, !dbg !21
  %34 = add i32 %26, %30, !dbg !21
  %35 = add i32 %27, %31, !dbg !21
  %36 = add i32 %28, %32, !dbg !21
  %37 = sext i32 %33 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %34 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %35 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %36 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #1, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %14) #1, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %14) #1, !dbg !23
  %49 = or disjoint i32 %33, 1, !dbg !24
  %50 = or disjoint i32 %34, 1, !dbg !24
  %51 = or disjoint i32 %35, 1, !dbg !24
  %52 = or disjoint i32 %36, 1, !dbg !24
  %53 = sext i32 %49 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = sext i32 %50 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !25
  %57 = sext i32 %51 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !25
  %59 = sext i32 %52 to i64, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %14) #1, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %14) #1, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %14) #1, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #1, !dbg !26
  %65 = add i32 %33, 30, !dbg !27
  %66 = add i32 %34, 30, !dbg !27
  %67 = add i32 %35, 30, !dbg !27
  %68 = add i32 %36, 30, !dbg !27
  %69 = sext i32 %65 to i64, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !28
  %71 = sext i32 %66 to i64, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !28
  %73 = sext i32 %67 to i64, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !28
  %75 = sext i32 %68 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %14) #1, !dbg !29
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %14) #1, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %14) #1, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %14) #1, !dbg !29
  %81 = add i32 %33, 31, !dbg !30
  %82 = add i32 %34, 31, !dbg !30
  %83 = add i32 %35, 31, !dbg !30
  %84 = add i32 %36, 31, !dbg !30
  %85 = sext i32 %81 to i64, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !31
  %87 = sext i32 %82 to i64, !dbg !31
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !31
  %89 = sext i32 %83 to i64, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !31
  %91 = sext i32 %84 to i64, !dbg !31
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %14) #1, !dbg !32
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %14) #1, !dbg !32
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %14) #1, !dbg !32
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %14) #1, !dbg !32
  %97 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !23
  %98 = insertelement <4 x i32> %97, i32 %46, i64 1, !dbg !23
  %99 = insertelement <4 x i32> %98, i32 %47, i64 2, !dbg !23
  %100 = insertelement <4 x i32> %99, i32 %48, i64 3, !dbg !23
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !23
  %102 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !26
  %103 = insertelement <4 x i32> %102, i32 %62, i64 1, !dbg !26
  %104 = insertelement <4 x i32> %103, i32 %63, i64 2, !dbg !26
  %105 = insertelement <4 x i32> %104, i32 %64, i64 3, !dbg !26
  %106 = bitcast <4 x i32> %105 to <4 x float>, !dbg !26
  %107 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !29
  %108 = insertelement <4 x i32> %107, i32 %78, i64 1, !dbg !29
  %109 = insertelement <4 x i32> %108, i32 %79, i64 2, !dbg !29
  %110 = insertelement <4 x i32> %109, i32 %80, i64 3, !dbg !29
  %111 = bitcast <4 x i32> %110 to <4 x float>, !dbg !29
  %112 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !32
  %113 = insertelement <4 x i32> %112, i32 %94, i64 1, !dbg !32
  %114 = insertelement <4 x i32> %113, i32 %95, i64 2, !dbg !32
  %115 = insertelement <4 x i32> %114, i32 %96, i64 3, !dbg !32
  %116 = bitcast <4 x i32> %115 to <4 x float>, !dbg !32
  %117 = fcmp ogt <4 x float> %106, %101, !dbg !33
  %118 = zext <4 x i1> %117 to <4 x i8>, !dbg !34
  %119 = fcmp uno <4 x float> %106, zeroinitializer, !dbg !35
  %120 = or <4 x i1> %117, %119, !dbg !39
  %.v = select <4 x i1> %120, <4 x i32> %105, <4 x i32> %100, !dbg !40
  %121 = bitcast <4 x i32> %.v to <4 x float>, !dbg !40
  %122 = fcmp olt <4 x float> %121, %111, !dbg !41
  %123 = select <4 x i1> %122, <4 x i8> splat (i8 2), <4 x i8> %118, !dbg !42
  %124 = fcmp uno <4 x float> %111, zeroinitializer, !dbg !43
  %125 = or <4 x i1> %122, %124, !dbg !45
  %.v1 = select <4 x i1> %125, <4 x i32> %110, <4 x i32> %.v, !dbg !46
  %126 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !46
  %127 = fcmp olt <4 x float> %126, %116, !dbg !47
  %128 = select <4 x i1> %127, <4 x i8> splat (i8 3), <4 x i8> %123, !dbg !48
  %129 = fcmp uno <4 x float> %116, zeroinitializer, !dbg !49
  %130 = or <4 x i1> %127, %129, !dbg !51
  %131 = extractelement <4 x i1> %130, i64 0, !dbg !51
  %132 = or <4 x i1> %127, %129, !dbg !51
  %133 = extractelement <4 x i1> %132, i64 1, !dbg !51
  %134 = or <4 x i1> %127, %129, !dbg !51
  %135 = extractelement <4 x i1> %134, i64 2, !dbg !51
  %136 = or <4 x i1> %127, %129, !dbg !51
  %137 = extractelement <4 x i1> %136, i64 3, !dbg !51
  %138 = mul i32 %23, 14464, !dbg !52
  %139 = add i32 %138, %.decomposed9, !dbg !53
  %140 = sext i32 %139 to i64, !dbg !54
  %141 = getelementptr i8, ptr addrspace(1) %1, i64 %140, !dbg !54
  %142 = bitcast <4 x i8> %128 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %141, i1 %14) #1, !dbg !55
  %143 = sext i32 %10 to i64, !dbg !56
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !56
  %145 = extractelement <4 x i32> %.v1, i64 0, !dbg !57
  %146 = select i1 %131, i32 %93, i32 %145, !dbg !58
  %147 = extractelement <4 x i32> %.v1, i64 1, !dbg !57
  %148 = select i1 %133, i32 %94, i32 %147, !dbg !58
  %149 = extractelement <4 x i32> %.v1, i64 2, !dbg !57
  %150 = select i1 %135, i32 %95, i32 %149, !dbg !58
  %151 = extractelement <4 x i32> %.v1, i64 3, !dbg !57
  %152 = select i1 %137, i32 %96, i32 %151, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %146, i32 %148, i32 %150, i32 %152, ptr addrspace(1) %144, i1 %14) #1, !dbg !57
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw2lwhlp2rwtczhhyvnxb2p6iicieyjazhgxil4f5ephb6szvwvs.py", directory: "inductor_cache/w2")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 32, scope: !7)
!20 = !DILocation(line: 29, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 37, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 45, scope: !7)
!24 = !DILocation(line: 30, column: 41, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 49, scope: !7)
!27 = !DILocation(line: 31, column: 42, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 50, scope: !7)
!30 = !DILocation(line: 32, column: 43, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 51, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 32, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 37, column: 40, scope: !7)
!39 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 33, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !44)
!44 = !DILocation(line: 41, column: 41, scope: !7)
!45 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !44)
!46 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !44)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 35, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !50)
!50 = !DILocation(line: 45, column: 42, scope: !7)
!51 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !50)
!52 = !DILocation(line: 46, column: 36, scope: !7)
!53 = !DILocation(line: 46, column: 30, scope: !7)
!54 = !DILocation(line: 46, column: 25, scope: !7)
!55 = !DILocation(line: 46, column: 48, scope: !7)
!56 = !DILocation(line: 47, column: 25, scope: !7)
!57 = !DILocation(line: 47, column: 37, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !50)
!59 = !DILocation(line: 47, column: 4, scope: !7)
