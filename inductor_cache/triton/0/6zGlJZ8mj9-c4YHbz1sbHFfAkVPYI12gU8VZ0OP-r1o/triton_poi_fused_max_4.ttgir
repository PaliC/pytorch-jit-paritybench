#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_max_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3> : tensor<256xi64, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<2048> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<3> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.muli %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %9 = tt.load %8, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = arith.addi %6, %cst_5 : tensor<256xi32, #blocked> loc(#loc10)
    %11 = tt.addptr %7, %10 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc11)
    %12 = tt.load %11, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = arith.addi %6, %cst_6 : tensor<256xi32, #blocked> loc(#loc13)
    %14 = tt.addptr %7, %13 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    %15 = tt.load %14, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %16 = arith.addi %6, %cst_7 : tensor<256xi32, #blocked> loc(#loc16)
    %17 = tt.addptr %7, %16 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc17)
    %18 = tt.load %17, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %19 = arith.cmpf ogt, %9, %12 : tensor<256xf32, #blocked> loc(#loc19)
    %20 = arith.cmpf oeq, %9, %12 : tensor<256xf32, #blocked> loc(#loc20)
    %21 = arith.cmpf une, %9, %9 : tensor<256xf32, #blocked> loc(#loc21)
    %22 = arith.cmpf une, %12, %12 : tensor<256xf32, #blocked> loc(#loc22)
    %23 = arith.cmpi ugt, %21, %22 : tensor<256xi1, #blocked> loc(#loc23)
    %24 = arith.ori %19, %23 : tensor<256xi1, #blocked> loc(#loc24)
    %25 = arith.andi %21, %22 : tensor<256xi1, #blocked> loc(#loc25)
    %26 = arith.ori %20, %25 : tensor<256xi1, #blocked> loc(#loc26)
    %27 = arith.ori %24, %26 : tensor<256xi1, #blocked> loc(#loc27)
    %28 = arith.select %27, %9, %12 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc28)
    %29 = arith.select %27, %cst, %cst_0 : tensor<256xi1, #blocked>, tensor<256xi64, #blocked> loc(#loc29)
    %30 = arith.cmpf ogt, %28, %15 : tensor<256xf32, #blocked> loc(#loc30)
    %31 = arith.cmpf oeq, %28, %15 : tensor<256xf32, #blocked> loc(#loc31)
    %32 = arith.cmpf une, %28, %28 : tensor<256xf32, #blocked> loc(#loc32)
    %33 = arith.cmpf une, %15, %15 : tensor<256xf32, #blocked> loc(#loc33)
    %34 = arith.cmpi ugt, %32, %33 : tensor<256xi1, #blocked> loc(#loc34)
    %35 = arith.ori %30, %34 : tensor<256xi1, #blocked> loc(#loc35)
    %36 = arith.andi %32, %33 : tensor<256xi1, #blocked> loc(#loc36)
    %37 = arith.ori %31, %36 : tensor<256xi1, #blocked> loc(#loc37)
    %38 = arith.cmpi slt, %29, %cst_1 : tensor<256xi64, #blocked> loc(#loc38)
    %39 = arith.andi %37, %38 : tensor<256xi1, #blocked> loc(#loc39)
    %40 = arith.ori %35, %39 : tensor<256xi1, #blocked> loc(#loc40)
    %41 = arith.select %40, %28, %15 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc41)
    %42 = arith.select %40, %29, %cst_1 : tensor<256xi1, #blocked>, tensor<256xi64, #blocked> loc(#loc42)
    %43 = arith.cmpf ogt, %41, %18 : tensor<256xf32, #blocked> loc(#loc43)
    %44 = arith.cmpf oeq, %41, %18 : tensor<256xf32, #blocked> loc(#loc44)
    %45 = arith.cmpf une, %41, %41 : tensor<256xf32, #blocked> loc(#loc45)
    %46 = arith.cmpf une, %18, %18 : tensor<256xf32, #blocked> loc(#loc46)
    %47 = arith.cmpi ugt, %45, %46 : tensor<256xi1, #blocked> loc(#loc47)
    %48 = arith.ori %43, %47 : tensor<256xi1, #blocked> loc(#loc48)
    %49 = arith.andi %45, %46 : tensor<256xi1, #blocked> loc(#loc49)
    %50 = arith.ori %44, %49 : tensor<256xi1, #blocked> loc(#loc50)
    %51 = arith.cmpi slt, %42, %cst_2 : tensor<256xi64, #blocked> loc(#loc51)
    %52 = arith.andi %50, %51 : tensor<256xi1, #blocked> loc(#loc52)
    %53 = arith.ori %48, %52 : tensor<256xi1, #blocked> loc(#loc53)
    %54 = arith.select %53, %42, %cst_2 : tensor<256xi1, #blocked>, tensor<256xi64, #blocked> loc(#loc54)
    %55 = arith.ori %19, %21 : tensor<256xi1, #blocked> loc(#loc67)
    %56 = arith.select %55, %9, %12 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc68)
    %57 = arith.cmpf ogt, %56, %15 : tensor<256xf32, #blocked> loc(#loc69)
    %58 = arith.cmpf une, %56, %56 : tensor<256xf32, #blocked> loc(#loc70)
    %59 = arith.ori %57, %58 : tensor<256xi1, #blocked> loc(#loc71)
    %60 = arith.select %59, %56, %15 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc72)
    %61 = arith.cmpf ogt, %60, %18 : tensor<256xf32, #blocked> loc(#loc73)
    %62 = arith.cmpf une, %60, %60 : tensor<256xf32, #blocked> loc(#loc74)
    %63 = arith.ori %61, %62 : tensor<256xi1, #blocked> loc(#loc75)
    %64 = arith.select %63, %60, %18 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc76)
    %65 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<256x!tt.ptr<i64>, #blocked> loc(#loc62)
    %66 = tt.addptr %65, %4 : tensor<256x!tt.ptr<i64>, #blocked>, tensor<256xi32, #blocked> loc(#loc62)
    tt.store %66, %54, %5 : tensor<256x!tt.ptr<i64>, #blocked> loc(#loc63)
    %67 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc64)
    %68 = tt.addptr %67, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc64)
    tt.store %68, %64, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc65)
    tt.return loc(#loc66)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":21:28)
#loc3 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":21:33)
#loc4 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":22:36)
#loc5 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":22:23)
#loc6 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":23:21)
#loc7 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":25:32)
#loc8 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":25:30)
#loc9 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":25:37)
#loc10 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":26:34)
#loc11 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":26:30)
#loc12 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":26:41)
#loc13 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":27:35)
#loc14 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":27:31)
#loc15 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":27:42)
#loc16 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":28:35)
#loc17 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":28:31)
#loc18 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":28:42)
#loc19 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":29:18)
#loc20 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":30:19)
#loc21 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":31:19)
#loc22 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":32:19)
#loc23 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":33:18)
#loc24 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":34:18)
#loc25 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":35:18)
#loc26 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":36:18)
#loc27 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":41:19)
#loc28 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":42:34)
#loc29 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":43:35)
#loc30 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":44:20)
#loc31 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":45:21)
#loc32 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":46:21)
#loc33 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":47:21)
#loc34 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":48:20)
#loc35 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":49:20)
#loc36 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":50:20)
#loc37 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":51:20)
#loc38 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":53:20)
#loc39 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":54:20)
#loc40 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":55:20)
#loc41 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":56:35)
#loc42 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":57:35)
#loc43 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":58:20)
#loc44 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":59:21)
#loc45 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":60:21)
#loc46 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":61:21)
#loc47 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":62:20)
#loc48 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":63:20)
#loc49 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":64:20)
#loc50 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":65:20)
#loc51 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":67:20)
#loc52 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":68:20)
#loc53 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":69:20)
#loc54 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":71:35)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc56 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":72:41)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc59 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":73:42)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc61 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":74:42)
#loc62 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":75:25)
#loc63 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":75:37)
#loc64 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":76:25)
#loc65 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":76:37)
#loc66 = loc("inductor_cache/6x/c6xbtaeaoy53se5rcpskoy7t3w6u3n6zjgq5p4ipjlkhsk3vjxiu.py":76:4)
#loc67 = loc(callsite(#loc55 at #loc56))
#loc68 = loc(callsite(#loc57 at #loc56))
#loc69 = loc(callsite(#loc58 at #loc59))
#loc70 = loc(callsite(#loc60 at #loc59))
#loc71 = loc(callsite(#loc55 at #loc59))
#loc72 = loc(callsite(#loc57 at #loc59))
#loc73 = loc(callsite(#loc58 at #loc61))
#loc74 = loc(callsite(#loc60 at #loc61))
#loc75 = loc(callsite(#loc55 at #loc61))
#loc76 = loc(callsite(#loc57 at #loc61))
