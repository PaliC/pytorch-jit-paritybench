; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = or disjoint i32 %20, %16, !dbg !16
  %22 = icmp slt i32 %21, 64, !dbg !17
  %23 = shl i32 %17, 6, !dbg !18
  %24 = shl i32 %18, 6, !dbg !18
  %25 = add i32 %21, %23, !dbg !19
  %26 = add i32 %21, %24, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %22) #4, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %22) #4, !dbg !21
  %33 = sext i32 %21 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %22) #4, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = bitcast i32 %38 to float, !dbg !25
  %43 = bitcast i32 %39 to float, !dbg !25
  %44 = bitcast i32 %40 to float, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %22) #4, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %22) #4, !dbg !29
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !30
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !30
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !30
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !30
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %54, 0, !dbg !31
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %55, 0, !dbg !31
  br i1 %.not.i, label %61, label %56, !dbg !31

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !31

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !31

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !31
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i15 = icmp eq i32 %66, 0, !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i18 = icmp eq i32 %67, 0, !dbg !31
  br i1 %.not.i15, label %73, label %68, !dbg !31

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %71, label %69, !dbg !31

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %76, label %74, !dbg !31

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

__nv_sqrtf.exit19:                                ; preds = %69, %71, %74, %76
  %.0.i17 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !31
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i20 = icmp eq i32 %78, 0, !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i23 = icmp eq i32 %79, 0, !dbg !31
  br i1 %.not.i20, label %85, label %80, !dbg !31

80:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %83, label %81, !dbg !31

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

85:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %88, label %86, !dbg !31

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

__nv_sqrtf.exit24:                                ; preds = %81, %83, %86, %88
  %.0.i22 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !31
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i25 = icmp eq i32 %90, 0, !dbg !31
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i28 = icmp eq i32 %91, 0, !dbg !31
  br i1 %.not.i25, label %97, label %92, !dbg !31

92:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %95, label %93, !dbg !31

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

97:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %100, label %98, !dbg !31

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

__nv_sqrtf.exit29:                                ; preds = %93, %95, %98, %100
  %.0.i27 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %103 = bitcast i32 %102 to float, !dbg !21
  %104 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %105 = bitcast i32 %104 to float, !dbg !23
  %106 = fsub float %103, %105, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %108 = bitcast i32 %107 to float, !dbg !21
  %109 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %110 = bitcast i32 %109 to float, !dbg !23
  %111 = fsub float %108, %110, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %113 = bitcast i32 %112 to float, !dbg !21
  %114 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %115 = bitcast i32 %114 to float, !dbg !23
  %116 = fsub float %113, %115, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %118 = bitcast i32 %117 to float, !dbg !21
  %119 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %120 = bitcast i32 %119 to float, !dbg !23
  %121 = fsub float %118, %120, !dbg !32
  %122 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %123 = bitcast i32 %122 to float, !dbg !21
  %124 = fsub float %123, %105, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %126 = bitcast i32 %125 to float, !dbg !21
  %127 = fsub float %126, %110, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %129 = bitcast i32 %128 to float, !dbg !21
  %130 = fsub float %129, %115, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %132 = bitcast i32 %131 to float, !dbg !21
  %133 = fsub float %132, %120, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !29
  %139 = bitcast i32 %138 to float, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !29
  %141 = bitcast i32 %140 to float, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %147 = bitcast i32 %146 to float, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = or disjoint i32 %10, %16, !dbg !13
  %.frozen = freeze i32 %150, !dbg !33
  %151 = sdiv i32 %.frozen, 4096, !dbg !33
  %152 = mul i32 %151, 4096, !dbg !34
  %.decomposed = sub i32 %.frozen, %152, !dbg !34
  %153 = or disjoint i32 %20, %14, !dbg !16
  %154 = icmp slt i32 %153, 64, !dbg !17
  %155 = or disjoint i32 %20, %13, !dbg !16
  %156 = icmp slt i32 %155, 64, !dbg !17
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !35
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !35
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !35
  %161 = fmul float %133, %157, !dbg !36
  %162 = fmul float %130, %158, !dbg !36
  %163 = fmul float %127, %159, !dbg !36
  %164 = fmul float %124, %160, !dbg !36
  %165 = fmul float %121, %157, !dbg !36
  %166 = fmul float %116, %158, !dbg !36
  %167 = fmul float %111, %159, !dbg !36
  %168 = fmul float %106, %160, !dbg !36
  %169 = fmul float %161, %149, !dbg !37
  %170 = fmul float %162, %147, !dbg !37
  %171 = fmul float %163, %145, !dbg !37
  %172 = fmul float %164, %143, !dbg !37
  %173 = fmul float %165, %149, !dbg !37
  %174 = fmul float %166, %147, !dbg !37
  %175 = fmul float %167, %145, !dbg !37
  %176 = fmul float %168, %143, !dbg !37
  %177 = fadd float %169, %141, !dbg !38
  %178 = fadd float %170, %139, !dbg !38
  %179 = fadd float %171, %137, !dbg !38
  %180 = fadd float %172, %135, !dbg !38
  %181 = fadd float %173, %141, !dbg !38
  %182 = fadd float %174, %139, !dbg !38
  %183 = fadd float %175, %137, !dbg !38
  %184 = fadd float %176, %135, !dbg !38
  %185 = fsub float 0.000000e+00, %177, !dbg !39
  %186 = fsub float 0.000000e+00, %178, !dbg !39
  %187 = fsub float 0.000000e+00, %179, !dbg !39
  %188 = fsub float 0.000000e+00, %180, !dbg !39
  %189 = fsub float 0.000000e+00, %181, !dbg !39
  %190 = fsub float 0.000000e+00, %182, !dbg !39
  %191 = fsub float 0.000000e+00, %183, !dbg !39
  %192 = fsub float 0.000000e+00, %184, !dbg !39
  %193 = fmul float %185, 0x3FF7154760000000, !dbg !43
  %194 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %193) #4, !dbg !43
  %195 = fmul float %186, 0x3FF7154760000000, !dbg !43
  %196 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %195) #4, !dbg !43
  %197 = fmul float %187, 0x3FF7154760000000, !dbg !43
  %198 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %197) #4, !dbg !43
  %199 = fmul float %188, 0x3FF7154760000000, !dbg !43
  %200 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %199) #4, !dbg !43
  %201 = fmul float %189, 0x3FF7154760000000, !dbg !43
  %202 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %201) #4, !dbg !43
  %203 = fmul float %190, 0x3FF7154760000000, !dbg !43
  %204 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %203) #4, !dbg !43
  %205 = fmul float %191, 0x3FF7154760000000, !dbg !43
  %206 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %205) #4, !dbg !43
  %207 = fmul float %192, 0x3FF7154760000000, !dbg !43
  %208 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %207) #4, !dbg !43
  %209 = fadd float %194, 1.000000e+00, !dbg !44
  %210 = fadd float %196, 1.000000e+00, !dbg !44
  %211 = fadd float %198, 1.000000e+00, !dbg !44
  %212 = fadd float %200, 1.000000e+00, !dbg !44
  %213 = fadd float %202, 1.000000e+00, !dbg !44
  %214 = fadd float %204, 1.000000e+00, !dbg !44
  %215 = fadd float %206, 1.000000e+00, !dbg !44
  %216 = fadd float %208, 1.000000e+00, !dbg !44
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %209) #4, !dbg !45
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %210) #4, !dbg !45
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %211) #4, !dbg !45
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %212) #4, !dbg !45
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %213) #4, !dbg !45
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %214) #4, !dbg !45
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %215) #4, !dbg !45
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %216) #4, !dbg !45
  %225 = fmul float %177, %217, !dbg !46
  %226 = fmul float %178, %218, !dbg !46
  %227 = fmul float %179, %219, !dbg !46
  %228 = fmul float %180, %220, !dbg !46
  %229 = fmul float %181, %221, !dbg !46
  %230 = fmul float %182, %222, !dbg !46
  %231 = fmul float %183, %223, !dbg !46
  %232 = fmul float %184, %224, !dbg !46
  %233 = shl i32 %155, 12, !dbg !47
  %234 = shl i32 %153, 12, !dbg !47
  %235 = shl i32 %151, 18, !dbg !48
  %236 = add i32 %235, %.decomposed, !dbg !49
  %237 = add i32 %236, %233, !dbg !50
  %238 = add i32 %236, %234, !dbg !50
  %239 = sext i32 %237 to i64, !dbg !51
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %239, !dbg !51
  %241 = sext i32 %238 to i64, !dbg !51
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !51
  %243 = shl i32 %11, 7, !dbg !52
  %244 = and i32 %243, 896, !dbg !52
  %245 = or disjoint i32 %244, %13, !dbg !52
  %246 = and i32 %15, 508, !dbg !52
  %247 = lshr exact i32 %244, 1, !dbg !52
  %248 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %247, !dbg !52
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %245, !dbg !52
  %250 = bitcast float %225 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !52
  %251 = or disjoint i32 %245, 32, !dbg !52
  %252 = lshr i32 %251, 3, !dbg !52
  %253 = and i32 %252, 116, !dbg !52
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !52
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %251, !dbg !52
  %256 = bitcast float %226 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !52
  %257 = or disjoint i32 %245, 64, !dbg !52
  %258 = lshr i32 %257, 3, !dbg !52
  %259 = and i32 %258, 120, !dbg !52
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !52
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %257, !dbg !52
  %262 = bitcast float %227 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !52
  %263 = or disjoint i32 %245, 96, !dbg !52
  %264 = lshr i32 %263, 3, !dbg !52
  %265 = and i32 %264, 124, !dbg !52
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !52
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %263, !dbg !52
  %268 = bitcast float %228 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !52
  %269 = or disjoint i32 %245, 16, !dbg !52
  %270 = getelementptr float, ptr addrspace(3) %248, i32 %269, !dbg !52
  %271 = bitcast float %229 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !52
  %272 = or disjoint i32 %245, 48, !dbg !52
  %273 = lshr i32 %272, 3, !dbg !52
  %274 = and i32 %273, 116, !dbg !52
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !52
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %272, !dbg !52
  %277 = bitcast float %230 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !52
  %278 = or disjoint i32 %245, 80, !dbg !52
  %279 = lshr i32 %278, 3, !dbg !52
  %280 = and i32 %279, 120, !dbg !52
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !52
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %278, !dbg !52
  %283 = bitcast float %231 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !52
  %284 = or disjoint i32 %245, 112, !dbg !52
  %285 = lshr i32 %284, 3, !dbg !52
  %286 = and i32 %285, 124, !dbg !52
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !52
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %284, !dbg !52
  %289 = bitcast float %232 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %290 = lshr i32 %15, 3, !dbg !52
  %291 = and i32 %290, 60, !dbg !52
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !52
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %246, !dbg !52
  %294 = or disjoint i32 %246, 512, !dbg !52
  %295 = lshr i32 %294, 3, !dbg !52
  %296 = and i32 %295, 124, !dbg !52
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !52
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %294, !dbg !52
  %299 = load <4 x i32>, ptr addrspace(3) %298, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %293, align 16, !dbg !52
  %300 = getelementptr inbounds i8, ptr addrspace(3) %293, i32 4, !dbg !52
  %.extract8 = load i32, ptr addrspace(3) %300, align 4, !dbg !52
  %301 = getelementptr inbounds i8, ptr addrspace(3) %293, i32 8, !dbg !52
  %.extract9 = load i32, ptr addrspace(3) %301, align 8, !dbg !52
  %302 = getelementptr inbounds i8, ptr addrspace(3) %293, i32 12, !dbg !52
  %.extract10 = load i32, ptr addrspace(3) %302, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %240, i1 %156) #4, !dbg !52
  %.extract11 = extractelement <4 x i32> %299, i64 0, !dbg !52
  %.extract12 = extractelement <4 x i32> %299, i64 1, !dbg !52
  %.extract13 = extractelement <4 x i32> %299, i64 2, !dbg !52
  %.extract14 = extractelement <4 x i32> %299, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %242, i1 %154) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c67atfon4qt3uf2y6gpfeke52rfgawpie6mxqernrafvz4esldb2.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 26, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 48, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 35, scope: !7)
!48 = !DILocation(line: 50, column: 47, scope: !7)
!49 = !DILocation(line: 50, column: 30, scope: !7)
!50 = !DILocation(line: 50, column: 40, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 59, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
