; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = and i32 %8, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 2, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 60, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %14, !dbg !13
  %17 = icmp slt i32 %15, 64, !dbg !14
  %18 = icmp slt i32 %16, 64, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 3, !dbg !16
  %21 = lshr i32 %8, 4, !dbg !17
  %22 = and i32 %21, 7, !dbg !17
  %23 = or disjoint i32 %20, %12, !dbg !18
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = icmp slt i32 %23, 640, !dbg !19
  %26 = icmp slt i32 %24, 640, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %27 = sdiv i32 %.frozen, 4, !dbg !20
  %28 = mul i32 %27, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen10 = freeze i32 %16, !dbg !22
  %29 = sdiv i32 %.frozen10, 16, !dbg !22
  %30 = mul i32 %29, 16, !dbg !23
  %.decomposed11 = sub i32 %.frozen10, %30, !dbg !23
  %31 = mul nsw i32 %.decomposed, 1280, !dbg !24
  %32 = mul i32 %27, 10240, !dbg !25
  %33 = add i32 %32, %31, !dbg !26
  %34 = add i32 %33, %23, !dbg !27
  %35 = sext i32 %34 to i64, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !28
  %37 = and i1 %17, %25, !dbg !29
  %38 = and i1 %18, %26, !dbg !29
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #2, !dbg !30
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !30
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !30
  %44 = add i32 %33, 640, !dbg !31
  %45 = add i32 %44, %23, !dbg !32
  %46 = sext i32 %45 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !33
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %37) #2, !dbg !34
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !34
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !34
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !34
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !34
  %53 = add i32 %33, 5120, !dbg !35
  %54 = add i32 %53, %23, !dbg !36
  %55 = sext i32 %54 to i64, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !37
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %37) #2, !dbg !38
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !38
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !38
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !38
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !38
  %62 = add i32 %33, 5760, !dbg !39
  %63 = add i32 %62, %23, !dbg !40
  %64 = sext i32 %63 to i64, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !41
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %37) #2, !dbg !42
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !42
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !42
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !42
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !42
  %71 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !30
  %72 = insertelement <4 x i32> %71, i32 %41, i64 1, !dbg !30
  %73 = insertelement <4 x i32> %72, i32 %42, i64 2, !dbg !30
  %74 = insertelement <4 x i32> %73, i32 %43, i64 3, !dbg !30
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !30
  %76 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !34
  %77 = insertelement <4 x i32> %76, i32 %50, i64 1, !dbg !34
  %78 = insertelement <4 x i32> %77, i32 %51, i64 2, !dbg !34
  %79 = insertelement <4 x i32> %78, i32 %52, i64 3, !dbg !34
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !34
  %81 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !38
  %82 = insertelement <4 x i32> %81, i32 %59, i64 1, !dbg !38
  %83 = insertelement <4 x i32> %82, i32 %60, i64 2, !dbg !38
  %84 = insertelement <4 x i32> %83, i32 %61, i64 3, !dbg !38
  %85 = bitcast <4 x i32> %84 to <4 x float>, !dbg !38
  %86 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !42
  %87 = insertelement <4 x i32> %86, i32 %68, i64 1, !dbg !42
  %88 = insertelement <4 x i32> %87, i32 %69, i64 2, !dbg !42
  %89 = insertelement <4 x i32> %88, i32 %70, i64 3, !dbg !42
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !42
  %91 = fcmp ogt <4 x float> %80, %75, !dbg !43
  %92 = fcmp uno <4 x float> %80, zeroinitializer, !dbg !47
  %93 = or <4 x i1> %91, %92, !dbg !48
  %.v = select <4 x i1> %93, <4 x i32> %79, <4 x i32> %74, !dbg !49
  %94 = bitcast <4 x i32> %.v to <4 x float>, !dbg !49
  %95 = fcmp olt <4 x float> %94, %85, !dbg !50
  %96 = fcmp uno <4 x float> %85, zeroinitializer, !dbg !52
  %97 = or <4 x i1> %96, %95, !dbg !53
  %.v9 = select <4 x i1> %97, <4 x i32> %84, <4 x i32> %.v, !dbg !54
  %98 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !54
  %99 = fcmp olt <4 x float> %98, %90, !dbg !55
  %100 = fcmp uno <4 x float> %90, zeroinitializer, !dbg !57
  %101 = or <4 x i1> %100, %99, !dbg !58
  %102 = extractelement <4 x i1> %101, i64 0, !dbg !58
  %103 = or <4 x i1> %100, %99, !dbg !58
  %104 = extractelement <4 x i1> %103, i64 1, !dbg !58
  %105 = or <4 x i1> %100, %99, !dbg !58
  %106 = extractelement <4 x i1> %105, i64 2, !dbg !58
  %107 = or <4 x i1> %100, %99, !dbg !58
  %108 = extractelement <4 x i1> %107, i64 3, !dbg !58
  %109 = zext <4 x i1> %91 to <4 x i8>, !dbg !59
  %110 = select <4 x i1> %95, <4 x i8> splat (i8 2), <4 x i8> %109, !dbg !60
  %111 = select <4 x i1> %99, <4 x i8> splat (i8 3), <4 x i8> %110, !dbg !61
  %112 = shl i32 %24, 4, !dbg !62
  %113 = add i32 %112, %.decomposed11, !dbg !63
  %114 = mul i32 %29, 10240, !dbg !64
  %115 = add i32 %113, %114, !dbg !65
  %116 = sext i32 %115 to i64, !dbg !66
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !66
  %118 = shl nuw nsw i32 %11, 8, !dbg !67
  %119 = or disjoint i32 %118, %10, !dbg !67
  %120 = and i32 %13, 508, !dbg !67
  %.idx = shl nuw nsw i32 %11, 6, !dbg !67
  %121 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !67
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !67
  %123 = extractelement <4 x i32> %.v9, i64 0, !dbg !67
  %124 = select i1 %102, i32 %67, i32 %123, !dbg !68
  %125 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %125, i1 true) #2, !dbg !67
  %126 = or disjoint i32 %119, 64, !dbg !67
  %127 = lshr i32 %126, 4, !dbg !67
  %128 = and i32 %127, 20, !dbg !67
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !67
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %126, !dbg !67
  %131 = extractelement <4 x i32> %.v9, i64 1, !dbg !67
  %132 = select i1 %104, i32 %68, i32 %131, !dbg !68
  %133 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %133, i1 true) #2, !dbg !67
  %134 = or disjoint i32 %119, 128, !dbg !67
  %135 = lshr i32 %134, 4, !dbg !67
  %136 = and i32 %135, 24, !dbg !67
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !67
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %134, !dbg !67
  %139 = extractelement <4 x i32> %.v9, i64 2, !dbg !67
  %140 = select i1 %106, i32 %69, i32 %139, !dbg !68
  %141 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %141, i1 true) #2, !dbg !67
  %142 = or disjoint i32 %119, 192, !dbg !67
  %143 = lshr i32 %142, 4, !dbg !67
  %144 = and i32 %143, 28, !dbg !67
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !67
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %142, !dbg !67
  %147 = extractelement <4 x i32> %.v9, i64 3, !dbg !67
  %148 = select i1 %108, i32 %70, i32 %147, !dbg !68
  %149 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %149, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %150 = lshr i32 %13, 4, !dbg !67
  %151 = and i32 %150, 28, !dbg !67
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !67
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %120, !dbg !67
  %.extract = load i32, ptr addrspace(3) %153, align 16, !dbg !67
  %154 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 4, !dbg !67
  %.extract6 = load i32, ptr addrspace(3) %154, align 4, !dbg !67
  %155 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 8, !dbg !67
  %.extract7 = load i32, ptr addrspace(3) %155, align 8, !dbg !67
  %156 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 12, !dbg !67
  %.extract8 = load i32, ptr addrspace(3) %156, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %117, i1 %38) #2, !dbg !67
  %157 = mul i32 %15, 640, !dbg !69
  %158 = add i32 %23, %157, !dbg !70
  %159 = sext i32 %158 to i64, !dbg !71
  %160 = getelementptr i8, ptr addrspace(1) %2, i64 %159, !dbg !71
  %161 = bitcast <4 x i8> %111 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %160, i1 %37) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjjylk435scqsbno747fvh5nre6edxu54b5lpd2aygahezotzk3j.py", directory: "inductor_cache/jj")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 51, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 64, scope: !7)
!30 = !DILocation(line: 34, column: 56, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 62, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 52, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 63, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 63, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 33, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 44, scope: !7)
!65 = !DILocation(line: 51, column: 38, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 55, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 34, scope: !7)
!70 = !DILocation(line: 52, column: 30, scope: !7)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 46, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
