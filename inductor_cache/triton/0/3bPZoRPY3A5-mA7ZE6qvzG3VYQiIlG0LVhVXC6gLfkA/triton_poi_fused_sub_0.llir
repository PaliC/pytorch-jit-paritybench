; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = or disjoint i32 %10, 64, !dbg !12
  %12 = or disjoint i32 %10, 128, !dbg !12
  %13 = or disjoint i32 %10, 192, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 252, !dbg !12
  %17 = or disjoint i32 %7, %10, !dbg !13
  %18 = or disjoint i32 %7, %11, !dbg !13
  %19 = or disjoint i32 %7, %12, !dbg !13
  %20 = or disjoint i32 %7, %13, !dbg !13
  %21 = or disjoint i32 %7, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 4, !dbg !15
  %.lobit12 = lshr i32 %8, 6, !dbg !16
  %24 = and i32 %.lobit12, 3, !dbg !16
  %25 = or disjoint i32 %23, %15, !dbg !17
  %26 = or disjoint i32 %23, %24, !dbg !17
  %27 = or disjoint i32 %26, 4, !dbg !17
  %28 = or disjoint i32 %26, 8, !dbg !17
  %29 = or disjoint i32 %26, 12, !dbg !17
  %30 = icmp slt i32 %25, 16, !dbg !18
  %31 = icmp slt i32 %26, 16, !dbg !18
  %32 = icmp slt i32 %27, 16, !dbg !18
  %33 = icmp slt i32 %28, 16, !dbg !18
  %34 = icmp slt i32 %29, 16, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %35 = sdiv i32 %.frozen, 512, !dbg !19
  %36 = mul i32 %35, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = sext i32 %25 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %30) #2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = shl i32 %17, 4, !dbg !23
  %49 = shl i32 %18, 4, !dbg !23
  %50 = shl i32 %19, 4, !dbg !23
  %51 = shl i32 %20, 4, !dbg !23
  %52 = add i32 %25, %48, !dbg !24
  %53 = add i32 %25, %49, !dbg !24
  %54 = add i32 %25, %50, !dbg !24
  %55 = add i32 %25, %51, !dbg !24
  %56 = sext i32 %52 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !25
  %58 = sext i32 %53 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !25
  %60 = sext i32 %54 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !25
  %62 = sext i32 %55 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %30) #2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %30) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %30) #2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %30) #2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = fsub float %44, %69, !dbg !27
  %101 = fsub float %45, %70, !dbg !27
  %102 = fsub float %46, %71, !dbg !27
  %103 = fsub float %47, %72, !dbg !27
  %104 = fsub float %44, %78, !dbg !27
  %105 = fsub float %45, %79, !dbg !27
  %106 = fsub float %46, %80, !dbg !27
  %107 = fsub float %47, %81, !dbg !27
  %108 = fsub float %44, %87, !dbg !27
  %109 = fsub float %45, %88, !dbg !27
  %110 = fsub float %46, %89, !dbg !27
  %111 = fsub float %47, %90, !dbg !27
  %112 = fsub float %44, %96, !dbg !27
  %113 = fsub float %45, %97, !dbg !27
  %114 = fsub float %46, %98, !dbg !27
  %115 = fsub float %47, %99, !dbg !27
  %116 = shl i32 %26, 9, !dbg !28
  %117 = shl i32 %27, 9, !dbg !28
  %118 = shl i32 %28, 9, !dbg !28
  %119 = shl i32 %29, 9, !dbg !28
  %120 = shl i32 %35, 13, !dbg !29
  %121 = add i32 %120, %.decomposed, !dbg !30
  %122 = add i32 %121, %116, !dbg !31
  %123 = add i32 %121, %117, !dbg !31
  %124 = add i32 %121, %118, !dbg !31
  %125 = add i32 %121, %119, !dbg !31
  %126 = sext i32 %122 to i64, !dbg !32
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !32
  %128 = sext i32 %123 to i64, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !32
  %130 = sext i32 %124 to i64, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !32
  %132 = sext i32 %125 to i64, !dbg !32
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !32
  %134 = shl i32 %8, 10, !dbg !33
  %135 = and i32 %134, 3072, !dbg !33
  %136 = or disjoint i32 %135, %10, !dbg !33
  %137 = and i32 %14, 1020, !dbg !33
  %138 = lshr exact i32 %135, 4, !dbg !33
  %139 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %138, !dbg !33
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %136, !dbg !33
  %141 = bitcast float %100 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !33
  %142 = or disjoint i32 %136, 256, !dbg !33
  %143 = lshr i32 %142, 6, !dbg !33
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !33
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !33
  %146 = bitcast float %101 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !33
  %147 = or disjoint i32 %136, 512, !dbg !33
  %148 = lshr i32 %147, 6, !dbg !33
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !33
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !33
  %151 = bitcast float %102 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !33
  %152 = or disjoint i32 %136, 768, !dbg !33
  %153 = lshr i32 %152, 6, !dbg !33
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !33
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !33
  %156 = bitcast float %103 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !33
  %157 = or disjoint i32 %136, 64, !dbg !33
  %158 = getelementptr float, ptr addrspace(3) %139, i32 %157, !dbg !33
  %159 = bitcast float %104 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !33
  %160 = or disjoint i32 %136, 320, !dbg !33
  %161 = lshr i32 %160, 6, !dbg !33
  %162 = and i32 %161, 52, !dbg !33
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !33
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %160, !dbg !33
  %165 = bitcast float %105 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !33
  %166 = or disjoint i32 %136, 576, !dbg !33
  %167 = lshr i32 %166, 6, !dbg !33
  %168 = and i32 %167, 56, !dbg !33
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !33
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %166, !dbg !33
  %171 = bitcast float %106 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !33
  %172 = or disjoint i32 %136, 832, !dbg !33
  %173 = lshr i32 %172, 6, !dbg !33
  %174 = and i32 %173, 60, !dbg !33
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !33
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %172, !dbg !33
  %177 = bitcast float %107 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !33
  %178 = or disjoint i32 %136, 128, !dbg !33
  %179 = getelementptr float, ptr addrspace(3) %139, i32 %178, !dbg !33
  %180 = bitcast float %108 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !33
  %181 = or disjoint i32 %136, 384, !dbg !33
  %182 = lshr i32 %181, 6, !dbg !33
  %183 = and i32 %182, 52, !dbg !33
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !33
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %181, !dbg !33
  %186 = bitcast float %109 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !33
  %187 = or disjoint i32 %136, 640, !dbg !33
  %188 = lshr i32 %187, 6, !dbg !33
  %189 = and i32 %188, 56, !dbg !33
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !33
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %187, !dbg !33
  %192 = bitcast float %110 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !33
  %193 = or disjoint i32 %136, 896, !dbg !33
  %194 = lshr i32 %193, 6, !dbg !33
  %195 = and i32 %194, 60, !dbg !33
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !33
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %193, !dbg !33
  %198 = bitcast float %111 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !33
  %199 = or disjoint i32 %136, 192, !dbg !33
  %200 = getelementptr float, ptr addrspace(3) %139, i32 %199, !dbg !33
  %201 = bitcast float %112 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !33
  %202 = or disjoint i32 %136, 448, !dbg !33
  %203 = lshr i32 %202, 6, !dbg !33
  %204 = and i32 %203, 52, !dbg !33
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !33
  %206 = getelementptr float, ptr addrspace(3) %205, i32 %202, !dbg !33
  %207 = bitcast float %113 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !33
  %208 = or disjoint i32 %136, 704, !dbg !33
  %209 = lshr i32 %208, 6, !dbg !33
  %210 = and i32 %209, 56, !dbg !33
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !33
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %208, !dbg !33
  %213 = bitcast float %114 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !33
  %214 = or disjoint i32 %136, 960, !dbg !33
  %215 = lshr i32 %214, 6, !dbg !33
  %216 = and i32 %215, 60, !dbg !33
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !33
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %214, !dbg !33
  %219 = bitcast float %115 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %220 = lshr i32 %14, 6, !dbg !33
  %221 = and i32 %220, 12, !dbg !33
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !33
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %137, !dbg !33
  %224 = or disjoint i32 %137, 1024, !dbg !33
  %225 = lshr i32 %224, 6, !dbg !33
  %226 = and i32 %225, 28, !dbg !33
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !33
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %224, !dbg !33
  %229 = load <4 x i32>, ptr addrspace(3) %228, align 16, !dbg !33
  %230 = or disjoint i32 %137, 2048, !dbg !33
  %231 = lshr i32 %230, 6, !dbg !33
  %232 = and i32 %231, 44, !dbg !33
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !33
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %230, !dbg !33
  %235 = load <4 x i32>, ptr addrspace(3) %234, align 16, !dbg !33
  %236 = or disjoint i32 %137, 3072, !dbg !33
  %237 = lshr i32 %236, 6, !dbg !33
  %238 = and i32 %237, 60, !dbg !33
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !33
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %236, !dbg !33
  %241 = load <4 x i32>, ptr addrspace(3) %240, align 16, !dbg !33
  %.extract = load i32, ptr addrspace(3) %223, align 16, !dbg !33
  %242 = getelementptr inbounds i8, ptr addrspace(3) %223, i32 4, !dbg !33
  %.extract18 = load i32, ptr addrspace(3) %242, align 4, !dbg !33
  %243 = getelementptr inbounds i8, ptr addrspace(3) %223, i32 8, !dbg !33
  %.extract19 = load i32, ptr addrspace(3) %243, align 8, !dbg !33
  %244 = getelementptr inbounds i8, ptr addrspace(3) %223, i32 12, !dbg !33
  %.extract20 = load i32, ptr addrspace(3) %244, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %127, i1 %31) #2, !dbg !33
  %.extract21 = extractelement <4 x i32> %229, i64 0, !dbg !33
  %.extract22 = extractelement <4 x i32> %229, i64 1, !dbg !33
  %.extract23 = extractelement <4 x i32> %229, i64 2, !dbg !33
  %.extract24 = extractelement <4 x i32> %229, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %129, i1 %32) #2, !dbg !33
  %.extract25 = extractelement <4 x i32> %235, i64 0, !dbg !33
  %.extract26 = extractelement <4 x i32> %235, i64 1, !dbg !33
  %.extract27 = extractelement <4 x i32> %235, i64 2, !dbg !33
  %.extract28 = extractelement <4 x i32> %235, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %131, i1 %33) #2, !dbg !33
  %.extract29 = extractelement <4 x i32> %241, i64 0, !dbg !33
  %.extract30 = extractelement <4 x i32> %241, i64 1, !dbg !33
  %.extract31 = extractelement <4 x i32> %241, i64 2, !dbg !33
  %.extract32 = extractelement <4 x i32> %241, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %133, i1 %34) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czz3kp3ztzll43mcs43gwaez7clhemo2m3ub7bhxijsw5rsq3d4p.py", directory: "inductor_cache/zz")
!4 = !{ptr @triton_poi_fused_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_sub_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_sub_0", linkageName: "triton_poi_fused_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 39, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 55, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
