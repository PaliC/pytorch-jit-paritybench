; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %10, 8, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = shl i32 %8, 3, !dbg !12
  %15 = and i32 %14, 56, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %16, 16, !dbg !13
  %19 = or disjoint i32 %16, 24, !dbg !13
  %20 = or disjoint i32 %16, 32, !dbg !13
  %21 = or disjoint i32 %16, 40, !dbg !13
  %22 = or disjoint i32 %16, 48, !dbg !13
  %23 = or disjoint i32 %16, 56, !dbg !13
  %24 = or disjoint i32 %7, %13, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = icmp slt i32 %16, 512, !dbg !14
  %27 = icmp slt i32 %17, 512, !dbg !14
  %28 = icmp slt i32 %18, 512, !dbg !14
  %29 = icmp slt i32 %19, 512, !dbg !14
  %30 = icmp slt i32 %20, 512, !dbg !14
  %31 = icmp slt i32 %21, 512, !dbg !14
  %32 = icmp slt i32 %22, 512, !dbg !14
  %33 = icmp slt i32 %23, 512, !dbg !14
  %34 = icmp slt i32 %24, 512, !dbg !14
  %35 = icmp slt i32 %25, 512, !dbg !14
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %37 = shl i32 %36, 4, !dbg !16
  %38 = and i32 %8, 15, !dbg !17
  %39 = lshr i32 %8, 3, !dbg !17
  %40 = and i32 %39, 15, !dbg !17
  %41 = or disjoint i32 %37, %38, !dbg !18
  %42 = or disjoint i32 %37, %10, !dbg !18
  %43 = or disjoint i32 %37, %11, !dbg !18
  %44 = or disjoint i32 %37, %40, !dbg !18
  %45 = icmp slt i32 %41, 9, !dbg !19
  %46 = icmp slt i32 %42, 9, !dbg !19
  %47 = icmp slt i32 %43, 9, !dbg !19
  %48 = icmp slt i32 %44, 9, !dbg !19
  %.frozen = freeze i32 %41, !dbg !20
  %49 = sdiv i32 %.frozen, 3, !dbg !20
  %50 = mul i32 %49, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %50, !dbg !21
  %.frozen19 = freeze i32 %24, !dbg !22
  %51 = sdiv i32 %.frozen19, 128, !dbg !22
  %52 = mul i32 %51, 128, !dbg !23
  %.decomposed20 = sub i32 %.frozen19, %52, !dbg !23
  %.frozen21 = freeze i32 %25, !dbg !22
  %53 = sdiv i32 %.frozen21, 128, !dbg !22
  %54 = mul i32 %53, 128, !dbg !23
  %.decomposed22 = sub i32 %.frozen21, %54, !dbg !23
  %55 = shl nsw i32 %.decomposed, 1, !dbg !24
  %56 = mul i32 %49, 14, !dbg !25
  %57 = add i32 %55, %56, !dbg !26
  %58 = mul i32 %16, 49, !dbg !27
  %59 = mul i32 %17, 49, !dbg !27
  %60 = mul i32 %18, 49, !dbg !27
  %61 = mul i32 %19, 49, !dbg !27
  %62 = mul i32 %20, 49, !dbg !27
  %63 = mul i32 %21, 49, !dbg !27
  %64 = mul i32 %22, 49, !dbg !27
  %65 = mul i32 %23, 49, !dbg !27
  %66 = add i32 %57, %58, !dbg !28
  %67 = add i32 %57, %59, !dbg !28
  %68 = add i32 %57, %60, !dbg !28
  %69 = add i32 %57, %61, !dbg !28
  %70 = add i32 %57, %62, !dbg !28
  %71 = add i32 %57, %63, !dbg !28
  %72 = add i32 %57, %64, !dbg !28
  %73 = add i32 %57, %65, !dbg !28
  %74 = sext i32 %66 to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !29
  %76 = sext i32 %67 to i64, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !29
  %78 = sext i32 %68 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !29
  %80 = sext i32 %69 to i64, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !29
  %82 = sext i32 %70 to i64, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !29
  %84 = sext i32 %71 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !29
  %86 = sext i32 %72 to i64, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !29
  %88 = sext i32 %73 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !29
  %90 = and i1 %26, %45, !dbg !30
  %91 = and i1 %27, %45, !dbg !30
  %92 = and i1 %28, %45, !dbg !30
  %93 = and i1 %29, %45, !dbg !30
  %94 = and i1 %30, %45, !dbg !30
  %95 = and i1 %31, %45, !dbg !30
  %96 = and i1 %32, %45, !dbg !30
  %97 = and i1 %33, %45, !dbg !30
  %98 = and i1 %34, %46, !dbg !30
  %99 = and i1 %34, %47, !dbg !30
  %100 = and i1 %35, %48, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %90) #2, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %91) #2, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %92) #2, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %93) #2, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %94) #2, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %95) #2, !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %96) #2, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %97) #2, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = or disjoint i32 %55, 1, !dbg !32
  %118 = add i32 %117, %56, !dbg !33
  %119 = add i32 %118, %58, !dbg !34
  %120 = add i32 %118, %59, !dbg !34
  %121 = add i32 %118, %60, !dbg !34
  %122 = add i32 %118, %61, !dbg !34
  %123 = add i32 %118, %62, !dbg !34
  %124 = add i32 %118, %63, !dbg !34
  %125 = add i32 %118, %64, !dbg !34
  %126 = add i32 %118, %65, !dbg !34
  %127 = sext i32 %119 to i64, !dbg !35
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !35
  %129 = sext i32 %120 to i64, !dbg !35
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !35
  %131 = sext i32 %121 to i64, !dbg !35
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !35
  %133 = sext i32 %122 to i64, !dbg !35
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !35
  %135 = sext i32 %123 to i64, !dbg !35
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !35
  %137 = sext i32 %124 to i64, !dbg !35
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !35
  %139 = sext i32 %125 to i64, !dbg !35
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !35
  %141 = sext i32 %126 to i64, !dbg !35
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %90) #2, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %91) #2, !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %92) #2, !dbg !36
  %148 = bitcast i32 %147 to float, !dbg !36
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %93) #2, !dbg !36
  %150 = bitcast i32 %149 to float, !dbg !36
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %94) #2, !dbg !36
  %152 = bitcast i32 %151 to float, !dbg !36
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %95) #2, !dbg !36
  %154 = bitcast i32 %153 to float, !dbg !36
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %96) #2, !dbg !36
  %156 = bitcast i32 %155 to float, !dbg !36
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %97) #2, !dbg !36
  %158 = bitcast i32 %157 to float, !dbg !36
  %159 = add i32 %57, 2, !dbg !37
  %160 = add i32 %159, %58, !dbg !38
  %161 = add i32 %159, %59, !dbg !38
  %162 = add i32 %159, %60, !dbg !38
  %163 = add i32 %159, %61, !dbg !38
  %164 = add i32 %159, %62, !dbg !38
  %165 = add i32 %159, %63, !dbg !38
  %166 = add i32 %159, %64, !dbg !38
  %167 = add i32 %159, %65, !dbg !38
  %168 = sext i32 %160 to i64, !dbg !39
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !39
  %170 = sext i32 %161 to i64, !dbg !39
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !39
  %172 = sext i32 %162 to i64, !dbg !39
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !39
  %174 = sext i32 %163 to i64, !dbg !39
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !39
  %176 = sext i32 %164 to i64, !dbg !39
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !39
  %178 = sext i32 %165 to i64, !dbg !39
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !39
  %180 = sext i32 %166 to i64, !dbg !39
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !39
  %182 = sext i32 %167 to i64, !dbg !39
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %90) #2, !dbg !40
  %185 = bitcast i32 %184 to float, !dbg !40
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %91) #2, !dbg !40
  %187 = bitcast i32 %186 to float, !dbg !40
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %92) #2, !dbg !40
  %189 = bitcast i32 %188 to float, !dbg !40
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %93) #2, !dbg !40
  %191 = bitcast i32 %190 to float, !dbg !40
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %94) #2, !dbg !40
  %193 = bitcast i32 %192 to float, !dbg !40
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %95) #2, !dbg !40
  %195 = bitcast i32 %194 to float, !dbg !40
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %96) #2, !dbg !40
  %197 = bitcast i32 %196 to float, !dbg !40
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %97) #2, !dbg !40
  %199 = bitcast i32 %198 to float, !dbg !40
  %200 = add i32 %57, 7, !dbg !41
  %201 = add i32 %200, %58, !dbg !42
  %202 = add i32 %200, %59, !dbg !42
  %203 = add i32 %200, %60, !dbg !42
  %204 = add i32 %200, %61, !dbg !42
  %205 = add i32 %200, %62, !dbg !42
  %206 = add i32 %200, %63, !dbg !42
  %207 = add i32 %200, %64, !dbg !42
  %208 = add i32 %200, %65, !dbg !42
  %209 = sext i32 %201 to i64, !dbg !43
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !43
  %211 = sext i32 %202 to i64, !dbg !43
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !43
  %213 = sext i32 %203 to i64, !dbg !43
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !43
  %215 = sext i32 %204 to i64, !dbg !43
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !43
  %217 = sext i32 %205 to i64, !dbg !43
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !43
  %219 = sext i32 %206 to i64, !dbg !43
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !43
  %221 = sext i32 %207 to i64, !dbg !43
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !43
  %223 = sext i32 %208 to i64, !dbg !43
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !43
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %90) #2, !dbg !44
  %226 = bitcast i32 %225 to float, !dbg !44
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %91) #2, !dbg !44
  %228 = bitcast i32 %227 to float, !dbg !44
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %92) #2, !dbg !44
  %230 = bitcast i32 %229 to float, !dbg !44
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %93) #2, !dbg !44
  %232 = bitcast i32 %231 to float, !dbg !44
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %94) #2, !dbg !44
  %234 = bitcast i32 %233 to float, !dbg !44
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 %95) #2, !dbg !44
  %236 = bitcast i32 %235 to float, !dbg !44
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 %96) #2, !dbg !44
  %238 = bitcast i32 %237 to float, !dbg !44
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %97) #2, !dbg !44
  %240 = bitcast i32 %239 to float, !dbg !44
  %241 = add i32 %57, 8, !dbg !45
  %242 = add i32 %241, %58, !dbg !46
  %243 = add i32 %241, %59, !dbg !46
  %244 = add i32 %241, %60, !dbg !46
  %245 = add i32 %241, %61, !dbg !46
  %246 = add i32 %241, %62, !dbg !46
  %247 = add i32 %241, %63, !dbg !46
  %248 = add i32 %241, %64, !dbg !46
  %249 = add i32 %241, %65, !dbg !46
  %250 = sext i32 %242 to i64, !dbg !47
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !47
  %252 = sext i32 %243 to i64, !dbg !47
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !47
  %254 = sext i32 %244 to i64, !dbg !47
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !47
  %256 = sext i32 %245 to i64, !dbg !47
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !47
  %258 = sext i32 %246 to i64, !dbg !47
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !47
  %260 = sext i32 %247 to i64, !dbg !47
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !47
  %262 = sext i32 %248 to i64, !dbg !47
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !47
  %264 = sext i32 %249 to i64, !dbg !47
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !47
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %90) #2, !dbg !48
  %267 = bitcast i32 %266 to float, !dbg !48
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %91) #2, !dbg !48
  %269 = bitcast i32 %268 to float, !dbg !48
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %92) #2, !dbg !48
  %271 = bitcast i32 %270 to float, !dbg !48
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %93) #2, !dbg !48
  %273 = bitcast i32 %272 to float, !dbg !48
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %94) #2, !dbg !48
  %275 = bitcast i32 %274 to float, !dbg !48
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %95) #2, !dbg !48
  %277 = bitcast i32 %276 to float, !dbg !48
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %96) #2, !dbg !48
  %279 = bitcast i32 %278 to float, !dbg !48
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %97) #2, !dbg !48
  %281 = bitcast i32 %280 to float, !dbg !48
  %282 = add i32 %57, 9, !dbg !49
  %283 = add i32 %282, %58, !dbg !50
  %284 = add i32 %282, %59, !dbg !50
  %285 = add i32 %282, %60, !dbg !50
  %286 = add i32 %282, %61, !dbg !50
  %287 = add i32 %282, %62, !dbg !50
  %288 = add i32 %282, %63, !dbg !50
  %289 = add i32 %282, %64, !dbg !50
  %290 = add i32 %282, %65, !dbg !50
  %291 = sext i32 %283 to i64, !dbg !51
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !51
  %293 = sext i32 %284 to i64, !dbg !51
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !51
  %295 = sext i32 %285 to i64, !dbg !51
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !51
  %297 = sext i32 %286 to i64, !dbg !51
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !51
  %299 = sext i32 %287 to i64, !dbg !51
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !51
  %301 = sext i32 %288 to i64, !dbg !51
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !51
  %303 = sext i32 %289 to i64, !dbg !51
  %304 = getelementptr float, ptr addrspace(1) %0, i64 %303, !dbg !51
  %305 = sext i32 %290 to i64, !dbg !51
  %306 = getelementptr float, ptr addrspace(1) %0, i64 %305, !dbg !51
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 %90) #2, !dbg !52
  %308 = bitcast i32 %307 to float, !dbg !52
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %91) #2, !dbg !52
  %310 = bitcast i32 %309 to float, !dbg !52
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %92) #2, !dbg !52
  %312 = bitcast i32 %311 to float, !dbg !52
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 %93) #2, !dbg !52
  %314 = bitcast i32 %313 to float, !dbg !52
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 %94) #2, !dbg !52
  %316 = bitcast i32 %315 to float, !dbg !52
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 %95) #2, !dbg !52
  %318 = bitcast i32 %317 to float, !dbg !52
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 %96) #2, !dbg !52
  %320 = bitcast i32 %319 to float, !dbg !52
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 %97) #2, !dbg !52
  %322 = bitcast i32 %321 to float, !dbg !52
  %323 = add i32 %57, 14, !dbg !53
  %324 = add i32 %323, %58, !dbg !54
  %325 = add i32 %323, %59, !dbg !54
  %326 = add i32 %323, %60, !dbg !54
  %327 = add i32 %323, %61, !dbg !54
  %328 = add i32 %323, %62, !dbg !54
  %329 = add i32 %323, %63, !dbg !54
  %330 = add i32 %323, %64, !dbg !54
  %331 = add i32 %323, %65, !dbg !54
  %332 = sext i32 %324 to i64, !dbg !55
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !55
  %334 = sext i32 %325 to i64, !dbg !55
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !55
  %336 = sext i32 %326 to i64, !dbg !55
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !55
  %338 = sext i32 %327 to i64, !dbg !55
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !55
  %340 = sext i32 %328 to i64, !dbg !55
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !55
  %342 = sext i32 %329 to i64, !dbg !55
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !55
  %344 = sext i32 %330 to i64, !dbg !55
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !55
  %346 = sext i32 %331 to i64, !dbg !55
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !55
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %90) #2, !dbg !56
  %349 = bitcast i32 %348 to float, !dbg !56
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %91) #2, !dbg !56
  %351 = bitcast i32 %350 to float, !dbg !56
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %92) #2, !dbg !56
  %353 = bitcast i32 %352 to float, !dbg !56
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %93) #2, !dbg !56
  %355 = bitcast i32 %354 to float, !dbg !56
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 %94) #2, !dbg !56
  %357 = bitcast i32 %356 to float, !dbg !56
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 %95) #2, !dbg !56
  %359 = bitcast i32 %358 to float, !dbg !56
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 %96) #2, !dbg !56
  %361 = bitcast i32 %360 to float, !dbg !56
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 %97) #2, !dbg !56
  %363 = bitcast i32 %362 to float, !dbg !56
  %364 = add i32 %57, 15, !dbg !57
  %365 = add i32 %364, %58, !dbg !58
  %366 = add i32 %364, %59, !dbg !58
  %367 = add i32 %364, %60, !dbg !58
  %368 = add i32 %364, %61, !dbg !58
  %369 = add i32 %364, %62, !dbg !58
  %370 = add i32 %364, %63, !dbg !58
  %371 = add i32 %364, %64, !dbg !58
  %372 = add i32 %364, %65, !dbg !58
  %373 = sext i32 %365 to i64, !dbg !59
  %374 = getelementptr float, ptr addrspace(1) %0, i64 %373, !dbg !59
  %375 = sext i32 %366 to i64, !dbg !59
  %376 = getelementptr float, ptr addrspace(1) %0, i64 %375, !dbg !59
  %377 = sext i32 %367 to i64, !dbg !59
  %378 = getelementptr float, ptr addrspace(1) %0, i64 %377, !dbg !59
  %379 = sext i32 %368 to i64, !dbg !59
  %380 = getelementptr float, ptr addrspace(1) %0, i64 %379, !dbg !59
  %381 = sext i32 %369 to i64, !dbg !59
  %382 = getelementptr float, ptr addrspace(1) %0, i64 %381, !dbg !59
  %383 = sext i32 %370 to i64, !dbg !59
  %384 = getelementptr float, ptr addrspace(1) %0, i64 %383, !dbg !59
  %385 = sext i32 %371 to i64, !dbg !59
  %386 = getelementptr float, ptr addrspace(1) %0, i64 %385, !dbg !59
  %387 = sext i32 %372 to i64, !dbg !59
  %388 = getelementptr float, ptr addrspace(1) %0, i64 %387, !dbg !59
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %374, i1 %90) #2, !dbg !60
  %390 = bitcast i32 %389 to float, !dbg !60
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 %91) #2, !dbg !60
  %392 = bitcast i32 %391 to float, !dbg !60
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 %92) #2, !dbg !60
  %394 = bitcast i32 %393 to float, !dbg !60
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %380, i1 %93) #2, !dbg !60
  %396 = bitcast i32 %395 to float, !dbg !60
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %382, i1 %94) #2, !dbg !60
  %398 = bitcast i32 %397 to float, !dbg !60
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %384, i1 %95) #2, !dbg !60
  %400 = bitcast i32 %399 to float, !dbg !60
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %386, i1 %96) #2, !dbg !60
  %402 = bitcast i32 %401 to float, !dbg !60
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %388, i1 %97) #2, !dbg !60
  %404 = bitcast i32 %403 to float, !dbg !60
  %405 = add i32 %57, 16, !dbg !61
  %406 = add i32 %405, %58, !dbg !62
  %407 = add i32 %405, %59, !dbg !62
  %408 = add i32 %405, %60, !dbg !62
  %409 = add i32 %405, %61, !dbg !62
  %410 = add i32 %405, %62, !dbg !62
  %411 = add i32 %405, %63, !dbg !62
  %412 = add i32 %405, %64, !dbg !62
  %413 = add i32 %405, %65, !dbg !62
  %414 = sext i32 %406 to i64, !dbg !63
  %415 = getelementptr float, ptr addrspace(1) %0, i64 %414, !dbg !63
  %416 = sext i32 %407 to i64, !dbg !63
  %417 = getelementptr float, ptr addrspace(1) %0, i64 %416, !dbg !63
  %418 = sext i32 %408 to i64, !dbg !63
  %419 = getelementptr float, ptr addrspace(1) %0, i64 %418, !dbg !63
  %420 = sext i32 %409 to i64, !dbg !63
  %421 = getelementptr float, ptr addrspace(1) %0, i64 %420, !dbg !63
  %422 = sext i32 %410 to i64, !dbg !63
  %423 = getelementptr float, ptr addrspace(1) %0, i64 %422, !dbg !63
  %424 = sext i32 %411 to i64, !dbg !63
  %425 = getelementptr float, ptr addrspace(1) %0, i64 %424, !dbg !63
  %426 = sext i32 %412 to i64, !dbg !63
  %427 = getelementptr float, ptr addrspace(1) %0, i64 %426, !dbg !63
  %428 = sext i32 %413 to i64, !dbg !63
  %429 = getelementptr float, ptr addrspace(1) %0, i64 %428, !dbg !63
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %415, i1 %90) #2, !dbg !64
  %431 = bitcast i32 %430 to float, !dbg !64
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %417, i1 %91) #2, !dbg !64
  %433 = bitcast i32 %432 to float, !dbg !64
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %419, i1 %92) #2, !dbg !64
  %435 = bitcast i32 %434 to float, !dbg !64
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %421, i1 %93) #2, !dbg !64
  %437 = bitcast i32 %436 to float, !dbg !64
  %438 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %423, i1 %94) #2, !dbg !64
  %439 = bitcast i32 %438 to float, !dbg !64
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %95) #2, !dbg !64
  %441 = bitcast i32 %440 to float, !dbg !64
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %427, i1 %96) #2, !dbg !64
  %443 = bitcast i32 %442 to float, !dbg !64
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %429, i1 %97) #2, !dbg !64
  %445 = bitcast i32 %444 to float, !dbg !64
  %446 = fcmp ogt float %144, %102, !dbg !65
  %447 = fcmp ogt float %146, %104, !dbg !65
  %448 = fcmp ogt float %148, %106, !dbg !65
  %449 = fcmp ogt float %150, %108, !dbg !65
  %450 = fcmp ogt float %152, %110, !dbg !65
  %451 = fcmp ogt float %154, %112, !dbg !65
  %452 = fcmp ogt float %156, %114, !dbg !65
  %453 = fcmp ogt float %158, %116, !dbg !65
  %454 = fcmp uno float %144, 0.000000e+00, !dbg !69
  %455 = fcmp uno float %146, 0.000000e+00, !dbg !69
  %456 = fcmp uno float %148, 0.000000e+00, !dbg !69
  %457 = fcmp uno float %150, 0.000000e+00, !dbg !69
  %458 = fcmp uno float %152, 0.000000e+00, !dbg !69
  %459 = fcmp uno float %154, 0.000000e+00, !dbg !69
  %460 = fcmp uno float %156, 0.000000e+00, !dbg !69
  %461 = fcmp uno float %158, 0.000000e+00, !dbg !69
  %462 = or i1 %446, %454, !dbg !70
  %463 = or i1 %447, %455, !dbg !70
  %464 = or i1 %448, %456, !dbg !70
  %465 = or i1 %449, %457, !dbg !70
  %466 = or i1 %450, %458, !dbg !70
  %467 = or i1 %451, %459, !dbg !70
  %468 = or i1 %452, %460, !dbg !70
  %469 = or i1 %453, %461, !dbg !70
  %470 = select i1 %462, float %144, float %102, !dbg !71
  %471 = select i1 %463, float %146, float %104, !dbg !71
  %472 = select i1 %464, float %148, float %106, !dbg !71
  %473 = select i1 %465, float %150, float %108, !dbg !71
  %474 = select i1 %466, float %152, float %110, !dbg !71
  %475 = select i1 %467, float %154, float %112, !dbg !71
  %476 = select i1 %468, float %156, float %114, !dbg !71
  %477 = select i1 %469, float %158, float %116, !dbg !71
  %478 = fcmp olt float %470, %185, !dbg !72
  %479 = fcmp olt float %471, %187, !dbg !72
  %480 = fcmp olt float %472, %189, !dbg !72
  %481 = fcmp olt float %473, %191, !dbg !72
  %482 = fcmp olt float %474, %193, !dbg !72
  %483 = fcmp olt float %475, %195, !dbg !72
  %484 = fcmp olt float %476, %197, !dbg !72
  %485 = fcmp olt float %477, %199, !dbg !72
  %486 = fcmp uno float %185, 0.000000e+00, !dbg !74
  %487 = fcmp uno float %187, 0.000000e+00, !dbg !74
  %488 = fcmp uno float %189, 0.000000e+00, !dbg !74
  %489 = fcmp uno float %191, 0.000000e+00, !dbg !74
  %490 = fcmp uno float %193, 0.000000e+00, !dbg !74
  %491 = fcmp uno float %195, 0.000000e+00, !dbg !74
  %492 = fcmp uno float %197, 0.000000e+00, !dbg !74
  %493 = fcmp uno float %199, 0.000000e+00, !dbg !74
  %494 = or i1 %478, %486, !dbg !75
  %495 = or i1 %479, %487, !dbg !75
  %496 = or i1 %480, %488, !dbg !75
  %497 = or i1 %481, %489, !dbg !75
  %498 = or i1 %482, %490, !dbg !75
  %499 = or i1 %483, %491, !dbg !75
  %500 = or i1 %484, %492, !dbg !75
  %501 = or i1 %485, %493, !dbg !75
  %502 = select i1 %494, float %185, float %470, !dbg !76
  %503 = select i1 %495, float %187, float %471, !dbg !76
  %504 = select i1 %496, float %189, float %472, !dbg !76
  %505 = select i1 %497, float %191, float %473, !dbg !76
  %506 = select i1 %498, float %193, float %474, !dbg !76
  %507 = select i1 %499, float %195, float %475, !dbg !76
  %508 = select i1 %500, float %197, float %476, !dbg !76
  %509 = select i1 %501, float %199, float %477, !dbg !76
  %510 = fcmp olt float %502, %226, !dbg !77
  %511 = fcmp olt float %503, %228, !dbg !77
  %512 = fcmp olt float %504, %230, !dbg !77
  %513 = fcmp olt float %505, %232, !dbg !77
  %514 = fcmp olt float %506, %234, !dbg !77
  %515 = fcmp olt float %507, %236, !dbg !77
  %516 = fcmp olt float %508, %238, !dbg !77
  %517 = fcmp olt float %509, %240, !dbg !77
  %518 = fcmp uno float %226, 0.000000e+00, !dbg !79
  %519 = fcmp uno float %228, 0.000000e+00, !dbg !79
  %520 = fcmp uno float %230, 0.000000e+00, !dbg !79
  %521 = fcmp uno float %232, 0.000000e+00, !dbg !79
  %522 = fcmp uno float %234, 0.000000e+00, !dbg !79
  %523 = fcmp uno float %236, 0.000000e+00, !dbg !79
  %524 = fcmp uno float %238, 0.000000e+00, !dbg !79
  %525 = fcmp uno float %240, 0.000000e+00, !dbg !79
  %526 = or i1 %510, %518, !dbg !80
  %527 = or i1 %511, %519, !dbg !80
  %528 = or i1 %512, %520, !dbg !80
  %529 = or i1 %513, %521, !dbg !80
  %530 = or i1 %514, %522, !dbg !80
  %531 = or i1 %515, %523, !dbg !80
  %532 = or i1 %516, %524, !dbg !80
  %533 = or i1 %517, %525, !dbg !80
  %534 = select i1 %526, float %226, float %502, !dbg !81
  %535 = select i1 %527, float %228, float %503, !dbg !81
  %536 = select i1 %528, float %230, float %504, !dbg !81
  %537 = select i1 %529, float %232, float %505, !dbg !81
  %538 = select i1 %530, float %234, float %506, !dbg !81
  %539 = select i1 %531, float %236, float %507, !dbg !81
  %540 = select i1 %532, float %238, float %508, !dbg !81
  %541 = select i1 %533, float %240, float %509, !dbg !81
  %542 = fcmp olt float %534, %267, !dbg !82
  %543 = fcmp olt float %535, %269, !dbg !82
  %544 = fcmp olt float %536, %271, !dbg !82
  %545 = fcmp olt float %537, %273, !dbg !82
  %546 = fcmp olt float %538, %275, !dbg !82
  %547 = fcmp olt float %539, %277, !dbg !82
  %548 = fcmp olt float %540, %279, !dbg !82
  %549 = fcmp olt float %541, %281, !dbg !82
  %550 = fcmp uno float %267, 0.000000e+00, !dbg !84
  %551 = fcmp uno float %269, 0.000000e+00, !dbg !84
  %552 = fcmp uno float %271, 0.000000e+00, !dbg !84
  %553 = fcmp uno float %273, 0.000000e+00, !dbg !84
  %554 = fcmp uno float %275, 0.000000e+00, !dbg !84
  %555 = fcmp uno float %277, 0.000000e+00, !dbg !84
  %556 = fcmp uno float %279, 0.000000e+00, !dbg !84
  %557 = fcmp uno float %281, 0.000000e+00, !dbg !84
  %558 = or i1 %542, %550, !dbg !85
  %559 = or i1 %543, %551, !dbg !85
  %560 = or i1 %544, %552, !dbg !85
  %561 = or i1 %545, %553, !dbg !85
  %562 = or i1 %546, %554, !dbg !85
  %563 = or i1 %547, %555, !dbg !85
  %564 = or i1 %548, %556, !dbg !85
  %565 = or i1 %549, %557, !dbg !85
  %566 = select i1 %558, float %267, float %534, !dbg !86
  %567 = select i1 %559, float %269, float %535, !dbg !86
  %568 = select i1 %560, float %271, float %536, !dbg !86
  %569 = select i1 %561, float %273, float %537, !dbg !86
  %570 = select i1 %562, float %275, float %538, !dbg !86
  %571 = select i1 %563, float %277, float %539, !dbg !86
  %572 = select i1 %564, float %279, float %540, !dbg !86
  %573 = select i1 %565, float %281, float %541, !dbg !86
  %574 = fcmp olt float %566, %308, !dbg !87
  %575 = fcmp olt float %567, %310, !dbg !87
  %576 = fcmp olt float %568, %312, !dbg !87
  %577 = fcmp olt float %569, %314, !dbg !87
  %578 = fcmp olt float %570, %316, !dbg !87
  %579 = fcmp olt float %571, %318, !dbg !87
  %580 = fcmp olt float %572, %320, !dbg !87
  %581 = fcmp olt float %573, %322, !dbg !87
  %582 = fcmp uno float %308, 0.000000e+00, !dbg !89
  %583 = fcmp uno float %310, 0.000000e+00, !dbg !89
  %584 = fcmp uno float %312, 0.000000e+00, !dbg !89
  %585 = fcmp uno float %314, 0.000000e+00, !dbg !89
  %586 = fcmp uno float %316, 0.000000e+00, !dbg !89
  %587 = fcmp uno float %318, 0.000000e+00, !dbg !89
  %588 = fcmp uno float %320, 0.000000e+00, !dbg !89
  %589 = fcmp uno float %322, 0.000000e+00, !dbg !89
  %590 = or i1 %574, %582, !dbg !90
  %591 = or i1 %575, %583, !dbg !90
  %592 = or i1 %576, %584, !dbg !90
  %593 = or i1 %577, %585, !dbg !90
  %594 = or i1 %578, %586, !dbg !90
  %595 = or i1 %579, %587, !dbg !90
  %596 = or i1 %580, %588, !dbg !90
  %597 = or i1 %581, %589, !dbg !90
  %598 = select i1 %590, float %308, float %566, !dbg !91
  %599 = select i1 %591, float %310, float %567, !dbg !91
  %600 = select i1 %592, float %312, float %568, !dbg !91
  %601 = select i1 %593, float %314, float %569, !dbg !91
  %602 = select i1 %594, float %316, float %570, !dbg !91
  %603 = select i1 %595, float %318, float %571, !dbg !91
  %604 = select i1 %596, float %320, float %572, !dbg !91
  %605 = select i1 %597, float %322, float %573, !dbg !91
  %606 = fcmp olt float %598, %349, !dbg !92
  %607 = fcmp olt float %599, %351, !dbg !92
  %608 = fcmp olt float %600, %353, !dbg !92
  %609 = fcmp olt float %601, %355, !dbg !92
  %610 = fcmp olt float %602, %357, !dbg !92
  %611 = fcmp olt float %603, %359, !dbg !92
  %612 = fcmp olt float %604, %361, !dbg !92
  %613 = fcmp olt float %605, %363, !dbg !92
  %614 = fcmp uno float %349, 0.000000e+00, !dbg !94
  %615 = fcmp uno float %351, 0.000000e+00, !dbg !94
  %616 = fcmp uno float %353, 0.000000e+00, !dbg !94
  %617 = fcmp uno float %355, 0.000000e+00, !dbg !94
  %618 = fcmp uno float %357, 0.000000e+00, !dbg !94
  %619 = fcmp uno float %359, 0.000000e+00, !dbg !94
  %620 = fcmp uno float %361, 0.000000e+00, !dbg !94
  %621 = fcmp uno float %363, 0.000000e+00, !dbg !94
  %622 = or i1 %606, %614, !dbg !95
  %623 = or i1 %607, %615, !dbg !95
  %624 = or i1 %608, %616, !dbg !95
  %625 = or i1 %609, %617, !dbg !95
  %626 = or i1 %610, %618, !dbg !95
  %627 = or i1 %611, %619, !dbg !95
  %628 = or i1 %612, %620, !dbg !95
  %629 = or i1 %613, %621, !dbg !95
  %630 = select i1 %622, float %349, float %598, !dbg !96
  %631 = select i1 %623, float %351, float %599, !dbg !96
  %632 = select i1 %624, float %353, float %600, !dbg !96
  %633 = select i1 %625, float %355, float %601, !dbg !96
  %634 = select i1 %626, float %357, float %602, !dbg !96
  %635 = select i1 %627, float %359, float %603, !dbg !96
  %636 = select i1 %628, float %361, float %604, !dbg !96
  %637 = select i1 %629, float %363, float %605, !dbg !96
  %638 = fcmp olt float %630, %390, !dbg !97
  %639 = fcmp olt float %631, %392, !dbg !97
  %640 = fcmp olt float %632, %394, !dbg !97
  %641 = fcmp olt float %633, %396, !dbg !97
  %642 = fcmp olt float %634, %398, !dbg !97
  %643 = fcmp olt float %635, %400, !dbg !97
  %644 = fcmp olt float %636, %402, !dbg !97
  %645 = fcmp olt float %637, %404, !dbg !97
  %646 = fcmp uno float %390, 0.000000e+00, !dbg !99
  %647 = fcmp uno float %392, 0.000000e+00, !dbg !99
  %648 = fcmp uno float %394, 0.000000e+00, !dbg !99
  %649 = fcmp uno float %396, 0.000000e+00, !dbg !99
  %650 = fcmp uno float %398, 0.000000e+00, !dbg !99
  %651 = fcmp uno float %400, 0.000000e+00, !dbg !99
  %652 = fcmp uno float %402, 0.000000e+00, !dbg !99
  %653 = fcmp uno float %404, 0.000000e+00, !dbg !99
  %654 = or i1 %638, %646, !dbg !100
  %655 = or i1 %639, %647, !dbg !100
  %656 = or i1 %640, %648, !dbg !100
  %657 = or i1 %641, %649, !dbg !100
  %658 = or i1 %642, %650, !dbg !100
  %659 = or i1 %643, %651, !dbg !100
  %660 = or i1 %644, %652, !dbg !100
  %661 = or i1 %645, %653, !dbg !100
  %662 = select i1 %654, float %390, float %630, !dbg !101
  %663 = select i1 %655, float %392, float %631, !dbg !101
  %664 = select i1 %656, float %394, float %632, !dbg !101
  %665 = select i1 %657, float %396, float %633, !dbg !101
  %666 = select i1 %658, float %398, float %634, !dbg !101
  %667 = select i1 %659, float %400, float %635, !dbg !101
  %668 = select i1 %660, float %402, float %636, !dbg !101
  %669 = select i1 %661, float %404, float %637, !dbg !101
  %670 = fcmp olt float %662, %431, !dbg !102
  %671 = fcmp olt float %663, %433, !dbg !102
  %672 = fcmp olt float %664, %435, !dbg !102
  %673 = fcmp olt float %665, %437, !dbg !102
  %674 = fcmp olt float %666, %439, !dbg !102
  %675 = fcmp olt float %667, %441, !dbg !102
  %676 = fcmp olt float %668, %443, !dbg !102
  %677 = fcmp olt float %669, %445, !dbg !102
  %678 = fcmp uno float %431, 0.000000e+00, !dbg !104
  %679 = fcmp uno float %433, 0.000000e+00, !dbg !104
  %680 = fcmp uno float %435, 0.000000e+00, !dbg !104
  %681 = fcmp uno float %437, 0.000000e+00, !dbg !104
  %682 = fcmp uno float %439, 0.000000e+00, !dbg !104
  %683 = fcmp uno float %441, 0.000000e+00, !dbg !104
  %684 = fcmp uno float %443, 0.000000e+00, !dbg !104
  %685 = fcmp uno float %445, 0.000000e+00, !dbg !104
  %686 = or i1 %670, %678, !dbg !105
  %687 = or i1 %671, %679, !dbg !105
  %688 = or i1 %672, %680, !dbg !105
  %689 = or i1 %673, %681, !dbg !105
  %690 = or i1 %674, %682, !dbg !105
  %691 = or i1 %675, %683, !dbg !105
  %692 = or i1 %676, %684, !dbg !105
  %693 = or i1 %677, %685, !dbg !105
  %694 = zext i1 %446 to i8, !dbg !106
  %695 = zext i1 %447 to i8, !dbg !106
  %696 = zext i1 %448 to i8, !dbg !106
  %697 = zext i1 %449 to i8, !dbg !106
  %698 = zext i1 %450 to i8, !dbg !106
  %699 = zext i1 %451 to i8, !dbg !106
  %700 = zext i1 %452 to i8, !dbg !106
  %701 = zext i1 %453 to i8, !dbg !106
  %702 = select i1 %478, i8 2, i8 %694, !dbg !107
  %703 = select i1 %479, i8 2, i8 %695, !dbg !107
  %704 = select i1 %480, i8 2, i8 %696, !dbg !107
  %705 = select i1 %481, i8 2, i8 %697, !dbg !107
  %706 = select i1 %482, i8 2, i8 %698, !dbg !107
  %707 = select i1 %483, i8 2, i8 %699, !dbg !107
  %708 = select i1 %484, i8 2, i8 %700, !dbg !107
  %709 = select i1 %485, i8 2, i8 %701, !dbg !107
  %710 = select i1 %510, i8 3, i8 %702, !dbg !108
  %711 = select i1 %511, i8 3, i8 %703, !dbg !108
  %712 = select i1 %512, i8 3, i8 %704, !dbg !108
  %713 = select i1 %513, i8 3, i8 %705, !dbg !108
  %714 = select i1 %514, i8 3, i8 %706, !dbg !108
  %715 = select i1 %515, i8 3, i8 %707, !dbg !108
  %716 = select i1 %516, i8 3, i8 %708, !dbg !108
  %717 = select i1 %517, i8 3, i8 %709, !dbg !108
  %718 = select i1 %542, i8 4, i8 %710, !dbg !109
  %719 = select i1 %543, i8 4, i8 %711, !dbg !109
  %720 = select i1 %544, i8 4, i8 %712, !dbg !109
  %721 = select i1 %545, i8 4, i8 %713, !dbg !109
  %722 = select i1 %546, i8 4, i8 %714, !dbg !109
  %723 = select i1 %547, i8 4, i8 %715, !dbg !109
  %724 = select i1 %548, i8 4, i8 %716, !dbg !109
  %725 = select i1 %549, i8 4, i8 %717, !dbg !109
  %726 = select i1 %574, i8 5, i8 %718, !dbg !110
  %727 = select i1 %575, i8 5, i8 %719, !dbg !110
  %728 = select i1 %576, i8 5, i8 %720, !dbg !110
  %729 = select i1 %577, i8 5, i8 %721, !dbg !110
  %730 = select i1 %578, i8 5, i8 %722, !dbg !110
  %731 = select i1 %579, i8 5, i8 %723, !dbg !110
  %732 = select i1 %580, i8 5, i8 %724, !dbg !110
  %733 = select i1 %581, i8 5, i8 %725, !dbg !110
  %734 = select i1 %606, i8 6, i8 %726, !dbg !111
  %735 = select i1 %607, i8 6, i8 %727, !dbg !111
  %736 = select i1 %608, i8 6, i8 %728, !dbg !111
  %737 = select i1 %609, i8 6, i8 %729, !dbg !111
  %738 = select i1 %610, i8 6, i8 %730, !dbg !111
  %739 = select i1 %611, i8 6, i8 %731, !dbg !111
  %740 = select i1 %612, i8 6, i8 %732, !dbg !111
  %741 = select i1 %613, i8 6, i8 %733, !dbg !111
  %742 = select i1 %638, i8 7, i8 %734, !dbg !112
  %743 = select i1 %639, i8 7, i8 %735, !dbg !112
  %744 = select i1 %640, i8 7, i8 %736, !dbg !112
  %745 = select i1 %641, i8 7, i8 %737, !dbg !112
  %746 = select i1 %642, i8 7, i8 %738, !dbg !112
  %747 = select i1 %643, i8 7, i8 %739, !dbg !112
  %748 = select i1 %644, i8 7, i8 %740, !dbg !112
  %749 = select i1 %645, i8 7, i8 %741, !dbg !112
  %750 = select i1 %670, i8 8, i8 %742, !dbg !113
  %751 = select i1 %671, i8 8, i8 %743, !dbg !113
  %752 = select i1 %672, i8 8, i8 %744, !dbg !113
  %753 = select i1 %673, i8 8, i8 %745, !dbg !113
  %754 = select i1 %674, i8 8, i8 %746, !dbg !113
  %755 = select i1 %675, i8 8, i8 %747, !dbg !113
  %756 = select i1 %676, i8 8, i8 %748, !dbg !113
  %757 = select i1 %677, i8 8, i8 %749, !dbg !113
  %758 = shl i32 %42, 7, !dbg !114
  %759 = shl i32 %43, 7, !dbg !114
  %760 = shl i32 %44, 7, !dbg !114
  %761 = add i32 %760, %.decomposed22, !dbg !115
  %762 = mul i32 %51, 1152, !dbg !116
  %763 = mul i32 %53, 1152, !dbg !116
  %764 = add i32 %762, %.decomposed20, !dbg !115
  %765 = add i32 %764, %758, !dbg !117
  %766 = add i32 %764, %759, !dbg !117
  %767 = add i32 %761, %763, !dbg !117
  %768 = sext i32 %765 to i64, !dbg !118
  %769 = getelementptr float, ptr addrspace(1) %1, i64 %768, !dbg !118
  %770 = sext i32 %766 to i64, !dbg !118
  %771 = getelementptr float, ptr addrspace(1) %1, i64 %770, !dbg !118
  %772 = shl i32 %8, 6, !dbg !119
  %773 = and i32 %772, 960, !dbg !119
  %774 = or disjoint i32 %773, %10, !dbg !119
  %775 = and i32 %12, 508, !dbg !119
  %776 = lshr exact i32 %773, 3, !dbg !119
  %777 = lshr exact i32 %773, 4, !dbg !119
  %778 = add nuw nsw i32 %777, %774, !dbg !119
  %779 = zext nneg i32 %778 to i64, !dbg !119
  %780 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %779, !dbg !119
  %781 = bitcast float %662 to i32, !dbg !119
  %782 = select i1 %686, i32 %430, i32 %781, !dbg !120
  %783 = insertelement <1 x i32> poison, i32 %782, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %780, <1 x i32> %783, i1 true) #2, !dbg !119
  %784 = or disjoint i32 %774, 8, !dbg !119
  %785 = add nuw nsw i32 %784, %777, !dbg !119
  %786 = zext nneg i32 %785 to i64, !dbg !119
  %787 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %786, !dbg !119
  %788 = bitcast float %663 to i32, !dbg !119
  %789 = select i1 %687, i32 %432, i32 %788, !dbg !120
  %790 = insertelement <1 x i32> poison, i32 %789, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %787, <1 x i32> %790, i1 true) #2, !dbg !119
  %791 = or disjoint i32 %774, 16, !dbg !119
  %792 = add nuw nsw i32 %791, %777, !dbg !119
  %793 = zext nneg i32 %792 to i64, !dbg !119
  %794 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %793, !dbg !119
  %795 = bitcast float %664 to i32, !dbg !119
  %796 = select i1 %688, i32 %434, i32 %795, !dbg !120
  %797 = insertelement <1 x i32> poison, i32 %796, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %794, <1 x i32> %797, i1 true) #2, !dbg !119
  %798 = or disjoint i32 %774, 24, !dbg !119
  %799 = add nuw nsw i32 %798, %777, !dbg !119
  %800 = zext nneg i32 %799 to i64, !dbg !119
  %801 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %800, !dbg !119
  %802 = bitcast float %665 to i32, !dbg !119
  %803 = select i1 %689, i32 %436, i32 %802, !dbg !120
  %804 = insertelement <1 x i32> poison, i32 %803, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %801, <1 x i32> %804, i1 true) #2, !dbg !119
  %805 = or disjoint i32 %774, 32, !dbg !119
  %806 = add nuw nsw i32 %805, %777, !dbg !119
  %807 = zext nneg i32 %806 to i64, !dbg !119
  %808 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %807, !dbg !119
  %809 = bitcast float %666 to i32, !dbg !119
  %810 = select i1 %690, i32 %438, i32 %809, !dbg !120
  %811 = insertelement <1 x i32> poison, i32 %810, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %808, <1 x i32> %811, i1 true) #2, !dbg !119
  %812 = or disjoint i32 %774, 40, !dbg !119
  %813 = add nuw nsw i32 %812, %777, !dbg !119
  %814 = zext nneg i32 %813 to i64, !dbg !119
  %815 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %814, !dbg !119
  %816 = bitcast float %667 to i32, !dbg !119
  %817 = select i1 %691, i32 %440, i32 %816, !dbg !120
  %818 = insertelement <1 x i32> poison, i32 %817, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %815, <1 x i32> %818, i1 true) #2, !dbg !119
  %819 = or disjoint i32 %774, 48, !dbg !119
  %820 = add nuw nsw i32 %819, %777, !dbg !119
  %821 = zext nneg i32 %820 to i64, !dbg !119
  %822 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %821, !dbg !119
  %823 = bitcast float %668 to i32, !dbg !119
  %824 = select i1 %692, i32 %442, i32 %823, !dbg !120
  %825 = insertelement <1 x i32> poison, i32 %824, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %822, <1 x i32> %825, i1 true) #2, !dbg !119
  %826 = or disjoint i32 %774, 56, !dbg !119
  %827 = add nuw nsw i32 %826, %777, !dbg !119
  %828 = zext nneg i32 %827 to i64, !dbg !119
  %829 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %828, !dbg !119
  %830 = bitcast float %669 to i32, !dbg !119
  %831 = select i1 %693, i32 %444, i32 %830, !dbg !120
  %832 = insertelement <1 x i32> poison, i32 %831, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %829, <1 x i32> %832, i1 true) #2, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %833 = lshr i32 %12, 4, !dbg !119
  %834 = and i32 %833, 28, !dbg !119
  %835 = add nuw nsw i32 %834, %775, !dbg !119
  %836 = zext nneg i32 %835 to i64, !dbg !119
  %837 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %836, !dbg !119
  %838 = or disjoint i32 %775, 512, !dbg !119
  %839 = lshr i32 %838, 4, !dbg !119
  %840 = and i32 %839, 60, !dbg !119
  %841 = add nuw nsw i32 %840, %838, !dbg !119
  %842 = zext nneg i32 %841 to i64, !dbg !119
  %843 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %842, !dbg !119
  %844 = load <4 x i32>, ptr addrspace(3) %843, align 16, !dbg !119
  %.extract = load i32, ptr addrspace(3) %837, align 16, !dbg !119
  %845 = getelementptr inbounds i8, ptr addrspace(3) %837, i64 4, !dbg !119
  %.extract12 = load i32, ptr addrspace(3) %845, align 4, !dbg !119
  %846 = getelementptr inbounds i8, ptr addrspace(3) %837, i64 8, !dbg !119
  %.extract13 = load i32, ptr addrspace(3) %846, align 8, !dbg !119
  %847 = getelementptr inbounds i8, ptr addrspace(3) %837, i64 12, !dbg !119
  %.extract14 = load i32, ptr addrspace(3) %847, align 4, !dbg !119
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %769, i1 %98) #2, !dbg !119
  %.extract15 = extractelement <4 x i32> %844, i64 0, !dbg !119
  %.extract16 = extractelement <4 x i32> %844, i64 1, !dbg !119
  %.extract17 = extractelement <4 x i32> %844, i64 2, !dbg !119
  %.extract18 = extractelement <4 x i32> %844, i64 3, !dbg !119
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %771, i1 %99) #2, !dbg !119
  %848 = sext i32 %767 to i64, !dbg !121
  %849 = getelementptr i8, ptr addrspace(1) %2, i64 %848, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %850 = and i32 %14, 1016, !dbg !122
  %851 = add nuw nsw i32 %776, %774, !dbg !122
  %852 = zext nneg i32 %851 to i64, !dbg !122
  %853 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %852, !dbg !122
  %854 = insertelement <1 x i8> poison, i8 %750, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %853, <1 x i8> %854, i1 true) #2, !dbg !122
  %855 = add nuw nsw i32 %784, %776, !dbg !122
  %856 = zext nneg i32 %855 to i64, !dbg !122
  %857 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %856, !dbg !122
  %858 = insertelement <1 x i8> poison, i8 %751, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %857, <1 x i8> %858, i1 true) #2, !dbg !122
  %859 = add nuw nsw i32 %791, %776, !dbg !122
  %860 = zext nneg i32 %859 to i64, !dbg !122
  %861 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %860, !dbg !122
  %862 = insertelement <1 x i8> poison, i8 %752, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %861, <1 x i8> %862, i1 true) #2, !dbg !122
  %863 = add nuw nsw i32 %798, %776, !dbg !122
  %864 = zext nneg i32 %863 to i64, !dbg !122
  %865 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %864, !dbg !122
  %866 = insertelement <1 x i8> poison, i8 %753, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %865, <1 x i8> %866, i1 true) #2, !dbg !122
  %867 = add nuw nsw i32 %805, %776, !dbg !122
  %868 = zext nneg i32 %867 to i64, !dbg !122
  %869 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %868, !dbg !122
  %870 = insertelement <1 x i8> poison, i8 %754, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %869, <1 x i8> %870, i1 true) #2, !dbg !122
  %871 = add nuw nsw i32 %812, %776, !dbg !122
  %872 = zext nneg i32 %871 to i64, !dbg !122
  %873 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %872, !dbg !122
  %874 = insertelement <1 x i8> poison, i8 %755, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %873, <1 x i8> %874, i1 true) #2, !dbg !122
  %875 = add nuw nsw i32 %819, %776, !dbg !122
  %876 = zext nneg i32 %875 to i64, !dbg !122
  %877 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %876, !dbg !122
  %878 = insertelement <1 x i8> poison, i8 %756, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %877, <1 x i8> %878, i1 true) #2, !dbg !122
  %879 = add nuw nsw i32 %826, %776, !dbg !122
  %880 = zext nneg i32 %879 to i64, !dbg !122
  %881 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %880, !dbg !122
  %882 = insertelement <1 x i8> poison, i8 %757, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %881, <1 x i8> %882, i1 true) #2, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %883 = and i32 %8, 120, !dbg !122
  %884 = add nuw nsw i32 %850, %883, !dbg !122
  %885 = zext nneg i32 %884 to i64, !dbg !122
  %886 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %885, !dbg !122
  %887 = load i32, ptr addrspace(3) %886, align 8, !dbg !122
  %888 = getelementptr inbounds i8, ptr addrspace(3) %886, i64 4, !dbg !122
  %889 = load i32, ptr addrspace(3) %888, align 4, !dbg !122
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %887, i32 %889, ptr addrspace(1) %849, i1 %100) #2, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2zbxswgqlpbdllg5xo4g2wvfiqkpdq6423wrdjt2kb7ivlpkoqn.py", directory: "inductor_cache/2z")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 48, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 61, scope: !7)
!31 = !DILocation(line: 34, column: 53, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 57, scope: !7)
!37 = !DILocation(line: 36, column: 41, scope: !7)
!38 = !DILocation(line: 36, column: 49, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 57, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 49, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 57, scope: !7)
!45 = !DILocation(line: 38, column: 41, scope: !7)
!46 = !DILocation(line: 38, column: 49, scope: !7)
!47 = !DILocation(line: 38, column: 30, scope: !7)
!48 = !DILocation(line: 38, column: 57, scope: !7)
!49 = !DILocation(line: 39, column: 41, scope: !7)
!50 = !DILocation(line: 39, column: 49, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 57, scope: !7)
!53 = !DILocation(line: 40, column: 43, scope: !7)
!54 = !DILocation(line: 40, column: 51, scope: !7)
!55 = !DILocation(line: 40, column: 31, scope: !7)
!56 = !DILocation(line: 40, column: 59, scope: !7)
!57 = !DILocation(line: 41, column: 43, scope: !7)
!58 = !DILocation(line: 41, column: 51, scope: !7)
!59 = !DILocation(line: 41, column: 31, scope: !7)
!60 = !DILocation(line: 41, column: 59, scope: !7)
!61 = !DILocation(line: 42, column: 43, scope: !7)
!62 = !DILocation(line: 42, column: 51, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 59, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 43, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !73)
!73 = !DILocation(line: 44, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !78)
!78 = !DILocation(line: 45, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !83)
!83 = !DILocation(line: 46, column: 40, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !88)
!88 = !DILocation(line: 47, column: 41, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !93)
!93 = !DILocation(line: 48, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !98)
!98 = !DILocation(line: 49, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !103)
!103 = !DILocation(line: 50, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !103)
!106 = !DILocation(line: 54, column: 35, scope: !7)
!107 = !DILocation(line: 57, column: 35, scope: !7)
!108 = !DILocation(line: 60, column: 35, scope: !7)
!109 = !DILocation(line: 63, column: 35, scope: !7)
!110 = !DILocation(line: 66, column: 35, scope: !7)
!111 = !DILocation(line: 69, column: 35, scope: !7)
!112 = !DILocation(line: 72, column: 35, scope: !7)
!113 = !DILocation(line: 75, column: 35, scope: !7)
!114 = !DILocation(line: 76, column: 34, scope: !7)
!115 = !DILocation(line: 76, column: 30, scope: !7)
!116 = !DILocation(line: 76, column: 44, scope: !7)
!117 = !DILocation(line: 76, column: 39, scope: !7)
!118 = !DILocation(line: 76, column: 25, scope: !7)
!119 = !DILocation(line: 76, column: 56, scope: !7)
!120 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !103)
!121 = !DILocation(line: 77, column: 25, scope: !7)
!122 = !DILocation(line: 77, column: 56, scope: !7)
!123 = !DILocation(line: 77, column: 4, scope: !7)
