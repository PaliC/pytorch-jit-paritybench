; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 2048, !dbg !14
  %18 = sdiv i32 %16, 4, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %19 = sdiv i32 %.frozen, 512, !dbg !16
  %20 = mul i32 %19, 512, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = shl nsw i32 %19, 7, !dbg !18
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !21
  %26 = insertelement <2 x i32> %25, i32 %18, i64 1, !dbg !21
  %27 = srem <2 x i32> %26, <i32 4, i32 128>, !dbg !21
  %28 = extractelement <2 x i32> %27, i64 1, !dbg !22
  %29 = icmp slt i32 %28, 32, !dbg !23
  %30 = and i1 %17, %29, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #1, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = bitcast i32 %32 to float, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = sext i32 %28 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %30, i32 0, i1 %30) #1, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %30, i32 0, i1 %30) #1, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = fadd float %34, %39, !dbg !28
  %43 = fadd float %35, %41, !dbg !28
  %44 = and i32 %28, -32, !dbg !29
  %45 = icmp eq i32 %44, 32, !dbg !29
  %46 = insertelement <2 x i32> <i32 poison, i32 -32>, i32 %21, i64 0, !dbg !30
  %47 = add nsw <2 x i32> %46, %27, !dbg !30
  %48 = extractelement <2 x i32> %47, i64 1, !dbg !31
  %49 = shl nsw i32 %48, 2, !dbg !31
  %50 = extractelement <2 x i32> %47, i64 0, !dbg !32
  %51 = add nsw i32 %50, %49, !dbg !33
  %52 = sext i32 %51 to i64, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !34
  %54 = and i1 %17, %45, !dbg !35
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !36
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !36
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !36
  %58 = bitcast i32 %56 to float, !dbg !36
  %59 = bitcast i32 %57 to float, !dbg !36
  %60 = sext i32 %48 to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %54, i32 0, i1 %54) #1, !dbg !38
  %63 = bitcast i32 %62 to float, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %54, i32 0, i1 %54) #1, !dbg !38
  %65 = bitcast i32 %64 to float, !dbg !38
  %66 = fadd float %58, %63, !dbg !39
  %67 = fadd float %59, %65, !dbg !39
  %68 = icmp eq i32 %44, 64, !dbg !40
  %69 = add nsw i32 %28, -64, !dbg !41
  %70 = shl nsw i32 %69, 2, !dbg !42
  %71 = add nsw i32 %50, %70, !dbg !43
  %72 = sext i32 %71 to i64, !dbg !44
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !44
  %74 = and i1 %17, %68, !dbg !45
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !46
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !46
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !46
  %78 = bitcast i32 %76 to float, !dbg !46
  %79 = bitcast i32 %77 to float, !dbg !46
  %80 = sext i32 %69 to i64, !dbg !47
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !47
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %74, i32 0, i1 %74) #1, !dbg !48
  %83 = bitcast i32 %82 to float, !dbg !48
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %74, i32 0, i1 %74) #1, !dbg !48
  %85 = bitcast i32 %84 to float, !dbg !48
  %86 = fadd float %78, %83, !dbg !49
  %87 = fadd float %79, %85, !dbg !49
  %88 = icmp sgt i32 %28, 95, !dbg !22
  %89 = add nsw i32 %28, -96, !dbg !50
  %90 = shl nsw i32 %89, 2, !dbg !51
  %91 = add nsw i32 %50, %90, !dbg !32
  %92 = sext i32 %91 to i64, !dbg !52
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !52
  %94 = and i1 %17, %88, !dbg !53
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !54
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !54
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !54
  %98 = bitcast i32 %96 to float, !dbg !54
  %99 = bitcast i32 %97 to float, !dbg !54
  %100 = sext i32 %89 to i64, !dbg !55
  %101 = getelementptr float, ptr addrspace(1) %7, i64 %100, !dbg !55
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %94, i32 0, i1 %94) #1, !dbg !56
  %103 = bitcast i32 %102 to float, !dbg !56
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %94, i32 0, i1 %94) #1, !dbg !56
  %105 = bitcast i32 %104 to float, !dbg !56
  %106 = fadd float %98, %103, !dbg !57
  %107 = fadd float %99, %105, !dbg !57
  %108 = select i1 %88, float %106, float 0.000000e+00, !dbg !58
  %109 = select i1 %88, float %107, float 0.000000e+00, !dbg !58
  %110 = select i1 %68, float %86, float %108, !dbg !59
  %111 = select i1 %68, float %87, float %109, !dbg !59
  %112 = select i1 %45, float %66, float %110, !dbg !59
  %113 = select i1 %45, float %67, float %111, !dbg !59
  %114 = select i1 %29, float %42, float %112, !dbg !59
  %115 = select i1 %29, float %43, float %113, !dbg !59
  %116 = sext i32 %16 to i64, !dbg !60
  %117 = getelementptr float, ptr addrspace(1) %8, i64 %116, !dbg !60
  %118 = bitcast float %114 to i32, !dbg !61
  %119 = bitcast float %115 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 %17) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz2sgulrx2mutifjo2ggspkrqzdx2liyisbolg76oww37gbnk6jq.py", directory: "inductor_cache/z2")
!4 = !{ptr @triton_poi_fused_cat_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_9", linkageName: "triton_poi_fused_cat_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 56, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 42, column: 36, scope: !7)
!31 = !DILocation(line: 42, column: 39, scope: !7)
!32 = !DILocation(line: 59, column: 53, scope: !7)
!33 = !DILocation(line: 42, column: 53, scope: !7)
!34 = !DILocation(line: 42, column: 31, scope: !7)
!35 = !DILocation(line: 42, column: 70, scope: !7)
!36 = !DILocation(line: 42, column: 62, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 44, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 47, scope: !7)
!42 = !DILocation(line: 51, column: 39, scope: !7)
!43 = !DILocation(line: 51, column: 53, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 70, scope: !7)
!46 = !DILocation(line: 51, column: 62, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 47, scope: !7)
!51 = !DILocation(line: 59, column: 39, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 70, scope: !7)
!54 = !DILocation(line: 59, column: 62, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 44, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 35, scope: !7)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 67, column: 25, scope: !7)
!61 = !DILocation(line: 67, column: 37, scope: !7)
!62 = !DILocation(line: 67, column: 4, scope: !7)
