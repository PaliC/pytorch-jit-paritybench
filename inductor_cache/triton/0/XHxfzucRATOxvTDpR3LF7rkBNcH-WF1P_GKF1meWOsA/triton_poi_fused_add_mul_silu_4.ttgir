#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_mul_silu_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<176> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<160> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<144> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<192> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<16> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_8 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_7 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %4, %cst_7 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc10)
    %10 = arith.muli %6, %cst_5 : tensor<128xi32, #blocked> loc(#loc11)
    %11 = arith.addi %7, %10 : tensor<128xi32, #blocked> loc(#loc12)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %13 = tt.addptr %12, %11 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc13)
    %14 = tt.load %13, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %15 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %16 = tt.addptr %15, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc15)
    %17 = tt.load %16, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = arith.addi %8, %cst_4 : tensor<128xi32, #blocked> loc(#loc17)
    %19 = arith.addi %18, %10 : tensor<128xi32, #blocked> loc(#loc18)
    %20 = tt.addptr %12, %19 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc19)
    %21 = tt.load %20, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc21)
    %23 = tt.addptr %22, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc21)
    %24 = tt.load %23, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc22)
    %25 = arith.addi %8, %cst_3 : tensor<128xi32, #blocked> loc(#loc23)
    %26 = arith.addi %25, %10 : tensor<128xi32, #blocked> loc(#loc24)
    %27 = tt.addptr %12, %26 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc25)
    %28 = tt.load %27, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc26)
    %29 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc27)
    %30 = tt.addptr %29, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc27)
    %31 = tt.load %30, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc28)
    %32 = arith.addi %8, %cst_2 : tensor<128xi32, #blocked> loc(#loc29)
    %33 = arith.addi %32, %10 : tensor<128xi32, #blocked> loc(#loc30)
    %34 = tt.addptr %12, %33 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc31)
    %35 = tt.load %34, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc32)
    %36 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc33)
    %37 = tt.addptr %36, %9 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc33)
    %38 = tt.load %37, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc34)
    %39 = arith.addi %8, %cst_1 : tensor<128xi32, #blocked> loc(#loc35)
    %40 = arith.addi %39, %10 : tensor<128xi32, #blocked> loc(#loc36)
    %41 = tt.addptr %12, %40 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc37)
    %42 = tt.load %41, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc38)
    %43 = arith.mulf %17, %21 : tensor<128xf32, #blocked> loc(#loc39)
    %44 = arith.addf %43, %cst_0 : tensor<128xf32, #blocked> loc(#loc40)
    %45 = arith.mulf %24, %28 : tensor<128xf32, #blocked> loc(#loc41)
    %46 = arith.addf %44, %45 : tensor<128xf32, #blocked> loc(#loc42)
    %47 = arith.subf %cst_0, %31 : tensor<128xf32, #blocked> loc(#loc59)
    %48 = math.exp %47 : tensor<128xf32, #blocked> loc(#loc60)
    %49 = arith.addf %48, %cst : tensor<128xf32, #blocked> loc(#loc61)
    %50 = arith.divf %cst, %49 : tensor<128xf32, #blocked> loc(#loc62)
    %51 = arith.mulf %31, %50 : tensor<128xf32, #blocked> loc(#loc48)
    %52 = arith.mulf %51, %35 : tensor<128xf32, #blocked> loc(#loc49)
    %53 = arith.addf %46, %52 : tensor<128xf32, #blocked> loc(#loc50)
    %54 = arith.subf %cst_0, %38 : tensor<128xf32, #blocked> loc(#loc63)
    %55 = math.exp %54 : tensor<128xf32, #blocked> loc(#loc64)
    %56 = arith.addf %55, %cst : tensor<128xf32, #blocked> loc(#loc65)
    %57 = arith.divf %cst, %56 : tensor<128xf32, #blocked> loc(#loc66)
    %58 = arith.mulf %38, %57 : tensor<128xf32, #blocked> loc(#loc52)
    %59 = arith.mulf %58, %42 : tensor<128xf32, #blocked> loc(#loc53)
    %60 = arith.addf %53, %59 : tensor<128xf32, #blocked> loc(#loc54)
    %61 = arith.mulf %14, %60 : tensor<128xf32, #blocked> loc(#loc55)
    %62 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc56)
    %63 = tt.addptr %62, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc56)
    tt.store %63, %61, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":21:28)
#loc3 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":21:33)
#loc4 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":22:36)
#loc5 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":22:23)
#loc6 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":23:21)
#loc7 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":24:19)
#loc8 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":25:19)
#loc9 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":27:19)
#loc10 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":28:19)
#loc11 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":29:39)
#loc12 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":29:35)
#loc13 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":29:30)
#loc14 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":29:44)
#loc15 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":30:30)
#loc16 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":30:35)
#loc17 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":31:36)
#loc18 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":31:41)
#loc19 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":31:30)
#loc20 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":31:50)
#loc21 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":32:30)
#loc22 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":32:35)
#loc23 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":33:36)
#loc24 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":33:41)
#loc25 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":33:30)
#loc26 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":33:50)
#loc27 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":34:31)
#loc28 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":34:36)
#loc29 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":35:37)
#loc30 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":35:42)
#loc31 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":35:31)
#loc32 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":35:51)
#loc33 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":36:31)
#loc34 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":36:36)
#loc35 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":37:37)
#loc36 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":37:42)
#loc37 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":37:31)
#loc38 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":37:51)
#loc39 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":38:18)
#loc40 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":40:18)
#loc41 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":41:18)
#loc42 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":42:18)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc44 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":43:23)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc48 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":44:20)
#loc49 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":45:20)
#loc50 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":46:19)
#loc51 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":47:23)
#loc52 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":48:20)
#loc53 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":49:20)
#loc54 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":50:20)
#loc55 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":51:19)
#loc56 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":52:25)
#loc57 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":52:37)
#loc58 = loc("inductor_cache/5l/c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py":52:4)
#loc59 = loc(callsite(#loc43 at #loc44))
#loc60 = loc(callsite(#loc45 at #loc44))
#loc61 = loc(callsite(#loc46 at #loc44))
#loc62 = loc(callsite(#loc47 at #loc44))
#loc63 = loc(callsite(#loc43 at #loc51))
#loc64 = loc(callsite(#loc45 at #loc51))
#loc65 = loc(callsite(#loc46 at #loc51))
#loc66 = loc(callsite(#loc47 at #loc51))
