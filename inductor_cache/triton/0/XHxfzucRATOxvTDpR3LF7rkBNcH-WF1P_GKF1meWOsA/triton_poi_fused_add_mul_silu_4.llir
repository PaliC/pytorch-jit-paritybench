; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_silu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 64, !dbg !15
  %15 = mul i32 %14, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen1 = freeze i32 %12, !dbg !17
  %16 = sdiv i32 %.frozen1, 16, !dbg !17
  %17 = mul i32 %16, 16, !dbg !18
  %.decomposed2 = sub i32 %.frozen1, %17, !dbg !18
  %18 = mul i32 %14, 192, !dbg !19
  %19 = add i32 %18, %.decomposed, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #1, !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = sext i32 %12 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %13) #1, !dbg !24
  %27 = add i32 %18, %.decomposed2, !dbg !25
  %28 = add i32 %27, 128, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #1, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !29
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #1, !dbg !30
  %34 = add i32 %27, 144, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !32
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !33
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !34
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %13) #1, !dbg !35
  %40 = bitcast i32 %39 to float, !dbg !35
  %41 = add i32 %27, 160, !dbg !36
  %42 = sext i32 %41 to i64, !dbg !37
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !37
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !38
  %45 = bitcast i32 %44 to float, !dbg !38
  %46 = sext i32 %16 to i64, !dbg !39
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !39
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %13) #1, !dbg !40
  %49 = bitcast i32 %48 to float, !dbg !40
  %50 = add i32 %27, 176, !dbg !41
  %51 = sext i32 %50 to i64, !dbg !42
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !42
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %13) #1, !dbg !43
  %54 = bitcast i32 %53 to float, !dbg !43
  %55 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !24
  %56 = insertelement <2 x i32> %55, i32 %33, i64 1, !dbg !24
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !24
  %58 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !28
  %59 = insertelement <2 x i32> %58, i32 %37, i64 1, !dbg !28
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !28
  %61 = fmul <2 x float> %57, %60, !dbg !44
  %62 = extractelement <2 x float> %61, i64 0, !dbg !45
  %63 = fadd float %62, 0.000000e+00, !dbg !45
  %64 = extractelement <2 x float> %61, i64 1, !dbg !46
  %65 = fadd float %63, %64, !dbg !46
  %66 = fsub float 0.000000e+00, %40, !dbg !47
  %67 = fmul float %66, 0x3FF7154760000000, !dbg !51
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #1, !dbg !51
  %69 = fadd float %68, 1.000000e+00, !dbg !52
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %69) #1, !dbg !53
  %71 = fmul float %70, %40, !dbg !54
  %72 = fmul float %71, %45, !dbg !55
  %73 = fadd float %65, %72, !dbg !56
  %74 = fsub float 0.000000e+00, %49, !dbg !57
  %75 = fmul float %74, 0x3FF7154760000000, !dbg !59
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !59
  %77 = fadd float %76, 1.000000e+00, !dbg !60
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %77) #1, !dbg !61
  %79 = fmul float %78, %49, !dbg !62
  %80 = fmul float %79, %54, !dbg !63
  %81 = fadd float %73, %80, !dbg !64
  %82 = fmul float %81, %23, !dbg !65
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !66
  %84 = bitcast float %82 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %84, ptr addrspace(1) %83, i1 %13) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py", directory: "inductor_cache/5l")
!4 = !{ptr @triton_poi_fused_add_mul_silu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_silu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_silu_4", linkageName: "triton_poi_fused_add_mul_silu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 44, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 41, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 50, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 41, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 50, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 36, scope: !7)
!36 = !DILocation(line: 35, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 51, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 36, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 51, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = !DILocation(line: 43, column: 23, scope: !7)
!51 = !DILocation(line: 47, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 47, column: 20, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 47, column: 16, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 44, column: 20, scope: !7)
!55 = !DILocation(line: 45, column: 20, scope: !7)
!56 = !DILocation(line: 46, column: 19, scope: !7)
!57 = !DILocation(line: 47, column: 30, scope: !48, inlinedAt: !58)
!58 = !DILocation(line: 47, column: 23, scope: !7)
!59 = !DILocation(line: 47, column: 29, scope: !48, inlinedAt: !58)
!60 = !DILocation(line: 47, column: 20, scope: !48, inlinedAt: !58)
!61 = !DILocation(line: 47, column: 16, scope: !48, inlinedAt: !58)
!62 = !DILocation(line: 48, column: 20, scope: !7)
!63 = !DILocation(line: 49, column: 20, scope: !7)
!64 = !DILocation(line: 50, column: 20, scope: !7)
!65 = !DILocation(line: 51, column: 19, scope: !7)
!66 = !DILocation(line: 52, column: 25, scope: !7)
!67 = !DILocation(line: 52, column: 37, scope: !7)
!68 = !DILocation(line: 52, column: 4, scope: !7)
