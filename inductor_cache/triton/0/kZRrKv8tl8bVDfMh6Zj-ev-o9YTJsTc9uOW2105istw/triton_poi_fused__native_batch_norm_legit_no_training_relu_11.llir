; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 1, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = and i32 %10, 1, !dbg !12
  %14 = shl nuw nsw i32 %13, 1, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 2, !dbg !16
  %19 = or disjoint i32 %18, %14, !dbg !17
  %20 = icmp slt i32 %19, 4, !dbg !18
  %21 = srem i32 %15, 64, !dbg !19
  %22 = shl i32 %15, 2, !dbg !20
  %23 = add i32 %19, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = and i1 %16, %20, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %26) #4, !dbg !24
  %28 = sext i32 %21 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !25
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #4, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #4, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #4, !dbg !28
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #4, !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #4, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #4, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #4, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #4, !dbg !32
  %42 = fadd float %35, 0x3EE4F8B580000000, !dbg !33
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i5 = icmp eq i32 %45, 0, !dbg !34
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i8 = icmp eq i32 %46, 0, !dbg !34
  br i1 %.not.i5, label %52, label %47, !dbg !34

47:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %50, label %48, !dbg !34

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit9, !dbg !34

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit9, !dbg !34

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %55, label %53, !dbg !34

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit9, !dbg !34

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #4, !dbg !34
  br label %__nv_sqrtf.exit9, !dbg !34

__nv_sqrtf.exit9:                                 ; preds = %48, %50, %53, %55
  %.0.i7 = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !34
  %57 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = bitcast i32 %31 to float, !dbg !26
  %60 = fsub float %58, %59, !dbg !35
  %61 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %62 = bitcast i32 %61 to float, !dbg !24
  %63 = fsub float %62, %59, !dbg !35
  %64 = bitcast i32 %41 to float, !dbg !32
  %65 = bitcast i32 %38 to float, !dbg !30
  %.lobit12 = lshr i32 %10, 5, !dbg !36
  %66 = and i32 %.lobit12, 3, !dbg !36
  %67 = or disjoint i32 %18, %66, !dbg !17
  %68 = icmp slt i32 %67, 4, !dbg !18
  %69 = shl i32 %10, 1, !dbg !12
  %70 = and i32 %69, 62, !dbg !12
  %71 = or disjoint i32 %9, %70, !dbg !13
  %72 = icmp slt i32 %71, 256, !dbg !14
  %73 = and i1 %72, %68, !dbg !23
  %.frozen = freeze i32 %71, !dbg !37
  %74 = sdiv i32 %.frozen, 64, !dbg !37
  %75 = mul i32 %74, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %75, !dbg !19
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !38
  %77 = fmul float %63, %76, !dbg !39
  %78 = fmul float %60, %76, !dbg !39
  %79 = fmul float %77, %65, !dbg !40
  %80 = fmul float %78, %65, !dbg !40
  %81 = fadd float %79, %64, !dbg !41
  %82 = fadd float %80, %64, !dbg !41
  %83 = fcmp olt float %81, 0.000000e+00, !dbg !42
  %84 = fcmp olt float %82, 0.000000e+00, !dbg !42
  %85 = select i1 %83, float 0.000000e+00, float %81, !dbg !46
  %86 = select i1 %84, float 0.000000e+00, float %82, !dbg !46
  %87 = shl i32 %67, 6, !dbg !47
  %88 = add i32 %87, %.decomposed, !dbg !48
  %89 = shl i32 %74, 8, !dbg !49
  %90 = add i32 %88, %89, !dbg !50
  %91 = sext i32 %90 to i64, !dbg !51
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %91, !dbg !51
  %93 = shl nuw nsw i32 %13, 7, !dbg !52
  %94 = or disjoint i32 %93, %12, !dbg !52
  %95 = and i32 %69, 254, !dbg !52
  %.idx = shl nuw nsw i32 %13, 4, !dbg !52
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !52
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !52
  %98 = bitcast float %85 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !52
  %99 = or disjoint i32 %94, 64, !dbg !52
  %100 = lshr i32 %99, 5, !dbg !52
  %101 = and i32 %100, 6, !dbg !52
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !52
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99, !dbg !52
  %104 = bitcast float %86 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %105 = lshr i32 %69, 5, !dbg !52
  %106 = and i32 %105, 6, !dbg !52
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !52
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %95, !dbg !52
  %.extract = load i32, ptr addrspace(3) %108, align 8, !dbg !52
  %109 = getelementptr inbounds i8, ptr addrspace(3) %108, i32 4, !dbg !52
  %.extract4 = load i32, ptr addrspace(3) %109, align 4, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %92, i1 %73) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbqdwtkl7zhy2vnvmcnh77lqcu4qxzvoxmfv54n4qmjcczobkhd5.py", directory: "inductor_cache/bq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 42, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 26, column: 44, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 50, column: 33, scope: !7)
!48 = !DILocation(line: 50, column: 30, scope: !7)
!49 = !DILocation(line: 50, column: 42, scope: !7)
!50 = !DILocation(line: 50, column: 38, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 54, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
