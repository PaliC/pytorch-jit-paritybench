#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0)
#loc1 = loc(unknown)
#loc29 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":57:59)
#loc42 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cat_pow_sum_32(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0), %arg5: i32 loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<256> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<-256> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc3)
    %2 = arith.extsi %1 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked> loc(#loc4)
    %3 = arith.cmpi slt, %2, %cst_1 : tensor<512xi64, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c256_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.addi %5, %1 : tensor<512xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %3, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %1 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %3, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<512xf32, #blocked> loc(#loc11)
    %14 = arith.cmpf ogt, %cst, %13 : tensor<512xf32, #blocked> loc(#loc36)
    %15 = arith.select %14, %cst, %13 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc37)
    %16 = arith.cmpi sge, %2, %cst_1 : tensor<512xi64, #blocked> loc(#loc15)
    %17 = arith.addi %1, %cst_2 : tensor<512xi32, #blocked> loc(#loc16)
    %18 = arith.addi %5, %17 : tensor<512xi32, #blocked> loc(#loc17)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc18)
    %20 = tt.addptr %19, %18 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc18)
    %21 = tt.load %20, %16, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc19)
    %22 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc20)
    %23 = tt.addptr %22, %17 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc20)
    %24 = tt.load %23, %16, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc21)
    %25 = arith.addf %21, %24 : tensor<512xf32, #blocked> loc(#loc22)
    %26 = arith.cmpf ogt, %cst, %25 : tensor<512xf32, #blocked> loc(#loc38)
    %27 = arith.select %26, %cst, %25 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc39)
    %28 = arith.select %16, %27, %cst : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc24)
    %29 = arith.select %3, %15, %28 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc40)
    %30 = arith.mulf %29, %29 : tensor<512xf32, #blocked> loc(#loc27)
    %31 = "tt.reduce"(%30) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc29)), %arg8: f32 loc(callsite(#loc1 at #loc29))):
      %36 = arith.addf %arg7, %arg8 : f32 loc(#loc45)
      tt.reduce.return %36 : f32 loc(#loc41)
    }) : (tensor<512xf32, #blocked>) -> f32 loc(#loc41)
    %32 = arith.addf %31, %cst_0 : f32 loc(#loc44)
    %33 = tt.splat %32 : f32 -> tensor<1xf32, #blocked1> loc(#loc44)
    %34 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc33)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    tt.store %35, %33 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":24:28)
#loc3 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":27:26)
#loc4 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":36:18)
#loc5 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":37:34)
#loc6 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":37:40)
#loc7 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":37:30)
#loc8 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":37:46)
#loc9 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":38:30)
#loc10 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":38:62)
#loc11 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":39:18)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc13 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":41:40)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc15 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":44:20)
#loc16 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":47:50)
#loc17 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":47:41)
#loc18 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":47:31)
#loc19 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":47:56)
#loc20 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":48:31)
#loc21 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":48:72)
#loc22 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":49:20)
#loc23 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":51:42)
#loc24 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":53:35)
#loc25 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":54:34)
#loc26 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":43:33)
#loc27 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":55:20)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc32 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":57:45)
#loc33 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":58:25)
#loc34 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":58:37)
#loc35 = loc("inductor_cache/qv/cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py":58:4)
#loc36 = loc(callsite(#loc12 at #loc13))
#loc37 = loc(callsite(#loc14 at #loc13))
#loc38 = loc(callsite(#loc12 at #loc23))
#loc39 = loc(callsite(#loc14 at #loc23))
#loc40 = loc(fused[#loc25, #loc26])
#loc41 = loc(callsite(#loc28 at #loc29))
#loc43 = loc(callsite(#loc30 at #loc28))
#loc44 = loc(callsite(#loc31 at #loc32))
#loc45 = loc(callsite(#loc43 at #loc29))
