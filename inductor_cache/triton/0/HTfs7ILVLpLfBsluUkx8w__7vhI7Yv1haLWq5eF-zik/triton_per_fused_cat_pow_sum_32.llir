; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_cat_pow_sum_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 508, !dbg !11
  %14 = icmp samesign ult i32 %13, 256, !dbg !12
  %15 = shl i32 %8, 8, !dbg !13
  %16 = add i32 %15, %13, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = zext nneg i32 %13 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %31 = icmp samesign ugt i32 %13, 255, !dbg !19
  %32 = add nsw i32 %13, -256, !dbg !20
  %33 = add i32 %15, %32, !dbg !21
  %34 = sext i32 %33 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = sext i32 %32 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !16
  %49 = insertelement <2 x i32> %48, i32 %21, i64 1, !dbg !16
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !16
  %51 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !18
  %52 = insertelement <2 x i32> %51, i32 %28, i64 1, !dbg !18
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !18
  %54 = fadd <2 x float> %50, %53, !dbg !26
  %55 = fcmp olt <2 x float> %54, zeroinitializer, !dbg !27
  %56 = select <2 x i1> %55, <2 x float> zeroinitializer, <2 x float> %54, !dbg !31
  %57 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !23
  %58 = insertelement <2 x i32> %57, i32 %38, i64 1, !dbg !23
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !23
  %60 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !25
  %61 = insertelement <2 x i32> %60, i32 %45, i64 1, !dbg !25
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !25
  %63 = fadd <2 x float> %59, %62, !dbg !32
  %64 = fcmp olt <2 x float> %63, zeroinitializer, !dbg !33
  %65 = select <2 x i1> %64, <2 x float> zeroinitializer, <2 x float> %63, !dbg !35
  %66 = insertelement <2 x i1> poison, i1 %14, i64 0, !dbg !36
  %67 = shufflevector <2 x i1> %66, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !36
  %68 = select <2 x i1> %67, <2 x float> %56, <2 x float> %65, !dbg !36
  %69 = fmul <2 x float> %68, %68, !dbg !37
  %70 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !16
  %71 = insertelement <2 x i32> %70, i32 %22, i64 1, !dbg !16
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !16
  %73 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !18
  %74 = insertelement <2 x i32> %73, i32 %29, i64 1, !dbg !18
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !18
  %76 = fadd <2 x float> %72, %75, !dbg !26
  %77 = fcmp olt <2 x float> %76, zeroinitializer, !dbg !27
  %78 = select <2 x i1> %77, <2 x float> zeroinitializer, <2 x float> %76, !dbg !31
  %79 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %80 = insertelement <2 x i32> %79, i32 %39, i64 1, !dbg !23
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !23
  %82 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %83 = insertelement <2 x i32> %82, i32 %46, i64 1, !dbg !25
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !25
  %85 = fadd <2 x float> %81, %84, !dbg !32
  %86 = fcmp olt <2 x float> %85, zeroinitializer, !dbg !33
  %87 = select <2 x i1> %86, <2 x float> zeroinitializer, <2 x float> %85, !dbg !35
  %88 = select <2 x i1> %67, <2 x float> %78, <2 x float> %87, !dbg !36
  %89 = fmul <2 x float> %88, %88, !dbg !37
  %shift = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %90 = fadd <2 x float> %69, %shift, !dbg !38
  %shift1 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %91 = fadd <2 x float> %shift1, %90, !dbg !38
  %92 = fadd <2 x float> %89, %91, !dbg !38
  %93 = extractelement <2 x float> %92, i64 0, !dbg !38
  %94 = bitcast float %93 to i32, !dbg !43
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !43
  %96 = bitcast i32 %95 to float, !dbg !43
  %97 = fadd float %93, %96, !dbg !38
  %98 = bitcast float %97 to i32, !dbg !43
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = fadd float %97, %100, !dbg !38
  %102 = bitcast float %101 to i32, !dbg !43
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = fadd float %101, %104, !dbg !38
  %106 = bitcast float %105 to i32, !dbg !43
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !43
  %108 = bitcast i32 %107 to float, !dbg !43
  %109 = fadd float %105, %108, !dbg !38
  %110 = bitcast float %109 to i32, !dbg !43
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !43
  %112 = bitcast i32 %111 to float, !dbg !43
  %113 = fadd float %109, %112, !dbg !38
  %114 = icmp eq i32 %10, 0, !dbg !43
  %115 = and i32 %11, 3, !dbg !43
  %116 = zext nneg i32 %115 to i64, !dbg !43
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %116, !dbg !43
  %118 = bitcast float %113 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 %114) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %119 = icmp slt i32 %9, 4, !dbg !43
  %120 = sext i32 %9 to i64, !dbg !43
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !43
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %119) #3, !dbg !43
  %123 = bitcast i32 %122 to float, !dbg !43
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !43
  %125 = bitcast i32 %124 to float, !dbg !43
  %126 = fadd float %123, %125, !dbg !38
  %127 = bitcast float %126 to i32, !dbg !43
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !43
  %129 = bitcast i32 %128 to float, !dbg !43
  %130 = fadd float %126, %129, !dbg !38
  %131 = and i32 %9, 3, !dbg !43
  %132 = icmp eq i32 %131, 0, !dbg !43
  %133 = and i1 %119, %132, !dbg !43
  %134 = bitcast float %130 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %134, i1 %133) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %135 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %136 = fadd float %135, 0.000000e+00, !dbg !44
  %137 = sext i32 %8 to i64, !dbg !46
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %137, !dbg !46
  %urem = and i32 %9, 127, !dbg !47
  %139 = icmp eq i32 %urem, 0, !dbg !47
  %140 = bitcast float %136 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %138, i1 %139) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqv5mte6fma5uo6mcrmlyrvip6ehwz5l2qdu32zpcclnvttckje4.py", directory: "inductor_cache/qv")
!4 = !{ptr @triton_per_fused_cat_pow_sum_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_pow_sum_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_pow_sum_32", linkageName: "triton_per_fused_cat_pow_sum_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 36, column: 18, scope: !7)
!13 = !DILocation(line: 37, column: 34, scope: !7)
!14 = !DILocation(line: 37, column: 40, scope: !7)
!15 = !DILocation(line: 37, column: 30, scope: !7)
!16 = !DILocation(line: 37, column: 46, scope: !7)
!17 = !DILocation(line: 38, column: 30, scope: !7)
!18 = !DILocation(line: 38, column: 62, scope: !7)
!19 = !DILocation(line: 44, column: 20, scope: !7)
!20 = !DILocation(line: 47, column: 50, scope: !7)
!21 = !DILocation(line: 47, column: 41, scope: !7)
!22 = !DILocation(line: 47, column: 31, scope: !7)
!23 = !DILocation(line: 47, column: 56, scope: !7)
!24 = !DILocation(line: 48, column: 31, scope: !7)
!25 = !DILocation(line: 48, column: 72, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 41, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 20, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !34)
!34 = !DILocation(line: 51, column: 42, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !34)
!36 = !DILocation(line: 0, scope: !7)
!37 = !DILocation(line: 55, column: 20, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 57, column: 59, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !45)
!45 = !DILocation(line: 57, column: 45, scope: !7)
!46 = !DILocation(line: 58, column: 25, scope: !7)
!47 = !DILocation(line: 58, column: 37, scope: !7)
!48 = !DILocation(line: 58, column: 4, scope: !7)
