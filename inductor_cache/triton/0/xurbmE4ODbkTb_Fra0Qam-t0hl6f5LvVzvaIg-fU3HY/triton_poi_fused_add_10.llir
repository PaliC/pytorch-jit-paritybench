; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = and i32 %12, 60, !dbg !17
  %23 = lshr i32 %9, 2, !dbg !17
  %24 = and i32 %23, 31, !dbg !17
  %25 = or disjoint i32 %21, %22, !dbg !18
  %26 = or disjoint i32 %21, %24, !dbg !18
  %27 = or disjoint i32 %26, 32, !dbg !18
  %28 = icmp slt i32 %25, 64, !dbg !19
  %29 = icmp slt i32 %26, 64, !dbg !19
  %30 = icmp slt i32 %27, 64, !dbg !19
  %31 = shl i32 %14, 6, !dbg !20
  %32 = shl i32 %15, 6, !dbg !20
  %33 = add i32 %25, %31, !dbg !21
  %34 = add i32 %25, %32, !dbg !21
  %35 = sext i32 %33 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %34 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = and i1 %17, %28, !dbg !23
  %40 = and i1 %18, %28, !dbg !23
  %41 = and i1 %19, %29, !dbg !23
  %42 = and i1 %30, %19, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %39) #2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %40) #2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %77 = bitcast i32 %73 to float, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %39) #2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !28
  %88 = bitcast i32 %84 to float, !dbg !28
  %89 = bitcast i32 %85 to float, !dbg !28
  %90 = bitcast i32 %86 to float, !dbg !28
  %91 = bitcast i32 %87 to float, !dbg !28
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %40) #2, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !28
  %97 = bitcast i32 %93 to float, !dbg !28
  %98 = bitcast i32 %94 to float, !dbg !28
  %99 = bitcast i32 %95 to float, !dbg !28
  %100 = bitcast i32 %96 to float, !dbg !28
  %101 = fadd float %68, %88, !dbg !29
  %102 = fadd float %69, %89, !dbg !29
  %103 = fadd float %70, %90, !dbg !29
  %104 = fadd float %71, %91, !dbg !29
  %105 = fadd float %77, %97, !dbg !29
  %106 = fadd float %78, %98, !dbg !29
  %107 = fadd float %79, %99, !dbg !29
  %108 = fadd float %80, %100, !dbg !29
  %109 = fadd float %101, %48, !dbg !30
  %110 = fadd float %102, %49, !dbg !30
  %111 = fadd float %103, %50, !dbg !30
  %112 = fadd float %104, %51, !dbg !30
  %113 = fadd float %105, %57, !dbg !30
  %114 = fadd float %106, %58, !dbg !30
  %115 = fadd float %107, %59, !dbg !30
  %116 = fadd float %108, %60, !dbg !30
  %117 = shl i32 %26, 2, !dbg !31
  %118 = shl i32 %27, 2, !dbg !31
  %119 = shl i32 %16, 6, !dbg !32
  %120 = add i32 %117, %119, !dbg !33
  %121 = add i32 %119, %118, !dbg !33
  %122 = sext i32 %120 to i64, !dbg !34
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %122, !dbg !34
  %124 = sext i32 %121 to i64, !dbg !34
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !34
  %126 = shl i32 %9, 6, !dbg !35
  %127 = and i32 %126, 960, !dbg !35
  %128 = or disjoint i32 %127, %11, !dbg !35
  %129 = and i32 %12, 508, !dbg !35
  %130 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %127, !dbg !35
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !35
  %132 = bitcast float %109 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !35
  %133 = or disjoint i32 %128, 16, !dbg !35
  %134 = lshr i32 %133, 2, !dbg !35
  %135 = and i32 %134, 244, !dbg !35
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !35
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %133, !dbg !35
  %138 = bitcast float %110 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !35
  %139 = or disjoint i32 %128, 32, !dbg !35
  %140 = lshr i32 %139, 2, !dbg !35
  %141 = and i32 %140, 248, !dbg !35
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !35
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %139, !dbg !35
  %144 = bitcast float %111 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !35
  %145 = or disjoint i32 %128, 48, !dbg !35
  %146 = lshr i32 %145, 2, !dbg !35
  %147 = and i32 %146, 252, !dbg !35
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !35
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %145, !dbg !35
  %150 = bitcast float %112 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !35
  %151 = or disjoint i32 %128, 8, !dbg !35
  %152 = getelementptr float, ptr addrspace(3) %130, i32 %151, !dbg !35
  %153 = bitcast float %113 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !35
  %154 = or disjoint i32 %128, 24, !dbg !35
  %155 = lshr i32 %154, 2, !dbg !35
  %156 = and i32 %155, 244, !dbg !35
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !35
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %154, !dbg !35
  %159 = bitcast float %114 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !35
  %160 = or disjoint i32 %128, 40, !dbg !35
  %161 = lshr i32 %160, 2, !dbg !35
  %162 = and i32 %161, 248, !dbg !35
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !35
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %160, !dbg !35
  %165 = bitcast float %115 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !35
  %166 = or disjoint i32 %128, 56, !dbg !35
  %167 = lshr i32 %166, 2, !dbg !35
  %168 = and i32 %167, 252, !dbg !35
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !35
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %166, !dbg !35
  %171 = bitcast float %116 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %172 = and i32 %9, 124, !dbg !35
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !35
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %129, !dbg !35
  %175 = or disjoint i32 %129, 512, !dbg !35
  %176 = lshr exact i32 %175, 2, !dbg !35
  %177 = and i32 %176, 252, !dbg !35
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !35
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %175, !dbg !35
  %180 = load <4 x i32>, ptr addrspace(3) %179, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %174, align 16, !dbg !35
  %181 = getelementptr inbounds i8, ptr addrspace(3) %174, i32 4, !dbg !35
  %.extract11 = load i32, ptr addrspace(3) %181, align 4, !dbg !35
  %182 = getelementptr inbounds i8, ptr addrspace(3) %174, i32 8, !dbg !35
  %.extract12 = load i32, ptr addrspace(3) %182, align 8, !dbg !35
  %183 = getelementptr inbounds i8, ptr addrspace(3) %174, i32 12, !dbg !35
  %.extract13 = load i32, ptr addrspace(3) %183, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %123, i1 %41) #2, !dbg !35
  %.extract14 = extractelement <4 x i32> %180, i64 0, !dbg !35
  %.extract15 = extractelement <4 x i32> %180, i64 1, !dbg !35
  %.extract16 = extractelement <4 x i32> %180, i64 2, !dbg !35
  %.extract17 = extractelement <4 x i32> %180, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %125, i1 %42) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciea4hnfnc6h355xqo4g53noczsuffruqkqwbw2jhgaj5iweupkk.py", directory: "inductor_cache/ie")
!4 = !{ptr @triton_poi_fused_add_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_10", linkageName: "triton_poi_fused_add_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 41, scope: !7)
!33 = !DILocation(line: 37, column: 37, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 52, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
