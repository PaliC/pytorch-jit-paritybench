; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 12, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %13, 1, !dbg !13
  %19 = or disjoint i32 %13, 2, !dbg !13
  %20 = or disjoint i32 %13, 3, !dbg !13
  %21 = or disjoint i32 %13, 4, !dbg !13
  %22 = or disjoint i32 %13, 5, !dbg !13
  %23 = or disjoint i32 %13, 6, !dbg !13
  %24 = or disjoint i32 %13, 7, !dbg !13
  %25 = or disjoint i32 %13, 8, !dbg !13
  %26 = or disjoint i32 %13, 9, !dbg !13
  %27 = or disjoint i32 %13, 10, !dbg !13
  %28 = or disjoint i32 %13, 11, !dbg !13
  %29 = or disjoint i32 %13, 12, !dbg !13
  %30 = or disjoint i32 %13, 13, !dbg !13
  %31 = or disjoint i32 %13, 14, !dbg !13
  %32 = or disjoint i32 %13, 15, !dbg !13
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %34 = shl i32 %33, 8, !dbg !15
  %35 = and i32 %14, 255, !dbg !16
  %36 = lshr i32 %14, 2, !dbg !16
  %37 = and i32 %36, 63, !dbg !16
  %38 = or disjoint i32 %37, 64, !dbg !16
  %39 = or disjoint i32 %37, 128, !dbg !16
  %40 = or disjoint i32 %37, 192, !dbg !16
  %41 = or disjoint i32 %34, %35, !dbg !17
  %42 = or disjoint i32 %34, %37, !dbg !17
  %43 = or disjoint i32 %34, %38, !dbg !17
  %44 = or disjoint i32 %34, %39, !dbg !17
  %45 = or disjoint i32 %34, %40, !dbg !17
  %46 = icmp slt i32 %41, 256, !dbg !18
  %47 = icmp slt i32 %42, 256, !dbg !18
  %48 = icmp slt i32 %43, 256, !dbg !18
  %49 = icmp slt i32 %44, 256, !dbg !18
  %50 = icmp slt i32 %45, 256, !dbg !18
  %.frozen = freeze i32 %41, !dbg !19
  %51 = sdiv i32 %.frozen, 16, !dbg !19
  %52 = mul i32 %51, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %52, !dbg !20
  %.frozen9 = freeze i32 %17, !dbg !21
  %53 = sdiv i32 %.frozen9, 256, !dbg !21
  %54 = mul i32 %53, 256, !dbg !22
  %.decomposed10 = sub i32 %.frozen9, %54, !dbg !22
  %.frozen11 = freeze i32 %13, !dbg !21
  %55 = sdiv i32 %.frozen11, 256, !dbg !21
  %56 = mul i32 %55, 256, !dbg !22
  %.decomposed12 = sub i32 %.frozen11, %56, !dbg !22
  %.frozen13 = freeze i32 %18, !dbg !21
  %57 = sdiv i32 %.frozen13, 256, !dbg !21
  %58 = mul i32 %57, 256, !dbg !22
  %.decomposed14 = sub i32 %.frozen13, %58, !dbg !22
  %.frozen15 = freeze i32 %19, !dbg !21
  %59 = sdiv i32 %.frozen15, 256, !dbg !21
  %60 = mul i32 %59, 256, !dbg !22
  %.decomposed16 = sub i32 %.frozen15, %60, !dbg !22
  %.frozen17 = freeze i32 %20, !dbg !21
  %61 = sdiv i32 %.frozen17, 256, !dbg !21
  %62 = mul i32 %61, 256, !dbg !22
  %.decomposed18 = sub i32 %.frozen17, %62, !dbg !22
  %.frozen19 = freeze i32 %21, !dbg !21
  %63 = sdiv i32 %.frozen19, 256, !dbg !21
  %64 = mul i32 %63, 256, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %64, !dbg !22
  %.frozen21 = freeze i32 %22, !dbg !21
  %65 = sdiv i32 %.frozen21, 256, !dbg !21
  %66 = mul i32 %65, 256, !dbg !22
  %.decomposed22 = sub i32 %.frozen21, %66, !dbg !22
  %.frozen23 = freeze i32 %23, !dbg !21
  %67 = sdiv i32 %.frozen23, 256, !dbg !21
  %68 = mul i32 %67, 256, !dbg !22
  %.decomposed24 = sub i32 %.frozen23, %68, !dbg !22
  %.frozen25 = freeze i32 %24, !dbg !21
  %69 = sdiv i32 %.frozen25, 256, !dbg !21
  %70 = mul i32 %69, 256, !dbg !22
  %.decomposed26 = sub i32 %.frozen25, %70, !dbg !22
  %.frozen27 = freeze i32 %25, !dbg !21
  %71 = sdiv i32 %.frozen27, 256, !dbg !21
  %72 = mul i32 %71, 256, !dbg !22
  %.decomposed28 = sub i32 %.frozen27, %72, !dbg !22
  %.frozen29 = freeze i32 %26, !dbg !21
  %73 = sdiv i32 %.frozen29, 256, !dbg !21
  %74 = mul i32 %73, 256, !dbg !22
  %.decomposed30 = sub i32 %.frozen29, %74, !dbg !22
  %.frozen31 = freeze i32 %27, !dbg !21
  %75 = sdiv i32 %.frozen31, 256, !dbg !21
  %76 = mul i32 %75, 256, !dbg !22
  %.decomposed32 = sub i32 %.frozen31, %76, !dbg !22
  %.frozen33 = freeze i32 %28, !dbg !21
  %77 = sdiv i32 %.frozen33, 256, !dbg !21
  %78 = mul i32 %77, 256, !dbg !22
  %.decomposed34 = sub i32 %.frozen33, %78, !dbg !22
  %.frozen35 = freeze i32 %29, !dbg !21
  %79 = sdiv i32 %.frozen35, 256, !dbg !21
  %80 = mul i32 %79, 256, !dbg !22
  %.decomposed36 = sub i32 %.frozen35, %80, !dbg !22
  %.frozen37 = freeze i32 %30, !dbg !21
  %81 = sdiv i32 %.frozen37, 256, !dbg !21
  %82 = mul i32 %81, 256, !dbg !22
  %.decomposed38 = sub i32 %.frozen37, %82, !dbg !22
  %.frozen39 = freeze i32 %31, !dbg !21
  %83 = sdiv i32 %.frozen39, 256, !dbg !21
  %84 = mul i32 %83, 256, !dbg !22
  %.decomposed40 = sub i32 %.frozen39, %84, !dbg !22
  %.frozen41 = freeze i32 %32, !dbg !21
  %85 = sdiv i32 %.frozen41, 256, !dbg !21
  %86 = mul i32 %85, 256, !dbg !22
  %.decomposed42 = sub i32 %.frozen41, %86, !dbg !22
  %87 = sext i32 %51 to i64, !dbg !23
  %88 = getelementptr i64, ptr addrspace(1) %1, i64 %87, !dbg !23
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %46) #2, !dbg !24
  %90 = sext i32 %.decomposed to i64, !dbg !25
  %91 = getelementptr i64, ptr addrspace(1) %2, i64 %90, !dbg !25
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 %46) #2, !dbg !26
  %93 = getelementptr i64, ptr addrspace(1) %4, i64 %90, !dbg !27
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %46) #2, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !29
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %46) #2, !dbg !30
  %97 = getelementptr i64, ptr addrspace(1) %6, i64 %87, !dbg !31
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 %46) #2, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %7, i64 %87, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %46) #2, !dbg !34
  %101 = shl i32 %42, 8, !dbg !35
  %102 = shl i32 %43, 8, !dbg !35
  %103 = shl i32 %44, 8, !dbg !35
  %104 = shl i32 %45, 8, !dbg !35
  %105 = shl i32 %53, 16, !dbg !36
  %106 = add i32 %105, %.decomposed10, !dbg !37
  %107 = add i32 %106, %101, !dbg !38
  %108 = add i32 %106, %102, !dbg !38
  %109 = add i32 %106, %103, !dbg !38
  %110 = add i32 %106, %104, !dbg !38
  %111 = sext i32 %107 to i64, !dbg !39
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !39
  %113 = sext i32 %108 to i64, !dbg !39
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !39
  %115 = sext i32 %109 to i64, !dbg !39
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !39
  %117 = sext i32 %110 to i64, !dbg !39
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !39
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %47) #2, !dbg !40
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !40
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !40
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !40
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !40
  %124 = bitcast i32 %120 to float, !dbg !40
  %125 = bitcast i32 %121 to float, !dbg !40
  %126 = bitcast i32 %122 to float, !dbg !40
  %127 = bitcast i32 %123 to float, !dbg !40
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %48) #2, !dbg !40
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !40
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !40
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !40
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !40
  %133 = bitcast i32 %129 to float, !dbg !40
  %134 = bitcast i32 %130 to float, !dbg !40
  %135 = bitcast i32 %131 to float, !dbg !40
  %136 = bitcast i32 %132 to float, !dbg !40
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %49) #2, !dbg !40
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !40
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !40
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !40
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !40
  %142 = bitcast i32 %138 to float, !dbg !40
  %143 = bitcast i32 %139 to float, !dbg !40
  %144 = bitcast i32 %140 to float, !dbg !40
  %145 = bitcast i32 %141 to float, !dbg !40
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %50) #2, !dbg !40
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !40
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !40
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !40
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !40
  %151 = bitcast i32 %147 to float, !dbg !40
  %152 = bitcast i32 %148 to float, !dbg !40
  %153 = bitcast i32 %149 to float, !dbg !40
  %154 = bitcast i32 %150 to float, !dbg !40
  %155 = sext i32 %.decomposed10 to i64, !dbg !41
  %156 = getelementptr float, ptr addrspace(1) %8, i64 %155, !dbg !41
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !42
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !42
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !42
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !42
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !42
  %162 = bitcast i32 %158 to float, !dbg !42
  %163 = bitcast i32 %159 to float, !dbg !42
  %164 = bitcast i32 %160 to float, !dbg !42
  %165 = bitcast i32 %161 to float, !dbg !42
  %166 = lshr i64 %89, 60, !dbg !43
  %167 = and i64 %166, 8, !dbg !43
  %168 = add i64 %167, %89, !dbg !43
  %169 = lshr i64 %92, 60, !dbg !44
  %170 = and i64 %169, 8, !dbg !44
  %171 = add i64 %170, %92, !dbg !44
  %172 = sext i32 %.decomposed12 to i64, !dbg !45
  %173 = sext i32 %.decomposed14 to i64, !dbg !45
  %174 = sext i32 %.decomposed16 to i64, !dbg !45
  %175 = sext i32 %.decomposed18 to i64, !dbg !45
  %176 = sext i32 %.decomposed20 to i64, !dbg !45
  %177 = sext i32 %.decomposed22 to i64, !dbg !45
  %178 = sext i32 %.decomposed24 to i64, !dbg !45
  %179 = sext i32 %.decomposed26 to i64, !dbg !45
  %180 = sext i32 %.decomposed28 to i64, !dbg !45
  %181 = sext i32 %.decomposed30 to i64, !dbg !45
  %182 = sext i32 %.decomposed32 to i64, !dbg !45
  %183 = sext i32 %.decomposed34 to i64, !dbg !45
  %184 = sext i32 %.decomposed36 to i64, !dbg !45
  %185 = sext i32 %.decomposed38 to i64, !dbg !45
  %186 = sext i32 %.decomposed40 to i64, !dbg !45
  %187 = sext i32 %.decomposed42 to i64, !dbg !45
  %188 = shl i64 %168, 11, !dbg !46
  %189 = shl i32 %55, 14, !dbg !47
  %190 = shl i32 %57, 14, !dbg !47
  %191 = shl i32 %59, 14, !dbg !47
  %192 = shl i32 %61, 14, !dbg !47
  %193 = shl i32 %63, 14, !dbg !47
  %194 = shl i32 %65, 14, !dbg !47
  %195 = shl i32 %67, 14, !dbg !47
  %196 = shl i32 %69, 14, !dbg !47
  %197 = shl i32 %71, 14, !dbg !47
  %198 = shl i32 %73, 14, !dbg !47
  %199 = shl i32 %75, 14, !dbg !47
  %200 = shl i32 %77, 14, !dbg !47
  %201 = shl i32 %79, 14, !dbg !47
  %202 = shl i32 %81, 14, !dbg !47
  %203 = shl i32 %83, 14, !dbg !47
  %204 = shl i32 %85, 14, !dbg !47
  %205 = sext i32 %189 to i64, !dbg !48
  %206 = sext i32 %190 to i64, !dbg !48
  %207 = sext i32 %191 to i64, !dbg !48
  %208 = sext i32 %192 to i64, !dbg !48
  %209 = sext i32 %193 to i64, !dbg !48
  %210 = sext i32 %194 to i64, !dbg !48
  %211 = sext i32 %195 to i64, !dbg !48
  %212 = sext i32 %196 to i64, !dbg !48
  %213 = sext i32 %197 to i64, !dbg !48
  %214 = sext i32 %198 to i64, !dbg !48
  %215 = sext i32 %199 to i64, !dbg !48
  %216 = sext i32 %200 to i64, !dbg !48
  %217 = sext i32 %201 to i64, !dbg !48
  %218 = sext i32 %202 to i64, !dbg !48
  %219 = sext i32 %203 to i64, !dbg !48
  %220 = sext i32 %204 to i64, !dbg !48
  %.idx7 = shl i64 %171, 10, !dbg !49
  %221 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !49
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %172, !dbg !49
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %188, !dbg !49
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %205, !dbg !49
  %225 = getelementptr float, ptr addrspace(1) %221, i64 %173, !dbg !49
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %188, !dbg !49
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %206, !dbg !49
  %228 = getelementptr float, ptr addrspace(1) %221, i64 %174, !dbg !49
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %188, !dbg !49
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %207, !dbg !49
  %231 = getelementptr float, ptr addrspace(1) %221, i64 %175, !dbg !49
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %188, !dbg !49
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %208, !dbg !49
  %234 = getelementptr float, ptr addrspace(1) %221, i64 %176, !dbg !49
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %188, !dbg !49
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %209, !dbg !49
  %237 = getelementptr float, ptr addrspace(1) %221, i64 %177, !dbg !49
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %188, !dbg !49
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %210, !dbg !49
  %240 = getelementptr float, ptr addrspace(1) %221, i64 %178, !dbg !49
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %188, !dbg !49
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %211, !dbg !49
  %243 = getelementptr float, ptr addrspace(1) %221, i64 %179, !dbg !49
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %188, !dbg !49
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %212, !dbg !49
  %246 = getelementptr float, ptr addrspace(1) %221, i64 %180, !dbg !49
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %188, !dbg !49
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %213, !dbg !49
  %249 = getelementptr float, ptr addrspace(1) %221, i64 %181, !dbg !49
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %188, !dbg !49
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %214, !dbg !49
  %252 = getelementptr float, ptr addrspace(1) %221, i64 %182, !dbg !49
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %188, !dbg !49
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %215, !dbg !49
  %255 = getelementptr float, ptr addrspace(1) %221, i64 %183, !dbg !49
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %188, !dbg !49
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %216, !dbg !49
  %258 = getelementptr float, ptr addrspace(1) %221, i64 %184, !dbg !49
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %188, !dbg !49
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %217, !dbg !49
  %261 = getelementptr float, ptr addrspace(1) %221, i64 %185, !dbg !49
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %188, !dbg !49
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %218, !dbg !49
  %264 = getelementptr float, ptr addrspace(1) %221, i64 %186, !dbg !49
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %188, !dbg !49
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %219, !dbg !49
  %267 = getelementptr float, ptr addrspace(1) %221, i64 %187, !dbg !49
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %188, !dbg !49
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %220, !dbg !49
  %270 = ptrtoint ptr addrspace(1) %224 to i64, !dbg !50
  %271 = ptrtoint ptr addrspace(1) %227 to i64, !dbg !50
  %272 = ptrtoint ptr addrspace(1) %230 to i64, !dbg !50
  %273 = ptrtoint ptr addrspace(1) %233 to i64, !dbg !50
  %274 = ptrtoint ptr addrspace(1) %236 to i64, !dbg !50
  %275 = ptrtoint ptr addrspace(1) %239 to i64, !dbg !50
  %276 = ptrtoint ptr addrspace(1) %242 to i64, !dbg !50
  %277 = ptrtoint ptr addrspace(1) %245 to i64, !dbg !50
  %278 = ptrtoint ptr addrspace(1) %248 to i64, !dbg !50
  %279 = ptrtoint ptr addrspace(1) %251 to i64, !dbg !50
  %280 = ptrtoint ptr addrspace(1) %254 to i64, !dbg !50
  %281 = ptrtoint ptr addrspace(1) %257 to i64, !dbg !50
  %282 = ptrtoint ptr addrspace(1) %260 to i64, !dbg !50
  %283 = ptrtoint ptr addrspace(1) %263 to i64, !dbg !50
  %284 = ptrtoint ptr addrspace(1) %266 to i64, !dbg !50
  %285 = ptrtoint ptr addrspace(1) %269 to i64, !dbg !50
  %286 = shl i32 %14, 4, !dbg !50
  %287 = and i32 %286, 4080, !dbg !50
  %288 = and i32 %15, 1020, !dbg !50
  %289 = lshr exact i32 %287, 2, !dbg !50
  %290 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %289, !dbg !50
  %291 = getelementptr i64, ptr addrspace(3) %290, i32 %287, !dbg !50
  %292 = insertelement <1 x i64> poison, i64 %270, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %291, <1 x i64> %292, i1 true) #2, !dbg !50
  %293 = or disjoint i32 %287, 1, !dbg !50
  %294 = getelementptr i64, ptr addrspace(3) %290, i32 %293, !dbg !50
  %295 = insertelement <1 x i64> poison, i64 %271, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %294, <1 x i64> %295, i1 true) #2, !dbg !50
  %296 = or disjoint i32 %287, 2, !dbg !50
  %297 = getelementptr i64, ptr addrspace(3) %290, i32 %296, !dbg !50
  %298 = insertelement <1 x i64> poison, i64 %272, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %297, <1 x i64> %298, i1 true) #2, !dbg !50
  %299 = or disjoint i32 %287, 3, !dbg !50
  %300 = getelementptr i64, ptr addrspace(3) %290, i32 %299, !dbg !50
  %301 = insertelement <1 x i64> poison, i64 %273, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %300, <1 x i64> %301, i1 true) #2, !dbg !50
  %302 = or disjoint i32 %287, 4, !dbg !50
  %303 = getelementptr i64, ptr addrspace(3) %290, i32 %302, !dbg !50
  %304 = insertelement <1 x i64> poison, i64 %274, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %303, <1 x i64> %304, i1 true) #2, !dbg !50
  %305 = or disjoint i32 %287, 5, !dbg !50
  %306 = getelementptr i64, ptr addrspace(3) %290, i32 %305, !dbg !50
  %307 = insertelement <1 x i64> poison, i64 %275, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %306, <1 x i64> %307, i1 true) #2, !dbg !50
  %308 = or disjoint i32 %287, 6, !dbg !50
  %309 = getelementptr i64, ptr addrspace(3) %290, i32 %308, !dbg !50
  %310 = insertelement <1 x i64> poison, i64 %276, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %309, <1 x i64> %310, i1 true) #2, !dbg !50
  %311 = or disjoint i32 %287, 7, !dbg !50
  %312 = getelementptr i64, ptr addrspace(3) %290, i32 %311, !dbg !50
  %313 = insertelement <1 x i64> poison, i64 %277, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %312, <1 x i64> %313, i1 true) #2, !dbg !50
  %314 = or disjoint i32 %287, 8, !dbg !50
  %315 = getelementptr i64, ptr addrspace(3) %290, i32 %314, !dbg !50
  %316 = insertelement <1 x i64> poison, i64 %278, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %315, <1 x i64> %316, i1 true) #2, !dbg !50
  %317 = or disjoint i32 %287, 9, !dbg !50
  %318 = getelementptr i64, ptr addrspace(3) %290, i32 %317, !dbg !50
  %319 = insertelement <1 x i64> poison, i64 %279, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %318, <1 x i64> %319, i1 true) #2, !dbg !50
  %320 = or disjoint i32 %287, 10, !dbg !50
  %321 = getelementptr i64, ptr addrspace(3) %290, i32 %320, !dbg !50
  %322 = insertelement <1 x i64> poison, i64 %280, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %321, <1 x i64> %322, i1 true) #2, !dbg !50
  %323 = or disjoint i32 %287, 11, !dbg !50
  %324 = getelementptr i64, ptr addrspace(3) %290, i32 %323, !dbg !50
  %325 = insertelement <1 x i64> poison, i64 %281, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %324, <1 x i64> %325, i1 true) #2, !dbg !50
  %326 = or disjoint i32 %287, 12, !dbg !50
  %327 = getelementptr i64, ptr addrspace(3) %290, i32 %326, !dbg !50
  %328 = insertelement <1 x i64> poison, i64 %282, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %327, <1 x i64> %328, i1 true) #2, !dbg !50
  %329 = or disjoint i32 %287, 13, !dbg !50
  %330 = getelementptr i64, ptr addrspace(3) %290, i32 %329, !dbg !50
  %331 = insertelement <1 x i64> poison, i64 %283, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %330, <1 x i64> %331, i1 true) #2, !dbg !50
  %332 = or disjoint i32 %287, 14, !dbg !50
  %333 = getelementptr i64, ptr addrspace(3) %290, i32 %332, !dbg !50
  %334 = insertelement <1 x i64> poison, i64 %284, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %333, <1 x i64> %334, i1 true) #2, !dbg !50
  %335 = or disjoint i32 %287, 15, !dbg !50
  %336 = getelementptr i64, ptr addrspace(3) %290, i32 %335, !dbg !50
  %337 = insertelement <1 x i64> poison, i64 %285, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %336, <1 x i64> %337, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %338 = and i32 %14, 252, !dbg !50
  %339 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %338, !dbg !50
  %340 = getelementptr inbounds i64, ptr addrspace(3) %339, i32 %288, !dbg !50
  %341 = load i64, ptr addrspace(3) %340, align 16, !dbg !50
  %342 = or disjoint i32 %288, 1024, !dbg !50
  %343 = lshr exact i32 %342, 2, !dbg !50
  %344 = and i32 %343, 508, !dbg !50
  %345 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %344, !dbg !50
  %346 = getelementptr inbounds i64, ptr addrspace(3) %345, i32 %342, !dbg !50
  %347 = load i64, ptr addrspace(3) %346, align 16, !dbg !50
  %348 = or disjoint i32 %288, 2048, !dbg !50
  %349 = lshr exact i32 %348, 2, !dbg !50
  %350 = and i32 %349, 764, !dbg !50
  %351 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %350, !dbg !50
  %352 = getelementptr inbounds i64, ptr addrspace(3) %351, i32 %348, !dbg !50
  %353 = load i64, ptr addrspace(3) %352, align 16, !dbg !50
  %354 = or disjoint i32 %288, 3072, !dbg !50
  %355 = lshr exact i32 %354, 2, !dbg !50
  %356 = and i32 %355, 1020, !dbg !50
  %357 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %356, !dbg !50
  %358 = getelementptr inbounds i64, ptr addrspace(3) %357, i32 %354, !dbg !50
  %359 = load i64, ptr addrspace(3) %358, align 16, !dbg !50
  %360 = inttoptr i64 %341 to ptr addrspace(1), !dbg !50
  %361 = inttoptr i64 %347 to ptr addrspace(1), !dbg !50
  %362 = inttoptr i64 %353 to ptr addrspace(1), !dbg !50
  %363 = inttoptr i64 %359 to ptr addrspace(1), !dbg !50
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %360, i1 %47) #2, !dbg !50
  %365 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !50
  %366 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !50
  %367 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !50
  %368 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !50
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %361, i1 %48) #2, !dbg !50
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !50
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !50
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !50
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !50
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %362, i1 %49) #2, !dbg !50
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !50
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !50
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !50
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !50
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %363, i1 %50) #2, !dbg !50
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !50
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !50
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !50
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !50
  %384 = lshr i64 %94, 60, !dbg !51
  %385 = and i64 %384, 8, !dbg !51
  %386 = add i64 %385, %94, !dbg !51
  %.idx8 = shl i64 %386, 10, !dbg !52
  %387 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx8, !dbg !52
  %388 = getelementptr float, ptr addrspace(1) %387, i64 %172, !dbg !52
  %389 = getelementptr float, ptr addrspace(1) %388, i64 %188, !dbg !52
  %390 = getelementptr float, ptr addrspace(1) %389, i64 %205, !dbg !52
  %391 = getelementptr float, ptr addrspace(1) %387, i64 %173, !dbg !52
  %392 = getelementptr float, ptr addrspace(1) %391, i64 %188, !dbg !52
  %393 = getelementptr float, ptr addrspace(1) %392, i64 %206, !dbg !52
  %394 = getelementptr float, ptr addrspace(1) %387, i64 %174, !dbg !52
  %395 = getelementptr float, ptr addrspace(1) %394, i64 %188, !dbg !52
  %396 = getelementptr float, ptr addrspace(1) %395, i64 %207, !dbg !52
  %397 = getelementptr float, ptr addrspace(1) %387, i64 %175, !dbg !52
  %398 = getelementptr float, ptr addrspace(1) %397, i64 %188, !dbg !52
  %399 = getelementptr float, ptr addrspace(1) %398, i64 %208, !dbg !52
  %400 = getelementptr float, ptr addrspace(1) %387, i64 %176, !dbg !52
  %401 = getelementptr float, ptr addrspace(1) %400, i64 %188, !dbg !52
  %402 = getelementptr float, ptr addrspace(1) %401, i64 %209, !dbg !52
  %403 = getelementptr float, ptr addrspace(1) %387, i64 %177, !dbg !52
  %404 = getelementptr float, ptr addrspace(1) %403, i64 %188, !dbg !52
  %405 = getelementptr float, ptr addrspace(1) %404, i64 %210, !dbg !52
  %406 = getelementptr float, ptr addrspace(1) %387, i64 %178, !dbg !52
  %407 = getelementptr float, ptr addrspace(1) %406, i64 %188, !dbg !52
  %408 = getelementptr float, ptr addrspace(1) %407, i64 %211, !dbg !52
  %409 = getelementptr float, ptr addrspace(1) %387, i64 %179, !dbg !52
  %410 = getelementptr float, ptr addrspace(1) %409, i64 %188, !dbg !52
  %411 = getelementptr float, ptr addrspace(1) %410, i64 %212, !dbg !52
  %412 = getelementptr float, ptr addrspace(1) %387, i64 %180, !dbg !52
  %413 = getelementptr float, ptr addrspace(1) %412, i64 %188, !dbg !52
  %414 = getelementptr float, ptr addrspace(1) %413, i64 %213, !dbg !52
  %415 = getelementptr float, ptr addrspace(1) %387, i64 %181, !dbg !52
  %416 = getelementptr float, ptr addrspace(1) %415, i64 %188, !dbg !52
  %417 = getelementptr float, ptr addrspace(1) %416, i64 %214, !dbg !52
  %418 = getelementptr float, ptr addrspace(1) %387, i64 %182, !dbg !52
  %419 = getelementptr float, ptr addrspace(1) %418, i64 %188, !dbg !52
  %420 = getelementptr float, ptr addrspace(1) %419, i64 %215, !dbg !52
  %421 = getelementptr float, ptr addrspace(1) %387, i64 %183, !dbg !52
  %422 = getelementptr float, ptr addrspace(1) %421, i64 %188, !dbg !52
  %423 = getelementptr float, ptr addrspace(1) %422, i64 %216, !dbg !52
  %424 = getelementptr float, ptr addrspace(1) %387, i64 %184, !dbg !52
  %425 = getelementptr float, ptr addrspace(1) %424, i64 %188, !dbg !52
  %426 = getelementptr float, ptr addrspace(1) %425, i64 %217, !dbg !52
  %427 = getelementptr float, ptr addrspace(1) %387, i64 %185, !dbg !52
  %428 = getelementptr float, ptr addrspace(1) %427, i64 %188, !dbg !52
  %429 = getelementptr float, ptr addrspace(1) %428, i64 %218, !dbg !52
  %430 = getelementptr float, ptr addrspace(1) %387, i64 %186, !dbg !52
  %431 = getelementptr float, ptr addrspace(1) %430, i64 %188, !dbg !52
  %432 = getelementptr float, ptr addrspace(1) %431, i64 %219, !dbg !52
  %433 = getelementptr float, ptr addrspace(1) %387, i64 %187, !dbg !52
  %434 = getelementptr float, ptr addrspace(1) %433, i64 %188, !dbg !52
  %435 = getelementptr float, ptr addrspace(1) %434, i64 %220, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %436 = ptrtoint ptr addrspace(1) %390 to i64, !dbg !53
  %437 = ptrtoint ptr addrspace(1) %393 to i64, !dbg !53
  %438 = ptrtoint ptr addrspace(1) %396 to i64, !dbg !53
  %439 = ptrtoint ptr addrspace(1) %399 to i64, !dbg !53
  %440 = ptrtoint ptr addrspace(1) %402 to i64, !dbg !53
  %441 = ptrtoint ptr addrspace(1) %405 to i64, !dbg !53
  %442 = ptrtoint ptr addrspace(1) %408 to i64, !dbg !53
  %443 = ptrtoint ptr addrspace(1) %411 to i64, !dbg !53
  %444 = ptrtoint ptr addrspace(1) %414 to i64, !dbg !53
  %445 = ptrtoint ptr addrspace(1) %417 to i64, !dbg !53
  %446 = ptrtoint ptr addrspace(1) %420 to i64, !dbg !53
  %447 = ptrtoint ptr addrspace(1) %423 to i64, !dbg !53
  %448 = ptrtoint ptr addrspace(1) %426 to i64, !dbg !53
  %449 = ptrtoint ptr addrspace(1) %429 to i64, !dbg !53
  %450 = ptrtoint ptr addrspace(1) %432 to i64, !dbg !53
  %451 = ptrtoint ptr addrspace(1) %435 to i64, !dbg !53
  %452 = insertelement <1 x i64> poison, i64 %436, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %291, <1 x i64> %452, i1 true) #2, !dbg !53
  %453 = insertelement <1 x i64> poison, i64 %437, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %294, <1 x i64> %453, i1 true) #2, !dbg !53
  %454 = insertelement <1 x i64> poison, i64 %438, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %297, <1 x i64> %454, i1 true) #2, !dbg !53
  %455 = insertelement <1 x i64> poison, i64 %439, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %300, <1 x i64> %455, i1 true) #2, !dbg !53
  %456 = insertelement <1 x i64> poison, i64 %440, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %303, <1 x i64> %456, i1 true) #2, !dbg !53
  %457 = insertelement <1 x i64> poison, i64 %441, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %306, <1 x i64> %457, i1 true) #2, !dbg !53
  %458 = insertelement <1 x i64> poison, i64 %442, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %309, <1 x i64> %458, i1 true) #2, !dbg !53
  %459 = insertelement <1 x i64> poison, i64 %443, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %312, <1 x i64> %459, i1 true) #2, !dbg !53
  %460 = insertelement <1 x i64> poison, i64 %444, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %315, <1 x i64> %460, i1 true) #2, !dbg !53
  %461 = insertelement <1 x i64> poison, i64 %445, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %318, <1 x i64> %461, i1 true) #2, !dbg !53
  %462 = insertelement <1 x i64> poison, i64 %446, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %321, <1 x i64> %462, i1 true) #2, !dbg !53
  %463 = insertelement <1 x i64> poison, i64 %447, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %324, <1 x i64> %463, i1 true) #2, !dbg !53
  %464 = insertelement <1 x i64> poison, i64 %448, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %327, <1 x i64> %464, i1 true) #2, !dbg !53
  %465 = insertelement <1 x i64> poison, i64 %449, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %330, <1 x i64> %465, i1 true) #2, !dbg !53
  %466 = insertelement <1 x i64> poison, i64 %450, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %333, <1 x i64> %466, i1 true) #2, !dbg !53
  %467 = insertelement <1 x i64> poison, i64 %451, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %336, <1 x i64> %467, i1 true) #2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %468 = load i64, ptr addrspace(3) %340, align 16, !dbg !53
  %469 = load i64, ptr addrspace(3) %346, align 16, !dbg !53
  %470 = load i64, ptr addrspace(3) %352, align 16, !dbg !53
  %471 = load i64, ptr addrspace(3) %358, align 16, !dbg !53
  %472 = inttoptr i64 %468 to ptr addrspace(1), !dbg !53
  %473 = inttoptr i64 %469 to ptr addrspace(1), !dbg !53
  %474 = inttoptr i64 %470 to ptr addrspace(1), !dbg !53
  %475 = inttoptr i64 %471 to ptr addrspace(1), !dbg !53
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %472, i1 %47) #2, !dbg !53
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !53
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !53
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !53
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !53
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %473, i1 %48) #2, !dbg !53
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !53
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !53
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !53
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !53
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %474, i1 %49) #2, !dbg !53
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !53
  %488 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !53
  %489 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !53
  %490 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !53
  %491 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %475, i1 %50) #2, !dbg !53
  %492 = extractvalue { i32, i32, i32, i32 } %491, 0, !dbg !53
  %493 = extractvalue { i32, i32, i32, i32 } %491, 1, !dbg !53
  %494 = extractvalue { i32, i32, i32, i32 } %491, 2, !dbg !53
  %495 = extractvalue { i32, i32, i32, i32 } %491, 3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %.idx = shl nuw nsw i32 %35, 3, !dbg !54
  %496 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !54
  %497 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %.idx3 = shl nuw nsw i32 %37, 3, !dbg !54
  %498 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !54
  %499 = load float, ptr addrspace(3) %498, align 8, !dbg !54
  %.idx4 = shl nuw nsw i32 %38, 3, !dbg !54
  %500 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !54
  %501 = load float, ptr addrspace(3) %500, align 8, !dbg !54
  %.idx5 = shl nuw nsw i32 %39, 3, !dbg !54
  %502 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !54
  %503 = load float, ptr addrspace(3) %502, align 8, !dbg !54
  %.idx6 = shl nuw nsw i32 %40, 3, !dbg !54
  %504 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !54
  %505 = load float, ptr addrspace(3) %504, align 8, !dbg !54
  %506 = lshr i64 %98, 60, !dbg !55
  %507 = and i64 %506, 8, !dbg !55
  %508 = add i64 %507, %98, !dbg !55
  %509 = shl i64 %508, 11, !dbg !56
  %510 = getelementptr float, ptr addrspace(1) %222, i64 %509, !dbg !57
  %511 = getelementptr float, ptr addrspace(1) %510, i64 %205, !dbg !57
  %512 = getelementptr float, ptr addrspace(1) %225, i64 %509, !dbg !57
  %513 = getelementptr float, ptr addrspace(1) %512, i64 %206, !dbg !57
  %514 = getelementptr float, ptr addrspace(1) %228, i64 %509, !dbg !57
  %515 = getelementptr float, ptr addrspace(1) %514, i64 %207, !dbg !57
  %516 = getelementptr float, ptr addrspace(1) %231, i64 %509, !dbg !57
  %517 = getelementptr float, ptr addrspace(1) %516, i64 %208, !dbg !57
  %518 = getelementptr float, ptr addrspace(1) %234, i64 %509, !dbg !57
  %519 = getelementptr float, ptr addrspace(1) %518, i64 %209, !dbg !57
  %520 = getelementptr float, ptr addrspace(1) %237, i64 %509, !dbg !57
  %521 = getelementptr float, ptr addrspace(1) %520, i64 %210, !dbg !57
  %522 = getelementptr float, ptr addrspace(1) %240, i64 %509, !dbg !57
  %523 = getelementptr float, ptr addrspace(1) %522, i64 %211, !dbg !57
  %524 = getelementptr float, ptr addrspace(1) %243, i64 %509, !dbg !57
  %525 = getelementptr float, ptr addrspace(1) %524, i64 %212, !dbg !57
  %526 = getelementptr float, ptr addrspace(1) %246, i64 %509, !dbg !57
  %527 = getelementptr float, ptr addrspace(1) %526, i64 %213, !dbg !57
  %528 = getelementptr float, ptr addrspace(1) %249, i64 %509, !dbg !57
  %529 = getelementptr float, ptr addrspace(1) %528, i64 %214, !dbg !57
  %530 = getelementptr float, ptr addrspace(1) %252, i64 %509, !dbg !57
  %531 = getelementptr float, ptr addrspace(1) %530, i64 %215, !dbg !57
  %532 = getelementptr float, ptr addrspace(1) %255, i64 %509, !dbg !57
  %533 = getelementptr float, ptr addrspace(1) %532, i64 %216, !dbg !57
  %534 = getelementptr float, ptr addrspace(1) %258, i64 %509, !dbg !57
  %535 = getelementptr float, ptr addrspace(1) %534, i64 %217, !dbg !57
  %536 = getelementptr float, ptr addrspace(1) %261, i64 %509, !dbg !57
  %537 = getelementptr float, ptr addrspace(1) %536, i64 %218, !dbg !57
  %538 = getelementptr float, ptr addrspace(1) %264, i64 %509, !dbg !57
  %539 = getelementptr float, ptr addrspace(1) %538, i64 %219, !dbg !57
  %540 = getelementptr float, ptr addrspace(1) %267, i64 %509, !dbg !57
  %541 = getelementptr float, ptr addrspace(1) %540, i64 %220, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %542 = ptrtoint ptr addrspace(1) %511 to i64, !dbg !58
  %543 = ptrtoint ptr addrspace(1) %513 to i64, !dbg !58
  %544 = ptrtoint ptr addrspace(1) %515 to i64, !dbg !58
  %545 = ptrtoint ptr addrspace(1) %517 to i64, !dbg !58
  %546 = ptrtoint ptr addrspace(1) %519 to i64, !dbg !58
  %547 = ptrtoint ptr addrspace(1) %521 to i64, !dbg !58
  %548 = ptrtoint ptr addrspace(1) %523 to i64, !dbg !58
  %549 = ptrtoint ptr addrspace(1) %525 to i64, !dbg !58
  %550 = ptrtoint ptr addrspace(1) %527 to i64, !dbg !58
  %551 = ptrtoint ptr addrspace(1) %529 to i64, !dbg !58
  %552 = ptrtoint ptr addrspace(1) %531 to i64, !dbg !58
  %553 = ptrtoint ptr addrspace(1) %533 to i64, !dbg !58
  %554 = ptrtoint ptr addrspace(1) %535 to i64, !dbg !58
  %555 = ptrtoint ptr addrspace(1) %537 to i64, !dbg !58
  %556 = ptrtoint ptr addrspace(1) %539 to i64, !dbg !58
  %557 = ptrtoint ptr addrspace(1) %541 to i64, !dbg !58
  %558 = insertelement <1 x i64> poison, i64 %542, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %291, <1 x i64> %558, i1 true) #2, !dbg !58
  %559 = insertelement <1 x i64> poison, i64 %543, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %294, <1 x i64> %559, i1 true) #2, !dbg !58
  %560 = insertelement <1 x i64> poison, i64 %544, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %297, <1 x i64> %560, i1 true) #2, !dbg !58
  %561 = insertelement <1 x i64> poison, i64 %545, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %300, <1 x i64> %561, i1 true) #2, !dbg !58
  %562 = insertelement <1 x i64> poison, i64 %546, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %303, <1 x i64> %562, i1 true) #2, !dbg !58
  %563 = insertelement <1 x i64> poison, i64 %547, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %306, <1 x i64> %563, i1 true) #2, !dbg !58
  %564 = insertelement <1 x i64> poison, i64 %548, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %309, <1 x i64> %564, i1 true) #2, !dbg !58
  %565 = insertelement <1 x i64> poison, i64 %549, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %312, <1 x i64> %565, i1 true) #2, !dbg !58
  %566 = insertelement <1 x i64> poison, i64 %550, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %315, <1 x i64> %566, i1 true) #2, !dbg !58
  %567 = insertelement <1 x i64> poison, i64 %551, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %318, <1 x i64> %567, i1 true) #2, !dbg !58
  %568 = insertelement <1 x i64> poison, i64 %552, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %321, <1 x i64> %568, i1 true) #2, !dbg !58
  %569 = insertelement <1 x i64> poison, i64 %553, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %324, <1 x i64> %569, i1 true) #2, !dbg !58
  %570 = insertelement <1 x i64> poison, i64 %554, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %327, <1 x i64> %570, i1 true) #2, !dbg !58
  %571 = insertelement <1 x i64> poison, i64 %555, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %330, <1 x i64> %571, i1 true) #2, !dbg !58
  %572 = insertelement <1 x i64> poison, i64 %556, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %333, <1 x i64> %572, i1 true) #2, !dbg !58
  %573 = insertelement <1 x i64> poison, i64 %557, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %336, <1 x i64> %573, i1 true) #2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %574 = load i64, ptr addrspace(3) %340, align 16, !dbg !58
  %575 = load i64, ptr addrspace(3) %346, align 16, !dbg !58
  %576 = load i64, ptr addrspace(3) %352, align 16, !dbg !58
  %577 = load i64, ptr addrspace(3) %358, align 16, !dbg !58
  %578 = inttoptr i64 %574 to ptr addrspace(1), !dbg !58
  %579 = inttoptr i64 %575 to ptr addrspace(1), !dbg !58
  %580 = inttoptr i64 %576 to ptr addrspace(1), !dbg !58
  %581 = inttoptr i64 %577 to ptr addrspace(1), !dbg !58
  %582 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %578, i1 %47) #2, !dbg !58
  %583 = extractvalue { i32, i32, i32, i32 } %582, 0, !dbg !58
  %584 = extractvalue { i32, i32, i32, i32 } %582, 1, !dbg !58
  %585 = extractvalue { i32, i32, i32, i32 } %582, 2, !dbg !58
  %586 = extractvalue { i32, i32, i32, i32 } %582, 3, !dbg !58
  %587 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %579, i1 %48) #2, !dbg !58
  %588 = extractvalue { i32, i32, i32, i32 } %587, 0, !dbg !58
  %589 = extractvalue { i32, i32, i32, i32 } %587, 1, !dbg !58
  %590 = extractvalue { i32, i32, i32, i32 } %587, 2, !dbg !58
  %591 = extractvalue { i32, i32, i32, i32 } %587, 3, !dbg !58
  %592 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %580, i1 %49) #2, !dbg !58
  %593 = extractvalue { i32, i32, i32, i32 } %592, 0, !dbg !58
  %594 = extractvalue { i32, i32, i32, i32 } %592, 1, !dbg !58
  %595 = extractvalue { i32, i32, i32, i32 } %592, 2, !dbg !58
  %596 = extractvalue { i32, i32, i32, i32 } %592, 3, !dbg !58
  %597 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %581, i1 %50) #2, !dbg !58
  %598 = extractvalue { i32, i32, i32, i32 } %597, 0, !dbg !58
  %599 = extractvalue { i32, i32, i32, i32 } %597, 1, !dbg !58
  %600 = extractvalue { i32, i32, i32, i32 } %597, 2, !dbg !58
  %601 = extractvalue { i32, i32, i32, i32 } %597, 3, !dbg !58
  %602 = getelementptr float, ptr addrspace(1) %388, i64 %509, !dbg !59
  %603 = getelementptr float, ptr addrspace(1) %602, i64 %205, !dbg !59
  %604 = getelementptr float, ptr addrspace(1) %391, i64 %509, !dbg !59
  %605 = getelementptr float, ptr addrspace(1) %604, i64 %206, !dbg !59
  %606 = getelementptr float, ptr addrspace(1) %394, i64 %509, !dbg !59
  %607 = getelementptr float, ptr addrspace(1) %606, i64 %207, !dbg !59
  %608 = getelementptr float, ptr addrspace(1) %397, i64 %509, !dbg !59
  %609 = getelementptr float, ptr addrspace(1) %608, i64 %208, !dbg !59
  %610 = getelementptr float, ptr addrspace(1) %400, i64 %509, !dbg !59
  %611 = getelementptr float, ptr addrspace(1) %610, i64 %209, !dbg !59
  %612 = getelementptr float, ptr addrspace(1) %403, i64 %509, !dbg !59
  %613 = getelementptr float, ptr addrspace(1) %612, i64 %210, !dbg !59
  %614 = getelementptr float, ptr addrspace(1) %406, i64 %509, !dbg !59
  %615 = getelementptr float, ptr addrspace(1) %614, i64 %211, !dbg !59
  %616 = getelementptr float, ptr addrspace(1) %409, i64 %509, !dbg !59
  %617 = getelementptr float, ptr addrspace(1) %616, i64 %212, !dbg !59
  %618 = getelementptr float, ptr addrspace(1) %412, i64 %509, !dbg !59
  %619 = getelementptr float, ptr addrspace(1) %618, i64 %213, !dbg !59
  %620 = getelementptr float, ptr addrspace(1) %415, i64 %509, !dbg !59
  %621 = getelementptr float, ptr addrspace(1) %620, i64 %214, !dbg !59
  %622 = getelementptr float, ptr addrspace(1) %418, i64 %509, !dbg !59
  %623 = getelementptr float, ptr addrspace(1) %622, i64 %215, !dbg !59
  %624 = getelementptr float, ptr addrspace(1) %421, i64 %509, !dbg !59
  %625 = getelementptr float, ptr addrspace(1) %624, i64 %216, !dbg !59
  %626 = getelementptr float, ptr addrspace(1) %424, i64 %509, !dbg !59
  %627 = getelementptr float, ptr addrspace(1) %626, i64 %217, !dbg !59
  %628 = getelementptr float, ptr addrspace(1) %427, i64 %509, !dbg !59
  %629 = getelementptr float, ptr addrspace(1) %628, i64 %218, !dbg !59
  %630 = getelementptr float, ptr addrspace(1) %430, i64 %509, !dbg !59
  %631 = getelementptr float, ptr addrspace(1) %630, i64 %219, !dbg !59
  %632 = getelementptr float, ptr addrspace(1) %433, i64 %509, !dbg !59
  %633 = getelementptr float, ptr addrspace(1) %632, i64 %220, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %634 = ptrtoint ptr addrspace(1) %603 to i64, !dbg !60
  %635 = ptrtoint ptr addrspace(1) %605 to i64, !dbg !60
  %636 = ptrtoint ptr addrspace(1) %607 to i64, !dbg !60
  %637 = ptrtoint ptr addrspace(1) %609 to i64, !dbg !60
  %638 = ptrtoint ptr addrspace(1) %611 to i64, !dbg !60
  %639 = ptrtoint ptr addrspace(1) %613 to i64, !dbg !60
  %640 = ptrtoint ptr addrspace(1) %615 to i64, !dbg !60
  %641 = ptrtoint ptr addrspace(1) %617 to i64, !dbg !60
  %642 = ptrtoint ptr addrspace(1) %619 to i64, !dbg !60
  %643 = ptrtoint ptr addrspace(1) %621 to i64, !dbg !60
  %644 = ptrtoint ptr addrspace(1) %623 to i64, !dbg !60
  %645 = ptrtoint ptr addrspace(1) %625 to i64, !dbg !60
  %646 = ptrtoint ptr addrspace(1) %627 to i64, !dbg !60
  %647 = ptrtoint ptr addrspace(1) %629 to i64, !dbg !60
  %648 = ptrtoint ptr addrspace(1) %631 to i64, !dbg !60
  %649 = ptrtoint ptr addrspace(1) %633 to i64, !dbg !60
  %650 = insertelement <1 x i64> poison, i64 %634, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %291, <1 x i64> %650, i1 true) #2, !dbg !60
  %651 = insertelement <1 x i64> poison, i64 %635, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %294, <1 x i64> %651, i1 true) #2, !dbg !60
  %652 = insertelement <1 x i64> poison, i64 %636, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %297, <1 x i64> %652, i1 true) #2, !dbg !60
  %653 = insertelement <1 x i64> poison, i64 %637, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %300, <1 x i64> %653, i1 true) #2, !dbg !60
  %654 = insertelement <1 x i64> poison, i64 %638, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %303, <1 x i64> %654, i1 true) #2, !dbg !60
  %655 = insertelement <1 x i64> poison, i64 %639, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %306, <1 x i64> %655, i1 true) #2, !dbg !60
  %656 = insertelement <1 x i64> poison, i64 %640, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %309, <1 x i64> %656, i1 true) #2, !dbg !60
  %657 = insertelement <1 x i64> poison, i64 %641, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %312, <1 x i64> %657, i1 true) #2, !dbg !60
  %658 = insertelement <1 x i64> poison, i64 %642, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %315, <1 x i64> %658, i1 true) #2, !dbg !60
  %659 = insertelement <1 x i64> poison, i64 %643, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %318, <1 x i64> %659, i1 true) #2, !dbg !60
  %660 = insertelement <1 x i64> poison, i64 %644, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %321, <1 x i64> %660, i1 true) #2, !dbg !60
  %661 = insertelement <1 x i64> poison, i64 %645, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %324, <1 x i64> %661, i1 true) #2, !dbg !60
  %662 = insertelement <1 x i64> poison, i64 %646, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %327, <1 x i64> %662, i1 true) #2, !dbg !60
  %663 = insertelement <1 x i64> poison, i64 %647, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %330, <1 x i64> %663, i1 true) #2, !dbg !60
  %664 = insertelement <1 x i64> poison, i64 %648, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %333, <1 x i64> %664, i1 true) #2, !dbg !60
  %665 = insertelement <1 x i64> poison, i64 %649, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %336, <1 x i64> %665, i1 true) #2, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %666 = load i64, ptr addrspace(3) %340, align 16, !dbg !60
  %667 = load i64, ptr addrspace(3) %346, align 16, !dbg !60
  %668 = load i64, ptr addrspace(3) %352, align 16, !dbg !60
  %669 = load i64, ptr addrspace(3) %358, align 16, !dbg !60
  %670 = inttoptr i64 %666 to ptr addrspace(1), !dbg !60
  %671 = inttoptr i64 %667 to ptr addrspace(1), !dbg !60
  %672 = inttoptr i64 %668 to ptr addrspace(1), !dbg !60
  %673 = inttoptr i64 %669 to ptr addrspace(1), !dbg !60
  %674 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %670, i1 %47) #2, !dbg !60
  %675 = extractvalue { i32, i32, i32, i32 } %674, 0, !dbg !60
  %676 = extractvalue { i32, i32, i32, i32 } %674, 1, !dbg !60
  %677 = extractvalue { i32, i32, i32, i32 } %674, 2, !dbg !60
  %678 = extractvalue { i32, i32, i32, i32 } %674, 3, !dbg !60
  %679 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %671, i1 %48) #2, !dbg !60
  %680 = extractvalue { i32, i32, i32, i32 } %679, 0, !dbg !60
  %681 = extractvalue { i32, i32, i32, i32 } %679, 1, !dbg !60
  %682 = extractvalue { i32, i32, i32, i32 } %679, 2, !dbg !60
  %683 = extractvalue { i32, i32, i32, i32 } %679, 3, !dbg !60
  %684 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %672, i1 %49) #2, !dbg !60
  %685 = extractvalue { i32, i32, i32, i32 } %684, 0, !dbg !60
  %686 = extractvalue { i32, i32, i32, i32 } %684, 1, !dbg !60
  %687 = extractvalue { i32, i32, i32, i32 } %684, 2, !dbg !60
  %688 = extractvalue { i32, i32, i32, i32 } %684, 3, !dbg !60
  %689 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %673, i1 %50) #2, !dbg !60
  %690 = extractvalue { i32, i32, i32, i32 } %689, 0, !dbg !60
  %691 = extractvalue { i32, i32, i32, i32 } %689, 1, !dbg !60
  %692 = extractvalue { i32, i32, i32, i32 } %689, 2, !dbg !60
  %693 = extractvalue { i32, i32, i32, i32 } %689, 3, !dbg !60
  %694 = insertelement <2 x i32> poison, i32 %583, i64 0, !dbg !58
  %695 = insertelement <2 x i32> %694, i32 %365, i64 1, !dbg !58
  %696 = bitcast <2 x i32> %695 to <2 x float>, !dbg !58
  %697 = insertelement <2 x i32> poison, i32 %675, i64 0, !dbg !60
  %698 = insertelement <2 x i32> %697, i32 %477, i64 1, !dbg !60
  %699 = bitcast <2 x i32> %698 to <2 x float>, !dbg !60
  %700 = fsub <2 x float> %699, %696, !dbg !61
  %701 = insertelement <2 x float> poison, float %499, i64 0, !dbg !62
  %702 = shufflevector <2 x float> %701, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %703 = fmul <2 x float> %702, %700, !dbg !62
  %704 = fadd <2 x float> %703, %696, !dbg !63
  %705 = insertelement <2 x i32> poison, i32 %584, i64 0, !dbg !58
  %706 = insertelement <2 x i32> %705, i32 %366, i64 1, !dbg !58
  %707 = bitcast <2 x i32> %706 to <2 x float>, !dbg !58
  %708 = insertelement <2 x i32> poison, i32 %676, i64 0, !dbg !60
  %709 = insertelement <2 x i32> %708, i32 %478, i64 1, !dbg !60
  %710 = bitcast <2 x i32> %709 to <2 x float>, !dbg !60
  %711 = fsub <2 x float> %710, %707, !dbg !61
  %712 = fmul <2 x float> %702, %711, !dbg !62
  %713 = fadd <2 x float> %712, %707, !dbg !63
  %714 = insertelement <2 x i32> poison, i32 %585, i64 0, !dbg !58
  %715 = insertelement <2 x i32> %714, i32 %367, i64 1, !dbg !58
  %716 = bitcast <2 x i32> %715 to <2 x float>, !dbg !58
  %717 = insertelement <2 x i32> poison, i32 %677, i64 0, !dbg !60
  %718 = insertelement <2 x i32> %717, i32 %479, i64 1, !dbg !60
  %719 = bitcast <2 x i32> %718 to <2 x float>, !dbg !60
  %720 = fsub <2 x float> %719, %716, !dbg !61
  %721 = fmul <2 x float> %702, %720, !dbg !62
  %722 = fadd <2 x float> %721, %716, !dbg !63
  %723 = insertelement <2 x i32> poison, i32 %586, i64 0, !dbg !58
  %724 = insertelement <2 x i32> %723, i32 %368, i64 1, !dbg !58
  %725 = bitcast <2 x i32> %724 to <2 x float>, !dbg !58
  %726 = insertelement <2 x i32> poison, i32 %678, i64 0, !dbg !60
  %727 = insertelement <2 x i32> %726, i32 %480, i64 1, !dbg !60
  %728 = bitcast <2 x i32> %727 to <2 x float>, !dbg !60
  %729 = fsub <2 x float> %728, %725, !dbg !61
  %730 = fmul <2 x float> %702, %729, !dbg !62
  %731 = fadd <2 x float> %730, %725, !dbg !63
  %732 = insertelement <2 x i32> poison, i32 %588, i64 0, !dbg !58
  %733 = insertelement <2 x i32> %732, i32 %370, i64 1, !dbg !58
  %734 = bitcast <2 x i32> %733 to <2 x float>, !dbg !58
  %735 = insertelement <2 x i32> poison, i32 %680, i64 0, !dbg !60
  %736 = insertelement <2 x i32> %735, i32 %482, i64 1, !dbg !60
  %737 = bitcast <2 x i32> %736 to <2 x float>, !dbg !60
  %738 = fsub <2 x float> %737, %734, !dbg !61
  %739 = insertelement <2 x float> poison, float %501, i64 0, !dbg !62
  %740 = shufflevector <2 x float> %739, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %741 = fmul <2 x float> %740, %738, !dbg !62
  %742 = fadd <2 x float> %741, %734, !dbg !63
  %743 = insertelement <2 x i32> poison, i32 %589, i64 0, !dbg !58
  %744 = insertelement <2 x i32> %743, i32 %371, i64 1, !dbg !58
  %745 = bitcast <2 x i32> %744 to <2 x float>, !dbg !58
  %746 = insertelement <2 x i32> poison, i32 %681, i64 0, !dbg !60
  %747 = insertelement <2 x i32> %746, i32 %483, i64 1, !dbg !60
  %748 = bitcast <2 x i32> %747 to <2 x float>, !dbg !60
  %749 = fsub <2 x float> %748, %745, !dbg !61
  %750 = fmul <2 x float> %740, %749, !dbg !62
  %751 = fadd <2 x float> %750, %745, !dbg !63
  %752 = insertelement <2 x i32> poison, i32 %590, i64 0, !dbg !58
  %753 = insertelement <2 x i32> %752, i32 %372, i64 1, !dbg !58
  %754 = bitcast <2 x i32> %753 to <2 x float>, !dbg !58
  %755 = insertelement <2 x i32> poison, i32 %682, i64 0, !dbg !60
  %756 = insertelement <2 x i32> %755, i32 %484, i64 1, !dbg !60
  %757 = bitcast <2 x i32> %756 to <2 x float>, !dbg !60
  %758 = fsub <2 x float> %757, %754, !dbg !61
  %759 = fmul <2 x float> %740, %758, !dbg !62
  %760 = fadd <2 x float> %759, %754, !dbg !63
  %761 = insertelement <2 x i32> poison, i32 %591, i64 0, !dbg !58
  %762 = insertelement <2 x i32> %761, i32 %373, i64 1, !dbg !58
  %763 = bitcast <2 x i32> %762 to <2 x float>, !dbg !58
  %764 = insertelement <2 x i32> poison, i32 %683, i64 0, !dbg !60
  %765 = insertelement <2 x i32> %764, i32 %485, i64 1, !dbg !60
  %766 = bitcast <2 x i32> %765 to <2 x float>, !dbg !60
  %767 = fsub <2 x float> %766, %763, !dbg !61
  %768 = fmul <2 x float> %740, %767, !dbg !62
  %769 = fadd <2 x float> %768, %763, !dbg !63
  %770 = insertelement <2 x i32> poison, i32 %593, i64 0, !dbg !58
  %771 = insertelement <2 x i32> %770, i32 %375, i64 1, !dbg !58
  %772 = bitcast <2 x i32> %771 to <2 x float>, !dbg !58
  %773 = insertelement <2 x i32> poison, i32 %685, i64 0, !dbg !60
  %774 = insertelement <2 x i32> %773, i32 %487, i64 1, !dbg !60
  %775 = bitcast <2 x i32> %774 to <2 x float>, !dbg !60
  %776 = fsub <2 x float> %775, %772, !dbg !61
  %777 = insertelement <2 x float> poison, float %503, i64 0, !dbg !62
  %778 = shufflevector <2 x float> %777, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %779 = fmul <2 x float> %778, %776, !dbg !62
  %780 = fadd <2 x float> %779, %772, !dbg !63
  %781 = insertelement <2 x i32> poison, i32 %594, i64 0, !dbg !58
  %782 = insertelement <2 x i32> %781, i32 %376, i64 1, !dbg !58
  %783 = bitcast <2 x i32> %782 to <2 x float>, !dbg !58
  %784 = insertelement <2 x i32> poison, i32 %686, i64 0, !dbg !60
  %785 = insertelement <2 x i32> %784, i32 %488, i64 1, !dbg !60
  %786 = bitcast <2 x i32> %785 to <2 x float>, !dbg !60
  %787 = fsub <2 x float> %786, %783, !dbg !61
  %788 = fmul <2 x float> %778, %787, !dbg !62
  %789 = fadd <2 x float> %788, %783, !dbg !63
  %790 = insertelement <2 x i32> poison, i32 %595, i64 0, !dbg !58
  %791 = insertelement <2 x i32> %790, i32 %377, i64 1, !dbg !58
  %792 = bitcast <2 x i32> %791 to <2 x float>, !dbg !58
  %793 = insertelement <2 x i32> poison, i32 %687, i64 0, !dbg !60
  %794 = insertelement <2 x i32> %793, i32 %489, i64 1, !dbg !60
  %795 = bitcast <2 x i32> %794 to <2 x float>, !dbg !60
  %796 = fsub <2 x float> %795, %792, !dbg !61
  %797 = fmul <2 x float> %778, %796, !dbg !62
  %798 = fadd <2 x float> %797, %792, !dbg !63
  %799 = insertelement <2 x i32> poison, i32 %596, i64 0, !dbg !58
  %800 = insertelement <2 x i32> %799, i32 %378, i64 1, !dbg !58
  %801 = bitcast <2 x i32> %800 to <2 x float>, !dbg !58
  %802 = insertelement <2 x i32> poison, i32 %688, i64 0, !dbg !60
  %803 = insertelement <2 x i32> %802, i32 %490, i64 1, !dbg !60
  %804 = bitcast <2 x i32> %803 to <2 x float>, !dbg !60
  %805 = fsub <2 x float> %804, %801, !dbg !61
  %806 = fmul <2 x float> %778, %805, !dbg !62
  %807 = fadd <2 x float> %806, %801, !dbg !63
  %808 = insertelement <2 x i32> poison, i32 %598, i64 0, !dbg !58
  %809 = insertelement <2 x i32> %808, i32 %380, i64 1, !dbg !58
  %810 = bitcast <2 x i32> %809 to <2 x float>, !dbg !58
  %811 = insertelement <2 x i32> poison, i32 %690, i64 0, !dbg !60
  %812 = insertelement <2 x i32> %811, i32 %492, i64 1, !dbg !60
  %813 = bitcast <2 x i32> %812 to <2 x float>, !dbg !60
  %814 = fsub <2 x float> %813, %810, !dbg !61
  %815 = insertelement <2 x float> poison, float %505, i64 0, !dbg !62
  %816 = shufflevector <2 x float> %815, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %817 = fmul <2 x float> %816, %814, !dbg !62
  %818 = fadd <2 x float> %817, %810, !dbg !63
  %819 = insertelement <2 x i32> poison, i32 %599, i64 0, !dbg !58
  %820 = insertelement <2 x i32> %819, i32 %381, i64 1, !dbg !58
  %821 = bitcast <2 x i32> %820 to <2 x float>, !dbg !58
  %822 = insertelement <2 x i32> poison, i32 %691, i64 0, !dbg !60
  %823 = insertelement <2 x i32> %822, i32 %493, i64 1, !dbg !60
  %824 = bitcast <2 x i32> %823 to <2 x float>, !dbg !60
  %825 = fsub <2 x float> %824, %821, !dbg !61
  %826 = fmul <2 x float> %816, %825, !dbg !62
  %827 = fadd <2 x float> %826, %821, !dbg !63
  %828 = insertelement <2 x i32> poison, i32 %600, i64 0, !dbg !58
  %829 = insertelement <2 x i32> %828, i32 %382, i64 1, !dbg !58
  %830 = bitcast <2 x i32> %829 to <2 x float>, !dbg !58
  %831 = insertelement <2 x i32> poison, i32 %692, i64 0, !dbg !60
  %832 = insertelement <2 x i32> %831, i32 %494, i64 1, !dbg !60
  %833 = bitcast <2 x i32> %832 to <2 x float>, !dbg !60
  %834 = fsub <2 x float> %833, %830, !dbg !61
  %835 = fmul <2 x float> %816, %834, !dbg !62
  %836 = fadd <2 x float> %835, %830, !dbg !63
  %837 = insertelement <2 x i32> poison, i32 %601, i64 0, !dbg !58
  %838 = insertelement <2 x i32> %837, i32 %383, i64 1, !dbg !58
  %839 = bitcast <2 x i32> %838 to <2 x float>, !dbg !58
  %840 = insertelement <2 x i32> poison, i32 %693, i64 0, !dbg !60
  %841 = insertelement <2 x i32> %840, i32 %495, i64 1, !dbg !60
  %842 = bitcast <2 x i32> %841 to <2 x float>, !dbg !60
  %843 = fsub <2 x float> %842, %839, !dbg !61
  %844 = fmul <2 x float> %816, %843, !dbg !62
  %845 = fadd <2 x float> %844, %839, !dbg !63
  %846 = extractelement <2 x float> %704, i64 0, !dbg !64
  %847 = extractelement <2 x float> %704, i64 1, !dbg !65
  %848 = fsub float %846, %847, !dbg !64
  %849 = extractelement <2 x float> %713, i64 0, !dbg !64
  %850 = extractelement <2 x float> %713, i64 1, !dbg !65
  %851 = fsub float %849, %850, !dbg !64
  %852 = extractelement <2 x float> %722, i64 0, !dbg !64
  %853 = extractelement <2 x float> %722, i64 1, !dbg !65
  %854 = fsub float %852, %853, !dbg !64
  %855 = extractelement <2 x float> %731, i64 0, !dbg !64
  %856 = extractelement <2 x float> %731, i64 1, !dbg !65
  %857 = fsub float %855, %856, !dbg !64
  %858 = extractelement <2 x float> %742, i64 0, !dbg !64
  %859 = extractelement <2 x float> %742, i64 1, !dbg !65
  %860 = fsub float %858, %859, !dbg !64
  %861 = extractelement <2 x float> %751, i64 0, !dbg !64
  %862 = extractelement <2 x float> %751, i64 1, !dbg !65
  %863 = fsub float %861, %862, !dbg !64
  %864 = extractelement <2 x float> %760, i64 0, !dbg !64
  %865 = extractelement <2 x float> %760, i64 1, !dbg !65
  %866 = fsub float %864, %865, !dbg !64
  %867 = extractelement <2 x float> %769, i64 0, !dbg !64
  %868 = extractelement <2 x float> %769, i64 1, !dbg !65
  %869 = fsub float %867, %868, !dbg !64
  %870 = extractelement <2 x float> %780, i64 0, !dbg !64
  %871 = extractelement <2 x float> %780, i64 1, !dbg !65
  %872 = fsub float %870, %871, !dbg !64
  %873 = extractelement <2 x float> %789, i64 0, !dbg !64
  %874 = extractelement <2 x float> %789, i64 1, !dbg !65
  %875 = fsub float %873, %874, !dbg !64
  %876 = extractelement <2 x float> %798, i64 0, !dbg !64
  %877 = extractelement <2 x float> %798, i64 1, !dbg !65
  %878 = fsub float %876, %877, !dbg !64
  %879 = extractelement <2 x float> %807, i64 0, !dbg !64
  %880 = extractelement <2 x float> %807, i64 1, !dbg !65
  %881 = fsub float %879, %880, !dbg !64
  %882 = extractelement <2 x float> %818, i64 0, !dbg !64
  %883 = extractelement <2 x float> %818, i64 1, !dbg !65
  %884 = fsub float %882, %883, !dbg !64
  %885 = extractelement <2 x float> %827, i64 0, !dbg !64
  %886 = extractelement <2 x float> %827, i64 1, !dbg !65
  %887 = fsub float %885, %886, !dbg !64
  %888 = extractelement <2 x float> %836, i64 0, !dbg !64
  %889 = extractelement <2 x float> %836, i64 1, !dbg !65
  %890 = fsub float %888, %889, !dbg !64
  %891 = extractelement <2 x float> %845, i64 0, !dbg !64
  %892 = extractelement <2 x float> %845, i64 1, !dbg !65
  %893 = fsub float %891, %892, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %894 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %894, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %895 = load float, ptr addrspace(3) %498, align 8, !dbg !66
  %896 = load float, ptr addrspace(3) %500, align 8, !dbg !66
  %897 = load float, ptr addrspace(3) %502, align 8, !dbg !66
  %898 = load float, ptr addrspace(3) %504, align 8, !dbg !66
  %899 = fmul float %848, %895, !dbg !66
  %900 = fmul float %851, %895, !dbg !66
  %901 = fmul float %854, %895, !dbg !66
  %902 = fmul float %857, %895, !dbg !66
  %903 = fmul float %860, %896, !dbg !66
  %904 = fmul float %863, %896, !dbg !66
  %905 = fmul float %866, %896, !dbg !66
  %906 = fmul float %869, %896, !dbg !66
  %907 = fmul float %872, %897, !dbg !66
  %908 = fmul float %875, %897, !dbg !66
  %909 = fmul float %878, %897, !dbg !66
  %910 = fmul float %881, %897, !dbg !66
  %911 = fmul float %884, %898, !dbg !66
  %912 = fmul float %887, %898, !dbg !66
  %913 = fmul float %890, %898, !dbg !66
  %914 = fmul float %893, %898, !dbg !66
  %915 = fadd float %847, %899, !dbg !65
  %916 = fadd float %850, %900, !dbg !65
  %917 = fadd float %853, %901, !dbg !65
  %918 = fadd float %856, %902, !dbg !65
  %919 = fadd float %859, %903, !dbg !65
  %920 = fadd float %862, %904, !dbg !65
  %921 = fadd float %865, %905, !dbg !65
  %922 = fadd float %868, %906, !dbg !65
  %923 = fadd float %871, %907, !dbg !65
  %924 = fadd float %874, %908, !dbg !65
  %925 = fadd float %877, %909, !dbg !65
  %926 = fadd float %880, %910, !dbg !65
  %927 = fadd float %883, %911, !dbg !65
  %928 = fadd float %886, %912, !dbg !65
  %929 = fadd float %889, %913, !dbg !65
  %930 = fadd float %892, %914, !dbg !65
  %931 = fadd float %124, %162, !dbg !67
  %932 = fadd float %125, %163, !dbg !67
  %933 = fadd float %126, %164, !dbg !67
  %934 = fadd float %127, %165, !dbg !67
  %935 = fadd float %133, %162, !dbg !67
  %936 = fadd float %134, %163, !dbg !67
  %937 = fadd float %135, %164, !dbg !67
  %938 = fadd float %136, %165, !dbg !67
  %939 = fadd float %142, %162, !dbg !67
  %940 = fadd float %143, %163, !dbg !67
  %941 = fadd float %144, %164, !dbg !67
  %942 = fadd float %145, %165, !dbg !67
  %943 = fadd float %151, %162, !dbg !67
  %944 = fadd float %152, %163, !dbg !67
  %945 = fadd float %153, %164, !dbg !67
  %946 = fadd float %154, %165, !dbg !67
  %947 = fadd float %931, %915, !dbg !68
  %948 = fadd float %932, %916, !dbg !68
  %949 = fadd float %933, %917, !dbg !68
  %950 = fadd float %934, %918, !dbg !68
  %951 = fadd float %935, %919, !dbg !68
  %952 = fadd float %936, %920, !dbg !68
  %953 = fadd float %937, %921, !dbg !68
  %954 = fadd float %938, %922, !dbg !68
  %955 = fadd float %939, %923, !dbg !68
  %956 = fadd float %940, %924, !dbg !68
  %957 = fadd float %941, %925, !dbg !68
  %958 = fadd float %942, %926, !dbg !68
  %959 = fadd float %943, %927, !dbg !68
  %960 = fadd float %944, %928, !dbg !68
  %961 = fadd float %945, %929, !dbg !68
  %962 = fadd float %946, %930, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %963 = bitcast float %947 to i32, !dbg !70
  %964 = bitcast float %948 to i32, !dbg !70
  %965 = bitcast float %949 to i32, !dbg !70
  %966 = bitcast float %950 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %963, i32 %964, i32 %965, i32 %966, ptr addrspace(1) %112, i1 %47) #2, !dbg !70
  %967 = bitcast float %951 to i32, !dbg !70
  %968 = bitcast float %952 to i32, !dbg !70
  %969 = bitcast float %953 to i32, !dbg !70
  %970 = bitcast float %954 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %967, i32 %968, i32 %969, i32 %970, ptr addrspace(1) %114, i1 %48) #2, !dbg !70
  %971 = bitcast float %955 to i32, !dbg !70
  %972 = bitcast float %956 to i32, !dbg !70
  %973 = bitcast float %957 to i32, !dbg !70
  %974 = bitcast float %958 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %971, i32 %972, i32 %973, i32 %974, ptr addrspace(1) %116, i1 %49) #2, !dbg !70
  %975 = bitcast float %959 to i32, !dbg !70
  %976 = bitcast float %960 to i32, !dbg !70
  %977 = bitcast float %961 to i32, !dbg !70
  %978 = bitcast float %962 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %975, i32 %976, i32 %977, i32 %978, ptr addrspace(1) %118, i1 %50) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckq3mudpgtz3thfmgij6dydou2gqzsipmtaudy7526kmqzavnaas.py", directory: "inductor_cache/kq")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_32", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 55, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 60, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 49, column: 51, scope: !7)
!47 = !DILocation(line: 49, column: 64, scope: !7)
!48 = !DILocation(line: 49, column: 58, scope: !7)
!49 = !DILocation(line: 49, column: 30, scope: !7)
!50 = !DILocation(line: 49, column: 69, scope: !7)
!51 = !DILocation(line: 52, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 71, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 35, scope: !7)
!56 = !DILocation(line: 60, column: 52, scope: !7)
!57 = !DILocation(line: 60, column: 31, scope: !7)
!58 = !DILocation(line: 60, column: 71, scope: !7)
!59 = !DILocation(line: 61, column: 31, scope: !7)
!60 = !DILocation(line: 61, column: 72, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 66, column: 20, scope: !7)
!67 = !DILocation(line: 68, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 4, scope: !7)
!70 = !DILocation(line: 71, column: 60, scope: !7)
!71 = !DILocation(line: 71, column: 4, scope: !7)
