; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = srem i32 %13, 24, !dbg !14
  %16 = srem i32 %14, 24, !dbg !14
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %31 = sext i32 %15 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !17
  %33 = sext i32 %16 to i64, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !17
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !18
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !20
  %52 = bitcast i32 %48 to float, !dbg !20
  %53 = bitcast i32 %49 to float, !dbg !20
  %54 = bitcast i32 %50 to float, !dbg !20
  %55 = bitcast i32 %51 to float, !dbg !20
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !20
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !20
  %61 = bitcast i32 %57 to float, !dbg !20
  %62 = bitcast i32 %58 to float, !dbg !20
  %63 = bitcast i32 %59 to float, !dbg !20
  %64 = bitcast i32 %60 to float, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !21
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !21
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !22
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !22
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !22
  %72 = bitcast i32 %68 to float, !dbg !22
  %73 = bitcast i32 %69 to float, !dbg !22
  %74 = bitcast i32 %70 to float, !dbg !22
  %75 = bitcast i32 %71 to float, !dbg !22
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !22
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !22
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !22
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !22
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !22
  %81 = bitcast i32 %77 to float, !dbg !22
  %82 = bitcast i32 %78 to float, !dbg !22
  %83 = bitcast i32 %79 to float, !dbg !22
  %84 = bitcast i32 %80 to float, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !23
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !23
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !24
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !24
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !24
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !24
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !24
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !24
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !25
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !25
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !26
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !26
  %109 = fadd float %52, %72, !dbg !27
  %110 = fadd float %53, %73, !dbg !27
  %111 = fadd float %54, %74, !dbg !27
  %112 = fadd float %55, %75, !dbg !27
  %113 = fadd float %61, %81, !dbg !27
  %114 = fadd float %62, %82, !dbg !27
  %115 = fadd float %63, %83, !dbg !27
  %116 = fadd float %64, %84, !dbg !27
  %117 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %118 = insertelement <2 x i32> %117, i32 %88, i64 1, !dbg !16
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !16
  %120 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !18
  %121 = insertelement <2 x i32> %120, i32 %100, i64 1, !dbg !18
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !18
  %123 = fadd <2 x float> %119, %122, !dbg !28
  %124 = extractelement <2 x float> %123, i64 0, !dbg !29
  %125 = fadd float %124, %109, !dbg !29
  %126 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !16
  %127 = insertelement <2 x i32> %126, i32 %89, i64 1, !dbg !16
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !16
  %129 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !18
  %130 = insertelement <2 x i32> %129, i32 %101, i64 1, !dbg !18
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !18
  %132 = fadd <2 x float> %128, %131, !dbg !28
  %133 = extractelement <2 x float> %132, i64 0, !dbg !29
  %134 = fadd float %133, %110, !dbg !29
  %135 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !16
  %136 = insertelement <2 x i32> %135, i32 %90, i64 1, !dbg !16
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !16
  %138 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !18
  %139 = insertelement <2 x i32> %138, i32 %102, i64 1, !dbg !18
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !18
  %141 = fadd <2 x float> %137, %140, !dbg !28
  %142 = extractelement <2 x float> %141, i64 0, !dbg !29
  %143 = fadd float %142, %111, !dbg !29
  %144 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !16
  %145 = insertelement <2 x i32> %144, i32 %91, i64 1, !dbg !16
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !16
  %147 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !18
  %148 = insertelement <2 x i32> %147, i32 %103, i64 1, !dbg !18
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !18
  %150 = fadd <2 x float> %146, %149, !dbg !28
  %151 = extractelement <2 x float> %150, i64 0, !dbg !29
  %152 = fadd float %151, %112, !dbg !29
  %153 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !16
  %154 = insertelement <2 x i32> %153, i32 %93, i64 1, !dbg !16
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !16
  %156 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !18
  %157 = insertelement <2 x i32> %156, i32 %105, i64 1, !dbg !18
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !18
  %159 = fadd <2 x float> %155, %158, !dbg !28
  %160 = extractelement <2 x float> %159, i64 0, !dbg !29
  %161 = fadd float %160, %113, !dbg !29
  %162 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !16
  %163 = insertelement <2 x i32> %162, i32 %94, i64 1, !dbg !16
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !16
  %165 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !18
  %166 = insertelement <2 x i32> %165, i32 %106, i64 1, !dbg !18
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !18
  %168 = fadd <2 x float> %164, %167, !dbg !28
  %169 = extractelement <2 x float> %168, i64 0, !dbg !29
  %170 = fadd float %169, %114, !dbg !29
  %171 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %172 = insertelement <2 x i32> %171, i32 %95, i64 1, !dbg !16
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !16
  %174 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !18
  %175 = insertelement <2 x i32> %174, i32 %107, i64 1, !dbg !18
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !18
  %177 = fadd <2 x float> %173, %176, !dbg !28
  %178 = extractelement <2 x float> %177, i64 0, !dbg !29
  %179 = fadd float %178, %115, !dbg !29
  %180 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !16
  %181 = insertelement <2 x i32> %180, i32 %96, i64 1, !dbg !16
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !16
  %183 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !18
  %184 = insertelement <2 x i32> %183, i32 %108, i64 1, !dbg !18
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !18
  %186 = fadd <2 x float> %182, %185, !dbg !28
  %187 = extractelement <2 x float> %186, i64 0, !dbg !29
  %188 = fadd float %187, %116, !dbg !29
  %189 = extractelement <2 x float> %123, i64 1, !dbg !30
  %190 = fadd float %125, %189, !dbg !30
  %191 = extractelement <2 x float> %132, i64 1, !dbg !30
  %192 = fadd float %134, %191, !dbg !30
  %193 = extractelement <2 x float> %141, i64 1, !dbg !30
  %194 = fadd float %143, %193, !dbg !30
  %195 = extractelement <2 x float> %150, i64 1, !dbg !30
  %196 = fadd float %152, %195, !dbg !30
  %197 = extractelement <2 x float> %159, i64 1, !dbg !30
  %198 = fadd float %161, %197, !dbg !30
  %199 = extractelement <2 x float> %168, i64 1, !dbg !30
  %200 = fadd float %170, %199, !dbg !30
  %201 = extractelement <2 x float> %177, i64 1, !dbg !30
  %202 = fadd float %179, %201, !dbg !30
  %203 = extractelement <2 x float> %186, i64 1, !dbg !30
  %204 = fadd float %188, %203, !dbg !30
  %205 = bitcast float %190 to i32, !dbg !31
  %206 = bitcast float %192 to i32, !dbg !31
  %207 = bitcast float %194 to i32, !dbg !31
  %208 = bitcast float %196 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %18, i1 true) #1, !dbg !31
  %209 = bitcast float %198 to i32, !dbg !31
  %210 = bitcast float %200 to i32, !dbg !31
  %211 = bitcast float %202 to i32, !dbg !31
  %212 = bitcast float %204 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %210, i32 %211, i32 %212, ptr addrspace(1) %20, i1 true) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyt4ynvetew2ytdibx3li7nqespogtwx3wgzogyu2rw5xtgi3zh4.py", directory: "inductor_cache/yt")
!4 = !{ptr @triton_poi_fused_add_convolution_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_8", linkageName: "triton_poi_fused_add_convolution_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 32, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 19, scope: !7)
!31 = !DILocation(line: 37, column: 40, scope: !7)
!32 = !DILocation(line: 37, column: 4, scope: !7)
