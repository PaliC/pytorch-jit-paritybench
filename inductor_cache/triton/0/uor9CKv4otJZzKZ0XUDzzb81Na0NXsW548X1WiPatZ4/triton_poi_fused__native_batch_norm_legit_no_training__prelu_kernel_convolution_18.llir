; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_convolution_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = srem i32 %15, 64, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %20 = sext i32 %16 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #3, !dbg !27
  %40 = fadd float %31, 0x3EE4F8B580000000, !dbg !28
  %41 = fadd float %32, 0x3EE4F8B580000000, !dbg !28
  %42 = fadd float %33, 0x3EE4F8B580000000, !dbg !28
  %43 = fadd float %34, 0x3EE4F8B580000000, !dbg !28
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %44, 0, !dbg !29
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %45, 0, !dbg !29
  br i1 %.not.i, label %51, label %46, !dbg !29

46:                                               ; preds = %9
  br i1 %.not1.i, label %49, label %47, !dbg !29

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

51:                                               ; preds = %9
  br i1 %.not1.i, label %54, label %52, !dbg !29

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %47, %49, %52, %54
  %.0.i = phi float [ %48, %47 ], [ %50, %49 ], [ %53, %52 ], [ %55, %54 ], !dbg !29
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %56, 0, !dbg !29
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %57, 0, !dbg !29
  br i1 %.not.i1, label %63, label %58, !dbg !29

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %61, label %59, !dbg !29

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !29

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %59, %61, %64, %66
  %.0.i3 = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !29
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %68, 0, !dbg !29
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %69, 0, !dbg !29
  br i1 %.not.i6, label %75, label %70, !dbg !29

70:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %73, label %71, !dbg !29

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

75:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %78, label %76, !dbg !29

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %71, %73, %76, %78
  %.0.i8 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !29
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %80, 0, !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %81, 0, !dbg !29
  br i1 %.not.i11, label %87, label %82, !dbg !29

82:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %85, label %83, !dbg !29

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

87:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %90, label %88, !dbg !29

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %83, %85, %88, %90
  %.0.i13 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %93 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %94 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %95 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %96 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %97 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %98 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %99 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %100 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %101 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %102 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %103 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %104 = bitcast i32 %39 to float, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %117 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !16
  %118 = insertelement <4 x i32> %117, i32 %95, i64 1, !dbg !16
  %119 = insertelement <4 x i32> %118, i32 %98, i64 2, !dbg !16
  %120 = insertelement <4 x i32> %119, i32 %101, i64 3, !dbg !16
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !16
  %122 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !18
  %123 = insertelement <4 x i32> %122, i32 %96, i64 1, !dbg !18
  %124 = insertelement <4 x i32> %123, i32 %99, i64 2, !dbg !18
  %125 = insertelement <4 x i32> %124, i32 %102, i64 3, !dbg !18
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !18
  %127 = fadd <4 x float> %121, %126, !dbg !31
  %128 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !20
  %129 = insertelement <4 x i32> %128, i32 %97, i64 1, !dbg !20
  %130 = insertelement <4 x i32> %129, i32 %100, i64 2, !dbg !20
  %131 = insertelement <4 x i32> %130, i32 %103, i64 3, !dbg !20
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !20
  %133 = fsub <4 x float> %127, %132, !dbg !32
  %134 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !26
  %135 = insertelement <4 x i32> %134, i32 %106, i64 1, !dbg !26
  %136 = insertelement <4 x i32> %135, i32 %107, i64 2, !dbg !26
  %137 = insertelement <4 x i32> %136, i32 %108, i64 3, !dbg !26
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !26
  %139 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !24
  %140 = insertelement <4 x i32> %139, i32 %110, i64 1, !dbg !24
  %141 = insertelement <4 x i32> %140, i32 %111, i64 2, !dbg !24
  %142 = insertelement <4 x i32> %141, i32 %112, i64 3, !dbg !24
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !24
  %144 = insertelement <4 x float> poison, float %116, i64 0, !dbg !33
  %145 = insertelement <4 x float> %144, float %115, i64 1, !dbg !33
  %146 = insertelement <4 x float> %145, float %114, i64 2, !dbg !33
  %147 = insertelement <4 x float> %146, float %113, i64 3, !dbg !33
  %148 = fmul <4 x float> %133, %147, !dbg !33
  %149 = fmul <4 x float> %148, %143, !dbg !34
  %150 = fadd <4 x float> %149, %138, !dbg !35
  %151 = fcmp ogt <4 x float> %150, zeroinitializer, !dbg !36
  %152 = extractelement <4 x float> %150, i64 3, !dbg !37
  %153 = fmul float %152, %104, !dbg !38
  %154 = extractelement <4 x float> %150, i64 2, !dbg !37
  %155 = fmul float %154, %104, !dbg !38
  %156 = extractelement <4 x float> %150, i64 1, !dbg !37
  %157 = fmul float %156, %104, !dbg !38
  %158 = extractelement <4 x float> %150, i64 0, !dbg !37
  %159 = fmul float %158, %104, !dbg !38
  %160 = extractelement <4 x i1> %151, i64 3, !dbg !37
  %161 = select i1 %160, float %152, float %153, !dbg !37
  %162 = extractelement <4 x i1> %151, i64 2, !dbg !37
  %163 = select i1 %162, float %154, float %155, !dbg !37
  %164 = extractelement <4 x i1> %151, i64 1, !dbg !37
  %165 = select i1 %164, float %156, float %157, !dbg !37
  %166 = extractelement <4 x i1> %151, i64 0, !dbg !37
  %167 = select i1 %166, float %158, float %159, !dbg !37
  %bc = bitcast <4 x float> %127 to <4 x i32>, !dbg !39
  %168 = extractelement <4 x i32> %bc, i64 3, !dbg !39
  %bc16 = bitcast <4 x float> %127 to <4 x i32>, !dbg !39
  %169 = extractelement <4 x i32> %bc16, i64 2, !dbg !39
  %bc17 = bitcast <4 x float> %127 to <4 x i32>, !dbg !39
  %170 = extractelement <4 x i32> %bc17, i64 1, !dbg !39
  %bc18 = bitcast <4 x float> %127 to <4 x i32>, !dbg !39
  %171 = extractelement <4 x i32> %bc18, i64 0, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %168, i32 %169, i32 %170, i32 %171, ptr addrspace(1) %18, i1 true) #3, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !40
  %173 = bitcast float %161 to i32, !dbg !41
  %174 = bitcast float %163 to i32, !dbg !41
  %175 = bitcast float %165 to i32, !dbg !41
  %176 = bitcast float %167 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %174, i32 %175, i32 %176, ptr addrspace(1) %172, i1 true) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2jnmluvbr5pp7gr3crkih7v6ftrbsb2lbanexnbyljslexjrvmy.py", directory: "inductor_cache/2j")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_convolution_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_convolution_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_convolution_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_convolution_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 20, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 26, scope: !7)
!30 = !DILocation(line: 40, column: 19, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 35, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 39, scope: !7)
!40 = !DILocation(line: 51, column: 28, scope: !7)
!41 = !DILocation(line: 51, column: 40, scope: !7)
!42 = !DILocation(line: 51, column: 4, scope: !7)
