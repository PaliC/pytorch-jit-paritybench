; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_logsumexp_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = sdiv i32 %9, 4, !dbg !15
  %12 = sext i32 %9 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %13, i1 %10) #2, !dbg !17
  %15 = shl nsw i32 %11, 2, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %10) #2, !dbg !20
  %19 = bitcast i32 %18 to float, !dbg !20
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %10) #2, !dbg !20
  %21 = bitcast i32 %20 to float, !dbg !20
  %22 = or disjoint i32 %15, 1, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #2, !dbg !23
  %26 = bitcast i32 %25 to float, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #2, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = or disjoint i32 %15, 2, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %10) #2, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %10) #2, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = or disjoint i32 %15, 3, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %10) #2, !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %10) #2, !dbg !29
  %42 = bitcast i32 %41 to float, !dbg !29
  %43 = fcmp ogt float %19, %26, !dbg !30
  %44 = fcmp ogt float %21, %28, !dbg !30
  %45 = fcmp uno float %19, 0.000000e+00, !dbg !34
  %46 = fcmp uno float %21, 0.000000e+00, !dbg !34
  %47 = or i1 %45, %43, !dbg !35
  %48 = or i1 %46, %44, !dbg !35
  %49 = select i1 %47, float %19, float %26, !dbg !36
  %50 = select i1 %48, float %21, float %28, !dbg !36
  %51 = fcmp ogt float %49, %33, !dbg !37
  %52 = fcmp ogt float %50, %35, !dbg !37
  %53 = fcmp uno float %49, 0.000000e+00, !dbg !39
  %54 = fcmp uno float %50, 0.000000e+00, !dbg !39
  %55 = or i1 %51, %53, !dbg !40
  %56 = or i1 %52, %54, !dbg !40
  %57 = select i1 %55, float %49, float %33, !dbg !41
  %58 = select i1 %56, float %50, float %35, !dbg !41
  %59 = fcmp ogt float %57, %40, !dbg !42
  %60 = fcmp ogt float %58, %42, !dbg !42
  %61 = fcmp uno float %57, 0.000000e+00, !dbg !44
  %62 = fcmp uno float %58, 0.000000e+00, !dbg !44
  %63 = or i1 %59, %61, !dbg !45
  %64 = or i1 %60, %62, !dbg !45
  %65 = select i1 %63, float %57, float %40, !dbg !46
  %66 = select i1 %64, float %58, float %42, !dbg !46
  %67 = tail call float @llvm.fabs.f32(float %65), !dbg !47
  %68 = tail call float @llvm.fabs.f32(float %66), !dbg !47
  %69 = fcmp oeq float %67, 0x7FF0000000000000, !dbg !48
  %70 = fcmp oeq float %68, 0x7FF0000000000000, !dbg !48
  %71 = select i1 %69, float 0.000000e+00, float %65, !dbg !49
  %72 = select i1 %70, float 0.000000e+00, float %66, !dbg !49
  %73 = fsub float %19, %71, !dbg !50
  %74 = fsub float %21, %72, !dbg !50
  %75 = fmul float %73, 0x3FF7154760000000, !dbg !51
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #2, !dbg !51
  %77 = fmul float %74, 0x3FF7154760000000, !dbg !51
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #2, !dbg !51
  %79 = fsub float %26, %71, !dbg !52
  %80 = fsub float %28, %72, !dbg !52
  %81 = fmul float %79, 0x3FF7154760000000, !dbg !53
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #2, !dbg !53
  %83 = fmul float %80, 0x3FF7154760000000, !dbg !53
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #2, !dbg !53
  %85 = fadd float %76, %82, !dbg !54
  %86 = fadd float %78, %84, !dbg !54
  %87 = fsub float %33, %71, !dbg !55
  %88 = fsub float %35, %72, !dbg !55
  %89 = fmul float %87, 0x3FF7154760000000, !dbg !56
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #2, !dbg !56
  %91 = fmul float %88, 0x3FF7154760000000, !dbg !56
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #2, !dbg !56
  %93 = fadd float %85, %90, !dbg !57
  %94 = fadd float %86, %92, !dbg !57
  %95 = fsub float %40, %71, !dbg !58
  %96 = fsub float %42, %72, !dbg !58
  %97 = fmul float %95, 0x3FF7154760000000, !dbg !59
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %97) #2, !dbg !59
  %99 = fmul float %96, 0x3FF7154760000000, !dbg !59
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #2, !dbg !59
  %101 = fadd float %93, %98, !dbg !60
  %102 = fadd float %94, %100, !dbg !60
  %103 = fcmp olt float %101, 0x3810000000000000, !dbg !61
  %104 = fmul float %101, 0x4160000000000000, !dbg !61
  %.02.i = select i1 %103, float %104, float %101, !dbg !61
  %i.i.0.i = select i1 %103, float -2.300000e+01, float 0.000000e+00, !dbg !61
  %105 = bitcast float %.02.i to i32, !dbg !61
  %106 = add i32 %105, -1059760811, !dbg !61
  %107 = and i32 %106, -8388608, !dbg !61
  %108 = sub i32 %105, %107, !dbg !61
  %109 = bitcast i32 %108 to float, !dbg !61
  %110 = sitofp i32 %107 to float, !dbg !61
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not.i = icmp eq i32 %111, 0, !dbg !61
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %110, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !61
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %110, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !61
  %.08.i = select i1 %.not.i, float %113, float %112, !dbg !61
  %114 = fadd float %109, -1.000000e+00, !dbg !61
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not1.i = icmp eq i32 %115, 0, !dbg !61
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %114, float 0x3FC2073EC0000000) #2, !dbg !61
  %117 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %114, float 0x3FC2073EC0000000) #2, !dbg !61
  %.010.i = select i1 %.not1.i, float %117, float %116, !dbg !61
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not2.i = icmp eq i32 %118, 0, !dbg !61
  %119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %114, float 0xBFBF19B980000000) #2, !dbg !61
  %120 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %114, float 0xBFBF19B980000000) #2, !dbg !61
  %.011.i = select i1 %.not2.i, float %120, float %119, !dbg !61
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not3.i = icmp eq i32 %121, 0, !dbg !61
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %114, float 0x3FC1E52AA0000000) #2, !dbg !61
  %123 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %114, float 0x3FC1E52AA0000000) #2, !dbg !61
  %.012.i = select i1 %.not3.i, float %123, float %122, !dbg !61
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not4.i = icmp eq i32 %124, 0, !dbg !61
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %114, float 0xBFC55B1720000000) #2, !dbg !61
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %114, float 0xBFC55B1720000000) #2, !dbg !61
  %.09.i = select i1 %.not4.i, float %126, float %125, !dbg !61
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not5.i = icmp eq i32 %127, 0, !dbg !61
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %114, float 0x3FC99DA160000000) #2, !dbg !61
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %114, float 0x3FC99DA160000000) #2, !dbg !61
  %.05.i = select i1 %.not5.i, float %129, float %128, !dbg !61
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not6.i = icmp eq i32 %130, 0, !dbg !61
  %131 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %114, float 0xBFCFFFE440000000) #2, !dbg !61
  %132 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %114, float 0xBFCFFFE440000000) #2, !dbg !61
  %.01.i = select i1 %.not6.i, float %132, float %131, !dbg !61
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not7.i = icmp eq i32 %133, 0, !dbg !61
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %114, float 0x3FD5554F00000000) #2, !dbg !61
  %135 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %114, float 0x3FD5554F00000000) #2, !dbg !61
  %.0.i = select i1 %.not7.i, float %135, float %134, !dbg !61
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not8.i = icmp eq i32 %136, 0, !dbg !61
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %114, float -5.000000e-01) #2, !dbg !61
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %114, float -5.000000e-01) #2, !dbg !61
  %.07.i = select i1 %.not8.i, float %138, float %137, !dbg !61
  %139 = fmul float %114, %.07.i, !dbg !61
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not9.i = icmp eq i32 %140, 0, !dbg !61
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %139, float %114, float %114) #2, !dbg !61
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %139, float %114, float %114) #2, !dbg !61
  %.06.i = select i1 %.not9.i, float %142, float %141, !dbg !61
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not10.i = icmp eq i32 %143, 0, !dbg !61
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !61
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !61
  %.04.i = select i1 %.not10.i, float %145, float %144, !dbg !61
  %146 = icmp ugt i32 %105, 2139095039, !dbg !61
  br i1 %146, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !61

__nv_fmaf_rn.exit.i.i:                            ; preds = %3
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not11.i = icmp eq i32 %147, 0, !dbg !61
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !61
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !61
  %.03.i = select i1 %.not11.i, float %149, float %148, !dbg !61
  br label %__nv_logf.exit, !dbg !61

__nv_logf.exit:                                   ; preds = %3, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %3 ], !dbg !61
  %150 = fcmp olt float %102, 0x3810000000000000, !dbg !61
  %151 = fmul float %102, 0x4160000000000000, !dbg !61
  %.02.i1 = select i1 %150, float %151, float %102, !dbg !61
  %i.i.0.i2 = select i1 %150, float -2.300000e+01, float 0.000000e+00, !dbg !61
  %152 = bitcast float %.02.i1 to i32, !dbg !61
  %153 = add i32 %152, -1059760811, !dbg !61
  %154 = and i32 %153, -8388608, !dbg !61
  %155 = sub i32 %152, %154, !dbg !61
  %156 = bitcast i32 %155 to float, !dbg !61
  %157 = sitofp i32 %154 to float, !dbg !61
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not.i3 = icmp eq i32 %158, 0, !dbg !61
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %157, float 0x3E80000000000000, float %i.i.0.i2) #2, !dbg !61
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %157, float 0x3E80000000000000, float %i.i.0.i2) #2, !dbg !61
  %.08.i4 = select i1 %.not.i3, float %160, float %159, !dbg !61
  %161 = fadd float %156, -1.000000e+00, !dbg !61
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not1.i5 = icmp eq i32 %162, 0, !dbg !61
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %161, float 0x3FC2073EC0000000) #2, !dbg !61
  %164 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %161, float 0x3FC2073EC0000000) #2, !dbg !61
  %.010.i6 = select i1 %.not1.i5, float %164, float %163, !dbg !61
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not2.i7 = icmp eq i32 %165, 0, !dbg !61
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i6, float %161, float 0xBFBF19B980000000) #2, !dbg !61
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i6, float %161, float 0xBFBF19B980000000) #2, !dbg !61
  %.011.i8 = select i1 %.not2.i7, float %167, float %166, !dbg !61
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not3.i9 = icmp eq i32 %168, 0, !dbg !61
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i8, float %161, float 0x3FC1E52AA0000000) #2, !dbg !61
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i8, float %161, float 0x3FC1E52AA0000000) #2, !dbg !61
  %.012.i10 = select i1 %.not3.i9, float %170, float %169, !dbg !61
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not4.i11 = icmp eq i32 %171, 0, !dbg !61
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i10, float %161, float 0xBFC55B1720000000) #2, !dbg !61
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i10, float %161, float 0xBFC55B1720000000) #2, !dbg !61
  %.09.i12 = select i1 %.not4.i11, float %173, float %172, !dbg !61
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not5.i13 = icmp eq i32 %174, 0, !dbg !61
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i12, float %161, float 0x3FC99DA160000000) #2, !dbg !61
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i12, float %161, float 0x3FC99DA160000000) #2, !dbg !61
  %.05.i14 = select i1 %.not5.i13, float %176, float %175, !dbg !61
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not6.i15 = icmp eq i32 %177, 0, !dbg !61
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %161, float 0xBFCFFFE440000000) #2, !dbg !61
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %161, float 0xBFCFFFE440000000) #2, !dbg !61
  %.01.i16 = select i1 %.not6.i15, float %179, float %178, !dbg !61
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not7.i17 = icmp eq i32 %180, 0, !dbg !61
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i16, float %161, float 0x3FD5554F00000000) #2, !dbg !61
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i16, float %161, float 0x3FD5554F00000000) #2, !dbg !61
  %.0.i18 = select i1 %.not7.i17, float %182, float %181, !dbg !61
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not8.i19 = icmp eq i32 %183, 0, !dbg !61
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %161, float -5.000000e-01) #2, !dbg !61
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %161, float -5.000000e-01) #2, !dbg !61
  %.07.i20 = select i1 %.not8.i19, float %185, float %184, !dbg !61
  %186 = fmul float %161, %.07.i20, !dbg !61
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not9.i21 = icmp eq i32 %187, 0, !dbg !61
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %186, float %161, float %161) #2, !dbg !61
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %186, float %161, float %161) #2, !dbg !61
  %.06.i22 = select i1 %.not9.i21, float %189, float %188, !dbg !61
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not10.i23 = icmp eq i32 %190, 0, !dbg !61
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #2, !dbg !61
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #2, !dbg !61
  %.04.i24 = select i1 %.not10.i23, float %192, float %191, !dbg !61
  %193 = icmp ugt i32 %152, 2139095039, !dbg !61
  br i1 %193, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !61

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !61
  %.not11.i28 = icmp eq i32 %194, 0, !dbg !61
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !61
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !61
  %.03.i29 = select i1 %.not11.i28, float %196, float %195, !dbg !61
  br label %__nv_logf.exit30, !dbg !61

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %r.i.0.i25 = phi float [ %.03.i29, %__nv_fmaf_rn.exit.i.i27 ], [ %.04.i24, %__nv_logf.exit ], !dbg !61
  %197 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !61
  %r.i.1.i = select i1 %197, float 0xFFF0000000000000, float %r.i.0.i, !dbg !61
  %198 = extractvalue { i32, i32 } %14, 1, !dbg !17
  %199 = bitcast i32 %198 to float, !dbg !17
  %200 = extractvalue { i32, i32 } %14, 0, !dbg !17
  %201 = bitcast i32 %200 to float, !dbg !17
  %202 = fcmp oeq float %.02.i1, 0.000000e+00, !dbg !61
  %r.i.1.i26 = select i1 %202, float 0xFFF0000000000000, float %r.i.0.i25, !dbg !61
  %203 = fadd float %71, %r.i.1.i, !dbg !62
  %204 = fadd float %72, %r.i.1.i26, !dbg !62
  %205 = fsub float %201, %203, !dbg !63
  %206 = fsub float %199, %204, !dbg !63
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !64
  %208 = bitcast float %205 to i32, !dbg !65
  %209 = bitcast float %206 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %208, i32 %209, ptr addrspace(1) %207, i1 %10) #2, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwlqjmfjpgzvwmtnkyz6fcd2hbvr7bg65zfeyyffgm6nctvx7qnh.py", directory: "inductor_cache/wl")
!4 = !{ptr @triton_poi_fused_logsumexp_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_logsumexp_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_logsumexp_sub_0", linkageName: "triton_poi_fused_logsumexp_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 32, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 34, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 34, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 31, column: 40, scope: !7)
!34 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !38)
!38 = !DILocation(line: 32, column: 40, scope: !7)
!39 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !38)
!40 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !38)
!41 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !38)
!42 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !43)
!43 = !DILocation(line: 33, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !43)
!47 = !DILocation(line: 34, column: 23, scope: !7)
!48 = !DILocation(line: 36, column: 20, scope: !7)
!49 = !DILocation(line: 38, column: 35, scope: !7)
!50 = !DILocation(line: 39, column: 19, scope: !7)
!51 = !DILocation(line: 40, column: 24, scope: !7)
!52 = !DILocation(line: 41, column: 19, scope: !7)
!53 = !DILocation(line: 42, column: 24, scope: !7)
!54 = !DILocation(line: 43, column: 20, scope: !7)
!55 = !DILocation(line: 44, column: 19, scope: !7)
!56 = !DILocation(line: 45, column: 24, scope: !7)
!57 = !DILocation(line: 46, column: 20, scope: !7)
!58 = !DILocation(line: 47, column: 19, scope: !7)
!59 = !DILocation(line: 48, column: 24, scope: !7)
!60 = !DILocation(line: 49, column: 20, scope: !7)
!61 = !DILocation(line: 50, column: 24, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 52, column: 19, scope: !7)
!64 = !DILocation(line: 53, column: 25, scope: !7)
!65 = !DILocation(line: 53, column: 37, scope: !7)
!66 = !DILocation(line: 53, column: 4, scope: !7)
