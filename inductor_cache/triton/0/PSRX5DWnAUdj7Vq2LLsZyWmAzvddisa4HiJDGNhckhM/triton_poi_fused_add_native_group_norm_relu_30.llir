; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = srem i32 %18, 1024, !dbg !14
  %20 = sdiv i32 %18, 16384, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = shl nsw i32 %20, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %19 to i16, !dbg !19
  %25 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %25 to i32, !dbg !19
  %26 = add nsw i32 %24, %.sext, !dbg !20
  %27 = sext i32 %26 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %39 = bitcast i32 %38 to float, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = sext i32 %19 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !27
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !29
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %9, i64 %42, !dbg !35
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %42, !dbg !37
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !38
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 5.120000e+02) #3, !dbg !39
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 5.120000e+02) #3, !dbg !39
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 5.120000e+02) #3, !dbg !39
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 5.120000e+02) #3, !dbg !39
  %71 = fadd float %67, 0x3EE4F8B580000000, !dbg !40
  %72 = fadd float %68, 0x3EE4F8B580000000, !dbg !40
  %73 = fadd float %69, 0x3EE4F8B580000000, !dbg !40
  %74 = fadd float %70, 0x3EE4F8B580000000, !dbg !40
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %75, 0, !dbg !41
  br i1 %.not.i, label %78, label %76, !dbg !41

76:                                               ; preds = %12
  %77 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %71), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

78:                                               ; preds = %12
  %79 = tail call float @llvm.nvvm.rsqrt.approx.f(float %71), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %76, %78
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], !dbg !41
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %80, 0, !dbg !41
  br i1 %.not.i1, label %83, label %81, !dbg !41

81:                                               ; preds = %__nv_rsqrtf.exit
  %82 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %72), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

83:                                               ; preds = %__nv_rsqrtf.exit
  %84 = tail call float @llvm.nvvm.rsqrt.approx.f(float %72), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %81, %83
  %.0.i2 = phi float [ %82, %81 ], [ %84, %83 ], !dbg !41
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i4 = icmp eq i32 %85, 0, !dbg !41
  br i1 %.not.i4, label %88, label %86, !dbg !41

86:                                               ; preds = %__nv_rsqrtf.exit3
  %87 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %73), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

88:                                               ; preds = %__nv_rsqrtf.exit3
  %89 = tail call float @llvm.nvvm.rsqrt.approx.f(float %73), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

__nv_rsqrtf.exit6:                                ; preds = %86, %88
  %.0.i5 = phi float [ %87, %86 ], [ %89, %88 ], !dbg !41
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i7 = icmp eq i32 %90, 0, !dbg !41
  br i1 %.not.i7, label %93, label %91, !dbg !41

91:                                               ; preds = %__nv_rsqrtf.exit6
  %92 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %74), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

93:                                               ; preds = %__nv_rsqrtf.exit6
  %94 = tail call float @llvm.nvvm.rsqrt.approx.f(float %74), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

__nv_rsqrtf.exit9:                                ; preds = %91, %93
  %.0.i8 = phi float [ %92, %91 ], [ %94, %93 ], !dbg !41
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 5.120000e+02) #3, !dbg !42
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 5.120000e+02) #3, !dbg !42
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 5.120000e+02) #3, !dbg !42
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 5.120000e+02) #3, !dbg !42
  %99 = fadd float %95, 0x3EE4F8B580000000, !dbg !43
  %100 = fadd float %96, 0x3EE4F8B580000000, !dbg !43
  %101 = fadd float %97, 0x3EE4F8B580000000, !dbg !43
  %102 = fadd float %98, 0x3EE4F8B580000000, !dbg !43
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i10 = icmp eq i32 %103, 0, !dbg !44
  br i1 %.not.i10, label %106, label %104, !dbg !44

104:                                              ; preds = %__nv_rsqrtf.exit9
  %105 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !44
  br label %__nv_rsqrtf.exit12, !dbg !44

106:                                              ; preds = %__nv_rsqrtf.exit9
  %107 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !44
  br label %__nv_rsqrtf.exit12, !dbg !44

__nv_rsqrtf.exit12:                               ; preds = %104, %106
  %.0.i11 = phi float [ %105, %104 ], [ %107, %106 ], !dbg !44
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i13 = icmp eq i32 %108, 0, !dbg !44
  br i1 %.not.i13, label %111, label %109, !dbg !44

109:                                              ; preds = %__nv_rsqrtf.exit12
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !44
  br label %__nv_rsqrtf.exit15, !dbg !44

111:                                              ; preds = %__nv_rsqrtf.exit12
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !44
  br label %__nv_rsqrtf.exit15, !dbg !44

__nv_rsqrtf.exit15:                               ; preds = %109, %111
  %.0.i14 = phi float [ %110, %109 ], [ %112, %111 ], !dbg !44
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i16 = icmp eq i32 %113, 0, !dbg !44
  br i1 %.not.i16, label %116, label %114, !dbg !44

114:                                              ; preds = %__nv_rsqrtf.exit15
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

116:                                              ; preds = %__nv_rsqrtf.exit15
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

__nv_rsqrtf.exit18:                               ; preds = %114, %116
  %.0.i17 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !44
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i19 = icmp eq i32 %118, 0, !dbg !44
  br i1 %.not.i19, label %121, label %119, !dbg !44

119:                                              ; preds = %__nv_rsqrtf.exit18
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %102), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

121:                                              ; preds = %__nv_rsqrtf.exit18
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %102), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

__nv_rsqrtf.exit21:                               ; preds = %119, %121
  %.0.i20 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !44
  %123 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %124 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !22
  %125 = insertelement <2 x i32> %124, i32 %53, i64 1, !dbg !22
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !22
  %127 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %128 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !22
  %129 = insertelement <2 x i32> %128, i32 %52, i64 1, !dbg !22
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !22
  %131 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %132 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !22
  %133 = insertelement <2 x i32> %132, i32 %51, i64 1, !dbg !22
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !22
  %135 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %136 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !22
  %137 = insertelement <2 x i32> %136, i32 %50, i64 1, !dbg !22
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !22
  %139 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %140 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %143 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %144 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %146 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %147 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %149 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %150 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %151 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !38
  %153 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !38
  %154 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !38
  %155 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !36
  %159 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !17
  %160 = insertelement <2 x i32> %159, i32 %135, i64 1, !dbg !17
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !17
  %162 = fsub <2 x float> %161, %138, !dbg !45
  %163 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !28
  %164 = insertelement <2 x i32> %163, i32 %154, i64 1, !dbg !28
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !28
  %166 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !26
  %167 = insertelement <2 x i32> %166, i32 %158, i64 1, !dbg !26
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !26
  %169 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !46
  %170 = insertelement <2 x float> %169, float %.0.i11, i64 1, !dbg !46
  %171 = fmul <2 x float> %162, %170, !dbg !46
  %172 = fmul <2 x float> %171, %168, !dbg !47
  %173 = fadd <2 x float> %172, %165, !dbg !48
  %174 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !17
  %175 = insertelement <2 x i32> %174, i32 %131, i64 1, !dbg !17
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !17
  %177 = fsub <2 x float> %176, %134, !dbg !45
  %178 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !28
  %179 = insertelement <2 x i32> %178, i32 %153, i64 1, !dbg !28
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !28
  %181 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !26
  %182 = insertelement <2 x i32> %181, i32 %157, i64 1, !dbg !26
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !26
  %184 = insertelement <2 x float> poison, float %.0.i2, i64 0, !dbg !46
  %185 = insertelement <2 x float> %184, float %.0.i14, i64 1, !dbg !46
  %186 = fmul <2 x float> %177, %185, !dbg !46
  %187 = fmul <2 x float> %186, %183, !dbg !47
  %188 = fadd <2 x float> %187, %180, !dbg !48
  %189 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !17
  %190 = insertelement <2 x i32> %189, i32 %127, i64 1, !dbg !17
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !17
  %192 = fsub <2 x float> %191, %130, !dbg !45
  %193 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !28
  %194 = insertelement <2 x i32> %193, i32 %152, i64 1, !dbg !28
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !28
  %196 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !26
  %197 = insertelement <2 x i32> %196, i32 %156, i64 1, !dbg !26
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !26
  %199 = insertelement <2 x float> poison, float %.0.i5, i64 0, !dbg !46
  %200 = insertelement <2 x float> %199, float %.0.i17, i64 1, !dbg !46
  %201 = fmul <2 x float> %192, %200, !dbg !46
  %202 = fmul <2 x float> %201, %198, !dbg !47
  %203 = fadd <2 x float> %202, %195, !dbg !48
  %204 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !17
  %205 = insertelement <2 x i32> %204, i32 %123, i64 1, !dbg !17
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !17
  %207 = fsub <2 x float> %206, %126, !dbg !45
  %208 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !28
  %209 = insertelement <2 x i32> %208, i32 %151, i64 1, !dbg !28
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !28
  %211 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !26
  %212 = insertelement <2 x i32> %211, i32 %155, i64 1, !dbg !26
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !26
  %214 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !46
  %215 = insertelement <2 x float> %214, float %.0.i20, i64 1, !dbg !46
  %216 = fmul <2 x float> %207, %215, !dbg !46
  %217 = fmul <2 x float> %216, %213, !dbg !47
  %218 = fadd <2 x float> %217, %210, !dbg !48
  %shift = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %219 = fadd <2 x float> %173, %shift, !dbg !49
  %220 = extractelement <2 x float> %219, i64 0, !dbg !49
  %shift22 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %221 = fadd <2 x float> %188, %shift22, !dbg !49
  %222 = extractelement <2 x float> %221, i64 0, !dbg !49
  %shift23 = shufflevector <2 x float> %203, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %223 = fadd <2 x float> %203, %shift23, !dbg !49
  %224 = extractelement <2 x float> %223, i64 0, !dbg !49
  %shift24 = shufflevector <2 x float> %218, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %225 = fadd <2 x float> %218, %shift24, !dbg !49
  %226 = extractelement <2 x float> %225, i64 0, !dbg !49
  %227 = fcmp olt float %220, 0.000000e+00, !dbg !50
  %228 = fcmp olt float %222, 0.000000e+00, !dbg !50
  %229 = fcmp olt float %224, 0.000000e+00, !dbg !50
  %230 = fcmp olt float %226, 0.000000e+00, !dbg !50
  %231 = select i1 %227, float 0.000000e+00, float %220, !dbg !54
  %232 = select i1 %228, float 0.000000e+00, float %222, !dbg !54
  %233 = select i1 %229, float 0.000000e+00, float %224, !dbg !54
  %234 = select i1 %230, float 0.000000e+00, float %226, !dbg !54
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !55
  %236 = bitcast float %231 to i32, !dbg !56
  %237 = bitcast float %232 to i32, !dbg !56
  %238 = bitcast float %233 to i32, !dbg !56
  %239 = bitcast float %234 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %236, i32 %237, i32 %238, i32 %239, ptr addrspace(1) %235, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7xadotfrzwphcper4pyuusg56zq4zavgt6bvzoaqnztz5f3skd.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_30", linkageName: "triton_poi_fused_add_native_group_norm_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 52, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 52, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 28, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 28, scope: !7)
!56 = !DILocation(line: 56, column: 40, scope: !7)
!57 = !DILocation(line: 56, column: 4, scope: !7)
