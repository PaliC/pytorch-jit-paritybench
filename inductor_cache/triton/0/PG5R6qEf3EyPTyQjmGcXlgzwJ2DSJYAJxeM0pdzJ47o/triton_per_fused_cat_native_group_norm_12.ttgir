#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0)
#loc1 = loc(unknown)
#loc44 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":57:59)
#loc51 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":64:59)
#loc66 = loc(callsite(#loc1 at #loc44))
#loc70 = loc(callsite(#loc1 at #loc51))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cat_native_group_norm_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_1 = arith.constant 1.024000e+03 : f32 loc(#loc1)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<-96> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<-64> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<96> : tensor<1024xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<1024xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<1024xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc3)
    %2 = arith.divsi %1, %cst_7 : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = arith.remsi %0, %c32_i32 : i32 loc(#loc5)
    %4 = arith.remsi %1, %cst_7 : tensor<1024xi32, #blocked> loc(#loc6)
    %5 = arith.divsi %0, %c32_i32 : i32 loc(#loc7)
    %6 = arith.muli %0, %c1024_i32 : i32 loc(#loc8)
    %7 = tt.splat %6 : i32 -> tensor<1024xi32, #blocked> loc(#loc9)
    %8 = arith.addi %1, %7 : tensor<1024xi32, #blocked> loc(#loc9)
    %9 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %10 = tt.addptr %9, %8 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc10)
    %11 = tt.load %10 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = arith.muli %3, %c4_i32 : i32 loc(#loc12)
    %13 = tt.splat %12 : i32 -> tensor<1024xi32, #blocked> loc(#loc13)
    %14 = arith.addi %2, %13 : tensor<1024xi32, #blocked> loc(#loc13)
    %15 = arith.extsi %14 : tensor<1024xi32, #blocked> to tensor<1024xi64, #blocked> loc(#loc14)
    %16 = arith.cmpi slt, %15, %cst_6 : tensor<1024xi64, #blocked> loc(#loc14)
    %17 = arith.muli %14, %cst_7 : tensor<1024xi32, #blocked> loc(#loc15)
    %18 = arith.addi %4, %17 : tensor<1024xi32, #blocked> loc(#loc16)
    %19 = arith.muli %5, %c16384_i32 : i32 loc(#loc17)
    %20 = tt.splat %19 : i32 -> tensor<1024xi32, #blocked> loc(#loc18)
    %21 = arith.addi %18, %20 : tensor<1024xi32, #blocked> loc(#loc18)
    %22 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc19)
    %23 = tt.addptr %22, %21 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc19)
    %24 = tt.load %23, %16, %cst : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc20)
    %25 = arith.cmpi sge, %15, %cst_6 : tensor<1024xi64, #blocked> loc(#loc21)
    %26 = arith.cmpi slt, %15, %cst_5 : tensor<1024xi64, #blocked> loc(#loc22)
    %27 = arith.andi %25, %26 : tensor<1024xi1, #blocked> loc(#loc23)
    %28 = arith.addi %2, %cst_4 : tensor<1024xi32, #blocked> loc(#loc24)
    %29 = arith.addi %28, %13 : tensor<1024xi32, #blocked> loc(#loc25)
    %30 = arith.muli %29, %cst_7 : tensor<1024xi32, #blocked> loc(#loc26)
    %31 = arith.addi %4, %30 : tensor<1024xi32, #blocked> loc(#loc27)
    %32 = arith.muli %5, %c8192_i32 : i32 loc(#loc28)
    %33 = tt.splat %32 : i32 -> tensor<1024xi32, #blocked> loc(#loc29)
    %34 = arith.addi %31, %33 : tensor<1024xi32, #blocked> loc(#loc29)
    %35 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc30)
    %36 = tt.addptr %35, %34 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc30)
    %37 = tt.load %36, %27, %cst : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc31)
    %38 = arith.cmpi sge, %15, %cst_5 : tensor<1024xi64, #blocked> loc(#loc32)
    %39 = arith.addi %2, %cst_3 : tensor<1024xi32, #blocked> loc(#loc33)
    %40 = arith.addi %39, %13 : tensor<1024xi32, #blocked> loc(#loc34)
    %41 = arith.muli %40, %cst_7 : tensor<1024xi32, #blocked> loc(#loc35)
    %42 = arith.addi %4, %41 : tensor<1024xi32, #blocked> loc(#loc36)
    %43 = arith.addi %42, %33 : tensor<1024xi32, #blocked> loc(#loc37)
    %44 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc38)
    %45 = tt.addptr %44, %43 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc38)
    %46 = tt.load %45, %38, %cst : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc39)
    %47 = arith.select %27, %37, %46 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc40)
    %48 = arith.select %16, %24, %47 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc41)
    %49 = arith.addf %48, %11 : tensor<1024xf32, #blocked> loc(#loc42)
    %50 = "tt.reduce"(%49) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc44)), %arg11: f32 loc(callsite(#loc1 at #loc44))):
      %72 = arith.addf %arg10, %arg11 : f32 loc(#loc72)
      tt.reduce.return %72 : f32 loc(#loc65)
    }) : (tensor<1024xf32, #blocked>) -> f32 loc(#loc65)
    %51 = arith.addf %50, %cst_2 : f32 loc(#loc68)
    %52 = arith.divf %51, %cst_1 : f32 loc(#loc48)
    %53 = tt.splat %52 : f32 -> tensor<1xf32, #blocked1> loc(#loc48)
    %54 = tt.splat %52 : f32 -> tensor<1024xf32, #blocked> loc(#loc49)
    %55 = arith.subf %49, %54 : tensor<1024xf32, #blocked> loc(#loc49)
    %56 = arith.mulf %55, %55 : tensor<1024xf32, #blocked> loc(#loc50)
    %57 = "tt.reduce"(%56) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc51)), %arg11: f32 loc(callsite(#loc1 at #loc51))):
      %72 = arith.addf %arg10, %arg11 : f32 loc(#loc73)
      tt.reduce.return %72 : f32 loc(#loc69)
    }) : (tensor<1024xf32, #blocked>) -> f32 loc(#loc69)
    %58 = arith.addf %57, %cst_2 : f32 loc(#loc71)
    %59 = tt.splat %58 : f32 -> tensor<1xf32, #blocked1> loc(#loc71)
    %60 = arith.divf %58, %cst_1 : f32 loc(#loc53)
    %61 = arith.addf %60, %cst_0 : f32 loc(#loc54)
    %62 = tt.extern_elementwise %61 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (f32) -> f32 loc(#loc55)
    %63 = tt.splat %62 : f32 -> tensor<1xf32, #blocked1> loc(#loc55)
    %64 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc56)
    %65 = tt.addptr %64, %8 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc56)
    tt.store %65, %48 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc57)
    %66 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc58)
    %67 = tt.splat %66 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc58)
    tt.store %67, %63 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc59)
    %68 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc60)
    %69 = tt.splat %68 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc60)
    tt.store %69, %53 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc61)
    %70 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc62)
    %71 = tt.splat %70 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc62)
    tt.store %71, %59 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc63)
    tt.return loc(#loc64)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":24:28)
#loc3 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":27:26)
#loc4 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":30:19)
#loc5 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":31:19)
#loc6 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":32:19)
#loc7 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":33:19)
#loc8 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":36:41)
#loc9 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":36:36)
#loc10 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":36:31)
#loc11 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":36:46)
#loc12 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":37:18)
#loc13 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":37:16)
#loc14 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":41:18)
#loc15 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":42:40)
#loc16 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":42:35)
#loc17 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":42:59)
#loc18 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":42:53)
#loc19 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":42:30)
#loc20 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":42:64)
#loc21 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":43:19)
#loc22 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":45:18)
#loc23 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":46:18)
#loc24 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:49)
#loc25 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:54)
#loc26 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:41)
#loc27 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:36)
#loc28 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:67)
#loc29 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:62)
#loc30 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:31)
#loc31 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":47:72)
#loc32 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":48:20)
#loc33 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":51:49)
#loc34 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":51:54)
#loc35 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":51:41)
#loc36 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":51:36)
#loc37 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":51:62)
#loc38 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":51:31)
#loc39 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":51:72)
#loc40 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":52:34)
#loc41 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":53:33)
#loc42 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":54:20)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc47 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":57:45)
#loc48 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":60:20)
#loc49 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":61:20)
#loc50 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":62:20)
#loc52 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":64:45)
#loc53 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":66:20)
#loc54 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":68:20)
#loc55 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":69:28)
#loc56 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":70:25)
#loc57 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":70:47)
#loc58 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":71:25)
#loc59 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":71:37)
#loc60 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":72:25)
#loc61 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":72:37)
#loc62 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":73:25)
#loc63 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":73:37)
#loc64 = loc("inductor_cache/3e/c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py":73:4)
#loc65 = loc(callsite(#loc43 at #loc44))
#loc67 = loc(callsite(#loc45 at #loc43))
#loc68 = loc(callsite(#loc46 at #loc47))
#loc69 = loc(callsite(#loc43 at #loc51))
#loc71 = loc(callsite(#loc46 at #loc52))
#loc72 = loc(callsite(#loc67 at #loc44))
#loc73 = loc(callsite(#loc67 at #loc51))
