; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_cat_native_group_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 2, !dbg !11
  %16 = and i32 %15, 252, !dbg !11
  %17 = and i32 %15, 1020, !dbg !11
  %18 = lshr i32 %17, 8, !dbg !12
  %.frozen = freeze i32 %11, !dbg !13
  %19 = sdiv i32 %.frozen, 32, !dbg !13
  %20 = mul i32 %19, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %20, !dbg !14
  %21 = shl i32 %11, 10, !dbg !15
  %22 = or disjoint i32 %21, %17, !dbg !16
  %23 = sext i32 %22 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %30 = bitcast i32 %26 to float, !dbg !18
  %31 = bitcast i32 %27 to float, !dbg !18
  %32 = bitcast i32 %28 to float, !dbg !18
  %33 = bitcast i32 %29 to float, !dbg !18
  %34 = shl nsw i32 %.decomposed, 2, !dbg !19
  %35 = or disjoint i32 %34, %18, !dbg !20
  %36 = icmp slt i32 %35, 64, !dbg !21
  %37 = shl nsw i32 %35, 8, !dbg !22
  %38 = shl i32 %19, 14, !dbg !23
  %39 = or disjoint i32 %38, %16, !dbg !24
  %40 = add i32 %39, %37, !dbg !25
  %41 = sext i32 %40 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #5, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = and i32 %.decomposed, 1073741816, !dbg !28
  %49 = icmp eq i32 %48, 16, !dbg !28
  %50 = or disjoint i32 %18, -64, !dbg !29
  %51 = add nsw i32 %50, %34, !dbg !30
  %52 = shl nsw i32 %51, 8, !dbg !31
  %53 = shl i32 %19, 13, !dbg !32
  %54 = or disjoint i32 %53, %16, !dbg !33
  %55 = add i32 %54, %52, !dbg !34
  %56 = sext i32 %55 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !35
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #5, !dbg !36
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !36
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !36
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !36
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !36
  %63 = icmp sgt i32 %35, 95, !dbg !37
  %64 = or disjoint i32 %18, -96, !dbg !38
  %65 = add nsw i32 %64, %34, !dbg !39
  %66 = shl nsw i32 %65, 8, !dbg !40
  %67 = add i32 %54, %66, !dbg !41
  %68 = sext i32 %67 to i64, !dbg !42
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !42
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #5, !dbg !43
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !43
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !43
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !43
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !43
  %.v = select i1 %49, i32 %59, i32 %71, !dbg !44
  %.v1 = select i1 %49, i32 %60, i32 %72, !dbg !44
  %.v2 = select i1 %49, i32 %61, i32 %73, !dbg !44
  %.v3 = select i1 %49, i32 %62, i32 %74, !dbg !44
  %.v4 = select i1 %36, i32 %44, i32 %.v, !dbg !45
  %75 = bitcast i32 %.v4 to float, !dbg !45
  %.v5 = select i1 %36, i32 %45, i32 %.v1, !dbg !45
  %76 = bitcast i32 %.v5 to float, !dbg !45
  %.v6 = select i1 %36, i32 %46, i32 %.v2, !dbg !45
  %77 = bitcast i32 %.v6 to float, !dbg !45
  %.v7 = select i1 %36, i32 %47, i32 %.v3, !dbg !45
  %78 = bitcast i32 %.v7 to float, !dbg !45
  %79 = fadd float %30, %75, !dbg !46
  %80 = fadd float %31, %76, !dbg !46
  %81 = fadd float %32, %77, !dbg !46
  %82 = fadd float %33, %78, !dbg !46
  %83 = fadd float %79, %80, !dbg !47
  %84 = fadd float %81, %83, !dbg !47
  %85 = fadd float %82, %84, !dbg !47
  %86 = bitcast float %85 to i32, !dbg !52
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !52
  %88 = bitcast i32 %87 to float, !dbg !52
  %89 = fadd float %85, %88, !dbg !47
  %90 = bitcast float %89 to i32, !dbg !52
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !52
  %92 = bitcast i32 %91 to float, !dbg !52
  %93 = fadd float %89, %92, !dbg !47
  %94 = bitcast float %93 to i32, !dbg !52
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !52
  %96 = bitcast i32 %95 to float, !dbg !52
  %97 = fadd float %93, %96, !dbg !47
  %98 = bitcast float %97 to i32, !dbg !52
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !52
  %100 = bitcast i32 %99 to float, !dbg !52
  %101 = fadd float %97, %100, !dbg !47
  %102 = bitcast float %101 to i32, !dbg !52
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !52
  %104 = bitcast i32 %103 to float, !dbg !52
  %105 = fadd float %101, %104, !dbg !47
  %106 = icmp eq i32 %13, 0, !dbg !52
  %107 = and i32 %14, 7, !dbg !52
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !52
  %109 = bitcast float %105 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %106) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %110 = icmp slt i32 %12, 8, !dbg !52
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !52
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #5, !dbg !52
  %113 = bitcast i32 %112 to float, !dbg !52
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !52
  %115 = bitcast i32 %114 to float, !dbg !52
  %116 = fadd float %113, %115, !dbg !47
  %117 = bitcast float %116 to i32, !dbg !52
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !52
  %119 = bitcast i32 %118 to float, !dbg !52
  %120 = fadd float %116, %119, !dbg !47
  %121 = bitcast float %120 to i32, !dbg !52
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !52
  %123 = bitcast i32 %122 to float, !dbg !52
  %124 = fadd float %120, %123, !dbg !47
  %125 = and i32 %12, 7, !dbg !52
  %126 = icmp eq i32 %125, 0, !dbg !52
  %127 = and i1 %110, %126, !dbg !52
  %128 = bitcast float %124 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %128, i1 %127) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %129 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %130 = fadd float %129, 0.000000e+00, !dbg !53
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 1.024000e+03) #5, !dbg !57
  %132 = fsub float %79, %131, !dbg !58
  %133 = fsub float %80, %131, !dbg !58
  %134 = fsub float %81, %131, !dbg !58
  %135 = fsub float %82, %131, !dbg !58
  %136 = fmul float %132, %132, !dbg !59
  %137 = fmul float %133, %133, !dbg !59
  %138 = fmul float %134, %134, !dbg !59
  %139 = fmul float %135, %135, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %140 = fadd float %136, %137, !dbg !62
  %141 = fadd float %138, %140, !dbg !62
  %142 = fadd float %139, %141, !dbg !62
  %143 = bitcast float %142 to i32, !dbg !60
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 16, i32 31), !dbg !60
  %145 = bitcast i32 %144 to float, !dbg !60
  %146 = fadd float %142, %145, !dbg !62
  %147 = bitcast float %146 to i32, !dbg !60
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !60
  %149 = bitcast i32 %148 to float, !dbg !60
  %150 = fadd float %146, %149, !dbg !62
  %151 = bitcast float %150 to i32, !dbg !60
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 4, i32 31), !dbg !60
  %153 = bitcast i32 %152 to float, !dbg !60
  %154 = fadd float %150, %153, !dbg !62
  %155 = bitcast float %154 to i32, !dbg !60
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !60
  %157 = bitcast i32 %156 to float, !dbg !60
  %158 = fadd float %154, %157, !dbg !62
  %159 = bitcast float %158 to i32, !dbg !60
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !60
  %161 = bitcast i32 %160 to float, !dbg !60
  %162 = fadd float %158, %161, !dbg !62
  %163 = bitcast float %162 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %163, i1 %106) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %164 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #5, !dbg !60
  %165 = bitcast i32 %164 to float, !dbg !60
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !60
  %167 = bitcast i32 %166 to float, !dbg !60
  %168 = fadd float %165, %167, !dbg !62
  %169 = bitcast float %168 to i32, !dbg !60
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !60
  %171 = bitcast i32 %170 to float, !dbg !60
  %172 = fadd float %168, %171, !dbg !62
  %173 = bitcast float %172 to i32, !dbg !60
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !60
  %175 = bitcast i32 %174 to float, !dbg !60
  %176 = fadd float %172, %175, !dbg !62
  %177 = bitcast float %176 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %177, i1 %127) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %178 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !60
  %179 = fadd float %178, 0.000000e+00, !dbg !63
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float 1.024000e+03) #5, !dbg !65
  %181 = fadd float %180, 0x3EE4F8B580000000, !dbg !66
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %.not.i = icmp eq i32 %182, 0, !dbg !67
  br i1 %.not.i, label %185, label %183, !dbg !67

183:                                              ; preds = %10
  %184 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !67
  br label %__nv_rsqrtf.exit, !dbg !67

185:                                              ; preds = %10
  %186 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !67
  br label %__nv_rsqrtf.exit, !dbg !67

__nv_rsqrtf.exit:                                 ; preds = %183, %185
  %.0.i = phi float [ %184, %183 ], [ %186, %185 ], !dbg !67
  %187 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v4, i32 %.v5, i32 %.v6, i32 %.v7, ptr addrspace(1) %187, i1 true) #5, !dbg !69
  %188 = sext i32 %11 to i64, !dbg !70
  %189 = getelementptr float, ptr addrspace(1) %7, i64 %188, !dbg !70
  %urem = and i32 %12, 255, !dbg !71
  %190 = icmp eq i32 %urem, 0, !dbg !71
  %191 = bitcast float %.0.i to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %191, ptr addrspace(1) %189, i1 %190) #5, !dbg !71
  %192 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !72
  %193 = bitcast float %131 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %192, i1 %190) #5, !dbg !73
  %194 = getelementptr float, ptr addrspace(1) %6, i64 %188, !dbg !74
  %195 = bitcast float %179 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %194, i1 %190) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3eav24kuket4i2vyu5676p7x6sryfjgbrq7tthhpiisglrbvc2v.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_per_fused_cat_native_group_norm_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_native_group_norm_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_native_group_norm_12", linkageName: "triton_per_fused_cat_native_group_norm_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 30, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 36, column: 41, scope: !7)
!16 = !DILocation(line: 36, column: 36, scope: !7)
!17 = !DILocation(line: 36, column: 31, scope: !7)
!18 = !DILocation(line: 36, column: 46, scope: !7)
!19 = !DILocation(line: 37, column: 18, scope: !7)
!20 = !DILocation(line: 37, column: 16, scope: !7)
!21 = !DILocation(line: 41, column: 18, scope: !7)
!22 = !DILocation(line: 42, column: 40, scope: !7)
!23 = !DILocation(line: 42, column: 59, scope: !7)
!24 = !DILocation(line: 42, column: 35, scope: !7)
!25 = !DILocation(line: 42, column: 53, scope: !7)
!26 = !DILocation(line: 42, column: 30, scope: !7)
!27 = !DILocation(line: 42, column: 64, scope: !7)
!28 = !DILocation(line: 46, column: 18, scope: !7)
!29 = !DILocation(line: 47, column: 49, scope: !7)
!30 = !DILocation(line: 47, column: 54, scope: !7)
!31 = !DILocation(line: 47, column: 41, scope: !7)
!32 = !DILocation(line: 47, column: 67, scope: !7)
!33 = !DILocation(line: 47, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 62, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 72, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 49, scope: !7)
!39 = !DILocation(line: 51, column: 54, scope: !7)
!40 = !DILocation(line: 51, column: 41, scope: !7)
!41 = !DILocation(line: 51, column: 62, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 72, scope: !7)
!44 = !DILocation(line: 52, column: 34, scope: !7)
!45 = !DILocation(line: 53, column: 33, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!51 = !DILocation(line: 57, column: 59, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 73, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 57, column: 45, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !61)
!61 = !DILocation(line: 64, column: 59, scope: !7)
!62 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !61)
!63 = !DILocation(line: 73, column: 15, scope: !54, inlinedAt: !64)
!64 = !DILocation(line: 64, column: 45, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 28, scope: !7)
!68 = !DILocation(line: 70, column: 25, scope: !7)
!69 = !DILocation(line: 70, column: 47, scope: !7)
!70 = !DILocation(line: 71, column: 25, scope: !7)
!71 = !DILocation(line: 71, column: 37, scope: !7)
!72 = !DILocation(line: 72, column: 25, scope: !7)
!73 = !DILocation(line: 72, column: 37, scope: !7)
!74 = !DILocation(line: 73, column: 25, scope: !7)
!75 = !DILocation(line: 73, column: 37, scope: !7)
!76 = !DILocation(line: 73, column: 4, scope: !7)
