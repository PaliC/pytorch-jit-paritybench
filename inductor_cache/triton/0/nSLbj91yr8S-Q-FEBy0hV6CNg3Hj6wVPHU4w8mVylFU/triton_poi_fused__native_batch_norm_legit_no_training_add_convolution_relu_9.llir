; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %13, 5, !dbg !12
  %14 = and i32 %.lobit1, 3, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = or disjoint i32 %12, %14, !dbg !13
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 7, !dbg !15
  %21 = and i32 %16, 124, !dbg !16
  %22 = and i32 %13, 127, !dbg !16
  %23 = or disjoint i32 %20, %21, !dbg !17
  %24 = or disjoint i32 %20, %22, !dbg !17
  %25 = icmp slt i32 %23, 96, !dbg !18
  %26 = icmp slt i32 %24, 96, !dbg !18
  %27 = mul i32 %17, 96, !dbg !19
  %28 = mul i32 %18, 96, !dbg !19
  %29 = add i32 %23, %27, !dbg !20
  %30 = add i32 %23, %28, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %25) #4, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %25) #4, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = and i32 %16, 508, !dbg !22
  %46 = lshr i32 %45, 7, !dbg !22
  %47 = or disjoint i32 %46, %45, !dbg !22
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47, !dbg !22
  %49 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #4, !dbg !22
  %50 = or disjoint i32 %45, 1, !dbg !22
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !22
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %50, !dbg !22
  %53 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !22
  %54 = or disjoint i32 %45, 2, !dbg !22
  %55 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %54, !dbg !22
  %56 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #4, !dbg !22
  %57 = or disjoint i32 %45, 3, !dbg !22
  %58 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %57, !dbg !22
  %59 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !22
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !22
  %62 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 516, !dbg !22
  %63 = load float, ptr addrspace(3) %62, align 4, !dbg !22
  %64 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 1032, !dbg !22
  %65 = load float, ptr addrspace(3) %64, align 4, !dbg !22
  %66 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 1548, !dbg !22
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %68 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %68, i1 true) #4, !dbg !22
  %69 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %69, i1 true) #4, !dbg !22
  %70 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %70, i1 true) #4, !dbg !22
  %71 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %71, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %72 = load float, ptr addrspace(3) %60, align 4, !dbg !22
  %73 = load float, ptr addrspace(3) %62, align 4, !dbg !22
  %74 = load float, ptr addrspace(3) %64, align 4, !dbg !22
  %75 = load float, ptr addrspace(3) %66, align 4, !dbg !22
  %76 = sext i32 %24 to i64, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !23
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #4, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !25
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %25) #4, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %25) #4, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %91 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %91, i1 true) #4, !dbg !26
  %92 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %92, i1 true) #4, !dbg !26
  %93 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %93, i1 true) #4, !dbg !26
  %94 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %94, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %95 = load float, ptr addrspace(3) %60, align 4, !dbg !26
  %96 = load float, ptr addrspace(3) %62, align 4, !dbg !26
  %97 = load float, ptr addrspace(3) %64, align 4, !dbg !26
  %98 = load float, ptr addrspace(3) %66, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %99 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %99, i1 true) #4, !dbg !26
  %100 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %100, i1 true) #4, !dbg !26
  %101 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %101, i1 true) #4, !dbg !26
  %102 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %102, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %103 = load float, ptr addrspace(3) %60, align 4, !dbg !26
  %104 = load float, ptr addrspace(3) %62, align 4, !dbg !26
  %105 = load float, ptr addrspace(3) %64, align 4, !dbg !26
  %106 = load float, ptr addrspace(3) %66, align 4, !dbg !26
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %26) #4, !dbg !28
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !29
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %26) #4, !dbg !30
  %111 = bitcast i32 %110 to float, !dbg !30
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %76, !dbg !31
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %26) #4, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %6, i64 %76, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %26) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %116 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %116, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !35
  %118 = load float, ptr addrspace(3) %117, align 16, !dbg !35
  %119 = or disjoint i32 %21, 1, !dbg !35
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !35
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !35
  %122 = or disjoint i32 %21, 2, !dbg !35
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !35
  %124 = load float, ptr addrspace(3) %123, align 8, !dbg !35
  %125 = or disjoint i32 %21, 3, !dbg !35
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !35
  %127 = load float, ptr addrspace(3) %126, align 4, !dbg !35
  %128 = fadd float %111, 0x3EE4F8B580000000, !dbg !36
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %129, 0, !dbg !37
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %130, 0, !dbg !37
  br i1 %.not.i, label %136, label %131, !dbg !37

131:                                              ; preds = %10
  br i1 %.not1.i, label %134, label %132, !dbg !37

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

136:                                              ; preds = %10
  br i1 %.not1.i, label %139, label %137, !dbg !37

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %132, %134, %137, %139
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !37
  %141 = bitcast i32 %44 to float, !dbg !22
  %142 = fadd float %127, %141, !dbg !35
  %143 = bitcast i32 %43 to float, !dbg !22
  %144 = fadd float %124, %143, !dbg !35
  %145 = bitcast i32 %42 to float, !dbg !22
  %146 = fadd float %121, %145, !dbg !35
  %147 = bitcast i32 %41 to float, !dbg !22
  %148 = fadd float %118, %147, !dbg !35
  %149 = bitcast i32 %39 to float, !dbg !22
  %150 = fadd float %127, %149, !dbg !35
  %151 = bitcast i32 %38 to float, !dbg !22
  %152 = fadd float %124, %151, !dbg !35
  %153 = bitcast i32 %37 to float, !dbg !22
  %154 = fadd float %121, %153, !dbg !35
  %155 = bitcast i32 %36 to float, !dbg !22
  %156 = fadd float %118, %155, !dbg !35
  %157 = and i32 %16, 4, !dbg !12
  %158 = or disjoint i32 %12, %157, !dbg !13
  %.frozen = freeze i32 %158, !dbg !38
  %159 = sdiv i32 %.frozen, 4096, !dbg !38
  %160 = mul i32 %159, 4096, !dbg !39
  %.decomposed = sub i32 %.frozen, %160, !dbg !39
  %161 = lshr i32 %13, 1, !dbg !16
  %162 = and i32 %161, 63, !dbg !16
  %163 = or disjoint i32 %162, %20, !dbg !17
  %164 = or disjoint i32 %163, 64, !dbg !17
  %165 = icmp slt i32 %164, 96, !dbg !18
  %166 = icmp slt i32 %163, 96, !dbg !18
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %168 = insertelement <8 x float> poison, float %75, i64 0, !dbg !35
  %169 = insertelement <8 x float> %168, float %74, i64 1, !dbg !35
  %170 = insertelement <8 x float> %169, float %73, i64 2, !dbg !35
  %171 = insertelement <8 x float> %170, float %72, i64 3, !dbg !35
  %172 = insertelement <8 x float> %171, float %67, i64 4, !dbg !35
  %173 = insertelement <8 x float> %172, float %65, i64 5, !dbg !35
  %174 = insertelement <8 x float> %173, float %63, i64 6, !dbg !35
  %175 = insertelement <8 x float> %174, float %61, i64 7, !dbg !35
  %176 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !35
  %177 = bitcast <8 x i32> %176 to <8 x float>, !dbg !35
  %178 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %179 = fadd <8 x float> %175, %178, !dbg !35
  %180 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !41
  %181 = bitcast <8 x i32> %180 to <8 x float>, !dbg !41
  %182 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !41
  %183 = fsub <8 x float> %179, %182, !dbg !41
  %184 = insertelement <8 x float> poison, float %167, i64 0, !dbg !42
  %185 = shufflevector <8 x float> %184, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !42
  %186 = fmul <8 x float> %183, %185, !dbg !42
  %187 = insertelement <8 x i32> poison, i32 %113, i64 0, !dbg !43
  %188 = bitcast <8 x i32> %187 to <8 x float>, !dbg !43
  %189 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !43
  %190 = fmul <8 x float> %186, %189, !dbg !43
  %191 = insertelement <8 x i32> poison, i32 %115, i64 0, !dbg !44
  %192 = bitcast <8 x i32> %191 to <8 x float>, !dbg !44
  %193 = shufflevector <8 x float> %192, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !44
  %194 = fadd <8 x float> %190, %193, !dbg !44
  %195 = fcmp olt <8 x float> %194, zeroinitializer, !dbg !45
  %196 = extractelement <8 x i1> %195, i64 7, !dbg !49
  %197 = extractelement <8 x float> %194, i64 7, !dbg !49
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !49
  %199 = extractelement <8 x i1> %195, i64 6, !dbg !49
  %200 = extractelement <8 x float> %194, i64 6, !dbg !49
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !49
  %202 = extractelement <8 x i1> %195, i64 5, !dbg !49
  %203 = extractelement <8 x float> %194, i64 5, !dbg !49
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !49
  %205 = extractelement <8 x i1> %195, i64 4, !dbg !49
  %206 = extractelement <8 x float> %194, i64 4, !dbg !49
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !49
  %208 = extractelement <8 x i1> %195, i64 3, !dbg !49
  %209 = extractelement <8 x float> %194, i64 3, !dbg !49
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !49
  %211 = extractelement <8 x i1> %195, i64 2, !dbg !49
  %212 = extractelement <8 x float> %194, i64 2, !dbg !49
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !49
  %214 = extractelement <8 x i1> %195, i64 1, !dbg !49
  %215 = extractelement <8 x float> %194, i64 1, !dbg !49
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !49
  %217 = extractelement <8 x i1> %195, i64 0, !dbg !49
  %218 = extractelement <8 x float> %194, i64 0, !dbg !49
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !49
  %220 = fadd float %95, %198, !dbg !50
  %221 = fadd float %96, %201, !dbg !50
  %222 = fadd float %97, %204, !dbg !50
  %223 = fadd float %98, %207, !dbg !50
  %224 = fadd float %103, %210, !dbg !50
  %225 = fadd float %104, %213, !dbg !50
  %226 = fadd float %105, %216, !dbg !50
  %227 = fadd float %106, %219, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %228 = bitcast float %156 to i32, !dbg !52
  %229 = bitcast float %154 to i32, !dbg !52
  %230 = bitcast float %152 to i32, !dbg !52
  %231 = bitcast float %150 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %229, i32 %230, i32 %231, ptr addrspace(1) %32, i1 %25) #4, !dbg !52
  %232 = bitcast float %148 to i32, !dbg !52
  %233 = bitcast float %146 to i32, !dbg !52
  %234 = bitcast float %144 to i32, !dbg !52
  %235 = bitcast float %142 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %233, i32 %234, i32 %235, ptr addrspace(1) %34, i1 %25) #4, !dbg !52
  %236 = shl i32 %163, 12, !dbg !53
  %237 = shl i32 %164, 12, !dbg !53
  %238 = mul i32 %159, 393216, !dbg !54
  %239 = add i32 %238, %.decomposed, !dbg !55
  %240 = add i32 %239, %236, !dbg !56
  %241 = add i32 %239, %237, !dbg !56
  %242 = sext i32 %240 to i64, !dbg !57
  %243 = getelementptr float, ptr addrspace(1) %7, i64 %242, !dbg !57
  %244 = sext i32 %241 to i64, !dbg !57
  %245 = getelementptr float, ptr addrspace(1) %7, i64 %244, !dbg !57
  %246 = shl i32 %13, 3, !dbg !58
  %247 = and i32 %246, 1016, !dbg !58
  %248 = lshr exact i32 %247, 1, !dbg !58
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !58
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %247, !dbg !58
  %251 = bitcast float %220 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !58
  %252 = or disjoint i32 %247, 1, !dbg !58
  %253 = getelementptr float, ptr addrspace(3) %249, i32 %252, !dbg !58
  %254 = bitcast float %221 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !58
  %255 = or disjoint i32 %247, 2, !dbg !58
  %256 = getelementptr float, ptr addrspace(3) %249, i32 %255, !dbg !58
  %257 = bitcast float %222 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #4, !dbg !58
  %258 = or disjoint i32 %247, 3, !dbg !58
  %259 = getelementptr float, ptr addrspace(3) %249, i32 %258, !dbg !58
  %260 = bitcast float %223 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !58
  %261 = or disjoint i32 %247, 4, !dbg !58
  %262 = getelementptr float, ptr addrspace(3) %249, i32 %261, !dbg !58
  %263 = bitcast float %224 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !58
  %264 = or disjoint i32 %247, 5, !dbg !58
  %265 = getelementptr float, ptr addrspace(3) %249, i32 %264, !dbg !58
  %266 = bitcast float %225 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !58
  %267 = or disjoint i32 %247, 6, !dbg !58
  %268 = getelementptr float, ptr addrspace(3) %249, i32 %267, !dbg !58
  %269 = bitcast float %226 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !58
  %270 = or disjoint i32 %247, 7, !dbg !58
  %271 = getelementptr float, ptr addrspace(3) %249, i32 %270, !dbg !58
  %272 = bitcast float %227 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %273 = lshr exact i32 %16, 1, !dbg !58
  %274 = and i32 %273, 252, !dbg !58
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !58
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %45, !dbg !58
  %277 = or disjoint i32 %45, 512, !dbg !58
  %278 = lshr exact i32 %277, 1, !dbg !58
  %279 = and i32 %278, 508, !dbg !58
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !58
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %277, !dbg !58
  %282 = load <4 x i32>, ptr addrspace(3) %281, align 16, !dbg !58
  %.extract = load i32, ptr addrspace(3) %276, align 16, !dbg !58
  %283 = getelementptr inbounds i8, ptr addrspace(3) %276, i32 4, !dbg !58
  %.extract12 = load i32, ptr addrspace(3) %283, align 4, !dbg !58
  %284 = getelementptr inbounds i8, ptr addrspace(3) %276, i32 8, !dbg !58
  %.extract13 = load i32, ptr addrspace(3) %284, align 8, !dbg !58
  %285 = getelementptr inbounds i8, ptr addrspace(3) %276, i32 12, !dbg !58
  %.extract14 = load i32, ptr addrspace(3) %285, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %243, i1 %166) #4, !dbg !58
  %.extract15 = extractelement <4 x i32> %282, i64 0, !dbg !58
  %.extract16 = extractelement <4 x i32> %282, i64 1, !dbg !58
  %.extract17 = extractelement <4 x i32> %282, i64 2, !dbg !58
  %.extract18 = extractelement <4 x i32> %282, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %245, i1 %165) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfuvzy4il7hpghn4qael7tohc63ixqmew7qxf7qfhyqfmsiryngi.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 31, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 26, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 48, column: 19, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 52, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 53, column: 19, scope: !7)
!51 = !DILocation(line: 54, column: 4, scope: !7)
!52 = !DILocation(line: 55, column: 47, scope: !7)
!53 = !DILocation(line: 56, column: 35, scope: !7)
!54 = !DILocation(line: 56, column: 47, scope: !7)
!55 = !DILocation(line: 56, column: 30, scope: !7)
!56 = !DILocation(line: 56, column: 40, scope: !7)
!57 = !DILocation(line: 56, column: 25, scope: !7)
!58 = !DILocation(line: 56, column: 59, scope: !7)
!59 = !DILocation(line: 56, column: 4, scope: !7)
