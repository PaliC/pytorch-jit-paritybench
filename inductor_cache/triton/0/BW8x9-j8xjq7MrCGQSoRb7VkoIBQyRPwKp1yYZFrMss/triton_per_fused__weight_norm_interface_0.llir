; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 64, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = icmp samesign ult i32 %10, 28, !dbg !13
  %12 = mul i32 %7, 28, !dbg !14
  %13 = add i32 %12, %10, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !16
  %16 = and i1 %11, %8, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %16, i32 0, i1 %16) #5, !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %16, i32 0, i1 %16) #5, !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = sext i32 %7 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %8) #5, !dbg !20
  %24 = fmul float %18, %18, !dbg !21
  %25 = fmul float %20, %20, !dbg !21
  %26 = select i1 %16, float %24, float 0.000000e+00, !dbg !22
  %27 = select i1 %16, float %25, float 0.000000e+00, !dbg !22
  %28 = bitcast float %26 to i32, !dbg !23
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = fadd float %26, %30, !dbg !27
  %32 = bitcast float %31 to i32, !dbg !23
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = fadd float %31, %34, !dbg !27
  %36 = bitcast float %35 to i32, !dbg !23
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = fadd float %35, %38, !dbg !27
  %40 = bitcast float %39 to i32, !dbg !23
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = fadd float %39, %42, !dbg !27
  %44 = bitcast float %43 to i32, !dbg !23
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !23
  %46 = bitcast i32 %45 to float, !dbg !23
  %47 = fadd float %43, %46, !dbg !27
  %48 = bitcast float %27 to i32, !dbg !23
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !23
  %50 = bitcast i32 %49 to float, !dbg !23
  %51 = fadd float %27, %50, !dbg !27
  %52 = bitcast float %51 to i32, !dbg !23
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = fadd float %51, %54, !dbg !27
  %56 = bitcast float %55 to i32, !dbg !23
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = fadd float %55, %58, !dbg !27
  %60 = bitcast float %59 to i32, !dbg !23
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = fadd float %59, %62, !dbg !27
  %64 = bitcast float %63 to i32, !dbg !23
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = fadd float %63, %66, !dbg !27
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %68, 0, !dbg !29
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %69, 0, !dbg !29
  br i1 %.not.i, label %75, label %70, !dbg !29

70:                                               ; preds = %6
  br i1 %.not1.i, label %73, label %71, !dbg !29

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

75:                                               ; preds = %6
  br i1 %.not1.i, label %78, label %76, !dbg !29

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !29
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i1 = icmp eq i32 %80, 0, !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !29
  br i1 %.not.i1, label %87, label %82, !dbg !29

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !29

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !29

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !29
  %92 = bitcast i32 %23 to float, !dbg !20
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %.0.i) #5, !dbg !30
  %94 = fmul float %93, %18, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !33
  %urem = and i32 %9, 63, !dbg !34
  %96 = icmp eq i32 %urem, 0, !dbg !34
  %97 = bitcast float %.0.i3 to i32, !dbg !34
  %98 = and i1 %96, %8, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %95, i1 %98) #5, !dbg !34
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !35
  %100 = and i32 %9, 32, !dbg !36
  %101 = icmp eq i32 %100, 0, !dbg !36
  %102 = bitcast float %94 to i32, !dbg !36
  %103 = and i1 %101, %16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %99, i1 %103) #5, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "curekjiinnvjug2udb7b4v26nirqjukakco4lwfhjclb4q3eoege.py", directory: "inductor_cache/ur")
!4 = !{ptr @triton_per_fused__weight_norm_interface_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_0", linkageName: "triton_per_fused__weight_norm_interface_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 38, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 43, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 41, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 37, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 4, scope: !7)
!33 = !DILocation(line: 41, column: 28, scope: !7)
!34 = !DILocation(line: 41, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 25, scope: !7)
!36 = !DILocation(line: 42, column: 44, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
