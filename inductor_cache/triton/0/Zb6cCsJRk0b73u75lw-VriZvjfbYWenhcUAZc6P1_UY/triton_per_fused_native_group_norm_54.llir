; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_54(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = shl i32 %7, 7, !dbg !11
  %12 = and i32 %11, 24576, !dbg !11
  %13 = and i32 %10, 252, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %14 = sdiv i32 %.frozen, 32, !dbg !13
  %15 = mul i32 %14, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %15, !dbg !14
  %16 = shl nsw i32 %.decomposed, 8, !dbg !15
  %17 = shl i32 %14, 15, !dbg !16
  %18 = or disjoint i32 %12, %13, !dbg !17
  %19 = add nsw i32 %18, %16, !dbg !18
  %20 = add i32 %19, %17, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = bitcast i32 %27 to float, !dbg !21
  %32 = fadd float %28, %29, !dbg !22
  %33 = fadd float %32, %30, !dbg !22
  %34 = fadd float %33, %31, !dbg !22
  %35 = bitcast float %34 to i32, !dbg !27
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = fadd float %34, %37, !dbg !22
  %39 = bitcast float %38 to i32, !dbg !27
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 8, i32 31), !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = fadd float %38, %41, !dbg !22
  %43 = bitcast float %42 to i32, !dbg !27
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = fadd float %42, %45, !dbg !22
  %47 = bitcast float %46 to i32, !dbg !27
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = fadd float %46, %49, !dbg !22
  %51 = bitcast float %50 to i32, !dbg !27
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !27
  %53 = bitcast i32 %52 to float, !dbg !27
  %54 = fadd float %50, %53, !dbg !22
  %55 = icmp eq i32 %8, 0, !dbg !27
  %56 = and i32 %9, 7, !dbg !27
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !27
  %58 = bitcast float %54 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %55) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %59 = icmp slt i32 %7, 8, !dbg !27
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !27
  %61 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %60, i1 %59) #5, !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !27
  %64 = bitcast i32 %63 to float, !dbg !27
  %65 = fadd float %62, %64, !dbg !22
  %66 = bitcast float %65 to i32, !dbg !27
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = fadd float %65, %68, !dbg !22
  %70 = bitcast float %69 to i32, !dbg !27
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !27
  %72 = bitcast i32 %71 to float, !dbg !27
  %73 = fadd float %69, %72, !dbg !22
  %74 = and i32 %7, 7, !dbg !27
  %75 = icmp eq i32 %74, 0, !dbg !27
  %76 = and i1 %59, %75, !dbg !27
  %77 = bitcast float %73 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %77, i1 %76) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %78 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %79 = fadd float %78, 0.000000e+00, !dbg !28
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 1.024000e+03) #5, !dbg !32
  %81 = fsub float %28, %80, !dbg !33
  %82 = fsub float %29, %80, !dbg !33
  %83 = fsub float %30, %80, !dbg !33
  %84 = fsub float %31, %80, !dbg !33
  %85 = fmul float %81, %81, !dbg !34
  %86 = fmul float %82, %82, !dbg !34
  %87 = fmul float %83, %83, !dbg !34
  %88 = fmul float %84, %84, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %89 = fadd float %85, %86, !dbg !37
  %90 = fadd float %87, %89, !dbg !37
  %91 = fadd float %88, %90, !dbg !37
  %92 = bitcast float %91 to i32, !dbg !35
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !35
  %94 = bitcast i32 %93 to float, !dbg !35
  %95 = fadd float %91, %94, !dbg !37
  %96 = bitcast float %95 to i32, !dbg !35
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !35
  %98 = bitcast i32 %97 to float, !dbg !35
  %99 = fadd float %95, %98, !dbg !37
  %100 = bitcast float %99 to i32, !dbg !35
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !35
  %102 = bitcast i32 %101 to float, !dbg !35
  %103 = fadd float %99, %102, !dbg !37
  %104 = bitcast float %103 to i32, !dbg !35
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !35
  %106 = bitcast i32 %105 to float, !dbg !35
  %107 = fadd float %103, %106, !dbg !37
  %108 = bitcast float %107 to i32, !dbg !35
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !35
  %110 = bitcast i32 %109 to float, !dbg !35
  %111 = fadd float %107, %110, !dbg !37
  %112 = bitcast float %111 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %112, i1 %55) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %60, i1 %59) #5, !dbg !35
  %114 = bitcast i32 %113 to float, !dbg !35
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !35
  %116 = bitcast i32 %115 to float, !dbg !35
  %117 = fadd float %114, %116, !dbg !37
  %118 = bitcast float %117 to i32, !dbg !35
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !35
  %120 = bitcast i32 %119 to float, !dbg !35
  %121 = fadd float %117, %120, !dbg !37
  %122 = bitcast float %121 to i32, !dbg !35
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !35
  %124 = bitcast i32 %123 to float, !dbg !35
  %125 = fadd float %121, %124, !dbg !37
  %126 = bitcast float %125 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %126, i1 %76) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %127 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %128 = fadd float %127, 0.000000e+00, !dbg !38
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 1.024000e+03) #5, !dbg !40
  %130 = fadd float %129, 0x3EE4F8B580000000, !dbg !41
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %131, 0, !dbg !42
  br i1 %.not.i, label %134, label %132, !dbg !42

132:                                              ; preds = %5
  %133 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

134:                                              ; preds = %5
  %135 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %132, %134
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %136 = sext i32 %6 to i64, !dbg !44
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !44
  %urem = and i32 %7, 255, !dbg !45
  %138 = icmp eq i32 %urem, 0, !dbg !45
  %139 = bitcast float %.0.i to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %137, i1 %138) #5, !dbg !45
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !46
  %141 = bitcast float %80 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %140, i1 %138) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cenrb6ff4sldi4i5ugz2gxyyf6n74mdnptvhzitj7tp7sibyelyu.py", directory: "inductor_cache/en")
!4 = !{ptr @triton_per_fused_native_group_norm_54, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_54, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_54", linkageName: "triton_per_fused_native_group_norm_54", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 30, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 35, column: 39, scope: !7)
!16 = !DILocation(line: 35, column: 60, scope: !7)
!17 = !DILocation(line: 35, column: 35, scope: !7)
!18 = !DILocation(line: 35, column: 44, scope: !7)
!19 = !DILocation(line: 35, column: 54, scope: !7)
!20 = !DILocation(line: 35, column: 30, scope: !7)
!21 = !DILocation(line: 35, column: 65, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 38, column: 57, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 38, column: 44, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !36)
!36 = !DILocation(line: 45, column: 59, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !36)
!38 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !39)
!39 = !DILocation(line: 45, column: 45, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 28, scope: !7)
!43 = !DILocation(line: 51, column: 4, scope: !7)
!44 = !DILocation(line: 52, column: 28, scope: !7)
!45 = !DILocation(line: 52, column: 40, scope: !7)
!46 = !DILocation(line: 53, column: 25, scope: !7)
!47 = !DILocation(line: 53, column: 36, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
