; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 30, !dbg !12
  %.lobit1 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = or disjoint i32 %15, 16, !dbg !13
  %20 = or disjoint i32 %15, 20, !dbg !13
  %21 = or disjoint i32 %15, 24, !dbg !13
  %22 = or disjoint i32 %15, 28, !dbg !13
  %23 = icmp slt i32 %14, 96, !dbg !14
  %24 = icmp slt i32 %15, 96, !dbg !14
  %25 = icmp slt i32 %16, 96, !dbg !14
  %26 = icmp slt i32 %17, 96, !dbg !14
  %27 = icmp slt i32 %18, 96, !dbg !14
  %28 = icmp slt i32 %19, 96, !dbg !14
  %29 = icmp slt i32 %20, 96, !dbg !14
  %30 = icmp slt i32 %21, 96, !dbg !14
  %31 = icmp slt i32 %22, 96, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %33 = shl i32 %32, 5, !dbg !16
  %34 = lshr i32 %10, 4, !dbg !17
  %35 = and i32 %34, 7, !dbg !17
  %36 = and i32 %10, 31, !dbg !17
  %37 = or disjoint i32 %33, %35, !dbg !18
  %38 = or disjoint i32 %37, 8, !dbg !18
  %39 = or disjoint i32 %37, 16, !dbg !18
  %40 = or disjoint i32 %37, 24, !dbg !18
  %41 = or disjoint i32 %33, %36, !dbg !18
  %42 = icmp slt i32 %37, 25, !dbg !19
  %43 = icmp slt i32 %38, 25, !dbg !19
  %44 = icmp slt i32 %39, 25, !dbg !19
  %45 = icmp slt i32 %40, 25, !dbg !19
  %46 = icmp slt i32 %41, 25, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %47 = sdiv i32 %.frozen, 6, !dbg !20
  %48 = mul i32 %47, 6, !dbg !21
  %.decomposed = sub i32 %.frozen, %48, !dbg !21
  %49 = mul i32 %37, 6, !dbg !22
  %50 = mul i32 %38, 6, !dbg !22
  %51 = mul i32 %39, 6, !dbg !22
  %52 = mul i32 %40, 6, !dbg !22
  %53 = mul i32 %47, 150, !dbg !23
  %54 = add i32 %53, %.decomposed, !dbg !24
  %55 = add i32 %54, %49, !dbg !25
  %56 = add i32 %54, %50, !dbg !25
  %57 = add i32 %54, %51, !dbg !25
  %58 = add i32 %54, %52, !dbg !25
  %59 = sext i32 %55 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = sext i32 %56 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !26
  %63 = sext i32 %57 to i64, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !26
  %65 = sext i32 %58 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !26
  %67 = and i1 %23, %42, !dbg !27
  %68 = and i1 %43, %23, !dbg !27
  %69 = and i1 %44, %23, !dbg !27
  %70 = and i1 %45, %23, !dbg !27
  %71 = and i1 %24, %46, !dbg !27
  %72 = and i1 %25, %46, !dbg !27
  %73 = and i1 %26, %46, !dbg !27
  %74 = and i1 %27, %46, !dbg !27
  %75 = and i1 %28, %46, !dbg !27
  %76 = and i1 %29, %46, !dbg !27
  %77 = and i1 %30, %46, !dbg !27
  %78 = and i1 %31, %46, !dbg !27
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %67) #2, !dbg !28
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !28
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !28
  %82 = bitcast i32 %80 to float, !dbg !28
  %83 = bitcast i32 %81 to float, !dbg !28
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %68) #2, !dbg !28
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !28
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !28
  %87 = bitcast i32 %85 to float, !dbg !28
  %88 = bitcast i32 %86 to float, !dbg !28
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %69) #2, !dbg !28
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !28
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !28
  %92 = bitcast i32 %90 to float, !dbg !28
  %93 = bitcast i32 %91 to float, !dbg !28
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %70) #2, !dbg !28
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !28
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !28
  %97 = bitcast i32 %95 to float, !dbg !28
  %98 = bitcast i32 %96 to float, !dbg !28
  %99 = sext i32 %47 to i64, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !29
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %23) #2, !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %23) #2, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !31
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %23) #2, !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %23) #2, !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %107) #2, !dbg !33
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %109) #2, !dbg !33
  %112 = fmul float %110, %82, !dbg !34
  %113 = fmul float %111, %83, !dbg !34
  %114 = fmul float %110, %87, !dbg !34
  %115 = fmul float %111, %88, !dbg !34
  %116 = fmul float %110, %92, !dbg !34
  %117 = fmul float %111, %93, !dbg !34
  %118 = fmul float %110, %97, !dbg !34
  %119 = fmul float %111, %98, !dbg !34
  %120 = mul i32 %15, 25, !dbg !35
  %121 = mul i32 %16, 25, !dbg !35
  %122 = mul i32 %17, 25, !dbg !35
  %123 = mul i32 %18, 25, !dbg !35
  %124 = mul i32 %19, 25, !dbg !35
  %125 = mul i32 %20, 25, !dbg !35
  %126 = mul i32 %21, 25, !dbg !35
  %127 = mul i32 %22, 25, !dbg !35
  %128 = add i32 %41, %120, !dbg !36
  %129 = add i32 %41, %121, !dbg !36
  %130 = add i32 %41, %122, !dbg !36
  %131 = add i32 %41, %123, !dbg !36
  %132 = add i32 %41, %124, !dbg !36
  %133 = add i32 %41, %125, !dbg !36
  %134 = add i32 %41, %126, !dbg !36
  %135 = add i32 %41, %127, !dbg !36
  %136 = sext i32 %128 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !37
  %138 = sext i32 %129 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !37
  %140 = sext i32 %130 to i64, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %140, !dbg !37
  %142 = sext i32 %131 to i64, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %142, !dbg !37
  %144 = sext i32 %132 to i64, !dbg !37
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !37
  %146 = sext i32 %133 to i64, !dbg !37
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !37
  %148 = sext i32 %134 to i64, !dbg !37
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !37
  %150 = sext i32 %135 to i64, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !37
  %152 = shl i32 %10, 6, !dbg !38
  %153 = and i32 %152, 960, !dbg !38
  %154 = or disjoint i32 %153, %35, !dbg !38
  %155 = and i32 %10, 127, !dbg !38
  %156 = lshr exact i32 %153, 5, !dbg !38
  %157 = add nuw nsw i32 %156, %154, !dbg !38
  %158 = zext nneg i32 %157 to i64, !dbg !38
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !38
  %160 = bitcast float %112 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !38
  %161 = or disjoint i32 %154, 32, !dbg !38
  %162 = lshr i32 %161, 5, !dbg !38
  %163 = add nuw nsw i32 %162, %161, !dbg !38
  %164 = zext nneg i32 %163 to i64, !dbg !38
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !38
  %166 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !38
  %167 = or disjoint i32 %154, 8, !dbg !38
  %168 = add nuw nsw i32 %167, %156, !dbg !38
  %169 = zext nneg i32 %168 to i64, !dbg !38
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !38
  %171 = bitcast float %114 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !38
  %172 = or disjoint i32 %154, 40, !dbg !38
  %173 = lshr i32 %172, 5, !dbg !38
  %174 = add nuw nsw i32 %173, %172, !dbg !38
  %175 = zext nneg i32 %174 to i64, !dbg !38
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !38
  %177 = bitcast float %115 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !38
  %178 = or disjoint i32 %154, 16, !dbg !38
  %179 = add nuw nsw i32 %178, %156, !dbg !38
  %180 = zext nneg i32 %179 to i64, !dbg !38
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %180, !dbg !38
  %182 = bitcast float %116 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !38
  %183 = or disjoint i32 %154, 48, !dbg !38
  %184 = lshr i32 %183, 5, !dbg !38
  %185 = add nuw nsw i32 %184, %183, !dbg !38
  %186 = zext nneg i32 %185 to i64, !dbg !38
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %186, !dbg !38
  %188 = bitcast float %117 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !38
  %189 = or disjoint i32 %154, 24, !dbg !38
  %190 = add nuw nsw i32 %189, %156, !dbg !38
  %191 = zext nneg i32 %190 to i64, !dbg !38
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %191, !dbg !38
  %193 = bitcast float %118 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !38
  %194 = or disjoint i32 %154, 56, !dbg !38
  %195 = lshr i32 %194, 5, !dbg !38
  %196 = add nuw nsw i32 %195, %194, !dbg !38
  %197 = zext nneg i32 %196 to i64, !dbg !38
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %197, !dbg !38
  %199 = bitcast float %119 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %200 = lshr i32 %155, 5, !dbg !38
  %201 = add nuw nsw i32 %200, %155, !dbg !38
  %202 = zext nneg i32 %201 to i64, !dbg !38
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %202, !dbg !38
  %204 = load i32, ptr addrspace(3) %203, align 4, !dbg !38
  %205 = or disjoint i32 %155, 128, !dbg !38
  %206 = lshr i32 %205, 5, !dbg !38
  %207 = add nuw nsw i32 %206, %205, !dbg !38
  %208 = zext nneg i32 %207 to i64, !dbg !38
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %208, !dbg !38
  %210 = load i32, ptr addrspace(3) %209, align 4, !dbg !38
  %211 = or disjoint i32 %155, 256, !dbg !38
  %212 = lshr i32 %211, 5, !dbg !38
  %213 = add nuw nsw i32 %212, %211, !dbg !38
  %214 = zext nneg i32 %213 to i64, !dbg !38
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %214, !dbg !38
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !38
  %217 = or disjoint i32 %155, 384, !dbg !38
  %218 = lshr i32 %217, 5, !dbg !38
  %219 = add nuw nsw i32 %218, %217, !dbg !38
  %220 = zext nneg i32 %219 to i64, !dbg !38
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %220, !dbg !38
  %222 = load i32, ptr addrspace(3) %221, align 4, !dbg !38
  %223 = or disjoint i32 %155, 512, !dbg !38
  %224 = lshr i32 %223, 5, !dbg !38
  %225 = add nuw nsw i32 %224, %223, !dbg !38
  %226 = zext nneg i32 %225 to i64, !dbg !38
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %226, !dbg !38
  %228 = load i32, ptr addrspace(3) %227, align 4, !dbg !38
  %229 = or disjoint i32 %155, 640, !dbg !38
  %230 = lshr i32 %229, 5, !dbg !38
  %231 = add nuw nsw i32 %230, %229, !dbg !38
  %232 = zext nneg i32 %231 to i64, !dbg !38
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %232, !dbg !38
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !38
  %235 = or disjoint i32 %155, 768, !dbg !38
  %236 = lshr i32 %235, 5, !dbg !38
  %237 = add nuw nsw i32 %236, %235, !dbg !38
  %238 = zext nneg i32 %237 to i64, !dbg !38
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %238, !dbg !38
  %240 = load i32, ptr addrspace(3) %239, align 4, !dbg !38
  %241 = or disjoint i32 %155, 896, !dbg !38
  %242 = lshr i32 %241, 5, !dbg !38
  %243 = add nuw nsw i32 %242, %241, !dbg !38
  %244 = zext nneg i32 %243 to i64, !dbg !38
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %244, !dbg !38
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %137, i1 %71) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %139, i1 %72) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %141, i1 %73) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %222, ptr addrspace(1) %143, i1 %74) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %228, ptr addrspace(1) %145, i1 %75) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %147, i1 %76) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %149, i1 %77) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %246, ptr addrspace(1) %151, i1 %78) #2, !dbg !38
  %247 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !39
  %248 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !39
  %249 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !39
  %250 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !39
  %251 = bitcast float %112 to i32, !dbg !40
  %252 = bitcast float %113 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %251, i32 %252, ptr addrspace(1) %247, i1 %67) #2, !dbg !40
  %253 = bitcast float %114 to i32, !dbg !40
  %254 = bitcast float %115 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %253, i32 %254, ptr addrspace(1) %248, i1 %68) #2, !dbg !40
  %255 = bitcast float %116 to i32, !dbg !40
  %256 = bitcast float %117 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %255, i32 %256, ptr addrspace(1) %249, i1 %69) #2, !dbg !40
  %257 = bitcast float %118 to i32, !dbg !40
  %258 = bitcast float %119 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %257, i32 %258, ptr addrspace(1) %250, i1 %70) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5v2a2rybe6rgv4bmwkxzy6w64c5mz3pmkyajhdhuphrbccbl4x.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_6", linkageName: "triton_poi_fused__weight_norm_interface_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 46, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 44, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 52, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
