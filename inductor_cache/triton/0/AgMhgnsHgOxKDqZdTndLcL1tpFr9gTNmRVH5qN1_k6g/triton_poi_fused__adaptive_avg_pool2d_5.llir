; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__adaptive_avg_pool2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %11 = lshr exact i32 %10, 2, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = shl i32 %7, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = or disjoint i32 %6, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 2, !dbg !15
  %19 = and i32 %7, 3, !dbg !16
  %.lobit1 = lshr exact i32 %10, 6, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = or disjoint i32 %18, %.lobit1, !dbg !17
  %22 = or disjoint i32 %21, 2, !dbg !17
  %23 = icmp slt i32 %20, 4, !dbg !18
  %24 = icmp slt i32 %21, 4, !dbg !18
  %25 = icmp slt i32 %22, 4, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %26 = sdiv i32 %.frozen, 2, !dbg !19
  %27 = mul i32 %26, 2, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %.frozen17 = freeze i32 %16, !dbg !21
  %28 = sdiv i32 %.frozen17, 2048, !dbg !21
  %29 = mul i32 %28, 2048, !dbg !22
  %.decomposed18 = sub i32 %.frozen17, %29, !dbg !22
  %30 = shl nsw i32 %.decomposed, 1, !dbg !23
  %31 = shl i32 %26, 3, !dbg !24
  %32 = add i32 %30, %31, !dbg !25
  %33 = shl i32 %15, 4, !dbg !26
  %34 = or disjoint i32 %33, 512, !dbg !26
  %35 = or disjoint i32 %33, 1024, !dbg !26
  %36 = or disjoint i32 %33, 1536, !dbg !26
  %37 = or disjoint i32 %33, 2048, !dbg !26
  %38 = or disjoint i32 %33, 2560, !dbg !26
  %39 = or disjoint i32 %33, 3072, !dbg !26
  %40 = or disjoint i32 %33, 3584, !dbg !26
  %41 = add i32 %32, %33, !dbg !27
  %42 = add i32 %32, %34, !dbg !27
  %43 = add i32 %32, %35, !dbg !27
  %44 = add i32 %32, %36, !dbg !27
  %45 = add i32 %32, %37, !dbg !27
  %46 = add i32 %32, %38, !dbg !27
  %47 = add i32 %32, %39, !dbg !27
  %48 = add i32 %32, %40, !dbg !27
  %49 = sext i32 %41 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %42 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %43 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %44 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = sext i32 %45 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = sext i32 %46 to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !28
  %61 = sext i32 %47 to i64, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !28
  %63 = sext i32 %48 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %23) #2, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %23) #2, !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #2, !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #2, !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %23) #2, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %23) #2, !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %23) #2, !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %23) #2, !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = or disjoint i32 %30, 1, !dbg !30
  %82 = add i32 %81, %31, !dbg !31
  %83 = add i32 %82, %33, !dbg !32
  %84 = add i32 %82, %34, !dbg !32
  %85 = add i32 %82, %35, !dbg !32
  %86 = add i32 %82, %36, !dbg !32
  %87 = add i32 %82, %37, !dbg !32
  %88 = add i32 %82, %38, !dbg !32
  %89 = add i32 %82, %39, !dbg !32
  %90 = add i32 %82, %40, !dbg !32
  %91 = sext i32 %83 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !33
  %93 = sext i32 %84 to i64, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !33
  %95 = sext i32 %85 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !33
  %97 = sext i32 %86 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !33
  %99 = sext i32 %87 to i64, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !33
  %101 = sext i32 %88 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !33
  %103 = sext i32 %89 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !33
  %105 = sext i32 %90 to i64, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %23) #2, !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #2, !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %23) #2, !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %23) #2, !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %23) #2, !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %23) #2, !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %23) #2, !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %23) #2, !dbg !34
  %122 = bitcast i32 %121 to float, !dbg !34
  %123 = add i32 %32, 4, !dbg !35
  %124 = add i32 %123, %33, !dbg !36
  %125 = add i32 %123, %34, !dbg !36
  %126 = add i32 %123, %35, !dbg !36
  %127 = add i32 %123, %36, !dbg !36
  %128 = add i32 %123, %37, !dbg !36
  %129 = add i32 %123, %38, !dbg !36
  %130 = add i32 %123, %39, !dbg !36
  %131 = add i32 %123, %40, !dbg !36
  %132 = sext i32 %124 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !37
  %134 = sext i32 %125 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !37
  %136 = sext i32 %126 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !37
  %138 = sext i32 %127 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !37
  %140 = sext i32 %128 to i64, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !37
  %142 = sext i32 %129 to i64, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !37
  %144 = sext i32 %130 to i64, !dbg !37
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !37
  %146 = sext i32 %131 to i64, !dbg !37
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !37
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %23) #2, !dbg !38
  %149 = bitcast i32 %148 to float, !dbg !38
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %23) #2, !dbg !38
  %151 = bitcast i32 %150 to float, !dbg !38
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %23) #2, !dbg !38
  %153 = bitcast i32 %152 to float, !dbg !38
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %23) #2, !dbg !38
  %155 = bitcast i32 %154 to float, !dbg !38
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %23) #2, !dbg !38
  %157 = bitcast i32 %156 to float, !dbg !38
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %23) #2, !dbg !38
  %159 = bitcast i32 %158 to float, !dbg !38
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #2, !dbg !38
  %161 = bitcast i32 %160 to float, !dbg !38
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %23) #2, !dbg !38
  %163 = bitcast i32 %162 to float, !dbg !38
  %164 = add i32 %32, 5, !dbg !39
  %165 = add i32 %164, %33, !dbg !40
  %166 = add i32 %164, %34, !dbg !40
  %167 = add i32 %164, %35, !dbg !40
  %168 = add i32 %164, %36, !dbg !40
  %169 = add i32 %164, %37, !dbg !40
  %170 = add i32 %164, %38, !dbg !40
  %171 = add i32 %164, %39, !dbg !40
  %172 = add i32 %164, %40, !dbg !40
  %173 = sext i32 %165 to i64, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !41
  %175 = sext i32 %166 to i64, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !41
  %177 = sext i32 %167 to i64, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !41
  %179 = sext i32 %168 to i64, !dbg !41
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !41
  %181 = sext i32 %169 to i64, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !41
  %183 = sext i32 %170 to i64, !dbg !41
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !41
  %185 = sext i32 %171 to i64, !dbg !41
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !41
  %187 = sext i32 %172 to i64, !dbg !41
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !41
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %23) #2, !dbg !42
  %190 = bitcast i32 %189 to float, !dbg !42
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %23) #2, !dbg !42
  %192 = bitcast i32 %191 to float, !dbg !42
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %23) #2, !dbg !42
  %194 = bitcast i32 %193 to float, !dbg !42
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %23) #2, !dbg !42
  %196 = bitcast i32 %195 to float, !dbg !42
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %23) #2, !dbg !42
  %198 = bitcast i32 %197 to float, !dbg !42
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %23) #2, !dbg !42
  %200 = bitcast i32 %199 to float, !dbg !42
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %23) #2, !dbg !42
  %202 = bitcast i32 %201 to float, !dbg !42
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %23) #2, !dbg !42
  %204 = bitcast i32 %203 to float, !dbg !42
  %205 = fadd float %66, %108, !dbg !43
  %206 = fadd float %68, %110, !dbg !43
  %207 = fadd float %70, %112, !dbg !43
  %208 = fadd float %72, %114, !dbg !43
  %209 = fadd float %74, %116, !dbg !43
  %210 = fadd float %76, %118, !dbg !43
  %211 = fadd float %78, %120, !dbg !43
  %212 = fadd float %80, %122, !dbg !43
  %213 = fadd float %205, %149, !dbg !44
  %214 = fadd float %206, %151, !dbg !44
  %215 = fadd float %207, %153, !dbg !44
  %216 = fadd float %208, %155, !dbg !44
  %217 = fadd float %209, %157, !dbg !44
  %218 = fadd float %210, %159, !dbg !44
  %219 = fadd float %211, %161, !dbg !44
  %220 = fadd float %212, %163, !dbg !44
  %221 = fadd float %213, %190, !dbg !45
  %222 = fadd float %214, %192, !dbg !45
  %223 = fadd float %215, %194, !dbg !45
  %224 = fadd float %216, %196, !dbg !45
  %225 = fadd float %217, %198, !dbg !45
  %226 = fadd float %218, %200, !dbg !45
  %227 = fadd float %219, %202, !dbg !45
  %228 = fadd float %220, %204, !dbg !45
  %229 = fmul float %221, 2.500000e-01, !dbg !46
  %230 = fmul float %222, 2.500000e-01, !dbg !46
  %231 = fmul float %223, 2.500000e-01, !dbg !46
  %232 = fmul float %224, 2.500000e-01, !dbg !46
  %233 = fmul float %225, 2.500000e-01, !dbg !46
  %234 = fmul float %226, 2.500000e-01, !dbg !46
  %235 = fmul float %227, 2.500000e-01, !dbg !46
  %236 = fmul float %228, 2.500000e-01, !dbg !46
  %237 = shl i32 %21, 11, !dbg !47
  %238 = shl i32 %22, 11, !dbg !47
  %239 = shl i32 %28, 13, !dbg !48
  %240 = add i32 %239, %.decomposed18, !dbg !49
  %241 = add i32 %240, %237, !dbg !50
  %242 = add i32 %240, %238, !dbg !50
  %243 = sext i32 %241 to i64, !dbg !51
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !51
  %245 = sext i32 %242 to i64, !dbg !51
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !51
  %247 = shl i32 %7, 8, !dbg !52
  %248 = and i32 %247, 768, !dbg !52
  %249 = or disjoint i32 %248, %9, !dbg !52
  %250 = or disjoint i32 %249, %11, !dbg !52
  %251 = and i32 %13, 508, !dbg !52
  %252 = lshr exact i32 %248, 4, !dbg !52
  %253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %252, !dbg !52
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !52
  %255 = bitcast float %229 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !52
  %256 = or disjoint i32 %250, 32, !dbg !52
  %257 = getelementptr float, ptr addrspace(3) %253, i32 %256, !dbg !52
  %258 = bitcast float %230 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #2, !dbg !52
  %259 = or disjoint i32 %250, 64, !dbg !52
  %260 = getelementptr float, ptr addrspace(3) %253, i32 %259, !dbg !52
  %261 = bitcast float %231 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !52
  %262 = or disjoint i32 %250, 96, !dbg !52
  %263 = getelementptr float, ptr addrspace(3) %253, i32 %262, !dbg !52
  %264 = bitcast float %232 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !52
  %265 = or disjoint i32 %250, 128, !dbg !52
  %266 = getelementptr float, ptr addrspace(3) %253, i32 %265, !dbg !52
  %267 = bitcast float %233 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !52
  %268 = or disjoint i32 %250, 160, !dbg !52
  %269 = getelementptr float, ptr addrspace(3) %253, i32 %268, !dbg !52
  %270 = bitcast float %234 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !52
  %271 = or disjoint i32 %250, 192, !dbg !52
  %272 = getelementptr float, ptr addrspace(3) %253, i32 %271, !dbg !52
  %273 = bitcast float %235 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #2, !dbg !52
  %274 = or disjoint i32 %250, 224, !dbg !52
  %275 = getelementptr float, ptr addrspace(3) %253, i32 %274, !dbg !52
  %276 = bitcast float %236 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %277 = lshr i32 %13, 6, !dbg !52
  %278 = and i32 %277, 4, !dbg !52
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !52
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %251, !dbg !52
  %281 = or disjoint i32 %251, 512, !dbg !52
  %282 = lshr i32 %281, 6, !dbg !52
  %283 = and i32 %282, 12, !dbg !52
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !52
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %281, !dbg !52
  %286 = load <4 x i32>, ptr addrspace(3) %285, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %280, align 16, !dbg !52
  %287 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 4, !dbg !52
  %.extract10 = load i32, ptr addrspace(3) %287, align 4, !dbg !52
  %288 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 8, !dbg !52
  %.extract11 = load i32, ptr addrspace(3) %288, align 8, !dbg !52
  %289 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 12, !dbg !52
  %.extract12 = load i32, ptr addrspace(3) %289, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %244, i1 %24) #2, !dbg !52
  %.extract13 = extractelement <4 x i32> %286, i64 0, !dbg !52
  %.extract14 = extractelement <4 x i32> %286, i64 1, !dbg !52
  %.extract15 = extractelement <4 x i32> %286, i64 2, !dbg !52
  %.extract16 = extractelement <4 x i32> %286, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %246, i1 %25) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmaz7ex4a63uddrrnht4qtiz5ppnhedjicjdcxl3ajdklfc5bnye.py", directory: "inductor_cache/ma")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_5", linkageName: "triton_poi_fused__adaptive_avg_pool2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 47, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 52, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 48, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 56, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 48, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 56, scope: !7)
!39 = !DILocation(line: 37, column: 41, scope: !7)
!40 = !DILocation(line: 37, column: 48, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 56, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 43, column: 35, scope: !7)
!48 = !DILocation(line: 43, column: 45, scope: !7)
!49 = !DILocation(line: 43, column: 30, scope: !7)
!50 = !DILocation(line: 43, column: 40, scope: !7)
!51 = !DILocation(line: 43, column: 25, scope: !7)
!52 = !DILocation(line: 43, column: 56, scope: !7)
!53 = !DILocation(line: 43, column: 4, scope: !7)
