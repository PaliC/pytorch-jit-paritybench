; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 127, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !13
  %19 = sdiv i32 %18, 16, !dbg !14
  %20 = srem i32 %19, 512, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %21 = sdiv i32 %.frozen, 4, !dbg !16
  %22 = mul i32 %21, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = srem i32 %21, 4, !dbg !18
  %24 = sext i32 %18 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !20
  %27 = sext i32 %20 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !30
  %.lhs.trunc = trunc nsw i32 %23 to i8, !dbg !31
  %39 = sdiv i8 %.lhs.trunc, 2, !dbg !31
  %.sext = sext i8 %39 to i32, !dbg !31
  %40 = shl nsw i32 %.sext, 2, !dbg !32
  %41 = mul i8 %39, 2, !dbg !33
  %.decomposed8 = sub i8 %.lhs.trunc, %41, !dbg !33
  %.sext7 = sext i8 %.decomposed8 to i32, !dbg !33
  %42 = shl nsw i32 %.sext7, 3, !dbg !34
  %43 = shl nsw i32 %19, 4, !dbg !35
  %44 = add i32 %43, %.decomposed, !dbg !36
  %45 = add i32 %44, %40, !dbg !37
  %46 = add i32 %45, %42, !dbg !38
  %47 = sext i32 %46 to i64, !dbg !39
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !39
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !40
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !41
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !42
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !43
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !44
  %54 = bitcast i32 %53 to float, !dbg !44
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !45
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !46
  %57 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !47
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !48
  %59 = fadd float %34, 0x3EE4F8B580000000, !dbg !49
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %60, 0, !dbg !50
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %61, 0, !dbg !50
  br i1 %.not.i, label %67, label %62, !dbg !50

62:                                               ; preds = %13
  br i1 %.not1.i, label %65, label %63, !dbg !50

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

67:                                               ; preds = %13
  br i1 %.not1.i, label %70, label %68, !dbg !50

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !50
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %73 = fadd float %54, 0x3EE4F8B580000000, !dbg !52
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %74, 0, !dbg !53
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !53
  br i1 %.not.i1, label %81, label %76, !dbg !53

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !53

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !53

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !53
  %86 = bitcast i32 %49 to float, !dbg !40
  %87 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !24
  %88 = insertelement <2 x i32> %87, i32 %51, i64 1, !dbg !24
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !24
  %90 = bitcast i32 %26 to float, !dbg !20
  %91 = bitcast i32 %29 to float, !dbg !22
  %92 = fadd float %90, %91, !dbg !54
  %93 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !28
  %94 = insertelement <2 x i32> %93, i32 %56, i64 1, !dbg !28
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !28
  %96 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !30
  %97 = insertelement <2 x i32> %96, i32 %58, i64 1, !dbg !30
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !30
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !55
  %100 = insertelement <2 x float> poison, float %92, i64 0, !dbg !56
  %101 = insertelement <2 x float> %100, float %86, i64 1, !dbg !56
  %102 = fsub <2 x float> %101, %89, !dbg !56
  %103 = insertelement <2 x float> poison, float %72, i64 0, !dbg !57
  %104 = insertelement <2 x float> %103, float %99, i64 1, !dbg !57
  %105 = fmul <2 x float> %102, %104, !dbg !57
  %106 = fmul <2 x float> %105, %95, !dbg !58
  %107 = fadd <2 x float> %106, %98, !dbg !59
  %shift = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %108 = fadd <2 x float> %107, %shift, !dbg !60
  %109 = bitcast float %92 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %25, i1 true) #3, !dbg !61
  %110 = getelementptr float, ptr addrspace(1) %11, i64 %24, !dbg !62
  %bc = bitcast <2 x float> %108 to <2 x i32>, !dbg !63
  %111 = extractelement <2 x i32> %bc, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %110, i1 true) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwuh5i744o3toufxxyvbwog4gumnwn4e4il7xjdbpfcvthp6ta23.py", directory: "inductor_cache/wu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 39, scope: !7)
!33 = !DILocation(line: 35, column: 59, scope: !7)
!34 = !DILocation(line: 35, column: 54, scope: !7)
!35 = !DILocation(line: 35, column: 68, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 50, scope: !7)
!38 = !DILocation(line: 35, column: 65, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 73, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 38, column: 31, scope: !7)
!46 = !DILocation(line: 38, column: 36, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 36, scope: !7)
!49 = !DILocation(line: 43, column: 18, scope: !7)
!50 = !DILocation(line: 44, column: 26, scope: !7)
!51 = !DILocation(line: 46, column: 19, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 27, scope: !7)
!54 = !DILocation(line: 40, column: 18, scope: !7)
!55 = !DILocation(line: 55, column: 19, scope: !7)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 49, column: 19, scope: !7)
!58 = !DILocation(line: 50, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 39, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 62, column: 4, scope: !7)
