; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_clone_native_layer_norm_native_layer_norm_backward_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %15 = and i32 %14, 31, !dbg !11
  %16 = lshr i32 %14, 5, !dbg !11
  %17 = shl i32 %14, 2, !dbg !11
  %18 = and i32 %17, 1020, !dbg !11
  %19 = icmp samesign ult i32 %18, 768, !dbg !12
  %.frozen = freeze i32 %13, !dbg !13
  %20 = sdiv i32 %.frozen, 2, !dbg !13
  %21 = mul i32 %20, 2, !dbg !14
  %.decomposed = sub i32 %.frozen, %21, !dbg !14
  %22 = srem i32 %20, 2, !dbg !15
  %23 = sdiv i32 %13, 4, !dbg !16
  %24 = mul i32 %13, 768, !dbg !17
  %25 = add i32 %24, %18, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %40 to float, !dbg !22
  %43 = zext nneg i32 %18 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = bitcast i32 %48 to float, !dbg !24
  %51 = mul nsw i32 %.decomposed, 768, !dbg !25
  %52 = add nsw i32 %51, %18, !dbg !26
  %53 = mul nsw i32 %22, 5376, !dbg !27
  %54 = mul i32 %23, 37632, !dbg !28
  %55 = add i32 %52, %54, !dbg !29
  %56 = add i32 %55, %53, !dbg !30
  %57 = sext i32 %56 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !31
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !33
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !34
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !34
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !34
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !34
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !35
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !36
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !37
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !38
  %74 = fadd float %42, %50, !dbg !39
  %75 = fadd float %74, %35, !dbg !40
  %76 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !22
  %77 = insertelement <2 x i32> %76, i32 %60, i64 1, !dbg !22
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !22
  %79 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !24
  %80 = insertelement <2 x i32> %79, i32 %66, i64 1, !dbg !24
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !24
  %82 = fadd <2 x float> %78, %81, !dbg !39
  %83 = extractelement <2 x float> %82, i64 0, !dbg !40
  %84 = fadd float %83, %33, !dbg !40
  %85 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !22
  %86 = insertelement <2 x i32> %85, i32 %61, i64 1, !dbg !22
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !22
  %88 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !24
  %89 = insertelement <2 x i32> %88, i32 %67, i64 1, !dbg !24
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !24
  %91 = fadd <2 x float> %87, %90, !dbg !39
  %92 = extractelement <2 x float> %91, i64 0, !dbg !40
  %93 = fadd float %92, %34, !dbg !40
  %94 = extractelement <2 x float> %82, i64 1, !dbg !41
  %95 = fadd float %84, %94, !dbg !41
  %96 = extractelement <2 x float> %91, i64 1, !dbg !41
  %97 = fadd float %93, %96, !dbg !41
  %98 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !22
  %99 = insertelement <2 x i32> %98, i32 %62, i64 1, !dbg !22
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !22
  %101 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !24
  %102 = insertelement <2 x i32> %101, i32 %68, i64 1, !dbg !24
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !24
  %104 = fadd <2 x float> %100, %103, !dbg !39
  %105 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !40
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !40
  %107 = insertelement <2 x float> %106, float %75, i64 1, !dbg !40
  %108 = fadd <2 x float> %104, %107, !dbg !40
  %109 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !42
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !42
  %111 = insertelement <2 x float> %110, float %95, i64 1, !dbg !42
  %112 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !42
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !42
  %114 = insertelement <2 x float> %113, float %97, i64 1, !dbg !42
  %115 = fadd <2 x float> %111, %114, !dbg !42
  %116 = fadd <2 x float> %108, %115, !dbg !41
  %117 = extractelement <2 x float> %116, i64 0, !dbg !43
  %118 = extractelement <2 x float> %116, i64 1, !dbg !43
  %119 = fadd float %117, %118, !dbg !43
  %120 = select i1 %19, float %119, float 0.000000e+00, !dbg !43
  %121 = bitcast float %120 to i32, !dbg !48
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 16, i32 31), !dbg !48
  %123 = bitcast i32 %122 to float, !dbg !48
  %124 = fadd float %120, %123, !dbg !43
  %125 = bitcast float %124 to i32, !dbg !48
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 8, i32 31), !dbg !48
  %127 = bitcast i32 %126 to float, !dbg !48
  %128 = fadd float %124, %127, !dbg !43
  %129 = bitcast float %128 to i32, !dbg !48
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !48
  %131 = bitcast i32 %130 to float, !dbg !48
  %132 = fadd float %128, %131, !dbg !43
  %133 = bitcast float %132 to i32, !dbg !48
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !48
  %135 = bitcast i32 %134 to float, !dbg !48
  %136 = fadd float %132, %135, !dbg !43
  %137 = bitcast float %136 to i32, !dbg !48
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !48
  %139 = bitcast i32 %138 to float, !dbg !48
  %140 = fadd float %136, %139, !dbg !43
  %141 = icmp eq i32 %15, 0, !dbg !48
  %142 = and i32 %16, 7, !dbg !48
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !48
  %144 = bitcast float %140 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 %141) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %145 = icmp slt i32 %14, 8, !dbg !48
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %14, !dbg !48
  %147 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %146, i1 %145) #5, !dbg !48
  %148 = bitcast i32 %147 to float, !dbg !48
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !48
  %150 = bitcast i32 %149 to float, !dbg !48
  %151 = fadd float %148, %150, !dbg !43
  %152 = bitcast float %151 to i32, !dbg !48
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !48
  %154 = bitcast i32 %153 to float, !dbg !48
  %155 = fadd float %151, %154, !dbg !43
  %156 = bitcast float %155 to i32, !dbg !48
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !48
  %158 = bitcast i32 %157 to float, !dbg !48
  %159 = fadd float %155, %158, !dbg !43
  %160 = and i32 %14, 7, !dbg !48
  %161 = icmp eq i32 %160, 0, !dbg !48
  %162 = and i1 %145, %161, !dbg !48
  %163 = bitcast float %159 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %163, i1 %162) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %164 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %165 = fadd float %164, 0.000000e+00, !dbg !49
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 7.680000e+02) #5, !dbg !53
  %167 = fsub float %95, %166, !dbg !54
  %168 = fsub float %97, %166, !dbg !54
  %169 = extractelement <2 x float> %108, i64 1, !dbg !54
  %170 = fsub float %169, %166, !dbg !54
  %171 = fsub float %117, %166, !dbg !54
  %172 = fmul float %167, %167, !dbg !55
  %173 = fmul float %168, %168, !dbg !55
  %174 = fmul float %170, %170, !dbg !55
  %175 = fmul float %171, %171, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %176 = fadd float %172, %173, !dbg !58
  %177 = fadd float %174, %176, !dbg !58
  %178 = fadd float %175, %177, !dbg !58
  %179 = select i1 %19, float %178, float 0.000000e+00, !dbg !58
  %180 = bitcast float %179 to i32, !dbg !56
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !56
  %182 = bitcast i32 %181 to float, !dbg !56
  %183 = fadd float %179, %182, !dbg !58
  %184 = bitcast float %183 to i32, !dbg !56
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 8, i32 31), !dbg !56
  %186 = bitcast i32 %185 to float, !dbg !56
  %187 = fadd float %183, %186, !dbg !58
  %188 = bitcast float %187 to i32, !dbg !56
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !56
  %190 = bitcast i32 %189 to float, !dbg !56
  %191 = fadd float %187, %190, !dbg !58
  %192 = bitcast float %191 to i32, !dbg !56
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 2, i32 31), !dbg !56
  %194 = bitcast i32 %193 to float, !dbg !56
  %195 = fadd float %191, %194, !dbg !58
  %196 = bitcast float %195 to i32, !dbg !56
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !56
  %198 = bitcast i32 %197 to float, !dbg !56
  %199 = fadd float %195, %198, !dbg !58
  %200 = bitcast float %199 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %200, i1 %141) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %201 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %146, i1 %145) #5, !dbg !56
  %202 = bitcast i32 %201 to float, !dbg !56
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 4, i32 31), !dbg !56
  %204 = bitcast i32 %203 to float, !dbg !56
  %205 = fadd float %202, %204, !dbg !58
  %206 = bitcast float %205 to i32, !dbg !56
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !56
  %208 = bitcast i32 %207 to float, !dbg !56
  %209 = fadd float %205, %208, !dbg !58
  %210 = bitcast float %209 to i32, !dbg !56
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !56
  %212 = bitcast i32 %211 to float, !dbg !56
  %213 = fadd float %209, %212, !dbg !58
  %214 = bitcast float %213 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %214, i1 %162) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %215 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !56
  %216 = fadd float %215, 0.000000e+00, !dbg !59
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float 7.680000e+02) #5, !dbg !61
  %218 = fadd float %217, 0x3EB0C6F7A0000000, !dbg !62
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not.i = icmp eq i32 %219, 0, !dbg !63
  br i1 %.not.i, label %222, label %220, !dbg !63

220:                                              ; preds = %12
  %221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %218), !dbg !63
  br label %__nv_rsqrtf.exit, !dbg !63

222:                                              ; preds = %12
  %223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %218), !dbg !63
  br label %__nv_rsqrtf.exit, !dbg !63

__nv_rsqrtf.exit:                                 ; preds = %220, %222
  %.0.i = phi float [ %221, %220 ], [ %223, %222 ], !dbg !63
  %224 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !38
  %225 = bitcast i32 %224 to float, !dbg !38
  %226 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !38
  %227 = bitcast i32 %226 to float, !dbg !38
  %228 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !38
  %229 = bitcast i32 %228 to float, !dbg !38
  %230 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !38
  %231 = bitcast i32 %230 to float, !dbg !38
  %232 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !36
  %233 = bitcast i32 %232 to float, !dbg !36
  %234 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !36
  %235 = bitcast i32 %234 to float, !dbg !36
  %236 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !36
  %237 = bitcast i32 %236 to float, !dbg !36
  %238 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !36
  %239 = bitcast i32 %238 to float, !dbg !36
  %240 = fmul float %167, %.0.i, !dbg !64
  %241 = fmul float %168, %.0.i, !dbg !64
  %242 = fmul float %170, %.0.i, !dbg !64
  %243 = fmul float %171, %.0.i, !dbg !64
  %244 = fmul float %240, %239, !dbg !65
  %245 = fmul float %241, %237, !dbg !65
  %246 = fmul float %242, %235, !dbg !65
  %247 = fmul float %243, %233, !dbg !65
  %248 = fadd float %244, %231, !dbg !66
  %249 = fadd float %245, %229, !dbg !66
  %250 = fadd float %246, %227, !dbg !66
  %251 = fadd float %247, %225, !dbg !66
  %252 = fmul float %.0.i, 0x3F55555560000000, !dbg !67
  %253 = bitcast float %95 to i32, !dbg !68
  %254 = bitcast float %97 to i32, !dbg !68
  %255 = bitcast float %169 to i32, !dbg !68
  %256 = bitcast float %117 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %254, i32 %255, i32 %256, ptr addrspace(1) %27, i1 %19) #5, !dbg !68
  %257 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !69
  %258 = bitcast float %240 to i32, !dbg !70
  %259 = bitcast float %241 to i32, !dbg !70
  %260 = bitcast float %242 to i32, !dbg !70
  %261 = bitcast float %243 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %259, i32 %260, i32 %261, ptr addrspace(1) %257, i1 %19) #5, !dbg !70
  %262 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !71
  %263 = bitcast float %248 to i32, !dbg !72
  %264 = bitcast float %249 to i32, !dbg !72
  %265 = bitcast float %250 to i32, !dbg !72
  %266 = bitcast float %251 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %264, i32 %265, i32 %266, ptr addrspace(1) %262, i1 %19) #5, !dbg !72
  %267 = sext i32 %13 to i64, !dbg !73
  %268 = getelementptr float, ptr addrspace(1) %9, i64 %267, !dbg !73
  %urem = and i32 %14, 255, !dbg !74
  %269 = icmp eq i32 %urem, 0, !dbg !74
  %270 = bitcast float %252 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %268, i1 %269) #5, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cutkm3ukidrmdmsalxm4btnna4oxkbprmlxool32in2lo5jjshgo.py", directory: "inductor_cache/ut")
!4 = !{ptr @triton_per_fused_add_clone_native_layer_norm_native_layer_norm_backward_39, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clone_native_layer_norm_native_layer_norm_backward_39, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clone_native_layer_norm_native_layer_norm_backward_39", linkageName: "triton_per_fused_add_clone_native_layer_norm_native_layer_norm_backward_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 33, column: 21, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 26, scope: !7)
!16 = !DILocation(line: 34, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 43, scope: !7)
!18 = !DILocation(line: 35, column: 39, scope: !7)
!19 = !DILocation(line: 35, column: 34, scope: !7)
!20 = !DILocation(line: 35, column: 48, scope: !7)
!21 = !DILocation(line: 36, column: 30, scope: !7)
!22 = !DILocation(line: 36, column: 44, scope: !7)
!23 = !DILocation(line: 37, column: 30, scope: !7)
!24 = !DILocation(line: 37, column: 35, scope: !7)
!25 = !DILocation(line: 38, column: 39, scope: !7)
!26 = !DILocation(line: 38, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 49, scope: !7)
!28 = !DILocation(line: 38, column: 60, scope: !7)
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 38, column: 54, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 65, scope: !7)
!33 = !DILocation(line: 39, column: 30, scope: !7)
!34 = !DILocation(line: 39, column: 35, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 18, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!47 = !DILocation(line: 50, column: 59, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 73, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 50, column: 45, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 19, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 59, scope: !7)
!58 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !57)
!59 = !DILocation(line: 73, column: 15, scope: !50, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 45, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 28, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 48, scope: !7)
!69 = !DILocation(line: 71, column: 25, scope: !7)
!70 = !DILocation(line: 71, column: 46, scope: !7)
!71 = !DILocation(line: 72, column: 25, scope: !7)
!72 = !DILocation(line: 72, column: 46, scope: !7)
!73 = !DILocation(line: 73, column: 25, scope: !7)
!74 = !DILocation(line: 73, column: 37, scope: !7)
!75 = !DILocation(line: 73, column: 4, scope: !7)
