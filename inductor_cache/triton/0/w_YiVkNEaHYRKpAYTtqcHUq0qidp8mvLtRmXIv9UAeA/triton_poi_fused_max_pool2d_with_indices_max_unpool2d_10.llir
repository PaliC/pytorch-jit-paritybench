; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/eo/ceomiioqx6k77au5yicognjo6eglfpt6b7mh7hsps3nfyrtfnxab.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp33 < 32768\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %6 = shl i32 %5, 8, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = shl i32 %7, 1, !dbg !14
  %9 = and i32 %8, 254, !dbg !14
  %10 = or disjoint i32 %6, %9, !dbg !15
  %11 = or disjoint i32 %6, 1, !dbg !15
  %12 = srem i32 %11, 2, !dbg !16
  %13 = ashr exact i32 %10, 1, !dbg !17
  %14 = srem i32 %13, 2, !dbg !18
  %15 = shl nsw i32 %12, 1, !dbg !19
  %16 = shl i32 %10, 2, !dbg !20
  %17 = add i32 %15, %16, !dbg !21
  %18 = sext i32 %16 to i64, !dbg !22
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !22
  %20 = sext i32 %17 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !23
  %23 = bitcast i32 %22 to float, !dbg !23
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !23
  %25 = bitcast i32 %24 to float, !dbg !23
  %26 = or disjoint i32 %16, 1, !dbg !24
  %27 = or disjoint i32 %17, 1, !dbg !24
  %28 = sext i32 %26 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = sext i32 %27 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = or disjoint i32 %16, 4, !dbg !27
  %37 = add i32 %17, 4, !dbg !27
  %38 = sext i32 %36 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !28
  %40 = sext i32 %37 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = or disjoint i32 %16, 5, !dbg !30
  %47 = add i32 %17, 5, !dbg !30
  %48 = sext i32 %46 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !31
  %50 = sext i32 %47 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %53 = bitcast i32 %52 to float, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !32
  %55 = bitcast i32 %54 to float, !dbg !32
  %56 = fcmp ogt float %33, %23, !dbg !33
  %57 = fcmp ogt float %35, %25, !dbg !33
  %58 = fcmp uno float %33, 0.000000e+00, !dbg !34
  %59 = fcmp uno float %35, 0.000000e+00, !dbg !34
  %60 = or i1 %56, %58, !dbg !38
  %61 = or i1 %57, %59, !dbg !38
  %62 = select i1 %60, float %33, float %23, !dbg !39
  %63 = select i1 %61, float %35, float %25, !dbg !39
  %64 = fcmp olt float %62, %43, !dbg !40
  %65 = fcmp olt float %63, %45, !dbg !40
  %66 = fcmp uno float %43, 0.000000e+00, !dbg !41
  %67 = fcmp uno float %45, 0.000000e+00, !dbg !41
  %68 = or i1 %66, %64, !dbg !43
  %69 = or i1 %67, %65, !dbg !43
  %70 = select i1 %68, float %43, float %62, !dbg !44
  %71 = select i1 %69, float %45, float %63, !dbg !44
  %72 = fcmp olt float %70, %53, !dbg !45
  %73 = fcmp olt float %71, %55, !dbg !45
  %74 = zext i1 %56 to i32, !dbg !46
  %75 = select i1 %64, i32 2, i32 %74, !dbg !47
  %76 = select i1 %72, i32 3, i32 %75, !dbg !48
  %77 = zext i1 %57 to i32, !dbg !46
  %78 = select i1 %65, i32 2, i32 %77, !dbg !47
  %79 = select i1 %73, i32 3, i32 %78, !dbg !48
  %80 = lshr i32 %76, 1, !dbg !49
  %81 = lshr i32 %79, 1, !dbg !49
  %82 = and i32 %76, 1, !dbg !50
  %83 = shl nsw i32 %14, 1, !dbg !51
  %84 = or disjoint i32 %80, %83, !dbg !52
  %85 = or disjoint i32 %81, %83, !dbg !52
  %86 = or i32 %79, %15, !dbg !53
  %87 = sext i32 %84 to i64, !dbg !54
  %88 = sext i32 %85 to i64, !dbg !54
  %89 = shl nsw i64 %87, 2, !dbg !54
  %90 = shl nsw i64 %88, 2, !dbg !54
  %91 = zext nneg i32 %82 to i64, !dbg !55
  %92 = sext i32 %86 to i64, !dbg !55
  %93 = or disjoint i64 %89, %91, !dbg !55
  %94 = add nsw i64 %90, %92, !dbg !55
  %95 = sdiv i32 %10, 4, !dbg !56
  %96 = shl i32 %95, 4, !dbg !57
  %97 = sext i32 %96 to i64, !dbg !58
  %98 = add nsw i64 %93, %97, !dbg !58
  %99 = add nsw i64 %94, %97, !dbg !58
  %100 = lshr i64 %98, 48, !dbg !59
  %101 = and i64 %100, 32768, !dbg !59
  %102 = add nsw i64 %101, %98, !dbg !59
  %103 = lshr i64 %99, 48, !dbg !59
  %104 = and i64 %103, 32768, !dbg !59
  %105 = add nsw i64 %104, %99, !dbg !59
  %106 = or i64 %105, %102, !dbg !60
  %.not = icmp ult i64 %106, 32768, !dbg !60
  br i1 %.not, label %108, label %107, !dbg !60

107:                                              ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 66, ptr nonnull @assertFunc_0, i64 1), !dbg !60
  unreachable, !dbg !60

108:                                              ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %109 = fcmp uno float %53, 0.000000e+00, !dbg !61
  %110 = fcmp uno float %55, 0.000000e+00, !dbg !61
  %111 = or i1 %109, %72, !dbg !63
  %112 = or i1 %110, %73, !dbg !63
  %113 = sext i32 %10 to i64, !dbg !64
  %114 = getelementptr i64, ptr addrspace(1) %1, i64 %113, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %93, i64 %94, ptr addrspace(1) %114, i1 true) #3, !dbg !65
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !66
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !66
  %117 = ptrtoint ptr addrspace(1) %115 to i64, !dbg !67
  %118 = ptrtoint ptr addrspace(1) %116 to i64, !dbg !67
  %119 = and i32 %7, 127, !dbg !67
  %120 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %9, !dbg !67
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %120, i64 %117, i64 %118, i1 true) #3, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %121 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %119, !dbg !67
  %122 = load i64, ptr addrspace(3) %121, align 8, !dbg !67
  %123 = or disjoint i32 %119, 128, !dbg !67
  %124 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %123, !dbg !67
  %125 = load i64, ptr addrspace(3) %124, align 8, !dbg !67
  %126 = inttoptr i64 %122 to ptr addrspace(1), !dbg !67
  %127 = inttoptr i64 %125 to ptr addrspace(1), !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !67
  %129 = bitcast float %70 to i32, !dbg !67
  %130 = select i1 %111, i32 %52, i32 %129, !dbg !68
  %131 = bitcast float %71 to i32, !dbg !67
  %132 = select i1 %112, i32 %54, i32 %131, !dbg !68
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %128, i32 %130, i32 %132, i1 true) #3, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !67
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !67
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !67
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %126, i1 true) #3, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %127, i1 true) #3, !dbg !67
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceomiioqx6k77au5yicognjo6eglfpt6b7mh7hsps3nfyrtfnxab.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 19, scope: !11)
!17 = !DILocation(line: 25, column: 19, scope: !11)
!18 = !DILocation(line: 26, column: 26, scope: !11)
!19 = !DILocation(line: 28, column: 32, scope: !11)
!20 = !DILocation(line: 28, column: 39, scope: !11)
!21 = !DILocation(line: 28, column: 37, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 44, scope: !11)
!24 = !DILocation(line: 29, column: 41, scope: !11)
!25 = !DILocation(line: 29, column: 30, scope: !11)
!26 = !DILocation(line: 29, column: 48, scope: !11)
!27 = !DILocation(line: 30, column: 41, scope: !11)
!28 = !DILocation(line: 30, column: 30, scope: !11)
!29 = !DILocation(line: 30, column: 48, scope: !11)
!30 = !DILocation(line: 31, column: 42, scope: !11)
!31 = !DILocation(line: 31, column: 31, scope: !11)
!32 = !DILocation(line: 31, column: 49, scope: !11)
!33 = !DILocation(line: 36, column: 18, scope: !11)
!34 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !11, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 40, column: 40, scope: !11)
!38 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 41, column: 18, scope: !11)
!41 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 41, scope: !11)
!43 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !42)
!45 = !DILocation(line: 45, column: 20, scope: !11)
!46 = !DILocation(line: 50, column: 30, scope: !11)
!47 = !DILocation(line: 43, column: 33, scope: !11)
!48 = !DILocation(line: 47, column: 35, scope: !11)
!49 = !DILocation(line: 50, column: 87, scope: !11)
!50 = !DILocation(line: 52, column: 20, scope: !11)
!51 = !DILocation(line: 53, column: 14, scope: !11)
!52 = !DILocation(line: 54, column: 20, scope: !11)
!53 = !DILocation(line: 56, column: 20, scope: !11)
!54 = !DILocation(line: 58, column: 20, scope: !11)
!55 = !DILocation(line: 59, column: 20, scope: !11)
!56 = !DILocation(line: 60, column: 22, scope: !11)
!57 = !DILocation(line: 60, column: 16, scope: !11)
!58 = !DILocation(line: 61, column: 20, scope: !11)
!59 = !DILocation(line: 65, column: 35, scope: !11)
!60 = !DILocation(line: 66, column: 53, scope: !11)
!61 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !62)
!62 = !DILocation(line: 69, column: 42, scope: !11)
!63 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !62)
!64 = !DILocation(line: 70, column: 25, scope: !11)
!65 = !DILocation(line: 70, column: 37, scope: !11)
!66 = !DILocation(line: 71, column: 25, scope: !11)
!67 = !DILocation(line: 71, column: 67, scope: !11)
!68 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !62)
!69 = !DILocation(line: 71, column: 4, scope: !11)
