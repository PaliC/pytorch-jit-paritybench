; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = and i32 %13, 127, !dbg !12
  %17 = or disjoint i32 %16, 128, !dbg !12
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = or disjoint i32 %12, %16, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %21 = sdiv i32 %.frozen, 64, !dbg !14
  %22 = srem i32 %21, 64, !dbg !15
  %23 = mul i32 %21, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = sdiv i32 %18, 4096, !dbg !17
  %25 = sext i32 %22 to i64, !dbg !18
  %26 = getelementptr i64, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #2, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #2, !dbg !19
  %29 = sext i32 %.decomposed to i64, !dbg !20
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !20
  %31 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !21
  %32 = extractvalue { i64, i64 } %31, 0, !dbg !21
  %33 = extractvalue { i64, i64 } %31, 1, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #2, !dbg !22
  %35 = getelementptr i64, ptr addrspace(1) %4, i64 %29, !dbg !23
  %36 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !24
  %37 = extractvalue { i64, i64 } %36, 0, !dbg !24
  %38 = extractvalue { i64, i64 } %36, 1, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #2, !dbg !26
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !26
  %43 = getelementptr i64, ptr addrspace(1) %6, i64 %25, !dbg !27
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !28
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = lshr i64 %27, 59, !dbg !31
  %52 = and i64 %51, 16, !dbg !31
  %53 = add i64 %52, %27, !dbg !31
  %54 = lshr i64 %32, 59, !dbg !32
  %55 = and i64 %54, 16, !dbg !32
  %56 = lshr i64 %33, 59, !dbg !32
  %57 = and i64 %56, 16, !dbg !32
  %58 = shl i64 %53, 4, !dbg !33
  %59 = shl nsw i32 %24, 8, !dbg !34
  %60 = sext i32 %59 to i64, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %55, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %58, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %60, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %57, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %58, !dbg !36
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %60, !dbg !36
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !37
  %71 = lshr i64 %37, 59, !dbg !38
  %72 = and i64 %71, 16, !dbg !38
  %73 = lshr i64 %38, 59, !dbg !38
  %74 = and i64 %73, 16, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !39
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %72, !dbg !39
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %58, !dbg !39
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %60, !dbg !39
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !39
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %74, !dbg !39
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %58, !dbg !39
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %60, !dbg !39
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !40
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #2, !dbg !40
  %85 = lshr i64 %44, 59, !dbg !41
  %86 = and i64 %85, 16, !dbg !41
  %87 = add i64 %86, %44, !dbg !41
  %88 = shl i64 %87, 4, !dbg !42
  %89 = getelementptr float, ptr addrspace(1) %62, i64 %88, !dbg !43
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %60, !dbg !43
  %91 = getelementptr float, ptr addrspace(1) %66, i64 %88, !dbg !43
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %60, !dbg !43
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !44
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !44
  %95 = getelementptr float, ptr addrspace(1) %76, i64 %88, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %60, !dbg !45
  %97 = getelementptr float, ptr addrspace(1) %80, i64 %88, !dbg !45
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %60, !dbg !45
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !46
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !46
  %101 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !44
  %102 = insertelement <2 x i32> %101, i32 %69, i64 1, !dbg !44
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !44
  %104 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !47
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !47
  %106 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %107 = fadd <2 x float> %106, %103, !dbg !47
  %108 = fcmp olt <2 x float> %107, zeroinitializer, !dbg !48
  %109 = select <2 x i1> %108, <2 x float> zeroinitializer, <2 x float> %107, !dbg !52
  %110 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !46
  %111 = insertelement <2 x i32> %110, i32 %83, i64 1, !dbg !46
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !46
  %113 = fadd <2 x float> %106, %112, !dbg !53
  %114 = fcmp olt <2 x float> %113, zeroinitializer, !dbg !54
  %115 = select <2 x i1> %114, <2 x float> zeroinitializer, <2 x float> %113, !dbg !56
  %116 = fsub <2 x float> %115, %109, !dbg !57
  %117 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !58
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !58
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %120 = fmul <2 x float> %116, %119, !dbg !58
  %121 = fadd <2 x float> %109, %120, !dbg !59
  %122 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !44
  %123 = insertelement <2 x i32> %122, i32 %70, i64 1, !dbg !44
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !44
  %125 = fadd <2 x float> %106, %124, !dbg !47
  %126 = fcmp olt <2 x float> %125, zeroinitializer, !dbg !48
  %127 = select <2 x i1> %126, <2 x float> zeroinitializer, <2 x float> %125, !dbg !52
  %128 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !46
  %129 = insertelement <2 x i32> %128, i32 %84, i64 1, !dbg !46
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !46
  %131 = fadd <2 x float> %106, %130, !dbg !53
  %132 = fcmp olt <2 x float> %131, zeroinitializer, !dbg !54
  %133 = select <2 x i1> %132, <2 x float> zeroinitializer, <2 x float> %131, !dbg !56
  %134 = fsub <2 x float> %133, %127, !dbg !57
  %135 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !58
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !58
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %138 = fmul <2 x float> %134, %137, !dbg !58
  %139 = fadd <2 x float> %127, %138, !dbg !59
  %140 = extractelement <2 x float> %121, i64 0, !dbg !60
  %141 = extractelement <2 x float> %121, i64 1, !dbg !61
  %142 = fsub float %140, %141, !dbg !60
  %143 = extractelement <2 x float> %139, i64 0, !dbg !60
  %144 = extractelement <2 x float> %139, i64 1, !dbg !61
  %145 = fsub float %143, %144, !dbg !60
  %146 = fmul float %142, %48, !dbg !62
  %147 = fmul float %145, %50, !dbg !62
  %148 = fadd float %141, %146, !dbg !61
  %149 = fadd float %144, %147, !dbg !61
  %150 = mul i32 %19, 17, !dbg !63
  %151 = mul i32 %20, 17, !dbg !63
  %152 = sext i32 %150 to i64, !dbg !64
  %153 = getelementptr float, ptr addrspace(1) %8, i64 %152, !dbg !64
  %154 = sext i32 %151 to i64, !dbg !64
  %155 = getelementptr float, ptr addrspace(1) %8, i64 %154, !dbg !64
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !65
  %157 = bitcast float %148 to i32, !dbg !65
  %158 = bitcast float %149 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %156, i32 %157, i32 %158, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !65
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !65
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !65
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %153, i1 true) #2, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %155, i1 true) #2, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5dbzbq6oirpqmwijyco7eremhhlvsixppd4iamluno75to5glnd.py", directory: "inductor_cache/5d")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_27", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 43, column: 40, scope: !7)
!34 = !DILocation(line: 43, column: 51, scope: !7)
!35 = !DILocation(line: 43, column: 47, scope: !7)
!36 = !DILocation(line: 43, column: 30, scope: !7)
!37 = !DILocation(line: 43, column: 56, scope: !7)
!38 = !DILocation(line: 49, column: 35, scope: !7)
!39 = !DILocation(line: 50, column: 31, scope: !7)
!40 = !DILocation(line: 50, column: 58, scope: !7)
!41 = !DILocation(line: 58, column: 35, scope: !7)
!42 = !DILocation(line: 59, column: 41, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 58, scope: !7)
!45 = !DILocation(line: 62, column: 31, scope: !7)
!46 = !DILocation(line: 62, column: 59, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 61, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 63, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !55)
!55 = !DILocation(line: 64, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !55)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 70, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 28, scope: !7)
!64 = !DILocation(line: 71, column: 25, scope: !7)
!65 = !DILocation(line: 71, column: 40, scope: !7)
!66 = !DILocation(line: 71, column: 4, scope: !7)
