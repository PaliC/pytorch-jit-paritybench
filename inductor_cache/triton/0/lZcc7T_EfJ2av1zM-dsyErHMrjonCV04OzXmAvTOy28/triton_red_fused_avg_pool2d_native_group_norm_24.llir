; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = and i32 %9, 63, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 128, !dbg !14
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = lshr i32 %9, 6, !dbg !15
  %19 = shl i32 %14, 9, !dbg !16
  %20 = shl i32 %15, 7, !dbg !17
  %21 = shl nuw nsw i32 %18, 1
  %22 = and i32 %21, 6
  %invariant.op = or disjoint i32 %22, %19, !dbg !18
  %23 = or disjoint i32 %20, %10
  %24 = shl i32 %9, 2
  %25 = and i32 %24, 252
  %26 = and i32 %18, 3
  %27 = or disjoint i32 %25, %26
  %28 = and i32 %9, 255
  %29 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %25
  %30 = getelementptr float, ptr addrspace(3) %29, i32 %27
  %31 = lshr i32 %28, 2
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31
  %33 = getelementptr inbounds float, ptr addrspace(3) %32, i32 %28
  %34 = sext i32 %23 to i64, !dbg !18
  %35 = zext i32 %invariant.op to i64, !dbg !18
  %36 = sext i32 %invariant.op to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %39 = or disjoint i32 %invariant.op, 1, !dbg !21
  %40 = sext i32 %39 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %16, i32 0, i1 %16) #5, !dbg !23
  %43 = or disjoint i32 %invariant.op, 8, !dbg !24
  %44 = sext i32 %43 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %16, i32 0, i1 %16) #5, !dbg !26
  %47 = or disjoint i32 %invariant.op, 9, !dbg !27
  %48 = sext i32 %47 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %16, i32 0, i1 %16) #5, !dbg !29
  %51 = bitcast i32 %38 to float, !dbg !20
  %52 = bitcast i32 %42 to float, !dbg !23
  %53 = fadd float %51, %52, !dbg !30
  %54 = bitcast i32 %46 to float, !dbg !26
  %55 = fadd float %53, %54, !dbg !31
  %56 = bitcast i32 %50 to float, !dbg !29
  %57 = fadd float %55, %56, !dbg !32
  %58 = fmul float %57, 2.500000e-01, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %60 = bitcast float %58 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %60, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %61 = load i32, ptr addrspace(3) %33, align 4, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %61, ptr addrspace(1) %59, i1 %17) #5, !dbg !35
  %62 = select i1 %16, float 1.000000e+00, float 0.000000e+00, !dbg !36
  %63 = select i1 %16, float %58, float 0.000000e+00, !dbg !37
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !18
  br label %64, !dbg !18

64:                                               ; preds = %.peel.next, %64
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %64 ]
  %65 = phi float [ %62, %.peel.next ], [ %102, %64 ]
  %66 = phi float [ 0.000000e+00, %.peel.next ], [ %101, %64 ]
  %67 = phi float [ %63, %.peel.next ], [ %100, %64 ]
  %68 = shl nuw nsw i64 %indvars.iv, 2, !dbg !38
  %69 = add nuw nsw i64 %68, %35
  %sext = shl i64 %69, 32, !dbg !19
  %70 = ashr exact i64 %sext, 30, !dbg !19
  %71 = getelementptr i8, ptr addrspace(1) %0, i64 %70, !dbg !19
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %73 = bitcast i32 %72 to float, !dbg !20
  %74 = shl i64 %69, 32, !dbg !22
  %sext12 = ashr exact i64 %74, 32, !dbg !22
  %75 = or i64 %sext12, 1, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %16, i32 0, i1 %16) #5, !dbg !23
  %78 = bitcast i32 %77 to float, !dbg !23
  %79 = shl i64 %69, 32, !dbg !25
  %sext13 = ashr exact i64 %79, 32, !dbg !25
  %80 = or i64 %sext13, 8, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %16, i32 0, i1 %16) #5, !dbg !26
  %83 = bitcast i32 %82 to float, !dbg !26
  %84 = shl i64 %69, 32, !dbg !28
  %sext14 = ashr exact i64 %84, 32, !dbg !28
  %85 = or i64 %sext14, 9, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %16, i32 0, i1 %16) #5, !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %73, %78, !dbg !30
  %90 = fadd float %89, %83, !dbg !31
  %91 = fadd float %90, %88, !dbg !32
  %92 = fmul float %91, 2.500000e-01, !dbg !33
  %93 = fsub float %92, %67, !dbg !39
  %94 = fadd float %65, 1.000000e+00, !dbg !43
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %94) #5, !dbg !44
  %96 = fadd float %67, %95, !dbg !45
  %97 = fsub float %92, %96, !dbg !46
  %98 = fmul float %93, %97, !dbg !47
  %99 = fadd float %66, %98, !dbg !48
  %100 = select i1 %16, float %96, float %67, !dbg !37
  %101 = select i1 %16, float %99, float %66, !dbg !49
  %102 = select i1 %16, float %94, float %65, !dbg !36
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %103 = bitcast float %92 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %103, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %104 = load i32, ptr addrspace(3) %33, align 4, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %gep, i1 %17) #5, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !18
  %105 = icmp samesign ult i64 %indvars.iv, 124, !dbg !18
  br i1 %105, label %64, label %.loopexit, !dbg !18, !llvm.loop !50

.loopexit:                                        ; preds = %64
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %106 = shl nuw nsw i32 %11, 2, !dbg !52
  %107 = or disjoint i32 %106, %26, !dbg !52
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !52
  %109 = bitcast float %100 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #5, !dbg !52
  %110 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %107, !dbg !52
  %111 = bitcast float %101 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #5, !dbg !52
  %112 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %107, !dbg !52
  %113 = bitcast float %102 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %114 = icmp slt i32 %9, 256, !dbg !52
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !52
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #5, !dbg !52
  %117 = bitcast i32 %116 to float, !dbg !52
  %118 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %9, !dbg !52
  %119 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %118, i1 %114) #5, !dbg !52
  %120 = bitcast i32 %119 to float, !dbg !52
  %121 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %9, !dbg !52
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %114) #5, !dbg !52
  %123 = bitcast i32 %122 to float, !dbg !52
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !52
  %125 = bitcast i32 %124 to float, !dbg !52
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !52
  %127 = bitcast i32 %126 to float, !dbg !52
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !52
  %129 = bitcast i32 %128 to float, !dbg !52
  %130 = fsub float %125, %117, !dbg !54
  %131 = fadd float %123, %129, !dbg !56
  %132 = fcmp oeq float %131, 0.000000e+00, !dbg !57
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %131) #5, !dbg !58
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !59
  %135 = fmul float %130, %134, !dbg !60
  %136 = fadd float %135, %117, !dbg !61
  %137 = fadd float %120, %127, !dbg !62
  %138 = fmul float %130, %130, !dbg !63
  %139 = fmul float %138, %123, !dbg !64
  %140 = fmul float %139, %134, !dbg !65
  %141 = fadd float %137, %140, !dbg !66
  %142 = bitcast float %136 to i32, !dbg !52
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !52
  %144 = bitcast i32 %143 to float, !dbg !52
  %145 = bitcast float %141 to i32, !dbg !52
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !52
  %147 = bitcast i32 %146 to float, !dbg !52
  %148 = bitcast float %131 to i32, !dbg !52
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !52
  %150 = bitcast i32 %149 to float, !dbg !52
  %151 = fsub float %144, %136, !dbg !54
  %152 = fadd float %131, %150, !dbg !56
  %153 = fcmp oeq float %152, 0.000000e+00, !dbg !57
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %152) #5, !dbg !58
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !59
  %156 = fmul float %151, %155, !dbg !60
  %157 = fadd float %136, %156, !dbg !61
  %158 = fadd float %141, %147, !dbg !62
  %159 = fmul float %151, %151, !dbg !63
  %160 = fmul float %131, %159, !dbg !64
  %161 = fmul float %155, %160, !dbg !65
  %162 = fadd float %158, %161, !dbg !66
  %163 = icmp eq i32 %10, 0, !dbg !52
  %164 = and i1 %114, %163, !dbg !52
  %165 = bitcast float %157 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %165, i1 %164) #5, !dbg !52
  %166 = bitcast float %162 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %166, i1 %164) #5, !dbg !52
  %167 = bitcast float %152 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %167, i1 %164) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !52
  %169 = load i32, ptr addrspace(3) %168, align 16, !dbg !52
  %170 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %106, !dbg !52
  %171 = load float, ptr addrspace(3) %170, align 16, !dbg !52
  %172 = sext i32 %14 to i64, !dbg !67
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !67
  %174 = icmp eq i32 %26, 0, !dbg !68
  %175 = and i1 %174, %16, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %173, i1 %175) #5, !dbg !68
  %176 = getelementptr float, ptr addrspace(1) %3, i64 %172, !dbg !69
  %177 = bitcast float %171 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %176, i1 %175) #5, !dbg !70
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float 1.280000e+02) #5, !dbg !71
  %179 = fadd float %178, 0x3EE4F8B580000000, !dbg !72
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !73
  %.not.i = icmp eq i32 %180, 0, !dbg !73
  br i1 %.not.i, label %183, label %181, !dbg !73

181:                                              ; preds = %.loopexit
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %179), !dbg !73
  br label %__nv_rsqrtf.exit, !dbg !73

183:                                              ; preds = %.loopexit
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %179), !dbg !73
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %181, %183
  %.0.i = phi float [ %182, %181 ], [ %184, %183 ], !dbg !73
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %172, !dbg !74
  %186 = bitcast float %.0.i to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %185, i1 %175) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5wz7ctqcquzljbcks5u73pwutuwwyrsyvfne7nlac53bvasgdos.py", directory: "inductor_cache/5w")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_24", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 53, scope: !7)
!17 = !DILocation(line: 52, column: 38, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 36, column: 34, scope: !7)
!20 = !DILocation(line: 36, column: 58, scope: !7)
!21 = !DILocation(line: 37, column: 53, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 62, scope: !7)
!24 = !DILocation(line: 38, column: 53, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 62, scope: !7)
!27 = !DILocation(line: 39, column: 53, scope: !7)
!28 = !DILocation(line: 39, column: 34, scope: !7)
!29 = !DILocation(line: 39, column: 62, scope: !7)
!30 = !DILocation(line: 40, column: 22, scope: !7)
!31 = !DILocation(line: 41, column: 22, scope: !7)
!32 = !DILocation(line: 42, column: 22, scope: !7)
!33 = !DILocation(line: 44, column: 22, scope: !7)
!34 = !DILocation(line: 52, column: 29, scope: !7)
!35 = !DILocation(line: 52, column: 49, scope: !7)
!36 = !DILocation(line: 51, column: 66, scope: !7)
!37 = !DILocation(line: 49, column: 62, scope: !7)
!38 = !DILocation(line: 36, column: 44, scope: !7)
!39 = !DILocation(line: 183, column: 24, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 47, column: 54, scope: !7)
!43 = !DILocation(line: 184, column: 30, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 185, column: 34, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 185, column: 26, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 186, column: 39, scope: !40, inlinedAt: !42)
!47 = !DILocation(line: 186, column: 31, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 186, column: 22, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 50, column: 58, scope: !7)
!50 = distinct !{!50, !51}
!51 = !{!"llvm.loop.peeled.count", i32 1}
!52 = !DILocation(line: 204, column: 46, scope: !40, inlinedAt: !53)
!53 = !DILocation(line: 54, column: 44, scope: !7)
!54 = !DILocation(line: 192, column: 21, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!56 = !DILocation(line: 193, column: 28, scope: !55, inlinedAt: !53)
!57 = !DILocation(line: 194, column: 39, scope: !55, inlinedAt: !53)
!58 = !DILocation(line: 194, column: 60, scope: !55, inlinedAt: !53)
!59 = !DILocation(line: 194, column: 49, scope: !55, inlinedAt: !53)
!60 = !DILocation(line: 196, column: 25, scope: !55, inlinedAt: !53)
!61 = !DILocation(line: 196, column: 17, scope: !55, inlinedAt: !53)
!62 = !DILocation(line: 197, column: 15, scope: !55, inlinedAt: !53)
!63 = !DILocation(line: 197, column: 30, scope: !55, inlinedAt: !53)
!64 = !DILocation(line: 197, column: 38, scope: !55, inlinedAt: !53)
!65 = !DILocation(line: 197, column: 49, scope: !55, inlinedAt: !53)
!66 = !DILocation(line: 197, column: 22, scope: !55, inlinedAt: !53)
!67 = !DILocation(line: 59, column: 25, scope: !7)
!68 = !DILocation(line: 59, column: 37, scope: !7)
!69 = !DILocation(line: 60, column: 25, scope: !7)
!70 = !DILocation(line: 60, column: 37, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 64, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 28, scope: !7)
!74 = !DILocation(line: 66, column: 25, scope: !7)
!75 = !DILocation(line: 66, column: 37, scope: !7)
!76 = !DILocation(line: 66, column: 4, scope: !7)
