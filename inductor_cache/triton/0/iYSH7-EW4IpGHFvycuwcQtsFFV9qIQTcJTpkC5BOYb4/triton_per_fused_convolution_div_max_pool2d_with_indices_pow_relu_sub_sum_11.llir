; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 1, !dbg !11
  %11 = and i32 %10, 126, !dbg !11
  %12 = shl i32 %6, 7, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !15
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !15
  %19 = zext nneg i32 %11 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !16
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !17
  %24 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %25 = insertelement <2 x i32> %24, i32 %18, i64 1, !dbg !15
  %26 = bitcast <2 x i32> %25 to <2 x float>, !dbg !15
  %27 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %28 = insertelement <2 x i32> %27, i32 %23, i64 1, !dbg !17
  %29 = bitcast <2 x i32> %28 to <2 x float>, !dbg !17
  %30 = fadd <2 x float> %26, %29, !dbg !18
  %31 = fcmp olt <2 x float> %30, zeroinitializer, !dbg !19
  %32 = select <2 x i1> %31, <2 x float> zeroinitializer, <2 x float> %30, !dbg !23
  %33 = fmul <2 x float> %32, %32, !dbg !24
  %shift = shufflevector <2 x float> %33, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %34 = fadd <2 x float> %33, %shift, !dbg !25
  %35 = extractelement <2 x float> %34, i64 0, !dbg !25
  %36 = bitcast float %35 to i32, !dbg !30
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = fadd float %35, %38, !dbg !25
  %40 = bitcast float %39 to i32, !dbg !30
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !30
  %42 = bitcast i32 %41 to float, !dbg !30
  %43 = fadd float %39, %42, !dbg !25
  %44 = bitcast float %43 to i32, !dbg !30
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = fadd float %43, %46, !dbg !25
  %48 = bitcast float %47 to i32, !dbg !30
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = fadd float %47, %50, !dbg !25
  %52 = bitcast float %51 to i32, !dbg !30
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = fadd float %51, %54, !dbg !25
  %56 = icmp eq i32 %8, 0, !dbg !30
  %57 = and i32 %9, 1, !dbg !30
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !30
  %59 = bitcast float %55 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 %56) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %60 = icmp slt i32 %7, 2, !dbg !30
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !30
  %62 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %60) #3, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = fadd float %63, %65, !dbg !25
  %67 = and i32 %7, 1, !dbg !30
  %68 = icmp eq i32 %67, 0, !dbg !30
  %69 = and i1 %60, %68, !dbg !30
  %70 = bitcast float %66 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %70, i1 %69) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %71 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %bc = bitcast <2 x float> %32 to <2 x i32>, !dbg !31
  %72 = extractelement <2 x i32> %bc, i64 0, !dbg !31
  %bc1 = bitcast <2 x float> %32 to <2 x i32>, !dbg !31
  %73 = extractelement <2 x i32> %bc1, i64 1, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %72, i32 %73, ptr addrspace(1) %15, i1 true) #3, !dbg !31
  %74 = sext i32 %6 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !32
  %urem = and i32 %7, 63, !dbg !33
  %76 = icmp eq i32 %urem, 0, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %71, ptr addrspace(1) %75, i1 %76) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cimz2zkj5bin2tcgcmk263oyk6wbrwtqydhe6ioaodtz5fdx7b4g.py", directory: "inductor_cache/im")
!4 = !{ptr @triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11", linkageName: "triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 43, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 48, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 18, scope: !7)
!19 = !DILocation(line: 118, column: 15, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 35, column: 40, scope: !7)
!23 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 38, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 39, column: 48, scope: !7)
!32 = !DILocation(line: 40, column: 25, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
