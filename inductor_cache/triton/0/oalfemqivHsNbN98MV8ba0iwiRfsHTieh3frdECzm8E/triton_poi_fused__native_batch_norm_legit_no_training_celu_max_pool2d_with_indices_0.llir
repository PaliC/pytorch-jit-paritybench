; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_celu_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %11, 1, !dbg !13
  %17 = icmp slt i32 %15, 64, !dbg !14
  %18 = srem i32 %16, 2, !dbg !15
  %19 = sdiv i32 %15, 4, !dbg !16
  %20 = srem i32 %19, 4, !dbg !17
  %21 = shl nsw i32 %18, 1, !dbg !18
  %22 = shl i32 %15, 2, !dbg !19
  %23 = add i32 %21, %22, !dbg !20
  %24 = sext i32 %22 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !22
  %30 = or disjoint i32 %22, 1, !dbg !23
  %31 = or disjoint i32 %23, 1, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %17) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %17) #3, !dbg !25
  %38 = or disjoint i32 %22, 4, !dbg !26
  %39 = add i32 %23, 4, !dbg !26
  %40 = sext i32 %38 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %17) #3, !dbg !28
  %46 = or disjoint i32 %22, 5, !dbg !29
  %47 = add i32 %23, 5, !dbg !29
  %48 = sext i32 %46 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %17) #3, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #3, !dbg !31
  %54 = sext i32 %20 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #3, !dbg !33
  %57 = bitcast i32 %56 to float, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #3, !dbg !33
  %59 = bitcast i32 %58 to float, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %17) #3, !dbg !35
  %62 = bitcast i32 %61 to float, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %17) #3, !dbg !35
  %64 = bitcast i32 %63 to float, !dbg !35
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %17) #3, !dbg !37
  %67 = bitcast i32 %66 to float, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %17) #3, !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !38
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %17) #3, !dbg !39
  %72 = bitcast i32 %71 to float, !dbg !39
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %17) #3, !dbg !39
  %74 = bitcast i32 %73 to float, !dbg !39
  %75 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !22
  %76 = insertelement <2 x i32> %75, i32 %29, i64 1, !dbg !22
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !22
  %78 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %79 = insertelement <2 x i32> %78, i32 %37, i64 1, !dbg !25
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !25
  %81 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !28
  %82 = insertelement <2 x i32> %81, i32 %45, i64 1, !dbg !28
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !28
  %84 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !31
  %85 = insertelement <2 x i32> %84, i32 %53, i64 1, !dbg !31
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !31
  %87 = fcmp ogt <2 x float> %80, %77, !dbg !40
  %88 = fcmp uno <2 x float> %80, zeroinitializer, !dbg !44
  %89 = or <2 x i1> %87, %88, !dbg !45
  %.v = select <2 x i1> %89, <2 x i32> %79, <2 x i32> %76, !dbg !46
  %90 = bitcast <2 x i32> %.v to <2 x float>, !dbg !46
  %91 = fcmp olt <2 x float> %90, %83, !dbg !47
  %92 = fcmp uno <2 x float> %83, zeroinitializer, !dbg !49
  %93 = or <2 x i1> %92, %91, !dbg !50
  %.v37 = select <2 x i1> %93, <2 x i32> %82, <2 x i32> %.v, !dbg !51
  %94 = bitcast <2 x i32> %.v37 to <2 x float>, !dbg !51
  %95 = fcmp olt <2 x float> %94, %86, !dbg !52
  %96 = bitcast i32 %52 to float, !dbg !54
  %97 = fcmp uno float %96, 0.000000e+00, !dbg !54
  %98 = bitcast i32 %53 to float, !dbg !54
  %99 = fcmp uno float %98, 0.000000e+00, !dbg !54
  %100 = extractelement <2 x i1> %95, i64 0, !dbg !55
  %101 = or i1 %97, %100, !dbg !55
  %102 = extractelement <2 x i1> %95, i64 1, !dbg !55
  %103 = or i1 %99, %102, !dbg !55
  %104 = extractelement <2 x float> %94, i64 0, !dbg !56
  %105 = select i1 %101, float %96, float %104, !dbg !56
  %106 = extractelement <2 x float> %94, i64 1, !dbg !56
  %107 = select i1 %103, float %98, float %106, !dbg !56
  %108 = fsub float %105, %57, !dbg !57
  %109 = fsub float %107, %59, !dbg !57
  %110 = fadd float %62, 0x3EE4F8B580000000, !dbg !58
  %111 = fadd float %64, 0x3EE4F8B580000000, !dbg !58
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i = icmp eq i32 %112, 0, !dbg !59
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i = icmp eq i32 %113, 0, !dbg !59
  br i1 %.not.i, label %119, label %114, !dbg !59

114:                                              ; preds = %9
  br i1 %.not1.i, label %117, label %115, !dbg !59

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

119:                                              ; preds = %9
  br i1 %.not1.i, label %122, label %120, !dbg !59

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

__nv_sqrtf.exit:                                  ; preds = %115, %117, %120, %122
  %.0.i = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !59
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i1 = icmp eq i32 %124, 0, !dbg !59
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i4 = icmp eq i32 %125, 0, !dbg !59
  br i1 %.not.i1, label %131, label %126, !dbg !59

126:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %129, label %127, !dbg !59

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

131:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %134, label %132, !dbg !59

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

__nv_sqrtf.exit5:                                 ; preds = %127, %129, %132, %134
  %.0.i3 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !59
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !60
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !60
  %138 = fmul float %108, %136, !dbg !61
  %139 = fmul float %109, %137, !dbg !61
  %140 = fmul float %138, %67, !dbg !62
  %141 = fmul float %139, %69, !dbg !62
  %142 = fadd float %140, %72, !dbg !63
  %143 = fadd float %141, %74, !dbg !63
  %144 = fmul float %142, 0x402AAAAAA0000000, !dbg !64
  %145 = fmul float %143, 0x402AAAAAA0000000, !dbg !64
  %146 = fmul float %144, 0x3FF7154760000000, !dbg !65
  %147 = tail call float @llvm.nvvm.round.f(float %146) #3, !dbg !65
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i6 = icmp eq i32 %148, 0, !dbg !65
  %149 = tail call float @llvm.nvvm.fabs.ftz.f(float %144) #3, !dbg !65
  %150 = tail call float @llvm.nvvm.fabs.f(float %144) #3, !dbg !65
  %.03.i = select i1 %.not.i6, float %150, float %149, !dbg !65
  %151 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !65
  %t.0.i = select i1 %151, float 0.000000e+00, float %147, !dbg !65
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %154 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !65
  %j.0.i = select i1 %154, float 1.270000e+02, float %t.0.i, !dbg !65
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not8.i = icmp eq i32 %160, 0, !dbg !65
  br i1 %.not8.i, label %163, label %161, !dbg !65

161:                                              ; preds = %__nv_sqrtf.exit5
  %162 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #3, !dbg !65
  br label %__nv_expm1f.exit, !dbg !65

163:                                              ; preds = %__nv_sqrtf.exit5
  %164 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #3, !dbg !65
  br label %__nv_expm1f.exit, !dbg !65

__nv_expm1f.exit:                                 ; preds = %161, %163
  %.0.i7 = phi float [ %162, %161 ], [ %164, %163 ], !dbg !65
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %166 = fmul float %145, 0x3FF7154760000000, !dbg !65
  %167 = tail call float @llvm.nvvm.round.f(float %166) #3, !dbg !65
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i10 = icmp eq i32 %168, 0, !dbg !65
  %169 = tail call float @llvm.nvvm.fabs.ftz.f(float %145) #3, !dbg !65
  %170 = tail call float @llvm.nvvm.fabs.f(float %145) #3, !dbg !65
  %.03.i11 = select i1 %.not.i10, float %170, float %169, !dbg !65
  %171 = fcmp olt float %.03.i11, 0x3FDA3D70A0000000, !dbg !65
  %t.0.i12 = select i1 %171, float 0.000000e+00, float %167, !dbg !65
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %174 = fcmp oeq float %t.0.i12, 1.280000e+02, !dbg !65
  %j.0.i13 = select i1 %174, float 1.270000e+02, float %t.0.i12, !dbg !65
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not8.i14 = icmp eq i32 %180, 0, !dbg !65
  br i1 %.not8.i14, label %183, label %181, !dbg !65

181:                                              ; preds = %__nv_expm1f.exit
  %182 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i13) #3, !dbg !65
  br label %__nv_expm1f.exit36, !dbg !65

183:                                              ; preds = %__nv_expm1f.exit
  %184 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i13) #3, !dbg !65
  br label %__nv_expm1f.exit36, !dbg !65

__nv_expm1f.exit36:                               ; preds = %181, %183
  %.0.i15 = phi float [ %182, %181 ], [ %184, %183 ], !dbg !65
  %185 = fcmp oeq float %144, 0.000000e+00, !dbg !65
  %186 = fadd float %144, %144, !dbg !65
  %187 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !65
  %188 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !65
  %.not9.i = icmp eq i32 %165, 0, !dbg !65
  %.not7.i = icmp eq i32 %159, 0, !dbg !65
  %.not6.i = icmp eq i32 %158, 0, !dbg !65
  %.not5.i = icmp eq i32 %157, 0, !dbg !65
  %.not4.i = icmp eq i32 %156, 0, !dbg !65
  %.not3.i = icmp eq i32 %155, 0, !dbg !65
  %.not2.i8 = icmp eq i32 %153, 0, !dbg !65
  %189 = fneg float %t.0.i, !dbg !65
  %.not1.i9 = icmp eq i32 %152, 0, !dbg !65
  %190 = tail call float @llvm.nvvm.fma.rn.f(float %189, float 0x3FE62E4000000000, float %144) #3, !dbg !65
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %189, float 0x3FE62E4000000000, float %144) #3, !dbg !65
  %.04.i = select i1 %.not1.i9, float %190, float %191, !dbg !65
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %189, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !65
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %189, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !65
  %.05.i = select i1 %.not2.i8, float %192, float %193, !dbg !65
  %194 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !65
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !65
  %.07.i = select i1 %.not3.i, float %194, float %195, !dbg !65
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !65
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !65
  %.08.i = select i1 %.not4.i, float %196, float %197, !dbg !65
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !65
  %199 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !65
  %.09.i = select i1 %.not5.i, float %198, float %199, !dbg !65
  %200 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !65
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !65
  %.06.i = select i1 %.not6.i, float %200, float %201, !dbg !65
  %202 = fmul float %.05.i, %.06.i, !dbg !65
  %203 = tail call float @llvm.nvvm.fma.rn.f(float %202, float %.05.i, float %.05.i) #3, !dbg !65
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %202, float %.05.i, float %.05.i) #3, !dbg !65
  %.01.i = select i1 %.not7.i, float %203, float %204, !dbg !65
  %205 = fadd float %.0.i7, -1.000000e+00, !dbg !65
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i7, float %205) #3, !dbg !65
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i7, float %205) #3, !dbg !65
  %.02.i = select i1 %.not9.i, float %206, float %207, !dbg !65
  %208 = fadd float %.02.i, %.02.i, !dbg !65
  %u.0.i = select i1 %154, float %208, float %.02.i, !dbg !65
  %u.1.i = select i1 %188, float 0x7FF0000000000000, float %u.0.i, !dbg !65
  %u.2.i = select i1 %187, float -1.000000e+00, float %u.1.i, !dbg !65
  %u.3.i = select i1 %185, float %186, float %u.2.i, !dbg !65
  %209 = fcmp ogt float %143, 0.000000e+00, !dbg !66
  %210 = fcmp ogt float %142, 0.000000e+00, !dbg !66
  %211 = zext <2 x i1> %87 to <2 x i8>, !dbg !67
  %212 = select <2 x i1> %91, <2 x i8> splat (i8 2), <2 x i8> %211, !dbg !68
  %213 = select <2 x i1> %95, <2 x i8> splat (i8 3), <2 x i8> %212, !dbg !69
  %.not7.i16 = icmp eq i32 %179, 0, !dbg !65
  %.not6.i17 = icmp eq i32 %178, 0, !dbg !65
  %.not5.i18 = icmp eq i32 %177, 0, !dbg !65
  %.not4.i19 = icmp eq i32 %176, 0, !dbg !65
  %.not3.i20 = icmp eq i32 %175, 0, !dbg !65
  %.not2.i21 = icmp eq i32 %173, 0, !dbg !65
  %214 = fneg float %t.0.i12, !dbg !65
  %.not1.i22 = icmp eq i32 %172, 0, !dbg !65
  %215 = tail call float @llvm.nvvm.fma.rn.f(float %214, float 0x3FE62E4000000000, float %145) #3, !dbg !65
  %216 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %214, float 0x3FE62E4000000000, float %145) #3, !dbg !65
  %.04.i23 = select i1 %.not1.i22, float %215, float %216, !dbg !65
  %217 = tail call float @llvm.nvvm.fma.rn.f(float %214, float 0x3EB7F7D1C0000000, float %.04.i23) #3, !dbg !65
  %218 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %214, float 0x3EB7F7D1C0000000, float %.04.i23) #3, !dbg !65
  %.05.i24 = select i1 %.not2.i21, float %217, float %218, !dbg !65
  %219 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i24, float 0x3F812ACC60000000) #3, !dbg !65
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i24, float 0x3F812ACC60000000) #3, !dbg !65
  %.07.i25 = select i1 %.not3.i20, float %219, float %220, !dbg !65
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i25, float %.05.i24, float 0x3FA5557C60000000) #3, !dbg !65
  %222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i25, float %.05.i24, float 0x3FA5557C60000000) #3, !dbg !65
  %.08.i26 = select i1 %.not4.i19, float %221, float %222, !dbg !65
  %223 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i26, float %.05.i24, float 0x3FC5553EC0000000) #3, !dbg !65
  %224 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i26, float %.05.i24, float 0x3FC5553EC0000000) #3, !dbg !65
  %.09.i27 = select i1 %.not5.i18, float %223, float %224, !dbg !65
  %225 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i27, float %.05.i24, float 0x3FDFFFFFC0000000) #3, !dbg !65
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i27, float %.05.i24, float 0x3FDFFFFFC0000000) #3, !dbg !65
  %.06.i28 = select i1 %.not6.i17, float %225, float %226, !dbg !65
  %227 = fmul float %.05.i24, %.06.i28, !dbg !65
  %228 = tail call float @llvm.nvvm.fma.rn.f(float %227, float %.05.i24, float %.05.i24) #3, !dbg !65
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %227, float %.05.i24, float %.05.i24) #3, !dbg !65
  %.01.i29 = select i1 %.not7.i16, float %228, float %229, !dbg !65
  %230 = fadd float %.0.i15, -1.000000e+00, !dbg !65
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not9.i30 = icmp eq i32 %231, 0, !dbg !65
  %232 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i29, float %.0.i15, float %230) #3, !dbg !65
  %233 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i29, float %.0.i15, float %230) #3, !dbg !65
  %.02.i31 = select i1 %.not9.i30, float %233, float %232, !dbg !65
  %234 = fadd float %.02.i31, %.02.i31, !dbg !65
  %u.0.i32 = select i1 %174, float %234, float %.02.i31, !dbg !65
  %235 = fcmp ogt float %j.0.i13, 1.280000e+02, !dbg !65
  %u.1.i33 = select i1 %235, float 0x7FF0000000000000, float %u.0.i32, !dbg !65
  %236 = fcmp olt float %j.0.i13, -2.500000e+01, !dbg !65
  %u.2.i34 = select i1 %236, float -1.000000e+00, float %u.1.i33, !dbg !65
  %237 = fcmp oeq float %145, 0.000000e+00, !dbg !65
  %238 = fadd float %145, %145, !dbg !65
  %u.3.i35 = select i1 %237, float %238, float %u.2.i34, !dbg !65
  %239 = fmul float %u.3.i, 0x3FB3333340000000, !dbg !70
  %240 = fmul float %u.3.i35, 0x3FB3333340000000, !dbg !70
  %241 = select i1 %210, float %142, float %239, !dbg !71
  %242 = select i1 %209, float %143, float %240, !dbg !71
  %243 = sext i32 %15 to i64, !dbg !72
  %244 = getelementptr float, ptr addrspace(1) %6, i64 %243, !dbg !72
  %245 = bitcast float %105 to i32, !dbg !73
  %246 = bitcast float %107 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %245, i32 %246, ptr addrspace(1) %244, i1 %17) #3, !dbg !73
  %247 = getelementptr i8, ptr addrspace(1) %7, i64 %243, !dbg !74
  %248 = bitcast <2 x i8> %213 to i16, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %248, ptr addrspace(1) %247, i1 %17) #3, !dbg !75
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !76
  %250 = bitcast float %241 to i32, !dbg !77
  %251 = bitcast float %242 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %250, i32 %251, ptr addrspace(1) %249, i1 %17) #3, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm4aqhgq5vniqyflaoh4jsvyjrp3xzqzvvuqyg3s4ify2v2cgiog.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_celu_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_celu_max_pool2d_with_indices_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_celu_max_pool2d_with_indices_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_celu_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 26, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 36, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !48)
!48 = !DILocation(line: 37, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 38, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !53)
!57 = !DILocation(line: 49, column: 19, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 27, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 20, scope: !7)
!63 = !DILocation(line: 59, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 28, scope: !7)
!66 = !DILocation(line: 61, column: 20, scope: !7)
!67 = !DILocation(line: 42, column: 33, scope: !7)
!68 = !DILocation(line: 45, column: 35, scope: !7)
!69 = !DILocation(line: 48, column: 35, scope: !7)
!70 = !DILocation(line: 66, column: 20, scope: !7)
!71 = !DILocation(line: 67, column: 35, scope: !7)
!72 = !DILocation(line: 68, column: 25, scope: !7)
!73 = !DILocation(line: 68, column: 36, scope: !7)
!74 = !DILocation(line: 69, column: 25, scope: !7)
!75 = !DILocation(line: 69, column: 37, scope: !7)
!76 = !DILocation(line: 70, column: 28, scope: !7)
!77 = !DILocation(line: 70, column: 40, scope: !7)
!78 = !DILocation(line: 70, column: 4, scope: !7)
