; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp8 < 16\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %7, 255, !dbg !12
  %11 = zext nneg i32 %10 to i64, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !13
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 true, i32 0, i1 true) #4, !dbg !14
  %14 = bitcast i32 %13 to float, !dbg !14
  %15 = fadd float %14, 0.000000e+00, !dbg !15
  %16 = bitcast float %15 to i32, !dbg !16
  %17 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %16, i32 16, i32 31), !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = fadd float %15, %18, !dbg !20
  %20 = bitcast float %19 to i32, !dbg !16
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 8, i32 31), !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = fadd float %19, %22, !dbg !20
  %24 = bitcast float %23 to i32, !dbg !16
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 4, i32 31), !dbg !16
  %26 = bitcast i32 %25 to float, !dbg !16
  %27 = fadd float %23, %26, !dbg !20
  %28 = bitcast float %27 to i32, !dbg !16
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 2, i32 31), !dbg !16
  %30 = bitcast i32 %29 to float, !dbg !16
  %31 = fadd float %27, %30, !dbg !20
  %32 = bitcast float %31 to i32, !dbg !16
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 1, i32 31), !dbg !16
  %34 = bitcast i32 %33 to float, !dbg !16
  %35 = fadd float %31, %34, !dbg !20
  %36 = icmp eq i32 %8, 0, !dbg !16
  %37 = and i32 %9, 7, !dbg !16
  %38 = getelementptr float, ptr addrspace(3) @global_smem, i32 %37, !dbg !16
  %39 = bitcast float %35 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %39, i1 %36) #4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %40 = icmp slt i32 %7, 8, !dbg !16
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !16
  %42 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %41, i1 %40) #4, !dbg !16
  %43 = bitcast i32 %42 to float, !dbg !16
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !16
  %45 = bitcast i32 %44 to float, !dbg !16
  %46 = fadd float %43, %45, !dbg !20
  %47 = bitcast float %46 to i32, !dbg !16
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !16
  %49 = bitcast i32 %48 to float, !dbg !16
  %50 = fadd float %46, %49, !dbg !20
  %51 = bitcast float %50 to i32, !dbg !16
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !16
  %53 = bitcast i32 %52 to float, !dbg !16
  %54 = fadd float %50, %53, !dbg !20
  %55 = and i32 %7, 7, !dbg !16
  %56 = icmp eq i32 %55, 0, !dbg !16
  %57 = and i1 %40, %56, !dbg !16
  %58 = bitcast float %54 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %58, i1 %57) #4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %59 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !16
  %60 = lshr i32 %7, 2, !dbg !22
  %61 = and i32 %60, 15, !dbg !23
  %62 = and i32 %7, 15, !dbg !24
  %63 = zext nneg i32 %61 to i64, !dbg !25
  %64 = getelementptr i64, ptr addrspace(1) %1, i64 %63, !dbg !25
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 true, i1 true) #4, !dbg !26
  %66 = and i32 %60, 48, !dbg !27
  %67 = or disjoint i32 %66, %62, !dbg !28
  %68 = zext nneg i32 %67 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !29
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #4, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 true, i32 0, i1 true) #4, !dbg !32
  %73 = or disjoint i32 %67, 64, !dbg !33
  %74 = zext nneg i32 %73 to i64, !dbg !34
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !34
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 true, i32 0, i1 true) #4, !dbg !35
  %77 = or disjoint i32 %67, 128, !dbg !36
  %78 = zext nneg i32 %77 to i64, !dbg !37
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !37
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 true, i32 0, i1 true) #4, !dbg !38
  %81 = or disjoint i32 %67, 192, !dbg !39
  %82 = zext nneg i32 %81 to i64, !dbg !40
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !40
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 true, i32 0, i1 true) #4, !dbg !41
  %85 = lshr i64 %65, 59, !dbg !42
  %86 = and i64 %85, 16, !dbg !42
  %87 = add i64 %86, %65, !dbg !42
  %88 = icmp ugt i64 %87, 15, !dbg !43
  br i1 %88, label %89, label %90, !dbg !44

89:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 55, ptr nonnull @assertFunc_0, i64 1), !dbg !44
  unreachable, !dbg !44

90:                                               ; preds = %6
  %91 = bitcast i32 %84 to float, !dbg !41
  %92 = bitcast i32 %80 to float, !dbg !38
  %93 = bitcast i32 %76 to float, !dbg !35
  %94 = bitcast i32 %72 to float, !dbg !32
  %95 = bitcast i32 %70 to float, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %96 = shl i32 %7, 4, !dbg !45
  %97 = and i32 %96, 48, !dbg !45
  %98 = shl i32 %7, 2, !dbg !46
  %99 = and i32 %98, 192, !dbg !46
  %100 = or disjoint i32 %97, %99, !dbg !47
  %101 = zext nneg i32 %100 to i64, !dbg !48
  %102 = or disjoint i64 %87, %101, !dbg !48
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !49
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 true, i32 0, i1 true) #4, !dbg !50
  %105 = bitcast i32 %104 to float, !dbg !50
  %106 = fmul float %95, %105, !dbg !51
  %107 = fmul float %95, %94, !dbg !52
  %108 = fsub float %106, %107, !dbg !53
  %109 = tail call float @llvm.fabs.f32(float %108), !dbg !54
  %110 = fadd float %59, 0x3F1A36E2E0000000, !dbg !55
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %110) #4, !dbg !56
  %112 = fmul float %93, %105, !dbg !57
  %113 = fmul float %94, %93, !dbg !58
  %114 = fsub float %112, %113, !dbg !59
  %115 = tail call float @llvm.fabs.f32(float %114), !dbg !60
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %110) #4, !dbg !61
  %117 = fadd float %111, %116, !dbg !62
  %118 = fmul float %92, %105, !dbg !63
  %119 = fmul float %94, %92, !dbg !64
  %120 = fsub float %118, %119, !dbg !65
  %121 = tail call float @llvm.fabs.f32(float %120), !dbg !66
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %110) #4, !dbg !67
  %123 = fadd float %117, %122, !dbg !68
  %124 = fmul float %91, %105, !dbg !69
  %125 = fmul float %94, %91, !dbg !70
  %126 = fsub float %124, %125, !dbg !71
  %127 = tail call float @llvm.fabs.f32(float %126), !dbg !72
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %110) #4, !dbg !73
  %129 = fadd float %123, %128, !dbg !74
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %11, !dbg !75
  %131 = bitcast float %129 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %130, i1 true) #4, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py", directory: "inductor_cache/i2")
!4 = !{ptr @triton_red_fused_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_sum_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused_sum_0", linkageName: "triton_red_fused_sum_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 31, column: 34, scope: !11)
!14 = !DILocation(line: 31, column: 39, scope: !11)
!15 = !DILocation(line: 33, column: 23, scope: !11)
!16 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !11, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = !DILocation(line: 35, column: 25, scope: !11)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !19)
!21 = distinct !DILexicalBlockFile(scope: !17, file: !18, discriminator: 0)
!22 = !DILocation(line: 39, column: 25, scope: !11)
!23 = !DILocation(line: 39, column: 30, scope: !11)
!24 = !DILocation(line: 43, column: 23, scope: !11)
!25 = !DILocation(line: 45, column: 34, scope: !11)
!26 = !DILocation(line: 45, column: 39, scope: !11)
!27 = !DILocation(line: 46, column: 43, scope: !11)
!28 = !DILocation(line: 46, column: 40, scope: !11)
!29 = !DILocation(line: 46, column: 35, scope: !11)
!30 = !DILocation(line: 46, column: 48, scope: !11)
!31 = !DILocation(line: 47, column: 35, scope: !11)
!32 = !DILocation(line: 47, column: 40, scope: !11)
!33 = !DILocation(line: 48, column: 45, scope: !11)
!34 = !DILocation(line: 48, column: 35, scope: !11)
!35 = !DILocation(line: 48, column: 53, scope: !11)
!36 = !DILocation(line: 49, column: 46, scope: !11)
!37 = !DILocation(line: 49, column: 35, scope: !11)
!38 = !DILocation(line: 49, column: 54, scope: !11)
!39 = !DILocation(line: 50, column: 46, scope: !11)
!40 = !DILocation(line: 50, column: 35, scope: !11)
!41 = !DILocation(line: 50, column: 54, scope: !11)
!42 = !DILocation(line: 54, column: 36, scope: !11)
!43 = !DILocation(line: 55, column: 41, scope: !11)
!44 = !DILocation(line: 55, column: 65, scope: !11)
!45 = !DILocation(line: 56, column: 38, scope: !11)
!46 = !DILocation(line: 56, column: 46, scope: !11)
!47 = !DILocation(line: 56, column: 43, scope: !11)
!48 = !DILocation(line: 56, column: 53, scope: !11)
!49 = !DILocation(line: 56, column: 35, scope: !11)
!50 = !DILocation(line: 56, column: 67, scope: !11)
!51 = !DILocation(line: 57, column: 24, scope: !11)
!52 = !DILocation(line: 58, column: 24, scope: !11)
!53 = !DILocation(line: 59, column: 24, scope: !11)
!54 = !DILocation(line: 60, column: 28, scope: !11)
!55 = !DILocation(line: 62, column: 23, scope: !11)
!56 = !DILocation(line: 63, column: 24, scope: !11)
!57 = !DILocation(line: 64, column: 24, scope: !11)
!58 = !DILocation(line: 65, column: 24, scope: !11)
!59 = !DILocation(line: 66, column: 24, scope: !11)
!60 = !DILocation(line: 67, column: 28, scope: !11)
!61 = !DILocation(line: 68, column: 24, scope: !11)
!62 = !DILocation(line: 69, column: 24, scope: !11)
!63 = !DILocation(line: 70, column: 24, scope: !11)
!64 = !DILocation(line: 71, column: 24, scope: !11)
!65 = !DILocation(line: 72, column: 24, scope: !11)
!66 = !DILocation(line: 73, column: 28, scope: !11)
!67 = !DILocation(line: 74, column: 24, scope: !11)
!68 = !DILocation(line: 75, column: 24, scope: !11)
!69 = !DILocation(line: 76, column: 24, scope: !11)
!70 = !DILocation(line: 77, column: 24, scope: !11)
!71 = !DILocation(line: 78, column: 24, scope: !11)
!72 = !DILocation(line: 79, column: 28, scope: !11)
!73 = !DILocation(line: 80, column: 24, scope: !11)
!74 = !DILocation(line: 81, column: 24, scope: !11)
!75 = !DILocation(line: 82, column: 29, scope: !11)
!76 = !DILocation(line: 82, column: 76, scope: !11)
!77 = !DILocation(line: 36, column: 4, scope: !11)
