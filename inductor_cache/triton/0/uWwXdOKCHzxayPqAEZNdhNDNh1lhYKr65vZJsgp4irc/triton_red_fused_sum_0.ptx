//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_red_fused_sum_0  // -- Begin function triton_red_fused_sum_0
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
.noreturn;
.global .align 1 .b8 assertFunc_0[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_0[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 105, 50, 47, 99, 105, 50, 99, 99, 51, 97, 114, 113, 117, 102, 116, 101, 121, 119, 115, 115, 100, 105, 99, 97, 117, 115, 104, 50, 118, 53, 120, 97, 103, 111, 105, 120, 121, 102, 97, 119, 100, 122, 106, 117, 55, 122, 106, 111, 105, 109, 110, 55, 116, 52, 113, 46, 112, 121};
.global .align 1 .b8 assertMessage_0[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 56, 32, 60, 32, 49, 54};
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_red_fused_sum_0
.visible .entry triton_red_fused_sum_0(
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_0,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_1,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_2,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_3,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_4,
	.param .u32 triton_red_fused_sum_0_param_5
)
.reqntid 256, 1, 1
{
	.reg .pred 	%p<23>;
	.reg .b32 	%r<76>;
	.reg .f32 	%f<47>;
	.reg .b64 	%rd<33>;
	.loc	1 19 0                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:19:0

// %bb.0:
	ld.param.u64 	%rd13, [triton_red_fused_sum_0_param_0];
$L__tmp0:
	.loc	1 25 33                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:25:33
	mov.u32 	%r1, %tid.x;
	ld.param.u64 	%rd14, [triton_red_fused_sum_0_param_1];
	and.b32  	%r25, %r1, 31;
	ld.param.u64 	%rd15, [triton_red_fused_sum_0_param_3];
	and.b32  	%r26, %r1, 255;
	.loc	1 31 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:34
	mul.wide.u32 	%rd16, %r26, 4;
	add.s64 	%rd5, %rd13, %rd16;
	mov.b32 	%r24, 0;
	mov.pred 	%p17, -1;
	.loc	1 31 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:39
	// begin inline asm
	mov.u32 %r7, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r7 }, [ %rd5 + 0 ];
	@!%p17 mov.u32 %r7, %r24;
	// end inline asm
	mov.b32 	%f2, %r7;
	.loc	1 33 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:33:23
	add.f32 	%f3, %f2, 0f00000000;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r27, %f3;
	shfl.sync.bfly.b32	%r28, %r27, 16, 31, -1;
	mov.b32 	%f4, %r28;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f5, %f3, %f4;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r29, %f5;
	shfl.sync.bfly.b32	%r30, %r29, 8, 31, -1;
	mov.b32 	%f6, %r30;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f7, %f5, %f6;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r31, %f7;
	shfl.sync.bfly.b32	%r32, %r31, 4, 31, -1;
	mov.b32 	%f8, %r32;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f9, %f7, %f8;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r33, %f9;
	shfl.sync.bfly.b32	%r34, %r33, 2, 31, -1;
	mov.b32 	%f10, %r34;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f11, %f9, %f10;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r35, %f11;
	shfl.sync.bfly.b32	%r36, %r35, 1, 31, -1;
	mov.b32 	%f12, %r36;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f13, %f11, %f12;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p3, %r25, 0;
	shr.u32 	%r37, %r1, 3;
	and.b32  	%r38, %r37, 28;
	mov.u32 	%r39, global_smem;
	add.s32 	%r9, %r39, %r38;
	mov.b32 	%r10, %f13;
	// begin inline asm
	@%p3 st.shared.b32 [ %r9 + 0 ], %r10;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p4, %r1, 8;
	shl.b32 	%r40, %r1, 2;
	add.s32 	%r12, %r39, %r40;
	// begin inline asm
	@%p4 ld.shared.b32 %r11, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f14, %r11;
	shfl.sync.bfly.b32	%r41, %r11, 4, 31, -1;
	mov.b32 	%f15, %r41;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f16, %f14, %f15;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r42, %f16;
	shfl.sync.bfly.b32	%r43, %r42, 2, 31, -1;
	mov.b32 	%f17, %r43;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f18, %f16, %f17;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r44, %f18;
	shfl.sync.bfly.b32	%r45, %r44, 1, 31, -1;
	mov.b32 	%f19, %r45;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f20, %f18, %f19;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r46, %r1, 7;
	setp.eq.s32 	%p18, %r46, 0;
	and.pred  	%p5, %p4, %p18;
	mov.b32 	%r14, %f20;
	// begin inline asm
	@%p5 st.shared.b32 [ %r12 + 0 ], %r14;
	// end inline asm
	bar.sync 	0;
$L__tmp2:
	.loc	1 39 25                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:39:25
	shr.u32 	%r47, %r1, 2;
	.loc	1 39 30                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:39:30
	bfe.u32 	%r48, %r1, 2, 4;
	.loc	1 43 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:43:23
	and.b32  	%r49, %r1, 15;
	.loc	1 45 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:45:34
	mul.wide.u32 	%rd17, %r48, 8;
	add.s64 	%rd7, %rd14, %rd17;
	.loc	1 45 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:45:39
	// begin inline asm
	mov.u64 %rd6, 0x0;
	@%p17 ld.global.L1::evict_last.b64 { %rd6 }, [ %rd7 + 0 ];
	@!%p17 mov.u64 %rd6, 0x0;
	// end inline asm
	.loc	1 46 43                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:43
	and.b32  	%r50, %r47, 48;
	.loc	1 46 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:40
	or.b32  	%r51, %r50, %r49;
	.loc	1 46 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:35
	mul.wide.u32 	%rd18, %r51, 4;
	add.s64 	%rd8, %rd13, %rd18;
	.loc	1 46 48                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:48
	// begin inline asm
	mov.u32 %r15, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r15 }, [ %rd8 + 0 ];
	@!%p17 mov.u32 %r15, %r24;
	// end inline asm
	.loc	1 47 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:35
	add.s64 	%rd9, %rd15, %rd16;
	.loc	1 47 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:40
	// begin inline asm
	mov.u32 %r17, 0x0;
	@%p17 ld.global.L1::evict_first.b32 { %r17 }, [ %rd9 + 0 ];
	@!%p17 mov.u32 %r17, %r24;
	// end inline asm
	.loc	1 48 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:35
	add.s64 	%rd10, %rd8, 256;
	.loc	1 48 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:53
	// begin inline asm
	mov.u32 %r19, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r19 }, [ %rd10 + 0 ];
	@!%p17 mov.u32 %r19, %r24;
	// end inline asm
	.loc	1 49 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:35
	add.s64 	%rd11, %rd8, 512;
	.loc	1 49 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:54
	// begin inline asm
	mov.u32 %r21, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r21 }, [ %rd11 + 0 ];
	@!%p17 mov.u32 %r21, %r24;
	// end inline asm
	.loc	1 50 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:35
	add.s64 	%rd12, %rd8, 768;
	.loc	1 50 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:54
	// begin inline asm
	mov.u32 %r23, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r23 }, [ %rd12 + 0 ];
	@!%p17 mov.u32 %r23, %r24;
	// end inline asm
	.loc	1 54 36                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:54:36
	shr.u64 	%rd19, %rd6, 59;
	and.b64  	%rd20, %rd19, 16;
	add.s64 	%rd2, %rd20, %rd6;
	.loc	1 55 41                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:41
	setp.lt.u64 	%p19, %rd2, 16;
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	@%p19 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 65                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:0:65
	ld.param.u64 	%rd4, [triton_red_fused_sum_0_param_4];
	ld.param.u64 	%rd3, [triton_red_fused_sum_0_param_2];
	cvt.u64.u32 	%rd1, %r26;
	ld.shared.f32 	%f1, [global_smem];
	.loc	1 50 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:54
	mov.b32 	%f21, %r23;
	.loc	1 49 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:54
	mov.b32 	%f22, %r21;
	.loc	1 48 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:53
	mov.b32 	%f23, %r19;
	.loc	1 47 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:40
	mov.b32 	%f24, %r17;
	.loc	1 46 48                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:48
	mov.b32 	%f25, %r15;
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	bar.sync 	0;
	.loc	1 56 38                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:38
	shl.b32 	%r67, %r1, 4;
	and.b32  	%r68, %r67, 48;
	.loc	1 56 46                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:46
	and.b32  	%r70, %r40, 192;
	.loc	1 56 43                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:43
	or.b32  	%r71, %r68, %r70;
	.loc	1 56 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:53
	cvt.u64.u32 	%rd23, %r71;
	or.b64  	%rd24, %rd2, %rd23;
	.loc	1 56 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:35
	shl.b64 	%rd25, %rd24, 2;
	add.s64 	%rd21, %rd3, %rd25;
	.loc	1 56 67                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:67
	// begin inline asm
	mov.u32 %r52, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r52 }, [ %rd21 + 0 ];
	@!%p17 mov.u32 %r52, %r24;
	// end inline asm
	mov.b32 	%f26, %r52;
	.loc	1 58 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:58:24
	mul.f32 	%f27, %f25, %f24;
	.loc	1 59 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:59:24
	neg.f32 	%f28, %f27;
	fma.rn.f32 	%f29, %f25, %f26, %f28;
	mov.b32 	%r72, %f29;
	.loc	1 62 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:62:23
	add.f32 	%f30, %f1, 0f38D1B717;
	.loc	1 63 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:63:24
	and.b32  	%r55, %r72, 2147483647;
	mov.b32 	%r56, %f30;
	// begin inline asm
	div.full.f32 %r54, %r55, %r56;
	// end inline asm
	mov.b32 	%f31, %r54;
	.loc	1 65 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:65:24
	mul.f32 	%f32, %f24, %f23;
	.loc	1 66 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:66:24
	neg.f32 	%f33, %f32;
	fma.rn.f32 	%f34, %f23, %f26, %f33;
	mov.b32 	%r73, %f34;
	.loc	1 68 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:68:24
	and.b32  	%r58, %r73, 2147483647;
	// begin inline asm
	div.full.f32 %r57, %r58, %r56;
	// end inline asm
	mov.b32 	%f35, %r57;
	.loc	1 69 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:69:24
	add.f32 	%f36, %f31, %f35;
	.loc	1 71 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:71:24
	mul.f32 	%f37, %f24, %f22;
	.loc	1 72 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:72:24
	neg.f32 	%f38, %f37;
	fma.rn.f32 	%f39, %f22, %f26, %f38;
	mov.b32 	%r74, %f39;
	.loc	1 74 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:74:24
	and.b32  	%r61, %r74, 2147483647;
	// begin inline asm
	div.full.f32 %r60, %r61, %r56;
	// end inline asm
	mov.b32 	%f40, %r60;
	.loc	1 75 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:75:24
	add.f32 	%f41, %f36, %f40;
	.loc	1 77 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:77:24
	mul.f32 	%f42, %f24, %f21;
	.loc	1 78 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:78:24
	neg.f32 	%f43, %f42;
	fma.rn.f32 	%f44, %f21, %f26, %f43;
	mov.b32 	%r75, %f44;
	.loc	1 80 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:80:24
	and.b32  	%r64, %r75, 2147483647;
	// begin inline asm
	div.full.f32 %r63, %r64, %r56;
	// end inline asm
	mov.b32 	%f45, %r63;
	.loc	1 81 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:81:24
	add.f32 	%f46, %f41, %f45;
	.loc	1 82 29                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:82:29
	shl.b64 	%rd26, %rd1, 2;
	add.s64 	%rd22, %rd4, %rd26;
	.loc	1 82 76                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:82:76
	mov.b32 	%r66, %f46;
	// begin inline asm
	@%p17 st.global.b32 [ %rd22 + 0 ], { %r66 };
	// end inline asm
	.loc	1 36 4                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:36:4
	ret;
$L__BB0_1:
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	mov.u64 	%rd27, assertMessage_0;
	cvta.global.u64 	%rd28, %rd27;
	mov.u64 	%rd29, assertFile_0;
	cvta.global.u64 	%rd30, %rd29;
	mov.u64 	%rd31, assertFunc_0;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 2, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd28;
	.param .b64 param1;
	st.param.b64 	[param1], %rd30;
	.param .b32 param2;
	st.param.b32 	[param2], 55;
	.param .b64 param3;
	st.param.b64 	[param3], %rd32;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 2
	trap;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 167                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xa0 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 105
.b8 50
.b8 99
.b8 99
.b8 51
.b8 97
.b8 114
.b8 113
.b8 117
.b8 102
.b8 116
.b8 101
.b8 121
.b8 119
.b8 115
.b8 115
.b8 100
.b8 105
.b8 99
.b8 97
.b8 117
.b8 115
.b8 104
.b8 50
.b8 118
.b8 53
.b8 120
.b8 97
.b8 103
.b8 111
.b8 105
.b8 120
.b8 121
.b8 102
.b8 97
.b8 119
.b8 100
.b8 122
.b8 106
.b8 117
.b8 55
.b8 122
.b8 106
.b8 111
.b8 105
.b8 109
.b8 110
.b8 55
.b8 116
.b8 52
.b8 113
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 105
.b8 50
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x19 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 101
.b8 100
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 115
.b8 117
.b8 109
.b8 95
.b8 48
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x7c:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x91:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 35                                  // DW_AT_call_line
.b8 25                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
