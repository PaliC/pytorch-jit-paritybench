; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, i32 %22) local_unnamed_addr !dbg !7 {
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 7, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %27 = and i32 %26, 127, !dbg !12
  %28 = or disjoint i32 %25, %27, !dbg !13
  %29 = sdiv i32 %28, 256, !dbg !14
  %30 = srem i32 %29, 4, !dbg !15
  %.frozen = freeze i32 %28, !dbg !16
  %31 = sdiv i32 %.frozen, 16, !dbg !16
  %32 = srem i32 %31, 16, !dbg !17
  %33 = mul i32 %31, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %33, !dbg !18
  %34 = sext i32 %28 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %37 = sext i32 %30 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %49 = sext i32 %32 to i64, !dbg !31
  %50 = getelementptr i64, ptr addrspace(1) %7, i64 %49, !dbg !31
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !32
  %52 = sext i32 %.decomposed to i64, !dbg !33
  %53 = getelementptr i64, ptr addrspace(1) %8, i64 %52, !dbg !33
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %55 = getelementptr i64, ptr addrspace(1) %10, i64 %52, !dbg !35
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %52, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !38
  %59 = getelementptr i64, ptr addrspace(1) %12, i64 %49, !dbg !39
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %13, i64 %49, !dbg !41
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !42
  %63 = getelementptr i64, ptr addrspace(1) %14, i64 %49, !dbg !43
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !44
  %65 = getelementptr i64, ptr addrspace(1) %15, i64 %52, !dbg !45
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !46
  %67 = getelementptr i64, ptr addrspace(1) %17, i64 %52, !dbg !47
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !48
  %69 = getelementptr float, ptr addrspace(1) %18, i64 %52, !dbg !49
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !50
  %71 = getelementptr i64, ptr addrspace(1) %19, i64 %49, !dbg !51
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !52
  %73 = getelementptr float, ptr addrspace(1) %20, i64 %49, !dbg !53
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !54
  %75 = fadd float %42, 0x3EE4F8B580000000, !dbg !55
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i = icmp eq i32 %76, 0, !dbg !56
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i = icmp eq i32 %77, 0, !dbg !56
  br i1 %.not.i, label %83, label %78, !dbg !56

78:                                               ; preds = %23
  br i1 %.not1.i, label %81, label %79, !dbg !56

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

83:                                               ; preds = %23
  br i1 %.not1.i, label %86, label %84, !dbg !56

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !56
  %88 = bitcast i32 %36 to float, !dbg !20
  %89 = bitcast i32 %39 to float, !dbg !22
  %90 = fsub float %88, %89, !dbg !57
  %91 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !42
  %92 = insertelement <2 x i32> %91, i32 %74, i64 1, !dbg !42
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !42
  %94 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !38
  %95 = insertelement <2 x i32> %94, i32 %70, i64 1, !dbg !38
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !38
  %97 = bitcast i32 %48 to float, !dbg !30
  %98 = bitcast i32 %46 to float, !dbg !28
  %99 = bitcast i32 %44 to float, !dbg !26
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !58
  %101 = fmul float %90, %100, !dbg !59
  %102 = fmul float %101, %99, !dbg !60
  %103 = fadd float %102, %98, !dbg !61
  %104 = fadd float %103, %97, !dbg !62
  %105 = fcmp olt float %104, 0.000000e+00, !dbg !63
  %106 = select i1 %105, float 0.000000e+00, float %104, !dbg !67
  %107 = lshr i64 %51, 60, !dbg !68
  %108 = and i64 %107, 8, !dbg !68
  %109 = add i64 %108, %51, !dbg !68
  %110 = lshr i64 %54, 60, !dbg !69
  %111 = and i64 %110, 8, !dbg !69
  %112 = shl i64 %109, 3, !dbg !70
  %113 = shl nsw i32 %29, 6, !dbg !71
  %114 = sext i32 %113 to i64, !dbg !72
  %115 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !73
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %111, !dbg !73
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %112, !dbg !73
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %114, !dbg !73
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !74
  %120 = lshr i64 %56, 60, !dbg !75
  %121 = and i64 %120, 8, !dbg !75
  %122 = getelementptr float, ptr addrspace(1) %9, i64 %56, !dbg !76
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %121, !dbg !76
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %112, !dbg !76
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %114, !dbg !76
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !77
  %127 = lshr i64 %60, 60, !dbg !78
  %128 = and i64 %127, 8, !dbg !78
  %129 = add i64 %128, %60, !dbg !78
  %130 = shl i64 %129, 3, !dbg !79
  %131 = getelementptr float, ptr addrspace(1) %116, i64 %130, !dbg !80
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %114, !dbg !80
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !81
  %134 = getelementptr float, ptr addrspace(1) %123, i64 %130, !dbg !82
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %114, !dbg !82
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !83
  %137 = lshr i64 %64, 61, !dbg !84
  %138 = and i64 %137, 4, !dbg !84
  %139 = add i64 %138, %64, !dbg !84
  %140 = lshr i64 %66, 61, !dbg !85
  %141 = and i64 %140, 4, !dbg !85
  %142 = shl i64 %139, 2, !dbg !86
  %143 = shl nsw i32 %29, 4, !dbg !87
  %144 = sext i32 %143 to i64, !dbg !88
  %145 = getelementptr float, ptr addrspace(1) %16, i64 %66, !dbg !89
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %141, !dbg !89
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %142, !dbg !89
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %144, !dbg !89
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !90
  %150 = lshr i64 %68, 61, !dbg !91
  %151 = and i64 %150, 4, !dbg !91
  %152 = getelementptr float, ptr addrspace(1) %16, i64 %68, !dbg !92
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %151, !dbg !92
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %142, !dbg !92
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %144, !dbg !92
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #3, !dbg !93
  %157 = lshr i64 %72, 61, !dbg !94
  %158 = and i64 %157, 4, !dbg !94
  %159 = add i64 %158, %72, !dbg !94
  %160 = shl i64 %159, 2, !dbg !95
  %161 = getelementptr float, ptr addrspace(1) %146, i64 %160, !dbg !96
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %144, !dbg !96
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #3, !dbg !97
  %164 = getelementptr float, ptr addrspace(1) %153, i64 %160, !dbg !98
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %144, !dbg !98
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !99
  %167 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !74
  %168 = insertelement <2 x i32> %167, i32 %149, i64 1, !dbg !74
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !74
  %170 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !77
  %171 = insertelement <2 x i32> %170, i32 %156, i64 1, !dbg !77
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !77
  %173 = fsub <2 x float> %172, %169, !dbg !100
  %174 = fmul <2 x float> %173, %96, !dbg !101
  %175 = fadd <2 x float> %174, %169, !dbg !102
  %176 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !81
  %177 = insertelement <2 x i32> %176, i32 %163, i64 1, !dbg !81
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !81
  %179 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !83
  %180 = insertelement <2 x i32> %179, i32 %166, i64 1, !dbg !83
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !83
  %182 = fsub <2 x float> %181, %178, !dbg !103
  %183 = fmul <2 x float> %182, %96, !dbg !104
  %184 = fadd <2 x float> %183, %178, !dbg !105
  %185 = fsub <2 x float> %184, %175, !dbg !106
  %186 = fmul <2 x float> %185, %93, !dbg !107
  %187 = fadd <2 x float> %175, %186, !dbg !108
  %188 = extractelement <2 x float> %187, i64 0, !dbg !109
  %189 = fadd float %106, %188, !dbg !109
  %190 = extractelement <2 x float> %187, i64 1, !dbg !110
  %191 = fadd float %189, %190, !dbg !110
  %192 = fcmp olt float %191, 0.000000e+00, !dbg !111
  %193 = select i1 %192, float 0.000000e+00, float %191, !dbg !113
  %194 = getelementptr float, ptr addrspace(1) %21, i64 %34, !dbg !114
  %195 = bitcast float %106 to i32, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %194, i1 true) #3, !dbg !115
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !116
  %197 = bitcast float %193 to i32, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %196, i1 true) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chu5qexfywxp23amcnlptldolpcydjzacikdtg2lecumzj3z7yid.py", directory: "inductor_cache/hu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 49, column: 18, scope: !7)
!56 = !DILocation(line: 50, column: 26, scope: !7)
!57 = !DILocation(line: 47, column: 18, scope: !7)
!58 = !DILocation(line: 52, column: 18, scope: !7)
!59 = !DILocation(line: 55, column: 19, scope: !7)
!60 = !DILocation(line: 56, column: 20, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 20, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 60, column: 42, scope: !7)
!67 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 64, column: 35, scope: !7)
!69 = !DILocation(line: 67, column: 35, scope: !7)
!70 = !DILocation(line: 68, column: 41, scope: !7)
!71 = !DILocation(line: 68, column: 52, scope: !7)
!72 = !DILocation(line: 68, column: 49, scope: !7)
!73 = !DILocation(line: 68, column: 31, scope: !7)
!74 = !DILocation(line: 68, column: 57, scope: !7)
!75 = !DILocation(line: 71, column: 35, scope: !7)
!76 = !DILocation(line: 72, column: 31, scope: !7)
!77 = !DILocation(line: 72, column: 57, scope: !7)
!78 = !DILocation(line: 78, column: 35, scope: !7)
!79 = !DILocation(line: 79, column: 41, scope: !7)
!80 = !DILocation(line: 79, column: 31, scope: !7)
!81 = !DILocation(line: 79, column: 57, scope: !7)
!82 = !DILocation(line: 80, column: 31, scope: !7)
!83 = !DILocation(line: 80, column: 57, scope: !7)
!84 = !DILocation(line: 91, column: 35, scope: !7)
!85 = !DILocation(line: 94, column: 35, scope: !7)
!86 = !DILocation(line: 95, column: 42, scope: !7)
!87 = !DILocation(line: 95, column: 53, scope: !7)
!88 = !DILocation(line: 95, column: 50, scope: !7)
!89 = !DILocation(line: 95, column: 32, scope: !7)
!90 = !DILocation(line: 95, column: 58, scope: !7)
!91 = !DILocation(line: 98, column: 35, scope: !7)
!92 = !DILocation(line: 99, column: 32, scope: !7)
!93 = !DILocation(line: 99, column: 58, scope: !7)
!94 = !DILocation(line: 105, column: 35, scope: !7)
!95 = !DILocation(line: 106, column: 42, scope: !7)
!96 = !DILocation(line: 106, column: 32, scope: !7)
!97 = !DILocation(line: 106, column: 58, scope: !7)
!98 = !DILocation(line: 107, column: 32, scope: !7)
!99 = !DILocation(line: 107, column: 58, scope: !7)
!100 = !DILocation(line: 73, column: 20, scope: !7)
!101 = !DILocation(line: 74, column: 20, scope: !7)
!102 = !DILocation(line: 75, column: 20, scope: !7)
!103 = !DILocation(line: 81, column: 20, scope: !7)
!104 = !DILocation(line: 82, column: 20, scope: !7)
!105 = !DILocation(line: 83, column: 20, scope: !7)
!106 = !DILocation(line: 84, column: 20, scope: !7)
!107 = !DILocation(line: 85, column: 20, scope: !7)
!108 = !DILocation(line: 86, column: 20, scope: !7)
!109 = !DILocation(line: 87, column: 20, scope: !7)
!110 = !DILocation(line: 114, column: 20, scope: !7)
!111 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !112)
!112 = !DILocation(line: 115, column: 42, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !112)
!114 = !DILocation(line: 116, column: 25, scope: !7)
!115 = !DILocation(line: 116, column: 37, scope: !7)
!116 = !DILocation(line: 117, column: 28, scope: !7)
!117 = !DILocation(line: 117, column: 40, scope: !7)
!118 = !DILocation(line: 117, column: 4, scope: !7)
