; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_32(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 1411200, !dbg !14
  %12 = icmp slt i32 %10, 1411200, !dbg !14
  %13 = add i32 %9, -10368, !dbg !15
  %14 = add i32 %9, -9856, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = add i32 %9, -10080, !dbg !17
  %20 = add i32 %9, -9568, !dbg !17
  %21 = sext i32 %19 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = add i32 %9, -9792, !dbg !19
  %26 = add i32 %9, -9280, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = add i32 %9, -288, !dbg !21
  %32 = sext i32 %31 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %10 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = getelementptr i8, ptr addrspace(1) %35, i64 -1152, !dbg !22
  %37 = sext i32 %9 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = add i32 %9, 800, !dbg !24
  %40 = getelementptr i8, ptr addrspace(1) %38, i64 1152, !dbg !25
  %41 = sext i32 %39 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = add i32 %9, 9792, !dbg !26
  %44 = add i32 %9, 10304, !dbg !26
  %45 = sext i32 %43 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = sext i32 %44 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = add i32 %9, 10080, !dbg !28
  %50 = add i32 %9, 10592, !dbg !28
  %51 = sext i32 %49 to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !29
  %53 = sext i32 %50 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !29
  %55 = add i32 %9, 10368, !dbg !30
  %56 = add i32 %9, 10880, !dbg !30
  %57 = sext i32 %55 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !31
  %59 = sext i32 %56 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !31
  %61 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !32
  %62 = shufflevector <2 x i32> %61, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %63 = sdiv <2 x i32> %62, <i32 288, i32 10080>, !dbg !32
  %64 = srem <2 x i32> %63, splat (i32 35), !dbg !33
  %65 = extractelement <2 x i32> %64, i64 1, !dbg !34
  %66 = icmp sgt i32 %65, 0, !dbg !35
  %67 = extractelement <2 x i32> %64, i64 0, !dbg !36
  %68 = add nsw i32 %67, -1, !dbg !37
  %69 = icmp sgt i32 %67, 0, !dbg !38
  %70 = and i1 %66, %69, !dbg !39
  %71 = and i1 %11, %70, !dbg !40
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !41
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !41
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !41
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !41
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !41
  %77 = bitcast i32 %73 to float, !dbg !41
  %78 = bitcast i32 %74 to float, !dbg !41
  %79 = bitcast i32 %75 to float, !dbg !41
  %80 = bitcast i32 %76 to float, !dbg !41
  %81 = icmp sgt i32 %67, -1, !dbg !42
  %82 = and i1 %66, %81, !dbg !43
  %83 = and i1 %11, %82, !dbg !44
  %84 = icmp sgt i32 %65, -1, !dbg !45
  %85 = and i1 %84, %69, !dbg !46
  %86 = and i1 %11, %85, !dbg !47
  %87 = or i32 %65, %67, !dbg !36
  %88 = icmp sgt i32 %87, -1, !dbg !36
  %89 = and i1 %11, %88, !dbg !48
  %90 = add nsw <2 x i32> %64, <i32 2, i32 -1>, !dbg !49
  %91 = shufflevector <2 x i32> %64, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !50
  %92 = icmp sgt <2 x i32> %91, <i32 32, i32 1>, !dbg !50
  %93 = insertelement <2 x i32> <i32 35, i32 poison>, i32 %68, i64 1, !dbg !51
  %94 = select <2 x i1> %92, <2 x i32> %93, <2 x i32> zeroinitializer, !dbg !51
  %95 = insertelement <2 x i32> %91, i32 1, i64 1, !dbg !52
  %96 = insertelement <2 x i32> %64, i32 33, i64 0, !dbg !52
  %97 = icmp slt <2 x i32> %95, %96, !dbg !52
  %98 = select <2 x i1> %97, <2 x i32> %90, <2 x i32> zeroinitializer, !dbg !53
  %99 = add nsw <2 x i32> %94, %98, !dbg !54
  %100 = mul nsw <2 x i32> %94, %98, !dbg !54
  %101 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !32
  %102 = shufflevector <2 x i32> %101, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %103 = sdiv <2 x i32> %102, <i32 288, i32 10080>, !dbg !32
  %104 = srem <2 x i32> %103, splat (i32 35), !dbg !33
  %105 = extractelement <2 x i32> %104, i64 1, !dbg !34
  %106 = icmp sgt i32 %105, 0, !dbg !35
  %107 = extractelement <2 x i32> %104, i64 0, !dbg !36
  %108 = add nsw i32 %107, -1, !dbg !37
  %109 = icmp sgt i32 %107, 0, !dbg !38
  %110 = and i1 %106, %109, !dbg !39
  %111 = and i1 %12, %110, !dbg !40
  %112 = icmp sgt i32 %107, -1, !dbg !42
  %113 = and i1 %106, %112, !dbg !43
  %114 = and i1 %12, %113, !dbg !44
  %115 = icmp sgt i32 %105, -1, !dbg !45
  %116 = and i1 %115, %109, !dbg !46
  %117 = and i1 %12, %116, !dbg !47
  %118 = or i32 %105, %107, !dbg !36
  %119 = icmp sgt i32 %118, -1, !dbg !36
  %120 = and i1 %12, %119, !dbg !48
  %121 = shufflevector <2 x i32> %104, <2 x i32> %64, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !55
  %122 = add nsw <4 x i32> %121, splat (i32 1), !dbg !55
  %123 = icmp ult <4 x i32> %122, splat (i32 35), !dbg !55
  %124 = extractelement <4 x i1> %123, i64 3, !dbg !56
  %125 = and i1 %66, %124, !dbg !56
  %126 = and i1 %11, %125, !dbg !57
  %127 = and i1 %84, %124, !dbg !58
  %128 = and i1 %11, %127, !dbg !59
  %129 = extractelement <4 x i1> %123, i64 1, !dbg !60
  %130 = and i1 %69, %129, !dbg !60
  %131 = and i1 %11, %130, !dbg !61
  %132 = and i1 %81, %129, !dbg !62
  %133 = and i1 %11, %132, !dbg !63
  %134 = and i1 %129, %124, !dbg !64
  %135 = and i1 %11, %134, !dbg !65
  %136 = extractelement <4 x i1> %123, i64 2, !dbg !56
  %137 = and i1 %106, %136, !dbg !56
  %138 = and i1 %12, %137, !dbg !57
  %139 = and i1 %115, %136, !dbg !58
  %140 = and i1 %12, %139, !dbg !59
  %141 = extractelement <4 x i1> %123, i64 0, !dbg !60
  %142 = and i1 %109, %141, !dbg !60
  %143 = and i1 %12, %142, !dbg !61
  %144 = and i1 %112, %141, !dbg !62
  %145 = and i1 %12, %144, !dbg !63
  %146 = and i1 %141, %136, !dbg !64
  %147 = and i1 %12, %146, !dbg !65
  %148 = add nsw <2 x i32> %104, <i32 2, i32 -1>, !dbg !49
  %149 = shufflevector <2 x i32> %104, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !50
  %150 = icmp sgt <2 x i32> %149, <i32 32, i32 1>, !dbg !50
  %151 = insertelement <2 x i32> <i32 35, i32 poison>, i32 %108, i64 1, !dbg !51
  %152 = select <2 x i1> %150, <2 x i32> %151, <2 x i32> zeroinitializer, !dbg !51
  %153 = insertelement <2 x i32> %149, i32 1, i64 1, !dbg !52
  %154 = insertelement <2 x i32> %104, i32 33, i64 0, !dbg !52
  %155 = icmp slt <2 x i32> %153, %154, !dbg !52
  %156 = select <2 x i1> %155, <2 x i32> %148, <2 x i32> zeroinitializer, !dbg !53
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #1, !dbg !41
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !41
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !41
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !41
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !41
  %162 = bitcast i32 %158 to float, !dbg !41
  %163 = bitcast i32 %159 to float, !dbg !41
  %164 = bitcast i32 %160 to float, !dbg !41
  %165 = bitcast i32 %161 to float, !dbg !41
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !66
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !66
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !66
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !66
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !66
  %171 = bitcast i32 %167 to float, !dbg !66
  %172 = bitcast i32 %168 to float, !dbg !66
  %173 = bitcast i32 %169 to float, !dbg !66
  %174 = bitcast i32 %170 to float, !dbg !66
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #1, !dbg !66
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !66
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !66
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !66
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !66
  %180 = bitcast i32 %176 to float, !dbg !66
  %181 = bitcast i32 %177 to float, !dbg !66
  %182 = bitcast i32 %178 to float, !dbg !66
  %183 = bitcast i32 %179 to float, !dbg !66
  %184 = fadd float %77, %171, !dbg !67
  %185 = fadd float %78, %172, !dbg !67
  %186 = fadd float %79, %173, !dbg !67
  %187 = fadd float %80, %174, !dbg !67
  %188 = fadd float %162, %180, !dbg !67
  %189 = fadd float %163, %181, !dbg !67
  %190 = fadd float %164, %182, !dbg !67
  %191 = fadd float %165, %183, !dbg !67
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !68
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !68
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !68
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !68
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !68
  %197 = bitcast i32 %193 to float, !dbg !68
  %198 = bitcast i32 %194 to float, !dbg !68
  %199 = bitcast i32 %195 to float, !dbg !68
  %200 = bitcast i32 %196 to float, !dbg !68
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #1, !dbg !68
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !68
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !68
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !68
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !68
  %206 = bitcast i32 %202 to float, !dbg !68
  %207 = bitcast i32 %203 to float, !dbg !68
  %208 = bitcast i32 %204 to float, !dbg !68
  %209 = bitcast i32 %205 to float, !dbg !68
  %210 = fadd float %184, %197, !dbg !69
  %211 = fadd float %185, %198, !dbg !69
  %212 = fadd float %186, %199, !dbg !69
  %213 = fadd float %187, %200, !dbg !69
  %214 = fadd float %188, %206, !dbg !69
  %215 = fadd float %189, %207, !dbg !69
  %216 = fadd float %190, %208, !dbg !69
  %217 = fadd float %191, %209, !dbg !69
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !70
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !70
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !70
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !70
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !70
  %223 = bitcast i32 %219 to float, !dbg !70
  %224 = bitcast i32 %220 to float, !dbg !70
  %225 = bitcast i32 %221 to float, !dbg !70
  %226 = bitcast i32 %222 to float, !dbg !70
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117) #1, !dbg !70
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !70
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !70
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !70
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !70
  %232 = bitcast i32 %228 to float, !dbg !70
  %233 = bitcast i32 %229 to float, !dbg !70
  %234 = bitcast i32 %230 to float, !dbg !70
  %235 = bitcast i32 %231 to float, !dbg !70
  %236 = fadd float %210, %223, !dbg !71
  %237 = fadd float %211, %224, !dbg !71
  %238 = fadd float %212, %225, !dbg !71
  %239 = fadd float %213, %226, !dbg !71
  %240 = fadd float %214, %232, !dbg !71
  %241 = fadd float %215, %233, !dbg !71
  %242 = fadd float %216, %234, !dbg !71
  %243 = fadd float %217, %235, !dbg !71
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #1, !dbg !72
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !72
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !72
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !72
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !72
  %249 = bitcast i32 %245 to float, !dbg !72
  %250 = bitcast i32 %246 to float, !dbg !72
  %251 = bitcast i32 %247 to float, !dbg !72
  %252 = bitcast i32 %248 to float, !dbg !72
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #1, !dbg !72
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !72
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !72
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !72
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !72
  %258 = bitcast i32 %254 to float, !dbg !72
  %259 = bitcast i32 %255 to float, !dbg !72
  %260 = bitcast i32 %256 to float, !dbg !72
  %261 = bitcast i32 %257 to float, !dbg !72
  %262 = fadd float %236, %249, !dbg !73
  %263 = fadd float %237, %250, !dbg !73
  %264 = fadd float %238, %251, !dbg !73
  %265 = fadd float %239, %252, !dbg !73
  %266 = fadd float %240, %258, !dbg !73
  %267 = fadd float %241, %259, !dbg !73
  %268 = fadd float %242, %260, !dbg !73
  %269 = fadd float %243, %261, !dbg !73
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !74
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !74
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !74
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !74
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !74
  %275 = bitcast i32 %271 to float, !dbg !74
  %276 = bitcast i32 %272 to float, !dbg !74
  %277 = bitcast i32 %273 to float, !dbg !74
  %278 = bitcast i32 %274 to float, !dbg !74
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #1, !dbg !74
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !74
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !74
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !74
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !74
  %284 = bitcast i32 %280 to float, !dbg !74
  %285 = bitcast i32 %281 to float, !dbg !74
  %286 = bitcast i32 %282 to float, !dbg !74
  %287 = bitcast i32 %283 to float, !dbg !74
  %288 = fadd float %262, %275, !dbg !75
  %289 = fadd float %263, %276, !dbg !75
  %290 = fadd float %264, %277, !dbg !75
  %291 = fadd float %265, %278, !dbg !75
  %292 = fadd float %266, %284, !dbg !75
  %293 = fadd float %267, %285, !dbg !75
  %294 = fadd float %268, %286, !dbg !75
  %295 = fadd float %269, %287, !dbg !75
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #1, !dbg !76
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !76
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !76
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !76
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !76
  %301 = bitcast i32 %297 to float, !dbg !76
  %302 = bitcast i32 %298 to float, !dbg !76
  %303 = bitcast i32 %299 to float, !dbg !76
  %304 = bitcast i32 %300 to float, !dbg !76
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #1, !dbg !76
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !76
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !76
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !76
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !76
  %310 = bitcast i32 %306 to float, !dbg !76
  %311 = bitcast i32 %307 to float, !dbg !76
  %312 = bitcast i32 %308 to float, !dbg !76
  %313 = bitcast i32 %309 to float, !dbg !76
  %314 = fadd float %288, %301, !dbg !77
  %315 = fadd float %289, %302, !dbg !77
  %316 = fadd float %290, %303, !dbg !77
  %317 = fadd float %291, %304, !dbg !77
  %318 = fadd float %292, %310, !dbg !77
  %319 = fadd float %293, %311, !dbg !77
  %320 = fadd float %294, %312, !dbg !77
  %321 = fadd float %295, %313, !dbg !77
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #1, !dbg !78
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !78
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !78
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !78
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !78
  %327 = bitcast i32 %323 to float, !dbg !78
  %328 = bitcast i32 %324 to float, !dbg !78
  %329 = bitcast i32 %325 to float, !dbg !78
  %330 = bitcast i32 %326 to float, !dbg !78
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145) #1, !dbg !78
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !78
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !78
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !78
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !78
  %336 = bitcast i32 %332 to float, !dbg !78
  %337 = bitcast i32 %333 to float, !dbg !78
  %338 = bitcast i32 %334 to float, !dbg !78
  %339 = bitcast i32 %335 to float, !dbg !78
  %340 = fadd float %314, %327, !dbg !79
  %341 = fadd float %315, %328, !dbg !79
  %342 = fadd float %316, %329, !dbg !79
  %343 = fadd float %317, %330, !dbg !79
  %344 = fadd float %318, %336, !dbg !79
  %345 = fadd float %319, %337, !dbg !79
  %346 = fadd float %320, %338, !dbg !79
  %347 = fadd float %321, %339, !dbg !79
  %348 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #1, !dbg !80
  %349 = extractvalue { i32, i32, i32, i32 } %348, 0, !dbg !80
  %350 = extractvalue { i32, i32, i32, i32 } %348, 1, !dbg !80
  %351 = extractvalue { i32, i32, i32, i32 } %348, 2, !dbg !80
  %352 = extractvalue { i32, i32, i32, i32 } %348, 3, !dbg !80
  %353 = bitcast i32 %349 to float, !dbg !80
  %354 = bitcast i32 %350 to float, !dbg !80
  %355 = bitcast i32 %351 to float, !dbg !80
  %356 = bitcast i32 %352 to float, !dbg !80
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147) #1, !dbg !80
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !80
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !80
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !80
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !80
  %362 = bitcast i32 %358 to float, !dbg !80
  %363 = bitcast i32 %359 to float, !dbg !80
  %364 = bitcast i32 %360 to float, !dbg !80
  %365 = bitcast i32 %361 to float, !dbg !80
  %366 = fadd float %340, %353, !dbg !81
  %367 = fadd float %341, %354, !dbg !81
  %368 = fadd float %342, %355, !dbg !81
  %369 = fadd float %343, %356, !dbg !81
  %370 = fadd float %344, %362, !dbg !81
  %371 = fadd float %345, %363, !dbg !81
  %372 = fadd float %346, %364, !dbg !81
  %373 = fadd float %347, %365, !dbg !81
  %374 = add nsw <2 x i32> %152, %156, !dbg !54
  %375 = mul nsw <2 x i32> %152, %156, !dbg !54
  %376 = add nsw i32 %65, 2, !dbg !82
  %377 = add nsw i32 %105, 2, !dbg !82
  %378 = icmp sgt i32 %65, 32, !dbg !83
  %379 = icmp sgt i32 %105, 32, !dbg !83
  %380 = select i1 %378, i32 35, i32 0, !dbg !84
  %381 = select i1 %379, i32 35, i32 0, !dbg !84
  %382 = icmp slt i32 %65, 33, !dbg !34
  %383 = icmp slt i32 %105, 33, !dbg !34
  %384 = select i1 %382, i32 %376, i32 0, !dbg !85
  %385 = select i1 %383, i32 %377, i32 0, !dbg !85
  %386 = add nsw i32 %380, %384, !dbg !86
  %387 = add nsw i32 %381, %385, !dbg !86
  %388 = extractelement <2 x i32> %99, i64 0, !dbg !87
  %389 = mul nsw i32 %388, %386, !dbg !88
  %390 = extractelement <2 x i32> %374, i64 0, !dbg !87
  %391 = mul nsw i32 %390, %387, !dbg !88
  %392 = extractelement <2 x i32> %94, i64 1, !dbg !87
  %.neg = mul nsw i32 %386, %392, !dbg !87
  %393 = extractelement <2 x i32> %98, i64 1, !dbg !87
  %.neg1 = mul nsw i32 %388, %393, !dbg !87
  %reass.add = add nsw i32 %.neg, %.neg1
  %394 = extractelement <2 x i32> %100, i64 1, !dbg !89
  %395 = add nsw i32 %389, %394, !dbg !89
  %396 = sub nsw i32 %395, %reass.add, !dbg !87
  %397 = extractelement <2 x i32> %152, i64 1, !dbg !87
  %.neg3 = mul nsw i32 %387, %397, !dbg !87
  %398 = extractelement <2 x i32> %156, i64 1, !dbg !87
  %.neg4 = mul nsw i32 %390, %398, !dbg !87
  %reass.add6 = add nsw i32 %.neg3, %.neg4
  %399 = extractelement <2 x i32> %375, i64 1, !dbg !89
  %400 = add nsw i32 %391, %399, !dbg !89
  %401 = sub nsw i32 %400, %reass.add6, !dbg !87
  %402 = sitofp i32 %396 to float, !dbg !90
  %403 = sitofp i32 %401 to float, !dbg !90
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %402) #1, !dbg !90
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %402) #1, !dbg !90
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %402) #1, !dbg !90
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float %402) #1, !dbg !90
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %403) #1, !dbg !90
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float %403) #1, !dbg !90
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %403) #1, !dbg !90
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %403) #1, !dbg !90
  %412 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !91
  %413 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !91
  %414 = bitcast float %404 to i32, !dbg !92
  %415 = bitcast float %405 to i32, !dbg !92
  %416 = bitcast float %406 to i32, !dbg !92
  %417 = bitcast float %407 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %414, i32 %415, i32 %416, i32 %417, ptr addrspace(1) %412, i1 %11) #1, !dbg !92
  %418 = bitcast float %408 to i32, !dbg !92
  %419 = bitcast float %409 to i32, !dbg !92
  %420 = bitcast float %410 to i32, !dbg !92
  %421 = bitcast float %411 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %418, i32 %419, i32 %420, i32 %421, ptr addrspace(1) %413, i1 %12) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvjyafj7o4nnmahiv6lk34uzctdjrzwpjmjostccoihkw6ncglat.py", directory: "inductor_cache/vj")
!4 = !{ptr @triton_poi_fused_avg_pool2d_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_32", linkageName: "triton_poi_fused_avg_pool2d_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 42, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 42, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 41, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 40, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 37, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 38, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 39, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 39, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 25, column: 21, scope: !7)
!33 = !DILocation(line: 25, column: 28, scope: !7)
!34 = !DILocation(line: 79, column: 256, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 60, column: 20, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 34, column: 19, scope: !7)
!39 = !DILocation(line: 37, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 55, scope: !7)
!41 = !DILocation(line: 38, column: 47, scope: !7)
!42 = !DILocation(line: 40, column: 21, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 55, scope: !7)
!45 = !DILocation(line: 54, column: 21, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 53, scope: !7)
!48 = !DILocation(line: 61, column: 44, scope: !7)
!49 = !DILocation(line: 79, column: 166, scope: !7)
!50 = !DILocation(line: 79, column: 162, scope: !7)
!51 = !DILocation(line: 79, column: 153, scope: !7)
!52 = !DILocation(line: 79, column: 197, scope: !7)
!53 = !DILocation(line: 79, column: 185, scope: !7)
!54 = !DILocation(line: 79, column: 173, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 50, column: 19, scope: !7)
!57 = !DILocation(line: 51, column: 54, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 50, scope: !7)
!60 = !DILocation(line: 70, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 51, scope: !7)
!62 = !DILocation(line: 73, column: 20, scope: !7)
!63 = !DILocation(line: 74, column: 52, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 52, scope: !7)
!66 = !DILocation(line: 44, column: 47, scope: !7)
!67 = !DILocation(line: 45, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 46, scope: !7)
!69 = !DILocation(line: 52, column: 20, scope: !7)
!70 = !DILocation(line: 58, column: 45, scope: !7)
!71 = !DILocation(line: 59, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 36, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 42, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 43, scope: !7)
!77 = !DILocation(line: 72, column: 20, scope: !7)
!78 = !DILocation(line: 74, column: 44, scope: !7)
!79 = !DILocation(line: 75, column: 20, scope: !7)
!80 = !DILocation(line: 77, column: 44, scope: !7)
!81 = !DILocation(line: 78, column: 20, scope: !7)
!82 = !DILocation(line: 79, column: 225, scope: !7)
!83 = !DILocation(line: 79, column: 221, scope: !7)
!84 = !DILocation(line: 79, column: 212, scope: !7)
!85 = !DILocation(line: 79, column: 244, scope: !7)
!86 = !DILocation(line: 79, column: 232, scope: !7)
!87 = !DILocation(line: 79, column: 398, scope: !7)
!88 = !DILocation(line: 79, column: 204, scope: !7)
!89 = !DILocation(line: 79, column: 144, scope: !7)
!90 = !DILocation(line: 80, column: 20, scope: !7)
!91 = !DILocation(line: 81, column: 25, scope: !7)
!92 = !DILocation(line: 81, column: 37, scope: !7)
!93 = !DILocation(line: 81, column: 4, scope: !7)
