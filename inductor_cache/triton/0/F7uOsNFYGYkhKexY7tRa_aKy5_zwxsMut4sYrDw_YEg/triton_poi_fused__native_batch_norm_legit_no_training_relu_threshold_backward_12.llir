; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 112, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = lshr i32 %12, 3, !dbg !16
  %22 = and i32 %21, 31, !dbg !16
  %23 = or disjoint i32 %20, %22, !dbg !17
  %24 = icmp slt i32 %23, 25, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %25 = sdiv i32 %.frozen, 256, !dbg !19
  %26 = mul i32 %25, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = srem i32 %16, 256, !dbg !20
  %28 = srem i32 %17, 256, !dbg !20
  %29 = srem i32 %18, 256, !dbg !20
  %30 = shl i32 %23, 8, !dbg !21
  %31 = mul i32 %25, 6400, !dbg !22
  %32 = add i32 %31, %30, !dbg !23
  %33 = add i32 %32, %.decomposed, !dbg !24
  %34 = add i32 %32, %27, !dbg !24
  %35 = add i32 %32, %28, !dbg !24
  %36 = add i32 %32, %29, !dbg !24
  %37 = sext i32 %33 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %34 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = sext i32 %35 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %36 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #4, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !26
  %49 = sext i32 %.decomposed to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !27
  %51 = sext i32 %27 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = sext i32 %28 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !27
  %55 = sext i32 %29 to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !28
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = bitcast i32 %69 to float, !dbg !30
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = bitcast i32 %78 to float, !dbg !30
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = bitcast i32 %86 to float, !dbg !30
  %91 = bitcast i32 %87 to float, !dbg !30
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !30
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !30
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !30
  %97 = bitcast i32 %93 to float, !dbg !30
  %98 = bitcast i32 %94 to float, !dbg !30
  %99 = bitcast i32 %95 to float, !dbg !30
  %100 = bitcast i32 %96 to float, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !31
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !31
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !31
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !31
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !32
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !32
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 true) #4, !dbg !32
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #4, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !33
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !33
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !33
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !33
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #4, !dbg !34
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 true) #4, !dbg !34
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #4, !dbg !34
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 true) #4, !dbg !34
  %117 = fadd float %70, 0x3EE4F8B580000000, !dbg !35
  %118 = fadd float %71, 0x3EE4F8B580000000, !dbg !35
  %119 = fadd float %72, 0x3EE4F8B580000000, !dbg !35
  %120 = fadd float %73, 0x3EE4F8B580000000, !dbg !35
  %121 = fadd float %79, 0x3EE4F8B580000000, !dbg !35
  %122 = fadd float %80, 0x3EE4F8B580000000, !dbg !35
  %123 = fadd float %81, 0x3EE4F8B580000000, !dbg !35
  %124 = fadd float %82, 0x3EE4F8B580000000, !dbg !35
  %125 = fadd float %88, 0x3EE4F8B580000000, !dbg !35
  %126 = fadd float %89, 0x3EE4F8B580000000, !dbg !35
  %127 = fadd float %90, 0x3EE4F8B580000000, !dbg !35
  %128 = fadd float %91, 0x3EE4F8B580000000, !dbg !35
  %129 = fadd float %97, 0x3EE4F8B580000000, !dbg !35
  %130 = fadd float %98, 0x3EE4F8B580000000, !dbg !35
  %131 = fadd float %99, 0x3EE4F8B580000000, !dbg !35
  %132 = fadd float %100, 0x3EE4F8B580000000, !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %133, 0, !dbg !36
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %134, 0, !dbg !36
  br i1 %.not.i, label %140, label %135, !dbg !36

135:                                              ; preds = %9
  br i1 %.not1.i, label %138, label %136, !dbg !36

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

140:                                              ; preds = %9
  br i1 %.not1.i, label %143, label %141, !dbg !36

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !36
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i4 = icmp eq i32 %145, 0, !dbg !36
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i7 = icmp eq i32 %146, 0, !dbg !36
  br i1 %.not.i4, label %152, label %147, !dbg !36

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %150, label %148, !dbg !36

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %155, label %153, !dbg !36

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

__nv_sqrtf.exit8:                                 ; preds = %148, %150, %153, %155
  %.0.i6 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !36
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %157, 0, !dbg !36
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %158, 0, !dbg !36
  br i1 %.not.i9, label %164, label %159, !dbg !36

159:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %162, label %160, !dbg !36

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

164:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %167, label %165, !dbg !36

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %160, %162, %165, %167
  %.0.i11 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !36
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i14 = icmp eq i32 %169, 0, !dbg !36
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i17 = icmp eq i32 %170, 0, !dbg !36
  br i1 %.not.i14, label %176, label %171, !dbg !36

171:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %174, label %172, !dbg !36

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

176:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %179, label %177, !dbg !36

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

__nv_sqrtf.exit18:                                ; preds = %172, %174, %177, %179
  %.0.i16 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !36
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i19 = icmp eq i32 %181, 0, !dbg !36
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i22 = icmp eq i32 %182, 0, !dbg !36
  br i1 %.not.i19, label %188, label %183, !dbg !36

183:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %186, label %184, !dbg !36

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

188:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %191, label %189, !dbg !36

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

__nv_sqrtf.exit23:                                ; preds = %184, %186, %189, %191
  %.0.i21 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !36
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i24 = icmp eq i32 %193, 0, !dbg !36
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i27 = icmp eq i32 %194, 0, !dbg !36
  br i1 %.not.i24, label %200, label %195, !dbg !36

195:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %198, label %196, !dbg !36

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

200:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %203, label %201, !dbg !36

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit28, !dbg !36

__nv_sqrtf.exit28:                                ; preds = %196, %198, %201, %203
  %.0.i26 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !36
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i29 = icmp eq i32 %205, 0, !dbg !36
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i32 = icmp eq i32 %206, 0, !dbg !36
  br i1 %.not.i29, label %212, label %207, !dbg !36

207:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %210, label %208, !dbg !36

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

212:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %215, label %213, !dbg !36

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit33, !dbg !36

__nv_sqrtf.exit33:                                ; preds = %208, %210, %213, %215
  %.0.i31 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !36
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i34 = icmp eq i32 %217, 0, !dbg !36
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i37 = icmp eq i32 %218, 0, !dbg !36
  br i1 %.not.i34, label %224, label %219, !dbg !36

219:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %222, label %220, !dbg !36

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

224:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %227, label %225, !dbg !36

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

__nv_sqrtf.exit38:                                ; preds = %220, %222, %225, %227
  %.0.i36 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !36
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i39 = icmp eq i32 %229, 0, !dbg !36
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i42 = icmp eq i32 %230, 0, !dbg !36
  br i1 %.not.i39, label %236, label %231, !dbg !36

231:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %234, label %232, !dbg !36

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

236:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %239, label %237, !dbg !36

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

__nv_sqrtf.exit43:                                ; preds = %232, %234, %237, %239
  %.0.i41 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !36
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i44 = icmp eq i32 %241, 0, !dbg !36
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i47 = icmp eq i32 %242, 0, !dbg !36
  br i1 %.not.i44, label %248, label %243, !dbg !36

243:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %246, label %244, !dbg !36

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

248:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %251, label %249, !dbg !36

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

__nv_sqrtf.exit48:                                ; preds = %244, %246, %249, %251
  %.0.i46 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !36
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i49 = icmp eq i32 %253, 0, !dbg !36
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i52 = icmp eq i32 %254, 0, !dbg !36
  br i1 %.not.i49, label %260, label %255, !dbg !36

255:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %258, label %256, !dbg !36

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit53, !dbg !36

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit53, !dbg !36

260:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %263, label %261, !dbg !36

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit53, !dbg !36

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit53, !dbg !36

__nv_sqrtf.exit53:                                ; preds = %256, %258, %261, %263
  %.0.i51 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !36
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i54 = icmp eq i32 %265, 0, !dbg !36
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i57 = icmp eq i32 %266, 0, !dbg !36
  br i1 %.not.i54, label %272, label %267, !dbg !36

267:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %270, label %268, !dbg !36

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit58, !dbg !36

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit58, !dbg !36

272:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %275, label %273, !dbg !36

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit58, !dbg !36

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit58, !dbg !36

__nv_sqrtf.exit58:                                ; preds = %268, %270, %273, %275
  %.0.i56 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !36
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i59 = icmp eq i32 %277, 0, !dbg !36
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i62 = icmp eq i32 %278, 0, !dbg !36
  br i1 %.not.i59, label %284, label %279, !dbg !36

279:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %282, label %280, !dbg !36

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #4, !dbg !36
  br label %__nv_sqrtf.exit63, !dbg !36

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #4, !dbg !36
  br label %__nv_sqrtf.exit63, !dbg !36

284:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %287, label %285, !dbg !36

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #4, !dbg !36
  br label %__nv_sqrtf.exit63, !dbg !36

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #4, !dbg !36
  br label %__nv_sqrtf.exit63, !dbg !36

__nv_sqrtf.exit63:                                ; preds = %280, %282, %285, %287
  %.0.i61 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !36
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i64 = icmp eq i32 %289, 0, !dbg !36
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i67 = icmp eq i32 %290, 0, !dbg !36
  br i1 %.not.i64, label %296, label %291, !dbg !36

291:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %294, label %292, !dbg !36

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #4, !dbg !36
  br label %__nv_sqrtf.exit68, !dbg !36

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #4, !dbg !36
  br label %__nv_sqrtf.exit68, !dbg !36

296:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %299, label %297, !dbg !36

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #4, !dbg !36
  br label %__nv_sqrtf.exit68, !dbg !36

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #4, !dbg !36
  br label %__nv_sqrtf.exit68, !dbg !36

__nv_sqrtf.exit68:                                ; preds = %292, %294, %297, %299
  %.0.i66 = phi float [ %293, %292 ], [ %295, %294 ], [ %298, %297 ], [ %300, %299 ], !dbg !36
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i69 = icmp eq i32 %301, 0, !dbg !36
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i72 = icmp eq i32 %302, 0, !dbg !36
  br i1 %.not.i69, label %308, label %303, !dbg !36

303:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %306, label %304, !dbg !36

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !36
  br label %__nv_sqrtf.exit73, !dbg !36

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !36
  br label %__nv_sqrtf.exit73, !dbg !36

308:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %311, label %309, !dbg !36

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !36
  br label %__nv_sqrtf.exit73, !dbg !36

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !36
  br label %__nv_sqrtf.exit73, !dbg !36

__nv_sqrtf.exit73:                                ; preds = %304, %306, %309, %311
  %.0.i71 = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !36
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i74 = icmp eq i32 %313, 0, !dbg !36
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i77 = icmp eq i32 %314, 0, !dbg !36
  br i1 %.not.i74, label %320, label %315, !dbg !36

315:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %318, label %316, !dbg !36

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit78, !dbg !36

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit78, !dbg !36

320:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %323, label %321, !dbg !36

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit78, !dbg !36

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit78, !dbg !36

__nv_sqrtf.exit78:                                ; preds = %316, %318, %321, %323
  %.0.i76 = phi float [ %317, %316 ], [ %319, %318 ], [ %322, %321 ], [ %324, %323 ], !dbg !36
  %325 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %326 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %327 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %328 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %329 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %330 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %331 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %332 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %333 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %334 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !28
  %335 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %336 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !28
  %337 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %338 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !28
  %339 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %340 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !28
  %341 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %342 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %343 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %344 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %345 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %346 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %347 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %348 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %349 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %350 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %351 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %352 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %353 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %354 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %355 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %356 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %357 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !34
  %358 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !34
  %359 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !34
  %360 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !34
  %361 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !34
  %362 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !34
  %363 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !34
  %364 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !34
  %365 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !34
  %366 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !34
  %367 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !34
  %368 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !34
  %369 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !34
  %370 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !34
  %371 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !34
  %372 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !34
  %373 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !32
  %374 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !32
  %375 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !32
  %376 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !32
  %377 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !32
  %378 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !32
  %379 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !32
  %380 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !32
  %381 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !32
  %382 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !32
  %383 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !32
  %384 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !32
  %385 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !32
  %386 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !32
  %387 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !32
  %388 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !32
  %389 = and i32 %12, 31, !dbg !16
  %390 = or disjoint i32 %20, %389, !dbg !17
  %391 = icmp slt i32 %390, 25, !dbg !18
  %392 = lshr i32 %12, 5, !dbg !12
  %393 = and i32 %392, 7, !dbg !12
  %394 = or disjoint i32 %393, 120, !dbg !12
  %395 = or disjoint i32 %11, %394, !dbg !13
  %396 = or disjoint i32 %393, 112, !dbg !12
  %397 = or disjoint i32 %11, %396, !dbg !13
  %398 = or disjoint i32 %393, 104, !dbg !12
  %399 = or disjoint i32 %11, %398, !dbg !13
  %400 = or disjoint i32 %393, 96, !dbg !12
  %401 = or disjoint i32 %11, %400, !dbg !13
  %402 = or disjoint i32 %393, 88, !dbg !12
  %403 = or disjoint i32 %11, %402, !dbg !13
  %404 = or disjoint i32 %393, 80, !dbg !12
  %405 = or disjoint i32 %11, %404, !dbg !13
  %406 = or disjoint i32 %393, 72, !dbg !12
  %407 = or disjoint i32 %11, %406, !dbg !13
  %408 = or disjoint i32 %393, 64, !dbg !12
  %409 = or disjoint i32 %11, %408, !dbg !13
  %410 = or disjoint i32 %393, 56, !dbg !12
  %411 = or disjoint i32 %11, %410, !dbg !13
  %412 = or disjoint i32 %393, 48, !dbg !12
  %413 = or disjoint i32 %11, %412, !dbg !13
  %414 = or disjoint i32 %393, 40, !dbg !12
  %415 = or disjoint i32 %11, %414, !dbg !13
  %416 = or disjoint i32 %393, 32, !dbg !12
  %417 = or disjoint i32 %11, %416, !dbg !13
  %418 = or disjoint i32 %393, 24, !dbg !12
  %419 = or disjoint i32 %11, %418, !dbg !13
  %420 = or disjoint i32 %393, 16, !dbg !12
  %421 = or disjoint i32 %11, %420, !dbg !13
  %422 = or disjoint i32 %393, 8, !dbg !12
  %423 = or disjoint i32 %11, %422, !dbg !13
  %424 = or disjoint i32 %11, %393, !dbg !13
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %426 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !37
  %427 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !37
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !37
  %429 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #4, !dbg !37
  %430 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #4, !dbg !37
  %431 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #4, !dbg !37
  %432 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !37
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #4, !dbg !37
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #4, !dbg !37
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i51) #4, !dbg !37
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i56) #4, !dbg !37
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i61) #4, !dbg !37
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i66) #4, !dbg !37
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i71) #4, !dbg !37
  %440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i76) #4, !dbg !37
  %441 = mul i32 %424, 25, !dbg !38
  %442 = mul i32 %423, 25, !dbg !38
  %443 = mul i32 %421, 25, !dbg !38
  %444 = mul i32 %419, 25, !dbg !38
  %445 = mul i32 %417, 25, !dbg !38
  %446 = mul i32 %415, 25, !dbg !38
  %447 = mul i32 %413, 25, !dbg !38
  %448 = mul i32 %411, 25, !dbg !38
  %449 = mul i32 %409, 25, !dbg !38
  %450 = mul i32 %407, 25, !dbg !38
  %451 = mul i32 %405, 25, !dbg !38
  %452 = mul i32 %403, 25, !dbg !38
  %453 = mul i32 %401, 25, !dbg !38
  %454 = mul i32 %399, 25, !dbg !38
  %455 = mul i32 %397, 25, !dbg !38
  %456 = mul i32 %395, 25, !dbg !38
  %457 = add i32 %390, %441, !dbg !39
  %458 = add i32 %390, %442, !dbg !39
  %459 = add i32 %390, %443, !dbg !39
  %460 = add i32 %390, %444, !dbg !39
  %461 = add i32 %390, %445, !dbg !39
  %462 = add i32 %390, %446, !dbg !39
  %463 = add i32 %390, %447, !dbg !39
  %464 = add i32 %390, %448, !dbg !39
  %465 = add i32 %390, %449, !dbg !39
  %466 = add i32 %390, %450, !dbg !39
  %467 = add i32 %390, %451, !dbg !39
  %468 = add i32 %390, %452, !dbg !39
  %469 = add i32 %390, %453, !dbg !39
  %470 = add i32 %390, %454, !dbg !39
  %471 = add i32 %390, %455, !dbg !39
  %472 = add i32 %390, %456, !dbg !39
  %473 = sext i32 %457 to i64, !dbg !40
  %474 = getelementptr float, ptr addrspace(1) %5, i64 %473, !dbg !40
  %475 = sext i32 %458 to i64, !dbg !40
  %476 = getelementptr float, ptr addrspace(1) %5, i64 %475, !dbg !40
  %477 = sext i32 %459 to i64, !dbg !40
  %478 = getelementptr float, ptr addrspace(1) %5, i64 %477, !dbg !40
  %479 = sext i32 %460 to i64, !dbg !40
  %480 = getelementptr float, ptr addrspace(1) %5, i64 %479, !dbg !40
  %481 = sext i32 %461 to i64, !dbg !40
  %482 = getelementptr float, ptr addrspace(1) %5, i64 %481, !dbg !40
  %483 = sext i32 %462 to i64, !dbg !40
  %484 = getelementptr float, ptr addrspace(1) %5, i64 %483, !dbg !40
  %485 = sext i32 %463 to i64, !dbg !40
  %486 = getelementptr float, ptr addrspace(1) %5, i64 %485, !dbg !40
  %487 = sext i32 %464 to i64, !dbg !40
  %488 = getelementptr float, ptr addrspace(1) %5, i64 %487, !dbg !40
  %489 = sext i32 %465 to i64, !dbg !40
  %490 = getelementptr float, ptr addrspace(1) %5, i64 %489, !dbg !40
  %491 = sext i32 %466 to i64, !dbg !40
  %492 = getelementptr float, ptr addrspace(1) %5, i64 %491, !dbg !40
  %493 = sext i32 %467 to i64, !dbg !40
  %494 = getelementptr float, ptr addrspace(1) %5, i64 %493, !dbg !40
  %495 = sext i32 %468 to i64, !dbg !40
  %496 = getelementptr float, ptr addrspace(1) %5, i64 %495, !dbg !40
  %497 = sext i32 %469 to i64, !dbg !40
  %498 = getelementptr float, ptr addrspace(1) %5, i64 %497, !dbg !40
  %499 = sext i32 %470 to i64, !dbg !40
  %500 = getelementptr float, ptr addrspace(1) %5, i64 %499, !dbg !40
  %501 = sext i32 %471 to i64, !dbg !40
  %502 = getelementptr float, ptr addrspace(1) %5, i64 %501, !dbg !40
  %503 = sext i32 %472 to i64, !dbg !40
  %504 = getelementptr float, ptr addrspace(1) %5, i64 %503, !dbg !40
  %505 = shl i32 %12, 9, !dbg !41
  %506 = and i32 %505, 3584, !dbg !41
  %507 = or disjoint i32 %506, %22, !dbg !41
  %508 = and i32 %12, 255, !dbg !41
  %509 = lshr exact i32 %506, 3, !dbg !41
  %510 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %509, !dbg !41
  %511 = getelementptr float, ptr addrspace(3) %510, i32 %507, !dbg !41
  %512 = or disjoint i32 %507, 32, !dbg !41
  %513 = lshr i32 %512, 5, !dbg !41
  %514 = getelementptr float, ptr addrspace(3) @global_smem, i32 %513, !dbg !41
  %515 = getelementptr float, ptr addrspace(3) %514, i32 %512, !dbg !41
  %516 = or disjoint i32 %507, 64, !dbg !41
  %517 = lshr i32 %516, 5, !dbg !41
  %518 = getelementptr float, ptr addrspace(3) @global_smem, i32 %517, !dbg !41
  %519 = getelementptr float, ptr addrspace(3) %518, i32 %516, !dbg !41
  %520 = or disjoint i32 %507, 96, !dbg !41
  %521 = lshr i32 %520, 5, !dbg !41
  %522 = getelementptr float, ptr addrspace(3) @global_smem, i32 %521, !dbg !41
  %523 = getelementptr float, ptr addrspace(3) %522, i32 %520, !dbg !41
  %524 = or disjoint i32 %507, 128, !dbg !41
  %525 = lshr i32 %524, 5, !dbg !41
  %526 = getelementptr float, ptr addrspace(3) @global_smem, i32 %525, !dbg !41
  %527 = getelementptr float, ptr addrspace(3) %526, i32 %524, !dbg !41
  %528 = or disjoint i32 %507, 160, !dbg !41
  %529 = lshr i32 %528, 5, !dbg !41
  %530 = getelementptr float, ptr addrspace(3) @global_smem, i32 %529, !dbg !41
  %531 = getelementptr float, ptr addrspace(3) %530, i32 %528, !dbg !41
  %532 = or disjoint i32 %507, 192, !dbg !41
  %533 = lshr i32 %532, 5, !dbg !41
  %534 = getelementptr float, ptr addrspace(3) @global_smem, i32 %533, !dbg !41
  %535 = getelementptr float, ptr addrspace(3) %534, i32 %532, !dbg !41
  %536 = or disjoint i32 %507, 224, !dbg !41
  %537 = lshr i32 %536, 5, !dbg !41
  %538 = getelementptr float, ptr addrspace(3) @global_smem, i32 %537, !dbg !41
  %539 = getelementptr float, ptr addrspace(3) %538, i32 %536, !dbg !41
  %540 = or disjoint i32 %507, 256, !dbg !41
  %541 = lshr i32 %540, 5, !dbg !41
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !41
  %543 = getelementptr float, ptr addrspace(3) %542, i32 %540, !dbg !41
  %544 = or disjoint i32 %507, 288, !dbg !41
  %545 = lshr i32 %544, 5, !dbg !41
  %546 = getelementptr float, ptr addrspace(3) @global_smem, i32 %545, !dbg !41
  %547 = getelementptr float, ptr addrspace(3) %546, i32 %544, !dbg !41
  %548 = or disjoint i32 %507, 320, !dbg !41
  %549 = lshr i32 %548, 5, !dbg !41
  %550 = getelementptr float, ptr addrspace(3) @global_smem, i32 %549, !dbg !41
  %551 = getelementptr float, ptr addrspace(3) %550, i32 %548, !dbg !41
  %552 = or disjoint i32 %507, 352, !dbg !41
  %553 = lshr i32 %552, 5, !dbg !41
  %554 = getelementptr float, ptr addrspace(3) @global_smem, i32 %553, !dbg !41
  %555 = getelementptr float, ptr addrspace(3) %554, i32 %552, !dbg !41
  %556 = or disjoint i32 %507, 384, !dbg !41
  %557 = lshr i32 %556, 5, !dbg !41
  %558 = getelementptr float, ptr addrspace(3) @global_smem, i32 %557, !dbg !41
  %559 = getelementptr float, ptr addrspace(3) %558, i32 %556, !dbg !41
  %560 = or disjoint i32 %507, 416, !dbg !41
  %561 = lshr i32 %560, 5, !dbg !41
  %562 = getelementptr float, ptr addrspace(3) @global_smem, i32 %561, !dbg !41
  %563 = getelementptr float, ptr addrspace(3) %562, i32 %560, !dbg !41
  %564 = or disjoint i32 %507, 448, !dbg !41
  %565 = lshr i32 %564, 5, !dbg !41
  %566 = getelementptr float, ptr addrspace(3) @global_smem, i32 %565, !dbg !41
  %567 = getelementptr float, ptr addrspace(3) %566, i32 %564, !dbg !41
  %568 = or disjoint i32 %507, 480, !dbg !41
  %569 = lshr i32 %568, 5, !dbg !41
  %570 = getelementptr float, ptr addrspace(3) @global_smem, i32 %569, !dbg !41
  %571 = getelementptr float, ptr addrspace(3) %570, i32 %568, !dbg !41
  %572 = lshr i32 %508, 5, !dbg !41
  %573 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %572, !dbg !41
  %574 = getelementptr inbounds float, ptr addrspace(3) %573, i32 %508, !dbg !41
  %575 = or disjoint i32 %508, 256, !dbg !41
  %576 = lshr i32 %575, 5, !dbg !41
  %577 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %576, !dbg !41
  %578 = getelementptr inbounds float, ptr addrspace(3) %577, i32 %575, !dbg !41
  %579 = or disjoint i32 %508, 512, !dbg !41
  %580 = lshr i32 %579, 5, !dbg !41
  %581 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %580, !dbg !41
  %582 = getelementptr inbounds float, ptr addrspace(3) %581, i32 %579, !dbg !41
  %583 = or disjoint i32 %508, 768, !dbg !41
  %584 = lshr i32 %583, 5, !dbg !41
  %585 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %584, !dbg !41
  %586 = getelementptr inbounds float, ptr addrspace(3) %585, i32 %583, !dbg !41
  %587 = or disjoint i32 %508, 1024, !dbg !41
  %588 = lshr i32 %587, 5, !dbg !41
  %589 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %588, !dbg !41
  %590 = getelementptr inbounds float, ptr addrspace(3) %589, i32 %587, !dbg !41
  %591 = or disjoint i32 %508, 1280, !dbg !41
  %592 = lshr i32 %591, 5, !dbg !41
  %593 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %592, !dbg !41
  %594 = getelementptr inbounds float, ptr addrspace(3) %593, i32 %591, !dbg !41
  %595 = or disjoint i32 %508, 1536, !dbg !41
  %596 = lshr i32 %595, 5, !dbg !41
  %597 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %596, !dbg !41
  %598 = getelementptr inbounds float, ptr addrspace(3) %597, i32 %595, !dbg !41
  %599 = or disjoint i32 %508, 1792, !dbg !41
  %600 = lshr i32 %599, 5, !dbg !41
  %601 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %600, !dbg !41
  %602 = getelementptr inbounds float, ptr addrspace(3) %601, i32 %599, !dbg !41
  %603 = or disjoint i32 %508, 2048, !dbg !41
  %604 = lshr i32 %603, 5, !dbg !41
  %605 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %604, !dbg !41
  %606 = getelementptr inbounds float, ptr addrspace(3) %605, i32 %603, !dbg !41
  %607 = or disjoint i32 %508, 2304, !dbg !41
  %608 = lshr i32 %607, 5, !dbg !41
  %609 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %608, !dbg !41
  %610 = getelementptr inbounds float, ptr addrspace(3) %609, i32 %607, !dbg !41
  %611 = or disjoint i32 %508, 2560, !dbg !41
  %612 = lshr i32 %611, 5, !dbg !41
  %613 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %612, !dbg !41
  %614 = getelementptr inbounds float, ptr addrspace(3) %613, i32 %611, !dbg !41
  %615 = or disjoint i32 %508, 2816, !dbg !41
  %616 = lshr i32 %615, 5, !dbg !41
  %617 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %616, !dbg !41
  %618 = getelementptr inbounds float, ptr addrspace(3) %617, i32 %615, !dbg !41
  %619 = or disjoint i32 %508, 3072, !dbg !41
  %620 = lshr i32 %619, 5, !dbg !41
  %621 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %620, !dbg !41
  %622 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %619, !dbg !41
  %623 = or disjoint i32 %508, 3328, !dbg !41
  %624 = lshr i32 %623, 5, !dbg !41
  %625 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %624, !dbg !41
  %626 = getelementptr inbounds float, ptr addrspace(3) %625, i32 %623, !dbg !41
  %627 = or disjoint i32 %508, 3584, !dbg !41
  %628 = lshr i32 %627, 5, !dbg !41
  %629 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %628, !dbg !41
  %630 = getelementptr inbounds float, ptr addrspace(3) %629, i32 %627, !dbg !41
  %631 = or disjoint i32 %508, 3840, !dbg !41
  %632 = lshr i32 %631, 5, !dbg !41
  %633 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %632, !dbg !41
  %634 = getelementptr inbounds float, ptr addrspace(3) %633, i32 %631, !dbg !41
  %635 = getelementptr i1, ptr addrspace(1) %6, i64 %37, !dbg !42
  %636 = insertelement <4 x i32> poison, i32 %355, i64 0, !dbg !26
  %637 = insertelement <4 x i32> %636, i32 %353, i64 1, !dbg !26
  %638 = insertelement <4 x i32> %637, i32 %351, i64 2, !dbg !26
  %639 = insertelement <4 x i32> %638, i32 %349, i64 3, !dbg !26
  %640 = bitcast <4 x i32> %639 to <4 x float>, !dbg !26
  %641 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !28
  %642 = insertelement <4 x i32> %641, i32 %354, i64 1, !dbg !28
  %643 = insertelement <4 x i32> %642, i32 %352, i64 2, !dbg !28
  %644 = insertelement <4 x i32> %643, i32 %350, i64 3, !dbg !28
  %645 = bitcast <4 x i32> %644 to <4 x float>, !dbg !28
  %646 = fsub <4 x float> %640, %645, !dbg !43
  %647 = insertelement <4 x i32> poison, i32 %372, i64 0, !dbg !34
  %648 = insertelement <4 x i32> %647, i32 %371, i64 1, !dbg !34
  %649 = insertelement <4 x i32> %648, i32 %370, i64 2, !dbg !34
  %650 = insertelement <4 x i32> %649, i32 %369, i64 3, !dbg !34
  %651 = bitcast <4 x i32> %650 to <4 x float>, !dbg !34
  %652 = insertelement <4 x i32> poison, i32 %388, i64 0, !dbg !32
  %653 = insertelement <4 x i32> %652, i32 %387, i64 1, !dbg !32
  %654 = insertelement <4 x i32> %653, i32 %386, i64 2, !dbg !32
  %655 = insertelement <4 x i32> %654, i32 %385, i64 3, !dbg !32
  %656 = bitcast <4 x i32> %655 to <4 x float>, !dbg !32
  %657 = insertelement <4 x float> poison, float %425, i64 0, !dbg !44
  %658 = insertelement <4 x float> %657, float %426, i64 1, !dbg !44
  %659 = insertelement <4 x float> %658, float %427, i64 2, !dbg !44
  %660 = insertelement <4 x float> %659, float %428, i64 3, !dbg !44
  %661 = fmul <4 x float> %646, %660, !dbg !44
  %662 = fmul <4 x float> %661, %656, !dbg !45
  %663 = fadd <4 x float> %662, %651, !dbg !46
  %664 = fcmp olt <4 x float> %663, zeroinitializer, !dbg !47
  %665 = select <4 x i1> %664, <4 x float> zeroinitializer, <4 x float> %663, !dbg !51
  %666 = fcmp ole <4 x float> %665, zeroinitializer, !dbg !52
  %667 = extractelement <4 x float> %665, i64 0, !dbg !41
  %668 = bitcast float %667 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %668, i1 true) #4, !dbg !41
  %669 = extractelement <4 x float> %665, i64 1, !dbg !41
  %670 = bitcast float %669 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %515, <1 x i32> %670, i1 true) #4, !dbg !41
  %671 = extractelement <4 x float> %665, i64 2, !dbg !41
  %672 = bitcast float %671 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %672, i1 true) #4, !dbg !41
  %673 = extractelement <4 x float> %665, i64 3, !dbg !41
  %674 = bitcast float %673 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %523, <1 x i32> %674, i1 true) #4, !dbg !41
  %675 = insertelement <4 x i32> poison, i32 %347, i64 0, !dbg !26
  %676 = insertelement <4 x i32> %675, i32 %345, i64 1, !dbg !26
  %677 = insertelement <4 x i32> %676, i32 %343, i64 2, !dbg !26
  %678 = insertelement <4 x i32> %677, i32 %341, i64 3, !dbg !26
  %679 = bitcast <4 x i32> %678 to <4 x float>, !dbg !26
  %680 = insertelement <4 x i32> poison, i32 %348, i64 0, !dbg !28
  %681 = insertelement <4 x i32> %680, i32 %346, i64 1, !dbg !28
  %682 = insertelement <4 x i32> %681, i32 %344, i64 2, !dbg !28
  %683 = insertelement <4 x i32> %682, i32 %342, i64 3, !dbg !28
  %684 = bitcast <4 x i32> %683 to <4 x float>, !dbg !28
  %685 = fsub <4 x float> %679, %684, !dbg !43
  %686 = insertelement <4 x i32> poison, i32 %368, i64 0, !dbg !34
  %687 = insertelement <4 x i32> %686, i32 %367, i64 1, !dbg !34
  %688 = insertelement <4 x i32> %687, i32 %366, i64 2, !dbg !34
  %689 = insertelement <4 x i32> %688, i32 %365, i64 3, !dbg !34
  %690 = bitcast <4 x i32> %689 to <4 x float>, !dbg !34
  %691 = insertelement <4 x i32> poison, i32 %384, i64 0, !dbg !32
  %692 = insertelement <4 x i32> %691, i32 %383, i64 1, !dbg !32
  %693 = insertelement <4 x i32> %692, i32 %382, i64 2, !dbg !32
  %694 = insertelement <4 x i32> %693, i32 %381, i64 3, !dbg !32
  %695 = bitcast <4 x i32> %694 to <4 x float>, !dbg !32
  %696 = insertelement <4 x float> poison, float %429, i64 0, !dbg !44
  %697 = insertelement <4 x float> %696, float %430, i64 1, !dbg !44
  %698 = insertelement <4 x float> %697, float %431, i64 2, !dbg !44
  %699 = insertelement <4 x float> %698, float %432, i64 3, !dbg !44
  %700 = fmul <4 x float> %685, %699, !dbg !44
  %701 = fmul <4 x float> %700, %695, !dbg !45
  %702 = fadd <4 x float> %701, %690, !dbg !46
  %703 = fcmp olt <4 x float> %702, zeroinitializer, !dbg !47
  %704 = select <4 x i1> %703, <4 x float> zeroinitializer, <4 x float> %702, !dbg !51
  %705 = fcmp ole <4 x float> %704, zeroinitializer, !dbg !52
  %706 = extractelement <4 x float> %704, i64 0, !dbg !41
  %707 = bitcast float %706 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %527, <1 x i32> %707, i1 true) #4, !dbg !41
  %708 = extractelement <4 x float> %704, i64 1, !dbg !41
  %709 = bitcast float %708 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %709, i1 true) #4, !dbg !41
  %710 = extractelement <4 x float> %704, i64 2, !dbg !41
  %711 = bitcast float %710 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %535, <1 x i32> %711, i1 true) #4, !dbg !41
  %712 = extractelement <4 x float> %704, i64 3, !dbg !41
  %713 = bitcast float %712 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %713, i1 true) #4, !dbg !41
  %714 = insertelement <4 x i32> poison, i32 %339, i64 0, !dbg !26
  %715 = insertelement <4 x i32> %714, i32 %337, i64 1, !dbg !26
  %716 = insertelement <4 x i32> %715, i32 %335, i64 2, !dbg !26
  %717 = insertelement <4 x i32> %716, i32 %333, i64 3, !dbg !26
  %718 = bitcast <4 x i32> %717 to <4 x float>, !dbg !26
  %719 = insertelement <4 x i32> poison, i32 %340, i64 0, !dbg !28
  %720 = insertelement <4 x i32> %719, i32 %338, i64 1, !dbg !28
  %721 = insertelement <4 x i32> %720, i32 %336, i64 2, !dbg !28
  %722 = insertelement <4 x i32> %721, i32 %334, i64 3, !dbg !28
  %723 = bitcast <4 x i32> %722 to <4 x float>, !dbg !28
  %724 = fsub <4 x float> %718, %723, !dbg !43
  %725 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !34
  %726 = insertelement <4 x i32> %725, i32 %363, i64 1, !dbg !34
  %727 = insertelement <4 x i32> %726, i32 %362, i64 2, !dbg !34
  %728 = insertelement <4 x i32> %727, i32 %361, i64 3, !dbg !34
  %729 = bitcast <4 x i32> %728 to <4 x float>, !dbg !34
  %730 = insertelement <4 x i32> poison, i32 %380, i64 0, !dbg !32
  %731 = insertelement <4 x i32> %730, i32 %379, i64 1, !dbg !32
  %732 = insertelement <4 x i32> %731, i32 %378, i64 2, !dbg !32
  %733 = insertelement <4 x i32> %732, i32 %377, i64 3, !dbg !32
  %734 = bitcast <4 x i32> %733 to <4 x float>, !dbg !32
  %735 = insertelement <4 x float> poison, float %433, i64 0, !dbg !44
  %736 = insertelement <4 x float> %735, float %434, i64 1, !dbg !44
  %737 = insertelement <4 x float> %736, float %435, i64 2, !dbg !44
  %738 = insertelement <4 x float> %737, float %436, i64 3, !dbg !44
  %739 = fmul <4 x float> %724, %738, !dbg !44
  %740 = fmul <4 x float> %739, %734, !dbg !45
  %741 = fadd <4 x float> %740, %729, !dbg !46
  %742 = fcmp olt <4 x float> %741, zeroinitializer, !dbg !47
  %743 = select <4 x i1> %742, <4 x float> zeroinitializer, <4 x float> %741, !dbg !51
  %744 = fcmp ole <4 x float> %743, zeroinitializer, !dbg !52
  %745 = extractelement <4 x float> %743, i64 0, !dbg !41
  %746 = bitcast float %745 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %746, i1 true) #4, !dbg !41
  %747 = extractelement <4 x float> %743, i64 1, !dbg !41
  %748 = bitcast float %747 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, <1 x i32> %748, i1 true) #4, !dbg !41
  %749 = extractelement <4 x float> %743, i64 2, !dbg !41
  %750 = bitcast float %749 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %551, <1 x i32> %750, i1 true) #4, !dbg !41
  %751 = extractelement <4 x float> %743, i64 3, !dbg !41
  %752 = bitcast float %751 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %752, i1 true) #4, !dbg !41
  %753 = insertelement <4 x i32> poison, i32 %331, i64 0, !dbg !26
  %754 = insertelement <4 x i32> %753, i32 %329, i64 1, !dbg !26
  %755 = insertelement <4 x i32> %754, i32 %327, i64 2, !dbg !26
  %756 = insertelement <4 x i32> %755, i32 %325, i64 3, !dbg !26
  %757 = bitcast <4 x i32> %756 to <4 x float>, !dbg !26
  %758 = insertelement <4 x i32> poison, i32 %332, i64 0, !dbg !28
  %759 = insertelement <4 x i32> %758, i32 %330, i64 1, !dbg !28
  %760 = insertelement <4 x i32> %759, i32 %328, i64 2, !dbg !28
  %761 = insertelement <4 x i32> %760, i32 %326, i64 3, !dbg !28
  %762 = bitcast <4 x i32> %761 to <4 x float>, !dbg !28
  %763 = fsub <4 x float> %757, %762, !dbg !43
  %764 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !34
  %765 = insertelement <4 x i32> %764, i32 %359, i64 1, !dbg !34
  %766 = insertelement <4 x i32> %765, i32 %358, i64 2, !dbg !34
  %767 = insertelement <4 x i32> %766, i32 %357, i64 3, !dbg !34
  %768 = bitcast <4 x i32> %767 to <4 x float>, !dbg !34
  %769 = insertelement <4 x i32> poison, i32 %376, i64 0, !dbg !32
  %770 = insertelement <4 x i32> %769, i32 %375, i64 1, !dbg !32
  %771 = insertelement <4 x i32> %770, i32 %374, i64 2, !dbg !32
  %772 = insertelement <4 x i32> %771, i32 %373, i64 3, !dbg !32
  %773 = bitcast <4 x i32> %772 to <4 x float>, !dbg !32
  %774 = insertelement <4 x float> poison, float %437, i64 0, !dbg !44
  %775 = insertelement <4 x float> %774, float %438, i64 1, !dbg !44
  %776 = insertelement <4 x float> %775, float %439, i64 2, !dbg !44
  %777 = insertelement <4 x float> %776, float %440, i64 3, !dbg !44
  %778 = fmul <4 x float> %763, %777, !dbg !44
  %779 = fmul <4 x float> %778, %773, !dbg !45
  %780 = fadd <4 x float> %779, %768, !dbg !46
  %781 = fcmp olt <4 x float> %780, zeroinitializer, !dbg !47
  %782 = select <4 x i1> %781, <4 x float> zeroinitializer, <4 x float> %780, !dbg !51
  %783 = fcmp ole <4 x float> %782, zeroinitializer, !dbg !52
  %784 = extractelement <4 x float> %782, i64 0, !dbg !41
  %785 = bitcast float %784 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %785, i1 true) #4, !dbg !41
  %786 = extractelement <4 x float> %782, i64 1, !dbg !41
  %787 = bitcast float %786 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %563, <1 x i32> %787, i1 true) #4, !dbg !41
  %788 = extractelement <4 x float> %782, i64 2, !dbg !41
  %789 = bitcast float %788 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %789, i1 true) #4, !dbg !41
  %790 = extractelement <4 x float> %782, i64 3, !dbg !41
  %791 = bitcast float %790 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %791, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %792 = load i32, ptr addrspace(3) %574, align 4, !dbg !41
  %793 = load i32, ptr addrspace(3) %578, align 4, !dbg !41
  %794 = load i32, ptr addrspace(3) %582, align 4, !dbg !41
  %795 = load i32, ptr addrspace(3) %586, align 4, !dbg !41
  %796 = load i32, ptr addrspace(3) %590, align 4, !dbg !41
  %797 = load i32, ptr addrspace(3) %594, align 4, !dbg !41
  %798 = load i32, ptr addrspace(3) %598, align 4, !dbg !41
  %799 = load i32, ptr addrspace(3) %602, align 4, !dbg !41
  %800 = load i32, ptr addrspace(3) %606, align 4, !dbg !41
  %801 = load i32, ptr addrspace(3) %610, align 4, !dbg !41
  %802 = load i32, ptr addrspace(3) %614, align 4, !dbg !41
  %803 = load i32, ptr addrspace(3) %618, align 4, !dbg !41
  %804 = load i32, ptr addrspace(3) %622, align 4, !dbg !41
  %805 = load i32, ptr addrspace(3) %626, align 4, !dbg !41
  %806 = load i32, ptr addrspace(3) %630, align 4, !dbg !41
  %807 = load i32, ptr addrspace(3) %634, align 4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %792, ptr addrspace(1) %474, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %793, ptr addrspace(1) %476, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %794, ptr addrspace(1) %478, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %795, ptr addrspace(1) %480, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %796, ptr addrspace(1) %482, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %797, ptr addrspace(1) %484, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %798, ptr addrspace(1) %486, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %799, ptr addrspace(1) %488, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %800, ptr addrspace(1) %490, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %801, ptr addrspace(1) %492, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %802, ptr addrspace(1) %494, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %803, ptr addrspace(1) %496, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %804, ptr addrspace(1) %498, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %805, ptr addrspace(1) %500, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %806, ptr addrspace(1) %502, i1 %391) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %807, ptr addrspace(1) %504, i1 %391) #4, !dbg !41
  %808 = zext <4 x i1> %666 to <4 x i8>, !dbg !53
  %809 = bitcast <4 x i8> %808 to i32, !dbg !53
  %810 = zext <4 x i1> %705 to <4 x i8>, !dbg !53
  %811 = bitcast <4 x i8> %810 to i32, !dbg !53
  %812 = zext <4 x i1> %744 to <4 x i8>, !dbg !53
  %813 = bitcast <4 x i8> %812 to i32, !dbg !53
  %814 = zext <4 x i1> %783 to <4 x i8>, !dbg !53
  %815 = bitcast <4 x i8> %814 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %809, i32 %811, i32 %813, i32 %815, ptr addrspace(1) %635, i1 %24) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chcdghsgb5ihc7xjbayukmqrcj4k6aj6arnotjybfqs3sw3biny4.py", directory: "inductor_cache/hc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 33, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 45, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 56, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
