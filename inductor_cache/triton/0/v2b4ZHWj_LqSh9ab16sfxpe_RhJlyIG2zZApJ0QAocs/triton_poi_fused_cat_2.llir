; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %12 = sdiv i32 %.frozen, 4096, !dbg !14
  %13 = srem i32 %12, 4, !dbg !15
  %14 = mul i32 %12, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %.frozen1 = freeze i32 %11, !dbg !17
  %15 = sdiv i32 %.frozen1, 16384, !dbg !17
  %16 = icmp slt i32 %13, 2, !dbg !18
  %17 = mul i32 %15, 16384, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %17, !dbg !19
  %18 = shl nsw i32 %15, 13, !dbg !20
  %19 = add nsw i32 %18, %srem.decomposed, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !23
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !23
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !23
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !23
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !23
  %27 = bitcast i32 %23 to float, !dbg !23
  %28 = bitcast i32 %24 to float, !dbg !23
  %29 = bitcast i32 %25 to float, !dbg !23
  %30 = bitcast i32 %26 to float, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !24
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !25
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !25
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !25
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !25
  %37 = bitcast i32 %33 to float, !dbg !25
  %38 = bitcast i32 %34 to float, !dbg !25
  %39 = bitcast i32 %35 to float, !dbg !25
  %40 = bitcast i32 %36 to float, !dbg !25
  %41 = fsub float 0.000000e+00, %37, !dbg !26
  %42 = fsub float 0.000000e+00, %38, !dbg !26
  %43 = fsub float 0.000000e+00, %39, !dbg !26
  %44 = fsub float 0.000000e+00, %40, !dbg !26
  %45 = fmul float %41, 0x3FF7154760000000, !dbg !30
  %46 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %45) #1, !dbg !30
  %47 = fmul float %42, 0x3FF7154760000000, !dbg !30
  %48 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %47) #1, !dbg !30
  %49 = fmul float %43, 0x3FF7154760000000, !dbg !30
  %50 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %49) #1, !dbg !30
  %51 = fmul float %44, 0x3FF7154760000000, !dbg !30
  %52 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %51) #1, !dbg !30
  %53 = fadd float %46, 1.000000e+00, !dbg !31
  %54 = fadd float %48, 1.000000e+00, !dbg !31
  %55 = fadd float %50, 1.000000e+00, !dbg !31
  %56 = fadd float %52, 1.000000e+00, !dbg !31
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %53) #1, !dbg !32
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %54) #1, !dbg !32
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %55) #1, !dbg !32
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %56) #1, !dbg !32
  %61 = fmul float %57, %37, !dbg !33
  %62 = fmul float %58, %38, !dbg !33
  %63 = fmul float %59, %39, !dbg !33
  %64 = fmul float %60, %40, !dbg !33
  %65 = fadd float %61, %27, !dbg !34
  %66 = fadd float %62, %28, !dbg !34
  %67 = fadd float %63, %29, !dbg !34
  %68 = fadd float %64, %30, !dbg !34
  %69 = icmp sgt i32 %13, 1, !dbg !35
  %70 = shl nsw i32 %13, 12, !dbg !36
  %71 = add nsw i32 %.decomposed, -8192, !dbg !36
  %72 = add nsw i32 %71, %18, !dbg !37
  %73 = add nsw i32 %72, %70, !dbg !38
  %74 = sext i32 %73 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !39
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !40
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !40
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !40
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !40
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !40
  %81 = bitcast i32 %77 to float, !dbg !40
  %82 = bitcast i32 %78 to float, !dbg !40
  %83 = bitcast i32 %79 to float, !dbg !40
  %84 = bitcast i32 %80 to float, !dbg !40
  %85 = fsub float 0.000000e+00, %81, !dbg !41
  %86 = fsub float 0.000000e+00, %82, !dbg !41
  %87 = fsub float 0.000000e+00, %83, !dbg !41
  %88 = fsub float 0.000000e+00, %84, !dbg !41
  %89 = fmul float %85, 0x3FF7154760000000, !dbg !43
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !43
  %91 = fmul float %86, 0x3FF7154760000000, !dbg !43
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !43
  %93 = fmul float %87, 0x3FF7154760000000, !dbg !43
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !43
  %95 = fmul float %88, 0x3FF7154760000000, !dbg !43
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !43
  %97 = fadd float %90, 1.000000e+00, !dbg !44
  %98 = fadd float %92, 1.000000e+00, !dbg !44
  %99 = fadd float %94, 1.000000e+00, !dbg !44
  %100 = fadd float %96, 1.000000e+00, !dbg !44
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #1, !dbg !45
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %98) #1, !dbg !45
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %99) #1, !dbg !45
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %100) #1, !dbg !45
  %105 = fmul float %101, %81, !dbg !46
  %106 = fmul float %102, %82, !dbg !46
  %107 = fmul float %103, %83, !dbg !46
  %108 = fmul float %104, %84, !dbg !46
  %109 = select i1 %16, float %65, float %105, !dbg !47
  %110 = select i1 %16, float %66, float %106, !dbg !47
  %111 = select i1 %16, float %67, float %107, !dbg !47
  %112 = select i1 %16, float %68, float %108, !dbg !47
  %113 = sext i32 %11 to i64, !dbg !48
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !48
  %115 = bitcast float %109 to i32, !dbg !49
  %116 = bitcast float %110 to i32, !dbg !49
  %117 = bitcast float %111 to i32, !dbg !49
  %118 = bitcast float %112 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %114, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdsumlpxlm6e4c3ljevipifp4ylgdm7iheyzrem7tsodkownpd5r.py", directory: "inductor_cache/ds")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 57, scope: !7)
!26 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 35, column: 22, scope: !7)
!30 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 42, scope: !7)
!37 = !DILocation(line: 43, column: 36, scope: !7)
!38 = !DILocation(line: 43, column: 55, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 65, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !42)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
