; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_91(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 11264, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 4, !dbg !15
  %19 = srem i32 %18, 704, !dbg !16
  %20 = mul i32 %18, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %.frozen9 = freeze i32 %16, !dbg !18
  %21 = sdiv i32 %.frozen9, 2816, !dbg !18
  %22 = sext i32 %19 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %17) #3, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %17) #3, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %37 = icmp slt i32 %19, 640, !dbg !27
  %38 = mul i32 %21, 2816, !dbg !28
  %srem.decomposed = sub i32 %.frozen9, %38, !dbg !28
  %39 = mul nsw i32 %21, 2560, !dbg !29
  %40 = add nsw i32 %39, %srem.decomposed, !dbg !30
  %41 = sext i32 %40 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = and i1 %17, %37, !dbg !32
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !33
  %45 = and i32 %19, -32, !dbg !34
  %46 = icmp eq i32 %45, 640, !dbg !34
  %47 = shl nsw i32 %19, 2, !dbg !35
  %48 = shl nsw i32 %21, 7, !dbg !36
  %49 = add nsw i32 %48, %.decomposed, !dbg !35
  %50 = add nsw i32 %49, -2560, !dbg !37
  %51 = add nsw i32 %50, %47, !dbg !38
  %52 = sext i32 %51 to i64, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !39
  %54 = and i1 %17, %46, !dbg !40
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #3, !dbg !41
  %56 = icmp sgt i32 %19, 671, !dbg !42
  %57 = add nsw i32 %49, -2688, !dbg !43
  %58 = add nsw i32 %57, %47, !dbg !44
  %59 = sext i32 %58 to i64, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !45
  %61 = and i1 %17, %56, !dbg !46
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #3, !dbg !47
  %63 = fadd float %28, 0x3EE4F8B580000000, !dbg !48
  %64 = fadd float %30, 0x3EE4F8B580000000, !dbg !48
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %65, 0, !dbg !49
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %66, 0, !dbg !49
  br i1 %.not.i, label %72, label %67, !dbg !49

67:                                               ; preds = %10
  br i1 %.not1.i, label %70, label %68, !dbg !49

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

72:                                               ; preds = %10
  br i1 %.not1.i, label %75, label %73, !dbg !49

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !49
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i4 = icmp eq i32 %77, 0, !dbg !49
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i7 = icmp eq i32 %78, 0, !dbg !49
  br i1 %.not.i4, label %84, label %79, !dbg !49

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %82, label %80, !dbg !49

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %87, label %85, !dbg !49

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

__nv_sqrtf.exit8:                                 ; preds = %80, %82, %85, %87
  %.0.i6 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !49
  %89 = extractvalue { i32, i32 } %44, 1, !dbg !33
  %90 = extractvalue { i32, i32 } %55, 1, !dbg !41
  %91 = extractvalue { i32, i32 } %62, 1, !dbg !47
  %.v1 = select i1 %46, i32 %90, i32 %91, !dbg !50
  %.v3 = select i1 %37, i32 %89, i32 %.v1, !dbg !51
  %92 = bitcast i32 %.v3 to float, !dbg !51
  %93 = bitcast i32 %25 to float, !dbg !20
  %94 = fsub float %92, %93, !dbg !52
  %95 = extractvalue { i32, i32 } %44, 0, !dbg !33
  %96 = extractvalue { i32, i32 } %55, 0, !dbg !41
  %97 = extractvalue { i32, i32 } %62, 0, !dbg !47
  %.v = select i1 %46, i32 %96, i32 %97, !dbg !50
  %.v2 = select i1 %37, i32 %95, i32 %.v, !dbg !51
  %98 = bitcast i32 %.v2 to float, !dbg !51
  %99 = bitcast i32 %24 to float, !dbg !20
  %100 = fsub float %98, %99, !dbg !52
  %101 = bitcast i32 %36 to float, !dbg !26
  %102 = bitcast i32 %35 to float, !dbg !26
  %103 = bitcast i32 %33 to float, !dbg !24
  %104 = bitcast i32 %32 to float, !dbg !24
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !53
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !53
  %107 = fmul float %100, %105, !dbg !54
  %108 = fmul float %94, %106, !dbg !54
  %109 = fmul float %107, %104, !dbg !55
  %110 = fmul float %108, %103, !dbg !55
  %111 = fadd float %109, %102, !dbg !56
  %112 = fadd float %110, %101, !dbg !56
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !57
  %114 = fcmp olt float %112, 0.000000e+00, !dbg !57
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !61
  %116 = select i1 %114, float 0.000000e+00, float %112, !dbg !61
  %117 = sext i32 %16 to i64, !dbg !62
  %118 = getelementptr float, ptr addrspace(1) %7, i64 %117, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v2, i32 %.v3, ptr addrspace(1) %118, i1 %17) #3, !dbg !63
  %119 = getelementptr float, ptr addrspace(1) %8, i64 %117, !dbg !64
  %120 = bitcast float %115 to i32, !dbg !65
  %121 = bitcast float %116 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %120, i32 %121, ptr addrspace(1) %119, i1 %17) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crf5liuc55plisvfof36fsglpugqc3k2qdcutjnyt2jynn3b3jdc.py", directory: "inductor_cache/rf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_91, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_91, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_91", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_91", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 61, scope: !7)
!33 = !DILocation(line: 37, column: 54, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 39, scope: !7)
!36 = !DILocation(line: 42, column: 58, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 70, scope: !7)
!41 = !DILocation(line: 42, column: 63, scope: !7)
!42 = !DILocation(line: 43, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 36, scope: !7)
!44 = !DILocation(line: 46, column: 54, scope: !7)
!45 = !DILocation(line: 46, column: 31, scope: !7)
!46 = !DILocation(line: 46, column: 71, scope: !7)
!47 = !DILocation(line: 46, column: 63, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 27, scope: !7)
!50 = !DILocation(line: 47, column: 34, scope: !7)
!51 = !DILocation(line: 48, column: 33, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 61, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 63, column: 25, scope: !7)
!65 = !DILocation(line: 63, column: 37, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
