; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = or disjoint i32 %17, 2, !dbg !13
  %20 = or disjoint i32 %17, 3, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %21 = sdiv i32 %.frozen, 8, !dbg !14
  %22 = mul i32 %21, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %22, !dbg !15
  %23 = srem i32 %18, 8, !dbg !15
  %24 = srem i32 %19, 8, !dbg !15
  %25 = srem i32 %20, 8, !dbg !15
  %26 = sdiv i32 %17, 64, !dbg !16
  %27 = srem i32 %26, 256, !dbg !17
  %28 = shl nsw i32 %.decomposed, 1, !dbg !18
  %29 = shl nsw i32 %23, 1, !dbg !18
  %30 = shl nsw i32 %24, 1, !dbg !18
  %31 = shl nsw i32 %25, 1, !dbg !18
  %32 = shl i32 %21, 5, !dbg !19
  %33 = add i32 %28, %32, !dbg !20
  %34 = add i32 %32, %29, !dbg !20
  %35 = add i32 %32, %30, !dbg !20
  %36 = add i32 %32, %31, !dbg !20
  %37 = sext i32 %33 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !21
  %39 = sext i32 %34 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !21
  %41 = sext i32 %35 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !21
  %43 = sext i32 %36 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !22
  %49 = or disjoint i32 %33, 1, !dbg !23
  %50 = or disjoint i32 %34, 1, !dbg !23
  %51 = or disjoint i32 %35, 1, !dbg !23
  %52 = or disjoint i32 %36, 1, !dbg !23
  %53 = sext i32 %49 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %55 = sext i32 %50 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !24
  %57 = sext i32 %51 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !24
  %59 = sext i32 %52 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !25
  %65 = or disjoint i32 %32, 16, !dbg !26
  %66 = add i32 %65, %28, !dbg !27
  %67 = add i32 %65, %29, !dbg !27
  %68 = add i32 %65, %30, !dbg !27
  %69 = add i32 %65, %31, !dbg !27
  %70 = sext i32 %66 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !28
  %72 = sext i32 %67 to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !28
  %74 = sext i32 %68 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !28
  %76 = sext i32 %69 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !29
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !29
  %82 = or disjoint i32 %32, 17, !dbg !30
  %83 = add i32 %82, %28, !dbg !31
  %84 = add i32 %82, %29, !dbg !31
  %85 = add i32 %82, %30, !dbg !31
  %86 = add i32 %82, %31, !dbg !31
  %87 = sext i32 %83 to i64, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !32
  %89 = sext i32 %84 to i64, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !32
  %91 = sext i32 %85 to i64, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !32
  %93 = sext i32 %86 to i64, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !32
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !33
  %99 = sext i32 %17 to i64, !dbg !34
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !34
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !35
  %102 = sext i32 %27 to i64, !dbg !36
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !36
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !38
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !39
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !39
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !39
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !39
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !40
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !41
  %115 = bitcast i32 %114 to float, !dbg !41
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !41
  %117 = bitcast i32 %116 to float, !dbg !41
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !41
  %119 = bitcast i32 %118 to float, !dbg !41
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !41
  %121 = bitcast i32 %120 to float, !dbg !41
  %122 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !42
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !43
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !43
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !43
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !43
  %127 = getelementptr float, ptr addrspace(1) %6, i64 %102, !dbg !44
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !45
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !45
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !45
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !45
  %132 = fadd float %115, 0x3EE4F8B580000000, !dbg !46
  %133 = fadd float %117, 0x3EE4F8B580000000, !dbg !46
  %134 = fadd float %119, 0x3EE4F8B580000000, !dbg !46
  %135 = fadd float %121, 0x3EE4F8B580000000, !dbg !46
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %136, 0, !dbg !47
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i = icmp eq i32 %137, 0, !dbg !47
  br i1 %.not.i, label %143, label %138, !dbg !47

138:                                              ; preds = %11
  br i1 %.not1.i, label %141, label %139, !dbg !47

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

143:                                              ; preds = %11
  br i1 %.not1.i, label %146, label %144, !dbg !47

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %139, %141, %144, %146
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !47
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i1 = icmp eq i32 %148, 0, !dbg !47
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i4 = icmp eq i32 %149, 0, !dbg !47
  br i1 %.not.i1, label %155, label %150, !dbg !47

150:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %153, label %151, !dbg !47

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

155:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %158, label %156, !dbg !47

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

__nv_sqrtf.exit5:                                 ; preds = %151, %153, %156, %158
  %.0.i3 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !47
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %160, 0, !dbg !47
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %161, 0, !dbg !47
  br i1 %.not.i6, label %167, label %162, !dbg !47

162:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %165, label %163, !dbg !47

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

167:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %170, label %168, !dbg !47

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %163, %165, %168, %170
  %.0.i8 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !47
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %172, 0, !dbg !47
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %173, 0, !dbg !47
  br i1 %.not.i11, label %179, label %174, !dbg !47

174:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %177, label %175, !dbg !47

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

179:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %182, label %180, !dbg !47

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %175, %177, %180, %182
  %.0.i13 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !47
  %184 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !25
  %185 = insertelement <4 x i32> %184, i32 %62, i64 1, !dbg !25
  %186 = insertelement <4 x i32> %185, i32 %63, i64 2, !dbg !25
  %187 = insertelement <4 x i32> %186, i32 %64, i64 3, !dbg !25
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !25
  %189 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !22
  %190 = insertelement <4 x i32> %189, i32 %46, i64 1, !dbg !22
  %191 = insertelement <4 x i32> %190, i32 %47, i64 2, !dbg !22
  %192 = insertelement <4 x i32> %191, i32 %48, i64 3, !dbg !22
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !22
  %194 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !29
  %195 = insertelement <4 x i32> %194, i32 %79, i64 1, !dbg !29
  %196 = insertelement <4 x i32> %195, i32 %80, i64 2, !dbg !29
  %197 = insertelement <4 x i32> %196, i32 %81, i64 3, !dbg !29
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !29
  %199 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !33
  %200 = insertelement <4 x i32> %199, i32 %96, i64 1, !dbg !33
  %201 = insertelement <4 x i32> %200, i32 %97, i64 2, !dbg !33
  %202 = insertelement <4 x i32> %201, i32 %98, i64 3, !dbg !33
  %203 = bitcast <4 x i32> %202 to <4 x float>, !dbg !33
  %204 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !35
  %205 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !37
  %206 = insertelement <4 x i32> %205, i32 %105, i64 1, !dbg !37
  %207 = insertelement <4 x i32> %206, i32 %106, i64 2, !dbg !37
  %208 = insertelement <4 x i32> %207, i32 %107, i64 3, !dbg !37
  %209 = bitcast <4 x i32> %208 to <4 x float>, !dbg !37
  %210 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !39
  %211 = insertelement <4 x i32> %210, i32 %110, i64 1, !dbg !39
  %212 = insertelement <4 x i32> %211, i32 %111, i64 2, !dbg !39
  %213 = insertelement <4 x i32> %212, i32 %112, i64 3, !dbg !39
  %214 = bitcast <4 x i32> %213 to <4 x float>, !dbg !39
  %215 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !35
  %216 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !35
  %217 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !35
  %218 = fcmp ogt <4 x float> %188, %193, !dbg !48
  %219 = fcmp uno <4 x float> %188, zeroinitializer, !dbg !49
  %220 = or <4 x i1> %218, %219, !dbg !53
  %.v = select <4 x i1> %220, <4 x i32> %187, <4 x i32> %192, !dbg !54
  %221 = bitcast <4 x i32> %.v to <4 x float>, !dbg !54
  %222 = fcmp olt <4 x float> %221, %198, !dbg !55
  %223 = fcmp uno <4 x float> %198, zeroinitializer, !dbg !56
  %224 = or <4 x i1> %222, %223, !dbg !58
  %.v16 = select <4 x i1> %224, <4 x i32> %197, <4 x i32> %.v, !dbg !59
  %225 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !59
  %226 = fcmp olt <4 x float> %225, %203, !dbg !60
  %227 = zext <4 x i1> %218 to <4 x i8>, !dbg !61
  %228 = select <4 x i1> %222, <4 x i8> splat (i8 2), <4 x i8> %227, !dbg !62
  %229 = select <4 x i1> %226, <4 x i8> splat (i8 3), <4 x i8> %228, !dbg !63
  %230 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !45
  %231 = insertelement <4 x i32> %230, i32 %129, i64 1, !dbg !45
  %232 = insertelement <4 x i32> %231, i32 %130, i64 2, !dbg !45
  %233 = insertelement <4 x i32> %232, i32 %131, i64 3, !dbg !45
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !45
  %235 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !43
  %236 = insertelement <4 x i32> %235, i32 %124, i64 1, !dbg !43
  %237 = insertelement <4 x i32> %236, i32 %125, i64 2, !dbg !43
  %238 = insertelement <4 x i32> %237, i32 %126, i64 3, !dbg !43
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !43
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !64
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !64
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !64
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !64
  %244 = fcmp uno <4 x float> %203, zeroinitializer, !dbg !65
  %245 = insertelement <4 x i32> poison, i32 %217, i64 0, !dbg !35
  %246 = insertelement <4 x i32> %245, i32 %216, i64 1, !dbg !35
  %247 = insertelement <4 x i32> %246, i32 %215, i64 2, !dbg !35
  %248 = insertelement <4 x i32> %247, i32 %204, i64 3, !dbg !35
  %249 = bitcast <4 x i32> %248 to <4 x float>, !dbg !35
  %250 = fadd <4 x float> %249, %209, !dbg !67
  %251 = or <4 x i1> %226, %244, !dbg !68
  %.v17 = select <4 x i1> %251, <4 x i32> %202, <4 x i32> %.v16, !dbg !69
  %252 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !69
  %253 = fadd <4 x float> %250, %252, !dbg !70
  %254 = fsub <4 x float> %253, %214, !dbg !71
  %255 = insertelement <4 x float> poison, float %240, i64 0, !dbg !72
  %256 = insertelement <4 x float> %255, float %241, i64 1, !dbg !72
  %257 = insertelement <4 x float> %256, float %242, i64 2, !dbg !72
  %258 = insertelement <4 x float> %257, float %243, i64 3, !dbg !72
  %259 = fmul <4 x float> %254, %258, !dbg !72
  %260 = fmul <4 x float> %259, %239, !dbg !73
  %261 = fadd <4 x float> %260, %234, !dbg !74
  %262 = fcmp olt <4 x float> %261, zeroinitializer, !dbg !75
  %263 = extractelement <4 x i1> %262, i64 0, !dbg !77
  %264 = extractelement <4 x i1> %262, i64 1, !dbg !77
  %265 = extractelement <4 x i1> %262, i64 2, !dbg !77
  %266 = extractelement <4 x i1> %262, i64 3, !dbg !77
  %267 = getelementptr i8, ptr addrspace(1) %7, i64 %99, !dbg !78
  %268 = bitcast <4 x i8> %229 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %268, ptr addrspace(1) %267, i1 true) #3, !dbg !79
  %269 = getelementptr float, ptr addrspace(1) %8, i64 %99, !dbg !80
  %bc = bitcast <4 x float> %261 to <4 x i32>, !dbg !81
  %270 = extractelement <4 x i32> %bc, i64 0, !dbg !81
  %271 = select i1 %263, i32 0, i32 %270, !dbg !77
  %bc18 = bitcast <4 x float> %261 to <4 x i32>, !dbg !81
  %272 = extractelement <4 x i32> %bc18, i64 1, !dbg !81
  %273 = select i1 %264, i32 0, i32 %272, !dbg !77
  %bc19 = bitcast <4 x float> %261 to <4 x i32>, !dbg !81
  %274 = extractelement <4 x i32> %bc19, i64 2, !dbg !81
  %275 = select i1 %265, i32 0, i32 %274, !dbg !77
  %bc20 = bitcast <4 x float> %261 to <4 x i32>, !dbg !81
  %276 = extractelement <4 x i32> %bc20, i64 3, !dbg !81
  %277 = select i1 %266, i32 0, i32 %276, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %271, i32 %273, i32 %275, i32 %277, ptr addrspace(1) %269, i1 true) #3, !dbg !81
  %278 = getelementptr float, ptr addrspace(1) %9, i64 %99, !dbg !82
  %bc21 = bitcast <4 x float> %254 to <4 x i32>, !dbg !83
  %279 = extractelement <4 x i32> %bc21, i64 0, !dbg !83
  %bc22 = bitcast <4 x float> %254 to <4 x i32>, !dbg !83
  %280 = extractelement <4 x i32> %bc22, i64 1, !dbg !83
  %bc23 = bitcast <4 x float> %254 to <4 x i32>, !dbg !83
  %281 = extractelement <4 x i32> %bc23, i64 2, !dbg !83
  %bc24 = bitcast <4 x float> %254 to <4 x i32>, !dbg !83
  %282 = extractelement <4 x i32> %bc24, i64 3, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %278, i1 true) #3, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cym4oa2dshr6wafeguuf3htyw55eiwjzgptgwckbecf2fz34cvsr.py", directory: "inductor_cache/ym")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 40, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 45, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 31, column: 36, scope: !7)
!31 = !DILocation(line: 31, column: 43, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 40, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 36, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 31, scope: !7)
!41 = !DILocation(line: 35, column: 36, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 36, scope: !7)
!44 = !DILocation(line: 37, column: 31, scope: !7)
!45 = !DILocation(line: 37, column: 36, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 27, scope: !7)
!48 = !DILocation(line: 38, column: 18, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 42, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 43, column: 18, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !57)
!57 = !DILocation(line: 46, column: 41, scope: !7)
!58 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !57)
!59 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !57)
!60 = !DILocation(line: 47, column: 20, scope: !7)
!61 = !DILocation(line: 41, column: 32, scope: !7)
!62 = !DILocation(line: 45, column: 33, scope: !7)
!63 = !DILocation(line: 49, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !66)
!66 = !DILocation(line: 50, column: 42, scope: !7)
!67 = !DILocation(line: 51, column: 20, scope: !7)
!68 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !66)
!70 = !DILocation(line: 52, column: 20, scope: !7)
!71 = !DILocation(line: 53, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 20, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 20, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !76)
!76 = !DILocation(line: 65, column: 42, scope: !7)
!77 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !76)
!78 = !DILocation(line: 66, column: 25, scope: !7)
!79 = !DILocation(line: 66, column: 37, scope: !7)
!80 = !DILocation(line: 67, column: 25, scope: !7)
!81 = !DILocation(line: 67, column: 37, scope: !7)
!82 = !DILocation(line: 68, column: 25, scope: !7)
!83 = !DILocation(line: 68, column: 37, scope: !7)
!84 = !DILocation(line: 68, column: 4, scope: !7)
