; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = and i32 %11, 31, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 64, !dbg !14
  %17 = shl i32 %11, 2, !dbg !15
  %18 = and i32 %17, 12, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 4, !dbg !16
  %20 = mul i32 %19, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sdiv i32 %15, 16, !dbg !18
  %22 = shl nsw i32 %.decomposed, 4, !dbg !19
  %23 = or disjoint i32 %22, %18, !dbg !20
  %24 = shl i32 %21, 6, !dbg !21
  %25 = add i32 %23, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !24
  %33 = bitcast i32 %29 to float, !dbg !24
  %34 = bitcast i32 %30 to float, !dbg !24
  %35 = bitcast i32 %31 to float, !dbg !24
  %36 = bitcast i32 %32 to float, !dbg !24
  %37 = shl nsw i32 %21, 2, !dbg !25
  %38 = add nsw i32 %37, %.decomposed, !dbg !26
  %39 = sext i32 %38 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #5, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #5, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #5, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #5, !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = shl i32 %19, 4, !dbg !29
  %47 = or disjoint i32 %46, %18, !dbg !30
  %48 = sext i32 %47 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !31
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !32
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !32
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !32
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !32
  %55 = bitcast i32 %51 to float, !dbg !32
  %56 = bitcast i32 %52 to float, !dbg !32
  %57 = bitcast i32 %53 to float, !dbg !32
  %58 = bitcast i32 %54 to float, !dbg !32
  %59 = sext i32 %19 to i64, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %16) #5, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %16) #5, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %16) #5, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %16) #5, !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !35
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !36
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !36
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !36
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !36
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !36
  %72 = bitcast i32 %68 to float, !dbg !36
  %73 = bitcast i32 %69 to float, !dbg !36
  %74 = bitcast i32 %70 to float, !dbg !36
  %75 = bitcast i32 %71 to float, !dbg !36
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !37
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #5, !dbg !38
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #5, !dbg !38
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #5, !dbg !38
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #5, !dbg !38
  %81 = bitcast i32 %80 to float, !dbg !38
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !39
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !40
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !41
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %16) #5, !dbg !42
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %16) #5, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %16) #5, !dbg !42
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %16) #5, !dbg !42
  %89 = bitcast i32 %88 to float, !dbg !42
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i13 = icmp eq i32 %96, 0, !dbg !43
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i16 = icmp eq i32 %97, 0, !dbg !43
  br i1 %.not.i13, label %103, label %98, !dbg !43

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %101, label %99, !dbg !43

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #5, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #5, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %106, label %104, !dbg !43

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #5, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #5, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

__nv_sqrtf.exit17:                                ; preds = %99, %101, %104, %106
  %.0.i15 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !43
  %108 = fcmp ogt float %.0.i15, 0x3D71979980000000, !dbg !44
  %109 = fcmp uno float %.0.i15, 0.000000e+00, !dbg !48
  %110 = or i1 %108, %109, !dbg !49
  %111 = select i1 %110, float %.0.i15, float 0x3D71979980000000, !dbg !50
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %111) #5, !dbg !51
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %111) #5, !dbg !51
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %111) #5, !dbg !51
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %111) #5, !dbg !51
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !52
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !52
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !52
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i33 = icmp eq i32 %122, 0, !dbg !52
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !52
  %.not1.i36 = icmp eq i32 %123, 0, !dbg !52
  br i1 %.not.i33, label %129, label %124, !dbg !52

124:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %127, label %125, !dbg !52

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #5, !dbg !52
  br label %__nv_sqrtf.exit37, !dbg !52

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #5, !dbg !52
  br label %__nv_sqrtf.exit37, !dbg !52

129:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %132, label %130, !dbg !52

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #5, !dbg !52
  br label %__nv_sqrtf.exit37, !dbg !52

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #5, !dbg !52
  br label %__nv_sqrtf.exit37, !dbg !52

__nv_sqrtf.exit37:                                ; preds = %125, %127, %130, %132
  %.0.i35 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !52
  %134 = fcmp ogt float %.0.i35, 0x3D71979980000000, !dbg !53
  %135 = fcmp uno float %.0.i35, 0.000000e+00, !dbg !55
  %136 = or i1 %134, %135, !dbg !56
  %137 = select i1 %136, float %.0.i35, float 0x3D71979980000000, !dbg !57
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %137) #5, !dbg !58
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %137) #5, !dbg !58
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %137) #5, !dbg !58
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %137) #5, !dbg !58
  %142 = fmul float %112, %138, !dbg !59
  %143 = fmul float %113, %139, !dbg !59
  %144 = fmul float %114, %140, !dbg !59
  %145 = fmul float %115, %141, !dbg !59
  %146 = fadd float %142, %143, !dbg !60
  %147 = fadd float %146, %144, !dbg !60
  %148 = fadd float %147, %145, !dbg !60
  %149 = select i1 %16, float %148, float 0.000000e+00, !dbg !60
  %150 = bitcast float %149 to i32, !dbg !65
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 2, i32 31), !dbg !65
  %152 = bitcast i32 %151 to float, !dbg !65
  %153 = fadd float %149, %152, !dbg !60
  %154 = bitcast float %153 to i32, !dbg !65
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !65
  %156 = bitcast i32 %155 to float, !dbg !65
  %157 = fadd float %153, %156, !dbg !60
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !66
  %159 = bitcast float %157 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !66
  %161 = load i32, ptr addrspace(3) %160, align 4, !dbg !66
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !67
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !67
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !67
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %.not.i53 = icmp eq i32 %168, 0, !dbg !67
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !67
  %.not1.i56 = icmp eq i32 %169, 0, !dbg !67
  br i1 %.not.i53, label %175, label %170, !dbg !67

170:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i56, label %173, label %171, !dbg !67

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #5, !dbg !67
  br label %__nv_sqrtf.exit57, !dbg !67

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #5, !dbg !67
  br label %__nv_sqrtf.exit57, !dbg !67

175:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i56, label %178, label %176, !dbg !67

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #5, !dbg !67
  br label %__nv_sqrtf.exit57, !dbg !67

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #5, !dbg !67
  br label %__nv_sqrtf.exit57, !dbg !67

__nv_sqrtf.exit57:                                ; preds = %171, %173, %176, %178
  %.0.i55 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !67
  %180 = fcmp ogt float %.0.i55, 0x3D71979980000000, !dbg !68
  %181 = fcmp uno float %.0.i55, 0.000000e+00, !dbg !70
  %182 = or i1 %180, %181, !dbg !71
  %183 = select i1 %182, float %.0.i55, float 0x3D71979980000000, !dbg !72
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %183) #5, !dbg !73
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %183) #5, !dbg !73
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %183) #5, !dbg !73
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %183) #5, !dbg !73
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !74
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !74
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !74
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i73 = icmp eq i32 %194, 0, !dbg !74
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !74
  %.not1.i76 = icmp eq i32 %195, 0, !dbg !74
  br i1 %.not.i73, label %201, label %196, !dbg !74

196:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i76, label %199, label %197, !dbg !74

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #5, !dbg !74
  br label %__nv_sqrtf.exit77, !dbg !74

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #5, !dbg !74
  br label %__nv_sqrtf.exit77, !dbg !74

201:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i76, label %204, label %202, !dbg !74

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #5, !dbg !74
  br label %__nv_sqrtf.exit77, !dbg !74

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #5, !dbg !74
  br label %__nv_sqrtf.exit77, !dbg !74

__nv_sqrtf.exit77:                                ; preds = %197, %199, %202, %204
  %.0.i75 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !74
  %206 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !40
  %207 = bitcast i32 %206 to float, !dbg !40
  %208 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !40
  %209 = bitcast i32 %208 to float, !dbg !40
  %210 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !40
  %211 = bitcast i32 %210 to float, !dbg !40
  %212 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !40
  %213 = bitcast i32 %212 to float, !dbg !40
  %214 = or disjoint i32 %10, %14, !dbg !13
  %215 = icmp slt i32 %214, 64, !dbg !14
  %216 = fcmp ogt float %.0.i75, 0x3D71979980000000, !dbg !75
  %217 = fcmp uno float %.0.i75, 0.000000e+00, !dbg !77
  %218 = or i1 %216, %217, !dbg !78
  %219 = select i1 %218, float %.0.i75, float 0x3D71979980000000, !dbg !79
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %219) #5, !dbg !80
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %219) #5, !dbg !80
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %219) #5, !dbg !80
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %219) #5, !dbg !80
  %224 = fmul float %184, %220, !dbg !81
  %225 = fmul float %185, %221, !dbg !81
  %226 = fmul float %186, %222, !dbg !81
  %227 = fmul float %187, %223, !dbg !81
  %228 = fadd float %224, %225, !dbg !82
  %229 = fadd float %228, %226, !dbg !82
  %230 = fadd float %229, %227, !dbg !82
  %231 = select i1 %16, float %230, float 0.000000e+00, !dbg !82
  %232 = bitcast float %231 to i32, !dbg !84
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !84
  %234 = bitcast i32 %233 to float, !dbg !84
  %235 = fadd float %231, %234, !dbg !82
  %236 = bitcast float %235 to i32, !dbg !84
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !84
  %238 = bitcast i32 %237 to float, !dbg !84
  %239 = fadd float %235, %238, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %240 = bitcast float %239 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %240, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %241 = load i32, ptr addrspace(3) %160, align 4, !dbg !85
  %242 = fmul float %138, %184, !dbg !86
  %243 = fmul float %139, %185, !dbg !86
  %244 = fmul float %140, %186, !dbg !86
  %245 = fmul float %141, %187, !dbg !86
  %246 = fadd float %242, %243, !dbg !87
  %247 = fadd float %246, %244, !dbg !87
  %248 = fadd float %247, %245, !dbg !87
  %249 = select i1 %16, float %248, float 0.000000e+00, !dbg !87
  %250 = bitcast float %249 to i32, !dbg !89
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 2, i32 31), !dbg !89
  %252 = bitcast i32 %251 to float, !dbg !89
  %253 = fadd float %249, %252, !dbg !87
  %254 = bitcast float %253 to i32, !dbg !89
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !89
  %256 = bitcast i32 %255 to float, !dbg !89
  %257 = fadd float %253, %256, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %258 = bitcast float %257 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %258, i1 true) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %259 = load i32, ptr addrspace(3) %160, align 4, !dbg !90
  %260 = sext i32 %214 to i64, !dbg !91
  %261 = getelementptr float, ptr addrspace(1) %4, i64 %260, !dbg !91
  %262 = and i32 %11, 96, !dbg !92
  %263 = icmp eq i32 %262, 0, !dbg !92
  %264 = and i1 %263, %215, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %261, i1 %264) #5, !dbg !92
  %265 = getelementptr float, ptr addrspace(1) %5, i64 %260, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %265, i1 %264) #5, !dbg !94
  %266 = getelementptr float, ptr addrspace(1) %6, i64 %260, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %259, ptr addrspace(1) %266, i1 %264) #5, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77hhhx3yihyatzshnro3cufvi5cccsacrubokyecyxkncfco5s7.py", directory: "inductor_cache/77")
!4 = !{ptr @triton_per_fused_mul_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sum_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sum_1", linkageName: "triton_per_fused_mul_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 38, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 46, scope: !7)
!22 = !DILocation(line: 34, column: 43, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 51, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 43, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 52, scope: !7)
!37 = !DILocation(line: 39, column: 31, scope: !7)
!38 = !DILocation(line: 39, column: 43, scope: !7)
!39 = !DILocation(line: 40, column: 31, scope: !7)
!40 = !DILocation(line: 40, column: 44, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 42, column: 26, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 44, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 45, column: 18, scope: !7)
!52 = !DILocation(line: 46, column: 26, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !54)
!54 = !DILocation(line: 47, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !54)
!58 = !DILocation(line: 48, column: 19, scope: !7)
!59 = !DILocation(line: 49, column: 19, scope: !7)
!60 = !DILocation(line: 256, column: 15, scope: !61, inlinedAt: !64)
!61 = distinct !DILexicalBlockFile(scope: !63, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!63 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!64 = !DILocation(line: 52, column: 26, scope: !7)
!65 = !DILocation(line: 267, column: 36, scope: !63, inlinedAt: !64)
!66 = !DILocation(line: 52, column: 29, scope: !7)
!67 = !DILocation(line: 53, column: 27, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !69)
!69 = !DILocation(line: 54, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !69)
!73 = !DILocation(line: 55, column: 20, scope: !7)
!74 = !DILocation(line: 56, column: 27, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !76)
!76 = !DILocation(line: 57, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !76)
!80 = !DILocation(line: 58, column: 20, scope: !7)
!81 = !DILocation(line: 59, column: 20, scope: !7)
!82 = !DILocation(line: 256, column: 15, scope: !61, inlinedAt: !83)
!83 = !DILocation(line: 62, column: 26, scope: !7)
!84 = !DILocation(line: 267, column: 36, scope: !63, inlinedAt: !83)
!85 = !DILocation(line: 62, column: 29, scope: !7)
!86 = !DILocation(line: 63, column: 20, scope: !7)
!87 = !DILocation(line: 256, column: 15, scope: !61, inlinedAt: !88)
!88 = !DILocation(line: 66, column: 26, scope: !7)
!89 = !DILocation(line: 267, column: 36, scope: !63, inlinedAt: !88)
!90 = !DILocation(line: 66, column: 29, scope: !7)
!91 = !DILocation(line: 67, column: 25, scope: !7)
!92 = !DILocation(line: 67, column: 37, scope: !7)
!93 = !DILocation(line: 68, column: 25, scope: !7)
!94 = !DILocation(line: 68, column: 37, scope: !7)
!95 = !DILocation(line: 69, column: 25, scope: !7)
!96 = !DILocation(line: 69, column: 37, scope: !7)
!97 = !DILocation(line: 69, column: 4, scope: !7)
