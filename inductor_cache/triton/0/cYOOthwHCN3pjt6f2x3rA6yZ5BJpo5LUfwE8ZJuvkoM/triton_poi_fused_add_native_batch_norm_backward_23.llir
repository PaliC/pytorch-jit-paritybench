; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_batch_norm_backward_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = srem i32 %16, 64, !dbg !14
  %18 = sext i32 %16 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = bitcast i32 %24 to float, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %35 = bitcast i32 %31 to float, !dbg !18
  %36 = bitcast i32 %32 to float, !dbg !18
  %37 = bitcast i32 %33 to float, !dbg !18
  %38 = bitcast i32 %34 to float, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !21
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = bitcast i32 %52 to float, !dbg !22
  %57 = bitcast i32 %53 to float, !dbg !22
  %58 = bitcast i32 %54 to float, !dbg !22
  %59 = sext i32 %17 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = bitcast i32 %62 to float, !dbg !24
  %67 = bitcast i32 %63 to float, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = bitcast i32 %73 to float, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %59, !dbg !27
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !28
  %86 = bitcast i32 %82 to float, !dbg !28
  %87 = bitcast i32 %83 to float, !dbg !28
  %88 = bitcast i32 %84 to float, !dbg !28
  %89 = bitcast i32 %85 to float, !dbg !28
  %90 = fadd float %45, %55, !dbg !29
  %91 = fadd float %46, %56, !dbg !29
  %92 = fadd float %47, %57, !dbg !29
  %93 = fadd float %48, %58, !dbg !29
  %94 = fadd float %90, %35, !dbg !30
  %95 = fadd float %91, %36, !dbg !30
  %96 = fadd float %92, %37, !dbg !30
  %97 = fadd float %93, %38, !dbg !30
  %98 = fadd float %94, %25, !dbg !31
  %99 = fadd float %95, %26, !dbg !31
  %100 = fadd float %96, %27, !dbg !31
  %101 = fadd float %97, %28, !dbg !31
  %102 = fsub float %98, %66, !dbg !32
  %103 = fsub float %99, %67, !dbg !32
  %104 = fsub float %100, %68, !dbg !32
  %105 = fsub float %101, %69, !dbg !32
  %106 = fsub float %94, %76, !dbg !33
  %107 = fsub float %95, %77, !dbg !33
  %108 = fsub float %96, %78, !dbg !33
  %109 = fsub float %97, %79, !dbg !33
  %110 = fsub float %90, %86, !dbg !34
  %111 = fsub float %91, %87, !dbg !34
  %112 = fsub float %92, %88, !dbg !34
  %113 = fsub float %93, %89, !dbg !34
  %114 = bitcast float %102 to i32, !dbg !35
  %115 = bitcast float %103 to i32, !dbg !35
  %116 = bitcast float %104 to i32, !dbg !35
  %117 = bitcast float %105 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %115, i32 %116, i32 %117, ptr addrspace(1) %19, i1 true) #1, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !36
  %119 = bitcast float %106 to i32, !dbg !37
  %120 = bitcast float %107 to i32, !dbg !37
  %121 = bitcast float %108 to i32, !dbg !37
  %122 = bitcast float %109 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %119, i32 %120, i32 %121, i32 %122, ptr addrspace(1) %118, i1 true) #1, !dbg !37
  %123 = getelementptr float, ptr addrspace(1) %8, i64 %18, !dbg !38
  %124 = bitcast float %110 to i32, !dbg !39
  %125 = bitcast float %111 to i32, !dbg !39
  %126 = bitcast float %112 to i32, !dbg !39
  %127 = bitcast float %113 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %124, i32 %125, i32 %126, i32 %127, ptr addrspace(1) %123, i1 true) #1, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfd5jisgj25vj6wzrme7losfv5uy7poqdezl7ucsrti4aunfsr7n.py", directory: "inductor_cache/fd")
!4 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_batch_norm_backward_23", linkageName: "triton_poi_fused_add_native_batch_norm_backward_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 19, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 39, column: 39, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 37, scope: !7)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 37, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
