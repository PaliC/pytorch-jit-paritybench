; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/cj/ccj2vbkeqmpk4ypm35htgbvta6atf42n63adchdhjpqrwhu7jsif.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp152 < 16\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %8 = shl i32 %7, 8, !dbg !13
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %10 = shl i32 %9, 1, !dbg !14
  %11 = and i32 %10, 254, !dbg !14
  %12 = or disjoint i32 %8, %11, !dbg !15
  %13 = or disjoint i32 %12, 1, !dbg !15
  %14 = icmp slt i32 %12, 256, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %15 = sdiv i32 %.frozen, 64, !dbg !17
  %16 = mul i32 %15, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %16, !dbg !18
  %17 = srem i32 %13, 64, !dbg !18
  %18 = sext i32 %12 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %14) #4, !dbg !20
  %21 = icmp slt i32 %.decomposed, 16, !dbg !21
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !22
  %22 = srem i8 %.lhs.trunc, 16, !dbg !22
  %.lhs.trunc49 = trunc nsw i32 %17 to i8, !dbg !22
  %23 = srem i8 %.lhs.trunc49, 16, !dbg !22
  %24 = sext i8 %22 to i64, !dbg !23
  %25 = sext i8 %23 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !24
  %27 = getelementptr i8, ptr addrspace(1) %26, i64 64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %29 = getelementptr i8, ptr addrspace(1) %28, i64 64, !dbg !24
  %30 = and i1 %14, %21, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %30, i32 0, i1 %30) #4, !dbg !26
  %32 = bitcast i32 %31 to float, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30) #4, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = shl nsw i32 %15, 5, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = or disjoint i64 %36, 16, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %38, i64 %24, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %38, i64 %25, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %30, i32 0, i1 %30) #4, !dbg !30
  %42 = bitcast i32 %41 to float, !dbg !30
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %30, i32 0, i1 %30) #4, !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = fadd float %32, %42, !dbg !31
  %46 = fadd float %34, %44, !dbg !31
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %48 = tail call float @llvm.nvvm.floor.ftz.f(float %45), !dbg !32
  %49 = tail call float @llvm.nvvm.floor.f(float %45), !dbg !32
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %51 = tail call float @llvm.nvvm.floor.ftz.f(float %46), !dbg !32
  %52 = tail call float @llvm.nvvm.floor.f(float %46), !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %30, i32 0, i1 %30) #4, !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %30, i32 0, i1 %30) #4, !dbg !33
  %56 = bitcast i32 %55 to float, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %24, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %57, i64 %25, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %30, i32 0, i1 %30) #4, !dbg !35
  %61 = bitcast i32 %60 to float, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %30, i32 0, i1 %30) #4, !dbg !35
  %63 = bitcast i32 %62 to float, !dbg !35
  %64 = fadd float %54, %61, !dbg !36
  %65 = fadd float %56, %63, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %67 = tail call float @llvm.nvvm.floor.ftz.f(float %64), !dbg !37
  %68 = tail call float @llvm.nvvm.floor.f(float %64), !dbg !37
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %70 = tail call float @llvm.nvvm.floor.ftz.f(float %65), !dbg !37
  %71 = tail call float @llvm.nvvm.floor.f(float %65), !dbg !37
  %72 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !32
  %73 = insertelement <2 x i32> %72, i32 %66, i64 1, !dbg !32
  %74 = icmp eq <2 x i32> %73, zeroinitializer, !dbg !32
  %75 = insertelement <2 x float> poison, float %49, i64 0, !dbg !32
  %76 = insertelement <2 x float> %75, float %68, i64 1, !dbg !32
  %77 = insertelement <2 x float> poison, float %48, i64 0, !dbg !32
  %78 = insertelement <2 x float> %77, float %67, i64 1, !dbg !32
  %79 = select <2 x i1> %74, <2 x float> %76, <2 x float> %78, !dbg !32
  %80 = fadd <2 x float> %79, splat (float 1.000000e+00), !dbg !38
  %81 = fcmp ole <2 x float> %80, zeroinitializer, !dbg !39
  %82 = select <2 x i1> %81, <2 x float> zeroinitializer, <2 x float> %80, !dbg !39
  %83 = fcmp olt <2 x float> %82, splat (float 3.000000e+00), !dbg !43
  %84 = fcmp uno <2 x float> %82, zeroinitializer, !dbg !45
  %85 = or <2 x i1> %83, %84, !dbg !46
  %86 = select <2 x i1> %85, <2 x float> %82, <2 x float> splat (float 3.000000e+00), !dbg !47
  %87 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !32
  %88 = insertelement <2 x i32> %87, i32 %69, i64 1, !dbg !32
  %89 = icmp eq <2 x i32> %88, zeroinitializer, !dbg !32
  %90 = insertelement <2 x float> poison, float %52, i64 0, !dbg !32
  %91 = insertelement <2 x float> %90, float %71, i64 1, !dbg !32
  %92 = insertelement <2 x float> poison, float %51, i64 0, !dbg !32
  %93 = insertelement <2 x float> %92, float %70, i64 1, !dbg !32
  %94 = select <2 x i1> %89, <2 x float> %91, <2 x float> %93, !dbg !32
  %95 = fadd <2 x float> %94, splat (float 1.000000e+00), !dbg !38
  %96 = fcmp ole <2 x float> %95, zeroinitializer, !dbg !39
  %97 = select <2 x i1> %96, <2 x float> zeroinitializer, <2 x float> %95, !dbg !39
  %98 = fcmp olt <2 x float> %97, splat (float 3.000000e+00), !dbg !43
  %99 = fcmp uno <2 x float> %97, zeroinitializer, !dbg !45
  %100 = or <2 x i1> %98, %99, !dbg !46
  %101 = select <2 x i1> %100, <2 x float> %97, <2 x float> splat (float 3.000000e+00), !dbg !47
  %102 = and i32 %.decomposed, -16, !dbg !48
  %103 = icmp eq i32 %102, 16, !dbg !48
  %.lhs.trunc51 = add nsw i8 %.lhs.trunc, -16, !dbg !49
  %104 = srem i8 %.lhs.trunc51, 16, !dbg !49
  %.lhs.trunc53 = add nsw i8 %.lhs.trunc49, -16, !dbg !49
  %105 = srem i8 %.lhs.trunc53, 16, !dbg !49
  %106 = sext i8 %104 to i64, !dbg !50
  %107 = sext i8 %105 to i64, !dbg !50
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !51
  %109 = getelementptr i8, ptr addrspace(1) %108, i64 64, !dbg !51
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !51
  %111 = getelementptr i8, ptr addrspace(1) %110, i64 64, !dbg !51
  %112 = and i1 %14, %103, !dbg !52
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %112, i32 0, i1 %112) #4, !dbg !53
  %114 = bitcast i32 %113 to float, !dbg !53
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 0, i1 %112) #4, !dbg !53
  %116 = bitcast i32 %115 to float, !dbg !53
  %117 = getelementptr float, ptr addrspace(1) %38, i64 %106, !dbg !54
  %118 = getelementptr float, ptr addrspace(1) %38, i64 %107, !dbg !54
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %112, i32 0, i1 %112) #4, !dbg !55
  %120 = bitcast i32 %119 to float, !dbg !55
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %112, i32 0, i1 %112) #4, !dbg !55
  %122 = bitcast i32 %121 to float, !dbg !55
  %123 = fadd float %114, %120, !dbg !56
  %124 = fadd float %116, %122, !dbg !56
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not.i25 = icmp eq i32 %125, 0, !dbg !57
  %126 = tail call float @llvm.nvvm.floor.ftz.f(float %123), !dbg !57
  %127 = tail call float @llvm.nvvm.floor.f(float %123), !dbg !57
  %.0.i26 = select i1 %.not.i25, float %127, float %126, !dbg !57
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not.i27 = icmp eq i32 %128, 0, !dbg !57
  %129 = tail call float @llvm.nvvm.floor.ftz.f(float %124), !dbg !57
  %130 = tail call float @llvm.nvvm.floor.f(float %124), !dbg !57
  %.0.i28 = select i1 %.not.i27, float %130, float %129, !dbg !57
  %131 = fadd float %.0.i26, 1.000000e+00, !dbg !58
  %132 = fadd float %.0.i28, 1.000000e+00, !dbg !58
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %112, i32 0, i1 %112) #4, !dbg !59
  %134 = bitcast i32 %133 to float, !dbg !59
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %112, i32 0, i1 %112) #4, !dbg !59
  %136 = bitcast i32 %135 to float, !dbg !59
  %137 = getelementptr float, ptr addrspace(1) %57, i64 %106, !dbg !60
  %138 = getelementptr float, ptr addrspace(1) %57, i64 %107, !dbg !60
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %112, i32 0, i1 %112) #4, !dbg !61
  %140 = bitcast i32 %139 to float, !dbg !61
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %112, i32 0, i1 %112) #4, !dbg !61
  %142 = bitcast i32 %141 to float, !dbg !61
  %143 = fadd float %134, %140, !dbg !62
  %144 = fadd float %136, %142, !dbg !62
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %.not.i29 = icmp eq i32 %145, 0, !dbg !63
  %146 = tail call float @llvm.nvvm.floor.ftz.f(float %143), !dbg !63
  %147 = tail call float @llvm.nvvm.floor.f(float %143), !dbg !63
  %.0.i30 = select i1 %.not.i29, float %147, float %146, !dbg !63
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %.not.i31 = icmp eq i32 %148, 0, !dbg !63
  %149 = tail call float @llvm.nvvm.floor.ftz.f(float %144), !dbg !63
  %150 = tail call float @llvm.nvvm.floor.f(float %144), !dbg !63
  %.0.i32 = select i1 %.not.i31, float %150, float %149, !dbg !63
  %151 = insertelement <2 x float> poison, float %131, i64 0, !dbg !64
  %152 = insertelement <2 x float> %151, float %.0.i30, i64 1, !dbg !64
  %153 = fcmp ole <2 x float> %152, zeroinitializer, !dbg !64
  %154 = select <2 x i1> %153, <2 x float> zeroinitializer, <2 x float> %152, !dbg !64
  %155 = fcmp olt <2 x float> %154, splat (float 3.000000e+00), !dbg !66
  %156 = fcmp uno <2 x float> %154, zeroinitializer, !dbg !68
  %157 = or <2 x i1> %155, %156, !dbg !69
  %158 = select <2 x i1> %157, <2 x float> %154, <2 x float> splat (float 3.000000e+00), !dbg !70
  %159 = insertelement <2 x float> poison, float %132, i64 0, !dbg !64
  %160 = insertelement <2 x float> %159, float %.0.i32, i64 1, !dbg !64
  %161 = fcmp ole <2 x float> %160, zeroinitializer, !dbg !64
  %162 = select <2 x i1> %161, <2 x float> zeroinitializer, <2 x float> %160, !dbg !64
  %163 = fcmp olt <2 x float> %162, splat (float 3.000000e+00), !dbg !66
  %164 = fcmp uno <2 x float> %162, zeroinitializer, !dbg !68
  %165 = or <2 x i1> %163, %164, !dbg !69
  %166 = select <2 x i1> %165, <2 x float> %162, <2 x float> splat (float 3.000000e+00), !dbg !70
  %167 = icmp eq i32 %102, 32, !dbg !71
  %.lhs.trunc55 = add nsw i8 %.lhs.trunc, -32, !dbg !72
  %168 = srem i8 %.lhs.trunc55, 16, !dbg !72
  %.lhs.trunc57 = add nsw i8 %.lhs.trunc49, -32, !dbg !72
  %169 = srem i8 %.lhs.trunc57, 16, !dbg !72
  %170 = sext i8 %168 to i64, !dbg !73
  %171 = sext i8 %169 to i64, !dbg !73
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !74
  %173 = getelementptr i8, ptr addrspace(1) %172, i64 64, !dbg !74
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !74
  %175 = getelementptr i8, ptr addrspace(1) %174, i64 64, !dbg !74
  %176 = and i1 %14, %167, !dbg !75
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %176, i32 0, i1 %176) #4, !dbg !76
  %178 = bitcast i32 %177 to float, !dbg !76
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %176, i32 0, i1 %176) #4, !dbg !76
  %180 = bitcast i32 %179 to float, !dbg !76
  %181 = getelementptr float, ptr addrspace(1) %38, i64 %170, !dbg !77
  %182 = getelementptr float, ptr addrspace(1) %38, i64 %171, !dbg !77
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %176, i32 0, i1 %176) #4, !dbg !78
  %184 = bitcast i32 %183 to float, !dbg !78
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %176, i32 0, i1 %176) #4, !dbg !78
  %186 = bitcast i32 %185 to float, !dbg !78
  %187 = fadd float %178, %184, !dbg !79
  %188 = fadd float %180, %186, !dbg !79
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !80
  %.not.i33 = icmp eq i32 %189, 0, !dbg !80
  %190 = tail call float @llvm.nvvm.floor.ftz.f(float %187), !dbg !80
  %191 = tail call float @llvm.nvvm.floor.f(float %187), !dbg !80
  %.0.i34 = select i1 %.not.i33, float %191, float %190, !dbg !80
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !80
  %.not.i35 = icmp eq i32 %192, 0, !dbg !80
  %193 = tail call float @llvm.nvvm.floor.ftz.f(float %188), !dbg !80
  %194 = tail call float @llvm.nvvm.floor.f(float %188), !dbg !80
  %.0.i36 = select i1 %.not.i35, float %194, float %193, !dbg !80
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %176, i32 0, i1 %176) #4, !dbg !81
  %196 = bitcast i32 %195 to float, !dbg !81
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %176, i32 0, i1 %176) #4, !dbg !81
  %198 = bitcast i32 %197 to float, !dbg !81
  %199 = getelementptr float, ptr addrspace(1) %57, i64 %170, !dbg !82
  %200 = getelementptr float, ptr addrspace(1) %57, i64 %171, !dbg !82
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %176, i32 0, i1 %176) #4, !dbg !83
  %202 = bitcast i32 %201 to float, !dbg !83
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %176, i32 0, i1 %176) #4, !dbg !83
  %204 = bitcast i32 %203 to float, !dbg !83
  %205 = fadd float %196, %202, !dbg !84
  %206 = fadd float %198, %204, !dbg !84
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %.not.i37 = icmp eq i32 %207, 0, !dbg !85
  %208 = tail call float @llvm.nvvm.floor.ftz.f(float %205), !dbg !85
  %209 = tail call float @llvm.nvvm.floor.f(float %205), !dbg !85
  %.0.i38 = select i1 %.not.i37, float %209, float %208, !dbg !85
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %.not.i39 = icmp eq i32 %210, 0, !dbg !85
  %211 = tail call float @llvm.nvvm.floor.ftz.f(float %206), !dbg !85
  %212 = tail call float @llvm.nvvm.floor.f(float %206), !dbg !85
  %.0.i40 = select i1 %.not.i39, float %212, float %211, !dbg !85
  %213 = fadd float %.0.i38, 1.000000e+00, !dbg !86
  %214 = fadd float %.0.i40, 1.000000e+00, !dbg !86
  %215 = insertelement <2 x float> poison, float %.0.i34, i64 0, !dbg !87
  %216 = insertelement <2 x float> %215, float %213, i64 1, !dbg !87
  %217 = fcmp ole <2 x float> %216, zeroinitializer, !dbg !87
  %218 = select <2 x i1> %217, <2 x float> zeroinitializer, <2 x float> %216, !dbg !87
  %219 = fcmp olt <2 x float> %218, splat (float 3.000000e+00), !dbg !89
  %220 = fcmp uno <2 x float> %218, zeroinitializer, !dbg !91
  %221 = or <2 x i1> %219, %220, !dbg !92
  %222 = select <2 x i1> %221, <2 x float> %218, <2 x float> splat (float 3.000000e+00), !dbg !93
  %223 = insertelement <2 x float> poison, float %.0.i36, i64 0, !dbg !87
  %224 = insertelement <2 x float> %223, float %214, i64 1, !dbg !87
  %225 = fcmp ole <2 x float> %224, zeroinitializer, !dbg !87
  %226 = select <2 x i1> %225, <2 x float> zeroinitializer, <2 x float> %224, !dbg !87
  %227 = fcmp olt <2 x float> %226, splat (float 3.000000e+00), !dbg !89
  %228 = fcmp uno <2 x float> %226, zeroinitializer, !dbg !91
  %229 = or <2 x i1> %227, %228, !dbg !92
  %230 = select <2 x i1> %229, <2 x float> %226, <2 x float> splat (float 3.000000e+00), !dbg !93
  %231 = icmp sgt i32 %.decomposed, 47, !dbg !94
  %.lhs.trunc59 = add nsw i8 %.lhs.trunc, -48, !dbg !95
  %232 = srem i8 %.lhs.trunc59, 16, !dbg !95
  %.lhs.trunc61 = add nsw i8 %.lhs.trunc49, -48, !dbg !95
  %233 = srem i8 %.lhs.trunc61, 16, !dbg !95
  %234 = sext i8 %232 to i64, !dbg !96
  %235 = sext i8 %233 to i64, !dbg !96
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !97
  %237 = getelementptr i8, ptr addrspace(1) %236, i64 64, !dbg !97
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !97
  %239 = getelementptr i8, ptr addrspace(1) %238, i64 64, !dbg !97
  %240 = and i1 %14, %231, !dbg !98
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %240, i32 0, i1 %240) #4, !dbg !99
  %242 = bitcast i32 %241 to float, !dbg !99
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %240, i32 0, i1 %240) #4, !dbg !99
  %244 = bitcast i32 %243 to float, !dbg !99
  %245 = getelementptr float, ptr addrspace(1) %38, i64 %234, !dbg !100
  %246 = getelementptr float, ptr addrspace(1) %38, i64 %235, !dbg !100
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %240, i32 0, i1 %240) #4, !dbg !101
  %248 = bitcast i32 %247 to float, !dbg !101
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %240, i32 0, i1 %240) #4, !dbg !101
  %250 = bitcast i32 %249 to float, !dbg !101
  %251 = fadd float %242, %248, !dbg !102
  %252 = fadd float %244, %250, !dbg !102
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !103
  %254 = tail call float @llvm.nvvm.floor.ftz.f(float %251), !dbg !103
  %255 = tail call float @llvm.nvvm.floor.f(float %251), !dbg !103
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !103
  %257 = tail call float @llvm.nvvm.floor.ftz.f(float %252), !dbg !103
  %258 = tail call float @llvm.nvvm.floor.f(float %252), !dbg !103
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %240, i32 0, i1 %240) #4, !dbg !104
  %260 = bitcast i32 %259 to float, !dbg !104
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %240, i32 0, i1 %240) #4, !dbg !104
  %262 = bitcast i32 %261 to float, !dbg !104
  %263 = getelementptr float, ptr addrspace(1) %57, i64 %234, !dbg !105
  %264 = getelementptr float, ptr addrspace(1) %57, i64 %235, !dbg !105
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 %240, i32 0, i1 %240) #4, !dbg !106
  %266 = bitcast i32 %265 to float, !dbg !106
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %240, i32 0, i1 %240) #4, !dbg !106
  %268 = bitcast i32 %267 to float, !dbg !106
  %269 = fadd float %260, %266, !dbg !107
  %270 = fadd float %262, %268, !dbg !107
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %272 = tail call float @llvm.nvvm.floor.ftz.f(float %269), !dbg !108
  %273 = tail call float @llvm.nvvm.floor.f(float %269), !dbg !108
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %275 = tail call float @llvm.nvvm.floor.ftz.f(float %270), !dbg !108
  %276 = tail call float @llvm.nvvm.floor.f(float %270), !dbg !108
  %277 = insertelement <2 x i32> poison, i32 %253, i64 0, !dbg !103
  %278 = insertelement <2 x i32> %277, i32 %271, i64 1, !dbg !103
  %279 = icmp eq <2 x i32> %278, zeroinitializer, !dbg !103
  %280 = insertelement <2 x float> poison, float %255, i64 0, !dbg !103
  %281 = insertelement <2 x float> %280, float %273, i64 1, !dbg !103
  %282 = insertelement <2 x float> poison, float %254, i64 0, !dbg !103
  %283 = insertelement <2 x float> %282, float %272, i64 1, !dbg !103
  %284 = select <2 x i1> %279, <2 x float> %281, <2 x float> %283, !dbg !103
  %285 = fcmp ole <2 x float> %284, zeroinitializer, !dbg !109
  %286 = select <2 x i1> %285, <2 x float> zeroinitializer, <2 x float> %284, !dbg !109
  %287 = fcmp olt <2 x float> %286, splat (float 3.000000e+00), !dbg !111
  %288 = fcmp uno <2 x float> %286, zeroinitializer, !dbg !113
  %289 = or <2 x i1> %287, %288, !dbg !114
  %290 = select <2 x i1> %289, <2 x float> %286, <2 x float> splat (float 3.000000e+00), !dbg !115
  %291 = insertelement <2 x i32> poison, i32 %256, i64 0, !dbg !103
  %292 = insertelement <2 x i32> %291, i32 %274, i64 1, !dbg !103
  %293 = icmp eq <2 x i32> %292, zeroinitializer, !dbg !103
  %294 = insertelement <2 x float> poison, float %258, i64 0, !dbg !103
  %295 = insertelement <2 x float> %294, float %276, i64 1, !dbg !103
  %296 = insertelement <2 x float> poison, float %257, i64 0, !dbg !103
  %297 = insertelement <2 x float> %296, float %275, i64 1, !dbg !103
  %298 = select <2 x i1> %293, <2 x float> %295, <2 x float> %297, !dbg !103
  %299 = fcmp ole <2 x float> %298, zeroinitializer, !dbg !109
  %300 = select <2 x i1> %299, <2 x float> zeroinitializer, <2 x float> %298, !dbg !109
  %301 = fcmp olt <2 x float> %300, splat (float 3.000000e+00), !dbg !111
  %302 = fcmp uno <2 x float> %300, zeroinitializer, !dbg !113
  %303 = or <2 x i1> %301, %302, !dbg !114
  %304 = select <2 x i1> %303, <2 x float> %300, <2 x float> splat (float 3.000000e+00), !dbg !115
  %305 = shufflevector <2 x float> %101, <2 x float> %86, <2 x i32> <i32 1, i32 3>, !dbg !116
  %306 = fmul <2 x float> %305, splat (float 4.000000e+00), !dbg !116
  %307 = shufflevector <2 x float> %101, <2 x float> %86, <2 x i32> <i32 0, i32 2>, !dbg !117
  %308 = fadd <2 x float> %307, %306, !dbg !117
  %309 = shufflevector <2 x float> %166, <2 x float> %158, <2 x i32> <i32 1, i32 3>, !dbg !118
  %310 = fmul <2 x float> %309, splat (float 4.000000e+00), !dbg !118
  %311 = shufflevector <2 x float> %166, <2 x float> %158, <2 x i32> <i32 0, i32 2>, !dbg !119
  %312 = fadd <2 x float> %311, %310, !dbg !119
  %313 = shufflevector <2 x float> %230, <2 x float> %222, <2 x i32> <i32 1, i32 3>, !dbg !120
  %314 = fmul <2 x float> %313, splat (float 4.000000e+00), !dbg !120
  %315 = shufflevector <2 x float> %230, <2 x float> %222, <2 x i32> <i32 0, i32 2>, !dbg !121
  %316 = fadd <2 x float> %315, %314, !dbg !121
  %317 = shufflevector <2 x float> %304, <2 x float> %290, <2 x i32> <i32 1, i32 3>, !dbg !122
  %318 = fmul <2 x float> %317, splat (float 4.000000e+00), !dbg !122
  %319 = shufflevector <2 x float> %304, <2 x float> %290, <2 x i32> <i32 0, i32 2>, !dbg !123
  %320 = fadd <2 x float> %319, %318, !dbg !123
  %321 = insertelement <2 x i1> poison, i1 %231, i64 0, !dbg !124
  %322 = shufflevector <2 x i1> %321, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !124
  %323 = select <2 x i1> %322, <2 x float> %320, <2 x float> zeroinitializer, !dbg !124
  %324 = insertelement <2 x i1> poison, i1 %167, i64 0, !dbg !125
  %325 = shufflevector <2 x i1> %324, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !125
  %326 = select <2 x i1> %325, <2 x float> %316, <2 x float> %323, !dbg !125
  %327 = insertelement <2 x i1> poison, i1 %103, i64 0, !dbg !125
  %328 = shufflevector <2 x i1> %327, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !125
  %329 = select <2 x i1> %328, <2 x float> %312, <2 x float> %326, !dbg !125
  %330 = insertelement <2 x i1> poison, i1 %21, i64 0, !dbg !125
  %331 = shufflevector <2 x i1> %330, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !125
  %332 = select <2 x i1> %331, <2 x float> %308, <2 x float> %329, !dbg !125
  %333 = fptosi <2 x float> %332 to <2 x i64>, !dbg !126
  %334 = extractelement <2 x i64> %333, i64 0, !dbg !127
  %335 = extractelement <2 x i64> %333, i64 1, !dbg !127
  %336 = or i64 %334, %335, !dbg !127
  %.not1618 = icmp ugt i64 %336, 15, !dbg !127
  %337 = and i1 %14, %.not1618, !dbg !127
  br i1 %337, label %338, label %339, !dbg !127

338:                                              ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 180, ptr nonnull @assertFunc_0, i64 1), !dbg !127
  unreachable, !dbg !127

339:                                              ; preds = %6
  %340 = fcmp une <2 x float> %95, %101, !dbg !128
  %shift = shufflevector <2 x i1> %340, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %341 = or <2 x i1> %340, %shift, !dbg !129
  %342 = extractelement <2 x i1> %341, i64 0, !dbg !129
  %343 = fcmp une <2 x float> %160, %166, !dbg !130
  %shift63 = shufflevector <2 x i1> %343, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !131
  %344 = or <2 x i1> %343, %shift63, !dbg !131
  %345 = extractelement <2 x i1> %344, i64 0, !dbg !131
  %346 = fcmp une <2 x float> %224, %230, !dbg !132
  %shift64 = shufflevector <2 x i1> %346, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !133
  %347 = or <2 x i1> %346, %shift64, !dbg !133
  %348 = extractelement <2 x i1> %347, i64 0, !dbg !133
  %349 = fcmp une <2 x float> %298, %304, !dbg !134
  %shift65 = shufflevector <2 x i1> %349, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !135
  %350 = or <2 x i1> %349, %shift65, !dbg !135
  %351 = extractelement <2 x i1> %350, i64 0, !dbg !135
  %352 = select i1 %231, i1 %351, i1 false, !dbg !136
  %353 = select i1 %167, i1 %348, i1 %352, !dbg !125
  %354 = select i1 %103, i1 %345, i1 %353, !dbg !125
  %355 = select i1 %21, i1 %342, i1 %354, !dbg !125
  %356 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %357 = fcmp une <2 x float> %80, %86, !dbg !128
  %shift66 = shufflevector <2 x i1> %357, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %358 = or <2 x i1> %357, %shift66, !dbg !129
  %359 = extractelement <2 x i1> %358, i64 0, !dbg !129
  %360 = fcmp une <2 x float> %152, %158, !dbg !130
  %shift67 = shufflevector <2 x i1> %360, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !131
  %361 = or <2 x i1> %360, %shift67, !dbg !131
  %362 = extractelement <2 x i1> %361, i64 0, !dbg !131
  %363 = fcmp une <2 x float> %216, %222, !dbg !132
  %shift68 = shufflevector <2 x i1> %363, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !133
  %364 = or <2 x i1> %363, %shift68, !dbg !133
  %365 = extractelement <2 x i1> %364, i64 0, !dbg !133
  %366 = fcmp une <2 x float> %284, %290, !dbg !134
  %shift69 = shufflevector <2 x i1> %366, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !135
  %367 = or <2 x i1> %366, %shift69, !dbg !135
  %368 = extractelement <2 x i1> %367, i64 0, !dbg !135
  %369 = select i1 %231, i1 %368, i1 false, !dbg !136
  %370 = select i1 %167, i1 %365, i1 %369, !dbg !125
  %371 = select i1 %103, i1 %362, i1 %370, !dbg !125
  %372 = select i1 %21, i1 %359, i1 %371, !dbg !125
  %373 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %374 = and i32 %9, 127, !dbg !14
  %375 = or disjoint i32 %374, 128, !dbg !14
  %376 = or disjoint i32 %8, %375, !dbg !15
  %377 = icmp slt i32 %376, 256, !dbg !16
  %378 = or disjoint i32 %8, %374, !dbg !15
  %379 = icmp slt i32 %378, 256, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %380 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !137
  %381 = select i1 %372, i32 0, i32 %373, !dbg !138
  %382 = select i1 %355, i32 0, i32 %356, !dbg !138
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %381, i32 %382, ptr addrspace(1) %380, i1 %14) #4, !dbg !139
  %383 = shl nsw i32 %15, 4, !dbg !140
  %384 = sext i32 %383 to i64, !dbg !141
  %385 = getelementptr float, ptr addrspace(1) %4, i64 %335, !dbg !142
  %386 = getelementptr float, ptr addrspace(1) %385, i64 %384, !dbg !142
  %387 = getelementptr float, ptr addrspace(1) %4, i64 %334, !dbg !142
  %388 = getelementptr float, ptr addrspace(1) %387, i64 %384, !dbg !142
  %389 = ptrtoint ptr addrspace(1) %386 to i64, !dbg !143
  %390 = ptrtoint ptr addrspace(1) %388 to i64, !dbg !143
  %391 = zext nneg i32 %11 to i64, !dbg !143
  %392 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %391, !dbg !143
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %392, i64 %389, i64 %390, i1 true) #4, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %393 = zext nneg i32 %374 to i64, !dbg !143
  %394 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %393, !dbg !143
  %395 = load i64, ptr addrspace(3) %394, align 8, !dbg !143
  %396 = zext nneg i32 %375 to i64, !dbg !143
  %397 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %396, !dbg !143
  %398 = load i64, ptr addrspace(3) %397, align 8, !dbg !143
  %399 = inttoptr i64 %395 to ptr addrspace(1), !dbg !143
  %400 = inttoptr i64 %398 to ptr addrspace(1), !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %391, !dbg !143
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %401, i32 %381, i32 %382, i1 true) #4, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %393, !dbg !143
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !143
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %396, !dbg !143
  %405 = load float, ptr addrspace(3) %404, align 4, !dbg !143
  %406 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.relaxed.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %399, float %403, i1 %379) #4, !dbg !143
  %407 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.relaxed.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %400, float %405, i1 %377) #4, !dbg !143
  ret void, !dbg !144
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccj2vbkeqmpk4ypm35htgbvta6atf42n63adchdhjpqrwhu7jsif.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2", linkageName: "triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 27, column: 32, scope: !11)
!20 = !DILocation(line: 27, column: 37, scope: !11)
!21 = !DILocation(line: 32, column: 18, scope: !11)
!22 = !DILocation(line: 37, column: 49, scope: !11)
!23 = !DILocation(line: 37, column: 42, scope: !11)
!24 = !DILocation(line: 37, column: 30, scope: !11)
!25 = !DILocation(line: 37, column: 63, scope: !11)
!26 = !DILocation(line: 37, column: 56, scope: !11)
!27 = !DILocation(line: 38, column: 44, scope: !11)
!28 = !DILocation(line: 38, column: 41, scope: !11)
!29 = !DILocation(line: 38, column: 31, scope: !11)
!30 = !DILocation(line: 38, column: 65, scope: !11)
!31 = !DILocation(line: 39, column: 19, scope: !11)
!32 = !DILocation(line: 40, column: 28, scope: !11)
!33 = !DILocation(line: 49, column: 58, scope: !11)
!34 = !DILocation(line: 50, column: 31, scope: !11)
!35 = !DILocation(line: 50, column: 66, scope: !11)
!36 = !DILocation(line: 51, column: 20, scope: !11)
!37 = !DILocation(line: 52, column: 28, scope: !11)
!38 = !DILocation(line: 42, column: 20, scope: !11)
!39 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !11, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 42, scope: !11)
!43 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 46, column: 42, scope: !11)
!45 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !44)
!46 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !44)
!47 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !44)
!48 = !DILocation(line: 64, column: 20, scope: !11)
!49 = !DILocation(line: 69, column: 59, scope: !11)
!50 = !DILocation(line: 69, column: 44, scope: !11)
!51 = !DILocation(line: 69, column: 31, scope: !11)
!52 = !DILocation(line: 69, column: 74, scope: !11)
!53 = !DILocation(line: 69, column: 66, scope: !11)
!54 = !DILocation(line: 70, column: 31, scope: !11)
!55 = !DILocation(line: 70, column: 74, scope: !11)
!56 = !DILocation(line: 71, column: 20, scope: !11)
!57 = !DILocation(line: 72, column: 28, scope: !11)
!58 = !DILocation(line: 74, column: 20, scope: !11)
!59 = !DILocation(line: 81, column: 66, scope: !11)
!60 = !DILocation(line: 82, column: 31, scope: !11)
!61 = !DILocation(line: 82, column: 74, scope: !11)
!62 = !DILocation(line: 83, column: 20, scope: !11)
!63 = !DILocation(line: 84, column: 28, scope: !11)
!64 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !65)
!65 = !DILocation(line: 76, column: 42, scope: !11)
!66 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !67)
!67 = !DILocation(line: 78, column: 42, scope: !11)
!68 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !67)
!69 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !67)
!70 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !67)
!71 = !DILocation(line: 95, column: 20, scope: !11)
!72 = !DILocation(line: 100, column: 59, scope: !11)
!73 = !DILocation(line: 100, column: 44, scope: !11)
!74 = !DILocation(line: 100, column: 31, scope: !11)
!75 = !DILocation(line: 100, column: 74, scope: !11)
!76 = !DILocation(line: 100, column: 66, scope: !11)
!77 = !DILocation(line: 101, column: 31, scope: !11)
!78 = !DILocation(line: 101, column: 74, scope: !11)
!79 = !DILocation(line: 102, column: 20, scope: !11)
!80 = !DILocation(line: 103, column: 28, scope: !11)
!81 = !DILocation(line: 110, column: 66, scope: !11)
!82 = !DILocation(line: 111, column: 31, scope: !11)
!83 = !DILocation(line: 111, column: 74, scope: !11)
!84 = !DILocation(line: 112, column: 20, scope: !11)
!85 = !DILocation(line: 113, column: 28, scope: !11)
!86 = !DILocation(line: 115, column: 20, scope: !11)
!87 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !88)
!88 = !DILocation(line: 105, column: 42, scope: !11)
!89 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !90)
!90 = !DILocation(line: 107, column: 42, scope: !11)
!91 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !90)
!92 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !90)
!93 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !90)
!94 = !DILocation(line: 123, column: 20, scope: !11)
!95 = !DILocation(line: 130, column: 61, scope: !11)
!96 = !DILocation(line: 130, column: 46, scope: !11)
!97 = !DILocation(line: 130, column: 32, scope: !11)
!98 = !DILocation(line: 130, column: 76, scope: !11)
!99 = !DILocation(line: 130, column: 68, scope: !11)
!100 = !DILocation(line: 131, column: 32, scope: !11)
!101 = !DILocation(line: 131, column: 76, scope: !11)
!102 = !DILocation(line: 132, column: 22, scope: !11)
!103 = !DILocation(line: 133, column: 29, scope: !11)
!104 = !DILocation(line: 140, column: 68, scope: !11)
!105 = !DILocation(line: 141, column: 32, scope: !11)
!106 = !DILocation(line: 141, column: 76, scope: !11)
!107 = !DILocation(line: 142, column: 22, scope: !11)
!108 = !DILocation(line: 143, column: 29, scope: !11)
!109 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !110)
!110 = !DILocation(line: 135, column: 44, scope: !11)
!111 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !112)
!112 = !DILocation(line: 137, column: 44, scope: !11)
!113 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !112)
!114 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !112)
!115 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !112)
!116 = !DILocation(line: 57, column: 20, scope: !11)
!117 = !DILocation(line: 58, column: 20, scope: !11)
!118 = !DILocation(line: 88, column: 20, scope: !11)
!119 = !DILocation(line: 89, column: 20, scope: !11)
!120 = !DILocation(line: 119, column: 20, scope: !11)
!121 = !DILocation(line: 120, column: 20, scope: !11)
!122 = !DILocation(line: 147, column: 22, scope: !11)
!123 = !DILocation(line: 148, column: 22, scope: !11)
!124 = !DILocation(line: 150, column: 37, scope: !11)
!125 = !DILocation(line: 0, scope: !11)
!126 = !DILocation(line: 179, column: 23, scope: !11)
!127 = !DILocation(line: 180, column: 65, scope: !11)
!128 = !DILocation(line: 154, column: 22, scope: !11)
!129 = !DILocation(line: 156, column: 22, scope: !11)
!130 = !DILocation(line: 159, column: 22, scope: !11)
!131 = !DILocation(line: 161, column: 22, scope: !11)
!132 = !DILocation(line: 164, column: 22, scope: !11)
!133 = !DILocation(line: 166, column: 22, scope: !11)
!134 = !DILocation(line: 169, column: 23, scope: !11)
!135 = !DILocation(line: 171, column: 22, scope: !11)
!136 = !DILocation(line: 173, column: 37, scope: !11)
!137 = !DILocation(line: 181, column: 25, scope: !11)
!138 = !DILocation(line: 178, column: 38, scope: !11)
!139 = !DILocation(line: 181, column: 38, scope: !11)
!140 = !DILocation(line: 182, column: 42, scope: !11)
!141 = !DILocation(line: 182, column: 39, scope: !11)
!142 = !DILocation(line: 182, column: 30, scope: !11)
!143 = !DILocation(line: 182, column: 55, scope: !11)
!144 = !DILocation(line: 182, column: 4, scope: !11)
