; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 8, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 254, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = icmp slt i32 %28, 2048, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %30 = sdiv i32 %.frozen, 8, !dbg !15
  %31 = srem i32 %30, 8, !dbg !16
  %32 = mul i32 %30, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = sdiv i32 %28, 64, !dbg !18
  %34 = srem i32 %33, 8, !dbg !19
  %35 = sext i32 %31 to i64, !dbg !20
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %29) #3, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %29) #3, !dbg !21
  %39 = sext i32 %.decomposed to i64, !dbg !22
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !22
  %41 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 %29) #3, !dbg !23
  %42 = extractvalue { i64, i64 } %41, 0, !dbg !23
  %43 = extractvalue { i64, i64 } %41, 1, !dbg !23
  %44 = getelementptr i64, ptr addrspace(1) %4, i64 %39, !dbg !24
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 %29) #3, !dbg !25
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !25
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !26
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %29) #3, !dbg !27
  %50 = sext i32 %28 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !28
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %29) #3, !dbg !29
  %53 = sext i32 %34 to i64, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %29) #3, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %29) #3, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %29) #3, !dbg !33
  %59 = bitcast i32 %58 to float, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %29) #3, !dbg !33
  %61 = bitcast i32 %60 to float, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %29) #3, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %29) #3, !dbg !35
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %53, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %29) #3, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %29) #3, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %11, i64 %50, !dbg !38
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %29) #3, !dbg !39
  %70 = getelementptr i64, ptr addrspace(1) %12, i64 %35, !dbg !40
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %29) #3, !dbg !41
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %29) #3, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %29) #3, !dbg !43
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %29) #3, !dbg !43
  %76 = getelementptr i64, ptr addrspace(1) %14, i64 %35, !dbg !44
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 %29) #3, !dbg !45
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 %29) #3, !dbg !45
  %79 = getelementptr i64, ptr addrspace(1) %15, i64 %39, !dbg !46
  %80 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %79, i1 %29) #3, !dbg !47
  %81 = getelementptr i64, ptr addrspace(1) %17, i64 %39, !dbg !48
  %82 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %81, i1 %29) #3, !dbg !49
  %83 = getelementptr float, ptr addrspace(1) %18, i64 %39, !dbg !50
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %29) #3, !dbg !51
  %85 = getelementptr i64, ptr addrspace(1) %19, i64 %35, !dbg !52
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %29) #3, !dbg !53
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %29) #3, !dbg !53
  %88 = getelementptr float, ptr addrspace(1) %20, i64 %35, !dbg !54
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %29) #3, !dbg !55
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %29) #3, !dbg !55
  %91 = lshr i64 %37, 61, !dbg !56
  %92 = and i64 %91, 4, !dbg !56
  %93 = add i64 %92, %37, !dbg !56
  %94 = lshr i64 %42, 61, !dbg !57
  %95 = and i64 %94, 4, !dbg !57
  %96 = lshr i64 %43, 61, !dbg !57
  %97 = and i64 %96, 4, !dbg !57
  %98 = shl i64 %93, 2, !dbg !58
  %99 = shl nsw i32 %33, 4, !dbg !59
  %100 = sext i32 %99 to i64, !dbg !60
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !61
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %95, !dbg !61
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %98, !dbg !61
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %100, !dbg !61
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !61
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %97, !dbg !61
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %98, !dbg !61
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %100, !dbg !61
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %29) #3, !dbg !62
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %29) #3, !dbg !62
  %111 = lshr i64 %46, 61, !dbg !63
  %112 = and i64 %111, 4, !dbg !63
  %113 = lshr i64 %47, 61, !dbg !63
  %114 = and i64 %113, 4, !dbg !63
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !64
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %112, !dbg !64
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %98, !dbg !64
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %100, !dbg !64
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !64
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %114, !dbg !64
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %98, !dbg !64
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %100, !dbg !64
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %29) #3, !dbg !65
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %29) #3, !dbg !65
  %125 = fadd float %59, 0x3EE4F8B580000000, !dbg !66
  %126 = fadd float %61, 0x3EE4F8B580000000, !dbg !66
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %127, 0, !dbg !67
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %128, 0, !dbg !67
  br i1 %.not.i, label %134, label %129, !dbg !67

129:                                              ; preds = %22
  br i1 %.not1.i, label %132, label %130, !dbg !67

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

134:                                              ; preds = %22
  br i1 %.not1.i, label %137, label %135, !dbg !67

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %130, %132, %135, %137
  %.0.i = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !67
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i1 = icmp eq i32 %139, 0, !dbg !67
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i4 = icmp eq i32 %140, 0, !dbg !67
  br i1 %.not.i1, label %146, label %141, !dbg !67

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %144, label %142, !dbg !67

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

146:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %149, label %147, !dbg !67

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

__nv_sqrtf.exit5:                                 ; preds = %142, %144, %147, %149
  %.0.i3 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !67
  %151 = extractvalue { i32, i32 } %52, 1, !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = bitcast i32 %56 to float, !dbg !31
  %154 = fsub float %152, %153, !dbg !68
  %155 = extractvalue { i32, i32 } %52, 0, !dbg !29
  %156 = bitcast i32 %155 to float, !dbg !29
  %157 = bitcast i32 %55 to float, !dbg !31
  %158 = fsub float %156, %157, !dbg !68
  %159 = extractvalue { i32, i32 } %49, 1, !dbg !27
  %160 = extractvalue { i32, i32 } %49, 0, !dbg !27
  %161 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !43
  %162 = insertelement <2 x i32> %161, i32 %90, i64 1, !dbg !43
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !43
  %164 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !43
  %165 = insertelement <2 x i32> %164, i32 %89, i64 1, !dbg !43
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !43
  %167 = extractvalue { i32, i32 } %84, 1, !dbg !51
  %168 = extractvalue { i32, i32 } %84, 0, !dbg !51
  %169 = extractvalue { i64, i64 } %82, 1, !dbg !49
  %170 = extractvalue { i64, i64 } %82, 0, !dbg !49
  %171 = extractvalue { i64, i64 } %80, 1, !dbg !47
  %172 = extractvalue { i64, i64 } %80, 0, !dbg !47
  %173 = extractvalue { i32, i32 } %69, 1, !dbg !39
  %174 = bitcast i32 %173 to float, !dbg !39
  %175 = extractvalue { i32, i32 } %69, 0, !dbg !39
  %176 = bitcast i32 %175 to float, !dbg !39
  %177 = bitcast i32 %67 to float, !dbg !37
  %178 = bitcast i32 %66 to float, !dbg !37
  %179 = bitcast i32 %64 to float, !dbg !35
  %180 = bitcast i32 %63 to float, !dbg !35
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !69
  %183 = fmul float %158, %181, !dbg !70
  %184 = fmul float %154, %182, !dbg !70
  %185 = fmul float %183, %180, !dbg !71
  %186 = fmul float %184, %179, !dbg !71
  %187 = fadd float %185, %178, !dbg !72
  %188 = fadd float %186, %177, !dbg !72
  %189 = fadd float %187, %176, !dbg !73
  %190 = fadd float %188, %174, !dbg !73
  %191 = lshr i64 %71, 61, !dbg !74
  %192 = and i64 %191, 4, !dbg !74
  %193 = add i64 %192, %71, !dbg !74
  %194 = shl i64 %193, 2, !dbg !75
  %195 = getelementptr float, ptr addrspace(1) %102, i64 %194, !dbg !76
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %100, !dbg !76
  %197 = getelementptr float, ptr addrspace(1) %106, i64 %194, !dbg !76
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %100, !dbg !76
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %29) #3, !dbg !77
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %29) #3, !dbg !77
  %201 = getelementptr float, ptr addrspace(1) %116, i64 %194, !dbg !78
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %100, !dbg !78
  %203 = getelementptr float, ptr addrspace(1) %120, i64 %194, !dbg !78
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %100, !dbg !78
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %29) #3, !dbg !79
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %29) #3, !dbg !79
  %207 = lshr i64 %77, 62, !dbg !80
  %208 = and i64 %207, 2, !dbg !80
  %209 = add i64 %208, %77, !dbg !80
  %210 = lshr i64 %172, 62, !dbg !81
  %211 = and i64 %210, 2, !dbg !81
  %212 = lshr i64 %171, 62, !dbg !81
  %213 = and i64 %212, 2, !dbg !81
  %214 = shl i64 %209, 1, !dbg !82
  %215 = shl nsw i32 %33, 2, !dbg !83
  %216 = sext i32 %215 to i64, !dbg !84
  %217 = getelementptr float, ptr addrspace(1) %16, i64 %172, !dbg !85
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %211, !dbg !85
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %214, !dbg !85
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %216, !dbg !85
  %221 = getelementptr float, ptr addrspace(1) %16, i64 %171, !dbg !85
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %213, !dbg !85
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %214, !dbg !85
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %216, !dbg !85
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 %29) #3, !dbg !86
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %29) #3, !dbg !86
  %227 = lshr i64 %170, 62, !dbg !87
  %228 = and i64 %227, 2, !dbg !87
  %229 = lshr i64 %169, 62, !dbg !87
  %230 = and i64 %229, 2, !dbg !87
  %231 = getelementptr float, ptr addrspace(1) %16, i64 %170, !dbg !88
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %228, !dbg !88
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %214, !dbg !88
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %216, !dbg !88
  %235 = getelementptr float, ptr addrspace(1) %16, i64 %169, !dbg !88
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %230, !dbg !88
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %214, !dbg !88
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %216, !dbg !88
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %29) #3, !dbg !89
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %29) #3, !dbg !89
  %241 = lshr i64 %86, 62, !dbg !90
  %242 = and i64 %241, 2, !dbg !90
  %243 = add i64 %242, %86, !dbg !90
  %244 = shl i64 %243, 1, !dbg !91
  %245 = getelementptr float, ptr addrspace(1) %218, i64 %244, !dbg !92
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %216, !dbg !92
  %247 = getelementptr float, ptr addrspace(1) %222, i64 %244, !dbg !92
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %216, !dbg !92
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %29) #3, !dbg !93
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %29) #3, !dbg !93
  %251 = getelementptr float, ptr addrspace(1) %232, i64 %244, !dbg !94
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %216, !dbg !94
  %253 = getelementptr float, ptr addrspace(1) %236, i64 %244, !dbg !94
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %216, !dbg !94
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %29) #3, !dbg !95
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %29) #3, !dbg !95
  %257 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !27
  %258 = insertelement <2 x i32> %257, i32 %168, i64 1, !dbg !27
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !27
  %260 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !62
  %261 = insertelement <2 x i32> %260, i32 %225, i64 1, !dbg !62
  %262 = bitcast <2 x i32> %261 to <2 x float>, !dbg !62
  %263 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !65
  %264 = insertelement <2 x i32> %263, i32 %239, i64 1, !dbg !65
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !65
  %266 = fsub <2 x float> %265, %262, !dbg !96
  %267 = fmul <2 x float> %266, %259, !dbg !97
  %268 = fadd <2 x float> %267, %262, !dbg !98
  %269 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !77
  %270 = insertelement <2 x i32> %269, i32 %249, i64 1, !dbg !77
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !77
  %272 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !79
  %273 = insertelement <2 x i32> %272, i32 %255, i64 1, !dbg !79
  %274 = bitcast <2 x i32> %273 to <2 x float>, !dbg !79
  %275 = fsub <2 x float> %274, %271, !dbg !99
  %276 = fmul <2 x float> %275, %259, !dbg !100
  %277 = fadd <2 x float> %276, %271, !dbg !101
  %278 = fsub <2 x float> %277, %268, !dbg !102
  %279 = fmul <2 x float> %278, %166, !dbg !103
  %280 = fadd <2 x float> %268, %279, !dbg !104
  %281 = extractelement <2 x float> %280, i64 0, !dbg !105
  %282 = fadd float %189, %281, !dbg !105
  %283 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !27
  %284 = insertelement <2 x i32> %283, i32 %167, i64 1, !dbg !27
  %285 = bitcast <2 x i32> %284 to <2 x float>, !dbg !27
  %286 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !62
  %287 = insertelement <2 x i32> %286, i32 %226, i64 1, !dbg !62
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !62
  %289 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !65
  %290 = insertelement <2 x i32> %289, i32 %240, i64 1, !dbg !65
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !65
  %292 = fsub <2 x float> %291, %288, !dbg !96
  %293 = fmul <2 x float> %292, %285, !dbg !97
  %294 = fadd <2 x float> %293, %288, !dbg !98
  %295 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !77
  %296 = insertelement <2 x i32> %295, i32 %250, i64 1, !dbg !77
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !77
  %298 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !79
  %299 = insertelement <2 x i32> %298, i32 %256, i64 1, !dbg !79
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !79
  %301 = fsub <2 x float> %300, %297, !dbg !99
  %302 = fmul <2 x float> %301, %285, !dbg !100
  %303 = fadd <2 x float> %302, %297, !dbg !101
  %304 = fsub <2 x float> %303, %294, !dbg !102
  %305 = fmul <2 x float> %304, %163, !dbg !103
  %306 = fadd <2 x float> %294, %305, !dbg !104
  %307 = extractelement <2 x float> %306, i64 0, !dbg !105
  %308 = fadd float %190, %307, !dbg !105
  %309 = extractelement <2 x float> %280, i64 1, !dbg !106
  %310 = fadd float %282, %309, !dbg !106
  %311 = extractelement <2 x float> %306, i64 1, !dbg !106
  %312 = fadd float %308, %311, !dbg !106
  %313 = fcmp olt float %310, 0.000000e+00, !dbg !107
  %314 = fcmp olt float %312, 0.000000e+00, !dbg !107
  %315 = select i1 %313, float 0.000000e+00, float %310, !dbg !111
  %316 = select i1 %314, float 0.000000e+00, float %312, !dbg !111
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !112
  %318 = bitcast float %315 to i32, !dbg !113
  %319 = bitcast float %316 to i32, !dbg !113
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %318, i32 %319, ptr addrspace(1) %317, i1 %29) #3, !dbg !113
  ret void, !dbg !114
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7hkx53wsyscmzw7utw4adnwl23alled4cumfyrmlvnsfmg7amji.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 46, column: 32, scope: !7)
!55 = !DILocation(line: 46, column: 37, scope: !7)
!56 = !DILocation(line: 50, column: 32, scope: !7)
!57 = !DILocation(line: 53, column: 32, scope: !7)
!58 = !DILocation(line: 54, column: 39, scope: !7)
!59 = !DILocation(line: 54, column: 49, scope: !7)
!60 = !DILocation(line: 54, column: 46, scope: !7)
!61 = !DILocation(line: 54, column: 30, scope: !7)
!62 = !DILocation(line: 54, column: 54, scope: !7)
!63 = !DILocation(line: 57, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 31, scope: !7)
!65 = !DILocation(line: 58, column: 56, scope: !7)
!66 = !DILocation(line: 64, column: 20, scope: !7)
!67 = !DILocation(line: 65, column: 27, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 76, column: 35, scope: !7)
!75 = !DILocation(line: 77, column: 40, scope: !7)
!76 = !DILocation(line: 77, column: 31, scope: !7)
!77 = !DILocation(line: 77, column: 56, scope: !7)
!78 = !DILocation(line: 78, column: 31, scope: !7)
!79 = !DILocation(line: 78, column: 57, scope: !7)
!80 = !DILocation(line: 89, column: 35, scope: !7)
!81 = !DILocation(line: 92, column: 35, scope: !7)
!82 = !DILocation(line: 93, column: 42, scope: !7)
!83 = !DILocation(line: 93, column: 52, scope: !7)
!84 = !DILocation(line: 93, column: 50, scope: !7)
!85 = !DILocation(line: 93, column: 32, scope: !7)
!86 = !DILocation(line: 93, column: 57, scope: !7)
!87 = !DILocation(line: 96, column: 35, scope: !7)
!88 = !DILocation(line: 97, column: 32, scope: !7)
!89 = !DILocation(line: 97, column: 57, scope: !7)
!90 = !DILocation(line: 103, column: 35, scope: !7)
!91 = !DILocation(line: 104, column: 42, scope: !7)
!92 = !DILocation(line: 104, column: 32, scope: !7)
!93 = !DILocation(line: 104, column: 57, scope: !7)
!94 = !DILocation(line: 105, column: 32, scope: !7)
!95 = !DILocation(line: 105, column: 57, scope: !7)
!96 = !DILocation(line: 59, column: 20, scope: !7)
!97 = !DILocation(line: 60, column: 20, scope: !7)
!98 = !DILocation(line: 61, column: 19, scope: !7)
!99 = !DILocation(line: 79, column: 20, scope: !7)
!100 = !DILocation(line: 80, column: 20, scope: !7)
!101 = !DILocation(line: 81, column: 20, scope: !7)
!102 = !DILocation(line: 82, column: 20, scope: !7)
!103 = !DILocation(line: 83, column: 20, scope: !7)
!104 = !DILocation(line: 84, column: 20, scope: !7)
!105 = !DILocation(line: 85, column: 20, scope: !7)
!106 = !DILocation(line: 112, column: 20, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !108, inlinedAt: !110)
!108 = distinct !DILexicalBlockFile(scope: !7, file: !109, discriminator: 0)
!109 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!110 = !DILocation(line: 114, column: 42, scope: !7)
!111 = !DILocation(line: 121, column: 29, scope: !108, inlinedAt: !110)
!112 = !DILocation(line: 115, column: 28, scope: !7)
!113 = !DILocation(line: 115, column: 40, scope: !7)
!114 = !DILocation(line: 115, column: 4, scope: !7)
