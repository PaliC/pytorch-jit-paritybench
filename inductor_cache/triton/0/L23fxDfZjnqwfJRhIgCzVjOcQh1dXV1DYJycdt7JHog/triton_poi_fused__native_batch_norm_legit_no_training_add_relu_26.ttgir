#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 2], order = [1, 0]}>
#loc = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_26(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<256> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<262144> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<131072> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<65536> : tensor<1x256xi32, #blocked2> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x256xi32, #blocked2> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<16x1xi32, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<256> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<1x256xi32, #blocked2> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<1x256xi32, #blocked1> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<1x256xi32, #blocked> loc(#loc5)
    %14 = tt.get_program_id x : i32 loc(#loc6)
    %15 = arith.muli %14, %c16_i32 : i32 loc(#loc7)
    %16 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc8)
    %17 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %18 = tt.expand_dims %16 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<16x1xi32, #blocked2> loc(#loc8)
    %19 = tt.expand_dims %17 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc8)
    %20 = tt.splat %15 : i32 -> tensor<16x1xi32, #blocked2> loc(#loc9)
    %21 = tt.splat %15 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %22 = arith.addi %20, %18 : tensor<16x1xi32, #blocked2> loc(#loc9)
    %23 = arith.addi %21, %19 : tensor<16x1xi32, #blocked1> loc(#loc9)
    %24 = arith.cmpi slt, %22, %cst_8 : tensor<16x1xi32, #blocked2> loc(#loc10)
    %25 = arith.cmpi slt, %23, %cst_9 : tensor<16x1xi32, #blocked1> loc(#loc10)
    %26 = arith.remsi %11, %cst_6 : tensor<1x256xi32, #blocked2> loc(#loc11)
    %27 = arith.remsi %12, %cst_7 : tensor<1x256xi32, #blocked1> loc(#loc11)
    %28 = arith.remsi %13, %cst : tensor<1x256xi32, #blocked> loc(#loc11)
    %29 = arith.divsi %11, %cst_6 : tensor<1x256xi32, #blocked2> loc(#loc12)
    %30 = arith.divsi %12, %cst_7 : tensor<1x256xi32, #blocked1> loc(#loc12)
    %31 = arith.muli %22, %cst_8 : tensor<16x1xi32, #blocked2> loc(#loc13)
    %32 = tt.broadcast %26 : tensor<1x256xi32, #blocked2> -> tensor<16x256xi32, #blocked2> loc(#loc14)
    %33 = tt.broadcast %31 : tensor<16x1xi32, #blocked2> -> tensor<16x256xi32, #blocked2> loc(#loc14)
    %34 = arith.addi %32, %33 : tensor<16x256xi32, #blocked2> loc(#loc14)
    %35 = arith.muli %29, %cst_5 : tensor<1x256xi32, #blocked2> loc(#loc15)
    %36 = tt.broadcast %35 : tensor<1x256xi32, #blocked2> -> tensor<16x256xi32, #blocked2> loc(#loc16)
    %37 = arith.addi %34, %36 : tensor<16x256xi32, #blocked2> loc(#loc16)
    %38 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked2> loc(#loc17)
    %39 = tt.addptr %38, %37 : tensor<16x256x!tt.ptr<f32>, #blocked2>, tensor<16x256xi32, #blocked2> loc(#loc17)
    %40 = tt.broadcast %24 : tensor<16x1xi1, #blocked2> -> tensor<16x256xi1, #blocked2> loc(#loc18)
    %41 = tt.broadcast %25 : tensor<16x1xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc18)
    %42 = tt.load %39, %40 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked2> loc(#loc18)
    %43 = triton_gpu.convert_layout %42 : tensor<16x256xf32, #blocked2> -> tensor<16x256xf32, #blocked> loc(#loc18)
    %44 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %45 = tt.addptr %44, %28 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc19)
    %46 = tt.load %45 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %48 = tt.addptr %47, %28 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc21)
    %49 = tt.load %48 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc22)
    %50 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc23)
    %51 = tt.addptr %50, %28 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc23)
    %52 = tt.load %51 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %53 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc25)
    %54 = tt.addptr %53, %28 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc25)
    %55 = tt.load %54 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc26)
    %56 = arith.addi %23, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc27)
    %57 = arith.muli %27, %cst_7 : tensor<1x256xi32, #blocked1> loc(#loc28)
    %58 = tt.broadcast %56 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc29)
    %59 = tt.broadcast %57 : tensor<1x256xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc29)
    %60 = arith.addi %58, %59 : tensor<16x256xi32, #blocked1> loc(#loc29)
    %61 = arith.muli %30, %cst_3 : tensor<1x256xi32, #blocked1> loc(#loc30)
    %62 = tt.broadcast %61 : tensor<1x256xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc31)
    %63 = arith.addi %60, %62 : tensor<16x256xi32, #blocked1> loc(#loc31)
    %64 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %65 = tt.addptr %64, %63 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc32)
    %66 = tt.load %65, %41 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %67 = tt.broadcast %46 : tensor<1x256xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc34)
    %68 = arith.subf %43, %67 : tensor<16x256xf32, #blocked> loc(#loc34)
    %69 = arith.addf %49, %cst_2 : tensor<1x256xf32, #blocked> loc(#loc35)
    %70 = tt.extern_elementwise %69 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x256xf32, #blocked>) -> tensor<1x256xf32, #blocked> loc(#loc36)
    %71 = arith.divf %cst_1, %70 : tensor<1x256xf32, #blocked> loc(#loc37)
    %72 = tt.broadcast %71 : tensor<1x256xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc38)
    %73 = arith.mulf %68, %72 : tensor<16x256xf32, #blocked> loc(#loc38)
    %74 = tt.broadcast %52 : tensor<1x256xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc39)
    %75 = arith.mulf %73, %74 : tensor<16x256xf32, #blocked> loc(#loc39)
    %76 = tt.broadcast %55 : tensor<1x256xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc40)
    %77 = arith.addf %75, %76 : tensor<16x256xf32, #blocked> loc(#loc40)
    %78 = arith.cmpf ogt, %cst_0, %77 : tensor<16x256xf32, #blocked> loc(#loc52)
    %79 = arith.select %78, %cst_0, %77 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc53)
    %80 = triton_gpu.convert_layout %79 : tensor<16x256xf32, #blocked> -> tensor<16x256xf32, #blocked1> loc(#loc53)
    %81 = arith.addf %66, %80 : tensor<16x256xf32, #blocked1> loc(#loc44)
    %82 = tt.broadcast %23 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc45)
    %83 = arith.addi %82, %59 : tensor<16x256xi32, #blocked1> loc(#loc45)
    %84 = arith.addi %83, %62 : tensor<16x256xi32, #blocked1> loc(#loc46)
    %85 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc47)
    %86 = tt.addptr %85, %84 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc47)
    tt.store %86, %80, %41 : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc48)
    %87 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked2> loc(#loc49)
    %88 = tt.addptr %87, %37 : tensor<16x256x!tt.ptr<f32>, #blocked2>, tensor<16x256xi32, #blocked2> loc(#loc49)
    %89 = triton_gpu.convert_layout %81 : tensor<16x256xf32, #blocked1> -> tensor<16x256xf32, #blocked2> loc(#loc50)
    tt.store %88, %89, %40 : tensor<16x256x!tt.ptr<f32>, #blocked2> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":22:28)
#loc3 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":22:33)
#loc4 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":23:44)
#loc5 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":23:23)
#loc6 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":25:28)
#loc7 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":25:33)
#loc8 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":26:44)
#loc9 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":26:23)
#loc10 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":27:21)
#loc11 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":29:19)
#loc12 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":30:19)
#loc13 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":31:39)
#loc14 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":31:35)
#loc15 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":31:50)
#loc16 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":31:44)
#loc17 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":31:30)
#loc18 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":31:55)
#loc19 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":32:30)
#loc20 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":32:35)
#loc21 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":33:30)
#loc22 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":33:35)
#loc23 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":34:31)
#loc24 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":34:36)
#loc25 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":35:31)
#loc26 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":35:36)
#loc27 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":36:40)
#loc28 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":36:49)
#loc29 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":36:45)
#loc30 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":36:61)
#loc31 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":36:54)
#loc32 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":36:31)
#loc33 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":36:66)
#loc34 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":37:18)
#loc35 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":39:18)
#loc36 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":40:26)
#loc37 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":42:18)
#loc38 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":45:19)
#loc39 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":46:20)
#loc40 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":47:20)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc42 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":49:42)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc44 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":50:20)
#loc45 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":51:30)
#loc46 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":51:39)
#loc47 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":51:25)
#loc48 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":51:58)
#loc49 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":52:25)
#loc50 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":52:57)
#loc51 = loc("inductor_cache/sp/cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py":52:4)
#loc52 = loc(callsite(#loc41 at #loc42))
#loc53 = loc(callsite(#loc43 at #loc42))
