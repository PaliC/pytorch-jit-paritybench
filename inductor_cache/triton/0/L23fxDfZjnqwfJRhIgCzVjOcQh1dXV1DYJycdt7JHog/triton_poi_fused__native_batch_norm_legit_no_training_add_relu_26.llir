; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 252, !dbg !12
  %17 = lshr i32 %13, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = and i32 %13, 255, !dbg !12
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = or disjoint i32 %21, 64, !dbg !13
  %23 = or disjoint i32 %21, 128, !dbg !13
  %24 = or disjoint i32 %21, 192, !dbg !13
  %25 = or disjoint i32 %12, %19, !dbg !13
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %27 = shl i32 %26, 4, !dbg !15
  %.lobit24 = lshr i32 %13, 6, !dbg !16
  %28 = and i32 %.lobit24, 3, !dbg !16
  %29 = or disjoint i32 %27, %28, !dbg !17
  %30 = or disjoint i32 %29, 4, !dbg !17
  %31 = or disjoint i32 %29, 8, !dbg !17
  %32 = or disjoint i32 %29, 12, !dbg !17
  %33 = or disjoint i32 %27, %15, !dbg !17
  %34 = icmp slt i32 %29, 256, !dbg !18
  %35 = icmp slt i32 %30, 256, !dbg !18
  %36 = icmp slt i32 %31, 256, !dbg !18
  %37 = icmp slt i32 %32, 256, !dbg !18
  %38 = icmp slt i32 %33, 256, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %39 = sdiv i32 %.frozen, 256, !dbg !19
  %40 = mul i32 %39, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %.frozen35 = freeze i32 %21, !dbg !19
  %41 = sdiv i32 %.frozen35, 256, !dbg !19
  %42 = mul i32 %41, 256, !dbg !20
  %.decomposed36 = sub i32 %.frozen35, %42, !dbg !20
  %.frozen37 = freeze i32 %22, !dbg !19
  %43 = sdiv i32 %.frozen37, 256, !dbg !19
  %44 = mul i32 %43, 256, !dbg !20
  %.decomposed38 = sub i32 %.frozen37, %44, !dbg !20
  %.frozen39 = freeze i32 %23, !dbg !19
  %45 = sdiv i32 %.frozen39, 256, !dbg !19
  %46 = mul i32 %45, 256, !dbg !20
  %.decomposed40 = sub i32 %.frozen39, %46, !dbg !20
  %.frozen41 = freeze i32 %24, !dbg !19
  %47 = sdiv i32 %.frozen41, 256, !dbg !19
  %48 = mul i32 %47, 256, !dbg !20
  %.decomposed42 = sub i32 %.frozen41, %48, !dbg !20
  %49 = srem i32 %25, 256, !dbg !20
  %50 = shl i32 %29, 8, !dbg !21
  %51 = shl i32 %30, 8, !dbg !21
  %52 = shl i32 %31, 8, !dbg !21
  %53 = shl i32 %32, 8, !dbg !21
  %54 = shl i32 %39, 16, !dbg !22
  %55 = add i32 %54, %.decomposed, !dbg !23
  %56 = add i32 %55, %50, !dbg !24
  %57 = add i32 %55, %51, !dbg !24
  %58 = add i32 %55, %52, !dbg !24
  %59 = add i32 %55, %53, !dbg !24
  %60 = sext i32 %56 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %57 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = sext i32 %58 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !25
  %66 = sext i32 %59 to i64, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %34) #4, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %35) #4, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %36) #4, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %37) #4, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %88 = and i32 %14, 1020, !dbg !26
  %89 = lshr i32 %14, 6, !dbg !26
  %90 = and i32 %89, 12, !dbg !26
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %88, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %92, i32 %69, i32 %70, i32 %71, i32 %72, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !26
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !26
  %95 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 1040, !dbg !26
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %97 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 2080, !dbg !26
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %99 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 3120, !dbg !26
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %92, i32 %74, i32 %75, i32 %76, i32 %77, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %101 = load float, ptr addrspace(3) %93, align 4, !dbg !26
  %102 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %103 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %104 = load float, ptr addrspace(3) %99, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %92, i32 %79, i32 %80, i32 %81, i32 %82, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %105 = load float, ptr addrspace(3) %93, align 4, !dbg !26
  %106 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %107 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %108 = load float, ptr addrspace(3) %99, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %92, i32 %84, i32 %85, i32 %86, i32 %87, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %109 = load float, ptr addrspace(3) %93, align 4, !dbg !26
  %110 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %111 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %112 = load float, ptr addrspace(3) %99, align 4, !dbg !26
  %113 = sext i32 %49 to i64, !dbg !27
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !27
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #4, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #4, !dbg !30
  %118 = bitcast i32 %117 to float, !dbg !30
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !31
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #4, !dbg !32
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %113, !dbg !33
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #4, !dbg !34
  %123 = add i32 %33, 131072, !dbg !35
  %124 = shl nsw i32 %.decomposed36, 8, !dbg !36
  %125 = shl nsw i32 %.decomposed38, 8, !dbg !36
  %126 = shl nsw i32 %.decomposed40, 8, !dbg !36
  %127 = shl nsw i32 %.decomposed42, 8, !dbg !36
  %128 = shl i32 %41, 18, !dbg !37
  %129 = shl i32 %43, 18, !dbg !37
  %130 = shl i32 %45, 18, !dbg !37
  %131 = shl i32 %47, 18, !dbg !37
  %132 = add i32 %128, %124, !dbg !38
  %133 = add i32 %132, %123, !dbg !39
  %134 = add i32 %129, %125, !dbg !38
  %135 = add i32 %134, %123, !dbg !39
  %136 = add i32 %130, %126, !dbg !38
  %137 = add i32 %136, %123, !dbg !39
  %138 = add i32 %131, %127, !dbg !38
  %139 = add i32 %138, %123, !dbg !39
  %140 = sext i32 %133 to i64, !dbg !40
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !40
  %142 = sext i32 %135 to i64, !dbg !40
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !40
  %144 = sext i32 %137 to i64, !dbg !40
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %144, !dbg !40
  %146 = sext i32 %139 to i64, !dbg !40
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %146, !dbg !40
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %38) #4, !dbg !41
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %38) #4, !dbg !41
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %38) #4, !dbg !41
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %38) #4, !dbg !41
  %152 = fadd float %118, 0x3EE4F8B580000000, !dbg !42
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i = icmp eq i32 %153, 0, !dbg !43
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !43
  %.not1.i = icmp eq i32 %154, 0, !dbg !43
  br i1 %.not.i, label %160, label %155, !dbg !43

155:                                              ; preds = %10
  br i1 %.not1.i, label %158, label %156, !dbg !43

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

160:                                              ; preds = %10
  br i1 %.not1.i, label %163, label %161, !dbg !43

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %156, %158, %161, %163
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !43
  %165 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !41
  %166 = bitcast i32 %165 to float, !dbg !41
  %167 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !41
  %168 = bitcast i32 %167 to float, !dbg !41
  %169 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !41
  %170 = bitcast i32 %169 to float, !dbg !41
  %171 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !41
  %172 = bitcast i32 %171 to float, !dbg !41
  %173 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !41
  %174 = bitcast i32 %173 to float, !dbg !41
  %175 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !41
  %176 = bitcast i32 %175 to float, !dbg !41
  %177 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !41
  %178 = bitcast i32 %177 to float, !dbg !41
  %179 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !41
  %180 = bitcast i32 %179 to float, !dbg !41
  %181 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !41
  %182 = bitcast i32 %181 to float, !dbg !41
  %183 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !41
  %184 = bitcast i32 %183 to float, !dbg !41
  %185 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !41
  %186 = bitcast i32 %185 to float, !dbg !41
  %187 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !41
  %188 = bitcast i32 %187 to float, !dbg !41
  %189 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !41
  %190 = bitcast i32 %189 to float, !dbg !41
  %191 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !41
  %192 = bitcast i32 %191 to float, !dbg !41
  %193 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !41
  %194 = bitcast i32 %193 to float, !dbg !41
  %195 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !41
  %196 = bitcast i32 %195 to float, !dbg !41
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !44
  %198 = insertelement <16 x float> poison, float %112, i64 0, !dbg !45
  %199 = insertelement <16 x float> %198, float %111, i64 1, !dbg !45
  %200 = insertelement <16 x float> %199, float %110, i64 2, !dbg !45
  %201 = insertelement <16 x float> %200, float %109, i64 3, !dbg !45
  %202 = insertelement <16 x float> %201, float %108, i64 4, !dbg !45
  %203 = insertelement <16 x float> %202, float %107, i64 5, !dbg !45
  %204 = insertelement <16 x float> %203, float %106, i64 6, !dbg !45
  %205 = insertelement <16 x float> %204, float %105, i64 7, !dbg !45
  %206 = insertelement <16 x float> %205, float %104, i64 8, !dbg !45
  %207 = insertelement <16 x float> %206, float %103, i64 9, !dbg !45
  %208 = insertelement <16 x float> %207, float %102, i64 10, !dbg !45
  %209 = insertelement <16 x float> %208, float %101, i64 11, !dbg !45
  %210 = insertelement <16 x float> %209, float %100, i64 12, !dbg !45
  %211 = insertelement <16 x float> %210, float %98, i64 13, !dbg !45
  %212 = insertelement <16 x float> %211, float %96, i64 14, !dbg !45
  %213 = insertelement <16 x float> %212, float %94, i64 15, !dbg !45
  %214 = insertelement <16 x i32> poison, i32 %115, i64 0, !dbg !45
  %215 = bitcast <16 x i32> %214 to <16 x float>, !dbg !45
  %216 = shufflevector <16 x float> %215, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !45
  %217 = fsub <16 x float> %213, %216, !dbg !45
  %218 = insertelement <16 x float> poison, float %197, i64 0, !dbg !46
  %219 = shufflevector <16 x float> %218, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !46
  %220 = fmul <16 x float> %217, %219, !dbg !46
  %221 = insertelement <16 x i32> poison, i32 %120, i64 0, !dbg !47
  %222 = bitcast <16 x i32> %221 to <16 x float>, !dbg !47
  %223 = shufflevector <16 x float> %222, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !47
  %224 = fmul <16 x float> %220, %223, !dbg !47
  %225 = insertelement <16 x i32> poison, i32 %122, i64 0, !dbg !48
  %226 = bitcast <16 x i32> %225 to <16 x float>, !dbg !48
  %227 = shufflevector <16 x float> %226, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !48
  %228 = fadd <16 x float> %224, %227, !dbg !48
  %229 = fcmp olt <16 x float> %228, zeroinitializer, !dbg !49
  %230 = extractelement <16 x i1> %229, i64 15, !dbg !53
  %231 = extractelement <16 x float> %228, i64 15, !dbg !53
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !53
  %233 = extractelement <16 x i1> %229, i64 14, !dbg !53
  %234 = extractelement <16 x float> %228, i64 14, !dbg !53
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !53
  %236 = extractelement <16 x i1> %229, i64 13, !dbg !53
  %237 = extractelement <16 x float> %228, i64 13, !dbg !53
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !53
  %239 = extractelement <16 x i1> %229, i64 12, !dbg !53
  %240 = extractelement <16 x float> %228, i64 12, !dbg !53
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !53
  %242 = extractelement <16 x i1> %229, i64 11, !dbg !53
  %243 = extractelement <16 x float> %228, i64 11, !dbg !53
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !53
  %245 = extractelement <16 x i1> %229, i64 10, !dbg !53
  %246 = extractelement <16 x float> %228, i64 10, !dbg !53
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !53
  %248 = extractelement <16 x i1> %229, i64 9, !dbg !53
  %249 = extractelement <16 x float> %228, i64 9, !dbg !53
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !53
  %251 = extractelement <16 x i1> %229, i64 8, !dbg !53
  %252 = extractelement <16 x float> %228, i64 8, !dbg !53
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !53
  %254 = extractelement <16 x i1> %229, i64 7, !dbg !53
  %255 = extractelement <16 x float> %228, i64 7, !dbg !53
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !53
  %257 = extractelement <16 x i1> %229, i64 6, !dbg !53
  %258 = extractelement <16 x float> %228, i64 6, !dbg !53
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !53
  %260 = extractelement <16 x i1> %229, i64 5, !dbg !53
  %261 = extractelement <16 x float> %228, i64 5, !dbg !53
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !53
  %263 = extractelement <16 x i1> %229, i64 4, !dbg !53
  %264 = extractelement <16 x float> %228, i64 4, !dbg !53
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !53
  %266 = extractelement <16 x i1> %229, i64 3, !dbg !53
  %267 = extractelement <16 x float> %228, i64 3, !dbg !53
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !53
  %269 = extractelement <16 x i1> %229, i64 2, !dbg !53
  %270 = extractelement <16 x float> %228, i64 2, !dbg !53
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !53
  %272 = extractelement <16 x i1> %229, i64 1, !dbg !53
  %273 = extractelement <16 x float> %228, i64 1, !dbg !53
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !53
  %275 = extractelement <16 x i1> %229, i64 0, !dbg !53
  %276 = extractelement <16 x float> %228, i64 0, !dbg !53
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %278 = shl i32 %13, 4, !dbg !53
  %279 = and i32 %278, 4080, !dbg !53
  %280 = lshr exact i32 %279, 2, !dbg !53
  %281 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %280, !dbg !53
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !53
  %283 = bitcast float %232 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !53
  %284 = or disjoint i32 %279, 1, !dbg !53
  %285 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %284, !dbg !53
  %286 = bitcast float %235 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !53
  %287 = or disjoint i32 %279, 2, !dbg !53
  %288 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %287, !dbg !53
  %289 = bitcast float %238 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !53
  %290 = or disjoint i32 %279, 3, !dbg !53
  %291 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %290, !dbg !53
  %292 = bitcast float %241 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !53
  %293 = or disjoint i32 %279, 4, !dbg !53
  %294 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %293, !dbg !53
  %295 = bitcast float %244 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !53
  %296 = or disjoint i32 %279, 5, !dbg !53
  %297 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %296, !dbg !53
  %298 = bitcast float %247 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !53
  %299 = or disjoint i32 %279, 6, !dbg !53
  %300 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %299, !dbg !53
  %301 = bitcast float %250 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !53
  %302 = or disjoint i32 %279, 7, !dbg !53
  %303 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %302, !dbg !53
  %304 = bitcast float %253 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !53
  %305 = or disjoint i32 %279, 8, !dbg !53
  %306 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %305, !dbg !53
  %307 = bitcast float %256 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !53
  %308 = or disjoint i32 %279, 9, !dbg !53
  %309 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %308, !dbg !53
  %310 = bitcast float %259 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !53
  %311 = or disjoint i32 %279, 10, !dbg !53
  %312 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %311, !dbg !53
  %313 = bitcast float %262 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #4, !dbg !53
  %314 = or disjoint i32 %279, 11, !dbg !53
  %315 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %314, !dbg !53
  %316 = bitcast float %265 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #4, !dbg !53
  %317 = or disjoint i32 %279, 12, !dbg !53
  %318 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %317, !dbg !53
  %319 = bitcast float %268 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #4, !dbg !53
  %320 = or disjoint i32 %279, 13, !dbg !53
  %321 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %320, !dbg !53
  %322 = bitcast float %271 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !53
  %323 = or disjoint i32 %279, 14, !dbg !53
  %324 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %323, !dbg !53
  %325 = bitcast float %274 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !53
  %326 = or disjoint i32 %279, 15, !dbg !53
  %327 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %326, !dbg !53
  %328 = bitcast float %277 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %329 = lshr i32 %88, 4, !dbg !53
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !53
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %88, !dbg !53
  %332 = load float, ptr addrspace(3) %331, align 4, !dbg !53
  %333 = or disjoint i32 %88, 1, !dbg !53
  %334 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %333, !dbg !53
  %335 = load float, ptr addrspace(3) %334, align 4, !dbg !53
  %336 = or disjoint i32 %88, 2, !dbg !53
  %337 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %336, !dbg !53
  %338 = load float, ptr addrspace(3) %337, align 4, !dbg !53
  %339 = or disjoint i32 %88, 3, !dbg !53
  %340 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %339, !dbg !53
  %341 = load float, ptr addrspace(3) %340, align 4, !dbg !53
  %342 = or disjoint i32 %88, 1024, !dbg !53
  %343 = lshr i32 %342, 4, !dbg !53
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !53
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %342, !dbg !53
  %346 = load float, ptr addrspace(3) %345, align 4, !dbg !53
  %347 = or disjoint i32 %88, 1025, !dbg !53
  %348 = lshr i32 %347, 4, !dbg !53
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !53
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %347, !dbg !53
  %351 = load float, ptr addrspace(3) %350, align 4, !dbg !53
  %352 = or disjoint i32 %88, 1026, !dbg !53
  %353 = lshr i32 %352, 4, !dbg !53
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !53
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !53
  %356 = load float, ptr addrspace(3) %355, align 4, !dbg !53
  %357 = or disjoint i32 %88, 1027, !dbg !53
  %358 = lshr i32 %357, 4, !dbg !53
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !53
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %357, !dbg !53
  %361 = load float, ptr addrspace(3) %360, align 4, !dbg !53
  %362 = or disjoint i32 %88, 2048, !dbg !53
  %363 = lshr i32 %362, 4, !dbg !53
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !53
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %362, !dbg !53
  %366 = load float, ptr addrspace(3) %365, align 4, !dbg !53
  %367 = or disjoint i32 %88, 2049, !dbg !53
  %368 = lshr i32 %367, 4, !dbg !53
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %368, !dbg !53
  %370 = getelementptr inbounds float, ptr addrspace(3) %369, i32 %367, !dbg !53
  %371 = load float, ptr addrspace(3) %370, align 4, !dbg !53
  %372 = or disjoint i32 %88, 2050, !dbg !53
  %373 = lshr i32 %372, 4, !dbg !53
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !53
  %375 = getelementptr inbounds float, ptr addrspace(3) %374, i32 %372, !dbg !53
  %376 = load float, ptr addrspace(3) %375, align 4, !dbg !53
  %377 = or disjoint i32 %88, 2051, !dbg !53
  %378 = lshr i32 %377, 4, !dbg !53
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %378, !dbg !53
  %380 = getelementptr inbounds float, ptr addrspace(3) %379, i32 %377, !dbg !53
  %381 = load float, ptr addrspace(3) %380, align 4, !dbg !53
  %382 = or disjoint i32 %88, 3072, !dbg !53
  %383 = lshr i32 %382, 4, !dbg !53
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %383, !dbg !53
  %385 = getelementptr inbounds float, ptr addrspace(3) %384, i32 %382, !dbg !53
  %386 = load float, ptr addrspace(3) %385, align 4, !dbg !53
  %387 = or disjoint i32 %88, 3073, !dbg !53
  %388 = lshr i32 %387, 4, !dbg !53
  %389 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %388, !dbg !53
  %390 = getelementptr inbounds float, ptr addrspace(3) %389, i32 %387, !dbg !53
  %391 = load float, ptr addrspace(3) %390, align 4, !dbg !53
  %392 = or disjoint i32 %88, 3074, !dbg !53
  %393 = lshr i32 %392, 4, !dbg !53
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %393, !dbg !53
  %395 = getelementptr inbounds float, ptr addrspace(3) %394, i32 %392, !dbg !53
  %396 = load float, ptr addrspace(3) %395, align 4, !dbg !53
  %397 = or disjoint i32 %88, 3075, !dbg !53
  %398 = lshr i32 %397, 4, !dbg !53
  %399 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %398, !dbg !53
  %400 = getelementptr inbounds float, ptr addrspace(3) %399, i32 %397, !dbg !53
  %401 = load float, ptr addrspace(3) %400, align 4, !dbg !53
  %402 = fadd float %332, %196, !dbg !54
  %403 = fadd float %335, %194, !dbg !54
  %404 = fadd float %338, %192, !dbg !54
  %405 = fadd float %341, %190, !dbg !54
  %406 = fadd float %346, %188, !dbg !54
  %407 = fadd float %351, %186, !dbg !54
  %408 = fadd float %356, %184, !dbg !54
  %409 = fadd float %361, %182, !dbg !54
  %410 = fadd float %366, %180, !dbg !54
  %411 = fadd float %371, %178, !dbg !54
  %412 = fadd float %376, %176, !dbg !54
  %413 = fadd float %381, %174, !dbg !54
  %414 = fadd float %386, %172, !dbg !54
  %415 = fadd float %391, %170, !dbg !54
  %416 = fadd float %396, %168, !dbg !54
  %417 = fadd float %401, %166, !dbg !54
  %418 = add i32 %132, %33, !dbg !55
  %419 = add i32 %134, %33, !dbg !55
  %420 = add i32 %136, %33, !dbg !55
  %421 = add i32 %138, %33, !dbg !55
  %422 = sext i32 %418 to i64, !dbg !56
  %423 = getelementptr float, ptr addrspace(1) %6, i64 %422, !dbg !56
  %424 = sext i32 %419 to i64, !dbg !56
  %425 = getelementptr float, ptr addrspace(1) %6, i64 %424, !dbg !56
  %426 = sext i32 %420 to i64, !dbg !56
  %427 = getelementptr float, ptr addrspace(1) %6, i64 %426, !dbg !56
  %428 = sext i32 %421 to i64, !dbg !56
  %429 = getelementptr float, ptr addrspace(1) %6, i64 %428, !dbg !56
  %430 = bitcast float %332 to i32, !dbg !57
  %431 = bitcast float %335 to i32, !dbg !57
  %432 = bitcast float %338 to i32, !dbg !57
  %433 = bitcast float %341 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %430, i32 %431, i32 %432, i32 %433, ptr addrspace(1) %423, i1 %38) #4, !dbg !57
  %434 = bitcast float %346 to i32, !dbg !57
  %435 = bitcast float %351 to i32, !dbg !57
  %436 = bitcast float %356 to i32, !dbg !57
  %437 = bitcast float %361 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %425, i1 %38) #4, !dbg !57
  %438 = bitcast float %366 to i32, !dbg !57
  %439 = bitcast float %371 to i32, !dbg !57
  %440 = bitcast float %376 to i32, !dbg !57
  %441 = bitcast float %381 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %427, i1 %38) #4, !dbg !57
  %442 = bitcast float %386 to i32, !dbg !57
  %443 = bitcast float %391 to i32, !dbg !57
  %444 = bitcast float %396 to i32, !dbg !57
  %445 = bitcast float %401 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %442, i32 %443, i32 %444, i32 %445, ptr addrspace(1) %429, i1 %38) #4, !dbg !57
  %446 = getelementptr float, ptr addrspace(1) %7, i64 %60, !dbg !58
  %447 = getelementptr float, ptr addrspace(1) %7, i64 %62, !dbg !58
  %448 = getelementptr float, ptr addrspace(1) %7, i64 %64, !dbg !58
  %449 = getelementptr float, ptr addrspace(1) %7, i64 %66, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %450 = shl i32 %13, 10, !dbg !59
  %451 = and i32 %450, 3072, !dbg !59
  %452 = or disjoint i32 %451, %18, !dbg !59
  %453 = lshr exact i32 %451, 4, !dbg !59
  %454 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %453, !dbg !59
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %452, !dbg !59
  %456 = bitcast float %402 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #4, !dbg !59
  %457 = or disjoint i32 %452, 256, !dbg !59
  %458 = lshr i32 %457, 6, !dbg !59
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !59
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %457, !dbg !59
  %461 = bitcast float %403 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 true) #4, !dbg !59
  %462 = or disjoint i32 %452, 512, !dbg !59
  %463 = lshr i32 %462, 6, !dbg !59
  %464 = getelementptr float, ptr addrspace(3) @global_smem, i32 %463, !dbg !59
  %465 = getelementptr float, ptr addrspace(3) %464, i32 %462, !dbg !59
  %466 = bitcast float %404 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 true) #4, !dbg !59
  %467 = or disjoint i32 %452, 768, !dbg !59
  %468 = lshr i32 %467, 6, !dbg !59
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !59
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %467, !dbg !59
  %471 = bitcast float %405 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %471, i1 true) #4, !dbg !59
  %472 = or disjoint i32 %452, 64, !dbg !59
  %473 = getelementptr float, ptr addrspace(3) %454, i32 %472, !dbg !59
  %474 = bitcast float %406 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 true) #4, !dbg !59
  %475 = or disjoint i32 %452, 320, !dbg !59
  %476 = lshr i32 %475, 6, !dbg !59
  %477 = and i32 %476, 52, !dbg !59
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !59
  %479 = getelementptr float, ptr addrspace(3) %478, i32 %475, !dbg !59
  %480 = bitcast float %407 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %480, i1 true) #4, !dbg !59
  %481 = or disjoint i32 %452, 576, !dbg !59
  %482 = lshr i32 %481, 6, !dbg !59
  %483 = and i32 %482, 56, !dbg !59
  %484 = getelementptr float, ptr addrspace(3) @global_smem, i32 %483, !dbg !59
  %485 = getelementptr float, ptr addrspace(3) %484, i32 %481, !dbg !59
  %486 = bitcast float %408 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %486, i1 true) #4, !dbg !59
  %487 = or disjoint i32 %452, 832, !dbg !59
  %488 = lshr i32 %487, 6, !dbg !59
  %489 = and i32 %488, 60, !dbg !59
  %490 = getelementptr float, ptr addrspace(3) @global_smem, i32 %489, !dbg !59
  %491 = getelementptr float, ptr addrspace(3) %490, i32 %487, !dbg !59
  %492 = bitcast float %409 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %492, i1 true) #4, !dbg !59
  %493 = or disjoint i32 %452, 128, !dbg !59
  %494 = getelementptr float, ptr addrspace(3) %454, i32 %493, !dbg !59
  %495 = bitcast float %410 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, <1 x i32> %495, i1 true) #4, !dbg !59
  %496 = or disjoint i32 %452, 384, !dbg !59
  %497 = lshr i32 %496, 6, !dbg !59
  %498 = and i32 %497, 52, !dbg !59
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %498, !dbg !59
  %500 = getelementptr float, ptr addrspace(3) %499, i32 %496, !dbg !59
  %501 = bitcast float %411 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %501, i1 true) #4, !dbg !59
  %502 = or disjoint i32 %452, 640, !dbg !59
  %503 = lshr i32 %502, 6, !dbg !59
  %504 = and i32 %503, 56, !dbg !59
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i32 %504, !dbg !59
  %506 = getelementptr float, ptr addrspace(3) %505, i32 %502, !dbg !59
  %507 = bitcast float %412 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %507, i1 true) #4, !dbg !59
  %508 = or disjoint i32 %452, 896, !dbg !59
  %509 = lshr i32 %508, 6, !dbg !59
  %510 = and i32 %509, 60, !dbg !59
  %511 = getelementptr float, ptr addrspace(3) @global_smem, i32 %510, !dbg !59
  %512 = getelementptr float, ptr addrspace(3) %511, i32 %508, !dbg !59
  %513 = bitcast float %413 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %512, <1 x i32> %513, i1 true) #4, !dbg !59
  %514 = or disjoint i32 %452, 192, !dbg !59
  %515 = getelementptr float, ptr addrspace(3) %454, i32 %514, !dbg !59
  %516 = bitcast float %414 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %515, <1 x i32> %516, i1 true) #4, !dbg !59
  %517 = or disjoint i32 %452, 448, !dbg !59
  %518 = lshr i32 %517, 6, !dbg !59
  %519 = and i32 %518, 52, !dbg !59
  %520 = getelementptr float, ptr addrspace(3) @global_smem, i32 %519, !dbg !59
  %521 = getelementptr float, ptr addrspace(3) %520, i32 %517, !dbg !59
  %522 = bitcast float %415 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, <1 x i32> %522, i1 true) #4, !dbg !59
  %523 = or disjoint i32 %452, 704, !dbg !59
  %524 = lshr i32 %523, 6, !dbg !59
  %525 = and i32 %524, 56, !dbg !59
  %526 = getelementptr float, ptr addrspace(3) @global_smem, i32 %525, !dbg !59
  %527 = getelementptr float, ptr addrspace(3) %526, i32 %523, !dbg !59
  %528 = bitcast float %416 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %527, <1 x i32> %528, i1 true) #4, !dbg !59
  %529 = or disjoint i32 %452, 960, !dbg !59
  %530 = lshr i32 %529, 6, !dbg !59
  %531 = and i32 %530, 60, !dbg !59
  %532 = getelementptr float, ptr addrspace(3) @global_smem, i32 %531, !dbg !59
  %533 = getelementptr float, ptr addrspace(3) %532, i32 %529, !dbg !59
  %534 = bitcast float %417 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %533, <1 x i32> %534, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %535 = lshr i32 %342, 6, !dbg !59
  %536 = and i32 %535, 28, !dbg !59
  %537 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %536, !dbg !59
  %538 = getelementptr inbounds float, ptr addrspace(3) %537, i32 %342, !dbg !59
  %539 = load <4 x i32>, ptr addrspace(3) %538, align 16, !dbg !59
  %540 = lshr i32 %362, 6, !dbg !59
  %541 = and i32 %540, 44, !dbg !59
  %542 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %541, !dbg !59
  %543 = getelementptr inbounds float, ptr addrspace(3) %542, i32 %362, !dbg !59
  %544 = load <4 x i32>, ptr addrspace(3) %543, align 16, !dbg !59
  %545 = lshr i32 %382, 6, !dbg !59
  %546 = and i32 %545, 60, !dbg !59
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %546, !dbg !59
  %548 = getelementptr inbounds float, ptr addrspace(3) %547, i32 %382, !dbg !59
  %549 = load <4 x i32>, ptr addrspace(3) %548, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %92, align 16, !dbg !59
  %550 = getelementptr inbounds i8, ptr addrspace(3) %92, i32 4, !dbg !59
  %.extract20 = load i32, ptr addrspace(3) %550, align 4, !dbg !59
  %551 = getelementptr inbounds i8, ptr addrspace(3) %92, i32 8, !dbg !59
  %.extract21 = load i32, ptr addrspace(3) %551, align 8, !dbg !59
  %552 = getelementptr inbounds i8, ptr addrspace(3) %92, i32 12, !dbg !59
  %.extract22 = load i32, ptr addrspace(3) %552, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %446, i1 %34) #4, !dbg !59
  %.extract23 = extractelement <4 x i32> %539, i64 0, !dbg !59
  %.extract24 = extractelement <4 x i32> %539, i64 1, !dbg !59
  %.extract25 = extractelement <4 x i32> %539, i64 2, !dbg !59
  %.extract26 = extractelement <4 x i32> %539, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %447, i1 %35) #4, !dbg !59
  %.extract27 = extractelement <4 x i32> %544, i64 0, !dbg !59
  %.extract28 = extractelement <4 x i32> %544, i64 1, !dbg !59
  %.extract29 = extractelement <4 x i32> %544, i64 2, !dbg !59
  %.extract30 = extractelement <4 x i32> %544, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %448, i1 %36) #4, !dbg !59
  %.extract31 = extractelement <4 x i32> %549, i64 0, !dbg !59
  %.extract32 = extractelement <4 x i32> %549, i64 1, !dbg !59
  %.extract33 = extractelement <4 x i32> %549, i64 2, !dbg !59
  %.extract34 = extractelement <4 x i32> %549, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %449, i1 %37) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cspx66u3rf6ftkwdx6g53jr2ifsa4djmfbqqn2yiwbnhtrrrvcwi.py", directory: "inductor_cache/sp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 50, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 55, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 36, column: 49, scope: !7)
!37 = !DILocation(line: 36, column: 61, scope: !7)
!38 = !DILocation(line: 36, column: 45, scope: !7)
!39 = !DILocation(line: 36, column: 54, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 66, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 26, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 49, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 39, scope: !7)
!56 = !DILocation(line: 51, column: 25, scope: !7)
!57 = !DILocation(line: 51, column: 58, scope: !7)
!58 = !DILocation(line: 52, column: 25, scope: !7)
!59 = !DILocation(line: 52, column: 57, scope: !7)
!60 = !DILocation(line: 52, column: 4, scope: !7)
