; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = srem i32 %18, 1024, !dbg !14
  %20 = sdiv i32 %18, 16384, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = shl nsw i32 %20, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %19 to i16, !dbg !19
  %25 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %25 to i32, !dbg !19
  %26 = add nsw i32 %24, %.sext, !dbg !20
  %27 = sext i32 %26 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = sext i32 %19 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !29
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !32
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !34
  %48 = bitcast i32 %47 to float, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !34
  %50 = bitcast i32 %49 to float, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !35
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !36
  %53 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !37
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !38
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 5.120000e+02) #3, !dbg !39
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 5.120000e+02) #3, !dbg !39
  %57 = fadd float %55, 0x3EE4F8B580000000, !dbg !40
  %58 = fadd float %56, 0x3EE4F8B580000000, !dbg !40
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %59, 0, !dbg !41
  br i1 %.not.i, label %62, label %60, !dbg !41

60:                                               ; preds = %12
  %61 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

62:                                               ; preds = %12
  %63 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %60, %62
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], !dbg !41
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %64, 0, !dbg !41
  br i1 %.not.i1, label %67, label %65, !dbg !41

65:                                               ; preds = %__nv_rsqrtf.exit
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

67:                                               ; preds = %__nv_rsqrtf.exit
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %65, %67
  %.0.i2 = phi float [ %66, %65 ], [ %68, %67 ], !dbg !41
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 5.120000e+02) #3, !dbg !42
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 5.120000e+02) #3, !dbg !42
  %71 = fadd float %69, 0x3EE4F8B580000000, !dbg !43
  %72 = fadd float %70, 0x3EE4F8B580000000, !dbg !43
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i4 = icmp eq i32 %73, 0, !dbg !44
  br i1 %.not.i4, label %76, label %74, !dbg !44

74:                                               ; preds = %__nv_rsqrtf.exit3
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %71), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

76:                                               ; preds = %__nv_rsqrtf.exit3
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %71), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

__nv_rsqrtf.exit6:                                ; preds = %74, %76
  %.0.i5 = phi float [ %75, %74 ], [ %77, %76 ], !dbg !44
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i7 = icmp eq i32 %78, 0, !dbg !44
  br i1 %.not.i7, label %81, label %79, !dbg !44

79:                                               ; preds = %__nv_rsqrtf.exit6
  %80 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %72), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

81:                                               ; preds = %__nv_rsqrtf.exit6
  %82 = tail call float @llvm.nvvm.rsqrt.approx.f(float %72), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

__nv_rsqrtf.exit9:                                ; preds = %79, %81
  %.0.i8 = phi float [ %80, %79 ], [ %82, %81 ], !dbg !44
  %83 = extractvalue { i32, i32 } %42, 1, !dbg !30
  %84 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !22
  %85 = insertelement <2 x i32> %84, i32 %45, i64 1, !dbg !22
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !22
  %87 = extractvalue { i32, i32 } %42, 0, !dbg !30
  %88 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !22
  %89 = insertelement <2 x i32> %88, i32 %44, i64 1, !dbg !22
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !22
  %91 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %92 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %93 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %94 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %95 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %96 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %97 = extractvalue { i32, i32 } %54, 1, !dbg !38
  %98 = extractvalue { i32, i32 } %54, 0, !dbg !38
  %99 = extractvalue { i32, i32 } %52, 1, !dbg !36
  %100 = extractvalue { i32, i32 } %52, 0, !dbg !36
  %101 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !17
  %102 = insertelement <2 x i32> %101, i32 %87, i64 1, !dbg !17
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !17
  %104 = fsub <2 x float> %103, %90, !dbg !45
  %105 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !28
  %106 = insertelement <2 x i32> %105, i32 %98, i64 1, !dbg !28
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !28
  %108 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !26
  %109 = insertelement <2 x i32> %108, i32 %100, i64 1, !dbg !26
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !26
  %111 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !46
  %112 = insertelement <2 x float> %111, float %.0.i5, i64 1, !dbg !46
  %113 = fmul <2 x float> %104, %112, !dbg !46
  %114 = fmul <2 x float> %113, %110, !dbg !47
  %115 = fadd <2 x float> %114, %107, !dbg !48
  %116 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !17
  %117 = insertelement <2 x i32> %116, i32 %83, i64 1, !dbg !17
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !17
  %119 = fsub <2 x float> %118, %86, !dbg !45
  %120 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !28
  %121 = insertelement <2 x i32> %120, i32 %97, i64 1, !dbg !28
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !28
  %123 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !26
  %124 = insertelement <2 x i32> %123, i32 %99, i64 1, !dbg !26
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !26
  %126 = insertelement <2 x float> poison, float %.0.i2, i64 0, !dbg !46
  %127 = insertelement <2 x float> %126, float %.0.i8, i64 1, !dbg !46
  %128 = fmul <2 x float> %119, %127, !dbg !46
  %129 = fmul <2 x float> %128, %125, !dbg !47
  %130 = fadd <2 x float> %129, %122, !dbg !48
  %shift = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %131 = fadd <2 x float> %115, %shift, !dbg !49
  %132 = extractelement <2 x float> %131, i64 0, !dbg !49
  %shift10 = shufflevector <2 x float> %130, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %133 = fadd <2 x float> %130, %shift10, !dbg !49
  %134 = extractelement <2 x float> %133, i64 0, !dbg !49
  %135 = fcmp olt float %132, 0.000000e+00, !dbg !50
  %136 = fcmp olt float %134, 0.000000e+00, !dbg !50
  %137 = select i1 %135, float 0.000000e+00, float %132, !dbg !54
  %138 = select i1 %136, float 0.000000e+00, float %134, !dbg !54
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !55
  %140 = bitcast float %137 to i32, !dbg !56
  %141 = bitcast float %138 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %140, i32 %141, ptr addrspace(1) %139, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7xadotfrzwphcper4pyuusg56zq4zavgt6bvzoaqnztz5f3skd.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_30", linkageName: "triton_poi_fused_add_native_group_norm_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 52, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 52, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 28, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 28, scope: !7)
!56 = !DILocation(line: 56, column: 40, scope: !7)
!57 = !DILocation(line: 56, column: 4, scope: !7)
