; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = sdiv i32 %10, 4, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %13 = sdiv i32 %.frozen, 64, !dbg !16
  %14 = mul i32 %13, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = add i32 %10, -5, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = add i32 %10, -4, !dbg !20
  %19 = sext i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = add i32 %10, -3, !dbg !22
  %22 = sext i32 %21 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !23
  %24 = add i32 %10, -1, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !25
  %27 = sext i32 %10 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = add i32 %10, 1, !dbg !27
  %30 = sext i32 %29 to i64, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !28
  %32 = add i32 %10, 3, !dbg !29
  %33 = sext i32 %32 to i64, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !30
  %35 = add i32 %10, 4, !dbg !31
  %36 = sext i32 %35 to i64, !dbg !32
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !32
  %38 = add i32 %10, 5, !dbg !33
  %39 = sext i32 %38 to i64, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !34
  %41 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !35
  %42 = insertelement <2 x i32> %41, i32 %10, i64 1, !dbg !35
  %43 = srem <2 x i32> %42, splat (i32 4), !dbg !35
  %44 = extractelement <2 x i32> %43, i64 0, !dbg !36
  %45 = icmp sgt i32 %44, 0, !dbg !37
  %46 = extractelement <2 x i32> %43, i64 1, !dbg !36
  %47 = icmp sgt i32 %46, 0, !dbg !38
  %48 = and i1 %47, %45, !dbg !39
  %49 = and i1 %11, %48, !dbg !40
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %49, i32 0, i1 %49) #1, !dbg !41
  %51 = bitcast i32 %50 to float, !dbg !41
  %52 = icmp sgt i32 %46, -1, !dbg !42
  %53 = and i1 %52, %45, !dbg !43
  %54 = and i1 %11, %53, !dbg !44
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %54, i32 0, i1 %54) #1, !dbg !45
  %56 = bitcast i32 %55 to float, !dbg !45
  %57 = fadd float %51, %56, !dbg !46
  %58 = add nsw i32 %46, 1, !dbg !47
  %59 = icmp ult i32 %58, 4, !dbg !47
  %60 = and i1 %45, %59, !dbg !48
  %61 = and i1 %11, %60, !dbg !49
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %61, i32 0, i1 %61) #1, !dbg !50
  %63 = bitcast i32 %62 to float, !dbg !50
  %64 = fadd float %57, %63, !dbg !51
  %65 = icmp sgt i32 %44, -1, !dbg !52
  %66 = and i1 %47, %65, !dbg !53
  %67 = and i1 %11, %66, !dbg !54
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %67, i32 0, i1 %67) #1, !dbg !55
  %69 = bitcast i32 %68 to float, !dbg !55
  %70 = fadd float %64, %69, !dbg !56
  %71 = or i32 %44, %46, !dbg !57
  %72 = icmp sgt i32 %71, -1, !dbg !57
  %73 = and i1 %11, %72, !dbg !58
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %73, i32 0, i1 %73) #1, !dbg !59
  %75 = bitcast i32 %74 to float, !dbg !59
  %76 = fadd float %70, %75, !dbg !60
  %77 = and i1 %65, %59, !dbg !61
  %78 = and i1 %11, %77, !dbg !62
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %78, i32 0, i1 %78) #1, !dbg !63
  %80 = bitcast i32 %79 to float, !dbg !63
  %81 = fadd float %76, %80, !dbg !64
  %82 = add nsw i32 %44, 1, !dbg !65
  %83 = icmp ult i32 %82, 4, !dbg !65
  %84 = and i1 %47, %83, !dbg !66
  %85 = and i1 %11, %84, !dbg !67
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %85, i32 0, i1 %85) #1, !dbg !68
  %87 = bitcast i32 %86 to float, !dbg !68
  %88 = fadd float %81, %87, !dbg !69
  %89 = and i1 %52, %83, !dbg !70
  %90 = and i1 %11, %89, !dbg !71
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %90, i32 0, i1 %90) #1, !dbg !72
  %92 = bitcast i32 %91 to float, !dbg !72
  %93 = fadd float %88, %92, !dbg !73
  %94 = or i32 %82, %58, !dbg !74
  %95 = icmp ult i32 %94, 4, !dbg !74
  %96 = and i1 %11, %95, !dbg !75
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %96, i32 0, i1 %96) #1, !dbg !76
  %98 = bitcast i32 %97 to float, !dbg !76
  %99 = fadd float %93, %98, !dbg !77
  %100 = add nsw <2 x i32> %43, splat (i32 2), !dbg !78
  %101 = icmp sgt <2 x i32> %43, splat (i32 2), !dbg !79
  %102 = select <2 x i1> %101, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !80
  %103 = icmp slt <2 x i32> %43, splat (i32 3), !dbg !81
  %104 = select <2 x i1> %103, <2 x i32> %100, <2 x i32> zeroinitializer, !dbg !82
  %105 = add nsw <2 x i32> %102, %104, !dbg !83
  %106 = extractelement <2 x i32> %105, i64 1, !dbg !84
  %reass.add = sub nsw i32 %106, %46
  %107 = extractelement <2 x i32> %105, i64 0
  %reass.mul = mul nsw i32 %reass.add, %107
  %108 = add nsw i32 %46, %44, !dbg !36
  %reass.sub = sub nsw i32 %106, %108, !dbg !84
  %109 = add nsw i32 %reass.sub, 1, !dbg !84
  %110 = extractelement <2 x i32> %43, i64 1
  %111 = extractelement <2 x i32> %105, i64 1
  %112 = sub nsw i32 %110, %111
  %reass.mul7 = mul nsw i32 %112, %44
  %113 = extractelement <2 x i32> %105, i64 0, !dbg !85
  %114 = add nsw i32 %109, %113, !dbg !85
  %115 = add nsw i32 %114, %reass.mul7, !dbg !85
  %116 = add nsw i32 %115, %reass.mul, !dbg !86
  %117 = sitofp i32 %116 to float, !dbg !87
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %117) #1, !dbg !87
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %49, i32 -8388608, i1 %49) #1, !dbg !88
  %120 = bitcast i32 %119 to float, !dbg !88
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %54, i32 -8388608, i1 %54) #1, !dbg !89
  %122 = bitcast i32 %121 to float, !dbg !89
  %123 = fcmp ogt float %122, %120, !dbg !90
  %124 = fcmp uno float %122, 0.000000e+00, !dbg !94
  %125 = or i1 %123, %124, !dbg !95
  %126 = select i1 %125, float %122, float %120, !dbg !96
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %61, i32 -8388608, i1 %61) #1, !dbg !97
  %128 = bitcast i32 %127 to float, !dbg !97
  %129 = fcmp olt float %126, %128, !dbg !98
  %130 = fcmp uno float %128, 0.000000e+00, !dbg !100
  %131 = or i1 %130, %129, !dbg !101
  %132 = select i1 %131, float %128, float %126, !dbg !102
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %67, i32 -8388608, i1 %67) #1, !dbg !103
  %134 = bitcast i32 %133 to float, !dbg !103
  %135 = fcmp olt float %132, %134, !dbg !104
  %136 = fcmp uno float %134, 0.000000e+00, !dbg !106
  %137 = or i1 %136, %135, !dbg !107
  %138 = select i1 %137, float %134, float %132, !dbg !108
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %73, i32 -8388608, i1 %73) #1, !dbg !109
  %140 = bitcast i32 %139 to float, !dbg !109
  %141 = fcmp olt float %138, %140, !dbg !110
  %142 = fcmp uno float %140, 0.000000e+00, !dbg !112
  %143 = or i1 %142, %141, !dbg !113
  %144 = select i1 %143, float %140, float %138, !dbg !114
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %78, i32 -8388608, i1 %78) #1, !dbg !115
  %146 = bitcast i32 %145 to float, !dbg !115
  %147 = fcmp olt float %144, %146, !dbg !116
  %148 = fcmp uno float %146, 0.000000e+00, !dbg !118
  %149 = or i1 %148, %147, !dbg !119
  %150 = select i1 %149, float %146, float %144, !dbg !120
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %85, i32 -8388608, i1 %85) #1, !dbg !121
  %152 = bitcast i32 %151 to float, !dbg !121
  %153 = fcmp olt float %150, %152, !dbg !122
  %154 = fcmp uno float %152, 0.000000e+00, !dbg !124
  %155 = or i1 %154, %153, !dbg !125
  %156 = select i1 %155, float %152, float %150, !dbg !126
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %90, i32 -8388608, i1 %90) #1, !dbg !127
  %158 = bitcast i32 %157 to float, !dbg !127
  %159 = fcmp olt float %156, %158, !dbg !128
  %160 = fcmp uno float %158, 0.000000e+00, !dbg !130
  %161 = or i1 %160, %159, !dbg !131
  %162 = select i1 %161, float %158, float %156, !dbg !132
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %96, i32 -8388608, i1 %96) #1, !dbg !133
  %164 = bitcast i32 %163 to float, !dbg !133
  %165 = fcmp olt float %162, %164, !dbg !134
  %166 = fcmp uno float %164, 0.000000e+00, !dbg !136
  %167 = or i1 %166, %165, !dbg !137
  %168 = zext i1 %123 to i8, !dbg !138
  %169 = select i1 %129, i8 2, i8 %168, !dbg !139
  %170 = select i1 %135, i8 3, i8 %169, !dbg !140
  %171 = select i1 %141, i8 4, i8 %170, !dbg !141
  %172 = select i1 %147, i8 5, i8 %171, !dbg !142
  %173 = select i1 %153, i8 6, i8 %172, !dbg !143
  %174 = select i1 %159, i8 7, i8 %173, !dbg !144
  %175 = select i1 %165, i8 8, i8 %174, !dbg !145
  %176 = shl i32 %13, 7, !dbg !146
  %177 = add i32 %176, %.decomposed, !dbg !147
  %178 = sext i32 %177 to i64, !dbg !148
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !148
  %180 = bitcast float %118 to i32, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %179, i1 %11) #1, !dbg !149
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !150
  %182 = bitcast float %162 to i32, !dbg !151
  %183 = select i1 %167, i32 %163, i32 %182, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %181, i1 %11) #1, !dbg !151
  %184 = getelementptr i8, ptr addrspace(1) %3, i64 %27, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %175, ptr addrspace(1) %184, i1 %11) #1, !dbg !154
  ret void, !dbg !155
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb3feej475xwrugbcyqnmqjnl6lkdkhd253zn4w2wyekcd2aglr2.py", directory: "inductor_cache/b3")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 40, column: 38, scope: !7)
!19 = !DILocation(line: 40, column: 31, scope: !7)
!20 = !DILocation(line: 46, column: 38, scope: !7)
!21 = !DILocation(line: 46, column: 31, scope: !7)
!22 = !DILocation(line: 53, column: 38, scope: !7)
!23 = !DILocation(line: 53, column: 31, scope: !7)
!24 = !DILocation(line: 60, column: 38, scope: !7)
!25 = !DILocation(line: 60, column: 31, scope: !7)
!26 = !DILocation(line: 63, column: 31, scope: !7)
!27 = !DILocation(line: 66, column: 35, scope: !7)
!28 = !DILocation(line: 66, column: 31, scope: !7)
!29 = !DILocation(line: 73, column: 35, scope: !7)
!30 = !DILocation(line: 73, column: 31, scope: !7)
!31 = !DILocation(line: 76, column: 35, scope: !7)
!32 = !DILocation(line: 76, column: 31, scope: !7)
!33 = !DILocation(line: 79, column: 35, scope: !7)
!34 = !DILocation(line: 79, column: 31, scope: !7)
!35 = !DILocation(line: 24, column: 26, scope: !7)
!36 = !DILocation(line: 81, column: 40, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 36, column: 19, scope: !7)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 40, column: 51, scope: !7)
!41 = !DILocation(line: 40, column: 43, scope: !7)
!42 = !DILocation(line: 42, column: 21, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 51, scope: !7)
!45 = !DILocation(line: 46, column: 43, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 19, scope: !7)
!49 = !DILocation(line: 53, column: 51, scope: !7)
!50 = !DILocation(line: 53, column: 43, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 21, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 51, scope: !7)
!55 = !DILocation(line: 60, column: 43, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 44, scope: !7)
!59 = !DILocation(line: 63, column: 36, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 48, scope: !7)
!63 = !DILocation(line: 66, column: 40, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 20, scope: !7)
!66 = !DILocation(line: 72, column: 20, scope: !7)
!67 = !DILocation(line: 73, column: 48, scope: !7)
!68 = !DILocation(line: 73, column: 40, scope: !7)
!69 = !DILocation(line: 74, column: 20, scope: !7)
!70 = !DILocation(line: 75, column: 20, scope: !7)
!71 = !DILocation(line: 76, column: 48, scope: !7)
!72 = !DILocation(line: 76, column: 40, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 20, scope: !7)
!75 = !DILocation(line: 79, column: 48, scope: !7)
!76 = !DILocation(line: 79, column: 40, scope: !7)
!77 = !DILocation(line: 80, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 124, scope: !7)
!79 = !DILocation(line: 81, column: 120, scope: !7)
!80 = !DILocation(line: 81, column: 112, scope: !7)
!81 = !DILocation(line: 81, column: 155, scope: !7)
!82 = !DILocation(line: 81, column: 143, scope: !7)
!83 = !DILocation(line: 81, column: 131, scope: !7)
!84 = !DILocation(line: 81, column: 48, scope: !7)
!85 = !DILocation(line: 81, column: 299, scope: !7)
!86 = !DILocation(line: 81, column: 357, scope: !7)
!87 = !DILocation(line: 82, column: 20, scope: !7)
!88 = !DILocation(line: 83, column: 43, scope: !7)
!89 = !DILocation(line: 84, column: 43, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlockFile(scope: !7, file: !92, discriminator: 0)
!92 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!93 = !DILocation(line: 85, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !93)
!97 = !DILocation(line: 86, column: 43, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !99)
!99 = !DILocation(line: 87, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !99)
!103 = !DILocation(line: 88, column: 43, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !105)
!105 = !DILocation(line: 89, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !105)
!109 = !DILocation(line: 90, column: 36, scope: !7)
!110 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !111)
!111 = !DILocation(line: 91, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !111)
!114 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !111)
!115 = !DILocation(line: 92, column: 40, scope: !7)
!116 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !117)
!117 = !DILocation(line: 93, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !117)
!121 = !DILocation(line: 94, column: 40, scope: !7)
!122 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !123)
!123 = !DILocation(line: 95, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !123)
!126 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !123)
!127 = !DILocation(line: 96, column: 40, scope: !7)
!128 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !129)
!129 = !DILocation(line: 97, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !129)
!133 = !DILocation(line: 98, column: 40, scope: !7)
!134 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !135)
!135 = !DILocation(line: 99, column: 42, scope: !7)
!136 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !135)
!137 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !135)
!138 = !DILocation(line: 103, column: 35, scope: !7)
!139 = !DILocation(line: 106, column: 35, scope: !7)
!140 = !DILocation(line: 109, column: 35, scope: !7)
!141 = !DILocation(line: 112, column: 35, scope: !7)
!142 = !DILocation(line: 115, column: 35, scope: !7)
!143 = !DILocation(line: 118, column: 35, scope: !7)
!144 = !DILocation(line: 121, column: 35, scope: !7)
!145 = !DILocation(line: 124, column: 35, scope: !7)
!146 = !DILocation(line: 125, column: 34, scope: !7)
!147 = !DILocation(line: 125, column: 30, scope: !7)
!148 = !DILocation(line: 125, column: 25, scope: !7)
!149 = !DILocation(line: 125, column: 46, scope: !7)
!150 = !DILocation(line: 126, column: 25, scope: !7)
!151 = !DILocation(line: 126, column: 46, scope: !7)
!152 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !135)
!153 = !DILocation(line: 127, column: 25, scope: !7)
!154 = !DILocation(line: 127, column: 37, scope: !7)
!155 = !DILocation(line: 127, column: 4, scope: !7)
