; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = icmp slt i32 %20, 64, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %22 = sdiv i32 %.frozen, 8, !dbg !16
  %23 = mul i32 %22, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen7 = freeze i32 %19, !dbg !18
  %24 = sdiv i32 %.frozen7, 256, !dbg !18
  %25 = mul i32 %24, 256, !dbg !19
  %.decomposed8 = sub i32 %.frozen7, %25, !dbg !19
  %26 = shl nsw i32 %.decomposed, 1, !dbg !20
  %27 = shl i32 %22, 5, !dbg !21
  %28 = add i32 %26, %27, !dbg !22
  %29 = shl i32 %15, 8, !dbg !23
  %30 = shl i32 %16, 8, !dbg !23
  %31 = shl i32 %17, 8, !dbg !23
  %32 = shl i32 %18, 8, !dbg !23
  %33 = add i32 %28, %29, !dbg !24
  %34 = add i32 %28, %30, !dbg !24
  %35 = add i32 %28, %31, !dbg !24
  %36 = add i32 %28, %32, !dbg !24
  %37 = sext i32 %33 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %34 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = sext i32 %35 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %36 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #2, !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #2, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #2, !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #2, !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = or disjoint i32 %26, 1, !dbg !27
  %54 = add i32 %53, %27, !dbg !28
  %55 = add i32 %54, %29, !dbg !29
  %56 = add i32 %54, %30, !dbg !29
  %57 = add i32 %54, %31, !dbg !29
  %58 = add i32 %54, %32, !dbg !29
  %59 = sext i32 %55 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = sext i32 %56 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = sext i32 %57 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !30
  %65 = sext i32 %58 to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %21) #2, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %21) #2, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %21) #2, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %21) #2, !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = add i32 %28, 16, !dbg !32
  %76 = add i32 %75, %29, !dbg !33
  %77 = add i32 %75, %30, !dbg !33
  %78 = add i32 %75, %31, !dbg !33
  %79 = add i32 %75, %32, !dbg !33
  %80 = sext i32 %76 to i64, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !34
  %82 = sext i32 %77 to i64, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !34
  %84 = sext i32 %78 to i64, !dbg !34
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !34
  %86 = sext i32 %79 to i64, !dbg !34
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !34
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #2, !dbg !35
  %89 = bitcast i32 %88 to float, !dbg !35
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %21) #2, !dbg !35
  %91 = bitcast i32 %90 to float, !dbg !35
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %21) #2, !dbg !35
  %93 = bitcast i32 %92 to float, !dbg !35
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %21) #2, !dbg !35
  %95 = bitcast i32 %94 to float, !dbg !35
  %96 = add i32 %28, 17, !dbg !36
  %97 = add i32 %96, %29, !dbg !37
  %98 = add i32 %96, %30, !dbg !37
  %99 = add i32 %96, %31, !dbg !37
  %100 = add i32 %96, %32, !dbg !37
  %101 = sext i32 %97 to i64, !dbg !38
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !38
  %103 = sext i32 %98 to i64, !dbg !38
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !38
  %105 = sext i32 %99 to i64, !dbg !38
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !38
  %107 = sext i32 %100 to i64, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !38
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %21) #2, !dbg !39
  %110 = bitcast i32 %109 to float, !dbg !39
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %21) #2, !dbg !39
  %112 = bitcast i32 %111 to float, !dbg !39
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %21) #2, !dbg !39
  %114 = bitcast i32 %113 to float, !dbg !39
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %21) #2, !dbg !39
  %116 = bitcast i32 %115 to float, !dbg !39
  %117 = fcmp ogt float %68, %46, !dbg !40
  %118 = fcmp ogt float %70, %48, !dbg !40
  %119 = fcmp ogt float %72, %50, !dbg !40
  %120 = fcmp ogt float %74, %52, !dbg !40
  %121 = fcmp uno float %68, 0.000000e+00, !dbg !44
  %122 = fcmp uno float %70, 0.000000e+00, !dbg !44
  %123 = fcmp uno float %72, 0.000000e+00, !dbg !44
  %124 = fcmp uno float %74, 0.000000e+00, !dbg !44
  %125 = or i1 %117, %121, !dbg !45
  %126 = or i1 %118, %122, !dbg !45
  %127 = or i1 %119, %123, !dbg !45
  %128 = or i1 %120, %124, !dbg !45
  %129 = select i1 %125, float %68, float %46, !dbg !46
  %130 = select i1 %126, float %70, float %48, !dbg !46
  %131 = select i1 %127, float %72, float %50, !dbg !46
  %132 = select i1 %128, float %74, float %52, !dbg !46
  %133 = fcmp olt float %129, %89, !dbg !47
  %134 = fcmp olt float %130, %91, !dbg !47
  %135 = fcmp olt float %131, %93, !dbg !47
  %136 = fcmp olt float %132, %95, !dbg !47
  %137 = fcmp uno float %89, 0.000000e+00, !dbg !49
  %138 = fcmp uno float %91, 0.000000e+00, !dbg !49
  %139 = fcmp uno float %93, 0.000000e+00, !dbg !49
  %140 = fcmp uno float %95, 0.000000e+00, !dbg !49
  %141 = or i1 %133, %137, !dbg !50
  %142 = or i1 %134, %138, !dbg !50
  %143 = or i1 %135, %139, !dbg !50
  %144 = or i1 %136, %140, !dbg !50
  %145 = select i1 %141, float %89, float %129, !dbg !51
  %146 = select i1 %142, float %91, float %130, !dbg !51
  %147 = select i1 %143, float %93, float %131, !dbg !51
  %148 = select i1 %144, float %95, float %132, !dbg !51
  %149 = fcmp olt float %145, %110, !dbg !52
  %150 = fcmp olt float %146, %112, !dbg !52
  %151 = fcmp olt float %147, %114, !dbg !52
  %152 = fcmp olt float %148, %116, !dbg !52
  %153 = fcmp uno float %110, 0.000000e+00, !dbg !54
  %154 = fcmp uno float %112, 0.000000e+00, !dbg !54
  %155 = fcmp uno float %114, 0.000000e+00, !dbg !54
  %156 = fcmp uno float %116, 0.000000e+00, !dbg !54
  %157 = or i1 %149, %153, !dbg !55
  %158 = or i1 %150, %154, !dbg !55
  %159 = or i1 %151, %155, !dbg !55
  %160 = or i1 %152, %156, !dbg !55
  %161 = zext i1 %117 to i8, !dbg !56
  %162 = zext i1 %118 to i8, !dbg !56
  %163 = zext i1 %119 to i8, !dbg !56
  %164 = zext i1 %120 to i8, !dbg !56
  %165 = select i1 %133, i8 2, i8 %161, !dbg !57
  %166 = select i1 %134, i8 2, i8 %162, !dbg !57
  %167 = select i1 %135, i8 2, i8 %163, !dbg !57
  %168 = select i1 %136, i8 2, i8 %164, !dbg !57
  %169 = select i1 %149, i8 3, i8 %165, !dbg !58
  %170 = select i1 %150, i8 3, i8 %166, !dbg !58
  %171 = select i1 %151, i8 3, i8 %167, !dbg !58
  %172 = select i1 %152, i8 3, i8 %168, !dbg !58
  %173 = shl i32 %20, 8, !dbg !59
  %174 = add i32 %.decomposed8, %173, !dbg !60
  %175 = shl i32 %24, 14, !dbg !61
  %176 = add i32 %174, %175, !dbg !62
  %177 = sext i32 %176 to i64, !dbg !63
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !63
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !64
  %180 = bitcast float %145 to i32, !dbg !64
  %181 = select i1 %157, i32 %109, i32 %180, !dbg !65
  %182 = insertelement <1 x i32> poison, i32 %181, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %182, i1 true) #2, !dbg !64
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !64
  %184 = bitcast float %146 to i32, !dbg !64
  %185 = select i1 %158, i32 %111, i32 %184, !dbg !65
  %186 = insertelement <1 x i32> poison, i32 %185, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %186, i1 true) #2, !dbg !64
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !64
  %188 = bitcast float %147 to i32, !dbg !64
  %189 = select i1 %159, i32 %113, i32 %188, !dbg !65
  %190 = insertelement <1 x i32> poison, i32 %189, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %190, i1 true) #2, !dbg !64
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !64
  %192 = bitcast float %148 to i32, !dbg !64
  %193 = select i1 %160, i32 %115, i32 %192, !dbg !65
  %194 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %194, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !64
  %.extract = load i32, ptr addrspace(3) %195, align 16, !dbg !64
  %196 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 4, !dbg !64
  %.extract4 = load i32, ptr addrspace(3) %196, align 4, !dbg !64
  %197 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 8, !dbg !64
  %.extract5 = load i32, ptr addrspace(3) %197, align 8, !dbg !64
  %198 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 12, !dbg !64
  %.extract6 = load i32, ptr addrspace(3) %198, align 4, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %178, i1 %21) #2, !dbg !64
  %199 = getelementptr i8, ptr addrspace(1) %2, i64 %177, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %200 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !67
  %201 = insertelement <1 x i8> poison, i8 %169, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %200, <1 x i8> %201, i1 true) #2, !dbg !67
  %202 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !67
  %203 = insertelement <1 x i8> poison, i8 %170, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %202, <1 x i8> %203, i1 true) #2, !dbg !67
  %204 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !67
  %205 = insertelement <1 x i8> poison, i8 %171, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %204, <1 x i8> %205, i1 true) #2, !dbg !67
  %206 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !67
  %207 = insertelement <1 x i8> poison, i8 %172, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %206, <1 x i8> %207, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %208 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !67
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %199, i1 %21) #2, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce43nudj7rtquv6yarc7d4fdkybxxs3no7fhoigkazgu3s4xr6px.py", directory: "inductor_cache/e4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 32, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 37, scope: !7)
!23 = !DILocation(line: 34, column: 49, scope: !7)
!24 = !DILocation(line: 34, column: 45, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 54, scope: !7)
!27 = !DILocation(line: 35, column: 34, scope: !7)
!28 = !DILocation(line: 35, column: 41, scope: !7)
!29 = !DILocation(line: 35, column: 49, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 58, scope: !7)
!32 = !DILocation(line: 36, column: 42, scope: !7)
!33 = !DILocation(line: 36, column: 50, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 59, scope: !7)
!36 = !DILocation(line: 37, column: 42, scope: !7)
!37 = !DILocation(line: 37, column: 50, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 59, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 38, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !48)
!48 = !DILocation(line: 39, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 40, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !53)
!56 = !DILocation(line: 44, column: 33, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 50, column: 35, scope: !7)
!59 = !DILocation(line: 51, column: 34, scope: !7)
!60 = !DILocation(line: 51, column: 30, scope: !7)
!61 = !DILocation(line: 51, column: 45, scope: !7)
!62 = !DILocation(line: 51, column: 39, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 56, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !53)
!66 = !DILocation(line: 52, column: 25, scope: !7)
!67 = !DILocation(line: 52, column: 57, scope: !7)
!68 = !DILocation(line: 52, column: 4, scope: !7)
