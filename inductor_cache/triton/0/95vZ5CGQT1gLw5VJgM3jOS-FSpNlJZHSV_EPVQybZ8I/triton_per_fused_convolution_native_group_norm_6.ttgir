#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0)
#loc1 = loc(unknown)
#loc22 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":43:26)
#loc29 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":51:26)
#loc46 = loc(callsite(#loc1 at #loc22))
#loc49 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_convolution_native_group_norm_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg8: i32 loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %6 = arith.divsi %4, %cst_0 : tensor<1x64xi32, #blocked1> loc(#loc5)
    %7 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
    %9 = arith.addi %5, %8 : tensor<1x64xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.addptr %10, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %12 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc9)
    %13 = tt.load %11, %12, %cst_1 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = triton_gpu.convert_layout %13 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc9)
    %15 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = tt.addptr %15, %6 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc10)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %18 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = tt.addptr %18, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc12)
    %20 = tt.load %19, %12, %cst_1 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc13)
    %21 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %22 = tt.addptr %21, %6 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc14)
    %23 = tt.load %22 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %24 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %25 = tt.addptr %24, %6 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc16)
    %26 = tt.load %25 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %27 = arith.addf %14, %17 : tensor<1x64xf32, #blocked1> loc(#loc18)
    %28 = triton_gpu.convert_layout %27 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc18)
    %29 = arith.addf %20, %28 : tensor<1x64xf32, #blocked> loc(#loc19)
    %30 = arith.select %12, %29, %cst_1 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc20)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc22)), %arg11: f32 loc(callsite(#loc1 at #loc22))):
      %65 = arith.addf %arg10, %arg11 : f32 loc(#loc50)
      tt.reduce.return %65 : f32 loc(#loc45)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %32 = triton_gpu.convert_layout %31 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc25)
    %34 = tt.expand_dims %31 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc25)
    %35 = arith.divf %33, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc24)
    %36 = arith.divf %34, %cst : tensor<1x1xf32, #blocked> loc(#loc24)
    %37 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc26)
    %38 = arith.subf %29, %37 : tensor<1x64xf32, #blocked> loc(#loc26)
    %39 = arith.mulf %38, %38 : tensor<1x64xf32, #blocked> loc(#loc27)
    %40 = arith.select %12, %39, %cst_1 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc28)
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc29)), %arg11: f32 loc(callsite(#loc1 at #loc29))):
      %65 = arith.addf %arg10, %arg11 : f32 loc(#loc51)
      tt.reduce.return %65 : f32 loc(#loc48)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %42 = triton_gpu.convert_layout %41 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc31)
    %44 = tt.expand_dims %41 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc31)
    %45 = arith.divf %43, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc32)
    %46 = arith.divf %44, %cst : tensor<1x1xf32, #blocked> loc(#loc32)
    %47 = arith.addf %45, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc33)
    %48 = arith.addf %46, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc33)
    %49 = tt.extern_elementwise %47 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc30)
    %50 = tt.extern_elementwise %48 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc30)
    %51 = tt.broadcast %50 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc34)
    %52 = arith.mulf %38, %51 : tensor<1x64xf32, #blocked> loc(#loc34)
    %53 = triton_gpu.convert_layout %52 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc34)
    %54 = arith.mulf %53, %23 : tensor<1x64xf32, #blocked1> loc(#loc35)
    %55 = arith.addf %54, %26 : tensor<1x64xf32, #blocked1> loc(#loc36)
    %56 = triton_gpu.convert_layout %27 : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc37)
    tt.store %11, %56, %12 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc37)
    %57 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc38)
    %58 = tt.addptr %57, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc38)
    %59 = triton_gpu.convert_layout %55 : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc39)
    tt.store %58, %59, %12 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc39)
    %60 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc40)
    %61 = tt.splat %60 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %62 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc41)
    tt.store %61, %49, %62 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %63 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc42)
    %64 = tt.splat %63 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    tt.store %64, %35, %62 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":23:28)
#loc3 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":25:21)
#loc4 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":26:34)
#loc5 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":31:19)
#loc6 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":32:42)
#loc7 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":32:39)
#loc8 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":32:34)
#loc9 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":32:47)
#loc10 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":33:30)
#loc11 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":33:35)
#loc12 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":34:30)
#loc13 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":34:43)
#loc14 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":35:31)
#loc15 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":35:36)
#loc16 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":36:31)
#loc17 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":36:36)
#loc18 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":37:18)
#loc19 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":38:18)
#loc20 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":42:34)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc24 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":46:20)
#loc25 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":43:29)
#loc26 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":47:19)
#loc27 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":48:20)
#loc28 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":50:35)
#loc30 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":57:28)
#loc31 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":51:29)
#loc32 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":54:20)
#loc33 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":56:20)
#loc34 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":58:20)
#loc35 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":59:20)
#loc36 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":60:20)
#loc37 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":61:47)
#loc38 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":62:25)
#loc39 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":62:45)
#loc40 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":63:25)
#loc41 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":63:37)
#loc42 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":64:25)
#loc43 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":64:37)
#loc44 = loc("inductor_cache/en/cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py":64:4)
#loc45 = loc(callsite(#loc21 at #loc22))
#loc47 = loc(callsite(#loc23 at #loc21))
#loc48 = loc(callsite(#loc21 at #loc29))
#loc50 = loc(callsite(#loc47 at #loc22))
#loc51 = loc(callsite(#loc47 at #loc29))
