; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = and i32 %13, 63, !dbg !12
  %17 = lshr i32 %16, 4, !dbg !13
  %18 = shl i32 %11, 6, !dbg !14
  %19 = or disjoint i32 %18, %16, !dbg !15
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %12, i32 0, i1 %12) #5, !dbg !17
  %23 = bitcast i32 %22 to float, !dbg !17
  %24 = zext nneg i32 %17 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %12, i32 0, i1 %12) #5, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !25
  %35 = fadd float %23, %27, !dbg !26
  %36 = fadd float %35, %30, !dbg !27
  %37 = select i1 %12, float %36, float 0.000000e+00, !dbg !28
  %38 = bitcast float %37 to i32, !dbg !29
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = fadd float %37, %40, !dbg !33
  %42 = bitcast float %41 to i32, !dbg !29
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = fadd float %41, %44, !dbg !33
  %46 = bitcast float %45 to i32, !dbg !29
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = fadd float %45, %48, !dbg !33
  %50 = bitcast float %49 to i32, !dbg !29
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = fadd float %49, %52, !dbg !33
  %54 = bitcast float %53 to i32, !dbg !29
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !29
  %56 = bitcast i32 %55 to float, !dbg !29
  %57 = fadd float %53, %56, !dbg !33
  %58 = icmp eq i32 %14, 0, !dbg !29
  %59 = and i32 %15, 1, !dbg !29
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !29
  %61 = bitcast float %57 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 %58) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %62 = icmp slt i32 %13, 2, !dbg !29
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %62) #5, !dbg !29
  %65 = bitcast i32 %64 to float, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %65, %67, !dbg !33
  %69 = and i32 %13, 1, !dbg !29
  %70 = icmp eq i32 %69, 0, !dbg !29
  %71 = and i1 %62, %70, !dbg !29
  %72 = bitcast float %68 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %72, i1 %71) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %73 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 6.400000e+01) #5, !dbg !35
  %75 = fsub float %36, %74, !dbg !36
  %76 = fmul float %75, %75, !dbg !37
  %77 = select i1 %12, float %76, float 0.000000e+00, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %78 = bitcast float %77 to i32, !dbg !39
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !39
  %80 = bitcast i32 %79 to float, !dbg !39
  %81 = fadd float %77, %80, !dbg !41
  %82 = bitcast float %81 to i32, !dbg !39
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !39
  %84 = bitcast i32 %83 to float, !dbg !39
  %85 = fadd float %81, %84, !dbg !41
  %86 = bitcast float %85 to i32, !dbg !39
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !39
  %88 = bitcast i32 %87 to float, !dbg !39
  %89 = fadd float %85, %88, !dbg !41
  %90 = bitcast float %89 to i32, !dbg !39
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !39
  %92 = bitcast i32 %91 to float, !dbg !39
  %93 = fadd float %89, %92, !dbg !41
  %94 = bitcast float %93 to i32, !dbg !39
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !39
  %96 = bitcast i32 %95 to float, !dbg !39
  %97 = fadd float %93, %96, !dbg !41
  %98 = bitcast float %97 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %98, i1 %58) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %62) #5, !dbg !39
  %100 = bitcast i32 %99 to float, !dbg !39
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !39
  %102 = bitcast i32 %101 to float, !dbg !39
  %103 = fadd float %100, %102, !dbg !41
  %104 = bitcast float %103 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %104, i1 %71) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %105 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 6.400000e+01) #5, !dbg !42
  %107 = fadd float %106, 0x3EE4F8B580000000, !dbg !43
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %108, 0, !dbg !44
  br i1 %.not.i, label %111, label %109, !dbg !44

109:                                              ; preds = %10
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

111:                                              ; preds = %10
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %109, %111
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], !dbg !44
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i1 = icmp eq i32 %113, 0, !dbg !44
  br i1 %.not.i1, label %116, label %114, !dbg !44

114:                                              ; preds = %__nv_rsqrtf.exit
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

116:                                              ; preds = %__nv_rsqrtf.exit
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

__nv_rsqrtf.exit3:                                ; preds = %114, %116
  %.0.i2 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !44
  %118 = bitcast i32 %34 to float, !dbg !25
  %119 = bitcast i32 %32 to float, !dbg !23
  %120 = fmul float %75, %.0.i2, !dbg !45
  %121 = fmul float %120, %119, !dbg !46
  %122 = fadd float %121, %118, !dbg !47
  %123 = bitcast float %35 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %21, i1 %12) #5, !dbg !48
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !49
  %125 = bitcast float %122 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %124, i1 %12) #5, !dbg !50
  %126 = sext i32 %11 to i64, !dbg !51
  %127 = getelementptr float, ptr addrspace(1) %7, i64 %126, !dbg !51
  %128 = icmp eq i32 %16, 0, !dbg !52
  %129 = bitcast float %.0.i to i32, !dbg !52
  %130 = and i1 %128, %12, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %127, i1 %130) #5, !dbg !52
  %131 = getelementptr float, ptr addrspace(1) %5, i64 %126, !dbg !53
  %132 = bitcast float %74 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %131, i1 %130) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cenyiulkpvoho4bcwkthhgismwr3bwk4vbu3jq3bzbz57iyujykw.py", directory: "inductor_cache/en")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_6", linkageName: "triton_per_fused_convolution_native_group_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 34, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 43, column: 26, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 19, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 35, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !40)
!40 = !DILocation(line: 51, column: 26, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !40)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 28, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 47, scope: !7)
!49 = !DILocation(line: 62, column: 25, scope: !7)
!50 = !DILocation(line: 62, column: 45, scope: !7)
!51 = !DILocation(line: 63, column: 25, scope: !7)
!52 = !DILocation(line: 63, column: 37, scope: !7)
!53 = !DILocation(line: 64, column: 25, scope: !7)
!54 = !DILocation(line: 64, column: 37, scope: !7)
!55 = !DILocation(line: 64, column: 4, scope: !7)
