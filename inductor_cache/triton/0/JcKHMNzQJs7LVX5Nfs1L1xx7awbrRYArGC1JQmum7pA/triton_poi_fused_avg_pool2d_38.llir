; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_38(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 887808, !dbg !14
  %12 = icmp slt i32 %10, 887808, !dbg !14
  %13 = add i32 %9, -13824, !dbg !15
  %14 = add i32 %9, -13312, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = add i32 %9, -13056, !dbg !17
  %20 = add i32 %9, -12544, !dbg !17
  %21 = sext i32 %19 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = add i32 %9, -12288, !dbg !19
  %26 = add i32 %9, -11776, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = add i32 %9, -768, !dbg !21
  %32 = add i32 %9, -256, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %9 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = sext i32 %10 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = add i32 %9, 768, !dbg !24
  %42 = add i32 %9, 1280, !dbg !24
  %43 = sext i32 %41 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = add i32 %9, 12288, !dbg !26
  %48 = add i32 %9, 12800, !dbg !26
  %49 = sext i32 %47 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = sext i32 %48 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = add i32 %9, 13056, !dbg !28
  %54 = add i32 %9, 13568, !dbg !28
  %55 = sext i32 %53 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !29
  %57 = sext i32 %54 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !29
  %59 = add i32 %9, 13824, !dbg !30
  %60 = add i32 %9, 14336, !dbg !30
  %61 = sext i32 %59 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !31
  %63 = sext i32 %60 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !31
  %65 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !32
  %66 = shufflevector <2 x i32> %65, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %67 = sdiv <2 x i32> %66, <i32 768, i32 13056>, !dbg !32
  %68 = srem <2 x i32> %67, splat (i32 17), !dbg !33
  %69 = extractelement <2 x i32> %68, i64 1, !dbg !34
  %70 = icmp sgt i32 %69, 0, !dbg !35
  %71 = extractelement <2 x i32> %68, i64 0, !dbg !36
  %72 = add nsw i32 %71, -1, !dbg !37
  %73 = icmp sgt i32 %71, 0, !dbg !38
  %74 = and i1 %70, %73, !dbg !39
  %75 = and i1 %11, %74, !dbg !40
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !41
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !41
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !41
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !41
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !41
  %81 = bitcast i32 %77 to float, !dbg !41
  %82 = bitcast i32 %78 to float, !dbg !41
  %83 = bitcast i32 %79 to float, !dbg !41
  %84 = bitcast i32 %80 to float, !dbg !41
  %85 = icmp sgt i32 %71, -1, !dbg !42
  %86 = and i1 %70, %85, !dbg !43
  %87 = and i1 %11, %86, !dbg !44
  %88 = icmp sgt i32 %69, -1, !dbg !45
  %89 = and i1 %88, %73, !dbg !46
  %90 = and i1 %11, %89, !dbg !47
  %91 = or i32 %69, %71, !dbg !36
  %92 = icmp sgt i32 %91, -1, !dbg !36
  %93 = and i1 %11, %92, !dbg !48
  %94 = add nsw <2 x i32> %68, <i32 2, i32 -1>, !dbg !49
  %95 = shufflevector <2 x i32> %68, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !50
  %96 = icmp sgt <2 x i32> %95, <i32 14, i32 1>, !dbg !50
  %97 = insertelement <2 x i32> <i32 17, i32 poison>, i32 %72, i64 1, !dbg !51
  %98 = select <2 x i1> %96, <2 x i32> %97, <2 x i32> zeroinitializer, !dbg !51
  %99 = insertelement <2 x i32> %95, i32 1, i64 1, !dbg !52
  %100 = insertelement <2 x i32> %68, i32 15, i64 0, !dbg !52
  %101 = icmp slt <2 x i32> %99, %100, !dbg !52
  %102 = select <2 x i1> %101, <2 x i32> %94, <2 x i32> zeroinitializer, !dbg !53
  %103 = add nsw <2 x i32> %98, %102, !dbg !54
  %104 = mul nsw <2 x i32> %98, %102, !dbg !54
  %105 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !32
  %106 = shufflevector <2 x i32> %105, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %107 = sdiv <2 x i32> %106, <i32 768, i32 13056>, !dbg !32
  %108 = srem <2 x i32> %107, splat (i32 17), !dbg !33
  %109 = extractelement <2 x i32> %108, i64 1, !dbg !34
  %110 = icmp sgt i32 %109, 0, !dbg !35
  %111 = extractelement <2 x i32> %108, i64 0, !dbg !36
  %112 = add nsw i32 %111, -1, !dbg !37
  %113 = icmp sgt i32 %111, 0, !dbg !38
  %114 = and i1 %110, %113, !dbg !39
  %115 = and i1 %12, %114, !dbg !40
  %116 = icmp sgt i32 %111, -1, !dbg !42
  %117 = and i1 %110, %116, !dbg !43
  %118 = and i1 %12, %117, !dbg !44
  %119 = icmp sgt i32 %109, -1, !dbg !45
  %120 = and i1 %119, %113, !dbg !46
  %121 = and i1 %12, %120, !dbg !47
  %122 = or i32 %109, %111, !dbg !36
  %123 = icmp sgt i32 %122, -1, !dbg !36
  %124 = and i1 %12, %123, !dbg !48
  %125 = shufflevector <2 x i32> %108, <2 x i32> %68, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !55
  %126 = add nsw <4 x i32> %125, splat (i32 1), !dbg !55
  %127 = icmp ult <4 x i32> %126, splat (i32 17), !dbg !55
  %128 = extractelement <4 x i1> %127, i64 3, !dbg !56
  %129 = and i1 %70, %128, !dbg !56
  %130 = and i1 %11, %129, !dbg !57
  %131 = and i1 %88, %128, !dbg !58
  %132 = and i1 %11, %131, !dbg !59
  %133 = extractelement <4 x i1> %127, i64 1, !dbg !60
  %134 = and i1 %73, %133, !dbg !60
  %135 = and i1 %11, %134, !dbg !61
  %136 = and i1 %85, %133, !dbg !62
  %137 = and i1 %11, %136, !dbg !63
  %138 = and i1 %133, %128, !dbg !64
  %139 = and i1 %11, %138, !dbg !65
  %140 = extractelement <4 x i1> %127, i64 2, !dbg !56
  %141 = and i1 %110, %140, !dbg !56
  %142 = and i1 %12, %141, !dbg !57
  %143 = and i1 %119, %140, !dbg !58
  %144 = and i1 %12, %143, !dbg !59
  %145 = extractelement <4 x i1> %127, i64 0, !dbg !60
  %146 = and i1 %113, %145, !dbg !60
  %147 = and i1 %12, %146, !dbg !61
  %148 = and i1 %116, %145, !dbg !62
  %149 = and i1 %12, %148, !dbg !63
  %150 = and i1 %145, %140, !dbg !64
  %151 = and i1 %12, %150, !dbg !65
  %152 = add nsw <2 x i32> %108, <i32 2, i32 -1>, !dbg !49
  %153 = shufflevector <2 x i32> %108, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !50
  %154 = icmp sgt <2 x i32> %153, <i32 14, i32 1>, !dbg !50
  %155 = insertelement <2 x i32> <i32 17, i32 poison>, i32 %112, i64 1, !dbg !51
  %156 = select <2 x i1> %154, <2 x i32> %155, <2 x i32> zeroinitializer, !dbg !51
  %157 = insertelement <2 x i32> %153, i32 1, i64 1, !dbg !52
  %158 = insertelement <2 x i32> %108, i32 15, i64 0, !dbg !52
  %159 = icmp slt <2 x i32> %157, %158, !dbg !52
  %160 = select <2 x i1> %159, <2 x i32> %152, <2 x i32> zeroinitializer, !dbg !53
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #1, !dbg !41
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !41
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !41
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !41
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !41
  %166 = bitcast i32 %162 to float, !dbg !41
  %167 = bitcast i32 %163 to float, !dbg !41
  %168 = bitcast i32 %164 to float, !dbg !41
  %169 = bitcast i32 %165 to float, !dbg !41
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #1, !dbg !66
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !66
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !66
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !66
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !66
  %175 = bitcast i32 %171 to float, !dbg !66
  %176 = bitcast i32 %172 to float, !dbg !66
  %177 = bitcast i32 %173 to float, !dbg !66
  %178 = bitcast i32 %174 to float, !dbg !66
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #1, !dbg !66
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !66
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !66
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !66
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !66
  %184 = bitcast i32 %180 to float, !dbg !66
  %185 = bitcast i32 %181 to float, !dbg !66
  %186 = bitcast i32 %182 to float, !dbg !66
  %187 = bitcast i32 %183 to float, !dbg !66
  %188 = fadd float %81, %175, !dbg !67
  %189 = fadd float %82, %176, !dbg !67
  %190 = fadd float %83, %177, !dbg !67
  %191 = fadd float %84, %178, !dbg !67
  %192 = fadd float %166, %184, !dbg !67
  %193 = fadd float %167, %185, !dbg !67
  %194 = fadd float %168, %186, !dbg !67
  %195 = fadd float %169, %187, !dbg !67
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #1, !dbg !68
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !68
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !68
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !68
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !68
  %201 = bitcast i32 %197 to float, !dbg !68
  %202 = bitcast i32 %198 to float, !dbg !68
  %203 = bitcast i32 %199 to float, !dbg !68
  %204 = bitcast i32 %200 to float, !dbg !68
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #1, !dbg !68
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !68
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !68
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !68
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !68
  %210 = bitcast i32 %206 to float, !dbg !68
  %211 = bitcast i32 %207 to float, !dbg !68
  %212 = bitcast i32 %208 to float, !dbg !68
  %213 = bitcast i32 %209 to float, !dbg !68
  %214 = fadd float %188, %201, !dbg !69
  %215 = fadd float %189, %202, !dbg !69
  %216 = fadd float %190, %203, !dbg !69
  %217 = fadd float %191, %204, !dbg !69
  %218 = fadd float %192, %210, !dbg !69
  %219 = fadd float %193, %211, !dbg !69
  %220 = fadd float %194, %212, !dbg !69
  %221 = fadd float %195, %213, !dbg !69
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !70
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !70
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !70
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !70
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !70
  %227 = bitcast i32 %223 to float, !dbg !70
  %228 = bitcast i32 %224 to float, !dbg !70
  %229 = bitcast i32 %225 to float, !dbg !70
  %230 = bitcast i32 %226 to float, !dbg !70
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #1, !dbg !70
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !70
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !70
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !70
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !70
  %236 = bitcast i32 %232 to float, !dbg !70
  %237 = bitcast i32 %233 to float, !dbg !70
  %238 = bitcast i32 %234 to float, !dbg !70
  %239 = bitcast i32 %235 to float, !dbg !70
  %240 = fadd float %214, %227, !dbg !71
  %241 = fadd float %215, %228, !dbg !71
  %242 = fadd float %216, %229, !dbg !71
  %243 = fadd float %217, %230, !dbg !71
  %244 = fadd float %218, %236, !dbg !71
  %245 = fadd float %219, %237, !dbg !71
  %246 = fadd float %220, %238, !dbg !71
  %247 = fadd float %221, %239, !dbg !71
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !72
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !72
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !72
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !72
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !72
  %253 = bitcast i32 %249 to float, !dbg !72
  %254 = bitcast i32 %250 to float, !dbg !72
  %255 = bitcast i32 %251 to float, !dbg !72
  %256 = bitcast i32 %252 to float, !dbg !72
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #1, !dbg !72
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !72
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !72
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !72
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !72
  %262 = bitcast i32 %258 to float, !dbg !72
  %263 = bitcast i32 %259 to float, !dbg !72
  %264 = bitcast i32 %260 to float, !dbg !72
  %265 = bitcast i32 %261 to float, !dbg !72
  %266 = fadd float %240, %253, !dbg !73
  %267 = fadd float %241, %254, !dbg !73
  %268 = fadd float %242, %255, !dbg !73
  %269 = fadd float %243, %256, !dbg !73
  %270 = fadd float %244, %262, !dbg !73
  %271 = fadd float %245, %263, !dbg !73
  %272 = fadd float %246, %264, !dbg !73
  %273 = fadd float %247, %265, !dbg !73
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #1, !dbg !74
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !74
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !74
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !74
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !74
  %279 = bitcast i32 %275 to float, !dbg !74
  %280 = bitcast i32 %276 to float, !dbg !74
  %281 = bitcast i32 %277 to float, !dbg !74
  %282 = bitcast i32 %278 to float, !dbg !74
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144) #1, !dbg !74
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !74
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !74
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !74
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !74
  %288 = bitcast i32 %284 to float, !dbg !74
  %289 = bitcast i32 %285 to float, !dbg !74
  %290 = bitcast i32 %286 to float, !dbg !74
  %291 = bitcast i32 %287 to float, !dbg !74
  %292 = fadd float %266, %279, !dbg !75
  %293 = fadd float %267, %280, !dbg !75
  %294 = fadd float %268, %281, !dbg !75
  %295 = fadd float %269, %282, !dbg !75
  %296 = fadd float %270, %288, !dbg !75
  %297 = fadd float %271, %289, !dbg !75
  %298 = fadd float %272, %290, !dbg !75
  %299 = fadd float %273, %291, !dbg !75
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #1, !dbg !76
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !76
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !76
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !76
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !76
  %305 = bitcast i32 %301 to float, !dbg !76
  %306 = bitcast i32 %302 to float, !dbg !76
  %307 = bitcast i32 %303 to float, !dbg !76
  %308 = bitcast i32 %304 to float, !dbg !76
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147) #1, !dbg !76
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !76
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !76
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !76
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !76
  %314 = bitcast i32 %310 to float, !dbg !76
  %315 = bitcast i32 %311 to float, !dbg !76
  %316 = bitcast i32 %312 to float, !dbg !76
  %317 = bitcast i32 %313 to float, !dbg !76
  %318 = fadd float %292, %305, !dbg !77
  %319 = fadd float %293, %306, !dbg !77
  %320 = fadd float %294, %307, !dbg !77
  %321 = fadd float %295, %308, !dbg !77
  %322 = fadd float %296, %314, !dbg !77
  %323 = fadd float %297, %315, !dbg !77
  %324 = fadd float %298, %316, !dbg !77
  %325 = fadd float %299, %317, !dbg !77
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137) #1, !dbg !78
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !78
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !78
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !78
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !78
  %331 = bitcast i32 %327 to float, !dbg !78
  %332 = bitcast i32 %328 to float, !dbg !78
  %333 = bitcast i32 %329 to float, !dbg !78
  %334 = bitcast i32 %330 to float, !dbg !78
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149) #1, !dbg !78
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !78
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !78
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !78
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !78
  %340 = bitcast i32 %336 to float, !dbg !78
  %341 = bitcast i32 %337 to float, !dbg !78
  %342 = bitcast i32 %338 to float, !dbg !78
  %343 = bitcast i32 %339 to float, !dbg !78
  %344 = fadd float %318, %331, !dbg !79
  %345 = fadd float %319, %332, !dbg !79
  %346 = fadd float %320, %333, !dbg !79
  %347 = fadd float %321, %334, !dbg !79
  %348 = fadd float %322, %340, !dbg !79
  %349 = fadd float %323, %341, !dbg !79
  %350 = fadd float %324, %342, !dbg !79
  %351 = fadd float %325, %343, !dbg !79
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #1, !dbg !80
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !80
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !80
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !80
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !80
  %357 = bitcast i32 %353 to float, !dbg !80
  %358 = bitcast i32 %354 to float, !dbg !80
  %359 = bitcast i32 %355 to float, !dbg !80
  %360 = bitcast i32 %356 to float, !dbg !80
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %151, i32 0, i1 %151, i32 0, i1 %151, i32 0, i1 %151, i32 0, i1 %151) #1, !dbg !80
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !80
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !80
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !80
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !80
  %366 = bitcast i32 %362 to float, !dbg !80
  %367 = bitcast i32 %363 to float, !dbg !80
  %368 = bitcast i32 %364 to float, !dbg !80
  %369 = bitcast i32 %365 to float, !dbg !80
  %370 = fadd float %344, %357, !dbg !81
  %371 = fadd float %345, %358, !dbg !81
  %372 = fadd float %346, %359, !dbg !81
  %373 = fadd float %347, %360, !dbg !81
  %374 = fadd float %348, %366, !dbg !81
  %375 = fadd float %349, %367, !dbg !81
  %376 = fadd float %350, %368, !dbg !81
  %377 = fadd float %351, %369, !dbg !81
  %378 = add nsw <2 x i32> %156, %160, !dbg !54
  %379 = mul nsw <2 x i32> %156, %160, !dbg !54
  %380 = add nsw i32 %69, 2, !dbg !82
  %381 = add nsw i32 %109, 2, !dbg !82
  %382 = icmp sgt i32 %69, 14, !dbg !83
  %383 = icmp sgt i32 %109, 14, !dbg !83
  %384 = select i1 %382, i32 17, i32 0, !dbg !84
  %385 = select i1 %383, i32 17, i32 0, !dbg !84
  %386 = icmp slt i32 %69, 15, !dbg !34
  %387 = icmp slt i32 %109, 15, !dbg !34
  %388 = select i1 %386, i32 %380, i32 0, !dbg !85
  %389 = select i1 %387, i32 %381, i32 0, !dbg !85
  %390 = add nsw i32 %384, %388, !dbg !86
  %391 = add nsw i32 %385, %389, !dbg !86
  %392 = extractelement <2 x i32> %103, i64 0, !dbg !87
  %393 = mul nsw i32 %392, %390, !dbg !88
  %394 = extractelement <2 x i32> %378, i64 0, !dbg !87
  %395 = mul nsw i32 %394, %391, !dbg !88
  %396 = extractelement <2 x i32> %98, i64 1, !dbg !87
  %.neg = mul nsw i32 %390, %396, !dbg !87
  %397 = extractelement <2 x i32> %102, i64 1, !dbg !87
  %.neg1 = mul nsw i32 %392, %397, !dbg !87
  %reass.add = add nsw i32 %.neg, %.neg1
  %398 = extractelement <2 x i32> %104, i64 1, !dbg !89
  %399 = add nsw i32 %393, %398, !dbg !89
  %400 = sub nsw i32 %399, %reass.add, !dbg !87
  %401 = extractelement <2 x i32> %156, i64 1, !dbg !87
  %.neg3 = mul nsw i32 %391, %401, !dbg !87
  %402 = extractelement <2 x i32> %160, i64 1, !dbg !87
  %.neg4 = mul nsw i32 %394, %402, !dbg !87
  %reass.add6 = add nsw i32 %.neg3, %.neg4
  %403 = extractelement <2 x i32> %379, i64 1, !dbg !89
  %404 = add nsw i32 %395, %403, !dbg !89
  %405 = sub nsw i32 %404, %reass.add6, !dbg !87
  %406 = sitofp i32 %400 to float, !dbg !90
  %407 = sitofp i32 %405 to float, !dbg !90
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %406) #1, !dbg !90
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float %406) #1, !dbg !90
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %406) #1, !dbg !90
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %406) #1, !dbg !90
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %407) #1, !dbg !90
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float %407) #1, !dbg !90
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %376, float %407) #1, !dbg !90
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %407) #1, !dbg !90
  %416 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !91
  %417 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !91
  %418 = bitcast float %408 to i32, !dbg !92
  %419 = bitcast float %409 to i32, !dbg !92
  %420 = bitcast float %410 to i32, !dbg !92
  %421 = bitcast float %411 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %418, i32 %419, i32 %420, i32 %421, ptr addrspace(1) %416, i1 %11) #1, !dbg !92
  %422 = bitcast float %412 to i32, !dbg !92
  %423 = bitcast float %413 to i32, !dbg !92
  %424 = bitcast float %414 to i32, !dbg !92
  %425 = bitcast float %415 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %422, i32 %423, i32 %424, i32 %425, ptr addrspace(1) %417, i1 %12) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ced334b6wsv5rxk2bxpzmvuntiauf6737pmakqvmtiy7p7shsshp.py", directory: "inductor_cache/ed")
!4 = !{ptr @triton_poi_fused_avg_pool2d_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_38", linkageName: "triton_poi_fused_avg_pool2d_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 42, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 42, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 42, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 40, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 37, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 39, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 39, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 39, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 25, column: 21, scope: !7)
!33 = !DILocation(line: 25, column: 28, scope: !7)
!34 = !DILocation(line: 79, column: 256, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 60, column: 20, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 34, column: 19, scope: !7)
!39 = !DILocation(line: 37, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 55, scope: !7)
!41 = !DILocation(line: 38, column: 47, scope: !7)
!42 = !DILocation(line: 40, column: 21, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 55, scope: !7)
!45 = !DILocation(line: 54, column: 21, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 53, scope: !7)
!48 = !DILocation(line: 61, column: 44, scope: !7)
!49 = !DILocation(line: 79, column: 166, scope: !7)
!50 = !DILocation(line: 79, column: 162, scope: !7)
!51 = !DILocation(line: 79, column: 153, scope: !7)
!52 = !DILocation(line: 79, column: 197, scope: !7)
!53 = !DILocation(line: 79, column: 185, scope: !7)
!54 = !DILocation(line: 79, column: 173, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 50, column: 19, scope: !7)
!57 = !DILocation(line: 51, column: 55, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 50, scope: !7)
!60 = !DILocation(line: 70, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 52, scope: !7)
!62 = !DILocation(line: 73, column: 20, scope: !7)
!63 = !DILocation(line: 74, column: 52, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 52, scope: !7)
!66 = !DILocation(line: 44, column: 47, scope: !7)
!67 = !DILocation(line: 45, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 47, scope: !7)
!69 = !DILocation(line: 52, column: 20, scope: !7)
!70 = !DILocation(line: 58, column: 45, scope: !7)
!71 = !DILocation(line: 59, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 36, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 42, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 44, scope: !7)
!77 = !DILocation(line: 72, column: 20, scope: !7)
!78 = !DILocation(line: 74, column: 44, scope: !7)
!79 = !DILocation(line: 75, column: 20, scope: !7)
!80 = !DILocation(line: 77, column: 44, scope: !7)
!81 = !DILocation(line: 78, column: 20, scope: !7)
!82 = !DILocation(line: 79, column: 225, scope: !7)
!83 = !DILocation(line: 79, column: 221, scope: !7)
!84 = !DILocation(line: 79, column: 212, scope: !7)
!85 = !DILocation(line: 79, column: 244, scope: !7)
!86 = !DILocation(line: 79, column: 232, scope: !7)
!87 = !DILocation(line: 79, column: 398, scope: !7)
!88 = !DILocation(line: 79, column: 204, scope: !7)
!89 = !DILocation(line: 79, column: 144, scope: !7)
!90 = !DILocation(line: 80, column: 20, scope: !7)
!91 = !DILocation(line: 81, column: 25, scope: !7)
!92 = !DILocation(line: 81, column: 37, scope: !7)
!93 = !DILocation(line: 81, column: 4, scope: !7)
