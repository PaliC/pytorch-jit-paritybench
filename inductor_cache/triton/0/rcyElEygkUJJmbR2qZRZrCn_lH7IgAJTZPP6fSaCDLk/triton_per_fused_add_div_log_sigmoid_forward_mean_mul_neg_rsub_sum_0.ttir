#loc = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":19:0)
#loc1 = loc(unknown)
#loc103 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":118:26)
#loc128 = loc(callsite(#loc1 at #loc103))
module {
  tt.func public @triton_per_fused_add_div_log_sigmoid_forward_mean_mul_neg_rsub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<6.400000e+01> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<2.500000e-01> : tensor<1x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_3 = arith.constant dense<3> : tensor<1x64xi32> loc(#loc1)
    %cst_4 = arith.constant dense<2> : tensor<1x64xi32> loc(#loc1)
    %cst_5 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<1x64xi32> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc3)
    %2 = arith.muli %1, %cst_6 : tensor<1x64xi32> loc(#loc4)
    %3 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc5)
    %4 = tt.addptr %3, %2 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc5)
    %5 = tt.load %4 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc6)
    %6 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc7)
    %7 = tt.addptr %6, %2 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc7)
    %8 = tt.load %7 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc8)
    %9 = arith.addi %2, %cst_5 : tensor<1x64xi32> loc(#loc9)
    %10 = tt.addptr %3, %9 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc10)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc11)
    %12 = tt.addptr %6, %9 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc12)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc13)
    %14 = arith.addi %2, %cst_4 : tensor<1x64xi32> loc(#loc14)
    %15 = tt.addptr %3, %14 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc15)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc16)
    %17 = tt.addptr %6, %14 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc17)
    %18 = tt.load %17 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc18)
    %19 = arith.addi %2, %cst_3 : tensor<1x64xi32> loc(#loc19)
    %20 = tt.addptr %3, %19 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc20)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc21)
    %22 = tt.addptr %6, %19 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc22)
    %23 = tt.load %22 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc23)
    %24 = arith.cmpf olt, %cst_2, %8 : tensor<1x64xf32> loc(#loc111)
    %25 = arith.select %24, %cst_2, %8 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc112)
    %26 = math.absf %8 : tensor<1x64xf32> loc(#loc27)
    %27 = arith.subf %cst_2, %26 : tensor<1x64xf32> loc(#loc28)
    %28 = math.exp %27 : tensor<1x64xf32> loc(#loc29)
    %29 = tt.extern_elementwise %28 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc30)
    %30 = arith.subf %25, %29 : tensor<1x64xf32> loc(#loc31)
    %31 = arith.mulf %5, %30 : tensor<1x64xf32> loc(#loc32)
    %32 = arith.subf %cst_1, %5 : tensor<1x64xf32> loc(#loc33)
    %33 = arith.subf %cst_2, %8 : tensor<1x64xf32> loc(#loc34)
    %34 = arith.cmpf olt, %cst_2, %33 : tensor<1x64xf32> loc(#loc113)
    %35 = arith.select %34, %cst_2, %33 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc114)
    %36 = math.absf %33 : tensor<1x64xf32> loc(#loc36)
    %37 = arith.subf %cst_2, %36 : tensor<1x64xf32> loc(#loc37)
    %38 = math.exp %37 : tensor<1x64xf32> loc(#loc38)
    %39 = tt.extern_elementwise %38 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc39)
    %40 = arith.subf %35, %39 : tensor<1x64xf32> loc(#loc40)
    %41 = arith.mulf %32, %40 : tensor<1x64xf32> loc(#loc41)
    %42 = arith.addf %31, %41 : tensor<1x64xf32> loc(#loc42)
    %43 = arith.subf %cst_2, %42 : tensor<1x64xf32> loc(#loc43)
    %44 = arith.cmpf olt, %cst_2, %13 : tensor<1x64xf32> loc(#loc115)
    %45 = arith.select %44, %cst_2, %13 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc116)
    %46 = math.absf %13 : tensor<1x64xf32> loc(#loc45)
    %47 = arith.subf %cst_2, %46 : tensor<1x64xf32> loc(#loc46)
    %48 = math.exp %47 : tensor<1x64xf32> loc(#loc47)
    %49 = tt.extern_elementwise %48 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc48)
    %50 = arith.subf %45, %49 : tensor<1x64xf32> loc(#loc49)
    %51 = arith.mulf %11, %50 : tensor<1x64xf32> loc(#loc50)
    %52 = arith.subf %cst_1, %11 : tensor<1x64xf32> loc(#loc51)
    %53 = arith.subf %cst_2, %13 : tensor<1x64xf32> loc(#loc52)
    %54 = arith.cmpf olt, %cst_2, %53 : tensor<1x64xf32> loc(#loc117)
    %55 = arith.select %54, %cst_2, %53 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc118)
    %56 = math.absf %53 : tensor<1x64xf32> loc(#loc54)
    %57 = arith.subf %cst_2, %56 : tensor<1x64xf32> loc(#loc55)
    %58 = math.exp %57 : tensor<1x64xf32> loc(#loc56)
    %59 = tt.extern_elementwise %58 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc57)
    %60 = arith.subf %55, %59 : tensor<1x64xf32> loc(#loc58)
    %61 = arith.mulf %52, %60 : tensor<1x64xf32> loc(#loc59)
    %62 = arith.addf %51, %61 : tensor<1x64xf32> loc(#loc60)
    %63 = arith.subf %cst_2, %62 : tensor<1x64xf32> loc(#loc61)
    %64 = arith.addf %43, %63 : tensor<1x64xf32> loc(#loc62)
    %65 = arith.cmpf olt, %cst_2, %18 : tensor<1x64xf32> loc(#loc119)
    %66 = arith.select %65, %cst_2, %18 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc120)
    %67 = math.absf %18 : tensor<1x64xf32> loc(#loc64)
    %68 = arith.subf %cst_2, %67 : tensor<1x64xf32> loc(#loc65)
    %69 = math.exp %68 : tensor<1x64xf32> loc(#loc66)
    %70 = tt.extern_elementwise %69 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc67)
    %71 = arith.subf %66, %70 : tensor<1x64xf32> loc(#loc68)
    %72 = arith.mulf %16, %71 : tensor<1x64xf32> loc(#loc69)
    %73 = arith.subf %cst_1, %16 : tensor<1x64xf32> loc(#loc70)
    %74 = arith.subf %cst_2, %18 : tensor<1x64xf32> loc(#loc71)
    %75 = arith.cmpf olt, %cst_2, %74 : tensor<1x64xf32> loc(#loc121)
    %76 = arith.select %75, %cst_2, %74 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc122)
    %77 = math.absf %74 : tensor<1x64xf32> loc(#loc73)
    %78 = arith.subf %cst_2, %77 : tensor<1x64xf32> loc(#loc74)
    %79 = math.exp %78 : tensor<1x64xf32> loc(#loc75)
    %80 = tt.extern_elementwise %79 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc76)
    %81 = arith.subf %76, %80 : tensor<1x64xf32> loc(#loc77)
    %82 = arith.mulf %73, %81 : tensor<1x64xf32> loc(#loc78)
    %83 = arith.addf %72, %82 : tensor<1x64xf32> loc(#loc79)
    %84 = arith.subf %cst_2, %83 : tensor<1x64xf32> loc(#loc80)
    %85 = arith.addf %64, %84 : tensor<1x64xf32> loc(#loc81)
    %86 = arith.cmpf olt, %cst_2, %23 : tensor<1x64xf32> loc(#loc123)
    %87 = arith.select %86, %cst_2, %23 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc124)
    %88 = math.absf %23 : tensor<1x64xf32> loc(#loc83)
    %89 = arith.subf %cst_2, %88 : tensor<1x64xf32> loc(#loc84)
    %90 = math.exp %89 : tensor<1x64xf32> loc(#loc85)
    %91 = tt.extern_elementwise %90 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc86)
    %92 = arith.subf %87, %91 : tensor<1x64xf32> loc(#loc87)
    %93 = arith.mulf %21, %92 : tensor<1x64xf32> loc(#loc88)
    %94 = arith.subf %cst_1, %21 : tensor<1x64xf32> loc(#loc89)
    %95 = arith.subf %cst_2, %23 : tensor<1x64xf32> loc(#loc90)
    %96 = arith.cmpf olt, %cst_2, %95 : tensor<1x64xf32> loc(#loc125)
    %97 = arith.select %96, %cst_2, %95 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc126)
    %98 = math.absf %95 : tensor<1x64xf32> loc(#loc92)
    %99 = arith.subf %cst_2, %98 : tensor<1x64xf32> loc(#loc93)
    %100 = math.exp %99 : tensor<1x64xf32> loc(#loc94)
    %101 = tt.extern_elementwise %100 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc95)
    %102 = arith.subf %97, %101 : tensor<1x64xf32> loc(#loc96)
    %103 = arith.mulf %94, %102 : tensor<1x64xf32> loc(#loc97)
    %104 = arith.addf %93, %103 : tensor<1x64xf32> loc(#loc98)
    %105 = arith.subf %cst_2, %104 : tensor<1x64xf32> loc(#loc99)
    %106 = arith.addf %85, %105 : tensor<1x64xf32> loc(#loc100)
    %107 = arith.mulf %106, %cst_0 : tensor<1x64xf32> loc(#loc101)
    %108 = "tt.reduce"(%107) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc103)), %arg5: f32 loc(callsite(#loc1 at #loc103))):
      %113 = arith.addf %arg4, %arg5 : f32 loc(#loc130)
      tt.reduce.return %113 : f32 loc(#loc127)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc127)
    %109 = tt.expand_dims %108 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc105)
    %110 = arith.divf %109, %cst : tensor<1x1xf32> loc(#loc106)
    gpu.barrier loc(#loc107)
    %111 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc108)
    %112 = tt.splat %111 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc108)
    tt.store %112, %110 : tensor<1x1x!tt.ptr<f32>> loc(#loc109)
    tt.return loc(#loc110)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":26:26)
#loc3 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":26:34)
#loc4 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":30:32)
#loc5 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":30:30)
#loc6 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":30:37)
#loc7 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":31:30)
#loc8 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":31:37)
#loc9 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":32:35)
#loc10 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":32:31)
#loc11 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":32:42)
#loc12 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":33:31)
#loc13 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":33:42)
#loc14 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":34:35)
#loc15 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":34:31)
#loc16 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":34:42)
#loc17 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":35:31)
#loc18 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":35:42)
#loc19 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":36:35)
#loc20 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":36:31)
#loc21 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":36:42)
#loc22 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":37:31)
#loc23 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":37:42)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc25 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":39:40)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc27 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":40:23)
#loc28 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":41:12)
#loc29 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":42:23)
#loc30 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":43:27)
#loc31 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":44:18)
#loc32 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":45:18)
#loc33 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":47:20)
#loc34 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":48:13)
#loc35 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":49:41)
#loc36 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":50:24)
#loc37 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":51:13)
#loc38 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":52:24)
#loc39 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":53:28)
#loc40 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":54:20)
#loc41 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":55:20)
#loc42 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":56:19)
#loc43 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":57:13)
#loc44 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":58:41)
#loc45 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":59:24)
#loc46 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":60:13)
#loc47 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":61:24)
#loc48 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":62:28)
#loc49 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":63:20)
#loc50 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":64:20)
#loc51 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":65:20)
#loc52 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":66:13)
#loc53 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":67:41)
#loc54 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":68:24)
#loc55 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":69:13)
#loc56 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":70:24)
#loc57 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":71:28)
#loc58 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":72:20)
#loc59 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":73:20)
#loc60 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":74:20)
#loc61 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":75:13)
#loc62 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":76:20)
#loc63 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":77:41)
#loc64 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":78:24)
#loc65 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":79:13)
#loc66 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":80:24)
#loc67 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":81:28)
#loc68 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":82:20)
#loc69 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":83:20)
#loc70 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":84:20)
#loc71 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":85:13)
#loc72 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":86:41)
#loc73 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":87:24)
#loc74 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":88:13)
#loc75 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":89:24)
#loc76 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":90:28)
#loc77 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":91:20)
#loc78 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":92:20)
#loc79 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":93:20)
#loc80 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":94:13)
#loc81 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":95:20)
#loc82 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":96:41)
#loc83 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":97:24)
#loc84 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":98:13)
#loc85 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":99:24)
#loc86 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":100:28)
#loc87 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":101:20)
#loc88 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":102:20)
#loc89 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":103:20)
#loc90 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":104:13)
#loc91 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":105:41)
#loc92 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":106:24)
#loc93 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":107:13)
#loc94 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":108:24)
#loc95 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":109:28)
#loc96 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":110:20)
#loc97 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":111:20)
#loc98 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":112:20)
#loc99 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":113:13)
#loc100 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":114:20)
#loc101 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":116:20)
#loc102 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc104 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc105 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":118:29)
#loc106 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":120:20)
#loc107 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":121:4)
#loc108 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":122:28)
#loc109 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":122:71)
#loc110 = loc("inductor_cache/3l/c3lobsl26bqvyv2oe75elkjwo26ogtmjwg22xr6hbfsuur4uqf5k.py":122:4)
#loc111 = loc(callsite(#loc24 at #loc25))
#loc112 = loc(callsite(#loc26 at #loc25))
#loc113 = loc(callsite(#loc24 at #loc35))
#loc114 = loc(callsite(#loc26 at #loc35))
#loc115 = loc(callsite(#loc24 at #loc44))
#loc116 = loc(callsite(#loc26 at #loc44))
#loc117 = loc(callsite(#loc24 at #loc53))
#loc118 = loc(callsite(#loc26 at #loc53))
#loc119 = loc(callsite(#loc24 at #loc63))
#loc120 = loc(callsite(#loc26 at #loc63))
#loc121 = loc(callsite(#loc24 at #loc72))
#loc122 = loc(callsite(#loc26 at #loc72))
#loc123 = loc(callsite(#loc24 at #loc82))
#loc124 = loc(callsite(#loc26 at #loc82))
#loc125 = loc(callsite(#loc24 at #loc91))
#loc126 = loc(callsite(#loc26 at #loc91))
#loc127 = loc(callsite(#loc102 at #loc103))
#loc129 = loc(callsite(#loc104 at #loc102))
#loc130 = loc(callsite(#loc129 at #loc103))
