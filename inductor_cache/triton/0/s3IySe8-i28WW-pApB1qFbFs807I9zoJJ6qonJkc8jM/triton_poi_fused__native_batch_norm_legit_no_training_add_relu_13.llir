; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = srem i32 %11, 192, !dbg !14
  %14 = srem i32 %12, 192, !dbg !14
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = sext i32 %12 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %25 = sext i32 %13 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = sext i32 %14 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = bitcast i32 %45 to float, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = fadd float %38, 0x3EE4F8B580000000, !dbg !23
  %52 = fadd float %39, 0x3EE4F8B580000000, !dbg !23
  %53 = fadd float %40, 0x3EE4F8B580000000, !dbg !23
  %54 = fadd float %41, 0x3EE4F8B580000000, !dbg !23
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !23
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !23
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !23
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !23
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i = icmp eq i32 %59, 0, !dbg !24
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i = icmp eq i32 %60, 0, !dbg !24
  br i1 %.not.i, label %66, label %61, !dbg !24

61:                                               ; preds = %5
  br i1 %.not1.i, label %64, label %62, !dbg !24

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

66:                                               ; preds = %5
  br i1 %.not1.i, label %69, label %67, !dbg !24

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !24
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i1 = icmp eq i32 %71, 0, !dbg !24
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !24
  br i1 %.not.i1, label %78, label %73, !dbg !24

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !24

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !24

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !24
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i6 = icmp eq i32 %83, 0, !dbg !24
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i9 = icmp eq i32 %84, 0, !dbg !24
  br i1 %.not.i6, label %90, label %85, !dbg !24

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !24

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !24

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

__nv_sqrtf.exit10:                                ; preds = %86, %88, %91, %93
  %.0.i8 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !24
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i11 = icmp eq i32 %95, 0, !dbg !24
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i14 = icmp eq i32 %96, 0, !dbg !24
  br i1 %.not.i11, label %102, label %97, !dbg !24

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !24

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !24

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

__nv_sqrtf.exit15:                                ; preds = %98, %100, %103, %105
  %.0.i13 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !24
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i16 = icmp eq i32 %107, 0, !dbg !24
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i19 = icmp eq i32 %108, 0, !dbg !24
  br i1 %.not.i16, label %114, label %109, !dbg !24

109:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %112, label %110, !dbg !24

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

114:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %117, label %115, !dbg !24

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

__nv_sqrtf.exit20:                                ; preds = %110, %112, %115, %117
  %.0.i18 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !24
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i21 = icmp eq i32 %119, 0, !dbg !24
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i24 = icmp eq i32 %120, 0, !dbg !24
  br i1 %.not.i21, label %126, label %121, !dbg !24

121:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %124, label %122, !dbg !24

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

126:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %129, label %127, !dbg !24

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

__nv_sqrtf.exit25:                                ; preds = %122, %124, %127, %129
  %.0.i23 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !24
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i26 = icmp eq i32 %131, 0, !dbg !24
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i29 = icmp eq i32 %132, 0, !dbg !24
  br i1 %.not.i26, label %138, label %133, !dbg !24

133:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %136, label %134, !dbg !24

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

138:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %141, label %139, !dbg !24

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

__nv_sqrtf.exit30:                                ; preds = %134, %136, %139, %141
  %.0.i28 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !24
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i31 = icmp eq i32 %143, 0, !dbg !24
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i34 = icmp eq i32 %144, 0, !dbg !24
  br i1 %.not.i31, label %150, label %145, !dbg !24

145:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %148, label %146, !dbg !24

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

150:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %153, label %151, !dbg !24

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

__nv_sqrtf.exit35:                                ; preds = %146, %148, %151, %153
  %.0.i33 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !24
  %155 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %156 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %157 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %158 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %159 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %160 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %161 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %162 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %163 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %164 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %165 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %166 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %167 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %168 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %169 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %171 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %173 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %174 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %175 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %176 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %177 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !25
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !25
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !25
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !25
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !25
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !25
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !25
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !25
  %187 = insertelement <8 x i32> poison, i32 %155, i64 0, !dbg !16
  %188 = insertelement <8 x i32> %187, i32 %158, i64 1, !dbg !16
  %189 = insertelement <8 x i32> %188, i32 %161, i64 2, !dbg !16
  %190 = insertelement <8 x i32> %189, i32 %164, i64 3, !dbg !16
  %191 = insertelement <8 x i32> %190, i32 %167, i64 4, !dbg !16
  %192 = insertelement <8 x i32> %191, i32 %170, i64 5, !dbg !16
  %193 = insertelement <8 x i32> %192, i32 %173, i64 6, !dbg !16
  %194 = insertelement <8 x i32> %193, i32 %176, i64 7, !dbg !16
  %195 = bitcast <8 x i32> %194 to <8 x float>, !dbg !16
  %196 = insertelement <8 x i32> poison, i32 %156, i64 0, !dbg !18
  %197 = insertelement <8 x i32> %196, i32 %159, i64 1, !dbg !18
  %198 = insertelement <8 x i32> %197, i32 %162, i64 2, !dbg !18
  %199 = insertelement <8 x i32> %198, i32 %165, i64 3, !dbg !18
  %200 = insertelement <8 x i32> %199, i32 %168, i64 4, !dbg !18
  %201 = insertelement <8 x i32> %200, i32 %171, i64 5, !dbg !18
  %202 = insertelement <8 x i32> %201, i32 %174, i64 6, !dbg !18
  %203 = insertelement <8 x i32> %202, i32 %177, i64 7, !dbg !18
  %204 = bitcast <8 x i32> %203 to <8 x float>, !dbg !18
  %205 = fadd <8 x float> %195, %204, !dbg !26
  %206 = insertelement <8 x i32> poison, i32 %157, i64 0, !dbg !20
  %207 = insertelement <8 x i32> %206, i32 %160, i64 1, !dbg !20
  %208 = insertelement <8 x i32> %207, i32 %163, i64 2, !dbg !20
  %209 = insertelement <8 x i32> %208, i32 %166, i64 3, !dbg !20
  %210 = insertelement <8 x i32> %209, i32 %169, i64 4, !dbg !20
  %211 = insertelement <8 x i32> %210, i32 %172, i64 5, !dbg !20
  %212 = insertelement <8 x i32> %211, i32 %175, i64 6, !dbg !20
  %213 = insertelement <8 x i32> %212, i32 %178, i64 7, !dbg !20
  %214 = bitcast <8 x i32> %213 to <8 x float>, !dbg !20
  %215 = fsub <8 x float> %205, %214, !dbg !27
  %216 = insertelement <8 x float> poison, float %186, i64 0, !dbg !28
  %217 = insertelement <8 x float> %216, float %185, i64 1, !dbg !28
  %218 = insertelement <8 x float> %217, float %184, i64 2, !dbg !28
  %219 = insertelement <8 x float> %218, float %183, i64 3, !dbg !28
  %220 = insertelement <8 x float> %219, float %182, i64 4, !dbg !28
  %221 = insertelement <8 x float> %220, float %181, i64 5, !dbg !28
  %222 = insertelement <8 x float> %221, float %180, i64 6, !dbg !28
  %223 = insertelement <8 x float> %222, float %179, i64 7, !dbg !28
  %224 = fmul <8 x float> %215, %223, !dbg !28
  %225 = fcmp olt <8 x float> %224, zeroinitializer, !dbg !29
  %226 = extractelement <8 x i1> %225, i64 7, !dbg !33
  %227 = extractelement <8 x i1> %225, i64 6, !dbg !33
  %228 = extractelement <8 x i1> %225, i64 5, !dbg !33
  %229 = extractelement <8 x i1> %225, i64 4, !dbg !33
  %230 = extractelement <8 x i1> %225, i64 3, !dbg !33
  %231 = extractelement <8 x i1> %225, i64 2, !dbg !33
  %232 = extractelement <8 x i1> %225, i64 1, !dbg !33
  %233 = extractelement <8 x i1> %225, i64 0, !dbg !33
  %bc = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %234 = extractelement <8 x i32> %bc, i64 7, !dbg !34
  %235 = select i1 %226, i32 0, i32 %234, !dbg !33
  %bc36 = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %236 = extractelement <8 x i32> %bc36, i64 6, !dbg !34
  %237 = select i1 %227, i32 0, i32 %236, !dbg !33
  %bc37 = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %238 = extractelement <8 x i32> %bc37, i64 5, !dbg !34
  %239 = select i1 %228, i32 0, i32 %238, !dbg !33
  %bc38 = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %240 = extractelement <8 x i32> %bc38, i64 4, !dbg !34
  %241 = select i1 %229, i32 0, i32 %240, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %237, i32 %239, i32 %241, ptr addrspace(1) %16, i1 true) #3, !dbg !34
  %bc39 = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %242 = extractelement <8 x i32> %bc39, i64 3, !dbg !34
  %243 = select i1 %230, i32 0, i32 %242, !dbg !33
  %bc40 = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %244 = extractelement <8 x i32> %bc40, i64 2, !dbg !34
  %245 = select i1 %231, i32 0, i32 %244, !dbg !33
  %bc41 = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %246 = extractelement <8 x i32> %bc41, i64 1, !dbg !34
  %247 = select i1 %232, i32 0, i32 %246, !dbg !33
  %bc42 = bitcast <8 x float> %224 to <8 x i32>, !dbg !34
  %248 = extractelement <8 x i32> %bc42, i64 0, !dbg !34
  %249 = select i1 %233, i32 0, i32 %248, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %243, i32 %245, i32 %247, i32 %249, ptr addrspace(1) %18, i1 true) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cotpvxdie4nmqairnektvokbnj6fms3ww4xlmib3ldlctq4gly63.py", directory: "inductor_cache/ot")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 26, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 30, column: 18, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 41, column: 42, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 4, scope: !7)
