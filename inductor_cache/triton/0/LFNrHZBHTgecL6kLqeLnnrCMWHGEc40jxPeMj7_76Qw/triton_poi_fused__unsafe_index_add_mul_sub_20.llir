; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %19 = sdiv i32 %.frozen, 16, !dbg !14
  %20 = srem i32 %19, 16, !dbg !15
  %21 = mul i32 %19, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %18, 16, !dbg !16
  %23 = sdiv i32 %17, 256, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %30 = sext i32 %.decomposed to i64, !dbg !20
  %31 = getelementptr i64, ptr addrspace(1) %2, i64 %30, !dbg !20
  %32 = sext i32 %22 to i64, !dbg !20
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !20
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !21
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !21
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !21
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !21
  %40 = sext i32 %23 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !25
  %51 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !26
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %56 = getelementptr i64, ptr addrspace(1) %7, i64 %30, !dbg !28
  %57 = getelementptr i64, ptr addrspace(1) %7, i64 %32, !dbg !28
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !29
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !29
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !29
  %61 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !29
  %62 = extractvalue { i64, i64 } %61, 0, !dbg !29
  %63 = extractvalue { i64, i64 } %61, 1, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !33
  %76 = bitcast i32 %75 to float, !dbg !33
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !33
  %78 = bitcast i32 %77 to float, !dbg !33
  %79 = lshr i64 %26, 60, !dbg !34
  %80 = and i64 %79, 8, !dbg !34
  %81 = add i64 %80, %26, !dbg !34
  %82 = lshr i64 %35, 60, !dbg !35
  %83 = and i64 %82, 8, !dbg !35
  %84 = lshr i64 %36, 60, !dbg !35
  %85 = and i64 %84, 8, !dbg !35
  %86 = lshr i64 %38, 60, !dbg !35
  %87 = and i64 %86, 8, !dbg !35
  %88 = lshr i64 %39, 60, !dbg !35
  %89 = and i64 %88, 8, !dbg !35
  %90 = shl i64 %81, 3, !dbg !36
  %91 = shl nsw i32 %23, 6, !dbg !37
  %92 = sext i32 %91 to i64, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %83, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %90, !dbg !39
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %92, !dbg !39
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !39
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %85, !dbg !39
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %90, !dbg !39
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %92, !dbg !39
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !39
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %87, !dbg !39
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %90, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %92, !dbg !39
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !39
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %89, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %90, !dbg !39
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %92, !dbg !39
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !40
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !40
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !40
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !40
  %113 = lshr i64 %52, 60, !dbg !41
  %114 = and i64 %113, 8, !dbg !41
  %115 = add i64 %114, %52, !dbg !41
  %116 = shl i64 %115, 3, !dbg !42
  %117 = getelementptr float, ptr addrspace(1) %94, i64 %116, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %92, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %98, i64 %116, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %92, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %102, i64 %116, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %92, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %106, i64 %116, !dbg !43
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %92, !dbg !43
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !44
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !44
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !44
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !44
  %129 = lshr i64 %59, 60, !dbg !45
  %130 = and i64 %129, 8, !dbg !45
  %131 = lshr i64 %60, 60, !dbg !45
  %132 = and i64 %131, 8, !dbg !45
  %133 = lshr i64 %62, 60, !dbg !45
  %134 = and i64 %133, 8, !dbg !45
  %135 = lshr i64 %63, 60, !dbg !45
  %136 = and i64 %135, 8, !dbg !45
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !46
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %130, !dbg !46
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %116, !dbg !46
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %92, !dbg !46
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !46
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %132, !dbg !46
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %116, !dbg !46
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %92, !dbg !46
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !46
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %134, !dbg !46
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %116, !dbg !46
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %92, !dbg !46
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !46
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %136, !dbg !46
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %116, !dbg !46
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %92, !dbg !46
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !47
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !47
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !47
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !47
  %157 = getelementptr float, ptr addrspace(1) %138, i64 %90, !dbg !48
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %92, !dbg !48
  %159 = getelementptr float, ptr addrspace(1) %142, i64 %90, !dbg !48
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %92, !dbg !48
  %161 = getelementptr float, ptr addrspace(1) %146, i64 %90, !dbg !48
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %92, !dbg !48
  %163 = getelementptr float, ptr addrspace(1) %150, i64 %90, !dbg !48
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %92, !dbg !48
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !49
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !49
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !49
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #1, !dbg !49
  %169 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !40
  %170 = insertelement <2 x i32> %169, i32 %125, i64 1, !dbg !40
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !40
  %172 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !50
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !50
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %175 = fsub <2 x float> %171, %174, !dbg !50
  %176 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !51
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !51
  %178 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %179 = fmul <2 x float> %175, %178, !dbg !51
  %180 = fcmp olt <2 x float> %179, zeroinitializer, !dbg !52
  %181 = select <2 x i1> %180, <2 x float> zeroinitializer, <2 x float> %179, !dbg !56
  %182 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !49
  %183 = insertelement <2 x i32> %182, i32 %153, i64 1, !dbg !49
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !49
  %185 = fsub <2 x float> %184, %174, !dbg !57
  %186 = fmul <2 x float> %185, %178, !dbg !58
  %187 = fcmp olt <2 x float> %186, zeroinitializer, !dbg !59
  %188 = select <2 x i1> %187, <2 x float> zeroinitializer, <2 x float> %186, !dbg !61
  %189 = fsub <2 x float> %188, %181, !dbg !62
  %190 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !63
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !63
  %192 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %193 = fmul <2 x float> %189, %192, !dbg !63
  %194 = fadd <2 x float> %181, %193, !dbg !64
  %195 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !40
  %196 = insertelement <2 x i32> %195, i32 %126, i64 1, !dbg !40
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !40
  %198 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !50
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !50
  %200 = shufflevector <2 x float> %199, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %201 = fsub <2 x float> %197, %200, !dbg !50
  %202 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !51
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !51
  %204 = shufflevector <2 x float> %203, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %205 = fmul <2 x float> %201, %204, !dbg !51
  %206 = fcmp olt <2 x float> %205, zeroinitializer, !dbg !52
  %207 = select <2 x i1> %206, <2 x float> zeroinitializer, <2 x float> %205, !dbg !56
  %208 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !49
  %209 = insertelement <2 x i32> %208, i32 %154, i64 1, !dbg !49
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !49
  %211 = fsub <2 x float> %210, %200, !dbg !57
  %212 = fmul <2 x float> %211, %204, !dbg !58
  %213 = fcmp olt <2 x float> %212, zeroinitializer, !dbg !59
  %214 = select <2 x i1> %213, <2 x float> zeroinitializer, <2 x float> %212, !dbg !61
  %215 = fsub <2 x float> %214, %207, !dbg !62
  %216 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !63
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !63
  %218 = shufflevector <2 x float> %217, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %219 = fmul <2 x float> %215, %218, !dbg !63
  %220 = fadd <2 x float> %207, %219, !dbg !64
  %221 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !40
  %222 = insertelement <2 x i32> %221, i32 %127, i64 1, !dbg !40
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !40
  %224 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !50
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !50
  %226 = shufflevector <2 x float> %225, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %227 = fsub <2 x float> %223, %226, !dbg !50
  %228 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !51
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !51
  %230 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %231 = fmul <2 x float> %227, %230, !dbg !51
  %232 = fcmp olt <2 x float> %231, zeroinitializer, !dbg !52
  %233 = select <2 x i1> %232, <2 x float> zeroinitializer, <2 x float> %231, !dbg !56
  %234 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !49
  %235 = insertelement <2 x i32> %234, i32 %155, i64 1, !dbg !49
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !49
  %237 = fsub <2 x float> %236, %226, !dbg !57
  %238 = fmul <2 x float> %237, %230, !dbg !58
  %239 = fcmp olt <2 x float> %238, zeroinitializer, !dbg !59
  %240 = select <2 x i1> %239, <2 x float> zeroinitializer, <2 x float> %238, !dbg !61
  %241 = fsub <2 x float> %240, %233, !dbg !62
  %242 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !63
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !63
  %244 = shufflevector <2 x float> %243, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %245 = fmul <2 x float> %241, %244, !dbg !63
  %246 = fadd <2 x float> %233, %245, !dbg !64
  %247 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !40
  %248 = insertelement <2 x i32> %247, i32 %128, i64 1, !dbg !40
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !40
  %250 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !50
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !50
  %252 = shufflevector <2 x float> %251, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %253 = fsub <2 x float> %249, %252, !dbg !50
  %254 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !51
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !51
  %256 = shufflevector <2 x float> %255, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %257 = fmul <2 x float> %253, %256, !dbg !51
  %258 = fcmp olt <2 x float> %257, zeroinitializer, !dbg !52
  %259 = select <2 x i1> %258, <2 x float> zeroinitializer, <2 x float> %257, !dbg !56
  %260 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !49
  %261 = insertelement <2 x i32> %260, i32 %156, i64 1, !dbg !49
  %262 = bitcast <2 x i32> %261 to <2 x float>, !dbg !49
  %263 = fsub <2 x float> %262, %252, !dbg !57
  %264 = fmul <2 x float> %263, %256, !dbg !58
  %265 = fcmp olt <2 x float> %264, zeroinitializer, !dbg !59
  %266 = select <2 x i1> %265, <2 x float> zeroinitializer, <2 x float> %264, !dbg !61
  %267 = fsub <2 x float> %266, %259, !dbg !62
  %268 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !63
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !63
  %270 = shufflevector <2 x float> %269, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %271 = fmul <2 x float> %267, %270, !dbg !63
  %272 = fadd <2 x float> %259, %271, !dbg !64
  %273 = extractelement <2 x float> %194, i64 0, !dbg !65
  %274 = extractelement <2 x float> %194, i64 1, !dbg !66
  %275 = fsub float %273, %274, !dbg !65
  %276 = extractelement <2 x float> %220, i64 0, !dbg !65
  %277 = extractelement <2 x float> %220, i64 1, !dbg !66
  %278 = fsub float %276, %277, !dbg !65
  %279 = extractelement <2 x float> %246, i64 0, !dbg !65
  %280 = extractelement <2 x float> %246, i64 1, !dbg !66
  %281 = fsub float %279, %280, !dbg !65
  %282 = extractelement <2 x float> %272, i64 0, !dbg !65
  %283 = extractelement <2 x float> %272, i64 1, !dbg !66
  %284 = fsub float %282, %283, !dbg !65
  %285 = fmul float %275, %72, !dbg !67
  %286 = fmul float %278, %74, !dbg !67
  %287 = fmul float %281, %76, !dbg !67
  %288 = fmul float %284, %78, !dbg !67
  %289 = fadd float %274, %285, !dbg !66
  %290 = fadd float %277, %286, !dbg !66
  %291 = fadd float %280, %287, !dbg !66
  %292 = fadd float %283, %288, !dbg !66
  %293 = sext i32 %17 to i64, !dbg !68
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !68
  %295 = bitcast float %289 to i32, !dbg !69
  %296 = bitcast float %290 to i32, !dbg !69
  %297 = bitcast float %291 to i32, !dbg !69
  %298 = bitcast float %292 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %296, i32 %297, i32 %298, ptr addrspace(1) %294, i1 true) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf2aknnoedxzbxs4i4le3qkew4xvpd3pdinxpxtuujkbzfdf6jxj.py", directory: "inductor_cache/f2")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_20", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 32, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 39, scope: !7)
!37 = !DILocation(line: 43, column: 49, scope: !7)
!38 = !DILocation(line: 43, column: 46, scope: !7)
!39 = !DILocation(line: 43, column: 30, scope: !7)
!40 = !DILocation(line: 43, column: 54, scope: !7)
!41 = !DILocation(line: 50, column: 35, scope: !7)
!42 = !DILocation(line: 51, column: 40, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 56, scope: !7)
!45 = !DILocation(line: 57, column: 35, scope: !7)
!46 = !DILocation(line: 58, column: 31, scope: !7)
!47 = !DILocation(line: 58, column: 57, scope: !7)
!48 = !DILocation(line: 65, column: 31, scope: !7)
!49 = !DILocation(line: 65, column: 56, scope: !7)
!50 = !DILocation(line: 44, column: 19, scope: !7)
!51 = !DILocation(line: 45, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 47, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !60)
!60 = !DILocation(line: 68, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !60)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 20, scope: !7)
!67 = !DILocation(line: 73, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 28, scope: !7)
!69 = !DILocation(line: 75, column: 40, scope: !7)
!70 = !DILocation(line: 75, column: 4, scope: !7)
