#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_convolution_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":19:0), %arg4: i32 loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":19:0)) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<8> : tensor<4x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2> : tensor<4x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<8> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<4x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<1x32xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<1x32xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<1x32xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_6 : tensor<1x32xi32, #blocked> loc(#loc6)
    %7 = tt.get_program_id x : i32 loc(#loc7)
    %8 = arith.muli %7, %c4_i32 : i32 loc(#loc8)
    %9 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %10 = tt.expand_dims %9 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4x1xi32, #blocked> loc(#loc9)
    %11 = tt.splat %8 : i32 -> tensor<4x1xi32, #blocked> loc(#loc10)
    %12 = arith.addi %11, %10 : tensor<4x1xi32, #blocked> loc(#loc10)
    %13 = arith.cmpi slt, %12, %cst_5 : tensor<4x1xi32, #blocked> loc(#loc11)
    %14 = arith.remsi %5, %cst_4 : tensor<1x32xi32, #blocked> loc(#loc12)
    %15 = arith.divsi %5, %cst_4 : tensor<1x32xi32, #blocked> loc(#loc13)
    %16 = arith.remsi %15, %cst_3 : tensor<1x32xi32, #blocked> loc(#loc14)
    %17 = arith.remsi %12, %cst_2 : tensor<4x1xi32, #blocked> loc(#loc15)
    %18 = arith.muli %17, %cst_2 : tensor<4x1xi32, #blocked> loc(#loc16)
    %19 = arith.divsi %14, %cst_1 : tensor<1x32xi32, #blocked> loc(#loc17)
    %20 = arith.muli %19, %cst_4 : tensor<1x32xi32, #blocked> loc(#loc18)
    %21 = tt.broadcast %18 : tensor<4x1xi32, #blocked> -> tensor<4x32xi32, #blocked> loc(#loc19)
    %22 = tt.broadcast %20 : tensor<1x32xi32, #blocked> -> tensor<4x32xi32, #blocked> loc(#loc19)
    %23 = arith.addi %21, %22 : tensor<4x32xi32, #blocked> loc(#loc19)
    %24 = arith.divsi %12, %cst_2 : tensor<4x1xi32, #blocked> loc(#loc20)
    %25 = arith.muli %24, %cst_0 : tensor<4x1xi32, #blocked> loc(#loc21)
    %26 = tt.broadcast %25 : tensor<4x1xi32, #blocked> -> tensor<4x32xi32, #blocked> loc(#loc22)
    %27 = arith.addi %23, %26 : tensor<4x32xi32, #blocked> loc(#loc22)
    %28 = arith.muli %15, %cst : tensor<1x32xi32, #blocked> loc(#loc23)
    %29 = tt.broadcast %28 : tensor<1x32xi32, #blocked> -> tensor<4x32xi32, #blocked> loc(#loc24)
    %30 = arith.addi %27, %29 : tensor<4x32xi32, #blocked> loc(#loc24)
    %31 = arith.remsi %14, %cst_1 : tensor<1x32xi32, #blocked> loc(#loc25)
    %32 = tt.broadcast %31 : tensor<1x32xi32, #blocked> -> tensor<4x32xi32, #blocked> loc(#loc26)
    %33 = arith.addi %30, %32 : tensor<4x32xi32, #blocked> loc(#loc26)
    %34 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x32x!tt.ptr<f32>, #blocked> loc(#loc27)
    %35 = tt.addptr %34, %33 : tensor<4x32x!tt.ptr<f32>, #blocked>, tensor<4x32xi32, #blocked> loc(#loc27)
    %36 = tt.broadcast %13 : tensor<4x1xi1, #blocked> -> tensor<4x32xi1, #blocked> loc(#loc28)
    %37 = tt.broadcast %6 : tensor<1x32xi1, #blocked> -> tensor<4x32xi1, #blocked> loc(#loc28)
    %38 = arith.andi %36, %37 : tensor<4x32xi1, #blocked> loc(#loc28)
    %39 = tt.load %35, %38 evictionPolicy = evict_last : tensor<4x32x!tt.ptr<f32>, #blocked> loc(#loc29)
    %40 = arith.muli %5, %cst_4 : tensor<1x32xi32, #blocked> loc(#loc30)
    %41 = tt.broadcast %12 : tensor<4x1xi32, #blocked> -> tensor<4x32xi32, #blocked> loc(#loc31)
    %42 = tt.broadcast %40 : tensor<1x32xi32, #blocked> -> tensor<4x32xi32, #blocked> loc(#loc31)
    %43 = arith.addi %41, %42 : tensor<4x32xi32, #blocked> loc(#loc31)
    %44 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x32x!tt.ptr<f32>, #blocked> loc(#loc32)
    %45 = tt.addptr %44, %43 : tensor<4x32x!tt.ptr<f32>, #blocked>, tensor<4x32xi32, #blocked> loc(#loc32)
    %46 = tt.load %45, %38 evictionPolicy = evict_last : tensor<4x32x!tt.ptr<f32>, #blocked> loc(#loc33)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc34)
    %48 = tt.addptr %47, %16 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc34)
    %49 = tt.load %48, %6 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc35)
    %50 = tt.broadcast %49 : tensor<1x32xf32, #blocked> -> tensor<4x32xf32, #blocked> loc(#loc36)
    %51 = arith.addf %46, %50 : tensor<4x32xf32, #blocked> loc(#loc36)
    %52 = arith.addf %39, %51 : tensor<4x32xf32, #blocked> loc(#loc37)
    gpu.barrier loc(#loc38)
    tt.store %45, %52, %38 : tensor<4x32x!tt.ptr<f32>, #blocked> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":22:28)
#loc3 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":22:33)
#loc4 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":23:44)
#loc5 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":23:23)
#loc6 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":24:21)
#loc7 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":25:28)
#loc8 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":25:33)
#loc9 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":26:44)
#loc10 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":26:23)
#loc11 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":27:21)
#loc12 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":29:19)
#loc13 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":30:19)
#loc14 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":32:26)
#loc15 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:39)
#loc16 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:34)
#loc17 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:54)
#loc18 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:48)
#loc19 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:45)
#loc20 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:68)
#loc21 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:62)
#loc22 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:59)
#loc23 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:76)
#loc24 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:73)
#loc25 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:88)
#loc26 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:83)
#loc27 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:30)
#loc28 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:102)
#loc29 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":33:94)
#loc30 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":34:41)
#loc31 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":34:39)
#loc32 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":34:34)
#loc33 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":34:46)
#loc34 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":35:30)
#loc35 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":35:35)
#loc36 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":36:18)
#loc37 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":37:18)
#loc38 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":38:4)
#loc39 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":39:46)
#loc40 = loc("inductor_cache/4k/c4ku7lkn7sgmkbsidamfi2ffu24f5447oxppo7zmw2tlcuc2ufgt.py":39:4)
