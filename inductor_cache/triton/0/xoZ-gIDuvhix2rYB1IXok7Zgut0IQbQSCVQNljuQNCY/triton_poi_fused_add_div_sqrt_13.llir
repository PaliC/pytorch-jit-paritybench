; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = or disjoint i32 %12, 513, !dbg !14
  %17 = or disjoint i32 %12, 514, !dbg !14
  %18 = or disjoint i32 %12, 515, !dbg !14
  %19 = or disjoint i32 %9, %12, !dbg !15
  %20 = or disjoint i32 %9, %13, !dbg !15
  %21 = or disjoint i32 %9, %14, !dbg !15
  %22 = or disjoint i32 %9, %15, !dbg !15
  %23 = or disjoint i32 %19, 512, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %27 = icmp slt i32 %19, 1024, !dbg !16
  %28 = icmp slt i32 %23, 1024, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %29 = sdiv i32 %.frozen, 128, !dbg !17
  %30 = mul i32 %29, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %30, !dbg !18
  %31 = shl i32 %19, 7, !dbg !19
  %32 = shl i32 %20, 7, !dbg !19
  %33 = shl i32 %21, 7, !dbg !19
  %34 = shl i32 %22, 7, !dbg !19
  %35 = shl i32 %23, 7, !dbg !19
  %36 = shl i32 %24, 7, !dbg !19
  %37 = shl i32 %25, 7, !dbg !19
  %38 = shl i32 %26, 7, !dbg !19
  %39 = shl i32 %29, 17, !dbg !20
  %40 = add i32 %39, %.decomposed, !dbg !21
  %41 = add i32 %40, %31, !dbg !22
  %42 = add i32 %40, %32, !dbg !22
  %43 = add i32 %40, %33, !dbg !22
  %44 = add i32 %40, %34, !dbg !22
  %45 = add i32 %40, %35, !dbg !22
  %46 = add i32 %40, %36, !dbg !22
  %47 = add i32 %40, %37, !dbg !22
  %48 = add i32 %40, %38, !dbg !22
  %49 = sext i32 %41 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %42 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %43 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %44 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %45 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %46 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %47 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %48 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = and i1 %7, %27, !dbg !24
  %66 = and i1 %28, %7, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %65) #3, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %65) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %65) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %65) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %66) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %66) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %66) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %66) #3, !dbg !25
  %75 = shl i32 %29, 10, !dbg !26
  %76 = add i32 %19, %75, !dbg !27
  %77 = add i32 %75, %23, !dbg !27
  %78 = sext i32 %76 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = sext i32 %77 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %65) #3, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %87 = bitcast i32 %83 to float, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = bitcast i32 %86 to float, !dbg !29
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %66) #3, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !29
  %96 = bitcast i32 %92 to float, !dbg !29
  %97 = bitcast i32 %93 to float, !dbg !29
  %98 = bitcast i32 %94 to float, !dbg !29
  %99 = bitcast i32 %95 to float, !dbg !29
  %100 = fadd float %87, 0x3E112E0BE0000000, !dbg !30
  %101 = fadd float %88, 0x3E112E0BE0000000, !dbg !30
  %102 = fadd float %89, 0x3E112E0BE0000000, !dbg !30
  %103 = fadd float %90, 0x3E112E0BE0000000, !dbg !30
  %104 = fadd float %96, 0x3E112E0BE0000000, !dbg !30
  %105 = fadd float %97, 0x3E112E0BE0000000, !dbg !30
  %106 = fadd float %98, 0x3E112E0BE0000000, !dbg !30
  %107 = fadd float %99, 0x3E112E0BE0000000, !dbg !30
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %108, 0, !dbg !31
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %109, 0, !dbg !31
  br i1 %.not.i, label %115, label %110, !dbg !31

110:                                              ; preds = %5
  br i1 %.not1.i, label %113, label %111, !dbg !31

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

115:                                              ; preds = %5
  br i1 %.not1.i, label %118, label %116, !dbg !31

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %111, %113, %116, %118
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !31
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %120, 0, !dbg !31
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %121, 0, !dbg !31
  br i1 %.not.i1, label %127, label %122, !dbg !31

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %125, label %123, !dbg !31

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %130, label %128, !dbg !31

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %123, %125, %128, %130
  %.0.i3 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !31
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i6 = icmp eq i32 %132, 0, !dbg !31
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i9 = icmp eq i32 %133, 0, !dbg !31
  br i1 %.not.i6, label %139, label %134, !dbg !31

134:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %137, label %135, !dbg !31

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

139:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %142, label %140, !dbg !31

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %135, %137, %140, %142
  %.0.i8 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !31
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i11 = icmp eq i32 %144, 0, !dbg !31
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i14 = icmp eq i32 %145, 0, !dbg !31
  br i1 %.not.i11, label %151, label %146, !dbg !31

146:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %149, label %147, !dbg !31

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

151:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %154, label %152, !dbg !31

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %147, %149, %152, %154
  %.0.i13 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !31
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %156, 0, !dbg !31
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i19 = icmp eq i32 %157, 0, !dbg !31
  br i1 %.not.i16, label %163, label %158, !dbg !31

158:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %161, label %159, !dbg !31

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

163:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %166, label %164, !dbg !31

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %159, %161, %164, %166
  %.0.i18 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !31
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i21 = icmp eq i32 %168, 0, !dbg !31
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i24 = icmp eq i32 %169, 0, !dbg !31
  br i1 %.not.i21, label %175, label %170, !dbg !31

170:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %173, label %171, !dbg !31

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

175:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %178, label %176, !dbg !31

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %171, %173, %176, %178
  %.0.i23 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !31
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i26 = icmp eq i32 %180, 0, !dbg !31
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i29 = icmp eq i32 %181, 0, !dbg !31
  br i1 %.not.i26, label %187, label %182, !dbg !31

182:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %185, label %183, !dbg !31

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

187:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %190, label %188, !dbg !31

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %183, %185, %188, %190
  %.0.i28 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !31
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i31 = icmp eq i32 %192, 0, !dbg !31
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i34 = icmp eq i32 %193, 0, !dbg !31
  br i1 %.not.i31, label %199, label %194, !dbg !31

194:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %197, label %195, !dbg !31

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

199:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %202, label %200, !dbg !31

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %195, %197, %200, %202
  %.0.i33 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !31
  %204 = bitcast i32 %74 to float, !dbg !25
  %205 = bitcast i32 %73 to float, !dbg !25
  %206 = bitcast i32 %72 to float, !dbg !25
  %207 = bitcast i32 %71 to float, !dbg !25
  %208 = bitcast i32 %70 to float, !dbg !25
  %209 = bitcast i32 %69 to float, !dbg !25
  %210 = bitcast i32 %68 to float, !dbg !25
  %211 = bitcast i32 %67 to float, !dbg !25
  %212 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %213 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !32
  %214 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !32
  %215 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !32
  %216 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !32
  %217 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !32
  %218 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !32
  %219 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !32
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %212) #3, !dbg !33
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %213) #3, !dbg !33
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %214) #3, !dbg !33
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %215) #3, !dbg !33
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %216) #3, !dbg !33
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %217) #3, !dbg !33
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %218) #3, !dbg !33
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %219) #3, !dbg !33
  %228 = shl i32 %6, 10, !dbg !34
  %229 = add i32 %19, %228, !dbg !35
  %230 = add i32 %228, %23, !dbg !35
  %231 = sext i32 %229 to i64, !dbg !36
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !36
  %233 = sext i32 %230 to i64, !dbg !36
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !36
  %235 = bitcast float %220 to i32, !dbg !37
  %236 = bitcast float %221 to i32, !dbg !37
  %237 = bitcast float %222 to i32, !dbg !37
  %238 = bitcast float %223 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %236, i32 %237, i32 %238, ptr addrspace(1) %232, i1 %65) #3, !dbg !37
  %239 = bitcast float %224 to i32, !dbg !37
  %240 = bitcast float %225 to i32, !dbg !37
  %241 = bitcast float %226 to i32, !dbg !37
  %242 = bitcast float %227 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %240, i32 %241, i32 %242, ptr addrspace(1) %234, i1 %66) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszwukoikas5ylhcvteoimxoz4c6dcc6kaccztylhanagbhoi73e.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_13", linkageName: "triton_poi_fused_add_div_sqrt_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 64, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 35, scope: !7)
!35 = !DILocation(line: 40, column: 30, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 4, scope: !7)
