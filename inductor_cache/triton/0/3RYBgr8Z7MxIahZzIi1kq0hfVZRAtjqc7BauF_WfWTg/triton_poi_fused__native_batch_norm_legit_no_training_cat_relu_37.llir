; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 9, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 510, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %.frozen = freeze i32 %21, !dbg !14
  %22 = sdiv i32 %.frozen, 1024, !dbg !14
  %23 = srem i32 %22, 192, !dbg !15
  %24 = mul i32 %22, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %.frozen19 = freeze i32 %21, !dbg !17
  %25 = sdiv i32 %.frozen19, 196608, !dbg !17
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !25
  %41 = icmp slt i32 %23, 108, !dbg !26
  %42 = mul i32 %25, 196608, !dbg !27
  %srem.decomposed = sub i32 %.frozen19, %42, !dbg !27
  %43 = mul nsw i32 %25, 110592, !dbg !28
  %44 = add nsw i32 %43, %srem.decomposed, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !31
  %48 = add nsw i32 %23, -108, !dbg !32
  %49 = icmp ult i32 %48, 12, !dbg !32
  %50 = shl nsw i32 %23, 10, !dbg !33
  %51 = mul nsw i32 %25, 12288, !dbg !34
  %52 = add nsw i32 %51, %.decomposed, !dbg !33
  %53 = add nsw i32 %52, -110592, !dbg !35
  %54 = add nsw i32 %53, %50, !dbg !36
  %55 = sext i32 %54 to i64, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !37
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !38
  %58 = add nsw i32 %23, -120, !dbg !39
  %59 = icmp ult i32 %58, 12, !dbg !39
  %60 = add nsw i32 %52, -122880, !dbg !40
  %61 = add nsw i32 %60, %50, !dbg !41
  %62 = sext i32 %61 to i64, !dbg !42
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !42
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !43
  %65 = add nsw i32 %23, -132, !dbg !44
  %66 = icmp ult i32 %65, 12, !dbg !44
  %67 = add nsw i32 %52, -135168, !dbg !45
  %68 = add nsw i32 %67, %50, !dbg !46
  %69 = sext i32 %68 to i64, !dbg !47
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !47
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !48
  %72 = add nsw i32 %23, -144, !dbg !49
  %73 = icmp ult i32 %72, 12, !dbg !49
  %74 = add nsw i32 %52, -147456, !dbg !50
  %75 = add nsw i32 %74, %50, !dbg !51
  %76 = sext i32 %75 to i64, !dbg !52
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !52
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !53
  %79 = add nsw i32 %23, -156, !dbg !54
  %80 = icmp ult i32 %79, 12, !dbg !54
  %81 = add nsw i32 %52, -159744, !dbg !55
  %82 = add nsw i32 %81, %50, !dbg !56
  %83 = sext i32 %82 to i64, !dbg !57
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !57
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !58
  %86 = add nsw i32 %23, -168, !dbg !59
  %87 = icmp ult i32 %86, 12, !dbg !59
  %88 = add nsw i32 %52, -172032, !dbg !60
  %89 = add nsw i32 %88, %50, !dbg !61
  %90 = sext i32 %89 to i64, !dbg !62
  %91 = getelementptr float, ptr addrspace(1) %6, i64 %90, !dbg !62
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #3, !dbg !63
  %93 = icmp sgt i32 %23, 179, !dbg !64
  %94 = add nsw i32 %52, -184320, !dbg !65
  %95 = add nsw i32 %94, %50, !dbg !66
  %96 = sext i32 %95 to i64, !dbg !67
  %97 = getelementptr float, ptr addrspace(1) %7, i64 %96, !dbg !67
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %97, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #3, !dbg !68
  %99 = fadd float %32, 0x3EE4F8B580000000, !dbg !69
  %100 = fadd float %34, 0x3EE4F8B580000000, !dbg !69
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i = icmp eq i32 %101, 0, !dbg !70
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i = icmp eq i32 %102, 0, !dbg !70
  br i1 %.not.i, label %108, label %103, !dbg !70

103:                                              ; preds = %15
  br i1 %.not1.i, label %106, label %104, !dbg !70

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

108:                                              ; preds = %15
  br i1 %.not1.i, label %111, label %109, !dbg !70

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !70
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i14 = icmp eq i32 %113, 0, !dbg !70
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i17 = icmp eq i32 %114, 0, !dbg !70
  br i1 %.not.i14, label %120, label %115, !dbg !70

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %118, label %116, !dbg !70

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !70
  br label %__nv_sqrtf.exit18, !dbg !70

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !70
  br label %__nv_sqrtf.exit18, !dbg !70

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %123, label %121, !dbg !70

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !70
  br label %__nv_sqrtf.exit18, !dbg !70

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !70
  br label %__nv_sqrtf.exit18, !dbg !70

__nv_sqrtf.exit18:                                ; preds = %116, %118, %121, %123
  %.0.i16 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !70
  %125 = extractvalue { i32, i32 } %47, 1, !dbg !31
  %126 = extractvalue { i32, i32 } %57, 1, !dbg !38
  %127 = extractvalue { i32, i32 } %64, 1, !dbg !43
  %128 = extractvalue { i32, i32 } %71, 1, !dbg !48
  %129 = extractvalue { i32, i32 } %78, 1, !dbg !53
  %130 = extractvalue { i32, i32 } %85, 1, !dbg !58
  %131 = extractvalue { i32, i32 } %92, 1, !dbg !63
  %132 = extractvalue { i32, i32 } %98, 1, !dbg !68
  %.v1 = select i1 %87, i32 %131, i32 %132, !dbg !71
  %.v3 = select i1 %80, i32 %130, i32 %.v1, !dbg !72
  %.v5 = select i1 %73, i32 %129, i32 %.v3, !dbg !73
  %.v7 = select i1 %66, i32 %128, i32 %.v5, !dbg !74
  %.v9 = select i1 %59, i32 %127, i32 %.v7, !dbg !75
  %.v11 = select i1 %49, i32 %126, i32 %.v9, !dbg !76
  %.v13 = select i1 %41, i32 %125, i32 %.v11, !dbg !77
  %133 = bitcast i32 %.v13 to float, !dbg !77
  %134 = bitcast i32 %29 to float, !dbg !19
  %135 = fsub float %133, %134, !dbg !78
  %136 = extractvalue { i32, i32 } %47, 0, !dbg !31
  %137 = extractvalue { i32, i32 } %57, 0, !dbg !38
  %138 = extractvalue { i32, i32 } %64, 0, !dbg !43
  %139 = extractvalue { i32, i32 } %71, 0, !dbg !48
  %140 = extractvalue { i32, i32 } %78, 0, !dbg !53
  %141 = extractvalue { i32, i32 } %85, 0, !dbg !58
  %142 = extractvalue { i32, i32 } %92, 0, !dbg !63
  %143 = extractvalue { i32, i32 } %98, 0, !dbg !68
  %.v = select i1 %87, i32 %142, i32 %143, !dbg !71
  %.v2 = select i1 %80, i32 %141, i32 %.v, !dbg !72
  %.v4 = select i1 %73, i32 %140, i32 %.v2, !dbg !73
  %.v6 = select i1 %66, i32 %139, i32 %.v4, !dbg !74
  %.v8 = select i1 %59, i32 %138, i32 %.v6, !dbg !75
  %.v10 = select i1 %49, i32 %137, i32 %.v8, !dbg !76
  %.v12 = select i1 %41, i32 %136, i32 %.v10, !dbg !77
  %144 = bitcast i32 %.v12 to float, !dbg !77
  %145 = bitcast i32 %28 to float, !dbg !19
  %146 = fsub float %144, %145, !dbg !78
  %147 = bitcast i32 %40 to float, !dbg !25
  %148 = bitcast i32 %39 to float, !dbg !25
  %149 = bitcast i32 %37 to float, !dbg !23
  %150 = bitcast i32 %36 to float, !dbg !23
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !79
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !79
  %153 = fmul float %146, %151, !dbg !80
  %154 = fmul float %135, %152, !dbg !80
  %155 = fmul float %153, %150, !dbg !81
  %156 = fmul float %154, %149, !dbg !81
  %157 = fadd float %155, %148, !dbg !82
  %158 = fadd float %156, %147, !dbg !82
  %159 = fcmp olt float %157, 0.000000e+00, !dbg !83
  %160 = fcmp olt float %158, 0.000000e+00, !dbg !83
  %161 = select i1 %159, float 0.000000e+00, float %157, !dbg !87
  %162 = select i1 %160, float 0.000000e+00, float %158, !dbg !87
  %163 = sext i32 %21 to i64, !dbg !88
  %164 = getelementptr float, ptr addrspace(1) %12, i64 %163, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v12, i32 %.v13, ptr addrspace(1) %164, i1 true) #3, !dbg !89
  %165 = getelementptr float, ptr addrspace(1) %13, i64 %163, !dbg !90
  %166 = bitcast float %161 to i32, !dbg !91
  %167 = bitcast float %162 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %165, i1 true) #3, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpvn7voi4wiz364ojmdolumhqawjz4li242pyocduf3ty5ccltyo.py", directory: "inductor_cache/pv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 32, scope: !7)
!23 = !DILocation(line: 30, column: 37, scope: !7)
!24 = !DILocation(line: 31, column: 32, scope: !7)
!25 = !DILocation(line: 31, column: 37, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 54, scope: !7)
!29 = !DILocation(line: 37, column: 47, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 59, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 42, scope: !7)
!34 = !DILocation(line: 42, column: 63, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 57, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 68, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 57, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 68, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 57, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 68, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 57, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 68, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 36, scope: !7)
!56 = !DILocation(line: 62, column: 57, scope: !7)
!57 = !DILocation(line: 62, column: 31, scope: !7)
!58 = !DILocation(line: 62, column: 68, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 36, scope: !7)
!61 = !DILocation(line: 67, column: 57, scope: !7)
!62 = !DILocation(line: 67, column: 31, scope: !7)
!63 = !DILocation(line: 67, column: 68, scope: !7)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 36, scope: !7)
!66 = !DILocation(line: 71, column: 57, scope: !7)
!67 = !DILocation(line: 71, column: 31, scope: !7)
!68 = !DILocation(line: 71, column: 68, scope: !7)
!69 = !DILocation(line: 81, column: 20, scope: !7)
!70 = !DILocation(line: 82, column: 27, scope: !7)
!71 = !DILocation(line: 72, column: 35, scope: !7)
!72 = !DILocation(line: 73, column: 35, scope: !7)
!73 = !DILocation(line: 74, column: 35, scope: !7)
!74 = !DILocation(line: 75, column: 35, scope: !7)
!75 = !DILocation(line: 76, column: 35, scope: !7)
!76 = !DILocation(line: 77, column: 34, scope: !7)
!77 = !DILocation(line: 78, column: 33, scope: !7)
!78 = !DILocation(line: 79, column: 20, scope: !7)
!79 = !DILocation(line: 84, column: 20, scope: !7)
!80 = !DILocation(line: 87, column: 20, scope: !7)
!81 = !DILocation(line: 88, column: 20, scope: !7)
!82 = !DILocation(line: 89, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!86 = !DILocation(line: 91, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 92, column: 25, scope: !7)
!89 = !DILocation(line: 92, column: 37, scope: !7)
!90 = !DILocation(line: 93, column: 25, scope: !7)
!91 = !DILocation(line: 93, column: 37, scope: !7)
!92 = !DILocation(line: 93, column: 4, scope: !7)
