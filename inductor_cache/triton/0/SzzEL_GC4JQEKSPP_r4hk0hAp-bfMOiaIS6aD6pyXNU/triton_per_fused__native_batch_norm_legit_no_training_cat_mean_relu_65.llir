; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 1556, !dbg !14
  %17 = shl i32 %12, 2, !dbg !15
  %18 = and i32 %17, 60, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 389, !dbg !16
  %20 = mul i32 %19, 389, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sext i32 %.decomposed to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #5, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #5, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #5, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #5, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #5, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #5, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #5, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #5, !dbg !25
  %43 = icmp slt i32 %.decomposed, 377, !dbg !26
  %44 = shl nsw i32 %.decomposed, 6, !dbg !27
  %45 = or disjoint i32 %44, %18, !dbg !28
  %46 = mul i32 %19, 24128, !dbg !29
  %47 = add i32 %45, %46, !dbg !30
  %48 = sext i32 %47 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !31
  %50 = and i1 %16, %43, !dbg !32
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #5, !dbg !33
  %52 = icmp sgt i32 %.decomposed, 376, !dbg !34
  %53 = mul i32 %19, 768, !dbg !35
  %54 = or disjoint i32 %18, -24128, !dbg !36
  %55 = add nsw i32 %54, %44, !dbg !37
  %56 = add i32 %55, %53, !dbg !38
  %57 = sext i32 %56 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !39
  %59 = and i1 %16, %52, !dbg !40
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #5, !dbg !41
  %61 = fadd float %32, 0x3EE4F8B580000000, !dbg !42
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i14 = icmp eq i32 %68, 0, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i17 = icmp eq i32 %69, 0, !dbg !43
  br i1 %.not.i14, label %75, label %70, !dbg !43

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %73, label %71, !dbg !43

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #5, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #5, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %78, label %76, !dbg !43

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #5, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #5, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

__nv_sqrtf.exit18:                                ; preds = %71, %73, %76, %78
  %.0.i16 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !43
  %80 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !33
  %81 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !41
  %.v3 = select i1 %43, i32 %80, i32 %81, !dbg !44
  %82 = bitcast i32 %.v3 to float, !dbg !44
  %83 = bitcast i32 %26 to float, !dbg !19
  %84 = fsub float %82, %83, !dbg !45
  %85 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !33
  %86 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !41
  %.v2 = select i1 %43, i32 %85, i32 %86, !dbg !44
  %87 = bitcast i32 %.v2 to float, !dbg !44
  %88 = fsub float %87, %83, !dbg !45
  %89 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !33
  %90 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !41
  %.v1 = select i1 %43, i32 %89, i32 %90, !dbg !44
  %91 = bitcast i32 %.v1 to float, !dbg !44
  %92 = fsub float %91, %83, !dbg !45
  %93 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !33
  %94 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !41
  %.v = select i1 %43, i32 %93, i32 %94, !dbg !44
  %95 = bitcast i32 %.v to float, !dbg !44
  %96 = fsub float %95, %83, !dbg !45
  %97 = bitcast i32 %42 to float, !dbg !25
  %98 = bitcast i32 %37 to float, !dbg !23
  %99 = and i32 %12, 7, !dbg !12
  %100 = or disjoint i32 %11, %99, !dbg !13
  %101 = icmp slt i32 %100, 1556, !dbg !14
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #5, !dbg !46
  %103 = fmul float %96, %102, !dbg !47
  %104 = fmul float %92, %102, !dbg !47
  %105 = fmul float %88, %102, !dbg !47
  %106 = fmul float %84, %102, !dbg !47
  %107 = fmul float %103, %98, !dbg !48
  %108 = fmul float %104, %98, !dbg !48
  %109 = fmul float %105, %98, !dbg !48
  %110 = fmul float %106, %98, !dbg !48
  %111 = fadd float %107, %97, !dbg !49
  %112 = fadd float %108, %97, !dbg !49
  %113 = fadd float %109, %97, !dbg !49
  %114 = fadd float %110, %97, !dbg !49
  %115 = fcmp olt float %111, 0.000000e+00, !dbg !50
  %116 = fcmp olt float %112, 0.000000e+00, !dbg !50
  %117 = fcmp olt float %113, 0.000000e+00, !dbg !50
  %118 = fcmp olt float %114, 0.000000e+00, !dbg !50
  %119 = select i1 %115, float 0.000000e+00, float %111, !dbg !54
  %120 = select i1 %116, float 0.000000e+00, float %112, !dbg !54
  %121 = select i1 %117, float 0.000000e+00, float %113, !dbg !54
  %122 = select i1 %118, float 0.000000e+00, float %114, !dbg !54
  %123 = fadd float %119, %120, !dbg !55
  %124 = fadd float %121, %123, !dbg !55
  %125 = fadd float %122, %124, !dbg !55
  %126 = select i1 %16, float %125, float 0.000000e+00, !dbg !55
  %127 = bitcast float %126 to i32, !dbg !60
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !60
  %129 = bitcast i32 %128 to float, !dbg !60
  %130 = fadd float %126, %129, !dbg !55
  %131 = bitcast float %130 to i32, !dbg !60
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !60
  %133 = bitcast i32 %132 to float, !dbg !60
  %134 = fadd float %130, %133, !dbg !55
  %135 = bitcast float %134 to i32, !dbg !60
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !60
  %137 = bitcast i32 %136 to float, !dbg !60
  %138 = fadd float %134, %137, !dbg !55
  %139 = bitcast float %138 to i32, !dbg !60
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !60
  %141 = bitcast i32 %140 to float, !dbg !60
  %142 = fadd float %138, %141, !dbg !55
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !61
  %144 = bitcast float %142 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !61
  %146 = load float, ptr addrspace(3) %145, align 4, !dbg !61
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 6.400000e+01) #5, !dbg !61
  %148 = shl i32 %15, 6, !dbg !62
  %149 = or disjoint i32 %148, %18, !dbg !63
  %150 = sext i32 %149 to i64, !dbg !64
  %151 = getelementptr float, ptr addrspace(1) %7, i64 %150, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v, i32 %.v1, i32 %.v2, i32 %.v3, ptr addrspace(1) %151, i1 %16) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %152 = sext i32 %100 to i64, !dbg !67
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !67
  %154 = and i32 %12, 120, !dbg !68
  %155 = icmp eq i32 %154, 0, !dbg !68
  %156 = bitcast float %147 to i32, !dbg !68
  %157 = and i1 %155, %101, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %153, i1 %157) #5, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3gxgbzjbku56horc7j7citrdh5al4hjp7vjzktnr7qdycf5y6w.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 41, column: 18, scope: !7)
!27 = !DILocation(line: 42, column: 39, scope: !7)
!28 = !DILocation(line: 42, column: 35, scope: !7)
!29 = !DILocation(line: 42, column: 51, scope: !7)
!30 = !DILocation(line: 42, column: 45, scope: !7)
!31 = !DILocation(line: 42, column: 30, scope: !7)
!32 = !DILocation(line: 42, column: 63, scope: !7)
!33 = !DILocation(line: 42, column: 56, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 58, scope: !7)
!36 = !DILocation(line: 46, column: 35, scope: !7)
!37 = !DILocation(line: 46, column: 39, scope: !7)
!38 = !DILocation(line: 46, column: 54, scope: !7)
!39 = !DILocation(line: 46, column: 30, scope: !7)
!40 = !DILocation(line: 46, column: 70, scope: !7)
!41 = !DILocation(line: 46, column: 63, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 27, scope: !7)
!44 = !DILocation(line: 47, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 60, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !59)
!56 = distinct !DILexicalBlockFile(scope: !58, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!58 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!59 = !DILocation(line: 63, column: 26, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 33, scope: !7)
!63 = !DILocation(line: 66, column: 30, scope: !7)
!64 = !DILocation(line: 66, column: 25, scope: !7)
!65 = !DILocation(line: 66, column: 45, scope: !7)
!66 = !DILocation(line: 67, column: 4, scope: !7)
!67 = !DILocation(line: 68, column: 28, scope: !7)
!68 = !DILocation(line: 68, column: 40, scope: !7)
!69 = !DILocation(line: 68, column: 4, scope: !7)
