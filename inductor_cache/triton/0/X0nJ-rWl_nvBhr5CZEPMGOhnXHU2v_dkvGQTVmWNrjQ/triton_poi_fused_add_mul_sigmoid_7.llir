; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_sigmoid_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %11, 32, !dbg !12
  %14 = or disjoint i32 %11, 48, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = or disjoint i32 %8, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 6, !dbg !15
  %24 = or disjoint i32 %23, %16, !dbg !16
  %25 = or disjoint i32 %23, %11, !dbg !16
  %26 = or disjoint i32 %23, %12, !dbg !16
  %27 = or disjoint i32 %23, %13, !dbg !16
  %28 = or disjoint i32 %23, %14, !dbg !16
  %29 = icmp slt i32 %24, 512, !dbg !17
  %30 = icmp slt i32 %25, 512, !dbg !17
  %31 = icmp slt i32 %26, 512, !dbg !17
  %32 = icmp slt i32 %27, 512, !dbg !17
  %33 = icmp slt i32 %28, 512, !dbg !17
  %34 = sdiv i32 %17, 4096, !dbg !18
  %35 = sdiv i32 %18, 4096, !dbg !18
  %36 = sdiv i32 %19, 4096, !dbg !18
  %37 = sdiv i32 %20, 4096, !dbg !18
  %.frozen = freeze i32 %21, !dbg !18
  %38 = sdiv i32 %.frozen, 4096, !dbg !18
  %39 = mul i32 %38, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %39, !dbg !19
  %40 = sext i32 %17 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %18 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = sext i32 %19 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = sext i32 %20 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !21
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !21
  %57 = bitcast i32 %56 to float, !dbg !21
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %62 = bitcast i32 %61 to float, !dbg !21
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %67 = bitcast i32 %66 to float, !dbg !21
  %68 = shl i32 %17, 9, !dbg !22
  %69 = shl i32 %18, 9, !dbg !22
  %70 = shl i32 %19, 9, !dbg !22
  %71 = shl i32 %20, 9, !dbg !22
  %72 = add i32 %24, %68, !dbg !23
  %73 = add i32 %24, %69, !dbg !23
  %74 = add i32 %24, %70, !dbg !23
  %75 = add i32 %24, %71, !dbg !23
  %76 = sext i32 %72 to i64, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !24
  %78 = sext i32 %73 to i64, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !24
  %80 = sext i32 %74 to i64, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !24
  %82 = sext i32 %75 to i64, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !24
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %29) #2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !25
  %89 = bitcast i32 %85 to float, !dbg !25
  %90 = bitcast i32 %86 to float, !dbg !25
  %91 = bitcast i32 %87 to float, !dbg !25
  %92 = bitcast i32 %88 to float, !dbg !25
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %29) #2, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !25
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !25
  %98 = bitcast i32 %94 to float, !dbg !25
  %99 = bitcast i32 %95 to float, !dbg !25
  %100 = bitcast i32 %96 to float, !dbg !25
  %101 = bitcast i32 %97 to float, !dbg !25
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %29) #2, !dbg !25
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !25
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !25
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !25
  %107 = bitcast i32 %103 to float, !dbg !25
  %108 = bitcast i32 %104 to float, !dbg !25
  %109 = bitcast i32 %105 to float, !dbg !25
  %110 = bitcast i32 %106 to float, !dbg !25
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %29) #2, !dbg !25
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !25
  %116 = bitcast i32 %112 to float, !dbg !25
  %117 = bitcast i32 %113 to float, !dbg !25
  %118 = bitcast i32 %114 to float, !dbg !25
  %119 = bitcast i32 %115 to float, !dbg !25
  %120 = shl nsw i32 %34, 9, !dbg !26
  %121 = shl nsw i32 %35, 9, !dbg !26
  %122 = shl nsw i32 %36, 9, !dbg !26
  %123 = shl nsw i32 %37, 9, !dbg !26
  %124 = add i32 %120, %24, !dbg !27
  %125 = add i32 %121, %24, !dbg !27
  %126 = add i32 %122, %24, !dbg !27
  %127 = add i32 %123, %24, !dbg !27
  %128 = sext i32 %124 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !28
  %130 = sext i32 %125 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !28
  %132 = sext i32 %126 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !28
  %134 = sext i32 %127 to i64, !dbg !28
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !28
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %29) #2, !dbg !29
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !29
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !29
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !29
  %141 = bitcast i32 %137 to float, !dbg !29
  %142 = bitcast i32 %138 to float, !dbg !29
  %143 = bitcast i32 %139 to float, !dbg !29
  %144 = bitcast i32 %140 to float, !dbg !29
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %29) #2, !dbg !29
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !29
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !29
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !29
  %150 = bitcast i32 %146 to float, !dbg !29
  %151 = bitcast i32 %147 to float, !dbg !29
  %152 = bitcast i32 %148 to float, !dbg !29
  %153 = bitcast i32 %149 to float, !dbg !29
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 %29) #2, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !29
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !29
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !29
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !29
  %159 = bitcast i32 %155 to float, !dbg !29
  %160 = bitcast i32 %156 to float, !dbg !29
  %161 = bitcast i32 %157 to float, !dbg !29
  %162 = bitcast i32 %158 to float, !dbg !29
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %29) #2, !dbg !29
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !29
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !29
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !29
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !29
  %168 = bitcast i32 %164 to float, !dbg !29
  %169 = bitcast i32 %165 to float, !dbg !29
  %170 = bitcast i32 %166 to float, !dbg !29
  %171 = bitcast i32 %167 to float, !dbg !29
  %172 = fsub float 0.000000e+00, %52, !dbg !30
  %173 = fsub float 0.000000e+00, %57, !dbg !30
  %174 = fsub float 0.000000e+00, %62, !dbg !30
  %175 = fsub float 0.000000e+00, %67, !dbg !30
  %176 = fmul float %172, 0x3FF7154760000000, !dbg !34
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #2, !dbg !34
  %178 = fmul float %173, 0x3FF7154760000000, !dbg !34
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #2, !dbg !34
  %180 = fmul float %174, 0x3FF7154760000000, !dbg !34
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #2, !dbg !34
  %182 = fmul float %175, 0x3FF7154760000000, !dbg !34
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #2, !dbg !34
  %184 = fadd float %177, 1.000000e+00, !dbg !35
  %185 = fadd float %179, 1.000000e+00, !dbg !35
  %186 = fadd float %181, 1.000000e+00, !dbg !35
  %187 = fadd float %183, 1.000000e+00, !dbg !35
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %184) #2, !dbg !36
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %185) #2, !dbg !36
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %186) #2, !dbg !36
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %187) #2, !dbg !36
  %192 = fmul float %188, %89, !dbg !37
  %193 = fmul float %188, %90, !dbg !37
  %194 = fmul float %188, %91, !dbg !37
  %195 = fmul float %188, %92, !dbg !37
  %196 = fmul float %189, %98, !dbg !37
  %197 = fmul float %189, %99, !dbg !37
  %198 = fmul float %189, %100, !dbg !37
  %199 = fmul float %189, %101, !dbg !37
  %200 = fmul float %190, %107, !dbg !37
  %201 = fmul float %190, %108, !dbg !37
  %202 = fmul float %190, %109, !dbg !37
  %203 = fmul float %190, %110, !dbg !37
  %204 = fmul float %191, %116, !dbg !37
  %205 = fmul float %191, %117, !dbg !37
  %206 = fmul float %191, %118, !dbg !37
  %207 = fmul float %191, %119, !dbg !37
  %208 = fmul float %89, %141, !dbg !38
  %209 = fmul float %90, %142, !dbg !38
  %210 = fmul float %91, %143, !dbg !38
  %211 = fmul float %92, %144, !dbg !38
  %212 = fmul float %98, %150, !dbg !38
  %213 = fmul float %99, %151, !dbg !38
  %214 = fmul float %100, %152, !dbg !38
  %215 = fmul float %101, %153, !dbg !38
  %216 = fmul float %107, %159, !dbg !38
  %217 = fmul float %108, %160, !dbg !38
  %218 = fmul float %109, %161, !dbg !38
  %219 = fmul float %110, %162, !dbg !38
  %220 = fmul float %116, %168, !dbg !38
  %221 = fmul float %117, %169, !dbg !38
  %222 = fmul float %118, %170, !dbg !38
  %223 = fmul float %119, %171, !dbg !38
  %224 = fadd float %208, %192, !dbg !39
  %225 = fadd float %209, %193, !dbg !39
  %226 = fadd float %210, %194, !dbg !39
  %227 = fadd float %211, %195, !dbg !39
  %228 = fadd float %212, %196, !dbg !39
  %229 = fadd float %213, %197, !dbg !39
  %230 = fadd float %214, %198, !dbg !39
  %231 = fadd float %215, %199, !dbg !39
  %232 = fadd float %216, %200, !dbg !39
  %233 = fadd float %217, %201, !dbg !39
  %234 = fadd float %218, %202, !dbg !39
  %235 = fadd float %219, %203, !dbg !39
  %236 = fadd float %220, %204, !dbg !39
  %237 = fadd float %221, %205, !dbg !39
  %238 = fadd float %222, %206, !dbg !39
  %239 = fadd float %223, %207, !dbg !39
  %240 = shl i32 %25, 12, !dbg !40
  %241 = shl i32 %26, 12, !dbg !40
  %242 = shl i32 %27, 12, !dbg !40
  %243 = shl i32 %28, 12, !dbg !40
  %244 = shl i32 %38, 21, !dbg !41
  %245 = add i32 %244, %.decomposed, !dbg !42
  %246 = add i32 %245, %240, !dbg !43
  %247 = add i32 %245, %241, !dbg !43
  %248 = add i32 %245, %242, !dbg !43
  %249 = add i32 %245, %243, !dbg !43
  %250 = sext i32 %246 to i64, !dbg !44
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %250, !dbg !44
  %252 = sext i32 %247 to i64, !dbg !44
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !44
  %254 = sext i32 %248 to i64, !dbg !44
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !44
  %256 = sext i32 %249 to i64, !dbg !44
  %257 = getelementptr float, ptr addrspace(1) %3, i64 %256, !dbg !44
  %258 = shl i32 %9, 8, !dbg !45
  %259 = and i32 %258, 3840, !dbg !45
  %260 = or disjoint i32 %259, %11, !dbg !45
  %261 = and i32 %15, 1020, !dbg !45
  %262 = lshr exact i32 %259, 2, !dbg !45
  %263 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %262, !dbg !45
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %260, !dbg !45
  %265 = bitcast float %224 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #2, !dbg !45
  %266 = or disjoint i32 %260, 64, !dbg !45
  %267 = lshr i32 %266, 4, !dbg !45
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !45
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !45
  %270 = bitcast float %225 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !45
  %271 = or disjoint i32 %260, 128, !dbg !45
  %272 = lshr i32 %271, 4, !dbg !45
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !45
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %271, !dbg !45
  %275 = bitcast float %226 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !45
  %276 = or disjoint i32 %260, 192, !dbg !45
  %277 = lshr i32 %276, 4, !dbg !45
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !45
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %276, !dbg !45
  %280 = bitcast float %227 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !45
  %281 = or disjoint i32 %260, 16, !dbg !45
  %282 = getelementptr float, ptr addrspace(3) %263, i32 %281, !dbg !45
  %283 = bitcast float %228 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #2, !dbg !45
  %284 = or disjoint i32 %260, 80, !dbg !45
  %285 = lshr i32 %284, 4, !dbg !45
  %286 = and i32 %285, 244, !dbg !45
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !45
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %284, !dbg !45
  %289 = bitcast float %229 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #2, !dbg !45
  %290 = or disjoint i32 %260, 144, !dbg !45
  %291 = lshr i32 %290, 4, !dbg !45
  %292 = and i32 %291, 248, !dbg !45
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !45
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %290, !dbg !45
  %295 = bitcast float %230 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #2, !dbg !45
  %296 = or disjoint i32 %260, 208, !dbg !45
  %297 = lshr i32 %296, 4, !dbg !45
  %298 = and i32 %297, 252, !dbg !45
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i32 %298, !dbg !45
  %300 = getelementptr float, ptr addrspace(3) %299, i32 %296, !dbg !45
  %301 = bitcast float %231 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #2, !dbg !45
  %302 = or disjoint i32 %260, 32, !dbg !45
  %303 = getelementptr float, ptr addrspace(3) %263, i32 %302, !dbg !45
  %304 = bitcast float %232 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #2, !dbg !45
  %305 = or disjoint i32 %260, 96, !dbg !45
  %306 = lshr i32 %305, 4, !dbg !45
  %307 = and i32 %306, 244, !dbg !45
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !45
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %305, !dbg !45
  %310 = bitcast float %233 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #2, !dbg !45
  %311 = or disjoint i32 %260, 160, !dbg !45
  %312 = lshr i32 %311, 4, !dbg !45
  %313 = and i32 %312, 248, !dbg !45
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i32 %313, !dbg !45
  %315 = getelementptr float, ptr addrspace(3) %314, i32 %311, !dbg !45
  %316 = bitcast float %234 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #2, !dbg !45
  %317 = or disjoint i32 %260, 224, !dbg !45
  %318 = lshr i32 %317, 4, !dbg !45
  %319 = and i32 %318, 252, !dbg !45
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %319, !dbg !45
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %317, !dbg !45
  %322 = bitcast float %235 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #2, !dbg !45
  %323 = or disjoint i32 %260, 48, !dbg !45
  %324 = getelementptr float, ptr addrspace(3) %263, i32 %323, !dbg !45
  %325 = bitcast float %236 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #2, !dbg !45
  %326 = or disjoint i32 %260, 112, !dbg !45
  %327 = lshr i32 %326, 4, !dbg !45
  %328 = and i32 %327, 244, !dbg !45
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i32 %328, !dbg !45
  %330 = getelementptr float, ptr addrspace(3) %329, i32 %326, !dbg !45
  %331 = bitcast float %237 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #2, !dbg !45
  %332 = or disjoint i32 %260, 176, !dbg !45
  %333 = lshr i32 %332, 4, !dbg !45
  %334 = and i32 %333, 248, !dbg !45
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i32 %334, !dbg !45
  %336 = getelementptr float, ptr addrspace(3) %335, i32 %332, !dbg !45
  %337 = bitcast float %238 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #2, !dbg !45
  %338 = or disjoint i32 %260, 240, !dbg !45
  %339 = lshr i32 %338, 4, !dbg !45
  %340 = and i32 %339, 252, !dbg !45
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !45
  %342 = getelementptr float, ptr addrspace(3) %341, i32 %338, !dbg !45
  %343 = bitcast float %239 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %344 = lshr i32 %15, 4, !dbg !45
  %345 = and i32 %344, 60, !dbg !45
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %345, !dbg !45
  %347 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %261, !dbg !45
  %348 = or disjoint i32 %261, 1024, !dbg !45
  %349 = lshr i32 %348, 4, !dbg !45
  %350 = and i32 %349, 124, !dbg !45
  %351 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %350, !dbg !45
  %352 = getelementptr inbounds float, ptr addrspace(3) %351, i32 %348, !dbg !45
  %353 = load <4 x i32>, ptr addrspace(3) %352, align 16, !dbg !45
  %354 = or disjoint i32 %261, 2048, !dbg !45
  %355 = lshr i32 %354, 4, !dbg !45
  %356 = and i32 %355, 188, !dbg !45
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !45
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %354, !dbg !45
  %359 = load <4 x i32>, ptr addrspace(3) %358, align 16, !dbg !45
  %360 = or disjoint i32 %261, 3072, !dbg !45
  %361 = lshr i32 %360, 4, !dbg !45
  %362 = and i32 %361, 252, !dbg !45
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %362, !dbg !45
  %364 = getelementptr inbounds float, ptr addrspace(3) %363, i32 %360, !dbg !45
  %365 = load <4 x i32>, ptr addrspace(3) %364, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %347, align 16, !dbg !45
  %366 = getelementptr inbounds i8, ptr addrspace(3) %347, i32 4, !dbg !45
  %.extract16 = load i32, ptr addrspace(3) %366, align 4, !dbg !45
  %367 = getelementptr inbounds i8, ptr addrspace(3) %347, i32 8, !dbg !45
  %.extract17 = load i32, ptr addrspace(3) %367, align 8, !dbg !45
  %368 = getelementptr inbounds i8, ptr addrspace(3) %347, i32 12, !dbg !45
  %.extract18 = load i32, ptr addrspace(3) %368, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %251, i1 %30) #2, !dbg !45
  %.extract19 = extractelement <4 x i32> %353, i64 0, !dbg !45
  %.extract20 = extractelement <4 x i32> %353, i64 1, !dbg !45
  %.extract21 = extractelement <4 x i32> %353, i64 2, !dbg !45
  %.extract22 = extractelement <4 x i32> %353, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %253, i1 %31) #2, !dbg !45
  %.extract23 = extractelement <4 x i32> %359, i64 0, !dbg !45
  %.extract24 = extractelement <4 x i32> %359, i64 1, !dbg !45
  %.extract25 = extractelement <4 x i32> %359, i64 2, !dbg !45
  %.extract26 = extractelement <4 x i32> %359, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %255, i1 %32) #2, !dbg !45
  %.extract27 = extractelement <4 x i32> %365, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %365, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %365, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %365, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %257, i1 %33) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_7", linkageName: "triton_poi_fused_add_mul_sigmoid_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 39, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 35, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 35, scope: !7)
!41 = !DILocation(line: 39, column: 48, scope: !7)
!42 = !DILocation(line: 39, column: 30, scope: !7)
!43 = !DILocation(line: 39, column: 40, scope: !7)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 59, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
