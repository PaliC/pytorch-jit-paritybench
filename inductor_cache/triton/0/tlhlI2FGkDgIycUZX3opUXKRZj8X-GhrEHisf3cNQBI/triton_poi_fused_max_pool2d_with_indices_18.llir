; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 165888, !dbg !14
  %12 = srem i32 %10, 512, !dbg !15
  %13 = sdiv i32 %10, 41472, !dbg !16
  %14 = mul i32 %13, 147968, !dbg !17
  %15 = add i32 %14, %12, !dbg !18
  %16 = add i32 %15, 512, !dbg !19
  %17 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !20
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %19 = sdiv <2 x i32> %18, <i32 4608, i32 512>, !dbg !20
  %20 = srem <2 x i32> %19, splat (i32 9), !dbg !21
  %21 = shl nsw <2 x i32> %20, splat (i32 1), !dbg !22
  %22 = icmp sgt <2 x i32> %20, splat (i32 -1), !dbg !23
  %23 = extractelement <2 x i32> %20, i64 0, !dbg !24
  %24 = extractelement <2 x i32> %20, i64 1, !dbg !25
  %25 = or i32 %23, %24, !dbg !24
  %26 = icmp sgt i32 %25, -1, !dbg !24
  %27 = shl nsw i32 %24, 10, !dbg !25
  %28 = mul nsw i32 %23, 17408, !dbg !26
  %29 = add i32 %15, %27, !dbg !27
  %30 = add i32 %29, %28, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = and i1 %11, %26, !dbg !30
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 -8388608, i1 %33, i32 -8388608, i1 %33) #1, !dbg !31
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !31
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !31
  %37 = or disjoint <2 x i32> %21, splat (i32 1), !dbg !32
  %38 = icmp slt <2 x i32> %37, splat (i32 17), !dbg !33
  %39 = and <2 x i1> %22, %38, !dbg !34
  %40 = extractelement <2 x i1> %39, i64 1, !dbg !35
  %41 = extractelement <2 x i1> %22, i64 0, !dbg !36
  %42 = and i1 %41, %40, !dbg !36
  %43 = add i32 %16, %27, !dbg !37
  %44 = add i32 %43, %28, !dbg !38
  %45 = sext i32 %44 to i64, !dbg !39
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !39
  %47 = and i1 %11, %42, !dbg !40
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 -8388608, i1 %47, i32 -8388608, i1 %47) #1, !dbg !41
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !41
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !41
  %51 = extractelement <2 x i1> %39, i64 0, !dbg !35
  %52 = extractelement <2 x i1> %22, i64 1, !dbg !42
  %53 = and i1 %52, %51, !dbg !42
  %54 = add i32 %15, 8704, !dbg !43
  %55 = add i32 %54, %27, !dbg !44
  %56 = add i32 %55, %28, !dbg !45
  %57 = sext i32 %56 to i64, !dbg !46
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !46
  %59 = and i1 %11, %53, !dbg !47
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59) #1, !dbg !48
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !48
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !48
  %63 = and i1 %51, %40, !dbg !35
  %64 = add i32 %15, 9216, !dbg !49
  %65 = add i32 %64, %27, !dbg !50
  %66 = add i32 %65, %28, !dbg !51
  %67 = sext i32 %66 to i64, !dbg !52
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !52
  %69 = and i1 %11, %63, !dbg !53
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #1, !dbg !54
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !54
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !54
  %73 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !31
  %74 = insertelement <2 x i32> %73, i32 %36, i64 1, !dbg !31
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !31
  %76 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !41
  %77 = insertelement <2 x i32> %76, i32 %50, i64 1, !dbg !41
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !41
  %79 = fcmp ogt <2 x float> %78, %75, !dbg !55
  %80 = fcmp uno <2 x float> %78, zeroinitializer, !dbg !59
  %81 = or <2 x i1> %79, %80, !dbg !60
  %.v = select <2 x i1> %81, <2 x i32> %77, <2 x i32> %74, !dbg !61
  %82 = bitcast <2 x i32> %.v to <2 x float>, !dbg !61
  %83 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !48
  %84 = insertelement <2 x i32> %83, i32 %62, i64 1, !dbg !48
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !48
  %86 = fcmp olt <2 x float> %82, %85, !dbg !62
  %87 = fcmp uno <2 x float> %85, zeroinitializer, !dbg !64
  %88 = or <2 x i1> %87, %86, !dbg !65
  %.v1 = select <2 x i1> %88, <2 x i32> %84, <2 x i32> %.v, !dbg !66
  %89 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !66
  %90 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !54
  %91 = insertelement <2 x i32> %90, i32 %72, i64 1, !dbg !54
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !54
  %93 = fcmp olt <2 x float> %89, %92, !dbg !67
  %94 = bitcast i32 %71 to float, !dbg !69
  %95 = fcmp uno float %94, 0.000000e+00, !dbg !69
  %96 = bitcast i32 %72 to float, !dbg !69
  %97 = fcmp uno float %96, 0.000000e+00, !dbg !69
  %98 = extractelement <2 x i1> %93, i64 0, !dbg !70
  %99 = or i1 %95, %98, !dbg !70
  %100 = extractelement <2 x i1> %93, i64 1, !dbg !70
  %101 = or i1 %97, %100, !dbg !70
  %102 = zext <2 x i1> %79 to <2 x i8>, !dbg !71
  %103 = select <2 x i1> %86, <2 x i8> splat (i8 2), <2 x i8> %102, !dbg !72
  %104 = select <2 x i1> %93, <2 x i8> splat (i8 3), <2 x i8> %103, !dbg !73
  %105 = sext i32 %10 to i64, !dbg !74
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !74
  %107 = extractelement <2 x i32> %.v1, i64 0, !dbg !75
  %108 = select i1 %99, i32 %71, i32 %107, !dbg !76
  %109 = extractelement <2 x i32> %.v1, i64 1, !dbg !75
  %110 = select i1 %101, i32 %72, i32 %109, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %110, ptr addrspace(1) %106, i1 %11) #1, !dbg !75
  %111 = getelementptr i8, ptr addrspace(1) %2, i64 %105, !dbg !77
  %112 = bitcast <2 x i8> %104 to i16, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %112, ptr addrspace(1) %111, i1 %11) #1, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw5qfei7uokddnq2mkjhg7fq4xffwwvwwvbwi2xrbuk4ixbjwsin.py", directory: "inductor_cache/w5")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 40, column: 64, scope: !7)
!18 = !DILocation(line: 40, column: 36, scope: !7)
!19 = !DILocation(line: 46, column: 42, scope: !7)
!20 = !DILocation(line: 24, column: 21, scope: !7)
!21 = !DILocation(line: 24, column: 29, scope: !7)
!22 = !DILocation(line: 29, column: 13, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 39, column: 19, scope: !7)
!25 = !DILocation(line: 40, column: 41, scope: !7)
!26 = !DILocation(line: 40, column: 52, scope: !7)
!27 = !DILocation(line: 40, column: 46, scope: !7)
!28 = !DILocation(line: 40, column: 57, scope: !7)
!29 = !DILocation(line: 40, column: 31, scope: !7)
!30 = !DILocation(line: 40, column: 77, scope: !7)
!31 = !DILocation(line: 40, column: 69, scope: !7)
!32 = !DILocation(line: 48, column: 16, scope: !7)
!33 = !DILocation(line: 50, column: 20, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 55, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 52, scope: !7)
!38 = !DILocation(line: 46, column: 63, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 83, scope: !7)
!41 = !DILocation(line: 46, column: 75, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 43, scope: !7)
!44 = !DILocation(line: 53, column: 53, scope: !7)
!45 = !DILocation(line: 53, column: 64, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 84, scope: !7)
!48 = !DILocation(line: 53, column: 76, scope: !7)
!49 = !DILocation(line: 56, column: 43, scope: !7)
!50 = !DILocation(line: 56, column: 53, scope: !7)
!51 = !DILocation(line: 56, column: 64, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 84, scope: !7)
!54 = !DILocation(line: 56, column: 76, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 47, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !63)
!63 = !DILocation(line: 54, column: 42, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !63)
!67 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !68)
!68 = !DILocation(line: 57, column: 42, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !68)
!71 = !DILocation(line: 61, column: 35, scope: !7)
!72 = !DILocation(line: 64, column: 35, scope: !7)
!73 = !DILocation(line: 67, column: 35, scope: !7)
!74 = !DILocation(line: 68, column: 25, scope: !7)
!75 = !DILocation(line: 68, column: 37, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !68)
!77 = !DILocation(line: 69, column: 25, scope: !7)
!78 = !DILocation(line: 69, column: 37, scope: !7)
!79 = !DILocation(line: 69, column: 4, scope: !7)
