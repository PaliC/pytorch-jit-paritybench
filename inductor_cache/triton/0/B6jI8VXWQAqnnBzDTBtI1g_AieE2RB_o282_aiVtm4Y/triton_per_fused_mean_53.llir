; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_53(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = shl i32 %7, 2, !dbg !14
  %16 = and i32 %15, 60, !dbg !14
  %17 = shl i32 %12, 6, !dbg !15
  %18 = shl i32 %13, 6, !dbg !15
  %19 = or disjoint i32 %17, %16, !dbg !16
  %20 = or disjoint i32 %18, %16, !dbg !16
  %21 = sext i32 %19 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %23 = sext i32 %20 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %30 = bitcast i32 %26 to float, !dbg !18
  %31 = bitcast i32 %27 to float, !dbg !18
  %32 = bitcast i32 %28 to float, !dbg !18
  %33 = bitcast i32 %29 to float, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %39 = bitcast i32 %35 to float, !dbg !18
  %40 = bitcast i32 %36 to float, !dbg !18
  %41 = bitcast i32 %37 to float, !dbg !18
  %42 = bitcast i32 %38 to float, !dbg !18
  %43 = fadd float %30, %31, !dbg !19
  %44 = fadd float %43, %32, !dbg !19
  %45 = fadd float %44, %33, !dbg !19
  %46 = fadd float %39, %40, !dbg !19
  %47 = fadd float %46, %41, !dbg !19
  %48 = fadd float %47, %42, !dbg !19
  %49 = bitcast float %45 to i32, !dbg !24
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = fadd float %45, %51, !dbg !19
  %53 = bitcast float %52 to i32, !dbg !24
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = fadd float %52, %55, !dbg !19
  %57 = bitcast float %56 to i32, !dbg !24
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fadd float %56, %59, !dbg !19
  %61 = bitcast float %60 to i32, !dbg !24
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fadd float %60, %63, !dbg !19
  %65 = bitcast float %48 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %48, %67, !dbg !19
  %69 = bitcast float %68 to i32, !dbg !24
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = fadd float %68, %71, !dbg !19
  %73 = bitcast float %72 to i32, !dbg !24
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = fadd float %72, %75, !dbg !19
  %77 = bitcast float %76 to i32, !dbg !24
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !24
  %79 = bitcast i32 %78 to float, !dbg !24
  %80 = fadd float %76, %79, !dbg !19
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !25
  %82 = bitcast float %64 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #3, !dbg !25
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  %84 = bitcast float %80 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !25
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 6.400000e+01) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %88 = sext i32 %14 to i64, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !27
  %90 = and i32 %7, 224, !dbg !28
  %91 = icmp eq i32 %90, 0, !dbg !28
  %92 = bitcast float %87 to i32, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %89, i1 %91) #3, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctc4dly3tsi2knzjngsnn4dosve6p367xbm3js5sfvppn76egyv5.py", directory: "inductor_cache/tc")
!4 = !{ptr @triton_per_fused_mean_53, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_53, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_53", linkageName: "triton_per_fused_mean_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 38, scope: !7)
!16 = !DILocation(line: 31, column: 35, scope: !7)
!17 = !DILocation(line: 31, column: 30, scope: !7)
!18 = !DILocation(line: 31, column: 43, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 33, column: 24, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 36, column: 4, scope: !7)
!27 = !DILocation(line: 37, column: 28, scope: !7)
!28 = !DILocation(line: 37, column: 39, scope: !7)
!29 = !DILocation(line: 37, column: 4, scope: !7)
