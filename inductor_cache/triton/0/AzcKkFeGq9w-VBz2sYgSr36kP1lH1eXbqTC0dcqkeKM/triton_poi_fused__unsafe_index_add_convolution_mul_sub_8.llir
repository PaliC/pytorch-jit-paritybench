; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 62, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 64, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 4, !dbg !15
  %20 = srem i32 %19, 4, !dbg !16
  %21 = mul i32 %19, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = sdiv i32 %17, 16, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !19
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %18) #1, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %18) #1, !dbg !20
  %27 = sext i32 %.decomposed to i64, !dbg !21
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 %18) #1, !dbg !22
  %30 = extractvalue { i64, i64 } %29, 0, !dbg !22
  %31 = extractvalue { i64, i64 } %29, 1, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !23
  %33 = getelementptr i64, ptr addrspace(1) %4, i64 %27, !dbg !24
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 %18) #1, !dbg !25
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !25
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %18) #1, !dbg !27
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %41 = getelementptr i64, ptr addrspace(1) %6, i64 %23, !dbg !28
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %18) #1, !dbg !29
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %18) #1, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #1, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #1, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = lshr i64 %25, 62, !dbg !32
  %50 = and i64 %49, 2, !dbg !32
  %51 = add i64 %50, %25, !dbg !32
  %52 = lshr i64 %30, 62, !dbg !33
  %53 = and i64 %52, 2, !dbg !33
  %54 = lshr i64 %31, 62, !dbg !33
  %55 = and i64 %54, 2, !dbg !33
  %56 = shl i64 %51, 1, !dbg !34
  %57 = shl nsw i32 %22, 2, !dbg !35
  %58 = sext i32 %57 to i64, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %53, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %56, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %58, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %55, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %56, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %58, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #1, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %18) #1, !dbg !38
  %69 = lshr i64 %35, 62, !dbg !39
  %70 = and i64 %69, 2, !dbg !39
  %71 = lshr i64 %36, 62, !dbg !39
  %72 = and i64 %71, 2, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %70, !dbg !40
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %56, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %58, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %72, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %56, !dbg !40
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %58, !dbg !40
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %18) #1, !dbg !41
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %18) #1, !dbg !41
  %83 = lshr i64 %42, 62, !dbg !42
  %84 = and i64 %83, 2, !dbg !42
  %85 = add i64 %84, %42, !dbg !42
  %86 = shl i64 %85, 1, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %60, i64 %86, !dbg !44
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %58, !dbg !44
  %89 = getelementptr float, ptr addrspace(1) %64, i64 %86, !dbg !44
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %58, !dbg !44
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %18) #1, !dbg !45
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %18) #1, !dbg !45
  %93 = getelementptr float, ptr addrspace(1) %74, i64 %86, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %58, !dbg !46
  %95 = getelementptr float, ptr addrspace(1) %78, i64 %86, !dbg !46
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %58, !dbg !46
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %18) #1, !dbg !47
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %18) #1, !dbg !47
  %99 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !45
  %100 = insertelement <2 x i32> %99, i32 %67, i64 1, !dbg !45
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !45
  %102 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !48
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !48
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %105 = fadd <2 x float> %104, %101, !dbg !48
  %106 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !47
  %107 = insertelement <2 x i32> %106, i32 %81, i64 1, !dbg !47
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !47
  %109 = fadd <2 x float> %104, %108, !dbg !49
  %110 = fsub <2 x float> %109, %105, !dbg !50
  %111 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !51
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !51
  %113 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %114 = fmul <2 x float> %110, %113, !dbg !51
  %115 = fadd <2 x float> %105, %114, !dbg !52
  %116 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !45
  %117 = insertelement <2 x i32> %116, i32 %68, i64 1, !dbg !45
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !45
  %119 = fadd <2 x float> %104, %118, !dbg !48
  %120 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !47
  %121 = insertelement <2 x i32> %120, i32 %82, i64 1, !dbg !47
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !47
  %123 = fadd <2 x float> %104, %122, !dbg !49
  %124 = fsub <2 x float> %123, %119, !dbg !50
  %125 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !51
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !51
  %127 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %128 = fmul <2 x float> %124, %127, !dbg !51
  %129 = fadd <2 x float> %119, %128, !dbg !52
  %130 = extractelement <2 x float> %115, i64 0, !dbg !53
  %131 = extractelement <2 x float> %115, i64 1, !dbg !54
  %132 = fsub float %130, %131, !dbg !53
  %133 = extractelement <2 x float> %129, i64 0, !dbg !53
  %134 = extractelement <2 x float> %129, i64 1, !dbg !54
  %135 = fsub float %133, %134, !dbg !53
  %136 = fmul float %132, %46, !dbg !55
  %137 = fmul float %135, %48, !dbg !55
  %138 = sext i32 %17 to i64, !dbg !56
  %139 = getelementptr float, ptr addrspace(1) %8, i64 %138, !dbg !56
  %140 = bitcast float %131 to i32, !dbg !54
  %141 = bitcast float %134 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %140, i32 %141, ptr addrspace(1) %139, i1 %18) #1, !dbg !54
  %142 = getelementptr float, ptr addrspace(1) %9, i64 %138, !dbg !57
  %143 = bitcast float %136 to i32, !dbg !58
  %144 = bitcast float %137 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 %18) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cil6w6fecokwwpqq3wtrb6fix3z4aogvuusmzkjse2yik4c44iff.py", directory: "inductor_cache/il")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_8", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 39, scope: !7)
!35 = !DILocation(line: 43, column: 48, scope: !7)
!36 = !DILocation(line: 43, column: 46, scope: !7)
!37 = !DILocation(line: 43, column: 30, scope: !7)
!38 = !DILocation(line: 43, column: 53, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 48, column: 31, scope: !7)
!41 = !DILocation(line: 48, column: 55, scope: !7)
!42 = !DILocation(line: 55, column: 35, scope: !7)
!43 = !DILocation(line: 56, column: 40, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 55, scope: !7)
!46 = !DILocation(line: 58, column: 31, scope: !7)
!47 = !DILocation(line: 58, column: 56, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 37, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 66, column: 25, scope: !7)
!58 = !DILocation(line: 66, column: 37, scope: !7)
!59 = !DILocation(line: 66, column: 4, scope: !7)
