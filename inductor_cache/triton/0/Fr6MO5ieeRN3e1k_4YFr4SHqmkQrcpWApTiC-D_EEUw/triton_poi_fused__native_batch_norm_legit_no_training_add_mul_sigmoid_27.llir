; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %11, 32, !dbg !12
  %14 = or disjoint i32 %11, 48, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = or disjoint i32 %8, %16, !dbg !13
  %22 = icmp slt i32 %17, 64, !dbg !14
  %23 = icmp slt i32 %18, 64, !dbg !14
  %24 = icmp slt i32 %19, 64, !dbg !14
  %25 = icmp slt i32 %20, 64, !dbg !14
  %26 = icmp slt i32 %21, 64, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 6, !dbg !16
  %29 = or disjoint i32 %28, %16, !dbg !17
  %30 = or disjoint i32 %28, %11, !dbg !17
  %31 = or disjoint i32 %28, %12, !dbg !17
  %32 = or disjoint i32 %28, %13, !dbg !17
  %33 = or disjoint i32 %28, %14, !dbg !17
  %34 = icmp slt i32 %29, 48, !dbg !18
  %35 = icmp slt i32 %30, 48, !dbg !18
  %36 = icmp slt i32 %31, 48, !dbg !18
  %37 = icmp slt i32 %32, 48, !dbg !18
  %38 = icmp slt i32 %33, 48, !dbg !18
  %39 = sdiv i32 %17, 16, !dbg !19
  %40 = sdiv i32 %18, 16, !dbg !19
  %41 = sdiv i32 %19, 16, !dbg !19
  %42 = sdiv i32 %20, 16, !dbg !19
  %.frozen = freeze i32 %21, !dbg !19
  %43 = sdiv i32 %.frozen, 16, !dbg !19
  %44 = mul i32 %43, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %44, !dbg !20
  %45 = mul i32 %17, 48, !dbg !21
  %46 = mul i32 %18, 48, !dbg !21
  %47 = mul i32 %19, 48, !dbg !21
  %48 = mul i32 %20, 48, !dbg !21
  %49 = add i32 %29, %45, !dbg !22
  %50 = add i32 %29, %46, !dbg !22
  %51 = add i32 %29, %47, !dbg !22
  %52 = add i32 %29, %48, !dbg !22
  %53 = sext i32 %49 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %50 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %51 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %52 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = and i1 %22, %34, !dbg !24
  %62 = and i1 %23, %34, !dbg !24
  %63 = and i1 %24, %34, !dbg !24
  %64 = and i1 %25, %34, !dbg !24
  %65 = and i1 %26, %35, !dbg !24
  %66 = and i1 %26, %36, !dbg !24
  %67 = and i1 %26, %37, !dbg !24
  %68 = and i1 %26, %38, !dbg !24
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %61) #2, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %62) #2, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %63) #2, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !25
  %92 = bitcast i32 %88 to float, !dbg !25
  %93 = bitcast i32 %89 to float, !dbg !25
  %94 = bitcast i32 %90 to float, !dbg !25
  %95 = bitcast i32 %91 to float, !dbg !25
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %64) #2, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !25
  %101 = bitcast i32 %97 to float, !dbg !25
  %102 = bitcast i32 %98 to float, !dbg !25
  %103 = bitcast i32 %99 to float, !dbg !25
  %104 = bitcast i32 %100 to float, !dbg !25
  %105 = mul i32 %39, 48, !dbg !26
  %106 = mul i32 %40, 48, !dbg !26
  %107 = mul i32 %41, 48, !dbg !26
  %108 = mul i32 %42, 48, !dbg !26
  %109 = add i32 %105, %29, !dbg !27
  %110 = add i32 %106, %29, !dbg !27
  %111 = add i32 %107, %29, !dbg !27
  %112 = add i32 %108, %29, !dbg !27
  %113 = sext i32 %109 to i64, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !28
  %115 = sext i32 %110 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !28
  %117 = sext i32 %111 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !28
  %119 = sext i32 %112 to i64, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !28
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %61) #2, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !29
  %126 = bitcast i32 %122 to float, !dbg !29
  %127 = bitcast i32 %123 to float, !dbg !29
  %128 = bitcast i32 %124 to float, !dbg !29
  %129 = bitcast i32 %125 to float, !dbg !29
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %62) #2, !dbg !29
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !29
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !29
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !29
  %135 = bitcast i32 %131 to float, !dbg !29
  %136 = bitcast i32 %132 to float, !dbg !29
  %137 = bitcast i32 %133 to float, !dbg !29
  %138 = bitcast i32 %134 to float, !dbg !29
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %63) #2, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !29
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !29
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !29
  %144 = bitcast i32 %140 to float, !dbg !29
  %145 = bitcast i32 %141 to float, !dbg !29
  %146 = bitcast i32 %142 to float, !dbg !29
  %147 = bitcast i32 %143 to float, !dbg !29
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %64) #2, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !29
  %153 = bitcast i32 %149 to float, !dbg !29
  %154 = bitcast i32 %150 to float, !dbg !29
  %155 = bitcast i32 %151 to float, !dbg !29
  %156 = bitcast i32 %152 to float, !dbg !29
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !30
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !30
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !30
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %61) #2, !dbg !31
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !31
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !31
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !31
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !31
  %166 = bitcast i32 %162 to float, !dbg !31
  %167 = bitcast i32 %163 to float, !dbg !31
  %168 = bitcast i32 %164 to float, !dbg !31
  %169 = bitcast i32 %165 to float, !dbg !31
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %62) #2, !dbg !31
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !31
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !31
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !31
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !31
  %175 = bitcast i32 %171 to float, !dbg !31
  %176 = bitcast i32 %172 to float, !dbg !31
  %177 = bitcast i32 %173 to float, !dbg !31
  %178 = bitcast i32 %174 to float, !dbg !31
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 %63) #2, !dbg !31
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !31
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !31
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !31
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !31
  %184 = bitcast i32 %180 to float, !dbg !31
  %185 = bitcast i32 %181 to float, !dbg !31
  %186 = bitcast i32 %182 to float, !dbg !31
  %187 = bitcast i32 %183 to float, !dbg !31
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %160, i1 %64) #2, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !31
  %193 = bitcast i32 %189 to float, !dbg !31
  %194 = bitcast i32 %190 to float, !dbg !31
  %195 = bitcast i32 %191 to float, !dbg !31
  %196 = bitcast i32 %192 to float, !dbg !31
  %197 = fmul float %74, %126, !dbg !32
  %198 = fmul float %75, %127, !dbg !32
  %199 = fmul float %76, %128, !dbg !32
  %200 = fmul float %77, %129, !dbg !32
  %201 = fmul float %83, %135, !dbg !32
  %202 = fmul float %84, %136, !dbg !32
  %203 = fmul float %85, %137, !dbg !32
  %204 = fmul float %86, %138, !dbg !32
  %205 = fmul float %92, %144, !dbg !32
  %206 = fmul float %93, %145, !dbg !32
  %207 = fmul float %94, %146, !dbg !32
  %208 = fmul float %95, %147, !dbg !32
  %209 = fmul float %101, %153, !dbg !32
  %210 = fmul float %102, %154, !dbg !32
  %211 = fmul float %103, %155, !dbg !32
  %212 = fmul float %104, %156, !dbg !32
  %213 = fadd float %197, %166, !dbg !33
  %214 = fadd float %198, %167, !dbg !33
  %215 = fadd float %199, %168, !dbg !33
  %216 = fadd float %200, %169, !dbg !33
  %217 = fadd float %201, %175, !dbg !33
  %218 = fadd float %202, %176, !dbg !33
  %219 = fadd float %203, %177, !dbg !33
  %220 = fadd float %204, %178, !dbg !33
  %221 = fadd float %205, %184, !dbg !33
  %222 = fadd float %206, %185, !dbg !33
  %223 = fadd float %207, %186, !dbg !33
  %224 = fadd float %208, %187, !dbg !33
  %225 = fadd float %209, %193, !dbg !33
  %226 = fadd float %210, %194, !dbg !33
  %227 = fadd float %211, %195, !dbg !33
  %228 = fadd float %212, %196, !dbg !33
  %229 = shl i32 %30, 4, !dbg !34
  %230 = shl i32 %31, 4, !dbg !34
  %231 = shl i32 %32, 4, !dbg !34
  %232 = shl i32 %33, 4, !dbg !34
  %233 = mul i32 %43, 768, !dbg !35
  %234 = add i32 %233, %.decomposed, !dbg !36
  %235 = add i32 %234, %229, !dbg !37
  %236 = add i32 %234, %230, !dbg !37
  %237 = add i32 %234, %231, !dbg !37
  %238 = add i32 %234, %232, !dbg !37
  %239 = sext i32 %235 to i64, !dbg !38
  %240 = getelementptr float, ptr addrspace(1) %3, i64 %239, !dbg !38
  %241 = sext i32 %236 to i64, !dbg !38
  %242 = getelementptr float, ptr addrspace(1) %3, i64 %241, !dbg !38
  %243 = sext i32 %237 to i64, !dbg !38
  %244 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !38
  %245 = sext i32 %238 to i64, !dbg !38
  %246 = getelementptr float, ptr addrspace(1) %3, i64 %245, !dbg !38
  %247 = shl i32 %9, 8, !dbg !39
  %248 = and i32 %247, 3840, !dbg !39
  %249 = or disjoint i32 %248, %11, !dbg !39
  %250 = and i32 %15, 1020, !dbg !39
  %251 = lshr exact i32 %248, 2, !dbg !39
  %252 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %251, !dbg !39
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %249, !dbg !39
  %254 = bitcast float %213 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !39
  %255 = or disjoint i32 %249, 64, !dbg !39
  %256 = lshr i32 %255, 4, !dbg !39
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !39
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %255, !dbg !39
  %259 = bitcast float %214 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !39
  %260 = or disjoint i32 %249, 128, !dbg !39
  %261 = lshr i32 %260, 4, !dbg !39
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !39
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !39
  %264 = bitcast float %215 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !39
  %265 = or disjoint i32 %249, 192, !dbg !39
  %266 = lshr i32 %265, 4, !dbg !39
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !39
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !39
  %269 = bitcast float %216 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !39
  %270 = or disjoint i32 %249, 16, !dbg !39
  %271 = getelementptr float, ptr addrspace(3) %252, i32 %270, !dbg !39
  %272 = bitcast float %217 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !39
  %273 = or disjoint i32 %249, 80, !dbg !39
  %274 = lshr i32 %273, 4, !dbg !39
  %275 = and i32 %274, 244, !dbg !39
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !39
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %273, !dbg !39
  %278 = bitcast float %218 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #2, !dbg !39
  %279 = or disjoint i32 %249, 144, !dbg !39
  %280 = lshr i32 %279, 4, !dbg !39
  %281 = and i32 %280, 248, !dbg !39
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !39
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %279, !dbg !39
  %284 = bitcast float %219 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #2, !dbg !39
  %285 = or disjoint i32 %249, 208, !dbg !39
  %286 = lshr i32 %285, 4, !dbg !39
  %287 = and i32 %286, 252, !dbg !39
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !39
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %285, !dbg !39
  %290 = bitcast float %220 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #2, !dbg !39
  %291 = or disjoint i32 %249, 32, !dbg !39
  %292 = getelementptr float, ptr addrspace(3) %252, i32 %291, !dbg !39
  %293 = bitcast float %221 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !39
  %294 = or disjoint i32 %249, 96, !dbg !39
  %295 = lshr i32 %294, 4, !dbg !39
  %296 = and i32 %295, 244, !dbg !39
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !39
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %294, !dbg !39
  %299 = bitcast float %222 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #2, !dbg !39
  %300 = or disjoint i32 %249, 160, !dbg !39
  %301 = lshr i32 %300, 4, !dbg !39
  %302 = and i32 %301, 248, !dbg !39
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !39
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %300, !dbg !39
  %305 = bitcast float %223 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !39
  %306 = or disjoint i32 %249, 224, !dbg !39
  %307 = lshr i32 %306, 4, !dbg !39
  %308 = and i32 %307, 252, !dbg !39
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !39
  %310 = getelementptr float, ptr addrspace(3) %309, i32 %306, !dbg !39
  %311 = bitcast float %224 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #2, !dbg !39
  %312 = or disjoint i32 %249, 48, !dbg !39
  %313 = getelementptr float, ptr addrspace(3) %252, i32 %312, !dbg !39
  %314 = bitcast float %225 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #2, !dbg !39
  %315 = or disjoint i32 %249, 112, !dbg !39
  %316 = lshr i32 %315, 4, !dbg !39
  %317 = and i32 %316, 244, !dbg !39
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !39
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %315, !dbg !39
  %320 = bitcast float %226 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #2, !dbg !39
  %321 = or disjoint i32 %249, 176, !dbg !39
  %322 = lshr i32 %321, 4, !dbg !39
  %323 = and i32 %322, 248, !dbg !39
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i32 %323, !dbg !39
  %325 = getelementptr float, ptr addrspace(3) %324, i32 %321, !dbg !39
  %326 = bitcast float %227 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #2, !dbg !39
  %327 = or disjoint i32 %249, 240, !dbg !39
  %328 = lshr i32 %327, 4, !dbg !39
  %329 = and i32 %328, 252, !dbg !39
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %329, !dbg !39
  %331 = getelementptr float, ptr addrspace(3) %330, i32 %327, !dbg !39
  %332 = bitcast float %228 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %333 = lshr i32 %15, 4, !dbg !39
  %334 = and i32 %333, 60, !dbg !39
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %334, !dbg !39
  %336 = getelementptr inbounds float, ptr addrspace(3) %335, i32 %250, !dbg !39
  %337 = or disjoint i32 %250, 1024, !dbg !39
  %338 = lshr i32 %337, 4, !dbg !39
  %339 = and i32 %338, 124, !dbg !39
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !39
  %341 = getelementptr inbounds float, ptr addrspace(3) %340, i32 %337, !dbg !39
  %342 = load <4 x i32>, ptr addrspace(3) %341, align 16, !dbg !39
  %343 = or disjoint i32 %250, 2048, !dbg !39
  %344 = lshr i32 %343, 4, !dbg !39
  %345 = and i32 %344, 188, !dbg !39
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %345, !dbg !39
  %347 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %343, !dbg !39
  %348 = load <4 x i32>, ptr addrspace(3) %347, align 16, !dbg !39
  %349 = or disjoint i32 %250, 3072, !dbg !39
  %350 = lshr i32 %349, 4, !dbg !39
  %351 = and i32 %350, 252, !dbg !39
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !39
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %349, !dbg !39
  %354 = load <4 x i32>, ptr addrspace(3) %353, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %336, align 16, !dbg !39
  %355 = getelementptr inbounds i8, ptr addrspace(3) %336, i32 4, !dbg !39
  %.extract16 = load i32, ptr addrspace(3) %355, align 4, !dbg !39
  %356 = getelementptr inbounds i8, ptr addrspace(3) %336, i32 8, !dbg !39
  %.extract17 = load i32, ptr addrspace(3) %356, align 8, !dbg !39
  %357 = getelementptr inbounds i8, ptr addrspace(3) %336, i32 12, !dbg !39
  %.extract18 = load i32, ptr addrspace(3) %357, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %240, i1 %65) #2, !dbg !39
  %.extract19 = extractelement <4 x i32> %342, i64 0, !dbg !39
  %.extract20 = extractelement <4 x i32> %342, i64 1, !dbg !39
  %.extract21 = extractelement <4 x i32> %342, i64 2, !dbg !39
  %.extract22 = extractelement <4 x i32> %342, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %242, i1 %66) #2, !dbg !39
  %.extract23 = extractelement <4 x i32> %348, i64 0, !dbg !39
  %.extract24 = extractelement <4 x i32> %348, i64 1, !dbg !39
  %.extract25 = extractelement <4 x i32> %348, i64 2, !dbg !39
  %.extract26 = extractelement <4 x i32> %348, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %244, i1 %67) #2, !dbg !39
  %.extract27 = extractelement <4 x i32> %354, i64 0, !dbg !39
  %.extract28 = extractelement <4 x i32> %354, i64 1, !dbg !39
  %.extract29 = extractelement <4 x i32> %354, i64 2, !dbg !39
  %.extract30 = extractelement <4 x i32> %354, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %246, i1 %68) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqoyljieztdhblcxaog2gs2m3f755riivtkq4sh2ydg2dcpempjp.py", directory: "inductor_cache/qo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 38, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 43, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 33, scope: !7)
!35 = !DILocation(line: 37, column: 42, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 38, scope: !7)
!38 = !DILocation(line: 37, column: 25, scope: !7)
!39 = !DILocation(line: 37, column: 53, scope: !7)
!40 = !DILocation(line: 37, column: 4, scope: !7)
