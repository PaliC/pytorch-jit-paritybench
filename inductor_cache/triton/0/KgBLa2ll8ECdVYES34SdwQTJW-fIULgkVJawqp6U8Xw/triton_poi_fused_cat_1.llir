; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %6, 1, !dbg !13
  %12 = icmp slt i32 %10, 64, !dbg !14
  %13 = sdiv i32 %10, 4, !dbg !15
  %14 = srem i32 %11, 2, !dbg !16
  %15 = ashr exact i32 %10, 1, !dbg !17
  %16 = sdiv i32 %10, 16, !dbg !18
  %17 = mul i32 %16, 18, !dbg !19
  %18 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !20
  %19 = insertelement <2 x i32> %18, i32 %15, i64 1, !dbg !20
  %20 = srem <2 x i32> %19, <i32 4, i32 2>, !dbg !20
  %21 = extractelement <2 x i32> %20, i64 0, !dbg !21
  %22 = icmp slt i32 %21, 2, !dbg !22
  %23 = mul nsw <2 x i32> %20, <i32 9, i32 3>, !dbg !23
  %24 = extractelement <2 x i32> %23, i64 1, !dbg !24
  %25 = add nsw i32 %24, %14, !dbg !25
  %26 = insertelement <2 x i32> <i32 poison, i32 4>, i32 %17, i64 0, !dbg !26
  %27 = add <2 x i32> %23, %26, !dbg !26
  %28 = extractelement <2 x i32> %27, i64 0, !dbg !27
  %29 = add i32 %28, %24, !dbg !28
  %30 = add i32 %28, %25, !dbg !28
  %31 = sext i32 %29 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = sext i32 %30 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !29
  %35 = and i1 %12, %22, !dbg !30
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %35, i32 0, i1 %35) #1, !dbg !31
  %37 = bitcast i32 %36 to float, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35) #1, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = add nsw i32 %24, 1, !dbg !32
  %41 = add nsw i32 %25, 1, !dbg !32
  %42 = add i32 %28, %40, !dbg !33
  %43 = add i32 %28, %41, !dbg !33
  %44 = sext i32 %42 to i64, !dbg !34
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !34
  %46 = sext i32 %43 to i64, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !34
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %35, i32 0, i1 %35) #1, !dbg !35
  %49 = bitcast i32 %48 to float, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %35, i32 0, i1 %35) #1, !dbg !35
  %51 = bitcast i32 %50 to float, !dbg !35
  %52 = fcmp ogt float %49, %37, !dbg !36
  %53 = fcmp ogt float %51, %39, !dbg !36
  %54 = fcmp uno float %49, 0.000000e+00, !dbg !40
  %55 = fcmp uno float %51, 0.000000e+00, !dbg !40
  %56 = or i1 %52, %54, !dbg !41
  %57 = or i1 %53, %55, !dbg !41
  %58 = select i1 %56, float %49, float %37, !dbg !42
  %59 = select i1 %57, float %51, float %39, !dbg !42
  %60 = add nsw i32 %24, 3, !dbg !43
  %61 = add nsw i32 %25, 3, !dbg !43
  %62 = add i32 %28, %60, !dbg !44
  %63 = add i32 %28, %61, !dbg !44
  %64 = sext i32 %62 to i64, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !45
  %66 = sext i32 %63 to i64, !dbg !45
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !45
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %35, i32 0, i1 %35) #1, !dbg !46
  %69 = bitcast i32 %68 to float, !dbg !46
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %35, i32 0, i1 %35) #1, !dbg !46
  %71 = bitcast i32 %70 to float, !dbg !46
  %72 = fcmp olt float %58, %69, !dbg !47
  %73 = fcmp olt float %59, %71, !dbg !47
  %74 = fcmp uno float %69, 0.000000e+00, !dbg !49
  %75 = fcmp uno float %71, 0.000000e+00, !dbg !49
  %76 = or i1 %74, %72, !dbg !50
  %77 = or i1 %75, %73, !dbg !50
  %78 = select i1 %76, float %69, float %58, !dbg !51
  %79 = select i1 %77, float %71, float %59, !dbg !51
  %80 = add nsw i32 %25, 4, !dbg !52
  %81 = extractelement <2 x i32> %27, i64 1, !dbg !53
  %82 = add i32 %28, %81, !dbg !27
  %83 = add i32 %28, %80, !dbg !27
  %84 = sext i32 %82 to i64, !dbg !54
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !54
  %86 = sext i32 %83 to i64, !dbg !54
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !54
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %35, i32 0, i1 %35) #1, !dbg !55
  %89 = bitcast i32 %88 to float, !dbg !55
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %35, i32 0, i1 %35) #1, !dbg !55
  %91 = bitcast i32 %90 to float, !dbg !55
  %92 = fcmp olt float %78, %89, !dbg !56
  %93 = fcmp olt float %79, %91, !dbg !56
  %94 = fcmp uno float %89, 0.000000e+00, !dbg !58
  %95 = fcmp uno float %91, 0.000000e+00, !dbg !58
  %96 = or i1 %94, %92, !dbg !59
  %97 = or i1 %95, %93, !dbg !59
  %98 = select i1 %96, float %89, float %78, !dbg !60
  %99 = select i1 %97, float %91, float %79, !dbg !60
  %100 = icmp sgt i32 %21, 1, !dbg !21
  %101 = extractelement <2 x i32> %23, i64 0, !dbg !61
  %102 = add nsw i32 %101, -18, !dbg !61
  %103 = add i32 %102, %17, !dbg !62
  %104 = add i32 %103, %24, !dbg !24
  %105 = add i32 %103, %25, !dbg !24
  %106 = sext i32 %104 to i64, !dbg !63
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !63
  %108 = sext i32 %105 to i64, !dbg !63
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !63
  %110 = and i1 %12, %100, !dbg !64
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %110, i32 0, i1 %110) #1, !dbg !65
  %112 = bitcast i32 %111 to float, !dbg !65
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %110, i32 0, i1 %110) #1, !dbg !65
  %114 = bitcast i32 %113 to float, !dbg !65
  %115 = add i32 %103, %40, !dbg !66
  %116 = add i32 %103, %41, !dbg !66
  %117 = sext i32 %115 to i64, !dbg !67
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !67
  %119 = sext i32 %116 to i64, !dbg !67
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !67
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %110, i32 0, i1 %110) #1, !dbg !68
  %122 = bitcast i32 %121 to float, !dbg !68
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %110, i32 0, i1 %110) #1, !dbg !68
  %124 = bitcast i32 %123 to float, !dbg !68
  %125 = fcmp ogt float %122, %112, !dbg !69
  %126 = fcmp ogt float %124, %114, !dbg !69
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !71
  %128 = fcmp uno float %124, 0.000000e+00, !dbg !71
  %129 = or i1 %125, %127, !dbg !72
  %130 = or i1 %126, %128, !dbg !72
  %131 = select i1 %129, float %122, float %112, !dbg !73
  %132 = select i1 %130, float %124, float %114, !dbg !73
  %133 = add i32 %103, %60, !dbg !74
  %134 = add i32 %103, %61, !dbg !74
  %135 = sext i32 %133 to i64, !dbg !75
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !75
  %137 = sext i32 %134 to i64, !dbg !75
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !75
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %110, i32 0, i1 %110) #1, !dbg !76
  %140 = bitcast i32 %139 to float, !dbg !76
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %110, i32 0, i1 %110) #1, !dbg !76
  %142 = bitcast i32 %141 to float, !dbg !76
  %143 = fcmp olt float %131, %140, !dbg !77
  %144 = fcmp olt float %132, %142, !dbg !77
  %145 = fcmp uno float %140, 0.000000e+00, !dbg !79
  %146 = fcmp uno float %142, 0.000000e+00, !dbg !79
  %147 = or i1 %145, %143, !dbg !80
  %148 = or i1 %146, %144, !dbg !80
  %149 = select i1 %147, float %140, float %131, !dbg !81
  %150 = select i1 %148, float %142, float %132, !dbg !81
  %151 = add i32 %103, %81, !dbg !53
  %152 = add i32 %103, %80, !dbg !53
  %153 = sext i32 %151 to i64, !dbg !82
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !82
  %155 = sext i32 %152 to i64, !dbg !82
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !82
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %110, i32 0, i1 %110) #1, !dbg !83
  %158 = bitcast i32 %157 to float, !dbg !83
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %110, i32 0, i1 %110) #1, !dbg !83
  %160 = bitcast i32 %159 to float, !dbg !83
  %161 = fcmp olt float %149, %158, !dbg !84
  %162 = fcmp olt float %150, %160, !dbg !84
  %163 = fcmp uno float %158, 0.000000e+00, !dbg !86
  %164 = fcmp uno float %160, 0.000000e+00, !dbg !86
  %165 = or i1 %163, %161, !dbg !87
  %166 = or i1 %164, %162, !dbg !87
  %167 = select i1 %165, float %158, float %149, !dbg !88
  %168 = select i1 %166, float %160, float %150, !dbg !88
  %169 = select i1 %22, float %98, float %167, !dbg !89
  %170 = select i1 %22, float %99, float %168, !dbg !89
  %171 = sext i32 %10 to i64, !dbg !90
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !90
  %173 = bitcast float %169 to i32, !dbg !91
  %174 = bitcast float %170 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %12) #1, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnpyji43v5hu5kuo7omcukch4ltqesk7m47fksxe6rvgosgvzddc.py", directory: "inductor_cache/np")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 54, scope: !7)
!20 = !DILocation(line: 24, column: 26, scope: !7)
!21 = !DILocation(line: 43, column: 20, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 45, scope: !7)
!24 = !DILocation(line: 46, column: 59, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 42, scope: !7)
!27 = !DILocation(line: 39, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 51, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 66, scope: !7)
!31 = !DILocation(line: 34, column: 59, scope: !7)
!32 = !DILocation(line: 35, column: 39, scope: !7)
!33 = !DILocation(line: 35, column: 55, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 63, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 36, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 37, column: 39, scope: !7)
!44 = !DILocation(line: 37, column: 55, scope: !7)
!45 = !DILocation(line: 37, column: 30, scope: !7)
!46 = !DILocation(line: 37, column: 63, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !48)
!48 = !DILocation(line: 38, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !48)
!52 = !DILocation(line: 39, column: 40, scope: !7)
!53 = !DILocation(line: 51, column: 63, scope: !7)
!54 = !DILocation(line: 39, column: 31, scope: !7)
!55 = !DILocation(line: 39, column: 64, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !57)
!61 = !DILocation(line: 46, column: 46, scope: !7)
!62 = !DILocation(line: 46, column: 43, scope: !7)
!63 = !DILocation(line: 46, column: 31, scope: !7)
!64 = !DILocation(line: 46, column: 75, scope: !7)
!65 = !DILocation(line: 46, column: 67, scope: !7)
!66 = !DILocation(line: 47, column: 63, scope: !7)
!67 = !DILocation(line: 47, column: 31, scope: !7)
!68 = !DILocation(line: 47, column: 71, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !70)
!70 = !DILocation(line: 48, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !70)
!74 = !DILocation(line: 49, column: 63, scope: !7)
!75 = !DILocation(line: 49, column: 31, scope: !7)
!76 = !DILocation(line: 49, column: 71, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !78)
!78 = !DILocation(line: 50, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !78)
!82 = !DILocation(line: 51, column: 31, scope: !7)
!83 = !DILocation(line: 51, column: 71, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !85)
!85 = !DILocation(line: 52, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !85)
!89 = !DILocation(line: 0, scope: !7)
!90 = !DILocation(line: 56, column: 25, scope: !7)
!91 = !DILocation(line: 56, column: 37, scope: !7)
!92 = !DILocation(line: 56, column: 4, scope: !7)
