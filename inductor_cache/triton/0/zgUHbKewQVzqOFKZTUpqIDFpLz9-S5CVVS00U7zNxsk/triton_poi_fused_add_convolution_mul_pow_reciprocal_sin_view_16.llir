; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define void @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %result.i.i.i.i1 = alloca [7 x i32], align 4
  %result.i.i.i.i = alloca [7 x i32], align 4
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %15) #4, !dbg !16
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !16
  %21 = bitcast i32 %19 to float, !dbg !16
  %22 = bitcast i32 %20 to float, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %15) #4, !dbg !18
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !18
  %27 = bitcast i32 %25 to float, !dbg !18
  %28 = bitcast i32 %26 to float, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %15) #4, !dbg !20
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %33 = bitcast i32 %31 to float, !dbg !20
  %34 = bitcast i32 %32 to float, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #4, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #4, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = fadd float %21, %27, !dbg !23
  %40 = fadd float %22, %28, !dbg !23
  %41 = fadd float %33, %36, !dbg !24
  %42 = fadd float %34, %36, !dbg !24
  %43 = fadd float %39, %41, !dbg !25
  %44 = fadd float %40, %42, !dbg !25
  %45 = fadd float %38, 0x3E112E0BE0000000, !dbg !26
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %45) #4, !dbg !27
  %47 = fmul float %43, %38, !dbg !28
  %48 = fmul float %44, %38, !dbg !28
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !29
  %49 = fmul float %47, 0x3FE45F3060000000, !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %50, 0, !dbg !29
  %51 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %49) #4, !dbg !29
  %52 = tail call i32 @llvm.nvvm.f2i.rn(float %49) #4, !dbg !29
  %.01.i = select i1 %.not.i, i32 %52, i32 %51, !dbg !29
  %53 = sitofp i32 %.01.i to float, !dbg !29
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not15.i = icmp eq i32 %54, 0, !dbg !29
  %55 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %53, float 0xBFF921FB40000000, float %47) #4, !dbg !29
  %56 = tail call float @llvm.nvvm.fma.rn.f(float %53, float 0xBFF921FB40000000, float %47) #4, !dbg !29
  %.02.i = select i1 %.not15.i, float %56, float %55, !dbg !29
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not16.i = icmp eq i32 %57, 0, !dbg !29
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %53, float 0xBE74442D00000000, float %.02.i) #4, !dbg !29
  %59 = tail call float @llvm.nvvm.fma.rn.f(float %53, float 0xBE74442D00000000, float %.02.i) #4, !dbg !29
  %.03.i = select i1 %.not16.i, float %59, float %58, !dbg !29
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not17.i = icmp eq i32 %60, 0, !dbg !29
  %61 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %53, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !29
  %62 = tail call float @llvm.nvvm.fma.rn.f(float %53, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !29
  %.04.i = select i1 %.not17.i, float %62, float %61, !dbg !29
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not18.i = icmp eq i32 %63, 0, !dbg !29
  %64 = tail call float @llvm.nvvm.fabs.ftz.f(float %47) #4, !dbg !29
  %65 = tail call float @llvm.nvvm.fabs.f(float %47) #4, !dbg !29
  %.06.i = select i1 %.not18.i, float %65, float %64, !dbg !29
  %66 = fcmp ult float %.06.i, 1.056150e+05, !dbg !29
  br i1 %66, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !29

__nv_isinff.exit.i.i.i:                           ; preds = %8
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not19.i = icmp eq i32 %67, 0, !dbg !29
  %.07.i = select i1 %.not19.i, float %65, float %64, !dbg !29
  %68 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !29
  br i1 %68, label %__nv_fmul_rn.exit.i.i.i, label %72, !dbg !29

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not27.i = icmp eq i32 %69, 0, !dbg !29
  %70 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %47, float 0.000000e+00) #4, !dbg !29
  %71 = tail call float @llvm.nvvm.mul.rn.f(float %47, float 0.000000e+00) #4, !dbg !29
  %.08.i = select i1 %.not27.i, float %71, float %70, !dbg !29
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !29

72:                                               ; preds = %__nv_isinff.exit.i.i.i
  %73 = bitcast float %47 to i32, !dbg !29
  %74 = lshr i32 %73, 23, !dbg !29
  %75 = and i32 %74, 224, !dbg !29
  %76 = add nsw i32 %75, -128, !dbg !29
  %77 = shl i32 %73, 8, !dbg !29
  %78 = or i32 %77, -2147483648, !dbg !29
  %79 = lshr exact i32 %76, 5, !dbg !29
  br label %80, !dbg !29

80:                                               ; preds = %72, %80
  %indvars.iv = phi i64 [ 0, %72 ], [ %indvars.iv.next, %80 ]
  %hi.i.i.i.0.i56 = phi i32 [ 0, %72 ], [ %85, %80 ]
  %81 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !29
  %82 = load i32, ptr addrspace(1) %81, align 4, !dbg !29
  %83 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %82, i32 %78, i32 %hi.i.i.i.0.i56) #5, !dbg !29, !srcloc !30
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !29
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !29
  %86 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !29
  store i32 %84, ptr %86, align 4, !dbg !29
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !29
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !29
  br i1 %exitcond.not, label %87, label %80, !dbg !29, !llvm.loop !31

87:                                               ; preds = %80
  %88 = getelementptr inbounds i8, ptr %result.i.i.i.i, i64 24, !dbg !29
  store i32 %85, ptr %88, align 4, !dbg !29
  %89 = and i32 %74, 31, !dbg !29
  %90 = sub nsw i32 6, %79, !dbg !29
  %91 = sext i32 %90 to i64, !dbg !29
  %92 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %91, !dbg !29
  %93 = load i32, ptr %92, align 4, !dbg !29
  %94 = sub nsw i32 5, %79, !dbg !29
  %95 = sext i32 %94 to i64, !dbg !29
  %96 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %95, !dbg !29
  %97 = load i32, ptr %96, align 4, !dbg !29
  %.not20.i = icmp eq i32 %89, 0, !dbg !29
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %98, !dbg !29

98:                                               ; preds = %87
  %99 = sub nsw i32 4, %79, !dbg !29
  %100 = sub nuw nsw i32 32, %89, !dbg !29
  %101 = shl i32 %93, %89, !dbg !29
  %102 = lshr i32 %97, %100, !dbg !29
  %103 = add i32 %102, %101, !dbg !29
  %104 = shl i32 %97, %89, !dbg !29
  %105 = sext i32 %99 to i64, !dbg !29
  %106 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %105, !dbg !29
  %107 = load i32, ptr %106, align 4, !dbg !29
  %108 = lshr i32 %107, %100, !dbg !29
  %109 = add i32 %108, %104, !dbg !29
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !29

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %98, %87
  %hi.i.i.i.1.i = phi i32 [ %103, %98 ], [ %93, %87 ], !dbg !29
  %lo.i.i.i.0.i = phi i32 [ %109, %98 ], [ %97, %87 ], !dbg !29
  %110 = lshr i32 %hi.i.i.i.1.i, 30, !dbg !29
  %111 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i, i32 %lo.i.i.i.0.i, i32 2), !dbg !29
  %112 = shl i32 %lo.i.i.i.0.i, 2, !dbg !29
  %113 = lshr i32 %111, 31, !dbg !29
  %114 = add nuw nsw i32 %113, %110, !dbg !29
  %115 = sub nsw i32 0, %114, !dbg !29
  %.not2123.i = icmp slt i32 %73, 0, !dbg !29
  %spec.select.i = select i1 %.not2123.i, i32 %115, i32 %114, !dbg !29
  %116 = xor i32 %111, %73, !dbg !29
  %.lobit.i = ashr i32 %111, 31, !dbg !29
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %111, !dbg !29
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %112, !dbg !29
  %117 = zext i32 %hi.i.i.i.2.i to i64, !dbg !29
  %118 = shl nuw i64 %117, 32, !dbg !29
  %119 = zext i32 %lo.i.i.i.1.i to i64, !dbg !29
  %120 = or disjoint i64 %118, %119, !dbg !29
  %121 = sitofp i64 %120 to double, !dbg !29
  %122 = fmul double %121, 0x3BF921FB54442D19, !dbg !29
  %123 = fptrunc double %122 to float, !dbg !29
  %124 = fneg float %123, !dbg !29
  %.not2526.i = icmp slt i32 %116, 0, !dbg !29
  %r.i.i.i.0.i = select i1 %.not2526.i, float %124, float %123, !dbg !29
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !29

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %8
  %i.i.1.i = phi i32 [ %.01.i, %8 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !29
  %t.i.i.1.i = phi float [ %.04.i, %8 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !29
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not28.i = icmp eq i32 %125, 0, !dbg !29
  %126 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !29
  %127 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !29
  %.011.i = select i1 %.not28.i, float %127, float %126, !dbg !29
  %128 = and i32 %i.i.1.i, 1, !dbg !29
  %.not29.i = icmp eq i32 %128, 0, !dbg !29
  %129 = select i1 %.not29.i, float %t.i.i.1.i, float 1.000000e+00, !dbg !29
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not30.i = icmp eq i32 %130, 0, !dbg !29
  %131 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %129, float 0.000000e+00) #4, !dbg !29
  %132 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %129, float 0.000000e+00) #4, !dbg !29
  %.012.i = select i1 %.not30.i, float %132, float %131, !dbg !29
  br i1 %.not29.i, label %__internal_fmad.exit2.i.i.i, label %__internal_fmad.exit1.i.i.i, !dbg !29

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not31.i = icmp eq i32 %133, 0, !dbg !29
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !29
  %135 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !29
  %.013.i = select i1 %.not31.i, float %135, float %134, !dbg !29
  br label %__internal_fmad.exit2.i.i.i, !dbg !29

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %136 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !29
  %137 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !29
  %138 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !29
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not32.i = icmp eq i32 %139, 0, !dbg !29
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %138, float %.011.i, float %137) #4, !dbg !29
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %138, float %.011.i, float %137) #4, !dbg !29
  %.010.i = select i1 %.not32.i, float %141, float %140, !dbg !29
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not33.i = icmp eq i32 %142, 0, !dbg !29
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %136) #4, !dbg !29
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %136) #4, !dbg !29
  %.09.i = select i1 %.not33.i, float %144, float %143, !dbg !29
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not34.i = icmp eq i32 %145, 0, !dbg !29
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %129) #4, !dbg !29
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %129) #4, !dbg !29
  %.05.i = select i1 %.not34.i, float %147, float %146, !dbg !29
  %148 = and i32 %i.i.1.i, 2, !dbg !29
  %.not35.i = icmp eq i32 %148, 0, !dbg !29
  br i1 %.not35.i, label %__nv_sinf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !29

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not36.i = icmp eq i32 %149, 0, !dbg !29
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !29
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !29
  %.0.i = select i1 %.not36.i, float %151, float %150, !dbg !29
  br label %__nv_sinf.exit, !dbg !29

__nv_sinf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !29
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !29
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !29
  %152 = fmul float %48, 0x3FE45F3060000000, !dbg !29
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i2 = icmp eq i32 %153, 0, !dbg !29
  %154 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %152) #4, !dbg !29
  %155 = tail call i32 @llvm.nvvm.f2i.rn(float %152) #4, !dbg !29
  %.01.i3 = select i1 %.not.i2, i32 %155, i32 %154, !dbg !29
  %156 = sitofp i32 %.01.i3 to float, !dbg !29
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not15.i4 = icmp eq i32 %157, 0, !dbg !29
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %156, float 0xBFF921FB40000000, float %48) #4, !dbg !29
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %156, float 0xBFF921FB40000000, float %48) #4, !dbg !29
  %.02.i5 = select i1 %.not15.i4, float %159, float %158, !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not16.i6 = icmp eq i32 %160, 0, !dbg !29
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %156, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !29
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %156, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !29
  %.03.i7 = select i1 %.not16.i6, float %162, float %161, !dbg !29
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not17.i8 = icmp eq i32 %163, 0, !dbg !29
  %164 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %156, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !29
  %165 = tail call float @llvm.nvvm.fma.rn.f(float %156, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !29
  %.04.i9 = select i1 %.not17.i8, float %165, float %164, !dbg !29
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not18.i10 = icmp eq i32 %166, 0, !dbg !29
  %167 = tail call float @llvm.nvvm.fabs.ftz.f(float %48) #4, !dbg !29
  %168 = tail call float @llvm.nvvm.fabs.f(float %48) #4, !dbg !29
  %.06.i11 = select i1 %.not18.i10, float %168, float %167, !dbg !29
  %169 = fcmp ult float %.06.i11, 1.056150e+05, !dbg !29
  br i1 %169, label %__internal_trig_reduction_kernel.exit.i.i29, label %__nv_isinff.exit.i.i.i12, !dbg !29

__nv_isinff.exit.i.i.i12:                         ; preds = %__nv_sinf.exit
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not19.i13 = icmp eq i32 %170, 0, !dbg !29
  %.07.i14 = select i1 %.not19.i13, float %168, float %167, !dbg !29
  %171 = fcmp oeq float %.07.i14, 0x7FF0000000000000, !dbg !29
  br i1 %171, label %__nv_fmul_rn.exit.i.i.i52, label %175, !dbg !29

__nv_fmul_rn.exit.i.i.i52:                        ; preds = %__nv_isinff.exit.i.i.i12
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not27.i53 = icmp eq i32 %172, 0, !dbg !29
  %173 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %48, float 0.000000e+00) #4, !dbg !29
  %174 = tail call float @llvm.nvvm.mul.rn.f(float %48, float 0.000000e+00) #4, !dbg !29
  %.08.i54 = select i1 %.not27.i53, float %174, float %173, !dbg !29
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !29

175:                                              ; preds = %__nv_isinff.exit.i.i.i12
  %176 = bitcast float %48 to i32, !dbg !29
  %177 = lshr i32 %176, 23, !dbg !29
  %178 = and i32 %177, 224, !dbg !29
  %179 = add nsw i32 %178, -128, !dbg !29
  %180 = shl i32 %176, 8, !dbg !29
  %181 = or i32 %180, -2147483648, !dbg !29
  %182 = lshr exact i32 %179, 5, !dbg !29
  br label %183, !dbg !29

183:                                              ; preds = %175, %183
  %indvars.iv63 = phi i64 [ 0, %175 ], [ %indvars.iv.next64, %183 ]
  %hi.i.i.i.0.i1558 = phi i32 [ 0, %175 ], [ %188, %183 ]
  %184 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv63, !dbg !29
  %185 = load i32, ptr addrspace(1) %184, align 4, !dbg !29
  %186 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %185, i32 %181, i32 %hi.i.i.i.0.i1558) #5, !dbg !29, !srcloc !30
  %187 = extractvalue { i32, i32 } %186, 0, !dbg !29
  %188 = extractvalue { i32, i32 } %186, 1, !dbg !29
  %189 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %indvars.iv63, !dbg !29
  store i32 %187, ptr %189, align 4, !dbg !29
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1, !dbg !29
  %exitcond65.not = icmp eq i64 %indvars.iv.next64, 6, !dbg !29
  br i1 %exitcond65.not, label %190, label %183, !dbg !29, !llvm.loop !33

190:                                              ; preds = %183
  %191 = getelementptr inbounds i8, ptr %result.i.i.i.i1, i64 24, !dbg !29
  store i32 %188, ptr %191, align 4, !dbg !29
  %192 = and i32 %177, 31, !dbg !29
  %193 = sub nsw i32 6, %182, !dbg !29
  %194 = sext i32 %193 to i64, !dbg !29
  %195 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %194, !dbg !29
  %196 = load i32, ptr %195, align 4, !dbg !29
  %197 = sub nsw i32 5, %182, !dbg !29
  %198 = sext i32 %197 to i64, !dbg !29
  %199 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %198, !dbg !29
  %200 = load i32, ptr %199, align 4, !dbg !29
  %.not20.i17 = icmp eq i32 %192, 0, !dbg !29
  br i1 %.not20.i17, label %__internal_trig_reduction_slowpath.exit.i.i.i18, label %201, !dbg !29

201:                                              ; preds = %190
  %202 = sub nsw i32 4, %182, !dbg !29
  %203 = sub nuw nsw i32 32, %192, !dbg !29
  %204 = shl i32 %196, %192, !dbg !29
  %205 = lshr i32 %200, %203, !dbg !29
  %206 = add i32 %205, %204, !dbg !29
  %207 = shl i32 %200, %192, !dbg !29
  %208 = sext i32 %202 to i64, !dbg !29
  %209 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %208, !dbg !29
  %210 = load i32, ptr %209, align 4, !dbg !29
  %211 = lshr i32 %210, %203, !dbg !29
  %212 = add i32 %211, %207, !dbg !29
  br label %__internal_trig_reduction_slowpath.exit.i.i.i18, !dbg !29

__internal_trig_reduction_slowpath.exit.i.i.i18:  ; preds = %201, %190
  %hi.i.i.i.1.i19 = phi i32 [ %206, %201 ], [ %196, %190 ], !dbg !29
  %lo.i.i.i.0.i20 = phi i32 [ %212, %201 ], [ %200, %190 ], !dbg !29
  %213 = lshr i32 %hi.i.i.i.1.i19, 30, !dbg !29
  %214 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i19, i32 %lo.i.i.i.0.i20, i32 2), !dbg !29
  %215 = shl i32 %lo.i.i.i.0.i20, 2, !dbg !29
  %216 = lshr i32 %214, 31, !dbg !29
  %217 = add nuw nsw i32 %216, %213, !dbg !29
  %218 = sub nsw i32 0, %217, !dbg !29
  %.not2123.i21 = icmp slt i32 %176, 0, !dbg !29
  %spec.select.i22 = select i1 %.not2123.i21, i32 %218, i32 %217, !dbg !29
  %219 = xor i32 %214, %176, !dbg !29
  %.lobit.i23 = ashr i32 %214, 31, !dbg !29
  %hi.i.i.i.2.i24 = xor i32 %.lobit.i23, %214, !dbg !29
  %lo.i.i.i.1.i26 = xor i32 %.lobit.i23, %215, !dbg !29
  %220 = zext i32 %hi.i.i.i.2.i24 to i64, !dbg !29
  %221 = shl nuw i64 %220, 32, !dbg !29
  %222 = zext i32 %lo.i.i.i.1.i26 to i64, !dbg !29
  %223 = or disjoint i64 %221, %222, !dbg !29
  %224 = sitofp i64 %223 to double, !dbg !29
  %225 = fmul double %224, 0x3BF921FB54442D19, !dbg !29
  %226 = fptrunc double %225 to float, !dbg !29
  %227 = fneg float %226, !dbg !29
  %.not2526.i27 = icmp slt i32 %219, 0, !dbg !29
  %r.i.i.i.0.i28 = select i1 %.not2526.i27, float %227, float %226, !dbg !29
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !29

__internal_trig_reduction_kernel.exit.i.i29:      ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i18, %__nv_fmul_rn.exit.i.i.i52, %__nv_sinf.exit
  %i.i.1.i30 = phi i32 [ %.01.i3, %__nv_sinf.exit ], [ 0, %__nv_fmul_rn.exit.i.i.i52 ], [ %spec.select.i22, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !29
  %t.i.i.1.i31 = phi float [ %.04.i9, %__nv_sinf.exit ], [ %.08.i54, %__nv_fmul_rn.exit.i.i.i52 ], [ %r.i.i.i.0.i28, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !29
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not28.i32 = icmp eq i32 %228, 0, !dbg !29
  %229 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !29
  %230 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !29
  %.011.i33 = select i1 %.not28.i32, float %230, float %229, !dbg !29
  %231 = and i32 %i.i.1.i30, 1, !dbg !29
  %.not29.i34 = icmp eq i32 %231, 0, !dbg !29
  %232 = select i1 %.not29.i34, float %t.i.i.1.i31, float 1.000000e+00, !dbg !29
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not30.i35 = icmp eq i32 %233, 0, !dbg !29
  %234 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i33, float %232, float 0.000000e+00) #4, !dbg !29
  %235 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i33, float %232, float 0.000000e+00) #4, !dbg !29
  %.012.i36 = select i1 %.not30.i35, float %235, float %234, !dbg !29
  br i1 %.not29.i34, label %__internal_fmad.exit2.i.i.i40, label %__internal_fmad.exit1.i.i.i37, !dbg !29

__internal_fmad.exit1.i.i.i37:                    ; preds = %__internal_trig_reduction_kernel.exit.i.i29
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not31.i38 = icmp eq i32 %236, 0, !dbg !29
  %237 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !29
  %238 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !29
  %.013.i39 = select i1 %.not31.i38, float %238, float %237, !dbg !29
  br label %__internal_fmad.exit2.i.i.i40, !dbg !29

__internal_fmad.exit2.i.i.i40:                    ; preds = %__internal_fmad.exit1.i.i.i37, %__internal_trig_reduction_kernel.exit.i.i29
  %239 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i37 ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !29
  %240 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i37 ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !29
  %241 = phi float [ %.013.i39, %__internal_fmad.exit1.i.i.i37 ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !29
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not32.i41 = icmp eq i32 %242, 0, !dbg !29
  %243 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %241, float %.011.i33, float %240) #4, !dbg !29
  %244 = tail call float @llvm.nvvm.fma.rn.f(float %241, float %.011.i33, float %240) #4, !dbg !29
  %.010.i42 = select i1 %.not32.i41, float %244, float %243, !dbg !29
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not33.i43 = icmp eq i32 %245, 0, !dbg !29
  %246 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i42, float %.011.i33, float %239) #4, !dbg !29
  %247 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i42, float %.011.i33, float %239) #4, !dbg !29
  %.09.i44 = select i1 %.not33.i43, float %247, float %246, !dbg !29
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not34.i45 = icmp eq i32 %248, 0, !dbg !29
  %249 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i44, float %.012.i36, float %232) #4, !dbg !29
  %250 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i44, float %.012.i36, float %232) #4, !dbg !29
  %.05.i46 = select i1 %.not34.i45, float %250, float %249, !dbg !29
  %251 = and i32 %i.i.1.i30, 2, !dbg !29
  %.not35.i47 = icmp eq i32 %251, 0, !dbg !29
  br i1 %.not35.i47, label %__nv_sinf.exit55, label %__internal_fmad.exit5.i.i.i48, !dbg !29

__internal_fmad.exit5.i.i.i48:                    ; preds = %__internal_fmad.exit2.i.i.i40
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not36.i49 = icmp eq i32 %252, 0, !dbg !29
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i46, float -1.000000e+00, float 0.000000e+00) #4, !dbg !29
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i46, float -1.000000e+00, float 0.000000e+00) #4, !dbg !29
  %.0.i50 = select i1 %.not36.i49, float %254, float %253, !dbg !29
  br label %__nv_sinf.exit55, !dbg !29

__nv_sinf.exit55:                                 ; preds = %__internal_fmad.exit2.i.i.i40, %__internal_fmad.exit5.i.i.i48
  %z.i.i.0.i51 = phi float [ %.0.i50, %__internal_fmad.exit5.i.i.i48 ], [ %.05.i46, %__internal_fmad.exit2.i.i.i40 ], !dbg !29
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !29
  %255 = fmul float %z.i.i.0.i, %z.i.i.0.i, !dbg !34
  %256 = fmul float %z.i.i.0.i51, %z.i.i.0.i51, !dbg !34
  %257 = fmul float %46, %255, !dbg !35
  %258 = fmul float %46, %256, !dbg !35
  %259 = fadd float %43, %257, !dbg !36
  %260 = fadd float %44, %258, !dbg !36
  %261 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !37
  %262 = bitcast float %43 to i32, !dbg !38
  %263 = bitcast float %44 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %262, i32 %263, ptr addrspace(1) %261, i1 %15) #4, !dbg !38
  %264 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !39
  %265 = bitcast float %259 to i32, !dbg !40
  %266 = bitcast float %260 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %265, i32 %266, ptr addrspace(1) %264, i1 %15) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjczbvrvv7qm55vbjn3n4h2qf5jfyi7xemidsfn5kwsf6tbzpibl.py", directory: "inductor_cache/jc")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_16", linkageName: "triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 20, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.count", i32 1}
!33 = distinct !{!33, !32}
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 36, scope: !7)
!39 = !DILocation(line: 45, column: 25, scope: !7)
!40 = !DILocation(line: 45, column: 37, scope: !7)
!41 = !DILocation(line: 45, column: 4, scope: !7)
