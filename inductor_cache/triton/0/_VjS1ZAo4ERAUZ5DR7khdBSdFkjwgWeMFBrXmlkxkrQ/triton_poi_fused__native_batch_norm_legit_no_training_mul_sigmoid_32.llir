; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %15, 8, !dbg !13
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 6, !dbg !16
  %21 = and i32 %14, 60, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = icmp slt i32 %22, 256, !dbg !19
  %24 = shl i32 %15, 8, !dbg !20
  %25 = shl i32 %16, 8, !dbg !20
  %26 = add i32 %22, %24, !dbg !21
  %27 = add i32 %22, %25, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = and i1 %17, %23, !dbg !23
  %33 = and i1 %18, %23, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %32) #4, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %33) #4, !dbg !24
  %36 = sext i32 %22 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #4, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %23) #4, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %45 = bitcast i32 %41 to float, !dbg !28
  %46 = bitcast i32 %42 to float, !dbg !28
  %47 = bitcast i32 %43 to float, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !29
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #4, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !32
  %53 = fadd float %45, 0x3F50624DE0000000, !dbg !33
  %54 = fadd float %46, 0x3F50624DE0000000, !dbg !33
  %55 = fadd float %47, 0x3F50624DE0000000, !dbg !33
  %56 = fadd float %48, 0x3F50624DE0000000, !dbg !33
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %57, 0, !dbg !34
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %58, 0, !dbg !34
  br i1 %.not.i, label %64, label %59, !dbg !34

59:                                               ; preds = %8
  br i1 %.not1.i, label %62, label %60, !dbg !34

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !34

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !34
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i18 = icmp eq i32 %69, 0, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i21 = icmp eq i32 %70, 0, !dbg !34
  br i1 %.not.i18, label %76, label %71, !dbg !34

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %74, label %72, !dbg !34

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %79, label %77, !dbg !34

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

__nv_sqrtf.exit22:                                ; preds = %72, %74, %77, %79
  %.0.i20 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !34
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i23 = icmp eq i32 %81, 0, !dbg !34
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i26 = icmp eq i32 %82, 0, !dbg !34
  br i1 %.not.i23, label %88, label %83, !dbg !34

83:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %86, label %84, !dbg !34

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

88:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %91, label %89, !dbg !34

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

__nv_sqrtf.exit27:                                ; preds = %84, %86, %89, %91
  %.0.i25 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !34
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i28 = icmp eq i32 %93, 0, !dbg !34
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i31 = icmp eq i32 %94, 0, !dbg !34
  br i1 %.not.i28, label %100, label %95, !dbg !34

95:                                               ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %98, label %96, !dbg !34

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

100:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %103, label %101, !dbg !34

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

__nv_sqrtf.exit32:                                ; preds = %96, %98, %101, %103
  %.0.i30 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %106 = bitcast i32 %105 to float, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = fsub float %106, %108, !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %111 = bitcast i32 %110 to float, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fsub float %111, %113, !dbg !35
  %115 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %116 = bitcast i32 %115 to float, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %118 = bitcast i32 %117 to float, !dbg !26
  %119 = fsub float %116, %118, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %121 = bitcast i32 %120 to float, !dbg !24
  %122 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = fsub float %121, %123, !dbg !35
  %125 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %126 = bitcast i32 %125 to float, !dbg !24
  %127 = fsub float %126, %108, !dbg !35
  %128 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %129 = bitcast i32 %128 to float, !dbg !24
  %130 = fsub float %129, %113, !dbg !35
  %131 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %132 = bitcast i32 %131 to float, !dbg !24
  %133 = fsub float %132, %118, !dbg !35
  %134 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %135 = bitcast i32 %134 to float, !dbg !24
  %136 = fsub float %135, %123, !dbg !35
  %137 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %138 = bitcast i32 %137 to float, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %140 = bitcast i32 %139 to float, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %142 = bitcast i32 %141 to float, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %144 = bitcast i32 %143 to float, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !30
  %146 = bitcast i32 %145 to float, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !30
  %150 = bitcast i32 %149 to float, !dbg !30
  %151 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !30
  %152 = bitcast i32 %151 to float, !dbg !30
  %153 = lshr i32 %11, 2, !dbg !17
  %154 = and i32 %153, 31, !dbg !17
  %155 = or disjoint i32 %154, %20, !dbg !18
  %156 = or disjoint i32 %155, 32, !dbg !18
  %157 = icmp slt i32 %156, 256, !dbg !19
  %158 = and i32 %14, 12, !dbg !12
  %159 = or disjoint i32 %10, %158, !dbg !13
  %160 = icmp slt i32 %159, 16, !dbg !14
  %161 = and i1 %160, %157, !dbg !23
  %162 = icmp slt i32 %155, 256, !dbg !19
  %163 = and i1 %160, %162, !dbg !23
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !36
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !36
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !36
  %168 = fmul float %136, %164, !dbg !37
  %169 = fmul float %133, %165, !dbg !37
  %170 = fmul float %130, %166, !dbg !37
  %171 = fmul float %127, %167, !dbg !37
  %172 = fmul float %124, %164, !dbg !37
  %173 = fmul float %119, %165, !dbg !37
  %174 = fmul float %114, %166, !dbg !37
  %175 = fmul float %109, %167, !dbg !37
  %176 = fmul float %168, %152, !dbg !38
  %177 = fmul float %169, %150, !dbg !38
  %178 = fmul float %170, %148, !dbg !38
  %179 = fmul float %171, %146, !dbg !38
  %180 = fmul float %172, %152, !dbg !38
  %181 = fmul float %173, %150, !dbg !38
  %182 = fmul float %174, %148, !dbg !38
  %183 = fmul float %175, %146, !dbg !38
  %184 = fadd float %176, %144, !dbg !39
  %185 = fadd float %177, %142, !dbg !39
  %186 = fadd float %178, %140, !dbg !39
  %187 = fadd float %179, %138, !dbg !39
  %188 = fadd float %180, %144, !dbg !39
  %189 = fadd float %181, %142, !dbg !39
  %190 = fadd float %182, %140, !dbg !39
  %191 = fadd float %183, %138, !dbg !39
  %192 = fsub float 0.000000e+00, %184, !dbg !40
  %193 = fsub float 0.000000e+00, %185, !dbg !40
  %194 = fsub float 0.000000e+00, %186, !dbg !40
  %195 = fsub float 0.000000e+00, %187, !dbg !40
  %196 = fsub float 0.000000e+00, %188, !dbg !40
  %197 = fsub float 0.000000e+00, %189, !dbg !40
  %198 = fsub float 0.000000e+00, %190, !dbg !40
  %199 = fsub float 0.000000e+00, %191, !dbg !40
  %200 = fmul float %192, 0x3FF7154760000000, !dbg !44
  %201 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %200) #4, !dbg !44
  %202 = fmul float %193, 0x3FF7154760000000, !dbg !44
  %203 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %202) #4, !dbg !44
  %204 = fmul float %194, 0x3FF7154760000000, !dbg !44
  %205 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %204) #4, !dbg !44
  %206 = fmul float %195, 0x3FF7154760000000, !dbg !44
  %207 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %206) #4, !dbg !44
  %208 = fmul float %196, 0x3FF7154760000000, !dbg !44
  %209 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %208) #4, !dbg !44
  %210 = fmul float %197, 0x3FF7154760000000, !dbg !44
  %211 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %210) #4, !dbg !44
  %212 = fmul float %198, 0x3FF7154760000000, !dbg !44
  %213 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %212) #4, !dbg !44
  %214 = fmul float %199, 0x3FF7154760000000, !dbg !44
  %215 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %214) #4, !dbg !44
  %216 = fadd float %201, 1.000000e+00, !dbg !45
  %217 = fadd float %203, 1.000000e+00, !dbg !45
  %218 = fadd float %205, 1.000000e+00, !dbg !45
  %219 = fadd float %207, 1.000000e+00, !dbg !45
  %220 = fadd float %209, 1.000000e+00, !dbg !45
  %221 = fadd float %211, 1.000000e+00, !dbg !45
  %222 = fadd float %213, 1.000000e+00, !dbg !45
  %223 = fadd float %215, 1.000000e+00, !dbg !45
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %216) #4, !dbg !46
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %217) #4, !dbg !46
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %218) #4, !dbg !46
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %219) #4, !dbg !46
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %220) #4, !dbg !46
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %221) #4, !dbg !46
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %222) #4, !dbg !46
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %223) #4, !dbg !46
  %232 = fmul float %184, %224, !dbg !47
  %233 = fmul float %185, %225, !dbg !47
  %234 = fmul float %186, %226, !dbg !47
  %235 = fmul float %187, %227, !dbg !47
  %236 = fmul float %188, %228, !dbg !47
  %237 = fmul float %189, %229, !dbg !47
  %238 = fmul float %190, %230, !dbg !47
  %239 = fmul float %191, %231, !dbg !47
  %240 = shl i32 %155, 2, !dbg !48
  %241 = shl i32 %156, 2, !dbg !48
  %242 = shl i32 %159, 8, !dbg !49
  %243 = add i32 %240, %242, !dbg !50
  %244 = add i32 %241, %242, !dbg !50
  %245 = sext i32 %243 to i64, !dbg !51
  %246 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !51
  %247 = sext i32 %244 to i64, !dbg !51
  %248 = getelementptr float, ptr addrspace(1) %5, i64 %247, !dbg !51
  %249 = shl i32 %11, 6, !dbg !52
  %250 = and i32 %249, 960, !dbg !52
  %251 = or disjoint i32 %250, %13, !dbg !52
  %252 = and i32 %14, 508, !dbg !52
  %253 = lshr exact i32 %250, 2, !dbg !52
  %254 = add nuw nsw i32 %253, %251, !dbg !52
  %255 = zext nneg i32 %254 to i64, !dbg !52
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %255, !dbg !52
  %257 = bitcast float %232 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #4, !dbg !52
  %258 = or disjoint i32 %251, 16, !dbg !52
  %259 = lshr i32 %258, 2, !dbg !52
  %260 = and i32 %259, 244, !dbg !52
  %261 = add nuw nsw i32 %260, %258, !dbg !52
  %262 = zext nneg i32 %261 to i64, !dbg !52
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !52
  %264 = bitcast float %233 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !52
  %265 = or disjoint i32 %251, 32, !dbg !52
  %266 = lshr i32 %265, 2, !dbg !52
  %267 = and i32 %266, 248, !dbg !52
  %268 = add nuw nsw i32 %267, %265, !dbg !52
  %269 = zext nneg i32 %268 to i64, !dbg !52
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %269, !dbg !52
  %271 = bitcast float %234 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !52
  %272 = or disjoint i32 %251, 48, !dbg !52
  %273 = lshr i32 %272, 2, !dbg !52
  %274 = and i32 %273, 252, !dbg !52
  %275 = add nuw nsw i32 %274, %272, !dbg !52
  %276 = zext nneg i32 %275 to i64, !dbg !52
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %276, !dbg !52
  %278 = bitcast float %235 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !52
  %279 = or disjoint i32 %251, 8, !dbg !52
  %280 = add nuw nsw i32 %279, %253, !dbg !52
  %281 = zext nneg i32 %280 to i64, !dbg !52
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %281, !dbg !52
  %283 = bitcast float %236 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !52
  %284 = or disjoint i32 %251, 24, !dbg !52
  %285 = lshr i32 %284, 2, !dbg !52
  %286 = and i32 %285, 244, !dbg !52
  %287 = add nuw nsw i32 %286, %284, !dbg !52
  %288 = zext nneg i32 %287 to i64, !dbg !52
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %288, !dbg !52
  %290 = bitcast float %237 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #4, !dbg !52
  %291 = or disjoint i32 %251, 40, !dbg !52
  %292 = lshr i32 %291, 2, !dbg !52
  %293 = and i32 %292, 248, !dbg !52
  %294 = add nuw nsw i32 %293, %291, !dbg !52
  %295 = zext nneg i32 %294 to i64, !dbg !52
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %295, !dbg !52
  %297 = bitcast float %238 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !52
  %298 = or disjoint i32 %251, 56, !dbg !52
  %299 = lshr i32 %298, 2, !dbg !52
  %300 = and i32 %299, 252, !dbg !52
  %301 = add nuw nsw i32 %300, %298, !dbg !52
  %302 = zext nneg i32 %301 to i64, !dbg !52
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %302, !dbg !52
  %304 = bitcast float %239 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %305 = and i32 %11, 124, !dbg !52
  %306 = add nuw nsw i32 %252, %305, !dbg !52
  %307 = zext nneg i32 %306 to i64, !dbg !52
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %307, !dbg !52
  %309 = or disjoint i32 %252, 512, !dbg !52
  %310 = lshr exact i32 %309, 2, !dbg !52
  %311 = and i32 %310, 252, !dbg !52
  %312 = add nuw nsw i32 %311, %309, !dbg !52
  %313 = zext nneg i32 %312 to i64, !dbg !52
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %313, !dbg !52
  %315 = load <4 x i32>, ptr addrspace(3) %314, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %308, align 16, !dbg !52
  %316 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 4, !dbg !52
  %.extract11 = load i32, ptr addrspace(3) %316, align 4, !dbg !52
  %317 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 8, !dbg !52
  %.extract12 = load i32, ptr addrspace(3) %317, align 8, !dbg !52
  %318 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 12, !dbg !52
  %.extract13 = load i32, ptr addrspace(3) %318, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %246, i1 %163) #4, !dbg !52
  %.extract14 = extractelement <4 x i32> %315, i64 0, !dbg !52
  %.extract15 = extractelement <4 x i32> %315, i64 1, !dbg !52
  %.extract16 = extractelement <4 x i32> %315, i64 2, !dbg !52
  %.extract17 = extractelement <4 x i32> %315, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %248, i1 %161) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3frwh6iv34snqsh67u2tb4vowwttwtflu2zptijijqxcvo65wqt.py", directory: "inductor_cache/3f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 48, column: 23, scope: !7)
!44 = !DILocation(line: 47, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 20, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 47, column: 16, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 32, scope: !7)
!49 = !DILocation(line: 50, column: 42, scope: !7)
!50 = !DILocation(line: 50, column: 37, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 54, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
