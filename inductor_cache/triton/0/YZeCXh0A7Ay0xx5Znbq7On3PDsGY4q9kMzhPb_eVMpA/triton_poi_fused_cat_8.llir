; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = srem i32 %13, 4, !dbg !14
  %15 = sdiv i32 %13, 1024, !dbg !15
  %16 = srem i32 %13, 16, !dbg !16
  %17 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !17
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %19 = sdiv <2 x i32> %18, <i32 4, i32 16>, !dbg !17
  %20 = srem <2 x i32> %19, <i32 4, i32 64>, !dbg !18
  %21 = extractelement <2 x i32> %20, i64 1, !dbg !19
  %22 = icmp slt i32 %21, 32, !dbg !20
  %23 = shl nsw <2 x i32> %20, <i32 3, i32 6>, !dbg !21
  %24 = shl i32 %15, 11, !dbg !22
  %25 = add i32 %24, %14, !dbg !23
  %26 = extractelement <2 x i32> %23, i64 0, !dbg !24
  %27 = add i32 %25, %26, !dbg !24
  %28 = extractelement <2 x i32> %23, i64 1, !dbg !25
  %29 = add i32 %27, %28, !dbg !25
  %30 = sext i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %22, i32 0, i1 %22) #1, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = shl nsw i32 %14, 5, !dbg !28
  %35 = extractelement <2 x i32> %20, i64 0, !dbg !29
  %36 = shl nsw i32 %35, 8, !dbg !29
  %37 = add i32 %24, %34, !dbg !30
  %38 = add i32 %37, %21, !dbg !31
  %39 = add i32 %38, %36, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !33
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %22, i32 0, i1 %22) #1, !dbg !34
  %43 = sext i32 %21 to i64, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !35
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %22, i32 0, i1 %22) #1, !dbg !36
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !37
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %22, i32 0, i1 %22) #1, !dbg !38
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !39
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %22, i32 0, i1 %22) #1, !dbg !40
  %50 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !34
  %51 = insertelement <2 x i32> %50, i32 %47, i64 1, !dbg !34
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !34
  %53 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !36
  %54 = insertelement <2 x i32> %53, i32 %49, i64 1, !dbg !36
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !36
  %56 = fadd <2 x float> %52, %55, !dbg !41
  %57 = extractelement <2 x float> %56, i64 0, !dbg !42
  %58 = fadd float %57, %33, !dbg !42
  %59 = extractelement <2 x float> %56, i64 1, !dbg !43
  %60 = fadd float %58, %59, !dbg !43
  %61 = icmp sgt i32 %21, 31, !dbg !44
  %62 = shl nsw i32 %21, 4, !dbg !19
  %63 = shl nsw i32 %15, 9, !dbg !45
  %64 = add nsw i32 %16, -512, !dbg !19
  %65 = add nsw i32 %64, %63, !dbg !46
  %66 = add nsw i32 %65, %62, !dbg !47
  %67 = sext i32 %66 to i64, !dbg !48
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !48
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %61, i32 0, i1 %61) #1, !dbg !49
  %70 = bitcast i32 %69 to float, !dbg !49
  %71 = fsub float 0.000000e+00, %70, !dbg !50
  %72 = fmul float %71, 0x3FF7154760000000, !dbg !54
  %73 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %72) #1, !dbg !54
  %74 = fadd float %73, 1.000000e+00, !dbg !55
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %74) #1, !dbg !56
  %76 = fmul float %75, %70, !dbg !57
  %77 = select i1 %22, float %60, float %76, !dbg !58
  %78 = sext i32 %13 to i64, !dbg !59
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %78, !dbg !59
  %80 = bitcast float %77 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %79, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4er62ap43fzqz2jicvgaasyuruyec7snwlrb5kyh34bnjflscg.py", directory: "inductor_cache/t4")
!4 = !{ptr @triton_poi_fused_cat_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 49, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 37, scope: !7)
!22 = !DILocation(line: 35, column: 57, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 52, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 62, scope: !7)
!28 = !DILocation(line: 36, column: 33, scope: !7)
!29 = !DILocation(line: 36, column: 42, scope: !7)
!30 = !DILocation(line: 36, column: 38, scope: !7)
!31 = !DILocation(line: 36, column: 47, scope: !7)
!32 = !DILocation(line: 36, column: 58, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 64, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 65, scope: !7)
!39 = !DILocation(line: 41, column: 31, scope: !7)
!40 = !DILocation(line: 41, column: 36, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 58, scope: !7)
!46 = !DILocation(line: 49, column: 36, scope: !7)
!47 = !DILocation(line: 49, column: 54, scope: !7)
!48 = !DILocation(line: 49, column: 31, scope: !7)
!49 = !DILocation(line: 49, column: 63, scope: !7)
!50 = !DILocation(line: 47, column: 30, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 50, column: 23, scope: !7)
!54 = !DILocation(line: 47, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 47, column: 20, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 16, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 51, column: 20, scope: !7)
!58 = !DILocation(line: 0, scope: !7)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 37, scope: !7)
!61 = !DILocation(line: 55, column: 4, scope: !7)
