; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = lshr i32 %9, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %13, !dbg !16
  %21 = or disjoint i32 %19, %14, !dbg !16
  %22 = or disjoint i32 %19, %11, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen, 256, !dbg !17
  %24 = mul i32 %23, 256, !dbg !18
  %.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = shl i32 %20, 8, !dbg !19
  %26 = shl i32 %21, 8, !dbg !19
  %27 = shl i32 %23, 20, !dbg !20
  %28 = add i32 %27, %.decomposed, !dbg !21
  %29 = add i32 %28, %25, !dbg !22
  %30 = add i32 %28, %26, !dbg !22
  %31 = sext i32 %29 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = sext i32 %.decomposed to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = shl i32 %16, 12, !dbg !27
  %65 = shl i32 %17, 12, !dbg !27
  %66 = add i32 %22, %64, !dbg !28
  %67 = add i32 %22, %65, !dbg !28
  %68 = sext i32 %66 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !29
  %70 = sext i32 %67 to i64, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %77 = bitcast i32 %73 to float, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = bitcast i32 %83 to float, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = fadd float %40, %60, !dbg !31
  %91 = fadd float %41, %61, !dbg !31
  %92 = fadd float %42, %62, !dbg !31
  %93 = fadd float %43, %63, !dbg !31
  %94 = fadd float %49, %60, !dbg !31
  %95 = fadd float %50, %61, !dbg !31
  %96 = fadd float %51, %62, !dbg !31
  %97 = fadd float %52, %63, !dbg !31
  %98 = shl i32 %9, 7, !dbg !31
  %99 = and i32 %98, 896, !dbg !31
  %100 = or disjoint i32 %99, %13, !dbg !31
  %101 = and i32 %10, 508, !dbg !31
  %102 = lshr exact i32 %99, 3, !dbg !31
  %103 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %102, !dbg !31
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %100, !dbg !31
  %105 = bitcast float %90 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !31
  %106 = or disjoint i32 %100, 32, !dbg !31
  %107 = lshr i32 %106, 5, !dbg !31
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !31
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !31
  %110 = bitcast float %91 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !31
  %111 = or disjoint i32 %100, 64, !dbg !31
  %112 = lshr i32 %111, 5, !dbg !31
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !31
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !31
  %115 = bitcast float %92 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !31
  %116 = or disjoint i32 %100, 96, !dbg !31
  %117 = lshr i32 %116, 5, !dbg !31
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !31
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !31
  %120 = bitcast float %93 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !31
  %121 = or disjoint i32 %100, 16, !dbg !31
  %122 = getelementptr float, ptr addrspace(3) %103, i32 %121, !dbg !31
  %123 = bitcast float %94 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !31
  %124 = or disjoint i32 %100, 48, !dbg !31
  %125 = lshr i32 %124, 5, !dbg !31
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !31
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !31
  %128 = bitcast float %95 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !31
  %129 = or disjoint i32 %100, 80, !dbg !31
  %130 = lshr i32 %129, 5, !dbg !31
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !31
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !31
  %133 = bitcast float %96 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !31
  %134 = or disjoint i32 %100, 112, !dbg !31
  %135 = lshr i32 %134, 5, !dbg !31
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !31
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !31
  %138 = bitcast float %97 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %139 = lshr i32 %101, 5, !dbg !31
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !31
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %101, !dbg !31
  %142 = load float, ptr addrspace(3) %141, align 4, !dbg !31
  %143 = or disjoint i32 %101, 1, !dbg !31
  %144 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %143, !dbg !31
  %145 = load float, ptr addrspace(3) %144, align 4, !dbg !31
  %146 = or disjoint i32 %101, 2, !dbg !31
  %147 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %146, !dbg !31
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !31
  %149 = or disjoint i32 %101, 3, !dbg !31
  %150 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %149, !dbg !31
  %151 = load float, ptr addrspace(3) %150, align 4, !dbg !31
  %152 = or disjoint i32 %101, 512, !dbg !31
  %153 = lshr i32 %152, 5, !dbg !31
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %153, !dbg !31
  %155 = getelementptr inbounds float, ptr addrspace(3) %154, i32 %152, !dbg !31
  %156 = load float, ptr addrspace(3) %155, align 4, !dbg !31
  %157 = or disjoint i32 %101, 513, !dbg !31
  %158 = lshr i32 %157, 5, !dbg !31
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %158, !dbg !31
  %160 = getelementptr inbounds float, ptr addrspace(3) %159, i32 %157, !dbg !31
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !31
  %162 = or disjoint i32 %101, 514, !dbg !31
  %163 = lshr i32 %162, 5, !dbg !31
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !31
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %162, !dbg !31
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !31
  %167 = or disjoint i32 %101, 515, !dbg !31
  %168 = lshr i32 %167, 5, !dbg !31
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !31
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %167, !dbg !31
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !31
  %172 = fadd float %142, %77, !dbg !32
  %173 = fadd float %145, %78, !dbg !32
  %174 = fadd float %148, %79, !dbg !32
  %175 = fadd float %151, %80, !dbg !32
  %176 = fadd float %156, %86, !dbg !32
  %177 = fadd float %161, %87, !dbg !32
  %178 = fadd float %166, %88, !dbg !32
  %179 = fadd float %171, %89, !dbg !32
  %180 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !33
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !33
  %182 = bitcast float %172 to i32, !dbg !34
  %183 = bitcast float %173 to i32, !dbg !34
  %184 = bitcast float %174 to i32, !dbg !34
  %185 = bitcast float %175 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %180, i1 true) #2, !dbg !34
  %186 = bitcast float %176 to i32, !dbg !34
  %187 = bitcast float %177 to i32, !dbg !34
  %188 = bitcast float %178 to i32, !dbg !34
  %189 = bitcast float %179 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %187, i32 %188, i32 %189, ptr addrspace(1) %181, i1 true) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqhxr5ldvh2o7fan7xvkhp5bggmj2bfszo5w7y35dkjxcsniz4ns.py", directory: "inductor_cache/qh")
!4 = !{ptr @triton_poi_fused_add_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_2", linkageName: "triton_poi_fused_add_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 57, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 40, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 45, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 25, scope: !7)
!34 = !DILocation(line: 37, column: 46, scope: !7)
!35 = !DILocation(line: 37, column: 4, scope: !7)
