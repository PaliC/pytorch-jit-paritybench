#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cos_div_mul_sin_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg2: !tt.ptr<f32> loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg3: !tt.ptr<f32> loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg4: !tt.ptr<f32> loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg6: !tt.ptr<f32> loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg7: !tt.ptr<f32> loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg8: !tt.ptr<f32> loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2.51984215> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<6.34960365> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.600000e+01> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<36> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<256xi32, #blocked1> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<36> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked1> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %5 = tt.splat %1 : i32 -> tensor<256xi32, #blocked1> loc(#loc5)
    %6 = arith.addi %4, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %7 = arith.addi %5, %3 : tensor<256xi32, #blocked1> loc(#loc5)
    %8 = arith.cmpi slt, %6, %cst_5 : tensor<256xi32, #blocked> loc(#loc6)
    %9 = arith.cmpi slt, %7, %cst_4 : tensor<256xi32, #blocked1> loc(#loc6)
    %10 = arith.remsi %6, %cst_6 : tensor<256xi32, #blocked> loc(#loc7)
    %11 = arith.remsi %7, %cst_3 : tensor<256xi32, #blocked1> loc(#loc7)
    %12 = arith.divsi %6, %cst_6 : tensor<256xi32, #blocked> loc(#loc8)
    %13 = arith.divsi %7, %cst_3 : tensor<256xi32, #blocked1> loc(#loc8)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %15 = tt.addptr %14, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc9)
    %16 = tt.load %15, %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = math.sin %16 : tensor<256xf32, #blocked> loc(#loc11)
    %18 = math.cos %16 : tensor<256xf32, #blocked> loc(#loc12)
    %19 = arith.mulf %16, %cst : tensor<256xf32, #blocked> loc(#loc13)
    %20 = math.sin %19 : tensor<256xf32, #blocked> loc(#loc14)
    %21 = math.cos %19 : tensor<256xf32, #blocked> loc(#loc15)
    %22 = arith.mulf %16, %cst_0 : tensor<256xf32, #blocked> loc(#loc16)
    %23 = math.sin %22 : tensor<256xf32, #blocked> loc(#loc17)
    %24 = math.cos %22 : tensor<256xf32, #blocked> loc(#loc18)
    %25 = arith.mulf %16, %cst_1 : tensor<256xf32, #blocked> loc(#loc19)
    %26 = math.sin %25 : tensor<256xf32, #blocked> loc(#loc20)
    %27 = math.cos %25 : tensor<256xf32, #blocked> loc(#loc21)
    %28 = arith.muli %12, %cst_7 : tensor<256xi32, #blocked> loc(#loc22)
    %29 = arith.muli %13, %cst_2 : tensor<256xi32, #blocked1> loc(#loc22)
    %30 = arith.addi %10, %28 : tensor<256xi32, #blocked> loc(#loc23)
    %31 = arith.addi %11, %29 : tensor<256xi32, #blocked1> loc(#loc23)
    %32 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %33 = tt.addptr %32, %30 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc24)
    tt.store %33, %16, %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc25)
    %34 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %35 = tt.addptr %34, %31 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc26)
    %36 = triton_gpu.convert_layout %17 : tensor<256xf32, #blocked> -> tensor<256xf32, #blocked1> loc(#loc27)
    tt.store %35, %36, %9 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc27)
    %37 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc28)
    %38 = tt.addptr %37, %31 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc28)
    %39 = triton_gpu.convert_layout %18 : tensor<256xf32, #blocked> -> tensor<256xf32, #blocked1> loc(#loc29)
    tt.store %38, %39, %9 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %40 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc30)
    %41 = tt.addptr %40, %31 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc30)
    %42 = triton_gpu.convert_layout %20 : tensor<256xf32, #blocked> -> tensor<256xf32, #blocked1> loc(#loc31)
    tt.store %41, %42, %9 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc31)
    %43 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc32)
    %44 = tt.addptr %43, %30 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc32)
    tt.store %44, %21, %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc33)
    %45 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %46 = tt.addptr %45, %31 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc34)
    %47 = triton_gpu.convert_layout %23 : tensor<256xf32, #blocked> -> tensor<256xf32, #blocked1> loc(#loc35)
    tt.store %46, %47, %9 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %48 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %49 = tt.addptr %48, %31 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc36)
    %50 = triton_gpu.convert_layout %24 : tensor<256xf32, #blocked> -> tensor<256xf32, #blocked1> loc(#loc37)
    tt.store %49, %50, %9 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %51 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %52 = tt.addptr %51, %31 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc38)
    %53 = triton_gpu.convert_layout %26 : tensor<256xf32, #blocked> -> tensor<256xf32, #blocked1> loc(#loc39)
    tt.store %52, %53, %9 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc39)
    %54 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc40)
    %55 = tt.addptr %54, %30 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc40)
    tt.store %55, %27, %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":21:28)
#loc3 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":21:33)
#loc4 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":22:36)
#loc5 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":22:23)
#loc6 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":23:21)
#loc7 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":25:19)
#loc8 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":26:19)
#loc9 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":27:30)
#loc10 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":27:35)
#loc11 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":30:23)
#loc12 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":31:23)
#loc13 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":33:18)
#loc14 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":34:23)
#loc15 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":35:23)
#loc16 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":37:19)
#loc17 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":38:24)
#loc18 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":39:24)
#loc19 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":41:19)
#loc20 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":42:24)
#loc21 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":43:24)
#loc22 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":44:33)
#loc23 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":44:30)
#loc24 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":44:25)
#loc25 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":44:44)
#loc26 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":45:25)
#loc27 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":45:44)
#loc28 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":46:25)
#loc29 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":46:44)
#loc30 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":47:25)
#loc31 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":47:44)
#loc32 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":48:25)
#loc33 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":48:44)
#loc34 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":49:25)
#loc35 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":49:45)
#loc36 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":50:25)
#loc37 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":50:45)
#loc38 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":51:25)
#loc39 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":51:45)
#loc40 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":52:25)
#loc41 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":52:45)
#loc42 = loc("inductor_cache/dw/cdwrcjjnxuk2gycct5remiksa4qtmbsz6kak42u6bzjstsxwgowl.py":52:4)
