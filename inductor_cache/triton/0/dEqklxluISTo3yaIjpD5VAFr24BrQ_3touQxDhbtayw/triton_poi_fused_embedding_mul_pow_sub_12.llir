; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp4 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_embedding_mul_pow_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 6, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 60, !dbg !14
  %13 = lshr i32 %10, 4, !dbg !14
  %14 = and i32 %13, 15, !dbg !14
  %15 = or disjoint i32 %14, 16, !dbg !14
  %16 = or disjoint i32 %14, 32, !dbg !14
  %17 = or disjoint i32 %14, 48, !dbg !14
  %18 = and i32 %10, 63, !dbg !14
  %19 = or disjoint i32 %9, %12, !dbg !15
  %20 = or disjoint i32 %9, %14, !dbg !15
  %21 = or disjoint i32 %9, %15, !dbg !15
  %22 = or disjoint i32 %9, %16, !dbg !15
  %23 = or disjoint i32 %9, %17, !dbg !15
  %24 = or disjoint i32 %9, %18, !dbg !15
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !16
  %26 = shl i32 %25, 6, !dbg !17
  %27 = or disjoint i32 %26, %14, !dbg !18
  %28 = or disjoint i32 %26, %15, !dbg !18
  %29 = or disjoint i32 %26, %16, !dbg !18
  %30 = or disjoint i32 %26, %17, !dbg !18
  %31 = icmp slt i32 %27, 64, !dbg !19
  %32 = icmp slt i32 %28, 64, !dbg !19
  %33 = icmp slt i32 %29, 64, !dbg !19
  %34 = icmp slt i32 %30, 64, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %35 = sdiv i32 %.frozen, 256, !dbg !20
  %36 = mul i32 %35, 256, !dbg !21
  %.decomposed = sub i32 %.frozen, %36, !dbg !21
  %37 = sext i32 %20 to i64, !dbg !22
  %38 = getelementptr i64, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %21 to i64, !dbg !22
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %22 to i64, !dbg !22
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %23 to i64, !dbg !22
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %24 to i64, !dbg !22
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !23
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !23
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !23
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !23
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !23
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !23
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !23
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !23
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !23
  %64 = shl i32 %27, 8, !dbg !24
  %65 = shl i32 %28, 8, !dbg !24
  %66 = shl i32 %29, 8, !dbg !24
  %67 = shl i32 %30, 8, !dbg !24
  %68 = shl i32 %35, 14, !dbg !25
  %69 = add i32 %68, %.decomposed, !dbg !26
  %70 = add i32 %69, %64, !dbg !27
  %71 = add i32 %69, %65, !dbg !27
  %72 = add i32 %69, %66, !dbg !27
  %73 = add i32 %69, %67, !dbg !27
  %74 = sext i32 %70 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !28
  %76 = sext i32 %71 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !28
  %78 = sext i32 %72 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !28
  %80 = sext i32 %73 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %31) #3, !dbg !29
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %32) #3, !dbg !29
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %33) #3, !dbg !29
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %34) #3, !dbg !29
  %86 = sext i32 %27 to i64, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !30
  %88 = sext i32 %28 to i64, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !30
  %90 = sext i32 %29 to i64, !dbg !30
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !30
  %92 = sext i32 %30 to i64, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %31) #3, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %31) #3, !dbg !31
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %31) #3, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %31) #3, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %32) #3, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %32) #3, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %32) #3, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %32) #3, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %33) #3, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %33) #3, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %33) #3, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %33) #3, !dbg !31
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %34) #3, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %34) #3, !dbg !31
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %34) #3, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %34) #3, !dbg !31
  %110 = lshr i64 %63, 53, !dbg !32
  %111 = and i64 %110, 1024, !dbg !32
  %112 = add i64 %111, %63, !dbg !32
  %113 = icmp ugt i64 %112, 1023, !dbg !33
  br i1 %113, label %114, label %115, !dbg !34

114:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !34
  unreachable, !dbg !34

115:                                              ; preds = %7
  %116 = lshr i64 %62, 53, !dbg !32
  %117 = and i64 %116, 1024, !dbg !32
  %118 = lshr i64 %58, 53, !dbg !32
  %119 = and i64 %118, 1024, !dbg !32
  %120 = lshr i64 %54, 53, !dbg !32
  %121 = and i64 %120, 1024, !dbg !32
  %122 = lshr i64 %50, 53, !dbg !32
  %123 = and i64 %122, 1024, !dbg !32
  %124 = bitcast i32 %109 to float, !dbg !31
  %125 = bitcast i32 %105 to float, !dbg !31
  %126 = bitcast i32 %101 to float, !dbg !31
  %127 = bitcast i32 %97 to float, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !29
  %139 = bitcast i32 %138 to float, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !29
  %141 = bitcast i32 %140 to float, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !29
  %143 = bitcast i32 %142 to float, !dbg !29
  %144 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !29
  %145 = bitcast i32 %144 to float, !dbg !29
  %146 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !29
  %147 = bitcast i32 %146 to float, !dbg !29
  %148 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !29
  %151 = bitcast i32 %150 to float, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %153 = bitcast i32 %152 to float, !dbg !29
  %154 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %155 = bitcast i32 %154 to float, !dbg !29
  %156 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %157 = bitcast i32 %156 to float, !dbg !29
  %158 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %159 = bitcast i32 %158 to float, !dbg !29
  %160 = or disjoint i32 %26, %12, !dbg !18
  %161 = icmp slt i32 %160, 64, !dbg !19
  %162 = or disjoint i32 %12, 3, !dbg !35
  %163 = or disjoint i32 %26, %162, !dbg !18
  %164 = or disjoint i32 %12, 2, !dbg !35
  %165 = or disjoint i32 %26, %164, !dbg !18
  %166 = or disjoint i32 %12, 1, !dbg !35
  %167 = or disjoint i32 %26, %166, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %168 = shl i32 %160, 10, !dbg !36
  %169 = shl i32 %167, 10, !dbg !36
  %170 = shl i32 %165, 10, !dbg !36
  %171 = shl i32 %163, 10, !dbg !36
  %172 = sext i32 %168 to i64, !dbg !37
  %173 = sext i32 %169 to i64, !dbg !37
  %174 = sext i32 %170 to i64, !dbg !37
  %175 = sext i32 %171 to i64, !dbg !37
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !38
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %123, !dbg !38
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %172, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %177, i64 %173, !dbg !38
  %180 = getelementptr float, ptr addrspace(1) %177, i64 %174, !dbg !38
  %181 = getelementptr float, ptr addrspace(1) %177, i64 %175, !dbg !38
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !38
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %121, !dbg !38
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %172, !dbg !38
  %185 = getelementptr float, ptr addrspace(1) %183, i64 %173, !dbg !38
  %186 = getelementptr float, ptr addrspace(1) %183, i64 %174, !dbg !38
  %187 = getelementptr float, ptr addrspace(1) %183, i64 %175, !dbg !38
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !38
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %119, !dbg !38
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %172, !dbg !38
  %191 = getelementptr float, ptr addrspace(1) %189, i64 %173, !dbg !38
  %192 = getelementptr float, ptr addrspace(1) %189, i64 %174, !dbg !38
  %193 = getelementptr float, ptr addrspace(1) %189, i64 %175, !dbg !38
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !38
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %117, !dbg !38
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %172, !dbg !38
  %197 = getelementptr float, ptr addrspace(1) %195, i64 %173, !dbg !38
  %198 = getelementptr float, ptr addrspace(1) %195, i64 %174, !dbg !38
  %199 = getelementptr float, ptr addrspace(1) %195, i64 %175, !dbg !38
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %161) #3, !dbg !39
  %201 = bitcast i32 %200 to float, !dbg !39
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %161) #3, !dbg !39
  %203 = bitcast i32 %202 to float, !dbg !39
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %161) #3, !dbg !39
  %205 = bitcast i32 %204 to float, !dbg !39
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %161) #3, !dbg !39
  %207 = bitcast i32 %206 to float, !dbg !39
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %161) #3, !dbg !39
  %209 = bitcast i32 %208 to float, !dbg !39
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %161) #3, !dbg !39
  %211 = bitcast i32 %210 to float, !dbg !39
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %161) #3, !dbg !39
  %213 = bitcast i32 %212 to float, !dbg !39
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %161) #3, !dbg !39
  %215 = bitcast i32 %214 to float, !dbg !39
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %161) #3, !dbg !39
  %217 = bitcast i32 %216 to float, !dbg !39
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %161) #3, !dbg !39
  %219 = bitcast i32 %218 to float, !dbg !39
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %161) #3, !dbg !39
  %221 = bitcast i32 %220 to float, !dbg !39
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %161) #3, !dbg !39
  %223 = bitcast i32 %222 to float, !dbg !39
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %161) #3, !dbg !39
  %225 = bitcast i32 %224 to float, !dbg !39
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %161) #3, !dbg !39
  %227 = bitcast i32 %226 to float, !dbg !39
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %161) #3, !dbg !39
  %229 = bitcast i32 %228 to float, !dbg !39
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %161) #3, !dbg !39
  %231 = bitcast i32 %230 to float, !dbg !39
  %232 = fadd float %159, %127, !dbg !40
  %233 = fadd float %157, %127, !dbg !40
  %234 = fadd float %155, %127, !dbg !40
  %235 = fadd float %153, %127, !dbg !40
  %236 = fadd float %151, %126, !dbg !40
  %237 = fadd float %149, %126, !dbg !40
  %238 = fadd float %147, %126, !dbg !40
  %239 = fadd float %145, %126, !dbg !40
  %240 = fadd float %143, %125, !dbg !40
  %241 = fadd float %141, %125, !dbg !40
  %242 = fadd float %139, %125, !dbg !40
  %243 = fadd float %137, %125, !dbg !40
  %244 = fadd float %135, %124, !dbg !40
  %245 = fadd float %133, %124, !dbg !40
  %246 = fadd float %131, %124, !dbg !40
  %247 = fadd float %129, %124, !dbg !40
  %248 = shl i32 %10, 8, !dbg !40
  %249 = and i32 %248, 3840, !dbg !40
  %250 = or disjoint i32 %249, %14, !dbg !40
  %251 = and i32 %11, 1020, !dbg !40
  %252 = lshr exact i32 %249, 4, !dbg !40
  %253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %252, !dbg !40
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !40
  %255 = bitcast float %232 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #3, !dbg !40
  %256 = or disjoint i32 %250, 64, !dbg !40
  %257 = lshr i32 %256, 6, !dbg !40
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !40
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !40
  %260 = bitcast float %233 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #3, !dbg !40
  %261 = or disjoint i32 %250, 128, !dbg !40
  %262 = lshr i32 %261, 6, !dbg !40
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !40
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !40
  %265 = bitcast float %234 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #3, !dbg !40
  %266 = or disjoint i32 %250, 192, !dbg !40
  %267 = lshr i32 %266, 6, !dbg !40
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !40
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !40
  %270 = bitcast float %235 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #3, !dbg !40
  %271 = or disjoint i32 %250, 16, !dbg !40
  %272 = getelementptr float, ptr addrspace(3) %253, i32 %271, !dbg !40
  %273 = bitcast float %236 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #3, !dbg !40
  %274 = or disjoint i32 %250, 80, !dbg !40
  %275 = lshr i32 %274, 6, !dbg !40
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !40
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %274, !dbg !40
  %278 = bitcast float %237 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #3, !dbg !40
  %279 = or disjoint i32 %250, 144, !dbg !40
  %280 = lshr i32 %279, 6, !dbg !40
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !40
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %279, !dbg !40
  %283 = bitcast float %238 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #3, !dbg !40
  %284 = or disjoint i32 %250, 208, !dbg !40
  %285 = lshr i32 %284, 6, !dbg !40
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !40
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %284, !dbg !40
  %288 = bitcast float %239 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #3, !dbg !40
  %289 = or disjoint i32 %250, 32, !dbg !40
  %290 = getelementptr float, ptr addrspace(3) %253, i32 %289, !dbg !40
  %291 = bitcast float %240 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #3, !dbg !40
  %292 = or disjoint i32 %250, 96, !dbg !40
  %293 = lshr i32 %292, 6, !dbg !40
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i32 %293, !dbg !40
  %295 = getelementptr float, ptr addrspace(3) %294, i32 %292, !dbg !40
  %296 = bitcast float %241 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #3, !dbg !40
  %297 = or disjoint i32 %250, 160, !dbg !40
  %298 = lshr i32 %297, 6, !dbg !40
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i32 %298, !dbg !40
  %300 = getelementptr float, ptr addrspace(3) %299, i32 %297, !dbg !40
  %301 = bitcast float %242 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #3, !dbg !40
  %302 = or disjoint i32 %250, 224, !dbg !40
  %303 = lshr i32 %302, 6, !dbg !40
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i32 %303, !dbg !40
  %305 = getelementptr float, ptr addrspace(3) %304, i32 %302, !dbg !40
  %306 = bitcast float %243 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #3, !dbg !40
  %307 = or disjoint i32 %250, 48, !dbg !40
  %308 = getelementptr float, ptr addrspace(3) %253, i32 %307, !dbg !40
  %309 = bitcast float %244 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #3, !dbg !40
  %310 = or disjoint i32 %250, 112, !dbg !40
  %311 = lshr i32 %310, 6, !dbg !40
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %311, !dbg !40
  %313 = getelementptr float, ptr addrspace(3) %312, i32 %310, !dbg !40
  %314 = bitcast float %245 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #3, !dbg !40
  %315 = or disjoint i32 %250, 176, !dbg !40
  %316 = lshr i32 %315, 6, !dbg !40
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i32 %316, !dbg !40
  %318 = getelementptr float, ptr addrspace(3) %317, i32 %315, !dbg !40
  %319 = bitcast float %246 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #3, !dbg !40
  %320 = or disjoint i32 %250, 240, !dbg !40
  %321 = lshr i32 %320, 6, !dbg !40
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i32 %321, !dbg !40
  %323 = getelementptr float, ptr addrspace(3) %322, i32 %320, !dbg !40
  %324 = bitcast float %247 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %325 = lshr i32 %251, 6, !dbg !40
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !40
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %251, !dbg !40
  %328 = load float, ptr addrspace(3) %327, align 4, !dbg !40
  %329 = or disjoint i32 %251, 1, !dbg !40
  %330 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %329, !dbg !40
  %331 = load float, ptr addrspace(3) %330, align 4, !dbg !40
  %332 = or disjoint i32 %251, 2, !dbg !40
  %333 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %332, !dbg !40
  %334 = load float, ptr addrspace(3) %333, align 4, !dbg !40
  %335 = or disjoint i32 %251, 3, !dbg !40
  %336 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %335, !dbg !40
  %337 = load float, ptr addrspace(3) %336, align 4, !dbg !40
  %338 = or disjoint i32 %251, 1024, !dbg !40
  %339 = lshr i32 %338, 6, !dbg !40
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !40
  %341 = getelementptr inbounds float, ptr addrspace(3) %340, i32 %338, !dbg !40
  %342 = load float, ptr addrspace(3) %341, align 4, !dbg !40
  %343 = or disjoint i32 %251, 1025, !dbg !40
  %344 = lshr i32 %343, 6, !dbg !40
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344, !dbg !40
  %346 = getelementptr inbounds float, ptr addrspace(3) %345, i32 %343, !dbg !40
  %347 = load float, ptr addrspace(3) %346, align 4, !dbg !40
  %348 = or disjoint i32 %251, 1026, !dbg !40
  %349 = lshr i32 %348, 6, !dbg !40
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %349, !dbg !40
  %351 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %348, !dbg !40
  %352 = load float, ptr addrspace(3) %351, align 4, !dbg !40
  %353 = or disjoint i32 %251, 1027, !dbg !40
  %354 = lshr i32 %353, 6, !dbg !40
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !40
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %353, !dbg !40
  %357 = load float, ptr addrspace(3) %356, align 4, !dbg !40
  %358 = or disjoint i32 %251, 2048, !dbg !40
  %359 = lshr i32 %358, 6, !dbg !40
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !40
  %361 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %358, !dbg !40
  %362 = load float, ptr addrspace(3) %361, align 4, !dbg !40
  %363 = or disjoint i32 %251, 2049, !dbg !40
  %364 = lshr i32 %363, 6, !dbg !40
  %365 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %364, !dbg !40
  %366 = getelementptr inbounds float, ptr addrspace(3) %365, i32 %363, !dbg !40
  %367 = load float, ptr addrspace(3) %366, align 4, !dbg !40
  %368 = or disjoint i32 %251, 2050, !dbg !40
  %369 = lshr i32 %368, 6, !dbg !40
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %369, !dbg !40
  %371 = getelementptr inbounds float, ptr addrspace(3) %370, i32 %368, !dbg !40
  %372 = load float, ptr addrspace(3) %371, align 4, !dbg !40
  %373 = or disjoint i32 %251, 2051, !dbg !40
  %374 = lshr i32 %373, 6, !dbg !40
  %375 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %374, !dbg !40
  %376 = getelementptr inbounds float, ptr addrspace(3) %375, i32 %373, !dbg !40
  %377 = load float, ptr addrspace(3) %376, align 4, !dbg !40
  %378 = or disjoint i32 %251, 3072, !dbg !40
  %379 = lshr i32 %378, 6, !dbg !40
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %379, !dbg !40
  %381 = getelementptr inbounds float, ptr addrspace(3) %380, i32 %378, !dbg !40
  %382 = load float, ptr addrspace(3) %381, align 4, !dbg !40
  %383 = or disjoint i32 %251, 3073, !dbg !40
  %384 = lshr i32 %383, 6, !dbg !40
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %384, !dbg !40
  %386 = getelementptr inbounds float, ptr addrspace(3) %385, i32 %383, !dbg !40
  %387 = load float, ptr addrspace(3) %386, align 4, !dbg !40
  %388 = or disjoint i32 %251, 3074, !dbg !40
  %389 = lshr i32 %388, 6, !dbg !40
  %390 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %389, !dbg !40
  %391 = getelementptr inbounds float, ptr addrspace(3) %390, i32 %388, !dbg !40
  %392 = load float, ptr addrspace(3) %391, align 4, !dbg !40
  %393 = or disjoint i32 %251, 3075, !dbg !40
  %394 = lshr i32 %393, 6, !dbg !40
  %395 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %394, !dbg !40
  %396 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %393, !dbg !40
  %397 = load float, ptr addrspace(3) %396, align 4, !dbg !40
  %398 = fsub float %201, %328, !dbg !41
  %399 = fsub float %203, %331, !dbg !41
  %400 = fsub float %205, %334, !dbg !41
  %401 = fsub float %207, %337, !dbg !41
  %402 = fsub float %209, %342, !dbg !41
  %403 = fsub float %211, %347, !dbg !41
  %404 = fsub float %213, %352, !dbg !41
  %405 = fsub float %215, %357, !dbg !41
  %406 = fsub float %217, %362, !dbg !41
  %407 = fsub float %219, %367, !dbg !41
  %408 = fsub float %221, %372, !dbg !41
  %409 = fsub float %223, %377, !dbg !41
  %410 = fsub float %225, %382, !dbg !41
  %411 = fsub float %227, %387, !dbg !41
  %412 = fsub float %229, %392, !dbg !41
  %413 = fsub float %231, %397, !dbg !41
  %414 = fmul float %398, 2.000000e+00, !dbg !42
  %415 = fmul float %399, 2.000000e+00, !dbg !42
  %416 = fmul float %400, 2.000000e+00, !dbg !42
  %417 = fmul float %401, 2.000000e+00, !dbg !42
  %418 = fmul float %402, 2.000000e+00, !dbg !42
  %419 = fmul float %403, 2.000000e+00, !dbg !42
  %420 = fmul float %404, 2.000000e+00, !dbg !42
  %421 = fmul float %405, 2.000000e+00, !dbg !42
  %422 = fmul float %406, 2.000000e+00, !dbg !42
  %423 = fmul float %407, 2.000000e+00, !dbg !42
  %424 = fmul float %408, 2.000000e+00, !dbg !42
  %425 = fmul float %409, 2.000000e+00, !dbg !42
  %426 = fmul float %410, 2.000000e+00, !dbg !42
  %427 = fmul float %411, 2.000000e+00, !dbg !42
  %428 = fmul float %412, 2.000000e+00, !dbg !42
  %429 = fmul float %413, 2.000000e+00, !dbg !42
  %430 = shl i32 %20, 6, !dbg !43
  %431 = shl i32 %21, 6, !dbg !43
  %432 = shl i32 %22, 6, !dbg !43
  %433 = shl i32 %23, 6, !dbg !43
  %434 = add i32 %160, %430, !dbg !44
  %435 = add i32 %160, %431, !dbg !44
  %436 = add i32 %160, %432, !dbg !44
  %437 = add i32 %160, %433, !dbg !44
  %438 = sext i32 %434 to i64, !dbg !45
  %439 = getelementptr float, ptr addrspace(1) %4, i64 %438, !dbg !45
  %440 = sext i32 %435 to i64, !dbg !45
  %441 = getelementptr float, ptr addrspace(1) %4, i64 %440, !dbg !45
  %442 = sext i32 %436 to i64, !dbg !45
  %443 = getelementptr float, ptr addrspace(1) %4, i64 %442, !dbg !45
  %444 = sext i32 %437 to i64, !dbg !45
  %445 = getelementptr float, ptr addrspace(1) %4, i64 %444, !dbg !45
  %446 = bitcast float %414 to i32, !dbg !46
  %447 = bitcast float %415 to i32, !dbg !46
  %448 = bitcast float %416 to i32, !dbg !46
  %449 = bitcast float %417 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %447, i32 %448, i32 %449, ptr addrspace(1) %439, i1 %161) #3, !dbg !46
  %450 = bitcast float %418 to i32, !dbg !46
  %451 = bitcast float %419 to i32, !dbg !46
  %452 = bitcast float %420 to i32, !dbg !46
  %453 = bitcast float %421 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %451, i32 %452, i32 %453, ptr addrspace(1) %441, i1 %161) #3, !dbg !46
  %454 = bitcast float %422 to i32, !dbg !46
  %455 = bitcast float %423 to i32, !dbg !46
  %456 = bitcast float %424 to i32, !dbg !46
  %457 = bitcast float %425 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %443, i1 %161) #3, !dbg !46
  %458 = bitcast float %426 to i32, !dbg !46
  %459 = bitcast float %427 to i32, !dbg !46
  %460 = bitcast float %428 to i32, !dbg !46
  %461 = bitcast float %429 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %458, i32 %459, i32 %460, i32 %461, ptr addrspace(1) %445, i1 %161) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py", directory: "inductor_cache/bh")
!4 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_embedding_mul_pow_sub_12", linkageName: "triton_poi_fused_embedding_mul_pow_sub_12", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 28, scope: !11)
!17 = !DILocation(line: 25, column: 33, scope: !11)
!18 = !DILocation(line: 26, column: 23, scope: !11)
!19 = !DILocation(line: 27, column: 21, scope: !11)
!20 = !DILocation(line: 31, column: 19, scope: !11)
!21 = !DILocation(line: 30, column: 19, scope: !11)
!22 = !DILocation(line: 32, column: 30, scope: !11)
!23 = !DILocation(line: 32, column: 35, scope: !11)
!24 = !DILocation(line: 33, column: 39, scope: !11)
!25 = !DILocation(line: 33, column: 50, scope: !11)
!26 = !DILocation(line: 33, column: 35, scope: !11)
!27 = !DILocation(line: 33, column: 44, scope: !11)
!28 = !DILocation(line: 33, column: 30, scope: !11)
!29 = !DILocation(line: 33, column: 55, scope: !11)
!30 = !DILocation(line: 34, column: 30, scope: !11)
!31 = !DILocation(line: 34, column: 35, scope: !11)
!32 = !DILocation(line: 38, column: 32, scope: !11)
!33 = !DILocation(line: 39, column: 36, scope: !11)
!34 = !DILocation(line: 39, column: 50, scope: !11)
!35 = !DILocation(line: 26, column: 44, scope: !11)
!36 = !DILocation(line: 40, column: 42, scope: !11)
!37 = !DILocation(line: 40, column: 37, scope: !11)
!38 = !DILocation(line: 40, column: 30, scope: !11)
!39 = !DILocation(line: 40, column: 47, scope: !11)
!40 = !DILocation(line: 41, column: 18, scope: !11)
!41 = !DILocation(line: 42, column: 19, scope: !11)
!42 = !DILocation(line: 44, column: 20, scope: !11)
!43 = !DILocation(line: 45, column: 33, scope: !11)
!44 = !DILocation(line: 45, column: 30, scope: !11)
!45 = !DILocation(line: 45, column: 25, scope: !11)
!46 = !DILocation(line: 45, column: 45, scope: !11)
!47 = !DILocation(line: 45, column: 4, scope: !11)
