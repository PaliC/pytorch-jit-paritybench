; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 16, !dbg !13
  %15 = or disjoint i32 %13, 32, !dbg !13
  %16 = or disjoint i32 %13, 48, !dbg !13
  %17 = icmp slt i32 %13, 300, !dbg !14
  %18 = icmp slt i32 %14, 300, !dbg !14
  %19 = icmp slt i32 %15, 300, !dbg !14
  %20 = icmp slt i32 %16, 300, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %22 = shl i32 %21, 6, !dbg !16
  %23 = shl i32 %10, 2, !dbg !17
  %24 = and i32 %23, 60, !dbg !17
  %25 = or disjoint i32 %22, %24, !dbg !18
  %26 = icmp slt i32 %25, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %27 = sdiv i32 %.frozen, 75, !dbg !20
  %28 = mul i32 %27, 75, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen91 = freeze i32 %14, !dbg !20
  %29 = sdiv i32 %.frozen91, 75, !dbg !20
  %30 = mul i32 %29, 75, !dbg !21
  %.decomposed92 = sub i32 %.frozen91, %30, !dbg !21
  %.frozen93 = freeze i32 %15, !dbg !20
  %31 = sdiv i32 %.frozen93, 75, !dbg !20
  %32 = mul i32 %31, 75, !dbg !21
  %.decomposed94 = sub i32 %.frozen93, %32, !dbg !21
  %.frozen95 = freeze i32 %16, !dbg !20
  %33 = sdiv i32 %.frozen95, 75, !dbg !20
  %34 = mul i32 %33, 75, !dbg !21
  %.decomposed96 = sub i32 %.frozen95, %34, !dbg !21
  %35 = mul i32 %25, 75, !dbg !22
  %36 = add i32 %35, 75, !dbg !22
  %37 = add i32 %35, 150, !dbg !22
  %38 = add i32 %35, 225, !dbg !22
  %39 = mul i32 %27, 4800, !dbg !23
  %40 = mul i32 %29, 4800, !dbg !23
  %41 = mul i32 %31, 4800, !dbg !23
  %42 = mul i32 %33, 4800, !dbg !23
  %43 = add i32 %39, %.decomposed, !dbg !24
  %44 = add i32 %43, %35, !dbg !25
  %45 = add i32 %43, %36, !dbg !25
  %46 = add i32 %43, %37, !dbg !25
  %47 = add i32 %43, %38, !dbg !25
  %48 = add i32 %40, %.decomposed92, !dbg !24
  %49 = add i32 %48, %35, !dbg !25
  %50 = add i32 %48, %36, !dbg !25
  %51 = add i32 %48, %37, !dbg !25
  %52 = add i32 %48, %38, !dbg !25
  %53 = add i32 %41, %.decomposed94, !dbg !24
  %54 = add i32 %53, %35, !dbg !25
  %55 = add i32 %53, %36, !dbg !25
  %56 = add i32 %53, %37, !dbg !25
  %57 = add i32 %53, %38, !dbg !25
  %58 = add i32 %42, %.decomposed96, !dbg !24
  %59 = add i32 %58, %35, !dbg !25
  %60 = add i32 %58, %36, !dbg !25
  %61 = add i32 %58, %37, !dbg !25
  %62 = add i32 %58, %38, !dbg !25
  %63 = sext i32 %44 to i64, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !26
  %65 = sext i32 %45 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !26
  %67 = sext i32 %46 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !26
  %69 = sext i32 %47 to i64, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !26
  %71 = sext i32 %49 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !26
  %73 = sext i32 %50 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !26
  %75 = sext i32 %51 to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !26
  %77 = sext i32 %52 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = sext i32 %54 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !26
  %81 = sext i32 %55 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !26
  %83 = sext i32 %56 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !26
  %85 = sext i32 %57 to i64, !dbg !26
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !26
  %87 = sext i32 %59 to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !26
  %89 = sext i32 %60 to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !26
  %91 = sext i32 %61 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !26
  %93 = sext i32 %62 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !26
  %95 = and i1 %17, %26, !dbg !27
  %96 = and i1 %18, %26, !dbg !27
  %97 = and i1 %19, %26, !dbg !27
  %98 = and i1 %20, %26, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %95) #3, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %95) #3, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %95) #3, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %95) #3, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %96) #3, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %96) #3, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %96) #3, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %96) #3, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %97) #3, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %97) #3, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %97) #3, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %97) #3, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %98) #3, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %98) #3, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %98) #3, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %98) #3, !dbg !28
  %115 = sext i32 %.decomposed to i64, !dbg !29
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !29
  %117 = sext i32 %.decomposed92 to i64, !dbg !29
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !29
  %119 = sext i32 %.decomposed94 to i64, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !29
  %121 = sext i32 %.decomposed96 to i64, !dbg !29
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !29
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !30
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !30
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !30
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %18) #3, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %18) #3, !dbg !30
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %18) #3, !dbg !30
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %18) #3, !dbg !30
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %19) #3, !dbg !30
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %19) #3, !dbg !30
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %19) #3, !dbg !30
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %19) #3, !dbg !30
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %20) #3, !dbg !30
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %20) #3, !dbg !30
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %20) #3, !dbg !30
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %20) #3, !dbg !30
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !31
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !31
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !31
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !31
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %17) #3, !dbg !32
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %17) #3, !dbg !32
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %17) #3, !dbg !32
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %17) #3, !dbg !32
  %147 = bitcast i32 %146 to float, !dbg !32
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %18) #3, !dbg !32
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %18) #3, !dbg !32
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %18) #3, !dbg !32
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %18) #3, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %19) #3, !dbg !32
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %19) #3, !dbg !32
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %19) #3, !dbg !32
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %19) #3, !dbg !32
  %157 = bitcast i32 %156 to float, !dbg !32
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %20) #3, !dbg !32
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %20) #3, !dbg !32
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %20) #3, !dbg !32
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %20) #3, !dbg !32
  %162 = bitcast i32 %161 to float, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !33
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !33
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !33
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !33
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %17) #3, !dbg !34
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %17) #3, !dbg !34
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %17) #3, !dbg !34
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %17) #3, !dbg !34
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %18) #3, !dbg !34
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %18) #3, !dbg !34
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %18) #3, !dbg !34
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %18) #3, !dbg !34
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %19) #3, !dbg !34
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %19) #3, !dbg !34
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %19) #3, !dbg !34
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %19) #3, !dbg !34
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %20) #3, !dbg !34
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %20) #3, !dbg !34
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %20) #3, !dbg !34
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %20) #3, !dbg !34
  %183 = getelementptr float, ptr addrspace(1) %4, i64 %115, !dbg !35
  %184 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !35
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !35
  %186 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !35
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !36
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !36
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !36
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %17) #3, !dbg !36
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %18) #3, !dbg !36
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %18) #3, !dbg !36
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %18) #3, !dbg !36
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %18) #3, !dbg !36
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %19) #3, !dbg !36
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %19) #3, !dbg !36
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %19) #3, !dbg !36
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %19) #3, !dbg !36
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %20) #3, !dbg !36
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %20) #3, !dbg !36
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %20) #3, !dbg !36
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %20) #3, !dbg !36
  %203 = fadd float %147, 0x3EE4F8B580000000, !dbg !37
  %204 = fadd float %152, 0x3EE4F8B580000000, !dbg !37
  %205 = fadd float %157, 0x3EE4F8B580000000, !dbg !37
  %206 = fadd float %162, 0x3EE4F8B580000000, !dbg !37
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i26 = icmp eq i32 %213, 0, !dbg !38
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i29 = icmp eq i32 %214, 0, !dbg !38
  br i1 %.not.i26, label %220, label %215, !dbg !38

215:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i29, label %218, label %216, !dbg !38

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

220:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i29, label %223, label %221, !dbg !38

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

__nv_sqrtf.exit30:                                ; preds = %216, %218, %221, %223
  %.0.i28 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !38
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i46 = icmp eq i32 %231, 0, !dbg !38
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i49 = icmp eq i32 %232, 0, !dbg !38
  br i1 %.not.i46, label %238, label %233, !dbg !38

233:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i49, label %236, label %234, !dbg !38

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

238:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i49, label %241, label %239, !dbg !38

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

__nv_sqrtf.exit50:                                ; preds = %234, %236, %239, %241
  %.0.i48 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !38
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i66 = icmp eq i32 %249, 0, !dbg !38
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i69 = icmp eq i32 %250, 0, !dbg !38
  br i1 %.not.i66, label %256, label %251, !dbg !38

251:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i69, label %254, label %252, !dbg !38

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

256:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i69, label %259, label %257, !dbg !38

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

__nv_sqrtf.exit70:                                ; preds = %252, %254, %257, %259
  %.0.i68 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !38
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i86 = icmp eq i32 %267, 0, !dbg !38
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i89 = icmp eq i32 %268, 0, !dbg !38
  br i1 %.not.i86, label %274, label %269, !dbg !38

269:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i89, label %272, label %270, !dbg !38

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #3, !dbg !38
  br label %__nv_sqrtf.exit90, !dbg !38

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #3, !dbg !38
  br label %__nv_sqrtf.exit90, !dbg !38

274:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i89, label %277, label %275, !dbg !38

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #3, !dbg !38
  br label %__nv_sqrtf.exit90, !dbg !38

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #3, !dbg !38
  br label %__nv_sqrtf.exit90, !dbg !38

__nv_sqrtf.exit90:                                ; preds = %270, %272, %275, %277
  %.0.i88 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !38
  %279 = insertelement <16 x i32> poison, i32 %114, i64 0, !dbg !28
  %280 = insertelement <16 x i32> %279, i32 %110, i64 1, !dbg !28
  %281 = insertelement <16 x i32> %280, i32 %106, i64 2, !dbg !28
  %282 = insertelement <16 x i32> %281, i32 %102, i64 3, !dbg !28
  %283 = insertelement <16 x i32> %282, i32 %113, i64 4, !dbg !28
  %284 = insertelement <16 x i32> %283, i32 %109, i64 5, !dbg !28
  %285 = insertelement <16 x i32> %284, i32 %105, i64 6, !dbg !28
  %286 = insertelement <16 x i32> %285, i32 %101, i64 7, !dbg !28
  %287 = insertelement <16 x i32> %286, i32 %112, i64 8, !dbg !28
  %288 = insertelement <16 x i32> %287, i32 %108, i64 9, !dbg !28
  %289 = insertelement <16 x i32> %288, i32 %104, i64 10, !dbg !28
  %290 = insertelement <16 x i32> %289, i32 %100, i64 11, !dbg !28
  %291 = insertelement <16 x i32> %290, i32 %111, i64 12, !dbg !28
  %292 = insertelement <16 x i32> %291, i32 %107, i64 13, !dbg !28
  %293 = insertelement <16 x i32> %292, i32 %103, i64 14, !dbg !28
  %294 = insertelement <16 x i32> %293, i32 %99, i64 15, !dbg !28
  %295 = bitcast <16 x i32> %294 to <16 x float>, !dbg !28
  %296 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !30
  %297 = insertelement <4 x i32> %296, i32 %134, i64 1, !dbg !30
  %298 = insertelement <4 x i32> %297, i32 %130, i64 2, !dbg !30
  %299 = insertelement <4 x i32> %298, i32 %126, i64 3, !dbg !30
  %300 = bitcast <4 x i32> %299 to <4 x float>, !dbg !30
  %301 = shufflevector <4 x float> %300, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %302 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !36
  %303 = insertelement <4 x i32> %302, i32 %198, i64 1, !dbg !36
  %304 = insertelement <4 x i32> %303, i32 %194, i64 2, !dbg !36
  %305 = insertelement <4 x i32> %304, i32 %190, i64 3, !dbg !36
  %306 = bitcast <4 x i32> %305 to <4 x float>, !dbg !36
  %307 = shufflevector <4 x float> %306, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %308 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !34
  %309 = insertelement <4 x i32> %308, i32 %178, i64 1, !dbg !34
  %310 = insertelement <4 x i32> %309, i32 %174, i64 2, !dbg !34
  %311 = insertelement <4 x i32> %310, i32 %170, i64 3, !dbg !34
  %312 = bitcast <4 x i32> %311 to <4 x float>, !dbg !34
  %313 = shufflevector <4 x float> %312, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !39
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !39
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !39
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i88) #3, !dbg !39
  %318 = fsub <16 x float> %295, %301, !dbg !40
  %319 = insertelement <16 x float> poison, float %317, i64 0, !dbg !41
  %320 = insertelement <16 x float> %319, float %316, i64 1, !dbg !41
  %321 = insertelement <16 x float> %320, float %315, i64 2, !dbg !41
  %322 = insertelement <16 x float> %321, float %314, i64 3, !dbg !41
  %323 = shufflevector <16 x float> %322, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %324 = fmul <16 x float> %318, %323, !dbg !41
  %325 = fmul <16 x float> %324, %313, !dbg !42
  %326 = fadd <16 x float> %325, %307, !dbg !43
  %327 = fcmp ole <16 x float> %326, zeroinitializer, !dbg !44
  %328 = select <16 x i1> %327, <16 x float> zeroinitializer, <16 x float> %326, !dbg !44
  %329 = fcmp olt <16 x float> %328, splat (float 6.000000e+00), !dbg !48
  %330 = extractelement <16 x float> %328, i64 15, !dbg !50
  %331 = fcmp uno float %330, 0.000000e+00, !dbg !51
  %332 = extractelement <16 x float> %328, i64 11, !dbg !50
  %333 = fcmp uno float %332, 0.000000e+00, !dbg !51
  %334 = extractelement <16 x float> %328, i64 7, !dbg !50
  %335 = fcmp uno float %334, 0.000000e+00, !dbg !51
  %336 = extractelement <16 x float> %328, i64 3, !dbg !50
  %337 = fcmp uno float %336, 0.000000e+00, !dbg !51
  %338 = extractelement <16 x float> %328, i64 14, !dbg !50
  %339 = fcmp uno float %338, 0.000000e+00, !dbg !51
  %340 = extractelement <16 x float> %328, i64 10, !dbg !50
  %341 = fcmp uno float %340, 0.000000e+00, !dbg !51
  %342 = extractelement <16 x float> %328, i64 6, !dbg !50
  %343 = fcmp uno float %342, 0.000000e+00, !dbg !51
  %344 = extractelement <16 x float> %328, i64 2, !dbg !50
  %345 = fcmp uno float %344, 0.000000e+00, !dbg !51
  %346 = extractelement <16 x float> %328, i64 13, !dbg !50
  %347 = fcmp uno float %346, 0.000000e+00, !dbg !51
  %348 = extractelement <16 x float> %328, i64 9, !dbg !50
  %349 = fcmp uno float %348, 0.000000e+00, !dbg !51
  %350 = extractelement <16 x float> %328, i64 5, !dbg !50
  %351 = fcmp uno float %350, 0.000000e+00, !dbg !51
  %352 = extractelement <16 x float> %328, i64 1, !dbg !50
  %353 = fcmp uno float %352, 0.000000e+00, !dbg !51
  %354 = extractelement <16 x float> %328, i64 12, !dbg !50
  %355 = fcmp uno float %354, 0.000000e+00, !dbg !51
  %356 = extractelement <16 x float> %328, i64 8, !dbg !50
  %357 = fcmp uno float %356, 0.000000e+00, !dbg !51
  %358 = extractelement <16 x float> %328, i64 4, !dbg !50
  %359 = fcmp uno float %358, 0.000000e+00, !dbg !51
  %360 = extractelement <16 x float> %328, i64 0, !dbg !50
  %361 = fcmp uno float %360, 0.000000e+00, !dbg !51
  %362 = extractelement <16 x i1> %329, i64 15, !dbg !52
  %363 = or i1 %362, %331, !dbg !52
  %364 = extractelement <16 x i1> %329, i64 11, !dbg !52
  %365 = or i1 %364, %333, !dbg !52
  %366 = extractelement <16 x i1> %329, i64 7, !dbg !52
  %367 = or i1 %366, %335, !dbg !52
  %368 = extractelement <16 x i1> %329, i64 3, !dbg !52
  %369 = or i1 %368, %337, !dbg !52
  %370 = extractelement <16 x i1> %329, i64 14, !dbg !52
  %371 = or i1 %370, %339, !dbg !52
  %372 = extractelement <16 x i1> %329, i64 10, !dbg !52
  %373 = or i1 %372, %341, !dbg !52
  %374 = extractelement <16 x i1> %329, i64 6, !dbg !52
  %375 = or i1 %374, %343, !dbg !52
  %376 = extractelement <16 x i1> %329, i64 2, !dbg !52
  %377 = or i1 %376, %345, !dbg !52
  %378 = extractelement <16 x i1> %329, i64 13, !dbg !52
  %379 = or i1 %378, %347, !dbg !52
  %380 = extractelement <16 x i1> %329, i64 9, !dbg !52
  %381 = or i1 %380, %349, !dbg !52
  %382 = extractelement <16 x i1> %329, i64 5, !dbg !52
  %383 = or i1 %382, %351, !dbg !52
  %384 = extractelement <16 x i1> %329, i64 1, !dbg !52
  %385 = or i1 %384, %353, !dbg !52
  %386 = extractelement <16 x i1> %329, i64 12, !dbg !52
  %387 = or i1 %386, %355, !dbg !52
  %388 = extractelement <16 x i1> %329, i64 8, !dbg !52
  %389 = or i1 %388, %357, !dbg !52
  %390 = extractelement <16 x i1> %329, i64 4, !dbg !52
  %391 = or i1 %390, %359, !dbg !52
  %392 = extractelement <16 x i1> %329, i64 0, !dbg !52
  %393 = or i1 %392, %361, !dbg !52
  %394 = shl i32 %13, 6, !dbg !53
  %395 = shl i32 %14, 6, !dbg !53
  %396 = shl i32 %15, 6, !dbg !53
  %397 = shl i32 %16, 6, !dbg !53
  %398 = add i32 %25, %394, !dbg !54
  %399 = add i32 %25, %395, !dbg !54
  %400 = add i32 %25, %396, !dbg !54
  %401 = add i32 %25, %397, !dbg !54
  %402 = sext i32 %398 to i64, !dbg !55
  %403 = getelementptr float, ptr addrspace(1) %5, i64 %402, !dbg !55
  %404 = sext i32 %399 to i64, !dbg !55
  %405 = getelementptr float, ptr addrspace(1) %5, i64 %404, !dbg !55
  %406 = sext i32 %400 to i64, !dbg !55
  %407 = getelementptr float, ptr addrspace(1) %5, i64 %406, !dbg !55
  %408 = sext i32 %401 to i64, !dbg !55
  %409 = getelementptr float, ptr addrspace(1) %5, i64 %408, !dbg !55
  %410 = bitcast float %330 to i32, !dbg !50
  %411 = select i1 %363, i32 %410, i32 1086324736, !dbg !56
  %412 = bitcast float %332 to i32, !dbg !50
  %413 = select i1 %365, i32 %412, i32 1086324736, !dbg !56
  %414 = bitcast float %334 to i32, !dbg !50
  %415 = select i1 %367, i32 %414, i32 1086324736, !dbg !56
  %416 = bitcast float %336 to i32, !dbg !50
  %417 = select i1 %369, i32 %416, i32 1086324736, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %411, i32 %413, i32 %415, i32 %417, ptr addrspace(1) %403, i1 %95) #3, !dbg !50
  %418 = bitcast float %338 to i32, !dbg !50
  %419 = select i1 %371, i32 %418, i32 1086324736, !dbg !56
  %420 = bitcast float %340 to i32, !dbg !50
  %421 = select i1 %373, i32 %420, i32 1086324736, !dbg !56
  %422 = bitcast float %342 to i32, !dbg !50
  %423 = select i1 %375, i32 %422, i32 1086324736, !dbg !56
  %424 = bitcast float %344 to i32, !dbg !50
  %425 = select i1 %377, i32 %424, i32 1086324736, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %419, i32 %421, i32 %423, i32 %425, ptr addrspace(1) %405, i1 %96) #3, !dbg !50
  %426 = bitcast float %346 to i32, !dbg !50
  %427 = select i1 %379, i32 %426, i32 1086324736, !dbg !56
  %428 = bitcast float %348 to i32, !dbg !50
  %429 = select i1 %381, i32 %428, i32 1086324736, !dbg !56
  %430 = bitcast float %350 to i32, !dbg !50
  %431 = select i1 %383, i32 %430, i32 1086324736, !dbg !56
  %432 = bitcast float %352 to i32, !dbg !50
  %433 = select i1 %385, i32 %432, i32 1086324736, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %427, i32 %429, i32 %431, i32 %433, ptr addrspace(1) %407, i1 %97) #3, !dbg !50
  %434 = bitcast float %354 to i32, !dbg !50
  %435 = select i1 %387, i32 %434, i32 1086324736, !dbg !56
  %436 = bitcast float %356 to i32, !dbg !50
  %437 = select i1 %389, i32 %436, i32 1086324736, !dbg !56
  %438 = bitcast float %358 to i32, !dbg !50
  %439 = select i1 %391, i32 %438, i32 1086324736, !dbg !56
  %440 = bitcast float %360 to i32, !dbg !50
  %441 = select i1 %393, i32 %440, i32 1086324736, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %435, i32 %437, i32 %439, i32 %441, ptr addrspace(1) %409, i1 %98) #3, !dbg !50
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ho2q47m5aek7vh3bpdgfi4qdenhn2dmvz6ower633fdyy7is6v.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_98", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 52, column: 4, scope: !7)
