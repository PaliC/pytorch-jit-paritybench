; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_reflection_pad2d_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = icmp slt i32 %9, 41472, !dbg !14
  %14 = srem i32 %10, 18, !dbg !15
  %15 = srem i32 %12, 18, !dbg !15
  %16 = sdiv i32 %9, 18, !dbg !16
  %17 = sdiv i32 %11, 18, !dbg !16
  %18 = sdiv i32 %9, 324, !dbg !17
  %19 = add nsw i32 %14, -1, !dbg !18
  %20 = add nsw i32 %15, -1, !dbg !18
  %21 = tail call i32 @llvm.abs.i32(i32 %19, i1 true), !dbg !19
  %22 = tail call i32 @llvm.abs.i32(i32 %20, i1 true), !dbg !19
  %23 = add nsw i32 %21, -15, !dbg !20
  %24 = add nsw i32 %22, -15, !dbg !20
  %25 = tail call i32 @llvm.abs.i32(i32 %23, i1 true), !dbg !21
  %26 = tail call i32 @llvm.abs.i32(i32 %24, i1 true), !dbg !21
  %27 = shl nsw i32 %18, 8, !dbg !22
  %reass.sub = or disjoint i32 %27, 255, !dbg !23
  %28 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %29 = insertelement <2 x i32> %28, i32 %16, i64 1, !dbg !15
  %30 = srem <2 x i32> %29, splat (i32 18), !dbg !15
  %31 = add nsw <2 x i32> %30, splat (i32 -1), !dbg !18
  %32 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %31, i1 true), !dbg !19
  %33 = add nsw <2 x i32> %32, splat (i32 -15), !dbg !20
  %34 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %33, i1 true), !dbg !21
  %35 = extractelement <2 x i32> %34, i64 0, !dbg !24
  %36 = sub nuw i32 %reass.sub, %35, !dbg !24
  %37 = extractelement <2 x i32> %34, i64 1, !dbg !24
  %38 = mul nsw i32 %37, -16, !dbg !24
  %39 = add i32 %36, %38, !dbg !24
  %40 = sub nuw i32 %reass.sub, %25, !dbg !23
  %41 = add i32 %40, %38, !dbg !24
  %42 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %43 = insertelement <2 x i32> %42, i32 %17, i64 1, !dbg !15
  %44 = srem <2 x i32> %43, splat (i32 18), !dbg !15
  %45 = add nsw <2 x i32> %44, splat (i32 -1), !dbg !18
  %46 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %45, i1 true), !dbg !19
  %47 = add nsw <2 x i32> %46, splat (i32 -15), !dbg !20
  %48 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %47, i1 true), !dbg !21
  %49 = extractelement <2 x i32> %48, i64 0, !dbg !24
  %50 = sub nuw i32 %reass.sub, %49, !dbg !24
  %51 = extractelement <2 x i32> %48, i64 1, !dbg !24
  %52 = mul nsw i32 %51, -16, !dbg !24
  %53 = add i32 %50, %52, !dbg !24
  %54 = sub nuw i32 %reass.sub, %26, !dbg !23
  %55 = add i32 %54, %52, !dbg !24
  %56 = sext i32 %39 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %41 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %53 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %55 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %13) #2, !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #2, !dbg !26
  %67 = bitcast i32 %66 to float, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #2, !dbg !26
  %69 = bitcast i32 %68 to float, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %13) #2, !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = fcmp olt float %65, 0.000000e+00, !dbg !27
  %73 = fcmp olt float %67, 0.000000e+00, !dbg !27
  %74 = fcmp olt float %69, 0.000000e+00, !dbg !27
  %75 = fcmp olt float %71, 0.000000e+00, !dbg !27
  %76 = select i1 %72, float 0.000000e+00, float %65, !dbg !31
  %77 = select i1 %73, float 0.000000e+00, float %67, !dbg !31
  %78 = select i1 %74, float 0.000000e+00, float %69, !dbg !31
  %79 = select i1 %75, float 0.000000e+00, float %71, !dbg !31
  %80 = sext i32 %9 to i64, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !32
  %82 = bitcast float %76 to i32, !dbg !33
  %83 = bitcast float %77 to i32, !dbg !33
  %84 = bitcast float %78 to i32, !dbg !33
  %85 = bitcast float %79 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %82, i32 %83, i32 %84, i32 %85, ptr addrspace(1) %81, i1 %13) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckbtswocooesijl5pgkdrzwv37ezuhr2d6ho3mnoydpnyvovps5o.py", directory: "inductor_cache/kb")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_relu_8", linkageName: "triton_poi_fused_reflection_pad2d_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 81, scope: !7)
!19 = !DILocation(line: 28, column: 74, scope: !7)
!20 = !DILocation(line: 28, column: 62, scope: !7)
!21 = !DILocation(line: 28, column: 54, scope: !7)
!22 = !DILocation(line: 28, column: 147, scope: !7)
!23 = !DILocation(line: 28, column: 90, scope: !7)
!24 = !DILocation(line: 28, column: 143, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 152, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 30, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 31, column: 25, scope: !7)
!33 = !DILocation(line: 31, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 4, scope: !7)
