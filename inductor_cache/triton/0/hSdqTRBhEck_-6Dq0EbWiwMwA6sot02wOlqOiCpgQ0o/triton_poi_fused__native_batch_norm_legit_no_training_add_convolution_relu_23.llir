; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = srem i32 %15, 16, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %20 = sext i32 %16 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %41 = fadd float %31, 0x3F50624DE0000000, !dbg !29
  %42 = fadd float %32, 0x3F50624DE0000000, !dbg !29
  %43 = fadd float %33, 0x3F50624DE0000000, !dbg !29
  %44 = fadd float %34, 0x3F50624DE0000000, !dbg !29
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %45, 0, !dbg !30
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %46, 0, !dbg !30
  br i1 %.not.i, label %52, label %47, !dbg !30

47:                                               ; preds = %9
  br i1 %.not1.i, label %50, label %48, !dbg !30

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

52:                                               ; preds = %9
  br i1 %.not1.i, label %55, label %53, !dbg !30

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %48, %50, %53, %55
  %.0.i = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !30
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %57, 0, !dbg !30
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %58, 0, !dbg !30
  br i1 %.not.i1, label %64, label %59, !dbg !30

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !30

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !30

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %60, %62, %65, %67
  %.0.i3 = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !30
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %69, 0, !dbg !30
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %70, 0, !dbg !30
  br i1 %.not.i6, label %76, label %71, !dbg !30

71:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %74, label %72, !dbg !30

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

76:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %79, label %77, !dbg !30

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %72, %74, %77, %79
  %.0.i8 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %81, 0, !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %82, 0, !dbg !30
  br i1 %.not.i11, label %88, label %83, !dbg !30

83:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %86, label %84, !dbg !30

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

88:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %91, label %89, !dbg !30

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %84, %86, %89, %91
  %.0.i13 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %94 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %95 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %96 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %97 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %98 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %99 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %100 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %101 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %103 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %104 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %105 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %114 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %121 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !16
  %122 = insertelement <4 x i32> %121, i32 %96, i64 1, !dbg !16
  %123 = insertelement <4 x i32> %122, i32 %99, i64 2, !dbg !16
  %124 = insertelement <4 x i32> %123, i32 %102, i64 3, !dbg !16
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !16
  %126 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !18
  %127 = insertelement <4 x i32> %126, i32 %97, i64 1, !dbg !18
  %128 = insertelement <4 x i32> %127, i32 %100, i64 2, !dbg !18
  %129 = insertelement <4 x i32> %128, i32 %103, i64 3, !dbg !18
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !18
  %131 = fadd <4 x float> %125, %130, !dbg !32
  %132 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !20
  %133 = insertelement <4 x i32> %132, i32 %98, i64 1, !dbg !20
  %134 = insertelement <4 x i32> %133, i32 %101, i64 2, !dbg !20
  %135 = insertelement <4 x i32> %134, i32 %104, i64 3, !dbg !20
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !20
  %137 = fsub <4 x float> %131, %136, !dbg !33
  %138 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !28
  %139 = insertelement <4 x i32> %138, i32 %106, i64 1, !dbg !28
  %140 = insertelement <4 x i32> %139, i32 %107, i64 2, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %108, i64 3, !dbg !28
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !28
  %143 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !26
  %144 = insertelement <4 x i32> %143, i32 %110, i64 1, !dbg !26
  %145 = insertelement <4 x i32> %144, i32 %111, i64 2, !dbg !26
  %146 = insertelement <4 x i32> %145, i32 %112, i64 3, !dbg !26
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !26
  %148 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !24
  %149 = insertelement <4 x i32> %148, i32 %114, i64 1, !dbg !24
  %150 = insertelement <4 x i32> %149, i32 %115, i64 2, !dbg !24
  %151 = insertelement <4 x i32> %150, i32 %116, i64 3, !dbg !24
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !24
  %153 = insertelement <4 x float> poison, float %120, i64 0, !dbg !34
  %154 = insertelement <4 x float> %153, float %119, i64 1, !dbg !34
  %155 = insertelement <4 x float> %154, float %118, i64 2, !dbg !34
  %156 = insertelement <4 x float> %155, float %117, i64 3, !dbg !34
  %157 = fmul <4 x float> %137, %156, !dbg !34
  %158 = fmul <4 x float> %157, %152, !dbg !35
  %159 = fadd <4 x float> %158, %147, !dbg !36
  %160 = fadd <4 x float> %159, %142, !dbg !37
  %161 = fcmp olt <4 x float> %160, zeroinitializer, !dbg !38
  %162 = extractelement <4 x i1> %161, i64 3, !dbg !42
  %163 = extractelement <4 x i1> %161, i64 2, !dbg !42
  %164 = extractelement <4 x i1> %161, i64 1, !dbg !42
  %165 = extractelement <4 x i1> %161, i64 0, !dbg !42
  %bc = bitcast <4 x float> %131 to <4 x i32>, !dbg !43
  %166 = extractelement <4 x i32> %bc, i64 3, !dbg !43
  %bc16 = bitcast <4 x float> %131 to <4 x i32>, !dbg !43
  %167 = extractelement <4 x i32> %bc16, i64 2, !dbg !43
  %bc17 = bitcast <4 x float> %131 to <4 x i32>, !dbg !43
  %168 = extractelement <4 x i32> %bc17, i64 1, !dbg !43
  %bc18 = bitcast <4 x float> %131 to <4 x i32>, !dbg !43
  %169 = extractelement <4 x i32> %bc18, i64 0, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %18, i1 true) #3, !dbg !43
  %170 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !44
  %bc19 = bitcast <4 x float> %160 to <4 x i32>, !dbg !45
  %171 = extractelement <4 x i32> %bc19, i64 3, !dbg !45
  %172 = select i1 %162, i32 0, i32 %171, !dbg !42
  %bc20 = bitcast <4 x float> %160 to <4 x i32>, !dbg !45
  %173 = extractelement <4 x i32> %bc20, i64 2, !dbg !45
  %174 = select i1 %163, i32 0, i32 %173, !dbg !42
  %bc21 = bitcast <4 x float> %160 to <4 x i32>, !dbg !45
  %175 = extractelement <4 x i32> %bc21, i64 1, !dbg !45
  %176 = select i1 %164, i32 0, i32 %175, !dbg !42
  %bc22 = bitcast <4 x float> %160 to <4 x i32>, !dbg !45
  %177 = extractelement <4 x i32> %bc22, i64 0, !dbg !45
  %178 = select i1 %165, i32 0, i32 %177, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %174, i32 %176, i32 %178, ptr addrspace(1) %170, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czlwex6cp3rfuqjgfwpk36bt3u7y4ahmkdeah6etrfmnogsguotx.py", directory: "inductor_cache/zl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 39, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 4, scope: !7)
