; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = sdiv i32 %12, 256, !dbg !14
  %14 = srem i32 %13, 64, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !17
  %22 = sext i32 %13 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %28 = sext i32 %14 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !17
  %41 = insertelement <4 x i32> %40, i32 %20, i64 1, !dbg !17
  %42 = insertelement <4 x i32> %41, i32 %19, i64 2, !dbg !17
  %43 = insertelement <4 x i32> %42, i32 %18, i64 3, !dbg !17
  %44 = bitcast <4 x i32> %43 to <4 x float>, !dbg !17
  %45 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !19
  %46 = insertelement <4 x i32> %45, i32 %26, i64 1, !dbg !19
  %47 = insertelement <4 x i32> %46, i32 %25, i64 2, !dbg !19
  %48 = insertelement <4 x i32> %47, i32 %24, i64 3, !dbg !19
  %49 = bitcast <4 x i32> %48 to <4 x float>, !dbg !19
  %50 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !21
  %51 = insertelement <4 x i32> %50, i32 %32, i64 1, !dbg !21
  %52 = insertelement <4 x i32> %51, i32 %31, i64 2, !dbg !21
  %53 = insertelement <4 x i32> %52, i32 %30, i64 3, !dbg !21
  %54 = bitcast <4 x i32> %53 to <4 x float>, !dbg !21
  %55 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !23
  %56 = insertelement <4 x i32> %55, i32 %38, i64 1, !dbg !23
  %57 = insertelement <4 x i32> %56, i32 %37, i64 2, !dbg !23
  %58 = insertelement <4 x i32> %57, i32 %36, i64 3, !dbg !23
  %59 = bitcast <4 x i32> %58 to <4 x float>, !dbg !23
  %60 = fadd <4 x float> %49, %54, !dbg !24
  %61 = fadd <4 x float> %60, %44, !dbg !25
  %62 = fadd <4 x float> %61, %59, !dbg !26
  %63 = fcmp olt <4 x float> %62, zeroinitializer, !dbg !27
  %64 = extractelement <4 x i1> %63, i64 3, !dbg !31
  %65 = extractelement <4 x i1> %63, i64 2, !dbg !31
  %66 = extractelement <4 x i1> %63, i64 1, !dbg !31
  %67 = extractelement <4 x i1> %63, i64 0, !dbg !31
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !32
  %bc = bitcast <4 x float> %62 to <4 x i32>, !dbg !33
  %69 = extractelement <4 x i32> %bc, i64 3, !dbg !33
  %70 = select i1 %64, i32 0, i32 %69, !dbg !31
  %bc1 = bitcast <4 x float> %62 to <4 x i32>, !dbg !33
  %71 = extractelement <4 x i32> %bc1, i64 2, !dbg !33
  %72 = select i1 %65, i32 0, i32 %71, !dbg !31
  %bc2 = bitcast <4 x float> %62 to <4 x i32>, !dbg !33
  %73 = extractelement <4 x i32> %bc2, i64 1, !dbg !33
  %74 = select i1 %66, i32 0, i32 %73, !dbg !31
  %bc3 = bitcast <4 x float> %62 to <4 x i32>, !dbg !33
  %75 = extractelement <4 x i32> %bc3, i64 0, !dbg !33
  %76 = select i1 %67, i32 0, i32 %75, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %70, i32 %72, i32 %74, i32 %76, ptr addrspace(1) %68, i1 true) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7hpjdbbdiky2c3v4wtab5mw5znqcfjhjh6clywissabznxdlw7.py", directory: "inductor_cache/j7")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_6", linkageName: "triton_poi_fused_add_convolution_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 32, column: 18, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 35, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
