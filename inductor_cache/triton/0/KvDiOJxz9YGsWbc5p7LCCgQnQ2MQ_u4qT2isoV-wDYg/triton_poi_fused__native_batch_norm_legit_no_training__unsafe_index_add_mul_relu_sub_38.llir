; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 7, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = and i32 %25, 127, !dbg !12
  %27 = or disjoint i32 %24, %26, !dbg !13
  %28 = icmp slt i32 %27, 2048, !dbg !14
  %.frozen = freeze i32 %27, !dbg !15
  %29 = sdiv i32 %.frozen, 8, !dbg !15
  %30 = srem i32 %29, 8, !dbg !16
  %31 = mul i32 %29, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = sdiv i32 %27, 64, !dbg !18
  %33 = srem i32 %32, 8, !dbg !19
  %34 = sext i32 %30 to i64, !dbg !20
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %28) #3, !dbg !21
  %37 = sext i32 %.decomposed to i64, !dbg !22
  %38 = getelementptr i64, ptr addrspace(1) %2, i64 %37, !dbg !22
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %28) #3, !dbg !23
  %40 = getelementptr i64, ptr addrspace(1) %4, i64 %37, !dbg !24
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %28) #3, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %28) #3, !dbg !27
  %44 = sext i32 %27 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %28) #3, !dbg !29
  %47 = sext i32 %33 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %28) #3, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %8, i64 %47, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %28) #3, !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %9, i64 %47, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %28) #3, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %47, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %28) #3, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %44, !dbg !38
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %28) #3, !dbg !39
  %59 = getelementptr i64, ptr addrspace(1) %12, i64 %34, !dbg !40
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 %28) #3, !dbg !41
  %61 = getelementptr float, ptr addrspace(1) %13, i64 %34, !dbg !42
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %28) #3, !dbg !43
  %63 = getelementptr i64, ptr addrspace(1) %14, i64 %34, !dbg !44
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 %28) #3, !dbg !45
  %65 = getelementptr i64, ptr addrspace(1) %15, i64 %37, !dbg !46
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #3, !dbg !47
  %67 = getelementptr i64, ptr addrspace(1) %17, i64 %37, !dbg !48
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %28) #3, !dbg !49
  %69 = getelementptr float, ptr addrspace(1) %18, i64 %37, !dbg !50
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %28) #3, !dbg !51
  %71 = getelementptr i64, ptr addrspace(1) %19, i64 %34, !dbg !52
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %28) #3, !dbg !53
  %73 = getelementptr float, ptr addrspace(1) %20, i64 %34, !dbg !54
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %28) #3, !dbg !55
  %75 = lshr i64 %36, 61, !dbg !56
  %76 = and i64 %75, 4, !dbg !56
  %77 = add i64 %76, %36, !dbg !56
  %78 = lshr i64 %39, 61, !dbg !57
  %79 = and i64 %78, 4, !dbg !57
  %80 = shl i64 %77, 2, !dbg !58
  %81 = shl nsw i32 %32, 4, !dbg !59
  %82 = sext i32 %81 to i64, !dbg !60
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !61
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %79, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %80, !dbg !61
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %82, !dbg !61
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %28) #3, !dbg !62
  %88 = lshr i64 %41, 61, !dbg !63
  %89 = and i64 %88, 4, !dbg !63
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !64
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %89, !dbg !64
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %80, !dbg !64
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %82, !dbg !64
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %28) #3, !dbg !65
  %95 = fadd float %52, 0x3EE4F8B580000000, !dbg !66
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %96, 0, !dbg !67
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %97, 0, !dbg !67
  br i1 %.not.i, label %103, label %98, !dbg !67

98:                                               ; preds = %22
  br i1 %.not1.i, label %101, label %99, !dbg !67

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

103:                                              ; preds = %22
  br i1 %.not1.i, label %106, label %104, !dbg !67

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !67
  %108 = bitcast i32 %46 to float, !dbg !29
  %109 = bitcast i32 %49 to float, !dbg !31
  %110 = fsub float %108, %109, !dbg !68
  %111 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !27
  %112 = insertelement <2 x i32> %111, i32 %70, i64 1, !dbg !27
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !27
  %114 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !43
  %115 = insertelement <2 x i32> %114, i32 %74, i64 1, !dbg !43
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !43
  %117 = bitcast i32 %58 to float, !dbg !39
  %118 = bitcast i32 %56 to float, !dbg !37
  %119 = bitcast i32 %54 to float, !dbg !35
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %121 = fmul float %110, %120, !dbg !70
  %122 = fmul float %121, %119, !dbg !71
  %123 = fadd float %122, %118, !dbg !72
  %124 = fadd float %123, %117, !dbg !73
  %125 = lshr i64 %60, 61, !dbg !74
  %126 = and i64 %125, 4, !dbg !74
  %127 = add i64 %126, %60, !dbg !74
  %128 = shl i64 %127, 2, !dbg !75
  %129 = getelementptr float, ptr addrspace(1) %84, i64 %128, !dbg !76
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %82, !dbg !76
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %28) #3, !dbg !77
  %132 = getelementptr float, ptr addrspace(1) %91, i64 %128, !dbg !78
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %82, !dbg !78
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %28) #3, !dbg !79
  %135 = lshr i64 %64, 62, !dbg !80
  %136 = and i64 %135, 2, !dbg !80
  %137 = add i64 %136, %64, !dbg !80
  %138 = lshr i64 %66, 62, !dbg !81
  %139 = and i64 %138, 2, !dbg !81
  %140 = shl i64 %137, 1, !dbg !82
  %141 = shl nsw i32 %32, 2, !dbg !83
  %142 = sext i32 %141 to i64, !dbg !84
  %143 = getelementptr float, ptr addrspace(1) %16, i64 %66, !dbg !85
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %139, !dbg !85
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %140, !dbg !85
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %142, !dbg !85
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %28) #3, !dbg !86
  %148 = lshr i64 %68, 62, !dbg !87
  %149 = and i64 %148, 2, !dbg !87
  %150 = getelementptr float, ptr addrspace(1) %16, i64 %68, !dbg !88
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %149, !dbg !88
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %140, !dbg !88
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %142, !dbg !88
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %28) #3, !dbg !89
  %155 = lshr i64 %72, 62, !dbg !90
  %156 = and i64 %155, 2, !dbg !90
  %157 = add i64 %156, %72, !dbg !90
  %158 = shl i64 %157, 1, !dbg !91
  %159 = getelementptr float, ptr addrspace(1) %144, i64 %158, !dbg !92
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %142, !dbg !92
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %28) #3, !dbg !93
  %162 = getelementptr float, ptr addrspace(1) %151, i64 %158, !dbg !94
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %142, !dbg !94
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %28) #3, !dbg !95
  %165 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !62
  %166 = insertelement <2 x i32> %165, i32 %147, i64 1, !dbg !62
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !62
  %168 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !65
  %169 = insertelement <2 x i32> %168, i32 %154, i64 1, !dbg !65
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !65
  %171 = fsub <2 x float> %170, %167, !dbg !96
  %172 = fmul <2 x float> %171, %113, !dbg !97
  %173 = fadd <2 x float> %172, %167, !dbg !98
  %174 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !77
  %175 = insertelement <2 x i32> %174, i32 %161, i64 1, !dbg !77
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !77
  %177 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !79
  %178 = insertelement <2 x i32> %177, i32 %164, i64 1, !dbg !79
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !79
  %180 = fsub <2 x float> %179, %176, !dbg !99
  %181 = fmul <2 x float> %180, %113, !dbg !100
  %182 = fadd <2 x float> %181, %176, !dbg !101
  %183 = fsub <2 x float> %182, %173, !dbg !102
  %184 = fmul <2 x float> %183, %116, !dbg !103
  %185 = fadd <2 x float> %173, %184, !dbg !104
  %186 = extractelement <2 x float> %185, i64 0, !dbg !105
  %187 = fadd float %124, %186, !dbg !105
  %188 = extractelement <2 x float> %185, i64 1, !dbg !106
  %189 = fadd float %187, %188, !dbg !106
  %190 = fcmp olt float %189, 0.000000e+00, !dbg !107
  %191 = select i1 %190, float 0.000000e+00, float %189, !dbg !111
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !112
  %193 = bitcast float %191 to i32, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %192, i1 %28) #3, !dbg !113
  ret void, !dbg !114
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7hkx53wsyscmzw7utw4adnwl23alled4cumfyrmlvnsfmg7amji.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 46, column: 32, scope: !7)
!55 = !DILocation(line: 46, column: 37, scope: !7)
!56 = !DILocation(line: 50, column: 32, scope: !7)
!57 = !DILocation(line: 53, column: 32, scope: !7)
!58 = !DILocation(line: 54, column: 39, scope: !7)
!59 = !DILocation(line: 54, column: 49, scope: !7)
!60 = !DILocation(line: 54, column: 46, scope: !7)
!61 = !DILocation(line: 54, column: 30, scope: !7)
!62 = !DILocation(line: 54, column: 54, scope: !7)
!63 = !DILocation(line: 57, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 31, scope: !7)
!65 = !DILocation(line: 58, column: 56, scope: !7)
!66 = !DILocation(line: 64, column: 20, scope: !7)
!67 = !DILocation(line: 65, column: 27, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 76, column: 35, scope: !7)
!75 = !DILocation(line: 77, column: 40, scope: !7)
!76 = !DILocation(line: 77, column: 31, scope: !7)
!77 = !DILocation(line: 77, column: 56, scope: !7)
!78 = !DILocation(line: 78, column: 31, scope: !7)
!79 = !DILocation(line: 78, column: 57, scope: !7)
!80 = !DILocation(line: 89, column: 35, scope: !7)
!81 = !DILocation(line: 92, column: 35, scope: !7)
!82 = !DILocation(line: 93, column: 42, scope: !7)
!83 = !DILocation(line: 93, column: 52, scope: !7)
!84 = !DILocation(line: 93, column: 50, scope: !7)
!85 = !DILocation(line: 93, column: 32, scope: !7)
!86 = !DILocation(line: 93, column: 57, scope: !7)
!87 = !DILocation(line: 96, column: 35, scope: !7)
!88 = !DILocation(line: 97, column: 32, scope: !7)
!89 = !DILocation(line: 97, column: 57, scope: !7)
!90 = !DILocation(line: 103, column: 35, scope: !7)
!91 = !DILocation(line: 104, column: 42, scope: !7)
!92 = !DILocation(line: 104, column: 32, scope: !7)
!93 = !DILocation(line: 104, column: 57, scope: !7)
!94 = !DILocation(line: 105, column: 32, scope: !7)
!95 = !DILocation(line: 105, column: 57, scope: !7)
!96 = !DILocation(line: 59, column: 20, scope: !7)
!97 = !DILocation(line: 60, column: 20, scope: !7)
!98 = !DILocation(line: 61, column: 19, scope: !7)
!99 = !DILocation(line: 79, column: 20, scope: !7)
!100 = !DILocation(line: 80, column: 20, scope: !7)
!101 = !DILocation(line: 81, column: 20, scope: !7)
!102 = !DILocation(line: 82, column: 20, scope: !7)
!103 = !DILocation(line: 83, column: 20, scope: !7)
!104 = !DILocation(line: 84, column: 20, scope: !7)
!105 = !DILocation(line: 85, column: 20, scope: !7)
!106 = !DILocation(line: 112, column: 20, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !108, inlinedAt: !110)
!108 = distinct !DILexicalBlockFile(scope: !7, file: !109, discriminator: 0)
!109 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!110 = !DILocation(line: 114, column: 42, scope: !7)
!111 = !DILocation(line: 121, column: 29, scope: !108, inlinedAt: !110)
!112 = !DILocation(line: 115, column: 28, scope: !7)
!113 = !DILocation(line: 115, column: 40, scope: !7)
!114 = !DILocation(line: 115, column: 4, scope: !7)
