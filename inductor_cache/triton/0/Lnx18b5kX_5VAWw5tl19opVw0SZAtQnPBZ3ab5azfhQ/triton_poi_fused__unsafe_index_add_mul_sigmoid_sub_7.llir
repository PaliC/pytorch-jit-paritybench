; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %16 = shl i32 %15, 6, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 60, !dbg !12
  %20 = lshr i32 %17, 4, !dbg !12
  %21 = and i32 %20, 15, !dbg !12
  %22 = or disjoint i32 %21, 16, !dbg !12
  %23 = or disjoint i32 %21, 32, !dbg !12
  %24 = or disjoint i32 %21, 48, !dbg !12
  %25 = or disjoint i32 %16, %19, !dbg !13
  %26 = or disjoint i32 %16, %21, !dbg !13
  %27 = or disjoint i32 %16, %22, !dbg !13
  %28 = or disjoint i32 %16, %23, !dbg !13
  %29 = or disjoint i32 %16, %24, !dbg !13
  %30 = icmp slt i32 %25, 512, !dbg !14
  %31 = icmp slt i32 %26, 512, !dbg !14
  %32 = icmp slt i32 %27, 512, !dbg !14
  %33 = icmp slt i32 %28, 512, !dbg !14
  %34 = icmp slt i32 %29, 512, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %36 = shl i32 %35, 6, !dbg !16
  %37 = or disjoint i32 %36, %21, !dbg !17
  %38 = or disjoint i32 %36, %22, !dbg !17
  %39 = or disjoint i32 %36, %23, !dbg !17
  %40 = or disjoint i32 %36, %24, !dbg !17
  %41 = or disjoint i32 %36, %19, !dbg !17
  %42 = icmp slt i32 %37, 256, !dbg !18
  %43 = icmp slt i32 %38, 256, !dbg !18
  %44 = icmp slt i32 %39, 256, !dbg !18
  %45 = icmp slt i32 %40, 256, !dbg !18
  %46 = icmp slt i32 %41, 256, !dbg !18
  %.frozen = freeze i32 %37, !dbg !19
  %47 = sdiv i32 %.frozen, 16, !dbg !19
  %.frozen1 = freeze i32 %38, !dbg !19
  %48 = sdiv i32 %.frozen1, 16, !dbg !19
  %.frozen3 = freeze i32 %39, !dbg !19
  %49 = sdiv i32 %.frozen3, 16, !dbg !19
  %.frozen5 = freeze i32 %40, !dbg !19
  %50 = sdiv i32 %.frozen5, 16, !dbg !19
  %51 = mul i32 %47, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %51, !dbg !20
  %52 = mul i32 %48, 16, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %52, !dbg !20
  %53 = mul i32 %49, 16, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %53, !dbg !20
  %54 = mul i32 %50, 16, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %54, !dbg !20
  %.frozen7 = freeze i32 %25, !dbg !21
  %55 = sdiv i32 %.frozen7, 128, !dbg !21
  %56 = mul i32 %55, 128, !dbg !22
  %.decomposed8 = sub i32 %.frozen7, %56, !dbg !22
  %57 = sext i32 %47 to i64, !dbg !23
  %58 = getelementptr i64, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %48 to i64, !dbg !23
  %60 = getelementptr i64, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %49 to i64, !dbg !23
  %62 = getelementptr i64, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %50 to i64, !dbg !23
  %64 = getelementptr i64, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %42) #2, !dbg !24
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %42) #2, !dbg !24
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %42) #2, !dbg !24
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %42) #2, !dbg !24
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %43) #2, !dbg !24
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %43) #2, !dbg !24
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %43) #2, !dbg !24
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %43) #2, !dbg !24
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %44) #2, !dbg !24
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %44) #2, !dbg !24
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %44) #2, !dbg !24
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %44) #2, !dbg !24
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %45) #2, !dbg !24
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %45) #2, !dbg !24
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %45) #2, !dbg !24
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %45) #2, !dbg !24
  %81 = sext i32 %.decomposed to i64, !dbg !25
  %82 = getelementptr i64, ptr addrspace(1) %1, i64 %81, !dbg !25
  %83 = sext i32 %.decomposed2 to i64, !dbg !25
  %84 = getelementptr i64, ptr addrspace(1) %1, i64 %83, !dbg !25
  %85 = sext i32 %.decomposed4 to i64, !dbg !25
  %86 = getelementptr i64, ptr addrspace(1) %1, i64 %85, !dbg !25
  %87 = sext i32 %.decomposed6 to i64, !dbg !25
  %88 = getelementptr i64, ptr addrspace(1) %1, i64 %87, !dbg !25
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %42) #2, !dbg !26
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %42) #2, !dbg !26
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %42) #2, !dbg !26
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %42) #2, !dbg !26
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 %43) #2, !dbg !26
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 %43) #2, !dbg !26
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 %43) #2, !dbg !26
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 %43) #2, !dbg !26
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %44) #2, !dbg !26
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %44) #2, !dbg !26
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %44) #2, !dbg !26
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %44) #2, !dbg !26
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %45) #2, !dbg !26
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %45) #2, !dbg !26
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %45) #2, !dbg !26
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %45) #2, !dbg !26
  %105 = getelementptr i64, ptr addrspace(1) %3, i64 %81, !dbg !27
  %106 = getelementptr i64, ptr addrspace(1) %3, i64 %83, !dbg !27
  %107 = getelementptr i64, ptr addrspace(1) %3, i64 %85, !dbg !27
  %108 = getelementptr i64, ptr addrspace(1) %3, i64 %87, !dbg !27
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 %42) #2, !dbg !28
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 %42) #2, !dbg !28
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 %42) #2, !dbg !28
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 %42) #2, !dbg !28
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %106, i1 %43) #2, !dbg !28
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %106, i1 %43) #2, !dbg !28
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %106, i1 %43) #2, !dbg !28
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %106, i1 %43) #2, !dbg !28
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %107, i1 %44) #2, !dbg !28
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %107, i1 %44) #2, !dbg !28
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %107, i1 %44) #2, !dbg !28
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %107, i1 %44) #2, !dbg !28
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 %45) #2, !dbg !28
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 %45) #2, !dbg !28
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 %45) #2, !dbg !28
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 %45) #2, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !29
  %126 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !29
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !29
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %42) #2, !dbg !30
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %42) #2, !dbg !30
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %42) #2, !dbg !30
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %42) #2, !dbg !30
  %133 = bitcast i32 %132 to float, !dbg !30
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %43) #2, !dbg !30
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %43) #2, !dbg !30
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %43) #2, !dbg !30
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %43) #2, !dbg !30
  %138 = bitcast i32 %137 to float, !dbg !30
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %44) #2, !dbg !30
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %44) #2, !dbg !30
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %44) #2, !dbg !30
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %44) #2, !dbg !30
  %143 = bitcast i32 %142 to float, !dbg !30
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %45) #2, !dbg !30
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %45) #2, !dbg !30
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %45) #2, !dbg !30
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %45) #2, !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = getelementptr i64, ptr addrspace(1) %5, i64 %57, !dbg !31
  %150 = getelementptr i64, ptr addrspace(1) %5, i64 %59, !dbg !31
  %151 = getelementptr i64, ptr addrspace(1) %5, i64 %61, !dbg !31
  %152 = getelementptr i64, ptr addrspace(1) %5, i64 %63, !dbg !31
  %153 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %149, i1 %42) #2, !dbg !32
  %154 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %149, i1 %42) #2, !dbg !32
  %155 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %149, i1 %42) #2, !dbg !32
  %156 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %149, i1 %42) #2, !dbg !32
  %157 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %150, i1 %43) #2, !dbg !32
  %158 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %150, i1 %43) #2, !dbg !32
  %159 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %150, i1 %43) #2, !dbg !32
  %160 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %150, i1 %43) #2, !dbg !32
  %161 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %151, i1 %44) #2, !dbg !32
  %162 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %151, i1 %44) #2, !dbg !32
  %163 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %151, i1 %44) #2, !dbg !32
  %164 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %151, i1 %44) #2, !dbg !32
  %165 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %152, i1 %45) #2, !dbg !32
  %166 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %152, i1 %45) #2, !dbg !32
  %167 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %152, i1 %45) #2, !dbg !32
  %168 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %152, i1 %45) #2, !dbg !32
  %169 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !33
  %170 = getelementptr float, ptr addrspace(1) %6, i64 %59, !dbg !33
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %61, !dbg !33
  %172 = getelementptr float, ptr addrspace(1) %6, i64 %63, !dbg !33
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %42) #2, !dbg !34
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %42) #2, !dbg !34
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %42) #2, !dbg !34
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %42) #2, !dbg !34
  %177 = bitcast i32 %176 to float, !dbg !34
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %43) #2, !dbg !34
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %43) #2, !dbg !34
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %43) #2, !dbg !34
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %43) #2, !dbg !34
  %182 = bitcast i32 %181 to float, !dbg !34
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %44) #2, !dbg !34
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %44) #2, !dbg !34
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %44) #2, !dbg !34
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %44) #2, !dbg !34
  %187 = bitcast i32 %186 to float, !dbg !34
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %45) #2, !dbg !34
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %45) #2, !dbg !34
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %45) #2, !dbg !34
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %45) #2, !dbg !34
  %192 = bitcast i32 %191 to float, !dbg !34
  %193 = lshr i64 %92, 61, !dbg !35
  %194 = and i64 %193, 4, !dbg !35
  %195 = add i64 %194, %92, !dbg !35
  %196 = lshr i64 %96, 61, !dbg !35
  %197 = and i64 %196, 4, !dbg !35
  %198 = add i64 %197, %96, !dbg !35
  %199 = lshr i64 %100, 61, !dbg !35
  %200 = and i64 %199, 4, !dbg !35
  %201 = add i64 %200, %100, !dbg !35
  %202 = lshr i64 %104, 61, !dbg !35
  %203 = and i64 %202, 4, !dbg !35
  %204 = add i64 %203, %104, !dbg !35
  %205 = shl i64 %195, 7, !dbg !36
  %206 = shl i64 %198, 7, !dbg !36
  %207 = shl i64 %201, 7, !dbg !36
  %208 = shl i64 %204, 7, !dbg !36
  %209 = shl i32 %55, 11, !dbg !37
  %210 = and i1 %30, %42, !dbg !38
  %211 = and i1 %30, %43, !dbg !38
  %212 = and i1 %30, %44, !dbg !38
  %213 = and i1 %30, %45, !dbg !38
  %214 = and i1 %31, %46, !dbg !38
  %215 = and i1 %32, %46, !dbg !38
  %216 = and i1 %33, %46, !dbg !38
  %217 = and i1 %34, %46, !dbg !38
  %218 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !39
  %219 = insertelement <2 x i32> %218, i32 %.decomposed8, i64 1, !dbg !39
  %220 = sext <2 x i32> %219 to <2 x i64>, !dbg !39
  %221 = extractelement <2 x i64> %220, i64 1, !dbg !40
  %222 = add i64 %205, %221, !dbg !40
  %223 = add i64 %206, %221, !dbg !40
  %224 = add i64 %207, %221, !dbg !40
  %225 = add i64 %208, %221, !dbg !40
  %226 = insertelement <2 x i64> poison, i64 %68, i64 0, !dbg !41
  %227 = insertelement <2 x i64> %226, i64 %112, i64 1, !dbg !41
  %228 = lshr <2 x i64> %227, splat (i64 61), !dbg !41
  %229 = and <2 x i64> %228, splat (i64 4), !dbg !41
  %230 = add <2 x i64> %229, %227, !dbg !41
  %231 = shl <2 x i64> %230, <i64 9, i64 7>, !dbg !42
  %232 = add <2 x i64> %231, %220, !dbg !43
  %233 = extractelement <2 x i64> %232, i64 0, !dbg !44
  %234 = add i64 %233, %222, !dbg !39
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %234, !dbg !45
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %235, i1 %210) #2, !dbg !46
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !46
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !46
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !46
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !46
  %241 = insertelement <2 x i64> poison, i64 %72, i64 0, !dbg !41
  %242 = insertelement <2 x i64> %241, i64 %116, i64 1, !dbg !41
  %243 = lshr <2 x i64> %242, splat (i64 61), !dbg !41
  %244 = and <2 x i64> %243, splat (i64 4), !dbg !41
  %245 = add <2 x i64> %244, %242, !dbg !41
  %246 = shl <2 x i64> %245, <i64 9, i64 7>, !dbg !42
  %247 = add <2 x i64> %246, %220, !dbg !43
  %248 = extractelement <2 x i64> %247, i64 0, !dbg !44
  %249 = add i64 %248, %223, !dbg !39
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !45
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %250, i1 %211) #2, !dbg !46
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !46
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !46
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !46
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !46
  %256 = insertelement <2 x i64> poison, i64 %76, i64 0, !dbg !41
  %257 = insertelement <2 x i64> %256, i64 %120, i64 1, !dbg !41
  %258 = lshr <2 x i64> %257, splat (i64 61), !dbg !41
  %259 = and <2 x i64> %258, splat (i64 4), !dbg !41
  %260 = add <2 x i64> %259, %257, !dbg !41
  %261 = shl <2 x i64> %260, <i64 9, i64 7>, !dbg !42
  %262 = add <2 x i64> %261, %220, !dbg !43
  %263 = extractelement <2 x i64> %262, i64 0, !dbg !44
  %264 = add i64 %263, %224, !dbg !39
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !45
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %265, i1 %212) #2, !dbg !46
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !46
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !46
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !46
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !46
  %271 = insertelement <2 x i64> poison, i64 %80, i64 0, !dbg !41
  %272 = insertelement <2 x i64> %271, i64 %124, i64 1, !dbg !41
  %273 = lshr <2 x i64> %272, splat (i64 61), !dbg !41
  %274 = and <2 x i64> %273, splat (i64 4), !dbg !41
  %275 = add <2 x i64> %274, %272, !dbg !41
  %276 = shl <2 x i64> %275, <i64 9, i64 7>, !dbg !42
  %277 = add <2 x i64> %276, %220, !dbg !43
  %278 = extractelement <2 x i64> %277, i64 0, !dbg !44
  %279 = add i64 %278, %225, !dbg !39
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %279, !dbg !45
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %280, i1 %213) #2, !dbg !46
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !46
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !46
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !46
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !46
  %286 = extractelement <2 x i64> %232, i64 1, !dbg !44
  %287 = add i64 %233, %286, !dbg !44
  %288 = extractelement <2 x i64> %247, i64 1, !dbg !44
  %289 = add i64 %248, %288, !dbg !44
  %290 = extractelement <2 x i64> %262, i64 1, !dbg !44
  %291 = add i64 %263, %290, !dbg !44
  %292 = extractelement <2 x i64> %277, i64 1, !dbg !44
  %293 = add i64 %278, %292, !dbg !44
  %294 = getelementptr float, ptr addrspace(1) %2, i64 %287, !dbg !47
  %295 = getelementptr float, ptr addrspace(1) %2, i64 %289, !dbg !47
  %296 = getelementptr float, ptr addrspace(1) %2, i64 %291, !dbg !47
  %297 = getelementptr float, ptr addrspace(1) %2, i64 %293, !dbg !47
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 %210) #2, !dbg !48
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !48
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !48
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !48
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !48
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %295, i1 %211) #2, !dbg !48
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !48
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !48
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !48
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !48
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %296, i1 %212) #2, !dbg !48
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !48
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !48
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !48
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !48
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %213) #2, !dbg !48
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !48
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !48
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !48
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !48
  %318 = lshr i64 %156, 61, !dbg !49
  %319 = and i64 %318, 4, !dbg !49
  %320 = add i64 %319, %156, !dbg !49
  %321 = lshr i64 %160, 61, !dbg !49
  %322 = and i64 %321, 4, !dbg !49
  %323 = add i64 %322, %160, !dbg !49
  %324 = lshr i64 %164, 61, !dbg !49
  %325 = and i64 %324, 4, !dbg !49
  %326 = add i64 %325, %164, !dbg !49
  %327 = lshr i64 %168, 61, !dbg !49
  %328 = and i64 %327, 4, !dbg !49
  %329 = add i64 %328, %168, !dbg !49
  %330 = shl i64 %320, 9, !dbg !50
  %331 = shl i64 %323, 9, !dbg !50
  %332 = shl i64 %326, 9, !dbg !50
  %333 = shl i64 %329, 9, !dbg !50
  %334 = extractelement <2 x i64> %220, i64 0, !dbg !51
  %335 = add i64 %222, %334, !dbg !51
  %336 = add i64 %335, %330, !dbg !52
  %337 = add i64 %223, %334, !dbg !51
  %338 = add i64 %337, %331, !dbg !52
  %339 = add i64 %224, %334, !dbg !51
  %340 = add i64 %339, %332, !dbg !52
  %341 = add i64 %225, %334, !dbg !51
  %342 = add i64 %341, %333, !dbg !52
  %343 = getelementptr float, ptr addrspace(1) %2, i64 %336, !dbg !53
  %344 = getelementptr float, ptr addrspace(1) %2, i64 %338, !dbg !53
  %345 = getelementptr float, ptr addrspace(1) %2, i64 %340, !dbg !53
  %346 = getelementptr float, ptr addrspace(1) %2, i64 %342, !dbg !53
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %343, i1 %210) #2, !dbg !54
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !54
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !54
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !54
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !54
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %344, i1 %211) #2, !dbg !54
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !54
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !54
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !54
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !54
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %345, i1 %212) #2, !dbg !54
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !54
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !54
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !54
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !54
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %346, i1 %213) #2, !dbg !54
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !54
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !54
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !54
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !54
  %367 = add i64 %286, %334, !dbg !55
  %368 = add i64 %367, %330, !dbg !56
  %369 = add i64 %288, %334, !dbg !55
  %370 = add i64 %369, %331, !dbg !56
  %371 = add i64 %290, %334, !dbg !55
  %372 = add i64 %371, %332, !dbg !56
  %373 = add i64 %292, %334, !dbg !55
  %374 = add i64 %373, %333, !dbg !56
  %375 = getelementptr float, ptr addrspace(1) %2, i64 %368, !dbg !57
  %376 = getelementptr float, ptr addrspace(1) %2, i64 %370, !dbg !57
  %377 = getelementptr float, ptr addrspace(1) %2, i64 %372, !dbg !57
  %378 = getelementptr float, ptr addrspace(1) %2, i64 %374, !dbg !57
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %375, i1 %210) #2, !dbg !58
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !58
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !58
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !58
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !58
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %376, i1 %211) #2, !dbg !58
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !58
  %386 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !58
  %387 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !58
  %388 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !58
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %377, i1 %212) #2, !dbg !58
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !58
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !58
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !58
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !58
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %378, i1 %213) #2, !dbg !58
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !58
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !58
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !58
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !58
  %399 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !54
  %400 = insertelement <2 x i32> %399, i32 %237, i64 1, !dbg !54
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !54
  %402 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !58
  %403 = insertelement <2 x i32> %402, i32 %299, i64 1, !dbg !58
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !58
  %405 = fsub <2 x float> %404, %401, !dbg !59
  %406 = insertelement <2 x float> poison, float %133, i64 0, !dbg !60
  %407 = shufflevector <2 x float> %406, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %408 = fmul <2 x float> %405, %407, !dbg !60
  %409 = fadd <2 x float> %408, %401, !dbg !61
  %410 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !54
  %411 = insertelement <2 x i32> %410, i32 %238, i64 1, !dbg !54
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !54
  %413 = insertelement <2 x i32> poison, i32 %381, i64 0, !dbg !58
  %414 = insertelement <2 x i32> %413, i32 %300, i64 1, !dbg !58
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !58
  %416 = fsub <2 x float> %415, %412, !dbg !59
  %417 = fmul <2 x float> %416, %407, !dbg !60
  %418 = fadd <2 x float> %417, %412, !dbg !61
  %419 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !54
  %420 = insertelement <2 x i32> %419, i32 %239, i64 1, !dbg !54
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !54
  %422 = insertelement <2 x i32> poison, i32 %382, i64 0, !dbg !58
  %423 = insertelement <2 x i32> %422, i32 %301, i64 1, !dbg !58
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !58
  %425 = fsub <2 x float> %424, %421, !dbg !59
  %426 = fmul <2 x float> %425, %407, !dbg !60
  %427 = fadd <2 x float> %426, %421, !dbg !61
  %428 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !54
  %429 = insertelement <2 x i32> %428, i32 %240, i64 1, !dbg !54
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !54
  %431 = insertelement <2 x i32> poison, i32 %383, i64 0, !dbg !58
  %432 = insertelement <2 x i32> %431, i32 %302, i64 1, !dbg !58
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !58
  %434 = fsub <2 x float> %433, %430, !dbg !59
  %435 = fmul <2 x float> %434, %407, !dbg !60
  %436 = fadd <2 x float> %435, %430, !dbg !61
  %437 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !54
  %438 = insertelement <2 x i32> %437, i32 %252, i64 1, !dbg !54
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !54
  %440 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !58
  %441 = insertelement <2 x i32> %440, i32 %304, i64 1, !dbg !58
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !58
  %443 = fsub <2 x float> %442, %439, !dbg !59
  %444 = insertelement <2 x float> poison, float %138, i64 0, !dbg !60
  %445 = shufflevector <2 x float> %444, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %446 = fmul <2 x float> %443, %445, !dbg !60
  %447 = fadd <2 x float> %446, %439, !dbg !61
  %448 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !54
  %449 = insertelement <2 x i32> %448, i32 %253, i64 1, !dbg !54
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !54
  %451 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !58
  %452 = insertelement <2 x i32> %451, i32 %305, i64 1, !dbg !58
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !58
  %454 = fsub <2 x float> %453, %450, !dbg !59
  %455 = fmul <2 x float> %454, %445, !dbg !60
  %456 = fadd <2 x float> %455, %450, !dbg !61
  %457 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !54
  %458 = insertelement <2 x i32> %457, i32 %254, i64 1, !dbg !54
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !54
  %460 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !58
  %461 = insertelement <2 x i32> %460, i32 %306, i64 1, !dbg !58
  %462 = bitcast <2 x i32> %461 to <2 x float>, !dbg !58
  %463 = fsub <2 x float> %462, %459, !dbg !59
  %464 = fmul <2 x float> %463, %445, !dbg !60
  %465 = fadd <2 x float> %464, %459, !dbg !61
  %466 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !54
  %467 = insertelement <2 x i32> %466, i32 %255, i64 1, !dbg !54
  %468 = bitcast <2 x i32> %467 to <2 x float>, !dbg !54
  %469 = insertelement <2 x i32> poison, i32 %388, i64 0, !dbg !58
  %470 = insertelement <2 x i32> %469, i32 %307, i64 1, !dbg !58
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !58
  %472 = fsub <2 x float> %471, %468, !dbg !59
  %473 = fmul <2 x float> %472, %445, !dbg !60
  %474 = fadd <2 x float> %473, %468, !dbg !61
  %475 = insertelement <2 x i32> poison, i32 %358, i64 0, !dbg !54
  %476 = insertelement <2 x i32> %475, i32 %267, i64 1, !dbg !54
  %477 = bitcast <2 x i32> %476 to <2 x float>, !dbg !54
  %478 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !58
  %479 = insertelement <2 x i32> %478, i32 %309, i64 1, !dbg !58
  %480 = bitcast <2 x i32> %479 to <2 x float>, !dbg !58
  %481 = fsub <2 x float> %480, %477, !dbg !59
  %482 = insertelement <2 x float> poison, float %143, i64 0, !dbg !60
  %483 = shufflevector <2 x float> %482, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %484 = fmul <2 x float> %481, %483, !dbg !60
  %485 = fadd <2 x float> %484, %477, !dbg !61
  %486 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !54
  %487 = insertelement <2 x i32> %486, i32 %268, i64 1, !dbg !54
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !54
  %489 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !58
  %490 = insertelement <2 x i32> %489, i32 %310, i64 1, !dbg !58
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !58
  %492 = fsub <2 x float> %491, %488, !dbg !59
  %493 = fmul <2 x float> %492, %483, !dbg !60
  %494 = fadd <2 x float> %493, %488, !dbg !61
  %495 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !54
  %496 = insertelement <2 x i32> %495, i32 %269, i64 1, !dbg !54
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !54
  %498 = insertelement <2 x i32> poison, i32 %392, i64 0, !dbg !58
  %499 = insertelement <2 x i32> %498, i32 %311, i64 1, !dbg !58
  %500 = bitcast <2 x i32> %499 to <2 x float>, !dbg !58
  %501 = fsub <2 x float> %500, %497, !dbg !59
  %502 = fmul <2 x float> %501, %483, !dbg !60
  %503 = fadd <2 x float> %502, %497, !dbg !61
  %504 = insertelement <2 x i32> poison, i32 %361, i64 0, !dbg !54
  %505 = insertelement <2 x i32> %504, i32 %270, i64 1, !dbg !54
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !54
  %507 = insertelement <2 x i32> poison, i32 %393, i64 0, !dbg !58
  %508 = insertelement <2 x i32> %507, i32 %312, i64 1, !dbg !58
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !58
  %510 = fsub <2 x float> %509, %506, !dbg !59
  %511 = fmul <2 x float> %510, %483, !dbg !60
  %512 = fadd <2 x float> %511, %506, !dbg !61
  %513 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !54
  %514 = insertelement <2 x i32> %513, i32 %282, i64 1, !dbg !54
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !54
  %516 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !58
  %517 = insertelement <2 x i32> %516, i32 %314, i64 1, !dbg !58
  %518 = bitcast <2 x i32> %517 to <2 x float>, !dbg !58
  %519 = fsub <2 x float> %518, %515, !dbg !59
  %520 = insertelement <2 x float> poison, float %148, i64 0, !dbg !60
  %521 = shufflevector <2 x float> %520, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %522 = fmul <2 x float> %519, %521, !dbg !60
  %523 = fadd <2 x float> %522, %515, !dbg !61
  %524 = insertelement <2 x i32> poison, i32 %364, i64 0, !dbg !54
  %525 = insertelement <2 x i32> %524, i32 %283, i64 1, !dbg !54
  %526 = bitcast <2 x i32> %525 to <2 x float>, !dbg !54
  %527 = insertelement <2 x i32> poison, i32 %396, i64 0, !dbg !58
  %528 = insertelement <2 x i32> %527, i32 %315, i64 1, !dbg !58
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !58
  %530 = fsub <2 x float> %529, %526, !dbg !59
  %531 = fmul <2 x float> %530, %521, !dbg !60
  %532 = fadd <2 x float> %531, %526, !dbg !61
  %533 = insertelement <2 x i32> poison, i32 %365, i64 0, !dbg !54
  %534 = insertelement <2 x i32> %533, i32 %284, i64 1, !dbg !54
  %535 = bitcast <2 x i32> %534 to <2 x float>, !dbg !54
  %536 = insertelement <2 x i32> poison, i32 %397, i64 0, !dbg !58
  %537 = insertelement <2 x i32> %536, i32 %316, i64 1, !dbg !58
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !58
  %539 = fsub <2 x float> %538, %535, !dbg !59
  %540 = fmul <2 x float> %539, %521, !dbg !60
  %541 = fadd <2 x float> %540, %535, !dbg !61
  %542 = insertelement <2 x i32> poison, i32 %366, i64 0, !dbg !54
  %543 = insertelement <2 x i32> %542, i32 %285, i64 1, !dbg !54
  %544 = bitcast <2 x i32> %543 to <2 x float>, !dbg !54
  %545 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !58
  %546 = insertelement <2 x i32> %545, i32 %317, i64 1, !dbg !58
  %547 = bitcast <2 x i32> %546 to <2 x float>, !dbg !58
  %548 = fsub <2 x float> %547, %544, !dbg !59
  %549 = fmul <2 x float> %548, %521, !dbg !60
  %550 = fadd <2 x float> %549, %544, !dbg !61
  %551 = extractelement <2 x float> %409, i64 0, !dbg !62
  %552 = extractelement <2 x float> %409, i64 1, !dbg !63
  %553 = fsub float %551, %552, !dbg !62
  %554 = extractelement <2 x float> %418, i64 0, !dbg !62
  %555 = extractelement <2 x float> %418, i64 1, !dbg !63
  %556 = fsub float %554, %555, !dbg !62
  %557 = extractelement <2 x float> %427, i64 0, !dbg !62
  %558 = extractelement <2 x float> %427, i64 1, !dbg !63
  %559 = fsub float %557, %558, !dbg !62
  %560 = extractelement <2 x float> %436, i64 0, !dbg !62
  %561 = extractelement <2 x float> %436, i64 1, !dbg !63
  %562 = fsub float %560, %561, !dbg !62
  %563 = extractelement <2 x float> %447, i64 0, !dbg !62
  %564 = extractelement <2 x float> %447, i64 1, !dbg !63
  %565 = fsub float %563, %564, !dbg !62
  %566 = extractelement <2 x float> %456, i64 0, !dbg !62
  %567 = extractelement <2 x float> %456, i64 1, !dbg !63
  %568 = fsub float %566, %567, !dbg !62
  %569 = extractelement <2 x float> %465, i64 0, !dbg !62
  %570 = extractelement <2 x float> %465, i64 1, !dbg !63
  %571 = fsub float %569, %570, !dbg !62
  %572 = extractelement <2 x float> %474, i64 0, !dbg !62
  %573 = extractelement <2 x float> %474, i64 1, !dbg !63
  %574 = fsub float %572, %573, !dbg !62
  %575 = extractelement <2 x float> %485, i64 0, !dbg !62
  %576 = extractelement <2 x float> %485, i64 1, !dbg !63
  %577 = fsub float %575, %576, !dbg !62
  %578 = extractelement <2 x float> %494, i64 0, !dbg !62
  %579 = extractelement <2 x float> %494, i64 1, !dbg !63
  %580 = fsub float %578, %579, !dbg !62
  %581 = extractelement <2 x float> %503, i64 0, !dbg !62
  %582 = extractelement <2 x float> %503, i64 1, !dbg !63
  %583 = fsub float %581, %582, !dbg !62
  %584 = extractelement <2 x float> %512, i64 0, !dbg !62
  %585 = extractelement <2 x float> %512, i64 1, !dbg !63
  %586 = fsub float %584, %585, !dbg !62
  %587 = extractelement <2 x float> %523, i64 0, !dbg !62
  %588 = extractelement <2 x float> %523, i64 1, !dbg !63
  %589 = fsub float %587, %588, !dbg !62
  %590 = extractelement <2 x float> %532, i64 0, !dbg !62
  %591 = extractelement <2 x float> %532, i64 1, !dbg !63
  %592 = fsub float %590, %591, !dbg !62
  %593 = extractelement <2 x float> %541, i64 0, !dbg !62
  %594 = extractelement <2 x float> %541, i64 1, !dbg !63
  %595 = fsub float %593, %594, !dbg !62
  %596 = extractelement <2 x float> %550, i64 0, !dbg !62
  %597 = extractelement <2 x float> %550, i64 1, !dbg !63
  %598 = fsub float %596, %597, !dbg !62
  %599 = fmul float %553, %177, !dbg !64
  %600 = fmul float %556, %177, !dbg !64
  %601 = fmul float %559, %177, !dbg !64
  %602 = fmul float %562, %177, !dbg !64
  %603 = fmul float %565, %182, !dbg !64
  %604 = fmul float %568, %182, !dbg !64
  %605 = fmul float %571, %182, !dbg !64
  %606 = fmul float %574, %182, !dbg !64
  %607 = fmul float %577, %187, !dbg !64
  %608 = fmul float %580, %187, !dbg !64
  %609 = fmul float %583, %187, !dbg !64
  %610 = fmul float %586, %187, !dbg !64
  %611 = fmul float %589, %192, !dbg !64
  %612 = fmul float %592, %192, !dbg !64
  %613 = fmul float %595, %192, !dbg !64
  %614 = fmul float %598, %192, !dbg !64
  %615 = fadd float %552, %599, !dbg !63
  %616 = fadd float %555, %600, !dbg !63
  %617 = fadd float %558, %601, !dbg !63
  %618 = fadd float %561, %602, !dbg !63
  %619 = fadd float %564, %603, !dbg !63
  %620 = fadd float %567, %604, !dbg !63
  %621 = fadd float %570, %605, !dbg !63
  %622 = fadd float %573, %606, !dbg !63
  %623 = fadd float %576, %607, !dbg !63
  %624 = fadd float %579, %608, !dbg !63
  %625 = fadd float %582, %609, !dbg !63
  %626 = fadd float %585, %610, !dbg !63
  %627 = fadd float %588, %611, !dbg !63
  %628 = fadd float %591, %612, !dbg !63
  %629 = fadd float %594, %613, !dbg !63
  %630 = fadd float %597, %614, !dbg !63
  %631 = fsub float 0.000000e+00, %615, !dbg !65
  %632 = fsub float 0.000000e+00, %616, !dbg !65
  %633 = fsub float 0.000000e+00, %617, !dbg !65
  %634 = fsub float 0.000000e+00, %618, !dbg !65
  %635 = fsub float 0.000000e+00, %619, !dbg !65
  %636 = fsub float 0.000000e+00, %620, !dbg !65
  %637 = fsub float 0.000000e+00, %621, !dbg !65
  %638 = fsub float 0.000000e+00, %622, !dbg !65
  %639 = fsub float 0.000000e+00, %623, !dbg !65
  %640 = fsub float 0.000000e+00, %624, !dbg !65
  %641 = fsub float 0.000000e+00, %625, !dbg !65
  %642 = fsub float 0.000000e+00, %626, !dbg !65
  %643 = fsub float 0.000000e+00, %627, !dbg !65
  %644 = fsub float 0.000000e+00, %628, !dbg !65
  %645 = fsub float 0.000000e+00, %629, !dbg !65
  %646 = fsub float 0.000000e+00, %630, !dbg !65
  %647 = fmul float %631, 0x3FF7154760000000, !dbg !69
  %648 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %647) #2, !dbg !69
  %649 = fmul float %632, 0x3FF7154760000000, !dbg !69
  %650 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %649) #2, !dbg !69
  %651 = fmul float %633, 0x3FF7154760000000, !dbg !69
  %652 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %651) #2, !dbg !69
  %653 = fmul float %634, 0x3FF7154760000000, !dbg !69
  %654 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %653) #2, !dbg !69
  %655 = fmul float %635, 0x3FF7154760000000, !dbg !69
  %656 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %655) #2, !dbg !69
  %657 = fmul float %636, 0x3FF7154760000000, !dbg !69
  %658 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %657) #2, !dbg !69
  %659 = fmul float %637, 0x3FF7154760000000, !dbg !69
  %660 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %659) #2, !dbg !69
  %661 = fmul float %638, 0x3FF7154760000000, !dbg !69
  %662 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %661) #2, !dbg !69
  %663 = fmul float %639, 0x3FF7154760000000, !dbg !69
  %664 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %663) #2, !dbg !69
  %665 = fmul float %640, 0x3FF7154760000000, !dbg !69
  %666 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %665) #2, !dbg !69
  %667 = fmul float %641, 0x3FF7154760000000, !dbg !69
  %668 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %667) #2, !dbg !69
  %669 = fmul float %642, 0x3FF7154760000000, !dbg !69
  %670 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %669) #2, !dbg !69
  %671 = fmul float %643, 0x3FF7154760000000, !dbg !69
  %672 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %671) #2, !dbg !69
  %673 = fmul float %644, 0x3FF7154760000000, !dbg !69
  %674 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %673) #2, !dbg !69
  %675 = fmul float %645, 0x3FF7154760000000, !dbg !69
  %676 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %675) #2, !dbg !69
  %677 = fmul float %646, 0x3FF7154760000000, !dbg !69
  %678 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %677) #2, !dbg !69
  %679 = fadd float %648, 1.000000e+00, !dbg !70
  %680 = fadd float %650, 1.000000e+00, !dbg !70
  %681 = fadd float %652, 1.000000e+00, !dbg !70
  %682 = fadd float %654, 1.000000e+00, !dbg !70
  %683 = fadd float %656, 1.000000e+00, !dbg !70
  %684 = fadd float %658, 1.000000e+00, !dbg !70
  %685 = fadd float %660, 1.000000e+00, !dbg !70
  %686 = fadd float %662, 1.000000e+00, !dbg !70
  %687 = fadd float %664, 1.000000e+00, !dbg !70
  %688 = fadd float %666, 1.000000e+00, !dbg !70
  %689 = fadd float %668, 1.000000e+00, !dbg !70
  %690 = fadd float %670, 1.000000e+00, !dbg !70
  %691 = fadd float %672, 1.000000e+00, !dbg !70
  %692 = fadd float %674, 1.000000e+00, !dbg !70
  %693 = fadd float %676, 1.000000e+00, !dbg !70
  %694 = fadd float %678, 1.000000e+00, !dbg !70
  %695 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %679) #2, !dbg !71
  %696 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %680) #2, !dbg !71
  %697 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %681) #2, !dbg !71
  %698 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %682) #2, !dbg !71
  %699 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %683) #2, !dbg !71
  %700 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %684) #2, !dbg !71
  %701 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %685) #2, !dbg !71
  %702 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %686) #2, !dbg !71
  %703 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %687) #2, !dbg !71
  %704 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %688) #2, !dbg !71
  %705 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %689) #2, !dbg !71
  %706 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %690) #2, !dbg !71
  %707 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %691) #2, !dbg !71
  %708 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %692) #2, !dbg !71
  %709 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %693) #2, !dbg !71
  %710 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %694) #2, !dbg !71
  %711 = getelementptr float, ptr addrspace(1) %7, i64 %234, !dbg !72
  %712 = getelementptr float, ptr addrspace(1) %7, i64 %249, !dbg !72
  %713 = getelementptr float, ptr addrspace(1) %7, i64 %264, !dbg !72
  %714 = getelementptr float, ptr addrspace(1) %7, i64 %279, !dbg !72
  %715 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %711, i1 %210) #2, !dbg !73
  %716 = extractvalue { i32, i32, i32, i32 } %715, 0, !dbg !73
  %717 = extractvalue { i32, i32, i32, i32 } %715, 1, !dbg !73
  %718 = extractvalue { i32, i32, i32, i32 } %715, 2, !dbg !73
  %719 = extractvalue { i32, i32, i32, i32 } %715, 3, !dbg !73
  %720 = bitcast i32 %716 to float, !dbg !73
  %721 = bitcast i32 %717 to float, !dbg !73
  %722 = bitcast i32 %718 to float, !dbg !73
  %723 = bitcast i32 %719 to float, !dbg !73
  %724 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %712, i1 %211) #2, !dbg !73
  %725 = extractvalue { i32, i32, i32, i32 } %724, 0, !dbg !73
  %726 = extractvalue { i32, i32, i32, i32 } %724, 1, !dbg !73
  %727 = extractvalue { i32, i32, i32, i32 } %724, 2, !dbg !73
  %728 = extractvalue { i32, i32, i32, i32 } %724, 3, !dbg !73
  %729 = bitcast i32 %725 to float, !dbg !73
  %730 = bitcast i32 %726 to float, !dbg !73
  %731 = bitcast i32 %727 to float, !dbg !73
  %732 = bitcast i32 %728 to float, !dbg !73
  %733 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %713, i1 %212) #2, !dbg !73
  %734 = extractvalue { i32, i32, i32, i32 } %733, 0, !dbg !73
  %735 = extractvalue { i32, i32, i32, i32 } %733, 1, !dbg !73
  %736 = extractvalue { i32, i32, i32, i32 } %733, 2, !dbg !73
  %737 = extractvalue { i32, i32, i32, i32 } %733, 3, !dbg !73
  %738 = bitcast i32 %734 to float, !dbg !73
  %739 = bitcast i32 %735 to float, !dbg !73
  %740 = bitcast i32 %736 to float, !dbg !73
  %741 = bitcast i32 %737 to float, !dbg !73
  %742 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %714, i1 %213) #2, !dbg !73
  %743 = extractvalue { i32, i32, i32, i32 } %742, 0, !dbg !73
  %744 = extractvalue { i32, i32, i32, i32 } %742, 1, !dbg !73
  %745 = extractvalue { i32, i32, i32, i32 } %742, 2, !dbg !73
  %746 = extractvalue { i32, i32, i32, i32 } %742, 3, !dbg !73
  %747 = bitcast i32 %743 to float, !dbg !73
  %748 = bitcast i32 %744 to float, !dbg !73
  %749 = bitcast i32 %745 to float, !dbg !73
  %750 = bitcast i32 %746 to float, !dbg !73
  %751 = getelementptr float, ptr addrspace(1) %8, i64 %234, !dbg !74
  %752 = getelementptr float, ptr addrspace(1) %8, i64 %249, !dbg !74
  %753 = getelementptr float, ptr addrspace(1) %8, i64 %264, !dbg !74
  %754 = getelementptr float, ptr addrspace(1) %8, i64 %279, !dbg !74
  %755 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %751, i1 %210) #2, !dbg !75
  %756 = extractvalue { i32, i32, i32, i32 } %755, 0, !dbg !75
  %757 = extractvalue { i32, i32, i32, i32 } %755, 1, !dbg !75
  %758 = extractvalue { i32, i32, i32, i32 } %755, 2, !dbg !75
  %759 = extractvalue { i32, i32, i32, i32 } %755, 3, !dbg !75
  %760 = bitcast i32 %756 to float, !dbg !75
  %761 = bitcast i32 %757 to float, !dbg !75
  %762 = bitcast i32 %758 to float, !dbg !75
  %763 = bitcast i32 %759 to float, !dbg !75
  %764 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %752, i1 %211) #2, !dbg !75
  %765 = extractvalue { i32, i32, i32, i32 } %764, 0, !dbg !75
  %766 = extractvalue { i32, i32, i32, i32 } %764, 1, !dbg !75
  %767 = extractvalue { i32, i32, i32, i32 } %764, 2, !dbg !75
  %768 = extractvalue { i32, i32, i32, i32 } %764, 3, !dbg !75
  %769 = bitcast i32 %765 to float, !dbg !75
  %770 = bitcast i32 %766 to float, !dbg !75
  %771 = bitcast i32 %767 to float, !dbg !75
  %772 = bitcast i32 %768 to float, !dbg !75
  %773 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %753, i1 %212) #2, !dbg !75
  %774 = extractvalue { i32, i32, i32, i32 } %773, 0, !dbg !75
  %775 = extractvalue { i32, i32, i32, i32 } %773, 1, !dbg !75
  %776 = extractvalue { i32, i32, i32, i32 } %773, 2, !dbg !75
  %777 = extractvalue { i32, i32, i32, i32 } %773, 3, !dbg !75
  %778 = bitcast i32 %774 to float, !dbg !75
  %779 = bitcast i32 %775 to float, !dbg !75
  %780 = bitcast i32 %776 to float, !dbg !75
  %781 = bitcast i32 %777 to float, !dbg !75
  %782 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %754, i1 %213) #2, !dbg !75
  %783 = extractvalue { i32, i32, i32, i32 } %782, 0, !dbg !75
  %784 = extractvalue { i32, i32, i32, i32 } %782, 1, !dbg !75
  %785 = extractvalue { i32, i32, i32, i32 } %782, 2, !dbg !75
  %786 = extractvalue { i32, i32, i32, i32 } %782, 3, !dbg !75
  %787 = bitcast i32 %783 to float, !dbg !75
  %788 = bitcast i32 %784 to float, !dbg !75
  %789 = bitcast i32 %785 to float, !dbg !75
  %790 = bitcast i32 %786 to float, !dbg !75
  %791 = fsub float 0.000000e+00, %760, !dbg !76
  %792 = fsub float 0.000000e+00, %761, !dbg !76
  %793 = fsub float 0.000000e+00, %762, !dbg !76
  %794 = fsub float 0.000000e+00, %763, !dbg !76
  %795 = fsub float 0.000000e+00, %769, !dbg !76
  %796 = fsub float 0.000000e+00, %770, !dbg !76
  %797 = fsub float 0.000000e+00, %771, !dbg !76
  %798 = fsub float 0.000000e+00, %772, !dbg !76
  %799 = fsub float 0.000000e+00, %778, !dbg !76
  %800 = fsub float 0.000000e+00, %779, !dbg !76
  %801 = fsub float 0.000000e+00, %780, !dbg !76
  %802 = fsub float 0.000000e+00, %781, !dbg !76
  %803 = fsub float 0.000000e+00, %787, !dbg !76
  %804 = fsub float 0.000000e+00, %788, !dbg !76
  %805 = fsub float 0.000000e+00, %789, !dbg !76
  %806 = fsub float 0.000000e+00, %790, !dbg !76
  %807 = fmul float %791, 0x3FF7154760000000, !dbg !78
  %808 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %807) #2, !dbg !78
  %809 = fmul float %792, 0x3FF7154760000000, !dbg !78
  %810 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %809) #2, !dbg !78
  %811 = fmul float %793, 0x3FF7154760000000, !dbg !78
  %812 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %811) #2, !dbg !78
  %813 = fmul float %794, 0x3FF7154760000000, !dbg !78
  %814 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %813) #2, !dbg !78
  %815 = fmul float %795, 0x3FF7154760000000, !dbg !78
  %816 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %815) #2, !dbg !78
  %817 = fmul float %796, 0x3FF7154760000000, !dbg !78
  %818 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %817) #2, !dbg !78
  %819 = fmul float %797, 0x3FF7154760000000, !dbg !78
  %820 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %819) #2, !dbg !78
  %821 = fmul float %798, 0x3FF7154760000000, !dbg !78
  %822 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %821) #2, !dbg !78
  %823 = fmul float %799, 0x3FF7154760000000, !dbg !78
  %824 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %823) #2, !dbg !78
  %825 = fmul float %800, 0x3FF7154760000000, !dbg !78
  %826 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %825) #2, !dbg !78
  %827 = fmul float %801, 0x3FF7154760000000, !dbg !78
  %828 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %827) #2, !dbg !78
  %829 = fmul float %802, 0x3FF7154760000000, !dbg !78
  %830 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %829) #2, !dbg !78
  %831 = fmul float %803, 0x3FF7154760000000, !dbg !78
  %832 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %831) #2, !dbg !78
  %833 = fmul float %804, 0x3FF7154760000000, !dbg !78
  %834 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %833) #2, !dbg !78
  %835 = fmul float %805, 0x3FF7154760000000, !dbg !78
  %836 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %835) #2, !dbg !78
  %837 = fmul float %806, 0x3FF7154760000000, !dbg !78
  %838 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %837) #2, !dbg !78
  %839 = fadd float %808, 1.000000e+00, !dbg !79
  %840 = fadd float %810, 1.000000e+00, !dbg !79
  %841 = fadd float %812, 1.000000e+00, !dbg !79
  %842 = fadd float %814, 1.000000e+00, !dbg !79
  %843 = fadd float %816, 1.000000e+00, !dbg !79
  %844 = fadd float %818, 1.000000e+00, !dbg !79
  %845 = fadd float %820, 1.000000e+00, !dbg !79
  %846 = fadd float %822, 1.000000e+00, !dbg !79
  %847 = fadd float %824, 1.000000e+00, !dbg !79
  %848 = fadd float %826, 1.000000e+00, !dbg !79
  %849 = fadd float %828, 1.000000e+00, !dbg !79
  %850 = fadd float %830, 1.000000e+00, !dbg !79
  %851 = fadd float %832, 1.000000e+00, !dbg !79
  %852 = fadd float %834, 1.000000e+00, !dbg !79
  %853 = fadd float %836, 1.000000e+00, !dbg !79
  %854 = fadd float %838, 1.000000e+00, !dbg !79
  %855 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %839) #2, !dbg !80
  %856 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %840) #2, !dbg !80
  %857 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %841) #2, !dbg !80
  %858 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %842) #2, !dbg !80
  %859 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %843) #2, !dbg !80
  %860 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %844) #2, !dbg !80
  %861 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %845) #2, !dbg !80
  %862 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %846) #2, !dbg !80
  %863 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %847) #2, !dbg !80
  %864 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %848) #2, !dbg !80
  %865 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %849) #2, !dbg !80
  %866 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %850) #2, !dbg !80
  %867 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %851) #2, !dbg !80
  %868 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %852) #2, !dbg !80
  %869 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %853) #2, !dbg !80
  %870 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %854) #2, !dbg !80
  %871 = fmul float %855, %720, !dbg !81
  %872 = fmul float %856, %721, !dbg !81
  %873 = fmul float %857, %722, !dbg !81
  %874 = fmul float %858, %723, !dbg !81
  %875 = fmul float %859, %729, !dbg !81
  %876 = fmul float %860, %730, !dbg !81
  %877 = fmul float %861, %731, !dbg !81
  %878 = fmul float %862, %732, !dbg !81
  %879 = fmul float %863, %738, !dbg !81
  %880 = fmul float %864, %739, !dbg !81
  %881 = fmul float %865, %740, !dbg !81
  %882 = fmul float %866, %741, !dbg !81
  %883 = fmul float %867, %747, !dbg !81
  %884 = fmul float %868, %748, !dbg !81
  %885 = fmul float %869, %749, !dbg !81
  %886 = fmul float %870, %750, !dbg !81
  %887 = getelementptr float, ptr addrspace(1) %7, i64 %287, !dbg !82
  %888 = getelementptr float, ptr addrspace(1) %7, i64 %289, !dbg !82
  %889 = getelementptr float, ptr addrspace(1) %7, i64 %291, !dbg !82
  %890 = getelementptr float, ptr addrspace(1) %7, i64 %293, !dbg !82
  %891 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %887, i1 %210) #2, !dbg !83
  %892 = extractvalue { i32, i32, i32, i32 } %891, 0, !dbg !83
  %893 = extractvalue { i32, i32, i32, i32 } %891, 1, !dbg !83
  %894 = extractvalue { i32, i32, i32, i32 } %891, 2, !dbg !83
  %895 = extractvalue { i32, i32, i32, i32 } %891, 3, !dbg !83
  %896 = bitcast i32 %892 to float, !dbg !83
  %897 = bitcast i32 %893 to float, !dbg !83
  %898 = bitcast i32 %894 to float, !dbg !83
  %899 = bitcast i32 %895 to float, !dbg !83
  %900 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %888, i1 %211) #2, !dbg !83
  %901 = extractvalue { i32, i32, i32, i32 } %900, 0, !dbg !83
  %902 = extractvalue { i32, i32, i32, i32 } %900, 1, !dbg !83
  %903 = extractvalue { i32, i32, i32, i32 } %900, 2, !dbg !83
  %904 = extractvalue { i32, i32, i32, i32 } %900, 3, !dbg !83
  %905 = bitcast i32 %901 to float, !dbg !83
  %906 = bitcast i32 %902 to float, !dbg !83
  %907 = bitcast i32 %903 to float, !dbg !83
  %908 = bitcast i32 %904 to float, !dbg !83
  %909 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %889, i1 %212) #2, !dbg !83
  %910 = extractvalue { i32, i32, i32, i32 } %909, 0, !dbg !83
  %911 = extractvalue { i32, i32, i32, i32 } %909, 1, !dbg !83
  %912 = extractvalue { i32, i32, i32, i32 } %909, 2, !dbg !83
  %913 = extractvalue { i32, i32, i32, i32 } %909, 3, !dbg !83
  %914 = bitcast i32 %910 to float, !dbg !83
  %915 = bitcast i32 %911 to float, !dbg !83
  %916 = bitcast i32 %912 to float, !dbg !83
  %917 = bitcast i32 %913 to float, !dbg !83
  %918 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %890, i1 %213) #2, !dbg !83
  %919 = extractvalue { i32, i32, i32, i32 } %918, 0, !dbg !83
  %920 = extractvalue { i32, i32, i32, i32 } %918, 1, !dbg !83
  %921 = extractvalue { i32, i32, i32, i32 } %918, 2, !dbg !83
  %922 = extractvalue { i32, i32, i32, i32 } %918, 3, !dbg !83
  %923 = bitcast i32 %919 to float, !dbg !83
  %924 = bitcast i32 %920 to float, !dbg !83
  %925 = bitcast i32 %921 to float, !dbg !83
  %926 = bitcast i32 %922 to float, !dbg !83
  %927 = getelementptr float, ptr addrspace(1) %8, i64 %287, !dbg !84
  %928 = getelementptr float, ptr addrspace(1) %8, i64 %289, !dbg !84
  %929 = getelementptr float, ptr addrspace(1) %8, i64 %291, !dbg !84
  %930 = getelementptr float, ptr addrspace(1) %8, i64 %293, !dbg !84
  %931 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %927, i1 %210) #2, !dbg !85
  %932 = extractvalue { i32, i32, i32, i32 } %931, 0, !dbg !85
  %933 = extractvalue { i32, i32, i32, i32 } %931, 1, !dbg !85
  %934 = extractvalue { i32, i32, i32, i32 } %931, 2, !dbg !85
  %935 = extractvalue { i32, i32, i32, i32 } %931, 3, !dbg !85
  %936 = bitcast i32 %932 to float, !dbg !85
  %937 = bitcast i32 %933 to float, !dbg !85
  %938 = bitcast i32 %934 to float, !dbg !85
  %939 = bitcast i32 %935 to float, !dbg !85
  %940 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %928, i1 %211) #2, !dbg !85
  %941 = extractvalue { i32, i32, i32, i32 } %940, 0, !dbg !85
  %942 = extractvalue { i32, i32, i32, i32 } %940, 1, !dbg !85
  %943 = extractvalue { i32, i32, i32, i32 } %940, 2, !dbg !85
  %944 = extractvalue { i32, i32, i32, i32 } %940, 3, !dbg !85
  %945 = bitcast i32 %941 to float, !dbg !85
  %946 = bitcast i32 %942 to float, !dbg !85
  %947 = bitcast i32 %943 to float, !dbg !85
  %948 = bitcast i32 %944 to float, !dbg !85
  %949 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %929, i1 %212) #2, !dbg !85
  %950 = extractvalue { i32, i32, i32, i32 } %949, 0, !dbg !85
  %951 = extractvalue { i32, i32, i32, i32 } %949, 1, !dbg !85
  %952 = extractvalue { i32, i32, i32, i32 } %949, 2, !dbg !85
  %953 = extractvalue { i32, i32, i32, i32 } %949, 3, !dbg !85
  %954 = bitcast i32 %950 to float, !dbg !85
  %955 = bitcast i32 %951 to float, !dbg !85
  %956 = bitcast i32 %952 to float, !dbg !85
  %957 = bitcast i32 %953 to float, !dbg !85
  %958 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %930, i1 %213) #2, !dbg !85
  %959 = extractvalue { i32, i32, i32, i32 } %958, 0, !dbg !85
  %960 = extractvalue { i32, i32, i32, i32 } %958, 1, !dbg !85
  %961 = extractvalue { i32, i32, i32, i32 } %958, 2, !dbg !85
  %962 = extractvalue { i32, i32, i32, i32 } %958, 3, !dbg !85
  %963 = bitcast i32 %959 to float, !dbg !85
  %964 = bitcast i32 %960 to float, !dbg !85
  %965 = bitcast i32 %961 to float, !dbg !85
  %966 = bitcast i32 %962 to float, !dbg !85
  %967 = fsub float 0.000000e+00, %936, !dbg !86
  %968 = fsub float 0.000000e+00, %937, !dbg !86
  %969 = fsub float 0.000000e+00, %938, !dbg !86
  %970 = fsub float 0.000000e+00, %939, !dbg !86
  %971 = fsub float 0.000000e+00, %945, !dbg !86
  %972 = fsub float 0.000000e+00, %946, !dbg !86
  %973 = fsub float 0.000000e+00, %947, !dbg !86
  %974 = fsub float 0.000000e+00, %948, !dbg !86
  %975 = fsub float 0.000000e+00, %954, !dbg !86
  %976 = fsub float 0.000000e+00, %955, !dbg !86
  %977 = fsub float 0.000000e+00, %956, !dbg !86
  %978 = fsub float 0.000000e+00, %957, !dbg !86
  %979 = fsub float 0.000000e+00, %963, !dbg !86
  %980 = fsub float 0.000000e+00, %964, !dbg !86
  %981 = fsub float 0.000000e+00, %965, !dbg !86
  %982 = fsub float 0.000000e+00, %966, !dbg !86
  %983 = fmul float %967, 0x3FF7154760000000, !dbg !88
  %984 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %983) #2, !dbg !88
  %985 = fmul float %968, 0x3FF7154760000000, !dbg !88
  %986 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %985) #2, !dbg !88
  %987 = fmul float %969, 0x3FF7154760000000, !dbg !88
  %988 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %987) #2, !dbg !88
  %989 = fmul float %970, 0x3FF7154760000000, !dbg !88
  %990 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %989) #2, !dbg !88
  %991 = fmul float %971, 0x3FF7154760000000, !dbg !88
  %992 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %991) #2, !dbg !88
  %993 = fmul float %972, 0x3FF7154760000000, !dbg !88
  %994 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %993) #2, !dbg !88
  %995 = fmul float %973, 0x3FF7154760000000, !dbg !88
  %996 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %995) #2, !dbg !88
  %997 = fmul float %974, 0x3FF7154760000000, !dbg !88
  %998 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %997) #2, !dbg !88
  %999 = fmul float %975, 0x3FF7154760000000, !dbg !88
  %1000 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %999) #2, !dbg !88
  %1001 = fmul float %976, 0x3FF7154760000000, !dbg !88
  %1002 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1001) #2, !dbg !88
  %1003 = fmul float %977, 0x3FF7154760000000, !dbg !88
  %1004 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1003) #2, !dbg !88
  %1005 = fmul float %978, 0x3FF7154760000000, !dbg !88
  %1006 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1005) #2, !dbg !88
  %1007 = fmul float %979, 0x3FF7154760000000, !dbg !88
  %1008 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1007) #2, !dbg !88
  %1009 = fmul float %980, 0x3FF7154760000000, !dbg !88
  %1010 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1009) #2, !dbg !88
  %1011 = fmul float %981, 0x3FF7154760000000, !dbg !88
  %1012 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1011) #2, !dbg !88
  %1013 = fmul float %982, 0x3FF7154760000000, !dbg !88
  %1014 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1013) #2, !dbg !88
  %1015 = fadd float %984, 1.000000e+00, !dbg !89
  %1016 = fadd float %986, 1.000000e+00, !dbg !89
  %1017 = fadd float %988, 1.000000e+00, !dbg !89
  %1018 = fadd float %990, 1.000000e+00, !dbg !89
  %1019 = fadd float %992, 1.000000e+00, !dbg !89
  %1020 = fadd float %994, 1.000000e+00, !dbg !89
  %1021 = fadd float %996, 1.000000e+00, !dbg !89
  %1022 = fadd float %998, 1.000000e+00, !dbg !89
  %1023 = fadd float %1000, 1.000000e+00, !dbg !89
  %1024 = fadd float %1002, 1.000000e+00, !dbg !89
  %1025 = fadd float %1004, 1.000000e+00, !dbg !89
  %1026 = fadd float %1006, 1.000000e+00, !dbg !89
  %1027 = fadd float %1008, 1.000000e+00, !dbg !89
  %1028 = fadd float %1010, 1.000000e+00, !dbg !89
  %1029 = fadd float %1012, 1.000000e+00, !dbg !89
  %1030 = fadd float %1014, 1.000000e+00, !dbg !89
  %1031 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1015) #2, !dbg !90
  %1032 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1016) #2, !dbg !90
  %1033 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1017) #2, !dbg !90
  %1034 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1018) #2, !dbg !90
  %1035 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1019) #2, !dbg !90
  %1036 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1020) #2, !dbg !90
  %1037 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1021) #2, !dbg !90
  %1038 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1022) #2, !dbg !90
  %1039 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1023) #2, !dbg !90
  %1040 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1024) #2, !dbg !90
  %1041 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1025) #2, !dbg !90
  %1042 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1026) #2, !dbg !90
  %1043 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1027) #2, !dbg !90
  %1044 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1028) #2, !dbg !90
  %1045 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1029) #2, !dbg !90
  %1046 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1030) #2, !dbg !90
  %1047 = fmul float %1031, %896, !dbg !91
  %1048 = fmul float %1032, %897, !dbg !91
  %1049 = fmul float %1033, %898, !dbg !91
  %1050 = fmul float %1034, %899, !dbg !91
  %1051 = fmul float %1035, %905, !dbg !91
  %1052 = fmul float %1036, %906, !dbg !91
  %1053 = fmul float %1037, %907, !dbg !91
  %1054 = fmul float %1038, %908, !dbg !91
  %1055 = fmul float %1039, %914, !dbg !91
  %1056 = fmul float %1040, %915, !dbg !91
  %1057 = fmul float %1041, %916, !dbg !91
  %1058 = fmul float %1042, %917, !dbg !91
  %1059 = fmul float %1043, %923, !dbg !91
  %1060 = fmul float %1044, %924, !dbg !91
  %1061 = fmul float %1045, %925, !dbg !91
  %1062 = fmul float %1046, %926, !dbg !91
  %1063 = fsub float %1047, %871, !dbg !92
  %1064 = fsub float %1048, %872, !dbg !92
  %1065 = fsub float %1049, %873, !dbg !92
  %1066 = fsub float %1050, %874, !dbg !92
  %1067 = fsub float %1051, %875, !dbg !92
  %1068 = fsub float %1052, %876, !dbg !92
  %1069 = fsub float %1053, %877, !dbg !92
  %1070 = fsub float %1054, %878, !dbg !92
  %1071 = fsub float %1055, %879, !dbg !92
  %1072 = fsub float %1056, %880, !dbg !92
  %1073 = fsub float %1057, %881, !dbg !92
  %1074 = fsub float %1058, %882, !dbg !92
  %1075 = fsub float %1059, %883, !dbg !92
  %1076 = fsub float %1060, %884, !dbg !92
  %1077 = fsub float %1061, %885, !dbg !92
  %1078 = fsub float %1062, %886, !dbg !92
  %1079 = fmul float %1063, %133, !dbg !93
  %1080 = fmul float %1064, %133, !dbg !93
  %1081 = fmul float %1065, %133, !dbg !93
  %1082 = fmul float %1066, %133, !dbg !93
  %1083 = fmul float %1067, %138, !dbg !93
  %1084 = fmul float %1068, %138, !dbg !93
  %1085 = fmul float %1069, %138, !dbg !93
  %1086 = fmul float %1070, %138, !dbg !93
  %1087 = fmul float %1071, %143, !dbg !93
  %1088 = fmul float %1072, %143, !dbg !93
  %1089 = fmul float %1073, %143, !dbg !93
  %1090 = fmul float %1074, %143, !dbg !93
  %1091 = fmul float %1075, %148, !dbg !93
  %1092 = fmul float %1076, %148, !dbg !93
  %1093 = fmul float %1077, %148, !dbg !93
  %1094 = fmul float %1078, %148, !dbg !93
  %1095 = fadd float %871, %1079, !dbg !94
  %1096 = fadd float %872, %1080, !dbg !94
  %1097 = fadd float %873, %1081, !dbg !94
  %1098 = fadd float %874, %1082, !dbg !94
  %1099 = fadd float %875, %1083, !dbg !94
  %1100 = fadd float %876, %1084, !dbg !94
  %1101 = fadd float %877, %1085, !dbg !94
  %1102 = fadd float %878, %1086, !dbg !94
  %1103 = fadd float %879, %1087, !dbg !94
  %1104 = fadd float %880, %1088, !dbg !94
  %1105 = fadd float %881, %1089, !dbg !94
  %1106 = fadd float %882, %1090, !dbg !94
  %1107 = fadd float %883, %1091, !dbg !94
  %1108 = fadd float %884, %1092, !dbg !94
  %1109 = fadd float %885, %1093, !dbg !94
  %1110 = fadd float %886, %1094, !dbg !94
  %1111 = getelementptr float, ptr addrspace(1) %7, i64 %336, !dbg !95
  %1112 = getelementptr float, ptr addrspace(1) %7, i64 %338, !dbg !95
  %1113 = getelementptr float, ptr addrspace(1) %7, i64 %340, !dbg !95
  %1114 = getelementptr float, ptr addrspace(1) %7, i64 %342, !dbg !95
  %1115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1111, i1 %210) #2, !dbg !96
  %1116 = extractvalue { i32, i32, i32, i32 } %1115, 0, !dbg !96
  %1117 = extractvalue { i32, i32, i32, i32 } %1115, 1, !dbg !96
  %1118 = extractvalue { i32, i32, i32, i32 } %1115, 2, !dbg !96
  %1119 = extractvalue { i32, i32, i32, i32 } %1115, 3, !dbg !96
  %1120 = bitcast i32 %1116 to float, !dbg !96
  %1121 = bitcast i32 %1117 to float, !dbg !96
  %1122 = bitcast i32 %1118 to float, !dbg !96
  %1123 = bitcast i32 %1119 to float, !dbg !96
  %1124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1112, i1 %211) #2, !dbg !96
  %1125 = extractvalue { i32, i32, i32, i32 } %1124, 0, !dbg !96
  %1126 = extractvalue { i32, i32, i32, i32 } %1124, 1, !dbg !96
  %1127 = extractvalue { i32, i32, i32, i32 } %1124, 2, !dbg !96
  %1128 = extractvalue { i32, i32, i32, i32 } %1124, 3, !dbg !96
  %1129 = bitcast i32 %1125 to float, !dbg !96
  %1130 = bitcast i32 %1126 to float, !dbg !96
  %1131 = bitcast i32 %1127 to float, !dbg !96
  %1132 = bitcast i32 %1128 to float, !dbg !96
  %1133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1113, i1 %212) #2, !dbg !96
  %1134 = extractvalue { i32, i32, i32, i32 } %1133, 0, !dbg !96
  %1135 = extractvalue { i32, i32, i32, i32 } %1133, 1, !dbg !96
  %1136 = extractvalue { i32, i32, i32, i32 } %1133, 2, !dbg !96
  %1137 = extractvalue { i32, i32, i32, i32 } %1133, 3, !dbg !96
  %1138 = bitcast i32 %1134 to float, !dbg !96
  %1139 = bitcast i32 %1135 to float, !dbg !96
  %1140 = bitcast i32 %1136 to float, !dbg !96
  %1141 = bitcast i32 %1137 to float, !dbg !96
  %1142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1114, i1 %213) #2, !dbg !96
  %1143 = extractvalue { i32, i32, i32, i32 } %1142, 0, !dbg !96
  %1144 = extractvalue { i32, i32, i32, i32 } %1142, 1, !dbg !96
  %1145 = extractvalue { i32, i32, i32, i32 } %1142, 2, !dbg !96
  %1146 = extractvalue { i32, i32, i32, i32 } %1142, 3, !dbg !96
  %1147 = bitcast i32 %1143 to float, !dbg !96
  %1148 = bitcast i32 %1144 to float, !dbg !96
  %1149 = bitcast i32 %1145 to float, !dbg !96
  %1150 = bitcast i32 %1146 to float, !dbg !96
  %1151 = getelementptr float, ptr addrspace(1) %8, i64 %336, !dbg !97
  %1152 = getelementptr float, ptr addrspace(1) %8, i64 %338, !dbg !97
  %1153 = getelementptr float, ptr addrspace(1) %8, i64 %340, !dbg !97
  %1154 = getelementptr float, ptr addrspace(1) %8, i64 %342, !dbg !97
  %1155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1151, i1 %210) #2, !dbg !98
  %1156 = extractvalue { i32, i32, i32, i32 } %1155, 0, !dbg !98
  %1157 = extractvalue { i32, i32, i32, i32 } %1155, 1, !dbg !98
  %1158 = extractvalue { i32, i32, i32, i32 } %1155, 2, !dbg !98
  %1159 = extractvalue { i32, i32, i32, i32 } %1155, 3, !dbg !98
  %1160 = bitcast i32 %1156 to float, !dbg !98
  %1161 = bitcast i32 %1157 to float, !dbg !98
  %1162 = bitcast i32 %1158 to float, !dbg !98
  %1163 = bitcast i32 %1159 to float, !dbg !98
  %1164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1152, i1 %211) #2, !dbg !98
  %1165 = extractvalue { i32, i32, i32, i32 } %1164, 0, !dbg !98
  %1166 = extractvalue { i32, i32, i32, i32 } %1164, 1, !dbg !98
  %1167 = extractvalue { i32, i32, i32, i32 } %1164, 2, !dbg !98
  %1168 = extractvalue { i32, i32, i32, i32 } %1164, 3, !dbg !98
  %1169 = bitcast i32 %1165 to float, !dbg !98
  %1170 = bitcast i32 %1166 to float, !dbg !98
  %1171 = bitcast i32 %1167 to float, !dbg !98
  %1172 = bitcast i32 %1168 to float, !dbg !98
  %1173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1153, i1 %212) #2, !dbg !98
  %1174 = extractvalue { i32, i32, i32, i32 } %1173, 0, !dbg !98
  %1175 = extractvalue { i32, i32, i32, i32 } %1173, 1, !dbg !98
  %1176 = extractvalue { i32, i32, i32, i32 } %1173, 2, !dbg !98
  %1177 = extractvalue { i32, i32, i32, i32 } %1173, 3, !dbg !98
  %1178 = bitcast i32 %1174 to float, !dbg !98
  %1179 = bitcast i32 %1175 to float, !dbg !98
  %1180 = bitcast i32 %1176 to float, !dbg !98
  %1181 = bitcast i32 %1177 to float, !dbg !98
  %1182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1154, i1 %213) #2, !dbg !98
  %1183 = extractvalue { i32, i32, i32, i32 } %1182, 0, !dbg !98
  %1184 = extractvalue { i32, i32, i32, i32 } %1182, 1, !dbg !98
  %1185 = extractvalue { i32, i32, i32, i32 } %1182, 2, !dbg !98
  %1186 = extractvalue { i32, i32, i32, i32 } %1182, 3, !dbg !98
  %1187 = bitcast i32 %1183 to float, !dbg !98
  %1188 = bitcast i32 %1184 to float, !dbg !98
  %1189 = bitcast i32 %1185 to float, !dbg !98
  %1190 = bitcast i32 %1186 to float, !dbg !98
  %1191 = fsub float 0.000000e+00, %1160, !dbg !99
  %1192 = fsub float 0.000000e+00, %1161, !dbg !99
  %1193 = fsub float 0.000000e+00, %1162, !dbg !99
  %1194 = fsub float 0.000000e+00, %1163, !dbg !99
  %1195 = fsub float 0.000000e+00, %1169, !dbg !99
  %1196 = fsub float 0.000000e+00, %1170, !dbg !99
  %1197 = fsub float 0.000000e+00, %1171, !dbg !99
  %1198 = fsub float 0.000000e+00, %1172, !dbg !99
  %1199 = fsub float 0.000000e+00, %1178, !dbg !99
  %1200 = fsub float 0.000000e+00, %1179, !dbg !99
  %1201 = fsub float 0.000000e+00, %1180, !dbg !99
  %1202 = fsub float 0.000000e+00, %1181, !dbg !99
  %1203 = fsub float 0.000000e+00, %1187, !dbg !99
  %1204 = fsub float 0.000000e+00, %1188, !dbg !99
  %1205 = fsub float 0.000000e+00, %1189, !dbg !99
  %1206 = fsub float 0.000000e+00, %1190, !dbg !99
  %1207 = fmul float %1191, 0x3FF7154760000000, !dbg !101
  %1208 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1207) #2, !dbg !101
  %1209 = fmul float %1192, 0x3FF7154760000000, !dbg !101
  %1210 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1209) #2, !dbg !101
  %1211 = fmul float %1193, 0x3FF7154760000000, !dbg !101
  %1212 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1211) #2, !dbg !101
  %1213 = fmul float %1194, 0x3FF7154760000000, !dbg !101
  %1214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1213) #2, !dbg !101
  %1215 = fmul float %1195, 0x3FF7154760000000, !dbg !101
  %1216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1215) #2, !dbg !101
  %1217 = fmul float %1196, 0x3FF7154760000000, !dbg !101
  %1218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1217) #2, !dbg !101
  %1219 = fmul float %1197, 0x3FF7154760000000, !dbg !101
  %1220 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1219) #2, !dbg !101
  %1221 = fmul float %1198, 0x3FF7154760000000, !dbg !101
  %1222 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1221) #2, !dbg !101
  %1223 = fmul float %1199, 0x3FF7154760000000, !dbg !101
  %1224 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1223) #2, !dbg !101
  %1225 = fmul float %1200, 0x3FF7154760000000, !dbg !101
  %1226 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1225) #2, !dbg !101
  %1227 = fmul float %1201, 0x3FF7154760000000, !dbg !101
  %1228 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1227) #2, !dbg !101
  %1229 = fmul float %1202, 0x3FF7154760000000, !dbg !101
  %1230 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1229) #2, !dbg !101
  %1231 = fmul float %1203, 0x3FF7154760000000, !dbg !101
  %1232 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1231) #2, !dbg !101
  %1233 = fmul float %1204, 0x3FF7154760000000, !dbg !101
  %1234 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1233) #2, !dbg !101
  %1235 = fmul float %1205, 0x3FF7154760000000, !dbg !101
  %1236 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1235) #2, !dbg !101
  %1237 = fmul float %1206, 0x3FF7154760000000, !dbg !101
  %1238 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1237) #2, !dbg !101
  %1239 = fadd float %1208, 1.000000e+00, !dbg !102
  %1240 = fadd float %1210, 1.000000e+00, !dbg !102
  %1241 = fadd float %1212, 1.000000e+00, !dbg !102
  %1242 = fadd float %1214, 1.000000e+00, !dbg !102
  %1243 = fadd float %1216, 1.000000e+00, !dbg !102
  %1244 = fadd float %1218, 1.000000e+00, !dbg !102
  %1245 = fadd float %1220, 1.000000e+00, !dbg !102
  %1246 = fadd float %1222, 1.000000e+00, !dbg !102
  %1247 = fadd float %1224, 1.000000e+00, !dbg !102
  %1248 = fadd float %1226, 1.000000e+00, !dbg !102
  %1249 = fadd float %1228, 1.000000e+00, !dbg !102
  %1250 = fadd float %1230, 1.000000e+00, !dbg !102
  %1251 = fadd float %1232, 1.000000e+00, !dbg !102
  %1252 = fadd float %1234, 1.000000e+00, !dbg !102
  %1253 = fadd float %1236, 1.000000e+00, !dbg !102
  %1254 = fadd float %1238, 1.000000e+00, !dbg !102
  %1255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1239) #2, !dbg !103
  %1256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1240) #2, !dbg !103
  %1257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1241) #2, !dbg !103
  %1258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1242) #2, !dbg !103
  %1259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1243) #2, !dbg !103
  %1260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1244) #2, !dbg !103
  %1261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1245) #2, !dbg !103
  %1262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1246) #2, !dbg !103
  %1263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1247) #2, !dbg !103
  %1264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1248) #2, !dbg !103
  %1265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1249) #2, !dbg !103
  %1266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1250) #2, !dbg !103
  %1267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1251) #2, !dbg !103
  %1268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1252) #2, !dbg !103
  %1269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1253) #2, !dbg !103
  %1270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1254) #2, !dbg !103
  %1271 = fmul float %1255, %1120, !dbg !104
  %1272 = fmul float %1256, %1121, !dbg !104
  %1273 = fmul float %1257, %1122, !dbg !104
  %1274 = fmul float %1258, %1123, !dbg !104
  %1275 = fmul float %1259, %1129, !dbg !104
  %1276 = fmul float %1260, %1130, !dbg !104
  %1277 = fmul float %1261, %1131, !dbg !104
  %1278 = fmul float %1262, %1132, !dbg !104
  %1279 = fmul float %1263, %1138, !dbg !104
  %1280 = fmul float %1264, %1139, !dbg !104
  %1281 = fmul float %1265, %1140, !dbg !104
  %1282 = fmul float %1266, %1141, !dbg !104
  %1283 = fmul float %1267, %1147, !dbg !104
  %1284 = fmul float %1268, %1148, !dbg !104
  %1285 = fmul float %1269, %1149, !dbg !104
  %1286 = fmul float %1270, %1150, !dbg !104
  %1287 = getelementptr float, ptr addrspace(1) %7, i64 %368, !dbg !105
  %1288 = getelementptr float, ptr addrspace(1) %7, i64 %370, !dbg !105
  %1289 = getelementptr float, ptr addrspace(1) %7, i64 %372, !dbg !105
  %1290 = getelementptr float, ptr addrspace(1) %7, i64 %374, !dbg !105
  %1291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1287, i1 %210) #2, !dbg !106
  %1292 = extractvalue { i32, i32, i32, i32 } %1291, 0, !dbg !106
  %1293 = extractvalue { i32, i32, i32, i32 } %1291, 1, !dbg !106
  %1294 = extractvalue { i32, i32, i32, i32 } %1291, 2, !dbg !106
  %1295 = extractvalue { i32, i32, i32, i32 } %1291, 3, !dbg !106
  %1296 = bitcast i32 %1292 to float, !dbg !106
  %1297 = bitcast i32 %1293 to float, !dbg !106
  %1298 = bitcast i32 %1294 to float, !dbg !106
  %1299 = bitcast i32 %1295 to float, !dbg !106
  %1300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1288, i1 %211) #2, !dbg !106
  %1301 = extractvalue { i32, i32, i32, i32 } %1300, 0, !dbg !106
  %1302 = extractvalue { i32, i32, i32, i32 } %1300, 1, !dbg !106
  %1303 = extractvalue { i32, i32, i32, i32 } %1300, 2, !dbg !106
  %1304 = extractvalue { i32, i32, i32, i32 } %1300, 3, !dbg !106
  %1305 = bitcast i32 %1301 to float, !dbg !106
  %1306 = bitcast i32 %1302 to float, !dbg !106
  %1307 = bitcast i32 %1303 to float, !dbg !106
  %1308 = bitcast i32 %1304 to float, !dbg !106
  %1309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1289, i1 %212) #2, !dbg !106
  %1310 = extractvalue { i32, i32, i32, i32 } %1309, 0, !dbg !106
  %1311 = extractvalue { i32, i32, i32, i32 } %1309, 1, !dbg !106
  %1312 = extractvalue { i32, i32, i32, i32 } %1309, 2, !dbg !106
  %1313 = extractvalue { i32, i32, i32, i32 } %1309, 3, !dbg !106
  %1314 = bitcast i32 %1310 to float, !dbg !106
  %1315 = bitcast i32 %1311 to float, !dbg !106
  %1316 = bitcast i32 %1312 to float, !dbg !106
  %1317 = bitcast i32 %1313 to float, !dbg !106
  %1318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1290, i1 %213) #2, !dbg !106
  %1319 = extractvalue { i32, i32, i32, i32 } %1318, 0, !dbg !106
  %1320 = extractvalue { i32, i32, i32, i32 } %1318, 1, !dbg !106
  %1321 = extractvalue { i32, i32, i32, i32 } %1318, 2, !dbg !106
  %1322 = extractvalue { i32, i32, i32, i32 } %1318, 3, !dbg !106
  %1323 = bitcast i32 %1319 to float, !dbg !106
  %1324 = bitcast i32 %1320 to float, !dbg !106
  %1325 = bitcast i32 %1321 to float, !dbg !106
  %1326 = bitcast i32 %1322 to float, !dbg !106
  %1327 = getelementptr float, ptr addrspace(1) %8, i64 %368, !dbg !107
  %1328 = getelementptr float, ptr addrspace(1) %8, i64 %370, !dbg !107
  %1329 = getelementptr float, ptr addrspace(1) %8, i64 %372, !dbg !107
  %1330 = getelementptr float, ptr addrspace(1) %8, i64 %374, !dbg !107
  %1331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1327, i1 %210) #2, !dbg !108
  %1332 = extractvalue { i32, i32, i32, i32 } %1331, 0, !dbg !108
  %1333 = extractvalue { i32, i32, i32, i32 } %1331, 1, !dbg !108
  %1334 = extractvalue { i32, i32, i32, i32 } %1331, 2, !dbg !108
  %1335 = extractvalue { i32, i32, i32, i32 } %1331, 3, !dbg !108
  %1336 = bitcast i32 %1332 to float, !dbg !108
  %1337 = bitcast i32 %1333 to float, !dbg !108
  %1338 = bitcast i32 %1334 to float, !dbg !108
  %1339 = bitcast i32 %1335 to float, !dbg !108
  %1340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1328, i1 %211) #2, !dbg !108
  %1341 = extractvalue { i32, i32, i32, i32 } %1340, 0, !dbg !108
  %1342 = extractvalue { i32, i32, i32, i32 } %1340, 1, !dbg !108
  %1343 = extractvalue { i32, i32, i32, i32 } %1340, 2, !dbg !108
  %1344 = extractvalue { i32, i32, i32, i32 } %1340, 3, !dbg !108
  %1345 = bitcast i32 %1341 to float, !dbg !108
  %1346 = bitcast i32 %1342 to float, !dbg !108
  %1347 = bitcast i32 %1343 to float, !dbg !108
  %1348 = bitcast i32 %1344 to float, !dbg !108
  %1349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1329, i1 %212) #2, !dbg !108
  %1350 = extractvalue { i32, i32, i32, i32 } %1349, 0, !dbg !108
  %1351 = extractvalue { i32, i32, i32, i32 } %1349, 1, !dbg !108
  %1352 = extractvalue { i32, i32, i32, i32 } %1349, 2, !dbg !108
  %1353 = extractvalue { i32, i32, i32, i32 } %1349, 3, !dbg !108
  %1354 = bitcast i32 %1350 to float, !dbg !108
  %1355 = bitcast i32 %1351 to float, !dbg !108
  %1356 = bitcast i32 %1352 to float, !dbg !108
  %1357 = bitcast i32 %1353 to float, !dbg !108
  %1358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1330, i1 %213) #2, !dbg !108
  %1359 = extractvalue { i32, i32, i32, i32 } %1358, 0, !dbg !108
  %1360 = extractvalue { i32, i32, i32, i32 } %1358, 1, !dbg !108
  %1361 = extractvalue { i32, i32, i32, i32 } %1358, 2, !dbg !108
  %1362 = extractvalue { i32, i32, i32, i32 } %1358, 3, !dbg !108
  %1363 = bitcast i32 %1359 to float, !dbg !108
  %1364 = bitcast i32 %1360 to float, !dbg !108
  %1365 = bitcast i32 %1361 to float, !dbg !108
  %1366 = bitcast i32 %1362 to float, !dbg !108
  %1367 = fsub float 0.000000e+00, %1336, !dbg !109
  %1368 = fsub float 0.000000e+00, %1337, !dbg !109
  %1369 = fsub float 0.000000e+00, %1338, !dbg !109
  %1370 = fsub float 0.000000e+00, %1339, !dbg !109
  %1371 = fsub float 0.000000e+00, %1345, !dbg !109
  %1372 = fsub float 0.000000e+00, %1346, !dbg !109
  %1373 = fsub float 0.000000e+00, %1347, !dbg !109
  %1374 = fsub float 0.000000e+00, %1348, !dbg !109
  %1375 = fsub float 0.000000e+00, %1354, !dbg !109
  %1376 = fsub float 0.000000e+00, %1355, !dbg !109
  %1377 = fsub float 0.000000e+00, %1356, !dbg !109
  %1378 = fsub float 0.000000e+00, %1357, !dbg !109
  %1379 = fsub float 0.000000e+00, %1363, !dbg !109
  %1380 = fsub float 0.000000e+00, %1364, !dbg !109
  %1381 = fsub float 0.000000e+00, %1365, !dbg !109
  %1382 = fsub float 0.000000e+00, %1366, !dbg !109
  %1383 = fmul float %1367, 0x3FF7154760000000, !dbg !111
  %1384 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1383) #2, !dbg !111
  %1385 = fmul float %1368, 0x3FF7154760000000, !dbg !111
  %1386 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1385) #2, !dbg !111
  %1387 = fmul float %1369, 0x3FF7154760000000, !dbg !111
  %1388 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1387) #2, !dbg !111
  %1389 = fmul float %1370, 0x3FF7154760000000, !dbg !111
  %1390 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1389) #2, !dbg !111
  %1391 = fmul float %1371, 0x3FF7154760000000, !dbg !111
  %1392 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1391) #2, !dbg !111
  %1393 = fmul float %1372, 0x3FF7154760000000, !dbg !111
  %1394 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1393) #2, !dbg !111
  %1395 = fmul float %1373, 0x3FF7154760000000, !dbg !111
  %1396 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1395) #2, !dbg !111
  %1397 = fmul float %1374, 0x3FF7154760000000, !dbg !111
  %1398 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1397) #2, !dbg !111
  %1399 = fmul float %1375, 0x3FF7154760000000, !dbg !111
  %1400 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1399) #2, !dbg !111
  %1401 = fmul float %1376, 0x3FF7154760000000, !dbg !111
  %1402 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1401) #2, !dbg !111
  %1403 = fmul float %1377, 0x3FF7154760000000, !dbg !111
  %1404 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1403) #2, !dbg !111
  %1405 = fmul float %1378, 0x3FF7154760000000, !dbg !111
  %1406 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1405) #2, !dbg !111
  %1407 = fmul float %1379, 0x3FF7154760000000, !dbg !111
  %1408 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1407) #2, !dbg !111
  %1409 = fmul float %1380, 0x3FF7154760000000, !dbg !111
  %1410 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1409) #2, !dbg !111
  %1411 = fmul float %1381, 0x3FF7154760000000, !dbg !111
  %1412 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1411) #2, !dbg !111
  %1413 = fmul float %1382, 0x3FF7154760000000, !dbg !111
  %1414 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1413) #2, !dbg !111
  %1415 = fadd float %1384, 1.000000e+00, !dbg !112
  %1416 = fadd float %1386, 1.000000e+00, !dbg !112
  %1417 = fadd float %1388, 1.000000e+00, !dbg !112
  %1418 = fadd float %1390, 1.000000e+00, !dbg !112
  %1419 = fadd float %1392, 1.000000e+00, !dbg !112
  %1420 = fadd float %1394, 1.000000e+00, !dbg !112
  %1421 = fadd float %1396, 1.000000e+00, !dbg !112
  %1422 = fadd float %1398, 1.000000e+00, !dbg !112
  %1423 = fadd float %1400, 1.000000e+00, !dbg !112
  %1424 = fadd float %1402, 1.000000e+00, !dbg !112
  %1425 = fadd float %1404, 1.000000e+00, !dbg !112
  %1426 = fadd float %1406, 1.000000e+00, !dbg !112
  %1427 = fadd float %1408, 1.000000e+00, !dbg !112
  %1428 = fadd float %1410, 1.000000e+00, !dbg !112
  %1429 = fadd float %1412, 1.000000e+00, !dbg !112
  %1430 = fadd float %1414, 1.000000e+00, !dbg !112
  %1431 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1415) #2, !dbg !113
  %1432 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1416) #2, !dbg !113
  %1433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1417) #2, !dbg !113
  %1434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1418) #2, !dbg !113
  %1435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1419) #2, !dbg !113
  %1436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1420) #2, !dbg !113
  %1437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1421) #2, !dbg !113
  %1438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1422) #2, !dbg !113
  %1439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1423) #2, !dbg !113
  %1440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1424) #2, !dbg !113
  %1441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1425) #2, !dbg !113
  %1442 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1426) #2, !dbg !113
  %1443 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1427) #2, !dbg !113
  %1444 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1428) #2, !dbg !113
  %1445 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1429) #2, !dbg !113
  %1446 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1430) #2, !dbg !113
  %1447 = fmul float %1431, %1296, !dbg !114
  %1448 = fmul float %1432, %1297, !dbg !114
  %1449 = fmul float %1433, %1298, !dbg !114
  %1450 = fmul float %1434, %1299, !dbg !114
  %1451 = fmul float %1435, %1305, !dbg !114
  %1452 = fmul float %1436, %1306, !dbg !114
  %1453 = fmul float %1437, %1307, !dbg !114
  %1454 = fmul float %1438, %1308, !dbg !114
  %1455 = fmul float %1439, %1314, !dbg !114
  %1456 = fmul float %1440, %1315, !dbg !114
  %1457 = fmul float %1441, %1316, !dbg !114
  %1458 = fmul float %1442, %1317, !dbg !114
  %1459 = fmul float %1443, %1323, !dbg !114
  %1460 = fmul float %1444, %1324, !dbg !114
  %1461 = fmul float %1445, %1325, !dbg !114
  %1462 = fmul float %1446, %1326, !dbg !114
  %1463 = fsub float %1447, %1271, !dbg !115
  %1464 = fsub float %1448, %1272, !dbg !115
  %1465 = fsub float %1449, %1273, !dbg !115
  %1466 = fsub float %1450, %1274, !dbg !115
  %1467 = fsub float %1451, %1275, !dbg !115
  %1468 = fsub float %1452, %1276, !dbg !115
  %1469 = fsub float %1453, %1277, !dbg !115
  %1470 = fsub float %1454, %1278, !dbg !115
  %1471 = fsub float %1455, %1279, !dbg !115
  %1472 = fsub float %1456, %1280, !dbg !115
  %1473 = fsub float %1457, %1281, !dbg !115
  %1474 = fsub float %1458, %1282, !dbg !115
  %1475 = fsub float %1459, %1283, !dbg !115
  %1476 = fsub float %1460, %1284, !dbg !115
  %1477 = fsub float %1461, %1285, !dbg !115
  %1478 = fsub float %1462, %1286, !dbg !115
  %1479 = fmul float %1463, %133, !dbg !116
  %1480 = fmul float %1464, %133, !dbg !116
  %1481 = fmul float %1465, %133, !dbg !116
  %1482 = fmul float %1466, %133, !dbg !116
  %1483 = fmul float %1467, %138, !dbg !116
  %1484 = fmul float %1468, %138, !dbg !116
  %1485 = fmul float %1469, %138, !dbg !116
  %1486 = fmul float %1470, %138, !dbg !116
  %1487 = fmul float %1471, %143, !dbg !116
  %1488 = fmul float %1472, %143, !dbg !116
  %1489 = fmul float %1473, %143, !dbg !116
  %1490 = fmul float %1474, %143, !dbg !116
  %1491 = fmul float %1475, %148, !dbg !116
  %1492 = fmul float %1476, %148, !dbg !116
  %1493 = fmul float %1477, %148, !dbg !116
  %1494 = fmul float %1478, %148, !dbg !116
  %1495 = fadd float %1271, %1479, !dbg !117
  %1496 = fadd float %1272, %1480, !dbg !117
  %1497 = fadd float %1273, %1481, !dbg !117
  %1498 = fadd float %1274, %1482, !dbg !117
  %1499 = fadd float %1275, %1483, !dbg !117
  %1500 = fadd float %1276, %1484, !dbg !117
  %1501 = fadd float %1277, %1485, !dbg !117
  %1502 = fadd float %1278, %1486, !dbg !117
  %1503 = fadd float %1279, %1487, !dbg !117
  %1504 = fadd float %1280, %1488, !dbg !117
  %1505 = fadd float %1281, %1489, !dbg !117
  %1506 = fadd float %1282, %1490, !dbg !117
  %1507 = fadd float %1283, %1491, !dbg !117
  %1508 = fadd float %1284, %1492, !dbg !117
  %1509 = fadd float %1285, %1493, !dbg !117
  %1510 = fadd float %1286, %1494, !dbg !117
  %1511 = fsub float %1495, %1095, !dbg !118
  %1512 = fsub float %1496, %1096, !dbg !118
  %1513 = fsub float %1497, %1097, !dbg !118
  %1514 = fsub float %1498, %1098, !dbg !118
  %1515 = fsub float %1499, %1099, !dbg !118
  %1516 = fsub float %1500, %1100, !dbg !118
  %1517 = fsub float %1501, %1101, !dbg !118
  %1518 = fsub float %1502, %1102, !dbg !118
  %1519 = fsub float %1503, %1103, !dbg !118
  %1520 = fsub float %1504, %1104, !dbg !118
  %1521 = fsub float %1505, %1105, !dbg !118
  %1522 = fsub float %1506, %1106, !dbg !118
  %1523 = fsub float %1507, %1107, !dbg !118
  %1524 = fsub float %1508, %1108, !dbg !118
  %1525 = fsub float %1509, %1109, !dbg !118
  %1526 = fsub float %1510, %1110, !dbg !118
  %1527 = shl i32 %37, 7, !dbg !119
  %1528 = shl i32 %38, 7, !dbg !119
  %1529 = shl i32 %39, 7, !dbg !119
  %1530 = shl i32 %40, 7, !dbg !119
  %1531 = shl i32 %55, 15, !dbg !120
  %1532 = add i32 %1531, %.decomposed8, !dbg !121
  %1533 = add i32 %1532, %1527, !dbg !122
  %1534 = add i32 %1532, %1528, !dbg !122
  %1535 = add i32 %1532, %1529, !dbg !122
  %1536 = add i32 %1532, %1530, !dbg !122
  %1537 = sext i32 %1533 to i64, !dbg !123
  %1538 = getelementptr float, ptr addrspace(1) %9, i64 %1537, !dbg !123
  %1539 = sext i32 %1534 to i64, !dbg !123
  %1540 = getelementptr float, ptr addrspace(1) %9, i64 %1539, !dbg !123
  %1541 = sext i32 %1535 to i64, !dbg !123
  %1542 = getelementptr float, ptr addrspace(1) %9, i64 %1541, !dbg !123
  %1543 = sext i32 %1536 to i64, !dbg !123
  %1544 = getelementptr float, ptr addrspace(1) %9, i64 %1543, !dbg !123
  %1545 = bitcast float %695 to i32, !dbg !124
  %1546 = bitcast float %696 to i32, !dbg !124
  %1547 = bitcast float %697 to i32, !dbg !124
  %1548 = bitcast float %698 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1545, i32 %1546, i32 %1547, i32 %1548, ptr addrspace(1) %1538, i1 %210) #2, !dbg !124
  %1549 = bitcast float %699 to i32, !dbg !124
  %1550 = bitcast float %700 to i32, !dbg !124
  %1551 = bitcast float %701 to i32, !dbg !124
  %1552 = bitcast float %702 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1549, i32 %1550, i32 %1551, i32 %1552, ptr addrspace(1) %1540, i1 %211) #2, !dbg !124
  %1553 = bitcast float %703 to i32, !dbg !124
  %1554 = bitcast float %704 to i32, !dbg !124
  %1555 = bitcast float %705 to i32, !dbg !124
  %1556 = bitcast float %706 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1553, i32 %1554, i32 %1555, i32 %1556, ptr addrspace(1) %1542, i1 %212) #2, !dbg !124
  %1557 = bitcast float %707 to i32, !dbg !124
  %1558 = bitcast float %708 to i32, !dbg !124
  %1559 = bitcast float %709 to i32, !dbg !124
  %1560 = bitcast float %710 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1557, i32 %1558, i32 %1559, i32 %1560, ptr addrspace(1) %1544, i1 %213) #2, !dbg !124
  %1561 = shl i32 %26, 8, !dbg !125
  %1562 = shl i32 %27, 8, !dbg !125
  %1563 = shl i32 %28, 8, !dbg !125
  %1564 = shl i32 %29, 8, !dbg !125
  %1565 = add i32 %41, %1561, !dbg !126
  %1566 = add i32 %41, %1562, !dbg !126
  %1567 = add i32 %41, %1563, !dbg !126
  %1568 = add i32 %41, %1564, !dbg !126
  %1569 = sext i32 %1565 to i64, !dbg !127
  %1570 = getelementptr float, ptr addrspace(1) %10, i64 %1569, !dbg !127
  %1571 = sext i32 %1566 to i64, !dbg !127
  %1572 = getelementptr float, ptr addrspace(1) %10, i64 %1571, !dbg !127
  %1573 = sext i32 %1567 to i64, !dbg !127
  %1574 = getelementptr float, ptr addrspace(1) %10, i64 %1573, !dbg !127
  %1575 = sext i32 %1568 to i64, !dbg !127
  %1576 = getelementptr float, ptr addrspace(1) %10, i64 %1575, !dbg !127
  %1577 = shl i32 %17, 8, !dbg !128
  %1578 = and i32 %1577, 3840, !dbg !128
  %1579 = or disjoint i32 %1578, %21, !dbg !128
  %1580 = and i32 %18, 1020, !dbg !128
  %1581 = lshr exact i32 %1578, 4, !dbg !128
  %1582 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %1581, !dbg !128
  %1583 = getelementptr float, ptr addrspace(3) %1582, i32 %1579, !dbg !128
  %1584 = bitcast float %1095 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1583, <1 x i32> %1584, i1 true) #2, !dbg !128
  %1585 = or disjoint i32 %1579, 64, !dbg !128
  %1586 = lshr i32 %1585, 6, !dbg !128
  %1587 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1586, !dbg !128
  %1588 = getelementptr float, ptr addrspace(3) %1587, i32 %1585, !dbg !128
  %1589 = bitcast float %1096 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1588, <1 x i32> %1589, i1 true) #2, !dbg !128
  %1590 = or disjoint i32 %1579, 128, !dbg !128
  %1591 = lshr i32 %1590, 6, !dbg !128
  %1592 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1591, !dbg !128
  %1593 = getelementptr float, ptr addrspace(3) %1592, i32 %1590, !dbg !128
  %1594 = bitcast float %1097 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1593, <1 x i32> %1594, i1 true) #2, !dbg !128
  %1595 = or disjoint i32 %1579, 192, !dbg !128
  %1596 = lshr i32 %1595, 6, !dbg !128
  %1597 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1596, !dbg !128
  %1598 = getelementptr float, ptr addrspace(3) %1597, i32 %1595, !dbg !128
  %1599 = bitcast float %1098 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1598, <1 x i32> %1599, i1 true) #2, !dbg !128
  %1600 = or disjoint i32 %1579, 16, !dbg !128
  %1601 = getelementptr float, ptr addrspace(3) %1582, i32 %1600, !dbg !128
  %1602 = bitcast float %1099 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1601, <1 x i32> %1602, i1 true) #2, !dbg !128
  %1603 = or disjoint i32 %1579, 80, !dbg !128
  %1604 = lshr i32 %1603, 6, !dbg !128
  %1605 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1604, !dbg !128
  %1606 = getelementptr float, ptr addrspace(3) %1605, i32 %1603, !dbg !128
  %1607 = bitcast float %1100 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1606, <1 x i32> %1607, i1 true) #2, !dbg !128
  %1608 = or disjoint i32 %1579, 144, !dbg !128
  %1609 = lshr i32 %1608, 6, !dbg !128
  %1610 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1609, !dbg !128
  %1611 = getelementptr float, ptr addrspace(3) %1610, i32 %1608, !dbg !128
  %1612 = bitcast float %1101 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1611, <1 x i32> %1612, i1 true) #2, !dbg !128
  %1613 = or disjoint i32 %1579, 208, !dbg !128
  %1614 = lshr i32 %1613, 6, !dbg !128
  %1615 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1614, !dbg !128
  %1616 = getelementptr float, ptr addrspace(3) %1615, i32 %1613, !dbg !128
  %1617 = bitcast float %1102 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1616, <1 x i32> %1617, i1 true) #2, !dbg !128
  %1618 = or disjoint i32 %1579, 32, !dbg !128
  %1619 = getelementptr float, ptr addrspace(3) %1582, i32 %1618, !dbg !128
  %1620 = bitcast float %1103 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1619, <1 x i32> %1620, i1 true) #2, !dbg !128
  %1621 = or disjoint i32 %1579, 96, !dbg !128
  %1622 = lshr i32 %1621, 6, !dbg !128
  %1623 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1622, !dbg !128
  %1624 = getelementptr float, ptr addrspace(3) %1623, i32 %1621, !dbg !128
  %1625 = bitcast float %1104 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1624, <1 x i32> %1625, i1 true) #2, !dbg !128
  %1626 = or disjoint i32 %1579, 160, !dbg !128
  %1627 = lshr i32 %1626, 6, !dbg !128
  %1628 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1627, !dbg !128
  %1629 = getelementptr float, ptr addrspace(3) %1628, i32 %1626, !dbg !128
  %1630 = bitcast float %1105 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1629, <1 x i32> %1630, i1 true) #2, !dbg !128
  %1631 = or disjoint i32 %1579, 224, !dbg !128
  %1632 = lshr i32 %1631, 6, !dbg !128
  %1633 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1632, !dbg !128
  %1634 = getelementptr float, ptr addrspace(3) %1633, i32 %1631, !dbg !128
  %1635 = bitcast float %1106 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1634, <1 x i32> %1635, i1 true) #2, !dbg !128
  %1636 = or disjoint i32 %1579, 48, !dbg !128
  %1637 = getelementptr float, ptr addrspace(3) %1582, i32 %1636, !dbg !128
  %1638 = bitcast float %1107 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1637, <1 x i32> %1638, i1 true) #2, !dbg !128
  %1639 = or disjoint i32 %1579, 112, !dbg !128
  %1640 = lshr i32 %1639, 6, !dbg !128
  %1641 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1640, !dbg !128
  %1642 = getelementptr float, ptr addrspace(3) %1641, i32 %1639, !dbg !128
  %1643 = bitcast float %1108 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1642, <1 x i32> %1643, i1 true) #2, !dbg !128
  %1644 = or disjoint i32 %1579, 176, !dbg !128
  %1645 = lshr i32 %1644, 6, !dbg !128
  %1646 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1645, !dbg !128
  %1647 = getelementptr float, ptr addrspace(3) %1646, i32 %1644, !dbg !128
  %1648 = bitcast float %1109 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1647, <1 x i32> %1648, i1 true) #2, !dbg !128
  %1649 = or disjoint i32 %1579, 240, !dbg !128
  %1650 = lshr i32 %1649, 6, !dbg !128
  %1651 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1650, !dbg !128
  %1652 = getelementptr float, ptr addrspace(3) %1651, i32 %1649, !dbg !128
  %1653 = bitcast float %1110 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1652, <1 x i32> %1653, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %1654 = lshr i32 %1580, 6, !dbg !128
  %1655 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1654, !dbg !128
  %1656 = getelementptr inbounds float, ptr addrspace(3) %1655, i32 %1580, !dbg !128
  %1657 = load i32, ptr addrspace(3) %1656, align 4, !dbg !128
  %1658 = or disjoint i32 %1580, 1, !dbg !128
  %1659 = getelementptr inbounds float, ptr addrspace(3) %1655, i32 %1658, !dbg !128
  %1660 = load i32, ptr addrspace(3) %1659, align 4, !dbg !128
  %1661 = or disjoint i32 %1580, 2, !dbg !128
  %1662 = getelementptr inbounds float, ptr addrspace(3) %1655, i32 %1661, !dbg !128
  %1663 = load i32, ptr addrspace(3) %1662, align 4, !dbg !128
  %1664 = or disjoint i32 %1580, 3, !dbg !128
  %1665 = getelementptr inbounds float, ptr addrspace(3) %1655, i32 %1664, !dbg !128
  %1666 = load i32, ptr addrspace(3) %1665, align 4, !dbg !128
  %1667 = or disjoint i32 %1580, 1024, !dbg !128
  %1668 = lshr i32 %1667, 6, !dbg !128
  %1669 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1668, !dbg !128
  %1670 = getelementptr inbounds float, ptr addrspace(3) %1669, i32 %1667, !dbg !128
  %1671 = load i32, ptr addrspace(3) %1670, align 4, !dbg !128
  %1672 = or disjoint i32 %1580, 1025, !dbg !128
  %1673 = lshr i32 %1672, 6, !dbg !128
  %1674 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1673, !dbg !128
  %1675 = getelementptr inbounds float, ptr addrspace(3) %1674, i32 %1672, !dbg !128
  %1676 = load i32, ptr addrspace(3) %1675, align 4, !dbg !128
  %1677 = or disjoint i32 %1580, 1026, !dbg !128
  %1678 = lshr i32 %1677, 6, !dbg !128
  %1679 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1678, !dbg !128
  %1680 = getelementptr inbounds float, ptr addrspace(3) %1679, i32 %1677, !dbg !128
  %1681 = load i32, ptr addrspace(3) %1680, align 4, !dbg !128
  %1682 = or disjoint i32 %1580, 1027, !dbg !128
  %1683 = lshr i32 %1682, 6, !dbg !128
  %1684 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1683, !dbg !128
  %1685 = getelementptr inbounds float, ptr addrspace(3) %1684, i32 %1682, !dbg !128
  %1686 = load i32, ptr addrspace(3) %1685, align 4, !dbg !128
  %1687 = or disjoint i32 %1580, 2048, !dbg !128
  %1688 = lshr i32 %1687, 6, !dbg !128
  %1689 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1688, !dbg !128
  %1690 = getelementptr inbounds float, ptr addrspace(3) %1689, i32 %1687, !dbg !128
  %1691 = load i32, ptr addrspace(3) %1690, align 4, !dbg !128
  %1692 = or disjoint i32 %1580, 2049, !dbg !128
  %1693 = lshr i32 %1692, 6, !dbg !128
  %1694 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1693, !dbg !128
  %1695 = getelementptr inbounds float, ptr addrspace(3) %1694, i32 %1692, !dbg !128
  %1696 = load i32, ptr addrspace(3) %1695, align 4, !dbg !128
  %1697 = or disjoint i32 %1580, 2050, !dbg !128
  %1698 = lshr i32 %1697, 6, !dbg !128
  %1699 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1698, !dbg !128
  %1700 = getelementptr inbounds float, ptr addrspace(3) %1699, i32 %1697, !dbg !128
  %1701 = load i32, ptr addrspace(3) %1700, align 4, !dbg !128
  %1702 = or disjoint i32 %1580, 2051, !dbg !128
  %1703 = lshr i32 %1702, 6, !dbg !128
  %1704 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1703, !dbg !128
  %1705 = getelementptr inbounds float, ptr addrspace(3) %1704, i32 %1702, !dbg !128
  %1706 = load i32, ptr addrspace(3) %1705, align 4, !dbg !128
  %1707 = or disjoint i32 %1580, 3072, !dbg !128
  %1708 = lshr i32 %1707, 6, !dbg !128
  %1709 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1708, !dbg !128
  %1710 = getelementptr inbounds float, ptr addrspace(3) %1709, i32 %1707, !dbg !128
  %1711 = load i32, ptr addrspace(3) %1710, align 4, !dbg !128
  %1712 = or disjoint i32 %1580, 3073, !dbg !128
  %1713 = lshr i32 %1712, 6, !dbg !128
  %1714 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1713, !dbg !128
  %1715 = getelementptr inbounds float, ptr addrspace(3) %1714, i32 %1712, !dbg !128
  %1716 = load i32, ptr addrspace(3) %1715, align 4, !dbg !128
  %1717 = or disjoint i32 %1580, 3074, !dbg !128
  %1718 = lshr i32 %1717, 6, !dbg !128
  %1719 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1718, !dbg !128
  %1720 = getelementptr inbounds float, ptr addrspace(3) %1719, i32 %1717, !dbg !128
  %1721 = load i32, ptr addrspace(3) %1720, align 4, !dbg !128
  %1722 = or disjoint i32 %1580, 3075, !dbg !128
  %1723 = lshr i32 %1722, 6, !dbg !128
  %1724 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1723, !dbg !128
  %1725 = getelementptr inbounds float, ptr addrspace(3) %1724, i32 %1722, !dbg !128
  %1726 = load i32, ptr addrspace(3) %1725, align 4, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1657, i32 %1660, i32 %1663, i32 %1666, ptr addrspace(1) %1570, i1 %214) #2, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1671, i32 %1676, i32 %1681, i32 %1686, ptr addrspace(1) %1572, i1 %215) #2, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1691, i32 %1696, i32 %1701, i32 %1706, ptr addrspace(1) %1574, i1 %216) #2, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1711, i32 %1716, i32 %1721, i32 %1726, ptr addrspace(1) %1576, i1 %217) #2, !dbg !128
  %1727 = getelementptr float, ptr addrspace(1) %11, i64 %1569, !dbg !129
  %1728 = getelementptr float, ptr addrspace(1) %11, i64 %1571, !dbg !129
  %1729 = getelementptr float, ptr addrspace(1) %11, i64 %1573, !dbg !129
  %1730 = getelementptr float, ptr addrspace(1) %11, i64 %1575, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %1731 = bitcast float %1511 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1583, <1 x i32> %1731, i1 true) #2, !dbg !130
  %1732 = bitcast float %1512 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1588, <1 x i32> %1732, i1 true) #2, !dbg !130
  %1733 = bitcast float %1513 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1593, <1 x i32> %1733, i1 true) #2, !dbg !130
  %1734 = bitcast float %1514 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1598, <1 x i32> %1734, i1 true) #2, !dbg !130
  %1735 = bitcast float %1515 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1601, <1 x i32> %1735, i1 true) #2, !dbg !130
  %1736 = bitcast float %1516 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1606, <1 x i32> %1736, i1 true) #2, !dbg !130
  %1737 = bitcast float %1517 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1611, <1 x i32> %1737, i1 true) #2, !dbg !130
  %1738 = bitcast float %1518 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1616, <1 x i32> %1738, i1 true) #2, !dbg !130
  %1739 = bitcast float %1519 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1619, <1 x i32> %1739, i1 true) #2, !dbg !130
  %1740 = bitcast float %1520 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1624, <1 x i32> %1740, i1 true) #2, !dbg !130
  %1741 = bitcast float %1521 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1629, <1 x i32> %1741, i1 true) #2, !dbg !130
  %1742 = bitcast float %1522 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1634, <1 x i32> %1742, i1 true) #2, !dbg !130
  %1743 = bitcast float %1523 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1637, <1 x i32> %1743, i1 true) #2, !dbg !130
  %1744 = bitcast float %1524 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1642, <1 x i32> %1744, i1 true) #2, !dbg !130
  %1745 = bitcast float %1525 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1647, <1 x i32> %1745, i1 true) #2, !dbg !130
  %1746 = bitcast float %1526 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1652, <1 x i32> %1746, i1 true) #2, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %1747 = load i32, ptr addrspace(3) %1656, align 4, !dbg !130
  %1748 = load i32, ptr addrspace(3) %1659, align 4, !dbg !130
  %1749 = load i32, ptr addrspace(3) %1662, align 4, !dbg !130
  %1750 = load i32, ptr addrspace(3) %1665, align 4, !dbg !130
  %1751 = load i32, ptr addrspace(3) %1670, align 4, !dbg !130
  %1752 = load i32, ptr addrspace(3) %1675, align 4, !dbg !130
  %1753 = load i32, ptr addrspace(3) %1680, align 4, !dbg !130
  %1754 = load i32, ptr addrspace(3) %1685, align 4, !dbg !130
  %1755 = load i32, ptr addrspace(3) %1690, align 4, !dbg !130
  %1756 = load i32, ptr addrspace(3) %1695, align 4, !dbg !130
  %1757 = load i32, ptr addrspace(3) %1700, align 4, !dbg !130
  %1758 = load i32, ptr addrspace(3) %1705, align 4, !dbg !130
  %1759 = load i32, ptr addrspace(3) %1710, align 4, !dbg !130
  %1760 = load i32, ptr addrspace(3) %1715, align 4, !dbg !130
  %1761 = load i32, ptr addrspace(3) %1720, align 4, !dbg !130
  %1762 = load i32, ptr addrspace(3) %1725, align 4, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1747, i32 %1748, i32 %1749, i32 %1750, ptr addrspace(1) %1727, i1 %214) #2, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1751, i32 %1752, i32 %1753, i32 %1754, ptr addrspace(1) %1728, i1 %215) #2, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1755, i32 %1756, i32 %1757, i32 %1758, ptr addrspace(1) %1729, i1 %216) #2, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1759, i32 %1760, i32 %1761, i32 %1762, ptr addrspace(1) %1730, i1 %217) #2, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cowu6awx4txqdncme5fmkrfif3cbgoe7yju33stjebtbmsh3bixa.py", directory: "inductor_cache/ow")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7", linkageName: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 46, column: 32, scope: !7)
!36 = !DILocation(line: 47, column: 39, scope: !7)
!37 = !DILocation(line: 47, column: 62, scope: !7)
!38 = !DILocation(line: 47, column: 75, scope: !7)
!39 = !DILocation(line: 47, column: 57, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 43, column: 32, scope: !7)
!42 = !DILocation(line: 47, column: 50, scope: !7)
!43 = !DILocation(line: 47, column: 46, scope: !7)
!44 = !DILocation(line: 51, column: 59, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !7)
!46 = !DILocation(line: 47, column: 67, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 69, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 58, column: 51, scope: !7)
!51 = !DILocation(line: 58, column: 47, scope: !7)
!52 = !DILocation(line: 58, column: 59, scope: !7)
!53 = !DILocation(line: 58, column: 31, scope: !7)
!54 = !DILocation(line: 58, column: 69, scope: !7)
!55 = !DILocation(line: 59, column: 48, scope: !7)
!56 = !DILocation(line: 59, column: 60, scope: !7)
!57 = !DILocation(line: 59, column: 31, scope: !7)
!58 = !DILocation(line: 59, column: 70, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 66, column: 23, scope: !7)
!69 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 67, column: 31, scope: !7)
!73 = !DILocation(line: 67, column: 68, scope: !7)
!74 = !DILocation(line: 68, column: 31, scope: !7)
!75 = !DILocation(line: 68, column: 68, scope: !7)
!76 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !77)
!77 = !DILocation(line: 69, column: 23, scope: !7)
!78 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !77)
!79 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !77)
!80 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !77)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 71, column: 31, scope: !7)
!83 = !DILocation(line: 71, column: 69, scope: !7)
!84 = !DILocation(line: 72, column: 31, scope: !7)
!85 = !DILocation(line: 72, column: 69, scope: !7)
!86 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !87)
!87 = !DILocation(line: 73, column: 23, scope: !7)
!88 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !87)
!89 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !87)
!90 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !87)
!91 = !DILocation(line: 74, column: 20, scope: !7)
!92 = !DILocation(line: 75, column: 20, scope: !7)
!93 = !DILocation(line: 76, column: 20, scope: !7)
!94 = !DILocation(line: 77, column: 20, scope: !7)
!95 = !DILocation(line: 78, column: 31, scope: !7)
!96 = !DILocation(line: 78, column: 69, scope: !7)
!97 = !DILocation(line: 79, column: 31, scope: !7)
!98 = !DILocation(line: 79, column: 69, scope: !7)
!99 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 23, scope: !7)
!101 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !100)
!102 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !100)
!103 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !100)
!104 = !DILocation(line: 81, column: 20, scope: !7)
!105 = !DILocation(line: 82, column: 31, scope: !7)
!106 = !DILocation(line: 82, column: 70, scope: !7)
!107 = !DILocation(line: 83, column: 31, scope: !7)
!108 = !DILocation(line: 83, column: 70, scope: !7)
!109 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !110)
!110 = !DILocation(line: 84, column: 23, scope: !7)
!111 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !110)
!112 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !110)
!113 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !110)
!114 = !DILocation(line: 85, column: 20, scope: !7)
!115 = !DILocation(line: 86, column: 20, scope: !7)
!116 = !DILocation(line: 87, column: 20, scope: !7)
!117 = !DILocation(line: 88, column: 20, scope: !7)
!118 = !DILocation(line: 89, column: 20, scope: !7)
!119 = !DILocation(line: 90, column: 34, scope: !7)
!120 = !DILocation(line: 90, column: 45, scope: !7)
!121 = !DILocation(line: 90, column: 30, scope: !7)
!122 = !DILocation(line: 90, column: 39, scope: !7)
!123 = !DILocation(line: 90, column: 25, scope: !7)
!124 = !DILocation(line: 90, column: 57, scope: !7)
!125 = !DILocation(line: 91, column: 34, scope: !7)
!126 = !DILocation(line: 91, column: 30, scope: !7)
!127 = !DILocation(line: 91, column: 25, scope: !7)
!128 = !DILocation(line: 91, column: 46, scope: !7)
!129 = !DILocation(line: 92, column: 25, scope: !7)
!130 = !DILocation(line: 92, column: 46, scope: !7)
!131 = !DILocation(line: 92, column: 4, scope: !7)
