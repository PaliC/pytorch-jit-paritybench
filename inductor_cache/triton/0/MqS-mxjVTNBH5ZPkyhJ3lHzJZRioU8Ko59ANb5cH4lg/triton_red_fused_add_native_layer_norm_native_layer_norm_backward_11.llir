; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.begin:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 4, !dbg !12
  %14 = and i32 %12, 60, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %14, !dbg !13
  %17 = icmp slt i32 %15, 1024, !dbg !14
  %18 = icmp slt i32 %16, 1024, !dbg !14
  %19 = lshr i32 %9, 4, !dbg !15
  %20 = and i32 %19, 7, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 256, !dbg !16
  %22 = mul i32 %21, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = mul i32 %21, 24576, !dbg !18
  %24 = mul i32 %15, 96, !dbg !19
  %25 = add i32 %23, %.decomposed
  %26 = shl i32 %9, 5
  %27 = and i32 %26, 480
  %.reass34 = or disjoint i32 %27, %20
  %28 = and i32 %12, 508
  %29 = lshr exact i32 %27, 1
  %30 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29
  %31 = getelementptr inbounds float, ptr addrspace(3) %30, i32 %.reass34
  %32 = or disjoint i32 %.reass34, 8
  %33 = lshr i32 %32, 1
  %34 = and i32 %33, 244
  %35 = getelementptr float, ptr addrspace(3) @global_smem, i32 %34
  %36 = getelementptr float, ptr addrspace(3) %35, i32 %32
  %37 = or disjoint i32 %.reass34, 16
  %38 = lshr i32 %37, 1
  %39 = and i32 %38, 248
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i32 %39
  %41 = getelementptr float, ptr addrspace(3) %40, i32 %37
  %42 = or disjoint i32 %.reass34, 24
  %43 = lshr i32 %42, 1
  %44 = and i32 %43, 252
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i32 %44
  %46 = getelementptr float, ptr addrspace(3) %45, i32 %42
  %47 = lshr exact i32 %12, 1
  %48 = and i32 %47, 252
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %28
  %51 = zext nneg i32 %13 to i64, !dbg !20
  %52 = getelementptr inbounds i8, ptr addrspace(3) %50, i32 4
  %53 = getelementptr inbounds i8, ptr addrspace(3) %50, i32 8
  %54 = getelementptr inbounds i8, ptr addrspace(3) %50, i32 12
  %55 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !21
  %56 = shufflevector <4 x i1> %55, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !21
  %57 = shl nuw nsw i32 %20, 8, !dbg !22
  %58 = add i32 %25, %57, !dbg !22
  %59 = sext i32 %58 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %66 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %66, i1 true) #5, !dbg !24
  %67 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %67, i1 true) #5, !dbg !24
  %68 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %68, i1 true) #5, !dbg !24
  %69 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %69, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %70 = or disjoint i32 %24, %13, !dbg !25
  %71 = sext i32 %70 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !27
  %74 = load <4 x float>, ptr addrspace(3) %50, align 16, !dbg !24
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %80 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !28
  %81 = insertelement <4 x i32> %80, i32 %77, i64 1, !dbg !28
  %82 = insertelement <4 x i32> %81, i32 %78, i64 2, !dbg !28
  %83 = insertelement <4 x i32> %82, i32 %79, i64 3, !dbg !28
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !28
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !29
  %90 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !29
  %91 = insertelement <4 x i32> %90, i32 %87, i64 1, !dbg !29
  %92 = insertelement <4 x i32> %91, i32 %88, i64 2, !dbg !29
  %93 = insertelement <4 x i32> %92, i32 %89, i64 3, !dbg !29
  %94 = bitcast <4 x i32> %93 to <4 x float>, !dbg !29
  %95 = fadd <4 x float> %84, %94, !dbg !30
  %96 = fadd <4 x float> %74, %95, !dbg !31
  %97 = select <4 x i1> %56, <4 x float> %96, <4 x float> zeroinitializer, !dbg !21
  %98 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !32
  %99 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !32
  %100 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !32
  %101 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !32
  br label %._crit_edge, !dbg !20

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 8, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %102 = phi float [ %98, %.peel.begin ], [ %196, %._crit_edge ]
  %103 = phi float [ %99, %.peel.begin ], [ %197, %._crit_edge ]
  %104 = phi float [ %100, %.peel.begin ], [ %198, %._crit_edge ]
  %105 = phi float [ %101, %.peel.begin ], [ %199, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %110 = phi <4 x float> [ %97, %.peel.begin ], [ %191, %._crit_edge ]
  %111 = or disjoint i64 %indvars.iv, %51, !dbg !33
  %112 = trunc i64 %indvars.iv to i32, !dbg !22
  %.tr = or disjoint i32 %20, %112, !dbg !22
  %113 = shl i32 %.tr, 8, !dbg !22
  %114 = add i32 %25, %113, !dbg !22
  %115 = sext i32 %114 to i64, !dbg !23
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !23
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %122 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %122, i1 true) #5, !dbg !24
  %123 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %123, i1 true) #5, !dbg !24
  %124 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %124, i1 true) #5, !dbg !24
  %125 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %125, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %126 = trunc nuw nsw i64 %111 to i32, !dbg !25
  %127 = add i32 %24, %126, !dbg !25
  %128 = sext i32 %127 to i64, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !26
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !27
  %131 = load <4 x float>, ptr addrspace(3) %50, align 16, !dbg !24
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !28
  %135 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !28
  %137 = insertelement <4 x i32> %135, i32 %136, i64 1, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !28
  %139 = insertelement <4 x i32> %137, i32 %138, i64 2, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !28
  %141 = insertelement <4 x i32> %139, i32 %140, i64 3, !dbg !28
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !28
  %143 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !29
  %144 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !29
  %145 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !29
  %146 = insertelement <4 x i32> %144, i32 %145, i64 1, !dbg !29
  %147 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !29
  %148 = insertelement <4 x i32> %146, i32 %147, i64 2, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !29
  %150 = insertelement <4 x i32> %148, i32 %149, i64 3, !dbg !29
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !29
  %152 = fadd <4 x float> %142, %151, !dbg !30
  %153 = fadd <4 x float> %131, %152, !dbg !31
  %154 = fsub <4 x float> %153, %110, !dbg !34
  %155 = extractelement <4 x float> %154, i64 0, !dbg !34
  %156 = fsub <4 x float> %153, %110, !dbg !34
  %157 = extractelement <4 x float> %156, i64 1, !dbg !34
  %158 = fsub <4 x float> %153, %110, !dbg !34
  %159 = extractelement <4 x float> %158, i64 2, !dbg !34
  %160 = fsub <4 x float> %153, %110, !dbg !34
  %161 = extractelement <4 x float> %160, i64 3, !dbg !34
  %162 = fadd float %102, 1.000000e+00, !dbg !38
  %163 = fadd float %103, 1.000000e+00, !dbg !38
  %164 = fadd float %104, 1.000000e+00, !dbg !38
  %165 = fadd float %105, 1.000000e+00, !dbg !38
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %162) #5, !dbg !39
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %163) #5, !dbg !39
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %164) #5, !dbg !39
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float %165) #5, !dbg !39
  %170 = insertelement <4 x float> poison, float %166, i64 0, !dbg !40
  %171 = insertelement <4 x float> %170, float %167, i64 1, !dbg !40
  %172 = insertelement <4 x float> %171, float %168, i64 2, !dbg !40
  %173 = insertelement <4 x float> %172, float %169, i64 3, !dbg !40
  %174 = fadd <4 x float> %110, %173, !dbg !40
  %175 = fsub <4 x float> %153, %174, !dbg !41
  %176 = fsub <4 x float> %153, %174, !dbg !41
  %177 = fsub <4 x float> %153, %174, !dbg !41
  %178 = fsub <4 x float> %153, %174, !dbg !41
  %179 = fmul <4 x float> %154, %175, !dbg !42
  %180 = extractelement <4 x float> %179, i64 0, !dbg !42
  %181 = fmul <4 x float> %156, %176, !dbg !42
  %182 = extractelement <4 x float> %181, i64 1, !dbg !42
  %183 = fmul <4 x float> %158, %177, !dbg !42
  %184 = extractelement <4 x float> %183, i64 2, !dbg !42
  %185 = fmul <4 x float> %160, %178, !dbg !42
  %186 = extractelement <4 x float> %185, i64 3, !dbg !42
  %187 = fadd float %106, %180, !dbg !43
  %188 = fadd float %107, %182, !dbg !43
  %189 = fadd float %108, %184, !dbg !43
  %190 = fadd float %109, %186, !dbg !43
  %191 = select <4 x i1> %56, <4 x float> %174, <4 x float> %110, !dbg !21
  %192 = select i1 %17, float %187, float %106, !dbg !44
  %193 = select i1 %17, float %188, float %107, !dbg !44
  %194 = select i1 %17, float %189, float %108, !dbg !44
  %195 = select i1 %17, float %190, float %109, !dbg !44
  %196 = select i1 %17, float %162, float %102, !dbg !32
  %197 = select i1 %17, float %163, float %103, !dbg !32
  %198 = select i1 %17, float %164, float %104, !dbg !32
  %199 = select i1 %17, float %165, float %105, !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !20
  %200 = icmp samesign ult i64 %indvars.iv, 88, !dbg !20
  br i1 %200, label %._crit_edge, label %__nv_rsqrtf.exit, !dbg !20, !llvm.loop !45

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %201 = and i32 %9, 63, !dbg !12
  %202 = extractelement <4 x float> %191, i64 0, !dbg !47
  %203 = extractelement <4 x float> %191, i64 1, !dbg !47
  %204 = fsub float %203, %202, !dbg !47
  %205 = fadd float %196, %197, !dbg !50
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !51
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %205) #5, !dbg !52
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !53
  %209 = fmul float %204, %208, !dbg !54
  %210 = fadd float %202, %209, !dbg !55
  %211 = fadd float %192, %193, !dbg !56
  %212 = fmul float %204, %204, !dbg !57
  %213 = fmul float %212, %196, !dbg !58
  %214 = fmul float %213, %208, !dbg !59
  %215 = fadd float %211, %214, !dbg !60
  %216 = extractelement <4 x float> %191, i64 2, !dbg !47
  %217 = fsub float %216, %210, !dbg !47
  %218 = fadd float %198, %205, !dbg !50
  %219 = fcmp oeq float %218, 0.000000e+00, !dbg !51
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %218) #5, !dbg !52
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !53
  %222 = fmul float %221, %217, !dbg !54
  %223 = fadd float %210, %222, !dbg !55
  %224 = fadd float %194, %215, !dbg !56
  %225 = fmul float %217, %217, !dbg !57
  %226 = fmul float %205, %225, !dbg !58
  %227 = fmul float %221, %226, !dbg !59
  %228 = fadd float %224, %227, !dbg !60
  %229 = extractelement <4 x float> %191, i64 3, !dbg !47
  %230 = fsub float %229, %223, !dbg !47
  %231 = fadd float %199, %218, !dbg !50
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !51
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %231) #5, !dbg !52
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !53
  %235 = fmul float %234, %230, !dbg !54
  %236 = fadd float %223, %235, !dbg !55
  %237 = fadd float %195, %228, !dbg !56
  %238 = fmul float %230, %230, !dbg !57
  %239 = fmul float %218, %238, !dbg !58
  %240 = fmul float %234, %239, !dbg !59
  %241 = fadd float %237, %240, !dbg !60
  %242 = bitcast float %236 to i32, !dbg !61
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !61
  %244 = bitcast i32 %243 to float, !dbg !61
  %245 = bitcast float %241 to i32, !dbg !61
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 1, i32 31), !dbg !61
  %247 = bitcast i32 %246 to float, !dbg !61
  %248 = bitcast float %231 to i32, !dbg !61
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 1, i32 31), !dbg !61
  %250 = bitcast i32 %249 to float, !dbg !61
  %251 = fsub float %244, %236, !dbg !47
  %252 = fadd float %231, %250, !dbg !50
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !51
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %252) #5, !dbg !52
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !53
  %256 = fmul float %255, %251, !dbg !54
  %257 = fadd float %236, %256, !dbg !55
  %258 = fadd float %241, %247, !dbg !56
  %259 = fmul float %251, %251, !dbg !57
  %260 = fmul float %231, %259, !dbg !58
  %261 = fmul float %255, %260, !dbg !59
  %262 = fadd float %258, %261, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !62
  %264 = bitcast float %262 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !62
  %266 = load float, ptr addrspace(3) %265, align 4, !dbg !62
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float 9.600000e+01) #5, !dbg !63
  %268 = fadd float %267, 0x3EB0C6F7A0000000, !dbg !64
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i25 = icmp eq i32 %272, 0, !dbg !65
  br i1 %.not.i25, label %275, label %273, !dbg !65

273:                                              ; preds = %__nv_rsqrtf.exit
  %274 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !65
  br label %__nv_rsqrtf.exit27, !dbg !65

275:                                              ; preds = %__nv_rsqrtf.exit
  %276 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !65
  br label %__nv_rsqrtf.exit27, !dbg !65

__nv_rsqrtf.exit27:                               ; preds = %273, %275
  %.0.i26 = phi float [ %274, %273 ], [ %276, %275 ], !dbg !65
  br label %277, !dbg !66

277:                                              ; preds = %__nv_rsqrtf.exit27, %277
  %indvars.iv49 = phi i64 [ 0, %__nv_rsqrtf.exit27 ], [ %indvars.iv.next50, %277 ]
  %278 = or disjoint i64 %indvars.iv49, %51, !dbg !67
  %279 = trunc i64 %indvars.iv49 to i32, !dbg !68
  %.tr73 = or disjoint i32 %20, %279, !dbg !68
  %280 = shl i32 %.tr73, 8, !dbg !68
  %281 = add i32 %25, %280, !dbg !68
  %282 = sext i32 %281 to i64, !dbg !69
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !69
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %283, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !70
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !70
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !70
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !70
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %289 = insertelement <1 x i32> poison, i32 %285, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %289, i1 true) #5, !dbg !70
  %290 = insertelement <1 x i32> poison, i32 %286, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %290, i1 true) #5, !dbg !70
  %291 = insertelement <1 x i32> poison, i32 %287, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %291, i1 true) #5, !dbg !70
  %292 = insertelement <1 x i32> poison, i32 %288, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %292, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %293 = load float, ptr addrspace(3) %50, align 16, !dbg !70
  %294 = load float, ptr addrspace(3) %52, align 4, !dbg !70
  %295 = load float, ptr addrspace(3) %53, align 8, !dbg !70
  %296 = load float, ptr addrspace(3) %54, align 4, !dbg !70
  %297 = trunc nuw nsw i64 %278 to i32, !dbg !71
  %298 = add i32 %24, %297, !dbg !71
  %299 = sext i32 %298 to i64, !dbg !72
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %299, !dbg !72
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !73
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !73
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !73
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !73
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !73
  %306 = bitcast i32 %302 to float, !dbg !73
  %307 = bitcast i32 %303 to float, !dbg !73
  %308 = bitcast i32 %304 to float, !dbg !73
  %309 = bitcast i32 %305 to float, !dbg !73
  %310 = getelementptr float, ptr addrspace(1) %2, i64 %278, !dbg !74
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %310, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !75
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !75
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !75
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !75
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !75
  %316 = bitcast i32 %312 to float, !dbg !75
  %317 = bitcast i32 %313 to float, !dbg !75
  %318 = bitcast i32 %314 to float, !dbg !75
  %319 = bitcast i32 %315 to float, !dbg !75
  %320 = fadd float %306, %316, !dbg !76
  %321 = fadd float %307, %317, !dbg !76
  %322 = fadd float %308, %318, !dbg !76
  %323 = fadd float %309, %319, !dbg !76
  %324 = fadd float %293, %320, !dbg !77
  %325 = fadd float %294, %321, !dbg !77
  %326 = fadd float %295, %322, !dbg !77
  %327 = fadd float %296, %323, !dbg !77
  %328 = fsub float %324, %257, !dbg !78
  %329 = fsub float %325, %257, !dbg !78
  %330 = fsub float %326, %257, !dbg !78
  %331 = fsub float %327, %257, !dbg !78
  %332 = fmul float %.0.i26, %328, !dbg !79
  %333 = fmul float %.0.i26, %329, !dbg !79
  %334 = fmul float %.0.i26, %330, !dbg !79
  %335 = fmul float %.0.i26, %331, !dbg !79
  %336 = getelementptr float, ptr addrspace(1) %3, i64 %299, !dbg !80
  %337 = bitcast float %332 to i32, !dbg !81
  %338 = bitcast float %333 to i32, !dbg !81
  %339 = bitcast float %334 to i32, !dbg !81
  %340 = bitcast float %335 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %337, i32 %338, i32 %339, i32 %340, ptr addrspace(1) %336, i1 %17) #5, !dbg !81
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 8, !dbg !66
  %341 = icmp samesign ult i64 %indvars.iv49, 88, !dbg !66
  br i1 %341, label %277, label %342, !dbg !66

342:                                              ; preds = %277
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float 9.600000e+01) #5, !dbg !82
  %344 = fadd float %343, 0x3EB0C6F7A0000000, !dbg !83
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i28 = icmp eq i32 %345, 0, !dbg !84
  br i1 %.not.i28, label %348, label %346, !dbg !84

346:                                              ; preds = %342
  %347 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %344), !dbg !84
  br label %__nv_rsqrtf.exit30, !dbg !84

348:                                              ; preds = %342
  %349 = tail call float @llvm.nvvm.rsqrt.approx.f(float %344), !dbg !84
  br label %__nv_rsqrtf.exit30, !dbg !84

__nv_rsqrtf.exit30:                               ; preds = %346, %348
  %.0.i29 = phi float [ %347, %346 ], [ %349, %348 ], !dbg !84
  %350 = or disjoint i32 %8, %201, !dbg !13
  %351 = icmp slt i32 %350, 1024, !dbg !14
  %352 = fmul float %.0.i29, 0x3F85555560000000, !dbg !62
  %353 = sext i32 %350 to i64, !dbg !85
  %354 = getelementptr float, ptr addrspace(1) %4, i64 %353, !dbg !85
  %355 = and i32 %9, 64, !dbg !86
  %356 = icmp eq i32 %355, 0, !dbg !86
  %357 = bitcast float %352 to i32, !dbg !86
  %358 = and i1 %356, %351, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %354, i1 %358) #5, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_11", linkageName: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 54, scope: !7)
!19 = !DILocation(line: 37, column: 42, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 45, column: 60, scope: !7)
!22 = !DILocation(line: 36, column: 48, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 37, column: 34, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 47, scope: !7)
!29 = !DILocation(line: 38, column: 39, scope: !7)
!30 = !DILocation(line: 39, column: 22, scope: !7)
!31 = !DILocation(line: 40, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 64, scope: !7)
!33 = !DILocation(line: 33, column: 27, scope: !7)
!34 = !DILocation(line: 183, column: 24, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 43, column: 51, scope: !7)
!38 = !DILocation(line: 184, column: 30, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 185, column: 34, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 185, column: 26, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 186, column: 39, scope: !35, inlinedAt: !37)
!42 = !DILocation(line: 186, column: 31, scope: !35, inlinedAt: !37)
!43 = !DILocation(line: 186, column: 22, scope: !35, inlinedAt: !37)
!44 = !DILocation(line: 46, column: 56, scope: !7)
!45 = distinct !{!45, !46}
!46 = !{!"llvm.loop.peeled.count", i32 1}
!47 = !DILocation(line: 192, column: 21, scope: !48, inlinedAt: !49)
!48 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!49 = !DILocation(line: 49, column: 41, scope: !7)
!50 = !DILocation(line: 193, column: 28, scope: !48, inlinedAt: !49)
!51 = !DILocation(line: 194, column: 39, scope: !48, inlinedAt: !49)
!52 = !DILocation(line: 194, column: 60, scope: !48, inlinedAt: !49)
!53 = !DILocation(line: 194, column: 49, scope: !48, inlinedAt: !49)
!54 = !DILocation(line: 196, column: 25, scope: !48, inlinedAt: !49)
!55 = !DILocation(line: 196, column: 17, scope: !48, inlinedAt: !49)
!56 = !DILocation(line: 197, column: 15, scope: !48, inlinedAt: !49)
!57 = !DILocation(line: 197, column: 30, scope: !48, inlinedAt: !49)
!58 = !DILocation(line: 197, column: 38, scope: !48, inlinedAt: !49)
!59 = !DILocation(line: 197, column: 49, scope: !48, inlinedAt: !49)
!60 = !DILocation(line: 197, column: 22, scope: !48, inlinedAt: !49)
!61 = !DILocation(line: 204, column: 46, scope: !35, inlinedAt: !49)
!62 = !DILocation(line: 77, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 23, scope: !7)
!64 = !DILocation(line: 67, column: 24, scope: !7)
!65 = !DILocation(line: 68, column: 32, scope: !7)
!66 = !DILocation(line: 54, column: 36, scope: !7)
!67 = !DILocation(line: 55, column: 27, scope: !7)
!68 = !DILocation(line: 58, column: 48, scope: !7)
!69 = !DILocation(line: 58, column: 34, scope: !7)
!70 = !DILocation(line: 58, column: 59, scope: !7)
!71 = !DILocation(line: 59, column: 40, scope: !7)
!72 = !DILocation(line: 59, column: 35, scope: !7)
!73 = !DILocation(line: 59, column: 48, scope: !7)
!74 = !DILocation(line: 60, column: 35, scope: !7)
!75 = !DILocation(line: 60, column: 40, scope: !7)
!76 = !DILocation(line: 61, column: 24, scope: !7)
!77 = !DILocation(line: 62, column: 23, scope: !7)
!78 = !DILocation(line: 63, column: 24, scope: !7)
!79 = !DILocation(line: 69, column: 24, scope: !7)
!80 = !DILocation(line: 70, column: 29, scope: !7)
!81 = !DILocation(line: 70, column: 49, scope: !7)
!82 = !DILocation(line: 72, column: 19, scope: !7)
!83 = !DILocation(line: 74, column: 20, scope: !7)
!84 = !DILocation(line: 75, column: 28, scope: !7)
!85 = !DILocation(line: 78, column: 25, scope: !7)
!86 = !DILocation(line: 78, column: 37, scope: !7)
!87 = !DILocation(line: 78, column: 4, scope: !7)
