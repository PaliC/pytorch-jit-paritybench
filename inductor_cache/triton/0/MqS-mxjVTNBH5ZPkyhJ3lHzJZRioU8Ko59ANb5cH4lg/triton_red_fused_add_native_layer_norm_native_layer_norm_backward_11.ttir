#loc = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0)
#loc1 = loc(unknown)
#loc46 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":49:41)
#loc103 = loc(callsite(#loc1 at #loc46))
module {
  tt.func public @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_11(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<64x8xf32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.010416667> : tensor<64x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999997E-7> : tensor<64x1xf32> loc(#loc1)
    %cst_3 = arith.constant dense<9.600000e+01> : tensor<64x1xf32> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x8xf32> loc(#loc1)
    %cst_5 = arith.constant dense<96> : tensor<64x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x8xf32> loc(#loc1)
    %cst_7 = arith.constant dense<24576> : tensor<64x1xi32> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<1x8xi32> loc(#loc1)
    %cst_9 = arith.constant dense<96> : tensor<1x8xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_10 = arith.constant dense<256> : tensor<64x1xi32> loc(#loc1)
    %cst_11 = arith.constant dense<1024> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_11 : tensor<64x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc9)
    %9 = arith.remsi %5, %cst_10 : tensor<64x1xi32> loc(#loc10)
    %10 = arith.divsi %5, %cst_10 : tensor<64x1xi32> loc(#loc11)
    %11 = tt.broadcast %9 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc12)
    %12 = arith.muli %10, %cst_7 : tensor<64x1xi32> loc(#loc13)
    %13 = tt.broadcast %12 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc14)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc15)
    %15 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x8xi1> loc(#loc16)
    %16 = arith.muli %5, %cst_5 : tensor<64x1xi32> loc(#loc17)
    %17 = tt.broadcast %16 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc18)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc19)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc20)
    %20:3 = scf.for %arg7 = %c0_i32 to %c96_i32 step %c8_i32 iter_args(%arg8 = %cst_6, %arg9 = %cst_6, %arg10 = %cst_6) -> (tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32>)  : i32 {
      %45 = tt.splat %arg7 : i32 -> tensor<1x8xi32> loc(#loc22)
      %46 = arith.addi %45, %8 : tensor<1x8xi32> loc(#loc22)
      %47 = arith.cmpi slt, %46, %cst_9 : tensor<1x8xi32> loc(#loc23)
      %48 = arith.muli %46, %cst_8 : tensor<1x8xi32> loc(#loc24)
      %49 = tt.broadcast %48 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc12)
      %50 = arith.addi %11, %49 : tensor<64x8xi32> loc(#loc12)
      %51 = arith.addi %50, %13 : tensor<64x8xi32> loc(#loc14)
      %52 = tt.addptr %14, %51 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc15)
      %53 = tt.broadcast %47 : tensor<1x8xi1> -> tensor<64x8xi1> loc(#loc16)
      %54 = arith.andi %53, %15 : tensor<64x8xi1> loc(#loc16)
      %55 = tt.load %52, %54, %cst_6 evictionPolicy = evict_last : tensor<64x8x!tt.ptr<f32>> loc(#loc25)
      %56 = tt.broadcast %46 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc18)
      %57 = arith.addi %56, %17 : tensor<64x8xi32> loc(#loc18)
      %58 = tt.addptr %18, %57 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc19)
      %59 = tt.load %58, %54, %cst_6 evictionPolicy = evict_last : tensor<64x8x!tt.ptr<f32>> loc(#loc26)
      %60 = tt.addptr %19, %46 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc20)
      %61 = tt.load %60, %47, %cst_4 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>> loc(#loc27)
      %62 = tt.broadcast %61 : tensor<1x8xf32> -> tensor<64x8xf32> loc(#loc28)
      %63 = arith.addf %59, %62 : tensor<64x8xf32> loc(#loc28)
      %64 = arith.addf %55, %63 : tensor<64x8xf32> loc(#loc29)
      %65 = arith.cmpi eq, %arg7, %c0_i32 : i32 loc(#loc30)
      %66:3 = scf.if %65 -> (tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32>) {
        scf.yield %cst_6, %64, %cst_0 : tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32> loc(#loc94)
      } else {
        %70 = arith.subf %64, %arg8 : tensor<64x8xf32> loc(#loc95)
        %71 = arith.addf %arg10, %cst_0 : tensor<64x8xf32> loc(#loc96)
        %72 = arith.divf %70, %71 : tensor<64x8xf32> loc(#loc97)
        %73 = arith.addf %arg8, %72 : tensor<64x8xf32> loc(#loc98)
        %74 = arith.subf %64, %73 : tensor<64x8xf32> loc(#loc99)
        %75 = arith.mulf %70, %74 : tensor<64x8xf32> loc(#loc100)
        %76 = arith.addf %arg9, %75 : tensor<64x8xf32> loc(#loc101)
        scf.yield %76, %73, %71 : tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32> loc(#loc101)
      } loc(#loc93)
      %67 = arith.select %54, %66#1, %arg8 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc41)
      %68 = arith.select %54, %66#0, %arg9 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc42)
      %69 = arith.select %54, %66#2, %arg10 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc43)
      scf.yield %67, %68, %69 : tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32> loc(#loc44)
    } loc(#loc21)
    %21:3 = "tt.reduce"(%20#0, %20#1, %20#2) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc46)), %arg8: f32 loc(callsite(#loc1 at #loc46)), %arg9: f32 loc(callsite(#loc1 at #loc46)), %arg10: f32 loc(callsite(#loc1 at #loc46)), %arg11: f32 loc(callsite(#loc1 at #loc46)), %arg12: f32 loc(callsite(#loc1 at #loc46))):
      %45 = arith.subf %arg10, %arg7 : f32 loc(#loc116)
      %46 = arith.addf %arg9, %arg12 : f32 loc(#loc117)
      %47 = arith.cmpf oeq, %46, %cst : f32 loc(#loc118)
      %48 = arith.divf %arg12, %46 : f32 loc(#loc119)
      %49 = arith.select %47, %cst, %48 : f32 loc(#loc120)
      %50 = arith.mulf %45, %49 : f32 loc(#loc121)
      %51 = arith.addf %arg7, %50 : f32 loc(#loc122)
      %52 = arith.addf %arg8, %arg11 : f32 loc(#loc123)
      %53 = arith.mulf %45, %45 : f32 loc(#loc124)
      %54 = arith.mulf %53, %arg9 : f32 loc(#loc125)
      %55 = arith.mulf %54, %49 : f32 loc(#loc126)
      %56 = arith.addf %52, %55 : f32 loc(#loc127)
      tt.reduce.return %51, %56, %46 : f32, f32, f32 loc(#loc102)
    }) : (tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32>) -> (tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) loc(#loc102)
    %22 = tt.expand_dims %21#0 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc59)
    %23 = tt.expand_dims %21#1 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc60)
    %24 = tt.broadcast %9 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc61)
    %25 = arith.muli %10, %cst_7 : tensor<64x1xi32> loc(#loc62)
    %26 = tt.broadcast %25 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc63)
    %27 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc64)
    %28 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x8xi1> loc(#loc65)
    %29 = arith.muli %5, %cst_5 : tensor<64x1xi32> loc(#loc66)
    %30 = tt.broadcast %29 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc67)
    %31 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc68)
    %32 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc69)
    %33 = tt.broadcast %22 : tensor<64x1xf32> -> tensor<64x8xf32> loc(#loc70)
    %34 = arith.divf %23, %cst_3 : tensor<64x1xf32> loc(#loc71)
    %35 = arith.addf %34, %cst_2 : tensor<64x1xf32> loc(#loc72)
    %36 = tt.extern_elementwise %35 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32>) -> tensor<64x1xf32> loc(#loc73)
    %37 = tt.broadcast %36 : tensor<64x1xf32> -> tensor<64x8xf32> loc(#loc74)
    %38 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc75)
    scf.for %arg7 = %c0_i32 to %c96_i32 step %c8_i32  : i32 {
      %45 = tt.splat %arg7 : i32 -> tensor<1x8xi32> loc(#loc77)
      %46 = arith.addi %45, %8 : tensor<1x8xi32> loc(#loc77)
      %47 = arith.cmpi slt, %46, %cst_9 : tensor<1x8xi32> loc(#loc78)
      %48 = arith.muli %46, %cst_8 : tensor<1x8xi32> loc(#loc79)
      %49 = tt.broadcast %48 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc61)
      %50 = arith.addi %24, %49 : tensor<64x8xi32> loc(#loc61)
      %51 = arith.addi %50, %26 : tensor<64x8xi32> loc(#loc63)
      %52 = tt.addptr %27, %51 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc64)
      %53 = tt.broadcast %47 : tensor<1x8xi1> -> tensor<64x8xi1> loc(#loc65)
      %54 = arith.andi %53, %28 : tensor<64x8xi1> loc(#loc65)
      %55 = tt.load %52, %54, %cst_6 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc80)
      %56 = tt.broadcast %46 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc67)
      %57 = arith.addi %56, %30 : tensor<64x8xi32> loc(#loc67)
      %58 = tt.addptr %31, %57 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc68)
      %59 = tt.load %58, %54, %cst_6 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc81)
      %60 = tt.addptr %32, %46 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc69)
      %61 = tt.load %60, %47, %cst_4 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>> loc(#loc82)
      %62 = tt.broadcast %61 : tensor<1x8xf32> -> tensor<64x8xf32> loc(#loc83)
      %63 = arith.addf %59, %62 : tensor<64x8xf32> loc(#loc83)
      %64 = arith.addf %55, %63 : tensor<64x8xf32> loc(#loc84)
      %65 = arith.subf %64, %33 : tensor<64x8xf32> loc(#loc70)
      %66 = arith.mulf %65, %37 : tensor<64x8xf32> loc(#loc74)
      %67 = tt.addptr %38, %57 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc75)
      tt.store %67, %66, %54 : tensor<64x8x!tt.ptr<f32>> loc(#loc85)
    } loc(#loc76)
    %39 = arith.divf %23, %cst_3 : tensor<64x1xf32> loc(#loc86)
    %40 = arith.addf %39, %cst_2 : tensor<64x1xf32> loc(#loc87)
    %41 = tt.extern_elementwise %40 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32>) -> tensor<64x1xf32> loc(#loc88)
    %42 = arith.mulf %41, %cst_1 : tensor<64x1xf32> loc(#loc89)
    %43 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc90)
    %44 = tt.addptr %43, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc90)
    tt.store %44, %42, %6 : tensor<64x1x!tt.ptr<f32>> loc(#loc91)
    tt.return loc(#loc92)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":22:28)
#loc3 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":22:33)
#loc4 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":23:36)
#loc5 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":23:44)
#loc6 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":23:23)
#loc7 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":24:21)
#loc8 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":25:25)
#loc9 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":25:33)
#loc10 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":26:19)
#loc11 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":27:19)
#loc12 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":36:39)
#loc13 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":36:54)
#loc14 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":36:48)
#loc15 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":36:34)
#loc16 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":36:67)
#loc17 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":37:42)
#loc18 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":37:39)
#loc19 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":37:34)
#loc20 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":38:34)
#loc21 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":32:36)
#loc22 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":33:27)
#loc23 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":34:25)
#loc24 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":36:43)
#loc25 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":36:59)
#loc26 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":37:47)
#loc27 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":38:39)
#loc28 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":39:22)
#loc29 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":40:22)
#loc30 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":43:62)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc32 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":43:51)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc41 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":45:60)
#loc42 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":46:56)
#loc43 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":47:64)
#loc44 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":47:8)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc59 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":51:20)
#loc60 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":52:20)
#loc61 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":58:39)
#loc62 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":58:54)
#loc63 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":58:48)
#loc64 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":58:34)
#loc65 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":58:67)
#loc66 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":59:43)
#loc67 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":59:40)
#loc68 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":59:35)
#loc69 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":60:35)
#loc70 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":63:24)
#loc71 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":65:23)
#loc72 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":67:24)
#loc73 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":68:32)
#loc74 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":69:24)
#loc75 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":70:29)
#loc76 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":54:36)
#loc77 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":55:27)
#loc78 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":56:25)
#loc79 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":58:43)
#loc80 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":58:59)
#loc81 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":59:48)
#loc82 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":60:40)
#loc83 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":61:24)
#loc84 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":62:23)
#loc85 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":70:49)
#loc86 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":72:19)
#loc87 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":74:20)
#loc88 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":75:28)
#loc89 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":77:20)
#loc90 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":78:25)
#loc91 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":78:37)
#loc92 = loc("inductor_cache/zq/czq4yd62bffstvtuxtglrlqeukv3ra2an27t7rdrzi2xxctvfer3.py":78:4)
#loc93 = loc(callsite(#loc31 at #loc32))
#loc94 = loc(callsite(#loc33 at #loc32))
#loc95 = loc(callsite(#loc34 at #loc32))
#loc96 = loc(callsite(#loc35 at #loc32))
#loc97 = loc(callsite(#loc36 at #loc32))
#loc98 = loc(callsite(#loc37 at #loc32))
#loc99 = loc(callsite(#loc38 at #loc32))
#loc100 = loc(callsite(#loc39 at #loc32))
#loc101 = loc(callsite(#loc40 at #loc32))
#loc102 = loc(callsite(#loc45 at #loc46))
#loc104 = loc(callsite(#loc47 at #loc45))
#loc105 = loc(callsite(#loc48 at #loc45))
#loc106 = loc(callsite(#loc49 at #loc45))
#loc107 = loc(callsite(#loc50 at #loc45))
#loc108 = loc(callsite(#loc51 at #loc45))
#loc109 = loc(callsite(#loc52 at #loc45))
#loc110 = loc(callsite(#loc53 at #loc45))
#loc111 = loc(callsite(#loc54 at #loc45))
#loc112 = loc(callsite(#loc55 at #loc45))
#loc113 = loc(callsite(#loc56 at #loc45))
#loc114 = loc(callsite(#loc57 at #loc45))
#loc115 = loc(callsite(#loc58 at #loc45))
#loc116 = loc(callsite(#loc104 at #loc46))
#loc117 = loc(callsite(#loc105 at #loc46))
#loc118 = loc(callsite(#loc106 at #loc46))
#loc119 = loc(callsite(#loc107 at #loc46))
#loc120 = loc(callsite(#loc108 at #loc46))
#loc121 = loc(callsite(#loc109 at #loc46))
#loc122 = loc(callsite(#loc110 at #loc46))
#loc123 = loc(callsite(#loc111 at #loc46))
#loc124 = loc(callsite(#loc112 at #loc46))
#loc125 = loc(callsite(#loc113 at #loc46))
#loc126 = loc(callsite(#loc114 at #loc46))
#loc127 = loc(callsite(#loc115 at #loc46))
