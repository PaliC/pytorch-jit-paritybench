; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = or disjoint i32 %18, 16, !dbg !13
  %21 = or disjoint i32 %18, 24, !dbg !13
  %22 = or disjoint i32 %18, 32, !dbg !13
  %23 = or disjoint i32 %18, 40, !dbg !13
  %24 = or disjoint i32 %18, 48, !dbg !13
  %25 = or disjoint i32 %18, 56, !dbg !13
  %26 = icmp slt i32 %17, 1536, !dbg !14
  %27 = icmp slt i32 %18, 1536, !dbg !14
  %28 = icmp slt i32 %19, 1536, !dbg !14
  %29 = icmp slt i32 %20, 1536, !dbg !14
  %30 = icmp slt i32 %21, 1536, !dbg !14
  %31 = icmp slt i32 %22, 1536, !dbg !14
  %32 = icmp slt i32 %23, 1536, !dbg !14
  %33 = icmp slt i32 %24, 1536, !dbg !14
  %34 = icmp slt i32 %25, 1536, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %36 = shl i32 %35, 4, !dbg !16
  %37 = and i32 %11, 15, !dbg !17
  %38 = or disjoint i32 %36, %15, !dbg !18
  %39 = or disjoint i32 %36, %16, !dbg !18
  %40 = or disjoint i32 %36, %37, !dbg !18
  %41 = icmp slt i32 %38, 9, !dbg !19
  %42 = icmp slt i32 %39, 9, !dbg !19
  %43 = icmp slt i32 %40, 9, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %44 = sdiv i32 %.frozen, 384, !dbg !20
  %45 = mul i32 %44, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %45, !dbg !21
  %46 = icmp slt i32 %.decomposed, 192, !dbg !22
  %47 = mul i32 %38, 192, !dbg !23
  %48 = mul i32 %39, 192, !dbg !23
  %49 = mul i32 %44, 1728, !dbg !24
  %50 = add i32 %47, %49, !dbg !25
  %51 = add i32 %48, %49, !dbg !25
  %52 = add i32 %50, %.decomposed, !dbg !26
  %53 = add i32 %51, %.decomposed, !dbg !26
  %54 = sext i32 %52 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !27
  %56 = sext i32 %53 to i64, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !27
  %58 = and i1 %46, %41, !dbg !28
  %59 = and i1 %46, %42, !dbg !28
  %60 = and i1 %26, %58, !dbg !29
  %61 = and i1 %26, %59, !dbg !29
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #2, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !30
  %72 = sext i32 %.decomposed to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #2, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #2, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %84 = icmp sgt i32 %.decomposed, 191, !dbg !33
  %85 = add nsw i32 %.decomposed, -192, !dbg !34
  %86 = add i32 %50, %85, !dbg !35
  %87 = add i32 %51, %85, !dbg !35
  %88 = sext i32 %86 to i64, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !36
  %90 = sext i32 %87 to i64, !dbg !36
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !36
  %92 = and i1 %84, %41, !dbg !37
  %93 = and i1 %84, %42, !dbg !37
  %94 = and i1 %26, %92, !dbg !38
  %95 = and i1 %26, %93, !dbg !38
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #2, !dbg !39
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !39
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !39
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !39
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !39
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #2, !dbg !39
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !39
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !39
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !39
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !39
  %106 = sext i32 %85 to i64, !dbg !40
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !40
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #2, !dbg !41
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !41
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !41
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !41
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !41
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #2, !dbg !41
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !41
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !41
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !41
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !41
  %118 = insertelement <16 x i32> poison, i32 %105, i64 0, !dbg !39
  %119 = insertelement <16 x i32> %118, i32 %104, i64 1, !dbg !39
  %120 = insertelement <16 x i32> %119, i32 %103, i64 2, !dbg !39
  %121 = insertelement <16 x i32> %120, i32 %102, i64 3, !dbg !39
  %122 = insertelement <16 x i32> %121, i32 %100, i64 4, !dbg !39
  %123 = insertelement <16 x i32> %122, i32 %99, i64 5, !dbg !39
  %124 = insertelement <16 x i32> %123, i32 %98, i64 6, !dbg !39
  %125 = insertelement <16 x i32> %124, i32 %97, i64 7, !dbg !39
  %126 = insertelement <16 x i32> %125, i32 %71, i64 8, !dbg !39
  %127 = insertelement <16 x i32> %126, i32 %70, i64 9, !dbg !39
  %128 = insertelement <16 x i32> %127, i32 %69, i64 10, !dbg !39
  %129 = insertelement <16 x i32> %128, i32 %68, i64 11, !dbg !39
  %130 = insertelement <16 x i32> %129, i32 %66, i64 12, !dbg !39
  %131 = insertelement <16 x i32> %130, i32 %65, i64 13, !dbg !39
  %132 = insertelement <16 x i32> %131, i32 %64, i64 14, !dbg !39
  %133 = insertelement <16 x i32> %132, i32 %63, i64 15, !dbg !39
  %134 = bitcast <16 x i32> %133 to <16 x float>, !dbg !39
  %135 = insertelement <16 x i32> poison, i32 %117, i64 0, !dbg !41
  %136 = insertelement <16 x i32> %135, i32 %116, i64 1, !dbg !41
  %137 = insertelement <16 x i32> %136, i32 %115, i64 2, !dbg !41
  %138 = insertelement <16 x i32> %137, i32 %114, i64 3, !dbg !41
  %139 = insertelement <16 x i32> %138, i32 %112, i64 4, !dbg !41
  %140 = insertelement <16 x i32> %139, i32 %111, i64 5, !dbg !41
  %141 = insertelement <16 x i32> %140, i32 %110, i64 6, !dbg !41
  %142 = insertelement <16 x i32> %141, i32 %109, i64 7, !dbg !41
  %143 = insertelement <16 x i32> %142, i32 %83, i64 8, !dbg !41
  %144 = insertelement <16 x i32> %143, i32 %82, i64 9, !dbg !41
  %145 = insertelement <16 x i32> %144, i32 %81, i64 10, !dbg !41
  %146 = insertelement <16 x i32> %145, i32 %80, i64 11, !dbg !41
  %147 = insertelement <16 x i32> %146, i32 %78, i64 12, !dbg !41
  %148 = insertelement <16 x i32> %147, i32 %77, i64 13, !dbg !41
  %149 = insertelement <16 x i32> %148, i32 %76, i64 14, !dbg !41
  %150 = insertelement <16 x i32> %149, i32 %75, i64 15, !dbg !41
  %151 = bitcast <16 x i32> %150 to <16 x float>, !dbg !41
  %152 = fadd <16 x float> %134, %151, !dbg !42
  %153 = fcmp olt <16 x float> %152, zeroinitializer, !dbg !43
  %154 = extractelement <16 x i1> %153, i64 15, !dbg !47
  %155 = extractelement <16 x float> %152, i64 15, !dbg !47
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !47
  %157 = extractelement <16 x i1> %153, i64 14, !dbg !47
  %158 = extractelement <16 x float> %152, i64 14, !dbg !47
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !47
  %160 = extractelement <16 x i1> %153, i64 13, !dbg !47
  %161 = extractelement <16 x float> %152, i64 13, !dbg !47
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !47
  %163 = extractelement <16 x i1> %153, i64 12, !dbg !47
  %164 = extractelement <16 x float> %152, i64 12, !dbg !47
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !47
  %166 = extractelement <16 x i1> %153, i64 11, !dbg !47
  %167 = extractelement <16 x float> %152, i64 11, !dbg !47
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !47
  %169 = extractelement <16 x i1> %153, i64 10, !dbg !47
  %170 = extractelement <16 x float> %152, i64 10, !dbg !47
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !47
  %172 = extractelement <16 x i1> %153, i64 9, !dbg !47
  %173 = extractelement <16 x float> %152, i64 9, !dbg !47
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !47
  %175 = extractelement <16 x i1> %153, i64 8, !dbg !47
  %176 = extractelement <16 x float> %152, i64 8, !dbg !47
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !47
  %178 = extractelement <16 x i1> %153, i64 7, !dbg !49
  %179 = extractelement <16 x float> %152, i64 7, !dbg !49
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !49
  %181 = extractelement <16 x i1> %153, i64 6, !dbg !49
  %182 = extractelement <16 x float> %152, i64 6, !dbg !49
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !49
  %184 = extractelement <16 x i1> %153, i64 5, !dbg !49
  %185 = extractelement <16 x float> %152, i64 5, !dbg !49
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !49
  %187 = extractelement <16 x i1> %153, i64 4, !dbg !49
  %188 = extractelement <16 x float> %152, i64 4, !dbg !49
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !49
  %190 = extractelement <16 x i1> %153, i64 3, !dbg !49
  %191 = extractelement <16 x float> %152, i64 3, !dbg !49
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !49
  %193 = extractelement <16 x i1> %153, i64 2, !dbg !49
  %194 = extractelement <16 x float> %152, i64 2, !dbg !49
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !49
  %196 = extractelement <16 x i1> %153, i64 1, !dbg !49
  %197 = extractelement <16 x float> %152, i64 1, !dbg !49
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !49
  %199 = extractelement <16 x i1> %153, i64 0, !dbg !49
  %200 = extractelement <16 x float> %152, i64 0, !dbg !49
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !49
  %202 = select i1 %46, float %156, float %180, !dbg !50
  %203 = select i1 %46, float %159, float %183, !dbg !50
  %204 = select i1 %46, float %162, float %186, !dbg !50
  %205 = select i1 %46, float %165, float %189, !dbg !50
  %206 = select i1 %46, float %168, float %192, !dbg !50
  %207 = select i1 %46, float %171, float %195, !dbg !50
  %208 = select i1 %46, float %174, float %198, !dbg !50
  %209 = select i1 %46, float %177, float %201, !dbg !50
  %210 = mul i32 %18, 9, !dbg !51
  %211 = mul i32 %19, 9, !dbg !51
  %212 = mul i32 %20, 9, !dbg !51
  %213 = mul i32 %21, 9, !dbg !51
  %214 = mul i32 %22, 9, !dbg !51
  %215 = mul i32 %23, 9, !dbg !51
  %216 = mul i32 %24, 9, !dbg !51
  %217 = mul i32 %25, 9, !dbg !51
  %218 = add i32 %40, %210, !dbg !52
  %219 = add i32 %40, %211, !dbg !52
  %220 = add i32 %40, %212, !dbg !52
  %221 = add i32 %40, %213, !dbg !52
  %222 = add i32 %40, %214, !dbg !52
  %223 = add i32 %40, %215, !dbg !52
  %224 = add i32 %40, %216, !dbg !52
  %225 = add i32 %40, %217, !dbg !52
  %226 = sext i32 %218 to i64, !dbg !53
  %227 = getelementptr float, ptr addrspace(1) %4, i64 %226, !dbg !53
  %228 = sext i32 %219 to i64, !dbg !53
  %229 = getelementptr float, ptr addrspace(1) %4, i64 %228, !dbg !53
  %230 = sext i32 %220 to i64, !dbg !53
  %231 = getelementptr float, ptr addrspace(1) %4, i64 %230, !dbg !53
  %232 = sext i32 %221 to i64, !dbg !53
  %233 = getelementptr float, ptr addrspace(1) %4, i64 %232, !dbg !53
  %234 = sext i32 %222 to i64, !dbg !53
  %235 = getelementptr float, ptr addrspace(1) %4, i64 %234, !dbg !53
  %236 = sext i32 %223 to i64, !dbg !53
  %237 = getelementptr float, ptr addrspace(1) %4, i64 %236, !dbg !53
  %238 = sext i32 %224 to i64, !dbg !53
  %239 = getelementptr float, ptr addrspace(1) %4, i64 %238, !dbg !53
  %240 = sext i32 %225 to i64, !dbg !53
  %241 = getelementptr float, ptr addrspace(1) %4, i64 %240, !dbg !53
  %242 = and i1 %27, %43, !dbg !54
  %243 = and i1 %28, %43, !dbg !54
  %244 = and i1 %29, %43, !dbg !54
  %245 = and i1 %30, %43, !dbg !54
  %246 = and i1 %31, %43, !dbg !54
  %247 = and i1 %32, %43, !dbg !54
  %248 = and i1 %33, %43, !dbg !54
  %249 = and i1 %34, %43, !dbg !54
  %250 = and i1 %26, %41, !dbg !54
  %251 = and i1 %26, %42, !dbg !54
  %252 = shl i32 %11, 6, !dbg !55
  %253 = and i32 %252, 960, !dbg !55
  %254 = or disjoint i32 %253, %15, !dbg !55
  %255 = and i32 %11, 127, !dbg !55
  %256 = lshr exact i32 %253, 2, !dbg !55
  %257 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %256, !dbg !55
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %254, !dbg !55
  %259 = bitcast float %202 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !55
  %260 = or disjoint i32 %254, 16, !dbg !55
  %261 = lshr i32 %260, 4, !dbg !55
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !55
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !55
  %264 = bitcast float %203 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !55
  %265 = or disjoint i32 %254, 32, !dbg !55
  %266 = lshr i32 %265, 4, !dbg !55
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !55
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !55
  %269 = bitcast float %204 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !55
  %270 = or disjoint i32 %254, 48, !dbg !55
  %271 = lshr i32 %270, 4, !dbg !55
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !55
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !55
  %274 = bitcast float %205 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !55
  %275 = or disjoint i32 %254, 8, !dbg !55
  %276 = getelementptr float, ptr addrspace(3) %257, i32 %275, !dbg !55
  %277 = bitcast float %206 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #2, !dbg !55
  %278 = or disjoint i32 %254, 24, !dbg !55
  %279 = lshr i32 %278, 4, !dbg !55
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !55
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !55
  %282 = bitcast float %207 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !55
  %283 = or disjoint i32 %254, 40, !dbg !55
  %284 = lshr i32 %283, 4, !dbg !55
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !55
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %283, !dbg !55
  %287 = bitcast float %208 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !55
  %288 = or disjoint i32 %254, 56, !dbg !55
  %289 = lshr i32 %288, 4, !dbg !55
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !55
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %288, !dbg !55
  %292 = bitcast float %209 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %293 = lshr i32 %255, 4, !dbg !55
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !55
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %255, !dbg !55
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !55
  %297 = or disjoint i32 %255, 128, !dbg !55
  %298 = lshr i32 %297, 4, !dbg !55
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !55
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !55
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !55
  %302 = or disjoint i32 %255, 256, !dbg !55
  %303 = lshr i32 %302, 4, !dbg !55
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !55
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !55
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !55
  %307 = or disjoint i32 %255, 384, !dbg !55
  %308 = lshr i32 %307, 4, !dbg !55
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !55
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !55
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !55
  %312 = or disjoint i32 %255, 512, !dbg !55
  %313 = lshr i32 %312, 4, !dbg !55
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !55
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !55
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !55
  %317 = or disjoint i32 %255, 640, !dbg !55
  %318 = lshr i32 %317, 4, !dbg !55
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !55
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !55
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !55
  %322 = or disjoint i32 %255, 768, !dbg !55
  %323 = lshr i32 %322, 4, !dbg !55
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !55
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !55
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !55
  %327 = or disjoint i32 %255, 896, !dbg !55
  %328 = lshr i32 %327, 4, !dbg !55
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !55
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !55
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %296, ptr addrspace(1) %227, i1 %242) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %301, ptr addrspace(1) %229, i1 %243) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %306, ptr addrspace(1) %231, i1 %244) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %233, i1 %245) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %316, ptr addrspace(1) %235, i1 %246) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %321, ptr addrspace(1) %237, i1 %247) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %239, i1 %248) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %331, ptr addrspace(1) %241, i1 %249) #2, !dbg !55
  %332 = mul i32 %38, 384, !dbg !56
  %333 = mul i32 %39, 384, !dbg !56
  %334 = mul i32 %44, 3456, !dbg !57
  %335 = add i32 %334, %.decomposed, !dbg !58
  %336 = add i32 %335, %332, !dbg !59
  %337 = add i32 %335, %333, !dbg !59
  %338 = sext i32 %336 to i64, !dbg !60
  %339 = getelementptr float, ptr addrspace(1) %5, i64 %338, !dbg !60
  %340 = sext i32 %337 to i64, !dbg !60
  %341 = getelementptr float, ptr addrspace(1) %5, i64 %340, !dbg !60
  %342 = bitcast float %202 to i32, !dbg !61
  %343 = bitcast float %203 to i32, !dbg !61
  %344 = bitcast float %204 to i32, !dbg !61
  %345 = bitcast float %205 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %342, i32 %343, i32 %344, i32 %345, ptr addrspace(1) %339, i1 %250) #2, !dbg !61
  %346 = bitcast float %206 to i32, !dbg !61
  %347 = bitcast float %207 to i32, !dbg !61
  %348 = bitcast float %208 to i32, !dbg !61
  %349 = bitcast float %209 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %347, i32 %348, i32 %349, ptr addrspace(1) %341, i1 %251) #2, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py", directory: "inductor_cache/2v")
!4 = !{ptr @triton_poi_fused_cat_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_16", linkageName: "triton_poi_fused_cat_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 44, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 37, column: 50, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 63, scope: !7)
!29 = !DILocation(line: 37, column: 71, scope: !7)
!30 = !DILocation(line: 37, column: 56, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 70, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 60, scope: !7)
!35 = !DILocation(line: 47, column: 51, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 74, scope: !7)
!38 = !DILocation(line: 47, column: 82, scope: !7)
!39 = !DILocation(line: 47, column: 66, scope: !7)
!40 = !DILocation(line: 48, column: 31, scope: !7)
!41 = !DILocation(line: 48, column: 80, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 41, column: 40, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 55, column: 32, scope: !7)
!52 = !DILocation(line: 55, column: 30, scope: !7)
!53 = !DILocation(line: 55, column: 25, scope: !7)
!54 = !DILocation(line: 55, column: 52, scope: !7)
!55 = !DILocation(line: 55, column: 44, scope: !7)
!56 = !DILocation(line: 56, column: 34, scope: !7)
!57 = !DILocation(line: 56, column: 44, scope: !7)
!58 = !DILocation(line: 56, column: 30, scope: !7)
!59 = !DILocation(line: 56, column: 39, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 56, scope: !7)
!62 = !DILocation(line: 56, column: 4, scope: !7)
