; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_native_batch_norm_backward_relu_sub_threshold_backward_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 2048, !dbg !14
  %20 = srem i32 %18, 512, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %19) #3, !dbg !17
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %19) #3, !dbg !19
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %30 = bitcast i32 %28 to float, !dbg !19
  %31 = bitcast i32 %29 to float, !dbg !19
  %32 = sext i32 %20 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !20
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %19) #3, !dbg !21
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !21
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !22
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !25
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !25
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !25
  %43 = bitcast i32 %41 to float, !dbg !25
  %44 = bitcast i32 %42 to float, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !26
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #3, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !28
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %19) #3, !dbg !29
  %49 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !17
  %50 = insertelement <2 x i32> %49, i32 %25, i64 1, !dbg !17
  %51 = and <2 x i32> %50, splat (i32 2147483647), !dbg !30
  %52 = icmp eq <2 x i32> %51, zeroinitializer, !dbg !30
  %53 = extractelement <2 x i1> %52, i64 0, !dbg !31
  %54 = bitcast i32 %24 to float, !dbg !31
  %55 = select i1 %53, float 1.000000e+00, float %54, !dbg !31
  %56 = extractelement <2 x i1> %52, i64 1, !dbg !31
  %57 = bitcast i32 %25 to float, !dbg !31
  %58 = select i1 %56, float 1.000000e+00, float %57, !dbg !31
  %59 = bitcast i32 %35 to float, !dbg !32
  %60 = fadd float %30, %59, !dbg !32
  %61 = bitcast i32 %36 to float, !dbg !32
  %62 = fadd float %31, %61, !dbg !32
  %63 = fsub float %60, %59, !dbg !33
  %64 = fsub float %62, %61, !dbg !33
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %55) #3, !dbg !34
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %58) #3, !dbg !34
  %67 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %68 = fadd float %44, 0x3EE4F8B580000000, !dbg !35
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %69, 0, !dbg !36
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %70, 0, !dbg !36
  br i1 %.not.i, label %76, label %71, !dbg !36

71:                                               ; preds = %12
  br i1 %.not1.i, label %74, label %72, !dbg !36

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

76:                                               ; preds = %12
  br i1 %.not1.i, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !36
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %81, 0, !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !36
  br i1 %.not.i1, label %88, label %83, !dbg !36

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !36
  %93 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !21
  %94 = insertelement <2 x i32> %93, i32 %36, i64 1, !dbg !21
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !21
  %96 = insertelement <2 x float> poison, float %65, i64 0, !dbg !37
  %97 = insertelement <2 x float> %96, float %66, i64 1, !dbg !37
  %98 = fadd <2 x float> %97, %95, !dbg !37
  %99 = extractvalue { i32, i32 } %38, 1, !dbg !23
  %100 = extractvalue { i32, i32 } %38, 0, !dbg !23
  %101 = extractvalue { i32, i32 } %48, 1, !dbg !29
  %102 = extractvalue { i32, i32 } %48, 0, !dbg !29
  %103 = extractvalue { i32, i32 } %46, 1, !dbg !27
  %104 = extractvalue { i32, i32 } %46, 0, !dbg !27
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %107 = getelementptr i1, ptr addrspace(1) %7, i64 %21, !dbg !39
  %108 = zext i1 %53 to i8, !dbg !40
  %109 = zext i1 %56 to i8, !dbg !40
  %110 = insertelement <2 x i8> poison, i8 %108, i64 0, !dbg !40
  %111 = insertelement <2 x i8> %110, i8 %109, i64 1, !dbg !40
  %112 = bitcast <2 x i8> %111 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %112, ptr addrspace(1) %107, i1 %19) #3, !dbg !40
  %113 = bitcast float %55 to i32, !dbg !41
  %114 = bitcast float %58 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %114, ptr addrspace(1) %22, i1 %19) #3, !dbg !41
  %115 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !42
  %116 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !43
  %117 = getelementptr i1, ptr addrspace(1) %10, i64 %21, !dbg !44
  %118 = select <2 x i1> %52, <2 x float> zeroinitializer, <2 x float> %98, !dbg !45
  %119 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !23
  %120 = insertelement <2 x i32> %119, i32 %99, i64 1, !dbg !23
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !23
  %122 = fsub <2 x float> %118, %121, !dbg !46
  %123 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !29
  %124 = insertelement <2 x i32> %123, i32 %101, i64 1, !dbg !29
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !29
  %126 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !27
  %127 = insertelement <2 x i32> %126, i32 %103, i64 1, !dbg !27
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !27
  %129 = insertelement <2 x float> poison, float %105, i64 0, !dbg !47
  %130 = insertelement <2 x float> %129, float %106, i64 1, !dbg !47
  %131 = fmul <2 x float> %122, %130, !dbg !47
  %132 = fmul <2 x float> %131, %128, !dbg !48
  %133 = fadd <2 x float> %132, %125, !dbg !49
  %134 = fcmp olt <2 x float> %133, zeroinitializer, !dbg !50
  %135 = select <2 x i1> %134, <2 x float> zeroinitializer, <2 x float> %133, !dbg !54
  %136 = fcmp ole <2 x float> %135, zeroinitializer, !dbg !55
  %bc = bitcast <2 x float> %135 to <2 x i32>, !dbg !56
  %137 = extractelement <2 x i32> %bc, i64 0, !dbg !56
  %bc6 = bitcast <2 x float> %135 to <2 x i32>, !dbg !56
  %138 = extractelement <2 x i32> %bc6, i64 1, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %137, i32 %138, ptr addrspace(1) %115, i1 %19) #3, !dbg !56
  %bc7 = bitcast <2 x float> %122 to <2 x i32>, !dbg !57
  %139 = extractelement <2 x i32> %bc7, i64 0, !dbg !57
  %bc8 = bitcast <2 x float> %122 to <2 x i32>, !dbg !57
  %140 = extractelement <2 x i32> %bc8, i64 1, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %139, i32 %140, ptr addrspace(1) %116, i1 %19) #3, !dbg !57
  %141 = zext <2 x i1> %136 to <2 x i8>, !dbg !58
  %142 = bitcast <2 x i8> %141 to i16, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %142, ptr addrspace(1) %117, i1 %19) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpy3c2wqobzzrmzvnwhmnzw66ix3h3ie6ljjyk6zdljmijddxa2s.py", directory: "inductor_cache/py")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_native_batch_norm_backward_relu_sub_threshold_backward_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_native_batch_norm_backward_relu_sub_threshold_backward_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_native_batch_norm_backward_relu_sub_threshold_backward_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_native_batch_norm_backward_relu_sub_threshold_backward_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 19, scope: !7)
!31 = !DILocation(line: 36, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 27, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 55, column: 25, scope: !7)
!40 = !DILocation(line: 55, column: 36, scope: !7)
!41 = !DILocation(line: 56, column: 39, scope: !7)
!42 = !DILocation(line: 57, column: 25, scope: !7)
!43 = !DILocation(line: 58, column: 25, scope: !7)
!44 = !DILocation(line: 59, column: 25, scope: !7)
!45 = !DILocation(line: 41, column: 33, scope: !7)
!46 = !DILocation(line: 42, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 53, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 54, column: 21, scope: !7)
!56 = !DILocation(line: 57, column: 37, scope: !7)
!57 = !DILocation(line: 58, column: 37, scope: !7)
!58 = !DILocation(line: 59, column: 37, scope: !7)
!59 = !DILocation(line: 59, column: 4, scope: !7)
