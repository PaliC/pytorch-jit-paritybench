; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 7, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 32, !dbg !14
  %18 = srem i32 %17, 32, !dbg !15
  %19 = mul i32 %17, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %16, 1024, !dbg !17
  %21 = srem i32 %20, 4, !dbg !18
  %22 = sdiv i32 %16, 4096, !dbg !19
  %23 = sext i32 %18 to i64, !dbg !20
  %24 = getelementptr i64, ptr addrspace(1) %2, i64 %23, !dbg !20
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !21
  %26 = sext i32 %.decomposed to i64, !dbg !22
  %27 = getelementptr i64, ptr addrspace(1) %3, i64 %26, !dbg !22
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %29 = getelementptr i64, ptr addrspace(1) %5, i64 %26, !dbg !24
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !27
  %33 = getelementptr i64, ptr addrspace(1) %7, i64 %23, !dbg !28
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !29
  %35 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !30
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !31
  %37 = bitcast i32 %36 to float, !dbg !31
  %38 = lshr i64 %25, 59, !dbg !32
  %39 = and i64 %38, 16, !dbg !32
  %40 = add i64 %39, %25, !dbg !32
  %41 = lshr i64 %28, 59, !dbg !33
  %42 = and i64 %41, 16, !dbg !33
  %43 = add i64 %42, %28, !dbg !33
  %44 = shl i64 %40, 4, !dbg !34
  %45 = add i64 %43, %44, !dbg !35
  %46 = shl nsw i32 %21, 8, !dbg !36
  %47 = sext i32 %46 to i64, !dbg !37
  %48 = shl nsw i32 %22, 11, !dbg !38
  %49 = sext i32 %48 to i64, !dbg !39
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !40
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %47, !dbg !40
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %49, !dbg !40
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !41
  %54 = lshr i64 %30, 59, !dbg !42
  %55 = and i64 %54, 16, !dbg !42
  %56 = add i64 %55, %30, !dbg !42
  %57 = add i64 %56, %44, !dbg !43
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !44
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %47, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %49, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !45
  %62 = lshr i64 %34, 59, !dbg !46
  %63 = and i64 %62, 16, !dbg !46
  %64 = add i64 %63, %34, !dbg !46
  %65 = shl i64 %64, 4, !dbg !47
  %66 = add i64 %65, %43, !dbg !48
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !49
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %47, !dbg !49
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %49, !dbg !49
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !50
  %71 = add i64 %65, %56, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !52
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %47, !dbg !52
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %49, !dbg !52
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !53
  %76 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !50
  %77 = insertelement <2 x i32> %76, i32 %53, i64 1, !dbg !50
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !50
  %79 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !53
  %80 = insertelement <2 x i32> %79, i32 %61, i64 1, !dbg !53
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !53
  %82 = fsub <2 x float> %81, %78, !dbg !54
  %83 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !55
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !55
  %85 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %86 = fmul <2 x float> %82, %85, !dbg !55
  %87 = fadd <2 x float> %86, %78, !dbg !56
  %88 = extractelement <2 x float> %87, i64 0, !dbg !57
  %89 = extractelement <2 x float> %87, i64 1, !dbg !58
  %90 = fsub float %88, %89, !dbg !57
  %91 = fmul float %90, %37, !dbg !59
  %92 = fadd float %89, %91, !dbg !58
  %93 = shl nsw i32 %20, 8, !dbg !60
  %94 = sext i32 %93 to i64, !dbg !61
  %95 = getelementptr float, ptr addrspace(1) %9, i64 %45, !dbg !62
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %94, !dbg !62
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !63
  %98 = getelementptr float, ptr addrspace(1) %9, i64 %57, !dbg !64
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %94, !dbg !64
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !65
  %101 = getelementptr float, ptr addrspace(1) %9, i64 %66, !dbg !66
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %94, !dbg !66
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !67
  %104 = getelementptr float, ptr addrspace(1) %9, i64 %71, !dbg !68
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %94, !dbg !68
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !69
  %107 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !67
  %108 = insertelement <2 x i32> %107, i32 %97, i64 1, !dbg !67
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !67
  %110 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !69
  %111 = insertelement <2 x i32> %110, i32 %100, i64 1, !dbg !69
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !69
  %113 = fsub <2 x float> %112, %109, !dbg !70
  %114 = fmul <2 x float> %113, %85, !dbg !71
  %115 = fadd <2 x float> %114, %109, !dbg !72
  %116 = extractelement <2 x float> %115, i64 0, !dbg !73
  %117 = extractelement <2 x float> %115, i64 1, !dbg !74
  %118 = fsub float %116, %117, !dbg !73
  %119 = fmul float %118, %37, !dbg !75
  %120 = fadd float %117, %119, !dbg !74
  %121 = sext i32 %16 to i64, !dbg !76
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !76
  %123 = bitcast float %92 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %122, i1 true) #1, !dbg !77
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !78
  %125 = bitcast float %120 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %124, i1 true) #1, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck2b4gczorptjkvex6o27zoaeotxbu57yeqyzwnjaadifebqs4ch.py", directory: "inductor_cache/k2")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_5", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 40, scope: !7)
!35 = !DILocation(line: 43, column: 37, scope: !7)
!36 = !DILocation(line: 43, column: 51, scope: !7)
!37 = !DILocation(line: 43, column: 47, scope: !7)
!38 = !DILocation(line: 43, column: 61, scope: !7)
!39 = !DILocation(line: 43, column: 56, scope: !7)
!40 = !DILocation(line: 43, column: 30, scope: !7)
!41 = !DILocation(line: 43, column: 66, scope: !7)
!42 = !DILocation(line: 46, column: 35, scope: !7)
!43 = !DILocation(line: 47, column: 39, scope: !7)
!44 = !DILocation(line: 47, column: 31, scope: !7)
!45 = !DILocation(line: 47, column: 68, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 54, column: 41, scope: !7)
!48 = !DILocation(line: 54, column: 38, scope: !7)
!49 = !DILocation(line: 54, column: 31, scope: !7)
!50 = !DILocation(line: 54, column: 68, scope: !7)
!51 = !DILocation(line: 55, column: 39, scope: !7)
!52 = !DILocation(line: 55, column: 31, scope: !7)
!53 = !DILocation(line: 55, column: 69, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 52, scope: !7)
!61 = !DILocation(line: 62, column: 48, scope: !7)
!62 = !DILocation(line: 62, column: 31, scope: !7)
!63 = !DILocation(line: 62, column: 57, scope: !7)
!64 = !DILocation(line: 63, column: 31, scope: !7)
!65 = !DILocation(line: 63, column: 58, scope: !7)
!66 = !DILocation(line: 67, column: 31, scope: !7)
!67 = !DILocation(line: 67, column: 58, scope: !7)
!68 = !DILocation(line: 68, column: 31, scope: !7)
!69 = !DILocation(line: 68, column: 59, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 71, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 20, scope: !7)
!74 = !DILocation(line: 74, column: 20, scope: !7)
!75 = !DILocation(line: 73, column: 20, scope: !7)
!76 = !DILocation(line: 75, column: 28, scope: !7)
!77 = !DILocation(line: 75, column: 40, scope: !7)
!78 = !DILocation(line: 76, column: 28, scope: !7)
!79 = !DILocation(line: 76, column: 40, scope: !7)
!80 = !DILocation(line: 76, column: 4, scope: !7)
