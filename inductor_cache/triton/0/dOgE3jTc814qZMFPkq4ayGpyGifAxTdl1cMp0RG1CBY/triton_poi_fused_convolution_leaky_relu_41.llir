; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = sdiv i32 %10, 11, !dbg !14
  %15 = sdiv i32 %11, 11, !dbg !14
  %16 = sdiv i32 %12, 11, !dbg !14
  %17 = sdiv i32 %13, 11, !dbg !14
  %18 = srem i32 %14, 1024, !dbg !15
  %19 = srem i32 %15, 1024, !dbg !15
  %20 = srem i32 %16, 1024, !dbg !15
  %21 = srem i32 %17, 1024, !dbg !15
  %22 = sext i32 %10 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %29 = sext i32 %18 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !18
  %31 = sext i32 %19 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !18
  %33 = sext i32 %20 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !18
  %35 = sext i32 %21 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !18
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !21
  %47 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !19
  %48 = insertelement <4 x i32> %47, i32 %39, i64 1, !dbg !19
  %49 = insertelement <4 x i32> %48, i32 %38, i64 2, !dbg !19
  %50 = insertelement <4 x i32> %49, i32 %37, i64 3, !dbg !19
  %51 = bitcast <4 x i32> %50 to <4 x float>, !dbg !19
  %52 = shufflevector <4 x float> %51, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !19
  %53 = insertelement <8 x i32> poison, i32 %46, i64 0, !dbg !21
  %54 = insertelement <8 x i32> %53, i32 %45, i64 1, !dbg !21
  %55 = insertelement <8 x i32> %54, i32 %44, i64 2, !dbg !21
  %56 = insertelement <8 x i32> %55, i32 %43, i64 3, !dbg !21
  %57 = insertelement <8 x i32> %56, i32 %28, i64 4, !dbg !21
  %58 = insertelement <8 x i32> %57, i32 %27, i64 5, !dbg !21
  %59 = insertelement <8 x i32> %58, i32 %26, i64 6, !dbg !21
  %60 = insertelement <8 x i32> %59, i32 %25, i64 7, !dbg !21
  %61 = bitcast <8 x i32> %60 to <8 x float>, !dbg !21
  %62 = fadd <8 x float> %52, %61, !dbg !22
  %63 = extractelement <8 x float> %62, i64 7, !dbg !23
  %64 = fmul float %63, 0x3FB99999A0000000, !dbg !24
  %65 = extractelement <8 x float> %62, i64 6, !dbg !23
  %66 = fmul float %65, 0x3FB99999A0000000, !dbg !24
  %67 = extractelement <8 x float> %62, i64 5, !dbg !23
  %68 = fmul float %67, 0x3FB99999A0000000, !dbg !24
  %69 = extractelement <8 x float> %62, i64 4, !dbg !23
  %70 = fmul float %69, 0x3FB99999A0000000, !dbg !24
  %71 = fcmp ogt <8 x float> %62, zeroinitializer, !dbg !25
  %72 = extractelement <8 x i1> %71, i64 7, !dbg !23
  %73 = select i1 %72, float %63, float %64, !dbg !23
  %74 = extractelement <8 x i1> %71, i64 6, !dbg !23
  %75 = select i1 %74, float %65, float %66, !dbg !23
  %76 = extractelement <8 x i1> %71, i64 5, !dbg !23
  %77 = select i1 %76, float %67, float %68, !dbg !23
  %78 = extractelement <8 x i1> %71, i64 4, !dbg !23
  %79 = select i1 %78, float %69, float %70, !dbg !23
  %80 = extractelement <8 x float> %62, i64 3, !dbg !26
  %81 = fmul float %80, 0x3FB99999A0000000, !dbg !27
  %82 = extractelement <8 x float> %62, i64 2, !dbg !26
  %83 = fmul float %82, 0x3FB99999A0000000, !dbg !27
  %84 = extractelement <8 x float> %62, i64 1, !dbg !26
  %85 = fmul float %84, 0x3FB99999A0000000, !dbg !27
  %86 = extractelement <8 x float> %62, i64 0, !dbg !26
  %87 = fmul float %86, 0x3FB99999A0000000, !dbg !27
  %88 = extractelement <8 x i1> %71, i64 3, !dbg !26
  %89 = select i1 %88, float %80, float %81, !dbg !26
  %90 = extractelement <8 x i1> %71, i64 2, !dbg !26
  %91 = select i1 %90, float %82, float %83, !dbg !26
  %92 = extractelement <8 x i1> %71, i64 1, !dbg !26
  %93 = select i1 %92, float %84, float %85, !dbg !26
  %94 = extractelement <8 x i1> %71, i64 0, !dbg !26
  %95 = select i1 %94, float %86, float %87, !dbg !26
  %96 = bitcast float %73 to i32, !dbg !28
  %97 = bitcast float %75 to i32, !dbg !28
  %98 = bitcast float %77 to i32, !dbg !28
  %99 = bitcast float %79 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %96, i32 %97, i32 %98, i32 %99, ptr addrspace(1) %23, i1 true) #1, !dbg !28
  %100 = bitcast float %89 to i32, !dbg !29
  %101 = bitcast float %91 to i32, !dbg !29
  %102 = bitcast float %93 to i32, !dbg !29
  %103 = bitcast float %95 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %100, i32 %101, i32 %102, i32 %103, ptr addrspace(1) %41, i1 true) #1, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cinknk5aoojkbfg65kxcc2fyhkzr2savid4i6updl7dall7pzwp4.py", directory: "inductor_cache/in")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_41", linkageName: "triton_poi_fused_convolution_leaky_relu_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 34, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 39, scope: !7)
!29 = !DILocation(line: 40, column: 40, scope: !7)
!30 = !DILocation(line: 40, column: 4, scope: !7)
