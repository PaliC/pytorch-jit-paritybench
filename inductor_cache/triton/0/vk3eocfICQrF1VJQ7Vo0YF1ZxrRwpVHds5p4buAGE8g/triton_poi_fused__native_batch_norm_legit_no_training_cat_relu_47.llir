; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 16, !dbg !14
  %17 = srem i32 %16, 960, !dbg !15
  %18 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen22 = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen22, 15360, !dbg !17
  %20 = sext i32 %17 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %45 = icmp slt i32 %17, 928, !dbg !26
  %46 = mul i32 %19, 15360, !dbg !27
  %srem.decomposed = sub i32 %.frozen22, %46, !dbg !27
  %47 = mul nsw i32 %19, 14848, !dbg !28
  %48 = add nsw i32 %47, %srem.decomposed, !dbg !29
  %49 = sext i32 %48 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !31
  %52 = icmp sgt i32 %17, 927, !dbg !32
  %53 = shl nsw i32 %17, 4, !dbg !33
  %54 = shl nsw i32 %19, 9, !dbg !34
  %55 = add nsw i32 %.decomposed, -14848, !dbg !33
  %56 = add nsw i32 %55, %54, !dbg !35
  %57 = add nsw i32 %56, %53, !dbg !36
  %58 = sext i32 %57 to i64, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !37
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #3, !dbg !38
  %61 = fadd float %28, 0x3EE4F8B580000000, !dbg !39
  %62 = fadd float %30, 0x3EE4F8B580000000, !dbg !39
  %63 = fadd float %32, 0x3EE4F8B580000000, !dbg !39
  %64 = fadd float %34, 0x3EE4F8B580000000, !dbg !39
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %65, 0, !dbg !40
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %66, 0, !dbg !40
  br i1 %.not.i, label %72, label %67, !dbg !40

67:                                               ; preds = %9
  br i1 %.not1.i, label %70, label %68, !dbg !40

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

72:                                               ; preds = %9
  br i1 %.not1.i, label %75, label %73, !dbg !40

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !40
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i4 = icmp eq i32 %77, 0, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i7 = icmp eq i32 %78, 0, !dbg !40
  br i1 %.not.i4, label %84, label %79, !dbg !40

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %82, label %80, !dbg !40

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit8, !dbg !40

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit8, !dbg !40

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %87, label %85, !dbg !40

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit8, !dbg !40

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit8, !dbg !40

__nv_sqrtf.exit8:                                 ; preds = %80, %82, %85, %87
  %.0.i6 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !40
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i9 = icmp eq i32 %89, 0, !dbg !40
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i12 = icmp eq i32 %90, 0, !dbg !40
  br i1 %.not.i9, label %96, label %91, !dbg !40

91:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %94, label %92, !dbg !40

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

96:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %99, label %97, !dbg !40

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

__nv_sqrtf.exit13:                                ; preds = %92, %94, %97, %99
  %.0.i11 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !40
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i14 = icmp eq i32 %101, 0, !dbg !40
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i17 = icmp eq i32 %102, 0, !dbg !40
  br i1 %.not.i14, label %108, label %103, !dbg !40

103:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %106, label %104, !dbg !40

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

108:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %111, label %109, !dbg !40

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

__nv_sqrtf.exit18:                                ; preds = %104, %106, %109, %111
  %.0.i16 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !40
  %113 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !31
  %114 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !38
  %115 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !19
  %116 = insertelement <4 x i32> %115, i32 %24, i64 1, !dbg !19
  %117 = insertelement <4 x i32> %116, i32 %23, i64 2, !dbg !19
  %118 = insertelement <4 x i32> %117, i32 %22, i64 3, !dbg !19
  %119 = bitcast <4 x i32> %118 to <4 x float>, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !38
  %124 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !38
  %126 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !25
  %127 = insertelement <4 x i32> %126, i32 %43, i64 1, !dbg !25
  %128 = insertelement <4 x i32> %127, i32 %42, i64 2, !dbg !25
  %129 = insertelement <4 x i32> %128, i32 %41, i64 3, !dbg !25
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !25
  %131 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !23
  %132 = insertelement <4 x i32> %131, i32 %38, i64 1, !dbg !23
  %133 = insertelement <4 x i32> %132, i32 %37, i64 2, !dbg !23
  %134 = insertelement <4 x i32> %133, i32 %36, i64 3, !dbg !23
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !23
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !41
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !41
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !41
  %140 = insertelement <4 x i1> poison, i1 %45, i64 0, !dbg !42
  %141 = shufflevector <4 x i1> %140, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !42
  %142 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !42
  %143 = insertelement <4 x i32> %142, i32 %120, i64 1, !dbg !42
  %144 = insertelement <4 x i32> %143, i32 %122, i64 2, !dbg !42
  %145 = insertelement <4 x i32> %144, i32 %124, i64 3, !dbg !42
  %146 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !42
  %147 = insertelement <4 x i32> %146, i32 %121, i64 1, !dbg !42
  %148 = insertelement <4 x i32> %147, i32 %123, i64 2, !dbg !42
  %149 = insertelement <4 x i32> %148, i32 %125, i64 3, !dbg !42
  %150 = select <4 x i1> %141, <4 x i32> %145, <4 x i32> %149, !dbg !42
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !42
  %152 = fsub <4 x float> %151, %119, !dbg !43
  %153 = insertelement <4 x float> poison, float %139, i64 0, !dbg !44
  %154 = insertelement <4 x float> %153, float %138, i64 1, !dbg !44
  %155 = insertelement <4 x float> %154, float %137, i64 2, !dbg !44
  %156 = insertelement <4 x float> %155, float %136, i64 3, !dbg !44
  %157 = fmul <4 x float> %152, %156, !dbg !44
  %158 = fmul <4 x float> %157, %135, !dbg !45
  %159 = fadd <4 x float> %158, %130, !dbg !46
  %160 = fcmp olt <4 x float> %159, zeroinitializer, !dbg !47
  %161 = extractelement <4 x i1> %160, i64 3, !dbg !51
  %162 = extractelement <4 x i1> %160, i64 2, !dbg !51
  %163 = extractelement <4 x i1> %160, i64 1, !dbg !51
  %164 = extractelement <4 x i1> %160, i64 0, !dbg !51
  %165 = sext i32 %15 to i64, !dbg !52
  %166 = getelementptr float, ptr addrspace(1) %6, i64 %165, !dbg !52
  %167 = extractelement <4 x i32> %150, i64 0, !dbg !53
  %168 = extractelement <4 x i32> %150, i64 1, !dbg !53
  %169 = extractelement <4 x i32> %150, i64 2, !dbg !53
  %170 = extractelement <4 x i32> %150, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %169, i32 %168, i32 %167, ptr addrspace(1) %166, i1 true) #3, !dbg !53
  %171 = getelementptr float, ptr addrspace(1) %7, i64 %165, !dbg !54
  %bc = bitcast <4 x float> %159 to <4 x i32>, !dbg !55
  %172 = extractelement <4 x i32> %bc, i64 3, !dbg !55
  %173 = select i1 %161, i32 0, i32 %172, !dbg !51
  %bc19 = bitcast <4 x float> %159 to <4 x i32>, !dbg !55
  %174 = extractelement <4 x i32> %bc19, i64 2, !dbg !55
  %175 = select i1 %162, i32 0, i32 %174, !dbg !51
  %bc20 = bitcast <4 x float> %159 to <4 x i32>, !dbg !55
  %176 = extractelement <4 x i32> %bc20, i64 1, !dbg !55
  %177 = select i1 %163, i32 0, i32 %176, !dbg !51
  %bc21 = bitcast <4 x float> %159 to <4 x i32>, !dbg !55
  %178 = extractelement <4 x i32> %bc21, i64 0, !dbg !55
  %179 = select i1 %164, i32 0, i32 %178, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %175, i32 %177, i32 %179, ptr addrspace(1) %171, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmdvsbo72ri365nv5oq6txqnntd3yzqp7abrrb5s35ateyppjyf.py", directory: "inductor_cache/fm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_47", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 51, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 56, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 39, scope: !7)
!34 = !DILocation(line: 41, column: 58, scope: !7)
!35 = !DILocation(line: 41, column: 35, scope: !7)
!36 = !DILocation(line: 41, column: 54, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 63, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 27, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 42, column: 33, scope: !7)
!43 = !DILocation(line: 43, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 55, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 56, column: 25, scope: !7)
!53 = !DILocation(line: 56, column: 37, scope: !7)
!54 = !DILocation(line: 57, column: 25, scope: !7)
!55 = !DILocation(line: 57, column: 37, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
