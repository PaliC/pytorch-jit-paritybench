; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
.peel.next:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 1024, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 2044, !dbg !12
  %13 = sdiv i32 %8, 4, !dbg !13
  %14 = srem i32 %13, 64, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #3, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #3, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #3, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #3, !dbg !16
  %21 = shl i32 %8, 13, !dbg !17
  %22 = or disjoint i32 %21, %12
  %23 = sext i32 %22 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !21
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !20
  %32 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !20
  %33 = insertelement <4 x i32> %32, i32 %30, i64 1, !dbg !20
  %34 = insertelement <4 x i32> %33, i32 %29, i64 2, !dbg !20
  %35 = insertelement <4 x i32> %34, i32 %28, i64 3, !dbg !20
  %36 = bitcast <4 x i32> %35 to <4 x float>, !dbg !20
  %37 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !23
  %38 = bitcast <4 x i32> %37 to <4 x float>, !dbg !23
  %39 = shufflevector <4 x float> %38, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !23
  %40 = fadd <4 x float> %39, %36, !dbg !23
  %bc = bitcast <4 x float> %40 to <4 x i32>, !dbg !24
  %41 = extractelement <4 x i32> %bc, i64 0, !dbg !24
  %bc82 = bitcast <4 x float> %40 to <4 x i32>, !dbg !24
  %42 = extractelement <4 x i32> %bc82, i64 1, !dbg !24
  %bc83 = bitcast <4 x float> %40 to <4 x i32>, !dbg !24
  %43 = extractelement <4 x i32> %bc83, i64 2, !dbg !24
  %bc84 = bitcast <4 x float> %40 to <4 x i32>, !dbg !24
  %44 = extractelement <4 x i32> %bc84, i64 3, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %41, i32 %42, i32 %43, i32 %44, ptr addrspace(1) %24, i1 %9) #3, !dbg !24
  %45 = insertelement <4 x i1> poison, i1 %9, i64 0, !dbg !25
  %46 = shufflevector <4 x i1> %45, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !22
  %48 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !22
  %50 = insertelement <4 x i32> %48, i32 %49, i64 1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !22
  %52 = insertelement <4 x i32> %50, i32 %51, i64 2, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !22
  %54 = insertelement <4 x i32> %52, i32 %53, i64 3, !dbg !22
  %55 = bitcast <4 x i32> %54 to <4 x float>, !dbg !22
  %56 = fadd <4 x float> %40, %55, !dbg !26
  %57 = select <4 x i1> %46, <4 x float> %56, <4 x float> zeroinitializer, !dbg !25
  %58 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %59 = or disjoint i64 %23, 2048, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !20
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !21
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !22
  %69 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !22
  %71 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !22
  %72 = fadd float %58, 1.000000e+00, !dbg !29
  %73 = fadd float %58, 1.000000e+00, !dbg !29
  %74 = fadd float %58, 1.000000e+00, !dbg !29
  %75 = fadd float %58, 1.000000e+00, !dbg !29
  %76 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !20
  %77 = insertelement <4 x i32> %76, i32 %63, i64 1, !dbg !20
  %78 = insertelement <4 x i32> %77, i32 %64, i64 2, !dbg !20
  %79 = insertelement <4 x i32> %78, i32 %65, i64 3, !dbg !20
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !20
  %81 = fadd <4 x float> %39, %80, !dbg !23
  %82 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !22
  %83 = insertelement <4 x i32> %82, i32 %70, i64 1, !dbg !22
  %84 = insertelement <4 x i32> %83, i32 %69, i64 2, !dbg !22
  %85 = insertelement <4 x i32> %84, i32 %68, i64 3, !dbg !22
  %86 = bitcast <4 x i32> %85 to <4 x float>, !dbg !22
  %87 = fadd <4 x float> %81, %86, !dbg !26
  %88 = fsub <4 x float> %87, %57, !dbg !33
  %89 = extractelement <4 x float> %88, i64 0, !dbg !34
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %72) #3, !dbg !34
  %91 = extractelement <4 x float> %88, i64 1, !dbg !34
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %73) #3, !dbg !34
  %93 = extractelement <4 x float> %88, i64 2, !dbg !34
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %74) #3, !dbg !34
  %95 = extractelement <4 x float> %88, i64 3, !dbg !34
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %75) #3, !dbg !34
  %97 = insertelement <4 x float> poison, float %90, i64 0, !dbg !35
  %98 = insertelement <4 x float> %97, float %92, i64 1, !dbg !35
  %99 = insertelement <4 x float> %98, float %94, i64 2, !dbg !35
  %100 = insertelement <4 x float> %99, float %96, i64 3, !dbg !35
  %101 = fadd <4 x float> %57, %100, !dbg !35
  %102 = fsub <4 x float> %87, %101, !dbg !36
  %103 = fmul <4 x float> %88, %102, !dbg !37
  %104 = fadd <4 x float> %103, zeroinitializer, !dbg !38
  %105 = select <4 x i1> %46, <4 x float> %101, <4 x float> zeroinitializer, !dbg !25
  %bc85 = bitcast <4 x float> %81 to <4 x i32>, !dbg !24
  %106 = extractelement <4 x i32> %bc85, i64 0, !dbg !24
  %bc86 = bitcast <4 x float> %81 to <4 x i32>, !dbg !24
  %107 = extractelement <4 x i32> %bc86, i64 1, !dbg !24
  %bc87 = bitcast <4 x float> %81 to <4 x i32>, !dbg !24
  %108 = extractelement <4 x i32> %bc87, i64 2, !dbg !24
  %bc88 = bitcast <4 x float> %81 to <4 x i32>, !dbg !24
  %109 = extractelement <4 x i32> %bc88, i64 3, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %107, i32 %108, i32 %109, ptr addrspace(1) %60, i1 %9) #3, !dbg !24
  %110 = or disjoint i64 %23, 4096, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !19
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !20
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !20
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !20
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !20
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !20
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !21
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %119 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !22
  %120 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !22
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !22
  %122 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !22
  %123 = fadd float %72, 1.000000e+00, !dbg !29
  %124 = select i1 %9, float %123, float 1.000000e+00, !dbg !27
  %125 = fadd float %73, 1.000000e+00, !dbg !29
  %126 = select i1 %9, float %125, float 1.000000e+00, !dbg !27
  %127 = fadd float %74, 1.000000e+00, !dbg !29
  %128 = select i1 %9, float %127, float 1.000000e+00, !dbg !27
  %129 = fadd float %75, 1.000000e+00, !dbg !29
  %130 = select i1 %9, float %129, float 1.000000e+00, !dbg !27
  %131 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !20
  %132 = insertelement <4 x i32> %131, i32 %114, i64 1, !dbg !20
  %133 = insertelement <4 x i32> %132, i32 %115, i64 2, !dbg !20
  %134 = insertelement <4 x i32> %133, i32 %116, i64 3, !dbg !20
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !20
  %136 = fadd <4 x float> %39, %135, !dbg !23
  %137 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !22
  %138 = insertelement <4 x i32> %137, i32 %121, i64 1, !dbg !22
  %139 = insertelement <4 x i32> %138, i32 %120, i64 2, !dbg !22
  %140 = insertelement <4 x i32> %139, i32 %119, i64 3, !dbg !22
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !22
  %142 = fadd <4 x float> %136, %141, !dbg !26
  %143 = fsub <4 x float> %142, %105, !dbg !33
  %144 = extractelement <4 x float> %143, i64 0, !dbg !34
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %124) #3, !dbg !34
  %146 = extractelement <4 x float> %143, i64 1, !dbg !34
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %126) #3, !dbg !34
  %148 = extractelement <4 x float> %143, i64 2, !dbg !34
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %128) #3, !dbg !34
  %150 = extractelement <4 x float> %143, i64 3, !dbg !34
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %130) #3, !dbg !34
  %152 = insertelement <4 x float> poison, float %145, i64 0, !dbg !35
  %153 = insertelement <4 x float> %152, float %147, i64 1, !dbg !35
  %154 = insertelement <4 x float> %153, float %149, i64 2, !dbg !35
  %155 = insertelement <4 x float> %154, float %151, i64 3, !dbg !35
  %156 = fadd <4 x float> %105, %155, !dbg !35
  %157 = fsub <4 x float> %142, %156, !dbg !36
  %158 = fmul <4 x float> %143, %157, !dbg !37
  %159 = fadd <4 x float> %104, %158, !dbg !38
  %160 = select <4 x i1> %46, <4 x float> %156, <4 x float> zeroinitializer, !dbg !25
  %bc85.1 = bitcast <4 x float> %136 to <4 x i32>, !dbg !24
  %161 = extractelement <4 x i32> %bc85.1, i64 0, !dbg !24
  %bc86.1 = bitcast <4 x float> %136 to <4 x i32>, !dbg !24
  %162 = extractelement <4 x i32> %bc86.1, i64 1, !dbg !24
  %bc87.1 = bitcast <4 x float> %136 to <4 x i32>, !dbg !24
  %163 = extractelement <4 x i32> %bc87.1, i64 2, !dbg !24
  %bc88.1 = bitcast <4 x float> %136 to <4 x i32>, !dbg !24
  %164 = extractelement <4 x i32> %bc88.1, i64 3, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %161, i32 %162, i32 %163, i32 %164, ptr addrspace(1) %111, i1 %9) #3, !dbg !24
  %165 = or disjoint i64 %23, 6144, !dbg !28
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !19
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !20
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !20
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !20
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !20
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !21
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !22
  %175 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !22
  %176 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !22
  %178 = fadd float %123, 1.000000e+00, !dbg !29
  %179 = select i1 %9, float %178, float 1.000000e+00, !dbg !27
  %180 = fadd float %125, 1.000000e+00, !dbg !29
  %181 = select i1 %9, float %180, float 1.000000e+00, !dbg !27
  %182 = fadd float %127, 1.000000e+00, !dbg !29
  %183 = select i1 %9, float %182, float 1.000000e+00, !dbg !27
  %184 = fadd float %129, 1.000000e+00, !dbg !29
  %185 = select i1 %9, float %184, float 1.000000e+00, !dbg !27
  %186 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !20
  %187 = insertelement <4 x i32> %186, i32 %169, i64 1, !dbg !20
  %188 = insertelement <4 x i32> %187, i32 %170, i64 2, !dbg !20
  %189 = insertelement <4 x i32> %188, i32 %171, i64 3, !dbg !20
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !20
  %191 = fadd <4 x float> %39, %190, !dbg !23
  %192 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !22
  %193 = insertelement <4 x i32> %192, i32 %176, i64 1, !dbg !22
  %194 = insertelement <4 x i32> %193, i32 %175, i64 2, !dbg !22
  %195 = insertelement <4 x i32> %194, i32 %174, i64 3, !dbg !22
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !22
  %197 = fadd <4 x float> %191, %196, !dbg !26
  %198 = fsub <4 x float> %197, %160, !dbg !33
  %199 = extractelement <4 x float> %198, i64 0, !dbg !34
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %179) #3, !dbg !34
  %201 = extractelement <4 x float> %198, i64 1, !dbg !34
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %181) #3, !dbg !34
  %203 = extractelement <4 x float> %198, i64 2, !dbg !34
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %183) #3, !dbg !34
  %205 = extractelement <4 x float> %198, i64 3, !dbg !34
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %185) #3, !dbg !34
  %207 = insertelement <4 x float> poison, float %200, i64 0, !dbg !35
  %208 = insertelement <4 x float> %207, float %202, i64 1, !dbg !35
  %209 = insertelement <4 x float> %208, float %204, i64 2, !dbg !35
  %210 = insertelement <4 x float> %209, float %206, i64 3, !dbg !35
  %211 = fadd <4 x float> %160, %210, !dbg !35
  %212 = fsub <4 x float> %197, %211, !dbg !36
  %213 = fmul <4 x float> %198, %212, !dbg !37
  %214 = fadd <4 x float> %159, %213, !dbg !38
  %215 = select <4 x i1> %46, <4 x float> %211, <4 x float> zeroinitializer, !dbg !25
  %216 = select <4 x i1> %46, <4 x float> %214, <4 x float> zeroinitializer, !dbg !39
  %217 = select i1 %9, float %178, float 0.000000e+00, !dbg !27
  %218 = select i1 %9, float %180, float 0.000000e+00, !dbg !27
  %219 = select i1 %9, float %182, float 0.000000e+00, !dbg !27
  %220 = select i1 %9, float %184, float 0.000000e+00, !dbg !27
  %bc85.2 = bitcast <4 x float> %191 to <4 x i32>, !dbg !24
  %221 = extractelement <4 x i32> %bc85.2, i64 0, !dbg !24
  %bc86.2 = bitcast <4 x float> %191 to <4 x i32>, !dbg !24
  %222 = extractelement <4 x i32> %bc86.2, i64 1, !dbg !24
  %bc87.2 = bitcast <4 x float> %191 to <4 x i32>, !dbg !24
  %223 = extractelement <4 x i32> %bc87.2, i64 2, !dbg !24
  %bc88.2 = bitcast <4 x float> %191 to <4 x i32>, !dbg !24
  %224 = extractelement <4 x i32> %bc88.2, i64 3, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %221, i32 %222, i32 %223, i32 %224, ptr addrspace(1) %166, i1 %9) #3, !dbg !24
  %225 = lshr i32 %10, 5, !dbg !12
  %226 = and i32 %10, 31, !dbg !12
  %227 = extractelement <4 x float> %215, i64 0, !dbg !40
  %228 = extractelement <4 x float> %215, i64 1, !dbg !40
  %229 = fsub float %228, %227, !dbg !40
  %230 = fadd float %217, %218, !dbg !43
  %231 = fcmp oeq float %230, 0.000000e+00, !dbg !44
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %230) #3, !dbg !45
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !46
  %234 = fmul float %229, %233, !dbg !47
  %235 = fadd float %227, %234, !dbg !48
  %shift = shufflevector <4 x float> %216, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !49
  %236 = fadd <4 x float> %216, %shift, !dbg !49
  %237 = extractelement <4 x float> %236, i64 0, !dbg !49
  %238 = fmul float %229, %229, !dbg !50
  %239 = fmul float %238, %217, !dbg !51
  %240 = fmul float %239, %233, !dbg !52
  %241 = fadd float %237, %240, !dbg !53
  %242 = extractelement <4 x float> %215, i64 2, !dbg !40
  %243 = fsub float %242, %235, !dbg !40
  %244 = fadd float %219, %230, !dbg !43
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !44
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %244) #3, !dbg !45
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !46
  %248 = fmul float %247, %243, !dbg !47
  %249 = fadd float %235, %248, !dbg !48
  %250 = extractelement <4 x float> %216, i64 2, !dbg !49
  %251 = fadd float %250, %241, !dbg !49
  %252 = fmul float %243, %243, !dbg !50
  %253 = fmul float %230, %252, !dbg !51
  %254 = fmul float %247, %253, !dbg !52
  %255 = fadd float %251, %254, !dbg !53
  %256 = extractelement <4 x float> %215, i64 3, !dbg !40
  %257 = fsub float %256, %249, !dbg !40
  %258 = fadd float %220, %244, !dbg !43
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !44
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %258) #3, !dbg !45
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !46
  %262 = fmul float %261, %257, !dbg !47
  %263 = fadd float %249, %262, !dbg !48
  %264 = extractelement <4 x float> %216, i64 3, !dbg !49
  %265 = fadd float %264, %255, !dbg !49
  %266 = fmul float %257, %257, !dbg !50
  %267 = fmul float %244, %266, !dbg !51
  %268 = fmul float %261, %267, !dbg !52
  %269 = fadd float %265, %268, !dbg !53
  %270 = bitcast float %263 to i32, !dbg !54
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 16, i32 31), !dbg !54
  %272 = bitcast i32 %271 to float, !dbg !54
  %273 = bitcast float %269 to i32, !dbg !54
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 16, i32 31), !dbg !54
  %275 = bitcast i32 %274 to float, !dbg !54
  %276 = bitcast float %258 to i32, !dbg !54
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !54
  %278 = bitcast i32 %277 to float, !dbg !54
  %279 = fsub float %272, %263, !dbg !40
  %280 = fadd float %258, %278, !dbg !43
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !44
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %280) #3, !dbg !45
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !46
  %284 = fmul float %283, %279, !dbg !47
  %285 = fadd float %263, %284, !dbg !48
  %286 = fadd float %269, %275, !dbg !49
  %287 = fmul float %279, %279, !dbg !50
  %288 = fmul float %258, %287, !dbg !51
  %289 = fmul float %283, %288, !dbg !52
  %290 = fadd float %286, %289, !dbg !53
  %291 = bitcast float %285 to i32, !dbg !54
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !54
  %293 = bitcast i32 %292 to float, !dbg !54
  %294 = bitcast float %290 to i32, !dbg !54
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !54
  %296 = bitcast i32 %295 to float, !dbg !54
  %297 = bitcast float %280 to i32, !dbg !54
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !54
  %299 = bitcast i32 %298 to float, !dbg !54
  %300 = fsub float %293, %285, !dbg !40
  %301 = fadd float %280, %299, !dbg !43
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !44
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %301) #3, !dbg !45
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !46
  %305 = fmul float %300, %304, !dbg !47
  %306 = fadd float %285, %305, !dbg !48
  %307 = fadd float %290, %296, !dbg !49
  %308 = fmul float %300, %300, !dbg !50
  %309 = fmul float %280, %308, !dbg !51
  %310 = fmul float %304, %309, !dbg !52
  %311 = fadd float %307, %310, !dbg !53
  %312 = bitcast float %306 to i32, !dbg !54
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !54
  %314 = bitcast i32 %313 to float, !dbg !54
  %315 = bitcast float %311 to i32, !dbg !54
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 4, i32 31), !dbg !54
  %317 = bitcast i32 %316 to float, !dbg !54
  %318 = bitcast float %301 to i32, !dbg !54
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !54
  %320 = bitcast i32 %319 to float, !dbg !54
  %321 = fsub float %314, %306, !dbg !40
  %322 = fadd float %301, %320, !dbg !43
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !44
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float %322) #3, !dbg !45
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !46
  %326 = fmul float %321, %325, !dbg !47
  %327 = fadd float %306, %326, !dbg !48
  %328 = fadd float %311, %317, !dbg !49
  %329 = fmul float %321, %321, !dbg !50
  %330 = fmul float %301, %329, !dbg !51
  %331 = fmul float %325, %330, !dbg !52
  %332 = fadd float %328, %331, !dbg !53
  %333 = bitcast float %327 to i32, !dbg !54
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !54
  %335 = bitcast i32 %334 to float, !dbg !54
  %336 = bitcast float %332 to i32, !dbg !54
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !54
  %338 = bitcast i32 %337 to float, !dbg !54
  %339 = bitcast float %322 to i32, !dbg !54
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !54
  %341 = bitcast i32 %340 to float, !dbg !54
  %342 = fsub float %335, %327, !dbg !40
  %343 = fadd float %322, %341, !dbg !43
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !44
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #3, !dbg !45
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !46
  %347 = fmul float %342, %346, !dbg !47
  %348 = fadd float %327, %347, !dbg !48
  %349 = fadd float %332, %338, !dbg !49
  %350 = fmul float %342, %342, !dbg !50
  %351 = fmul float %322, %350, !dbg !51
  %352 = fmul float %346, %351, !dbg !52
  %353 = fadd float %349, %352, !dbg !53
  %354 = bitcast float %348 to i32, !dbg !54
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !54
  %356 = bitcast i32 %355 to float, !dbg !54
  %357 = bitcast float %353 to i32, !dbg !54
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !54
  %359 = bitcast i32 %358 to float, !dbg !54
  %360 = bitcast float %343 to i32, !dbg !54
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !54
  %362 = bitcast i32 %361 to float, !dbg !54
  %363 = fsub float %356, %348, !dbg !40
  %364 = fadd float %343, %362, !dbg !43
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !44
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #3, !dbg !45
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !46
  %368 = fmul float %363, %367, !dbg !47
  %369 = fadd float %348, %368, !dbg !48
  %370 = fadd float %353, %359, !dbg !49
  %371 = fmul float %363, %363, !dbg !50
  %372 = fmul float %343, %371, !dbg !51
  %373 = fmul float %367, %372, !dbg !52
  %374 = fadd float %370, %373, !dbg !53
  %375 = icmp eq i32 %226, 0, !dbg !54
  %376 = and i32 %225, 15, !dbg !54
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %376, !dbg !54
  %378 = bitcast float %369 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 %375) #3, !dbg !54
  %379 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %376, !dbg !54
  %380 = bitcast float %374 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 %375) #3, !dbg !54
  %381 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %376, !dbg !54
  %382 = bitcast float %364 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 %375) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %383 = icmp slt i32 %10, 16, !dbg !54
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !54
  %385 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %384, i1 %383) #3, !dbg !54
  %386 = bitcast i32 %385 to float, !dbg !54
  %387 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !54
  %388 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %387, i1 %383) #3, !dbg !54
  %389 = bitcast i32 %388 to float, !dbg !54
  %390 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !54
  %391 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %390, i1 %383) #3, !dbg !54
  %392 = bitcast i32 %391 to float, !dbg !54
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 8, i32 31), !dbg !54
  %394 = bitcast i32 %393 to float, !dbg !54
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 8, i32 31), !dbg !54
  %396 = bitcast i32 %395 to float, !dbg !54
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 8, i32 31), !dbg !54
  %398 = bitcast i32 %397 to float, !dbg !54
  %399 = fsub float %394, %386, !dbg !40
  %400 = fadd float %392, %398, !dbg !43
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !44
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %398, float %400) #3, !dbg !45
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !46
  %404 = fmul float %399, %403, !dbg !47
  %405 = fadd float %404, %386, !dbg !48
  %406 = fadd float %389, %396, !dbg !49
  %407 = fmul float %399, %399, !dbg !50
  %408 = fmul float %407, %392, !dbg !51
  %409 = fmul float %408, %403, !dbg !52
  %410 = fadd float %406, %409, !dbg !53
  %411 = bitcast float %405 to i32, !dbg !54
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 4, i32 31), !dbg !54
  %413 = bitcast i32 %412 to float, !dbg !54
  %414 = bitcast float %410 to i32, !dbg !54
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 4, i32 31), !dbg !54
  %416 = bitcast i32 %415 to float, !dbg !54
  %417 = bitcast float %400 to i32, !dbg !54
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 4, i32 31), !dbg !54
  %419 = bitcast i32 %418 to float, !dbg !54
  %420 = fsub float %413, %405, !dbg !40
  %421 = fadd float %400, %419, !dbg !43
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !44
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float %421) #3, !dbg !45
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !46
  %425 = fmul float %420, %424, !dbg !47
  %426 = fadd float %405, %425, !dbg !48
  %427 = fadd float %410, %416, !dbg !49
  %428 = fmul float %420, %420, !dbg !50
  %429 = fmul float %400, %428, !dbg !51
  %430 = fmul float %424, %429, !dbg !52
  %431 = fadd float %427, %430, !dbg !53
  %432 = bitcast float %426 to i32, !dbg !54
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 2, i32 31), !dbg !54
  %434 = bitcast i32 %433 to float, !dbg !54
  %435 = bitcast float %431 to i32, !dbg !54
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 2, i32 31), !dbg !54
  %437 = bitcast i32 %436 to float, !dbg !54
  %438 = bitcast float %421 to i32, !dbg !54
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 2, i32 31), !dbg !54
  %440 = bitcast i32 %439 to float, !dbg !54
  %441 = fsub float %434, %426, !dbg !40
  %442 = fadd float %421, %440, !dbg !43
  %443 = fcmp oeq float %442, 0.000000e+00, !dbg !44
  %444 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float %442) #3, !dbg !45
  %445 = select i1 %443, float 0.000000e+00, float %444, !dbg !46
  %446 = fmul float %441, %445, !dbg !47
  %447 = fadd float %426, %446, !dbg !48
  %448 = fadd float %431, %437, !dbg !49
  %449 = fmul float %441, %441, !dbg !50
  %450 = fmul float %421, %449, !dbg !51
  %451 = fmul float %445, %450, !dbg !52
  %452 = fadd float %448, %451, !dbg !53
  %453 = bitcast float %447 to i32, !dbg !54
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 1, i32 31), !dbg !54
  %455 = bitcast i32 %454 to float, !dbg !54
  %456 = bitcast float %452 to i32, !dbg !54
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 1, i32 31), !dbg !54
  %458 = bitcast i32 %457 to float, !dbg !54
  %459 = bitcast float %442 to i32, !dbg !54
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %459, i32 1, i32 31), !dbg !54
  %461 = bitcast i32 %460 to float, !dbg !54
  %462 = fsub float %455, %447, !dbg !40
  %463 = fadd float %442, %461, !dbg !43
  %464 = fcmp oeq float %463, 0.000000e+00, !dbg !44
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %461, float %463) #3, !dbg !45
  %466 = select i1 %464, float 0.000000e+00, float %465, !dbg !46
  %467 = fmul float %462, %466, !dbg !47
  %468 = fadd float %447, %467, !dbg !48
  %469 = fadd float %452, %458, !dbg !49
  %470 = fmul float %462, %462, !dbg !50
  %471 = fmul float %442, %470, !dbg !51
  %472 = fmul float %466, %471, !dbg !52
  %473 = fadd float %469, %472, !dbg !53
  %474 = and i32 %10, 15, !dbg !54
  %475 = icmp eq i32 %474, 0, !dbg !54
  %476 = and i1 %383, %475, !dbg !54
  %477 = bitcast float %468 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %477, i1 %476) #3, !dbg !54
  %478 = bitcast float %473 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %478, i1 %476) #3, !dbg !54
  %479 = bitcast float %463 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %479, i1 %476) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %480 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !54
  %481 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !54
  %482 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !54
  %483 = sext i32 %8 to i64, !dbg !55
  %484 = getelementptr float, ptr addrspace(1) %3, i64 %483, !dbg !55
  %urem = and i32 %10, 511, !dbg !56
  %485 = icmp eq i32 %urem, 0, !dbg !56
  %486 = and i1 %485, %9, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %480, ptr addrspace(1) %484, i1 %486) #3, !dbg !56
  %487 = getelementptr float, ptr addrspace(1) %4, i64 %483, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %481, ptr addrspace(1) %487, i1 %486) #3, !dbg !58
  %488 = getelementptr float, ptr addrspace(1) %5, i64 %483, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %482, ptr addrspace(1) %488, i1 %486) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5qosr5d3twjda6kzudgbrl56uxsq77yaumqi7jm6dx53vczyuzk.py", directory: "inductor_cache/5q")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_11, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_11", linkageName: "triton_red_fused_convolution_native_group_norm_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 21, scope: !7)
!14 = !DILocation(line: 27, column: 26, scope: !7)
!15 = !DILocation(line: 28, column: 30, scope: !7)
!16 = !DILocation(line: 28, column: 35, scope: !7)
!17 = !DILocation(line: 36, column: 48, scope: !7)
!18 = !DILocation(line: 32, column: 36, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 53, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 49, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 47, column: 53, scope: !7)
!25 = !DILocation(line: 44, column: 60, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 46, column: 64, scope: !7)
!28 = !DILocation(line: 36, column: 43, scope: !7)
!29 = !DILocation(line: 184, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 42, column: 51, scope: !7)
!33 = !DILocation(line: 183, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 185, column: 34, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 185, column: 26, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 186, column: 39, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 186, column: 31, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 186, column: 22, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 45, column: 56, scope: !7)
!40 = !DILocation(line: 192, column: 21, scope: !41, inlinedAt: !42)
!41 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!42 = !DILocation(line: 49, column: 41, scope: !7)
!43 = !DILocation(line: 193, column: 28, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 194, column: 39, scope: !41, inlinedAt: !42)
!45 = !DILocation(line: 194, column: 60, scope: !41, inlinedAt: !42)
!46 = !DILocation(line: 194, column: 49, scope: !41, inlinedAt: !42)
!47 = !DILocation(line: 196, column: 25, scope: !41, inlinedAt: !42)
!48 = !DILocation(line: 196, column: 17, scope: !41, inlinedAt: !42)
!49 = !DILocation(line: 197, column: 15, scope: !41, inlinedAt: !42)
!50 = !DILocation(line: 197, column: 30, scope: !41, inlinedAt: !42)
!51 = !DILocation(line: 197, column: 38, scope: !41, inlinedAt: !42)
!52 = !DILocation(line: 197, column: 49, scope: !41, inlinedAt: !42)
!53 = !DILocation(line: 197, column: 22, scope: !41, inlinedAt: !42)
!54 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !42)
!55 = !DILocation(line: 54, column: 25, scope: !7)
!56 = !DILocation(line: 54, column: 36, scope: !7)
!57 = !DILocation(line: 55, column: 25, scope: !7)
!58 = !DILocation(line: 55, column: 36, scope: !7)
!59 = !DILocation(line: 56, column: 25, scope: !7)
!60 = !DILocation(line: 56, column: 36, scope: !7)
!61 = !DILocation(line: 56, column: 4, scope: !7)
