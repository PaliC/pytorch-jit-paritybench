; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp slt i32 %20, 256, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 6, !dbg !16
  %28 = or disjoint i32 %27, %15, !dbg !17
  %29 = or disjoint i32 %27, %10, !dbg !17
  %30 = or disjoint i32 %27, %11, !dbg !17
  %31 = or disjoint i32 %27, %12, !dbg !17
  %32 = or disjoint i32 %27, %13, !dbg !17
  %33 = icmp slt i32 %28, 196, !dbg !18
  %34 = icmp slt i32 %29, 196, !dbg !18
  %35 = icmp slt i32 %30, 196, !dbg !18
  %36 = icmp slt i32 %31, 196, !dbg !18
  %37 = icmp slt i32 %32, 196, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %38 = sdiv i32 %.frozen, 8, !dbg !19
  %39 = mul i32 %38, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %.frozen38 = freeze i32 %17, !dbg !19
  %40 = sdiv i32 %.frozen38, 8, !dbg !19
  %41 = mul i32 %40, 8, !dbg !20
  %.decomposed39 = sub i32 %.frozen38, %41, !dbg !20
  %.frozen40 = freeze i32 %18, !dbg !19
  %42 = sdiv i32 %.frozen40, 8, !dbg !19
  %43 = mul i32 %42, 8, !dbg !20
  %.decomposed41 = sub i32 %.frozen40, %43, !dbg !20
  %.frozen42 = freeze i32 %19, !dbg !19
  %44 = sdiv i32 %.frozen42, 8, !dbg !19
  %45 = mul i32 %44, 8, !dbg !20
  %.decomposed43 = sub i32 %.frozen42, %45, !dbg !20
  %.frozen44 = freeze i32 %20, !dbg !21
  %46 = sdiv i32 %.frozen44, 64, !dbg !21
  %47 = mul i32 %46, 64, !dbg !22
  %.decomposed45 = sub i32 %.frozen44, %47, !dbg !22
  %48 = mul nsw i32 %.decomposed, 392, !dbg !23
  %49 = mul nsw i32 %.decomposed39, 392, !dbg !23
  %50 = mul nsw i32 %.decomposed41, 392, !dbg !23
  %51 = mul nsw i32 %.decomposed43, 392, !dbg !23
  %52 = mul i32 %38, 6272, !dbg !24
  %53 = mul i32 %40, 6272, !dbg !24
  %54 = mul i32 %42, 6272, !dbg !24
  %55 = mul i32 %44, 6272, !dbg !24
  %56 = add i32 %52, %48, !dbg !25
  %57 = add i32 %56, %28, !dbg !26
  %58 = add i32 %53, %49, !dbg !25
  %59 = add i32 %58, %28, !dbg !26
  %60 = add i32 %54, %50, !dbg !25
  %61 = add i32 %60, %28, !dbg !26
  %62 = add i32 %55, %51, !dbg !25
  %63 = add i32 %62, %28, !dbg !26
  %64 = sext i32 %57 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !27
  %66 = sext i32 %59 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !27
  %68 = sext i32 %61 to i64, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !27
  %70 = sext i32 %63 to i64, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !27
  %72 = and i1 %21, %33, !dbg !28
  %73 = and i1 %22, %33, !dbg !28
  %74 = and i1 %23, %33, !dbg !28
  %75 = and i1 %24, %33, !dbg !28
  %76 = and i1 %25, %34, !dbg !28
  %77 = and i1 %25, %35, !dbg !28
  %78 = and i1 %25, %36, !dbg !28
  %79 = and i1 %25, %37, !dbg !28
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %72) #2, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !29
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %73) #2, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !29
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %74) #2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !29
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %75) #2, !dbg !29
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !29
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !29
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !29
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !29
  %100 = add i32 %28, 196, !dbg !30
  %101 = add i32 %56, %100, !dbg !31
  %102 = add i32 %58, %100, !dbg !31
  %103 = add i32 %60, %100, !dbg !31
  %104 = add i32 %62, %100, !dbg !31
  %105 = sext i32 %101 to i64, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !32
  %107 = sext i32 %102 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !32
  %109 = sext i32 %103 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !32
  %111 = sext i32 %104 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !32
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %72) #2, !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !33
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !33
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !33
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !33
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %73) #2, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !33
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %74) #2, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !33
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %75) #2, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !33
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !33
  %133 = add i32 %28, 3136, !dbg !34
  %134 = add i32 %56, %133, !dbg !35
  %135 = add i32 %58, %133, !dbg !35
  %136 = add i32 %60, %133, !dbg !35
  %137 = add i32 %62, %133, !dbg !35
  %138 = sext i32 %134 to i64, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !36
  %140 = sext i32 %135 to i64, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !36
  %142 = sext i32 %136 to i64, !dbg !36
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !36
  %144 = sext i32 %137 to i64, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !36
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %72) #2, !dbg !37
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !37
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !37
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !37
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !37
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %73) #2, !dbg !37
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !37
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !37
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !37
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !37
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %74) #2, !dbg !37
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !37
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !37
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !37
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !37
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %75) #2, !dbg !37
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !37
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !37
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !37
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !37
  %166 = add i32 %28, 3332, !dbg !38
  %167 = add i32 %56, %166, !dbg !39
  %168 = add i32 %58, %166, !dbg !39
  %169 = add i32 %60, %166, !dbg !39
  %170 = add i32 %62, %166, !dbg !39
  %171 = sext i32 %167 to i64, !dbg !40
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !40
  %173 = sext i32 %168 to i64, !dbg !40
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !40
  %175 = sext i32 %169 to i64, !dbg !40
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !40
  %177 = sext i32 %170 to i64, !dbg !40
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !40
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %72) #2, !dbg !41
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !41
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !41
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !41
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !41
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %73) #2, !dbg !41
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !41
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !41
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !41
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !41
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %74) #2, !dbg !41
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !41
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !41
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !41
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !41
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %75) #2, !dbg !41
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !41
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !41
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !41
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !41
  %199 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !29
  %200 = insertelement <4 x i32> %199, i32 %82, i64 1, !dbg !29
  %201 = insertelement <4 x i32> %200, i32 %83, i64 2, !dbg !29
  %202 = insertelement <4 x i32> %201, i32 %84, i64 3, !dbg !29
  %203 = bitcast <4 x i32> %202 to <4 x float>, !dbg !29
  %204 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !33
  %205 = insertelement <4 x i32> %204, i32 %115, i64 1, !dbg !33
  %206 = insertelement <4 x i32> %205, i32 %116, i64 2, !dbg !33
  %207 = insertelement <4 x i32> %206, i32 %117, i64 3, !dbg !33
  %208 = bitcast <4 x i32> %207 to <4 x float>, !dbg !33
  %209 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !37
  %210 = insertelement <4 x i32> %209, i32 %148, i64 1, !dbg !37
  %211 = insertelement <4 x i32> %210, i32 %149, i64 2, !dbg !37
  %212 = insertelement <4 x i32> %211, i32 %150, i64 3, !dbg !37
  %213 = bitcast <4 x i32> %212 to <4 x float>, !dbg !37
  %214 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !41
  %215 = insertelement <4 x i32> %214, i32 %181, i64 1, !dbg !41
  %216 = insertelement <4 x i32> %215, i32 %182, i64 2, !dbg !41
  %217 = insertelement <4 x i32> %216, i32 %183, i64 3, !dbg !41
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !41
  %219 = fcmp ogt <4 x float> %208, %203, !dbg !42
  %220 = zext <4 x i1> %219 to <4 x i8>, !dbg !43
  %221 = fcmp uno <4 x float> %208, zeroinitializer, !dbg !44
  %222 = or <4 x i1> %219, %221, !dbg !48
  %.v = select <4 x i1> %222, <4 x i32> %207, <4 x i32> %202, !dbg !49
  %223 = bitcast <4 x i32> %.v to <4 x float>, !dbg !49
  %224 = fcmp olt <4 x float> %223, %213, !dbg !50
  %225 = select <4 x i1> %224, <4 x i8> splat (i8 2), <4 x i8> %220, !dbg !51
  %226 = fcmp uno <4 x float> %213, zeroinitializer, !dbg !52
  %227 = or <4 x i1> %224, %226, !dbg !54
  %.v31 = select <4 x i1> %227, <4 x i32> %212, <4 x i32> %.v, !dbg !55
  %228 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !55
  %229 = fcmp olt <4 x float> %228, %218, !dbg !56
  %230 = select <4 x i1> %229, <4 x i8> splat (i8 3), <4 x i8> %225, !dbg !57
  %231 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !29
  %232 = insertelement <4 x i32> %231, i32 %87, i64 1, !dbg !29
  %233 = insertelement <4 x i32> %232, i32 %88, i64 2, !dbg !29
  %234 = insertelement <4 x i32> %233, i32 %89, i64 3, !dbg !29
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !29
  %236 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !33
  %237 = insertelement <4 x i32> %236, i32 %120, i64 1, !dbg !33
  %238 = insertelement <4 x i32> %237, i32 %121, i64 2, !dbg !33
  %239 = insertelement <4 x i32> %238, i32 %122, i64 3, !dbg !33
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !33
  %241 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !37
  %242 = insertelement <4 x i32> %241, i32 %153, i64 1, !dbg !37
  %243 = insertelement <4 x i32> %242, i32 %154, i64 2, !dbg !37
  %244 = insertelement <4 x i32> %243, i32 %155, i64 3, !dbg !37
  %245 = bitcast <4 x i32> %244 to <4 x float>, !dbg !37
  %246 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !41
  %247 = insertelement <4 x i32> %246, i32 %186, i64 1, !dbg !41
  %248 = insertelement <4 x i32> %247, i32 %187, i64 2, !dbg !41
  %249 = insertelement <4 x i32> %248, i32 %188, i64 3, !dbg !41
  %250 = bitcast <4 x i32> %249 to <4 x float>, !dbg !41
  %251 = fcmp ogt <4 x float> %240, %235, !dbg !42
  %252 = zext <4 x i1> %251 to <4 x i8>, !dbg !43
  %253 = fcmp uno <4 x float> %240, zeroinitializer, !dbg !44
  %254 = or <4 x i1> %251, %253, !dbg !48
  %.v32 = select <4 x i1> %254, <4 x i32> %239, <4 x i32> %234, !dbg !49
  %255 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !49
  %256 = fcmp olt <4 x float> %255, %245, !dbg !50
  %257 = select <4 x i1> %256, <4 x i8> splat (i8 2), <4 x i8> %252, !dbg !51
  %258 = fcmp uno <4 x float> %245, zeroinitializer, !dbg !52
  %259 = or <4 x i1> %256, %258, !dbg !54
  %.v33 = select <4 x i1> %259, <4 x i32> %244, <4 x i32> %.v32, !dbg !55
  %260 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !55
  %261 = fcmp olt <4 x float> %260, %250, !dbg !56
  %262 = select <4 x i1> %261, <4 x i8> splat (i8 3), <4 x i8> %257, !dbg !57
  %263 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !29
  %264 = insertelement <4 x i32> %263, i32 %92, i64 1, !dbg !29
  %265 = insertelement <4 x i32> %264, i32 %93, i64 2, !dbg !29
  %266 = insertelement <4 x i32> %265, i32 %94, i64 3, !dbg !29
  %267 = bitcast <4 x i32> %266 to <4 x float>, !dbg !29
  %268 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !33
  %269 = insertelement <4 x i32> %268, i32 %125, i64 1, !dbg !33
  %270 = insertelement <4 x i32> %269, i32 %126, i64 2, !dbg !33
  %271 = insertelement <4 x i32> %270, i32 %127, i64 3, !dbg !33
  %272 = bitcast <4 x i32> %271 to <4 x float>, !dbg !33
  %273 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !37
  %274 = insertelement <4 x i32> %273, i32 %158, i64 1, !dbg !37
  %275 = insertelement <4 x i32> %274, i32 %159, i64 2, !dbg !37
  %276 = insertelement <4 x i32> %275, i32 %160, i64 3, !dbg !37
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !37
  %278 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !41
  %279 = insertelement <4 x i32> %278, i32 %191, i64 1, !dbg !41
  %280 = insertelement <4 x i32> %279, i32 %192, i64 2, !dbg !41
  %281 = insertelement <4 x i32> %280, i32 %193, i64 3, !dbg !41
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !41
  %283 = fcmp ogt <4 x float> %272, %267, !dbg !42
  %284 = zext <4 x i1> %283 to <4 x i8>, !dbg !43
  %285 = fcmp uno <4 x float> %272, zeroinitializer, !dbg !44
  %286 = or <4 x i1> %283, %285, !dbg !48
  %.v34 = select <4 x i1> %286, <4 x i32> %271, <4 x i32> %266, !dbg !49
  %287 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !49
  %288 = fcmp olt <4 x float> %287, %277, !dbg !50
  %289 = select <4 x i1> %288, <4 x i8> splat (i8 2), <4 x i8> %284, !dbg !51
  %290 = fcmp uno <4 x float> %277, zeroinitializer, !dbg !52
  %291 = or <4 x i1> %288, %290, !dbg !54
  %.v35 = select <4 x i1> %291, <4 x i32> %276, <4 x i32> %.v34, !dbg !55
  %292 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !55
  %293 = fcmp olt <4 x float> %292, %282, !dbg !56
  %294 = select <4 x i1> %293, <4 x i8> splat (i8 3), <4 x i8> %289, !dbg !57
  %295 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !29
  %296 = insertelement <4 x i32> %295, i32 %97, i64 1, !dbg !29
  %297 = insertelement <4 x i32> %296, i32 %98, i64 2, !dbg !29
  %298 = insertelement <4 x i32> %297, i32 %99, i64 3, !dbg !29
  %299 = bitcast <4 x i32> %298 to <4 x float>, !dbg !29
  %300 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !33
  %301 = insertelement <4 x i32> %300, i32 %130, i64 1, !dbg !33
  %302 = insertelement <4 x i32> %301, i32 %131, i64 2, !dbg !33
  %303 = insertelement <4 x i32> %302, i32 %132, i64 3, !dbg !33
  %304 = bitcast <4 x i32> %303 to <4 x float>, !dbg !33
  %305 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !37
  %306 = insertelement <4 x i32> %305, i32 %163, i64 1, !dbg !37
  %307 = insertelement <4 x i32> %306, i32 %164, i64 2, !dbg !37
  %308 = insertelement <4 x i32> %307, i32 %165, i64 3, !dbg !37
  %309 = bitcast <4 x i32> %308 to <4 x float>, !dbg !37
  %310 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !41
  %311 = insertelement <4 x i32> %310, i32 %196, i64 1, !dbg !41
  %312 = insertelement <4 x i32> %311, i32 %197, i64 2, !dbg !41
  %313 = insertelement <4 x i32> %312, i32 %198, i64 3, !dbg !41
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !41
  %315 = fcmp ogt <4 x float> %304, %299, !dbg !42
  %316 = zext <4 x i1> %315 to <4 x i8>, !dbg !43
  %317 = fcmp uno <4 x float> %304, zeroinitializer, !dbg !44
  %318 = or <4 x i1> %315, %317, !dbg !48
  %.v36 = select <4 x i1> %318, <4 x i32> %303, <4 x i32> %298, !dbg !49
  %319 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !49
  %320 = fcmp olt <4 x float> %319, %309, !dbg !50
  %321 = select <4 x i1> %320, <4 x i8> splat (i8 2), <4 x i8> %316, !dbg !51
  %322 = fcmp uno <4 x float> %309, zeroinitializer, !dbg !52
  %323 = or <4 x i1> %320, %322, !dbg !54
  %.v37 = select <4 x i1> %323, <4 x i32> %308, <4 x i32> %.v36, !dbg !55
  %324 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !55
  %325 = fcmp olt <4 x float> %324, %314, !dbg !56
  %326 = select <4 x i1> %325, <4 x i8> splat (i8 3), <4 x i8> %321, !dbg !57
  %327 = bitcast i32 %180 to float, !dbg !58
  %328 = fcmp uno float %327, 0.000000e+00, !dbg !58
  %329 = bitcast i32 %181 to float, !dbg !58
  %330 = fcmp uno float %329, 0.000000e+00, !dbg !58
  %331 = bitcast i32 %182 to float, !dbg !58
  %332 = fcmp uno float %331, 0.000000e+00, !dbg !58
  %333 = bitcast i32 %183 to float, !dbg !58
  %334 = fcmp uno float %333, 0.000000e+00, !dbg !58
  %335 = bitcast i32 %185 to float, !dbg !58
  %336 = fcmp uno float %335, 0.000000e+00, !dbg !58
  %337 = bitcast i32 %186 to float, !dbg !58
  %338 = fcmp uno float %337, 0.000000e+00, !dbg !58
  %339 = bitcast i32 %187 to float, !dbg !58
  %340 = fcmp uno float %339, 0.000000e+00, !dbg !58
  %341 = bitcast i32 %188 to float, !dbg !58
  %342 = fcmp uno float %341, 0.000000e+00, !dbg !58
  %343 = bitcast i32 %190 to float, !dbg !58
  %344 = fcmp uno float %343, 0.000000e+00, !dbg !58
  %345 = bitcast i32 %191 to float, !dbg !58
  %346 = fcmp uno float %345, 0.000000e+00, !dbg !58
  %347 = bitcast i32 %192 to float, !dbg !58
  %348 = fcmp uno float %347, 0.000000e+00, !dbg !58
  %349 = bitcast i32 %193 to float, !dbg !58
  %350 = fcmp uno float %349, 0.000000e+00, !dbg !58
  %351 = bitcast i32 %195 to float, !dbg !58
  %352 = fcmp uno float %351, 0.000000e+00, !dbg !58
  %353 = bitcast i32 %196 to float, !dbg !58
  %354 = fcmp uno float %353, 0.000000e+00, !dbg !58
  %355 = bitcast i32 %197 to float, !dbg !58
  %356 = fcmp uno float %355, 0.000000e+00, !dbg !58
  %357 = bitcast i32 %198 to float, !dbg !58
  %358 = fcmp uno float %357, 0.000000e+00, !dbg !58
  %359 = extractelement <4 x i1> %229, i64 0, !dbg !60
  %360 = or i1 %359, %328, !dbg !60
  %361 = extractelement <4 x i1> %229, i64 1, !dbg !60
  %362 = or i1 %361, %330, !dbg !60
  %363 = extractelement <4 x i1> %229, i64 2, !dbg !60
  %364 = or i1 %363, %332, !dbg !60
  %365 = extractelement <4 x i1> %229, i64 3, !dbg !60
  %366 = or i1 %365, %334, !dbg !60
  %367 = extractelement <4 x i1> %261, i64 0, !dbg !60
  %368 = or i1 %367, %336, !dbg !60
  %369 = extractelement <4 x i1> %261, i64 1, !dbg !60
  %370 = or i1 %369, %338, !dbg !60
  %371 = extractelement <4 x i1> %261, i64 2, !dbg !60
  %372 = or i1 %371, %340, !dbg !60
  %373 = extractelement <4 x i1> %261, i64 3, !dbg !60
  %374 = or i1 %373, %342, !dbg !60
  %375 = extractelement <4 x i1> %293, i64 0, !dbg !60
  %376 = or i1 %375, %344, !dbg !60
  %377 = extractelement <4 x i1> %293, i64 1, !dbg !60
  %378 = or i1 %377, %346, !dbg !60
  %379 = extractelement <4 x i1> %293, i64 2, !dbg !60
  %380 = or i1 %379, %348, !dbg !60
  %381 = extractelement <4 x i1> %293, i64 3, !dbg !60
  %382 = or i1 %381, %350, !dbg !60
  %383 = extractelement <4 x i1> %325, i64 0, !dbg !60
  %384 = or i1 %383, %352, !dbg !60
  %385 = extractelement <4 x i1> %325, i64 1, !dbg !60
  %386 = or i1 %385, %354, !dbg !60
  %387 = extractelement <4 x i1> %325, i64 2, !dbg !60
  %388 = or i1 %387, %356, !dbg !60
  %389 = extractelement <4 x i1> %325, i64 3, !dbg !60
  %390 = or i1 %389, %358, !dbg !60
  %391 = mul i32 %16, 196, !dbg !61
  %392 = mul i32 %17, 196, !dbg !61
  %393 = mul i32 %18, 196, !dbg !61
  %394 = mul i32 %19, 196, !dbg !61
  %395 = add i32 %28, %391, !dbg !62
  %396 = add i32 %28, %392, !dbg !62
  %397 = add i32 %28, %393, !dbg !62
  %398 = add i32 %28, %394, !dbg !62
  %399 = sext i32 %395 to i64, !dbg !63
  %400 = getelementptr i8, ptr addrspace(1) %1, i64 %399, !dbg !63
  %401 = sext i32 %396 to i64, !dbg !63
  %402 = getelementptr i8, ptr addrspace(1) %1, i64 %401, !dbg !63
  %403 = sext i32 %397 to i64, !dbg !63
  %404 = getelementptr i8, ptr addrspace(1) %1, i64 %403, !dbg !63
  %405 = sext i32 %398 to i64, !dbg !63
  %406 = getelementptr i8, ptr addrspace(1) %1, i64 %405, !dbg !63
  %407 = bitcast <4 x i8> %230 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %407, ptr addrspace(1) %400, i1 %72) #2, !dbg !64
  %408 = bitcast <4 x i8> %262 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %402, i1 %73) #2, !dbg !64
  %409 = bitcast <4 x i8> %294 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %409, ptr addrspace(1) %404, i1 %74) #2, !dbg !64
  %410 = bitcast <4 x i8> %326 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %410, ptr addrspace(1) %406, i1 %75) #2, !dbg !64
  %411 = shl i32 %29, 6, !dbg !65
  %412 = shl i32 %30, 6, !dbg !65
  %413 = shl i32 %31, 6, !dbg !65
  %414 = shl i32 %32, 6, !dbg !65
  %415 = mul i32 %46, 12544, !dbg !66
  %416 = add i32 %415, %.decomposed45, !dbg !67
  %417 = add i32 %416, %411, !dbg !68
  %418 = add i32 %416, %412, !dbg !68
  %419 = add i32 %416, %413, !dbg !68
  %420 = add i32 %416, %414, !dbg !68
  %421 = sext i32 %417 to i64, !dbg !69
  %422 = getelementptr float, ptr addrspace(1) %2, i64 %421, !dbg !69
  %423 = sext i32 %418 to i64, !dbg !69
  %424 = getelementptr float, ptr addrspace(1) %2, i64 %423, !dbg !69
  %425 = sext i32 %419 to i64, !dbg !69
  %426 = getelementptr float, ptr addrspace(1) %2, i64 %425, !dbg !69
  %427 = sext i32 %420 to i64, !dbg !69
  %428 = getelementptr float, ptr addrspace(1) %2, i64 %427, !dbg !69
  %429 = shl i32 %8, 8, !dbg !70
  %430 = and i32 %429, 3840, !dbg !70
  %431 = or disjoint i32 %430, %10, !dbg !70
  %432 = and i32 %14, 1020, !dbg !70
  %433 = lshr exact i32 %430, 2, !dbg !70
  %434 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %433, !dbg !70
  %435 = getelementptr float, ptr addrspace(3) %434, i32 %431, !dbg !70
  %436 = extractelement <4 x i32> %.v31, i64 0, !dbg !70
  %437 = select i1 %360, i32 %180, i32 %436, !dbg !71
  %438 = insertelement <1 x i32> poison, i32 %437, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %438, i1 true) #2, !dbg !70
  %439 = or disjoint i32 %431, 64, !dbg !70
  %440 = lshr i32 %439, 4, !dbg !70
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !70
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %439, !dbg !70
  %443 = extractelement <4 x i32> %.v31, i64 1, !dbg !70
  %444 = select i1 %362, i32 %181, i32 %443, !dbg !71
  %445 = insertelement <1 x i32> poison, i32 %444, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %445, i1 true) #2, !dbg !70
  %446 = or disjoint i32 %431, 128, !dbg !70
  %447 = lshr i32 %446, 4, !dbg !70
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !70
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %446, !dbg !70
  %450 = extractelement <4 x i32> %.v31, i64 2, !dbg !70
  %451 = select i1 %364, i32 %182, i32 %450, !dbg !71
  %452 = insertelement <1 x i32> poison, i32 %451, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %452, i1 true) #2, !dbg !70
  %453 = or disjoint i32 %431, 192, !dbg !70
  %454 = lshr i32 %453, 4, !dbg !70
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %454, !dbg !70
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %453, !dbg !70
  %457 = extractelement <4 x i32> %.v31, i64 3, !dbg !70
  %458 = select i1 %366, i32 %183, i32 %457, !dbg !71
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %459, i1 true) #2, !dbg !70
  %460 = or disjoint i32 %431, 16, !dbg !70
  %461 = getelementptr float, ptr addrspace(3) %434, i32 %460, !dbg !70
  %462 = extractelement <4 x i32> %.v33, i64 0, !dbg !70
  %463 = select i1 %368, i32 %185, i32 %462, !dbg !71
  %464 = insertelement <1 x i32> poison, i32 %463, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %464, i1 true) #2, !dbg !70
  %465 = or disjoint i32 %431, 80, !dbg !70
  %466 = lshr i32 %465, 4, !dbg !70
  %467 = and i32 %466, 244, !dbg !70
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %467, !dbg !70
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %465, !dbg !70
  %470 = extractelement <4 x i32> %.v33, i64 1, !dbg !70
  %471 = select i1 %370, i32 %186, i32 %470, !dbg !71
  %472 = insertelement <1 x i32> poison, i32 %471, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %472, i1 true) #2, !dbg !70
  %473 = or disjoint i32 %431, 144, !dbg !70
  %474 = lshr i32 %473, 4, !dbg !70
  %475 = and i32 %474, 248, !dbg !70
  %476 = getelementptr float, ptr addrspace(3) @global_smem, i32 %475, !dbg !70
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %473, !dbg !70
  %478 = extractelement <4 x i32> %.v33, i64 2, !dbg !70
  %479 = select i1 %372, i32 %187, i32 %478, !dbg !71
  %480 = insertelement <1 x i32> poison, i32 %479, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %480, i1 true) #2, !dbg !70
  %481 = or disjoint i32 %431, 208, !dbg !70
  %482 = lshr i32 %481, 4, !dbg !70
  %483 = and i32 %482, 252, !dbg !70
  %484 = getelementptr float, ptr addrspace(3) @global_smem, i32 %483, !dbg !70
  %485 = getelementptr float, ptr addrspace(3) %484, i32 %481, !dbg !70
  %486 = extractelement <4 x i32> %.v33, i64 3, !dbg !70
  %487 = select i1 %374, i32 %188, i32 %486, !dbg !71
  %488 = insertelement <1 x i32> poison, i32 %487, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %488, i1 true) #2, !dbg !70
  %489 = or disjoint i32 %431, 32, !dbg !70
  %490 = getelementptr float, ptr addrspace(3) %434, i32 %489, !dbg !70
  %491 = extractelement <4 x i32> %.v35, i64 0, !dbg !70
  %492 = select i1 %376, i32 %190, i32 %491, !dbg !71
  %493 = insertelement <1 x i32> poison, i32 %492, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %493, i1 true) #2, !dbg !70
  %494 = or disjoint i32 %431, 96, !dbg !70
  %495 = lshr i32 %494, 4, !dbg !70
  %496 = and i32 %495, 244, !dbg !70
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !70
  %498 = getelementptr float, ptr addrspace(3) %497, i32 %494, !dbg !70
  %499 = extractelement <4 x i32> %.v35, i64 1, !dbg !70
  %500 = select i1 %378, i32 %191, i32 %499, !dbg !71
  %501 = insertelement <1 x i32> poison, i32 %500, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %501, i1 true) #2, !dbg !70
  %502 = or disjoint i32 %431, 160, !dbg !70
  %503 = lshr i32 %502, 4, !dbg !70
  %504 = and i32 %503, 248, !dbg !70
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i32 %504, !dbg !70
  %506 = getelementptr float, ptr addrspace(3) %505, i32 %502, !dbg !70
  %507 = extractelement <4 x i32> %.v35, i64 2, !dbg !70
  %508 = select i1 %380, i32 %192, i32 %507, !dbg !71
  %509 = insertelement <1 x i32> poison, i32 %508, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %509, i1 true) #2, !dbg !70
  %510 = or disjoint i32 %431, 224, !dbg !70
  %511 = lshr i32 %510, 4, !dbg !70
  %512 = and i32 %511, 252, !dbg !70
  %513 = getelementptr float, ptr addrspace(3) @global_smem, i32 %512, !dbg !70
  %514 = getelementptr float, ptr addrspace(3) %513, i32 %510, !dbg !70
  %515 = extractelement <4 x i32> %.v35, i64 3, !dbg !70
  %516 = select i1 %382, i32 %193, i32 %515, !dbg !71
  %517 = insertelement <1 x i32> poison, i32 %516, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %517, i1 true) #2, !dbg !70
  %518 = or disjoint i32 %431, 48, !dbg !70
  %519 = getelementptr float, ptr addrspace(3) %434, i32 %518, !dbg !70
  %520 = extractelement <4 x i32> %.v37, i64 0, !dbg !70
  %521 = select i1 %384, i32 %195, i32 %520, !dbg !71
  %522 = insertelement <1 x i32> poison, i32 %521, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %522, i1 true) #2, !dbg !70
  %523 = or disjoint i32 %431, 112, !dbg !70
  %524 = lshr i32 %523, 4, !dbg !70
  %525 = and i32 %524, 244, !dbg !70
  %526 = getelementptr float, ptr addrspace(3) @global_smem, i32 %525, !dbg !70
  %527 = getelementptr float, ptr addrspace(3) %526, i32 %523, !dbg !70
  %528 = extractelement <4 x i32> %.v37, i64 1, !dbg !70
  %529 = select i1 %386, i32 %196, i32 %528, !dbg !71
  %530 = insertelement <1 x i32> poison, i32 %529, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %527, <1 x i32> %530, i1 true) #2, !dbg !70
  %531 = or disjoint i32 %431, 176, !dbg !70
  %532 = lshr i32 %531, 4, !dbg !70
  %533 = and i32 %532, 248, !dbg !70
  %534 = getelementptr float, ptr addrspace(3) @global_smem, i32 %533, !dbg !70
  %535 = getelementptr float, ptr addrspace(3) %534, i32 %531, !dbg !70
  %536 = extractelement <4 x i32> %.v37, i64 2, !dbg !70
  %537 = select i1 %388, i32 %197, i32 %536, !dbg !71
  %538 = insertelement <1 x i32> poison, i32 %537, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %535, <1 x i32> %538, i1 true) #2, !dbg !70
  %539 = or disjoint i32 %431, 240, !dbg !70
  %540 = lshr i32 %539, 4, !dbg !70
  %541 = and i32 %540, 252, !dbg !70
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !70
  %543 = getelementptr float, ptr addrspace(3) %542, i32 %539, !dbg !70
  %544 = extractelement <4 x i32> %.v37, i64 3, !dbg !70
  %545 = select i1 %390, i32 %198, i32 %544, !dbg !71
  %546 = insertelement <1 x i32> poison, i32 %545, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %546, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %547 = lshr i32 %14, 4, !dbg !70
  %548 = and i32 %547, 60, !dbg !70
  %549 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %548, !dbg !70
  %550 = getelementptr inbounds float, ptr addrspace(3) %549, i32 %432, !dbg !70
  %551 = or disjoint i32 %432, 1024, !dbg !70
  %552 = lshr i32 %551, 4, !dbg !70
  %553 = and i32 %552, 124, !dbg !70
  %554 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %553, !dbg !70
  %555 = getelementptr inbounds float, ptr addrspace(3) %554, i32 %551, !dbg !70
  %556 = load <4 x i32>, ptr addrspace(3) %555, align 16, !dbg !70
  %557 = or disjoint i32 %432, 2048, !dbg !70
  %558 = lshr i32 %557, 4, !dbg !70
  %559 = and i32 %558, 188, !dbg !70
  %560 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %559, !dbg !70
  %561 = getelementptr inbounds float, ptr addrspace(3) %560, i32 %557, !dbg !70
  %562 = load <4 x i32>, ptr addrspace(3) %561, align 16, !dbg !70
  %563 = or disjoint i32 %432, 3072, !dbg !70
  %564 = lshr i32 %563, 4, !dbg !70
  %565 = and i32 %564, 252, !dbg !70
  %566 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %565, !dbg !70
  %567 = getelementptr inbounds float, ptr addrspace(3) %566, i32 %563, !dbg !70
  %568 = load <4 x i32>, ptr addrspace(3) %567, align 16, !dbg !70
  %.extract = load i32, ptr addrspace(3) %550, align 16, !dbg !70
  %569 = getelementptr inbounds i8, ptr addrspace(3) %550, i32 4, !dbg !70
  %.extract16 = load i32, ptr addrspace(3) %569, align 4, !dbg !70
  %570 = getelementptr inbounds i8, ptr addrspace(3) %550, i32 8, !dbg !70
  %.extract17 = load i32, ptr addrspace(3) %570, align 8, !dbg !70
  %571 = getelementptr inbounds i8, ptr addrspace(3) %550, i32 12, !dbg !70
  %.extract18 = load i32, ptr addrspace(3) %571, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %422, i1 %76) #2, !dbg !70
  %.extract19 = extractelement <4 x i32> %556, i64 0, !dbg !70
  %.extract20 = extractelement <4 x i32> %556, i64 1, !dbg !70
  %.extract21 = extractelement <4 x i32> %556, i64 2, !dbg !70
  %.extract22 = extractelement <4 x i32> %556, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %424, i1 %77) #2, !dbg !70
  %.extract23 = extractelement <4 x i32> %562, i64 0, !dbg !70
  %.extract24 = extractelement <4 x i32> %562, i64 1, !dbg !70
  %.extract25 = extractelement <4 x i32> %562, i64 2, !dbg !70
  %.extract26 = extractelement <4 x i32> %562, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %426, i1 %78) #2, !dbg !70
  %.extract27 = extractelement <4 x i32> %568, i64 0, !dbg !70
  %.extract28 = extractelement <4 x i32> %568, i64 1, !dbg !70
  %.extract29 = extractelement <4 x i32> %568, i64 2, !dbg !70
  %.extract30 = extractelement <4 x i32> %568, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %428, i1 %79) #2, !dbg !70
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgf2ns6yfsshgcpo6tkevycf4p362r65kepmfzpuf3zz63vu7bpy.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 62, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 50, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 60, scope: !7)
!34 = !DILocation(line: 36, column: 37, scope: !7)
!35 = !DILocation(line: 36, column: 51, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 61, scope: !7)
!38 = !DILocation(line: 37, column: 38, scope: !7)
!39 = !DILocation(line: 37, column: 52, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 62, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 42, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 45, column: 33, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !53)
!53 = !DILocation(line: 46, column: 41, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 20, scope: !7)
!57 = !DILocation(line: 49, column: 35, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !59)
!59 = !DILocation(line: 50, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !59)
!61 = !DILocation(line: 51, column: 34, scope: !7)
!62 = !DILocation(line: 51, column: 30, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 46, scope: !7)
!65 = !DILocation(line: 52, column: 33, scope: !7)
!66 = !DILocation(line: 52, column: 44, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 38, scope: !7)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 56, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !59)
!72 = !DILocation(line: 52, column: 4, scope: !7)
