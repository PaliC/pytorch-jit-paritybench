; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_native_group_norm_sigmoid_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 64, !dbg !14
  %15 = srem i32 %14, 256, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !17
  %23 = bitcast i32 %19 to float, !dbg !17
  %24 = bitcast i32 %20 to float, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = sdiv i32 %13, 512, !dbg !18
  %28 = sext i32 %27 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %33 = bitcast i32 %32 to float, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %35 = bitcast i32 %34 to float, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %37 = bitcast i32 %36 to float, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = sext i32 %15 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !26
  %59 = bitcast i32 %58 to float, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = fsub float %23, %31, !dbg !27
  %67 = fsub float %24, %33, !dbg !27
  %68 = fsub float %25, %35, !dbg !27
  %69 = fsub float %26, %37, !dbg !27
  %70 = fmul float %66, %40, !dbg !28
  %71 = fmul float %67, %42, !dbg !28
  %72 = fmul float %68, %44, !dbg !28
  %73 = fmul float %69, %46, !dbg !28
  %74 = fmul float %70, %50, !dbg !29
  %75 = fmul float %71, %52, !dbg !29
  %76 = fmul float %72, %54, !dbg !29
  %77 = fmul float %73, %56, !dbg !29
  %78 = fadd float %74, %59, !dbg !30
  %79 = fadd float %75, %61, !dbg !30
  %80 = fadd float %76, %63, !dbg !30
  %81 = fadd float %77, %65, !dbg !30
  %82 = fsub float 0.000000e+00, %78, !dbg !31
  %83 = fsub float 0.000000e+00, %79, !dbg !31
  %84 = fsub float 0.000000e+00, %80, !dbg !31
  %85 = fsub float 0.000000e+00, %81, !dbg !31
  %86 = fmul float %82, 0x3FF7154760000000, !dbg !35
  %87 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %86) #1, !dbg !35
  %88 = fmul float %83, 0x3FF7154760000000, !dbg !35
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #1, !dbg !35
  %90 = fmul float %84, 0x3FF7154760000000, !dbg !35
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #1, !dbg !35
  %92 = fmul float %85, 0x3FF7154760000000, !dbg !35
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #1, !dbg !35
  %94 = fadd float %87, 1.000000e+00, !dbg !36
  %95 = fadd float %89, 1.000000e+00, !dbg !36
  %96 = fadd float %91, 1.000000e+00, !dbg !36
  %97 = fadd float %93, 1.000000e+00, !dbg !36
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !37
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #1, !dbg !37
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #1, !dbg !37
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #1, !dbg !37
  %102 = fmul float %78, %98, !dbg !38
  %103 = fmul float %79, %99, !dbg !38
  %104 = fmul float %80, %100, !dbg !38
  %105 = fmul float %81, %101, !dbg !38
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !39
  %107 = bitcast float %102 to i32, !dbg !40
  %108 = bitcast float %103 to i32, !dbg !40
  %109 = bitcast float %104 to i32, !dbg !40
  %110 = bitcast float %105 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %107, i32 %108, i32 %109, i32 %110, ptr addrspace(1) %106, i1 true) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdcmchb6sda7xil2cruor3yijajlqchrxc7exd3ocifzpr7qxpdi.py", directory: "inductor_cache/dc")
!4 = !{ptr @triton_poi_fused_mul_native_group_norm_sigmoid_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_native_group_norm_sigmoid_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_native_group_norm_sigmoid_18", linkageName: "triton_poi_fused_mul_native_group_norm_sigmoid_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 27, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 36, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 37, column: 19, scope: !7)
!39 = !DILocation(line: 38, column: 28, scope: !7)
!40 = !DILocation(line: 38, column: 40, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
