; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = icmp slt i32 %18, 256, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = or disjoint i32 %22, %16, !dbg !17
  %24 = icmp slt i32 %23, 128, !dbg !18
  %25 = shl i32 %17, 7, !dbg !19
  %26 = shl i32 %18, 7, !dbg !19
  %27 = add i32 %23, %25, !dbg !20
  %28 = add i32 %23, %26, !dbg !20
  %29 = sext i32 %27 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = and i1 %19, %24, !dbg !22
  %34 = and i1 %20, %24, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !23
  %37 = sext i32 %23 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #4, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !28
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %24) #4, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %24) #4, !dbg !31
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !32
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !32
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !32
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !32
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %58, 0, !dbg !33
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %59, 0, !dbg !33
  br i1 %.not.i, label %65, label %60, !dbg !33

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !33

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !33

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !33
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %70, 0, !dbg !33
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %71, 0, !dbg !33
  br i1 %.not.i15, label %77, label %72, !dbg !33

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %75, label %73, !dbg !33

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %80, label %78, !dbg !33

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %73, %75, %78, %80
  %.0.i17 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !33
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %82, 0, !dbg !33
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %83, 0, !dbg !33
  br i1 %.not.i20, label %89, label %84, !dbg !33

84:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %87, label %85, !dbg !33

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

89:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %92, label %90, !dbg !33

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %85, %87, %90, %92
  %.0.i22 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !33
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %94, 0, !dbg !33
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %95, 0, !dbg !33
  br i1 %.not.i25, label %101, label %96, !dbg !33

96:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %99, label %97, !dbg !33

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

101:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %104, label %102, !dbg !33

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %97, %99, %102, %104
  %.0.i27 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !33
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %109 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %110 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %112 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %115 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %116 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %117 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !29
  %126 = or disjoint i32 %22, %14, !dbg !17
  %127 = icmp slt i32 %126, 128, !dbg !18
  %128 = or disjoint i32 %10, %16, !dbg !13
  %129 = icmp slt i32 %128, 256, !dbg !14
  %130 = and i1 %129, %127, !dbg !22
  %131 = or disjoint i32 %22, %13, !dbg !17
  %132 = icmp slt i32 %131, 128, !dbg !18
  %133 = and i1 %129, %132, !dbg !22
  %.frozen = freeze i32 %128, !dbg !34
  %134 = sdiv i32 %.frozen, 64, !dbg !34
  %135 = mul i32 %134, 64, !dbg !35
  %.decomposed = sub i32 %.frozen, %135, !dbg !35
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !36
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !36
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !36
  %140 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !25
  %141 = insertelement <4 x i32> %140, i32 %109, i64 1, !dbg !25
  %142 = insertelement <4 x i32> %141, i32 %111, i64 2, !dbg !25
  %143 = insertelement <4 x i32> %142, i32 %113, i64 3, !dbg !25
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !25
  %145 = shufflevector <4 x float> %144, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %146 = insertelement <8 x i32> poison, i32 %106, i64 0, !dbg !23
  %147 = insertelement <8 x i32> %146, i32 %108, i64 1, !dbg !23
  %148 = insertelement <8 x i32> %147, i32 %110, i64 2, !dbg !23
  %149 = insertelement <8 x i32> %148, i32 %112, i64 3, !dbg !23
  %150 = insertelement <8 x i32> %149, i32 %114, i64 4, !dbg !23
  %151 = insertelement <8 x i32> %150, i32 %115, i64 5, !dbg !23
  %152 = insertelement <8 x i32> %151, i32 %116, i64 6, !dbg !23
  %153 = insertelement <8 x i32> %152, i32 %117, i64 7, !dbg !23
  %154 = bitcast <8 x i32> %153 to <8 x float>, !dbg !23
  %155 = fsub <8 x float> %154, %145, !dbg !37
  %156 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !31
  %157 = insertelement <4 x i32> %156, i32 %119, i64 1, !dbg !31
  %158 = insertelement <4 x i32> %157, i32 %120, i64 2, !dbg !31
  %159 = insertelement <4 x i32> %158, i32 %121, i64 3, !dbg !31
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !31
  %161 = shufflevector <4 x float> %160, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %162 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !29
  %163 = insertelement <4 x i32> %162, i32 %123, i64 1, !dbg !29
  %164 = insertelement <4 x i32> %163, i32 %124, i64 2, !dbg !29
  %165 = insertelement <4 x i32> %164, i32 %125, i64 3, !dbg !29
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !29
  %167 = shufflevector <4 x float> %166, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %168 = insertelement <8 x float> poison, float %139, i64 0, !dbg !38
  %169 = insertelement <8 x float> %168, float %138, i64 1, !dbg !38
  %170 = insertelement <8 x float> %169, float %137, i64 2, !dbg !38
  %171 = insertelement <8 x float> %170, float %136, i64 3, !dbg !38
  %172 = shufflevector <8 x float> %171, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %173 = fmul <8 x float> %155, %172, !dbg !38
  %174 = fmul <8 x float> %173, %167, !dbg !39
  %175 = fadd <8 x float> %174, %161, !dbg !40
  %176 = fcmp ogt <8 x float> %175, zeroinitializer, !dbg !41
  %177 = extractelement <8 x float> %175, i64 7, !dbg !42
  %178 = fmul float %177, 0x3FB99999A0000000, !dbg !43
  %179 = extractelement <8 x float> %175, i64 6, !dbg !42
  %180 = fmul float %179, 0x3FB99999A0000000, !dbg !43
  %181 = extractelement <8 x float> %175, i64 5, !dbg !42
  %182 = fmul float %181, 0x3FB99999A0000000, !dbg !43
  %183 = extractelement <8 x float> %175, i64 4, !dbg !42
  %184 = fmul float %183, 0x3FB99999A0000000, !dbg !43
  %185 = extractelement <8 x float> %175, i64 3, !dbg !42
  %186 = fmul float %185, 0x3FB99999A0000000, !dbg !43
  %187 = extractelement <8 x float> %175, i64 2, !dbg !42
  %188 = fmul float %187, 0x3FB99999A0000000, !dbg !43
  %189 = extractelement <8 x float> %175, i64 1, !dbg !42
  %190 = fmul float %189, 0x3FB99999A0000000, !dbg !43
  %191 = extractelement <8 x float> %175, i64 0, !dbg !42
  %192 = fmul float %191, 0x3FB99999A0000000, !dbg !43
  %193 = extractelement <8 x i1> %176, i64 7, !dbg !42
  %194 = select i1 %193, float %177, float %178, !dbg !42
  %195 = extractelement <8 x i1> %176, i64 6, !dbg !42
  %196 = select i1 %195, float %179, float %180, !dbg !42
  %197 = extractelement <8 x i1> %176, i64 5, !dbg !42
  %198 = select i1 %197, float %181, float %182, !dbg !42
  %199 = extractelement <8 x i1> %176, i64 4, !dbg !42
  %200 = select i1 %199, float %183, float %184, !dbg !42
  %201 = extractelement <8 x i1> %176, i64 3, !dbg !42
  %202 = select i1 %201, float %185, float %186, !dbg !42
  %203 = extractelement <8 x i1> %176, i64 2, !dbg !42
  %204 = select i1 %203, float %187, float %188, !dbg !42
  %205 = extractelement <8 x i1> %176, i64 1, !dbg !42
  %206 = select i1 %205, float %189, float %190, !dbg !42
  %207 = extractelement <8 x i1> %176, i64 0, !dbg !42
  %208 = select i1 %207, float %191, float %192, !dbg !42
  %209 = shl i32 %131, 6, !dbg !44
  %210 = shl i32 %126, 6, !dbg !44
  %211 = shl i32 %134, 13, !dbg !45
  %212 = add i32 %211, %.decomposed, !dbg !46
  %213 = add i32 %212, %209, !dbg !47
  %214 = add i32 %212, %210, !dbg !47
  %215 = sext i32 %213 to i64, !dbg !48
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !48
  %217 = sext i32 %214 to i64, !dbg !48
  %218 = getelementptr float, ptr addrspace(1) %5, i64 %217, !dbg !48
  %219 = shl i32 %11, 7, !dbg !49
  %220 = and i32 %219, 896, !dbg !49
  %221 = or disjoint i32 %220, %13, !dbg !49
  %222 = and i32 %15, 508, !dbg !49
  %223 = lshr exact i32 %220, 3, !dbg !49
  %224 = or disjoint i32 %223, %221, !dbg !49
  %225 = zext nneg i32 %224 to i64, !dbg !49
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %225, !dbg !49
  %227 = bitcast float %194 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !49
  %228 = or disjoint i32 %221, 32, !dbg !49
  %229 = lshr i32 %228, 3, !dbg !49
  %230 = and i32 %229, 116, !dbg !49
  %231 = add nuw nsw i32 %230, %228, !dbg !49
  %232 = zext nneg i32 %231 to i64, !dbg !49
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %232, !dbg !49
  %234 = bitcast float %196 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !49
  %235 = or disjoint i32 %221, 64, !dbg !49
  %236 = lshr i32 %235, 3, !dbg !49
  %237 = and i32 %236, 120, !dbg !49
  %238 = add nuw nsw i32 %237, %235, !dbg !49
  %239 = zext nneg i32 %238 to i64, !dbg !49
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %239, !dbg !49
  %241 = bitcast float %198 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !49
  %242 = or disjoint i32 %221, 96, !dbg !49
  %243 = lshr i32 %242, 3, !dbg !49
  %244 = and i32 %243, 124, !dbg !49
  %245 = add nuw nsw i32 %244, %242, !dbg !49
  %246 = zext nneg i32 %245 to i64, !dbg !49
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %246, !dbg !49
  %248 = bitcast float %200 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !49
  %249 = or disjoint i32 %221, 16, !dbg !49
  %250 = add nuw nsw i32 %249, %223, !dbg !49
  %251 = zext nneg i32 %250 to i64, !dbg !49
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %251, !dbg !49
  %253 = bitcast float %202 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !49
  %254 = or disjoint i32 %221, 48, !dbg !49
  %255 = lshr i32 %254, 3, !dbg !49
  %256 = and i32 %255, 116, !dbg !49
  %257 = add nuw nsw i32 %256, %254, !dbg !49
  %258 = zext nneg i32 %257 to i64, !dbg !49
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %258, !dbg !49
  %260 = bitcast float %204 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !49
  %261 = or disjoint i32 %221, 80, !dbg !49
  %262 = lshr i32 %261, 3, !dbg !49
  %263 = and i32 %262, 120, !dbg !49
  %264 = add nuw nsw i32 %263, %261, !dbg !49
  %265 = zext nneg i32 %264 to i64, !dbg !49
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %265, !dbg !49
  %267 = bitcast float %206 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !49
  %268 = or disjoint i32 %221, 112, !dbg !49
  %269 = lshr i32 %268, 3, !dbg !49
  %270 = and i32 %269, 124, !dbg !49
  %271 = add nuw nsw i32 %270, %268, !dbg !49
  %272 = zext nneg i32 %271 to i64, !dbg !49
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %272, !dbg !49
  %274 = bitcast float %208 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %275 = lshr i32 %15, 3, !dbg !49
  %276 = and i32 %275, 60, !dbg !49
  %277 = add nuw nsw i32 %276, %222, !dbg !49
  %278 = zext nneg i32 %277 to i64, !dbg !49
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %278, !dbg !49
  %280 = or disjoint i32 %222, 512, !dbg !49
  %281 = lshr i32 %280, 3, !dbg !49
  %282 = and i32 %281, 124, !dbg !49
  %283 = add nuw nsw i32 %282, %280, !dbg !49
  %284 = zext nneg i32 %283 to i64, !dbg !49
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !49
  %286 = load <4 x i32>, ptr addrspace(3) %285, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %279, align 16, !dbg !49
  %287 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 4, !dbg !49
  %.extract8 = load i32, ptr addrspace(3) %287, align 4, !dbg !49
  %288 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 8, !dbg !49
  %.extract9 = load i32, ptr addrspace(3) %288, align 8, !dbg !49
  %289 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 12, !dbg !49
  %.extract10 = load i32, ptr addrspace(3) %289, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %216, i1 %133) #4, !dbg !49
  %.extract11 = extractelement <4 x i32> %286, i64 0, !dbg !49
  %.extract12 = extractelement <4 x i32> %286, i64 1, !dbg !49
  %.extract13 = extractelement <4 x i32> %286, i64 2, !dbg !49
  %.extract14 = extractelement <4 x i32> %286, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %218, i1 %130) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chhffv7vj2e6ymjjjefbhsrmcainrwly4th5qxfybqd4xsi3nkgi.py", directory: "inductor_cache/hh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 35, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 33, scope: !7)
!45 = !DILocation(line: 53, column: 43, scope: !7)
!46 = !DILocation(line: 53, column: 30, scope: !7)
!47 = !DILocation(line: 53, column: 38, scope: !7)
!48 = !DILocation(line: 53, column: 25, scope: !7)
!49 = !DILocation(line: 53, column: 55, scope: !7)
!50 = !DILocation(line: 53, column: 4, scope: !7)
