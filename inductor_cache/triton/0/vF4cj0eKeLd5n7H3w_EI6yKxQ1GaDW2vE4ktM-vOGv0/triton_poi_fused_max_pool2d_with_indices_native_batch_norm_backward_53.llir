; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 32, !dbg !14
  %13 = mul i32 %12, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = srem i32 %11, 32, !dbg !15
  %15 = sdiv i32 %10, 1024, !dbg !16
  %16 = srem i32 %15, 4, !dbg !17
  %17 = shl nsw i32 %.decomposed, 1, !dbg !18
  %18 = shl nsw i32 %14, 1, !dbg !18
  %19 = shl i32 %12, 7, !dbg !19
  %20 = add i32 %17, %19, !dbg !20
  %21 = add i32 %19, %18, !dbg !20
  %22 = sext i32 %20 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = sext i32 %21 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = or disjoint i32 %20, 1, !dbg !23
  %31 = or disjoint i32 %21, 1, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !25
  %39 = bitcast i32 %38 to float, !dbg !25
  %40 = add i32 %20, 64, !dbg !26
  %41 = add i32 %21, 64, !dbg !26
  %42 = sext i32 %40 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = sext i32 %41 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = add i32 %20, 65, !dbg !29
  %51 = add i32 %21, 65, !dbg !29
  %52 = sext i32 %50 to i64, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !30
  %54 = sext i32 %51 to i64, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !31
  %57 = bitcast i32 %56 to float, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = sext i32 %16 to i64, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !33
  %63 = bitcast i32 %62 to float, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = fcmp ogt float %37, %27, !dbg !34
  %67 = fcmp ogt float %39, %29, !dbg !34
  %68 = fcmp uno float %37, 0.000000e+00, !dbg !38
  %69 = fcmp uno float %39, 0.000000e+00, !dbg !38
  %70 = or i1 %66, %68, !dbg !39
  %71 = or i1 %67, %69, !dbg !39
  %72 = select i1 %70, float %37, float %27, !dbg !40
  %73 = select i1 %71, float %39, float %29, !dbg !40
  %74 = fcmp olt float %72, %47, !dbg !41
  %75 = fcmp olt float %73, %49, !dbg !41
  %76 = fcmp uno float %47, 0.000000e+00, !dbg !43
  %77 = fcmp uno float %49, 0.000000e+00, !dbg !43
  %78 = or i1 %76, %74, !dbg !44
  %79 = or i1 %77, %75, !dbg !44
  %80 = select i1 %78, float %47, float %72, !dbg !45
  %81 = select i1 %79, float %49, float %73, !dbg !45
  %82 = fcmp olt float %80, %57, !dbg !46
  %83 = fcmp olt float %81, %59, !dbg !46
  %84 = fcmp uno float %57, 0.000000e+00, !dbg !48
  %85 = fcmp uno float %59, 0.000000e+00, !dbg !48
  %86 = or i1 %84, %82, !dbg !49
  %87 = or i1 %85, %83, !dbg !49
  %88 = select i1 %86, float %57, float %80, !dbg !50
  %89 = select i1 %87, float %59, float %81, !dbg !50
  %90 = fsub float %88, %63, !dbg !51
  %91 = fsub float %89, %65, !dbg !51
  %92 = sext i32 %10 to i64, !dbg !52
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !52
  %94 = bitcast float %90 to i32, !dbg !53
  %95 = bitcast float %91 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %94, i32 %95, ptr addrspace(1) %93, i1 true) #1, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvgxeqtwxlnvhe7cfaiupshczjh4hzykdwskixkyrfeqtbusc2id.py", directory: "inductor_cache/vg")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_53", linkageName: "triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 41, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 46, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 30, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 51, scope: !7)
!29 = !DILocation(line: 31, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 51, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 35, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 33, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !42)
!42 = !DILocation(line: 34, column: 40, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !42)
!46 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !47)
!47 = !DILocation(line: 35, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !47)
!51 = !DILocation(line: 36, column: 18, scope: !7)
!52 = !DILocation(line: 37, column: 25, scope: !7)
!53 = !DILocation(line: 37, column: 36, scope: !7)
!54 = !DILocation(line: 37, column: 4, scope: !7)
