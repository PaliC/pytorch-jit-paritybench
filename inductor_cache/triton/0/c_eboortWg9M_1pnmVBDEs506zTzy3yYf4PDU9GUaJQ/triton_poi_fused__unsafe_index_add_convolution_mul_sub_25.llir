; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %19 = sdiv i32 %.frozen, 8, !dbg !14
  %20 = srem i32 %19, 8, !dbg !15
  %21 = mul i32 %19, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %18, 8, !dbg !16
  %23 = sdiv i32 %17, 64, !dbg !17
  %24 = srem i32 %23, 256, !dbg !18
  %25 = sext i32 %20 to i64, !dbg !19
  %26 = getelementptr i64, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %31 = sext i32 %.decomposed to i64, !dbg !21
  %32 = getelementptr i64, ptr addrspace(1) %2, i64 %31, !dbg !21
  %33 = sext i32 %22 to i64, !dbg !21
  %34 = getelementptr i64, ptr addrspace(1) %2, i64 %33, !dbg !21
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !22
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !22
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !22
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !22
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !22
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !22
  %41 = getelementptr i64, ptr addrspace(1) %4, i64 %31, !dbg !23
  %42 = getelementptr i64, ptr addrspace(1) %4, i64 %33, !dbg !23
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !24
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !24
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !24
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !24
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = getelementptr i64, ptr addrspace(1) %6, i64 %25, !dbg !27
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %68 = bitcast i32 %67 to float, !dbg !30
  %69 = sext i32 %17 to i64, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %8, i64 %69, !dbg !31
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !32
  %76 = bitcast i32 %72 to float, !dbg !32
  %77 = bitcast i32 %73 to float, !dbg !32
  %78 = bitcast i32 %74 to float, !dbg !32
  %79 = bitcast i32 %75 to float, !dbg !32
  %80 = sext i32 %24 to i64, !dbg !33
  %81 = getelementptr float, ptr addrspace(1) %9, i64 %80, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !34
  %85 = bitcast i32 %84 to float, !dbg !34
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !34
  %87 = bitcast i32 %86 to float, !dbg !34
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !34
  %89 = bitcast i32 %88 to float, !dbg !34
  %90 = lshr i64 %27, 61, !dbg !35
  %91 = and i64 %90, 4, !dbg !35
  %92 = add i64 %91, %27, !dbg !35
  %93 = lshr i64 %36, 61, !dbg !36
  %94 = and i64 %93, 4, !dbg !36
  %95 = lshr i64 %37, 61, !dbg !36
  %96 = and i64 %95, 4, !dbg !36
  %97 = lshr i64 %39, 61, !dbg !36
  %98 = and i64 %97, 4, !dbg !36
  %99 = lshr i64 %40, 61, !dbg !36
  %100 = and i64 %99, 4, !dbg !36
  %101 = shl i64 %92, 2, !dbg !37
  %102 = shl nsw i32 %23, 4, !dbg !38
  %103 = sext i32 %102 to i64, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !40
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %94, !dbg !40
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %101, !dbg !40
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %103, !dbg !40
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !40
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %96, !dbg !40
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %101, !dbg !40
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %103, !dbg !40
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !40
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %98, !dbg !40
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %101, !dbg !40
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %103, !dbg !40
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !40
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %100, !dbg !40
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %101, !dbg !40
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %103, !dbg !40
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !41
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !41
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !41
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !41
  %124 = lshr i64 %44, 61, !dbg !42
  %125 = and i64 %124, 4, !dbg !42
  %126 = lshr i64 %45, 61, !dbg !42
  %127 = and i64 %126, 4, !dbg !42
  %128 = lshr i64 %47, 61, !dbg !42
  %129 = and i64 %128, 4, !dbg !42
  %130 = lshr i64 %48, 61, !dbg !42
  %131 = and i64 %130, 4, !dbg !42
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !43
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %125, !dbg !43
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %101, !dbg !43
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %103, !dbg !43
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !43
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %127, !dbg !43
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %101, !dbg !43
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %103, !dbg !43
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !43
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %129, !dbg !43
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %101, !dbg !43
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %103, !dbg !43
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !43
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %131, !dbg !43
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %101, !dbg !43
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %103, !dbg !43
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !44
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #1, !dbg !44
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !44
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !44
  %152 = lshr i64 %56, 61, !dbg !45
  %153 = and i64 %152, 4, !dbg !45
  %154 = add i64 %153, %56, !dbg !45
  %155 = shl i64 %154, 2, !dbg !46
  %156 = getelementptr float, ptr addrspace(1) %105, i64 %155, !dbg !47
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %103, !dbg !47
  %158 = getelementptr float, ptr addrspace(1) %109, i64 %155, !dbg !47
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %103, !dbg !47
  %160 = getelementptr float, ptr addrspace(1) %113, i64 %155, !dbg !47
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %103, !dbg !47
  %162 = getelementptr float, ptr addrspace(1) %117, i64 %155, !dbg !47
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %103, !dbg !47
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !48
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !48
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #1, !dbg !48
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #1, !dbg !48
  %168 = getelementptr float, ptr addrspace(1) %133, i64 %155, !dbg !49
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %103, !dbg !49
  %170 = getelementptr float, ptr addrspace(1) %137, i64 %155, !dbg !49
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %103, !dbg !49
  %172 = getelementptr float, ptr addrspace(1) %141, i64 %155, !dbg !49
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %103, !dbg !49
  %174 = getelementptr float, ptr addrspace(1) %145, i64 %155, !dbg !49
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %103, !dbg !49
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #1, !dbg !50
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #1, !dbg !50
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !50
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #1, !dbg !50
  %180 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !48
  %181 = insertelement <2 x i32> %180, i32 %120, i64 1, !dbg !48
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !48
  %183 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !50
  %184 = insertelement <2 x i32> %183, i32 %148, i64 1, !dbg !50
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !50
  %186 = fsub <2 x float> %185, %182, !dbg !51
  %187 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !52
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !52
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %190 = fmul <2 x float> %186, %189, !dbg !52
  %191 = fadd <2 x float> %190, %182, !dbg !53
  %192 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !48
  %193 = insertelement <2 x i32> %192, i32 %121, i64 1, !dbg !48
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !48
  %195 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !50
  %196 = insertelement <2 x i32> %195, i32 %149, i64 1, !dbg !50
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !50
  %198 = fsub <2 x float> %197, %194, !dbg !51
  %199 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !52
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !52
  %201 = shufflevector <2 x float> %200, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %202 = fmul <2 x float> %198, %201, !dbg !52
  %203 = fadd <2 x float> %202, %194, !dbg !53
  %204 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !48
  %205 = insertelement <2 x i32> %204, i32 %122, i64 1, !dbg !48
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !48
  %207 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !50
  %208 = insertelement <2 x i32> %207, i32 %150, i64 1, !dbg !50
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !50
  %210 = fsub <2 x float> %209, %206, !dbg !51
  %211 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !52
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !52
  %213 = shufflevector <2 x float> %212, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %214 = fmul <2 x float> %210, %213, !dbg !52
  %215 = fadd <2 x float> %214, %206, !dbg !53
  %216 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !48
  %217 = insertelement <2 x i32> %216, i32 %123, i64 1, !dbg !48
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !48
  %219 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !50
  %220 = insertelement <2 x i32> %219, i32 %151, i64 1, !dbg !50
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !50
  %222 = fsub <2 x float> %221, %218, !dbg !51
  %223 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !52
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !52
  %225 = shufflevector <2 x float> %224, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %226 = fmul <2 x float> %222, %225, !dbg !52
  %227 = fadd <2 x float> %226, %218, !dbg !53
  %228 = extractelement <2 x float> %191, i64 0, !dbg !54
  %229 = extractelement <2 x float> %191, i64 1, !dbg !55
  %230 = fsub float %228, %229, !dbg !54
  %231 = extractelement <2 x float> %203, i64 0, !dbg !54
  %232 = extractelement <2 x float> %203, i64 1, !dbg !55
  %233 = fsub float %231, %232, !dbg !54
  %234 = extractelement <2 x float> %215, i64 0, !dbg !54
  %235 = extractelement <2 x float> %215, i64 1, !dbg !55
  %236 = fsub float %234, %235, !dbg !54
  %237 = extractelement <2 x float> %227, i64 0, !dbg !54
  %238 = extractelement <2 x float> %227, i64 1, !dbg !55
  %239 = fsub float %237, %238, !dbg !54
  %240 = fmul float %230, %62, !dbg !56
  %241 = fmul float %233, %64, !dbg !56
  %242 = fmul float %236, %66, !dbg !56
  %243 = fmul float %239, %68, !dbg !56
  %244 = fadd float %229, %240, !dbg !55
  %245 = fadd float %232, %241, !dbg !55
  %246 = fadd float %235, %242, !dbg !55
  %247 = fadd float %238, %243, !dbg !55
  %248 = fadd float %76, %83, !dbg !57
  %249 = fadd float %77, %85, !dbg !57
  %250 = fadd float %78, %87, !dbg !57
  %251 = fadd float %79, %89, !dbg !57
  %252 = fadd float %248, %244, !dbg !58
  %253 = fadd float %249, %245, !dbg !58
  %254 = fadd float %250, %246, !dbg !58
  %255 = fadd float %251, %247, !dbg !58
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !59
  %257 = bitcast float %252 to i32, !dbg !60
  %258 = bitcast float %253 to i32, !dbg !60
  %259 = bitcast float %254 to i32, !dbg !60
  %260 = bitcast float %255 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %256, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz35as35z3w7qg2qzjl22wzhdcmapiqjpgx6dfhbj4lccixuxvqp.py", directory: "inductor_cache/z3")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 44, column: 39, scope: !7)
!38 = !DILocation(line: 44, column: 49, scope: !7)
!39 = !DILocation(line: 44, column: 46, scope: !7)
!40 = !DILocation(line: 44, column: 30, scope: !7)
!41 = !DILocation(line: 44, column: 54, scope: !7)
!42 = !DILocation(line: 47, column: 35, scope: !7)
!43 = !DILocation(line: 48, column: 31, scope: !7)
!44 = !DILocation(line: 48, column: 56, scope: !7)
!45 = !DILocation(line: 54, column: 35, scope: !7)
!46 = !DILocation(line: 55, column: 40, scope: !7)
!47 = !DILocation(line: 55, column: 31, scope: !7)
!48 = !DILocation(line: 55, column: 56, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 57, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 28, scope: !7)
!60 = !DILocation(line: 65, column: 40, scope: !7)
!61 = !DILocation(line: 65, column: 4, scope: !7)
