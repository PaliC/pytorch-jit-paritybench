; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_stack_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 8, !dbg !14
  %19 = srem i32 %18, 8, !dbg !15
  %20 = mul i32 %18, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 8, !dbg !16
  %22 = sdiv i32 %16, 64, !dbg !17
  %23 = srem i32 %22, 256, !dbg !18
  %24 = icmp slt i32 %19, 4, !dbg !19
  %.lhs.trunc1 = trunc nsw i32 %21 to i8, !dbg !20
  %.lhs.trunc1.frozen = freeze i8 %.lhs.trunc1, !dbg !21
  %25 = sdiv i8 %.lhs.trunc1.frozen, 2, !dbg !21
  %26 = mul i8 %25, 2, !dbg !20
  %.decomposed7 = sub i8 %.lhs.trunc1.frozen, %26, !dbg !20
  %.sext2 = sext i8 %.decomposed7 to i32, !dbg !20
  %27 = shl nsw i32 %.sext2, 2, !dbg !22
  %28 = add nsw i32 %19, %27, !dbg !23
  %29 = icmp slt i32 %28, 4, !dbg !24
  %30 = and i1 %24, %29, !dbg !25
  %31 = shl nsw i32 %19, 2, !dbg !26
  %32 = shl nsw i32 %28, 2, !dbg !26
  %33 = shl nsw i32 %22, 4, !dbg !27
  %.lhs.trunc3 = trunc nsw i32 %.decomposed to i8, !dbg !21
  %34 = ashr exact i8 %.lhs.trunc3, 1, !dbg !21
  %.sext4 = sext i8 %34 to i32, !dbg !21
  %.sext6 = sext i8 %25 to i32, !dbg !21
  %35 = add nsw i32 %33, %.sext4, !dbg !28
  %36 = add nsw i32 %35, %31, !dbg !29
  %37 = add nsw i32 %33, %.sext6, !dbg !28
  %38 = add nsw i32 %37, %32, !dbg !29
  %39 = sext i32 %36 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !30
  %41 = sext i32 %38 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !30
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %24, i32 0, i1 %24) #1, !dbg !31
  %44 = bitcast i32 %43 to float, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %30, i32 0, i1 %30) #1, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = sext i32 %23 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %24, i32 0, i1 %24) #1, !dbg !33
  %50 = bitcast i32 %49 to float, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %30, i32 0, i1 %30) #1, !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = fadd float %44, %50, !dbg !34
  %54 = fadd float %46, %52, !dbg !34
  %55 = select i1 %30, float %54, float 0.000000e+00, !dbg !35
  %56 = icmp sgt i32 %28, 3, !dbg !36
  %57 = and i1 %24, %56, !dbg !37
  %58 = add nsw i32 %27, -4, !dbg !38
  %59 = add nsw i32 %19, %58, !dbg !39
  %60 = shl nsw i32 %59, 2, !dbg !40
  %61 = add nsw i32 %35, -16, !dbg !41
  %62 = add nsw i32 %61, %31, !dbg !42
  %63 = add nsw i32 %37, %60, !dbg !42
  %64 = sext i32 %62 to i64, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !43
  %66 = sext i32 %63 to i64, !dbg !43
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !43
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 false, i32 0, i1 false) #1, !dbg !44
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %57, i32 0, i1 %57) #1, !dbg !44
  %70 = bitcast i32 %69 to float, !dbg !44
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !45
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 false, i32 0, i1 false) #1, !dbg !46
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %57, i32 0, i1 %57) #1, !dbg !46
  %74 = bitcast i32 %73 to float, !dbg !46
  %75 = fadd float %70, %74, !dbg !47
  %76 = select i1 %57, float %75, float 0.000000e+00, !dbg !48
  %77 = select i1 %29, float %55, float %76, !dbg !49
  %78 = icmp sgt i32 %19, 3, !dbg !50
  %79 = add nsw i32 %19, -4, !dbg !51
  %80 = add nsw i32 %79, %27, !dbg !52
  %81 = icmp slt i32 %80, 4, !dbg !53
  %82 = and i1 %78, %81, !dbg !54
  %83 = shl nsw i32 %79, 2, !dbg !55
  %84 = shl nsw i32 %80, 2, !dbg !55
  %85 = add nsw i32 %35, %83, !dbg !56
  %86 = add nsw i32 %37, %84, !dbg !56
  %87 = sext i32 %85 to i64, !dbg !57
  %88 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !57
  %89 = sext i32 %86 to i64, !dbg !57
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !57
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %78, i32 0, i1 %78) #1, !dbg !58
  %92 = bitcast i32 %91 to float, !dbg !58
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %82, i32 0, i1 %82) #1, !dbg !58
  %94 = bitcast i32 %93 to float, !dbg !58
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !59
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %78, i32 0, i1 %78) #1, !dbg !60
  %97 = bitcast i32 %96 to float, !dbg !60
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %82, i32 0, i1 %82) #1, !dbg !60
  %99 = bitcast i32 %98 to float, !dbg !60
  %100 = fadd float %92, %97, !dbg !61
  %101 = fadd float %94, %99, !dbg !61
  %102 = select i1 %82, float %101, float 0.000000e+00, !dbg !62
  %103 = icmp sgt i32 %80, 3, !dbg !63
  %104 = and i1 %78, %103, !dbg !64
  %105 = add nsw i32 %79, %58, !dbg !65
  %106 = shl nsw i32 %105, 2, !dbg !66
  %107 = add nsw i32 %35, -32, !dbg !67
  %108 = add nsw i32 %107, %31, !dbg !68
  %109 = add nsw i32 %37, %106, !dbg !68
  %110 = sext i32 %108 to i64, !dbg !69
  %111 = getelementptr float, ptr addrspace(1) %6, i64 %110, !dbg !69
  %112 = sext i32 %109 to i64, !dbg !69
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %112, !dbg !69
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 false, i32 0, i1 false) #1, !dbg !70
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %104, i32 0, i1 %104) #1, !dbg !70
  %116 = bitcast i32 %115 to float, !dbg !70
  %117 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !71
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 false, i32 0, i1 false) #1, !dbg !72
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %104, i32 0, i1 %104) #1, !dbg !72
  %120 = bitcast i32 %119 to float, !dbg !72
  %121 = fadd float %116, %120, !dbg !73
  %122 = select i1 %104, float %121, float 0.000000e+00, !dbg !74
  %123 = select i1 %81, float %102, float %122, !dbg !75
  %124 = select i1 %24, float %53, float %100, !dbg !76
  %125 = select i1 %24, float %77, float %123, !dbg !76
  %126 = sext i32 %16 to i64, !dbg !77
  %127 = getelementptr float, ptr addrspace(1) %8, i64 %126, !dbg !77
  %128 = bitcast float %124 to i32, !dbg !78
  %129 = bitcast float %125 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %127, i1 true) #1, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2vwrpxvmeac6ezmoqzrivjahm3bsn53rqqb4v4l2yu5zsfikopq.py", directory: "inductor_cache/2v")
!4 = !{ptr @triton_poi_fused_stack_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_29", linkageName: "triton_poi_fused_stack_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 20, scope: !7)
!21 = !DILocation(line: 40, column: 72, scope: !7)
!22 = !DILocation(line: 34, column: 15, scope: !7)
!23 = !DILocation(line: 34, column: 27, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 39, column: 19, scope: !7)
!26 = !DILocation(line: 40, column: 34, scope: !7)
!27 = !DILocation(line: 40, column: 60, scope: !7)
!28 = !DILocation(line: 40, column: 57, scope: !7)
!29 = !DILocation(line: 40, column: 66, scope: !7)
!30 = !DILocation(line: 40, column: 31, scope: !7)
!31 = !DILocation(line: 40, column: 77, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 36, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 44, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 41, scope: !7)
!39 = !DILocation(line: 49, column: 57, scope: !7)
!40 = !DILocation(line: 49, column: 34, scope: !7)
!41 = !DILocation(line: 49, column: 64, scope: !7)
!42 = !DILocation(line: 49, column: 73, scope: !7)
!43 = !DILocation(line: 49, column: 31, scope: !7)
!44 = !DILocation(line: 49, column: 84, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 36, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 54, column: 34, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 35, scope: !7)
!52 = !DILocation(line: 60, column: 28, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 34, scope: !7)
!56 = !DILocation(line: 66, column: 73, scope: !7)
!57 = !DILocation(line: 66, column: 31, scope: !7)
!58 = !DILocation(line: 66, column: 84, scope: !7)
!59 = !DILocation(line: 67, column: 31, scope: !7)
!60 = !DILocation(line: 67, column: 36, scope: !7)
!61 = !DILocation(line: 68, column: 20, scope: !7)
!62 = !DILocation(line: 70, column: 35, scope: !7)
!63 = !DILocation(line: 71, column: 21, scope: !7)
!64 = !DILocation(line: 74, column: 20, scope: !7)
!65 = !DILocation(line: 75, column: 57, scope: !7)
!66 = !DILocation(line: 75, column: 34, scope: !7)
!67 = !DILocation(line: 75, column: 71, scope: !7)
!68 = !DILocation(line: 75, column: 80, scope: !7)
!69 = !DILocation(line: 75, column: 31, scope: !7)
!70 = !DILocation(line: 75, column: 91, scope: !7)
!71 = !DILocation(line: 76, column: 31, scope: !7)
!72 = !DILocation(line: 76, column: 36, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 79, column: 35, scope: !7)
!75 = !DILocation(line: 80, column: 35, scope: !7)
!76 = !DILocation(line: 0, scope: !7)
!77 = !DILocation(line: 84, column: 25, scope: !7)
!78 = !DILocation(line: 84, column: 37, scope: !7)
!79 = !DILocation(line: 84, column: 4, scope: !7)
