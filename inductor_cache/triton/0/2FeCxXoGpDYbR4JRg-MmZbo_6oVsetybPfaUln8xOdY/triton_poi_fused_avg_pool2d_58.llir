; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_58(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 2816, !dbg !14
  %11 = add i32 %9, -528, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -352, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -176, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = sext i32 %9 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = add i32 %9, 176, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !24
  %26 = shufflevector <2 x i32> %25, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !24
  %27 = sdiv <2 x i32> %26, <i32 352, i32 176>, !dbg !24
  %28 = srem <2 x i32> %27, splat (i32 2), !dbg !25
  %29 = extractelement <2 x i32> %28, i64 0, !dbg !26
  %30 = icmp sgt i32 %29, 0, !dbg !27
  %31 = extractelement <2 x i32> %28, i64 1, !dbg !26
  %32 = icmp sgt i32 %31, 0, !dbg !28
  %33 = and i1 %30, %32, !dbg !29
  %34 = and i1 %10, %33, !dbg !30
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %13, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !31
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !31
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !31
  %38 = bitcast i32 %36 to float, !dbg !31
  %39 = bitcast i32 %37 to float, !dbg !31
  %40 = icmp sgt i32 %31, -1, !dbg !32
  %41 = and i1 %30, %40, !dbg !33
  %42 = and i1 %10, %41, !dbg !34
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #1, !dbg !35
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !35
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !35
  %46 = bitcast i32 %44 to float, !dbg !35
  %47 = bitcast i32 %45 to float, !dbg !35
  %48 = fadd float %38, %46, !dbg !36
  %49 = fadd float %39, %47, !dbg !36
  %50 = icmp slt <2 x i32> %28, splat (i32 1), !dbg !37
  %51 = extractelement <2 x i1> %50, i64 1, !dbg !38
  %52 = and i1 %30, %51, !dbg !38
  %53 = and i1 %10, %52, !dbg !39
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !40
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !40
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !40
  %57 = bitcast i32 %55 to float, !dbg !40
  %58 = bitcast i32 %56 to float, !dbg !40
  %59 = fadd float %48, %57, !dbg !41
  %60 = fadd float %49, %58, !dbg !41
  %61 = icmp sgt i32 %29, -1, !dbg !42
  %62 = and i1 %61, %32, !dbg !43
  %63 = and i1 %10, %62, !dbg !44
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #1, !dbg !45
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !45
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !45
  %67 = bitcast i32 %65 to float, !dbg !45
  %68 = bitcast i32 %66 to float, !dbg !45
  %69 = fadd float %59, %67, !dbg !46
  %70 = fadd float %60, %68, !dbg !46
  %71 = or i32 %29, %31, !dbg !26
  %72 = icmp sgt i32 %71, -1, !dbg !26
  %73 = and i1 %10, %72, !dbg !47
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #1, !dbg !48
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !48
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !48
  %77 = bitcast i32 %75 to float, !dbg !48
  %78 = bitcast i32 %76 to float, !dbg !48
  %79 = fadd float %69, %77, !dbg !49
  %80 = fadd float %70, %78, !dbg !49
  %81 = and i1 %61, %51, !dbg !50
  %82 = and i1 %10, %81, !dbg !51
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !52
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !52
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !52
  %86 = bitcast i32 %84 to float, !dbg !52
  %87 = bitcast i32 %85 to float, !dbg !52
  %88 = fadd float %79, %86, !dbg !53
  %89 = fadd float %80, %87, !dbg !53
  %90 = extractelement <2 x i1> %50, i64 0, !dbg !54
  %91 = and i1 %90, %32, !dbg !54
  %92 = and i1 %10, %91, !dbg !55
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #1, !dbg !56
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !56
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !56
  %96 = bitcast i32 %94 to float, !dbg !56
  %97 = bitcast i32 %95 to float, !dbg !56
  %98 = fadd float %88, %96, !dbg !57
  %99 = fadd float %89, %97, !dbg !57
  %100 = and i1 %90, %40, !dbg !58
  %101 = add i32 %9, 352, !dbg !59
  %102 = sext i32 %101 to i64, !dbg !60
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !60
  %104 = and i1 %10, %100, !dbg !61
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %103, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #1, !dbg !62
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !62
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !62
  %108 = bitcast i32 %106 to float, !dbg !62
  %109 = bitcast i32 %107 to float, !dbg !62
  %110 = fadd float %98, %108, !dbg !63
  %111 = fadd float %99, %109, !dbg !63
  %112 = and i1 %90, %51, !dbg !64
  %113 = add i32 %9, 528, !dbg !65
  %114 = sext i32 %113 to i64, !dbg !66
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !66
  %116 = and i1 %10, %112, !dbg !67
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %115, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #1, !dbg !68
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !68
  %119 = extractvalue { i32, i32 } %117, 1, !dbg !68
  %120 = bitcast i32 %118 to float, !dbg !68
  %121 = bitcast i32 %119 to float, !dbg !68
  %122 = fadd float %110, %120, !dbg !69
  %123 = fadd float %111, %121, !dbg !69
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 4.000000e+00) #1, !dbg !70
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 4.000000e+00) #1, !dbg !70
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !71
  %127 = bitcast float %124 to i32, !dbg !72
  %128 = bitcast float %125 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %10) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cafqrms7u6i34t4jpaqiqtubw5w4lcvuhuua2mlylesdulloub4n.py", directory: "inductor_cache/af")
!4 = !{ptr @triton_poi_fused_avg_pool2d_58, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_58, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_58", linkageName: "triton_poi_fused_avg_pool2d_58", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 40, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 40, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 40, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 61, column: 31, scope: !7)
!22 = !DILocation(line: 64, column: 37, scope: !7)
!23 = !DILocation(line: 64, column: 31, scope: !7)
!24 = !DILocation(line: 24, column: 21, scope: !7)
!25 = !DILocation(line: 24, column: 28, scope: !7)
!26 = !DILocation(line: 60, column: 20, scope: !7)
!27 = !DILocation(line: 29, column: 19, scope: !7)
!28 = !DILocation(line: 34, column: 19, scope: !7)
!29 = !DILocation(line: 37, column: 19, scope: !7)
!30 = !DILocation(line: 38, column: 53, scope: !7)
!31 = !DILocation(line: 38, column: 45, scope: !7)
!32 = !DILocation(line: 40, column: 21, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 53, scope: !7)
!35 = !DILocation(line: 44, column: 45, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 68, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 19, scope: !7)
!39 = !DILocation(line: 51, column: 53, scope: !7)
!40 = !DILocation(line: 51, column: 45, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 21, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 53, scope: !7)
!45 = !DILocation(line: 58, column: 45, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 61, column: 44, scope: !7)
!48 = !DILocation(line: 61, column: 36, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 20, scope: !7)
!51 = !DILocation(line: 64, column: 50, scope: !7)
!52 = !DILocation(line: 64, column: 42, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 50, scope: !7)
!56 = !DILocation(line: 71, column: 42, scope: !7)
!57 = !DILocation(line: 72, column: 20, scope: !7)
!58 = !DILocation(line: 73, column: 20, scope: !7)
!59 = !DILocation(line: 74, column: 37, scope: !7)
!60 = !DILocation(line: 74, column: 31, scope: !7)
!61 = !DILocation(line: 74, column: 50, scope: !7)
!62 = !DILocation(line: 74, column: 42, scope: !7)
!63 = !DILocation(line: 75, column: 20, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 37, scope: !7)
!66 = !DILocation(line: 77, column: 31, scope: !7)
!67 = !DILocation(line: 77, column: 50, scope: !7)
!68 = !DILocation(line: 77, column: 42, scope: !7)
!69 = !DILocation(line: 78, column: 20, scope: !7)
!70 = !DILocation(line: 80, column: 20, scope: !7)
!71 = !DILocation(line: 81, column: 25, scope: !7)
!72 = !DILocation(line: 81, column: 37, scope: !7)
!73 = !DILocation(line: 81, column: 4, scope: !7)
