; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = lshr i32 %8, 2, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = or disjoint i32 %14, 32, !dbg !12
  %16 = or disjoint i32 %14, 64, !dbg !12
  %17 = or disjoint i32 %14, 96, !dbg !12
  %18 = or disjoint i32 %14, 128, !dbg !12
  %19 = or disjoint i32 %14, 160, !dbg !12
  %20 = or disjoint i32 %14, 192, !dbg !12
  %21 = or disjoint i32 %14, 224, !dbg !12
  %22 = or disjoint i32 %7, %10, !dbg !13
  %23 = or disjoint i32 %7, %12, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = or disjoint i32 %7, %18, !dbg !13
  %29 = or disjoint i32 %7, %19, !dbg !13
  %30 = or disjoint i32 %7, %20, !dbg !13
  %31 = or disjoint i32 %7, %21, !dbg !13
  %32 = icmp slt i32 %22, 256, !dbg !14
  %33 = icmp slt i32 %23, 256, !dbg !14
  %34 = icmp slt i32 %24, 256, !dbg !14
  %35 = icmp slt i32 %25, 256, !dbg !14
  %36 = icmp slt i32 %26, 256, !dbg !14
  %37 = icmp slt i32 %27, 256, !dbg !14
  %38 = icmp slt i32 %28, 256, !dbg !14
  %39 = icmp slt i32 %29, 256, !dbg !14
  %40 = icmp slt i32 %30, 256, !dbg !14
  %41 = icmp slt i32 %31, 256, !dbg !14
  %42 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %43 = shl i32 %42, 2, !dbg !16
  %44 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %44, 1, !dbg !17
  %45 = and i32 %8, 3, !dbg !17
  %46 = or disjoint i32 %43, %.lobit, !dbg !18
  %47 = or disjoint i32 %46, 2, !dbg !18
  %48 = or disjoint i32 %43, %45, !dbg !18
  %49 = icmp slt i32 %46, 961, !dbg !19
  %50 = icmp slt i32 %47, 961, !dbg !19
  %51 = icmp slt i32 %48, 961, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %52 = sdiv i32 %.frozen, 64, !dbg !20
  %53 = mul i32 %52, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %53, !dbg !21
  %54 = srem i32 %23, 64, !dbg !21
  %55 = shl i32 %46, 6, !dbg !22
  %56 = shl i32 %47, 6, !dbg !22
  %57 = mul i32 %52, 61504, !dbg !23
  %58 = add i32 %57, %.decomposed, !dbg !24
  %59 = add i32 %58, %55, !dbg !25
  %60 = add i32 %58, %56, !dbg !25
  %61 = sext i32 %59 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !26
  %63 = sext i32 %60 to i64, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !26
  %65 = and i1 %32, %49, !dbg !27
  %66 = and i1 %50, %32, !dbg !27
  %67 = and i1 %34, %51, !dbg !27
  %68 = and i1 %35, %51, !dbg !27
  %69 = and i1 %36, %51, !dbg !27
  %70 = and i1 %37, %51, !dbg !27
  %71 = and i1 %38, %51, !dbg !27
  %72 = and i1 %39, %51, !dbg !27
  %73 = and i1 %40, %51, !dbg !27
  %74 = and i1 %41, %51, !dbg !27
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %65) #2, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %66) #2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !28
  %85 = shl i32 %8, 4, !dbg !28
  %86 = and i32 %85, 1008, !dbg !28
  %87 = or disjoint i32 %86, %.lobit, !dbg !28
  %88 = and i32 %8, 127, !dbg !28
  %89 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %86, !dbg !28
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !28
  %91 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !28
  %92 = or disjoint i32 %87, 4, !dbg !28
  %93 = lshr i32 %92, 2, !dbg !28
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !28
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !28
  %96 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !28
  %97 = or disjoint i32 %87, 8, !dbg !28
  %98 = lshr i32 %97, 2, !dbg !28
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !28
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !28
  %101 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !28
  %102 = or disjoint i32 %87, 12, !dbg !28
  %103 = lshr i32 %102, 2, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !28
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !28
  %106 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !28
  %107 = or disjoint i32 %87, 2, !dbg !28
  %108 = getelementptr float, ptr addrspace(3) %89, i32 %107, !dbg !28
  %109 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !28
  %110 = or disjoint i32 %87, 6, !dbg !28
  %111 = lshr i32 %110, 2, !dbg !28
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !28
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !28
  %114 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !28
  %115 = or disjoint i32 %87, 10, !dbg !28
  %116 = lshr i32 %115, 2, !dbg !28
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !28
  %119 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !28
  %120 = or disjoint i32 %87, 14, !dbg !28
  %121 = lshr i32 %120, 2, !dbg !28
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !28
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !28
  %124 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %125 = lshr i32 %88, 2, !dbg !28
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !28
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %88, !dbg !28
  %128 = load float, ptr addrspace(3) %127, align 4, !dbg !28
  %129 = or disjoint i32 %88, 128, !dbg !28
  %130 = lshr i32 %129, 2, !dbg !28
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !28
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %129, !dbg !28
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !28
  %134 = or disjoint i32 %88, 256, !dbg !28
  %135 = lshr i32 %134, 2, !dbg !28
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !28
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %134, !dbg !28
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !28
  %139 = or disjoint i32 %88, 384, !dbg !28
  %140 = lshr i32 %139, 2, !dbg !28
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140, !dbg !28
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %139, !dbg !28
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !28
  %144 = or disjoint i32 %88, 512, !dbg !28
  %145 = lshr i32 %144, 2, !dbg !28
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !28
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %144, !dbg !28
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !28
  %149 = or disjoint i32 %88, 640, !dbg !28
  %150 = lshr i32 %149, 2, !dbg !28
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !28
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !28
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !28
  %154 = or disjoint i32 %88, 768, !dbg !28
  %155 = lshr i32 %154, 2, !dbg !28
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !28
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %154, !dbg !28
  %158 = load float, ptr addrspace(3) %157, align 4, !dbg !28
  %159 = or disjoint i32 %88, 896, !dbg !28
  %160 = lshr i32 %159, 2, !dbg !28
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !28
  %162 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %159, !dbg !28
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !28
  %164 = sext i32 %54 to i64, !dbg !29
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %164, !dbg !29
  %166 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %165, i1 %33) #2, !dbg !30
  %167 = extractvalue { i32, i32 } %166, 0, !dbg !30
  %168 = extractvalue { i32, i32 } %166, 1, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl nuw nsw i32 %12, 3, !dbg !31
  %169 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %170 = insertelement <1 x i32> poison, i32 %167, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !31
  %171 = shl nuw nsw i32 %12, 1, !dbg !31
  %172 = or disjoint i32 %171, 2, !dbg !31
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !31
  %174 = insertelement <1 x i32> poison, i32 %168, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !31
  %175 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %176 = load float, ptr addrspace(3) %175, align 8, !dbg !31
  %.idx5 = shl nuw nsw i32 %15, 3, !dbg !31
  %177 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !31
  %178 = load float, ptr addrspace(3) %177, align 8, !dbg !31
  %.idx6 = shl nuw nsw i32 %16, 3, !dbg !31
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !31
  %180 = load float, ptr addrspace(3) %179, align 8, !dbg !31
  %.idx7 = shl nuw nsw i32 %17, 3, !dbg !31
  %181 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !31
  %182 = load float, ptr addrspace(3) %181, align 8, !dbg !31
  %.idx8 = shl nuw nsw i32 %18, 3, !dbg !31
  %183 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !31
  %184 = load float, ptr addrspace(3) %183, align 8, !dbg !31
  %.idx9 = shl nuw nsw i32 %19, 3, !dbg !31
  %185 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !31
  %186 = load float, ptr addrspace(3) %185, align 8, !dbg !31
  %.idx10 = shl nuw nsw i32 %20, 3, !dbg !31
  %187 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !31
  %188 = load float, ptr addrspace(3) %187, align 8, !dbg !31
  %.idx11 = shl nuw nsw i32 %21, 3, !dbg !31
  %189 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !31
  %190 = load float, ptr addrspace(3) %189, align 8, !dbg !31
  %191 = fadd float %128, %176, !dbg !35
  %192 = fadd float %133, %178, !dbg !35
  %193 = fadd float %138, %180, !dbg !35
  %194 = fadd float %143, %182, !dbg !35
  %195 = fadd float %148, %184, !dbg !35
  %196 = fadd float %153, %186, !dbg !35
  %197 = fadd float %158, %188, !dbg !35
  %198 = fadd float %163, %190, !dbg !35
  %199 = fcmp olt float %191, 0.000000e+00, !dbg !36
  %200 = fcmp olt float %192, 0.000000e+00, !dbg !36
  %201 = fcmp olt float %193, 0.000000e+00, !dbg !36
  %202 = fcmp olt float %194, 0.000000e+00, !dbg !36
  %203 = fcmp olt float %195, 0.000000e+00, !dbg !36
  %204 = fcmp olt float %196, 0.000000e+00, !dbg !36
  %205 = fcmp olt float %197, 0.000000e+00, !dbg !36
  %206 = fcmp olt float %198, 0.000000e+00, !dbg !36
  %207 = select i1 %199, float 0.000000e+00, float %191, !dbg !31
  %208 = select i1 %200, float 0.000000e+00, float %192, !dbg !31
  %209 = select i1 %201, float 0.000000e+00, float %193, !dbg !31
  %210 = select i1 %202, float 0.000000e+00, float %194, !dbg !31
  %211 = select i1 %203, float 0.000000e+00, float %195, !dbg !31
  %212 = select i1 %204, float 0.000000e+00, float %196, !dbg !31
  %213 = select i1 %205, float 0.000000e+00, float %197, !dbg !31
  %214 = select i1 %206, float 0.000000e+00, float %198, !dbg !31
  %215 = mul i32 %24, 961, !dbg !37
  %216 = mul i32 %25, 961, !dbg !37
  %217 = mul i32 %26, 961, !dbg !37
  %218 = mul i32 %27, 961, !dbg !37
  %219 = mul i32 %28, 961, !dbg !37
  %220 = mul i32 %29, 961, !dbg !37
  %221 = mul i32 %30, 961, !dbg !37
  %222 = mul i32 %31, 961, !dbg !37
  %223 = add i32 %48, %215, !dbg !38
  %224 = add i32 %48, %216, !dbg !38
  %225 = add i32 %48, %217, !dbg !38
  %226 = add i32 %48, %218, !dbg !38
  %227 = add i32 %48, %219, !dbg !38
  %228 = add i32 %48, %220, !dbg !38
  %229 = add i32 %48, %221, !dbg !38
  %230 = add i32 %48, %222, !dbg !38
  %231 = sext i32 %223 to i64, !dbg !39
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !39
  %233 = sext i32 %224 to i64, !dbg !39
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !39
  %235 = sext i32 %225 to i64, !dbg !39
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !39
  %237 = sext i32 %226 to i64, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !39
  %239 = sext i32 %227 to i64, !dbg !39
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !39
  %241 = sext i32 %228 to i64, !dbg !39
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !39
  %243 = sext i32 %229 to i64, !dbg !39
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !39
  %245 = sext i32 %230 to i64, !dbg !39
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !39
  %247 = bitcast float %207 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %247, ptr addrspace(1) %232, i1 %67) #2, !dbg !40
  %248 = bitcast float %208 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %248, ptr addrspace(1) %234, i1 %68) #2, !dbg !40
  %249 = bitcast float %209 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %249, ptr addrspace(1) %236, i1 %69) #2, !dbg !40
  %250 = bitcast float %210 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %250, ptr addrspace(1) %238, i1 %70) #2, !dbg !40
  %251 = bitcast float %211 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %240, i1 %71) #2, !dbg !40
  %252 = bitcast float %212 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %252, ptr addrspace(1) %242, i1 %72) #2, !dbg !40
  %253 = bitcast float %213 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %253, ptr addrspace(1) %244, i1 %73) #2, !dbg !40
  %254 = bitcast float %214 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %254, ptr addrspace(1) %246, i1 %74) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cstaarsnbemu4daenwrw2iv3lbe5sphuamdxrw5evpkjhyzh5pvz.py", directory: "inductor_cache/st")
!4 = !{ptr @triton_poi_fused_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_2", linkageName: "triton_poi_fused_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 37, column: 34, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
