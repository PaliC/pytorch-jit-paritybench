; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 1024, !dbg !14
  %17 = srem i32 %16, 12, !dbg !15
  %18 = mul i32 %16, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen16 = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen16, 12288, !dbg !17
  %20 = icmp slt i32 %17, 4, !dbg !18
  %21 = mul i32 %19, 12288, !dbg !19
  %srem.decomposed = sub i32 %.frozen16, %21, !dbg !19
  %22 = shl nsw i32 %19, 12, !dbg !20
  %23 = add nsw i32 %22, %srem.decomposed, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !24
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !25
  %29 = icmp sgt i32 %17, 3, !dbg !26
  %30 = add nsw i32 %17, -4, !dbg !27
  %31 = shl nsw i32 %30, 10, !dbg !28
  %32 = shl nsw i32 %19, 13, !dbg !29
  %33 = add nsw i32 %32, %.decomposed, !dbg !30
  %34 = add nsw i32 %33, %31, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !32
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !33
  %38 = sext i32 %30 to i64, !dbg !34
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !34
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !36
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %29, i32 0, i1 %29) #3, !dbg !37
  %46 = bitcast i32 %45 to float, !dbg !37
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %29, i32 0, i1 %29) #3, !dbg !37
  %48 = bitcast i32 %47 to float, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %29, i32 0, i1 %29) #3, !dbg !37
  %50 = bitcast i32 %49 to float, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %29, i32 0, i1 %29) #3, !dbg !37
  %52 = bitcast i32 %51 to float, !dbg !37
  %53 = fadd float %46, 0x3EE4F8B580000000, !dbg !38
  %54 = fadd float %48, 0x3EE4F8B580000000, !dbg !38
  %55 = fadd float %50, 0x3EE4F8B580000000, !dbg !38
  %56 = fadd float %52, 0x3EE4F8B580000000, !dbg !38
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %57, 0, !dbg !39
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %58, 0, !dbg !39
  br i1 %.not.i, label %64, label %59, !dbg !39

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !39

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !39

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !39
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %69, 0, !dbg !39
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !39
  br i1 %.not.i1, label %76, label %71, !dbg !39

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !39

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !39

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !39
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %81, 0, !dbg !39
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %82, 0, !dbg !39
  br i1 %.not.i6, label %88, label %83, !dbg !39

83:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %86, label %84, !dbg !39

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !39

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %84, %86, %89, %91
  %.0.i8 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !39
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %93, 0, !dbg !39
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %94, 0, !dbg !39
  br i1 %.not.i11, label %100, label %95, !dbg !39

95:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %98, label %96, !dbg !39

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !39

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %96, %98, %101, %103
  %.0.i13 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !39
  %105 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !33
  %106 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !35
  %107 = insertelement <4 x i32> %106, i32 %42, i64 1, !dbg !35
  %108 = insertelement <4 x i32> %107, i32 %41, i64 2, !dbg !35
  %109 = insertelement <4 x i32> %108, i32 %40, i64 3, !dbg !35
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !23
  %115 = bitcast i32 %114 to float, !dbg !23
  %116 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !25
  %117 = bitcast i32 %116 to float, !dbg !25
  %118 = fmul float %115, %117, !dbg !40
  %119 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !23
  %120 = bitcast i32 %119 to float, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !25
  %122 = bitcast i32 %121 to float, !dbg !25
  %123 = fmul float %120, %122, !dbg !40
  %124 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !23
  %125 = bitcast i32 %124 to float, !dbg !23
  %126 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !25
  %127 = bitcast i32 %126 to float, !dbg !25
  %128 = fmul float %125, %127, !dbg !40
  %129 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !23
  %130 = bitcast i32 %129 to float, !dbg !23
  %131 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !25
  %132 = bitcast i32 %131 to float, !dbg !25
  %133 = fmul float %130, %132, !dbg !40
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %138 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !42
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %29, i32 0, i1 %29) #3, !dbg !43
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %29, i32 0, i1 %29) #3, !dbg !43
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %29, i32 0, i1 %29) #3, !dbg !43
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %29, i32 0, i1 %29) #3, !dbg !43
  %143 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !44
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %29, i32 0, i1 %29) #3, !dbg !45
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %29, i32 0, i1 %29) #3, !dbg !45
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %29, i32 0, i1 %29) #3, !dbg !45
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %29, i32 0, i1 %29) #3, !dbg !45
  %148 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !33
  %149 = insertelement <4 x i32> %148, i32 %111, i64 1, !dbg !33
  %150 = insertelement <4 x i32> %149, i32 %112, i64 2, !dbg !33
  %151 = insertelement <4 x i32> %150, i32 %113, i64 3, !dbg !33
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !33
  %153 = fsub <4 x float> %152, %110, !dbg !46
  %154 = insertelement <4 x float> poison, float %137, i64 0, !dbg !47
  %155 = insertelement <4 x float> %154, float %136, i64 1, !dbg !47
  %156 = insertelement <4 x float> %155, float %135, i64 2, !dbg !47
  %157 = insertelement <4 x float> %156, float %134, i64 3, !dbg !47
  %158 = fmul <4 x float> %153, %157, !dbg !47
  %159 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !43
  %160 = insertelement <4 x i32> %159, i32 %141, i64 1, !dbg !43
  %161 = insertelement <4 x i32> %160, i32 %140, i64 2, !dbg !43
  %162 = insertelement <4 x i32> %161, i32 %139, i64 3, !dbg !43
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !43
  %164 = fmul <4 x float> %158, %163, !dbg !48
  %165 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !45
  %166 = insertelement <4 x i32> %165, i32 %146, i64 1, !dbg !45
  %167 = insertelement <4 x i32> %166, i32 %145, i64 2, !dbg !45
  %168 = insertelement <4 x i32> %167, i32 %144, i64 3, !dbg !45
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !45
  %170 = fadd <4 x float> %164, %169, !dbg !49
  %171 = fcmp olt <4 x float> %170, zeroinitializer, !dbg !50
  %172 = extractelement <4 x i1> %171, i64 3, !dbg !54
  %173 = extractelement <4 x float> %170, i64 3, !dbg !54
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !54
  %175 = extractelement <4 x i1> %171, i64 2, !dbg !54
  %176 = extractelement <4 x float> %170, i64 2, !dbg !54
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !54
  %178 = extractelement <4 x i1> %171, i64 1, !dbg !54
  %179 = extractelement <4 x float> %170, i64 1, !dbg !54
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !54
  %181 = extractelement <4 x i1> %171, i64 0, !dbg !54
  %182 = extractelement <4 x float> %170, i64 0, !dbg !54
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !54
  %184 = select i1 %20, float %133, float %174, !dbg !55
  %185 = select i1 %20, float %128, float %177, !dbg !55
  %186 = select i1 %20, float %123, float %180, !dbg !55
  %187 = select i1 %20, float %118, float %183, !dbg !55
  %188 = sext i32 %15 to i64, !dbg !56
  %189 = getelementptr float, ptr addrspace(1) %7, i64 %188, !dbg !56
  %190 = bitcast float %184 to i32, !dbg !57
  %191 = bitcast float %185 to i32, !dbg !57
  %192 = bitcast float %186 to i32, !dbg !57
  %193 = bitcast float %187 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %190, i32 %191, i32 %192, i32 %193, ptr addrspace(1) %189, i1 true) #3, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyt3ro2cgxahaxmriluu5xvhzfzsx2uvg23nqbndc5zjmernieej.py", directory: "inductor_cache/yt")
!4 = !{ptr @triton_poi_fused_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_10", linkageName: "triton_poi_fused_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 57, scope: !7)
!26 = !DILocation(line: 38, column: 20, scope: !7)
!27 = !DILocation(line: 41, column: 49, scope: !7)
!28 = !DILocation(line: 41, column: 42, scope: !7)
!29 = !DILocation(line: 41, column: 60, scope: !7)
!30 = !DILocation(line: 41, column: 36, scope: !7)
!31 = !DILocation(line: 41, column: 55, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 65, scope: !7)
!34 = !DILocation(line: 42, column: 31, scope: !7)
!35 = !DILocation(line: 42, column: 43, scope: !7)
!36 = !DILocation(line: 44, column: 31, scope: !7)
!37 = !DILocation(line: 44, column: 43, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 27, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 31, scope: !7)
!43 = !DILocation(line: 53, column: 43, scope: !7)
!44 = !DILocation(line: 55, column: 31, scope: !7)
!45 = !DILocation(line: 55, column: 43, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 58, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 0, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
