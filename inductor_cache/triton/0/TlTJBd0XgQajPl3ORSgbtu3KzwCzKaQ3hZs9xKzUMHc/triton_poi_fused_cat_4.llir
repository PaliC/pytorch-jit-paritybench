; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = sdiv i32 %12, 4096, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %15 = sdiv i32 %.frozen, 393216, !dbg !15
  %.frozen2 = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen2, 393216, !dbg !15
  %17 = mul i32 %15, 393216, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = mul i32 %16, 393216, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %18, !dbg !16
  %19 = shl nsw i32 %15, 18, !dbg !17
  %20 = shl nsw i32 %16, 18, !dbg !17
  %21 = add nsw i32 %19, %srem.decomposed, !dbg !18
  %22 = add nsw i32 %20, %srem1.decomposed, !dbg !18
  %23 = sext i32 %21 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = shl nsw i32 %15, 17, !dbg !20
  %28 = shl nsw i32 %16, 17, !dbg !20
  %29 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !21
  %30 = insertelement <2 x i32> %29, i32 %13, i64 1, !dbg !21
  %31 = srem <2 x i32> %30, <i32 4096, i32 96>, !dbg !21
  %32 = extractelement <2 x i32> %31, i64 1, !dbg !22
  %33 = icmp slt i32 %32, 64, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %39 = icmp sgt i32 %32, 63, !dbg !22
  %40 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %27, i64 0, !dbg !25
  %41 = add nsw <2 x i32> %40, %31, !dbg !25
  %42 = extractelement <2 x i32> %41, i64 1, !dbg !26
  %43 = shl nsw i32 %42, 12, !dbg !26
  %44 = extractelement <2 x i32> %41, i64 0, !dbg !27
  %45 = add nsw i32 %44, %43, !dbg !27
  %46 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !21
  %47 = insertelement <2 x i32> %46, i32 %14, i64 1, !dbg !21
  %48 = srem <2 x i32> %47, <i32 4096, i32 96>, !dbg !21
  %49 = extractelement <2 x i32> %48, i64 1, !dbg !22
  %50 = icmp slt i32 %49, 64, !dbg !23
  %51 = icmp sgt i32 %49, 63, !dbg !22
  %52 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %28, i64 0, !dbg !25
  %53 = add nsw <2 x i32> %52, %48, !dbg !25
  %54 = extractelement <2 x i32> %53, i64 1, !dbg !26
  %55 = shl nsw i32 %54, 12, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = extractelement <2 x i32> %53, i64 0, !dbg !27
  %62 = add nsw i32 %61, %55, !dbg !27
  %63 = sext i32 %45 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !28
  %65 = sext i32 %62 to i64, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #1, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !29
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !29
  %77 = sext i32 %42 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !30
  %79 = sext i32 %54 to i64, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %89 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !29
  %90 = insertelement <8 x i32> %89, i32 %75, i64 1, !dbg !29
  %91 = insertelement <8 x i32> %90, i32 %74, i64 2, !dbg !29
  %92 = insertelement <8 x i32> %91, i32 %73, i64 3, !dbg !29
  %93 = insertelement <8 x i32> %92, i32 %71, i64 4, !dbg !29
  %94 = insertelement <8 x i32> %93, i32 %70, i64 5, !dbg !29
  %95 = insertelement <8 x i32> %94, i32 %69, i64 6, !dbg !29
  %96 = insertelement <8 x i32> %95, i32 %68, i64 7, !dbg !29
  %97 = bitcast <8 x i32> %96 to <8 x float>, !dbg !29
  %98 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !31
  %99 = insertelement <8 x i32> %98, i32 %87, i64 1, !dbg !31
  %100 = insertelement <8 x i32> %99, i32 %86, i64 2, !dbg !31
  %101 = insertelement <8 x i32> %100, i32 %85, i64 3, !dbg !31
  %102 = insertelement <8 x i32> %101, i32 %84, i64 4, !dbg !31
  %103 = insertelement <8 x i32> %102, i32 %83, i64 5, !dbg !31
  %104 = insertelement <8 x i32> %103, i32 %82, i64 6, !dbg !31
  %105 = insertelement <8 x i32> %104, i32 %81, i64 7, !dbg !31
  %106 = bitcast <8 x i32> %105 to <8 x float>, !dbg !31
  %107 = fadd <8 x float> %97, %106, !dbg !32
  %108 = fcmp ogt <8 x float> %107, zeroinitializer, !dbg !33
  %109 = extractelement <8 x float> %107, i64 7, !dbg !34
  %110 = fmul float %109, 0x3FC99999A0000000, !dbg !35
  %111 = extractelement <8 x float> %107, i64 6, !dbg !34
  %112 = fmul float %111, 0x3FC99999A0000000, !dbg !35
  %113 = extractelement <8 x float> %107, i64 5, !dbg !34
  %114 = fmul float %113, 0x3FC99999A0000000, !dbg !35
  %115 = extractelement <8 x float> %107, i64 4, !dbg !34
  %116 = fmul float %115, 0x3FC99999A0000000, !dbg !35
  %117 = extractelement <8 x float> %107, i64 3, !dbg !34
  %118 = fmul float %117, 0x3FC99999A0000000, !dbg !35
  %119 = extractelement <8 x float> %107, i64 2, !dbg !34
  %120 = fmul float %119, 0x3FC99999A0000000, !dbg !35
  %121 = extractelement <8 x float> %107, i64 1, !dbg !34
  %122 = fmul float %121, 0x3FC99999A0000000, !dbg !35
  %123 = extractelement <8 x float> %107, i64 0, !dbg !34
  %124 = fmul float %123, 0x3FC99999A0000000, !dbg !35
  %125 = extractelement <8 x i1> %108, i64 7, !dbg !34
  %126 = select i1 %125, float %109, float %110, !dbg !34
  %127 = extractelement <8 x i1> %108, i64 6, !dbg !34
  %128 = select i1 %127, float %111, float %112, !dbg !34
  %129 = extractelement <8 x i1> %108, i64 5, !dbg !34
  %130 = select i1 %129, float %113, float %114, !dbg !34
  %131 = extractelement <8 x i1> %108, i64 4, !dbg !34
  %132 = select i1 %131, float %115, float %116, !dbg !34
  %133 = extractelement <8 x i1> %108, i64 3, !dbg !34
  %134 = select i1 %133, float %117, float %118, !dbg !34
  %135 = extractelement <8 x i1> %108, i64 2, !dbg !34
  %136 = select i1 %135, float %119, float %120, !dbg !34
  %137 = extractelement <8 x i1> %108, i64 1, !dbg !34
  %138 = select i1 %137, float %121, float %122, !dbg !34
  %139 = extractelement <8 x i1> %108, i64 0, !dbg !34
  %140 = select i1 %139, float %123, float %124, !dbg !34
  %141 = sext i32 %11 to i64, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !36
  %143 = sext i32 %12 to i64, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !36
  %145 = bitcast float %126 to i32, !dbg !37
  %146 = select i1 %33, i32 %35, i32 %145, !dbg !38
  %147 = bitcast float %128 to i32, !dbg !37
  %148 = select i1 %33, i32 %36, i32 %147, !dbg !38
  %149 = bitcast float %130 to i32, !dbg !37
  %150 = select i1 %33, i32 %37, i32 %149, !dbg !38
  %151 = bitcast float %132 to i32, !dbg !37
  %152 = select i1 %33, i32 %38, i32 %151, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %146, i32 %148, i32 %150, i32 %152, ptr addrspace(1) %142, i1 true) #1, !dbg !37
  %153 = bitcast float %134 to i32, !dbg !37
  %154 = select i1 %50, i32 %57, i32 %153, !dbg !38
  %155 = bitcast float %136 to i32, !dbg !37
  %156 = select i1 %50, i32 %58, i32 %155, !dbg !38
  %157 = bitcast float %138 to i32, !dbg !37
  %158 = select i1 %50, i32 %59, i32 %157, !dbg !38
  %159 = bitcast float %140 to i32, !dbg !37
  %160 = select i1 %50, i32 %60, i32 %159, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %156, i32 %158, i32 %160, ptr addrspace(1) %144, i1 true) #1, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemtp2accrm5itj5jh7snx27pa3iacxvicgvqtoatj5vtt3episb.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 37, column: 62, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 37, column: 55, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 67, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 44, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 35, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 48, column: 37, scope: !7)
!38 = !DILocation(line: 47, column: 33, scope: !7)
!39 = !DILocation(line: 48, column: 4, scope: !7)
