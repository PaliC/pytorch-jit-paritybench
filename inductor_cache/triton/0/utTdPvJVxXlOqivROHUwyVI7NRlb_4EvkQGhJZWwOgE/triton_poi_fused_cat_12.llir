; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 510, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %30 = icmp slt i32 %28, 259584, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %31 = sdiv i32 %.frozen, 169, !dbg !15
  %.frozen37 = freeze i32 %29, !dbg !15
  %32 = sdiv i32 %.frozen37, 169, !dbg !15
  %33 = srem i32 %31, 384, !dbg !16
  %34 = srem i32 %32, 384, !dbg !16
  %35 = mul i32 %31, 169, !dbg !17
  %.decomposed = sub i32 %.frozen, %35, !dbg !17
  %36 = mul i32 %32, 169, !dbg !17
  %.decomposed38 = sub i32 %.frozen37, %36, !dbg !17
  %.frozen39 = freeze i32 %28, !dbg !18
  %37 = sdiv i32 %.frozen39, 64896, !dbg !18
  %38 = icmp slt i32 %33, 96, !dbg !19
  %39 = icmp slt i32 %34, 96, !dbg !19
  %40 = mul i32 %37, 64896, !dbg !20
  %srem.decomposed = sub i32 %.frozen39, %40, !dbg !20
  %srem1 = srem i32 %29, 64896, !dbg !20
  %41 = mul nsw i32 %37, 16224, !dbg !21
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !22
  %43 = add nsw i32 %41, %srem1, !dbg !22
  %44 = sext i32 %42 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %43 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = and i1 %30, %38, !dbg !24
  %49 = and i1 %39, %30, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %48, i32 0, i1 %48) #3, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %49, i32 0, i1 %49) #3, !dbg !25
  %52 = sext i32 %33 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %54 = sext i32 %34 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48) #3, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %49, i32 0, i1 %49) #3, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %48, i32 0, i1 %48) #3, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %49, i32 0, i1 %49) #3, !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %61, 0x3EE4F8B580000000, !dbg !30
  %65 = fadd float %63, 0x3EE4F8B580000000, !dbg !30
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %66, 0, !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %67, 0, !dbg !31
  br i1 %.not.i, label %73, label %68, !dbg !31

68:                                               ; preds = %22
  br i1 %.not1.i, label %71, label %69, !dbg !31

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

73:                                               ; preds = %22
  br i1 %.not1.i, label %76, label %74, !dbg !31

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !31
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i2 = icmp eq i32 %78, 0, !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i5 = icmp eq i32 %79, 0, !dbg !31
  br i1 %.not.i2, label %85, label %80, !dbg !31

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %83, label %81, !dbg !31

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %88, label %86, !dbg !31

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

__nv_sqrtf.exit6:                                 ; preds = %81, %83, %86, %88
  %.0.i4 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !31
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %48, i32 0, i1 %48) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %49, i32 0, i1 %49) #3, !dbg !34
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !35
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %48, i32 0, i1 %48) #3, !dbg !36
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %49, i32 0, i1 %49) #3, !dbg !36
  %100 = add nsw i32 %33, -96, !dbg !37
  %101 = icmp ult i32 %100, 96, !dbg !37
  %102 = add nsw i32 %34, -96, !dbg !37
  %103 = icmp ult i32 %102, 96, !dbg !37
  %104 = mul nsw i32 %100, 169, !dbg !38
  %105 = mul nsw i32 %102, 169, !dbg !38
  %106 = add nsw i32 %105, %.decomposed38, !dbg !39
  %107 = add nsw i32 %41, %.decomposed, !dbg !39
  %108 = add nsw i32 %107, %104, !dbg !40
  %109 = add nsw i32 %106, %41, !dbg !40
  %110 = sext i32 %108 to i64, !dbg !41
  %111 = getelementptr float, ptr addrspace(1) %5, i64 %110, !dbg !41
  %112 = sext i32 %109 to i64, !dbg !41
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !41
  %114 = and i1 %30, %101, !dbg !42
  %115 = and i1 %103, %30, !dbg !42
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %114, i32 0, i1 %114) #3, !dbg !43
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %115, i32 0, i1 %115) #3, !dbg !43
  %118 = sext i32 %100 to i64, !dbg !44
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %118, !dbg !44
  %120 = sext i32 %102 to i64, !dbg !44
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %120, !dbg !44
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %114, i32 0, i1 %114) #3, !dbg !45
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %115, i32 0, i1 %115) #3, !dbg !45
  %124 = getelementptr float, ptr addrspace(1) %7, i64 %118, !dbg !46
  %125 = getelementptr float, ptr addrspace(1) %7, i64 %120, !dbg !46
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %114, i32 0, i1 %114) #3, !dbg !47
  %127 = bitcast i32 %126 to float, !dbg !47
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %115, i32 0, i1 %115) #3, !dbg !47
  %129 = bitcast i32 %128 to float, !dbg !47
  %130 = fadd float %127, 0x3EE4F8B580000000, !dbg !48
  %131 = fadd float %129, 0x3EE4F8B580000000, !dbg !48
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i7 = icmp eq i32 %132, 0, !dbg !49
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i10 = icmp eq i32 %133, 0, !dbg !49
  br i1 %.not.i7, label %139, label %134, !dbg !49

134:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %137, label %135, !dbg !49

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !49
  br label %__nv_sqrtf.exit11, !dbg !49

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !49
  br label %__nv_sqrtf.exit11, !dbg !49

139:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %142, label %140, !dbg !49

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !49
  br label %__nv_sqrtf.exit11, !dbg !49

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !49
  br label %__nv_sqrtf.exit11, !dbg !49

__nv_sqrtf.exit11:                                ; preds = %135, %137, %140, %142
  %.0.i9 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !49
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i12 = icmp eq i32 %144, 0, !dbg !49
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i15 = icmp eq i32 %145, 0, !dbg !49
  br i1 %.not.i12, label %151, label %146, !dbg !49

146:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %149, label %147, !dbg !49

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !49
  br label %__nv_sqrtf.exit16, !dbg !49

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !49
  br label %__nv_sqrtf.exit16, !dbg !49

151:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %154, label %152, !dbg !49

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !49
  br label %__nv_sqrtf.exit16, !dbg !49

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !49
  br label %__nv_sqrtf.exit16, !dbg !49

__nv_sqrtf.exit16:                                ; preds = %147, %149, %152, %154
  %.0.i14 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !49
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !50
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !50
  %158 = getelementptr float, ptr addrspace(1) %8, i64 %118, !dbg !51
  %159 = getelementptr float, ptr addrspace(1) %8, i64 %120, !dbg !51
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %114, i32 0, i1 %114) #3, !dbg !52
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %115, i32 0, i1 %115) #3, !dbg !52
  %162 = getelementptr float, ptr addrspace(1) %9, i64 %118, !dbg !53
  %163 = getelementptr float, ptr addrspace(1) %9, i64 %120, !dbg !53
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %114, i32 0, i1 %114) #3, !dbg !54
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %115, i32 0, i1 %115) #3, !dbg !54
  %166 = add nsw i32 %33, -192, !dbg !55
  %167 = icmp ult i32 %166, 96, !dbg !55
  %168 = add nsw i32 %34, -192, !dbg !55
  %169 = icmp ult i32 %168, 96, !dbg !55
  %170 = mul nsw i32 %166, 169, !dbg !56
  %171 = mul nsw i32 %168, 169, !dbg !56
  %172 = add nsw i32 %171, %.decomposed38, !dbg !57
  %173 = add nsw i32 %107, %170, !dbg !58
  %174 = add nsw i32 %172, %41, !dbg !58
  %175 = sext i32 %173 to i64, !dbg !59
  %176 = getelementptr float, ptr addrspace(1) %10, i64 %175, !dbg !59
  %177 = sext i32 %174 to i64, !dbg !59
  %178 = getelementptr float, ptr addrspace(1) %10, i64 %177, !dbg !59
  %179 = and i1 %30, %167, !dbg !60
  %180 = and i1 %169, %30, !dbg !60
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %179, i32 0, i1 %179) #3, !dbg !61
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %180, i32 0, i1 %180) #3, !dbg !61
  %183 = sext i32 %166 to i64, !dbg !62
  %184 = getelementptr float, ptr addrspace(1) %11, i64 %183, !dbg !62
  %185 = sext i32 %168 to i64, !dbg !62
  %186 = getelementptr float, ptr addrspace(1) %11, i64 %185, !dbg !62
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %179, i32 0, i1 %179) #3, !dbg !63
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %180, i32 0, i1 %180) #3, !dbg !63
  %189 = getelementptr float, ptr addrspace(1) %12, i64 %183, !dbg !64
  %190 = getelementptr float, ptr addrspace(1) %12, i64 %185, !dbg !64
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %179, i32 0, i1 %179) #3, !dbg !65
  %192 = bitcast i32 %191 to float, !dbg !65
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %180, i32 0, i1 %180) #3, !dbg !65
  %194 = bitcast i32 %193 to float, !dbg !65
  %195 = fadd float %192, 0x3EE4F8B580000000, !dbg !66
  %196 = fadd float %194, 0x3EE4F8B580000000, !dbg !66
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i17 = icmp eq i32 %197, 0, !dbg !67
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i20 = icmp eq i32 %198, 0, !dbg !67
  br i1 %.not.i17, label %204, label %199, !dbg !67

199:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %202, label %200, !dbg !67

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !67
  br label %__nv_sqrtf.exit21, !dbg !67

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !67
  br label %__nv_sqrtf.exit21, !dbg !67

204:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %207, label %205, !dbg !67

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !67
  br label %__nv_sqrtf.exit21, !dbg !67

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !67
  br label %__nv_sqrtf.exit21, !dbg !67

__nv_sqrtf.exit21:                                ; preds = %200, %202, %205, %207
  %.0.i19 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !67
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i22 = icmp eq i32 %209, 0, !dbg !67
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i25 = icmp eq i32 %210, 0, !dbg !67
  br i1 %.not.i22, label %216, label %211, !dbg !67

211:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %214, label %212, !dbg !67

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #3, !dbg !67
  br label %__nv_sqrtf.exit26, !dbg !67

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #3, !dbg !67
  br label %__nv_sqrtf.exit26, !dbg !67

216:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %219, label %217, !dbg !67

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #3, !dbg !67
  br label %__nv_sqrtf.exit26, !dbg !67

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #3, !dbg !67
  br label %__nv_sqrtf.exit26, !dbg !67

__nv_sqrtf.exit26:                                ; preds = %212, %214, %217, %219
  %.0.i24 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !67
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !68
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !68
  %223 = getelementptr float, ptr addrspace(1) %13, i64 %183, !dbg !69
  %224 = getelementptr float, ptr addrspace(1) %13, i64 %185, !dbg !69
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %179, i32 0, i1 %179) #3, !dbg !70
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %180, i32 0, i1 %180) #3, !dbg !70
  %227 = getelementptr float, ptr addrspace(1) %14, i64 %183, !dbg !71
  %228 = getelementptr float, ptr addrspace(1) %14, i64 %185, !dbg !71
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %179, i32 0, i1 %179) #3, !dbg !72
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %180, i32 0, i1 %180) #3, !dbg !72
  %231 = icmp sgt i32 %33, 287, !dbg !73
  %232 = icmp sgt i32 %34, 287, !dbg !73
  %233 = add nsw i32 %33, -288, !dbg !74
  %234 = add nsw i32 %34, -288, !dbg !74
  %235 = mul nsw i32 %233, 169, !dbg !75
  %236 = mul nsw i32 %234, 169, !dbg !75
  %237 = add nsw i32 %236, %.decomposed38, !dbg !76
  %238 = add nsw i32 %107, %235, !dbg !77
  %239 = add nsw i32 %237, %41, !dbg !77
  %240 = sext i32 %238 to i64, !dbg !78
  %241 = getelementptr float, ptr addrspace(1) %15, i64 %240, !dbg !78
  %242 = sext i32 %239 to i64, !dbg !78
  %243 = getelementptr float, ptr addrspace(1) %15, i64 %242, !dbg !78
  %244 = and i1 %30, %231, !dbg !79
  %245 = and i1 %232, %30, !dbg !79
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %244, i32 0, i1 %244) #3, !dbg !80
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %245, i32 0, i1 %245) #3, !dbg !80
  %248 = sext i32 %233 to i64, !dbg !81
  %249 = getelementptr float, ptr addrspace(1) %16, i64 %248, !dbg !81
  %250 = sext i32 %234 to i64, !dbg !81
  %251 = getelementptr float, ptr addrspace(1) %16, i64 %250, !dbg !81
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %244, i32 0, i1 %244) #3, !dbg !82
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %245, i32 0, i1 %245) #3, !dbg !82
  %254 = getelementptr float, ptr addrspace(1) %17, i64 %248, !dbg !83
  %255 = getelementptr float, ptr addrspace(1) %17, i64 %250, !dbg !83
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %244, i32 0, i1 %244) #3, !dbg !84
  %257 = bitcast i32 %256 to float, !dbg !84
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %245, i32 0, i1 %245) #3, !dbg !84
  %259 = bitcast i32 %258 to float, !dbg !84
  %260 = fadd float %257, 0x3EE4F8B580000000, !dbg !85
  %261 = fadd float %259, 0x3EE4F8B580000000, !dbg !85
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !86
  %.not.i27 = icmp eq i32 %262, 0, !dbg !86
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !86
  %.not1.i30 = icmp eq i32 %263, 0, !dbg !86
  br i1 %.not.i27, label %269, label %264, !dbg !86

264:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %267, label %265, !dbg !86

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %260) #3, !dbg !86
  br label %__nv_sqrtf.exit31, !dbg !86

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %260) #3, !dbg !86
  br label %__nv_sqrtf.exit31, !dbg !86

269:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %272, label %270, !dbg !86

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %260) #3, !dbg !86
  br label %__nv_sqrtf.exit31, !dbg !86

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %260) #3, !dbg !86
  br label %__nv_sqrtf.exit31, !dbg !86

__nv_sqrtf.exit31:                                ; preds = %265, %267, %270, %272
  %.0.i29 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !86
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !86
  %.not.i32 = icmp eq i32 %274, 0, !dbg !86
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !86
  %.not1.i35 = icmp eq i32 %275, 0, !dbg !86
  br i1 %.not.i32, label %281, label %276, !dbg !86

276:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %279, label %277, !dbg !86

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %261) #3, !dbg !86
  br label %__nv_sqrtf.exit36, !dbg !86

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %261) #3, !dbg !86
  br label %__nv_sqrtf.exit36, !dbg !86

281:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %284, label %282, !dbg !86

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.f(float %261) #3, !dbg !86
  br label %__nv_sqrtf.exit36, !dbg !86

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.f(float %261) #3, !dbg !86
  br label %__nv_sqrtf.exit36, !dbg !86

__nv_sqrtf.exit36:                                ; preds = %277, %279, %282, %284
  %.0.i34 = phi float [ %278, %277 ], [ %280, %279 ], [ %283, %282 ], [ %285, %284 ], !dbg !86
  %286 = insertelement <8 x i32> poison, i32 %247, i64 0, !dbg !80
  %287 = insertelement <8 x i32> %286, i32 %246, i64 1, !dbg !80
  %288 = insertelement <8 x i32> %287, i32 %50, i64 2, !dbg !80
  %289 = insertelement <8 x i32> %288, i32 %51, i64 3, !dbg !80
  %290 = insertelement <8 x i32> %289, i32 %116, i64 4, !dbg !80
  %291 = insertelement <8 x i32> %290, i32 %117, i64 5, !dbg !80
  %292 = insertelement <8 x i32> %291, i32 %181, i64 6, !dbg !80
  %293 = insertelement <8 x i32> %292, i32 %182, i64 7, !dbg !80
  %294 = bitcast <8 x i32> %293 to <8 x float>, !dbg !80
  %295 = insertelement <8 x i32> poison, i32 %253, i64 0, !dbg !82
  %296 = insertelement <8 x i32> %295, i32 %252, i64 1, !dbg !82
  %297 = insertelement <8 x i32> %296, i32 %56, i64 2, !dbg !82
  %298 = insertelement <8 x i32> %297, i32 %57, i64 3, !dbg !82
  %299 = insertelement <8 x i32> %298, i32 %122, i64 4, !dbg !82
  %300 = insertelement <8 x i32> %299, i32 %123, i64 5, !dbg !82
  %301 = insertelement <8 x i32> %300, i32 %187, i64 6, !dbg !82
  %302 = insertelement <8 x i32> %301, i32 %188, i64 7, !dbg !82
  %303 = bitcast <8 x i32> %302 to <8 x float>, !dbg !82
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !87
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !87
  %306 = getelementptr float, ptr addrspace(1) %18, i64 %248, !dbg !88
  %307 = getelementptr float, ptr addrspace(1) %18, i64 %250, !dbg !88
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %306, i1 %244, i32 0, i1 %244) #3, !dbg !89
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %245, i32 0, i1 %245) #3, !dbg !89
  %310 = getelementptr float, ptr addrspace(1) %19, i64 %248, !dbg !90
  %311 = getelementptr float, ptr addrspace(1) %19, i64 %250, !dbg !90
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %244, i32 0, i1 %244) #3, !dbg !91
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %245, i32 0, i1 %245) #3, !dbg !91
  %314 = fsub <8 x float> %294, %303, !dbg !92
  %315 = insertelement <8 x float> poison, float %305, i64 0, !dbg !93
  %316 = insertelement <8 x float> %315, float %304, i64 1, !dbg !93
  %317 = insertelement <8 x float> %316, float %90, i64 2, !dbg !93
  %318 = insertelement <8 x float> %317, float %91, i64 3, !dbg !93
  %319 = insertelement <8 x float> %318, float %156, i64 4, !dbg !93
  %320 = insertelement <8 x float> %319, float %157, i64 5, !dbg !93
  %321 = insertelement <8 x float> %320, float %221, i64 6, !dbg !93
  %322 = insertelement <8 x float> %321, float %222, i64 7, !dbg !93
  %323 = fmul <8 x float> %314, %322, !dbg !93
  %324 = insertelement <8 x i32> poison, i32 %309, i64 0, !dbg !89
  %325 = insertelement <8 x i32> %324, i32 %308, i64 1, !dbg !89
  %326 = insertelement <8 x i32> %325, i32 %94, i64 2, !dbg !89
  %327 = insertelement <8 x i32> %326, i32 %95, i64 3, !dbg !89
  %328 = insertelement <8 x i32> %327, i32 %160, i64 4, !dbg !89
  %329 = insertelement <8 x i32> %328, i32 %161, i64 5, !dbg !89
  %330 = insertelement <8 x i32> %329, i32 %225, i64 6, !dbg !89
  %331 = insertelement <8 x i32> %330, i32 %226, i64 7, !dbg !89
  %332 = bitcast <8 x i32> %331 to <8 x float>, !dbg !89
  %333 = fmul <8 x float> %323, %332, !dbg !94
  %334 = insertelement <8 x i32> poison, i32 %313, i64 0, !dbg !91
  %335 = insertelement <8 x i32> %334, i32 %312, i64 1, !dbg !91
  %336 = insertelement <8 x i32> %335, i32 %98, i64 2, !dbg !91
  %337 = insertelement <8 x i32> %336, i32 %99, i64 3, !dbg !91
  %338 = insertelement <8 x i32> %337, i32 %164, i64 4, !dbg !91
  %339 = insertelement <8 x i32> %338, i32 %165, i64 5, !dbg !91
  %340 = insertelement <8 x i32> %339, i32 %229, i64 6, !dbg !91
  %341 = insertelement <8 x i32> %340, i32 %230, i64 7, !dbg !91
  %342 = bitcast <8 x i32> %341 to <8 x float>, !dbg !91
  %343 = fadd <8 x float> %333, %342, !dbg !95
  %344 = fcmp olt <8 x float> %343, zeroinitializer, !dbg !96
  %345 = extractelement <8 x i1> %344, i64 7, !dbg !100
  %346 = extractelement <8 x float> %343, i64 7, !dbg !100
  %347 = select i1 %345, float 0.000000e+00, float %346, !dbg !100
  %348 = extractelement <8 x i1> %344, i64 6, !dbg !100
  %349 = extractelement <8 x float> %343, i64 6, !dbg !100
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !100
  %351 = extractelement <8 x i1> %344, i64 5, !dbg !102
  %352 = extractelement <8 x float> %343, i64 5, !dbg !102
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !102
  %354 = extractelement <8 x i1> %344, i64 4, !dbg !102
  %355 = extractelement <8 x float> %343, i64 4, !dbg !102
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !102
  %357 = extractelement <8 x i1> %344, i64 3, !dbg !104
  %358 = extractelement <8 x float> %343, i64 3, !dbg !104
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !104
  %360 = extractelement <8 x i1> %344, i64 2, !dbg !104
  %361 = extractelement <8 x float> %343, i64 2, !dbg !104
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !104
  %363 = extractelement <8 x i1> %344, i64 1, !dbg !106
  %364 = extractelement <8 x float> %343, i64 1, !dbg !106
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !106
  %366 = extractelement <8 x i1> %344, i64 0, !dbg !106
  %367 = extractelement <8 x float> %343, i64 0, !dbg !106
  %368 = select i1 %366, float 0.000000e+00, float %367, !dbg !106
  %369 = select i1 %231, float %365, float 0.000000e+00, !dbg !107
  %370 = select i1 %232, float %368, float 0.000000e+00, !dbg !107
  %371 = select i1 %167, float %350, float %369, !dbg !108
  %372 = select i1 %169, float %347, float %370, !dbg !108
  %373 = select i1 %101, float %356, float %371, !dbg !108
  %374 = select i1 %103, float %353, float %372, !dbg !108
  %375 = select i1 %38, float %362, float %373, !dbg !108
  %376 = select i1 %39, float %359, float %374, !dbg !108
  %377 = sext i32 %28 to i64, !dbg !109
  %378 = getelementptr float, ptr addrspace(1) %20, i64 %377, !dbg !109
  %379 = bitcast float %375 to i32, !dbg !110
  %380 = bitcast float %376 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %379, i32 %380, ptr addrspace(1) %378, i1 %30) #3, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4hwcrxjemwuseekdzgy32f5czsxwgjhopgvxflbtikqd3whwm6s.py", directory: "inductor_cache/4h")
!4 = !{ptr @triton_poi_fused_cat_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_12", linkageName: "triton_poi_fused_cat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 52, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 64, scope: !7)
!25 = !DILocation(line: 33, column: 57, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 27, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 41, scope: !7)
!39 = !DILocation(line: 57, column: 36, scope: !7)
!40 = !DILocation(line: 57, column: 55, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 74, scope: !7)
!43 = !DILocation(line: 57, column: 66, scope: !7)
!44 = !DILocation(line: 58, column: 31, scope: !7)
!45 = !DILocation(line: 58, column: 44, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 44, scope: !7)
!48 = !DILocation(line: 62, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 27, scope: !7)
!50 = !DILocation(line: 65, column: 20, scope: !7)
!51 = !DILocation(line: 69, column: 31, scope: !7)
!52 = !DILocation(line: 69, column: 44, scope: !7)
!53 = !DILocation(line: 71, column: 31, scope: !7)
!54 = !DILocation(line: 71, column: 44, scope: !7)
!55 = !DILocation(line: 80, column: 20, scope: !7)
!56 = !DILocation(line: 81, column: 42, scope: !7)
!57 = !DILocation(line: 81, column: 37, scope: !7)
!58 = !DILocation(line: 81, column: 57, scope: !7)
!59 = !DILocation(line: 81, column: 32, scope: !7)
!60 = !DILocation(line: 81, column: 76, scope: !7)
!61 = !DILocation(line: 81, column: 68, scope: !7)
!62 = !DILocation(line: 82, column: 32, scope: !7)
!63 = !DILocation(line: 82, column: 46, scope: !7)
!64 = !DILocation(line: 84, column: 32, scope: !7)
!65 = !DILocation(line: 84, column: 46, scope: !7)
!66 = !DILocation(line: 86, column: 20, scope: !7)
!67 = !DILocation(line: 87, column: 27, scope: !7)
!68 = !DILocation(line: 89, column: 20, scope: !7)
!69 = !DILocation(line: 93, column: 32, scope: !7)
!70 = !DILocation(line: 93, column: 46, scope: !7)
!71 = !DILocation(line: 95, column: 32, scope: !7)
!72 = !DILocation(line: 95, column: 46, scope: !7)
!73 = !DILocation(line: 101, column: 20, scope: !7)
!74 = !DILocation(line: 104, column: 51, scope: !7)
!75 = !DILocation(line: 104, column: 42, scope: !7)
!76 = !DILocation(line: 104, column: 37, scope: !7)
!77 = !DILocation(line: 104, column: 57, scope: !7)
!78 = !DILocation(line: 104, column: 32, scope: !7)
!79 = !DILocation(line: 104, column: 76, scope: !7)
!80 = !DILocation(line: 104, column: 68, scope: !7)
!81 = !DILocation(line: 105, column: 32, scope: !7)
!82 = !DILocation(line: 105, column: 46, scope: !7)
!83 = !DILocation(line: 107, column: 32, scope: !7)
!84 = !DILocation(line: 107, column: 46, scope: !7)
!85 = !DILocation(line: 109, column: 20, scope: !7)
!86 = !DILocation(line: 110, column: 27, scope: !7)
!87 = !DILocation(line: 112, column: 20, scope: !7)
!88 = !DILocation(line: 116, column: 32, scope: !7)
!89 = !DILocation(line: 116, column: 46, scope: !7)
!90 = !DILocation(line: 118, column: 32, scope: !7)
!91 = !DILocation(line: 118, column: 46, scope: !7)
!92 = !DILocation(line: 106, column: 20, scope: !7)
!93 = !DILocation(line: 115, column: 20, scope: !7)
!94 = !DILocation(line: 117, column: 20, scope: !7)
!95 = !DILocation(line: 119, column: 20, scope: !7)
!96 = !DILocation(line: 118, column: 15, scope: !97, inlinedAt: !99)
!97 = distinct !DILexicalBlockFile(scope: !7, file: !98, discriminator: 0)
!98 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!99 = !DILocation(line: 121, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !97, inlinedAt: !101)
!101 = !DILocation(line: 98, column: 42, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !97, inlinedAt: !103)
!103 = !DILocation(line: 74, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !97, inlinedAt: !105)
!105 = !DILocation(line: 50, column: 42, scope: !7)
!106 = !DILocation(line: 121, column: 29, scope: !97, inlinedAt: !99)
!107 = !DILocation(line: 123, column: 35, scope: !7)
!108 = !DILocation(line: 0, scope: !7)
!109 = !DILocation(line: 127, column: 25, scope: !7)
!110 = !DILocation(line: 127, column: 37, scope: !7)
!111 = !DILocation(line: 127, column: 4, scope: !7)
