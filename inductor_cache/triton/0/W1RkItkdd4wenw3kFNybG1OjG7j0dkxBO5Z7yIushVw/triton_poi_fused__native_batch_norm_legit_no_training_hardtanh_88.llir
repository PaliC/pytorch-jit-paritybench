; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 32, !dbg !13
  %15 = icmp slt i32 %13, 300, !dbg !14
  %16 = icmp slt i32 %14, 300, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = shl i32 %10, 2, !dbg !17
  %20 = and i32 %19, 12, !dbg !17
  %21 = or disjoint i32 %18, %20, !dbg !18
  %22 = icmp slt i32 %21, 16, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %23 = sdiv i32 %.frozen, 75, !dbg !20
  %24 = mul i32 %23, 75, !dbg !21
  %.decomposed = sub i32 %.frozen, %24, !dbg !21
  %.frozen43 = freeze i32 %14, !dbg !20
  %25 = sdiv i32 %.frozen43, 75, !dbg !20
  %26 = mul i32 %25, 75, !dbg !21
  %.decomposed44 = sub i32 %.frozen43, %26, !dbg !21
  %27 = mul i32 %21, 75, !dbg !22
  %28 = add i32 %27, 75, !dbg !22
  %29 = add i32 %27, 150, !dbg !22
  %30 = add i32 %27, 225, !dbg !22
  %31 = mul i32 %23, 1200, !dbg !23
  %32 = mul i32 %25, 1200, !dbg !23
  %33 = add i32 %31, %.decomposed, !dbg !24
  %34 = add i32 %33, %27, !dbg !25
  %35 = add i32 %33, %28, !dbg !25
  %36 = add i32 %33, %29, !dbg !25
  %37 = add i32 %33, %30, !dbg !25
  %38 = add i32 %32, %.decomposed44, !dbg !24
  %39 = add i32 %38, %27, !dbg !25
  %40 = add i32 %38, %28, !dbg !25
  %41 = add i32 %38, %29, !dbg !25
  %42 = add i32 %38, %30, !dbg !25
  %43 = sext i32 %34 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %35 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %36 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %37 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %39 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = sext i32 %40 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = sext i32 %41 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !26
  %57 = sext i32 %42 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = and i1 %15, %22, !dbg !27
  %60 = and i1 %16, %22, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %59) #3, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %59) #3, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %59) #3, !dbg !28
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %59) #3, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %60) #3, !dbg !28
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %60) #3, !dbg !28
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %60) #3, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %60) #3, !dbg !28
  %69 = sext i32 %.decomposed to i64, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !29
  %71 = sext i32 %.decomposed44 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %15) #3, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %15) #3, !dbg !30
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %15) #3, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %15) #3, !dbg !30
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %16) #3, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %16) #3, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %16) #3, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %16) #3, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %15) #3, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %15) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %15) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %15) #3, !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %16) #3, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %16) #3, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %16) #3, !dbg !32
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %16) #3, !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %15) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %15) #3, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %15) #3, !dbg !34
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %15) #3, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %16) #3, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %16) #3, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %16) #3, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %16) #3, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %69, !dbg !35
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !35
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %15) #3, !dbg !36
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %15) #3, !dbg !36
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %15) #3, !dbg !36
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %15) #3, !dbg !36
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %16) #3, !dbg !36
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %16) #3, !dbg !36
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %16) #3, !dbg !36
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %16) #3, !dbg !36
  %113 = fadd float %87, 0x3EE4F8B580000000, !dbg !37
  %114 = fadd float %92, 0x3EE4F8B580000000, !dbg !37
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i18 = icmp eq i32 %121, 0, !dbg !38
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i21 = icmp eq i32 %122, 0, !dbg !38
  br i1 %.not.i18, label %128, label %123, !dbg !38

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %126, label %124, !dbg !38

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %131, label %129, !dbg !38

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

__nv_sqrtf.exit22:                                ; preds = %124, %126, %129, %131
  %.0.i20 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !38
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i38 = icmp eq i32 %139, 0, !dbg !38
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i41 = icmp eq i32 %140, 0, !dbg !38
  br i1 %.not.i38, label %146, label %141, !dbg !38

141:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i41, label %144, label %142, !dbg !38

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

146:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i41, label %149, label %147, !dbg !38

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

__nv_sqrtf.exit42:                                ; preds = %142, %144, %147, %149
  %.0.i40 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !38
  %151 = insertelement <8 x i32> poison, i32 %68, i64 0, !dbg !28
  %152 = insertelement <8 x i32> %151, i32 %67, i64 1, !dbg !28
  %153 = insertelement <8 x i32> %152, i32 %66, i64 2, !dbg !28
  %154 = insertelement <8 x i32> %153, i32 %65, i64 3, !dbg !28
  %155 = insertelement <8 x i32> %154, i32 %64, i64 4, !dbg !28
  %156 = insertelement <8 x i32> %155, i32 %63, i64 5, !dbg !28
  %157 = insertelement <8 x i32> %156, i32 %62, i64 6, !dbg !28
  %158 = insertelement <8 x i32> %157, i32 %61, i64 7, !dbg !28
  %159 = bitcast <8 x i32> %158 to <8 x float>, !dbg !28
  %160 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !30
  %161 = insertelement <2 x i32> %160, i32 %76, i64 1, !dbg !30
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !30
  %163 = shufflevector <2 x float> %162, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !30
  %164 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !36
  %165 = insertelement <2 x i32> %164, i32 %108, i64 1, !dbg !36
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !36
  %167 = shufflevector <2 x float> %166, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %168 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !34
  %169 = insertelement <2 x i32> %168, i32 %98, i64 1, !dbg !34
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !34
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !34
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !39
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !39
  %174 = fsub <8 x float> %159, %163, !dbg !40
  %175 = insertelement <8 x float> poison, float %173, i64 0, !dbg !41
  %176 = insertelement <8 x float> %175, float %172, i64 1, !dbg !41
  %177 = shufflevector <8 x float> %176, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %178 = fmul <8 x float> %174, %177, !dbg !41
  %179 = fmul <8 x float> %178, %171, !dbg !42
  %180 = fadd <8 x float> %179, %167, !dbg !43
  %181 = fcmp ole <8 x float> %180, zeroinitializer, !dbg !44
  %182 = select <8 x i1> %181, <8 x float> zeroinitializer, <8 x float> %180, !dbg !44
  %183 = fcmp olt <8 x float> %182, splat (float 6.000000e+00), !dbg !48
  %184 = extractelement <8 x float> %182, i64 7, !dbg !50
  %185 = fcmp uno float %184, 0.000000e+00, !dbg !51
  %186 = extractelement <8 x float> %182, i64 6, !dbg !50
  %187 = fcmp uno float %186, 0.000000e+00, !dbg !51
  %188 = extractelement <8 x float> %182, i64 5, !dbg !50
  %189 = fcmp uno float %188, 0.000000e+00, !dbg !51
  %190 = extractelement <8 x float> %182, i64 4, !dbg !50
  %191 = fcmp uno float %190, 0.000000e+00, !dbg !51
  %192 = extractelement <8 x float> %182, i64 3, !dbg !50
  %193 = fcmp uno float %192, 0.000000e+00, !dbg !51
  %194 = extractelement <8 x float> %182, i64 2, !dbg !50
  %195 = fcmp uno float %194, 0.000000e+00, !dbg !51
  %196 = extractelement <8 x float> %182, i64 1, !dbg !50
  %197 = fcmp uno float %196, 0.000000e+00, !dbg !51
  %198 = extractelement <8 x float> %182, i64 0, !dbg !50
  %199 = fcmp uno float %198, 0.000000e+00, !dbg !51
  %200 = extractelement <8 x i1> %183, i64 7, !dbg !52
  %201 = or i1 %200, %185, !dbg !52
  %202 = extractelement <8 x i1> %183, i64 6, !dbg !52
  %203 = or i1 %202, %187, !dbg !52
  %204 = extractelement <8 x i1> %183, i64 5, !dbg !52
  %205 = or i1 %204, %189, !dbg !52
  %206 = extractelement <8 x i1> %183, i64 4, !dbg !52
  %207 = or i1 %206, %191, !dbg !52
  %208 = extractelement <8 x i1> %183, i64 3, !dbg !52
  %209 = or i1 %208, %193, !dbg !52
  %210 = extractelement <8 x i1> %183, i64 2, !dbg !52
  %211 = or i1 %210, %195, !dbg !52
  %212 = extractelement <8 x i1> %183, i64 1, !dbg !52
  %213 = or i1 %212, %197, !dbg !52
  %214 = extractelement <8 x i1> %183, i64 0, !dbg !52
  %215 = or i1 %214, %199, !dbg !52
  %216 = shl i32 %13, 4, !dbg !53
  %217 = shl i32 %14, 4, !dbg !53
  %218 = add i32 %21, %216, !dbg !54
  %219 = add i32 %21, %217, !dbg !54
  %220 = sext i32 %218 to i64, !dbg !55
  %221 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !55
  %222 = sext i32 %219 to i64, !dbg !55
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !55
  %224 = bitcast float %184 to i32, !dbg !50
  %225 = select i1 %201, i32 %224, i32 1086324736, !dbg !56
  %226 = bitcast float %186 to i32, !dbg !50
  %227 = select i1 %203, i32 %226, i32 1086324736, !dbg !56
  %228 = bitcast float %188 to i32, !dbg !50
  %229 = select i1 %205, i32 %228, i32 1086324736, !dbg !56
  %230 = bitcast float %190 to i32, !dbg !50
  %231 = select i1 %207, i32 %230, i32 1086324736, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %225, i32 %227, i32 %229, i32 %231, ptr addrspace(1) %221, i1 %59) #3, !dbg !50
  %232 = bitcast float %192 to i32, !dbg !50
  %233 = select i1 %209, i32 %232, i32 1086324736, !dbg !56
  %234 = bitcast float %194 to i32, !dbg !50
  %235 = select i1 %211, i32 %234, i32 1086324736, !dbg !56
  %236 = bitcast float %196 to i32, !dbg !50
  %237 = select i1 %213, i32 %236, i32 1086324736, !dbg !56
  %238 = bitcast float %198 to i32, !dbg !50
  %239 = select i1 %215, i32 %238, i32 1086324736, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %233, i32 %235, i32 %237, i32 %239, ptr addrspace(1) %223, i1 %60) #3, !dbg !50
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctbmu7w4uzhbrhwjcpetk3pooulbtcl2skdbpyjhfec7o3ntievy.py", directory: "inductor_cache/tb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 52, column: 4, scope: !7)
