; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_23(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr3 = freeze i32 %5, !dbg !11
  %6 = icmp slt i32 %.fr3, 128, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = shl i32 %.fr3, 13, !dbg !13
  %11 = or disjoint i32 %10, %9
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  br i1 %6, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %4
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %15 = or disjoint i64 %12, 2048, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %18 = or disjoint i64 %12, 4096, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %21 = or disjoint i64 %12, 6144, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  br label %.split2.us, !dbg !12

.split.us.preheader:                              ; preds = %4
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %29 = or disjoint i64 %12, 2048, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !15
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !16
  %36 = or disjoint i64 %12, 4096, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !15
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !16
  %43 = or disjoint i64 %12, 6144, !dbg !17
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !15
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !16
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !16
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !16
  %50 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !16
  %51 = insertelement <2 x i32> %50, i32 %26, i64 1, !dbg !16
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !16
  %53 = fadd <2 x float> %52, zeroinitializer, !dbg !18
  %54 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !16
  %55 = insertelement <2 x i32> %54, i32 %33, i64 1, !dbg !16
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !16
  %57 = fadd <2 x float> %53, %56, !dbg !18
  %58 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !16
  %59 = insertelement <2 x i32> %58, i32 %40, i64 1, !dbg !16
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !16
  %61 = fadd <2 x float> %57, %60, !dbg !18
  %62 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !16
  %63 = insertelement <2 x i32> %62, i32 %47, i64 1, !dbg !16
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !16
  %65 = fadd <2 x float> %61, %64, !dbg !18
  %66 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !16
  %67 = insertelement <2 x i32> %66, i32 %27, i64 1, !dbg !16
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !16
  %69 = fadd <2 x float> %68, zeroinitializer, !dbg !18
  %70 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !16
  %71 = insertelement <2 x i32> %70, i32 %34, i64 1, !dbg !16
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !16
  %73 = fadd <2 x float> %69, %72, !dbg !18
  %74 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !16
  %75 = insertelement <2 x i32> %74, i32 %41, i64 1, !dbg !16
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !16
  %77 = fadd <2 x float> %73, %76, !dbg !18
  %78 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !16
  %79 = insertelement <2 x i32> %78, i32 %48, i64 1, !dbg !16
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !16
  %81 = fadd <2 x float> %77, %80, !dbg !18
  %shift = shufflevector <2 x float> %65, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !12
  %82 = fadd <2 x float> %65, %shift, !dbg !12
  %shift6 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !12
  %83 = fadd <2 x float> %shift6, %82, !dbg !12
  %84 = fadd <2 x float> %81, %83, !dbg !12
  %85 = extractelement <2 x float> %84, i64 0, !dbg !12
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %86 = phi float [ %85, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !19
  %87 = lshr i32 %7, 5, !dbg !12
  %88 = and i32 %7, 31, !dbg !12
  %89 = bitcast float %86 to i32, !dbg !24
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 16, i32 31), !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = fadd float %86, %91, !dbg !19
  %93 = bitcast float %92 to i32, !dbg !24
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !24
  %95 = bitcast i32 %94 to float, !dbg !24
  %96 = fadd float %92, %95, !dbg !19
  %97 = bitcast float %96 to i32, !dbg !24
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !24
  %99 = bitcast i32 %98 to float, !dbg !24
  %100 = fadd float %96, %99, !dbg !19
  %101 = bitcast float %100 to i32, !dbg !24
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !24
  %103 = bitcast i32 %102 to float, !dbg !24
  %104 = fadd float %100, %103, !dbg !19
  %105 = bitcast float %104 to i32, !dbg !24
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !24
  %107 = bitcast i32 %106 to float, !dbg !24
  %108 = fadd float %104, %107, !dbg !19
  %109 = icmp eq i32 %88, 0, !dbg !24
  %110 = and i32 %87, 15, !dbg !24
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !24
  %112 = bitcast float %108 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 %109) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %113 = icmp slt i32 %7, 16, !dbg !24
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !24
  %115 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %114, i1 %113) #3, !dbg !24
  %116 = bitcast i32 %115 to float, !dbg !24
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !24
  %118 = bitcast i32 %117 to float, !dbg !24
  %119 = fadd float %116, %118, !dbg !19
  %120 = bitcast float %119 to i32, !dbg !24
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !24
  %122 = bitcast i32 %121 to float, !dbg !24
  %123 = fadd float %119, %122, !dbg !19
  %124 = bitcast float %123 to i32, !dbg !24
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !24
  %126 = bitcast i32 %125 to float, !dbg !24
  %127 = fadd float %123, %126, !dbg !19
  %128 = bitcast float %127 to i32, !dbg !24
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !24
  %130 = bitcast i32 %129 to float, !dbg !24
  %131 = fadd float %127, %130, !dbg !19
  %132 = and i32 %7, 15, !dbg !24
  %133 = icmp eq i32 %132, 0, !dbg !24
  %134 = and i1 %113, %133, !dbg !24
  %135 = bitcast float %131 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %135, i1 %134) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %136 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %137 = sext i32 %.fr3 to i64, !dbg !25
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !25
  %urem = and i32 %7, 511, !dbg !26
  %139 = icmp eq i32 %urem, 0, !dbg !26
  %140 = and i1 %139, %6, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %138, i1 %140) #3, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7j77ldiyqlkw6twrylhs6fknivk6j3f7ht477tzx2z4y7b2dzdx.py", directory: "inductor_cache/7j")
!4 = !{ptr @triton_red_fused_mean_23, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_23, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_23", linkageName: "triton_red_fused_mean_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 34, column: 23, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 36, column: 25, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 37, column: 25, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 4, scope: !7)
