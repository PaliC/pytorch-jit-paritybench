; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_46(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 510, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %30 = icmp slt i32 %28, 2426112, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %31 = sdiv i32 %.frozen, 729, !dbg !15
  %.frozen37 = freeze i32 %29, !dbg !15
  %32 = sdiv i32 %.frozen37, 729, !dbg !15
  %33 = srem i32 %31, 832, !dbg !16
  %34 = srem i32 %32, 832, !dbg !16
  %35 = mul i32 %31, 729, !dbg !17
  %.decomposed = sub i32 %.frozen, %35, !dbg !17
  %36 = mul i32 %32, 729, !dbg !17
  %.decomposed38 = sub i32 %.frozen37, %36, !dbg !17
  %.frozen39 = freeze i32 %28, !dbg !18
  %37 = sdiv i32 %.frozen39, 606528, !dbg !18
  %38 = icmp slt i32 %33, 256, !dbg !19
  %39 = icmp slt i32 %34, 256, !dbg !19
  %40 = mul i32 %37, 606528, !dbg !20
  %srem.decomposed = sub i32 %.frozen39, %40, !dbg !20
  %srem1 = srem i32 %29, 606528, !dbg !20
  %41 = mul nsw i32 %37, 186624, !dbg !21
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !22
  %43 = add nsw i32 %41, %srem1, !dbg !22
  %44 = sext i32 %42 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %43 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = and i1 %30, %38, !dbg !24
  %49 = and i1 %39, %30, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %48, i32 0, i1 %48) #3, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %49, i32 0, i1 %49) #3, !dbg !25
  %52 = sext i32 %33 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %54 = sext i32 %34 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48) #3, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %49, i32 0, i1 %49) #3, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %48, i32 0, i1 %48) #3, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %49, i32 0, i1 %49) #3, !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %61, 0x3EE4F8B580000000, !dbg !30
  %65 = fadd float %63, 0x3EE4F8B580000000, !dbg !30
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %66, 0, !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %67, 0, !dbg !31
  br i1 %.not.i, label %73, label %68, !dbg !31

68:                                               ; preds = %22
  br i1 %.not1.i, label %71, label %69, !dbg !31

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

73:                                               ; preds = %22
  br i1 %.not1.i, label %76, label %74, !dbg !31

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !31
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i2 = icmp eq i32 %78, 0, !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i5 = icmp eq i32 %79, 0, !dbg !31
  br i1 %.not.i2, label %85, label %80, !dbg !31

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %83, label %81, !dbg !31

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %88, label %86, !dbg !31

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

__nv_sqrtf.exit6:                                 ; preds = %81, %83, %86, %88
  %.0.i4 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !31
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %48, i32 0, i1 %48) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %49, i32 0, i1 %49) #3, !dbg !34
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !35
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %48, i32 0, i1 %48) #3, !dbg !36
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %49, i32 0, i1 %49) #3, !dbg !36
  %100 = add nsw i32 %33, -256, !dbg !37
  %101 = icmp ult i32 %100, 320, !dbg !37
  %102 = add nsw i32 %34, -256, !dbg !37
  %103 = icmp ult i32 %102, 320, !dbg !37
  %104 = mul nsw i32 %100, 729, !dbg !38
  %105 = mul nsw i32 %102, 729, !dbg !38
  %106 = add nsw i32 %105, %.decomposed38, !dbg !39
  %107 = mul nsw i32 %37, 233280, !dbg !40
  %108 = add nsw i32 %107, %.decomposed, !dbg !39
  %109 = add nsw i32 %108, %104, !dbg !41
  %110 = add nsw i32 %106, %107, !dbg !41
  %111 = sext i32 %109 to i64, !dbg !42
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %111, !dbg !42
  %113 = sext i32 %110 to i64, !dbg !42
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %113, !dbg !42
  %115 = and i1 %30, %101, !dbg !43
  %116 = and i1 %103, %30, !dbg !43
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %115, i32 0, i1 %115) #3, !dbg !44
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %116, i32 0, i1 %116) #3, !dbg !44
  %119 = sext i32 %100 to i64, !dbg !45
  %120 = getelementptr float, ptr addrspace(1) %6, i64 %119, !dbg !45
  %121 = sext i32 %102 to i64, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %121, !dbg !45
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %115, i32 0, i1 %115) #3, !dbg !46
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %116, i32 0, i1 %116) #3, !dbg !46
  %125 = getelementptr float, ptr addrspace(1) %7, i64 %119, !dbg !47
  %126 = getelementptr float, ptr addrspace(1) %7, i64 %121, !dbg !47
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %115, i32 0, i1 %115) #3, !dbg !48
  %128 = bitcast i32 %127 to float, !dbg !48
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %116, i32 0, i1 %116) #3, !dbg !48
  %130 = bitcast i32 %129 to float, !dbg !48
  %131 = fadd float %128, 0x3EE4F8B580000000, !dbg !49
  %132 = fadd float %130, 0x3EE4F8B580000000, !dbg !49
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i7 = icmp eq i32 %133, 0, !dbg !50
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i10 = icmp eq i32 %134, 0, !dbg !50
  br i1 %.not.i7, label %140, label %135, !dbg !50

135:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %138, label %136, !dbg !50

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !50
  br label %__nv_sqrtf.exit11, !dbg !50

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !50
  br label %__nv_sqrtf.exit11, !dbg !50

140:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %143, label %141, !dbg !50

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !50
  br label %__nv_sqrtf.exit11, !dbg !50

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !50
  br label %__nv_sqrtf.exit11, !dbg !50

__nv_sqrtf.exit11:                                ; preds = %136, %138, %141, %143
  %.0.i9 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !50
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i12 = icmp eq i32 %145, 0, !dbg !50
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i15 = icmp eq i32 %146, 0, !dbg !50
  br i1 %.not.i12, label %152, label %147, !dbg !50

147:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %150, label %148, !dbg !50

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

152:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %155, label %153, !dbg !50

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

__nv_sqrtf.exit16:                                ; preds = %148, %150, %153, %155
  %.0.i14 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !50
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !51
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !51
  %159 = getelementptr float, ptr addrspace(1) %8, i64 %119, !dbg !52
  %160 = getelementptr float, ptr addrspace(1) %8, i64 %121, !dbg !52
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %115, i32 0, i1 %115) #3, !dbg !53
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %116, i32 0, i1 %116) #3, !dbg !53
  %163 = getelementptr float, ptr addrspace(1) %9, i64 %119, !dbg !54
  %164 = getelementptr float, ptr addrspace(1) %9, i64 %121, !dbg !54
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %115, i32 0, i1 %115) #3, !dbg !55
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %116, i32 0, i1 %116) #3, !dbg !55
  %167 = add nsw i32 %33, -576, !dbg !56
  %168 = icmp ult i32 %167, 128, !dbg !56
  %169 = add nsw i32 %34, -576, !dbg !56
  %170 = icmp ult i32 %169, 128, !dbg !56
  %171 = mul nsw i32 %167, 729, !dbg !57
  %172 = mul nsw i32 %169, 729, !dbg !57
  %173 = mul nsw i32 %37, 93312, !dbg !58
  %174 = add nsw i32 %173, %.decomposed, !dbg !59
  %175 = add nsw i32 %174, %171, !dbg !60
  %176 = add nsw i32 %173, %.decomposed38, !dbg !59
  %177 = add nsw i32 %176, %172, !dbg !60
  %178 = sext i32 %175 to i64, !dbg !61
  %179 = getelementptr float, ptr addrspace(1) %10, i64 %178, !dbg !61
  %180 = sext i32 %177 to i64, !dbg !61
  %181 = getelementptr float, ptr addrspace(1) %10, i64 %180, !dbg !61
  %182 = and i1 %30, %168, !dbg !62
  %183 = and i1 %170, %30, !dbg !62
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %182, i32 0, i1 %182) #3, !dbg !63
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %183, i32 0, i1 %183) #3, !dbg !63
  %186 = sext i32 %167 to i64, !dbg !64
  %187 = getelementptr float, ptr addrspace(1) %11, i64 %186, !dbg !64
  %188 = sext i32 %169 to i64, !dbg !64
  %189 = getelementptr float, ptr addrspace(1) %11, i64 %188, !dbg !64
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %182, i32 0, i1 %182) #3, !dbg !65
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %183, i32 0, i1 %183) #3, !dbg !65
  %192 = getelementptr float, ptr addrspace(1) %12, i64 %186, !dbg !66
  %193 = getelementptr float, ptr addrspace(1) %12, i64 %188, !dbg !66
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %182, i32 0, i1 %182) #3, !dbg !67
  %195 = bitcast i32 %194 to float, !dbg !67
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %183, i32 0, i1 %183) #3, !dbg !67
  %197 = bitcast i32 %196 to float, !dbg !67
  %198 = fadd float %195, 0x3EE4F8B580000000, !dbg !68
  %199 = fadd float %197, 0x3EE4F8B580000000, !dbg !68
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i17 = icmp eq i32 %200, 0, !dbg !69
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i20 = icmp eq i32 %201, 0, !dbg !69
  br i1 %.not.i17, label %207, label %202, !dbg !69

202:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %205, label %203, !dbg !69

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %198) #3, !dbg !69
  br label %__nv_sqrtf.exit21, !dbg !69

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %198) #3, !dbg !69
  br label %__nv_sqrtf.exit21, !dbg !69

207:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %210, label %208, !dbg !69

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %198) #3, !dbg !69
  br label %__nv_sqrtf.exit21, !dbg !69

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %198) #3, !dbg !69
  br label %__nv_sqrtf.exit21, !dbg !69

__nv_sqrtf.exit21:                                ; preds = %203, %205, %208, %210
  %.0.i19 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !69
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i22 = icmp eq i32 %212, 0, !dbg !69
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i25 = icmp eq i32 %213, 0, !dbg !69
  br i1 %.not.i22, label %219, label %214, !dbg !69

214:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %217, label %215, !dbg !69

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %199) #3, !dbg !69
  br label %__nv_sqrtf.exit26, !dbg !69

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %199) #3, !dbg !69
  br label %__nv_sqrtf.exit26, !dbg !69

219:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %222, label %220, !dbg !69

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %199) #3, !dbg !69
  br label %__nv_sqrtf.exit26, !dbg !69

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %199) #3, !dbg !69
  br label %__nv_sqrtf.exit26, !dbg !69

__nv_sqrtf.exit26:                                ; preds = %215, %217, %220, %222
  %.0.i24 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !69
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !70
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !70
  %226 = getelementptr float, ptr addrspace(1) %13, i64 %186, !dbg !71
  %227 = getelementptr float, ptr addrspace(1) %13, i64 %188, !dbg !71
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %182, i32 0, i1 %182) #3, !dbg !72
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %183, i32 0, i1 %183) #3, !dbg !72
  %230 = getelementptr float, ptr addrspace(1) %14, i64 %186, !dbg !73
  %231 = getelementptr float, ptr addrspace(1) %14, i64 %188, !dbg !73
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %182, i32 0, i1 %182) #3, !dbg !74
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %183, i32 0, i1 %183) #3, !dbg !74
  %234 = icmp sgt i32 %33, 703, !dbg !75
  %235 = icmp sgt i32 %34, 703, !dbg !75
  %236 = add nsw i32 %33, -704, !dbg !76
  %237 = add nsw i32 %34, -704, !dbg !76
  %238 = mul nsw i32 %236, 729, !dbg !77
  %239 = mul nsw i32 %237, 729, !dbg !77
  %240 = add nsw i32 %239, %.decomposed38, !dbg !78
  %241 = add nsw i32 %174, %238, !dbg !79
  %242 = add nsw i32 %240, %173, !dbg !79
  %243 = sext i32 %241 to i64, !dbg !80
  %244 = getelementptr float, ptr addrspace(1) %15, i64 %243, !dbg !80
  %245 = sext i32 %242 to i64, !dbg !80
  %246 = getelementptr float, ptr addrspace(1) %15, i64 %245, !dbg !80
  %247 = and i1 %30, %234, !dbg !81
  %248 = and i1 %235, %30, !dbg !81
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %247, i32 0, i1 %247) #3, !dbg !82
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %248, i32 0, i1 %248) #3, !dbg !82
  %251 = sext i32 %236 to i64, !dbg !83
  %252 = getelementptr float, ptr addrspace(1) %16, i64 %251, !dbg !83
  %253 = sext i32 %237 to i64, !dbg !83
  %254 = getelementptr float, ptr addrspace(1) %16, i64 %253, !dbg !83
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %247, i32 0, i1 %247) #3, !dbg !84
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %248, i32 0, i1 %248) #3, !dbg !84
  %257 = getelementptr float, ptr addrspace(1) %17, i64 %251, !dbg !85
  %258 = getelementptr float, ptr addrspace(1) %17, i64 %253, !dbg !85
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %247, i32 0, i1 %247) #3, !dbg !86
  %260 = bitcast i32 %259 to float, !dbg !86
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %248, i32 0, i1 %248) #3, !dbg !86
  %262 = bitcast i32 %261 to float, !dbg !86
  %263 = fadd float %260, 0x3EE4F8B580000000, !dbg !87
  %264 = fadd float %262, 0x3EE4F8B580000000, !dbg !87
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i27 = icmp eq i32 %265, 0, !dbg !88
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i30 = icmp eq i32 %266, 0, !dbg !88
  br i1 %.not.i27, label %272, label %267, !dbg !88

267:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %270, label %268, !dbg !88

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %263) #3, !dbg !88
  br label %__nv_sqrtf.exit31, !dbg !88

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %263) #3, !dbg !88
  br label %__nv_sqrtf.exit31, !dbg !88

272:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %275, label %273, !dbg !88

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %263) #3, !dbg !88
  br label %__nv_sqrtf.exit31, !dbg !88

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %263) #3, !dbg !88
  br label %__nv_sqrtf.exit31, !dbg !88

__nv_sqrtf.exit31:                                ; preds = %268, %270, %273, %275
  %.0.i29 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !88
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i32 = icmp eq i32 %277, 0, !dbg !88
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i35 = icmp eq i32 %278, 0, !dbg !88
  br i1 %.not.i32, label %284, label %279, !dbg !88

279:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %282, label %280, !dbg !88

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %264) #3, !dbg !88
  br label %__nv_sqrtf.exit36, !dbg !88

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %264) #3, !dbg !88
  br label %__nv_sqrtf.exit36, !dbg !88

284:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %287, label %285, !dbg !88

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %264) #3, !dbg !88
  br label %__nv_sqrtf.exit36, !dbg !88

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %264) #3, !dbg !88
  br label %__nv_sqrtf.exit36, !dbg !88

__nv_sqrtf.exit36:                                ; preds = %280, %282, %285, %287
  %.0.i34 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !88
  %289 = insertelement <8 x i32> poison, i32 %250, i64 0, !dbg !82
  %290 = insertelement <8 x i32> %289, i32 %249, i64 1, !dbg !82
  %291 = insertelement <8 x i32> %290, i32 %50, i64 2, !dbg !82
  %292 = insertelement <8 x i32> %291, i32 %51, i64 3, !dbg !82
  %293 = insertelement <8 x i32> %292, i32 %117, i64 4, !dbg !82
  %294 = insertelement <8 x i32> %293, i32 %118, i64 5, !dbg !82
  %295 = insertelement <8 x i32> %294, i32 %184, i64 6, !dbg !82
  %296 = insertelement <8 x i32> %295, i32 %185, i64 7, !dbg !82
  %297 = bitcast <8 x i32> %296 to <8 x float>, !dbg !82
  %298 = insertelement <8 x i32> poison, i32 %256, i64 0, !dbg !84
  %299 = insertelement <8 x i32> %298, i32 %255, i64 1, !dbg !84
  %300 = insertelement <8 x i32> %299, i32 %56, i64 2, !dbg !84
  %301 = insertelement <8 x i32> %300, i32 %57, i64 3, !dbg !84
  %302 = insertelement <8 x i32> %301, i32 %123, i64 4, !dbg !84
  %303 = insertelement <8 x i32> %302, i32 %124, i64 5, !dbg !84
  %304 = insertelement <8 x i32> %303, i32 %190, i64 6, !dbg !84
  %305 = insertelement <8 x i32> %304, i32 %191, i64 7, !dbg !84
  %306 = bitcast <8 x i32> %305 to <8 x float>, !dbg !84
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !89
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !89
  %309 = getelementptr float, ptr addrspace(1) %18, i64 %251, !dbg !90
  %310 = getelementptr float, ptr addrspace(1) %18, i64 %253, !dbg !90
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %247, i32 0, i1 %247) #3, !dbg !91
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %248, i32 0, i1 %248) #3, !dbg !91
  %313 = getelementptr float, ptr addrspace(1) %19, i64 %251, !dbg !92
  %314 = getelementptr float, ptr addrspace(1) %19, i64 %253, !dbg !92
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %247, i32 0, i1 %247) #3, !dbg !93
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %314, i1 %248, i32 0, i1 %248) #3, !dbg !93
  %317 = fsub <8 x float> %297, %306, !dbg !94
  %318 = insertelement <8 x float> poison, float %308, i64 0, !dbg !95
  %319 = insertelement <8 x float> %318, float %307, i64 1, !dbg !95
  %320 = insertelement <8 x float> %319, float %90, i64 2, !dbg !95
  %321 = insertelement <8 x float> %320, float %91, i64 3, !dbg !95
  %322 = insertelement <8 x float> %321, float %157, i64 4, !dbg !95
  %323 = insertelement <8 x float> %322, float %158, i64 5, !dbg !95
  %324 = insertelement <8 x float> %323, float %224, i64 6, !dbg !95
  %325 = insertelement <8 x float> %324, float %225, i64 7, !dbg !95
  %326 = fmul <8 x float> %317, %325, !dbg !95
  %327 = insertelement <8 x i32> poison, i32 %312, i64 0, !dbg !91
  %328 = insertelement <8 x i32> %327, i32 %311, i64 1, !dbg !91
  %329 = insertelement <8 x i32> %328, i32 %94, i64 2, !dbg !91
  %330 = insertelement <8 x i32> %329, i32 %95, i64 3, !dbg !91
  %331 = insertelement <8 x i32> %330, i32 %161, i64 4, !dbg !91
  %332 = insertelement <8 x i32> %331, i32 %162, i64 5, !dbg !91
  %333 = insertelement <8 x i32> %332, i32 %228, i64 6, !dbg !91
  %334 = insertelement <8 x i32> %333, i32 %229, i64 7, !dbg !91
  %335 = bitcast <8 x i32> %334 to <8 x float>, !dbg !91
  %336 = fmul <8 x float> %326, %335, !dbg !96
  %337 = insertelement <8 x i32> poison, i32 %316, i64 0, !dbg !93
  %338 = insertelement <8 x i32> %337, i32 %315, i64 1, !dbg !93
  %339 = insertelement <8 x i32> %338, i32 %98, i64 2, !dbg !93
  %340 = insertelement <8 x i32> %339, i32 %99, i64 3, !dbg !93
  %341 = insertelement <8 x i32> %340, i32 %165, i64 4, !dbg !93
  %342 = insertelement <8 x i32> %341, i32 %166, i64 5, !dbg !93
  %343 = insertelement <8 x i32> %342, i32 %232, i64 6, !dbg !93
  %344 = insertelement <8 x i32> %343, i32 %233, i64 7, !dbg !93
  %345 = bitcast <8 x i32> %344 to <8 x float>, !dbg !93
  %346 = fadd <8 x float> %336, %345, !dbg !97
  %347 = fcmp olt <8 x float> %346, zeroinitializer, !dbg !98
  %348 = extractelement <8 x i1> %347, i64 7, !dbg !102
  %349 = extractelement <8 x float> %346, i64 7, !dbg !102
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !102
  %351 = extractelement <8 x i1> %347, i64 6, !dbg !102
  %352 = extractelement <8 x float> %346, i64 6, !dbg !102
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !102
  %354 = extractelement <8 x i1> %347, i64 5, !dbg !104
  %355 = extractelement <8 x float> %346, i64 5, !dbg !104
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !104
  %357 = extractelement <8 x i1> %347, i64 4, !dbg !104
  %358 = extractelement <8 x float> %346, i64 4, !dbg !104
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !104
  %360 = extractelement <8 x i1> %347, i64 3, !dbg !106
  %361 = extractelement <8 x float> %346, i64 3, !dbg !106
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !106
  %363 = extractelement <8 x i1> %347, i64 2, !dbg !106
  %364 = extractelement <8 x float> %346, i64 2, !dbg !106
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !106
  %366 = extractelement <8 x i1> %347, i64 1, !dbg !108
  %367 = extractelement <8 x float> %346, i64 1, !dbg !108
  %368 = select i1 %366, float 0.000000e+00, float %367, !dbg !108
  %369 = extractelement <8 x i1> %347, i64 0, !dbg !108
  %370 = extractelement <8 x float> %346, i64 0, !dbg !108
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !108
  %372 = select i1 %234, float %368, float 0.000000e+00, !dbg !109
  %373 = select i1 %235, float %371, float 0.000000e+00, !dbg !109
  %374 = select i1 %168, float %353, float %372, !dbg !110
  %375 = select i1 %170, float %350, float %373, !dbg !110
  %376 = select i1 %101, float %359, float %374, !dbg !110
  %377 = select i1 %103, float %356, float %375, !dbg !110
  %378 = select i1 %38, float %365, float %376, !dbg !110
  %379 = select i1 %39, float %362, float %377, !dbg !110
  %380 = sext i32 %28 to i64, !dbg !111
  %381 = getelementptr float, ptr addrspace(1) %20, i64 %380, !dbg !111
  %382 = bitcast float %378 to i32, !dbg !112
  %383 = bitcast float %379 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %382, i32 %383, ptr addrspace(1) %381, i1 %30) #3, !dbg !112
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuz4ewzdri2bmfgr23qxeqdxdfljr2zaloarz6sxlsp6eehawdh2.py", directory: "inductor_cache/uz")
!4 = !{ptr @triton_poi_fused_cat_46, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_46, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_46", linkageName: "triton_poi_fused_cat_46", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 53, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 65, scope: !7)
!25 = !DILocation(line: 33, column: 58, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 27, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 41, scope: !7)
!39 = !DILocation(line: 57, column: 36, scope: !7)
!40 = !DILocation(line: 57, column: 63, scope: !7)
!41 = !DILocation(line: 57, column: 56, scope: !7)
!42 = !DILocation(line: 57, column: 31, scope: !7)
!43 = !DILocation(line: 57, column: 76, scope: !7)
!44 = !DILocation(line: 57, column: 68, scope: !7)
!45 = !DILocation(line: 58, column: 31, scope: !7)
!46 = !DILocation(line: 58, column: 45, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 60, column: 45, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 27, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 31, scope: !7)
!53 = !DILocation(line: 69, column: 45, scope: !7)
!54 = !DILocation(line: 71, column: 31, scope: !7)
!55 = !DILocation(line: 71, column: 45, scope: !7)
!56 = !DILocation(line: 80, column: 20, scope: !7)
!57 = !DILocation(line: 81, column: 42, scope: !7)
!58 = !DILocation(line: 81, column: 63, scope: !7)
!59 = !DILocation(line: 81, column: 37, scope: !7)
!60 = !DILocation(line: 81, column: 57, scope: !7)
!61 = !DILocation(line: 81, column: 32, scope: !7)
!62 = !DILocation(line: 81, column: 76, scope: !7)
!63 = !DILocation(line: 81, column: 68, scope: !7)
!64 = !DILocation(line: 82, column: 32, scope: !7)
!65 = !DILocation(line: 82, column: 46, scope: !7)
!66 = !DILocation(line: 84, column: 32, scope: !7)
!67 = !DILocation(line: 84, column: 46, scope: !7)
!68 = !DILocation(line: 86, column: 20, scope: !7)
!69 = !DILocation(line: 87, column: 27, scope: !7)
!70 = !DILocation(line: 89, column: 20, scope: !7)
!71 = !DILocation(line: 93, column: 32, scope: !7)
!72 = !DILocation(line: 93, column: 46, scope: !7)
!73 = !DILocation(line: 95, column: 32, scope: !7)
!74 = !DILocation(line: 95, column: 46, scope: !7)
!75 = !DILocation(line: 101, column: 20, scope: !7)
!76 = !DILocation(line: 104, column: 51, scope: !7)
!77 = !DILocation(line: 104, column: 42, scope: !7)
!78 = !DILocation(line: 104, column: 37, scope: !7)
!79 = !DILocation(line: 104, column: 57, scope: !7)
!80 = !DILocation(line: 104, column: 32, scope: !7)
!81 = !DILocation(line: 104, column: 76, scope: !7)
!82 = !DILocation(line: 104, column: 68, scope: !7)
!83 = !DILocation(line: 105, column: 32, scope: !7)
!84 = !DILocation(line: 105, column: 46, scope: !7)
!85 = !DILocation(line: 107, column: 32, scope: !7)
!86 = !DILocation(line: 107, column: 46, scope: !7)
!87 = !DILocation(line: 109, column: 20, scope: !7)
!88 = !DILocation(line: 110, column: 27, scope: !7)
!89 = !DILocation(line: 112, column: 20, scope: !7)
!90 = !DILocation(line: 116, column: 32, scope: !7)
!91 = !DILocation(line: 116, column: 46, scope: !7)
!92 = !DILocation(line: 118, column: 32, scope: !7)
!93 = !DILocation(line: 118, column: 46, scope: !7)
!94 = !DILocation(line: 106, column: 20, scope: !7)
!95 = !DILocation(line: 115, column: 20, scope: !7)
!96 = !DILocation(line: 117, column: 20, scope: !7)
!97 = !DILocation(line: 119, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlockFile(scope: !7, file: !100, discriminator: 0)
!100 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!101 = !DILocation(line: 121, column: 42, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !103)
!103 = !DILocation(line: 98, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !105)
!105 = !DILocation(line: 74, column: 42, scope: !7)
!106 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !107)
!107 = !DILocation(line: 50, column: 42, scope: !7)
!108 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !101)
!109 = !DILocation(line: 123, column: 35, scope: !7)
!110 = !DILocation(line: 0, scope: !7)
!111 = !DILocation(line: 127, column: 25, scope: !7)
!112 = !DILocation(line: 127, column: 37, scope: !7)
!113 = !DILocation(line: 127, column: 4, scope: !7)
