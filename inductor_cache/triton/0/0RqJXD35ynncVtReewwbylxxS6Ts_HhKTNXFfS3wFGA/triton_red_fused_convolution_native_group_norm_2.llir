; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 2048, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = and i32 %9, 511, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %12, 1024, !dbg !12
  %15 = or disjoint i32 %12, 1536, !dbg !12
  %16 = srem i32 %7, 8, !dbg !13
  %17 = shl i32 %7, 17, !dbg !14
  %18 = shl nsw i32 %16, 5, !dbg !15
  %19 = or disjoint i32 %17, %11
  %20 = shl nuw nsw i32 %11, 1
  %21 = zext nneg i32 %20 to i64
  %22 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %21
  %23 = or disjoint i32 %20, 2
  %24 = zext nneg i32 %23 to i64
  %25 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %24
  %26 = or disjoint i32 %20, 4
  %27 = zext nneg i32 %26 to i64
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %27
  %29 = or disjoint i32 %20, 6
  %30 = zext nneg i32 %29 to i64
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %30
  %32 = shl nuw nsw i32 %12, 1
  %33 = zext nneg i32 %32 to i64
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %33
  %35 = shl nuw nsw i32 %13, 1
  %36 = zext nneg i32 %35 to i64
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %36
  %38 = shl nuw nsw i32 %14, 1
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39
  %41 = shl nuw nsw i32 %15, 1
  %42 = zext nneg i32 %41 to i64
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %42
  %44 = zext nneg i32 %12 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = zext nneg i32 %13 to i64
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46
  %48 = zext nneg i32 %14 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = zext nneg i32 %15 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %11 to i64
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52
  %54 = sext i32 %19 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !16
  %55 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 4
  %56 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 8
  %57 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 12
  br label %58, !dbg !16

58:                                               ; preds = %6, %._crit_edge
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %6 ], [ %147, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %6 ], [ %148, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %6 ], [ %149, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %6 ], [ %150, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %6 ], [ %143, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %6 ], [ %144, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %6 ], [ %145, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %6 ], [ %146, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %6 ], [ %139, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %6 ], [ %140, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %6 ], [ %141, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %6 ], [ %142, %._crit_edge ]
  %71 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %72 = lshr i32 %71, 12, !dbg !17
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !18
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %78 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %78, i1 true) #5, !dbg !19
  %79 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %79, i1 true) #5, !dbg !19
  %80 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %80, i1 true) #5, !dbg !19
  %81 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %81, i1 true) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %82 = load float, ptr addrspace(3) %34, align 8, !dbg !19
  %83 = load float, ptr addrspace(3) %37, align 8, !dbg !19
  %84 = load float, ptr addrspace(3) %40, align 8, !dbg !19
  %85 = load float, ptr addrspace(3) %43, align 8, !dbg !19
  %86 = add nuw nsw i32 %72, %18, !dbg !20
  %87 = sext i32 %86 to i64, !dbg !21
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !21
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %90 = bitcast i32 %89 to float, !dbg !22
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %92 = bitcast i32 %91 to float, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %94 = bitcast i32 %93 to float, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %96 = bitcast i32 %95 to float, !dbg !22
  %97 = fadd float %82, %90, !dbg !23
  %98 = fadd float %83, %92, !dbg !23
  %99 = fadd float %84, %94, !dbg !23
  %100 = fadd float %85, %96, !dbg !23
  %101 = icmp eq i64 %indvars.iv, 0, !dbg !24
  br i1 %101, label %._crit_edge, label %102, !dbg !25

102:                                              ; preds = %58
  %103 = fsub float %97, %67, !dbg !29
  %104 = fsub float %98, %68, !dbg !29
  %105 = fsub float %99, %69, !dbg !29
  %106 = fsub float %100, %70, !dbg !29
  %107 = fadd float %59, 1.000000e+00, !dbg !30
  %108 = fadd float %60, 1.000000e+00, !dbg !30
  %109 = fadd float %61, 1.000000e+00, !dbg !30
  %110 = fadd float %62, 1.000000e+00, !dbg !30
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %107) #5, !dbg !31
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %108) #5, !dbg !31
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %109) #5, !dbg !31
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %110) #5, !dbg !31
  %115 = fadd float %67, %111, !dbg !32
  %116 = fadd float %68, %112, !dbg !32
  %117 = fadd float %69, %113, !dbg !32
  %118 = fadd float %70, %114, !dbg !32
  %119 = fsub float %97, %115, !dbg !33
  %120 = fsub float %98, %116, !dbg !33
  %121 = fsub float %99, %117, !dbg !33
  %122 = fsub float %100, %118, !dbg !33
  %123 = fmul float %103, %119, !dbg !34
  %124 = fmul float %104, %120, !dbg !34
  %125 = fmul float %105, %121, !dbg !34
  %126 = fmul float %106, %122, !dbg !34
  %127 = fadd float %63, %123, !dbg !35
  %128 = fadd float %64, %124, !dbg !35
  %129 = fadd float %65, %125, !dbg !35
  %130 = fadd float %66, %126, !dbg !35
  br label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %58, %102
  %131 = phi float [ %127, %102 ], [ 0.000000e+00, %58 ], !dbg !28
  %132 = phi float [ %128, %102 ], [ 0.000000e+00, %58 ], !dbg !28
  %133 = phi float [ %129, %102 ], [ 0.000000e+00, %58 ], !dbg !28
  %134 = phi float [ %130, %102 ], [ 0.000000e+00, %58 ], !dbg !28
  %.pn7 = phi float [ %115, %102 ], [ %97, %58 ]
  %.pn5 = phi float [ %116, %102 ], [ %98, %58 ]
  %.pn3 = phi float [ %117, %102 ], [ %99, %58 ]
  %.pn1 = phi float [ %118, %102 ], [ %100, %58 ]
  %135 = phi float [ %107, %102 ], [ 1.000000e+00, %58 ], !dbg !28
  %136 = phi float [ %108, %102 ], [ 1.000000e+00, %58 ], !dbg !28
  %137 = phi float [ %109, %102 ], [ 1.000000e+00, %58 ], !dbg !28
  %138 = phi float [ %110, %102 ], [ 1.000000e+00, %58 ], !dbg !28
  %139 = select i1 %8, float %.pn7, float %67, !dbg !36
  %140 = select i1 %8, float %.pn5, float %68, !dbg !36
  %141 = select i1 %8, float %.pn3, float %69, !dbg !36
  %142 = select i1 %8, float %.pn1, float %70, !dbg !36
  %143 = select i1 %8, float %131, float %63, !dbg !37
  %144 = select i1 %8, float %132, float %64, !dbg !37
  %145 = select i1 %8, float %133, float %65, !dbg !37
  %146 = select i1 %8, float %134, float %66, !dbg !37
  %147 = select i1 %8, float %135, float %59, !dbg !38
  %148 = select i1 %8, float %136, float %60, !dbg !38
  %149 = select i1 %8, float %137, float %61, !dbg !38
  %150 = select i1 %8, float %138, float %62, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %151 = bitcast float %97 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %151, i1 true) #5, !dbg !39
  %152 = bitcast float %98 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %152, i1 true) #5, !dbg !39
  %153 = bitcast float %99 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %153, i1 true) #5, !dbg !39
  %154 = bitcast float %100 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %154, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.extract = load i32, ptr addrspace(3) %53, align 16, !dbg !39
  %.extract11 = load i32, ptr addrspace(3) %55, align 4, !dbg !39
  %.extract12 = load i32, ptr addrspace(3) %56, align 8, !dbg !39
  %.extract13 = load i32, ptr addrspace(3) %57, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %8) #5, !dbg !39
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %155 = icmp samesign ult i64 %indvars.iv, 129024, !dbg !16
  br i1 %155, label %58, label %156, !dbg !16

156:                                              ; preds = %._crit_edge
  %157 = lshr i32 %9, 5, !dbg !12
  %158 = and i32 %9, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %159 = fsub float %140, %139, !dbg !42
  %160 = fadd float %147, %148, !dbg !44
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !45
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %160) #5, !dbg !46
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !47
  %164 = fmul float %159, %163, !dbg !48
  %165 = fadd float %139, %164, !dbg !49
  %166 = fadd float %143, %144, !dbg !50
  %167 = fmul float %159, %159, !dbg !51
  %168 = fmul float %167, %147, !dbg !52
  %169 = fmul float %168, %163, !dbg !53
  %170 = fadd float %166, %169, !dbg !54
  %171 = fsub float %141, %165, !dbg !42
  %172 = fadd float %149, %160, !dbg !44
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !45
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %172) #5, !dbg !46
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !47
  %176 = fmul float %175, %171, !dbg !48
  %177 = fadd float %165, %176, !dbg !49
  %178 = fadd float %145, %170, !dbg !50
  %179 = fmul float %171, %171, !dbg !51
  %180 = fmul float %160, %179, !dbg !52
  %181 = fmul float %175, %180, !dbg !53
  %182 = fadd float %178, %181, !dbg !54
  %183 = fsub float %142, %177, !dbg !42
  %184 = fadd float %150, %172, !dbg !44
  %185 = fcmp oeq float %184, 0.000000e+00, !dbg !45
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %184) #5, !dbg !46
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !47
  %188 = fmul float %187, %183, !dbg !48
  %189 = fadd float %177, %188, !dbg !49
  %190 = fadd float %146, %182, !dbg !50
  %191 = fmul float %183, %183, !dbg !51
  %192 = fmul float %172, %191, !dbg !52
  %193 = fmul float %187, %192, !dbg !53
  %194 = fadd float %190, %193, !dbg !54
  %195 = bitcast float %189 to i32, !dbg !40
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !40
  %197 = bitcast i32 %196 to float, !dbg !40
  %198 = bitcast float %194 to i32, !dbg !40
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !40
  %200 = bitcast i32 %199 to float, !dbg !40
  %201 = bitcast float %184 to i32, !dbg !40
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !40
  %203 = bitcast i32 %202 to float, !dbg !40
  %204 = fsub float %197, %189, !dbg !42
  %205 = fadd float %184, %203, !dbg !44
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !45
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %205) #5, !dbg !46
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !47
  %209 = fmul float %208, %204, !dbg !48
  %210 = fadd float %189, %209, !dbg !49
  %211 = fadd float %194, %200, !dbg !50
  %212 = fmul float %204, %204, !dbg !51
  %213 = fmul float %184, %212, !dbg !52
  %214 = fmul float %208, %213, !dbg !53
  %215 = fadd float %211, %214, !dbg !54
  %216 = bitcast float %210 to i32, !dbg !40
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !40
  %218 = bitcast i32 %217 to float, !dbg !40
  %219 = bitcast float %215 to i32, !dbg !40
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !40
  %221 = bitcast i32 %220 to float, !dbg !40
  %222 = bitcast float %205 to i32, !dbg !40
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !40
  %224 = bitcast i32 %223 to float, !dbg !40
  %225 = fsub float %218, %210, !dbg !42
  %226 = fadd float %205, %224, !dbg !44
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !45
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %226) #5, !dbg !46
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !47
  %230 = fmul float %225, %229, !dbg !48
  %231 = fadd float %210, %230, !dbg !49
  %232 = fadd float %215, %221, !dbg !50
  %233 = fmul float %225, %225, !dbg !51
  %234 = fmul float %205, %233, !dbg !52
  %235 = fmul float %229, %234, !dbg !53
  %236 = fadd float %232, %235, !dbg !54
  %237 = bitcast float %231 to i32, !dbg !40
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !40
  %239 = bitcast i32 %238 to float, !dbg !40
  %240 = bitcast float %236 to i32, !dbg !40
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !40
  %242 = bitcast i32 %241 to float, !dbg !40
  %243 = bitcast float %226 to i32, !dbg !40
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !40
  %245 = bitcast i32 %244 to float, !dbg !40
  %246 = fsub float %239, %231, !dbg !42
  %247 = fadd float %226, %245, !dbg !44
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !45
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !46
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !47
  %251 = fmul float %246, %250, !dbg !48
  %252 = fadd float %231, %251, !dbg !49
  %253 = fadd float %236, %242, !dbg !50
  %254 = fmul float %246, %246, !dbg !51
  %255 = fmul float %226, %254, !dbg !52
  %256 = fmul float %250, %255, !dbg !53
  %257 = fadd float %253, %256, !dbg !54
  %258 = bitcast float %252 to i32, !dbg !40
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !40
  %260 = bitcast i32 %259 to float, !dbg !40
  %261 = bitcast float %257 to i32, !dbg !40
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !40
  %263 = bitcast i32 %262 to float, !dbg !40
  %264 = bitcast float %247 to i32, !dbg !40
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 2, i32 31), !dbg !40
  %266 = bitcast i32 %265 to float, !dbg !40
  %267 = fsub float %260, %252, !dbg !42
  %268 = fadd float %247, %266, !dbg !44
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !45
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !46
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !47
  %272 = fmul float %267, %271, !dbg !48
  %273 = fadd float %252, %272, !dbg !49
  %274 = fadd float %257, %263, !dbg !50
  %275 = fmul float %267, %267, !dbg !51
  %276 = fmul float %247, %275, !dbg !52
  %277 = fmul float %271, %276, !dbg !53
  %278 = fadd float %274, %277, !dbg !54
  %279 = bitcast float %273 to i32, !dbg !40
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !40
  %281 = bitcast i32 %280 to float, !dbg !40
  %282 = bitcast float %278 to i32, !dbg !40
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !40
  %284 = bitcast i32 %283 to float, !dbg !40
  %285 = bitcast float %268 to i32, !dbg !40
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !40
  %287 = bitcast i32 %286 to float, !dbg !40
  %288 = fsub float %281, %273, !dbg !42
  %289 = fadd float %268, %287, !dbg !44
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !45
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #5, !dbg !46
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !47
  %293 = fmul float %288, %292, !dbg !48
  %294 = fadd float %273, %293, !dbg !49
  %295 = fadd float %278, %284, !dbg !50
  %296 = fmul float %288, %288, !dbg !51
  %297 = fmul float %268, %296, !dbg !52
  %298 = fmul float %292, %297, !dbg !53
  %299 = fadd float %295, %298, !dbg !54
  %300 = icmp eq i32 %158, 0, !dbg !40
  %301 = and i32 %157, 15, !dbg !40
  %302 = zext nneg i32 %301 to i64, !dbg !40
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i64 %302, !dbg !40
  %304 = bitcast float %294 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 %300) #5, !dbg !40
  %305 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %302, !dbg !40
  %306 = bitcast float %299 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 %300) #5, !dbg !40
  %307 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %302, !dbg !40
  %308 = bitcast float %289 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 %300) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %309 = icmp slt i32 %9, 16, !dbg !40
  %310 = sext i32 %9 to i64, !dbg !40
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i64 %310, !dbg !40
  %312 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %311, i1 %309) #5, !dbg !40
  %313 = bitcast i32 %312 to float, !dbg !40
  %314 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %310, !dbg !40
  %315 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %314, i1 %309) #5, !dbg !40
  %316 = bitcast i32 %315 to float, !dbg !40
  %317 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %310, !dbg !40
  %318 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %317, i1 %309) #5, !dbg !40
  %319 = bitcast i32 %318 to float, !dbg !40
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 8, i32 31), !dbg !40
  %321 = bitcast i32 %320 to float, !dbg !40
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 8, i32 31), !dbg !40
  %323 = bitcast i32 %322 to float, !dbg !40
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 8, i32 31), !dbg !40
  %325 = bitcast i32 %324 to float, !dbg !40
  %326 = fsub float %321, %313, !dbg !42
  %327 = fadd float %319, %325, !dbg !44
  %328 = fcmp oeq float %327, 0.000000e+00, !dbg !45
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float %327) #5, !dbg !46
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !47
  %331 = fmul float %326, %330, !dbg !48
  %332 = fadd float %331, %313, !dbg !49
  %333 = fadd float %316, %323, !dbg !50
  %334 = fmul float %326, %326, !dbg !51
  %335 = fmul float %334, %319, !dbg !52
  %336 = fmul float %335, %330, !dbg !53
  %337 = fadd float %333, %336, !dbg !54
  %338 = bitcast float %332 to i32, !dbg !40
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 4, i32 31), !dbg !40
  %340 = bitcast i32 %339 to float, !dbg !40
  %341 = bitcast float %337 to i32, !dbg !40
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 4, i32 31), !dbg !40
  %343 = bitcast i32 %342 to float, !dbg !40
  %344 = bitcast float %327 to i32, !dbg !40
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 4, i32 31), !dbg !40
  %346 = bitcast i32 %345 to float, !dbg !40
  %347 = fsub float %340, %332, !dbg !42
  %348 = fadd float %327, %346, !dbg !44
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !45
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %346, float %348) #5, !dbg !46
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !47
  %352 = fmul float %347, %351, !dbg !48
  %353 = fadd float %332, %352, !dbg !49
  %354 = fadd float %337, %343, !dbg !50
  %355 = fmul float %347, %347, !dbg !51
  %356 = fmul float %327, %355, !dbg !52
  %357 = fmul float %351, %356, !dbg !53
  %358 = fadd float %354, %357, !dbg !54
  %359 = bitcast float %353 to i32, !dbg !40
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 2, i32 31), !dbg !40
  %361 = bitcast i32 %360 to float, !dbg !40
  %362 = bitcast float %358 to i32, !dbg !40
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 2, i32 31), !dbg !40
  %364 = bitcast i32 %363 to float, !dbg !40
  %365 = bitcast float %348 to i32, !dbg !40
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 2, i32 31), !dbg !40
  %367 = bitcast i32 %366 to float, !dbg !40
  %368 = fsub float %361, %353, !dbg !42
  %369 = fadd float %348, %367, !dbg !44
  %370 = fcmp oeq float %369, 0.000000e+00, !dbg !45
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %369) #5, !dbg !46
  %372 = select i1 %370, float 0.000000e+00, float %371, !dbg !47
  %373 = fmul float %368, %372, !dbg !48
  %374 = fadd float %353, %373, !dbg !49
  %375 = fadd float %358, %364, !dbg !50
  %376 = fmul float %368, %368, !dbg !51
  %377 = fmul float %348, %376, !dbg !52
  %378 = fmul float %372, %377, !dbg !53
  %379 = fadd float %375, %378, !dbg !54
  %380 = bitcast float %374 to i32, !dbg !40
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 1, i32 31), !dbg !40
  %382 = bitcast i32 %381 to float, !dbg !40
  %383 = bitcast float %379 to i32, !dbg !40
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 1, i32 31), !dbg !40
  %385 = bitcast i32 %384 to float, !dbg !40
  %386 = bitcast float %369 to i32, !dbg !40
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 1, i32 31), !dbg !40
  %388 = bitcast i32 %387 to float, !dbg !40
  %389 = fsub float %382, %374, !dbg !42
  %390 = fadd float %369, %388, !dbg !44
  %391 = fcmp oeq float %390, 0.000000e+00, !dbg !45
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float %390) #5, !dbg !46
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !47
  %394 = fmul float %389, %393, !dbg !48
  %395 = fadd float %374, %394, !dbg !49
  %396 = fadd float %379, %385, !dbg !50
  %397 = fmul float %389, %389, !dbg !51
  %398 = fmul float %369, %397, !dbg !52
  %399 = fmul float %393, %398, !dbg !53
  %400 = fadd float %396, %399, !dbg !54
  %401 = and i32 %9, 15, !dbg !40
  %402 = icmp eq i32 %401, 0, !dbg !40
  %403 = and i1 %309, %402, !dbg !40
  %404 = bitcast float %395 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %404, i1 %403) #5, !dbg !40
  %405 = bitcast float %400 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %405, i1 %403) #5, !dbg !40
  %406 = bitcast float %390 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %406, i1 %403) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %407 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %408 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !40
  %409 = sext i32 %7 to i64, !dbg !55
  %410 = getelementptr float, ptr addrspace(1) %3, i64 %409, !dbg !55
  %411 = icmp eq i32 %12, 0, !dbg !56
  %412 = and i1 %411, %8, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %407, ptr addrspace(1) %410, i1 %412) #5, !dbg !56
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float 1.310720e+05) #5, !dbg !57
  %414 = fadd float %413, 0x3EE4F8B580000000, !dbg !58
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i = icmp eq i32 %415, 0, !dbg !59
  br i1 %.not.i, label %418, label %416, !dbg !59

416:                                              ; preds = %156
  %417 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %414), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

418:                                              ; preds = %156
  %419 = tail call float @llvm.nvvm.rsqrt.approx.f(float %414), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %416, %418
  %.0.i = phi float [ %417, %416 ], [ %419, %418 ], !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %420 = getelementptr float, ptr addrspace(1) %1, i64 %409, !dbg !61
  %421 = bitcast float %.0.i to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %420, i1 %412) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cupdbp6gfom2srxkrvcyw727hnwnekxu5yl4l6nzftr2kfu5ei6l.py", directory: "inductor_cache/up")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_2", linkageName: "triton_red_fused_convolution_native_group_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 50, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 55, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 47, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 41, column: 62, scope: !7)
!25 = !DILocation(line: 178, column: 7, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 43, column: 52, scope: !7)
!37 = !DILocation(line: 44, column: 48, scope: !7)
!38 = !DILocation(line: 45, column: 56, scope: !7)
!39 = !DILocation(line: 46, column: 55, scope: !7)
!40 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 192, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!44 = !DILocation(line: 193, column: 28, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 194, column: 39, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 194, column: 60, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 194, column: 49, scope: !43, inlinedAt: !41)
!48 = !DILocation(line: 196, column: 25, scope: !43, inlinedAt: !41)
!49 = !DILocation(line: 196, column: 17, scope: !43, inlinedAt: !41)
!50 = !DILocation(line: 197, column: 15, scope: !43, inlinedAt: !41)
!51 = !DILocation(line: 197, column: 30, scope: !43, inlinedAt: !41)
!52 = !DILocation(line: 197, column: 38, scope: !43, inlinedAt: !41)
!53 = !DILocation(line: 197, column: 49, scope: !43, inlinedAt: !41)
!54 = !DILocation(line: 197, column: 22, scope: !43, inlinedAt: !41)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 36, scope: !7)
!57 = !DILocation(line: 55, column: 18, scope: !7)
!58 = !DILocation(line: 57, column: 19, scope: !7)
!59 = !DILocation(line: 58, column: 28, scope: !7)
!60 = !DILocation(line: 59, column: 4, scope: !7)
!61 = !DILocation(line: 60, column: 28, scope: !7)
!62 = !DILocation(line: 60, column: 40, scope: !7)
!63 = !DILocation(line: 60, column: 4, scope: !7)
