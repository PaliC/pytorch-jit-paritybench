; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %16, 4096, !dbg !17
  %21 = srem i32 %20, 21, !dbg !18
  %22 = sext i32 %18 to i64, !dbg !19
  %23 = getelementptr i64, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !20
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !20
  %26 = sext i32 %.decomposed to i64, !dbg !21
  %27 = getelementptr i64, ptr addrspace(1) %2, i64 %26, !dbg !21
  %28 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !22
  %29 = extractvalue { i64, i64 } %28, 0, !dbg !22
  %30 = extractvalue { i64, i64 } %28, 1, !dbg !22
  %31 = sext i32 %21 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !24
  %35 = getelementptr i64, ptr addrspace(1) %5, i64 %26, !dbg !25
  %36 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !26
  %37 = extractvalue { i64, i64 } %36, 0, !dbg !26
  %38 = extractvalue { i64, i64 } %36, 1, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = getelementptr i64, ptr addrspace(1) %7, i64 %22, !dbg !29
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !30
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = lshr i64 %24, 58, !dbg !33
  %52 = and i64 %51, 32, !dbg !33
  %53 = add i64 %52, %24, !dbg !33
  %54 = lshr i64 %29, 58, !dbg !34
  %55 = and i64 %54, 32, !dbg !34
  %56 = lshr i64 %30, 58, !dbg !34
  %57 = and i64 %56, 32, !dbg !34
  %58 = shl i64 %53, 5, !dbg !35
  %59 = shl nsw i32 %20, 10, !dbg !36
  %60 = sext i32 %59 to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %55, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %58, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %60, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %57, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %58, !dbg !38
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %60, !dbg !38
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !39
  %71 = lshr i64 %37, 58, !dbg !40
  %72 = and i64 %71, 32, !dbg !40
  %73 = lshr i64 %38, 58, !dbg !40
  %74 = and i64 %73, 32, !dbg !40
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !41
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %72, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %58, !dbg !41
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %60, !dbg !41
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !41
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %74, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %58, !dbg !41
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %60, !dbg !41
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !42
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !42
  %85 = lshr i64 %44, 58, !dbg !43
  %86 = and i64 %85, 32, !dbg !43
  %87 = add i64 %86, %44, !dbg !43
  %88 = shl i64 %87, 5, !dbg !44
  %89 = getelementptr float, ptr addrspace(1) %62, i64 %88, !dbg !45
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %60, !dbg !45
  %91 = getelementptr float, ptr addrspace(1) %66, i64 %88, !dbg !45
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %60, !dbg !45
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !46
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !46
  %95 = getelementptr float, ptr addrspace(1) %76, i64 %88, !dbg !47
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %60, !dbg !47
  %97 = getelementptr float, ptr addrspace(1) %80, i64 %88, !dbg !47
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %60, !dbg !47
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !48
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !48
  %101 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !46
  %102 = insertelement <2 x i32> %101, i32 %69, i64 1, !dbg !46
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !46
  %104 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !49
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !49
  %106 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %107 = fadd <2 x float> %106, %103, !dbg !49
  %108 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !48
  %109 = insertelement <2 x i32> %108, i32 %83, i64 1, !dbg !48
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !48
  %111 = fadd <2 x float> %106, %110, !dbg !50
  %112 = fsub <2 x float> %111, %107, !dbg !51
  %113 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !52
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !52
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %116 = fmul <2 x float> %112, %115, !dbg !52
  %117 = fadd <2 x float> %107, %116, !dbg !53
  %118 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !46
  %119 = insertelement <2 x i32> %118, i32 %70, i64 1, !dbg !46
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !46
  %121 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !49
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !49
  %123 = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %124 = fadd <2 x float> %123, %120, !dbg !49
  %125 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !48
  %126 = insertelement <2 x i32> %125, i32 %84, i64 1, !dbg !48
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !48
  %128 = fadd <2 x float> %123, %127, !dbg !50
  %129 = fsub <2 x float> %128, %124, !dbg !51
  %130 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !52
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !52
  %132 = shufflevector <2 x float> %131, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %133 = fmul <2 x float> %129, %132, !dbg !52
  %134 = fadd <2 x float> %124, %133, !dbg !53
  %135 = extractelement <2 x float> %117, i64 0, !dbg !54
  %136 = extractelement <2 x float> %117, i64 1, !dbg !55
  %137 = fsub float %135, %136, !dbg !54
  %138 = extractelement <2 x float> %134, i64 0, !dbg !54
  %139 = extractelement <2 x float> %134, i64 1, !dbg !55
  %140 = fsub float %138, %139, !dbg !54
  %141 = fmul float %137, %48, !dbg !56
  %142 = fmul float %140, %50, !dbg !56
  %143 = fadd float %136, %141, !dbg !55
  %144 = fadd float %139, %142, !dbg !55
  %145 = sext i32 %16 to i64, !dbg !57
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !57
  %147 = bitcast float %143 to i32, !dbg !58
  %148 = bitcast float %144 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %146, i1 true) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cshyuztombohrxu54m7iwxodytv3jpv26vhfj7a76mslzukdv6xj.py", directory: "inductor_cache/sh")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_35, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_35", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 32, scope: !7)
!35 = !DILocation(line: 43, column: 40, scope: !7)
!36 = !DILocation(line: 43, column: 52, scope: !7)
!37 = !DILocation(line: 43, column: 47, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 57, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 48, column: 31, scope: !7)
!42 = !DILocation(line: 48, column: 59, scope: !7)
!43 = !DILocation(line: 55, column: 35, scope: !7)
!44 = !DILocation(line: 56, column: 41, scope: !7)
!45 = !DILocation(line: 56, column: 31, scope: !7)
!46 = !DILocation(line: 56, column: 59, scope: !7)
!47 = !DILocation(line: 58, column: 31, scope: !7)
!48 = !DILocation(line: 58, column: 60, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 28, scope: !7)
!58 = !DILocation(line: 66, column: 40, scope: !7)
!59 = !DILocation(line: 66, column: 4, scope: !7)
