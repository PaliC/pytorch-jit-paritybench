; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = or disjoint i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %10, 8, !dbg !12
  %13 = or disjoint i32 %10, 12, !dbg !12
  %14 = or disjoint i32 %10, 16, !dbg !12
  %15 = or disjoint i32 %10, 20, !dbg !12
  %16 = or disjoint i32 %10, 24, !dbg !12
  %17 = or disjoint i32 %10, 28, !dbg !12
  %18 = and i32 %8, 31, !dbg !12
  %19 = or disjoint i32 %7, %10, !dbg !13
  %20 = or disjoint i32 %7, %11, !dbg !13
  %21 = or disjoint i32 %7, %12, !dbg !13
  %22 = or disjoint i32 %7, %13, !dbg !13
  %23 = or disjoint i32 %7, %14, !dbg !13
  %24 = or disjoint i32 %7, %15, !dbg !13
  %25 = or disjoint i32 %7, %16, !dbg !13
  %26 = or disjoint i32 %7, %17, !dbg !13
  %27 = or disjoint i32 %7, %18, !dbg !13
  %28 = icmp slt i32 %19, 49, !dbg !14
  %29 = icmp slt i32 %20, 49, !dbg !14
  %30 = icmp slt i32 %21, 49, !dbg !14
  %31 = icmp slt i32 %22, 49, !dbg !14
  %32 = icmp slt i32 %23, 49, !dbg !14
  %33 = icmp slt i32 %24, 49, !dbg !14
  %34 = icmp slt i32 %25, 49, !dbg !14
  %35 = icmp slt i32 %26, 49, !dbg !14
  %36 = icmp slt i32 %27, 49, !dbg !14
  %37 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %38 = shl i32 %37, 5, !dbg !16
  %39 = or disjoint i32 %38, %18, !dbg !17
  %40 = or disjoint i32 %38, %10, !dbg !17
  %41 = or disjoint i32 %38, %11, !dbg !17
  %42 = or disjoint i32 %38, %12, !dbg !17
  %43 = or disjoint i32 %38, %13, !dbg !17
  %44 = or disjoint i32 %38, %14, !dbg !17
  %45 = or disjoint i32 %38, %15, !dbg !17
  %46 = or disjoint i32 %38, %16, !dbg !17
  %47 = or disjoint i32 %38, %17, !dbg !17
  %48 = icmp slt i32 %39, 49, !dbg !18
  %49 = icmp slt i32 %40, 49, !dbg !18
  %50 = icmp slt i32 %41, 49, !dbg !18
  %51 = icmp slt i32 %42, 49, !dbg !18
  %52 = icmp slt i32 %43, 49, !dbg !18
  %53 = icmp slt i32 %44, 49, !dbg !18
  %54 = icmp slt i32 %45, 49, !dbg !18
  %55 = icmp slt i32 %46, 49, !dbg !18
  %56 = icmp slt i32 %47, 49, !dbg !18
  %57 = mul i32 %40, 49, !dbg !19
  %58 = mul i32 %41, 49, !dbg !19
  %59 = mul i32 %42, 49, !dbg !19
  %60 = mul i32 %43, 49, !dbg !19
  %61 = mul i32 %44, 49, !dbg !19
  %62 = mul i32 %45, 49, !dbg !19
  %63 = mul i32 %46, 49, !dbg !19
  %64 = mul i32 %47, 49, !dbg !19
  %65 = add i32 %57, %27, !dbg !20
  %66 = add i32 %58, %27, !dbg !20
  %67 = add i32 %59, %27, !dbg !20
  %68 = add i32 %60, %27, !dbg !20
  %69 = add i32 %61, %27, !dbg !20
  %70 = add i32 %62, %27, !dbg !20
  %71 = add i32 %63, %27, !dbg !20
  %72 = add i32 %64, %27, !dbg !20
  %73 = sext i32 %65 to i64, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !21
  %75 = sext i32 %66 to i64, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !21
  %77 = sext i32 %67 to i64, !dbg !21
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !21
  %79 = sext i32 %68 to i64, !dbg !21
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !21
  %81 = sext i32 %69 to i64, !dbg !21
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !21
  %83 = sext i32 %70 to i64, !dbg !21
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !21
  %85 = sext i32 %71 to i64, !dbg !21
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !21
  %87 = sext i32 %72 to i64, !dbg !21
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !21
  %89 = and i1 %28, %48, !dbg !22
  %90 = and i1 %29, %48, !dbg !22
  %91 = and i1 %30, %48, !dbg !22
  %92 = and i1 %31, %48, !dbg !22
  %93 = and i1 %32, %48, !dbg !22
  %94 = and i1 %33, %48, !dbg !22
  %95 = and i1 %34, %48, !dbg !22
  %96 = and i1 %35, %48, !dbg !22
  %97 = and i1 %36, %49, !dbg !22
  %98 = and i1 %36, %50, !dbg !22
  %99 = and i1 %36, %51, !dbg !22
  %100 = and i1 %36, %52, !dbg !22
  %101 = and i1 %36, %53, !dbg !22
  %102 = and i1 %36, %54, !dbg !22
  %103 = and i1 %36, %55, !dbg !22
  %104 = and i1 %36, %56, !dbg !22
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %97) #2, !dbg !23
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %98) #2, !dbg !23
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %99) #2, !dbg !23
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %100) #2, !dbg !23
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %101) #2, !dbg !23
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %102) #2, !dbg !23
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %103) #2, !dbg !23
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %104) #2, !dbg !23
  %113 = mul i32 %19, 49, !dbg !24
  %114 = mul i32 %20, 49, !dbg !24
  %115 = mul i32 %21, 49, !dbg !24
  %116 = mul i32 %22, 49, !dbg !24
  %117 = mul i32 %23, 49, !dbg !24
  %118 = mul i32 %24, 49, !dbg !24
  %119 = mul i32 %25, 49, !dbg !24
  %120 = mul i32 %26, 49, !dbg !24
  %121 = add i32 %39, %113, !dbg !25
  %122 = add i32 %39, %114, !dbg !25
  %123 = add i32 %39, %115, !dbg !25
  %124 = add i32 %39, %116, !dbg !25
  %125 = add i32 %39, %117, !dbg !25
  %126 = add i32 %39, %118, !dbg !25
  %127 = add i32 %39, %119, !dbg !25
  %128 = add i32 %39, %120, !dbg !25
  %129 = sext i32 %121 to i64, !dbg !26
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !26
  %131 = sext i32 %122 to i64, !dbg !26
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !26
  %133 = sext i32 %123 to i64, !dbg !26
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !26
  %135 = sext i32 %124 to i64, !dbg !26
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !26
  %137 = sext i32 %125 to i64, !dbg !26
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !26
  %139 = sext i32 %126 to i64, !dbg !26
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !26
  %141 = sext i32 %127 to i64, !dbg !26
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !26
  %143 = sext i32 %128 to i64, !dbg !26
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !26
  %145 = shl i32 %8, 5, !dbg !27
  %146 = and i32 %145, 992, !dbg !27
  %147 = or disjoint i32 %146, %10, !dbg !27
  %148 = and i32 %8, 127, !dbg !27
  %149 = lshr exact i32 %146, 5, !dbg !27
  %150 = add nuw nsw i32 %149, %147, !dbg !27
  %151 = zext nneg i32 %150 to i64, !dbg !27
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %151, !dbg !27
  %153 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !27
  %154 = or disjoint i32 %147, 4, !dbg !27
  %155 = add nuw nsw i32 %154, %149, !dbg !27
  %156 = zext nneg i32 %155 to i64, !dbg !27
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %156, !dbg !27
  %158 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !27
  %159 = or disjoint i32 %147, 8, !dbg !27
  %160 = add nuw nsw i32 %159, %149, !dbg !27
  %161 = zext nneg i32 %160 to i64, !dbg !27
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %161, !dbg !27
  %163 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !27
  %164 = or disjoint i32 %147, 12, !dbg !27
  %165 = add nuw nsw i32 %164, %149, !dbg !27
  %166 = zext nneg i32 %165 to i64, !dbg !27
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %166, !dbg !27
  %168 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !27
  %169 = or disjoint i32 %147, 16, !dbg !27
  %170 = add nuw nsw i32 %169, %149, !dbg !27
  %171 = zext nneg i32 %170 to i64, !dbg !27
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %171, !dbg !27
  %173 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #2, !dbg !27
  %174 = or disjoint i32 %147, 20, !dbg !27
  %175 = add nuw nsw i32 %174, %149, !dbg !27
  %176 = zext nneg i32 %175 to i64, !dbg !27
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !27
  %178 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !27
  %179 = or disjoint i32 %147, 24, !dbg !27
  %180 = add nuw nsw i32 %179, %149, !dbg !27
  %181 = zext nneg i32 %180 to i64, !dbg !27
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %181, !dbg !27
  %183 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !27
  %184 = or disjoint i32 %147, 28, !dbg !27
  %185 = add nuw nsw i32 %184, %149, !dbg !27
  %186 = zext nneg i32 %185 to i64, !dbg !27
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %186, !dbg !27
  %188 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %189 = lshr i32 %148, 5, !dbg !27
  %190 = add nuw nsw i32 %189, %148, !dbg !27
  %191 = zext nneg i32 %190 to i64, !dbg !27
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %191, !dbg !27
  %193 = load i32, ptr addrspace(3) %192, align 4, !dbg !27
  %194 = or disjoint i32 %148, 128, !dbg !27
  %195 = lshr i32 %194, 5, !dbg !27
  %196 = add nuw nsw i32 %195, %194, !dbg !27
  %197 = zext nneg i32 %196 to i64, !dbg !27
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %197, !dbg !27
  %199 = load i32, ptr addrspace(3) %198, align 4, !dbg !27
  %200 = or disjoint i32 %148, 256, !dbg !27
  %201 = lshr i32 %200, 5, !dbg !27
  %202 = add nuw nsw i32 %201, %200, !dbg !27
  %203 = zext nneg i32 %202 to i64, !dbg !27
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %203, !dbg !27
  %205 = load i32, ptr addrspace(3) %204, align 4, !dbg !27
  %206 = or disjoint i32 %148, 384, !dbg !27
  %207 = lshr i32 %206, 5, !dbg !27
  %208 = add nuw nsw i32 %207, %206, !dbg !27
  %209 = zext nneg i32 %208 to i64, !dbg !27
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %209, !dbg !27
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !27
  %212 = or disjoint i32 %148, 512, !dbg !27
  %213 = lshr i32 %212, 5, !dbg !27
  %214 = add nuw nsw i32 %213, %212, !dbg !27
  %215 = zext nneg i32 %214 to i64, !dbg !27
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %215, !dbg !27
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !27
  %218 = or disjoint i32 %148, 640, !dbg !27
  %219 = lshr i32 %218, 5, !dbg !27
  %220 = add nuw nsw i32 %219, %218, !dbg !27
  %221 = zext nneg i32 %220 to i64, !dbg !27
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %221, !dbg !27
  %223 = load i32, ptr addrspace(3) %222, align 4, !dbg !27
  %224 = or disjoint i32 %148, 768, !dbg !27
  %225 = lshr i32 %224, 5, !dbg !27
  %226 = add nuw nsw i32 %225, %224, !dbg !27
  %227 = zext nneg i32 %226 to i64, !dbg !27
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %227, !dbg !27
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !27
  %230 = or disjoint i32 %148, 896, !dbg !27
  %231 = lshr i32 %230, 5, !dbg !27
  %232 = add nuw nsw i32 %231, %230, !dbg !27
  %233 = zext nneg i32 %232 to i64, !dbg !27
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %233, !dbg !27
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %130, i1 %89) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %132, i1 %90) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %134, i1 %91) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %136, i1 %92) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %138, i1 %93) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %140, i1 %94) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %229, ptr addrspace(1) %142, i1 %95) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %144, i1 %96) #2, !dbg !27
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !28
  %237 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !28
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !28
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !28
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !28
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !28
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !28
  %243 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %236, i1 %89) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %237, i1 %90) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %238, i1 %91) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %239, i1 %92) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %240, i1 %93) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %241, i1 %94) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %229, ptr addrspace(1) %242, i1 %95) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %243, i1 %96) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7vlwvj6uo6rhbprqxipic7or7w5qjnrigio76pkvaswqwsymli.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_1", linkageName: "triton_poi_fused_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 38, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 51, scope: !7)
!23 = !DILocation(line: 30, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 33, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 25, scope: !7)
!27 = !DILocation(line: 31, column: 44, scope: !7)
!28 = !DILocation(line: 32, column: 25, scope: !7)
!29 = !DILocation(line: 32, column: 44, scope: !7)
!30 = !DILocation(line: 32, column: 4, scope: !7)
