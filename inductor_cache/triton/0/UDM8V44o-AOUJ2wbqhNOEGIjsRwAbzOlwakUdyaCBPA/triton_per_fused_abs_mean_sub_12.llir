; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = lshr i32 %8, 5, !dbg !14
  %13 = lshr i32 %8, 3, !dbg !14
  %14 = and i32 %13, 31, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %15 = sdiv i32 %.frozen, 64, !dbg !15
  %16 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl nuw nsw i32 %14, 7, !dbg !17
  %18 = shl i32 %15, 7, !dbg !18
  %19 = or disjoint i32 %18, %14, !dbg !19
  %20 = or disjoint i32 %19, 32, !dbg !19
  %21 = or disjoint i32 %19, 64, !dbg !19
  %22 = or disjoint i32 %19, 96, !dbg !19
  %23 = sdiv i32 %19, 32, !dbg !20
  %24 = sdiv i32 %20, 32, !dbg !20
  %25 = sdiv i32 %21, 32, !dbg !20
  %26 = sdiv i32 %22, 32, !dbg !20
  %27 = srem i32 %23, 32, !dbg !21
  %28 = srem i32 %24, 32, !dbg !21
  %29 = srem i32 %25, 32, !dbg !21
  %30 = srem i32 %26, 32, !dbg !21
  %31 = shl nsw i32 %27, 12, !dbg !22
  %32 = shl nsw i32 %28, 12, !dbg !22
  %33 = shl nsw i32 %29, 12, !dbg !22
  %34 = shl nsw i32 %30, 12, !dbg !22
  %35 = or disjoint i32 %31, %17, !dbg !23
  %36 = or disjoint i32 %32, %17, !dbg !23
  %37 = or disjoint i32 %33, %17, !dbg !23
  %38 = or disjoint i32 %34, %17, !dbg !23
  %39 = shl nsw i32 %.decomposed, 13, !dbg !24
  %40 = add i32 %19, %39, !dbg !25
  %41 = add i32 %20, %39, !dbg !25
  %42 = add i32 %21, %39, !dbg !25
  %43 = add i32 %22, %39, !dbg !25
  %44 = sdiv i32 %40, 131072, !dbg !26
  %45 = sdiv i32 %41, 131072, !dbg !26
  %46 = sdiv i32 %42, 131072, !dbg !26
  %47 = sdiv i32 %43, 131072, !dbg !26
  %48 = shl nsw i32 %44, 17, !dbg !27
  %49 = shl nsw i32 %45, 17, !dbg !27
  %50 = shl nsw i32 %46, 17, !dbg !27
  %51 = shl nsw i32 %47, 17, !dbg !27
  %52 = add i32 %35, %48, !dbg !28
  %53 = add i32 %36, %49, !dbg !28
  %54 = add i32 %37, %50, !dbg !28
  %55 = add i32 %38, %51, !dbg !28
  %56 = sdiv i32 %40, 1024, !dbg !29
  %57 = sdiv i32 %41, 1024, !dbg !29
  %58 = sdiv i32 %42, 1024, !dbg !29
  %59 = sdiv i32 %43, 1024, !dbg !29
  %60 = srem i32 %56, 128, !dbg !30
  %61 = srem i32 %57, 128, !dbg !30
  %62 = srem i32 %58, 128, !dbg !30
  %63 = srem i32 %59, 128, !dbg !30
  %64 = add i32 %52, %60, !dbg !31
  %65 = add i32 %53, %61, !dbg !31
  %66 = add i32 %54, %62, !dbg !31
  %67 = add i32 %55, %63, !dbg !31
  %68 = sext i32 %64 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !32
  %70 = sext i32 %65 to i64, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !32
  %72 = sext i32 %66 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !32
  %74 = sext i32 %67 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !32
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #4, !dbg !33
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #4, !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #4, !dbg !33
  %81 = bitcast i32 %80 to float, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !34
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !34
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !34
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #4, !dbg !35
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #4, !dbg !35
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #4, !dbg !35
  %89 = bitcast i32 %88 to float, !dbg !35
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #4, !dbg !35
  %91 = bitcast i32 %90 to float, !dbg !35
  %92 = fsub float %79, %89, !dbg !36
  %93 = fsub float %81, %91, !dbg !36
  %94 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !33
  %95 = insertelement <2 x i32> %94, i32 %77, i64 1, !dbg !33
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !33
  %97 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !35
  %98 = insertelement <2 x i32> %97, i32 %87, i64 1, !dbg !35
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !35
  %100 = fsub <2 x float> %96, %99, !dbg !36
  %101 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %100), !dbg !37
  %102 = tail call float @llvm.fabs.f32(float %92), !dbg !37
  %103 = tail call float @llvm.fabs.f32(float %93), !dbg !37
  %shift = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %104 = fadd <2 x float> %101, %shift, !dbg !38
  %105 = extractelement <2 x float> %104, i64 0, !dbg !38
  %106 = fadd float %105, %102, !dbg !38
  %107 = fadd float %106, %103, !dbg !38
  %108 = bitcast float %107 to i32, !dbg !43
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !43
  %110 = bitcast i32 %109 to float, !dbg !43
  %111 = fadd float %107, %110, !dbg !38
  %112 = bitcast float %111 to i32, !dbg !43
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !43
  %114 = bitcast i32 %113 to float, !dbg !43
  %115 = fadd float %111, %114, !dbg !38
  %116 = lshr i32 %9, 3, !dbg !43
  %117 = icmp samesign ult i32 %9, 8, !dbg !43
  %118 = and i32 %12, 7, !dbg !43
  %119 = shl nuw nsw i32 %10, 3, !dbg !43
  %120 = or disjoint i32 %119, %118, !dbg !43
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !43
  %122 = bitcast float %115 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 %117) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %123 = icmp slt i32 %8, 64, !dbg !43
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %123) #4, !dbg !43
  %126 = bitcast i32 %125 to float, !dbg !43
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !43
  %128 = bitcast i32 %127 to float, !dbg !43
  %129 = fadd float %126, %128, !dbg !38
  %130 = bitcast float %129 to i32, !dbg !43
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !43
  %132 = bitcast i32 %131 to float, !dbg !43
  %133 = fadd float %129, %132, !dbg !38
  %134 = bitcast float %133 to i32, !dbg !43
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !43
  %136 = bitcast i32 %135 to float, !dbg !43
  %137 = fadd float %133, %136, !dbg !38
  %138 = icmp eq i32 %10, 0, !dbg !43
  %139 = and i1 %123, %138, !dbg !43
  %140 = bitcast float %137 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %140, i1 %139) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !43
  %142 = load i32, ptr addrspace(3) %141, align 16, !dbg !43
  %143 = sext i32 %11 to i64, !dbg !44
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !44
  %145 = shl nuw nsw i32 %118, 2, !dbg !45
  %146 = or disjoint i32 %145, %116, !dbg !45
  %147 = icmp eq i32 %146, 0, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %144, i1 %147) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coqxbsrz5tllbzytwujhahu4whua7lawqsfide2p7tx76scadpvc.py", directory: "inductor_cache/oq")
!4 = !{ptr @triton_per_fused_abs_mean_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_12", linkageName: "triton_per_fused_abs_mean_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 36, scope: !7)
!18 = !DILocation(line: 33, column: 66, scope: !7)
!19 = !DILocation(line: 33, column: 62, scope: !7)
!20 = !DILocation(line: 33, column: 73, scope: !7)
!21 = !DILocation(line: 33, column: 79, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 33, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 114, scope: !7)
!25 = !DILocation(line: 33, column: 109, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 94, scope: !7)
!28 = !DILocation(line: 33, column: 86, scope: !7)
!29 = !DILocation(line: 33, column: 161, scope: !7)
!30 = !DILocation(line: 33, column: 169, scope: !7)
!31 = !DILocation(line: 33, column: 133, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 177, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 177, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 23, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 38, column: 24, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 36, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
