; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 128, !dbg !14
  %17 = sext i32 %14 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = sext i32 %16 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !26
  %55 = fadd float %33, 0x3EE4F8B580000000, !dbg !27
  %56 = fadd float %34, 0x3EE4F8B580000000, !dbg !27
  %57 = fadd float %35, 0x3EE4F8B580000000, !dbg !27
  %58 = fadd float %36, 0x3EE4F8B580000000, !dbg !27
  %59 = fadd float %42, 0x3EE4F8B580000000, !dbg !27
  %60 = fadd float %43, 0x3EE4F8B580000000, !dbg !27
  %61 = fadd float %44, 0x3EE4F8B580000000, !dbg !27
  %62 = fadd float %45, 0x3EE4F8B580000000, !dbg !27
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %63, 0, !dbg !28
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %64, 0, !dbg !28
  br i1 %.not.i, label %70, label %65, !dbg !28

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !28

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

70:                                               ; preds = %8
  br i1 %.not1.i, label %73, label %71, !dbg !28

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !28
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %75, 0, !dbg !28
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !28
  br i1 %.not.i1, label %82, label %77, !dbg !28

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !28

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !28

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %87, 0, !dbg !28
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %88, 0, !dbg !28
  br i1 %.not.i6, label %94, label %89, !dbg !28

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !28

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !28

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %90, %92, %95, %97
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !28
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %99, 0, !dbg !28
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %100, 0, !dbg !28
  br i1 %.not.i11, label %106, label %101, !dbg !28

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !28

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !28

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %102, %104, %107, %109
  %.0.i13 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %111, 0, !dbg !28
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %112, 0, !dbg !28
  br i1 %.not.i16, label %118, label %113, !dbg !28

113:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %116, label %114, !dbg !28

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

118:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %121, label %119, !dbg !28

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %114, %116, %119, %121
  %.0.i18 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !28
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %123, 0, !dbg !28
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %124, 0, !dbg !28
  br i1 %.not.i21, label %130, label %125, !dbg !28

125:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %128, label %126, !dbg !28

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

130:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %133, label %131, !dbg !28

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %126, %128, %131, %133
  %.0.i23 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %135, 0, !dbg !28
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %136, 0, !dbg !28
  br i1 %.not.i26, label %142, label %137, !dbg !28

137:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %140, label %138, !dbg !28

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

142:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %145, label %143, !dbg !28

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %138, %140, %143, %145
  %.0.i28 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %147, 0, !dbg !28
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %148, 0, !dbg !28
  br i1 %.not.i31, label %154, label %149, !dbg !28

149:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %152, label %150, !dbg !28

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

154:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %157, label %155, !dbg !28

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %150, %152, %155, %157
  %.0.i33 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %160 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %161 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %162 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %163 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %164 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %165 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %166 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %167 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %168 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %169 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %170 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %171 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %172 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %173 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %174 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %175 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %176 = bitcast i32 %175 to float, !dbg !26
  %177 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %178 = bitcast i32 %177 to float, !dbg !26
  %179 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %180 = bitcast i32 %179 to float, !dbg !26
  %181 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %182 = bitcast i32 %181 to float, !dbg !26
  %183 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %184 = bitcast i32 %183 to float, !dbg !26
  %185 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %186 = bitcast i32 %185 to float, !dbg !26
  %187 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %188 = bitcast i32 %187 to float, !dbg !26
  %189 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %190 = bitcast i32 %189 to float, !dbg !26
  %191 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %193 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %194 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %195 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %196 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %197 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %198 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %199 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %200 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %201 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %202 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %203 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %204 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %205 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %206 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %215 = insertelement <8 x i32> poison, i32 %159, i64 0, !dbg !16
  %216 = insertelement <8 x i32> %215, i32 %161, i64 1, !dbg !16
  %217 = insertelement <8 x i32> %216, i32 %163, i64 2, !dbg !16
  %218 = insertelement <8 x i32> %217, i32 %165, i64 3, !dbg !16
  %219 = insertelement <8 x i32> %218, i32 %167, i64 4, !dbg !16
  %220 = insertelement <8 x i32> %219, i32 %169, i64 5, !dbg !16
  %221 = insertelement <8 x i32> %220, i32 %171, i64 6, !dbg !16
  %222 = insertelement <8 x i32> %221, i32 %173, i64 7, !dbg !16
  %223 = bitcast <8 x i32> %222 to <8 x float>, !dbg !16
  %224 = insertelement <8 x i32> poison, i32 %160, i64 0, !dbg !18
  %225 = insertelement <8 x i32> %224, i32 %162, i64 1, !dbg !18
  %226 = insertelement <8 x i32> %225, i32 %164, i64 2, !dbg !18
  %227 = insertelement <8 x i32> %226, i32 %166, i64 3, !dbg !18
  %228 = insertelement <8 x i32> %227, i32 %168, i64 4, !dbg !18
  %229 = insertelement <8 x i32> %228, i32 %170, i64 5, !dbg !18
  %230 = insertelement <8 x i32> %229, i32 %172, i64 6, !dbg !18
  %231 = insertelement <8 x i32> %230, i32 %174, i64 7, !dbg !18
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !18
  %233 = fsub <8 x float> %223, %232, !dbg !30
  %234 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !24
  %235 = insertelement <8 x i32> %234, i32 %192, i64 1, !dbg !24
  %236 = insertelement <8 x i32> %235, i32 %193, i64 2, !dbg !24
  %237 = insertelement <8 x i32> %236, i32 %194, i64 3, !dbg !24
  %238 = insertelement <8 x i32> %237, i32 %195, i64 4, !dbg !24
  %239 = insertelement <8 x i32> %238, i32 %196, i64 5, !dbg !24
  %240 = insertelement <8 x i32> %239, i32 %197, i64 6, !dbg !24
  %241 = insertelement <8 x i32> %240, i32 %198, i64 7, !dbg !24
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !24
  %243 = insertelement <8 x i32> poison, i32 %199, i64 0, !dbg !22
  %244 = insertelement <8 x i32> %243, i32 %200, i64 1, !dbg !22
  %245 = insertelement <8 x i32> %244, i32 %201, i64 2, !dbg !22
  %246 = insertelement <8 x i32> %245, i32 %202, i64 3, !dbg !22
  %247 = insertelement <8 x i32> %246, i32 %203, i64 4, !dbg !22
  %248 = insertelement <8 x i32> %247, i32 %204, i64 5, !dbg !22
  %249 = insertelement <8 x i32> %248, i32 %205, i64 6, !dbg !22
  %250 = insertelement <8 x i32> %249, i32 %206, i64 7, !dbg !22
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !22
  %252 = insertelement <8 x float> poison, float %214, i64 0, !dbg !31
  %253 = insertelement <8 x float> %252, float %213, i64 1, !dbg !31
  %254 = insertelement <8 x float> %253, float %212, i64 2, !dbg !31
  %255 = insertelement <8 x float> %254, float %211, i64 3, !dbg !31
  %256 = insertelement <8 x float> %255, float %210, i64 4, !dbg !31
  %257 = insertelement <8 x float> %256, float %209, i64 5, !dbg !31
  %258 = insertelement <8 x float> %257, float %208, i64 6, !dbg !31
  %259 = insertelement <8 x float> %258, float %207, i64 7, !dbg !31
  %260 = fmul <8 x float> %233, %259, !dbg !31
  %261 = fmul <8 x float> %260, %251, !dbg !32
  %262 = fadd <8 x float> %261, %242, !dbg !33
  %263 = fcmp ogt <8 x float> %262, zeroinitializer, !dbg !34
  %264 = extractelement <8 x float> %262, i64 7, !dbg !35
  %265 = fmul float %264, %190, !dbg !36
  %266 = extractelement <8 x float> %262, i64 6, !dbg !35
  %267 = fmul float %266, %188, !dbg !36
  %268 = extractelement <8 x float> %262, i64 5, !dbg !35
  %269 = fmul float %268, %186, !dbg !36
  %270 = extractelement <8 x float> %262, i64 4, !dbg !35
  %271 = fmul float %270, %184, !dbg !36
  %272 = extractelement <8 x float> %262, i64 3, !dbg !35
  %273 = fmul float %272, %182, !dbg !36
  %274 = extractelement <8 x float> %262, i64 2, !dbg !35
  %275 = fmul float %274, %180, !dbg !36
  %276 = extractelement <8 x float> %262, i64 1, !dbg !35
  %277 = fmul float %276, %178, !dbg !36
  %278 = extractelement <8 x float> %262, i64 0, !dbg !35
  %279 = fmul float %278, %176, !dbg !36
  %280 = extractelement <8 x i1> %263, i64 7, !dbg !35
  %281 = select i1 %280, float %264, float %265, !dbg !35
  %282 = extractelement <8 x i1> %263, i64 6, !dbg !35
  %283 = select i1 %282, float %266, float %267, !dbg !35
  %284 = extractelement <8 x i1> %263, i64 5, !dbg !35
  %285 = select i1 %284, float %268, float %269, !dbg !35
  %286 = extractelement <8 x i1> %263, i64 4, !dbg !35
  %287 = select i1 %286, float %270, float %271, !dbg !35
  %288 = extractelement <8 x i1> %263, i64 3, !dbg !35
  %289 = select i1 %288, float %272, float %273, !dbg !35
  %290 = extractelement <8 x i1> %263, i64 2, !dbg !35
  %291 = select i1 %290, float %274, float %275, !dbg !35
  %292 = extractelement <8 x i1> %263, i64 1, !dbg !35
  %293 = select i1 %292, float %276, float %277, !dbg !35
  %294 = extractelement <8 x i1> %263, i64 0, !dbg !35
  %295 = select i1 %294, float %278, float %279, !dbg !35
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !37
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !37
  %298 = bitcast float %281 to i32, !dbg !38
  %299 = bitcast float %283 to i32, !dbg !38
  %300 = bitcast float %285 to i32, !dbg !38
  %301 = bitcast float %287 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %298, i32 %299, i32 %300, i32 %301, ptr addrspace(1) %296, i1 true) #3, !dbg !38
  %302 = bitcast float %289 to i32, !dbg !38
  %303 = bitcast float %291 to i32, !dbg !38
  %304 = bitcast float %293 to i32, !dbg !38
  %305 = bitcast float %295 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %303, i32 %304, i32 %305, ptr addrspace(1) %297, i1 true) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy4csfpgivdkquadq7d4642mhg57nd7gwoozjam723susrortyrg.py", directory: "inductor_cache/y4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 28, scope: !7)
!38 = !DILocation(line: 47, column: 40, scope: !7)
!39 = !DILocation(line: 47, column: 4, scope: !7)
