; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = srem i32 %18, 728, !dbg !14
  %20 = sext i32 %18 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %23 = sext i32 %19 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %32 = bitcast i32 %30 to float, !dbg !22
  %33 = bitcast i32 %31 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = add i32 %18, -12376, !dbg !27
  %39 = sext i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !28
  %41 = add i32 %18, -11648, !dbg !29
  %42 = sext i32 %41 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !30
  %44 = add i32 %18, -10920, !dbg !31
  %45 = sext i32 %44 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !32
  %47 = add i32 %18, -728, !dbg !33
  %48 = sext i32 %47 to i64, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !35
  %51 = add i32 %18, 728, !dbg !36
  %52 = sext i32 %51 to i64, !dbg !37
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !37
  %54 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !38
  %55 = shufflevector <2 x i32> %54, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !38
  %56 = sdiv <2 x i32> %55, <i32 11648, i32 728>, !dbg !38
  %57 = srem <2 x i32> %56, splat (i32 16), !dbg !39
  %58 = extractelement <2 x i32> %57, i64 0, !dbg !40
  %59 = icmp sgt i32 %58, 0, !dbg !41
  %60 = extractelement <2 x i32> %57, i64 1, !dbg !40
  %61 = icmp sgt i32 %60, 0, !dbg !42
  %62 = and i1 %59, %61, !dbg !43
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #3, !dbg !44
  %64 = icmp sgt i32 %60, -1, !dbg !45
  %65 = and i1 %59, %64, !dbg !46
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65) #3, !dbg !47
  %67 = add nsw <2 x i32> %57, splat (i32 1), !dbg !48
  %68 = extractelement <2 x i32> %67, i64 1, !dbg !49
  %69 = icmp ult i32 %68, 16, !dbg !50
  %70 = and i1 %59, %69, !dbg !51
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70) #3, !dbg !52
  %72 = icmp sgt i32 %58, -1, !dbg !53
  %73 = and i1 %72, %61, !dbg !54
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %73, i32 -8388608, i1 %73, i32 -8388608, i1 %73) #3, !dbg !55
  %75 = or i32 %58, %60, !dbg !40
  %76 = icmp sgt i32 %75, -1, !dbg !40
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %76, i32 -8388608, i1 %76, i32 -8388608, i1 %76) #3, !dbg !56
  %78 = and i1 %72, %69, !dbg !57
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78) #3, !dbg !58
  %80 = extractelement <2 x i32> %67, i64 0, !dbg !49
  %81 = icmp ult i32 %80, 16, !dbg !48
  %82 = and i1 %61, %81, !dbg !59
  %83 = add i32 %18, 10920, !dbg !60
  %84 = sext i32 %83 to i64, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !61
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %82, i32 -8388608, i1 %82, i32 -8388608, i1 %82) #3, !dbg !62
  %87 = and i1 %64, %81, !dbg !63
  %88 = add i32 %18, 11648, !dbg !64
  %89 = sext i32 %88 to i64, !dbg !65
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !65
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #3, !dbg !66
  %92 = or i32 %80, %68, !dbg !49
  %93 = icmp ult i32 %92, 16, !dbg !49
  %94 = add i32 %18, 12376, !dbg !67
  %95 = sext i32 %94 to i64, !dbg !68
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !68
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %93, i32 -8388608, i1 %93, i32 -8388608, i1 %93) #3, !dbg !69
  %98 = fadd float %32, 0x3EE4F8B580000000, !dbg !70
  %99 = fadd float %33, 0x3EE4F8B580000000, !dbg !70
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i = icmp eq i32 %100, 0, !dbg !71
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i = icmp eq i32 %101, 0, !dbg !71
  br i1 %.not.i, label %107, label %102, !dbg !71

102:                                              ; preds = %12
  br i1 %.not1.i, label %105, label %103, !dbg !71

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

107:                                              ; preds = %12
  br i1 %.not1.i, label %110, label %108, !dbg !71

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

__nv_sqrtf.exit:                                  ; preds = %103, %105, %108, %110
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !71
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i1 = icmp eq i32 %112, 0, !dbg !71
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i4 = icmp eq i32 %113, 0, !dbg !71
  br i1 %.not.i1, label %119, label %114, !dbg !71

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !71

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit5, !dbg !71

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit5, !dbg !71

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %122, label %120, !dbg !71

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit5, !dbg !71

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit5, !dbg !71

__nv_sqrtf.exit5:                                 ; preds = %115, %117, %120, %122
  %.0.i3 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !71
  %124 = extractvalue { i32, i32 } %22, 1, !dbg !16
  %125 = bitcast i32 %124 to float, !dbg !16
  %126 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %127 = bitcast i32 %126 to float, !dbg !18
  %128 = fadd float %125, %127, !dbg !72
  %129 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %130 = bitcast i32 %129 to float, !dbg !20
  %131 = fsub float %128, %130, !dbg !73
  %132 = extractvalue { i32, i32 } %22, 0, !dbg !16
  %133 = bitcast i32 %132 to float, !dbg !16
  %134 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %135 = bitcast i32 %134 to float, !dbg !18
  %136 = fadd float %133, %135, !dbg !72
  %137 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %138 = bitcast i32 %137 to float, !dbg !20
  %139 = fsub float %136, %138, !dbg !73
  %140 = extractvalue { i32, i32 } %66, 1, !dbg !47
  %141 = extractvalue { i32, i32 } %63, 1, !dbg !44
  %142 = extractvalue { i32, i32 } %71, 1, !dbg !52
  %143 = extractvalue { i32, i32 } %74, 1, !dbg !55
  %144 = extractvalue { i32, i32 } %77, 1, !dbg !56
  %145 = extractvalue { i32, i32 } %79, 1, !dbg !58
  %146 = extractvalue { i32, i32 } %86, 1, !dbg !62
  %147 = extractvalue { i32, i32 } %91, 1, !dbg !66
  %148 = extractvalue { i32, i32 } %97, 1, !dbg !69
  %149 = extractvalue { i32, i32 } %66, 0, !dbg !47
  %150 = extractvalue { i32, i32 } %63, 0, !dbg !44
  %151 = extractvalue { i32, i32 } %71, 0, !dbg !52
  %152 = extractvalue { i32, i32 } %74, 0, !dbg !55
  %153 = extractvalue { i32, i32 } %77, 0, !dbg !56
  %154 = extractvalue { i32, i32 } %79, 0, !dbg !58
  %155 = extractvalue { i32, i32 } %86, 0, !dbg !62
  %156 = extractvalue { i32, i32 } %91, 0, !dbg !66
  %157 = extractvalue { i32, i32 } %97, 0, !dbg !69
  %158 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !47
  %159 = insertelement <2 x i32> %158, i32 %140, i64 1, !dbg !47
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !47
  %161 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !44
  %162 = insertelement <2 x i32> %161, i32 %141, i64 1, !dbg !44
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !44
  %164 = fcmp ogt <2 x float> %160, %163, !dbg !74
  %165 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !55
  %166 = insertelement <2 x i32> %165, i32 %143, i64 1, !dbg !55
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !55
  %168 = fcmp uno <2 x float> %160, zeroinitializer, !dbg !78
  %169 = or <2 x i1> %164, %168, !dbg !79
  %.v = select <2 x i1> %169, <2 x i32> %159, <2 x i32> %162, !dbg !80
  %170 = bitcast <2 x i32> %.v to <2 x float>, !dbg !80
  %171 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !52
  %172 = insertelement <2 x i32> %171, i32 %142, i64 1, !dbg !52
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !52
  %174 = fcmp olt <2 x float> %170, %173, !dbg !81
  %175 = fcmp uno <2 x float> %173, zeroinitializer, !dbg !83
  %176 = or <2 x i1> %175, %174, !dbg !84
  %.v6 = select <2 x i1> %176, <2 x i32> %172, <2 x i32> %.v, !dbg !85
  %177 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !85
  %178 = fcmp olt <2 x float> %177, %167, !dbg !86
  %179 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !56
  %180 = insertelement <2 x i32> %179, i32 %144, i64 1, !dbg !56
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !56
  %182 = fcmp uno <2 x float> %167, zeroinitializer, !dbg !88
  %183 = or <2 x i1> %182, %178, !dbg !89
  %.v7 = select <2 x i1> %183, <2 x i32> %166, <2 x i32> %.v6, !dbg !90
  %184 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !90
  %185 = fcmp olt <2 x float> %184, %181, !dbg !91
  %186 = fcmp uno <2 x float> %181, zeroinitializer, !dbg !93
  %187 = or <2 x i1> %186, %185, !dbg !94
  %.v8 = select <2 x i1> %187, <2 x i32> %180, <2 x i32> %.v7, !dbg !95
  %188 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !95
  %189 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !58
  %190 = insertelement <2 x i32> %189, i32 %145, i64 1, !dbg !58
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !58
  %192 = fcmp olt <2 x float> %188, %191, !dbg !96
  %193 = fcmp uno <2 x float> %191, zeroinitializer, !dbg !98
  %194 = or <2 x i1> %193, %192, !dbg !99
  %.v9 = select <2 x i1> %194, <2 x i32> %190, <2 x i32> %.v8, !dbg !100
  %195 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !100
  %196 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !62
  %197 = insertelement <2 x i32> %196, i32 %146, i64 1, !dbg !62
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !62
  %199 = fcmp olt <2 x float> %195, %198, !dbg !101
  %200 = fcmp uno <2 x float> %198, zeroinitializer, !dbg !103
  %201 = or <2 x i1> %200, %199, !dbg !104
  %.v10 = select <2 x i1> %201, <2 x i32> %197, <2 x i32> %.v9, !dbg !105
  %202 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !105
  %203 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !66
  %204 = insertelement <2 x i32> %203, i32 %147, i64 1, !dbg !66
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !66
  %206 = fcmp olt <2 x float> %202, %205, !dbg !106
  %207 = fcmp uno <2 x float> %205, zeroinitializer, !dbg !108
  %208 = or <2 x i1> %207, %206, !dbg !109
  %.v11 = select <2 x i1> %208, <2 x i32> %204, <2 x i32> %.v10, !dbg !110
  %209 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !110
  %210 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !69
  %211 = insertelement <2 x i32> %210, i32 %148, i64 1, !dbg !69
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !69
  %213 = fcmp olt <2 x float> %209, %212, !dbg !111
  %214 = zext <2 x i1> %164 to <2 x i8>, !dbg !113
  %215 = select <2 x i1> %174, <2 x i8> splat (i8 2), <2 x i8> %214, !dbg !114
  %216 = select <2 x i1> %178, <2 x i8> splat (i8 3), <2 x i8> %215, !dbg !115
  %217 = select <2 x i1> %185, <2 x i8> splat (i8 4), <2 x i8> %216, !dbg !116
  %218 = select <2 x i1> %192, <2 x i8> splat (i8 5), <2 x i8> %217, !dbg !117
  %219 = select <2 x i1> %199, <2 x i8> splat (i8 6), <2 x i8> %218, !dbg !118
  %220 = select <2 x i1> %206, <2 x i8> splat (i8 7), <2 x i8> %219, !dbg !119
  %221 = select <2 x i1> %213, <2 x i8> splat (i8 8), <2 x i8> %220, !dbg !120
  %222 = bitcast i32 %148 to float, !dbg !121
  %223 = fcmp uno float %222, 0.000000e+00, !dbg !121
  %224 = extractelement <2 x i1> %213, i64 1, !dbg !122
  %225 = or i1 %223, %224, !dbg !122
  %226 = extractelement <2 x float> %209, i64 1, !dbg !123
  %227 = select i1 %225, float %222, float %226, !dbg !123
  %228 = bitcast i32 %157 to float, !dbg !121
  %229 = fcmp uno float %228, 0.000000e+00, !dbg !121
  %230 = extractelement <2 x i1> %213, i64 0, !dbg !122
  %231 = or i1 %229, %230, !dbg !122
  %232 = extractelement <2 x float> %209, i64 0, !dbg !123
  %233 = select i1 %231, float %228, float %232, !dbg !123
  %234 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %235 = bitcast i32 %234 to float, !dbg !26
  %236 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %237 = bitcast i32 %236 to float, !dbg !26
  %238 = extractvalue { i32, i32 } %35, 1, !dbg !24
  %239 = bitcast i32 %238 to float, !dbg !24
  %240 = extractvalue { i32, i32 } %35, 0, !dbg !24
  %241 = bitcast i32 %240 to float, !dbg !24
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !124
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !124
  %244 = fmul float %139, %242, !dbg !125
  %245 = fmul float %131, %243, !dbg !125
  %246 = fmul float %244, %241, !dbg !126
  %247 = fmul float %245, %239, !dbg !126
  %248 = fadd float %246, %237, !dbg !127
  %249 = fadd float %247, %235, !dbg !127
  %250 = fadd float %233, %248, !dbg !128
  %251 = fadd float %227, %249, !dbg !128
  %252 = fcmp olt float %250, 0.000000e+00, !dbg !129
  %253 = fcmp olt float %251, 0.000000e+00, !dbg !129
  %254 = select i1 %252, float 0.000000e+00, float %250, !dbg !131
  %255 = select i1 %253, float 0.000000e+00, float %251, !dbg !131
  %256 = getelementptr i8, ptr addrspace(1) %8, i64 %20, !dbg !132
  %257 = bitcast <2 x i8> %221 to i16, !dbg !133
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %257, ptr addrspace(1) %256, i1 true) #3, !dbg !133
  %258 = bitcast float %136 to i32, !dbg !134
  %259 = bitcast float %128 to i32, !dbg !134
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %258, i32 %259, ptr addrspace(1) %21, i1 true) #3, !dbg !134
  %260 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !135
  %261 = bitcast float %254 to i32, !dbg !136
  %262 = bitcast float %255 to i32, !dbg !136
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %261, i32 %262, ptr addrspace(1) %260, i1 true) #3, !dbg !136
  %263 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !137
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %261, i32 %262, ptr addrspace(1) %263, i1 true) #3, !dbg !138
  %264 = getelementptr float, ptr addrspace(1) %10, i64 %20, !dbg !139
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %261, i32 %262, ptr addrspace(1) %264, i1 true) #3, !dbg !140
  ret void, !dbg !141
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ze6swlpyn23y6pixsnpobajf5jz2kfa465a2hklduyrezydpo6.py", directory: "inductor_cache/3z")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 35, scope: !7)
!16 = !DILocation(line: 28, column: 40, scope: !7)
!17 = !DILocation(line: 29, column: 31, scope: !7)
!18 = !DILocation(line: 29, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 45, column: 42, scope: !7)
!28 = !DILocation(line: 45, column: 31, scope: !7)
!29 = !DILocation(line: 51, column: 42, scope: !7)
!30 = !DILocation(line: 51, column: 31, scope: !7)
!31 = !DILocation(line: 58, column: 42, scope: !7)
!32 = !DILocation(line: 58, column: 31, scope: !7)
!33 = !DILocation(line: 65, column: 40, scope: !7)
!34 = !DILocation(line: 65, column: 31, scope: !7)
!35 = !DILocation(line: 68, column: 31, scope: !7)
!36 = !DILocation(line: 71, column: 37, scope: !7)
!37 = !DILocation(line: 71, column: 31, scope: !7)
!38 = !DILocation(line: 24, column: 21, scope: !7)
!39 = !DILocation(line: 24, column: 30, scope: !7)
!40 = !DILocation(line: 67, column: 20, scope: !7)
!41 = !DILocation(line: 36, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 47, scope: !7)
!45 = !DILocation(line: 47, column: 21, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 47, scope: !7)
!48 = !DILocation(line: 76, column: 20, scope: !7)
!49 = !DILocation(line: 83, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 19, scope: !7)
!52 = !DILocation(line: 58, column: 47, scope: !7)
!53 = !DILocation(line: 61, column: 21, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 45, scope: !7)
!56 = !DILocation(line: 68, column: 36, scope: !7)
!57 = !DILocation(line: 70, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 42, scope: !7)
!59 = !DILocation(line: 77, column: 20, scope: !7)
!60 = !DILocation(line: 78, column: 39, scope: !7)
!61 = !DILocation(line: 78, column: 31, scope: !7)
!62 = !DILocation(line: 78, column: 44, scope: !7)
!63 = !DILocation(line: 80, column: 20, scope: !7)
!64 = !DILocation(line: 81, column: 39, scope: !7)
!65 = !DILocation(line: 81, column: 31, scope: !7)
!66 = !DILocation(line: 81, column: 44, scope: !7)
!67 = !DILocation(line: 84, column: 39, scope: !7)
!68 = !DILocation(line: 84, column: 31, scope: !7)
!69 = !DILocation(line: 84, column: 44, scope: !7)
!70 = !DILocation(line: 114, column: 20, scope: !7)
!71 = !DILocation(line: 115, column: 27, scope: !7)
!72 = !DILocation(line: 111, column: 20, scope: !7)
!73 = !DILocation(line: 112, column: 20, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 52, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 59, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 66, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 69, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 72, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 79, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 82, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 85, column: 42, scope: !7)
!113 = !DILocation(line: 89, column: 35, scope: !7)
!114 = !DILocation(line: 92, column: 35, scope: !7)
!115 = !DILocation(line: 95, column: 35, scope: !7)
!116 = !DILocation(line: 98, column: 35, scope: !7)
!117 = !DILocation(line: 101, column: 35, scope: !7)
!118 = !DILocation(line: 104, column: 35, scope: !7)
!119 = !DILocation(line: 107, column: 35, scope: !7)
!120 = !DILocation(line: 110, column: 35, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!122 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!123 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!124 = !DILocation(line: 117, column: 20, scope: !7)
!125 = !DILocation(line: 120, column: 20, scope: !7)
!126 = !DILocation(line: 121, column: 20, scope: !7)
!127 = !DILocation(line: 122, column: 20, scope: !7)
!128 = !DILocation(line: 123, column: 20, scope: !7)
!129 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !130)
!130 = !DILocation(line: 125, column: 42, scope: !7)
!131 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !130)
!132 = !DILocation(line: 134, column: 25, scope: !7)
!133 = !DILocation(line: 134, column: 37, scope: !7)
!134 = !DILocation(line: 135, column: 40, scope: !7)
!135 = !DILocation(line: 136, column: 28, scope: !7)
!136 = !DILocation(line: 136, column: 40, scope: !7)
!137 = !DILocation(line: 137, column: 25, scope: !7)
!138 = !DILocation(line: 137, column: 38, scope: !7)
!139 = !DILocation(line: 138, column: 25, scope: !7)
!140 = !DILocation(line: 138, column: 38, scope: !7)
!141 = !DILocation(line: 138, column: 4, scope: !7)
