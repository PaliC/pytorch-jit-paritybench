; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__log_softmax__softmax_add_div_mean_mul_neg_reciprocal_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = and i32 %8, 252, !dbg !11
  %10 = zext nneg i32 %9 to i64, !dbg !12
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !12
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !13
  %13 = bitcast i32 %12 to float, !dbg !13
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #4, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %3, i64 %10, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = or disjoint i32 %9, 1, !dbg !18
  %21 = zext nneg i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #4, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = or disjoint i32 %9, 2, !dbg !25
  %32 = zext nneg i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !29
  %38 = bitcast i32 %37 to float, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !31
  %41 = bitcast i32 %40 to float, !dbg !31
  %42 = or disjoint i32 %9, 3, !dbg !32
  %43 = zext nneg i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !34
  %46 = bitcast i32 %45 to float, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !36
  %49 = bitcast i32 %48 to float, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !38
  %52 = bitcast i32 %51 to float, !dbg !38
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %10, !dbg !39
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !40
  %55 = bitcast i32 %54 to float, !dbg !40
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !41
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !42
  %58 = bitcast i32 %57 to float, !dbg !42
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !43
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !44
  %61 = bitcast i32 %60 to float, !dbg !44
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !45
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !46
  %64 = bitcast i32 %63 to float, !dbg !46
  %65 = fadd float %16, -1.000000e+00, !dbg !47
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %65) #4, !dbg !48
  %67 = fmul float %66, 3.000000e+00, !dbg !49
  %68 = fmul float %67, %19, !dbg !50
  %69 = fsub float 4.000000e+00, %68, !dbg !51
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %13, float %69) #4, !dbg !52
  %71 = fadd float %27, -1.000000e+00, !dbg !53
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %71) #4, !dbg !54
  %73 = fmul float %72, 3.000000e+00, !dbg !55
  %74 = fmul float %73, %30, !dbg !56
  %75 = fsub float 4.000000e+00, %74, !dbg !57
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %24, float %75) #4, !dbg !58
  %77 = fcmp ogt float %70, %76, !dbg !59
  %78 = fcmp uno float %70, 0.000000e+00, !dbg !63
  %79 = or i1 %78, %77, !dbg !64
  %80 = select i1 %79, float %70, float %76, !dbg !65
  %81 = fadd float %38, -1.000000e+00, !dbg !66
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #4, !dbg !67
  %83 = fmul float %82, 3.000000e+00, !dbg !68
  %84 = fmul float %83, %41, !dbg !69
  %85 = fsub float 4.000000e+00, %84, !dbg !70
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %85) #4, !dbg !71
  %87 = fcmp ogt float %80, %86, !dbg !72
  %88 = fcmp uno float %80, 0.000000e+00, !dbg !74
  %89 = or i1 %87, %88, !dbg !75
  %90 = select i1 %89, float %80, float %86, !dbg !76
  %91 = fadd float %49, -1.000000e+00, !dbg !77
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #4, !dbg !78
  %93 = fmul float %92, 3.000000e+00, !dbg !79
  %94 = fmul float %93, %52, !dbg !80
  %95 = fsub float 4.000000e+00, %94, !dbg !81
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float %95) #4, !dbg !82
  %97 = fcmp ogt float %90, %96, !dbg !83
  %98 = fcmp uno float %90, 0.000000e+00, !dbg !85
  %99 = or i1 %97, %98, !dbg !86
  %100 = select i1 %99, float %90, float %96, !dbg !87
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %69) #4, !dbg !88
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %75) #4, !dbg !89
  %103 = fcmp ogt float %101, %102, !dbg !90
  %104 = fcmp uno float %101, 0.000000e+00, !dbg !92
  %105 = or i1 %104, %103, !dbg !93
  %106 = select i1 %105, float %101, float %102, !dbg !94
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %85) #4, !dbg !95
  %108 = fcmp ogt float %106, %107, !dbg !96
  %109 = fcmp uno float %106, 0.000000e+00, !dbg !98
  %110 = or i1 %108, %109, !dbg !99
  %111 = select i1 %110, float %106, float %107, !dbg !100
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %95) #4, !dbg !101
  %113 = fcmp ogt float %111, %112, !dbg !102
  %114 = fcmp uno float %111, 0.000000e+00, !dbg !104
  %115 = or i1 %113, %114, !dbg !105
  %116 = select i1 %115, float %111, float %112, !dbg !106
  %117 = fsub float %101, %116, !dbg !107
  %118 = fmul float %117, 0x3FF7154760000000, !dbg !108
  %119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %118) #4, !dbg !108
  %120 = fsub float %102, %116, !dbg !109
  %121 = fmul float %120, 0x3FF7154760000000, !dbg !110
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #4, !dbg !110
  %123 = fadd float %119, %122, !dbg !111
  %124 = fsub float %107, %116, !dbg !112
  %125 = fmul float %124, 0x3FF7154760000000, !dbg !113
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #4, !dbg !113
  %127 = fadd float %123, %126, !dbg !114
  %128 = fsub float %112, %116, !dbg !115
  %129 = fmul float %128, 0x3FF7154760000000, !dbg !116
  %130 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %129) #4, !dbg !116
  %131 = fadd float %127, %130, !dbg !117
  %132 = fsub float %70, %100, !dbg !118
  %133 = fmul float %132, 0x3FF7154760000000, !dbg !119
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #4, !dbg !119
  %135 = fsub float %76, %100, !dbg !120
  %136 = fmul float %135, 0x3FF7154760000000, !dbg !121
  %137 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %136) #4, !dbg !121
  %138 = fadd float %134, %137, !dbg !122
  %139 = fsub float %86, %100, !dbg !123
  %140 = fmul float %139, 0x3FF7154760000000, !dbg !124
  %141 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %140) #4, !dbg !124
  %142 = fadd float %138, %141, !dbg !125
  %143 = fsub float %96, %100, !dbg !126
  %144 = fmul float %143, 0x3FF7154760000000, !dbg !127
  %145 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %144) #4, !dbg !127
  %146 = fadd float %142, %145, !dbg !128
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %131) #4, !dbg !129
  %148 = fcmp olt float %146, 0x3810000000000000, !dbg !130
  %149 = fmul float %146, 0x4160000000000000, !dbg !130
  %.02.i = select i1 %148, float %149, float %146, !dbg !130
  %i.i.0.i = select i1 %148, float -2.300000e+01, float 0.000000e+00, !dbg !130
  %150 = bitcast float %.02.i to i32, !dbg !130
  %151 = add i32 %150, -1059760811, !dbg !130
  %152 = and i32 %151, -8388608, !dbg !130
  %153 = sub i32 %150, %152, !dbg !130
  %154 = bitcast i32 %153 to float, !dbg !130
  %155 = sitofp i32 %152 to float, !dbg !130
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not.i = icmp eq i32 %156, 0, !dbg !130
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %155, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !130
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %155, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !130
  %.08.i = select i1 %.not.i, float %158, float %157, !dbg !130
  %159 = fadd float %154, -1.000000e+00, !dbg !130
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not1.i = icmp eq i32 %160, 0, !dbg !130
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %159, float 0x3FC2073EC0000000) #4, !dbg !130
  %162 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %159, float 0x3FC2073EC0000000) #4, !dbg !130
  %.010.i = select i1 %.not1.i, float %162, float %161, !dbg !130
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not2.i = icmp eq i32 %163, 0, !dbg !130
  %164 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %159, float 0xBFBF19B980000000) #4, !dbg !130
  %165 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %159, float 0xBFBF19B980000000) #4, !dbg !130
  %.011.i = select i1 %.not2.i, float %165, float %164, !dbg !130
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not3.i = icmp eq i32 %166, 0, !dbg !130
  %167 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %159, float 0x3FC1E52AA0000000) #4, !dbg !130
  %168 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %159, float 0x3FC1E52AA0000000) #4, !dbg !130
  %.012.i = select i1 %.not3.i, float %168, float %167, !dbg !130
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not4.i = icmp eq i32 %169, 0, !dbg !130
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %159, float 0xBFC55B1720000000) #4, !dbg !130
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %159, float 0xBFC55B1720000000) #4, !dbg !130
  %.09.i = select i1 %.not4.i, float %171, float %170, !dbg !130
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not5.i = icmp eq i32 %172, 0, !dbg !130
  %173 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %159, float 0x3FC99DA160000000) #4, !dbg !130
  %174 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %159, float 0x3FC99DA160000000) #4, !dbg !130
  %.05.i = select i1 %.not5.i, float %174, float %173, !dbg !130
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not6.i = icmp eq i32 %175, 0, !dbg !130
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %159, float 0xBFCFFFE440000000) #4, !dbg !130
  %177 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %159, float 0xBFCFFFE440000000) #4, !dbg !130
  %.01.i = select i1 %.not6.i, float %177, float %176, !dbg !130
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not7.i = icmp eq i32 %178, 0, !dbg !130
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %159, float 0x3FD5554F00000000) #4, !dbg !130
  %180 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %159, float 0x3FD5554F00000000) #4, !dbg !130
  %.0.i = select i1 %.not7.i, float %180, float %179, !dbg !130
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not8.i = icmp eq i32 %181, 0, !dbg !130
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %159, float -5.000000e-01) #4, !dbg !130
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %159, float -5.000000e-01) #4, !dbg !130
  %.07.i = select i1 %.not8.i, float %183, float %182, !dbg !130
  %184 = fmul float %159, %.07.i, !dbg !130
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not9.i = icmp eq i32 %185, 0, !dbg !130
  %186 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %184, float %159, float %159) #4, !dbg !130
  %187 = tail call float @llvm.nvvm.fma.rn.f(float %184, float %159, float %159) #4, !dbg !130
  %.06.i = select i1 %.not9.i, float %187, float %186, !dbg !130
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not10.i = icmp eq i32 %188, 0, !dbg !130
  %189 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !130
  %190 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !130
  %.04.i = select i1 %.not10.i, float %190, float %189, !dbg !130
  %191 = icmp ugt i32 %150, 2139095039, !dbg !130
  br i1 %191, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !130

__nv_fmaf_rn.exit.i.i:                            ; preds = %6
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !130
  %.not11.i = icmp eq i32 %192, 0, !dbg !130
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !130
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !130
  %.03.i = select i1 %.not11.i, float %194, float %193, !dbg !130
  br label %__nv_logf.exit, !dbg !130

__nv_logf.exit:                                   ; preds = %6, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %6 ], !dbg !130
  %195 = lshr i32 %7, 5, !dbg !10
  %196 = and i32 %7, 31, !dbg !10
  %197 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !130
  %r.i.1.i = select i1 %197, float 0xFFF0000000000000, float %r.i.0.i, !dbg !130
  %198 = fsub float %132, %r.i.1.i, !dbg !131
  %199 = fmul float %147, %198, !dbg !132
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %131) #4, !dbg !133
  %201 = fsub float %135, %r.i.1.i, !dbg !134
  %202 = fmul float %200, %201, !dbg !135
  %203 = fadd float %199, %202, !dbg !136
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %131) #4, !dbg !137
  %205 = fsub float %139, %r.i.1.i, !dbg !138
  %206 = fmul float %204, %205, !dbg !139
  %207 = fadd float %206, %203, !dbg !140
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %131) #4, !dbg !141
  %209 = fsub float %143, %r.i.1.i, !dbg !142
  %210 = fmul float %209, %208, !dbg !143
  %211 = fadd float %210, %207, !dbg !144
  %212 = bitcast float %211 to i32, !dbg !145
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 16, i32 31), !dbg !145
  %214 = bitcast i32 %213 to float, !dbg !145
  %215 = fadd float %211, %214, !dbg !149
  %216 = bitcast float %215 to i32, !dbg !145
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !145
  %218 = bitcast i32 %217 to float, !dbg !145
  %219 = fadd float %215, %218, !dbg !149
  %220 = bitcast float %219 to i32, !dbg !145
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !145
  %222 = bitcast i32 %221 to float, !dbg !145
  %223 = fadd float %219, %222, !dbg !149
  %224 = bitcast float %223 to i32, !dbg !145
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !145
  %226 = bitcast i32 %225 to float, !dbg !145
  %227 = fadd float %223, %226, !dbg !149
  %228 = bitcast float %227 to i32, !dbg !145
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !145
  %230 = bitcast i32 %229 to float, !dbg !145
  %231 = fadd float %227, %230, !dbg !149
  %232 = icmp eq i32 %196, 0, !dbg !145
  %233 = and i32 %195, 1, !dbg !145
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !145
  %235 = bitcast float %231 to <1 x i32>, !dbg !145
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 %232) #4, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %236 = icmp slt i32 %7, 2, !dbg !145
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !145
  %238 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %237, i1 %236) #4, !dbg !145
  %239 = bitcast i32 %238 to float, !dbg !145
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 1, i32 31), !dbg !145
  %241 = bitcast i32 %240 to float, !dbg !145
  %242 = fadd float %239, %241, !dbg !149
  %243 = and i32 %7, 1, !dbg !145
  %244 = icmp eq i32 %243, 0, !dbg !145
  %245 = and i1 %236, %244, !dbg !145
  %246 = bitcast float %242 to <1 x i32>, !dbg !145
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %246, i1 %245) #4, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %247 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !145
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float 6.400000e+01) #4, !dbg !151
  %249 = fsub float 0.000000e+00, %248, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %urem = and i32 %7, 63, !dbg !154
  %250 = icmp eq i32 %urem, 0, !dbg !154
  %251 = bitcast float %249 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %0, i1 %250) #4, !dbg !154
  ret void, !dbg !155
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmflxplyme3z2jdejquyxn6bqxoa26mfxvp33zuwqmkgxg24lw2s.py", directory: "inductor_cache/mf")
!4 = !{ptr @triton_per_fused__log_softmax__softmax_add_div_mean_mul_neg_reciprocal_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__log_softmax__softmax_add_div_mean_mul_neg_reciprocal_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__log_softmax__softmax_add_div_mean_mul_neg_reciprocal_sub_sum_0", linkageName: "triton_per_fused__log_softmax__softmax_add_div_mean_mul_neg_reciprocal_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 32, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 37, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 37, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 42, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 42, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 42, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 42, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 42, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 42, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 38, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 42, scope: !7)
!43 = !DILocation(line: 44, column: 31, scope: !7)
!44 = !DILocation(line: 44, column: 42, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 42, scope: !7)
!47 = !DILocation(line: 47, column: 18, scope: !7)
!48 = !DILocation(line: 49, column: 18, scope: !7)
!49 = !DILocation(line: 51, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 18, scope: !7)
!51 = !DILocation(line: 54, column: 19, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 19, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 62, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 64, column: 19, scope: !7)
!68 = !DILocation(line: 65, column: 20, scope: !7)
!69 = !DILocation(line: 66, column: 20, scope: !7)
!70 = !DILocation(line: 67, column: 20, scope: !7)
!71 = !DILocation(line: 68, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !73)
!73 = !DILocation(line: 69, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !73)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 19, scope: !7)
!79 = !DILocation(line: 72, column: 20, scope: !7)
!80 = !DILocation(line: 73, column: 20, scope: !7)
!81 = !DILocation(line: 74, column: 20, scope: !7)
!82 = !DILocation(line: 75, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !84)
!84 = !DILocation(line: 76, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !84)
!88 = !DILocation(line: 77, column: 20, scope: !7)
!89 = !DILocation(line: 78, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !91)
!91 = !DILocation(line: 79, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !91)
!95 = !DILocation(line: 80, column: 20, scope: !7)
!96 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !97)
!97 = !DILocation(line: 81, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !97)
!101 = !DILocation(line: 82, column: 20, scope: !7)
!102 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !103)
!103 = !DILocation(line: 83, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !60, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !60, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !103)
!107 = !DILocation(line: 84, column: 20, scope: !7)
!108 = !DILocation(line: 85, column: 24, scope: !7)
!109 = !DILocation(line: 86, column: 20, scope: !7)
!110 = !DILocation(line: 87, column: 24, scope: !7)
!111 = !DILocation(line: 88, column: 20, scope: !7)
!112 = !DILocation(line: 89, column: 20, scope: !7)
!113 = !DILocation(line: 90, column: 24, scope: !7)
!114 = !DILocation(line: 91, column: 20, scope: !7)
!115 = !DILocation(line: 92, column: 20, scope: !7)
!116 = !DILocation(line: 93, column: 24, scope: !7)
!117 = !DILocation(line: 94, column: 20, scope: !7)
!118 = !DILocation(line: 95, column: 20, scope: !7)
!119 = !DILocation(line: 96, column: 24, scope: !7)
!120 = !DILocation(line: 97, column: 20, scope: !7)
!121 = !DILocation(line: 98, column: 24, scope: !7)
!122 = !DILocation(line: 99, column: 20, scope: !7)
!123 = !DILocation(line: 100, column: 20, scope: !7)
!124 = !DILocation(line: 101, column: 24, scope: !7)
!125 = !DILocation(line: 102, column: 20, scope: !7)
!126 = !DILocation(line: 103, column: 20, scope: !7)
!127 = !DILocation(line: 104, column: 24, scope: !7)
!128 = !DILocation(line: 105, column: 20, scope: !7)
!129 = !DILocation(line: 106, column: 20, scope: !7)
!130 = !DILocation(line: 107, column: 24, scope: !7)
!131 = !DILocation(line: 108, column: 20, scope: !7)
!132 = !DILocation(line: 109, column: 20, scope: !7)
!133 = !DILocation(line: 110, column: 20, scope: !7)
!134 = !DILocation(line: 111, column: 20, scope: !7)
!135 = !DILocation(line: 112, column: 20, scope: !7)
!136 = !DILocation(line: 113, column: 20, scope: !7)
!137 = !DILocation(line: 114, column: 20, scope: !7)
!138 = !DILocation(line: 115, column: 20, scope: !7)
!139 = !DILocation(line: 116, column: 20, scope: !7)
!140 = !DILocation(line: 117, column: 20, scope: !7)
!141 = !DILocation(line: 118, column: 20, scope: !7)
!142 = !DILocation(line: 119, column: 20, scope: !7)
!143 = !DILocation(line: 120, column: 20, scope: !7)
!144 = !DILocation(line: 121, column: 20, scope: !7)
!145 = !DILocation(line: 267, column: 36, scope: !146, inlinedAt: !148)
!146 = distinct !DILexicalBlockFile(scope: !7, file: !147, discriminator: 0)
!147 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!148 = !DILocation(line: 123, column: 26, scope: !7)
!149 = !DILocation(line: 256, column: 15, scope: !150, inlinedAt: !148)
!150 = distinct !DILexicalBlockFile(scope: !146, file: !147, discriminator: 0)
!151 = !DILocation(line: 125, column: 20, scope: !7)
!152 = !DILocation(line: 126, column: 13, scope: !7)
!153 = !DILocation(line: 127, column: 4, scope: !7)
!154 = !DILocation(line: 128, column: 71, scope: !7)
!155 = !DILocation(line: 128, column: 4, scope: !7)
