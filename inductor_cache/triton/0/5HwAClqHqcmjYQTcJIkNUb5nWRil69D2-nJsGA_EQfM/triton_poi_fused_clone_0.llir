; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 1, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = and i32 %7, 1, !dbg !12
  %11 = shl nuw nsw i32 %10, 1, !dbg !12
  %12 = shl i32 %7, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = or disjoint i32 %6, %9, !dbg !13
  %15 = or disjoint i32 %6, %13, !dbg !13
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %.lobit12 = lshr i32 %7, 3, !dbg !17
  %20 = and i32 %.lobit12, 3, !dbg !17
  %21 = or disjoint i32 %19, %11, !dbg !18
  %22 = or disjoint i32 %19, %20, !dbg !18
  %23 = icmp slt i32 %21, 4, !dbg !19
  %24 = icmp slt i32 %22, 4, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %25 = sdiv i32 %.frozen, 4, !dbg !20
  %26 = mul i32 %25, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %27 = shl i32 %14, 4, !dbg !22
  %28 = add i32 %21, %27, !dbg !23
  %29 = sext i32 %28 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = and i1 %16, %23, !dbg !25
  %32 = and i1 %17, %24, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #2, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = bitcast i32 %34 to float, !dbg !26
  %37 = bitcast i32 %35 to float, !dbg !26
  %38 = add i32 %21, 4, !dbg !27
  %39 = add i32 %38, %27, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %31) #2, !dbg !30
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !30
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !30
  %45 = bitcast i32 %43 to float, !dbg !30
  %46 = bitcast i32 %44 to float, !dbg !30
  %47 = add i32 %21, 8, !dbg !31
  %48 = add i32 %47, %27, !dbg !32
  %49 = sext i32 %48 to i64, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !33
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %31) #2, !dbg !34
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !34
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !34
  %54 = bitcast i32 %52 to float, !dbg !34
  %55 = bitcast i32 %53 to float, !dbg !34
  %56 = add i32 %21, 12, !dbg !35
  %57 = add i32 %56, %27, !dbg !36
  %58 = sext i32 %57 to i64, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !37
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %31) #2, !dbg !38
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !38
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !38
  %63 = bitcast i32 %61 to float, !dbg !38
  %64 = bitcast i32 %62 to float, !dbg !38
  %65 = fcmp ogt float %45, %36, !dbg !39
  %66 = fcmp ogt float %46, %37, !dbg !39
  %67 = fcmp uno float %45, 0.000000e+00, !dbg !43
  %68 = fcmp uno float %46, 0.000000e+00, !dbg !43
  %69 = or i1 %65, %67, !dbg !44
  %70 = or i1 %66, %68, !dbg !44
  %71 = select i1 %69, float %45, float %36, !dbg !45
  %72 = select i1 %70, float %46, float %37, !dbg !45
  %73 = fcmp olt float %71, %54, !dbg !46
  %74 = fcmp olt float %72, %55, !dbg !46
  %75 = fcmp uno float %54, 0.000000e+00, !dbg !48
  %76 = fcmp uno float %55, 0.000000e+00, !dbg !48
  %77 = or i1 %75, %73, !dbg !49
  %78 = or i1 %76, %74, !dbg !49
  %79 = select i1 %77, float %54, float %71, !dbg !50
  %80 = select i1 %78, float %55, float %72, !dbg !50
  %81 = fcmp olt float %79, %63, !dbg !51
  %82 = fcmp olt float %80, %64, !dbg !51
  %83 = fcmp uno float %63, 0.000000e+00, !dbg !53
  %84 = fcmp uno float %64, 0.000000e+00, !dbg !53
  %85 = or i1 %83, %81, !dbg !54
  %86 = or i1 %84, %82, !dbg !54
  %87 = shl i32 %22, 2, !dbg !55
  %88 = add i32 %87, %.decomposed, !dbg !56
  %89 = shl i32 %25, 4, !dbg !57
  %90 = add i32 %88, %89, !dbg !58
  %91 = sext i32 %90 to i64, !dbg !59
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !59
  %93 = shl nuw nsw i32 %10, 5, !dbg !60
  %94 = or disjoint i32 %93, %9, !dbg !60
  %95 = and i32 %12, 62, !dbg !60
  %.idx = shl nuw nsw i32 %10, 4, !dbg !60
  %96 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !60
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %94, !dbg !60
  %98 = bitcast float %79 to i32, !dbg !60
  %99 = select i1 %85, i32 %61, i32 %98, !dbg !61
  %100 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %100, i1 true) #2, !dbg !60
  %101 = or disjoint i32 %94, 16, !dbg !60
  %102 = lshr i32 %101, 3, !dbg !60
  %103 = and i32 %102, 6, !dbg !60
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !60
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %101, !dbg !60
  %106 = bitcast float %80 to i32, !dbg !60
  %107 = select i1 %86, i32 %62, i32 %106, !dbg !61
  %108 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %108, i1 true) #2, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %109 = lshr i32 %12, 3, !dbg !60
  %110 = and i32 %109, 6, !dbg !60
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !60
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %95, !dbg !60
  %.extract = load i32, ptr addrspace(3) %112, align 8, !dbg !60
  %113 = getelementptr inbounds i8, ptr addrspace(3) %112, i32 4, !dbg !60
  %.extract4 = load i32, ptr addrspace(3) %113, align 4, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %92, i1 %32) #2, !dbg !60
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3mcdxfeyvy5gkfl5y4abjyojuz36igniidhpsjehwshrwqiwsh.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_poi_fused_clone_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_0", linkageName: "triton_poi_fused_clone_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 34, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 47, scope: !7)
!31 = !DILocation(line: 34, column: 34, scope: !7)
!32 = !DILocation(line: 34, column: 39, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 47, scope: !7)
!35 = !DILocation(line: 35, column: 35, scope: !7)
!36 = !DILocation(line: 35, column: 40, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 48, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 36, column: 40, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !47)
!47 = !DILocation(line: 37, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !52)
!52 = !DILocation(line: 38, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !52)
!55 = !DILocation(line: 39, column: 32, scope: !7)
!56 = !DILocation(line: 39, column: 30, scope: !7)
!57 = !DILocation(line: 39, column: 40, scope: !7)
!58 = !DILocation(line: 39, column: 37, scope: !7)
!59 = !DILocation(line: 39, column: 25, scope: !7)
!60 = !DILocation(line: 39, column: 51, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !52)
!62 = !DILocation(line: 39, column: 4, scope: !7)
