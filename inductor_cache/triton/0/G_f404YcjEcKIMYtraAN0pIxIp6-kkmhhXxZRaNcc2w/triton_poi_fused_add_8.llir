; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = icmp slt i32 %12, 256, !dbg !14
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %20, 1, !dbg !17
  %21 = or disjoint i32 %19, %.lobit, !dbg !18
  %22 = or disjoint i32 %21, 2, !dbg !18
  %23 = icmp slt i32 %21, 4, !dbg !19
  %24 = icmp slt i32 %22, 4, !dbg !19
  %25 = icmp slt i32 %19, 4, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %26 = sdiv i32 %.frozen, 64, !dbg !20
  %27 = mul i32 %26, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = shl i32 %21, 6, !dbg !22
  %29 = shl i32 %22, 6, !dbg !22
  %30 = shl i32 %26, 8, !dbg !23
  %31 = add i32 %30, %.decomposed, !dbg !24
  %32 = add i32 %31, %28, !dbg !25
  %33 = add i32 %31, %29, !dbg !25
  %34 = sext i32 %32 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %36 = sext i32 %33 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = and i1 %15, %23, !dbg !27
  %39 = and i1 %24, %15, !dbg !27
  %40 = and i1 %25, %16, !dbg !27
  %41 = and i1 %17, %25, !dbg !27
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %52 = shl i32 %8, 4, !dbg !28
  %53 = and i32 %52, 1008, !dbg !28
  %54 = or disjoint i32 %53, %.lobit, !dbg !28
  %55 = and i32 %9, 508, !dbg !28
  %56 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %53, !dbg !28
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %54, !dbg !28
  %58 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !28
  %59 = or disjoint i32 %54, 4, !dbg !28
  %60 = lshr i32 %59, 2, !dbg !28
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !28
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %59, !dbg !28
  %63 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !28
  %64 = or disjoint i32 %54, 8, !dbg !28
  %65 = lshr i32 %64, 2, !dbg !28
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !28
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %64, !dbg !28
  %68 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !28
  %69 = or disjoint i32 %54, 12, !dbg !28
  %70 = lshr i32 %69, 2, !dbg !28
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !28
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !28
  %73 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !28
  %74 = or disjoint i32 %54, 2, !dbg !28
  %75 = getelementptr float, ptr addrspace(3) %56, i32 %74, !dbg !28
  %76 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !28
  %77 = or disjoint i32 %54, 6, !dbg !28
  %78 = lshr i32 %77, 2, !dbg !28
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !28
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !28
  %81 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !28
  %82 = or disjoint i32 %54, 10, !dbg !28
  %83 = lshr i32 %82, 2, !dbg !28
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !28
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !28
  %86 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !28
  %87 = or disjoint i32 %54, 14, !dbg !28
  %88 = lshr i32 %87, 2, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !28
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !28
  %91 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %92 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !28
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %55, !dbg !28
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !28
  %95 = or disjoint i32 %55, 1, !dbg !28
  %96 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %95, !dbg !28
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !28
  %98 = or disjoint i32 %55, 2, !dbg !28
  %99 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %98, !dbg !28
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !28
  %101 = or disjoint i32 %55, 3, !dbg !28
  %102 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %101, !dbg !28
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !28
  %104 = or disjoint i32 %55, 512, !dbg !28
  %105 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %104, !dbg !28
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %104, !dbg !28
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !28
  %108 = or disjoint i32 %55, 513, !dbg !28
  %109 = lshr i32 %108, 2, !dbg !28
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !28
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !28
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !28
  %113 = or disjoint i32 %55, 514, !dbg !28
  %114 = lshr i32 %113, 2, !dbg !28
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !28
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %113, !dbg !28
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !28
  %118 = or disjoint i32 %55, 515, !dbg !28
  %119 = lshr i32 %118, 2, !dbg !28
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !28
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118, !dbg !28
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !28
  %123 = add i32 %13, %18, !dbg !29
  %124 = shl i32 %123, 2, !dbg !29
  %125 = add i32 %18, %14, !dbg !29
  %126 = shl i32 %125, 2, !dbg !29
  %127 = sext i32 %124 to i64, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !30
  %129 = sext i32 %126 to i64, !dbg !30
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !30
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %40) #2, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !31
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !31
  %136 = bitcast i32 %132 to float, !dbg !31
  %137 = bitcast i32 %133 to float, !dbg !31
  %138 = bitcast i32 %134 to float, !dbg !31
  %139 = bitcast i32 %135 to float, !dbg !31
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %41) #2, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !31
  %145 = bitcast i32 %141 to float, !dbg !31
  %146 = bitcast i32 %142 to float, !dbg !31
  %147 = bitcast i32 %143 to float, !dbg !31
  %148 = bitcast i32 %144 to float, !dbg !31
  %149 = sext i32 %19 to i64, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !32
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %25) #2, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !33
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !33
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !33
  %156 = bitcast i32 %152 to float, !dbg !33
  %157 = bitcast i32 %153 to float, !dbg !33
  %158 = bitcast i32 %154 to float, !dbg !33
  %159 = bitcast i32 %155 to float, !dbg !33
  %160 = fadd float %136, %156, !dbg !34
  %161 = fadd float %137, %157, !dbg !34
  %162 = fadd float %138, %158, !dbg !34
  %163 = fadd float %139, %159, !dbg !34
  %164 = fadd float %145, %156, !dbg !34
  %165 = fadd float %146, %157, !dbg !34
  %166 = fadd float %147, %158, !dbg !34
  %167 = fadd float %148, %159, !dbg !34
  %168 = fadd float %94, %160, !dbg !35
  %169 = fadd float %97, %161, !dbg !35
  %170 = fadd float %100, %162, !dbg !35
  %171 = fadd float %103, %163, !dbg !35
  %172 = fadd float %107, %164, !dbg !35
  %173 = fadd float %112, %165, !dbg !35
  %174 = fadd float %117, %166, !dbg !35
  %175 = fadd float %122, %167, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %176 = bitcast float %168 to i32, !dbg !37
  %177 = bitcast float %169 to i32, !dbg !37
  %178 = bitcast float %170 to i32, !dbg !37
  %179 = bitcast float %171 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %128, i1 %40) #2, !dbg !37
  %180 = bitcast float %172 to i32, !dbg !37
  %181 = bitcast float %173 to i32, !dbg !37
  %182 = bitcast float %174 to i32, !dbg !37
  %183 = bitcast float %175 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %130, i1 %41) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py", directory: "inductor_cache/fg")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 34, scope: !7)
!31 = !DILocation(line: 33, column: 46, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
!37 = !DILocation(line: 38, column: 46, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
