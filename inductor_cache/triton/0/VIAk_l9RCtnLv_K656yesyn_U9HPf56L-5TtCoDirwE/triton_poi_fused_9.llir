; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 32, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = lshr i32 %7, 4, !dbg !17
  %22 = and i32 %21, 7, !dbg !17
  %23 = or disjoint i32 %20, %11, !dbg !18
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %24, 8, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !19
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %29 = shl i32 %13, 4, !dbg !20
  %30 = shl i32 %14, 4, !dbg !20
  %31 = add i32 %23, %29, !dbg !21
  %32 = add i32 %23, %30, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = and i1 %16, %26, !dbg !23
  %38 = and i1 %17, %26, !dbg !23
  %39 = and i1 %18, %27, !dbg !23
  %40 = and i1 %28, %18, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %37) #2, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %38) #2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %51 = shl i32 %24, 2, !dbg !25
  %52 = shl i32 %25, 2, !dbg !25
  %53 = shl i32 %15, 4, !dbg !26
  %54 = add i32 %51, %53, !dbg !27
  %55 = add i32 %53, %52, !dbg !27
  %56 = sext i32 %54 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !28
  %58 = sext i32 %55 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !28
  %60 = shl i32 %7, 8, !dbg !29
  %61 = and i32 %60, 768, !dbg !29
  %62 = or disjoint i32 %61, %9, !dbg !29
  %63 = and i32 %10, 508, !dbg !29
  %64 = lshr exact i32 %61, 2, !dbg !29
  %65 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %64, !dbg !29
  %66 = getelementptr float, ptr addrspace(3) %65, i32 %62, !dbg !29
  %67 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !29
  %68 = or disjoint i32 %62, 64, !dbg !29
  %69 = lshr i32 %68, 4, !dbg !29
  %70 = and i32 %69, 52, !dbg !29
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !29
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %68, !dbg !29
  %73 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !29
  %74 = or disjoint i32 %62, 128, !dbg !29
  %75 = lshr i32 %74, 4, !dbg !29
  %76 = and i32 %75, 56, !dbg !29
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !29
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %74, !dbg !29
  %79 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !29
  %80 = or disjoint i32 %62, 192, !dbg !29
  %81 = lshr i32 %80, 4, !dbg !29
  %82 = and i32 %81, 60, !dbg !29
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !29
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %80, !dbg !29
  %85 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !29
  %86 = or disjoint i32 %62, 32, !dbg !29
  %87 = getelementptr float, ptr addrspace(3) %65, i32 %86, !dbg !29
  %88 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !29
  %89 = or disjoint i32 %62, 96, !dbg !29
  %90 = lshr i32 %89, 4, !dbg !29
  %91 = and i32 %90, 52, !dbg !29
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !29
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !29
  %94 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !29
  %95 = or disjoint i32 %62, 160, !dbg !29
  %96 = lshr i32 %95, 4, !dbg !29
  %97 = and i32 %96, 56, !dbg !29
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !29
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %95, !dbg !29
  %100 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !29
  %101 = or disjoint i32 %62, 224, !dbg !29
  %102 = lshr i32 %101, 4, !dbg !29
  %103 = and i32 %102, 60, !dbg !29
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %101, !dbg !29
  %106 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %107 = lshr i32 %10, 4, !dbg !29
  %108 = and i32 %107, 28, !dbg !29
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !29
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %63, !dbg !29
  %111 = or disjoint i32 %63, 512, !dbg !29
  %112 = lshr i32 %111, 4, !dbg !29
  %113 = and i32 %112, 60, !dbg !29
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !29
  %115 = getelementptr inbounds float, ptr addrspace(3) %114, i32 %111, !dbg !29
  %116 = load <4 x i32>, ptr addrspace(3) %115, align 16, !dbg !29
  %.extract = load i32, ptr addrspace(3) %110, align 16, !dbg !29
  %117 = getelementptr inbounds i8, ptr addrspace(3) %110, i32 4, !dbg !29
  %.extract10 = load i32, ptr addrspace(3) %117, align 4, !dbg !29
  %118 = getelementptr inbounds i8, ptr addrspace(3) %110, i32 8, !dbg !29
  %.extract11 = load i32, ptr addrspace(3) %118, align 8, !dbg !29
  %119 = getelementptr inbounds i8, ptr addrspace(3) %110, i32 12, !dbg !29
  %.extract12 = load i32, ptr addrspace(3) %119, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %57, i1 %39) #2, !dbg !29
  %.extract13 = extractelement <4 x i32> %116, i64 0, !dbg !29
  %.extract14 = extractelement <4 x i32> %116, i64 1, !dbg !29
  %.extract15 = extractelement <4 x i32> %116, i64 2, !dbg !29
  %.extract16 = extractelement <4 x i32> %116, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %59, i1 %40) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cueuxmiyddnsp5vuk5bf2e76ch2j3ujmmr7q5m3usreata2jh5jp.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_poi_fused_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_9", linkageName: "triton_poi_fused_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 32, scope: !7)
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 51, scope: !7)
!30 = !DILocation(line: 33, column: 4, scope: !7)
