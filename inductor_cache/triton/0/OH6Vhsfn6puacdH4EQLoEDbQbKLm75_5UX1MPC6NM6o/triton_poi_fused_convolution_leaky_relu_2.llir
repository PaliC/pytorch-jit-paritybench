; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = sdiv i32 %13, 1024, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = sext i32 %13 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = sext i32 %15 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = sext i32 %16 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #2, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %37 = sext i32 %18 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !19
  %47 = getelementptr i1, ptr addrspace(1) %2, i64 %19, !dbg !20
  %48 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !17
  %49 = insertelement <4 x i32> %48, i32 %29, i64 1, !dbg !17
  %50 = insertelement <4 x i32> %49, i32 %30, i64 2, !dbg !17
  %51 = insertelement <4 x i32> %50, i32 %31, i64 3, !dbg !17
  %52 = bitcast <4 x i32> %51 to <4 x float>, !dbg !17
  %53 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !19
  %54 = insertelement <4 x i32> %53, i32 %40, i64 1, !dbg !19
  %55 = insertelement <4 x i32> %54, i32 %41, i64 2, !dbg !19
  %56 = insertelement <4 x i32> %55, i32 %42, i64 3, !dbg !19
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !19
  %58 = fadd <4 x float> %52, %57, !dbg !21
  %59 = fcmp ogt <4 x float> %58, zeroinitializer, !dbg !22
  %60 = extractelement <4 x float> %58, i64 0, !dbg !23
  %61 = fmul float %60, 0x3FB99999A0000000, !dbg !24
  %62 = extractelement <4 x float> %58, i64 1, !dbg !23
  %63 = fmul float %62, 0x3FB99999A0000000, !dbg !24
  %64 = extractelement <4 x float> %58, i64 2, !dbg !23
  %65 = fmul float %64, 0x3FB99999A0000000, !dbg !24
  %66 = extractelement <4 x float> %58, i64 3, !dbg !23
  %67 = fmul float %66, 0x3FB99999A0000000, !dbg !24
  %68 = extractelement <4 x i1> %59, i64 0, !dbg !23
  %69 = select i1 %68, float %60, float %61, !dbg !23
  %70 = extractelement <4 x i1> %59, i64 1, !dbg !23
  %71 = select i1 %70, float %62, float %63, !dbg !23
  %72 = extractelement <4 x i1> %59, i64 2, !dbg !23
  %73 = select i1 %72, float %64, float %65, !dbg !23
  %74 = extractelement <4 x i1> %59, i64 3, !dbg !23
  %75 = select i1 %74, float %66, float %67, !dbg !23
  %76 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !17
  %77 = insertelement <4 x i32> %76, i32 %34, i64 1, !dbg !17
  %78 = insertelement <4 x i32> %77, i32 %35, i64 2, !dbg !17
  %79 = insertelement <4 x i32> %78, i32 %36, i64 3, !dbg !17
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !17
  %81 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !19
  %82 = insertelement <4 x i32> %81, i32 %44, i64 1, !dbg !19
  %83 = insertelement <4 x i32> %82, i32 %45, i64 2, !dbg !19
  %84 = insertelement <4 x i32> %83, i32 %46, i64 3, !dbg !19
  %85 = bitcast <4 x i32> %84 to <4 x float>, !dbg !19
  %86 = fadd <4 x float> %80, %85, !dbg !21
  %87 = fcmp ogt <4 x float> %86, zeroinitializer, !dbg !22
  %88 = extractelement <4 x float> %86, i64 0, !dbg !23
  %89 = fmul float %88, 0x3FB99999A0000000, !dbg !24
  %90 = extractelement <4 x float> %86, i64 1, !dbg !23
  %91 = fmul float %90, 0x3FB99999A0000000, !dbg !24
  %92 = extractelement <4 x float> %86, i64 2, !dbg !23
  %93 = fmul float %92, 0x3FB99999A0000000, !dbg !24
  %94 = extractelement <4 x float> %86, i64 3, !dbg !23
  %95 = fmul float %94, 0x3FB99999A0000000, !dbg !24
  %96 = extractelement <4 x i1> %87, i64 0, !dbg !23
  %97 = select i1 %96, float %88, float %89, !dbg !23
  %98 = extractelement <4 x i1> %87, i64 1, !dbg !23
  %99 = select i1 %98, float %90, float %91, !dbg !23
  %100 = extractelement <4 x i1> %87, i64 2, !dbg !23
  %101 = select i1 %100, float %92, float %93, !dbg !23
  %102 = extractelement <4 x i1> %87, i64 3, !dbg !23
  %103 = select i1 %102, float %94, float %95, !dbg !23
  %104 = zext <4 x i1> %59 to <4 x i8>, !dbg !25
  %105 = bitcast <4 x i8> %104 to i32, !dbg !25
  %106 = zext <4 x i1> %87 to <4 x i8>, !dbg !25
  %107 = bitcast <4 x i8> %106 to i32, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %105, i32 %107, ptr addrspace(1) %47, i1 true) #2, !dbg !25
  %108 = zext nneg i32 %9 to i64, !dbg !26
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !26
  %110 = bitcast float %69 to i32, !dbg !26
  %111 = bitcast float %71 to i32, !dbg !26
  %112 = bitcast float %73 to i32, !dbg !26
  %113 = bitcast float %75 to i32, !dbg !26
  %114 = bitcast float %97 to i32, !dbg !26
  %115 = bitcast float %99 to i32, !dbg !26
  %116 = bitcast float %101 to i32, !dbg !26
  %117 = bitcast float %103 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %109, i32 %110, i32 %111, i32 %112, i32 %113, i1 true) #2, !dbg !26
  %118 = getelementptr inbounds i8, ptr addrspace(3) %109, i64 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %118, i32 %114, i32 %115, i32 %116, i32 %117, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %119 = zext nneg i32 %11 to i64, !dbg !26
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !26
  %121 = zext nneg i32 %12 to i64, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !26
  %123 = load <4 x i32>, ptr addrspace(3) %122, align 16, !dbg !26
  %.extract = load i32, ptr addrspace(3) %120, align 16, !dbg !26
  %124 = getelementptr inbounds i8, ptr addrspace(3) %120, i64 4, !dbg !26
  %.extract8 = load i32, ptr addrspace(3) %124, align 4, !dbg !26
  %125 = getelementptr inbounds i8, ptr addrspace(3) %120, i64 8, !dbg !26
  %.extract9 = load i32, ptr addrspace(3) %125, align 8, !dbg !26
  %126 = getelementptr inbounds i8, ptr addrspace(3) %120, i64 12, !dbg !26
  %.extract10 = load i32, ptr addrspace(3) %126, align 4, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %24, i1 true) #2, !dbg !26
  %.extract11 = extractelement <4 x i32> %123, i64 0, !dbg !26
  %.extract12 = extractelement <4 x i32> %123, i64 1, !dbg !26
  %.extract13 = extractelement <4 x i32> %123, i64 2, !dbg !26
  %.extract14 = extractelement <4 x i32> %123, i64 3, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %26, i1 true) #2, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbo25ele5trems4gvxjf5cyzaqn4irotw3j3n4sgtm6mqffbt3ti.py", directory: "inductor_cache/bo")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_2", linkageName: "triton_poi_fused_convolution_leaky_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 25, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 33, column: 32, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 39, scope: !7)
!27 = !DILocation(line: 35, column: 4, scope: !7)
