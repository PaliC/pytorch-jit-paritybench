; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_clone_mul_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = lshr i32 %10, 2, !dbg !12
  %14 = and i32 %13, 8, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !12
  %16 = lshr i32 %10, 2, !dbg !12
  %17 = and i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !12
  %19 = and i32 %10, 3, !dbg !12
  %20 = and i32 %10, 31, !dbg !12
  %21 = or disjoint i32 %18, %9, !dbg !13
  %22 = or disjoint i32 %9, %20, !dbg !13
  %23 = icmp slt i32 %21, 64, !dbg !14
  %24 = icmp slt i32 %22, 64, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %.lobit24 = lshr i32 %10, 5, !dbg !17
  %27 = and i32 %.lobit24, 3, !dbg !17
  %28 = or disjoint i32 %26, %19, !dbg !18
  %29 = or disjoint i32 %27, %26, !dbg !18
  %30 = icmp slt i32 %28, 4, !dbg !19
  %31 = icmp slt i32 %29, 4, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %32 = sdiv i32 %.frozen, 4, !dbg !20
  %33 = mul i32 %32, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %34 = sdiv i32 %21, 4, !dbg !20
  %35 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !22
  %36 = insertelement <2 x i32> %35, i32 %21, i64 1, !dbg !22
  %37 = srem <2 x i32> %36, splat (i32 4), !dbg !22
  %38 = sdiv i32 %21, 16, !dbg !23
  %39 = extractelement <2 x i32> %37, i64 1, !dbg !24
  %40 = shl nsw i32 %39, 2, !dbg !24
  %41 = extractelement <2 x i32> %37, i64 0, !dbg !25
  %42 = add nsw i32 %41, %40, !dbg !25
  %43 = shl i32 %28, 4, !dbg !26
  %44 = add i32 %42, %43, !dbg !27
  %45 = shl i32 %38, 6, !dbg !28
  %46 = add i32 %44, %45, !dbg !29
  %47 = sext i32 %46 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = and i1 %23, %30, !dbg !31
  %50 = and i1 %24, %31, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %49) #2, !dbg !32
  %52 = bitcast i32 %51 to float, !dbg !32
  %53 = mul i32 %28, 3, !dbg !33
  %54 = mul nsw i32 %38, 12, !dbg !34
  %55 = add i32 %53, %54, !dbg !35
  %56 = sext i32 %55 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %49) #2, !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = add i32 %55, 1, !dbg !38
  %61 = sext i32 %60 to i64, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !39
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %49) #2, !dbg !40
  %64 = bitcast i32 %63 to float, !dbg !40
  %65 = add i32 %55, 2, !dbg !41
  %66 = sext i32 %65 to i64, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !42
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %49) #2, !dbg !43
  %69 = bitcast i32 %68 to float, !dbg !43
  %70 = shl i32 %29, 2, !dbg !44
  %71 = add i32 %70, %.decomposed, !dbg !45
  %72 = shl i32 %32, 4, !dbg !46
  %73 = add i32 %71, %72, !dbg !47
  %74 = sext i32 %73 to i64, !dbg !48
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !48
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %50) #2, !dbg !49
  %77 = bitcast i32 %76 to float, !dbg !49
  %78 = shl i32 %21, 2, !dbg !50
  %79 = add i32 %28, %78, !dbg !51
  %80 = sext i32 %79 to i64, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !52
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %49) #2, !dbg !53
  %83 = bitcast i32 %82 to float, !dbg !53
  %84 = fcmp ogt float %59, %64, !dbg !54
  %85 = fcmp uno float %59, 0.000000e+00, !dbg !58
  %86 = or i1 %85, %84, !dbg !59
  %87 = select i1 %86, float %59, float %64, !dbg !60
  %88 = fcmp ogt float %87, %69, !dbg !61
  %89 = fcmp uno float %87, 0.000000e+00, !dbg !63
  %90 = or i1 %88, %89, !dbg !64
  %91 = select i1 %90, float %87, float %69, !dbg !65
  %92 = fsub float %59, %91, !dbg !66
  %93 = fmul float %92, 0x3FF7154760000000, !dbg !67
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #2, !dbg !67
  %95 = fsub float %64, %91, !dbg !68
  %96 = fmul float %95, 0x3FF7154760000000, !dbg !69
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #2, !dbg !69
  %98 = fadd float %94, %97, !dbg !70
  %99 = fsub float %69, %91, !dbg !71
  %100 = fmul float %99, 0x3FF7154760000000, !dbg !72
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #2, !dbg !72
  %102 = fadd float %98, %101, !dbg !73
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %102) #2, !dbg !74
  %104 = fmul float %103, %52, !dbg !75
  %105 = shl i32 %10, 5, !dbg !75
  %106 = and i32 %105, 96, !dbg !75
  %107 = and i32 %11, 7, !dbg !75
  %108 = or disjoint i32 %107, %106, !dbg !75
  %109 = or disjoint i32 %108, %14, !dbg !75
  %110 = or disjoint i32 %109, %17, !dbg !75
  %111 = and i32 %10, 127, !dbg !75
  %112 = lshr exact i32 %106, 3, !dbg !75
  %113 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %112, !dbg !75
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %110, !dbg !75
  %115 = bitcast float %104 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %116 = lshr i32 %111, 5, !dbg !75
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !75
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %111, !dbg !75
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !75
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %102) #2, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %121 = bitcast float %120 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %121, i1 true) #2, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %122 = load float, ptr addrspace(3) %118, align 4, !dbg !76
  %123 = fmul float %122, %77, !dbg !77
  %124 = fadd float %119, %123, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %125 = shl i32 %10, 2, !dbg !78
  %126 = and i32 %125, 124, !dbg !78
  %127 = or disjoint i32 %27, %126, !dbg !78
  %128 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %126, !dbg !78
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %127, !dbg !78
  %130 = bitcast float %124 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %131 = lshr i32 %111, 2, !dbg !78
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !78
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %111, !dbg !78
  %134 = load float, ptr addrspace(3) %133, align 4, !dbg !78
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %102) #2, !dbg !79
  %136 = fmul float %135, %83, !dbg !80
  %137 = fadd float %134, %136, !dbg !81
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !82
  %139 = bitcast float %137 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %138, i1 %49) #2, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cimsskpuxbdtiwdu77oq4nftdxynx3hhigz4mldvj7fuobxpb3os.py", directory: "inductor_cache/im")
!4 = !{ptr @triton_poi_fused_add_clone_mul_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_6", linkageName: "triton_poi_fused_add_clone_mul_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 53, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 66, scope: !7)
!32 = !DILocation(line: 34, column: 58, scope: !7)
!33 = !DILocation(line: 35, column: 32, scope: !7)
!34 = !DILocation(line: 35, column: 40, scope: !7)
!35 = !DILocation(line: 35, column: 37, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 45, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 49, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 49, scope: !7)
!44 = !DILocation(line: 38, column: 38, scope: !7)
!45 = !DILocation(line: 38, column: 36, scope: !7)
!46 = !DILocation(line: 38, column: 46, scope: !7)
!47 = !DILocation(line: 38, column: 43, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 51, scope: !7)
!50 = !DILocation(line: 39, column: 38, scope: !7)
!51 = !DILocation(line: 39, column: 36, scope: !7)
!52 = !DILocation(line: 39, column: 31, scope: !7)
!53 = !DILocation(line: 39, column: 43, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 40, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !62)
!62 = !DILocation(line: 41, column: 40, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !62)
!66 = !DILocation(line: 42, column: 18, scope: !7)
!67 = !DILocation(line: 43, column: 23, scope: !7)
!68 = !DILocation(line: 44, column: 18, scope: !7)
!69 = !DILocation(line: 45, column: 23, scope: !7)
!70 = !DILocation(line: 46, column: 19, scope: !7)
!71 = !DILocation(line: 47, column: 19, scope: !7)
!72 = !DILocation(line: 48, column: 24, scope: !7)
!73 = !DILocation(line: 49, column: 20, scope: !7)
!74 = !DILocation(line: 50, column: 19, scope: !7)
!75 = !DILocation(line: 51, column: 19, scope: !7)
!76 = !DILocation(line: 52, column: 19, scope: !7)
!77 = !DILocation(line: 53, column: 20, scope: !7)
!78 = !DILocation(line: 54, column: 20, scope: !7)
!79 = !DILocation(line: 55, column: 20, scope: !7)
!80 = !DILocation(line: 56, column: 20, scope: !7)
!81 = !DILocation(line: 57, column: 20, scope: !7)
!82 = !DILocation(line: 58, column: 25, scope: !7)
!83 = !DILocation(line: 58, column: 44, scope: !7)
!84 = !DILocation(line: 58, column: 4, scope: !7)
