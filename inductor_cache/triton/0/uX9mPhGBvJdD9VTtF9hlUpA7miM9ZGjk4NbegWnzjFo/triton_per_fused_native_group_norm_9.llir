; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 126, !dbg !12
  %16 = and i32 %11, 63, !dbg !12
  %17 = or disjoint i32 %16, 64, !dbg !12
  %18 = lshr i32 %16, 4, !dbg !13
  %19 = lshr i32 %17, 4, !dbg !13
  %20 = shl i32 %9, 7, !dbg !14
  %21 = or disjoint i32 %20, %15, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !17
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %27 = bitcast i32 %25 to float, !dbg !17
  %28 = bitcast i32 %26 to float, !dbg !17
  %29 = zext nneg i32 %18 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = zext nneg i32 %19 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !21
  %39 = fadd float %27, %28, !dbg !22
  %40 = select i1 %10, float %39, float 0.000000e+00, !dbg !22
  %41 = bitcast float %40 to i32, !dbg !27
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 16, i32 31), !dbg !27
  %43 = bitcast i32 %42 to float, !dbg !27
  %44 = fadd float %40, %43, !dbg !22
  %45 = bitcast float %44 to i32, !dbg !27
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 8, i32 31), !dbg !27
  %47 = bitcast i32 %46 to float, !dbg !27
  %48 = fadd float %44, %47, !dbg !22
  %49 = bitcast float %48 to i32, !dbg !27
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !27
  %51 = bitcast i32 %50 to float, !dbg !27
  %52 = fadd float %48, %51, !dbg !22
  %53 = bitcast float %52 to i32, !dbg !27
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = fadd float %52, %55, !dbg !22
  %57 = bitcast float %56 to i32, !dbg !27
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = fadd float %56, %59, !dbg !22
  %61 = icmp eq i32 %12, 0, !dbg !27
  %62 = and i32 %13, 1, !dbg !27
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !27
  %64 = bitcast float %60 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 %61) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %65 = icmp slt i32 %11, 2, !dbg !27
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %67 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %65) #5, !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !27
  %70 = bitcast i32 %69 to float, !dbg !27
  %71 = fadd float %68, %70, !dbg !22
  %72 = and i32 %11, 1, !dbg !27
  %73 = icmp eq i32 %72, 0, !dbg !27
  %74 = and i1 %65, %73, !dbg !27
  %75 = bitcast float %71 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %75, i1 %74) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %76 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 1.280000e+02) #5, !dbg !28
  %78 = fsub float %27, %77, !dbg !29
  %79 = fsub float %28, %77, !dbg !29
  %80 = fmul float %78, %78, !dbg !30
  %81 = fmul float %79, %79, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %82 = fadd float %80, %81, !dbg !33
  %83 = select i1 %10, float %82, float 0.000000e+00, !dbg !33
  %84 = bitcast float %83 to i32, !dbg !31
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !31
  %86 = bitcast i32 %85 to float, !dbg !31
  %87 = fadd float %83, %86, !dbg !33
  %88 = bitcast float %87 to i32, !dbg !31
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = fadd float %87, %90, !dbg !33
  %92 = bitcast float %91 to i32, !dbg !31
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = fadd float %91, %94, !dbg !33
  %96 = bitcast float %95 to i32, !dbg !31
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = fadd float %95, %98, !dbg !33
  %100 = bitcast float %99 to i32, !dbg !31
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = fadd float %99, %102, !dbg !33
  %104 = bitcast float %103 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %104, i1 %61) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %105 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %65) #5, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = fadd float %106, %108, !dbg !33
  %110 = bitcast float %109 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %110, i1 %74) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %111 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 1.280000e+02) #5, !dbg !34
  %113 = fadd float %112, 0x3EE4F8B580000000, !dbg !35
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %114, 0, !dbg !36
  br i1 %.not.i, label %117, label %115, !dbg !36

115:                                              ; preds = %8
  %116 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

117:                                              ; preds = %8
  %118 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %115, %117
  %.0.i = phi float [ %116, %115 ], [ %118, %117 ], !dbg !36
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i8 = icmp eq i32 %120, 0, !dbg !36
  br i1 %.not.i8, label %123, label %121, !dbg !36

121:                                              ; preds = %__nv_rsqrtf.exit
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !36
  br label %__nv_rsqrtf.exit10, !dbg !36

123:                                              ; preds = %__nv_rsqrtf.exit
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !36
  br label %__nv_rsqrtf.exit10, !dbg !36

__nv_rsqrtf.exit10:                               ; preds = %121, %123
  %.0.i9 = phi float [ %122, %121 ], [ %124, %123 ], !dbg !36
  %125 = bitcast i32 %38 to float, !dbg !21
  %126 = bitcast i32 %37 to float, !dbg !21
  %127 = bitcast i32 %34 to float, !dbg !19
  %128 = bitcast i32 %33 to float, !dbg !19
  %129 = fmul float %78, %.0.i9, !dbg !37
  %130 = fmul float %79, %.0.i9, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %.idx = shl nuw nsw i32 %15, 3, !dbg !37
  %131 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !37
  %132 = bitcast float %129 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #5, !dbg !37
  %133 = shl nuw nsw i32 %15, 1, !dbg !37
  %134 = or disjoint i32 %133, 2, !dbg !37
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !37
  %136 = bitcast float %130 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %.idx1 = shl nuw nsw i32 %16, 3, !dbg !37
  %137 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !37
  %138 = load float, ptr addrspace(3) %137, align 8, !dbg !37
  %.idx2 = shl nuw nsw i32 %17, 3, !dbg !37
  %139 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !37
  %140 = load float, ptr addrspace(3) %139, align 8, !dbg !37
  %141 = fmul float %138, %128, !dbg !38
  %142 = fmul float %140, %127, !dbg !38
  %143 = fadd float %141, %126, !dbg !39
  %144 = fadd float %142, %125, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !41
  %147 = bitcast float %143 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #5, !dbg !41
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !41
  %149 = bitcast float %144 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !41
  %.extract = load i32, ptr addrspace(3) %150, align 8, !dbg !41
  %151 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 4, !dbg !41
  %.extract4 = load i32, ptr addrspace(3) %151, align 4, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %145, i1 %10) #5, !dbg !41
  %152 = sext i32 %9 to i64, !dbg !42
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !42
  %154 = icmp eq i32 %16, 0, !dbg !43
  %155 = bitcast float %.0.i to i32, !dbg !43
  %156 = and i1 %154, %10, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %153, i1 %156) #5, !dbg !43
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !44
  %158 = bitcast float %77 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %157, i1 %156) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cobk4myzba43snegnzdxrwjtz7t6a5keutp5zoqdgyce2wvtipa6.py", directory: "inductor_cache/ob")
!4 = !{ptr @triton_per_fused_native_group_norm_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_9, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_9", linkageName: "triton_per_fused_native_group_norm_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 44, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 39, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 42, column: 19, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 47, column: 26, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !32)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 20, scope: !7)
!36 = !DILocation(line: 53, column: 28, scope: !7)
!37 = !DILocation(line: 54, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 20, scope: !7)
!40 = !DILocation(line: 57, column: 25, scope: !7)
!41 = !DILocation(line: 57, column: 46, scope: !7)
!42 = !DILocation(line: 58, column: 25, scope: !7)
!43 = !DILocation(line: 58, column: 37, scope: !7)
!44 = !DILocation(line: 59, column: 25, scope: !7)
!45 = !DILocation(line: 59, column: 37, scope: !7)
!46 = !DILocation(line: 59, column: 4, scope: !7)
