; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 248, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %9, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = or disjoint i32 %8, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 2, !dbg !15
  %23 = lshr i32 %9, 5, !dbg !16
  %24 = and i32 %23, 3, !dbg !16
  %25 = or disjoint i32 %24, %22, !dbg !17
  %26 = icmp slt i32 %25, 4, !dbg !18
  %27 = icmp slt i32 %22, 4, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %28 = sdiv i32 %.frozen, 256, !dbg !19
  %29 = mul i32 %28, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %17, 256, !dbg !20
  %31 = srem i32 %18, 256, !dbg !20
  %32 = shl i32 %25, 8, !dbg !21
  %33 = shl i32 %28, 10, !dbg !22
  %34 = add i32 %33, %32, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %34, %30, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %26) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = shl i32 %9, 5, !dbg !26
  %52 = and i32 %51, 992, !dbg !26
  %53 = or disjoint i32 %24, %52, !dbg !26
  %54 = shl i32 %9, 2, !dbg !26
  %55 = and i32 %54, 508, !dbg !26
  %56 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %52, !dbg !26
  %57 = getelementptr inbounds float, ptr addrspace(3) %56, i32 %53, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !26
  %59 = or disjoint i32 %53, 4, !dbg !26
  %60 = lshr i32 %59, 2, !dbg !26
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !26
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %59, !dbg !26
  %63 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !26
  %64 = or disjoint i32 %53, 8, !dbg !26
  %65 = lshr i32 %64, 2, !dbg !26
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !26
  %67 = getelementptr inbounds float, ptr addrspace(3) %66, i32 %64, !dbg !26
  %68 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !26
  %69 = or disjoint i32 %53, 12, !dbg !26
  %70 = lshr i32 %69, 2, !dbg !26
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %69, !dbg !26
  %73 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !26
  %74 = or disjoint i32 %53, 16, !dbg !26
  %75 = lshr i32 %74, 2, !dbg !26
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %75, !dbg !26
  %77 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %74, !dbg !26
  %78 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !26
  %79 = or disjoint i32 %53, 20, !dbg !26
  %80 = lshr i32 %79, 2, !dbg !26
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !26
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %79, !dbg !26
  %83 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !26
  %84 = or disjoint i32 %53, 24, !dbg !26
  %85 = lshr i32 %84, 2, !dbg !26
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !26
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %84, !dbg !26
  %88 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !26
  %89 = or disjoint i32 %53, 28, !dbg !26
  %90 = lshr i32 %89, 2, !dbg !26
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %89, !dbg !26
  %93 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !26
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %55, !dbg !26
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %97 = or disjoint i32 %55, 1, !dbg !26
  %98 = getelementptr float, ptr addrspace(3) %94, i32 %97, !dbg !26
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !26
  %100 = or disjoint i32 %55, 2, !dbg !26
  %101 = getelementptr float, ptr addrspace(3) %94, i32 %100, !dbg !26
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !26
  %103 = or disjoint i32 %55, 3, !dbg !26
  %104 = getelementptr float, ptr addrspace(3) %94, i32 %103, !dbg !26
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !26
  %106 = or disjoint i32 %55, 512, !dbg !26
  %107 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %106, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %106, !dbg !26
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !26
  %110 = or disjoint i32 %55, 513, !dbg !26
  %111 = lshr i32 %110, 2, !dbg !26
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !26
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !26
  %115 = or disjoint i32 %55, 514, !dbg !26
  %116 = lshr i32 %115, 2, !dbg !26
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !26
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !26
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !26
  %120 = or disjoint i32 %55, 515, !dbg !26
  %121 = lshr i32 %120, 2, !dbg !26
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !26
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %125 = and i32 %10, 1016, !dbg !26
  %126 = lshr i32 %10, 5, !dbg !26
  %127 = and i32 %126, 24, !dbg !26
  %128 = add nuw nsw i32 %127, %125, !dbg !26
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %129, i32 %42, i32 %43, i32 %44, i32 %45, i1 true) #2, !dbg !26
  %130 = getelementptr inbounds i8, ptr addrspace(3) %129, i32 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %130, i32 %47, i32 %48, i32 %49, i32 %50, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %132 = add nuw nsw i32 %13, 264, !dbg !26
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !26
  %134 = add nuw nsw i32 %13, 528, !dbg !26
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !26
  %136 = add nuw nsw i32 %13, 792, !dbg !26
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !26
  %138 = sext i32 %31 to i64, !dbg !27
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !27
  %.idx = shl nuw nsw i32 %13, 3, !dbg !28
  %140 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %141 = shl nuw nsw i32 %13, 1, !dbg !28
  %142 = or disjoint i32 %141, 2, !dbg !28
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !28
  %.idx9 = shl nuw nsw i32 %14, 3, !dbg !28
  %144 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !28
  %.idx10 = shl nuw nsw i32 %15, 3, !dbg !28
  %145 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !28
  %146 = load <2 x float>, ptr addrspace(3) %131, align 8, !dbg !26
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %148 = load <2 x float>, ptr addrspace(3) %133, align 8, !dbg !26
  %149 = shufflevector <2 x float> %148, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %150 = load <2 x float>, ptr addrspace(3) %135, align 8, !dbg !26
  %151 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %152 = load <2 x float>, ptr addrspace(3) %137, align 8, !dbg !26
  %153 = shufflevector <2 x float> %152, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %139, i1 true) #2, !dbg !32
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !32
  %156 = extractvalue { i32, i32 } %154, 1, !dbg !32
  %157 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !32
  %158 = insertelement <2 x i32> %157, i32 %155, i64 1, !dbg !32
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !32
  %160 = shufflevector <2 x float> %159, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %161 = insertelement <1 x i32> poison, i32 %155, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %161, i1 true) #2, !dbg !28
  %162 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %162, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %163 = load float, ptr addrspace(3) %144, align 8, !dbg !28
  %164 = load float, ptr addrspace(3) %145, align 8, !dbg !28
  %165 = fadd float %96, %163, !dbg !33
  %166 = fadd float %99, %163, !dbg !33
  %167 = fadd float %102, %163, !dbg !33
  %168 = fadd float %105, %163, !dbg !33
  %169 = fadd float %109, %164, !dbg !33
  %170 = fadd float %114, %164, !dbg !33
  %171 = fadd float %119, %164, !dbg !33
  %172 = fadd float %124, %164, !dbg !33
  %173 = shufflevector <2 x float> %153, <2 x float> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %174 = shufflevector <2 x float> %149, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %175 = shufflevector <8 x float> %173, <8 x float> %174, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !33
  %176 = shufflevector <2 x float> %147, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %177 = shufflevector <8 x float> %175, <8 x float> %176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !33
  %178 = fadd <8 x float> %177, %160, !dbg !33
  %179 = fcmp olt float %165, 0.000000e+00, !dbg !34
  %180 = fcmp olt float %166, 0.000000e+00, !dbg !34
  %181 = fcmp olt float %167, 0.000000e+00, !dbg !34
  %182 = fcmp olt float %168, 0.000000e+00, !dbg !34
  %183 = fcmp olt float %169, 0.000000e+00, !dbg !34
  %184 = fcmp olt float %170, 0.000000e+00, !dbg !34
  %185 = fcmp olt float %171, 0.000000e+00, !dbg !34
  %186 = fcmp olt float %172, 0.000000e+00, !dbg !34
  %187 = fcmp olt <8 x float> %178, zeroinitializer, !dbg !34
  %188 = select i1 %179, float 0.000000e+00, float %165, !dbg !28
  %189 = select i1 %180, float 0.000000e+00, float %166, !dbg !28
  %190 = select i1 %181, float 0.000000e+00, float %167, !dbg !28
  %191 = select i1 %182, float 0.000000e+00, float %168, !dbg !28
  %192 = select i1 %183, float 0.000000e+00, float %169, !dbg !28
  %193 = select i1 %184, float 0.000000e+00, float %170, !dbg !28
  %194 = select i1 %185, float 0.000000e+00, float %171, !dbg !28
  %195 = select i1 %186, float 0.000000e+00, float %172, !dbg !28
  %196 = select <8 x i1> %187, <8 x float> zeroinitializer, <8 x float> %178, !dbg !28
  %197 = fcmp ole <8 x float> %196, zeroinitializer, !dbg !35
  %198 = add i32 %19, %21, !dbg !36
  %199 = shl i32 %198, 2, !dbg !36
  %200 = add i32 %20, %21, !dbg !36
  %201 = shl i32 %200, 2, !dbg !36
  %202 = sext i32 %199 to i64, !dbg !37
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !37
  %204 = sext i32 %201 to i64, !dbg !37
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !37
  %206 = bitcast float %188 to i32, !dbg !38
  %207 = bitcast float %189 to i32, !dbg !38
  %208 = bitcast float %190 to i32, !dbg !38
  %209 = bitcast float %191 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %207, i32 %208, i32 %209, ptr addrspace(1) %203, i1 %27) #2, !dbg !38
  %210 = bitcast float %192 to i32, !dbg !38
  %211 = bitcast float %193 to i32, !dbg !38
  %212 = bitcast float %194 to i32, !dbg !38
  %213 = bitcast float %195 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %211, i32 %212, i32 %213, ptr addrspace(1) %205, i1 %27) #2, !dbg !38
  %214 = getelementptr i1, ptr addrspace(1) %3, i64 %37, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %215 = extractelement <8 x i1> %197, i64 7, !dbg !40
  %216 = zext i1 %215 to i8, !dbg !40
  %217 = extractelement <8 x i1> %197, i64 6, !dbg !40
  %218 = zext i1 %217 to i8, !dbg !40
  %219 = extractelement <8 x i1> %197, i64 5, !dbg !40
  %220 = zext i1 %219 to i8, !dbg !40
  %221 = extractelement <8 x i1> %197, i64 4, !dbg !40
  %222 = zext i1 %221 to i8, !dbg !40
  %223 = extractelement <8 x i1> %197, i64 3, !dbg !40
  %224 = zext i1 %223 to i8, !dbg !40
  %225 = extractelement <8 x i1> %197, i64 2, !dbg !40
  %226 = zext i1 %225 to i8, !dbg !40
  %227 = extractelement <8 x i1> %197, i64 1, !dbg !40
  %228 = zext i1 %227 to i8, !dbg !40
  %229 = extractelement <8 x i1> %197, i64 0, !dbg !40
  %230 = zext i1 %229 to i8, !dbg !40
  %231 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %231, i8 %216, i8 %218, i1 true) #2, !dbg !40
  %232 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %132, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %232, i8 %220, i8 %222, i1 true) #2, !dbg !40
  %233 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %134, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %233, i8 %224, i8 %226, i1 true) #2, !dbg !40
  %234 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %136, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %234, i8 %228, i8 %230, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %235 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %128, !dbg !40
  %236 = load <2 x i32>, ptr addrspace(3) %235, align 8, !dbg !40
  %237 = bitcast <2 x i32> %236 to <64 x i1>, !dbg !40
  %238 = extractelement <64 x i1> %237, i64 24, !dbg !40
  %239 = extractelement <64 x i1> %237, i64 56, !dbg !40
  %240 = bitcast <2 x i32> %236 to <8 x i8>, !dbg !40
  %241 = extractelement <8 x i8> %240, i64 0, !dbg !40
  %242 = and i8 %241, 1, !dbg !40
  %243 = shufflevector <8 x i8> %240, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !40
  %244 = and <2 x i8> %243, splat (i8 1), !dbg !40
  %245 = zext i1 %238 to i8, !dbg !40
  %246 = extractelement <8 x i8> %240, i64 4, !dbg !40
  %247 = and i8 %246, 1, !dbg !40
  %248 = shufflevector <8 x i8> %240, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !40
  %249 = and <2 x i8> %248, splat (i8 1), !dbg !40
  %250 = zext i1 %239 to i8, !dbg !40
  %251 = insertelement <4 x i8> poison, i8 %242, i64 0, !dbg !40
  %252 = shufflevector <2 x i8> %244, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %253 = shufflevector <4 x i8> %251, <4 x i8> %252, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %254 = insertelement <4 x i8> %253, i8 %245, i64 3, !dbg !40
  %255 = bitcast <4 x i8> %254 to i32, !dbg !40
  %256 = insertelement <4 x i8> poison, i8 %247, i64 0, !dbg !40
  %257 = shufflevector <2 x i8> %249, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %258 = shufflevector <4 x i8> %256, <4 x i8> %257, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %259 = insertelement <4 x i8> %258, i8 %250, i64 3, !dbg !40
  %260 = bitcast <4 x i8> %259 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %255, i32 %260, ptr addrspace(1) %214, i1 %26) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc2m47gtodaqeyrlconk5kgyif3d22bqw5iwzplmrzlejf32csuv.py", directory: "inductor_cache/c2")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_4", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 38, column: 19, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 43, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 55, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
