; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %14, 64, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 5, !dbg !16
  %18 = shl i32 %8, 3, !dbg !17
  %19 = and i32 %18, 24, !dbg !17
  %20 = lshr i32 %8, 3, !dbg !17
  %21 = and i32 %20, 15, !dbg !17
  %22 = or disjoint i32 %17, %19, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %17, %21, !dbg !18
  %25 = or disjoint i32 %24, 16, !dbg !18
  %26 = icmp slt i32 %24, 320, !dbg !19
  %27 = icmp slt i32 %25, 320, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %28 = sdiv i32 %.frozen, 4, !dbg !20
  %29 = srem i32 %28, 4, !dbg !21
  %30 = mul i32 %28, 4, !dbg !22
  %.decomposed = sub i32 %.frozen, %30, !dbg !22
  %.frozen30 = freeze i32 %14, !dbg !23
  %31 = sdiv i32 %.frozen30, 16, !dbg !23
  %32 = mul i32 %31, 16, !dbg !24
  %.decomposed31 = sub i32 %.frozen30, %32, !dbg !24
  %33 = icmp sgt i32 %29, -1, !dbg !25
  %34 = or i32 %29, %.decomposed, !dbg !26
  %35 = icmp sgt i32 %34, -1, !dbg !26
  %36 = mul nsw i32 %.decomposed, 640, !dbg !27
  %37 = mul i32 %28, 5120, !dbg !28
  %38 = add i32 %37, %36, !dbg !29
  %39 = add i32 %38, %22, !dbg !30
  %40 = add i32 %38, %23, !dbg !30
  %41 = sext i32 %39 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = sext i32 %40 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !31
  %45 = add i32 %38, 320, !dbg !32
  %46 = add i32 %45, %22, !dbg !33
  %47 = add i32 %45, %23, !dbg !33
  %48 = sext i32 %46 to i64, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !34
  %50 = sext i32 %47 to i64, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !34
  %52 = add nsw i32 %.decomposed, 1, !dbg !35
  %53 = icmp ult i32 %52, 4, !dbg !35
  %54 = and i1 %33, %53, !dbg !36
  %55 = add i32 %38, 640, !dbg !37
  %56 = add i32 %55, %22, !dbg !38
  %57 = add i32 %55, %23, !dbg !38
  %58 = sext i32 %56 to i64, !dbg !39
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !39
  %60 = sext i32 %57 to i64, !dbg !39
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !39
  %62 = add i32 %38, 2560, !dbg !40
  %63 = add i32 %62, %22, !dbg !41
  %64 = add i32 %62, %23, !dbg !41
  %65 = sext i32 %63 to i64, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !42
  %67 = sext i32 %64 to i64, !dbg !42
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !42
  %69 = add i32 %38, 2880, !dbg !43
  %70 = add i32 %69, %22, !dbg !44
  %71 = add i32 %69, %23, !dbg !44
  %72 = sext i32 %70 to i64, !dbg !45
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !45
  %74 = sext i32 %71 to i64, !dbg !45
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !45
  %76 = add i32 %38, 3200, !dbg !46
  %77 = add i32 %76, %22, !dbg !47
  %78 = add i32 %76, %23, !dbg !47
  %79 = sext i32 %77 to i64, !dbg !48
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !48
  %81 = sext i32 %78 to i64, !dbg !48
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !48
  %83 = add nsw i32 %29, 1, !dbg !49
  %84 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %22, i64 0, !dbg !19
  %85 = insertelement <4 x i32> %84, i32 %13, i64 1, !dbg !19
  %86 = insertelement <4 x i32> %85, i32 %83, i64 2, !dbg !19
  %87 = insertelement <4 x i32> <i32 320, i32 64, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !19
  %88 = icmp slt <4 x i32> %86, %87, !dbg !19
  %89 = icmp ult <4 x i32> %86, %87, !dbg !19
  %90 = shufflevector <4 x i1> %88, <4 x i1> %89, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !19
  %91 = extractelement <4 x i1> %88, i64 0, !dbg !50
  %92 = and i1 %91, %35, !dbg !51
  %93 = extractelement <4 x i1> %88, i64 1, !dbg !50
  %94 = and i1 %93, %92, !dbg !52
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !53
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !53
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !53
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !53
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !53
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !53
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !53
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !53
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !53
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !53
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !54
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !54
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !54
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !54
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !54
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !54
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !54
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !54
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !54
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !54
  %115 = and i1 %91, %54, !dbg !55
  %116 = and i1 %93, %115, !dbg !56
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #2, !dbg !57
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !57
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !57
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !57
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !57
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #2, !dbg !57
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !57
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !57
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !57
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !57
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !58
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !58
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !58
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !58
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !58
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !58
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !58
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !58
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !58
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !58
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !59
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !59
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !59
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !59
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !59
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !59
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !59
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !59
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !59
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !59
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #2, !dbg !60
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !60
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !60
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !60
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !60
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #2, !dbg !60
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !60
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !60
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !60
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !60
  %157 = add i32 %38, 5120, !dbg !61
  %158 = add i32 %157, %22, !dbg !62
  %159 = add i32 %157, %23, !dbg !62
  %160 = sext i32 %158 to i64, !dbg !63
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !63
  %162 = sext i32 %159 to i64, !dbg !63
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !63
  %164 = bitcast <4 x i1> %90 to i4, !dbg !64
  %165 = icmp eq i4 %164, -1, !dbg !64
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !65
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !65
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !65
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !65
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !65
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !65
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !65
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !65
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !65
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !65
  %176 = add i32 %38, 5440, !dbg !66
  %177 = add i32 %176, %22, !dbg !67
  %178 = add i32 %176, %23, !dbg !67
  %179 = sext i32 %177 to i64, !dbg !68
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !68
  %181 = sext i32 %178 to i64, !dbg !68
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !68
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !69
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !69
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !69
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !69
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !69
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165, i32 -8388608, i1 %165) #2, !dbg !69
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !69
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !69
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !69
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !69
  %193 = or i32 %83, %52, !dbg !70
  %194 = icmp ult i32 %193, 4, !dbg !70
  %195 = add i32 %38, 5760, !dbg !71
  %196 = add i32 %195, %22, !dbg !72
  %197 = add i32 %195, %23, !dbg !72
  %198 = sext i32 %196 to i64, !dbg !73
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !73
  %200 = sext i32 %197 to i64, !dbg !73
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !73
  %202 = and i1 %91, %194, !dbg !74
  %203 = and i1 %93, %202, !dbg !75
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203) #2, !dbg !76
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !76
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !76
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !76
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !76
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203) #2, !dbg !76
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !76
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !76
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !76
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !76
  %214 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !53
  %215 = insertelement <4 x i32> %214, i32 %97, i64 1, !dbg !53
  %216 = insertelement <4 x i32> %215, i32 %98, i64 2, !dbg !53
  %217 = insertelement <4 x i32> %216, i32 %99, i64 3, !dbg !53
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !53
  %219 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !54
  %220 = insertelement <4 x i32> %219, i32 %107, i64 1, !dbg !54
  %221 = insertelement <4 x i32> %220, i32 %108, i64 2, !dbg !54
  %222 = insertelement <4 x i32> %221, i32 %109, i64 3, !dbg !54
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !54
  %224 = fcmp ogt <4 x float> %223, %218, !dbg !77
  %225 = fcmp uno <4 x float> %223, zeroinitializer, !dbg !81
  %226 = or <4 x i1> %224, %225, !dbg !82
  %.v = select <4 x i1> %226, <4 x i32> %222, <4 x i32> %217, !dbg !83
  %227 = bitcast <4 x i32> %.v to <4 x float>, !dbg !83
  %228 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !57
  %229 = insertelement <4 x i32> %228, i32 %119, i64 1, !dbg !57
  %230 = insertelement <4 x i32> %229, i32 %120, i64 2, !dbg !57
  %231 = insertelement <4 x i32> %230, i32 %121, i64 3, !dbg !57
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !57
  %233 = fcmp olt <4 x float> %227, %232, !dbg !84
  %234 = fcmp uno <4 x float> %232, zeroinitializer, !dbg !86
  %235 = or <4 x i1> %234, %233, !dbg !87
  %.v17 = select <4 x i1> %235, <4 x i32> %231, <4 x i32> %.v, !dbg !88
  %236 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !88
  %237 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !58
  %238 = insertelement <4 x i32> %237, i32 %129, i64 1, !dbg !58
  %239 = insertelement <4 x i32> %238, i32 %130, i64 2, !dbg !58
  %240 = insertelement <4 x i32> %239, i32 %131, i64 3, !dbg !58
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !58
  %242 = fcmp olt <4 x float> %236, %241, !dbg !89
  %243 = fcmp uno <4 x float> %241, zeroinitializer, !dbg !91
  %244 = or <4 x i1> %243, %242, !dbg !92
  %.v18 = select <4 x i1> %244, <4 x i32> %240, <4 x i32> %.v17, !dbg !93
  %245 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !93
  %246 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !59
  %247 = insertelement <4 x i32> %246, i32 %139, i64 1, !dbg !59
  %248 = insertelement <4 x i32> %247, i32 %140, i64 2, !dbg !59
  %249 = insertelement <4 x i32> %248, i32 %141, i64 3, !dbg !59
  %250 = bitcast <4 x i32> %249 to <4 x float>, !dbg !59
  %251 = fcmp olt <4 x float> %245, %250, !dbg !94
  %252 = fcmp uno <4 x float> %250, zeroinitializer, !dbg !96
  %253 = or <4 x i1> %252, %251, !dbg !97
  %.v19 = select <4 x i1> %253, <4 x i32> %249, <4 x i32> %.v18, !dbg !98
  %254 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !98
  %255 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !60
  %256 = insertelement <4 x i32> %255, i32 %149, i64 1, !dbg !60
  %257 = insertelement <4 x i32> %256, i32 %150, i64 2, !dbg !60
  %258 = insertelement <4 x i32> %257, i32 %151, i64 3, !dbg !60
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !60
  %260 = fcmp olt <4 x float> %254, %259, !dbg !99
  %261 = fcmp uno <4 x float> %259, zeroinitializer, !dbg !101
  %262 = or <4 x i1> %261, %260, !dbg !102
  %.v20 = select <4 x i1> %262, <4 x i32> %258, <4 x i32> %.v19, !dbg !103
  %263 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !103
  %264 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !65
  %265 = insertelement <4 x i32> %264, i32 %168, i64 1, !dbg !65
  %266 = insertelement <4 x i32> %265, i32 %169, i64 2, !dbg !65
  %267 = insertelement <4 x i32> %266, i32 %170, i64 3, !dbg !65
  %268 = bitcast <4 x i32> %267 to <4 x float>, !dbg !65
  %269 = fcmp olt <4 x float> %263, %268, !dbg !104
  %270 = fcmp uno <4 x float> %268, zeroinitializer, !dbg !106
  %271 = or <4 x i1> %270, %269, !dbg !107
  %.v21 = select <4 x i1> %271, <4 x i32> %267, <4 x i32> %.v20, !dbg !108
  %272 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !108
  %273 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !69
  %274 = insertelement <4 x i32> %273, i32 %185, i64 1, !dbg !69
  %275 = insertelement <4 x i32> %274, i32 %186, i64 2, !dbg !69
  %276 = insertelement <4 x i32> %275, i32 %187, i64 3, !dbg !69
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !69
  %278 = fcmp olt <4 x float> %272, %277, !dbg !109
  %279 = fcmp uno <4 x float> %277, zeroinitializer, !dbg !111
  %280 = or <4 x i1> %279, %278, !dbg !112
  %.v22 = select <4 x i1> %280, <4 x i32> %276, <4 x i32> %.v21, !dbg !113
  %281 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !113
  %282 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !76
  %283 = insertelement <4 x i32> %282, i32 %206, i64 1, !dbg !76
  %284 = insertelement <4 x i32> %283, i32 %207, i64 2, !dbg !76
  %285 = insertelement <4 x i32> %284, i32 %208, i64 3, !dbg !76
  %286 = bitcast <4 x i32> %285 to <4 x float>, !dbg !76
  %287 = fcmp olt <4 x float> %281, %286, !dbg !114
  %288 = extractelement <4 x i1> %287, i64 0, !dbg !116
  %289 = extractelement <4 x i1> %287, i64 1, !dbg !116
  %290 = extractelement <4 x i1> %287, i64 2, !dbg !116
  %291 = extractelement <4 x i1> %287, i64 3, !dbg !116
  %292 = zext <4 x i1> %224 to <4 x i8>, !dbg !117
  %293 = select <4 x i1> %233, <4 x i8> splat (i8 2), <4 x i8> %292, !dbg !118
  %294 = select <4 x i1> %242, <4 x i8> splat (i8 3), <4 x i8> %293, !dbg !119
  %295 = select <4 x i1> %251, <4 x i8> splat (i8 4), <4 x i8> %294, !dbg !120
  %296 = select <4 x i1> %260, <4 x i8> splat (i8 5), <4 x i8> %295, !dbg !121
  %297 = select <4 x i1> %269, <4 x i8> splat (i8 6), <4 x i8> %296, !dbg !122
  %298 = select <4 x i1> %278, <4 x i8> splat (i8 7), <4 x i8> %297, !dbg !123
  %299 = select <4 x i1> %287, <4 x i8> splat (i8 8), <4 x i8> %298, !dbg !124
  %300 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !53
  %301 = insertelement <4 x i32> %300, i32 %102, i64 1, !dbg !53
  %302 = insertelement <4 x i32> %301, i32 %103, i64 2, !dbg !53
  %303 = insertelement <4 x i32> %302, i32 %104, i64 3, !dbg !53
  %304 = bitcast <4 x i32> %303 to <4 x float>, !dbg !53
  %305 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !54
  %306 = insertelement <4 x i32> %305, i32 %112, i64 1, !dbg !54
  %307 = insertelement <4 x i32> %306, i32 %113, i64 2, !dbg !54
  %308 = insertelement <4 x i32> %307, i32 %114, i64 3, !dbg !54
  %309 = bitcast <4 x i32> %308 to <4 x float>, !dbg !54
  %310 = fcmp ogt <4 x float> %309, %304, !dbg !77
  %311 = fcmp uno <4 x float> %309, zeroinitializer, !dbg !81
  %312 = or <4 x i1> %310, %311, !dbg !82
  %.v23 = select <4 x i1> %312, <4 x i32> %308, <4 x i32> %303, !dbg !83
  %313 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !83
  %314 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !57
  %315 = insertelement <4 x i32> %314, i32 %124, i64 1, !dbg !57
  %316 = insertelement <4 x i32> %315, i32 %125, i64 2, !dbg !57
  %317 = insertelement <4 x i32> %316, i32 %126, i64 3, !dbg !57
  %318 = bitcast <4 x i32> %317 to <4 x float>, !dbg !57
  %319 = fcmp olt <4 x float> %313, %318, !dbg !84
  %320 = fcmp uno <4 x float> %318, zeroinitializer, !dbg !86
  %321 = or <4 x i1> %320, %319, !dbg !87
  %.v24 = select <4 x i1> %321, <4 x i32> %317, <4 x i32> %.v23, !dbg !88
  %322 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !88
  %323 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !58
  %324 = insertelement <4 x i32> %323, i32 %134, i64 1, !dbg !58
  %325 = insertelement <4 x i32> %324, i32 %135, i64 2, !dbg !58
  %326 = insertelement <4 x i32> %325, i32 %136, i64 3, !dbg !58
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !58
  %328 = fcmp olt <4 x float> %322, %327, !dbg !89
  %329 = fcmp uno <4 x float> %327, zeroinitializer, !dbg !91
  %330 = or <4 x i1> %329, %328, !dbg !92
  %.v25 = select <4 x i1> %330, <4 x i32> %326, <4 x i32> %.v24, !dbg !93
  %331 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !93
  %332 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !59
  %333 = insertelement <4 x i32> %332, i32 %144, i64 1, !dbg !59
  %334 = insertelement <4 x i32> %333, i32 %145, i64 2, !dbg !59
  %335 = insertelement <4 x i32> %334, i32 %146, i64 3, !dbg !59
  %336 = bitcast <4 x i32> %335 to <4 x float>, !dbg !59
  %337 = fcmp olt <4 x float> %331, %336, !dbg !94
  %338 = fcmp uno <4 x float> %336, zeroinitializer, !dbg !96
  %339 = or <4 x i1> %338, %337, !dbg !97
  %.v26 = select <4 x i1> %339, <4 x i32> %335, <4 x i32> %.v25, !dbg !98
  %340 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !98
  %341 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !60
  %342 = insertelement <4 x i32> %341, i32 %154, i64 1, !dbg !60
  %343 = insertelement <4 x i32> %342, i32 %155, i64 2, !dbg !60
  %344 = insertelement <4 x i32> %343, i32 %156, i64 3, !dbg !60
  %345 = bitcast <4 x i32> %344 to <4 x float>, !dbg !60
  %346 = fcmp olt <4 x float> %340, %345, !dbg !99
  %347 = fcmp uno <4 x float> %345, zeroinitializer, !dbg !101
  %348 = or <4 x i1> %347, %346, !dbg !102
  %.v27 = select <4 x i1> %348, <4 x i32> %344, <4 x i32> %.v26, !dbg !103
  %349 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !103
  %350 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !65
  %351 = insertelement <4 x i32> %350, i32 %173, i64 1, !dbg !65
  %352 = insertelement <4 x i32> %351, i32 %174, i64 2, !dbg !65
  %353 = insertelement <4 x i32> %352, i32 %175, i64 3, !dbg !65
  %354 = bitcast <4 x i32> %353 to <4 x float>, !dbg !65
  %355 = fcmp olt <4 x float> %349, %354, !dbg !104
  %356 = fcmp uno <4 x float> %354, zeroinitializer, !dbg !106
  %357 = or <4 x i1> %356, %355, !dbg !107
  %.v28 = select <4 x i1> %357, <4 x i32> %353, <4 x i32> %.v27, !dbg !108
  %358 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !108
  %359 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !69
  %360 = insertelement <4 x i32> %359, i32 %190, i64 1, !dbg !69
  %361 = insertelement <4 x i32> %360, i32 %191, i64 2, !dbg !69
  %362 = insertelement <4 x i32> %361, i32 %192, i64 3, !dbg !69
  %363 = bitcast <4 x i32> %362 to <4 x float>, !dbg !69
  %364 = fcmp olt <4 x float> %358, %363, !dbg !109
  %365 = fcmp uno <4 x float> %363, zeroinitializer, !dbg !111
  %366 = or <4 x i1> %365, %364, !dbg !112
  %.v29 = select <4 x i1> %366, <4 x i32> %362, <4 x i32> %.v28, !dbg !113
  %367 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !113
  %368 = insertelement <4 x i32> poison, i32 %210, i64 0, !dbg !76
  %369 = insertelement <4 x i32> %368, i32 %211, i64 1, !dbg !76
  %370 = insertelement <4 x i32> %369, i32 %212, i64 2, !dbg !76
  %371 = insertelement <4 x i32> %370, i32 %213, i64 3, !dbg !76
  %372 = bitcast <4 x i32> %371 to <4 x float>, !dbg !76
  %373 = fcmp olt <4 x float> %367, %372, !dbg !114
  %374 = shufflevector <4 x float> %372, <4 x float> %286, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !125
  %375 = fcmp uno <8 x float> %374, zeroinitializer, !dbg !125
  %376 = extractelement <8 x i1> %375, i64 7, !dbg !116
  %377 = or i1 %376, %288, !dbg !116
  %378 = extractelement <8 x i1> %375, i64 6, !dbg !116
  %379 = or i1 %378, %289, !dbg !116
  %380 = extractelement <8 x i1> %375, i64 5, !dbg !116
  %381 = or i1 %380, %290, !dbg !116
  %382 = extractelement <8 x i1> %375, i64 4, !dbg !116
  %383 = or i1 %382, %291, !dbg !116
  %384 = extractelement <4 x i1> %373, i64 0, !dbg !116
  %385 = extractelement <8 x i1> %375, i64 3, !dbg !116
  %386 = or i1 %385, %384, !dbg !116
  %387 = extractelement <4 x i1> %373, i64 1, !dbg !116
  %388 = extractelement <8 x i1> %375, i64 2, !dbg !116
  %389 = or i1 %388, %387, !dbg !116
  %390 = extractelement <4 x i1> %373, i64 2, !dbg !116
  %391 = extractelement <8 x i1> %375, i64 1, !dbg !116
  %392 = or i1 %391, %390, !dbg !116
  %393 = extractelement <4 x i1> %373, i64 3, !dbg !116
  %394 = extractelement <8 x i1> %375, i64 0, !dbg !116
  %395 = or i1 %394, %393, !dbg !116
  %396 = zext <4 x i1> %310 to <4 x i8>, !dbg !117
  %397 = select <4 x i1> %319, <4 x i8> splat (i8 2), <4 x i8> %396, !dbg !118
  %398 = select <4 x i1> %328, <4 x i8> splat (i8 3), <4 x i8> %397, !dbg !119
  %399 = select <4 x i1> %337, <4 x i8> splat (i8 4), <4 x i8> %398, !dbg !120
  %400 = select <4 x i1> %346, <4 x i8> splat (i8 5), <4 x i8> %399, !dbg !121
  %401 = select <4 x i1> %355, <4 x i8> splat (i8 6), <4 x i8> %400, !dbg !122
  %402 = select <4 x i1> %364, <4 x i8> splat (i8 7), <4 x i8> %401, !dbg !123
  %403 = select <4 x i1> %373, <4 x i8> splat (i8 8), <4 x i8> %402, !dbg !124
  %404 = shl i32 %24, 4, !dbg !126
  %405 = shl i32 %25, 4, !dbg !126
  %406 = mul i32 %31, 9216, !dbg !127
  %407 = add i32 %406, %.decomposed31, !dbg !128
  %408 = add i32 %407, %404, !dbg !129
  %409 = add i32 %407, %405, !dbg !129
  %410 = sext i32 %408 to i64, !dbg !130
  %411 = getelementptr float, ptr addrspace(1) %1, i64 %410, !dbg !130
  %412 = sext i32 %409 to i64, !dbg !130
  %413 = getelementptr float, ptr addrspace(1) %1, i64 %412, !dbg !130
  %414 = and i1 %15, %26, !dbg !50
  %415 = and i1 %27, %15, !dbg !50
  %416 = and i1 %93, %91, !dbg !50
  %417 = shl i32 %8, 8, !dbg !131
  %418 = and i32 %417, 768, !dbg !131
  %419 = or disjoint i32 %418, %10, !dbg !131
  %420 = and i32 %11, 508, !dbg !131
  %421 = lshr exact i32 %418, 1, !dbg !131
  %422 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %421, !dbg !131
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %419, !dbg !131
  %424 = extractelement <4 x i32> %.v22, i64 0, !dbg !131
  %425 = select i1 %377, i32 %205, i32 %424, !dbg !132
  %426 = insertelement <1 x i32> poison, i32 %425, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %426, i1 true) #2, !dbg !131
  %427 = or disjoint i32 %419, 32, !dbg !131
  %428 = lshr i32 %427, 3, !dbg !131
  %429 = and i32 %428, 100, !dbg !131
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i32 %429, !dbg !131
  %431 = getelementptr float, ptr addrspace(3) %430, i32 %427, !dbg !131
  %432 = extractelement <4 x i32> %.v22, i64 1, !dbg !131
  %433 = select i1 %379, i32 %206, i32 %432, !dbg !132
  %434 = insertelement <1 x i32> poison, i32 %433, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %434, i1 true) #2, !dbg !131
  %435 = or disjoint i32 %419, 64, !dbg !131
  %436 = lshr i32 %435, 3, !dbg !131
  %437 = and i32 %436, 104, !dbg !131
  %438 = getelementptr float, ptr addrspace(3) @global_smem, i32 %437, !dbg !131
  %439 = getelementptr float, ptr addrspace(3) %438, i32 %435, !dbg !131
  %440 = extractelement <4 x i32> %.v22, i64 2, !dbg !131
  %441 = select i1 %381, i32 %207, i32 %440, !dbg !132
  %442 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %442, i1 true) #2, !dbg !131
  %443 = or disjoint i32 %419, 96, !dbg !131
  %444 = lshr i32 %443, 3, !dbg !131
  %445 = and i32 %444, 108, !dbg !131
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %445, !dbg !131
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %443, !dbg !131
  %448 = extractelement <4 x i32> %.v22, i64 3, !dbg !131
  %449 = select i1 %383, i32 %208, i32 %448, !dbg !132
  %450 = insertelement <1 x i32> poison, i32 %449, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %450, i1 true) #2, !dbg !131
  %451 = or disjoint i32 %419, 128, !dbg !131
  %452 = lshr i32 %451, 3, !dbg !131
  %453 = and i32 %452, 112, !dbg !131
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !131
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %451, !dbg !131
  %456 = extractelement <4 x i32> %.v29, i64 0, !dbg !131
  %457 = select i1 %386, i32 %210, i32 %456, !dbg !132
  %458 = insertelement <1 x i32> poison, i32 %457, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %458, i1 true) #2, !dbg !131
  %459 = or disjoint i32 %419, 160, !dbg !131
  %460 = lshr i32 %459, 3, !dbg !131
  %461 = and i32 %460, 116, !dbg !131
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !131
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %459, !dbg !131
  %464 = extractelement <4 x i32> %.v29, i64 1, !dbg !131
  %465 = select i1 %389, i32 %211, i32 %464, !dbg !132
  %466 = insertelement <1 x i32> poison, i32 %465, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %466, i1 true) #2, !dbg !131
  %467 = or disjoint i32 %419, 192, !dbg !131
  %468 = lshr i32 %467, 3, !dbg !131
  %469 = and i32 %468, 120, !dbg !131
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !131
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %467, !dbg !131
  %472 = extractelement <4 x i32> %.v29, i64 2, !dbg !131
  %473 = select i1 %392, i32 %212, i32 %472, !dbg !132
  %474 = insertelement <1 x i32> poison, i32 %473, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %474, i1 true) #2, !dbg !131
  %475 = or disjoint i32 %419, 224, !dbg !131
  %476 = lshr i32 %475, 3, !dbg !131
  %477 = and i32 %476, 124, !dbg !131
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !131
  %479 = getelementptr float, ptr addrspace(3) %478, i32 %475, !dbg !131
  %480 = extractelement <4 x i32> %.v29, i64 3, !dbg !131
  %481 = select i1 %395, i32 %213, i32 %480, !dbg !132
  %482 = insertelement <1 x i32> poison, i32 %481, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %482, i1 true) #2, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %483 = lshr i32 %11, 3, !dbg !131
  %484 = and i32 %483, 60, !dbg !131
  %485 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %484, !dbg !131
  %486 = getelementptr inbounds float, ptr addrspace(3) %485, i32 %420, !dbg !131
  %487 = or disjoint i32 %420, 512, !dbg !131
  %488 = lshr i32 %487, 3, !dbg !131
  %489 = and i32 %488, 124, !dbg !131
  %490 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %489, !dbg !131
  %491 = getelementptr inbounds float, ptr addrspace(3) %490, i32 %487, !dbg !131
  %492 = load <4 x i32>, ptr addrspace(3) %491, align 16, !dbg !131
  %.extract = load i32, ptr addrspace(3) %486, align 16, !dbg !131
  %493 = getelementptr inbounds i8, ptr addrspace(3) %486, i32 4, !dbg !131
  %.extract10 = load i32, ptr addrspace(3) %493, align 4, !dbg !131
  %494 = getelementptr inbounds i8, ptr addrspace(3) %486, i32 8, !dbg !131
  %.extract11 = load i32, ptr addrspace(3) %494, align 8, !dbg !131
  %495 = getelementptr inbounds i8, ptr addrspace(3) %486, i32 12, !dbg !131
  %.extract12 = load i32, ptr addrspace(3) %495, align 4, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %411, i1 %414) #2, !dbg !131
  %.extract13 = extractelement <4 x i32> %492, i64 0, !dbg !131
  %.extract14 = extractelement <4 x i32> %492, i64 1, !dbg !131
  %.extract15 = extractelement <4 x i32> %492, i64 2, !dbg !131
  %.extract16 = extractelement <4 x i32> %492, i64 3, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %413, i1 %415) #2, !dbg !131
  %496 = mul i32 %13, 320, !dbg !133
  %497 = add i32 %22, %496, !dbg !134
  %498 = sext i32 %497 to i64, !dbg !135
  %499 = getelementptr i8, ptr addrspace(1) %2, i64 %498, !dbg !135
  %500 = bitcast <4 x i8> %299 to i32, !dbg !136
  %501 = bitcast <4 x i8> %403 to i32, !dbg !136
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %500, i32 %501, ptr addrspace(1) %499, i1 %416) #2, !dbg !136
  ret void, !dbg !137
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6ijtva23cuteqkec5iksnu4hqrsf2ow6ntv6gac2t7rd5w6uwha.py", directory: "inductor_cache/6i")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_36", linkageName: "triton_poi_fused_max_pool2d_with_indices_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 28, column: 26, scope: !7)
!22 = !DILocation(line: 29, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 45, column: 19, scope: !7)
!27 = !DILocation(line: 46, column: 40, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 45, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 52, column: 42, scope: !7)
!33 = !DILocation(line: 52, column: 51, scope: !7)
!34 = !DILocation(line: 52, column: 31, scope: !7)
!35 = !DILocation(line: 57, column: 20, scope: !7)
!36 = !DILocation(line: 58, column: 19, scope: !7)
!37 = !DILocation(line: 59, column: 42, scope: !7)
!38 = !DILocation(line: 59, column: 51, scope: !7)
!39 = !DILocation(line: 59, column: 31, scope: !7)
!40 = !DILocation(line: 66, column: 43, scope: !7)
!41 = !DILocation(line: 66, column: 52, scope: !7)
!42 = !DILocation(line: 66, column: 31, scope: !7)
!43 = !DILocation(line: 69, column: 43, scope: !7)
!44 = !DILocation(line: 69, column: 52, scope: !7)
!45 = !DILocation(line: 69, column: 31, scope: !7)
!46 = !DILocation(line: 72, column: 43, scope: !7)
!47 = !DILocation(line: 72, column: 52, scope: !7)
!48 = !DILocation(line: 72, column: 31, scope: !7)
!49 = !DILocation(line: 77, column: 20, scope: !7)
!50 = !DILocation(line: 112, column: 63, scope: !7)
!51 = !DILocation(line: 46, column: 63, scope: !7)
!52 = !DILocation(line: 46, column: 71, scope: !7)
!53 = !DILocation(line: 46, column: 55, scope: !7)
!54 = !DILocation(line: 52, column: 61, scope: !7)
!55 = !DILocation(line: 59, column: 69, scope: !7)
!56 = !DILocation(line: 59, column: 77, scope: !7)
!57 = !DILocation(line: 59, column: 61, scope: !7)
!58 = !DILocation(line: 66, column: 62, scope: !7)
!59 = !DILocation(line: 69, column: 62, scope: !7)
!60 = !DILocation(line: 72, column: 62, scope: !7)
!61 = !DILocation(line: 79, column: 43, scope: !7)
!62 = !DILocation(line: 79, column: 52, scope: !7)
!63 = !DILocation(line: 79, column: 31, scope: !7)
!64 = !DILocation(line: 79, column: 78, scope: !7)
!65 = !DILocation(line: 79, column: 62, scope: !7)
!66 = !DILocation(line: 82, column: 43, scope: !7)
!67 = !DILocation(line: 82, column: 52, scope: !7)
!68 = !DILocation(line: 82, column: 31, scope: !7)
!69 = !DILocation(line: 82, column: 62, scope: !7)
!70 = !DILocation(line: 84, column: 20, scope: !7)
!71 = !DILocation(line: 85, column: 43, scope: !7)
!72 = !DILocation(line: 85, column: 52, scope: !7)
!73 = !DILocation(line: 85, column: 31, scope: !7)
!74 = !DILocation(line: 85, column: 70, scope: !7)
!75 = !DILocation(line: 85, column: 78, scope: !7)
!76 = !DILocation(line: 85, column: 62, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 53, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !85)
!85 = !DILocation(line: 60, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !90)
!90 = !DILocation(line: 67, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !95)
!95 = !DILocation(line: 70, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !100)
!100 = !DILocation(line: 73, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !110)
!110 = !DILocation(line: 83, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !115)
!115 = !DILocation(line: 86, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !115)
!117 = !DILocation(line: 90, column: 35, scope: !7)
!118 = !DILocation(line: 93, column: 35, scope: !7)
!119 = !DILocation(line: 96, column: 35, scope: !7)
!120 = !DILocation(line: 99, column: 35, scope: !7)
!121 = !DILocation(line: 102, column: 35, scope: !7)
!122 = !DILocation(line: 105, column: 35, scope: !7)
!123 = !DILocation(line: 108, column: 35, scope: !7)
!124 = !DILocation(line: 111, column: 35, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !115)
!126 = !DILocation(line: 112, column: 33, scope: !7)
!127 = !DILocation(line: 112, column: 43, scope: !7)
!128 = !DILocation(line: 112, column: 30, scope: !7)
!129 = !DILocation(line: 112, column: 38, scope: !7)
!130 = !DILocation(line: 112, column: 25, scope: !7)
!131 = !DILocation(line: 112, column: 55, scope: !7)
!132 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !115)
!133 = !DILocation(line: 113, column: 34, scope: !7)
!134 = !DILocation(line: 113, column: 30, scope: !7)
!135 = !DILocation(line: 113, column: 25, scope: !7)
!136 = !DILocation(line: 113, column: 46, scope: !7)
!137 = !DILocation(line: 113, column: 4, scope: !7)
