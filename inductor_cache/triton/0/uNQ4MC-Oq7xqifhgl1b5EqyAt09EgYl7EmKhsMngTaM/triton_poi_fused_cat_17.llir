; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 52528, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 67, !dbg !15
  %13 = mul i32 %12, 67, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %.frozen6 = freeze i32 %10, !dbg !15
  %14 = sdiv i32 %.frozen6, 67, !dbg !15
  %15 = mul i32 %14, 67, !dbg !16
  %.decomposed7 = sub i32 %.frozen6, %15, !dbg !16
  %16 = sdiv i32 %9, 13132, !dbg !17
  %17 = sdiv i32 %9, 938, !dbg !18
  %18 = srem i32 %17, 14, !dbg !19
  %19 = srem i32 %12, 14, !dbg !20
  %20 = srem i32 %14, 14, !dbg !20
  %21 = icmp slt i32 %.decomposed, 64, !dbg !21
  %22 = icmp slt i32 %.decomposed7, 64, !dbg !21
  %23 = shl nsw i32 %16, 6, !dbg !22
  %24 = add nsw i32 %23, %.decomposed, !dbg !23
  %25 = add nsw i32 %23, %.decomposed7, !dbg !23
  %26 = sext i32 %24 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = sext i32 %25 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = and i1 %11, %21, !dbg !25
  %31 = and i1 %22, %11, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %30, i32 0, i1 %30) #3, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %31, i32 0, i1 %31) #3, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = select i1 %21, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %37 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %36) #3, !dbg !28
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %37) #3, !dbg !28
  %40 = sitofp i32 %18 to float, !dbg !29
  %41 = fmul float %40, 0x3FB3B13B20000000, !dbg !30
  %42 = fmul float %41, 2.000000e+00, !dbg !31
  %43 = fadd float %42, -1.000000e+00, !dbg !32
  %44 = sitofp i32 %19 to float, !dbg !33
  %45 = sitofp i32 %20 to float, !dbg !33
  %46 = fmul float %44, 0x3FB3B13B20000000, !dbg !34
  %47 = fmul float %45, 0x3FB3B13B20000000, !dbg !34
  %48 = fmul float %46, 2.000000e+00, !dbg !35
  %49 = fmul float %47, 2.000000e+00, !dbg !35
  %50 = fadd float %48, -1.000000e+00, !dbg !36
  %51 = fadd float %49, -1.000000e+00, !dbg !36
  %52 = fadd float %43, -5.000000e-01, !dbg !37
  %53 = fmul float %52, %52, !dbg !38
  %54 = fadd float %50, -5.000000e-01, !dbg !39
  %55 = fadd float %51, -5.000000e-01, !dbg !39
  %56 = fmul float %54, %54, !dbg !40
  %57 = fmul float %55, %55, !dbg !40
  %58 = fadd float %53, %56, !dbg !41
  %59 = fadd float %57, %53, !dbg !41
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %60, 0, !dbg !42
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %61, 0, !dbg !42
  br i1 %.not.i, label %67, label %62, !dbg !42

62:                                               ; preds = %3
  br i1 %.not1.i, label %65, label %63, !dbg !42

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

67:                                               ; preds = %3
  br i1 %.not1.i, label %70, label %68, !dbg !42

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !42
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %72, 0, !dbg !42
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !42
  br i1 %.not.i1, label %79, label %74, !dbg !42

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !42

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !42

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !42
  %84 = icmp eq i32 %.decomposed7, 64, !dbg !43
  %85 = icmp eq i32 %.decomposed7, 65, !dbg !44
  %86 = select i1 %85, float %51, float 0.000000e+00, !dbg !45
  %87 = select i1 %84, float %43, float %86, !dbg !46
  %88 = select i1 %22, float %39, float %87, !dbg !47
  %89 = icmp eq i32 %.decomposed, 64, !dbg !43
  %90 = icmp eq i32 %.decomposed, 65, !dbg !44
  %91 = select i1 %90, float %50, float 0.000000e+00, !dbg !45
  %92 = select i1 %89, float %43, float %91, !dbg !46
  %93 = select i1 %21, float %38, float %92, !dbg !47
  %94 = icmp slt i32 %.decomposed7, 66, !dbg !48
  %95 = icmp slt i32 %.decomposed, 66, !dbg !48
  %96 = select i1 %95, float %93, float %.0.i, !dbg !49
  %97 = select i1 %94, float %88, float %.0.i3, !dbg !49
  %98 = sext i32 %9 to i64, !dbg !50
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !50
  %100 = bitcast float %96 to i32, !dbg !51
  %101 = bitcast float %97 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %99, i1 %11) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7yxjjf2wahezbver5ysvrgjv5tuafxxahticz6ja3wriuch5xcj.py", directory: "inductor_cache/7y")
!4 = !{ptr @triton_poi_fused_cat_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_17", linkageName: "triton_poi_fused_cat_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 21, scope: !7)
!19 = !DILocation(line: 26, column: 28, scope: !7)
!20 = !DILocation(line: 27, column: 27, scope: !7)
!21 = !DILocation(line: 38, column: 18, scope: !7)
!22 = !DILocation(line: 45, column: 34, scope: !7)
!23 = !DILocation(line: 45, column: 40, scope: !7)
!24 = !DILocation(line: 45, column: 31, scope: !7)
!25 = !DILocation(line: 45, column: 54, scope: !7)
!26 = !DILocation(line: 45, column: 46, scope: !7)
!27 = !DILocation(line: 48, column: 35, scope: !7)
!28 = !DILocation(line: 49, column: 20, scope: !7)
!29 = !DILocation(line: 58, column: 21, scope: !7)
!30 = !DILocation(line: 60, column: 20, scope: !7)
!31 = !DILocation(line: 62, column: 20, scope: !7)
!32 = !DILocation(line: 64, column: 20, scope: !7)
!33 = !DILocation(line: 72, column: 21, scope: !7)
!34 = !DILocation(line: 74, column: 20, scope: !7)
!35 = !DILocation(line: 76, column: 20, scope: !7)
!36 = !DILocation(line: 78, column: 20, scope: !7)
!37 = !DILocation(line: 97, column: 20, scope: !7)
!38 = !DILocation(line: 98, column: 20, scope: !7)
!39 = !DILocation(line: 104, column: 20, scope: !7)
!40 = !DILocation(line: 105, column: 20, scope: !7)
!41 = !DILocation(line: 106, column: 20, scope: !7)
!42 = !DILocation(line: 107, column: 27, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 70, column: 20, scope: !7)
!45 = !DILocation(line: 80, column: 35, scope: !7)
!46 = !DILocation(line: 81, column: 35, scope: !7)
!47 = !DILocation(line: 82, column: 34, scope: !7)
!48 = !DILocation(line: 33, column: 18, scope: !7)
!49 = !DILocation(line: 0, scope: !7)
!50 = !DILocation(line: 111, column: 25, scope: !7)
!51 = !DILocation(line: 111, column: 37, scope: !7)
!52 = !DILocation(line: 111, column: 4, scope: !7)
