; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = icmp slt i32 %7, 512, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %10 = shl i32 %9, 10, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = shl i32 %11, 2, !dbg !14
  %13 = and i32 %12, 508, !dbg !14
  %14 = or disjoint i32 %13, 1, !dbg !14
  %15 = or disjoint i32 %13, 2, !dbg !14
  %16 = or disjoint i32 %13, 3, !dbg !14
  %17 = or disjoint i32 %13, 513, !dbg !14
  %18 = or disjoint i32 %13, 514, !dbg !14
  %19 = or disjoint i32 %13, 515, !dbg !14
  %20 = and i32 %11, 127, !dbg !14
  %21 = or disjoint i32 %20, 128, !dbg !14
  %22 = or disjoint i32 %20, 256, !dbg !14
  %23 = or disjoint i32 %20, 384, !dbg !14
  %24 = or disjoint i32 %10, %13, !dbg !15
  %25 = or disjoint i32 %10, %14, !dbg !15
  %26 = or disjoint i32 %10, %15, !dbg !15
  %27 = or disjoint i32 %10, %16, !dbg !15
  %28 = or disjoint i32 %24, 512, !dbg !15
  %29 = or disjoint i32 %10, %17, !dbg !15
  %30 = or disjoint i32 %10, %18, !dbg !15
  %31 = or disjoint i32 %10, %19, !dbg !15
  %32 = or disjoint i32 %10, %20, !dbg !15
  %33 = or disjoint i32 %10, %21, !dbg !15
  %34 = or disjoint i32 %10, %22, !dbg !15
  %35 = or disjoint i32 %10, %23, !dbg !15
  %36 = or disjoint i32 %32, 512, !dbg !15
  %37 = or disjoint i32 %32, 640, !dbg !15
  %38 = or disjoint i32 %32, 768, !dbg !15
  %39 = or disjoint i32 %32, 896, !dbg !15
  %40 = icmp slt i32 %24, 1024, !dbg !16
  %41 = icmp slt i32 %28, 1024, !dbg !16
  %42 = icmp slt i32 %32, 1024, !dbg !16
  %43 = icmp slt i32 %33, 1024, !dbg !16
  %44 = icmp slt i32 %34, 1024, !dbg !16
  %45 = icmp slt i32 %35, 1024, !dbg !16
  %46 = icmp slt i32 %36, 1024, !dbg !16
  %47 = icmp slt i32 %37, 1024, !dbg !16
  %48 = icmp slt i32 %38, 1024, !dbg !16
  %49 = icmp slt i32 %39, 1024, !dbg !16
  %.frozen = freeze i32 %7, !dbg !17
  %50 = sdiv i32 %.frozen, 128, !dbg !17
  %51 = mul i32 %50, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %51, !dbg !18
  %52 = shl i32 %24, 7, !dbg !19
  %53 = shl i32 %25, 7, !dbg !19
  %54 = shl i32 %26, 7, !dbg !19
  %55 = shl i32 %27, 7, !dbg !19
  %56 = shl i32 %28, 7, !dbg !19
  %57 = shl i32 %29, 7, !dbg !19
  %58 = shl i32 %30, 7, !dbg !19
  %59 = shl i32 %31, 7, !dbg !19
  %60 = shl i32 %32, 7, !dbg !19
  %61 = shl i32 %33, 7, !dbg !19
  %62 = shl i32 %34, 7, !dbg !19
  %63 = shl i32 %35, 7, !dbg !19
  %64 = shl i32 %36, 7, !dbg !19
  %65 = shl i32 %37, 7, !dbg !19
  %66 = shl i32 %38, 7, !dbg !19
  %67 = shl i32 %39, 7, !dbg !19
  %68 = shl i32 %50, 17, !dbg !20
  %69 = add i32 %68, %.decomposed, !dbg !21
  %70 = add i32 %69, %52, !dbg !22
  %71 = add i32 %69, %53, !dbg !22
  %72 = add i32 %69, %54, !dbg !22
  %73 = add i32 %69, %55, !dbg !22
  %74 = add i32 %69, %56, !dbg !22
  %75 = add i32 %69, %57, !dbg !22
  %76 = add i32 %69, %58, !dbg !22
  %77 = add i32 %69, %59, !dbg !22
  %78 = add i32 %69, %60, !dbg !22
  %79 = add i32 %69, %61, !dbg !22
  %80 = add i32 %69, %62, !dbg !22
  %81 = add i32 %69, %63, !dbg !22
  %82 = add i32 %69, %64, !dbg !22
  %83 = add i32 %69, %65, !dbg !22
  %84 = add i32 %69, %66, !dbg !22
  %85 = add i32 %69, %67, !dbg !22
  %86 = sext i32 %70 to i64, !dbg !23
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !23
  %88 = sext i32 %71 to i64, !dbg !23
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !23
  %90 = sext i32 %72 to i64, !dbg !23
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !23
  %92 = sext i32 %73 to i64, !dbg !23
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !23
  %94 = sext i32 %74 to i64, !dbg !23
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !23
  %96 = sext i32 %75 to i64, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !23
  %98 = sext i32 %76 to i64, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !23
  %100 = sext i32 %77 to i64, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !23
  %102 = and i1 %8, %40, !dbg !24
  %103 = and i1 %41, %8, !dbg !24
  %104 = and i1 %8, %42, !dbg !24
  %105 = and i1 %8, %43, !dbg !24
  %106 = and i1 %8, %44, !dbg !24
  %107 = and i1 %8, %45, !dbg !24
  %108 = and i1 %46, %8, !dbg !24
  %109 = and i1 %47, %8, !dbg !24
  %110 = and i1 %48, %8, !dbg !24
  %111 = and i1 %49, %8, !dbg !24
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %102) #2, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %102) #2, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %102) #2, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %102) #2, !dbg !25
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %103) #2, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %103) #2, !dbg !25
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %103) #2, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %103) #2, !dbg !25
  %120 = sext i32 %.decomposed to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %8) #2, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %8) #2, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %8) #2, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %8) #2, !dbg !27
  %126 = insertelement <8 x i32> poison, i32 %119, i64 0, !dbg !25
  %127 = insertelement <8 x i32> %126, i32 %118, i64 1, !dbg !25
  %128 = insertelement <8 x i32> %127, i32 %117, i64 2, !dbg !25
  %129 = insertelement <8 x i32> %128, i32 %116, i64 3, !dbg !25
  %130 = insertelement <8 x i32> %129, i32 %115, i64 4, !dbg !25
  %131 = insertelement <8 x i32> %130, i32 %114, i64 5, !dbg !25
  %132 = insertelement <8 x i32> %131, i32 %113, i64 6, !dbg !25
  %133 = insertelement <8 x i32> %132, i32 %112, i64 7, !dbg !25
  %134 = bitcast <8 x i32> %133 to <8 x float>, !dbg !25
  %135 = insertelement <8 x i32> poison, i32 %125, i64 0, !dbg !28
  %136 = bitcast <8 x i32> %135 to <8 x float>, !dbg !28
  %137 = shufflevector <8 x float> %136, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !28
  %138 = fadd <8 x float> %137, %134, !dbg !28
  %139 = fcmp olt <8 x float> %138, zeroinitializer, !dbg !29
  %140 = extractelement <8 x i1> %139, i64 7, !dbg !33
  %141 = extractelement <8 x float> %138, i64 7, !dbg !33
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !33
  %143 = extractelement <8 x i1> %139, i64 6, !dbg !33
  %144 = extractelement <8 x float> %138, i64 6, !dbg !33
  %145 = select i1 %143, float 0.000000e+00, float %144, !dbg !33
  %146 = extractelement <8 x i1> %139, i64 5, !dbg !33
  %147 = extractelement <8 x float> %138, i64 5, !dbg !33
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !33
  %149 = extractelement <8 x i1> %139, i64 4, !dbg !33
  %150 = extractelement <8 x float> %138, i64 4, !dbg !33
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !33
  %152 = extractelement <8 x i1> %139, i64 3, !dbg !33
  %153 = extractelement <8 x float> %138, i64 3, !dbg !33
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !33
  %155 = extractelement <8 x i1> %139, i64 2, !dbg !33
  %156 = extractelement <8 x float> %138, i64 2, !dbg !33
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !33
  %158 = extractelement <8 x i1> %139, i64 1, !dbg !33
  %159 = extractelement <8 x float> %138, i64 1, !dbg !33
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !33
  %161 = extractelement <8 x i1> %139, i64 0, !dbg !33
  %162 = extractelement <8 x float> %138, i64 0, !dbg !33
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !33
  %164 = shl i32 %7, 10, !dbg !34
  %165 = add i32 %24, %164, !dbg !35
  %166 = add i32 %164, %28, !dbg !35
  %167 = sext i32 %165 to i64, !dbg !36
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !36
  %169 = sext i32 %166 to i64, !dbg !36
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !36
  %171 = bitcast float %142 to i32, !dbg !37
  %172 = bitcast float %145 to i32, !dbg !37
  %173 = bitcast float %148 to i32, !dbg !37
  %174 = bitcast float %151 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %172, i32 %173, i32 %174, ptr addrspace(1) %168, i1 %102) #2, !dbg !37
  %175 = bitcast float %154 to i32, !dbg !37
  %176 = bitcast float %157 to i32, !dbg !37
  %177 = bitcast float %160 to i32, !dbg !37
  %178 = bitcast float %163 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %175, i32 %176, i32 %177, i32 %178, ptr addrspace(1) %170, i1 %103) #2, !dbg !37
  %179 = sext i32 %78 to i64, !dbg !38
  %180 = getelementptr float, ptr addrspace(1) %3, i64 %179, !dbg !38
  %181 = sext i32 %79 to i64, !dbg !38
  %182 = getelementptr float, ptr addrspace(1) %3, i64 %181, !dbg !38
  %183 = sext i32 %80 to i64, !dbg !38
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %183, !dbg !38
  %185 = sext i32 %81 to i64, !dbg !38
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %185, !dbg !38
  %187 = sext i32 %82 to i64, !dbg !38
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !38
  %189 = sext i32 %83 to i64, !dbg !38
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !38
  %191 = sext i32 %84 to i64, !dbg !38
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !38
  %193 = sext i32 %85 to i64, !dbg !38
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !38
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !39
  %196 = bitcast float %142 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !39
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !39
  %198 = bitcast float %145 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !39
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !39
  %200 = bitcast float %148 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !39
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !39
  %202 = bitcast float %151 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !39
  %204 = load i32, ptr addrspace(3) %203, align 4, !dbg !39
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !39
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !39
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !39
  %208 = load i32, ptr addrspace(3) %207, align 4, !dbg !39
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !39
  %210 = load i32, ptr addrspace(3) %209, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %211 = bitcast float %154 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %211, i1 true) #2, !dbg !39
  %212 = bitcast float %157 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %212, i1 true) #2, !dbg !39
  %213 = bitcast float %160 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %213, i1 true) #2, !dbg !39
  %214 = bitcast float %163 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %214, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %215 = load i32, ptr addrspace(3) %203, align 4, !dbg !39
  %216 = load i32, ptr addrspace(3) %205, align 4, !dbg !39
  %217 = load i32, ptr addrspace(3) %207, align 4, !dbg !39
  %218 = load i32, ptr addrspace(3) %209, align 4, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %180, i1 %104) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %182, i1 %105) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %184, i1 %106) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %186, i1 %107) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %188, i1 %108) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %190, i1 %109) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %192, i1 %110) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %218, ptr addrspace(1) %194, i1 %111) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpubgpmidrlmzk57hyjosjdgze67mlvl7ooxugn66nqetw5dj5nn.py", directory: "inductor_cache/pu")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 64, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 46, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 57, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
