; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_mul_sigmoid_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = sdiv i32 %12, 4096, !dbg !14
  %15 = srem i32 %13, 64, !dbg !15
  %16 = srem i32 %14, 64, !dbg !15
  %17 = sext i32 %11 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = sext i32 %12 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = bitcast i32 %24 to float, !dbg !17
  %29 = bitcast i32 %25 to float, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = bitcast i32 %32 to float, !dbg !17
  %37 = bitcast i32 %33 to float, !dbg !17
  %38 = bitcast i32 %34 to float, !dbg !17
  %39 = sext i32 %15 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = sext i32 %16 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !18
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !19
  %46 = bitcast i32 %45 to float, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !19
  %50 = bitcast i32 %49 to float, !dbg !19
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !19
  %52 = bitcast i32 %51 to float, !dbg !19
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !19
  %54 = bitcast i32 %53 to float, !dbg !19
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !19
  %58 = bitcast i32 %57 to float, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !20
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !21
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !21
  %66 = bitcast i32 %62 to float, !dbg !21
  %67 = bitcast i32 %63 to float, !dbg !21
  %68 = bitcast i32 %64 to float, !dbg !21
  %69 = bitcast i32 %65 to float, !dbg !21
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !21
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !21
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !21
  %75 = bitcast i32 %71 to float, !dbg !21
  %76 = bitcast i32 %72 to float, !dbg !21
  %77 = bitcast i32 %73 to float, !dbg !21
  %78 = bitcast i32 %74 to float, !dbg !21
  %79 = fadd float %26, %44, !dbg !22
  %80 = fadd float %27, %46, !dbg !22
  %81 = fadd float %28, %48, !dbg !22
  %82 = fadd float %29, %50, !dbg !22
  %83 = fadd float %35, %52, !dbg !22
  %84 = fadd float %36, %54, !dbg !22
  %85 = fadd float %37, %56, !dbg !22
  %86 = fadd float %38, %58, !dbg !22
  %87 = fsub float 0.000000e+00, %79, !dbg !23
  %88 = fsub float 0.000000e+00, %80, !dbg !23
  %89 = fsub float 0.000000e+00, %81, !dbg !23
  %90 = fsub float 0.000000e+00, %82, !dbg !23
  %91 = fsub float 0.000000e+00, %83, !dbg !23
  %92 = fsub float 0.000000e+00, %84, !dbg !23
  %93 = fsub float 0.000000e+00, %85, !dbg !23
  %94 = fsub float 0.000000e+00, %86, !dbg !23
  %95 = fmul float %87, 0x3FF7154760000000, !dbg !27
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !27
  %97 = fmul float %88, 0x3FF7154760000000, !dbg !27
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %97) #1, !dbg !27
  %99 = fmul float %89, 0x3FF7154760000000, !dbg !27
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #1, !dbg !27
  %101 = fmul float %90, 0x3FF7154760000000, !dbg !27
  %102 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %101) #1, !dbg !27
  %103 = fmul float %91, 0x3FF7154760000000, !dbg !27
  %104 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %103) #1, !dbg !27
  %105 = fmul float %92, 0x3FF7154760000000, !dbg !27
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #1, !dbg !27
  %107 = fmul float %93, 0x3FF7154760000000, !dbg !27
  %108 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %107) #1, !dbg !27
  %109 = fmul float %94, 0x3FF7154760000000, !dbg !27
  %110 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %109) #1, !dbg !27
  %111 = fadd float %96, 1.000000e+00, !dbg !28
  %112 = fadd float %98, 1.000000e+00, !dbg !28
  %113 = fadd float %100, 1.000000e+00, !dbg !28
  %114 = fadd float %102, 1.000000e+00, !dbg !28
  %115 = fadd float %104, 1.000000e+00, !dbg !28
  %116 = fadd float %106, 1.000000e+00, !dbg !28
  %117 = fadd float %108, 1.000000e+00, !dbg !28
  %118 = fadd float %110, 1.000000e+00, !dbg !28
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %111) #1, !dbg !29
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %112) #1, !dbg !29
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %113) #1, !dbg !29
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %114) #1, !dbg !29
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %115) #1, !dbg !29
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %116) #1, !dbg !29
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %117) #1, !dbg !29
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %118) #1, !dbg !29
  %127 = fmul float %119, %66, !dbg !30
  %128 = fmul float %120, %67, !dbg !30
  %129 = fmul float %121, %68, !dbg !30
  %130 = fmul float %122, %69, !dbg !30
  %131 = fmul float %123, %75, !dbg !30
  %132 = fmul float %124, %76, !dbg !30
  %133 = fmul float %125, %77, !dbg !30
  %134 = fmul float %126, %78, !dbg !30
  %135 = bitcast float %79 to i32, !dbg !31
  %136 = bitcast float %80 to i32, !dbg !31
  %137 = bitcast float %81 to i32, !dbg !31
  %138 = bitcast float %82 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %135, i32 %136, i32 %137, i32 %138, ptr addrspace(1) %18, i1 true) #1, !dbg !31
  %139 = bitcast float %83 to i32, !dbg !31
  %140 = bitcast float %84 to i32, !dbg !31
  %141 = bitcast float %85 to i32, !dbg !31
  %142 = bitcast float %86 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %139, i32 %140, i32 %141, i32 %142, ptr addrspace(1) %20, i1 true) #1, !dbg !31
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !32
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !32
  %145 = bitcast float %127 to i32, !dbg !33
  %146 = bitcast float %128 to i32, !dbg !33
  %147 = bitcast float %129 to i32, !dbg !33
  %148 = bitcast float %130 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %146, i32 %147, i32 %148, ptr addrspace(1) %143, i1 true) #1, !dbg !33
  %149 = bitcast float %131 to i32, !dbg !33
  %150 = bitcast float %132 to i32, !dbg !33
  %151 = bitcast float %133 to i32, !dbg !33
  %152 = bitcast float %134 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %150, i32 %151, i32 %152, ptr addrspace(1) %144, i1 true) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgy2ziax5tles7q3kbvedh4zhb4c3nxa4dow4yjjjlllo4r4q3hn.py", directory: "inductor_cache/gy")
!4 = !{ptr @triton_poi_fused_convolution_mul_sigmoid_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_mul_sigmoid_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_mul_sigmoid_7", linkageName: "triton_poi_fused_convolution_mul_sigmoid_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 30, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 39, scope: !7)
!32 = !DILocation(line: 33, column: 25, scope: !7)
!33 = !DILocation(line: 33, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 4, scope: !7)
