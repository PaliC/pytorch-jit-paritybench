; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 12, !dbg !14
  %15 = srem i32 %14, 12, !dbg !15
  %16 = mul i32 %14, 12, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = sdiv i32 %13, 144, !dbg !17
  %18 = srem i32 %17, 64, !dbg !18
  %19 = and i32 %15, -4, !dbg !19
  %20 = icmp eq i32 %19, 4, !dbg !19
  %21 = icmp eq i32 %.decomposed, 4, !dbg !20
  %22 = and i1 %21, %20, !dbg !20
  %23 = add nsw i32 %.decomposed, -20, !dbg !21
  %24 = shl nsw i32 %15, 2, !dbg !22
  %25 = shl nsw i32 %17, 4, !dbg !23
  %26 = add nsw i32 %23, %25, !dbg !24
  %27 = add nsw i32 %26, %24, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !27
  %31 = sext i32 %18 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %22, i32 0, i1 %22) #3, !dbg !29
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %22, i32 0, i1 %22) #3, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %22, i32 0, i1 %22) #3, !dbg !29
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %22, i32 0, i1 %22) #3, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %41 = bitcast i32 %40 to float, !dbg !31
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %43 = bitcast i32 %42 to float, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !31
  %45 = bitcast i32 %44 to float, !dbg !31
  %46 = fadd float %39, 0x3EE4F8B580000000, !dbg !32
  %47 = fadd float %41, 0x3EE4F8B580000000, !dbg !32
  %48 = fadd float %43, 0x3EE4F8B580000000, !dbg !32
  %49 = fadd float %45, 0x3EE4F8B580000000, !dbg !32
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %50, 0, !dbg !33
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %51, 0, !dbg !33
  br i1 %.not.i, label %57, label %52, !dbg !33

52:                                               ; preds = %7
  br i1 %.not1.i, label %55, label %53, !dbg !33

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

57:                                               ; preds = %7
  br i1 %.not1.i, label %60, label %58, !dbg !33

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !33
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %62, 0, !dbg !33
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i4 = icmp eq i32 %63, 0, !dbg !33
  br i1 %.not.i1, label %69, label %64, !dbg !33

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !33

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !33

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %65, %67, %70, %72
  %.0.i3 = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !33
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i6 = icmp eq i32 %74, 0, !dbg !33
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i9 = icmp eq i32 %75, 0, !dbg !33
  br i1 %.not.i6, label %81, label %76, !dbg !33

76:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %79, label %77, !dbg !33

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

81:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %84, label %82, !dbg !33

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

__nv_sqrtf.exit10:                                ; preds = %77, %79, %82, %84
  %.0.i8 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !33
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i11 = icmp eq i32 %86, 0, !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i14 = icmp eq i32 %87, 0, !dbg !33
  br i1 %.not.i11, label %93, label %88, !dbg !33

88:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %91, label %89, !dbg !33

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

93:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %96, label %94, !dbg !33

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %89, %91, %94, %96
  %.0.i13 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !27
  %99 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !29
  %100 = insertelement <4 x i32> %99, i32 %35, i64 1, !dbg !29
  %101 = insertelement <4 x i32> %100, i32 %34, i64 2, !dbg !29
  %102 = insertelement <4 x i32> %101, i32 %33, i64 3, !dbg !29
  %103 = bitcast <4 x i32> %102 to <4 x float>, !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !27
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !34
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !34
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !34
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !35
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %22, i32 0, i1 %22) #3, !dbg !36
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !37
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %22, i32 0, i1 %22) #3, !dbg !38
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %22, i32 0, i1 %22) #3, !dbg !38
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %22, i32 0, i1 %22) #3, !dbg !38
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %22, i32 0, i1 %22) #3, !dbg !38
  %121 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !27
  %122 = insertelement <4 x i32> %121, i32 %104, i64 1, !dbg !27
  %123 = insertelement <4 x i32> %122, i32 %105, i64 2, !dbg !27
  %124 = insertelement <4 x i32> %123, i32 %106, i64 3, !dbg !27
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !27
  %126 = fsub <4 x float> %125, %103, !dbg !39
  %127 = insertelement <4 x float> poison, float %110, i64 0, !dbg !40
  %128 = insertelement <4 x float> %127, float %109, i64 1, !dbg !40
  %129 = insertelement <4 x float> %128, float %108, i64 2, !dbg !40
  %130 = insertelement <4 x float> %129, float %107, i64 3, !dbg !40
  %131 = fmul <4 x float> %126, %130, !dbg !40
  %132 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !36
  %133 = insertelement <4 x i32> %132, i32 %114, i64 1, !dbg !36
  %134 = insertelement <4 x i32> %133, i32 %113, i64 2, !dbg !36
  %135 = insertelement <4 x i32> %134, i32 %112, i64 3, !dbg !36
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !36
  %137 = fmul <4 x float> %131, %136, !dbg !41
  %138 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !38
  %139 = insertelement <4 x i32> %138, i32 %119, i64 1, !dbg !38
  %140 = insertelement <4 x i32> %139, i32 %118, i64 2, !dbg !38
  %141 = insertelement <4 x i32> %140, i32 %117, i64 3, !dbg !38
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !38
  %143 = fadd <4 x float> %137, %142, !dbg !42
  %144 = fcmp olt <4 x float> %143, zeroinitializer, !dbg !43
  %145 = extractelement <4 x i1> %144, i64 3, !dbg !47
  %146 = extractelement <4 x i1> %144, i64 2, !dbg !47
  %147 = extractelement <4 x i1> %144, i64 1, !dbg !47
  %148 = extractelement <4 x i1> %144, i64 0, !dbg !47
  %149 = sext i32 %13 to i64, !dbg !48
  %150 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !48
  %bc = bitcast <4 x float> %143 to <4 x i32>, !dbg !49
  %151 = extractelement <4 x i32> %bc, i64 3, !dbg !49
  %152 = select i1 %145, i32 0, i32 %151, !dbg !47
  %153 = select i1 %22, i32 %152, i32 0, !dbg !50
  %bc16 = bitcast <4 x float> %143 to <4 x i32>, !dbg !49
  %154 = extractelement <4 x i32> %bc16, i64 2, !dbg !49
  %155 = select i1 %146, i32 0, i32 %154, !dbg !47
  %156 = select i1 %22, i32 %155, i32 0, !dbg !50
  %bc17 = bitcast <4 x float> %143 to <4 x i32>, !dbg !49
  %157 = extractelement <4 x i32> %bc17, i64 1, !dbg !49
  %158 = select i1 %147, i32 0, i32 %157, !dbg !47
  %159 = select i1 %22, i32 %158, i32 0, !dbg !50
  %bc18 = bitcast <4 x float> %143 to <4 x i32>, !dbg !49
  %160 = extractelement <4 x i32> %bc18, i64 0, !dbg !49
  %161 = select i1 %148, i32 0, i32 %160, !dbg !47
  %162 = select i1 %22, i32 %161, i32 0, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %156, i32 %159, i32 %162, ptr addrspace(1) %150, i1 true) #3, !dbg !49
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chgtyzcemac3nadoe7hmnult4bjndb5xwh3qourjzcnxhqztumze.py", directory: "inductor_cache/hg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 37, column: 18, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 39, scope: !7)
!22 = !DILocation(line: 40, column: 46, scope: !7)
!23 = !DILocation(line: 40, column: 54, scope: !7)
!24 = !DILocation(line: 40, column: 44, scope: !7)
!25 = !DILocation(line: 40, column: 51, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 59, scope: !7)
!28 = !DILocation(line: 41, column: 31, scope: !7)
!29 = !DILocation(line: 41, column: 36, scope: !7)
!30 = !DILocation(line: 43, column: 31, scope: !7)
!31 = !DILocation(line: 43, column: 36, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 27, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 36, scope: !7)
!37 = !DILocation(line: 54, column: 31, scope: !7)
!38 = !DILocation(line: 54, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 57, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 60, column: 25, scope: !7)
!49 = !DILocation(line: 60, column: 37, scope: !7)
!50 = !DILocation(line: 59, column: 35, scope: !7)
!51 = !DILocation(line: 60, column: 4, scope: !7)
