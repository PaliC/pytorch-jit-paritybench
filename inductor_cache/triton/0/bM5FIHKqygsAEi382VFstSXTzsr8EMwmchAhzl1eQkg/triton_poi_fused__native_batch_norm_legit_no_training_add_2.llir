; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %18 = shl i32 %17, 4, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = lshr i32 %19, 1, !dbg !12
  %21 = and i32 %20, 3, !dbg !12
  %22 = lshr i32 %19, 1, !dbg !12
  %23 = and i32 %22, 4, !dbg !12
  %24 = lshr i32 %19, 1, !dbg !12
  %25 = and i32 %24, 8, !dbg !12
  %26 = and i32 %19, 1, !dbg !12
  %27 = shl nuw nsw i32 %26, 1, !dbg !12
  %28 = shl i32 %19, 1, !dbg !12
  %29 = and i32 %28, 14, !dbg !12
  %30 = or disjoint i32 %23, %21, !dbg !12
  %31 = or disjoint i32 %30, %25, !dbg !12
  %32 = or disjoint i32 %31, %18, !dbg !13
  %33 = or disjoint i32 %18, %29, !dbg !13
  %34 = icmp slt i32 %32, 16, !dbg !14
  %35 = icmp slt i32 %33, 16, !dbg !14
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %37 = shl i32 %36, 2, !dbg !16
  %.lobit119 = lshr i32 %19, 3, !dbg !17
  %38 = and i32 %.lobit119, 3, !dbg !17
  %39 = or disjoint i32 %37, %27, !dbg !18
  %40 = or disjoint i32 %38, %37, !dbg !18
  %41 = icmp slt i32 %39, 4, !dbg !19
  %42 = icmp slt i32 %40, 4, !dbg !19
  %.frozen = freeze i32 %33, !dbg !20
  %43 = sdiv i32 %.frozen, 4, !dbg !20
  %44 = mul i32 %43, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %44, !dbg !21
  %45 = srem i32 %32, 4, !dbg !21
  %46 = shl i32 %32, 2, !dbg !22
  %47 = add i32 %39, %46, !dbg !23
  %48 = sext i32 %47 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = and i1 %34, %41, !dbg !25
  %51 = and i1 %35, %42, !dbg !25
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %50) #4, !dbg !26
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !26
  %55 = shl nuw nsw i32 %26, 5, !dbg !26
  %56 = or disjoint i32 %55, %21, !dbg !26
  %57 = or disjoint i32 %56, %23, !dbg !26
  %58 = or disjoint i32 %57, %25, !dbg !26
  %59 = and i32 %28, 62, !dbg !26
  %60 = shl nuw nsw i32 %26, 2, !dbg !26
  %61 = add nuw nsw i32 %58, %60, !dbg !26
  %62 = zext nneg i32 %61 to i64, !dbg !26
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %62, !dbg !26
  %64 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !26
  %65 = or disjoint i32 %58, 16, !dbg !26
  %66 = lshr i32 %65, 3, !dbg !26
  %67 = and i32 %66, 536870910, !dbg !26
  %68 = add nuw nsw i32 %67, %65, !dbg !26
  %69 = zext nneg i32 %68 to i64, !dbg !26
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %69, !dbg !26
  %71 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %72 = lshr i32 %28, 3, !dbg !26
  %73 = and i32 %72, 6, !dbg !26
  %74 = add nuw nsw i32 %73, %59, !dbg !26
  %75 = zext nneg i32 %74 to i64, !dbg !26
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %75, !dbg !26
  %77 = load float, ptr addrspace(3) %76, align 8, !dbg !26
  %78 = getelementptr inbounds i8, ptr addrspace(3) %76, i64 4, !dbg !26
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %80 = shl i32 %40, 2, !dbg !27
  %81 = add i32 %80, %.decomposed, !dbg !28
  %82 = shl i32 %43, 4, !dbg !29
  %83 = add i32 %81, %82, !dbg !30
  %84 = sext i32 %83 to i64, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !31
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %51) #4, !dbg !32
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !32
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !32
  %89 = bitcast i32 %87 to float, !dbg !32
  %90 = bitcast i32 %88 to float, !dbg !32
  %91 = sext i32 %.decomposed to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !33
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 %35) #4, !dbg !34
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !34
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !34
  %96 = bitcast i32 %94 to float, !dbg !34
  %97 = bitcast i32 %95 to float, !dbg !34
  %98 = shl nsw i32 %45, 2, !dbg !35
  %99 = add i32 %98, %39, !dbg !36
  %100 = sext i32 %99 to i64, !dbg !37
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !37
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %101, i1 %50) #4, !dbg !38
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !39
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %103, i1 %50) #4, !dbg !40
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !40
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !40
  %107 = bitcast i32 %105 to float, !dbg !40
  %108 = bitcast i32 %106 to float, !dbg !40
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %100, !dbg !41
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %109, i1 %50) #4, !dbg !42
  %111 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !43
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %111, i1 %50) #4, !dbg !44
  %113 = getelementptr float, ptr addrspace(1) %7, i64 %100, !dbg !45
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %113, i1 %50) #4, !dbg !46
  %115 = getelementptr float, ptr addrspace(1) %8, i64 %100, !dbg !47
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %115, i1 %50) #4, !dbg !48
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !48
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !48
  %119 = bitcast i32 %117 to float, !dbg !48
  %120 = bitcast i32 %118 to float, !dbg !48
  %121 = getelementptr float, ptr addrspace(1) %9, i64 %100, !dbg !49
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %121, i1 %50) #4, !dbg !50
  %123 = getelementptr float, ptr addrspace(1) %10, i64 %100, !dbg !51
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %123, i1 %50) #4, !dbg !52
  %125 = fadd float %89, %96, !dbg !53
  %126 = fadd float %90, %97, !dbg !53
  %127 = fcmp olt float %125, 0.000000e+00, !dbg !54
  %128 = fcmp olt float %126, 0.000000e+00, !dbg !54
  %129 = select i1 %127, float 0.000000e+00, float %125, !dbg !58
  %130 = select i1 %128, float 0.000000e+00, float %126, !dbg !58
  %131 = fadd float %77, %129, !dbg !59
  %132 = fadd float %79, %130, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %133 = shl i32 %19, 3, !dbg !59
  %134 = and i32 %133, 56, !dbg !59
  %135 = or disjoint i32 %38, %134, !dbg !59
  %136 = lshr exact i32 %134, 2, !dbg !59
  %137 = add nuw nsw i32 %135, %136, !dbg !59
  %138 = zext nneg i32 %137 to i64, !dbg !59
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !59
  %140 = bitcast float %131 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #4, !dbg !59
  %141 = or disjoint i32 %135, 4, !dbg !59
  %142 = lshr i32 %141, 2, !dbg !59
  %143 = add nuw nsw i32 %142, %141, !dbg !59
  %144 = zext nneg i32 %143 to i64, !dbg !59
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !59
  %146 = bitcast float %132 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %147 = lshr i32 %59, 2, !dbg !59
  %148 = add nuw nsw i32 %147, %59, !dbg !59
  %149 = zext nneg i32 %148 to i64, !dbg !59
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !59
  %151 = load float, ptr addrspace(3) %150, align 4, !dbg !59
  %152 = or disjoint i32 %59, 1, !dbg !59
  %153 = add nuw nsw i32 %152, %147, !dbg !59
  %154 = zext nneg i32 %153 to i64, !dbg !59
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !59
  %156 = load float, ptr addrspace(3) %155, align 4, !dbg !59
  %157 = fadd float %107, 0x3EE4F8B580000000, !dbg !60
  %158 = fadd float %108, 0x3EE4F8B580000000, !dbg !60
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !61
  %.not.i = icmp eq i32 %159, 0, !dbg !61
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !61
  %.not1.i = icmp eq i32 %160, 0, !dbg !61
  br i1 %.not.i, label %166, label %161, !dbg !61

161:                                              ; preds = %16
  br i1 %.not1.i, label %164, label %162, !dbg !61

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

166:                                              ; preds = %16
  br i1 %.not1.i, label %169, label %167, !dbg !61

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %162, %164, %167, %169
  %.0.i = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !61
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !61
  %.not.i4 = icmp eq i32 %171, 0, !dbg !61
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !61
  %.not1.i7 = icmp eq i32 %172, 0, !dbg !61
  br i1 %.not.i4, label %178, label %173, !dbg !61

173:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %176, label %174, !dbg !61

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #4, !dbg !61
  br label %__nv_sqrtf.exit8, !dbg !61

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #4, !dbg !61
  br label %__nv_sqrtf.exit8, !dbg !61

178:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %181, label %179, !dbg !61

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #4, !dbg !61
  br label %__nv_sqrtf.exit8, !dbg !61

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #4, !dbg !61
  br label %__nv_sqrtf.exit8, !dbg !61

__nv_sqrtf.exit8:                                 ; preds = %174, %176, %179, %181
  %.0.i6 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !61
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !62
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !62
  %185 = fadd float %119, 0x3EE4F8B580000000, !dbg !63
  %186 = fadd float %120, 0x3EE4F8B580000000, !dbg !63
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i9 = icmp eq i32 %187, 0, !dbg !64
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i12 = icmp eq i32 %188, 0, !dbg !64
  br i1 %.not.i9, label %194, label %189, !dbg !64

189:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %192, label %190, !dbg !64

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %185) #4, !dbg !64
  br label %__nv_sqrtf.exit13, !dbg !64

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %185) #4, !dbg !64
  br label %__nv_sqrtf.exit13, !dbg !64

194:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %197, label %195, !dbg !64

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %185) #4, !dbg !64
  br label %__nv_sqrtf.exit13, !dbg !64

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %185) #4, !dbg !64
  br label %__nv_sqrtf.exit13, !dbg !64

__nv_sqrtf.exit13:                                ; preds = %190, %192, %195, %197
  %.0.i11 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !64
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i14 = icmp eq i32 %199, 0, !dbg !64
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i17 = icmp eq i32 %200, 0, !dbg !64
  br i1 %.not.i14, label %206, label %201, !dbg !64

201:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %204, label %202, !dbg !64

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %186) #4, !dbg !64
  br label %__nv_sqrtf.exit18, !dbg !64

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %186) #4, !dbg !64
  br label %__nv_sqrtf.exit18, !dbg !64

206:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %209, label %207, !dbg !64

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %186) #4, !dbg !64
  br label %__nv_sqrtf.exit18, !dbg !64

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %186) #4, !dbg !64
  br label %__nv_sqrtf.exit18, !dbg !64

__nv_sqrtf.exit18:                                ; preds = %202, %204, %207, %209
  %.0.i16 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !64
  %211 = extractvalue { i32, i32 } %102, 1, !dbg !38
  %212 = bitcast i32 %211 to float, !dbg !38
  %213 = fsub float %156, %212, !dbg !65
  %214 = fmul float %213, %184, !dbg !66
  %215 = extractvalue { i32, i32 } %110, 1, !dbg !42
  %216 = bitcast i32 %215 to float, !dbg !42
  %217 = fmul float %214, %216, !dbg !67
  %218 = extractvalue { i32, i32 } %112, 1, !dbg !44
  %219 = bitcast i32 %218 to float, !dbg !44
  %220 = fadd float %217, %219, !dbg !68
  %221 = extractvalue { i32, i32 } %114, 1, !dbg !46
  %222 = bitcast i32 %221 to float, !dbg !46
  %223 = fsub float %220, %222, !dbg !69
  %224 = extractvalue { i32, i32 } %102, 0, !dbg !38
  %225 = bitcast i32 %224 to float, !dbg !38
  %226 = fsub float %151, %225, !dbg !65
  %227 = fmul float %226, %183, !dbg !66
  %228 = extractvalue { i32, i32 } %110, 0, !dbg !42
  %229 = bitcast i32 %228 to float, !dbg !42
  %230 = fmul float %227, %229, !dbg !67
  %231 = extractvalue { i32, i32 } %112, 0, !dbg !44
  %232 = bitcast i32 %231 to float, !dbg !44
  %233 = fadd float %230, %232, !dbg !68
  %234 = extractvalue { i32, i32 } %114, 0, !dbg !46
  %235 = bitcast i32 %234 to float, !dbg !46
  %236 = fsub float %233, %235, !dbg !69
  %237 = extractvalue { i32, i32 } %124, 1, !dbg !52
  %238 = bitcast i32 %237 to float, !dbg !52
  %239 = extractvalue { i32, i32 } %124, 0, !dbg !52
  %240 = bitcast i32 %239 to float, !dbg !52
  %241 = extractvalue { i32, i32 } %122, 1, !dbg !50
  %242 = bitcast i32 %241 to float, !dbg !50
  %243 = extractvalue { i32, i32 } %122, 0, !dbg !50
  %244 = bitcast i32 %243 to float, !dbg !50
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !70
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !70
  %247 = fmul float %236, %245, !dbg !71
  %248 = fmul float %223, %246, !dbg !71
  %249 = fmul float %247, %244, !dbg !72
  %250 = fmul float %248, %242, !dbg !72
  %251 = fadd float %249, %240, !dbg !73
  %252 = fadd float %250, %238, !dbg !73
  %253 = getelementptr float, ptr addrspace(1) %11, i64 %48, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #4, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %254 = load i32, ptr addrspace(3) %150, align 4, !dbg !75
  %255 = load i32, ptr addrspace(3) %155, align 4, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %254, i32 %255, ptr addrspace(1) %253, i1 %50) #4, !dbg !75
  %256 = getelementptr float, ptr addrspace(1) %12, i64 %48, !dbg !76
  %257 = bitcast float %233 to i32, !dbg !77
  %258 = bitcast float %220 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %257, i32 %258, ptr addrspace(1) %256, i1 %50) #4, !dbg !77
  %259 = getelementptr float, ptr addrspace(1) %13, i64 %48, !dbg !78
  %260 = bitcast float %251 to i32, !dbg !79
  %261 = bitcast float %252 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %260, i32 %261, ptr addrspace(1) %259, i1 %50) #4, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqncs52p2cuscbxxnbktpxxboosgyzzt2xapufoo4qmqesw6ve46.py", directory: "inductor_cache/qn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 50, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 37, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 42, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 43, scope: !7)
!43 = !DILocation(line: 38, column: 31, scope: !7)
!44 = !DILocation(line: 38, column: 43, scope: !7)
!45 = !DILocation(line: 39, column: 31, scope: !7)
!46 = !DILocation(line: 39, column: 43, scope: !7)
!47 = !DILocation(line: 40, column: 31, scope: !7)
!48 = !DILocation(line: 40, column: 43, scope: !7)
!49 = !DILocation(line: 41, column: 31, scope: !7)
!50 = !DILocation(line: 41, column: 43, scope: !7)
!51 = !DILocation(line: 42, column: 32, scope: !7)
!52 = !DILocation(line: 42, column: 44, scope: !7)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 45, column: 40, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 46, column: 18, scope: !7)
!60 = !DILocation(line: 49, column: 19, scope: !7)
!61 = !DILocation(line: 50, column: 27, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 59, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 27, scope: !7)
!65 = !DILocation(line: 47, column: 18, scope: !7)
!66 = !DILocation(line: 55, column: 19, scope: !7)
!67 = !DILocation(line: 56, column: 20, scope: !7)
!68 = !DILocation(line: 57, column: 20, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 61, column: 20, scope: !7)
!71 = !DILocation(line: 63, column: 20, scope: !7)
!72 = !DILocation(line: 64, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 20, scope: !7)
!74 = !DILocation(line: 66, column: 25, scope: !7)
!75 = !DILocation(line: 66, column: 43, scope: !7)
!76 = !DILocation(line: 67, column: 25, scope: !7)
!77 = !DILocation(line: 67, column: 44, scope: !7)
!78 = !DILocation(line: 68, column: 25, scope: !7)
!79 = !DILocation(line: 68, column: 44, scope: !7)
!80 = !DILocation(line: 68, column: 4, scope: !7)
