; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = icmp slt i32 %12, 256, !dbg !14
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %20, 1, !dbg !17
  %21 = or disjoint i32 %.lobit, 2, !dbg !17
  %22 = or disjoint i32 %19, %.lobit, !dbg !18
  %23 = or disjoint i32 %19, %21, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %24 = sdiv i32 %.frozen, 64, !dbg !19
  %25 = mul i32 %24, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %26 = shl i32 %22, 6, !dbg !21
  %27 = shl i32 %23, 6, !dbg !21
  %28 = shl i32 %24, 18, !dbg !22
  %29 = add i32 %28, %.decomposed, !dbg !23
  %30 = add i32 %29, %26, !dbg !24
  %31 = add i32 %29, %27, !dbg !24
  %32 = sext i32 %30 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = sext i32 %31 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #2, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = shl i32 %13, 12, !dbg !27
  %47 = shl i32 %14, 12, !dbg !27
  %48 = add i32 %46, %19, !dbg !28
  %49 = add i32 %19, %47, !dbg !28
  %50 = sext i32 %48 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !29
  %52 = sext i32 %49 to i64, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !29
  %54 = shl i32 %8, 4, !dbg !30
  %55 = and i32 %54, 1008, !dbg !30
  %56 = or disjoint i32 %55, %.lobit, !dbg !30
  %57 = and i32 %9, 508, !dbg !30
  %58 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !30
  %59 = getelementptr float, ptr addrspace(3) %58, i32 %56, !dbg !30
  %60 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !30
  %61 = or disjoint i32 %56, 4, !dbg !30
  %62 = lshr i32 %61, 2, !dbg !30
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !30
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %61, !dbg !30
  %65 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !30
  %66 = or disjoint i32 %56, 8, !dbg !30
  %67 = lshr i32 %66, 2, !dbg !30
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !30
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %66, !dbg !30
  %70 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !30
  %71 = or disjoint i32 %56, 12, !dbg !30
  %72 = lshr i32 %71, 2, !dbg !30
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !30
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %71, !dbg !30
  %75 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !30
  %76 = or disjoint i32 %56, 2, !dbg !30
  %77 = getelementptr float, ptr addrspace(3) %58, i32 %76, !dbg !30
  %78 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !30
  %79 = or disjoint i32 %56, 6, !dbg !30
  %80 = lshr i32 %79, 2, !dbg !30
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !30
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79, !dbg !30
  %83 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !30
  %84 = or disjoint i32 %56, 10, !dbg !30
  %85 = lshr i32 %84, 2, !dbg !30
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !30
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !30
  %88 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !30
  %89 = or disjoint i32 %56, 14, !dbg !30
  %90 = lshr i32 %89, 2, !dbg !30
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !30
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !30
  %93 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %94 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %57, !dbg !30
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %57, !dbg !30
  %96 = load i32, ptr addrspace(3) %95, align 4, !dbg !30
  %97 = or disjoint i32 %57, 1, !dbg !30
  %98 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %97, !dbg !30
  %99 = load i32, ptr addrspace(3) %98, align 4, !dbg !30
  %100 = or disjoint i32 %57, 2, !dbg !30
  %101 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %100, !dbg !30
  %102 = load i32, ptr addrspace(3) %101, align 4, !dbg !30
  %103 = or disjoint i32 %57, 3, !dbg !30
  %104 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %103, !dbg !30
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !30
  %106 = or disjoint i32 %57, 512, !dbg !30
  %107 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %106, !dbg !30
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %106, !dbg !30
  %109 = load i32, ptr addrspace(3) %108, align 4, !dbg !30
  %110 = or disjoint i32 %57, 513, !dbg !30
  %111 = lshr i32 %110, 2, !dbg !30
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !30
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %110, !dbg !30
  %114 = load i32, ptr addrspace(3) %113, align 4, !dbg !30
  %115 = or disjoint i32 %57, 514, !dbg !30
  %116 = lshr i32 %115, 2, !dbg !30
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !30
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !30
  %119 = load i32, ptr addrspace(3) %118, align 4, !dbg !30
  %120 = or disjoint i32 %57, 515, !dbg !30
  %121 = lshr i32 %120, 2, !dbg !30
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !30
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !30
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %96, i32 %99, i32 %102, i32 %105, ptr addrspace(1) %51, i1 %16) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %109, i32 %114, i32 %119, i32 %124, ptr addrspace(1) %53, i1 %17) #2, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %37, i32 %38, i32 %39, i32 %40, ptr addrspace(1) %125, i1 %15) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %42, i32 %43, i32 %44, i32 %45, ptr addrspace(1) %126, i1 %15) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpszzrez4pflvtdfu6ka6fr3qa4lae7adgucrrospbxrvogsa2or.py", directory: "inductor_cache/ps")
!4 = !{ptr @triton_poi_fused_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_6", linkageName: "triton_poi_fused_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 46, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 56, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
