#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc6)
    %7 = tt.load %6 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc8)
    %9 = tt.load %8 : !tt.ptr<f32> loc(#loc9)
    %10 = tt.splat %9 : f32 -> tensor<128xf32, #blocked> loc(#loc10)
    %11 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc11)
    %12 = tt.load %11 : !tt.ptr<f32> loc(#loc12)
    %13 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc13)
    %14 = tt.load %13 : !tt.ptr<f32> loc(#loc14)
    %15 = tt.splat %14 : f32 -> tensor<128xf32, #blocked> loc(#loc15)
    %16 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc16)
    %17 = tt.load %16 : !tt.ptr<f32> loc(#loc17)
    %18 = tt.splat %17 : f32 -> tensor<128xf32, #blocked> loc(#loc18)
    %19 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %20 = tt.addptr %19, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc19)
    %21 = tt.load %20 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = arith.subf %7, %10 : tensor<128xf32, #blocked> loc(#loc21)
    %23 = arith.addf %12, %cst_0 : f32 loc(#loc22)
    %24 = tt.extern_elementwise %23 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (f32) -> f32 loc(#loc23)
    %25 = arith.divf %cst, %24 : f32 loc(#loc24)
    %26 = tt.splat %25 : f32 -> tensor<128xf32, #blocked> loc(#loc24)
    %27 = arith.mulf %22, %26 : tensor<128xf32, #blocked> loc(#loc25)
    %28 = arith.mulf %27, %15 : tensor<128xf32, #blocked> loc(#loc26)
    %29 = arith.addf %28, %18 : tensor<128xf32, #blocked> loc(#loc27)
    %30 = arith.addf %29, %21 : tensor<128xf32, #blocked> loc(#loc28)
    %31 = arith.cmpf ogt, %cst_1, %30 : tensor<128xf32, #blocked> loc(#loc35)
    %32 = arith.select %31, %cst_1, %30 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc36)
    %33 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc32)
    %34 = tt.addptr %33, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc32)
    tt.store %34, %32 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":21:28)
#loc3 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":21:33)
#loc4 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":22:36)
#loc5 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":22:23)
#loc6 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":25:30)
#loc7 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":25:35)
#loc8 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":26:30)
#loc9 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":26:19)
#loc10 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":27:33)
#loc11 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":28:30)
#loc12 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":28:19)
#loc13 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":30:31)
#loc14 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":30:20)
#loc15 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":31:35)
#loc16 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":32:31)
#loc17 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":32:20)
#loc18 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":33:35)
#loc19 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":34:31)
#loc20 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":34:36)
#loc21 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":35:18)
#loc22 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":37:18)
#loc23 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":38:26)
#loc24 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":40:19)
#loc25 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":43:19)
#loc26 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":44:20)
#loc27 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":45:20)
#loc28 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":46:20)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc30 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":48:42)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc32 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":49:25)
#loc33 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":49:37)
#loc34 = loc("inductor_cache/pp/cppzqyslcu4oxnzhbxllv77qw56uxsnwy7toozeycf5r5vhukbf7.py":49:4)
#loc35 = loc(callsite(#loc29 at #loc30))
#loc36 = loc(callsite(#loc31 at #loc30))
