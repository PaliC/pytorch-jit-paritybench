; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_relu_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = and i32 %10, 31, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = shl i32 %10, 2, !dbg !14
  %16 = and i32 %15, 12, !dbg !14
  %17 = srem i32 %14, 1024, !dbg !15
  %18 = shl i32 %14, 4, !dbg !16
  %19 = or disjoint i32 %18, %16, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = sext i32 %17 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = fadd float %27, %37, !dbg !22
  %39 = fadd float %28, %37, !dbg !22
  %40 = fadd float %29, %37, !dbg !22
  %41 = fadd float %30, %37, !dbg !22
  %42 = fadd float %38, %39, !dbg !23
  %43 = fadd float %40, %42, !dbg !23
  %44 = fadd float %41, %43, !dbg !23
  %45 = bitcast float %44 to i32, !dbg !28
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = fadd float %44, %47, !dbg !23
  %49 = bitcast float %48 to i32, !dbg !28
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = fadd float %48, %51, !dbg !23
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %54 = bitcast float %52 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %56 = load float, ptr addrspace(3) %55, align 4, !dbg !29
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 1.600000e+01) #5, !dbg !29
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 1.600000e+01) #5, !dbg !29
  %59 = fsub float %38, %58, !dbg !30
  %60 = fsub float %39, %58, !dbg !30
  %61 = fsub float %40, %58, !dbg !30
  %62 = fsub float %41, %58, !dbg !30
  %63 = fmul float %59, %59, !dbg !31
  %64 = fmul float %60, %60, !dbg !31
  %65 = fmul float %61, %61, !dbg !31
  %66 = fmul float %62, %62, !dbg !31
  %67 = fadd float %63, %64, !dbg !32
  %68 = fadd float %65, %67, !dbg !32
  %69 = fadd float %66, %68, !dbg !32
  %70 = bitcast float %69 to i32, !dbg !34
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !34
  %72 = bitcast i32 %71 to float, !dbg !34
  %73 = fadd float %69, %72, !dbg !32
  %74 = bitcast float %73 to i32, !dbg !34
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !34
  %76 = bitcast i32 %75 to float, !dbg !34
  %77 = fadd float %73, %76, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %78 = bitcast float %77 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %78, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %79 = load float, ptr addrspace(3) %55, align 4, !dbg !35
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 1.600000e+01) #5, !dbg !36
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 1.600000e+01) #5, !dbg !36
  %82 = fadd float %80, 0x3EE4F8B580000000, !dbg !37
  %83 = fadd float %81, 0x3EE4F8B580000000, !dbg !37
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %84, 0, !dbg !35
  br i1 %.not.i, label %87, label %85, !dbg !35

85:                                               ; preds = %7
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

87:                                               ; preds = %7
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %85, %87
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], !dbg !35
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i12 = icmp eq i32 %92, 0, !dbg !35
  br i1 %.not.i12, label %95, label %93, !dbg !35

93:                                               ; preds = %__nv_rsqrtf.exit
  %94 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

95:                                               ; preds = %__nv_rsqrtf.exit
  %96 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

__nv_rsqrtf.exit14:                               ; preds = %93, %95
  %.0.i13 = phi float [ %94, %93 ], [ %96, %95 ], !dbg !35
  %97 = or disjoint i32 %9, %13, !dbg !13
  %98 = fmul float %59, %.0.i13, !dbg !38
  %99 = fmul float %60, %.0.i13, !dbg !38
  %100 = fmul float %61, %.0.i13, !dbg !38
  %101 = fmul float %62, %.0.i13, !dbg !38
  %102 = fcmp olt float %98, 0.000000e+00, !dbg !39
  %103 = fcmp olt float %99, 0.000000e+00, !dbg !39
  %104 = fcmp olt float %100, 0.000000e+00, !dbg !39
  %105 = fcmp olt float %101, 0.000000e+00, !dbg !39
  %106 = select i1 %102, float 0.000000e+00, float %98, !dbg !43
  %107 = select i1 %103, float 0.000000e+00, float %99, !dbg !43
  %108 = select i1 %104, float 0.000000e+00, float %100, !dbg !43
  %109 = select i1 %105, float 0.000000e+00, float %101, !dbg !43
  %110 = bitcast float %38 to i32, !dbg !44
  %111 = bitcast float %39 to i32, !dbg !44
  %112 = bitcast float %40 to i32, !dbg !44
  %113 = bitcast float %41 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %110, i32 %111, i32 %112, i32 %113, ptr addrspace(1) %21, i1 true) #5, !dbg !44
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !45
  %115 = bitcast float %106 to i32, !dbg !46
  %116 = bitcast float %107 to i32, !dbg !46
  %117 = bitcast float %108 to i32, !dbg !46
  %118 = bitcast float %109 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %114, i1 true) #5, !dbg !46
  %119 = sext i32 %97 to i64, !dbg !47
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !47
  %121 = and i32 %10, 96, !dbg !48
  %122 = icmp eq i32 %121, 0, !dbg !48
  %123 = bitcast float %.0.i to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %120, i1 %122) #5, !dbg !48
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !49
  %125 = bitcast float %57 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %124, i1 %122) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccw3zf5lbhgkaokn3uv3lmiuqzeqatlk6jyrhwzlpqjrg4izaagy.py", directory: "inductor_cache/cw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_39, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_relu_39", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_relu_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 37, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 40, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 20, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 26, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !33)
!35 = !DILocation(line: 50, column: 28, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 53, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 54, column: 47, scope: !7)
!45 = !DILocation(line: 55, column: 25, scope: !7)
!46 = !DILocation(line: 55, column: 45, scope: !7)
!47 = !DILocation(line: 56, column: 25, scope: !7)
!48 = !DILocation(line: 56, column: 37, scope: !7)
!49 = !DILocation(line: 57, column: 25, scope: !7)
!50 = !DILocation(line: 57, column: 37, scope: !7)
!51 = !DILocation(line: 57, column: 4, scope: !7)
