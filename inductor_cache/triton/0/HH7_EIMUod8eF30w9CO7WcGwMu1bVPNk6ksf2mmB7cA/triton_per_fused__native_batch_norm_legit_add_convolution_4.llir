; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 16, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = srem i32 %9, 4, !dbg !13
  %14 = shl i32 %9, 4, !dbg !14
  %15 = or disjoint i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #4, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #4, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = sext i32 %13 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #4, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #4, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %10, i32 0, i1 %10) #4, !dbg !21
  %30 = fadd float %19, %25, !dbg !22
  %31 = fadd float %21, %27, !dbg !22
  %32 = select i1 %10, float %30, float 0.000000e+00, !dbg !23
  %33 = select i1 %10, float %31, float 0.000000e+00, !dbg !23
  %34 = bitcast float %32 to i32, !dbg !24
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = fadd float %32, %36, !dbg !28
  %38 = bitcast float %37 to i32, !dbg !24
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 4, i32 31), !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = fadd float %37, %40, !dbg !28
  %42 = bitcast float %41 to i32, !dbg !24
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = fadd float %41, %44, !dbg !28
  %46 = bitcast float %45 to i32, !dbg !24
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !24
  %48 = bitcast i32 %47 to float, !dbg !24
  %49 = fadd float %45, %48, !dbg !28
  %50 = bitcast float %33 to i32, !dbg !24
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = fadd float %33, %52, !dbg !28
  %54 = bitcast float %53 to i32, !dbg !24
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 4, i32 31), !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = fadd float %53, %56, !dbg !28
  %58 = bitcast float %57 to i32, !dbg !24
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = fadd float %57, %60, !dbg !28
  %62 = bitcast float %61 to i32, !dbg !24
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !24
  %64 = bitcast i32 %63 to float, !dbg !24
  %65 = fadd float %61, %64, !dbg !28
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 1.600000e+01) #4, !dbg !30
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 1.600000e+01) #4, !dbg !30
  %68 = fsub float %30, %66, !dbg !31
  %69 = fsub float %31, %67, !dbg !31
  %70 = fmul float %68, %68, !dbg !32
  %71 = fmul float %69, %69, !dbg !32
  %72 = select i1 %10, float %70, float 0.000000e+00, !dbg !33
  %73 = select i1 %10, float %71, float 0.000000e+00, !dbg !33
  %74 = bitcast float %72 to i32, !dbg !34
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !34
  %76 = bitcast i32 %75 to float, !dbg !34
  %77 = fadd float %72, %76, !dbg !36
  %78 = bitcast float %77 to i32, !dbg !34
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !34
  %80 = bitcast i32 %79 to float, !dbg !34
  %81 = fadd float %77, %80, !dbg !36
  %82 = bitcast float %81 to i32, !dbg !34
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !34
  %84 = bitcast i32 %83 to float, !dbg !34
  %85 = fadd float %81, %84, !dbg !36
  %86 = bitcast float %85 to i32, !dbg !34
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !34
  %88 = bitcast i32 %87 to float, !dbg !34
  %89 = fadd float %85, %88, !dbg !36
  %90 = bitcast float %73 to i32, !dbg !34
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !34
  %92 = bitcast i32 %91 to float, !dbg !34
  %93 = fadd float %73, %92, !dbg !36
  %94 = bitcast float %93 to i32, !dbg !34
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = fadd float %93, %96, !dbg !36
  %98 = bitcast float %97 to i32, !dbg !34
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !34
  %100 = bitcast i32 %99 to float, !dbg !34
  %101 = fadd float %97, %100, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !34
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = fadd float %101, %104, !dbg !36
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.600000e+01) #4, !dbg !37
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 1.600000e+01) #4, !dbg !37
  %108 = fadd float %106, 0x3EE4F8B580000000, !dbg !38
  %109 = fadd float %107, 0x3EE4F8B580000000, !dbg !38
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %110, 0, !dbg !39
  br i1 %.not.i, label %113, label %111, !dbg !39

111:                                              ; preds = %8
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

113:                                              ; preds = %8
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %111, %113
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], !dbg !39
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i1 = icmp eq i32 %115, 0, !dbg !39
  br i1 %.not.i1, label %118, label %116, !dbg !39

116:                                              ; preds = %__nv_rsqrtf.exit
  %117 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %109), !dbg !39
  br label %__nv_rsqrtf.exit3, !dbg !39

118:                                              ; preds = %__nv_rsqrtf.exit
  %119 = tail call float @llvm.nvvm.rsqrt.approx.f(float %109), !dbg !39
  br label %__nv_rsqrtf.exit3, !dbg !39

__nv_rsqrtf.exit3:                                ; preds = %116, %118
  %.0.i2 = phi float [ %117, %116 ], [ %119, %118 ], !dbg !39
  %120 = bitcast i32 %29 to float, !dbg !21
  %121 = fmul float %68, %.0.i, !dbg !40
  %122 = fadd float %121, %120, !dbg !41
  %123 = and i32 %11, 48, !dbg !42
  %124 = icmp eq i32 %123, 0, !dbg !42
  %125 = bitcast float %30 to i32, !dbg !42
  %126 = and i1 %124, %10, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %17, i1 %126) #4, !dbg !42
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !43
  %128 = bitcast float %122 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %127, i1 %126) #4, !dbg !44
  %129 = sext i32 %9 to i64, !dbg !45
  %130 = getelementptr float, ptr addrspace(1) %5, i64 %129, !dbg !45
  %urem = and i32 %11, 63, !dbg !46
  %131 = icmp eq i32 %urem, 0, !dbg !46
  %132 = bitcast float %.0.i2 to i32, !dbg !46
  %133 = and i1 %131, %10, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %130, i1 %133) #4, !dbg !46
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !47
  %135 = bitcast float %67 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %134, i1 %133) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdcc6wneg5cyn76vjfjchnvahhdpa3ifhius3o5veb5q6w6dk2ke.py", directory: "inductor_cache/dc")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_4", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 39, column: 33, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 40, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 35, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !35)
!35 = !DILocation(line: 48, column: 26, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !35)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 28, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 57, column: 47, scope: !7)
!43 = !DILocation(line: 58, column: 25, scope: !7)
!44 = !DILocation(line: 58, column: 45, scope: !7)
!45 = !DILocation(line: 59, column: 25, scope: !7)
!46 = !DILocation(line: 59, column: 37, scope: !7)
!47 = !DILocation(line: 60, column: 25, scope: !7)
!48 = !DILocation(line: 60, column: 37, scope: !7)
!49 = !DILocation(line: 60, column: 4, scope: !7)
