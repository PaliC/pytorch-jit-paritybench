; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 16, !dbg !14
  %15 = lshr i32 %10, 1, !dbg !15
  %16 = and i32 %15, 31, !dbg !15
  %17 = shl nuw nsw i32 %16, 2, !dbg !16
  %18 = shl i32 %13, 5, !dbg !17
  %19 = or disjoint i32 %18, %17, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !20
  %23 = zext nneg i32 %16 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !28
  %45 = fadd float %34, 0x3EE4F8B580000000, !dbg !29
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i11 = icmp eq i32 %52, 0, !dbg !30
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i14 = icmp eq i32 %53, 0, !dbg !30
  br i1 %.not.i11, label %59, label %54, !dbg !30

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %57, label %55, !dbg !30

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %62, label %60, !dbg !30

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %55, %57, %60, %62
  %.0.i13 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %67 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %68 = lshr i32 %10, 5, !dbg !15
  %69 = and i32 %10, 7, !dbg !12
  %70 = or disjoint i32 %9, %69, !dbg !13
  %71 = icmp slt i32 %70, 16, !dbg !14
  %72 = and i32 %10, 31, !dbg !12
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !31
  %74 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !20
  %75 = insertelement <4 x i32> %74, i32 %65, i64 1, !dbg !20
  %76 = insertelement <4 x i32> %75, i32 %66, i64 2, !dbg !20
  %77 = insertelement <4 x i32> %76, i32 %67, i64 3, !dbg !20
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !20
  %79 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !32
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !32
  %81 = shufflevector <4 x float> %80, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !32
  %82 = fsub <4 x float> %78, %81, !dbg !32
  %83 = insertelement <4 x float> poison, float %73, i64 0, !dbg !33
  %84 = shufflevector <4 x float> %83, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !33
  %85 = fmul <4 x float> %82, %84, !dbg !33
  %86 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !34
  %87 = bitcast <4 x i32> %86 to <4 x float>, !dbg !34
  %88 = shufflevector <4 x float> %87, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !34
  %89 = fmul <4 x float> %85, %88, !dbg !34
  %90 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !35
  %91 = bitcast <4 x i32> %90 to <4 x float>, !dbg !35
  %92 = shufflevector <4 x float> %91, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !35
  %93 = fadd <4 x float> %89, %92, !dbg !35
  %94 = fcmp olt <4 x float> %93, zeroinitializer, !dbg !36
  %95 = extractelement <4 x i1> %94, i64 3, !dbg !40
  %96 = extractelement <4 x float> %93, i64 3, !dbg !40
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !40
  %98 = extractelement <4 x i1> %94, i64 2, !dbg !40
  %99 = extractelement <4 x float> %93, i64 2, !dbg !40
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !40
  %101 = extractelement <4 x i1> %94, i64 1, !dbg !40
  %102 = extractelement <4 x float> %93, i64 1, !dbg !40
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !40
  %104 = extractelement <4 x i1> %94, i64 0, !dbg !40
  %105 = extractelement <4 x float> %93, i64 0, !dbg !40
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !40
  %107 = select i1 %14, float %97, float 0.000000e+00, !dbg !41
  %108 = select i1 %14, float %100, float 0.000000e+00, !dbg !41
  %109 = select i1 %14, float %103, float 0.000000e+00, !dbg !41
  %110 = select i1 %14, float %106, float 0.000000e+00, !dbg !41
  %111 = bitcast float %107 to i32, !dbg !42
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !42
  %113 = bitcast i32 %112 to float, !dbg !42
  %114 = fadd float %107, %113, !dbg !46
  %115 = bitcast float %114 to i32, !dbg !42
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !42
  %117 = bitcast i32 %116 to float, !dbg !42
  %118 = fadd float %114, %117, !dbg !46
  %119 = bitcast float %118 to i32, !dbg !42
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !42
  %121 = bitcast i32 %120 to float, !dbg !42
  %122 = fadd float %118, %121, !dbg !46
  %123 = bitcast float %122 to i32, !dbg !42
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !42
  %125 = bitcast i32 %124 to float, !dbg !42
  %126 = fadd float %122, %125, !dbg !46
  %127 = bitcast float %108 to i32, !dbg !42
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !42
  %129 = bitcast i32 %128 to float, !dbg !42
  %130 = fadd float %108, %129, !dbg !46
  %131 = bitcast float %130 to i32, !dbg !42
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !42
  %133 = bitcast i32 %132 to float, !dbg !42
  %134 = fadd float %130, %133, !dbg !46
  %135 = bitcast float %134 to i32, !dbg !42
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !42
  %137 = bitcast i32 %136 to float, !dbg !42
  %138 = fadd float %134, %137, !dbg !46
  %139 = bitcast float %138 to i32, !dbg !42
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !42
  %141 = bitcast i32 %140 to float, !dbg !42
  %142 = fadd float %138, %141, !dbg !46
  %143 = bitcast float %109 to i32, !dbg !42
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 16, i32 31), !dbg !42
  %145 = bitcast i32 %144 to float, !dbg !42
  %146 = fadd float %109, %145, !dbg !46
  %147 = bitcast float %146 to i32, !dbg !42
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !42
  %149 = bitcast i32 %148 to float, !dbg !42
  %150 = fadd float %146, %149, !dbg !46
  %151 = bitcast float %150 to i32, !dbg !42
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 4, i32 31), !dbg !42
  %153 = bitcast i32 %152 to float, !dbg !42
  %154 = fadd float %150, %153, !dbg !46
  %155 = bitcast float %154 to i32, !dbg !42
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !42
  %157 = bitcast i32 %156 to float, !dbg !42
  %158 = fadd float %154, %157, !dbg !46
  %159 = bitcast float %110 to i32, !dbg !42
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !42
  %161 = bitcast i32 %160 to float, !dbg !42
  %162 = fadd float %110, %161, !dbg !46
  %163 = bitcast float %162 to i32, !dbg !42
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = fadd float %162, %165, !dbg !46
  %167 = bitcast float %166 to i32, !dbg !42
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = fadd float %166, %169, !dbg !46
  %171 = bitcast float %170 to i32, !dbg !42
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !42
  %173 = bitcast i32 %172 to float, !dbg !42
  %174 = fadd float %170, %173, !dbg !46
  %175 = icmp samesign ult i32 %72, 2, !dbg !42
  %176 = and i32 %68, 1, !dbg !42
  %177 = shl nuw nsw i32 %12, 1, !dbg !42
  %178 = or disjoint i32 %177, %176, !dbg !42
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !42
  %180 = bitcast float %126 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 %175) #5, !dbg !42
  %181 = or disjoint i32 %177, 2, !dbg !42
  %182 = or disjoint i32 %181, %176, !dbg !42
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !42
  %184 = bitcast float %142 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 %175) #5, !dbg !42
  %185 = or disjoint i32 %177, 4, !dbg !42
  %186 = or disjoint i32 %185, %176, !dbg !42
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !42
  %188 = bitcast float %158 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 %175) #5, !dbg !42
  %189 = or disjoint i32 %177, 6, !dbg !42
  %190 = or disjoint i32 %189, %176, !dbg !42
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !42
  %192 = bitcast float %174 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 %175) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %193 = icmp slt i32 %10, 16, !dbg !42
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %195 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %194, i1 %193) #5, !dbg !42
  %196 = bitcast i32 %195 to float, !dbg !42
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !42
  %198 = bitcast i32 %197 to float, !dbg !42
  %199 = fadd float %196, %198, !dbg !46
  %200 = and i32 %10, 1, !dbg !42
  %201 = icmp eq i32 %200, 0, !dbg !42
  %202 = and i1 %193, %201, !dbg !42
  %203 = bitcast float %199 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %203, i1 %202) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !42
  %205 = load i32, ptr addrspace(3) %204, align 16, !dbg !42
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !42
  %207 = load i32, ptr addrspace(3) %206, align 8, !dbg !42
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !42
  %209 = load i32, ptr addrspace(3) %208, align 16, !dbg !42
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !42
  %211 = load i32, ptr addrspace(3) %210, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %212, i32 %205, i32 %207, i32 %209, i32 %211, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !48
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !48
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float 3.200000e+01) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %216 = sext i32 %70 to i64, !dbg !50
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !50
  %218 = lshr i32 %72, 3, !dbg !51
  %219 = shl nuw nsw i32 %176, 2, !dbg !51
  %220 = or disjoint i32 %219, %218, !dbg !51
  %221 = icmp eq i32 %220, 0, !dbg !51
  %222 = bitcast float %215 to i32, !dbg !51
  %223 = and i1 %221, %71, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %222, ptr addrspace(1) %217, i1 %223) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5tq6n5dq567hsot6xg56zlltfdvhpvtrgqynld6lht74afdokch.py", directory: "inductor_cache/5t")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_3", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 37, scope: !7)
!17 = !DILocation(line: 33, column: 46, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 26, scope: !7)
!31 = !DILocation(line: 43, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 46, column: 19, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 50, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 53, column: 26, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 4, scope: !7)
!50 = !DILocation(line: 57, column: 28, scope: !7)
!51 = !DILocation(line: 57, column: 40, scope: !7)
!52 = !DILocation(line: 57, column: 4, scope: !7)
