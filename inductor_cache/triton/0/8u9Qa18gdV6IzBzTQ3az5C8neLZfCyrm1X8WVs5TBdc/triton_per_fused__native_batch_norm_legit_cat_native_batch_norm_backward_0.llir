; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %.frozen = freeze i32 %9, !dbg !13
  %13 = sdiv i32 %.frozen, 2, !dbg !13
  %14 = mul i32 %13, 2, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = shl nsw i32 %.decomposed, 4, !dbg !15
  %16 = or disjoint i32 %15, %12, !dbg !16
  %17 = shl i32 %13, 6, !dbg !17
  %18 = add i32 %16, %17, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %10, i32 0, i1 %10) #4, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %10, i32 0, i1 %10) #4, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = sext i32 %.decomposed to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %10) #4, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %10) #4, !dbg !24
  %30 = select i1 %10, float %22, float 0.000000e+00, !dbg !25
  %31 = select i1 %10, float %24, float 0.000000e+00, !dbg !25
  %32 = bitcast float %30 to i32, !dbg !26
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = fadd float %30, %34, !dbg !30
  %36 = bitcast float %35 to i32, !dbg !26
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = fadd float %35, %38, !dbg !30
  %40 = bitcast float %39 to i32, !dbg !26
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = fadd float %39, %42, !dbg !30
  %44 = bitcast float %43 to i32, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %43, %46, !dbg !30
  %48 = bitcast float %31 to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %31, %50, !dbg !30
  %52 = bitcast float %51 to i32, !dbg !26
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %51, %54, !dbg !30
  %56 = bitcast float %55 to i32, !dbg !26
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = fadd float %55, %58, !dbg !30
  %60 = bitcast float %59 to i32, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %59, %62, !dbg !30
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 1.600000e+01) #4, !dbg !32
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 1.600000e+01) #4, !dbg !32
  %66 = fsub float %22, %64, !dbg !33
  %67 = fsub float %24, %65, !dbg !33
  %68 = fmul float %66, %66, !dbg !34
  %69 = fmul float %67, %67, !dbg !34
  %70 = select i1 %10, float %68, float 0.000000e+00, !dbg !35
  %71 = select i1 %10, float %69, float 0.000000e+00, !dbg !35
  %72 = bitcast float %70 to i32, !dbg !36
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !36
  %74 = bitcast i32 %73 to float, !dbg !36
  %75 = fadd float %70, %74, !dbg !38
  %76 = bitcast float %75 to i32, !dbg !36
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !36
  %78 = bitcast i32 %77 to float, !dbg !36
  %79 = fadd float %75, %78, !dbg !38
  %80 = bitcast float %79 to i32, !dbg !36
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = fadd float %79, %82, !dbg !38
  %84 = bitcast float %83 to i32, !dbg !36
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !36
  %86 = bitcast i32 %85 to float, !dbg !36
  %87 = fadd float %83, %86, !dbg !38
  %88 = bitcast float %71 to i32, !dbg !36
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !36
  %90 = bitcast i32 %89 to float, !dbg !36
  %91 = fadd float %71, %90, !dbg !38
  %92 = bitcast float %91 to i32, !dbg !36
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !36
  %94 = bitcast i32 %93 to float, !dbg !36
  %95 = fadd float %91, %94, !dbg !38
  %96 = bitcast float %95 to i32, !dbg !36
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !36
  %98 = bitcast i32 %97 to float, !dbg !36
  %99 = fadd float %95, %98, !dbg !38
  %100 = bitcast float %99 to i32, !dbg !36
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !36
  %102 = bitcast i32 %101 to float, !dbg !36
  %103 = fadd float %99, %102, !dbg !38
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.600000e+01) #4, !dbg !39
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.600000e+01) #4, !dbg !39
  %106 = fadd float %104, 0x3EE4F8B580000000, !dbg !40
  %107 = fadd float %105, 0x3EE4F8B580000000, !dbg !40
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %108, 0, !dbg !41
  br i1 %.not.i, label %111, label %109, !dbg !41

109:                                              ; preds = %8
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

111:                                              ; preds = %8
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %109, %111
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], !dbg !41
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i1 = icmp eq i32 %113, 0, !dbg !41
  br i1 %.not.i1, label %116, label %114, !dbg !41

114:                                              ; preds = %__nv_rsqrtf.exit
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

116:                                              ; preds = %__nv_rsqrtf.exit
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %114, %116
  %.0.i2 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !41
  %118 = bitcast i32 %29 to float, !dbg !24
  %119 = bitcast i32 %27 to float, !dbg !22
  %120 = fmul float %66, %.0.i, !dbg !42
  %121 = fmul float %120, %119, !dbg !43
  %122 = fadd float %121, %118, !dbg !44
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !45
  %124 = and i32 %11, 48, !dbg !46
  %125 = icmp eq i32 %124, 0, !dbg !46
  %126 = bitcast float %122 to i32, !dbg !46
  %127 = and i1 %125, %10, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %123, i1 %127) #4, !dbg !46
  %128 = shl i32 %9, 4, !dbg !47
  %129 = or disjoint i32 %128, %12, !dbg !48
  %130 = sext i32 %129 to i64, !dbg !49
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !49
  %132 = bitcast float %66 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %131, i1 %127) #4, !dbg !50
  %133 = sext i32 %9 to i64, !dbg !51
  %134 = getelementptr float, ptr addrspace(1) %5, i64 %133, !dbg !51
  %urem = and i32 %11, 63, !dbg !52
  %135 = icmp eq i32 %urem, 0, !dbg !52
  %136 = bitcast float %.0.i2 to i32, !dbg !52
  %137 = and i1 %135, %10, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %134, i1 %137) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz75qdz474qd7jknn4tmk5v4hgtrxkyxbekvwn7jku6h3wqfgfbi.py", directory: "inductor_cache/z7")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0", linkageName: "triton_per_fused__native_batch_norm_legit_cat_native_batch_norm_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 40, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 55, scope: !7)
!18 = !DILocation(line: 33, column: 51, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 66, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 40, column: 33, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 41, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 49, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !37)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 28, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 25, scope: !7)
!46 = !DILocation(line: 60, column: 53, scope: !7)
!47 = !DILocation(line: 61, column: 33, scope: !7)
!48 = !DILocation(line: 61, column: 30, scope: !7)
!49 = !DILocation(line: 61, column: 25, scope: !7)
!50 = !DILocation(line: 61, column: 45, scope: !7)
!51 = !DILocation(line: 62, column: 25, scope: !7)
!52 = !DILocation(line: 62, column: 37, scope: !7)
!53 = !DILocation(line: 62, column: 4, scope: !7)
