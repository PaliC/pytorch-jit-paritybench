; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = srem i32 %20, 128, !dbg !14
  %22 = sext i32 %20 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %25 = sext i32 %21 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !17
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !19
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !23
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %38 = bitcast i32 %36 to float, !dbg !26
  %39 = bitcast i32 %37 to float, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !29
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !31
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !33
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !34
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !34
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !34
  %50 = bitcast i32 %48 to float, !dbg !34
  %51 = bitcast i32 %49 to float, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !35
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !37
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !38
  %56 = fadd float %38, 0x3EE4F8B580000000, !dbg !39
  %57 = fadd float %39, 0x3EE4F8B580000000, !dbg !39
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %58, 0, !dbg !40
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %59, 0, !dbg !40
  br i1 %.not.i, label %65, label %60, !dbg !40

60:                                               ; preds = %14
  br i1 %.not1.i, label %63, label %61, !dbg !40

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

65:                                               ; preds = %14
  br i1 %.not1.i, label %68, label %66, !dbg !40

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !40
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %70, 0, !dbg !40
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !40
  br i1 %.not.i1, label %77, label %72, !dbg !40

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !40

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !40

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !40
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %84 = fadd float %50, 0x3EE4F8B580000000, !dbg !42
  %85 = fadd float %51, 0x3EE4F8B580000000, !dbg !42
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %86, 0, !dbg !43
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !43
  br i1 %.not.i6, label %93, label %88, !dbg !43

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !43

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !43

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !43
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %98, 0, !dbg !43
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %99, 0, !dbg !43
  br i1 %.not.i11, label %105, label %100, !dbg !43

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !43

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !43

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %101, %103, %106, %108
  %.0.i13 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !43
  %110 = extractvalue { i32, i32 } %24, 1, !dbg !16
  %111 = bitcast i32 %110 to float, !dbg !16
  %112 = extractvalue { i32, i32 } %27, 1, !dbg !18
  %113 = bitcast i32 %112 to float, !dbg !18
  %114 = fadd float %111, %113, !dbg !44
  %115 = extractvalue { i32, i32 } %45, 1, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = fsub float %114, %116, !dbg !45
  %118 = extractvalue { i32, i32 } %24, 0, !dbg !16
  %119 = bitcast i32 %118 to float, !dbg !16
  %120 = extractvalue { i32, i32 } %27, 0, !dbg !18
  %121 = bitcast i32 %120 to float, !dbg !18
  %122 = fadd float %119, %121, !dbg !44
  %123 = extractvalue { i32, i32 } %45, 0, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = fsub float %122, %124, !dbg !45
  %126 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %127 = bitcast i32 %126 to float, !dbg !20
  %128 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %129 = bitcast i32 %128 to float, !dbg !22
  %130 = fadd float %127, %129, !dbg !46
  %131 = extractvalue { i32, i32 } %33, 1, !dbg !24
  %132 = bitcast i32 %131 to float, !dbg !24
  %133 = fsub float %130, %132, !dbg !47
  %134 = fmul float %133, %83, !dbg !48
  %135 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = fmul float %134, %136, !dbg !49
  %138 = extractvalue { i32, i32 } %43, 1, !dbg !30
  %139 = bitcast i32 %138 to float, !dbg !30
  %140 = fadd float %137, %139, !dbg !50
  %141 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %142 = bitcast i32 %141 to float, !dbg !20
  %143 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %144 = bitcast i32 %143 to float, !dbg !22
  %145 = fadd float %142, %144, !dbg !46
  %146 = extractvalue { i32, i32 } %33, 0, !dbg !24
  %147 = bitcast i32 %146 to float, !dbg !24
  %148 = fsub float %145, %147, !dbg !47
  %149 = fmul float %148, %82, !dbg !48
  %150 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %151 = bitcast i32 %150 to float, !dbg !28
  %152 = fmul float %149, %151, !dbg !49
  %153 = extractvalue { i32, i32 } %43, 0, !dbg !30
  %154 = bitcast i32 %153 to float, !dbg !30
  %155 = fadd float %152, %154, !dbg !50
  %156 = extractvalue { i32, i32 } %55, 1, !dbg !38
  %157 = bitcast i32 %156 to float, !dbg !38
  %158 = extractvalue { i32, i32 } %55, 0, !dbg !38
  %159 = bitcast i32 %158 to float, !dbg !38
  %160 = extractvalue { i32, i32 } %53, 1, !dbg !36
  %161 = bitcast i32 %160 to float, !dbg !36
  %162 = extractvalue { i32, i32 } %53, 0, !dbg !36
  %163 = bitcast i32 %162 to float, !dbg !36
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !51
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !51
  %166 = fmul float %125, %164, !dbg !52
  %167 = fmul float %117, %165, !dbg !52
  %168 = fmul float %166, %163, !dbg !53
  %169 = fmul float %167, %161, !dbg !53
  %170 = fadd float %168, %159, !dbg !54
  %171 = fadd float %169, %157, !dbg !54
  %172 = fcmp olt float %170, 0.000000e+00, !dbg !55
  %173 = fcmp olt float %171, 0.000000e+00, !dbg !55
  %174 = select i1 %172, float 0.000000e+00, float %170, !dbg !59
  %175 = select i1 %173, float 0.000000e+00, float %171, !dbg !59
  %176 = fadd float %155, %174, !dbg !60
  %177 = fadd float %140, %175, !dbg !60
  %178 = fcmp olt float %176, 0.000000e+00, !dbg !61
  %179 = fcmp olt float %177, 0.000000e+00, !dbg !61
  %180 = select i1 %178, float 0.000000e+00, float %176, !dbg !63
  %181 = select i1 %179, float 0.000000e+00, float %177, !dbg !63
  %182 = bitcast float %122 to i32, !dbg !64
  %183 = bitcast float %114 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %23, i1 true) #3, !dbg !64
  %184 = bitcast float %145 to i32, !dbg !65
  %185 = bitcast float %130 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %185, ptr addrspace(1) %28, i1 true) #3, !dbg !65
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !66
  %187 = bitcast float %180 to i32, !dbg !67
  %188 = bitcast float %181 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %187, i32 %188, ptr addrspace(1) %186, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cochqmxq7k32qgs6tk5q2v44u5szk7cpi4szkn2tltgjrr3xvth3.py", directory: "inductor_cache/oc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 27, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 51, column: 19, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 60, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !62)
!62 = !DILocation(line: 62, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !62)
!64 = !DILocation(line: 63, column: 39, scope: !7)
!65 = !DILocation(line: 64, column: 39, scope: !7)
!66 = !DILocation(line: 65, column: 28, scope: !7)
!67 = !DILocation(line: 65, column: 40, scope: !7)
!68 = !DILocation(line: 65, column: 4, scope: !7)
