; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !14
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %19 = sdiv <2 x i32> %18, <i32 2048, i32 256>, !dbg !14
  %20 = srem <2 x i32> %19, splat (i32 8), !dbg !15
  %21 = srem i32 %16, 256, !dbg !16
  %22 = sdiv i32 %16, 16384, !dbg !17
  %23 = sext i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = sext i32 %21 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !23
  %33 = bitcast i32 %31 to float, !dbg !23
  %34 = bitcast i32 %32 to float, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !27
  %39 = extractelement <2 x i32> %20, i64 0, !dbg !28
  %40 = shl nsw i32 %39, 1, !dbg !29
  %41 = icmp sgt i32 %39, 0, !dbg !30
  %42 = extractelement <2 x i32> %20, i64 1, !dbg !28
  %43 = shl nsw i32 %42, 1, !dbg !31
  %44 = icmp sgt i32 %42, 0, !dbg !32
  %45 = and i1 %41, %44, !dbg !33
  %46 = shl nsw i32 %42, 9, !dbg !34
  %47 = mul nsw i32 %39, 7680, !dbg !35
  %48 = mul i32 %22, 57600, !dbg !36
  %49 = add i32 %48, %21, !dbg !37
  %50 = add i32 %49, -4096, !dbg !38
  %51 = add i32 %50, %46, !dbg !39
  %52 = add i32 %51, %47, !dbg !40
  %53 = sext i32 %52 to i64, !dbg !41
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !41
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %45, i32 -8388608, i1 %45, i32 -8388608, i1 %45) #3, !dbg !42
  %56 = icmp sgt i32 %42, -1, !dbg !43
  %57 = and i1 %41, %56, !dbg !44
  %58 = add i32 %49, -3840, !dbg !45
  %59 = add i32 %58, %46, !dbg !46
  %60 = add i32 %59, %47, !dbg !47
  %61 = sext i32 %60 to i64, !dbg !48
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !48
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57) #3, !dbg !49
  %64 = or disjoint i32 %43, 1, !dbg !50
  %65 = icmp slt i32 %64, 15, !dbg !51
  %66 = and i1 %56, %65, !dbg !52
  %67 = and i1 %41, %66, !dbg !53
  %68 = add i32 %49, -3584, !dbg !54
  %69 = add i32 %68, %46, !dbg !55
  %70 = add i32 %69, %47, !dbg !56
  %71 = sext i32 %70 to i64, !dbg !57
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !57
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #3, !dbg !58
  %74 = icmp sgt i32 %39, -1, !dbg !59
  %75 = and i1 %74, %44, !dbg !60
  %76 = add i32 %49, -256, !dbg !61
  %77 = add i32 %76, %46, !dbg !62
  %78 = add i32 %77, %47, !dbg !63
  %79 = sext i32 %78 to i64, !dbg !64
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !64
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %80, i1 %75, i32 -8388608, i1 %75, i32 -8388608, i1 %75) #3, !dbg !65
  %82 = or i32 %39, %42, !dbg !28
  %83 = icmp sgt i32 %82, -1, !dbg !28
  %84 = add i32 %49, %46, !dbg !66
  %85 = add i32 %84, %47, !dbg !67
  %86 = sext i32 %85 to i64, !dbg !68
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !68
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %83, i32 -8388608, i1 %83, i32 -8388608, i1 %83) #3, !dbg !69
  %89 = and i1 %74, %66, !dbg !70
  %90 = add i32 %49, 256, !dbg !71
  %91 = add i32 %90, %46, !dbg !72
  %92 = add i32 %91, %47, !dbg !73
  %93 = sext i32 %92 to i64, !dbg !74
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !74
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %94, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #3, !dbg !75
  %96 = or disjoint i32 %40, 1, !dbg !76
  %97 = icmp slt i32 %96, 15, !dbg !77
  %98 = and i1 %74, %97, !dbg !78
  %99 = and i1 %44, %98, !dbg !79
  %100 = add i32 %49, 3584, !dbg !80
  %101 = add i32 %100, %46, !dbg !81
  %102 = add i32 %101, %47, !dbg !82
  %103 = sext i32 %102 to i64, !dbg !83
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !83
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %104, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99) #3, !dbg !84
  %106 = and i1 %56, %98, !dbg !85
  %107 = add i32 %49, 3840, !dbg !86
  %108 = add i32 %107, %46, !dbg !87
  %109 = add i32 %108, %47, !dbg !88
  %110 = sext i32 %109 to i64, !dbg !89
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !89
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %111, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #3, !dbg !90
  %113 = and i1 %98, %66, !dbg !91
  %114 = add i32 %49, 4096, !dbg !92
  %115 = add i32 %114, %46, !dbg !93
  %116 = add i32 %115, %47, !dbg !94
  %117 = sext i32 %116 to i64, !dbg !95
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !95
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %118, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113) #3, !dbg !96
  %120 = fadd float %33, 0x3EE4F8B580000000, !dbg !97
  %121 = fadd float %34, 0x3EE4F8B580000000, !dbg !97
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i = icmp eq i32 %122, 0, !dbg !98
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i = icmp eq i32 %123, 0, !dbg !98
  br i1 %.not.i, label %129, label %124, !dbg !98

124:                                              ; preds = %10
  br i1 %.not1.i, label %127, label %125, !dbg !98

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

129:                                              ; preds = %10
  br i1 %.not1.i, label %132, label %130, !dbg !98

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

__nv_sqrtf.exit:                                  ; preds = %125, %127, %130, %132
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !98
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i1 = icmp eq i32 %134, 0, !dbg !98
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i4 = icmp eq i32 %135, 0, !dbg !98
  br i1 %.not.i1, label %141, label %136, !dbg !98

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %139, label %137, !dbg !98

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %144, label %142, !dbg !98

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

__nv_sqrtf.exit5:                                 ; preds = %137, %139, %142, %144
  %.0.i3 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !98
  %146 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %147 = bitcast i32 %146 to float, !dbg !19
  %148 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %149 = bitcast i32 %148 to float, !dbg !21
  %150 = fsub float %147, %149, !dbg !99
  %151 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %152 = bitcast i32 %151 to float, !dbg !19
  %153 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %154 = bitcast i32 %153 to float, !dbg !21
  %155 = fsub float %152, %154, !dbg !99
  %156 = extractvalue { i32, i32 } %63, 1, !dbg !49
  %157 = extractvalue { i32, i32 } %55, 1, !dbg !42
  %158 = extractvalue { i32, i32 } %73, 1, !dbg !58
  %159 = extractvalue { i32, i32 } %81, 1, !dbg !65
  %160 = extractvalue { i32, i32 } %88, 1, !dbg !69
  %161 = extractvalue { i32, i32 } %95, 1, !dbg !75
  %162 = extractvalue { i32, i32 } %105, 1, !dbg !84
  %163 = extractvalue { i32, i32 } %112, 1, !dbg !90
  %164 = extractvalue { i32, i32 } %119, 1, !dbg !96
  %165 = extractvalue { i32, i32 } %63, 0, !dbg !49
  %166 = extractvalue { i32, i32 } %55, 0, !dbg !42
  %167 = extractvalue { i32, i32 } %73, 0, !dbg !58
  %168 = extractvalue { i32, i32 } %81, 0, !dbg !65
  %169 = extractvalue { i32, i32 } %88, 0, !dbg !69
  %170 = extractvalue { i32, i32 } %95, 0, !dbg !75
  %171 = extractvalue { i32, i32 } %105, 0, !dbg !84
  %172 = extractvalue { i32, i32 } %112, 0, !dbg !90
  %173 = extractvalue { i32, i32 } %119, 0, !dbg !96
  %174 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !49
  %175 = insertelement <2 x i32> %174, i32 %156, i64 1, !dbg !49
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !49
  %177 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !42
  %178 = insertelement <2 x i32> %177, i32 %157, i64 1, !dbg !42
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !42
  %180 = fcmp ogt <2 x float> %176, %179, !dbg !100
  %181 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !65
  %182 = insertelement <2 x i32> %181, i32 %159, i64 1, !dbg !65
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !65
  %184 = fcmp uno <2 x float> %176, zeroinitializer, !dbg !104
  %185 = or <2 x i1> %180, %184, !dbg !105
  %.v = select <2 x i1> %185, <2 x i32> %175, <2 x i32> %178, !dbg !106
  %186 = bitcast <2 x i32> %.v to <2 x float>, !dbg !106
  %187 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !58
  %188 = insertelement <2 x i32> %187, i32 %158, i64 1, !dbg !58
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !58
  %190 = fcmp olt <2 x float> %186, %189, !dbg !107
  %191 = fcmp uno <2 x float> %189, zeroinitializer, !dbg !109
  %192 = or <2 x i1> %191, %190, !dbg !110
  %.v6 = select <2 x i1> %192, <2 x i32> %188, <2 x i32> %.v, !dbg !111
  %193 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !111
  %194 = fcmp olt <2 x float> %193, %183, !dbg !112
  %195 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !69
  %196 = insertelement <2 x i32> %195, i32 %160, i64 1, !dbg !69
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !69
  %198 = fcmp uno <2 x float> %183, zeroinitializer, !dbg !114
  %199 = or <2 x i1> %198, %194, !dbg !115
  %.v7 = select <2 x i1> %199, <2 x i32> %182, <2 x i32> %.v6, !dbg !116
  %200 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !116
  %201 = fcmp olt <2 x float> %200, %197, !dbg !117
  %202 = fcmp uno <2 x float> %197, zeroinitializer, !dbg !119
  %203 = or <2 x i1> %202, %201, !dbg !120
  %.v8 = select <2 x i1> %203, <2 x i32> %196, <2 x i32> %.v7, !dbg !121
  %204 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !121
  %205 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !75
  %206 = insertelement <2 x i32> %205, i32 %161, i64 1, !dbg !75
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !75
  %208 = fcmp olt <2 x float> %204, %207, !dbg !122
  %209 = fcmp uno <2 x float> %207, zeroinitializer, !dbg !124
  %210 = or <2 x i1> %209, %208, !dbg !125
  %.v9 = select <2 x i1> %210, <2 x i32> %206, <2 x i32> %.v8, !dbg !126
  %211 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !126
  %212 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !84
  %213 = insertelement <2 x i32> %212, i32 %162, i64 1, !dbg !84
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !84
  %215 = fcmp olt <2 x float> %211, %214, !dbg !127
  %216 = fcmp uno <2 x float> %214, zeroinitializer, !dbg !129
  %217 = or <2 x i1> %216, %215, !dbg !130
  %.v10 = select <2 x i1> %217, <2 x i32> %213, <2 x i32> %.v9, !dbg !131
  %218 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !131
  %219 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !90
  %220 = insertelement <2 x i32> %219, i32 %163, i64 1, !dbg !90
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !90
  %222 = fcmp olt <2 x float> %218, %221, !dbg !132
  %223 = fcmp uno <2 x float> %221, zeroinitializer, !dbg !134
  %224 = or <2 x i1> %223, %222, !dbg !135
  %.v11 = select <2 x i1> %224, <2 x i32> %220, <2 x i32> %.v10, !dbg !136
  %225 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !136
  %226 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !96
  %227 = insertelement <2 x i32> %226, i32 %164, i64 1, !dbg !96
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !96
  %229 = fcmp olt <2 x float> %225, %228, !dbg !137
  %230 = zext <2 x i1> %180 to <2 x i8>, !dbg !139
  %231 = select <2 x i1> %190, <2 x i8> splat (i8 2), <2 x i8> %230, !dbg !140
  %232 = select <2 x i1> %194, <2 x i8> splat (i8 3), <2 x i8> %231, !dbg !141
  %233 = select <2 x i1> %201, <2 x i8> splat (i8 4), <2 x i8> %232, !dbg !142
  %234 = select <2 x i1> %208, <2 x i8> splat (i8 5), <2 x i8> %233, !dbg !143
  %235 = select <2 x i1> %215, <2 x i8> splat (i8 6), <2 x i8> %234, !dbg !144
  %236 = select <2 x i1> %222, <2 x i8> splat (i8 7), <2 x i8> %235, !dbg !145
  %237 = select <2 x i1> %229, <2 x i8> splat (i8 8), <2 x i8> %236, !dbg !146
  %238 = bitcast i32 %164 to float, !dbg !147
  %239 = fcmp uno float %238, 0.000000e+00, !dbg !147
  %240 = extractelement <2 x i1> %229, i64 1, !dbg !148
  %241 = or i1 %239, %240, !dbg !148
  %242 = extractelement <2 x float> %225, i64 1, !dbg !149
  %243 = select i1 %241, float %238, float %242, !dbg !149
  %244 = bitcast i32 %173 to float, !dbg !147
  %245 = fcmp uno float %244, 0.000000e+00, !dbg !147
  %246 = extractelement <2 x i1> %229, i64 0, !dbg !148
  %247 = or i1 %245, %246, !dbg !148
  %248 = extractelement <2 x float> %225, i64 0, !dbg !149
  %249 = select i1 %247, float %244, float %248, !dbg !149
  %250 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %251 = bitcast i32 %250 to float, !dbg !27
  %252 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %253 = bitcast i32 %252 to float, !dbg !27
  %254 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %255 = bitcast i32 %254 to float, !dbg !25
  %256 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %257 = bitcast i32 %256 to float, !dbg !25
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !150
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !150
  %260 = fmul float %155, %258, !dbg !151
  %261 = fmul float %150, %259, !dbg !151
  %262 = fmul float %260, %257, !dbg !152
  %263 = fmul float %261, %255, !dbg !152
  %264 = fadd float %262, %253, !dbg !153
  %265 = fadd float %263, %251, !dbg !153
  %266 = fadd float %249, %264, !dbg !154
  %267 = fadd float %243, %265, !dbg !154
  %268 = fcmp olt float %266, 0.000000e+00, !dbg !155
  %269 = fcmp olt float %267, 0.000000e+00, !dbg !155
  %270 = select i1 %268, float 0.000000e+00, float %266, !dbg !157
  %271 = select i1 %269, float 0.000000e+00, float %267, !dbg !157
  %272 = getelementptr i8, ptr addrspace(1) %7, i64 %23, !dbg !158
  %273 = bitcast <2 x i8> %237 to i16, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %273, ptr addrspace(1) %272, i1 true) #3, !dbg !159
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !160
  %275 = bitcast float %266 to i32, !dbg !161
  %276 = bitcast float %267 to i32, !dbg !161
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %275, i32 %276, ptr addrspace(1) %274, i1 true) #3, !dbg !161
  %277 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !162
  %278 = bitcast float %270 to i32, !dbg !163
  %279 = bitcast float %271 to i32, !dbg !163
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %278, i32 %279, ptr addrspace(1) %277, i1 true) #3, !dbg !163
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccrayhhy25522xnzoa5r3d4grrhag2ldw377ofjjtptbpl2sbpqb.py", directory: "inductor_cache/cr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 67, column: 20, scope: !7)
!29 = !DILocation(line: 34, column: 20, scope: !7)
!30 = !DILocation(line: 36, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 50, scope: !7)
!35 = !DILocation(line: 45, column: 60, scope: !7)
!36 = !DILocation(line: 45, column: 71, scope: !7)
!37 = !DILocation(line: 45, column: 41, scope: !7)
!38 = !DILocation(line: 45, column: 46, scope: !7)
!39 = !DILocation(line: 45, column: 55, scope: !7)
!40 = !DILocation(line: 45, column: 65, scope: !7)
!41 = !DILocation(line: 45, column: 31, scope: !7)
!42 = !DILocation(line: 45, column: 76, scope: !7)
!43 = !DILocation(line: 47, column: 21, scope: !7)
!44 = !DILocation(line: 50, column: 19, scope: !7)
!45 = !DILocation(line: 51, column: 46, scope: !7)
!46 = !DILocation(line: 51, column: 55, scope: !7)
!47 = !DILocation(line: 51, column: 65, scope: !7)
!48 = !DILocation(line: 51, column: 31, scope: !7)
!49 = !DILocation(line: 51, column: 76, scope: !7)
!50 = !DILocation(line: 53, column: 16, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 19, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 55, scope: !7)
!56 = !DILocation(line: 58, column: 65, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 76, scope: !7)
!59 = !DILocation(line: 61, column: 21, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 45, scope: !7)
!62 = !DILocation(line: 65, column: 54, scope: !7)
!63 = !DILocation(line: 65, column: 64, scope: !7)
!64 = !DILocation(line: 65, column: 31, scope: !7)
!65 = !DILocation(line: 65, column: 75, scope: !7)
!66 = !DILocation(line: 68, column: 45, scope: !7)
!67 = !DILocation(line: 68, column: 55, scope: !7)
!68 = !DILocation(line: 68, column: 31, scope: !7)
!69 = !DILocation(line: 68, column: 66, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 42, scope: !7)
!72 = !DILocation(line: 71, column: 51, scope: !7)
!73 = !DILocation(line: 71, column: 61, scope: !7)
!74 = !DILocation(line: 71, column: 31, scope: !7)
!75 = !DILocation(line: 71, column: 72, scope: !7)
!76 = !DILocation(line: 73, column: 16, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 76, column: 20, scope: !7)
!79 = !DILocation(line: 77, column: 20, scope: !7)
!80 = !DILocation(line: 78, column: 43, scope: !7)
!81 = !DILocation(line: 78, column: 52, scope: !7)
!82 = !DILocation(line: 78, column: 62, scope: !7)
!83 = !DILocation(line: 78, column: 31, scope: !7)
!84 = !DILocation(line: 78, column: 73, scope: !7)
!85 = !DILocation(line: 80, column: 20, scope: !7)
!86 = !DILocation(line: 81, column: 43, scope: !7)
!87 = !DILocation(line: 81, column: 52, scope: !7)
!88 = !DILocation(line: 81, column: 62, scope: !7)
!89 = !DILocation(line: 81, column: 31, scope: !7)
!90 = !DILocation(line: 81, column: 73, scope: !7)
!91 = !DILocation(line: 83, column: 20, scope: !7)
!92 = !DILocation(line: 84, column: 43, scope: !7)
!93 = !DILocation(line: 84, column: 52, scope: !7)
!94 = !DILocation(line: 84, column: 62, scope: !7)
!95 = !DILocation(line: 84, column: 31, scope: !7)
!96 = !DILocation(line: 84, column: 73, scope: !7)
!97 = !DILocation(line: 113, column: 20, scope: !7)
!98 = !DILocation(line: 114, column: 27, scope: !7)
!99 = !DILocation(line: 111, column: 20, scope: !7)
!100 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !103)
!101 = distinct !DILexicalBlockFile(scope: !7, file: !102, discriminator: 0)
!102 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!103 = !DILocation(line: 52, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !108)
!108 = !DILocation(line: 59, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !108)
!112 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !113)
!113 = !DILocation(line: 66, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !118)
!118 = !DILocation(line: 69, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !118)
!122 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !123)
!123 = !DILocation(line: 72, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !123)
!126 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !123)
!127 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !128)
!128 = !DILocation(line: 79, column: 42, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !128)
!132 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !133)
!133 = !DILocation(line: 82, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !133)
!137 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !138)
!138 = !DILocation(line: 85, column: 42, scope: !7)
!139 = !DILocation(line: 89, column: 35, scope: !7)
!140 = !DILocation(line: 92, column: 35, scope: !7)
!141 = !DILocation(line: 95, column: 35, scope: !7)
!142 = !DILocation(line: 98, column: 35, scope: !7)
!143 = !DILocation(line: 101, column: 35, scope: !7)
!144 = !DILocation(line: 104, column: 35, scope: !7)
!145 = !DILocation(line: 107, column: 35, scope: !7)
!146 = !DILocation(line: 110, column: 35, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !138)
!148 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !138)
!149 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !138)
!150 = !DILocation(line: 116, column: 20, scope: !7)
!151 = !DILocation(line: 119, column: 20, scope: !7)
!152 = !DILocation(line: 120, column: 20, scope: !7)
!153 = !DILocation(line: 121, column: 20, scope: !7)
!154 = !DILocation(line: 122, column: 20, scope: !7)
!155 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !156)
!156 = !DILocation(line: 124, column: 42, scope: !7)
!157 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !156)
!158 = !DILocation(line: 125, column: 25, scope: !7)
!159 = !DILocation(line: 125, column: 37, scope: !7)
!160 = !DILocation(line: 126, column: 28, scope: !7)
!161 = !DILocation(line: 126, column: 40, scope: !7)
!162 = !DILocation(line: 127, column: 25, scope: !7)
!163 = !DILocation(line: 127, column: 37, scope: !7)
!164 = !DILocation(line: 127, column: 4, scope: !7)
