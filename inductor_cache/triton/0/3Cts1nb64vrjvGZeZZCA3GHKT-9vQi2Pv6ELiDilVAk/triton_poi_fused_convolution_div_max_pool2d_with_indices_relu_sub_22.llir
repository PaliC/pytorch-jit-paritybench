; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = or disjoint i32 %10, 64, !dbg !12
  %15 = or disjoint i32 %10, 80, !dbg !12
  %16 = or disjoint i32 %10, 96, !dbg !12
  %17 = or disjoint i32 %10, 112, !dbg !12
  %18 = or disjoint i32 %10, 128, !dbg !12
  %19 = or disjoint i32 %10, 144, !dbg !12
  %20 = or disjoint i32 %10, 160, !dbg !12
  %21 = or disjoint i32 %10, 176, !dbg !12
  %22 = or disjoint i32 %10, 192, !dbg !12
  %23 = or disjoint i32 %10, 208, !dbg !12
  %24 = or disjoint i32 %10, 224, !dbg !12
  %25 = or disjoint i32 %10, 240, !dbg !12
  %26 = shl i32 %8, 2, !dbg !12
  %27 = and i32 %26, 252, !dbg !12
  %28 = or disjoint i32 %7, %10, !dbg !13
  %29 = or disjoint i32 %7, %11, !dbg !13
  %30 = or disjoint i32 %7, %12, !dbg !13
  %31 = or disjoint i32 %7, %13, !dbg !13
  %32 = or disjoint i32 %7, %14, !dbg !13
  %33 = or disjoint i32 %7, %15, !dbg !13
  %34 = or disjoint i32 %7, %16, !dbg !13
  %35 = or disjoint i32 %7, %17, !dbg !13
  %36 = or disjoint i32 %7, %18, !dbg !13
  %37 = or disjoint i32 %7, %19, !dbg !13
  %38 = or disjoint i32 %7, %20, !dbg !13
  %39 = or disjoint i32 %7, %21, !dbg !13
  %40 = or disjoint i32 %7, %22, !dbg !13
  %41 = or disjoint i32 %7, %23, !dbg !13
  %42 = or disjoint i32 %7, %24, !dbg !13
  %43 = or disjoint i32 %7, %25, !dbg !13
  %44 = or disjoint i32 %7, %27, !dbg !13
  %45 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %46 = shl i32 %45, 4, !dbg !15
  %47 = and i32 %8, 15, !dbg !16
  %.lobit13 = lshr i32 %8, 6, !dbg !16
  %48 = and i32 %.lobit13, 3, !dbg !16
  %49 = or disjoint i32 %46, %47, !dbg !17
  %50 = or disjoint i32 %46, %48, !dbg !17
  %51 = or disjoint i32 %50, 4, !dbg !17
  %52 = or disjoint i32 %50, 8, !dbg !17
  %53 = icmp slt i32 %49, 9, !dbg !18
  %54 = icmp slt i32 %50, 9, !dbg !18
  %55 = icmp slt i32 %51, 9, !dbg !18
  %56 = icmp slt i32 %52, 9, !dbg !18
  %57 = icmp slt i32 %46, 0, !dbg !18
  %.frozen = freeze i32 %44, !dbg !19
  %58 = sdiv i32 %.frozen, 128, !dbg !19
  %59 = mul i32 %58, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %59, !dbg !20
  %60 = mul i32 %28, 9, !dbg !21
  %61 = mul i32 %29, 9, !dbg !21
  %62 = mul i32 %30, 9, !dbg !21
  %63 = mul i32 %31, 9, !dbg !21
  %64 = mul i32 %32, 9, !dbg !21
  %65 = mul i32 %33, 9, !dbg !21
  %66 = mul i32 %34, 9, !dbg !21
  %67 = mul i32 %35, 9, !dbg !21
  %68 = mul i32 %36, 9, !dbg !21
  %69 = mul i32 %37, 9, !dbg !21
  %70 = mul i32 %38, 9, !dbg !21
  %71 = mul i32 %39, 9, !dbg !21
  %72 = mul i32 %40, 9, !dbg !21
  %73 = mul i32 %41, 9, !dbg !21
  %74 = mul i32 %42, 9, !dbg !21
  %75 = mul i32 %43, 9, !dbg !21
  %76 = add i32 %49, %60, !dbg !22
  %77 = add i32 %49, %61, !dbg !22
  %78 = add i32 %49, %62, !dbg !22
  %79 = add i32 %49, %63, !dbg !22
  %80 = add i32 %49, %64, !dbg !22
  %81 = add i32 %49, %65, !dbg !22
  %82 = add i32 %49, %66, !dbg !22
  %83 = add i32 %49, %67, !dbg !22
  %84 = add i32 %49, %68, !dbg !22
  %85 = add i32 %49, %69, !dbg !22
  %86 = add i32 %49, %70, !dbg !22
  %87 = add i32 %49, %71, !dbg !22
  %88 = add i32 %49, %72, !dbg !22
  %89 = add i32 %49, %73, !dbg !22
  %90 = add i32 %49, %74, !dbg !22
  %91 = add i32 %49, %75, !dbg !22
  %92 = sext i32 %76 to i64, !dbg !23
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !23
  %94 = sext i32 %77 to i64, !dbg !23
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !23
  %96 = sext i32 %78 to i64, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !23
  %98 = sext i32 %79 to i64, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !23
  %100 = sext i32 %80 to i64, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !23
  %102 = sext i32 %81 to i64, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !23
  %104 = sext i32 %82 to i64, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !23
  %106 = sext i32 %83 to i64, !dbg !23
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !23
  %108 = sext i32 %84 to i64, !dbg !23
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !23
  %110 = sext i32 %85 to i64, !dbg !23
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !23
  %112 = sext i32 %86 to i64, !dbg !23
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !23
  %114 = sext i32 %87 to i64, !dbg !23
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !23
  %116 = sext i32 %88 to i64, !dbg !23
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !23
  %118 = sext i32 %89 to i64, !dbg !23
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !23
  %120 = sext i32 %90 to i64, !dbg !23
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !23
  %122 = sext i32 %91 to i64, !dbg !23
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !23
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %53) #2, !dbg !24
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %53) #2, !dbg !24
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %53) #2, !dbg !24
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %53) #2, !dbg !24
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %53) #2, !dbg !24
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %53) #2, !dbg !24
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %53) #2, !dbg !24
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %53) #2, !dbg !24
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %53) #2, !dbg !24
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %53) #2, !dbg !24
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %53) #2, !dbg !24
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %53) #2, !dbg !24
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %53) #2, !dbg !24
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %53) #2, !dbg !24
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %53) #2, !dbg !24
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %53) #2, !dbg !24
  %140 = shl i32 %50, 7, !dbg !25
  %141 = shl i32 %51, 7, !dbg !25
  %142 = shl i32 %52, 7, !dbg !25
  %143 = or disjoint i32 %140, 1536, !dbg !25
  %144 = mul i32 %58, 1152, !dbg !26
  %145 = add i32 %144, %.decomposed, !dbg !27
  %146 = add i32 %145, %140, !dbg !28
  %147 = add i32 %145, %141, !dbg !28
  %148 = add i32 %145, %142, !dbg !28
  %149 = add i32 %145, %143, !dbg !28
  %150 = sext i32 %146 to i64, !dbg !29
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !29
  %152 = sext i32 %147 to i64, !dbg !29
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !29
  %154 = sext i32 %148 to i64, !dbg !29
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !29
  %156 = sext i32 %149 to i64, !dbg !29
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !29
  %158 = shl i32 %8, 8, !dbg !30
  %159 = and i32 %158, 3840, !dbg !30
  %160 = or disjoint i32 %159, %10, !dbg !30
  %161 = and i32 %26, 1020, !dbg !30
  %162 = lshr exact i32 %159, 4, !dbg !30
  %163 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %162, !dbg !30
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %160, !dbg !30
  %165 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !30
  %166 = or disjoint i32 %160, 16, !dbg !30
  %167 = getelementptr float, ptr addrspace(3) %163, i32 %166, !dbg !30
  %168 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !30
  %169 = or disjoint i32 %160, 32, !dbg !30
  %170 = getelementptr float, ptr addrspace(3) %163, i32 %169, !dbg !30
  %171 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !30
  %172 = or disjoint i32 %160, 48, !dbg !30
  %173 = getelementptr float, ptr addrspace(3) %163, i32 %172, !dbg !30
  %174 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !30
  %175 = or disjoint i32 %160, 64, !dbg !30
  %176 = getelementptr float, ptr addrspace(3) %163, i32 %175, !dbg !30
  %177 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !30
  %178 = or disjoint i32 %160, 80, !dbg !30
  %179 = getelementptr float, ptr addrspace(3) %163, i32 %178, !dbg !30
  %180 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !30
  %181 = or disjoint i32 %160, 96, !dbg !30
  %182 = getelementptr float, ptr addrspace(3) %163, i32 %181, !dbg !30
  %183 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !30
  %184 = or disjoint i32 %160, 112, !dbg !30
  %185 = getelementptr float, ptr addrspace(3) %163, i32 %184, !dbg !30
  %186 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !30
  %187 = or disjoint i32 %160, 128, !dbg !30
  %188 = getelementptr float, ptr addrspace(3) %163, i32 %187, !dbg !30
  %189 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !30
  %190 = or disjoint i32 %160, 144, !dbg !30
  %191 = getelementptr float, ptr addrspace(3) %163, i32 %190, !dbg !30
  %192 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !30
  %193 = or disjoint i32 %160, 160, !dbg !30
  %194 = getelementptr float, ptr addrspace(3) %163, i32 %193, !dbg !30
  %195 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !30
  %196 = or disjoint i32 %160, 176, !dbg !30
  %197 = getelementptr float, ptr addrspace(3) %163, i32 %196, !dbg !30
  %198 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !30
  %199 = or disjoint i32 %160, 192, !dbg !30
  %200 = getelementptr float, ptr addrspace(3) %163, i32 %199, !dbg !30
  %201 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !30
  %202 = or disjoint i32 %160, 208, !dbg !30
  %203 = getelementptr float, ptr addrspace(3) %163, i32 %202, !dbg !30
  %204 = insertelement <1 x i32> poison, i32 %137, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !30
  %205 = or disjoint i32 %160, 224, !dbg !30
  %206 = getelementptr float, ptr addrspace(3) %163, i32 %205, !dbg !30
  %207 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !30
  %208 = or disjoint i32 %160, 240, !dbg !30
  %209 = getelementptr float, ptr addrspace(3) %163, i32 %208, !dbg !30
  %210 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %211 = lshr i32 %26, 6, !dbg !30
  %212 = and i32 %211, 12, !dbg !30
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !30
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %161, !dbg !30
  %215 = or disjoint i32 %161, 1024, !dbg !30
  %216 = lshr i32 %215, 6, !dbg !30
  %217 = and i32 %216, 28, !dbg !30
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !30
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %215, !dbg !30
  %220 = load <4 x i32>, ptr addrspace(3) %219, align 16, !dbg !30
  %221 = or disjoint i32 %161, 2048, !dbg !30
  %222 = lshr i32 %221, 6, !dbg !30
  %223 = and i32 %222, 44, !dbg !30
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !30
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %221, !dbg !30
  %226 = load <4 x i32>, ptr addrspace(3) %225, align 16, !dbg !30
  %227 = or disjoint i32 %161, 3072, !dbg !30
  %228 = lshr i32 %227, 6, !dbg !30
  %229 = and i32 %228, 60, !dbg !30
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !30
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %227, !dbg !30
  %232 = load <4 x i32>, ptr addrspace(3) %231, align 16, !dbg !30
  %.extract = load i32, ptr addrspace(3) %214, align 16, !dbg !30
  %233 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 4, !dbg !30
  %.extract19 = load i32, ptr addrspace(3) %233, align 4, !dbg !30
  %234 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 8, !dbg !30
  %.extract20 = load i32, ptr addrspace(3) %234, align 8, !dbg !30
  %235 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 12, !dbg !30
  %.extract21 = load i32, ptr addrspace(3) %235, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %151, i1 %54) #2, !dbg !30
  %.extract22 = extractelement <4 x i32> %220, i64 0, !dbg !30
  %.extract23 = extractelement <4 x i32> %220, i64 1, !dbg !30
  %.extract24 = extractelement <4 x i32> %220, i64 2, !dbg !30
  %.extract25 = extractelement <4 x i32> %220, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %153, i1 %55) #2, !dbg !30
  %.extract26 = extractelement <4 x i32> %226, i64 0, !dbg !30
  %.extract27 = extractelement <4 x i32> %226, i64 1, !dbg !30
  %.extract28 = extractelement <4 x i32> %226, i64 2, !dbg !30
  %.extract29 = extractelement <4 x i32> %226, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %155, i1 %56) #2, !dbg !30
  %.extract30 = extractelement <4 x i32> %232, i64 0, !dbg !30
  %.extract31 = extractelement <4 x i32> %232, i64 1, !dbg !30
  %.extract32 = extractelement <4 x i32> %232, i64 2, !dbg !30
  %.extract33 = extractelement <4 x i32> %232, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %157, i1 %57) #2, !dbg !30
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !31
  %237 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !31
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !31
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %236, i1 %54) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %237, i1 %55) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %238, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %239, i1 %57) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfbfjntq4hakpxqf6minwds45mpckhrqfpwwt4a5gz3ac6kbhipf.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_22", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 42, scope: !7)
!25 = !DILocation(line: 33, column: 34, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 55, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 55, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
