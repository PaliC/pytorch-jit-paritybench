; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 128, !dbg !14
  %13 = lshr i32 %8, 5, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %14 = sdiv i32 %.frozen, 64, !dbg !16
  %15 = mul i32 %14, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = shl nsw i32 %.decomposed, 3, !dbg !18
  %17 = shl i32 %8, 6, !dbg !19
  %18 = and i32 %17, 7680, !dbg !19
  %19 = add nsw i32 %16, %18, !dbg !20
  %20 = shl i32 %14, 13, !dbg !21
  %21 = add i32 %19, %20, !dbg !22
  %22 = lshr i32 %8, 7, !dbg !23
  %23 = and i32 %22, 1, !dbg !23
  %24 = or disjoint i32 %23, 2, !dbg !23
  %25 = or disjoint i32 %23, 4, !dbg !23
  %26 = or disjoint i32 %23, 6, !dbg !23
  %27 = or disjoint i32 %21, %23, !dbg !24
  %28 = or disjoint i32 %21, %24, !dbg !24
  %29 = or disjoint i32 %21, %25, !dbg !24
  %30 = or disjoint i32 %21, %26, !dbg !24
  %31 = sext i32 %27 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = sext i32 %28 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %29 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %30 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %12, i32 0, i1 %12) #3, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %12, i32 0, i1 %12) #3, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %12, i32 0, i1 %12) #3, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %12, i32 0, i1 %12) #3, !dbg !26
  %43 = or disjoint i32 %16, %23, !dbg !27
  %44 = or disjoint i32 %16, %24, !dbg !27
  %45 = or disjoint i32 %16, %25, !dbg !27
  %46 = or disjoint i32 %16, %26, !dbg !27
  %47 = sext i32 %43 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !28
  %49 = sext i32 %44 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !28
  %51 = sext i32 %45 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !28
  %53 = sext i32 %46 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %12, i32 0, i1 %12) #3, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %12, i32 0, i1 %12) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %12, i32 0, i1 %12) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %12, i32 0, i1 %12) #3, !dbg !29
  %59 = add nsw i32 %19, 16384, !dbg !30
  %60 = add i32 %59, %20, !dbg !31
  %61 = or disjoint i32 %60, %23, !dbg !32
  %62 = or disjoint i32 %60, %24, !dbg !32
  %63 = or disjoint i32 %60, %25, !dbg !32
  %64 = or disjoint i32 %60, %26, !dbg !32
  %65 = sext i32 %61 to i64, !dbg !33
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !33
  %67 = sext i32 %62 to i64, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !33
  %69 = sext i32 %63 to i64, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !33
  %71 = sext i32 %64 to i64, !dbg !33
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %77 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %78 = insertelement <2 x i32> %77, i32 %40, i64 1, !dbg !26
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !26
  %80 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !29
  %81 = insertelement <2 x i32> %80, i32 %56, i64 1, !dbg !29
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !29
  %83 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !34
  %84 = insertelement <2 x i32> %83, i32 %74, i64 1, !dbg !34
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !34
  %86 = fadd <2 x float> %79, %82, !dbg !35
  %87 = fadd <2 x float> %82, %85, !dbg !36
  %88 = fsub <2 x float> %86, %87, !dbg !37
  %89 = fmul <2 x float> %88, %88, !dbg !38
  %90 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !26
  %91 = insertelement <2 x i32> %90, i32 %42, i64 1, !dbg !26
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !26
  %93 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !29
  %94 = insertelement <2 x i32> %93, i32 %58, i64 1, !dbg !29
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !29
  %96 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !34
  %97 = insertelement <2 x i32> %96, i32 %76, i64 1, !dbg !34
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !34
  %99 = fadd <2 x float> %92, %95, !dbg !35
  %100 = fadd <2 x float> %95, %98, !dbg !36
  %101 = fsub <2 x float> %99, %100, !dbg !37
  %102 = fmul <2 x float> %101, %101, !dbg !38
  %shift = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %103 = fadd <2 x float> %89, %shift, !dbg !39
  %104 = fadd <2 x float> %103, %102, !dbg !39
  %shift1 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %105 = fadd <2 x float> %104, %shift1, !dbg !39
  %106 = extractelement <2 x float> %105, i64 0, !dbg !39
  %107 = select i1 %12, float %106, float 0.000000e+00, !dbg !39
  %108 = bitcast float %107 to i32, !dbg !44
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !44
  %110 = bitcast i32 %109 to float, !dbg !44
  %111 = fadd float %107, %110, !dbg !39
  %112 = bitcast float %111 to i32, !dbg !44
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !44
  %114 = bitcast i32 %113 to float, !dbg !44
  %115 = fadd float %111, %114, !dbg !39
  %116 = lshr i32 %9, 3, !dbg !44
  %117 = icmp samesign ult i32 %9, 8, !dbg !44
  %118 = and i32 %13, 7, !dbg !44
  %119 = shl nuw nsw i32 %10, 3, !dbg !44
  %120 = or disjoint i32 %119, %118, !dbg !44
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !44
  %122 = bitcast float %115 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 %117) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %123 = icmp slt i32 %8, 64, !dbg !44
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !44
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %123) #3, !dbg !44
  %126 = bitcast i32 %125 to float, !dbg !44
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !44
  %128 = bitcast i32 %127 to float, !dbg !44
  %129 = fadd float %126, %128, !dbg !39
  %130 = bitcast float %129 to i32, !dbg !44
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !44
  %132 = bitcast i32 %131 to float, !dbg !44
  %133 = fadd float %129, %132, !dbg !39
  %134 = bitcast float %133 to i32, !dbg !44
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !44
  %136 = bitcast i32 %135 to float, !dbg !44
  %137 = fadd float %133, %136, !dbg !39
  %138 = icmp eq i32 %10, 0, !dbg !44
  %139 = and i1 %123, %138, !dbg !44
  %140 = bitcast float %137 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %140, i1 %139) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !44
  %142 = load i32, ptr addrspace(3) %141, align 16, !dbg !44
  %143 = sext i32 %11 to i64, !dbg !45
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !45
  %145 = shl nuw nsw i32 %118, 2, !dbg !46
  %146 = or disjoint i32 %145, %116, !dbg !46
  %147 = icmp eq i32 %146, 0, !dbg !46
  %148 = and i1 %147, %12, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %144, i1 %148) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccogwlezhowuk6po6yzfpiritqemz3x5h7wa55psroiavpydgt7e.py", directory: "inductor_cache/co")
!4 = !{ptr @triton_per_fused_mean_pow_sub_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_29", linkageName: "triton_per_fused_mean_pow_sub_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 32, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 37, scope: !7)
!21 = !DILocation(line: 33, column: 60, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 33, column: 103, scope: !7)
!24 = !DILocation(line: 33, column: 97, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 109, scope: !7)
!27 = !DILocation(line: 34, column: 38, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 35, column: 45, scope: !7)
!31 = !DILocation(line: 35, column: 63, scope: !7)
!32 = !DILocation(line: 35, column: 105, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 117, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 43, column: 25, scope: !7)
!46 = !DILocation(line: 43, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 4, scope: !7)
