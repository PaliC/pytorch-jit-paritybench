; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_pow_sub_sum_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = and i32 %9, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 8, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 2, !dbg !15
  %15 = mul i32 %14, 2, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl i32 %14, 2, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %13) #1, !dbg !19
  %20 = shl nsw i32 %.decomposed, 2, !dbg !20
  %21 = shl i32 %14, 4, !dbg !21
  %22 = add i32 %21, %20, !dbg !22
  %23 = add i32 %22, 8, !dbg !23
  %24 = sext i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %13) #1, !dbg !25
  %27 = or disjoint i32 %16, 1, !dbg !26
  %28 = sext i32 %27 to i64, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !27
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #1, !dbg !28
  %31 = add i32 %22, 9, !dbg !29
  %32 = sext i32 %31 to i64, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !31
  %35 = or disjoint i32 %16, 2, !dbg !32
  %36 = sext i32 %35 to i64, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #1, !dbg !34
  %39 = add i32 %22, 10, !dbg !35
  %40 = sext i32 %39 to i64, !dbg !36
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !36
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #1, !dbg !37
  %43 = or disjoint i32 %16, 3, !dbg !38
  %44 = sext i32 %43 to i64, !dbg !39
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !39
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !40
  %47 = add i32 %22, 11, !dbg !41
  %48 = sext i32 %47 to i64, !dbg !42
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !42
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !43
  %51 = shl i32 %12, 2, !dbg !44
  %52 = sext i32 %51 to i64, !dbg !45
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !45
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %13) #1, !dbg !46
  %55 = or disjoint i32 %51, 1, !dbg !47
  %56 = sext i32 %55 to i64, !dbg !48
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !48
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %13) #1, !dbg !49
  %59 = or disjoint i32 %51, 2, !dbg !50
  %60 = sext i32 %59 to i64, !dbg !51
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !51
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !52
  %63 = or disjoint i32 %51, 3, !dbg !53
  %64 = sext i32 %63 to i64, !dbg !54
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !54
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %13) #1, !dbg !55
  %67 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !46
  %68 = insertelement <2 x i32> %67, i32 %26, i64 1, !dbg !46
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !46
  %70 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !49
  %71 = insertelement <2 x i32> %70, i32 %34, i64 1, !dbg !49
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !49
  %73 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !52
  %74 = insertelement <2 x i32> %73, i32 %42, i64 1, !dbg !52
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !52
  %76 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !55
  %77 = insertelement <2 x i32> %76, i32 %50, i64 1, !dbg !55
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !55
  %79 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !56
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !56
  %81 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %82 = fmul <2 x float> %81, %69, !dbg !56
  %83 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !57
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !57
  %85 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %86 = fmul <2 x float> %85, %72, !dbg !57
  %87 = fadd <2 x float> %82, %86, !dbg !58
  %88 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !59
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !59
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %91 = fmul <2 x float> %90, %75, !dbg !59
  %92 = fadd <2 x float> %87, %91, !dbg !60
  %93 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !61
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !61
  %95 = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %96 = fmul <2 x float> %95, %78, !dbg !61
  %97 = fadd <2 x float> %92, %96, !dbg !62
  %98 = extractelement <2 x float> %97, i64 1, !dbg !63
  %99 = fmul float %98, %98, !dbg !64
  %100 = extractelement <2 x float> %97, i64 0, !dbg !65
  %101 = fsub float %100, %99, !dbg !65
  %102 = sext i32 %12 to i64, !dbg !66
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !66
  %104 = icmp eq i32 %10, 0, !dbg !63
  %105 = bitcast float %98 to i32, !dbg !63
  %106 = and i1 %104, %13, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %103, i1 %106) #1, !dbg !63
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !67
  %108 = bitcast float %101 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %107, i1 %106) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr7bl5d3dshqai4uwdusp3j5bzgxkds7lhijxhg6eol63korjy4z.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_poi_fused_mul_pow_sub_sum_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_pow_sub_sum_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_pow_sub_sum_7", linkageName: "triton_poi_fused_mul_pow_sub_sum_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 49, scope: !7)
!26 = !DILocation(line: 29, column: 34, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 49, scope: !7)
!32 = !DILocation(line: 31, column: 34, scope: !7)
!33 = !DILocation(line: 31, column: 30, scope: !7)
!34 = !DILocation(line: 31, column: 41, scope: !7)
!35 = !DILocation(line: 32, column: 42, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 50, scope: !7)
!38 = !DILocation(line: 33, column: 35, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 34, column: 43, scope: !7)
!42 = !DILocation(line: 34, column: 31, scope: !7)
!43 = !DILocation(line: 34, column: 51, scope: !7)
!44 = !DILocation(line: 35, column: 33, scope: !7)
!45 = !DILocation(line: 35, column: 31, scope: !7)
!46 = !DILocation(line: 35, column: 38, scope: !7)
!47 = !DILocation(line: 36, column: 35, scope: !7)
!48 = !DILocation(line: 36, column: 31, scope: !7)
!49 = !DILocation(line: 36, column: 42, scope: !7)
!50 = !DILocation(line: 37, column: 35, scope: !7)
!51 = !DILocation(line: 37, column: 31, scope: !7)
!52 = !DILocation(line: 37, column: 42, scope: !7)
!53 = !DILocation(line: 38, column: 35, scope: !7)
!54 = !DILocation(line: 38, column: 31, scope: !7)
!55 = !DILocation(line: 38, column: 42, scope: !7)
!56 = !DILocation(line: 46, column: 19, scope: !7)
!57 = !DILocation(line: 47, column: 19, scope: !7)
!58 = !DILocation(line: 48, column: 20, scope: !7)
!59 = !DILocation(line: 49, column: 19, scope: !7)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 55, column: 37, scope: !7)
!64 = !DILocation(line: 53, column: 20, scope: !7)
!65 = !DILocation(line: 54, column: 20, scope: !7)
!66 = !DILocation(line: 55, column: 25, scope: !7)
!67 = !DILocation(line: 56, column: 25, scope: !7)
!68 = !DILocation(line: 56, column: 37, scope: !7)
!69 = !DILocation(line: 56, column: 4, scope: !7)
