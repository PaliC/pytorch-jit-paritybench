; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 2, !dbg !11
  %13 = and i32 %12, 252, !dbg !11
  %14 = srem i32 %10, 256, !dbg !12
  %15 = shl i32 %10, 8, !dbg !13
  %16 = or disjoint i32 %15, %13, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !18
  %22 = sext i32 %14 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !26
  %44 = fadd float %33, 0x3EE4F8B580000000, !dbg !27
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i11 = icmp eq i32 %51, 0, !dbg !28
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i14 = icmp eq i32 %52, 0, !dbg !28
  br i1 %.not.i11, label %58, label %53, !dbg !28

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %56, label %54, !dbg !28

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %61, label %59, !dbg !28

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %54, %56, %59, %61
  %.0.i13 = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %64 = bitcast i32 %63 to float, !dbg !18
  %65 = bitcast i32 %27 to float, !dbg !20
  %66 = fsub float %64, %65, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %68 = bitcast i32 %67 to float, !dbg !18
  %69 = fsub float %68, %65, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %71 = bitcast i32 %70 to float, !dbg !18
  %72 = fsub float %71, %65, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %74 = bitcast i32 %73 to float, !dbg !18
  %75 = fsub float %74, %65, !dbg !29
  %76 = bitcast i32 %43 to float, !dbg !26
  %77 = bitcast i32 %38 to float, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %79 = bitcast i32 %78 to float, !dbg !16
  %80 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %81 = bitcast i32 %80 to float, !dbg !16
  %82 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %83 = bitcast i32 %82 to float, !dbg !16
  %84 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %85 = bitcast i32 %84 to float, !dbg !16
  %86 = lshr i32 %11, 5, !dbg !11
  %87 = and i32 %11, 31, !dbg !11
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !30
  %89 = fmul float %75, %88, !dbg !31
  %90 = fmul float %72, %88, !dbg !31
  %91 = fmul float %69, %88, !dbg !31
  %92 = fmul float %66, %88, !dbg !31
  %93 = fmul float %89, %77, !dbg !32
  %94 = fmul float %90, %77, !dbg !32
  %95 = fmul float %91, %77, !dbg !32
  %96 = fmul float %92, %77, !dbg !32
  %97 = fadd float %93, %76, !dbg !33
  %98 = fadd float %94, %76, !dbg !33
  %99 = fadd float %95, %76, !dbg !33
  %100 = fadd float %96, %76, !dbg !33
  %101 = fcmp olt float %97, 0.000000e+00, !dbg !34
  %102 = fcmp olt float %98, 0.000000e+00, !dbg !34
  %103 = fcmp olt float %99, 0.000000e+00, !dbg !34
  %104 = fcmp olt float %100, 0.000000e+00, !dbg !34
  %105 = select i1 %101, float 0.000000e+00, float %97, !dbg !38
  %106 = select i1 %102, float 0.000000e+00, float %98, !dbg !38
  %107 = select i1 %103, float 0.000000e+00, float %99, !dbg !38
  %108 = select i1 %104, float 0.000000e+00, float %100, !dbg !38
  %109 = fadd float %105, %85, !dbg !39
  %110 = fadd float %106, %83, !dbg !39
  %111 = fadd float %107, %81, !dbg !39
  %112 = fadd float %108, %79, !dbg !39
  %113 = fcmp olt float %109, 0.000000e+00, !dbg !40
  %114 = fcmp olt float %110, 0.000000e+00, !dbg !40
  %115 = fcmp olt float %111, 0.000000e+00, !dbg !40
  %116 = fcmp olt float %112, 0.000000e+00, !dbg !40
  %117 = select i1 %113, float 0.000000e+00, float %109, !dbg !42
  %118 = select i1 %114, float 0.000000e+00, float %110, !dbg !42
  %119 = select i1 %115, float 0.000000e+00, float %111, !dbg !42
  %120 = select i1 %116, float 0.000000e+00, float %112, !dbg !42
  %121 = fadd float %117, %118, !dbg !43
  %122 = fadd float %119, %121, !dbg !43
  %123 = fadd float %120, %122, !dbg !43
  %124 = bitcast float %123 to i32, !dbg !48
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !48
  %126 = bitcast i32 %125 to float, !dbg !48
  %127 = fadd float %123, %126, !dbg !43
  %128 = bitcast float %127 to i32, !dbg !48
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !48
  %130 = bitcast i32 %129 to float, !dbg !48
  %131 = fadd float %127, %130, !dbg !43
  %132 = bitcast float %131 to i32, !dbg !48
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !48
  %134 = bitcast i32 %133 to float, !dbg !48
  %135 = fadd float %131, %134, !dbg !43
  %136 = bitcast float %135 to i32, !dbg !48
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !48
  %138 = bitcast i32 %137 to float, !dbg !48
  %139 = fadd float %135, %138, !dbg !43
  %140 = bitcast float %139 to i32, !dbg !48
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !48
  %142 = bitcast i32 %141 to float, !dbg !48
  %143 = fadd float %139, %142, !dbg !43
  %144 = icmp eq i32 %87, 0, !dbg !48
  %145 = and i32 %86, 1, !dbg !48
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !48
  %147 = bitcast float %143 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 %144) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %148 = icmp slt i32 %11, 2, !dbg !48
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !48
  %150 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %149, i1 %148) #5, !dbg !48
  %151 = bitcast i32 %150 to float, !dbg !48
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !48
  %153 = bitcast i32 %152 to float, !dbg !48
  %154 = fadd float %151, %153, !dbg !43
  %155 = and i32 %11, 1, !dbg !48
  %156 = icmp eq i32 %155, 0, !dbg !48
  %157 = and i1 %148, %156, !dbg !48
  %158 = bitcast float %154 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %158, i1 %157) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %159 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %160 = fadd float %159, 0.000000e+00, !dbg !49
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.560000e+02) #5, !dbg !51
  %162 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !52
  %163 = bitcast float %117 to i32, !dbg !53
  %164 = bitcast float %118 to i32, !dbg !53
  %165 = bitcast float %119 to i32, !dbg !53
  %166 = bitcast float %120 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %163, i32 %164, i32 %165, i32 %166, ptr addrspace(1) %162, i1 true) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %167 = sext i32 %10 to i64, !dbg !55
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !55
  %urem = and i32 %11, 63, !dbg !56
  %169 = icmp eq i32 %urem, 0, !dbg !56
  %170 = bitcast float %161 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %168, i1 %169) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjb3mpdvwjcglely4qe5kcxmhswvjufo3lxrjyrbsyhoefqnbxdl.py", directory: "inductor_cache/jb")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_9, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_9", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 39, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 44, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 44, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 35, scope: !7)
!21 = !DILocation(line: 36, column: 30, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 37, column: 31, scope: !7)
!24 = !DILocation(line: 37, column: 36, scope: !7)
!25 = !DILocation(line: 38, column: 31, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 41, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 26, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 44, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 19, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 51, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 52, column: 19, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !41)
!41 = !DILocation(line: 53, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !41)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!47 = !DILocation(line: 55, column: 59, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 73, column: 15, scope: !35, inlinedAt: !50)
!50 = !DILocation(line: 55, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 46, scope: !7)
!54 = !DILocation(line: 59, column: 4, scope: !7)
!55 = !DILocation(line: 60, column: 28, scope: !7)
!56 = !DILocation(line: 60, column: 40, scope: !7)
!57 = !DILocation(line: 60, column: 4, scope: !7)
