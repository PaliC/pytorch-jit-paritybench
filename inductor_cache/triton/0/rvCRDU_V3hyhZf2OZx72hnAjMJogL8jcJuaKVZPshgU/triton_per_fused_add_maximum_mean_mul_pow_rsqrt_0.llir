; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_maximum_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 16, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = srem i32 %9, 4, !dbg !13
  %14 = shl i32 %9, 4, !dbg !14
  %15 = or disjoint i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #5, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #5, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = sext i32 %13 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #5, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %10) #5, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %10) #5, !dbg !23
  %29 = fmul float %19, %19, !dbg !24
  %30 = fmul float %21, %21, !dbg !24
  %31 = select i1 %10, float %29, float 0.000000e+00, !dbg !25
  %32 = select i1 %10, float %30, float 0.000000e+00, !dbg !25
  %33 = bitcast float %31 to i32, !dbg !26
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 8, i32 31), !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = fadd float %31, %35, !dbg !30
  %37 = bitcast float %36 to i32, !dbg !26
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = fadd float %36, %39, !dbg !30
  %41 = bitcast float %40 to i32, !dbg !26
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = fadd float %40, %43, !dbg !30
  %45 = bitcast float %44 to i32, !dbg !26
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !26
  %47 = bitcast i32 %46 to float, !dbg !26
  %48 = fadd float %44, %47, !dbg !30
  %49 = bitcast float %32 to i32, !dbg !26
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = fadd float %32, %51, !dbg !30
  %53 = bitcast float %52 to i32, !dbg !26
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !26
  %55 = bitcast i32 %54 to float, !dbg !26
  %56 = fadd float %52, %55, !dbg !30
  %57 = bitcast float %56 to i32, !dbg !26
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !26
  %59 = bitcast i32 %58 to float, !dbg !26
  %60 = fadd float %56, %59, !dbg !30
  %61 = bitcast float %60 to i32, !dbg !26
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = fadd float %60, %63, !dbg !30
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 1.600000e+01) #5, !dbg !32
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.600000e+01) #5, !dbg !32
  %67 = fadd float %65, 0x3EB0C6F7A0000000, !dbg !33
  %68 = fadd float %66, 0x3EB0C6F7A0000000, !dbg !33
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i = icmp eq i32 %69, 0, !dbg !34
  br i1 %.not.i, label %72, label %70, !dbg !34

70:                                               ; preds = %8
  %71 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %67), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

72:                                               ; preds = %8
  %73 = tail call float @llvm.nvvm.rsqrt.approx.f(float %67), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %70, %72
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], !dbg !34
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i1 = icmp eq i32 %74, 0, !dbg !34
  br i1 %.not.i1, label %77, label %75, !dbg !34

75:                                               ; preds = %__nv_rsqrtf.exit
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %68), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

77:                                               ; preds = %__nv_rsqrtf.exit
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %68), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

__nv_rsqrtf.exit3:                                ; preds = %75, %77
  %.0.i2 = phi float [ %76, %75 ], [ %78, %77 ], !dbg !34
  %79 = bitcast i32 %28 to float, !dbg !23
  %80 = bitcast i32 %26 to float, !dbg !21
  %81 = bitcast i32 %24 to float, !dbg !19
  %82 = fmul float %.0.i, %19, !dbg !35
  %83 = fmul float %82, %81, !dbg !36
  %84 = fadd float %83, %80, !dbg !37
  %85 = fcmp ogt float %84, %79, !dbg !38
  %86 = fcmp uno float %84, 0.000000e+00, !dbg !42
  %87 = or i1 %85, %86, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %88 = sext i32 %9 to i64, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !45
  %urem = and i32 %11, 63, !dbg !46
  %90 = icmp eq i32 %urem, 0, !dbg !46
  %91 = bitcast float %.0.i2 to i32, !dbg !46
  %92 = and i1 %90, %10, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %89, i1 %92) #5, !dbg !46
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !47
  %94 = and i32 %11, 48, !dbg !48
  %95 = icmp eq i32 %94, 0, !dbg !48
  %96 = bitcast float %84 to i32, !dbg !48
  %97 = select i1 %87, i32 %96, i32 %28, !dbg !49
  %98 = and i1 %95, %10, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %93, i1 %98) #5, !dbg !48
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chf26mcfvenmgf5rec74gicepamuvznx7oxdz63e3pcgshoiguly.py", directory: "inductor_cache/hf")
!4 = !{ptr @triton_per_fused_add_maximum_mean_mul_pow_rsqrt_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_maximum_mean_mul_pow_rsqrt_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_maximum_mean_mul_pow_rsqrt_0", linkageName: "triton_per_fused_add_maximum_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 33, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 39, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 44, column: 28, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 48, column: 42, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 49, column: 4, scope: !7)
!45 = !DILocation(line: 50, column: 28, scope: !7)
!46 = !DILocation(line: 50, column: 40, scope: !7)
!47 = !DILocation(line: 51, column: 25, scope: !7)
!48 = !DILocation(line: 51, column: 45, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!50 = !DILocation(line: 51, column: 4, scope: !7)
