; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !10
  %14 = shl i32 %13, 3, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 5, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = and i32 %15, 1, !dbg !12
  %19 = shl nuw nsw i32 %18, 2, !dbg !12
  %20 = and i32 %15, 7, !dbg !12
  %21 = or disjoint i32 %14, %17, !dbg !13
  %22 = or disjoint i32 %14, %19, !dbg !13
  %23 = icmp slt i32 %21, 1024, !dbg !14
  %24 = icmp slt i32 %22, 1024, !dbg !14
  %25 = shl i32 %15, 2, !dbg !15
  %26 = and i32 %25, 124, !dbg !15
  %27 = lshr i32 %15, 1, !dbg !15
  %28 = and i32 %27, 127, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %29 = sdiv i32 %.frozen, 256, !dbg !16
  %30 = sdiv i32 %21, 256, !dbg !16
  %31 = mul i32 %29, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %.frozen24 = freeze i32 %21, !dbg !18
  %32 = sdiv i32 %.frozen24, 16, !dbg !18
  %33 = mul i32 %32, 16, !dbg !19
  %.decomposed25 = sub i32 %.frozen24, %33, !dbg !19
  %34 = srem i32 %32, 16, !dbg !20
  %35 = icmp samesign ult i32 %26, 96, !dbg !21
  %36 = icmp samesign ult i32 %28, 96, !dbg !21
  %37 = shl nuw nsw i32 %28, 8, !dbg !22
  %38 = add nsw i32 %.decomposed, %37, !dbg !23
  %39 = mul i32 %29, 24576, !dbg !24
  %40 = mul i32 %30, 24576, !dbg !24
  %41 = add i32 %38, %39, !dbg !25
  %42 = sext i32 %41 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = and i1 %35, %23, !dbg !27
  %45 = and i1 %36, %24, !dbg !27
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #6, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %51 = shl nuw nsw i32 %18, 9, !dbg !28
  %52 = or disjoint i32 %51, %28, !dbg !28
  %53 = and i32 %25, 1020, !dbg !28
  %.idx = shl nuw nsw i32 %18, 6, !dbg !28
  %54 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %52, !dbg !28
  %56 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #6, !dbg !28
  %57 = or disjoint i32 %52, 128, !dbg !28
  %58 = lshr i32 %57, 5, !dbg !28
  %59 = and i32 %58, 20, !dbg !28
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !28
  %61 = getelementptr float, ptr addrspace(3) %60, i32 %57, !dbg !28
  %62 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #6, !dbg !28
  %63 = or disjoint i32 %52, 256, !dbg !28
  %64 = lshr i32 %63, 5, !dbg !28
  %65 = and i32 %64, 24, !dbg !28
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !28
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %63, !dbg !28
  %68 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #6, !dbg !28
  %69 = or disjoint i32 %52, 384, !dbg !28
  %70 = lshr i32 %69, 5, !dbg !28
  %71 = and i32 %70, 28, !dbg !28
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !28
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %69, !dbg !28
  %74 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #6, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %75 = lshr i32 %25, 5, !dbg !28
  %76 = and i32 %75, 28, !dbg !28
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %53, !dbg !28
  %79 = load float, ptr addrspace(3) %78, align 16, !dbg !28
  %80 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 4, !dbg !28
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %82 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 8, !dbg !28
  %83 = load float, ptr addrspace(3) %82, align 8, !dbg !28
  %84 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 12, !dbg !28
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %86 = mul i32 %21, 96, !dbg !29
  %87 = add i32 %86, %26, !dbg !30
  %88 = sext i32 %87 to i64, !dbg !31
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !31
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #6, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !32
  %95 = zext nneg i32 %26 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #6, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !34
  %.lhs.trunc = trunc nsw i32 %.decomposed25 to i8, !dbg !35
  %102 = sdiv i8 %.lhs.trunc, 8, !dbg !36
  %103 = mul i8 %102, 8, !dbg !35
  %.decomposed26 = sub i8 %.lhs.trunc, %103, !dbg !35
  %.lhs.trunc18 = trunc nsw i32 %34 to i8, !dbg !37
  %104 = sdiv i8 %.lhs.trunc18, 8, !dbg !38
  %105 = mul i8 %104, 8, !dbg !37
  %.decomposed27 = sub i8 %.lhs.trunc18, %105, !dbg !37
  %106 = insertelement <4 x i8> poison, i8 %.decomposed26, i64 0, !dbg !35
  %107 = insertelement <4 x i8> %106, i8 %102, i64 1, !dbg !35
  %108 = insertelement <4 x i8> %107, i8 %.decomposed27, i64 2, !dbg !35
  %109 = insertelement <4 x i8> %108, i8 %104, i64 3, !dbg !35
  %110 = sext <4 x i8> %109 to <4 x i32>, !dbg !35
  %111 = mul nsw <4 x i32> %110, <i32 96, i32 6144, i32 768, i32 12288>, !dbg !39
  %112 = or disjoint i32 %40, %26, !dbg !40
  %113 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %111), !dbg !41
  %op.rdx = add i32 %113, %112, !dbg !42
  %114 = sext i32 %op.rdx to i64, !dbg !43
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !43
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #6, !dbg !44
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !44
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !44
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !44
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !44
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !45
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #6, !dbg !46
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !46
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !46
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !46
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !46
  %127 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !32
  %128 = insertelement <2 x i32> %127, i32 %117, i64 1, !dbg !32
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !32
  %130 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !34
  %131 = insertelement <2 x i32> %130, i32 %123, i64 1, !dbg !34
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !34
  %133 = fadd <2 x float> %129, %132, !dbg !47
  %134 = extractelement <2 x float> %133, i64 0, !dbg !48
  %135 = fadd float %79, %134, !dbg !48
  %136 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !32
  %137 = insertelement <2 x i32> %136, i32 %118, i64 1, !dbg !32
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !32
  %139 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !34
  %140 = insertelement <2 x i32> %139, i32 %124, i64 1, !dbg !34
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !34
  %142 = fadd <2 x float> %138, %141, !dbg !47
  %143 = extractelement <2 x float> %142, i64 0, !dbg !48
  %144 = fadd float %81, %143, !dbg !48
  %145 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !32
  %146 = insertelement <2 x i32> %145, i32 %119, i64 1, !dbg !32
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !32
  %148 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !34
  %149 = insertelement <2 x i32> %148, i32 %125, i64 1, !dbg !34
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !34
  %151 = fadd <2 x float> %147, %150, !dbg !47
  %152 = extractelement <2 x float> %151, i64 0, !dbg !48
  %153 = fadd float %83, %152, !dbg !48
  %154 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !32
  %155 = insertelement <2 x i32> %154, i32 %120, i64 1, !dbg !32
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !32
  %157 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !34
  %158 = insertelement <2 x i32> %157, i32 %126, i64 1, !dbg !34
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !34
  %160 = fadd <2 x float> %156, %159, !dbg !47
  %161 = extractelement <2 x float> %160, i64 0, !dbg !48
  %162 = fadd float %85, %161, !dbg !48
  %163 = extractelement <2 x float> %133, i64 1, !dbg !49
  %164 = fadd float %135, %163, !dbg !49
  %165 = extractelement <2 x float> %142, i64 1, !dbg !49
  %166 = fadd float %144, %165, !dbg !49
  %167 = extractelement <2 x float> %151, i64 1, !dbg !49
  %168 = fadd float %153, %167, !dbg !49
  %169 = extractelement <2 x float> %160, i64 1, !dbg !49
  %170 = fadd float %162, %169, !dbg !49
  %171 = select i1 %44, float %164, float 0.000000e+00, !dbg !50
  %172 = select i1 %44, float %166, float 0.000000e+00, !dbg !50
  %173 = select i1 %44, float %168, float 0.000000e+00, !dbg !50
  %174 = select i1 %44, float %170, float 0.000000e+00, !dbg !50
  %175 = select i1 %44, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %176 = bitcast float %164 to i32, !dbg !52
  %177 = bitcast float %166 to i32, !dbg !52
  %178 = bitcast float %168 to i32, !dbg !52
  %179 = bitcast float %170 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %89, i1 %44) #6, !dbg !52
  %180 = fsub float %172, %171, !dbg !53
  %181 = select i1 %44, float 2.000000e+00, float 0.000000e+00, !dbg !58
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !59
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %181) #6, !dbg !60
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !61
  %185 = fmul float %184, %180, !dbg !62
  %186 = fadd float %171, %185, !dbg !63
  %187 = fmul float %180, %180, !dbg !64
  %188 = fmul float %175, %187, !dbg !65
  %189 = fmul float %184, %188, !dbg !66
  %190 = fadd float %189, 0.000000e+00, !dbg !67
  %191 = fsub float %173, %186, !dbg !53
  %192 = select i1 %44, float 3.000000e+00, float 0.000000e+00, !dbg !58
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !59
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %192) #6, !dbg !60
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !61
  %196 = fmul float %195, %191, !dbg !62
  %197 = fadd float %186, %196, !dbg !63
  %198 = fmul float %191, %191, !dbg !64
  %199 = fmul float %181, %198, !dbg !65
  %200 = fmul float %195, %199, !dbg !66
  %201 = fadd float %190, %200, !dbg !67
  %202 = fsub float %174, %197, !dbg !53
  %203 = select i1 %44, float 4.000000e+00, float 0.000000e+00, !dbg !58
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !59
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %203) #6, !dbg !60
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !61
  %207 = fmul float %206, %202, !dbg !62
  %208 = fadd float %197, %207, !dbg !63
  %209 = fmul float %202, %202, !dbg !64
  %210 = fmul float %192, %209, !dbg !65
  %211 = fmul float %206, %210, !dbg !66
  %212 = fadd float %201, %211, !dbg !67
  %213 = bitcast float %208 to i32, !dbg !68
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 16, i32 31), !dbg !68
  %215 = bitcast i32 %214 to float, !dbg !68
  %216 = bitcast float %212 to i32, !dbg !68
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 16, i32 31), !dbg !68
  %218 = bitcast i32 %217 to float, !dbg !68
  %219 = bitcast float %203 to i32, !dbg !68
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 16, i32 31), !dbg !68
  %221 = bitcast i32 %220 to float, !dbg !68
  %222 = fsub float %215, %208, !dbg !53
  %223 = fadd float %203, %221, !dbg !58
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !59
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %223) #6, !dbg !60
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !61
  %227 = fmul float %226, %222, !dbg !62
  %228 = fadd float %208, %227, !dbg !63
  %229 = fadd float %212, %218, !dbg !69
  %230 = fmul float %222, %222, !dbg !64
  %231 = fmul float %203, %230, !dbg !65
  %232 = fmul float %226, %231, !dbg !66
  %233 = fadd float %229, %232, !dbg !67
  %234 = bitcast float %228 to i32, !dbg !68
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !68
  %236 = bitcast i32 %235 to float, !dbg !68
  %237 = bitcast float %233 to i32, !dbg !68
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !68
  %239 = bitcast i32 %238 to float, !dbg !68
  %240 = bitcast float %223 to i32, !dbg !68
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !68
  %242 = bitcast i32 %241 to float, !dbg !68
  %243 = fsub float %236, %228, !dbg !53
  %244 = fadd float %223, %242, !dbg !58
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !59
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #6, !dbg !60
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !61
  %248 = fmul float %247, %243, !dbg !62
  %249 = fadd float %228, %248, !dbg !63
  %250 = fadd float %233, %239, !dbg !69
  %251 = fmul float %243, %243, !dbg !64
  %252 = fmul float %223, %251, !dbg !65
  %253 = fmul float %247, %252, !dbg !66
  %254 = fadd float %250, %253, !dbg !67
  %255 = bitcast float %249 to i32, !dbg !68
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 4, i32 31), !dbg !68
  %257 = bitcast i32 %256 to float, !dbg !68
  %258 = bitcast float %254 to i32, !dbg !68
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !68
  %260 = bitcast i32 %259 to float, !dbg !68
  %261 = bitcast float %244 to i32, !dbg !68
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !68
  %263 = bitcast i32 %262 to float, !dbg !68
  %264 = fsub float %257, %249, !dbg !53
  %265 = fadd float %244, %263, !dbg !58
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !59
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %265) #6, !dbg !60
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !61
  %269 = fmul float %268, %264, !dbg !62
  %270 = fadd float %249, %269, !dbg !63
  %271 = fadd float %254, %260, !dbg !69
  %272 = fmul float %264, %264, !dbg !64
  %273 = fmul float %244, %272, !dbg !65
  %274 = fmul float %268, %273, !dbg !66
  %275 = fadd float %271, %274, !dbg !67
  %276 = bitcast float %270 to i32, !dbg !68
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !68
  %278 = bitcast i32 %277 to float, !dbg !68
  %279 = bitcast float %275 to i32, !dbg !68
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !68
  %281 = bitcast i32 %280 to float, !dbg !68
  %282 = bitcast float %265 to i32, !dbg !68
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !68
  %284 = bitcast i32 %283 to float, !dbg !68
  %285 = fsub float %278, %270, !dbg !53
  %286 = fadd float %265, %284, !dbg !58
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !59
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %286) #6, !dbg !60
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !61
  %290 = fmul float %289, %285, !dbg !62
  %291 = fadd float %270, %290, !dbg !63
  %292 = fadd float %275, %281, !dbg !69
  %293 = fmul float %285, %285, !dbg !64
  %294 = fmul float %265, %293, !dbg !65
  %295 = fmul float %289, %294, !dbg !66
  %296 = fadd float %292, %295, !dbg !67
  %297 = bitcast float %291 to i32, !dbg !68
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !68
  %299 = bitcast i32 %298 to float, !dbg !68
  %300 = bitcast float %296 to i32, !dbg !68
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !68
  %302 = bitcast i32 %301 to float, !dbg !68
  %303 = bitcast float %286 to i32, !dbg !68
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !68
  %305 = bitcast i32 %304 to float, !dbg !68
  %306 = fsub float %299, %291, !dbg !53
  %307 = fadd float %286, %305, !dbg !58
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !59
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float %307) #6, !dbg !60
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !61
  %311 = fadd float %296, %302, !dbg !69
  %312 = fmul float %306, %306, !dbg !64
  %313 = fmul float %286, %312, !dbg !65
  %314 = fmul float %310, %313, !dbg !66
  %315 = fadd float %311, %314, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !70
  %317 = bitcast float %315 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #6, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !70
  %319 = load float, ptr addrspace(3) %318, align 4, !dbg !70
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #6, !dbg !71
  %321 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !72
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %321, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #6, !dbg !73
  %323 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !74
  %324 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %323, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #6, !dbg !75
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float 9.600000e+01) #6, !dbg !76
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float 9.600000e+01) #6, !dbg !76
  %327 = fadd float %325, 0x3EB0C6F7A0000000, !dbg !77
  %328 = fadd float %326, 0x3EB0C6F7A0000000, !dbg !77
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %.not.i = icmp eq i32 %329, 0, !dbg !78
  br i1 %.not.i, label %332, label %330, !dbg !78

330:                                              ; preds = %12
  %331 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %327), !dbg !78
  br label %__nv_rsqrtf.exit, !dbg !78

332:                                              ; preds = %12
  %333 = tail call float @llvm.nvvm.rsqrt.approx.f(float %327), !dbg !78
  br label %__nv_rsqrtf.exit, !dbg !78

__nv_rsqrtf.exit:                                 ; preds = %330, %332
  %.0.i = phi float [ %331, %330 ], [ %333, %332 ], !dbg !78
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !78
  %.not.i15 = icmp eq i32 %337, 0, !dbg !78
  br i1 %.not.i15, label %340, label %338, !dbg !78

338:                                              ; preds = %__nv_rsqrtf.exit
  %339 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %328), !dbg !78
  br label %__nv_rsqrtf.exit17, !dbg !78

340:                                              ; preds = %__nv_rsqrtf.exit
  %341 = tail call float @llvm.nvvm.rsqrt.approx.f(float %328), !dbg !78
  br label %__nv_rsqrtf.exit17, !dbg !78

__nv_rsqrtf.exit17:                               ; preds = %338, %340
  %.0.i16 = phi float [ %339, %338 ], [ %341, %340 ], !dbg !78
  %342 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !71
  %343 = bitcast i32 %342 to float, !dbg !71
  %344 = fmul float %306, %310, !dbg !62
  %345 = fadd float %291, %344, !dbg !63
  %346 = fsub float %343, %345, !dbg !79
  %347 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !71
  %348 = bitcast i32 %347 to float, !dbg !71
  %349 = fsub float %348, %345, !dbg !79
  %350 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !71
  %351 = bitcast i32 %350 to float, !dbg !71
  %352 = fsub float %351, %345, !dbg !79
  %353 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !71
  %354 = bitcast i32 %353 to float, !dbg !71
  %355 = fsub float %354, %345, !dbg !79
  %356 = extractvalue { i32, i32, i32, i32 } %324, 3, !dbg !75
  %357 = bitcast i32 %356 to float, !dbg !75
  %358 = extractvalue { i32, i32, i32, i32 } %324, 2, !dbg !75
  %359 = bitcast i32 %358 to float, !dbg !75
  %360 = extractvalue { i32, i32, i32, i32 } %324, 1, !dbg !75
  %361 = bitcast i32 %360 to float, !dbg !75
  %362 = extractvalue { i32, i32, i32, i32 } %324, 0, !dbg !75
  %363 = bitcast i32 %362 to float, !dbg !75
  %364 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !73
  %365 = bitcast i32 %364 to float, !dbg !73
  %366 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !73
  %367 = bitcast i32 %366 to float, !dbg !73
  %368 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !73
  %369 = bitcast i32 %368 to float, !dbg !73
  %370 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !73
  %371 = bitcast i32 %370 to float, !dbg !73
  %372 = or disjoint i32 %14, %20, !dbg !13
  %373 = icmp slt i32 %372, 1024, !dbg !14
  %374 = fmul float %355, %.0.i16, !dbg !80
  %375 = fmul float %352, %.0.i16, !dbg !80
  %376 = fmul float %349, %.0.i16, !dbg !80
  %377 = fmul float %346, %.0.i16, !dbg !80
  %378 = fmul float %374, %371, !dbg !81
  %379 = fmul float %375, %369, !dbg !81
  %380 = fmul float %376, %367, !dbg !81
  %381 = fmul float %377, %365, !dbg !81
  %382 = fadd float %378, %363, !dbg !82
  %383 = fadd float %379, %361, !dbg !82
  %384 = fadd float %380, %359, !dbg !82
  %385 = fadd float %381, %357, !dbg !82
  %386 = getelementptr float, ptr addrspace(1) %7, i64 %88, !dbg !83
  %387 = bitcast float %374 to i32, !dbg !84
  %388 = bitcast float %375 to i32, !dbg !84
  %389 = bitcast float %376 to i32, !dbg !84
  %390 = bitcast float %377 to i32, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %386, i1 %44) #6, !dbg !84
  %391 = getelementptr float, ptr addrspace(1) %8, i64 %88, !dbg !85
  %392 = bitcast float %382 to i32, !dbg !86
  %393 = bitcast float %383 to i32, !dbg !86
  %394 = bitcast float %384 to i32, !dbg !86
  %395 = bitcast float %385 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %393, i32 %394, i32 %395, ptr addrspace(1) %391, i1 %44) #6, !dbg !86
  %396 = fmul float %.0.i, 0x3F85555560000000, !dbg !70
  %397 = sext i32 %372 to i64, !dbg !87
  %398 = getelementptr float, ptr addrspace(1) %9, i64 %397, !dbg !87
  %399 = and i32 %15, 248, !dbg !88
  %400 = icmp eq i32 %399, 0, !dbg !88
  %401 = bitcast float %396 to i32, !dbg !88
  %402 = and i1 %400, %373, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %401, ptr addrspace(1) %398, i1 %402) #6, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py", directory: "inductor_cache/jx")
!4 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", linkageName: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 27, scope: !7)
!21 = !DILocation(line: 36, column: 25, scope: !7)
!22 = !DILocation(line: 38, column: 43, scope: !7)
!23 = !DILocation(line: 38, column: 39, scope: !7)
!24 = !DILocation(line: 38, column: 54, scope: !7)
!25 = !DILocation(line: 38, column: 48, scope: !7)
!26 = !DILocation(line: 38, column: 34, scope: !7)
!27 = !DILocation(line: 38, column: 67, scope: !7)
!28 = !DILocation(line: 38, column: 59, scope: !7)
!29 = !DILocation(line: 39, column: 46, scope: !7)
!30 = !DILocation(line: 39, column: 43, scope: !7)
!31 = !DILocation(line: 39, column: 38, scope: !7)
!32 = !DILocation(line: 39, column: 51, scope: !7)
!33 = !DILocation(line: 40, column: 34, scope: !7)
!34 = !DILocation(line: 40, column: 39, scope: !7)
!35 = !DILocation(line: 41, column: 49, scope: !7)
!36 = !DILocation(line: 41, column: 84, scope: !7)
!37 = !DILocation(line: 41, column: 66, scope: !7)
!38 = !DILocation(line: 41, column: 102, scope: !7)
!39 = !DILocation(line: 41, column: 44, scope: !7)
!40 = !DILocation(line: 41, column: 39, scope: !7)
!41 = !DILocation(line: 41, column: 107, scope: !7)
!42 = !DILocation(line: 41, column: 55, scope: !7)
!43 = !DILocation(line: 41, column: 34, scope: !7)
!44 = !DILocation(line: 41, column: 118, scope: !7)
!45 = !DILocation(line: 42, column: 34, scope: !7)
!46 = !DILocation(line: 42, column: 39, scope: !7)
!47 = !DILocation(line: 43, column: 22, scope: !7)
!48 = !DILocation(line: 44, column: 22, scope: !7)
!49 = !DILocation(line: 46, column: 22, scope: !7)
!50 = !DILocation(line: 51, column: 62, scope: !7)
!51 = !DILocation(line: 53, column: 66, scope: !7)
!52 = !DILocation(line: 54, column: 51, scope: !7)
!53 = !DILocation(line: 192, column: 21, scope: !54, inlinedAt: !57)
!54 = distinct !DILexicalBlockFile(scope: !56, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!57 = !DILocation(line: 56, column: 44, scope: !7)
!58 = !DILocation(line: 193, column: 28, scope: !54, inlinedAt: !57)
!59 = !DILocation(line: 194, column: 39, scope: !54, inlinedAt: !57)
!60 = !DILocation(line: 194, column: 60, scope: !54, inlinedAt: !57)
!61 = !DILocation(line: 194, column: 49, scope: !54, inlinedAt: !57)
!62 = !DILocation(line: 196, column: 25, scope: !54, inlinedAt: !57)
!63 = !DILocation(line: 196, column: 17, scope: !54, inlinedAt: !57)
!64 = !DILocation(line: 197, column: 30, scope: !54, inlinedAt: !57)
!65 = !DILocation(line: 197, column: 38, scope: !54, inlinedAt: !57)
!66 = !DILocation(line: 197, column: 49, scope: !54, inlinedAt: !57)
!67 = !DILocation(line: 197, column: 22, scope: !54, inlinedAt: !57)
!68 = !DILocation(line: 204, column: 46, scope: !56, inlinedAt: !57)
!69 = !DILocation(line: 197, column: 15, scope: !54, inlinedAt: !57)
!70 = !DILocation(line: 85, column: 20, scope: !7)
!71 = !DILocation(line: 65, column: 52, scope: !7)
!72 = !DILocation(line: 66, column: 35, scope: !7)
!73 = !DILocation(line: 66, column: 40, scope: !7)
!74 = !DILocation(line: 67, column: 35, scope: !7)
!75 = !DILocation(line: 67, column: 40, scope: !7)
!76 = !DILocation(line: 70, column: 24, scope: !7)
!77 = !DILocation(line: 72, column: 24, scope: !7)
!78 = !DILocation(line: 73, column: 32, scope: !7)
!79 = !DILocation(line: 68, column: 24, scope: !7)
!80 = !DILocation(line: 74, column: 24, scope: !7)
!81 = !DILocation(line: 75, column: 24, scope: !7)
!82 = !DILocation(line: 76, column: 24, scope: !7)
!83 = !DILocation(line: 77, column: 29, scope: !7)
!84 = !DILocation(line: 77, column: 49, scope: !7)
!85 = !DILocation(line: 78, column: 29, scope: !7)
!86 = !DILocation(line: 78, column: 49, scope: !7)
!87 = !DILocation(line: 86, column: 25, scope: !7)
!88 = !DILocation(line: 86, column: 37, scope: !7)
!89 = !DILocation(line: 86, column: 4, scope: !7)
