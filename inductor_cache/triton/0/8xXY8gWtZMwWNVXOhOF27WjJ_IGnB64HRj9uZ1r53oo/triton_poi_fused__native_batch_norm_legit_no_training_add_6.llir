; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = icmp slt i32 %18, 11264, !dbg !14
  %21 = srem i32 %18, 11, !dbg !15
  %22 = srem i32 %19, 11, !dbg !15
  %23 = sext i32 %18 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %20) #3, !dbg !17
  %26 = sext i32 %21 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %22 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %20) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #3, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %20) #3, !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %20) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #3, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #3, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !26
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %20) #3, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %20) #3, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #3, !dbg !31
  %55 = bitcast i32 %54 to float, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #3, !dbg !31
  %57 = bitcast i32 %56 to float, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #3, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #3, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #3, !dbg !35
  %66 = fadd float %35, 0x3F50624DE0000000, !dbg !36
  %67 = fadd float %37, 0x3F50624DE0000000, !dbg !36
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %68, 0, !dbg !37
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %69, 0, !dbg !37
  br i1 %.not.i, label %75, label %70, !dbg !37

70:                                               ; preds = %12
  br i1 %.not1.i, label %73, label %71, !dbg !37

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

75:                                               ; preds = %12
  br i1 %.not1.i, label %78, label %76, !dbg !37

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !37
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %80, 0, !dbg !37
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !37
  br i1 %.not.i1, label %87, label %82, !dbg !37

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !37

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !37

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !37
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %94 = fadd float %55, 0x3F50624DE0000000, !dbg !39
  %95 = fadd float %57, 0x3F50624DE0000000, !dbg !39
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %96, 0, !dbg !40
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %97, 0, !dbg !40
  br i1 %.not.i6, label %103, label %98, !dbg !40

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !40

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !40

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %99, %101, %104, %106
  %.0.i8 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !40
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %108, 0, !dbg !40
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %109, 0, !dbg !40
  br i1 %.not.i11, label %115, label %110, !dbg !40

110:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %113, label %111, !dbg !40

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !40

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %111, %113, %116, %118
  %.0.i13 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !40
  %120 = extractvalue { i32, i32 } %47, 1, !dbg !27
  %121 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !19
  %122 = insertelement <2 x i32> %121, i32 %51, i64 1, !dbg !19
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !19
  %124 = extractvalue { i32, i32 } %47, 0, !dbg !27
  %125 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %126 = insertelement <2 x i32> %125, i32 %50, i64 1, !dbg !19
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !19
  %128 = extractvalue { i32, i32 } %25, 1, !dbg !17
  %129 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !23
  %130 = insertelement <2 x i32> %129, i32 %61, i64 1, !dbg !23
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !23
  %132 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !25
  %133 = insertelement <2 x i32> %132, i32 %65, i64 1, !dbg !25
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !25
  %135 = extractvalue { i32, i32 } %25, 0, !dbg !17
  %136 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %137 = insertelement <2 x i32> %136, i32 %60, i64 1, !dbg !23
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !23
  %139 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !25
  %140 = insertelement <2 x i32> %139, i32 %64, i64 1, !dbg !25
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !25
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %144 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !17
  %145 = insertelement <2 x i32> %144, i32 %124, i64 1, !dbg !17
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !17
  %147 = fsub <2 x float> %146, %127, !dbg !42
  %148 = insertelement <2 x float> poison, float %92, i64 0, !dbg !43
  %149 = insertelement <2 x float> %148, float %142, i64 1, !dbg !43
  %150 = fmul <2 x float> %147, %149, !dbg !43
  %151 = fmul <2 x float> %150, %138, !dbg !44
  %152 = fadd <2 x float> %151, %141, !dbg !45
  %153 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !17
  %154 = insertelement <2 x i32> %153, i32 %120, i64 1, !dbg !17
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !17
  %156 = fsub <2 x float> %155, %123, !dbg !42
  %157 = insertelement <2 x float> poison, float %93, i64 0, !dbg !43
  %158 = insertelement <2 x float> %157, float %143, i64 1, !dbg !43
  %159 = fmul <2 x float> %156, %158, !dbg !43
  %160 = fmul <2 x float> %159, %131, !dbg !44
  %161 = fadd <2 x float> %160, %134, !dbg !45
  %shift = shufflevector <2 x float> %152, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %162 = fadd <2 x float> %152, %shift, !dbg !46
  %shift16 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %163 = fadd <2 x float> %161, %shift16, !dbg !46
  %164 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !47
  %bc = bitcast <2 x float> %162 to <2 x i32>, !dbg !48
  %165 = extractelement <2 x i32> %bc, i64 0, !dbg !48
  %bc17 = bitcast <2 x float> %163 to <2 x i32>, !dbg !48
  %166 = extractelement <2 x i32> %bc17, i64 0, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %164, i1 %20) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c66h5g25seof3ponpj3usxtgqtmfpojbieuc2f6vkk2pezhzgf4o.py", directory: "inductor_cache/66")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 26, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 27, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 25, scope: !7)
!48 = !DILocation(line: 56, column: 37, scope: !7)
!49 = !DILocation(line: 56, column: 4, scope: !7)
