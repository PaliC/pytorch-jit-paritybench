; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = ashr exact i32 %11, 2, !dbg !14
  %13 = srem i32 %12, 2304, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %14 = sdiv i32 %.frozen, 9216, !dbg !16
  %15 = icmp slt i32 %13, 256, !dbg !17
  %16 = mul i32 %14, 9216, !dbg !18
  %srem.decomposed = sub i32 %.frozen, %16, !dbg !18
  %17 = shl nsw i32 %14, 10, !dbg !19
  %18 = add nsw i32 %17, %srem.decomposed, !dbg !20
  %19 = sext i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #1, !dbg !22
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !22
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !22
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !22
  %26 = sext i32 %13 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %15, i32 0, i1 %15) #1, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %15, i32 0, i1 %15) #1, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %15, i32 0, i1 %15) #1, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %15, i32 0, i1 %15) #1, !dbg !24
  %32 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !22
  %33 = insertelement <4 x i32> %32, i32 %24, i64 1, !dbg !22
  %34 = insertelement <4 x i32> %33, i32 %23, i64 2, !dbg !22
  %35 = insertelement <4 x i32> %34, i32 %22, i64 3, !dbg !22
  %36 = bitcast <4 x i32> %35 to <4 x float>, !dbg !22
  %37 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !24
  %38 = insertelement <4 x i32> %37, i32 %30, i64 1, !dbg !24
  %39 = insertelement <4 x i32> %38, i32 %29, i64 2, !dbg !24
  %40 = insertelement <4 x i32> %39, i32 %28, i64 3, !dbg !24
  %41 = bitcast <4 x i32> %40 to <4 x float>, !dbg !24
  %42 = fadd <4 x float> %36, %41, !dbg !25
  %43 = fcmp olt <4 x float> %42, zeroinitializer, !dbg !26
  %44 = extractelement <4 x i1> %43, i64 3, !dbg !30
  %45 = extractelement <4 x i1> %43, i64 2, !dbg !30
  %46 = extractelement <4 x i1> %43, i64 1, !dbg !30
  %47 = extractelement <4 x i1> %43, i64 0, !dbg !30
  %48 = icmp sgt i32 %13, 255, !dbg !31
  %49 = shl nsw i32 %13, 2, !dbg !32
  %50 = shl nsw i32 %14, 13, !dbg !33
  %51 = add nsw i32 %50, -1024, !dbg !32
  %52 = add nsw i32 %51, %49, !dbg !34
  %53 = sext i32 %52 to i64, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !35
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !36
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !36
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !36
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !36
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !36
  %60 = sext i32 %11 to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !37
  %bc = bitcast <4 x float> %42 to <4 x i32>, !dbg !38
  %62 = extractelement <4 x i32> %bc, i64 3, !dbg !38
  %63 = select i1 %44, i32 0, i32 %62, !dbg !30
  %64 = select i1 %15, i32 %63, i32 %56, !dbg !39
  %bc1 = bitcast <4 x float> %42 to <4 x i32>, !dbg !38
  %65 = extractelement <4 x i32> %bc1, i64 2, !dbg !38
  %66 = select i1 %45, i32 0, i32 %65, !dbg !30
  %67 = select i1 %15, i32 %66, i32 %57, !dbg !39
  %bc2 = bitcast <4 x float> %42 to <4 x i32>, !dbg !38
  %68 = extractelement <4 x i32> %bc2, i64 1, !dbg !38
  %69 = select i1 %46, i32 0, i32 %68, !dbg !30
  %70 = select i1 %15, i32 %69, i32 %58, !dbg !39
  %bc3 = bitcast <4 x float> %42 to <4 x i32>, !dbg !38
  %71 = extractelement <4 x i32> %bc3, i64 0, !dbg !38
  %72 = select i1 %47, i32 0, i32 %71, !dbg !30
  %73 = select i1 %15, i32 %72, i32 %59, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %64, i32 %67, i32 %70, i32 %73, ptr addrspace(1) %61, i1 true) #1, !dbg !38
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cez4h5bjdpaslolguhr5zauhpjfgoyg3ehu5xxzy3vutc7jpamsd.py", directory: "inductor_cache/ez")
!4 = !{ptr @triton_poi_fused_cat_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_20", linkageName: "triton_poi_fused_cat_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 49, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 37, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 43, column: 39, scope: !7)
!33 = !DILocation(line: 43, column: 59, scope: !7)
!34 = !DILocation(line: 43, column: 54, scope: !7)
!35 = !DILocation(line: 43, column: 31, scope: !7)
!36 = !DILocation(line: 43, column: 64, scope: !7)
!37 = !DILocation(line: 45, column: 25, scope: !7)
!38 = !DILocation(line: 45, column: 37, scope: !7)
!39 = !DILocation(line: 0, scope: !7)
!40 = !DILocation(line: 45, column: 4, scope: !7)
