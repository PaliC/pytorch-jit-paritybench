; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_clone_mul_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 1, !dbg !12
  %13 = shl i32 %10, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = lshr i32 %10, 1, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = lshr i32 %10, 1, !dbg !12
  %18 = and i32 %17, 16, !dbg !12
  %19 = lshr i32 %10, 1, !dbg !12
  %20 = and i32 %19, 32, !dbg !12
  %21 = or disjoint i32 %9, %14, !dbg !13
  %22 = or disjoint i32 %18, %16, !dbg !12
  %23 = or disjoint i32 %22, %20, !dbg !12
  %24 = or disjoint i32 %23, %9, !dbg !13
  %25 = icmp slt i32 %21, 64, !dbg !14
  %26 = icmp slt i32 %24, 64, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 2, !dbg !16
  %.lobit16 = lshr i32 %10, 5, !dbg !17
  %29 = and i32 %.lobit16, 3, !dbg !17
  %30 = or disjoint i32 %29, %28, !dbg !18
  %31 = or disjoint i32 %28, %12, !dbg !18
  %32 = icmp slt i32 %30, 4, !dbg !19
  %33 = icmp slt i32 %31, 4, !dbg !19
  %.frozen = freeze i32 %21, !dbg !20
  %34 = sdiv i32 %.frozen, 16, !dbg !20
  %35 = mul i32 %34, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %35, !dbg !21
  %36 = sdiv i32 %24, 16, !dbg !20
  %37 = shl i32 %30, 4, !dbg !22
  %38 = add i32 %37, %.decomposed, !dbg !23
  %39 = shl i32 %34, 6, !dbg !24
  %40 = add i32 %38, %39, !dbg !25
  %41 = sext i32 %40 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = and i1 %25, %32, !dbg !27
  %44 = and i1 %26, %33, !dbg !27
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %43) #2, !dbg !28
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !28
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !28
  %48 = shl i32 %10, 3, !dbg !28
  %49 = and i32 %48, 248, !dbg !28
  %50 = or disjoint i32 %29, %49, !dbg !28
  %51 = and i32 %13, 254, !dbg !28
  %52 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %49, !dbg !28
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %50, !dbg !28
  %54 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #2, !dbg !28
  %55 = or disjoint i32 %50, 4, !dbg !28
  %56 = lshr i32 %55, 2, !dbg !28
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56, !dbg !28
  %58 = getelementptr inbounds float, ptr addrspace(3) %57, i32 %55, !dbg !28
  %59 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %60 = lshr i32 %51, 2, !dbg !28
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !28
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %51, !dbg !28
  %63 = load float, ptr addrspace(3) %62, align 4, !dbg !28
  %64 = or disjoint i32 %51, 1, !dbg !28
  %65 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %64, !dbg !28
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !28
  %67 = mul i32 %31, 3, !dbg !29
  %68 = add i32 %67, 3, !dbg !29
  %69 = mul nsw i32 %36, 12, !dbg !30
  %70 = add i32 %67, %69, !dbg !31
  %71 = add i32 %69, %68, !dbg !31
  %72 = sext i32 %70 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !32
  %74 = sext i32 %71 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !32
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %44) #2, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %44) #2, !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = or disjoint i32 %70, 1, !dbg !34
  %81 = add i32 %71, 1, !dbg !34
  %82 = sext i32 %80 to i64, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !35
  %84 = sext i32 %81 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !35
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %44) #2, !dbg !36
  %87 = bitcast i32 %86 to float, !dbg !36
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %44) #2, !dbg !36
  %89 = bitcast i32 %88 to float, !dbg !36
  %90 = or disjoint i32 %69, 2, !dbg !37
  %91 = add i32 %90, %67, !dbg !38
  %92 = add i32 %71, 2, !dbg !38
  %93 = sext i32 %91 to i64, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !39
  %95 = sext i32 %92 to i64, !dbg !39
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !39
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %44) #2, !dbg !40
  %98 = bitcast i32 %97 to float, !dbg !40
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %44) #2, !dbg !40
  %100 = bitcast i32 %99 to float, !dbg !40
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !41
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %101, i1 %43) #2, !dbg !42
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !42
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !42
  %105 = bitcast i32 %103 to float, !dbg !42
  %106 = bitcast i32 %104 to float, !dbg !42
  %107 = shl i32 %24, 2, !dbg !43
  %108 = add i32 %31, %107, !dbg !44
  %109 = sext i32 %108 to i64, !dbg !45
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !45
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %44) #2, !dbg !46
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !46
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !46
  %114 = bitcast i32 %112 to float, !dbg !46
  %115 = bitcast i32 %113 to float, !dbg !46
  %116 = fcmp ogt float %77, %87, !dbg !47
  %117 = fcmp ogt float %79, %89, !dbg !47
  %118 = fcmp uno float %77, 0.000000e+00, !dbg !51
  %119 = fcmp uno float %79, 0.000000e+00, !dbg !51
  %120 = or i1 %118, %116, !dbg !52
  %121 = or i1 %119, %117, !dbg !52
  %122 = select i1 %120, float %77, float %87, !dbg !53
  %123 = select i1 %121, float %79, float %89, !dbg !53
  %124 = fcmp ogt float %122, %98, !dbg !54
  %125 = fcmp ogt float %123, %100, !dbg !54
  %126 = fcmp uno float %122, 0.000000e+00, !dbg !56
  %127 = fcmp uno float %123, 0.000000e+00, !dbg !56
  %128 = or i1 %124, %126, !dbg !57
  %129 = or i1 %125, %127, !dbg !57
  %130 = select i1 %128, float %122, float %98, !dbg !58
  %131 = select i1 %129, float %123, float %100, !dbg !58
  %132 = fsub float %77, %130, !dbg !59
  %133 = fsub float %79, %131, !dbg !59
  %134 = fmul float %132, 0x3FF7154760000000, !dbg !60
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #2, !dbg !60
  %136 = fmul float %133, 0x3FF7154760000000, !dbg !60
  %137 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %136) #2, !dbg !60
  %138 = fsub float %87, %130, !dbg !61
  %139 = fsub float %89, %131, !dbg !61
  %140 = fmul float %138, 0x3FF7154760000000, !dbg !62
  %141 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %140) #2, !dbg !62
  %142 = fmul float %139, 0x3FF7154760000000, !dbg !62
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #2, !dbg !62
  %144 = fadd float %135, %141, !dbg !63
  %145 = fadd float %137, %143, !dbg !63
  %146 = fsub float %98, %130, !dbg !64
  %147 = fsub float %100, %131, !dbg !64
  %148 = fmul float %146, 0x3FF7154760000000, !dbg !65
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #2, !dbg !65
  %150 = fmul float %147, 0x3FF7154760000000, !dbg !65
  %151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #2, !dbg !65
  %152 = fadd float %144, %149, !dbg !66
  %153 = fadd float %145, %151, !dbg !66
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %152) #2, !dbg !67
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %153) #2, !dbg !67
  %156 = fmul float %63, %154, !dbg !68
  %157 = fmul float %66, %155, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %158 = shl nuw nsw i32 %11, 7, !dbg !68
  %159 = or disjoint i32 %158, %16, !dbg !68
  %160 = or disjoint i32 %159, %18, !dbg !68
  %161 = or disjoint i32 %160, %20, !dbg !68
  %.idx = shl nuw nsw i32 %11, 4, !dbg !68
  %162 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !68
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %161, !dbg !68
  %164 = bitcast float %156 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !68
  %165 = or disjoint i32 %161, 64, !dbg !68
  %166 = lshr i32 %165, 5, !dbg !68
  %167 = and i32 %166, 134217726, !dbg !68
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !68
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %165, !dbg !68
  %170 = bitcast float %157 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %171 = lshr i32 %13, 5, !dbg !68
  %172 = and i32 %171, 6, !dbg !68
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !68
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %51, !dbg !68
  %175 = load float, ptr addrspace(3) %174, align 8, !dbg !68
  %176 = getelementptr inbounds i8, ptr addrspace(3) %174, i32 4, !dbg !68
  %177 = load float, ptr addrspace(3) %176, align 4, !dbg !68
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %152) #2, !dbg !69
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %153) #2, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %180 = bitcast float %178 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %180, i1 true) #2, !dbg !69
  %181 = bitcast float %179 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %181, i1 true) #2, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %182 = load float, ptr addrspace(3) %174, align 8, !dbg !69
  %183 = load float, ptr addrspace(3) %176, align 4, !dbg !69
  %184 = fmul float %182, %105, !dbg !70
  %185 = fmul float %183, %106, !dbg !70
  %186 = fadd float %175, %184, !dbg !71
  %187 = fadd float %177, %185, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %188 = bitcast float %186 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %188, i1 true) #2, !dbg !71
  %189 = bitcast float %187 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %189, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %190 = load float, ptr addrspace(3) %62, align 4, !dbg !71
  %191 = load float, ptr addrspace(3) %65, align 4, !dbg !71
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %152) #2, !dbg !72
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %153) #2, !dbg !72
  %194 = fmul float %192, %114, !dbg !73
  %195 = fmul float %193, %115, !dbg !73
  %196 = fadd float %190, %194, !dbg !74
  %197 = fadd float %191, %195, !dbg !74
  %198 = getelementptr float, ptr addrspace(1) %4, i64 %109, !dbg !75
  %199 = bitcast float %196 to i32, !dbg !76
  %200 = bitcast float %197 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %199, i32 %200, ptr addrspace(1) %198, i1 %44) #2, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvsguahjzpdns3mrt65arqah2xnvrwosp6mgny2vojbbvvfnpoqt.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_poi_fused_add_clone_mul_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_5", linkageName: "triton_poi_fused_add_clone_mul_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 32, scope: !7)
!30 = !DILocation(line: 33, column: 40, scope: !7)
!31 = !DILocation(line: 33, column: 37, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 45, scope: !7)
!34 = !DILocation(line: 34, column: 41, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 49, scope: !7)
!37 = !DILocation(line: 35, column: 34, scope: !7)
!38 = !DILocation(line: 35, column: 41, scope: !7)
!39 = !DILocation(line: 35, column: 30, scope: !7)
!40 = !DILocation(line: 35, column: 49, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 52, scope: !7)
!43 = !DILocation(line: 37, column: 38, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 37, column: 31, scope: !7)
!46 = !DILocation(line: 37, column: 43, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 38, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !55)
!55 = !DILocation(line: 39, column: 40, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !55)
!59 = !DILocation(line: 40, column: 18, scope: !7)
!60 = !DILocation(line: 41, column: 23, scope: !7)
!61 = !DILocation(line: 42, column: 18, scope: !7)
!62 = !DILocation(line: 43, column: 23, scope: !7)
!63 = !DILocation(line: 44, column: 19, scope: !7)
!64 = !DILocation(line: 45, column: 19, scope: !7)
!65 = !DILocation(line: 46, column: 24, scope: !7)
!66 = !DILocation(line: 47, column: 20, scope: !7)
!67 = !DILocation(line: 48, column: 19, scope: !7)
!68 = !DILocation(line: 49, column: 19, scope: !7)
!69 = !DILocation(line: 50, column: 19, scope: !7)
!70 = !DILocation(line: 51, column: 20, scope: !7)
!71 = !DILocation(line: 52, column: 20, scope: !7)
!72 = !DILocation(line: 53, column: 20, scope: !7)
!73 = !DILocation(line: 54, column: 20, scope: !7)
!74 = !DILocation(line: 55, column: 20, scope: !7)
!75 = !DILocation(line: 56, column: 25, scope: !7)
!76 = !DILocation(line: 56, column: 44, scope: !7)
!77 = !DILocation(line: 56, column: 4, scope: !7)
