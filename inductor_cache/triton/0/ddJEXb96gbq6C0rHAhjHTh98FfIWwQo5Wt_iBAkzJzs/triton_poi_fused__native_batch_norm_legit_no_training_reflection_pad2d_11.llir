; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen, 4, !dbg !15
  %17 = mul i32 %16, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %14, 4, !dbg !16
  %19 = srem i32 %16, 4, !dbg !17
  %20 = sdiv i32 %13, 16, !dbg !18
  %21 = srem i32 %20, 4, !dbg !19
  %22 = add nsw i32 %.decomposed, -1, !dbg !20
  %23 = add nsw i32 %18, -1, !dbg !20
  %24 = tail call i32 @llvm.abs.i32(i32 %22, i1 true), !dbg !21
  %25 = tail call i32 @llvm.abs.i32(i32 %23, i1 true), !dbg !21
  %26 = add nsw i32 %25, -1, !dbg !22
  %27 = tail call i32 @llvm.abs.i32(i32 %26, i1 true), !dbg !23
  %28 = add nsw i32 %19, -1, !dbg !24
  %29 = tail call i32 @llvm.abs.i32(i32 %28, i1 true), !dbg !25
  %30 = add nsw i32 %29, -1, !dbg !26
  %31 = tail call i32 @llvm.abs.i32(i32 %30, i1 true), !dbg !27
  %32 = mul nsw i32 %31, -2, !dbg !28
  %33 = shl nsw i32 %20, 2, !dbg !29
  %reass.sub = add nsw i32 %33, 4, !dbg !30
  %34 = sub nsw i32 %reass.sub, %24, !dbg !30
  %35 = add nsw i32 %34, %32, !dbg !31
  %reass.sub1 = or disjoint i32 %33, 3, !dbg !30
  %36 = sub nuw nsw i32 %reass.sub1, %27, !dbg !30
  %37 = add nsw i32 %36, %32, !dbg !31
  %38 = sext i32 %35 to i64, !dbg !32
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !32
  %40 = sext i32 %37 to i64, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %15) #3, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !33
  %44 = sext i32 %21 to i64, !dbg !34
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !34
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %15) #3, !dbg !35
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %15) #3, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !36
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %15) #3, !dbg !37
  %50 = bitcast i32 %49 to float, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %15) #3, !dbg !37
  %52 = bitcast i32 %51 to float, !dbg !37
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !38
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %15) #3, !dbg !39
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %15) #3, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !40
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %15) #3, !dbg !41
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %15) #3, !dbg !41
  %59 = fadd float %50, 0x3EE4F8B580000000, !dbg !42
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !42
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %61, 0, !dbg !43
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %62, 0, !dbg !43
  br i1 %.not.i, label %68, label %63, !dbg !43

63:                                               ; preds = %7
  br i1 %.not1.i, label %66, label %64, !dbg !43

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

68:                                               ; preds = %7
  br i1 %.not1.i, label %71, label %69, !dbg !43

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !43
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i2 = icmp eq i32 %73, 0, !dbg !43
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i5 = icmp eq i32 %74, 0, !dbg !43
  br i1 %.not.i2, label %80, label %75, !dbg !43

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %78, label %76, !dbg !43

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %83, label %81, !dbg !43

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

__nv_sqrtf.exit6:                                 ; preds = %76, %78, %81, %83
  %.0.i4 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !43
  %85 = bitcast i32 %43 to float, !dbg !33
  %86 = bitcast i32 %47 to float, !dbg !35
  %87 = fsub float %85, %86, !dbg !44
  %88 = bitcast i32 %42 to float, !dbg !33
  %89 = bitcast i32 %46 to float, !dbg !35
  %90 = fsub float %88, %89, !dbg !44
  %91 = bitcast i32 %58 to float, !dbg !41
  %92 = bitcast i32 %57 to float, !dbg !41
  %93 = bitcast i32 %55 to float, !dbg !39
  %94 = bitcast i32 %54 to float, !dbg !39
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !45
  %97 = fmul float %90, %95, !dbg !46
  %98 = fmul float %87, %96, !dbg !46
  %99 = fmul float %97, %94, !dbg !47
  %100 = fmul float %98, %93, !dbg !47
  %101 = fadd float %99, %92, !dbg !48
  %102 = fadd float %100, %91, !dbg !48
  %103 = sext i32 %13 to i64, !dbg !49
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %103, !dbg !49
  %105 = bitcast float %101 to i32, !dbg !50
  %106 = bitcast float %102 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %105, i32 %106, ptr addrspace(1) %104, i1 %15) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciyiiunjidv2nc3qslsjo276jbyllfkadm5u7ijywbgvrold3fj6.py", directory: "inductor_cache/iy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 78, scope: !7)
!21 = !DILocation(line: 29, column: 71, scope: !7)
!22 = !DILocation(line: 29, column: 59, scope: !7)
!23 = !DILocation(line: 29, column: 52, scope: !7)
!24 = !DILocation(line: 29, column: 130, scope: !7)
!25 = !DILocation(line: 29, column: 123, scope: !7)
!26 = !DILocation(line: 29, column: 111, scope: !7)
!27 = !DILocation(line: 29, column: 104, scope: !7)
!28 = !DILocation(line: 29, column: 92, scope: !7)
!29 = !DILocation(line: 29, column: 140, scope: !7)
!30 = !DILocation(line: 29, column: 87, scope: !7)
!31 = !DILocation(line: 29, column: 138, scope: !7)
!32 = !DILocation(line: 29, column: 30, scope: !7)
!33 = !DILocation(line: 29, column: 145, scope: !7)
!34 = !DILocation(line: 30, column: 30, scope: !7)
!35 = !DILocation(line: 30, column: 35, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 35, scope: !7)
!38 = !DILocation(line: 32, column: 31, scope: !7)
!39 = !DILocation(line: 32, column: 36, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 36, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 26, scope: !7)
!44 = !DILocation(line: 34, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 19, scope: !7)
!47 = !DILocation(line: 43, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 45, column: 25, scope: !7)
!50 = !DILocation(line: 45, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 4, scope: !7)
