; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 4, !dbg !15
  %14 = srem i32 %13, 4, !dbg !16
  %15 = mul i32 %13, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = sdiv i32 %11, 16, !dbg !18
  %17 = sitofp i32 %14 to float, !dbg !19
  %18 = fadd float %17, 5.000000e-01, !dbg !20
  %19 = fadd float %18, -5.000000e-01, !dbg !21
  %20 = fcmp ogt float %19, 0.000000e+00, !dbg !22
  %21 = select i1 %20, float %19, float 0.000000e+00, !dbg !26
  %22 = fptosi float %21 to i32, !dbg !27
  %23 = tail call i32 @llvm.smin.i32(i32 %22, i32 2), !dbg !28
  %narrow = add nsw i32 %23, 1, !dbg !28
  %24 = sext i32 %narrow to i64, !dbg !28
  %25 = sitofp i32 %.decomposed to float, !dbg !30
  %26 = fadd float %25, 5.000000e-01, !dbg !31
  %27 = fadd float %26, -5.000000e-01, !dbg !32
  %28 = fcmp ogt float %27, 0.000000e+00, !dbg !33
  %29 = select i1 %28, float %27, float 0.000000e+00, !dbg !35
  %30 = fptosi float %29 to i32, !dbg !36
  %31 = sext i32 %30 to i64, !dbg !37
  %32 = tail call i64 @llvm.smin.i64(i64 %31, i64 2), !dbg !38
  %33 = shl nsw i64 %24, 2, !dbg !40
  %34 = shl nsw i32 %16, 4, !dbg !41
  %35 = sext i32 %34 to i64, !dbg !42
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !43
  %37 = getelementptr i8, ptr addrspace(1) %36, i64 4, !dbg !43
  %38 = getelementptr float, ptr addrspace(1) %37, i64 %33, !dbg !43
  %39 = getelementptr float, ptr addrspace(1) %38, i64 %35, !dbg !43
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %12) #2, !dbg !44
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !45
  %42 = getelementptr float, ptr addrspace(1) %41, i64 %31, !dbg !45
  %43 = getelementptr float, ptr addrspace(1) %42, i64 %35, !dbg !45
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #2, !dbg !46
  %45 = sitofp i32 %30 to float, !dbg !47
  %46 = fsub float %29, %45, !dbg !48
  %47 = fcmp ogt float %46, 0.000000e+00, !dbg !49
  %48 = select i1 %47, float %46, float 0.000000e+00, !dbg !51
  %49 = fcmp olt float %48, 1.000000e+00, !dbg !52
  %50 = select i1 %49, float %48, float 1.000000e+00, !dbg !54
  %51 = shl i32 %22, 2, !dbg !55
  %52 = add i32 %34, %30, !dbg !56
  %53 = add i32 %52, %51, !dbg !57
  %54 = sext i32 %53 to i64, !dbg !58
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !58
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #2, !dbg !59
  %57 = sext i32 %51 to i64, !dbg !60
  %58 = getelementptr float, ptr addrspace(1) %37, i64 %57, !dbg !61
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %35, !dbg !61
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %12) #2, !dbg !62
  %61 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !46
  %62 = insertelement <2 x i32> %61, i32 %56, i64 1, !dbg !46
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !46
  %64 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !44
  %65 = insertelement <2 x i32> %64, i32 %60, i64 1, !dbg !44
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !44
  %67 = fsub <2 x float> %66, %63, !dbg !63
  %68 = insertelement <2 x float> poison, float %50, i64 0, !dbg !64
  %69 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %70 = fmul <2 x float> %67, %69, !dbg !64
  %71 = fadd <2 x float> %70, %63, !dbg !65
  %72 = extractelement <2 x float> %71, i64 0, !dbg !66
  %73 = extractelement <2 x float> %71, i64 1, !dbg !67
  %74 = fsub float %72, %73, !dbg !66
  %75 = sitofp i32 %22 to float, !dbg !68
  %76 = fsub float %21, %75, !dbg !69
  %77 = fcmp ogt float %76, 0.000000e+00, !dbg !70
  %78 = select i1 %77, float %76, float 0.000000e+00, !dbg !72
  %79 = fcmp olt float %78, 1.000000e+00, !dbg !73
  %80 = select i1 %79, float %78, float 1.000000e+00, !dbg !75
  %81 = fmul float %80, %74, !dbg !76
  %82 = fadd float %73, %81, !dbg !67
  %83 = sext i32 %11 to i64, !dbg !77
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !77
  %85 = bitcast float %82 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %84, i1 %12) #2, !dbg !78
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %86, i1 %12) #2, !dbg !80
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %87, i1 %12) #2, !dbg !82
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %88, i1 %12) #2, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjefzn2w2mwee23uhdkzj6ynogudr7hguofrzrrrv3uk2l6in6va.py", directory: "inductor_cache/je")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !29)
!29 = !DILocation(line: 41, column: 42, scope: !7)
!30 = !DILocation(line: 43, column: 21, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 42, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !34)
!36 = !DILocation(line: 48, column: 21, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !39)
!39 = !DILocation(line: 50, column: 42, scope: !7)
!40 = !DILocation(line: 51, column: 41, scope: !7)
!41 = !DILocation(line: 51, column: 52, scope: !7)
!42 = !DILocation(line: 51, column: 49, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 57, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 57, scope: !7)
!47 = !DILocation(line: 54, column: 21, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !50)
!50 = !DILocation(line: 56, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !50)
!52 = !DILocation(line: 110, column: 15, scope: !23, inlinedAt: !53)
!53 = !DILocation(line: 57, column: 42, scope: !7)
!54 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !53)
!55 = !DILocation(line: 60, column: 41, scope: !7)
!56 = !DILocation(line: 60, column: 39, scope: !7)
!57 = !DILocation(line: 60, column: 48, scope: !7)
!58 = !DILocation(line: 60, column: 31, scope: !7)
!59 = !DILocation(line: 60, column: 56, scope: !7)
!60 = !DILocation(line: 61, column: 39, scope: !7)
!61 = !DILocation(line: 61, column: 31, scope: !7)
!62 = !DILocation(line: 61, column: 56, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 59, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 19, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !71)
!71 = !DILocation(line: 68, column: 42, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !71)
!73 = !DILocation(line: 110, column: 15, scope: !23, inlinedAt: !74)
!74 = !DILocation(line: 69, column: 42, scope: !7)
!75 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !74)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 72, column: 28, scope: !7)
!78 = !DILocation(line: 72, column: 40, scope: !7)
!79 = !DILocation(line: 73, column: 28, scope: !7)
!80 = !DILocation(line: 73, column: 40, scope: !7)
!81 = !DILocation(line: 74, column: 28, scope: !7)
!82 = !DILocation(line: 74, column: 40, scope: !7)
!83 = !DILocation(line: 75, column: 28, scope: !7)
!84 = !DILocation(line: 75, column: 40, scope: !7)
!85 = !DILocation(line: 75, column: 4, scope: !7)
