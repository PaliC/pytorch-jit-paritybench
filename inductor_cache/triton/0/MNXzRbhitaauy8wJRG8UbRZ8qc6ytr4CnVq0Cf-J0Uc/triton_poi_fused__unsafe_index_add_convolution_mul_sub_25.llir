; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) nocapture readnone %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = shl i32 %14, 2, !dbg !12
  %18 = and i32 %17, 252, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 2, !dbg !15
  %23 = lshr i32 %14, 6, !dbg !16
  %.lobit = and i32 %23, 1, !dbg !16
  %24 = or disjoint i32 %22, 1, !dbg !17
  %25 = or disjoint i32 %22, 2, !dbg !17
  %26 = or disjoint i32 %22, 3, !dbg !17
  %27 = or disjoint i32 %22, %.lobit, !dbg !17
  %28 = or disjoint i32 %27, 2, !dbg !17
  %29 = icmp slt i32 %22, 4, !dbg !18
  %30 = icmp slt i32 %24, 4, !dbg !18
  %31 = icmp slt i32 %25, 4, !dbg !18
  %32 = icmp slt i32 %26, 4, !dbg !18
  %33 = icmp slt i32 %27, 4, !dbg !18
  %34 = icmp slt i32 %28, 4, !dbg !18
  %35 = ashr exact i32 %22, 1, !dbg !19
  %.frozen = freeze i32 %24, !dbg !19
  %36 = sdiv i32 %.frozen, 2, !dbg !19
  %37 = ashr exact i32 %25, 1, !dbg !19
  %.frozen23 = freeze i32 %26, !dbg !19
  %38 = sdiv i32 %.frozen23, 2, !dbg !19
  %39 = mul i32 %36, 2, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = mul i32 %38, 2, !dbg !20
  %.decomposed24 = sub i32 %.frozen23, %40, !dbg !20
  %.frozen25 = freeze i32 %20, !dbg !21
  %41 = sdiv i32 %.frozen25, 256, !dbg !21
  %42 = mul i32 %41, 256, !dbg !22
  %.decomposed26 = sub i32 %.frozen25, %42, !dbg !22
  %43 = srem i32 %19, 256, !dbg !22
  %44 = sext i32 %19 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !23
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !24
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !24
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !24
  %49 = bitcast i32 %47 to float, !dbg !24
  %50 = bitcast i32 %48 to float, !dbg !24
  %51 = sext i32 %.decomposed to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !25
  %53 = sext i32 %.decomposed24 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %29) #2, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %29) #2, !dbg !26
  %57 = bitcast i32 %56 to float, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %30) #2, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %30) #2, !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %31) #2, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 %31) #2, !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %32) #2, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %32) #2, !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = sext i32 %35 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !27
  %69 = sext i32 %36 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %7, i64 %69, !dbg !27
  %71 = sext i32 %37 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %71, !dbg !27
  %73 = sext i32 %38 to i64, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %7, i64 %73, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %29) #2, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %29) #2, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %30) #2, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %30) #2, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %31) #2, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %31) #2, !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %32) #2, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %32) #2, !dbg !28
  %86 = bitcast i32 %85 to float, !dbg !28
  %87 = shl i32 %27, 8, !dbg !29
  %88 = shl i32 %28, 8, !dbg !29
  %89 = shl i32 %41, 10, !dbg !30
  %90 = add i32 %89, %.decomposed26, !dbg !31
  %91 = add i32 %90, %87, !dbg !32
  %92 = add i32 %90, %88, !dbg !32
  %93 = sext i32 %91 to i64, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !33
  %95 = sext i32 %92 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %33) #2, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !34
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %34) #2, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !34
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !34
  %107 = and i32 %17, 508, !dbg !34
  %108 = lshr i32 %17, 6, !dbg !34
  %109 = and i32 %108, 4, !dbg !34
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !34
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %107, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %111, i32 %98, i32 %99, i32 %100, i32 %101, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !34
  %113 = load float, ptr addrspace(3) %112, align 8, !dbg !34
  %114 = getelementptr inbounds i8, ptr addrspace(3) %112, i32 4, !dbg !34
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !34
  %116 = getelementptr inbounds i8, ptr addrspace(3) %112, i32 1040, !dbg !34
  %117 = load float, ptr addrspace(3) %116, align 8, !dbg !34
  %118 = getelementptr inbounds i8, ptr addrspace(3) %112, i32 1044, !dbg !34
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %111, i32 %103, i32 %104, i32 %105, i32 %106, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %120 = load float, ptr addrspace(3) %112, align 8, !dbg !34
  %121 = load float, ptr addrspace(3) %114, align 4, !dbg !34
  %122 = load float, ptr addrspace(3) %116, align 8, !dbg !34
  %123 = load float, ptr addrspace(3) %118, align 4, !dbg !34
  %124 = sext i32 %43 to i64, !dbg !35
  %125 = getelementptr float, ptr addrspace(1) %8, i64 %124, !dbg !35
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %125, i1 true) #2, !dbg !36
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !36
  %128 = extractvalue { i32, i32 } %126, 1, !dbg !36
  %129 = bitcast i32 %127 to float, !dbg !36
  %130 = bitcast i32 %128 to float, !dbg !36
  %131 = fsub float %49, %49, !dbg !37
  %132 = fsub float %50, %50, !dbg !37
  %133 = fmul float %131, %57, !dbg !38
  %134 = fmul float %132, %57, !dbg !38
  %135 = fmul float %131, %60, !dbg !38
  %136 = fmul float %132, %60, !dbg !38
  %137 = fmul float %131, %63, !dbg !38
  %138 = fmul float %132, %63, !dbg !38
  %139 = fmul float %131, %66, !dbg !38
  %140 = fmul float %132, %66, !dbg !38
  %141 = fadd float %133, %49, !dbg !39
  %142 = fadd float %134, %50, !dbg !39
  %143 = fadd float %135, %49, !dbg !39
  %144 = fadd float %136, %50, !dbg !39
  %145 = fadd float %137, %49, !dbg !39
  %146 = fadd float %138, %50, !dbg !39
  %147 = fadd float %139, %49, !dbg !39
  %148 = fadd float %140, %50, !dbg !39
  %149 = fsub float %141, %141, !dbg !40
  %150 = fsub float %142, %142, !dbg !40
  %151 = fsub float %143, %143, !dbg !40
  %152 = fsub float %144, %144, !dbg !40
  %153 = fsub float %145, %145, !dbg !40
  %154 = fsub float %146, %146, !dbg !40
  %155 = fsub float %147, %147, !dbg !40
  %156 = fsub float %148, %148, !dbg !40
  %157 = fmul float %149, %77, !dbg !41
  %158 = fmul float %150, %77, !dbg !41
  %159 = fmul float %151, %80, !dbg !41
  %160 = fmul float %152, %80, !dbg !41
  %161 = fmul float %153, %83, !dbg !41
  %162 = fmul float %154, %83, !dbg !41
  %163 = fmul float %155, %86, !dbg !41
  %164 = fmul float %156, %86, !dbg !41
  %165 = fadd float %141, %157, !dbg !42
  %166 = fadd float %142, %158, !dbg !42
  %167 = fadd float %143, %159, !dbg !42
  %168 = fadd float %144, %160, !dbg !42
  %169 = fadd float %145, %161, !dbg !42
  %170 = fadd float %146, %162, !dbg !42
  %171 = fadd float %147, %163, !dbg !42
  %172 = fadd float %148, %164, !dbg !42
  %173 = fadd float %113, %129, !dbg !43
  %174 = fadd float %115, %130, !dbg !43
  %175 = fadd float %117, %129, !dbg !43
  %176 = fadd float %119, %130, !dbg !43
  %177 = fadd float %120, %129, !dbg !43
  %178 = fadd float %121, %130, !dbg !43
  %179 = fadd float %122, %129, !dbg !43
  %180 = fadd float %123, %130, !dbg !43
  %181 = fadd float %165, %173, !dbg !44
  %182 = fadd float %166, %174, !dbg !44
  %183 = fadd float %167, %175, !dbg !44
  %184 = fadd float %168, %176, !dbg !44
  %185 = fadd float %169, %177, !dbg !44
  %186 = fadd float %170, %178, !dbg !44
  %187 = fadd float %171, %179, !dbg !44
  %188 = fadd float %172, %180, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %189 = bitcast float %181 to i32, !dbg !46
  %190 = bitcast float %182 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %189, i32 %190, i1 true) #2, !dbg !46
  %191 = bitcast float %183 to i32, !dbg !46
  %192 = bitcast float %184 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %116, i32 %191, i32 %192, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %193 = load <4 x i32>, ptr addrspace(3) %111, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %194 = bitcast float %185 to i32, !dbg !46
  %195 = bitcast float %186 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %194, i32 %195, i1 true) #2, !dbg !46
  %196 = bitcast float %187 to i32, !dbg !46
  %197 = bitcast float %188 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %116, i32 %196, i32 %197, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %198 = load <4 x i32>, ptr addrspace(3) %111, align 16, !dbg !46
  %.extract = extractelement <4 x i32> %193, i64 0, !dbg !46
  %.extract16 = extractelement <4 x i32> %193, i64 1, !dbg !46
  %.extract17 = extractelement <4 x i32> %193, i64 2, !dbg !46
  %.extract18 = extractelement <4 x i32> %193, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %94, i1 %33) #2, !dbg !46
  %.extract19 = extractelement <4 x i32> %198, i64 0, !dbg !46
  %.extract20 = extractelement <4 x i32> %198, i64 1, !dbg !46
  %.extract21 = extractelement <4 x i32> %198, i64 2, !dbg !46
  %.extract22 = extractelement <4 x i32> %198, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %96, i1 %34) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c53qykjszpxtilaljhmx22eftahqhncootwyrskvstsx26he4io4.py", directory: "inductor_cache/53")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 38, column: 31, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 40, column: 31, scope: !7)
!28 = !DILocation(line: 40, column: 36, scope: !7)
!29 = !DILocation(line: 41, column: 44, scope: !7)
!30 = !DILocation(line: 41, column: 54, scope: !7)
!31 = !DILocation(line: 41, column: 40, scope: !7)
!32 = !DILocation(line: 41, column: 49, scope: !7)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 41, column: 59, scope: !7)
!35 = !DILocation(line: 42, column: 31, scope: !7)
!36 = !DILocation(line: 42, column: 36, scope: !7)
!37 = !DILocation(line: 53, column: 19, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 55, column: 19, scope: !7)
!40 = !DILocation(line: 59, column: 20, scope: !7)
!41 = !DILocation(line: 60, column: 20, scope: !7)
!42 = !DILocation(line: 61, column: 20, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 4, scope: !7)
!46 = !DILocation(line: 65, column: 59, scope: !7)
!47 = !DILocation(line: 65, column: 4, scope: !7)
