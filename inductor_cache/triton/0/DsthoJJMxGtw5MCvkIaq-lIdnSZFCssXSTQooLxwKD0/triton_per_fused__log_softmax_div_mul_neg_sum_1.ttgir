#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":19:0)
#loc1 = loc(unknown)
#loc32 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":50:59)
#loc42 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__log_softmax_div_mul_neg_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant 2.500000e-01 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<3> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = arith.divsi %0, %cst_2 : tensor<256xi32, #blocked> loc(#loc3)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %3 = tt.addptr %2, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc4)
    %4 = tt.load %3 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %6 = tt.addptr %5, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc6)
    %7 = tt.load %6 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = arith.muli %1, %cst_2 : tensor<256xi32, #blocked> loc(#loc8)
    %9 = tt.addptr %5, %8 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc9)
    %10 = tt.load %9 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = arith.addi %8, %cst_3 : tensor<256xi32, #blocked> loc(#loc11)
    %12 = tt.addptr %5, %11 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %14 = arith.addi %8, %cst_4 : tensor<256xi32, #blocked> loc(#loc14)
    %15 = tt.addptr %5, %14 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc15)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %17 = arith.addi %8, %cst_5 : tensor<256xi32, #blocked> loc(#loc17)
    %18 = tt.addptr %5, %17 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc18)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %20 = arith.subf %cst, %4 : tensor<256xf32, #blocked> loc(#loc20)
    %21 = math.exp %10 : tensor<256xf32, #blocked> loc(#loc21)
    %22 = math.exp %13 : tensor<256xf32, #blocked> loc(#loc22)
    %23 = arith.addf %21, %22 : tensor<256xf32, #blocked> loc(#loc23)
    %24 = math.exp %16 : tensor<256xf32, #blocked> loc(#loc24)
    %25 = arith.addf %23, %24 : tensor<256xf32, #blocked> loc(#loc25)
    %26 = math.exp %19 : tensor<256xf32, #blocked> loc(#loc26)
    %27 = arith.addf %25, %26 : tensor<256xf32, #blocked> loc(#loc27)
    %28 = math.log %27 : tensor<256xf32, #blocked> loc(#loc28)
    %29 = arith.subf %7, %28 : tensor<256xf32, #blocked> loc(#loc29)
    %30 = arith.mulf %20, %29 : tensor<256xf32, #blocked> loc(#loc30)
    %31 = "tt.reduce"(%30) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc32)), %arg5: f32 loc(callsite(#loc1 at #loc32))):
      %37 = arith.addf %arg4, %arg5 : f32 loc(#loc45)
      tt.reduce.return %37 : f32 loc(#loc41)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc41)
    %32 = arith.addf %31, %cst_0 : f32 loc(#loc44)
    %33 = arith.mulf %32, %cst_1 : f32 loc(#loc36)
    %34 = tt.splat %33 : f32 -> tensor<1xf32, #blocked1> loc(#loc36)
    gpu.barrier loc(#loc37)
    %35 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc38)
    %36 = tt.splat %35 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    tt.store %36, %34 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":27:26)
#loc3 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":31:19)
#loc4 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":32:30)
#loc5 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":32:35)
#loc6 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":33:30)
#loc7 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":33:35)
#loc8 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":34:32)
#loc9 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":34:30)
#loc10 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":34:37)
#loc11 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":35:34)
#loc12 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":35:30)
#loc13 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":35:41)
#loc14 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":36:34)
#loc15 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":36:30)
#loc16 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":36:41)
#loc17 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":37:35)
#loc18 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":37:31)
#loc19 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":37:42)
#loc20 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":38:12)
#loc21 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":39:23)
#loc22 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":40:23)
#loc23 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":41:18)
#loc24 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":42:23)
#loc25 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":43:19)
#loc26 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":44:24)
#loc27 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":45:20)
#loc28 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":46:24)
#loc29 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":47:19)
#loc30 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":48:19)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc35 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":50:45)
#loc36 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":52:20)
#loc37 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":53:4)
#loc38 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":54:28)
#loc39 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":54:63)
#loc40 = loc("inductor_cache/sm/csmywfg55q2vesu3s5ifh7bvcsdy5fappjhs4utgrdywpemkpcgz.py":54:4)
#loc41 = loc(callsite(#loc31 at #loc32))
#loc43 = loc(callsite(#loc33 at #loc31))
#loc44 = loc(callsite(#loc34 at #loc35))
#loc45 = loc(callsite(#loc43 at #loc32))
