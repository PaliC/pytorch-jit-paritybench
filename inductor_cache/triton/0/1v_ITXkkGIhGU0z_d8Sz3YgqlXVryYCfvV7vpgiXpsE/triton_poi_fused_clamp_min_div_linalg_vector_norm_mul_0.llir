; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = sdiv i32 %10, 4, !dbg !15
  %13 = sext i32 %10 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %11) #3, !dbg !17
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !17
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !17
  %18 = bitcast i32 %16 to float, !dbg !17
  %19 = bitcast i32 %17 to float, !dbg !17
  %20 = shl nsw i32 %12, 2, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %11) #3, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %11) #3, !dbg !20
  %26 = bitcast i32 %25 to float, !dbg !20
  %27 = or disjoint i32 %20, 1, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #3, !dbg !23
  %31 = bitcast i32 %30 to float, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #3, !dbg !23
  %33 = bitcast i32 %32 to float, !dbg !23
  %34 = or disjoint i32 %20, 2, !dbg !24
  %35 = sext i32 %34 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %11) #3, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %11) #3, !dbg !26
  %40 = bitcast i32 %39 to float, !dbg !26
  %41 = or disjoint i32 %20, 3, !dbg !27
  %42 = sext i32 %41 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %11) #3, !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %11) #3, !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %11) #3, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %11) #3, !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %11) #3, !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %11) #3, !dbg !35
  %57 = bitcast i32 %56 to float, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %11) #3, !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %11) #3, !dbg !37
  %62 = bitcast i32 %61 to float, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %11) #3, !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %11) #3, !dbg !39
  %67 = bitcast i32 %66 to float, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %11) #3, !dbg !39
  %69 = bitcast i32 %68 to float, !dbg !39
  %70 = fmul float %24, %24, !dbg !40
  %71 = fmul float %26, %26, !dbg !40
  %72 = fmul float %31, %31, !dbg !41
  %73 = fmul float %33, %33, !dbg !41
  %74 = fadd float %70, %72, !dbg !42
  %75 = fadd float %71, %73, !dbg !42
  %76 = fmul float %38, %38, !dbg !43
  %77 = fmul float %40, %40, !dbg !43
  %78 = fadd float %74, %76, !dbg !44
  %79 = fadd float %75, %77, !dbg !44
  %80 = fmul float %45, %45, !dbg !45
  %81 = fmul float %47, %47, !dbg !45
  %82 = fadd float %78, %80, !dbg !46
  %83 = fadd float %79, %81, !dbg !46
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %84, 0, !dbg !47
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i = icmp eq i32 %85, 0, !dbg !47
  br i1 %.not.i, label %91, label %86, !dbg !47

86:                                               ; preds = %4
  br i1 %.not1.i, label %89, label %87, !dbg !47

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

91:                                               ; preds = %4
  br i1 %.not1.i, label %94, label %92, !dbg !47

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !47
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i1 = icmp eq i32 %96, 0, !dbg !47
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i4 = icmp eq i32 %97, 0, !dbg !47
  br i1 %.not.i1, label %103, label %98, !dbg !47

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !47

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !47

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

__nv_sqrtf.exit5:                                 ; preds = %99, %101, %104, %106
  %.0.i3 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !47
  %108 = fcmp ogt float %.0.i, 0x3E45798EE0000000, !dbg !48
  %109 = fcmp ogt float %.0.i3, 0x3E45798EE0000000, !dbg !48
  %110 = fcmp uno float %.0.i, 0.000000e+00, !dbg !52
  %111 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !52
  %112 = or i1 %108, %110, !dbg !53
  %113 = or i1 %109, %111, !dbg !53
  %114 = select i1 %112, float %.0.i, float 0x3E45798EE0000000, !dbg !54
  %115 = select i1 %113, float %.0.i3, float 0x3E45798EE0000000, !dbg !54
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %18, float %114) #3, !dbg !55
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %115) #3, !dbg !55
  %118 = fmul float %52, %52, !dbg !56
  %119 = fmul float %54, %54, !dbg !56
  %120 = fmul float %57, %57, !dbg !57
  %121 = fmul float %59, %59, !dbg !57
  %122 = fadd float %118, %120, !dbg !58
  %123 = fadd float %119, %121, !dbg !58
  %124 = fmul float %62, %62, !dbg !59
  %125 = fmul float %64, %64, !dbg !59
  %126 = fadd float %122, %124, !dbg !60
  %127 = fadd float %123, %125, !dbg !60
  %128 = fmul float %67, %67, !dbg !61
  %129 = fmul float %69, %69, !dbg !61
  %130 = fadd float %126, %128, !dbg !62
  %131 = fadd float %127, %129, !dbg !62
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i6 = icmp eq i32 %132, 0, !dbg !63
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i9 = icmp eq i32 %133, 0, !dbg !63
  br i1 %.not.i6, label %139, label %134, !dbg !63

134:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %137, label %135, !dbg !63

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !63
  br label %__nv_sqrtf.exit10, !dbg !63

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !63
  br label %__nv_sqrtf.exit10, !dbg !63

139:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %142, label %140, !dbg !63

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !63
  br label %__nv_sqrtf.exit10, !dbg !63

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !63
  br label %__nv_sqrtf.exit10, !dbg !63

__nv_sqrtf.exit10:                                ; preds = %135, %137, %140, %142
  %.0.i8 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !63
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i11 = icmp eq i32 %144, 0, !dbg !63
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i14 = icmp eq i32 %145, 0, !dbg !63
  br i1 %.not.i11, label %151, label %146, !dbg !63

146:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %149, label %147, !dbg !63

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !63
  br label %__nv_sqrtf.exit15, !dbg !63

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !63
  br label %__nv_sqrtf.exit15, !dbg !63

151:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %154, label %152, !dbg !63

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !63
  br label %__nv_sqrtf.exit15, !dbg !63

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !63
  br label %__nv_sqrtf.exit15, !dbg !63

__nv_sqrtf.exit15:                                ; preds = %147, %149, %152, %154
  %.0.i13 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !63
  %156 = extractvalue { i32, i32 } %49, 1, !dbg !31
  %157 = bitcast i32 %156 to float, !dbg !31
  %158 = extractvalue { i32, i32 } %49, 0, !dbg !31
  %159 = bitcast i32 %158 to float, !dbg !31
  %160 = fcmp ogt float %.0.i8, 0x3E45798EE0000000, !dbg !64
  %161 = fcmp ogt float %.0.i13, 0x3E45798EE0000000, !dbg !64
  %162 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !66
  %163 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !66
  %164 = or i1 %160, %162, !dbg !67
  %165 = or i1 %161, %163, !dbg !67
  %166 = select i1 %164, float %.0.i8, float 0x3E45798EE0000000, !dbg !68
  %167 = select i1 %165, float %.0.i13, float 0x3E45798EE0000000, !dbg !68
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %166) #3, !dbg !69
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %167) #3, !dbg !69
  %170 = fmul float %116, %168, !dbg !70
  %171 = fmul float %117, %169, !dbg !70
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !71
  %173 = bitcast float %170 to i32, !dbg !72
  %174 = bitcast float %171 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %11) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgcnezbz6awjefwptcyrokmgrdwj6cvdamwt2gevyllin3owt6p5.py", directory: "inductor_cache/gc")
!4 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0", linkageName: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 32, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 34, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 34, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 36, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 38, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 42, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 42, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 42, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 41, column: 19, scope: !7)
!46 = !DILocation(line: 42, column: 19, scope: !7)
!47 = !DILocation(line: 43, column: 27, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 45, column: 42, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 46, column: 19, scope: !7)
!56 = !DILocation(line: 47, column: 20, scope: !7)
!57 = !DILocation(line: 48, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 20, scope: !7)
!59 = !DILocation(line: 50, column: 20, scope: !7)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 52, column: 20, scope: !7)
!62 = !DILocation(line: 53, column: 20, scope: !7)
!63 = !DILocation(line: 54, column: 27, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !65)
!65 = !DILocation(line: 55, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !65)
!69 = !DILocation(line: 56, column: 20, scope: !7)
!70 = !DILocation(line: 57, column: 20, scope: !7)
!71 = !DILocation(line: 58, column: 25, scope: !7)
!72 = !DILocation(line: 58, column: 37, scope: !7)
!73 = !DILocation(line: 58, column: 4, scope: !7)
