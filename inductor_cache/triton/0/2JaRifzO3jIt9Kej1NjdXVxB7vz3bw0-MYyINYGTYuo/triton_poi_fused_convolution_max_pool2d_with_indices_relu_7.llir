; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %14, 128, !dbg !13
  %16 = or disjoint i32 %14, 256, !dbg !13
  %17 = or disjoint i32 %14, 384, !dbg !13
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 1, !dbg !16
  %25 = or disjoint i32 %24, 1, !dbg !17
  %26 = icmp slt i32 %24, 1024, !dbg !18
  %27 = icmp slt i32 %25, 1024, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %28 = sdiv i32 %.frozen, 128, !dbg !19
  %29 = mul i32 %28, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = shl i32 %23, 8, !dbg !21
  %31 = shl i32 %25, 7, !dbg !21
  %32 = shl i32 %28, 17, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = and i1 %26, %18, !dbg !26
  %41 = and i1 %18, %27, !dbg !26
  %42 = and i1 %26, %19, !dbg !26
  %43 = and i1 %20, %26, !dbg !26
  %44 = and i1 %21, %26, !dbg !26
  %45 = and i1 %22, %26, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = sext i32 %.decomposed to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %63 = insertelement <8 x i32> poison, i32 %55, i64 0, !dbg !27
  %64 = insertelement <8 x i32> %63, i32 %54, i64 1, !dbg !27
  %65 = insertelement <8 x i32> %64, i32 %53, i64 2, !dbg !27
  %66 = insertelement <8 x i32> %65, i32 %52, i64 3, !dbg !27
  %67 = insertelement <8 x i32> %66, i32 %50, i64 4, !dbg !27
  %68 = insertelement <8 x i32> %67, i32 %49, i64 5, !dbg !27
  %69 = insertelement <8 x i32> %68, i32 %48, i64 6, !dbg !27
  %70 = insertelement <8 x i32> %69, i32 %47, i64 7, !dbg !27
  %71 = bitcast <8 x i32> %70 to <8 x float>, !dbg !27
  %72 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !29
  %73 = insertelement <4 x i32> %72, i32 %61, i64 1, !dbg !29
  %74 = insertelement <4 x i32> %73, i32 %60, i64 2, !dbg !29
  %75 = insertelement <4 x i32> %74, i32 %59, i64 3, !dbg !29
  %76 = bitcast <4 x i32> %75 to <4 x float>, !dbg !29
  %77 = shufflevector <4 x float> %76, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %78 = fadd <8 x float> %77, %71, !dbg !30
  %79 = fcmp olt <8 x float> %78, zeroinitializer, !dbg !31
  %80 = extractelement <8 x i1> %79, i64 7, !dbg !35
  %81 = extractelement <8 x float> %78, i64 7, !dbg !35
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !35
  %83 = extractelement <8 x i1> %79, i64 6, !dbg !35
  %84 = extractelement <8 x float> %78, i64 6, !dbg !35
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !35
  %86 = extractelement <8 x i1> %79, i64 5, !dbg !35
  %87 = extractelement <8 x float> %78, i64 5, !dbg !35
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !35
  %89 = extractelement <8 x i1> %79, i64 4, !dbg !35
  %90 = extractelement <8 x float> %78, i64 4, !dbg !35
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !35
  %92 = extractelement <8 x i1> %79, i64 3, !dbg !35
  %93 = extractelement <8 x float> %78, i64 3, !dbg !35
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !35
  %95 = extractelement <8 x i1> %79, i64 2, !dbg !35
  %96 = extractelement <8 x float> %78, i64 2, !dbg !35
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !35
  %98 = extractelement <8 x i1> %79, i64 1, !dbg !35
  %99 = extractelement <8 x float> %78, i64 1, !dbg !35
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !35
  %101 = extractelement <8 x i1> %79, i64 0, !dbg !35
  %102 = extractelement <8 x float> %78, i64 0, !dbg !35
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !35
  %104 = shl i32 %14, 10, !dbg !36
  %105 = shl i32 %15, 10, !dbg !36
  %106 = shl i32 %16, 10, !dbg !36
  %107 = shl i32 %17, 10, !dbg !36
  %108 = add i32 %104, %24, !dbg !37
  %109 = add i32 %24, %105, !dbg !37
  %110 = add i32 %24, %106, !dbg !37
  %111 = add i32 %24, %107, !dbg !37
  %112 = sext i32 %108 to i64, !dbg !38
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !38
  %114 = sext i32 %109 to i64, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !38
  %116 = sext i32 %110 to i64, !dbg !38
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !38
  %118 = sext i32 %111 to i64, !dbg !38
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !38
  %120 = shl i32 %9, 3, !dbg !39
  %121 = and i32 %120, 1016, !dbg !39
  %122 = shl i32 %9, 1, !dbg !39
  %123 = and i32 %122, 254, !dbg !39
  %124 = lshr exact i32 %121, 1, !dbg !39
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !39
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %121, !dbg !39
  %127 = bitcast float %82 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !39
  %128 = or disjoint i32 %121, 2, !dbg !39
  %129 = lshr exact i32 %128, 1, !dbg !39
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !39
  %131 = getelementptr inbounds float, ptr addrspace(3) %130, i32 %128, !dbg !39
  %132 = bitcast float %85 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !39
  %133 = or disjoint i32 %121, 4, !dbg !39
  %134 = lshr exact i32 %133, 1, !dbg !39
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !39
  %136 = getelementptr inbounds float, ptr addrspace(3) %135, i32 %133, !dbg !39
  %137 = bitcast float %88 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !39
  %138 = or disjoint i32 %121, 6, !dbg !39
  %139 = lshr exact i32 %138, 1, !dbg !39
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !39
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %138, !dbg !39
  %142 = bitcast float %91 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !39
  %143 = or disjoint i32 %121, 1, !dbg !39
  %144 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %143, !dbg !39
  %145 = bitcast float %94 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !39
  %146 = or disjoint i32 %121, 3, !dbg !39
  %147 = lshr i32 %146, 1, !dbg !39
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !39
  %149 = getelementptr inbounds float, ptr addrspace(3) %148, i32 %146, !dbg !39
  %150 = bitcast float %97 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !39
  %151 = or disjoint i32 %121, 5, !dbg !39
  %152 = lshr i32 %151, 1, !dbg !39
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !39
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %151, !dbg !39
  %155 = bitcast float %100 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !39
  %156 = or disjoint i32 %121, 7, !dbg !39
  %157 = lshr i32 %156, 1, !dbg !39
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !39
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %156, !dbg !39
  %160 = bitcast float %103 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %161 = lshr exact i32 %123, 1, !dbg !39
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !39
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %123, !dbg !39
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !39
  %165 = or disjoint i32 %123, 1, !dbg !39
  %166 = getelementptr float, ptr addrspace(3) %162, i32 %165, !dbg !39
  %167 = load i32, ptr addrspace(3) %166, align 4, !dbg !39
  %168 = or disjoint i32 %123, 256, !dbg !39
  %169 = lshr exact i32 %168, 1, !dbg !39
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !39
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !39
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !39
  %173 = or disjoint i32 %123, 257, !dbg !39
  %174 = lshr i32 %173, 1, !dbg !39
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !39
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !39
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !39
  %178 = or disjoint i32 %123, 512, !dbg !39
  %179 = lshr exact i32 %178, 1, !dbg !39
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !39
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !39
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !39
  %183 = or disjoint i32 %123, 513, !dbg !39
  %184 = lshr i32 %183, 1, !dbg !39
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !39
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !39
  %187 = load i32, ptr addrspace(3) %186, align 4, !dbg !39
  %188 = or disjoint i32 %123, 768, !dbg !39
  %189 = lshr exact i32 %188, 1, !dbg !39
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !39
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188, !dbg !39
  %192 = load i32, ptr addrspace(3) %191, align 4, !dbg !39
  %193 = or disjoint i32 %123, 769, !dbg !39
  %194 = lshr i32 %193, 1, !dbg !39
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !39
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %193, !dbg !39
  %197 = load i32, ptr addrspace(3) %196, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %167, ptr addrspace(1) %113, i1 %42) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %177, ptr addrspace(1) %115, i1 %43) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %187, ptr addrspace(1) %117, i1 %44) #2, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %192, i32 %197, ptr addrspace(1) %119, i1 %45) #2, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !40
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !40
  %200 = bitcast float %82 to i32, !dbg !41
  %201 = bitcast float %85 to i32, !dbg !41
  %202 = bitcast float %88 to i32, !dbg !41
  %203 = bitcast float %91 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %198, i1 %40) #2, !dbg !41
  %204 = bitcast float %94 to i32, !dbg !41
  %205 = bitcast float %97 to i32, !dbg !41
  %206 = bitcast float %100 to i32, !dbg !41
  %207 = bitcast float %103 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %204, i32 %205, i32 %206, i32 %207, ptr addrspace(1) %199, i1 %41) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpubgpmidrlmzk57hyjosjdgze67mlvl7ooxugn66nqetw5dj5nn.py", directory: "inductor_cache/pu")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 64, scope: !7)
!27 = !DILocation(line: 32, column: 56, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 25, scope: !7)
!39 = !DILocation(line: 37, column: 46, scope: !7)
!40 = !DILocation(line: 38, column: 25, scope: !7)
!41 = !DILocation(line: 38, column: 57, scope: !7)
!42 = !DILocation(line: 38, column: 4, scope: !7)
