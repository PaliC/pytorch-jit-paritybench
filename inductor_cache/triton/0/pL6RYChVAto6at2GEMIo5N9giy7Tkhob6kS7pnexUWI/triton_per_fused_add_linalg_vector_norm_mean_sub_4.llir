; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_linalg_vector_norm_mean_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 15, !dbg !11
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 192, !dbg !12
  %11 = or disjoint i32 %10, %8, !dbg !13
  %12 = or disjoint i32 %11, 768, !dbg !13
  %13 = zext nneg i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #5, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = zext nneg i32 %11 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = or disjoint i32 %11, 784, !dbg !18
  %22 = zext nneg i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = or disjoint i32 %11, 16, !dbg !21
  %27 = zext nneg i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = or disjoint i32 %11, 800, !dbg !24
  %32 = zext nneg i32 %31 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = or disjoint i32 %11, 32, !dbg !27
  %37 = zext nneg i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = or disjoint i32 %11, 816, !dbg !30
  %42 = zext nneg i32 %41 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !32
  %45 = bitcast i32 %44 to float, !dbg !32
  %46 = or disjoint i32 %11, 48, !dbg !33
  %47 = zext nneg i32 %46 to i64, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !35
  %50 = bitcast i32 %49 to float, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #5, !dbg !36
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #5, !dbg !37
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #5, !dbg !38
  %54 = fsub float %16, %20, !dbg !39
  %55 = fmul float %54, %54, !dbg !40
  %56 = fsub float %25, %30, !dbg !41
  %57 = fmul float %56, %56, !dbg !42
  %58 = fadd float %55, %57, !dbg !43
  %59 = fsub float %35, %40, !dbg !44
  %60 = fmul float %59, %59, !dbg !45
  %61 = fadd float %58, %60, !dbg !46
  %62 = fsub float %45, %50, !dbg !47
  %63 = fmul float %62, %62, !dbg !48
  %64 = fadd float %61, %63, !dbg !49
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %65, 0, !dbg !50
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i = icmp eq i32 %66, 0, !dbg !50
  br i1 %.not.i, label %72, label %67, !dbg !50

67:                                               ; preds = %6
  br i1 %.not1.i, label %70, label %68, !dbg !50

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

72:                                               ; preds = %6
  br i1 %.not1.i, label %75, label %73, !dbg !50

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !50
  %77 = bitcast i32 %53 to float, !dbg !38
  %78 = bitcast i32 %52 to float, !dbg !37
  %79 = bitcast i32 %51 to float, !dbg !36
  %80 = lshr i32 %7, 5, !dbg !10
  %81 = and i32 %7, 31, !dbg !10
  %82 = bitcast float %.0.i to i32, !dbg !51
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !51
  %84 = bitcast i32 %83 to float, !dbg !51
  %85 = fadd float %.0.i, %84, !dbg !55
  %86 = bitcast float %85 to i32, !dbg !51
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !51
  %88 = bitcast i32 %87 to float, !dbg !51
  %89 = fadd float %85, %88, !dbg !55
  %90 = bitcast float %89 to i32, !dbg !51
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !51
  %92 = bitcast i32 %91 to float, !dbg !51
  %93 = fadd float %89, %92, !dbg !55
  %94 = bitcast float %93 to i32, !dbg !51
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !51
  %96 = bitcast i32 %95 to float, !dbg !51
  %97 = fadd float %93, %96, !dbg !55
  %98 = bitcast float %97 to i32, !dbg !51
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !51
  %100 = bitcast i32 %99 to float, !dbg !51
  %101 = fadd float %97, %100, !dbg !55
  %102 = icmp eq i32 %81, 0, !dbg !51
  %103 = and i32 %80, 1, !dbg !51
  %104 = zext nneg i32 %103 to i64, !dbg !51
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !51
  %106 = bitcast float %101 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 %102) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %107 = icmp slt i32 %7, 2, !dbg !51
  %108 = sext i32 %7 to i64, !dbg !51
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i64 %108, !dbg !51
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #5, !dbg !51
  %111 = bitcast i32 %110 to float, !dbg !51
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !51
  %113 = bitcast i32 %112 to float, !dbg !51
  %114 = fadd float %111, %113, !dbg !55
  %115 = and i32 %7, 1, !dbg !51
  %116 = icmp eq i32 %115, 0, !dbg !51
  %117 = and i1 %107, %116, !dbg !51
  %118 = bitcast float %114 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %118, i1 %117) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %119 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !51
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 6.400000e+01) #5, !dbg !57
  %121 = fadd float %120, 0.000000e+00, !dbg !58
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 6.400000e+01) #5, !dbg !59
  %123 = fadd float %121, %122, !dbg !60
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 6.400000e+01) #5, !dbg !61
  %125 = fadd float %123, %124, !dbg !62
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 6.400000e+01) #5, !dbg !63
  %127 = fadd float %125, %126, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %urem = and i32 %7, 63, !dbg !66
  %128 = icmp eq i32 %urem, 0, !dbg !66
  %129 = bitcast float %127 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %0, i1 %128) #5, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3htcyf64q5vrd7yhx3nrq677dnjducj6ws4kjib7mtaxt3ztfmx.py", directory: "inductor_cache/3h")
!4 = !{ptr @triton_per_fused_add_linalg_vector_norm_mean_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_linalg_vector_norm_mean_sub_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_linalg_vector_norm_mean_sub_4", linkageName: "triton_per_fused_add_linalg_vector_norm_mean_sub_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 44, scope: !7)
!13 = !DILocation(line: 31, column: 41, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 49, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 48, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 49, scope: !7)
!27 = !DILocation(line: 36, column: 41, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 42, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 50, scope: !7)
!33 = !DILocation(line: 38, column: 41, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 49, scope: !7)
!36 = !DILocation(line: 39, column: 20, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 18, scope: !7)
!40 = !DILocation(line: 46, column: 18, scope: !7)
!41 = !DILocation(line: 47, column: 18, scope: !7)
!42 = !DILocation(line: 48, column: 18, scope: !7)
!43 = !DILocation(line: 49, column: 18, scope: !7)
!44 = !DILocation(line: 50, column: 19, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 19, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 27, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!54 = !DILocation(line: 58, column: 26, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !54)
!56 = distinct !DILexicalBlockFile(scope: !52, file: !53, discriminator: 0)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 4, scope: !7)
!66 = !DILocation(line: 70, column: 71, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
