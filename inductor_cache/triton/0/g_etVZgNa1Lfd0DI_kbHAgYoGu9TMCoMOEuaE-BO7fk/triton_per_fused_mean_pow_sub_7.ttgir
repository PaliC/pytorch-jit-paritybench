#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":19:0)
#loc1 = loc(unknown)
#loc37 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":41:24)
#loc44 = loc(callsite(#loc1 at #loc37))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mean_pow_sub_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":19:0)) attributes {noinline = false} {
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<524288> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<262144> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4096> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<1x128xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc3)
    %3 = arith.remsi %0, %c64_i32 : i32 loc(#loc4)
    %4 = arith.divsi %0, %c64_i32 : i32 loc(#loc5)
    %5 = arith.remsi %2, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc6)
    %6 = arith.muli %5, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc7)
    %7 = arith.muli %4, %c128_i32 : i32 loc(#loc8)
    %8 = tt.splat %7 : i32 -> tensor<1x128xi32, #blocked> loc(#loc9)
    %9 = arith.addi %2, %8 : tensor<1x128xi32, #blocked> loc(#loc9)
    %10 = arith.divsi %9, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc10)
    %11 = arith.remsi %10, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc11)
    %12 = arith.muli %11, %cst_1 : tensor<1x128xi32, #blocked> loc(#loc12)
    %13 = arith.addi %6, %12 : tensor<1x128xi32, #blocked> loc(#loc13)
    %14 = arith.muli %3, %c8192_i32 : i32 loc(#loc14)
    %15 = tt.splat %14 : i32 -> tensor<1x128xi32, #blocked> loc(#loc15)
    %16 = arith.addi %9, %15 : tensor<1x128xi32, #blocked> loc(#loc15)
    %17 = arith.divsi %16, %cst_0 : tensor<1x128xi32, #blocked> loc(#loc16)
    %18 = arith.muli %17, %cst_0 : tensor<1x128xi32, #blocked> loc(#loc17)
    %19 = arith.addi %13, %18 : tensor<1x128xi32, #blocked> loc(#loc18)
    %20 = arith.divsi %16, %cst_1 : tensor<1x128xi32, #blocked> loc(#loc19)
    %21 = arith.remsi %20, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc20)
    %22 = arith.addi %19, %21 : tensor<1x128xi32, #blocked> loc(#loc21)
    %23 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = tt.addptr %23, %22 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc22)
    %25 = tt.load %24 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc23)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc24)
    %27 = tt.addptr %26, %21 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc24)
    %28 = tt.load %27 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %29 = arith.addi %6, %cst : tensor<1x128xi32, #blocked> loc(#loc26)
    %30 = arith.addi %29, %12 : tensor<1x128xi32, #blocked> loc(#loc27)
    %31 = arith.addi %30, %18 : tensor<1x128xi32, #blocked> loc(#loc28)
    %32 = arith.addi %31, %21 : tensor<1x128xi32, #blocked> loc(#loc29)
    %33 = tt.addptr %23, %32 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc30)
    %34 = tt.load %33 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc31)
    %35 = arith.addf %25, %28 : tensor<1x128xf32, #blocked> loc(#loc32)
    %36 = arith.addf %34, %28 : tensor<1x128xf32, #blocked> loc(#loc33)
    %37 = arith.subf %35, %36 : tensor<1x128xf32, #blocked> loc(#loc34)
    %38 = arith.mulf %37, %37 : tensor<1x128xf32, #blocked> loc(#loc35)
    %39 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc37)), %arg6: f32 loc(callsite(#loc1 at #loc37))):
      %43 = arith.addf %arg5, %arg6 : f32 loc(#loc46)
      tt.reduce.return %43 : f32 loc(#loc43)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %40 = tt.expand_dims %39 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc39)
    %41 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc40)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.store %42, %40 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":23:28)
#loc3 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":26:34)
#loc4 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":30:19)
#loc5 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":31:19)
#loc6 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:40)
#loc7 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:35)
#loc8 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:65)
#loc9 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:61)
#loc10 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:72)
#loc11 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:78)
#loc12 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:54)
#loc13 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:47)
#loc14 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:113)
#loc15 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:108)
#loc16 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:120)
#loc17 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:93)
#loc18 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:85)
#loc19 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:160)
#loc20 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:168)
#loc21 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:132)
#loc22 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:30)
#loc23 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":33:175)
#loc24 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":34:31)
#loc25 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":34:73)
#loc26 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":35:39)
#loc27 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":35:56)
#loc28 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":35:94)
#loc29 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":35:141)
#loc30 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":35:30)
#loc31 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":35:184)
#loc32 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":36:18)
#loc33 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":37:18)
#loc34 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":38:18)
#loc35 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":39:18)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc39 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":41:27)
#loc40 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":42:25)
#loc41 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":42:36)
#loc42 = loc("inductor_cache/xx/cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py":42:4)
#loc43 = loc(callsite(#loc36 at #loc37))
#loc45 = loc(callsite(#loc38 at #loc36))
#loc46 = loc(callsite(#loc45 at #loc37))
