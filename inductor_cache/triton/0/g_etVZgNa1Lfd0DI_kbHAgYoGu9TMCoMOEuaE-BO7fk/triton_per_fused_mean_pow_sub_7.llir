; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = and i32 %7, 63, !dbg !11
  %.frozen = freeze i32 %6, !dbg !12
  %11 = sdiv i32 %.frozen, 64, !dbg !12
  %12 = mul i32 %11, 64, !dbg !13
  %.decomposed = sub i32 %.frozen, %12, !dbg !13
  %13 = shl nuw nsw i32 %10, 6, !dbg !14
  %14 = shl i32 %11, 7, !dbg !15
  %15 = or disjoint i32 %14, %10, !dbg !16
  %16 = or disjoint i32 %15, 64, !dbg !16
  %17 = sdiv i32 %15, 64, !dbg !17
  %18 = sdiv i32 %16, 64, !dbg !17
  %19 = srem i32 %17, 64, !dbg !18
  %20 = srem i32 %18, 64, !dbg !18
  %21 = shl nsw i32 %19, 12, !dbg !19
  %22 = shl nsw i32 %20, 12, !dbg !19
  %23 = shl nsw i32 %.decomposed, 13, !dbg !20
  %24 = add i32 %15, %23, !dbg !21
  %25 = add i32 %16, %23, !dbg !21
  %26 = sdiv i32 %24, 262144, !dbg !22
  %27 = sdiv i32 %25, 262144, !dbg !22
  %28 = shl nsw i32 %26, 18, !dbg !23
  %29 = shl nsw i32 %27, 18, !dbg !23
  %30 = sdiv i32 %24, 4096, !dbg !24
  %31 = sdiv i32 %25, 4096, !dbg !24
  %32 = srem i32 %30, 64, !dbg !25
  %33 = srem i32 %31, 64, !dbg !25
  %34 = add i32 %32, %28, !dbg !26
  %35 = add i32 %34, %13, !dbg !27
  %36 = add i32 %35, %21, !dbg !28
  %37 = add i32 %33, %29, !dbg !26
  %38 = add i32 %37, %13, !dbg !27
  %39 = add i32 %38, %22, !dbg !28
  %40 = sext i32 %36 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = sext i32 %39 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !30
  %46 = sext i32 %32 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !31
  %48 = sext i32 %33 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %52 = or disjoint i32 %13, 524288, !dbg !33
  %53 = add i32 %34, %52, !dbg !34
  %54 = add i32 %53, %21, !dbg !35
  %55 = add i32 %37, %52, !dbg !34
  %56 = add i32 %55, %22, !dbg !35
  %57 = sext i32 %54 to i64, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !36
  %59 = sext i32 %56 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !37
  %63 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !30
  %64 = insertelement <2 x i32> %63, i32 %45, i64 1, !dbg !30
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !30
  %66 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !32
  %67 = insertelement <2 x i32> %66, i32 %51, i64 1, !dbg !32
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !32
  %69 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !37
  %70 = insertelement <2 x i32> %69, i32 %62, i64 1, !dbg !37
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !37
  %72 = fadd <2 x float> %65, %68, !dbg !38
  %73 = fadd <2 x float> %68, %71, !dbg !39
  %74 = fsub <2 x float> %72, %73, !dbg !40
  %75 = fmul <2 x float> %74, %74, !dbg !41
  %shift = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %76 = fadd <2 x float> %75, %shift, !dbg !42
  %77 = extractelement <2 x float> %76, i64 0, !dbg !42
  %78 = bitcast float %77 to i32, !dbg !47
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !47
  %80 = bitcast i32 %79 to float, !dbg !47
  %81 = fadd float %77, %80, !dbg !42
  %82 = bitcast float %81 to i32, !dbg !47
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !47
  %84 = bitcast i32 %83 to float, !dbg !47
  %85 = fadd float %81, %84, !dbg !42
  %86 = bitcast float %85 to i32, !dbg !47
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !47
  %88 = bitcast i32 %87 to float, !dbg !47
  %89 = fadd float %85, %88, !dbg !42
  %90 = bitcast float %89 to i32, !dbg !47
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !47
  %92 = bitcast i32 %91 to float, !dbg !47
  %93 = fadd float %89, %92, !dbg !42
  %94 = bitcast float %93 to i32, !dbg !47
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !47
  %96 = bitcast i32 %95 to float, !dbg !47
  %97 = fadd float %93, %96, !dbg !42
  %98 = icmp eq i32 %8, 0, !dbg !47
  %99 = and i32 %9, 1, !dbg !47
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !47
  %101 = bitcast float %97 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 %98) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %102 = icmp slt i32 %7, 2, !dbg !47
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !47
  %104 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %103, i1 %102) #3, !dbg !47
  %105 = bitcast i32 %104 to float, !dbg !47
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !47
  %107 = bitcast i32 %106 to float, !dbg !47
  %108 = fadd float %105, %107, !dbg !42
  %109 = and i32 %7, 1, !dbg !47
  %110 = icmp eq i32 %109, 0, !dbg !47
  %111 = and i1 %102, %110, !dbg !47
  %112 = bitcast float %108 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %112, i1 %111) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %113 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %114 = sext i32 %6 to i64, !dbg !48
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !48
  %116 = icmp eq i32 %10, 0, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %115, i1 %116) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py", directory: "inductor_cache/xx")
!4 = !{ptr @triton_per_fused_mean_pow_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_7, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_7", linkageName: "triton_per_fused_mean_pow_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 65, scope: !7)
!16 = !DILocation(line: 33, column: 61, scope: !7)
!17 = !DILocation(line: 33, column: 72, scope: !7)
!18 = !DILocation(line: 33, column: 78, scope: !7)
!19 = !DILocation(line: 33, column: 54, scope: !7)
!20 = !DILocation(line: 33, column: 113, scope: !7)
!21 = !DILocation(line: 33, column: 108, scope: !7)
!22 = !DILocation(line: 33, column: 120, scope: !7)
!23 = !DILocation(line: 33, column: 93, scope: !7)
!24 = !DILocation(line: 33, column: 160, scope: !7)
!25 = !DILocation(line: 33, column: 168, scope: !7)
!26 = !DILocation(line: 33, column: 47, scope: !7)
!27 = !DILocation(line: 33, column: 85, scope: !7)
!28 = !DILocation(line: 33, column: 132, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 175, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 73, scope: !7)
!33 = !DILocation(line: 35, column: 39, scope: !7)
!34 = !DILocation(line: 35, column: 94, scope: !7)
!35 = !DILocation(line: 35, column: 141, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 184, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!46 = !DILocation(line: 41, column: 24, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 42, column: 25, scope: !7)
!49 = !DILocation(line: 42, column: 36, scope: !7)
!50 = !DILocation(line: 42, column: 4, scope: !7)
