; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) nocapture readnone %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 4, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 14, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = icmp slt i32 %21, 16, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %25 = lshr i32 %18, 3, !dbg !17
  %26 = and i32 %25, 3, !dbg !17
  %27 = or disjoint i32 %24, %26, !dbg !18
  %28 = icmp slt i32 %27, 4, !dbg !19
  %.frozen = freeze i32 %27, !dbg !20
  %29 = sdiv i32 %.frozen, 2, !dbg !20
  %30 = mul i32 %29, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen8 = freeze i32 %21, !dbg !22
  %31 = sdiv i32 %.frozen8, 4, !dbg !22
  %32 = mul i32 %31, 4, !dbg !23
  %.decomposed9 = sub i32 %.frozen8, %32, !dbg !23
  %33 = sext i32 %21 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !25
  %36 = sext i32 %.decomposed to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %28) #4, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %28) #4, !dbg !27
  %40 = shl i32 %27, 2, !dbg !28
  %41 = add i32 %40, %.decomposed9, !dbg !29
  %42 = shl i32 %31, 4, !dbg !30
  %43 = add i32 %41, %42, !dbg !31
  %44 = sext i32 %43 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !32
  %46 = and i1 %22, %28, !dbg !33
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %46) #4, !dbg !34
  %48 = sext i32 %.decomposed9 to i64, !dbg !35
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %48, !dbg !35
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %22) #4, !dbg !36
  %51 = getelementptr float, ptr addrspace(1) %8, i64 %48, !dbg !37
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %22) #4, !dbg !38
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !38
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !38
  %55 = bitcast i32 %53 to float, !dbg !38
  %56 = bitcast i32 %54 to float, !dbg !38
  %57 = getelementptr float, ptr addrspace(1) %9, i64 %48, !dbg !39
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %22) #4, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %10, i64 %48, !dbg !41
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %22) #4, !dbg !42
  %61 = sext i32 %29 to i64, !dbg !43
  %62 = getelementptr float, ptr addrspace(1) %12, i64 %61, !dbg !43
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #4, !dbg !44
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #4, !dbg !44
  %65 = fadd float %55, 0x3EE4F8B580000000, !dbg !45
  %66 = fadd float %56, 0x3EE4F8B580000000, !dbg !45
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %67, 0, !dbg !46
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i = icmp eq i32 %68, 0, !dbg !46
  br i1 %.not.i, label %74, label %69, !dbg !46

69:                                               ; preds = %15
  br i1 %.not1.i, label %72, label %70, !dbg !46

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

74:                                               ; preds = %15
  br i1 %.not1.i, label %77, label %75, !dbg !46

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %70, %72, %75, %77
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !46
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i3 = icmp eq i32 %79, 0, !dbg !46
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i6 = icmp eq i32 %80, 0, !dbg !46
  br i1 %.not.i3, label %86, label %81, !dbg !46

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %84, label %82, !dbg !46

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !46
  br label %__nv_sqrtf.exit7, !dbg !46

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !46
  br label %__nv_sqrtf.exit7, !dbg !46

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %89, label %87, !dbg !46

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !46
  br label %__nv_sqrtf.exit7, !dbg !46

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !46
  br label %__nv_sqrtf.exit7, !dbg !46

__nv_sqrtf.exit7:                                 ; preds = %82, %84, %87, %89
  %.0.i5 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !46
  %91 = extractvalue { i32, i32 } %47, 1, !dbg !34
  %92 = bitcast i32 %91 to float, !dbg !34
  %93 = extractvalue { i32, i32 } %50, 1, !dbg !36
  %94 = bitcast i32 %93 to float, !dbg !36
  %95 = fsub float %92, %94, !dbg !47
  %96 = extractvalue { i32, i32 } %47, 0, !dbg !34
  %97 = bitcast i32 %96 to float, !dbg !34
  %98 = extractvalue { i32, i32 } %50, 0, !dbg !36
  %99 = bitcast i32 %98 to float, !dbg !36
  %100 = fsub float %97, %99, !dbg !47
  %101 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %102 = bitcast i32 %101 to float, !dbg !25
  %103 = fsub float %102, %102, !dbg !48
  %104 = bitcast i32 %39 to float, !dbg !27
  %105 = fmul float %103, %104, !dbg !49
  %106 = fadd float %105, %102, !dbg !50
  %107 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = fsub float %108, %108, !dbg !48
  %110 = fmul float %109, %104, !dbg !49
  %111 = fadd float %110, %108, !dbg !50
  %112 = bitcast i32 %64 to float, !dbg !44
  %113 = extractvalue { i32, i32 } %60, 1, !dbg !42
  %114 = bitcast i32 %113 to float, !dbg !42
  %115 = extractvalue { i32, i32 } %60, 0, !dbg !42
  %116 = bitcast i32 %115 to float, !dbg !42
  %117 = extractvalue { i32, i32 } %58, 1, !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = extractvalue { i32, i32 } %58, 0, !dbg !40
  %120 = bitcast i32 %119 to float, !dbg !40
  %121 = and i32 %19, 2, !dbg !12
  %122 = or disjoint i32 %24, %121, !dbg !18
  %123 = icmp slt i32 %122, 4, !dbg !19
  %124 = lshr i32 %18, 1, !dbg !12
  %125 = and i32 %124, 15, !dbg !12
  %126 = or disjoint i32 %17, %125, !dbg !13
  %127 = icmp slt i32 %126, 16, !dbg !14
  %128 = and i1 %127, %123, !dbg !33
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !51
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !51
  %131 = fmul float %100, %129, !dbg !52
  %132 = fmul float %95, %130, !dbg !52
  %133 = fmul float %131, %120, !dbg !53
  %134 = fmul float %132, %118, !dbg !53
  %135 = fadd float %133, %116, !dbg !54
  %136 = fadd float %134, %114, !dbg !54
  %137 = fcmp olt float %135, 0.000000e+00, !dbg !55
  %138 = fcmp olt float %136, 0.000000e+00, !dbg !55
  %139 = select i1 %137, float 0.000000e+00, float %135, !dbg !59
  %140 = select i1 %138, float 0.000000e+00, float %136, !dbg !59
  %141 = fsub float %111, %111, !dbg !60
  %142 = fsub float %106, %106, !dbg !60
  %143 = fmul float %141, %112, !dbg !61
  %144 = fmul float %142, %112, !dbg !61
  %145 = fadd float %111, %143, !dbg !62
  %146 = fadd float %106, %144, !dbg !62
  %147 = fadd float %145, %139, !dbg !63
  %148 = fadd float %146, %140, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %149 = shl i32 %126, 2, !dbg !65
  %150 = add i32 %122, %149, !dbg !66
  %151 = sext i32 %150 to i64, !dbg !67
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !67
  %153 = shl i32 %18, 3, !dbg !68
  %154 = and i32 %153, 56, !dbg !68
  %155 = or disjoint i32 %154, %26, !dbg !68
  %156 = and i32 %19, 62, !dbg !68
  %157 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %154, !dbg !68
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %155, !dbg !68
  %159 = bitcast float %147 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #4, !dbg !68
  %160 = or disjoint i32 %155, 4, !dbg !68
  %161 = lshr i32 %160, 2, !dbg !68
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !68
  %163 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %160, !dbg !68
  %164 = bitcast float %148 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #4, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %165 = lshr i32 %156, 2, !dbg !68
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %165, !dbg !68
  %167 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %156, !dbg !68
  %168 = load i32, ptr addrspace(3) %167, align 4, !dbg !68
  %169 = or disjoint i32 %156, 1, !dbg !68
  %170 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %169, !dbg !68
  %171 = load i32, ptr addrspace(3) %170, align 4, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %168, i32 %171, ptr addrspace(1) %152, i1 %128) #4, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx3bsplwxnra7k2uxjnrxn72uuxz347jv3tpy44rlpra3xdltfwl.py", directory: "inductor_cache/x3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 31, scope: !7)
!27 = !DILocation(line: 38, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 38, scope: !7)
!29 = !DILocation(line: 39, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 46, scope: !7)
!31 = !DILocation(line: 39, column: 43, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 59, scope: !7)
!34 = !DILocation(line: 39, column: 51, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 36, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 45, column: 37, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 27, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 19, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 19, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 71, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 75, column: 20, scope: !7)
!61 = !DILocation(line: 76, column: 20, scope: !7)
!62 = !DILocation(line: 77, column: 20, scope: !7)
!63 = !DILocation(line: 78, column: 20, scope: !7)
!64 = !DILocation(line: 79, column: 4, scope: !7)
!65 = !DILocation(line: 80, column: 35, scope: !7)
!66 = !DILocation(line: 80, column: 33, scope: !7)
!67 = !DILocation(line: 80, column: 28, scope: !7)
!68 = !DILocation(line: 80, column: 47, scope: !7)
!69 = !DILocation(line: 80, column: 4, scope: !7)
