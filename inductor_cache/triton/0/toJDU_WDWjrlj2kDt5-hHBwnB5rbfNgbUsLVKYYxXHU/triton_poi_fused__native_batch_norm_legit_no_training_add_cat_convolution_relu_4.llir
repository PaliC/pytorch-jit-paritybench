; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 262144, !dbg !14
  %.lhs.trunc = trunc nsw i32 %17 to i16, !dbg !15
  %18 = srem i16 %.lhs.trunc, 32, !dbg !15
  %.sext = sext i16 %18 to i32, !dbg !15
  %19 = mul i32 %17, 262144, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %16, 8388608, !dbg !17
  %21 = sext i32 %16 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = sext i16 %18 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !29
  %42 = add nsw i32 %.sext, -8, !dbg !30
  %43 = icmp ult i32 %42, 16, !dbg !30
  %44 = shl nsw i32 %.sext, 18, !dbg !31
  %45 = shl nsw i32 %20, 22, !dbg !32
  %46 = add nsw i32 %.decomposed, -2097152, !dbg !31
  %47 = add nsw i32 %46, %45, !dbg !33
  %48 = add nsw i32 %47, %44, !dbg !34
  %49 = sext i32 %48 to i64, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !35
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !36
  %52 = fadd float %33, 0x3EE4F8B580000000, !dbg !37
  %53 = fadd float %35, 0x3EE4F8B580000000, !dbg !37
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %54, 0, !dbg !38
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %55, 0, !dbg !38
  br i1 %.not.i, label %61, label %56, !dbg !38

56:                                               ; preds = %10
  br i1 %.not1.i, label %59, label %57, !dbg !38

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

61:                                               ; preds = %10
  br i1 %.not1.i, label %64, label %62, !dbg !38

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !38
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %66, 0, !dbg !38
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !38
  br i1 %.not.i1, label %73, label %68, !dbg !38

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !38

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !38

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !38
  %78 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %79 = bitcast i32 %78 to float, !dbg !19
  %80 = bitcast i32 %27 to float, !dbg !21
  %81 = fadd float %79, %80, !dbg !39
  %82 = icmp slt i16 %18, 8, !dbg !40
  %83 = extractvalue { i32, i32 } %51, 1, !dbg !36
  %84 = bitcast i32 %83 to float, !dbg !36
  %85 = select i1 %43, float %84, float 0.000000e+00, !dbg !41
  %86 = select i1 %82, float 0.000000e+00, float %85, !dbg !42
  %87 = fadd float %81, %86, !dbg !43
  %88 = bitcast i32 %30 to float, !dbg !23
  %89 = fsub float %87, %88, !dbg !44
  %90 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %91 = bitcast i32 %90 to float, !dbg !19
  %92 = bitcast i32 %26 to float, !dbg !21
  %93 = fadd float %91, %92, !dbg !39
  %94 = extractvalue { i32, i32 } %51, 0, !dbg !36
  %95 = bitcast i32 %94 to float, !dbg !36
  %96 = select i1 %43, float %95, float 0.000000e+00, !dbg !41
  %97 = select i1 %82, float 0.000000e+00, float %96, !dbg !42
  %98 = fadd float %93, %97, !dbg !43
  %99 = bitcast i32 %29 to float, !dbg !23
  %100 = fsub float %98, %99, !dbg !44
  %101 = bitcast i32 %41 to float, !dbg !29
  %102 = bitcast i32 %40 to float, !dbg !29
  %103 = bitcast i32 %38 to float, !dbg !27
  %104 = bitcast i32 %37 to float, !dbg !27
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %107 = fmul float %100, %105, !dbg !46
  %108 = fmul float %89, %106, !dbg !46
  %109 = fmul float %107, %104, !dbg !47
  %110 = fmul float %108, %103, !dbg !47
  %111 = fadd float %109, %102, !dbg !48
  %112 = fadd float %110, %101, !dbg !48
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !49
  %114 = fcmp olt float %112, 0.000000e+00, !dbg !49
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !53
  %116 = select i1 %114, float 0.000000e+00, float %112, !dbg !53
  %117 = bitcast float %93 to i32, !dbg !54
  %118 = bitcast float %81 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %118, ptr addrspace(1) %22, i1 true) #3, !dbg !54
  %119 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !55
  %120 = bitcast float %97 to i32, !dbg !56
  %121 = bitcast float %86 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %120, i32 %121, ptr addrspace(1) %119, i1 true) #3, !dbg !56
  %122 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !57
  %123 = bitcast float %115 to i32, !dbg !58
  %124 = bitcast float %116 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %122, i1 true) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce4tkmmks4az3eyc4wng36asltlp5tynhyor3awq4uxuhf256jeo.py", directory: "inductor_cache/e4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 31, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 20, scope: !7)
!31 = !DILocation(line: 47, column: 44, scope: !7)
!32 = !DILocation(line: 47, column: 65, scope: !7)
!33 = !DILocation(line: 47, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 57, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 70, scope: !7)
!37 = !DILocation(line: 59, column: 20, scope: !7)
!38 = !DILocation(line: 60, column: 27, scope: !7)
!39 = !DILocation(line: 34, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 54, column: 35, scope: !7)
!42 = !DILocation(line: 55, column: 34, scope: !7)
!43 = !DILocation(line: 56, column: 19, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 20, scope: !7)
!48 = !DILocation(line: 67, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 69, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 70, column: 39, scope: !7)
!55 = !DILocation(line: 71, column: 25, scope: !7)
!56 = !DILocation(line: 71, column: 37, scope: !7)
!57 = !DILocation(line: 72, column: 25, scope: !7)
!58 = !DILocation(line: 72, column: 37, scope: !7)
!59 = !DILocation(line: 72, column: 4, scope: !7)
