; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = icmp slt i32 %18, 644, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen, 161, !dbg !15
  %22 = mul i32 %21, 161, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %.frozen1 = freeze i32 %19, !dbg !15
  %23 = sdiv i32 %.frozen1, 161, !dbg !15
  %24 = mul i32 %23, 161, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !16
  %25 = icmp slt i32 %.decomposed, 4, !dbg !17
  %26 = icmp slt i32 %.decomposed2, 4, !dbg !17
  %27 = mul nsw i32 %21, 161, !dbg !18
  %28 = mul nsw i32 %23, 161, !dbg !18
  %29 = add i32 %27, %.decomposed, !dbg !19
  %30 = add i32 %28, %.decomposed2, !dbg !19
  %31 = sext i32 %29 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = sext i32 %30 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = and i1 %20, %25, !dbg !21
  %36 = and i1 %26, %20, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %35, i32 0, i1 %35) #1, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %36, i32 0, i1 %36) #1, !dbg !22
  %39 = add nsw i32 %.decomposed, -4, !dbg !23
  %40 = icmp ult i32 %39, 144, !dbg !23
  %41 = add nsw i32 %.decomposed2, -4, !dbg !23
  %42 = icmp ult i32 %41, 144, !dbg !23
  %43 = mul nsw i32 %21, 144, !dbg !24
  %44 = mul nsw i32 %23, 144, !dbg !24
  %45 = add nsw i32 %43, %39, !dbg !25
  %46 = add nsw i32 %44, %41, !dbg !25
  %47 = sext i32 %45 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !26
  %51 = and i1 %20, %40, !dbg !27
  %52 = and i1 %42, %20, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %51, i32 0, i1 %51) #1, !dbg !28
  %54 = bitcast i32 %53 to float, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %52, i32 0, i1 %52) #1, !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = sext i32 %39 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !29
  %59 = sext i32 %41 to i64, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %51, i32 0, i1 %51) #1, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %52, i32 0, i1 %52) #1, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = fadd float %54, %62, !dbg !31
  %66 = fadd float %56, %64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %51, i32 0, i1 %51) #1, !dbg !33
  %70 = bitcast i32 %69 to float, !dbg !33
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %52, i32 0, i1 %52) #1, !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = fadd float %65, %70, !dbg !34
  %74 = fadd float %66, %72, !dbg !34
  %75 = add nsw i32 %.decomposed, -148, !dbg !35
  %76 = icmp ult i32 %75, 10, !dbg !35
  %77 = add nsw i32 %.decomposed2, -148, !dbg !35
  %78 = icmp ult i32 %77, 10, !dbg !35
  %79 = mul nsw i32 %21, 10, !dbg !36
  %80 = mul nsw i32 %23, 10, !dbg !36
  %81 = add nsw i32 %79, %75, !dbg !37
  %82 = add nsw i32 %80, %77, !dbg !37
  %83 = sext i32 %81 to i64, !dbg !38
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !38
  %85 = sext i32 %82 to i64, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !38
  %87 = and i1 %20, %76, !dbg !39
  %88 = and i1 %78, %20, !dbg !39
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %87, i32 0, i1 %87) #1, !dbg !40
  %90 = bitcast i32 %89 to float, !dbg !40
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %88, i32 0, i1 %88) #1, !dbg !40
  %92 = bitcast i32 %91 to float, !dbg !40
  %93 = sext i32 %75 to i64, !dbg !41
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !41
  %95 = sext i32 %77 to i64, !dbg !41
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !41
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %87, i32 0, i1 %87) #1, !dbg !42
  %98 = bitcast i32 %97 to float, !dbg !42
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %88, i32 0, i1 %88) #1, !dbg !42
  %100 = bitcast i32 %99 to float, !dbg !42
  %101 = fadd float %90, %98, !dbg !43
  %102 = fadd float %92, %100, !dbg !43
  %103 = getelementptr float, ptr addrspace(1) %6, i64 %93, !dbg !44
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !44
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %87, i32 0, i1 %87) #1, !dbg !45
  %106 = bitcast i32 %105 to float, !dbg !45
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %88, i32 0, i1 %88) #1, !dbg !45
  %108 = bitcast i32 %107 to float, !dbg !45
  %109 = fadd float %101, %106, !dbg !46
  %110 = fadd float %102, %108, !dbg !46
  %111 = icmp sgt i32 %.decomposed, 157, !dbg !47
  %112 = icmp sgt i32 %.decomposed2, 157, !dbg !47
  %113 = mul nsw i32 %21, 3, !dbg !48
  %114 = mul nsw i32 %23, 3, !dbg !48
  %115 = add nsw i32 %.decomposed, -158, !dbg !49
  %116 = add nsw i32 %.decomposed2, -158, !dbg !49
  %117 = add nsw i32 %113, %115, !dbg !50
  %118 = add nsw i32 %114, %116, !dbg !50
  %119 = sext i32 %117 to i64, !dbg !51
  %120 = getelementptr float, ptr addrspace(1) %7, i64 %119, !dbg !51
  %121 = sext i32 %118 to i64, !dbg !51
  %122 = getelementptr float, ptr addrspace(1) %7, i64 %121, !dbg !51
  %123 = and i1 %20, %111, !dbg !52
  %124 = and i1 %112, %20, !dbg !52
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %123, i32 0, i1 %123) #1, !dbg !53
  %126 = bitcast i32 %125 to float, !dbg !53
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %124, i32 0, i1 %124) #1, !dbg !53
  %128 = bitcast i32 %127 to float, !dbg !53
  %129 = sext i32 %115 to i64, !dbg !54
  %130 = getelementptr float, ptr addrspace(1) %8, i64 %129, !dbg !54
  %131 = sext i32 %116 to i64, !dbg !54
  %132 = getelementptr float, ptr addrspace(1) %8, i64 %131, !dbg !54
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %123, i32 0, i1 %123) #1, !dbg !55
  %134 = bitcast i32 %133 to float, !dbg !55
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %124, i32 0, i1 %124) #1, !dbg !55
  %136 = bitcast i32 %135 to float, !dbg !55
  %137 = fadd float %126, %134, !dbg !56
  %138 = fadd float %128, %136, !dbg !56
  %139 = getelementptr float, ptr addrspace(1) %9, i64 %129, !dbg !57
  %140 = getelementptr float, ptr addrspace(1) %9, i64 %131, !dbg !57
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %123, i32 0, i1 %123) #1, !dbg !58
  %142 = bitcast i32 %141 to float, !dbg !58
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %124, i32 0, i1 %124) #1, !dbg !58
  %144 = bitcast i32 %143 to float, !dbg !58
  %145 = fadd float %137, %142, !dbg !59
  %146 = fadd float %138, %144, !dbg !59
  %147 = select i1 %111, float %145, float 0.000000e+00, !dbg !60
  %148 = select i1 %112, float %146, float 0.000000e+00, !dbg !60
  %149 = select i1 %76, float %109, float %147, !dbg !61
  %150 = select i1 %78, float %110, float %148, !dbg !61
  %151 = select i1 %40, float %73, float %149, !dbg !61
  %152 = select i1 %42, float %74, float %150, !dbg !61
  %153 = sext i32 %18 to i64, !dbg !62
  %154 = getelementptr float, ptr addrspace(1) %10, i64 %153, !dbg !62
  %155 = bitcast float %151 to i32, !dbg !63
  %156 = select i1 %25, i32 %37, i32 %155, !dbg !64
  %157 = bitcast float %152 to i32, !dbg !63
  %158 = select i1 %26, i32 %38, i32 %157, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %158, ptr addrspace(1) %154, i1 %20) #1, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crhdteesukvl5bcghqy5kbwu3tkfiztx4uwssiksrnxccie4zedb.py", directory: "inductor_cache/rh")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 37, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 41, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 61, scope: !7)
!28 = !DILocation(line: 37, column: 54, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 43, scope: !7)
!31 = !DILocation(line: 39, column: 20, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 43, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 34, scope: !7)
!37 = !DILocation(line: 48, column: 40, scope: !7)
!38 = !DILocation(line: 48, column: 31, scope: !7)
!39 = !DILocation(line: 48, column: 63, scope: !7)
!40 = !DILocation(line: 48, column: 55, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 45, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 45, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 33, scope: !7)
!49 = !DILocation(line: 58, column: 48, scope: !7)
!50 = !DILocation(line: 58, column: 39, scope: !7)
!51 = !DILocation(line: 58, column: 31, scope: !7)
!52 = !DILocation(line: 58, column: 62, scope: !7)
!53 = !DILocation(line: 58, column: 54, scope: !7)
!54 = !DILocation(line: 59, column: 31, scope: !7)
!55 = !DILocation(line: 59, column: 45, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 45, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 35, scope: !7)
!61 = !DILocation(line: 0, scope: !7)
!62 = !DILocation(line: 68, column: 25, scope: !7)
!63 = !DILocation(line: 68, column: 37, scope: !7)
!64 = !DILocation(line: 67, column: 33, scope: !7)
!65 = !DILocation(line: 68, column: 4, scope: !7)
