#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_convolution_mul_28(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":19:0)) attributes {noinline = false} {
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<8192> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<1x2xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<128> : tensor<128x1xi32, #blocked2> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x2xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x2xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x2xi32, #blocked1> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x2xi32, #blocked> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x2xi32, #blocked1> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x2xi32, #blocked> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_6 : tensor<1x2xi32, #blocked1> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_7 : tensor<1x2xi32, #blocked> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.muli %12, %c128_i32 : i32 loc(#loc8)
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc9)
    %17 = tt.expand_dims %14 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc9)
    %18 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc9)
    %19 = tt.expand_dims %16 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc9)
    %20 = tt.splat %13 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc10)
    %21 = tt.splat %13 : i32 -> tensor<128x1xi32, #blocked> loc(#loc10)
    %22 = tt.splat %13 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc10)
    %23 = arith.addi %20, %17 : tensor<128x1xi32, #blocked1> loc(#loc10)
    %24 = arith.addi %21, %18 : tensor<128x1xi32, #blocked> loc(#loc10)
    %25 = arith.addi %22, %19 : tensor<128x1xi32, #blocked2> loc(#loc10)
    %26 = arith.cmpi slt, %23, %cst_3 : tensor<128x1xi32, #blocked1> loc(#loc11)
    %27 = arith.cmpi slt, %24, %cst_4 : tensor<128x1xi32, #blocked> loc(#loc11)
    %28 = arith.cmpi slt, %25, %cst_5 : tensor<128x1xi32, #blocked2> loc(#loc11)
    %29 = arith.remsi %9, %cst_2 : tensor<1x2xi32, #blocked> loc(#loc12)
    %30 = arith.divsi %9, %cst_2 : tensor<1x2xi32, #blocked> loc(#loc13)
    %31 = arith.muli %8, %cst_1 : tensor<1x2xi32, #blocked1> loc(#loc14)
    %32 = tt.broadcast %23 : tensor<128x1xi32, #blocked1> -> tensor<128x2xi32, #blocked1> loc(#loc15)
    %33 = tt.broadcast %31 : tensor<1x2xi32, #blocked1> -> tensor<128x2xi32, #blocked1> loc(#loc15)
    %34 = arith.addi %32, %33 : tensor<128x2xi32, #blocked1> loc(#loc15)
    %35 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x2x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %36 = tt.addptr %35, %34 : tensor<128x2x!tt.ptr<f32>, #blocked1>, tensor<128x2xi32, #blocked1> loc(#loc16)
    %37 = tt.broadcast %26 : tensor<128x1xi1, #blocked1> -> tensor<128x2xi1, #blocked1> loc(#loc17)
    %38 = tt.broadcast %27 : tensor<128x1xi1, #blocked> -> tensor<128x2xi1, #blocked> loc(#loc17)
    %39 = tt.broadcast %10 : tensor<1x2xi1, #blocked1> -> tensor<128x2xi1, #blocked1> loc(#loc17)
    %40 = tt.broadcast %11 : tensor<1x2xi1, #blocked> -> tensor<128x2xi1, #blocked> loc(#loc17)
    %41 = arith.andi %37, %39 : tensor<128x2xi1, #blocked1> loc(#loc17)
    %42 = arith.andi %38, %40 : tensor<128x2xi1, #blocked> loc(#loc17)
    %43 = tt.load %36, %41 evictionPolicy = evict_last : tensor<128x2x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %44 = triton_gpu.convert_layout %43 : tensor<128x2xf32, #blocked1> -> tensor<128x2xf32, #blocked2> loc(#loc18)
    %45 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc19)
    %46 = tt.addptr %45, %25 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc19)
    %47 = tt.load %46, %28 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc20)
    %48 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc21)
    %49 = tt.addptr %48, %25 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc21)
    %50 = tt.load %49, %28 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc22)
    %51 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x2x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %52 = tt.addptr %51, %34 : tensor<128x2x!tt.ptr<f32>, #blocked1>, tensor<128x2xi32, #blocked1> loc(#loc23)
    %53 = tt.load %52, %41 evictionPolicy = evict_last : tensor<128x2x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %54 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc25)
    %55 = tt.addptr %54, %25 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc25)
    %56 = tt.load %55, %28 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc26)
    %57 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc27)
    %58 = tt.addptr %57, %25 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc27)
    %59 = tt.load %58, %28 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc28)
    %60 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc29)
    %61 = tt.addptr %60, %25 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc29)
    %62 = tt.load %61, %28 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc30)
    %63 = triton_gpu.convert_layout %47 {fastmath = #arith.fastmath<none>} : tensor<128x1xf32, #blocked2> -> tensor<128x1xf32, #blocked1> loc(#loc31)
    %64 = tt.broadcast %63 : tensor<128x1xf32, #blocked1> -> tensor<128x2xf32, #blocked1> loc(#loc31)
    %65 = tt.broadcast %47 : tensor<128x1xf32, #blocked2> -> tensor<128x2xf32, #blocked2> loc(#loc31)
    %66 = arith.addf %43, %64 : tensor<128x2xf32, #blocked1> loc(#loc31)
    %67 = arith.addf %44, %65 : tensor<128x2xf32, #blocked2> loc(#loc31)
    %68 = triton_gpu.convert_layout %50 : tensor<128x1xf32, #blocked2> -> tensor<128x1xf32, #blocked1> loc(#loc32)
    %69 = tt.broadcast %68 : tensor<128x1xf32, #blocked1> -> tensor<128x2xf32, #blocked1> loc(#loc32)
    %70 = arith.mulf %69, %53 : tensor<128x2xf32, #blocked1> loc(#loc32)
    %71 = triton_gpu.convert_layout %70 {fastmath = #arith.fastmath<none>} : tensor<128x2xf32, #blocked1> -> tensor<128x2xf32, #blocked2> loc(#loc32)
    %72 = tt.broadcast %56 : tensor<128x1xf32, #blocked2> -> tensor<128x2xf32, #blocked2> loc(#loc33)
    %73 = arith.addf %71, %72 : tensor<128x2xf32, #blocked2> loc(#loc33)
    %74 = tt.broadcast %59 : tensor<128x1xf32, #blocked2> -> tensor<128x2xf32, #blocked2> loc(#loc34)
    %75 = arith.mulf %74, %67 : tensor<128x2xf32, #blocked2> loc(#loc34)
    %76 = tt.broadcast %62 : tensor<128x1xf32, #blocked2> -> tensor<128x2xf32, #blocked2> loc(#loc35)
    %77 = arith.addf %75, %76 : tensor<128x2xf32, #blocked2> loc(#loc35)
    %78 = arith.addf %73, %77 : tensor<128x2xf32, #blocked2> loc(#loc36)
    gpu.barrier loc(#loc37)
    tt.store %36, %66, %41 : tensor<128x2x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %79 = arith.muli %24, %cst_0 : tensor<128x1xi32, #blocked> loc(#loc39)
    %80 = tt.broadcast %29 : tensor<1x2xi32, #blocked> -> tensor<128x2xi32, #blocked> loc(#loc40)
    %81 = tt.broadcast %79 : tensor<128x1xi32, #blocked> -> tensor<128x2xi32, #blocked> loc(#loc40)
    %82 = arith.addi %80, %81 : tensor<128x2xi32, #blocked> loc(#loc40)
    %83 = arith.muli %30, %cst : tensor<1x2xi32, #blocked> loc(#loc41)
    %84 = tt.broadcast %83 : tensor<1x2xi32, #blocked> -> tensor<128x2xi32, #blocked> loc(#loc42)
    %85 = arith.addi %82, %84 : tensor<128x2xi32, #blocked> loc(#loc42)
    %86 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<128x2x!tt.ptr<f32>, #blocked> loc(#loc43)
    %87 = tt.addptr %86, %85 : tensor<128x2x!tt.ptr<f32>, #blocked>, tensor<128x2xi32, #blocked> loc(#loc43)
    %88 = triton_gpu.convert_layout %78 : tensor<128x2xf32, #blocked2> -> tensor<128x2xf32, #blocked> loc(#loc44)
    tt.store %87, %88, %42 : tensor<128x2x!tt.ptr<f32>, #blocked> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":22:28)
#loc3 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":22:33)
#loc4 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":23:44)
#loc5 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":23:23)
#loc6 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":24:21)
#loc7 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":25:28)
#loc8 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":25:33)
#loc9 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":26:44)
#loc10 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":26:23)
#loc11 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":27:21)
#loc12 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":30:19)
#loc13 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":31:19)
#loc14 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":32:43)
#loc15 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":32:39)
#loc16 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":32:34)
#loc17 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":32:56)
#loc18 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":32:48)
#loc19 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":33:30)
#loc20 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":33:35)
#loc21 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":34:30)
#loc22 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":34:35)
#loc23 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":35:30)
#loc24 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":35:44)
#loc25 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":36:30)
#loc26 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":36:35)
#loc27 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":37:30)
#loc28 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":37:35)
#loc29 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":38:31)
#loc30 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":38:36)
#loc31 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":39:18)
#loc32 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":40:18)
#loc33 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":41:18)
#loc34 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":42:18)
#loc35 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":43:19)
#loc36 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":44:19)
#loc37 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":45:4)
#loc38 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":46:48)
#loc39 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":47:33)
#loc40 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":47:30)
#loc41 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":47:43)
#loc42 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":47:38)
#loc43 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":47:25)
#loc44 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":47:55)
#loc45 = loc("inductor_cache/s3/cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py":47:4)
