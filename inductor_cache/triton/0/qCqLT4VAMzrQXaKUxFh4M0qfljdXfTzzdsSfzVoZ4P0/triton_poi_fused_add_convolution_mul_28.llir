; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 1, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %.lobit = and i32 %14, 1, !dbg !12
  %15 = or disjoint i32 %12, %.lobit, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = icmp slt i32 %12, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 7, !dbg !16
  %20 = shl i32 %13, 1, !dbg !17
  %21 = and i32 %20, 126, !dbg !17
  %22 = and i32 %13, 127, !dbg !17
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = or disjoint i32 %19, %22, !dbg !18
  %25 = icmp slt i32 %23, 128, !dbg !19
  %26 = icmp slt i32 %24, 128, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %27 = sdiv i32 %.frozen, 64, !dbg !20
  %28 = mul i32 %27, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = shl i32 %15, 7, !dbg !22
  %30 = add i32 %23, %29, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %16, %25, !dbg !25
  %34 = and i1 %17, %26, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #2, !dbg !26
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %38 = bitcast i32 %36 to float, !dbg !26
  %39 = bitcast i32 %37 to float, !dbg !26
  %40 = and i32 %20, 254, !dbg !26
  %41 = lshr i32 %40, 7, !dbg !26
  %42 = or disjoint i32 %41, %40, !dbg !26
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42, !dbg !26
  %44 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #2, !dbg !26
  %45 = or disjoint i32 %40, 1, !dbg !26
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %41, !dbg !26
  %47 = getelementptr inbounds float, ptr addrspace(3) %46, i32 %45, !dbg !26
  %48 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !26
  %50 = load float, ptr addrspace(3) %49, align 4, !dbg !26
  %51 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 516, !dbg !26
  %52 = load float, ptr addrspace(3) %51, align 4, !dbg !26
  %53 = sext i32 %24 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %26) #2, !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #2, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !31
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %33) #2, !dbg !32
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !32
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !32
  %63 = bitcast i32 %61 to float, !dbg !32
  %64 = bitcast i32 %62 to float, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !33
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %26) #2, !dbg !34
  %67 = bitcast i32 %66 to float, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !35
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #2, !dbg !36
  %70 = bitcast i32 %69 to float, !dbg !36
  %71 = getelementptr float, ptr addrspace(1) %6, i64 %53, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %26) #2, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %74 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %74, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !39
  %76 = load float, ptr addrspace(3) %75, align 8, !dbg !39
  %77 = or disjoint i32 %21, 1, !dbg !39
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !39
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !39
  %80 = fadd float %76, %38, !dbg !39
  %81 = fadd float %79, %39, !dbg !39
  %82 = fadd float %50, %56, !dbg !39
  %83 = fadd float %52, %56, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %84 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %84, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %85 = load float, ptr addrspace(3) %75, align 8, !dbg !40
  %86 = load float, ptr addrspace(3) %78, align 4, !dbg !40
  %87 = fmul float %85, %63, !dbg !40
  %88 = fmul float %86, %64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %89 = bitcast float %87 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %89, i1 true) #2, !dbg !40
  %90 = bitcast float %88 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %90, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %91 = load float, ptr addrspace(3) %49, align 4, !dbg !40
  %92 = load float, ptr addrspace(3) %51, align 4, !dbg !40
  %93 = fadd float %91, %67, !dbg !41
  %94 = fadd float %92, %67, !dbg !41
  %95 = fmul float %82, %70, !dbg !42
  %96 = fmul float %83, %70, !dbg !42
  %97 = fadd float %95, %73, !dbg !43
  %98 = fadd float %96, %73, !dbg !43
  %99 = fadd float %97, %93, !dbg !44
  %100 = fadd float %98, %94, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %101 = bitcast float %80 to i32, !dbg !46
  %102 = bitcast float %81 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %32, i1 %33) #2, !dbg !46
  %103 = shl i32 %24, 6, !dbg !47
  %104 = shl i32 %27, 13, !dbg !48
  %105 = add i32 %104, %.decomposed, !dbg !49
  %106 = add i32 %105, %103, !dbg !50
  %107 = sext i32 %106 to i64, !dbg !51
  %108 = getelementptr float, ptr addrspace(1) %7, i64 %107, !dbg !51
  %109 = bitcast float %99 to i32, !dbg !52
  %110 = bitcast float %100 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %108, i1 %34) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py", directory: "inductor_cache/s3")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_28", linkageName: "triton_poi_fused_add_convolution_mul_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 32, column: 48, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 44, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 4, scope: !7)
!46 = !DILocation(line: 46, column: 48, scope: !7)
!47 = !DILocation(line: 47, column: 33, scope: !7)
!48 = !DILocation(line: 47, column: 43, scope: !7)
!49 = !DILocation(line: 47, column: 30, scope: !7)
!50 = !DILocation(line: 47, column: 38, scope: !7)
!51 = !DILocation(line: 47, column: 25, scope: !7)
!52 = !DILocation(line: 47, column: 55, scope: !7)
!53 = !DILocation(line: 47, column: 4, scope: !7)
