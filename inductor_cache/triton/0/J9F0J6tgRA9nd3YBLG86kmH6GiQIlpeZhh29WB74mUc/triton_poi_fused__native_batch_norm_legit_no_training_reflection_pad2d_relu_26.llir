; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %17 = sdiv i32 %.frozen, 6, !dbg !14
  %18 = mul i32 %17, 6, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %14, 6, !dbg !15
  %.frozen25 = freeze i32 %15, !dbg !14
  %20 = sdiv i32 %.frozen25, 6, !dbg !14
  %21 = mul i32 %20, 6, !dbg !15
  %.decomposed26 = sub i32 %.frozen25, %21, !dbg !15
  %22 = srem i32 %16, 6, !dbg !15
  %23 = srem i32 %17, 6, !dbg !16
  %24 = srem i32 %20, 6, !dbg !16
  %25 = sdiv i32 %13, 36, !dbg !17
  %26 = srem i32 %25, 256, !dbg !18
  %27 = add nsw i32 %.decomposed, -1, !dbg !19
  %28 = add nsw i32 %19, -1, !dbg !19
  %29 = add nsw i32 %.decomposed26, -1, !dbg !19
  %30 = add nsw i32 %22, -1, !dbg !19
  %31 = tail call i32 @llvm.abs.i32(i32 %27, i1 true), !dbg !20
  %32 = tail call i32 @llvm.abs.i32(i32 %28, i1 true), !dbg !20
  %33 = tail call i32 @llvm.abs.i32(i32 %29, i1 true), !dbg !20
  %34 = tail call i32 @llvm.abs.i32(i32 %30, i1 true), !dbg !20
  %35 = add nsw i32 %31, -3, !dbg !21
  %36 = add nsw i32 %32, -3, !dbg !21
  %37 = add nsw i32 %33, -3, !dbg !21
  %38 = add nsw i32 %34, -3, !dbg !21
  %39 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !22
  %40 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !22
  %41 = tail call i32 @llvm.abs.i32(i32 %37, i1 true), !dbg !22
  %42 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !22
  %43 = add nsw i32 %23, -1, !dbg !23
  %44 = add nsw i32 %24, -1, !dbg !23
  %45 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !24
  %46 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !24
  %47 = add nsw i32 %45, -3, !dbg !25
  %48 = add nsw i32 %46, -3, !dbg !25
  %49 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !26
  %50 = tail call i32 @llvm.abs.i32(i32 %48, i1 true), !dbg !26
  %51 = mul nsw i32 %49, -4, !dbg !27
  %52 = mul nsw i32 %50, -4, !dbg !27
  %53 = shl nsw i32 %25, 4, !dbg !28
  %reass.sub = or disjoint i32 %53, 15, !dbg !29
  %54 = sub nuw nsw i32 %reass.sub, %39, !dbg !29
  %55 = add i32 %54, %51, !dbg !30
  %56 = sub nuw nsw i32 %reass.sub, %40, !dbg !29
  %57 = add i32 %56, %51, !dbg !30
  %58 = sub nuw nsw i32 %reass.sub, %41, !dbg !29
  %59 = add i32 %58, %52, !dbg !30
  %60 = sub nuw nsw i32 %reass.sub, %42, !dbg !29
  %61 = add i32 %60, %52, !dbg !30
  %62 = sext i32 %55 to i64, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !31
  %64 = sext i32 %57 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !31
  %66 = sext i32 %59 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !31
  %68 = sext i32 %61 to i64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !32
  %74 = sext i32 %26 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !34
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !34
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !35
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !36
  %84 = bitcast i32 %83 to float, !dbg !36
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !36
  %86 = bitcast i32 %85 to float, !dbg !36
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !36
  %88 = bitcast i32 %87 to float, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !37
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !38
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !38
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !38
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !38
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !39
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !40
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !40
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !40
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !40
  %99 = fadd float %82, 0x3EE4F8B580000000, !dbg !41
  %100 = fadd float %84, 0x3EE4F8B580000000, !dbg !41
  %101 = fadd float %86, 0x3EE4F8B580000000, !dbg !41
  %102 = fadd float %88, 0x3EE4F8B580000000, !dbg !41
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %103, 0, !dbg !42
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %104, 0, !dbg !42
  br i1 %.not.i, label %110, label %105, !dbg !42

105:                                              ; preds = %7
  br i1 %.not1.i, label %108, label %106, !dbg !42

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

110:                                              ; preds = %7
  br i1 %.not1.i, label %113, label %111, !dbg !42

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %106, %108, %111, %113
  %.0.i = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !42
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i4 = icmp eq i32 %115, 0, !dbg !42
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i7 = icmp eq i32 %116, 0, !dbg !42
  br i1 %.not.i4, label %122, label %117, !dbg !42

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %120, label %118, !dbg !42

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %125, label %123, !dbg !42

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

__nv_sqrtf.exit8:                                 ; preds = %118, %120, %123, %125
  %.0.i6 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !42
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i9 = icmp eq i32 %127, 0, !dbg !42
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i12 = icmp eq i32 %128, 0, !dbg !42
  br i1 %.not.i9, label %134, label %129, !dbg !42

129:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %132, label %130, !dbg !42

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit13, !dbg !42

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit13, !dbg !42

134:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %137, label %135, !dbg !42

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit13, !dbg !42

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit13, !dbg !42

__nv_sqrtf.exit13:                                ; preds = %130, %132, %135, %137
  %.0.i11 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !42
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i14 = icmp eq i32 %139, 0, !dbg !42
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i17 = icmp eq i32 %140, 0, !dbg !42
  br i1 %.not.i14, label %146, label %141, !dbg !42

141:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %144, label %142, !dbg !42

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit18, !dbg !42

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit18, !dbg !42

146:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %149, label %147, !dbg !42

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit18, !dbg !42

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit18, !dbg !42

__nv_sqrtf.exit18:                                ; preds = %142, %144, %147, %149
  %.0.i16 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !42
  %151 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !32
  %152 = insertelement <4 x i32> %151, i32 %72, i64 1, !dbg !32
  %153 = insertelement <4 x i32> %152, i32 %71, i64 2, !dbg !32
  %154 = insertelement <4 x i32> %153, i32 %70, i64 3, !dbg !32
  %155 = bitcast <4 x i32> %154 to <4 x float>, !dbg !32
  %156 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !34
  %157 = insertelement <4 x i32> %156, i32 %78, i64 1, !dbg !34
  %158 = insertelement <4 x i32> %157, i32 %77, i64 2, !dbg !34
  %159 = insertelement <4 x i32> %158, i32 %76, i64 3, !dbg !34
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !34
  %161 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !40
  %162 = insertelement <4 x i32> %161, i32 %97, i64 1, !dbg !40
  %163 = insertelement <4 x i32> %162, i32 %96, i64 2, !dbg !40
  %164 = insertelement <4 x i32> %163, i32 %95, i64 3, !dbg !40
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !40
  %166 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !38
  %167 = insertelement <4 x i32> %166, i32 %92, i64 1, !dbg !38
  %168 = insertelement <4 x i32> %167, i32 %91, i64 2, !dbg !38
  %169 = insertelement <4 x i32> %168, i32 %90, i64 3, !dbg !38
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !38
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !43
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !43
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !43
  %175 = fsub <4 x float> %155, %160, !dbg !44
  %176 = insertelement <4 x float> poison, float %174, i64 0, !dbg !45
  %177 = insertelement <4 x float> %176, float %173, i64 1, !dbg !45
  %178 = insertelement <4 x float> %177, float %172, i64 2, !dbg !45
  %179 = insertelement <4 x float> %178, float %171, i64 3, !dbg !45
  %180 = fmul <4 x float> %175, %179, !dbg !45
  %181 = fmul <4 x float> %180, %170, !dbg !46
  %182 = fadd <4 x float> %181, %165, !dbg !47
  %183 = fcmp olt <4 x float> %182, zeroinitializer, !dbg !48
  %184 = extractelement <4 x i1> %183, i64 3, !dbg !52
  %185 = extractelement <4 x i1> %183, i64 2, !dbg !52
  %186 = extractelement <4 x i1> %183, i64 1, !dbg !52
  %187 = extractelement <4 x i1> %183, i64 0, !dbg !52
  %188 = sext i32 %13 to i64, !dbg !53
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !53
  %bc = bitcast <4 x float> %182 to <4 x i32>, !dbg !54
  %190 = extractelement <4 x i32> %bc, i64 3, !dbg !54
  %191 = select i1 %184, i32 0, i32 %190, !dbg !52
  %bc22 = bitcast <4 x float> %182 to <4 x i32>, !dbg !54
  %192 = extractelement <4 x i32> %bc22, i64 2, !dbg !54
  %193 = select i1 %185, i32 0, i32 %192, !dbg !52
  %bc23 = bitcast <4 x float> %182 to <4 x i32>, !dbg !54
  %194 = extractelement <4 x i32> %bc23, i64 1, !dbg !54
  %195 = select i1 %186, i32 0, i32 %194, !dbg !52
  %bc24 = bitcast <4 x float> %182 to <4 x i32>, !dbg !54
  %196 = extractelement <4 x i32> %bc24, i64 0, !dbg !54
  %197 = select i1 %187, i32 0, i32 %196, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %193, i32 %195, i32 %197, ptr addrspace(1) %189, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca5v4bbvyz4cbecp5ynolndz7ixen5dpc34wxyen5kyfgujfcp4l.py", directory: "inductor_cache/a5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 79, scope: !7)
!20 = !DILocation(line: 29, column: 72, scope: !7)
!21 = !DILocation(line: 29, column: 60, scope: !7)
!22 = !DILocation(line: 29, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 131, scope: !7)
!24 = !DILocation(line: 29, column: 124, scope: !7)
!25 = !DILocation(line: 29, column: 112, scope: !7)
!26 = !DILocation(line: 29, column: 105, scope: !7)
!27 = !DILocation(line: 29, column: 93, scope: !7)
!28 = !DILocation(line: 29, column: 142, scope: !7)
!29 = !DILocation(line: 29, column: 88, scope: !7)
!30 = !DILocation(line: 29, column: 139, scope: !7)
!31 = !DILocation(line: 29, column: 30, scope: !7)
!32 = !DILocation(line: 29, column: 147, scope: !7)
!33 = !DILocation(line: 30, column: 30, scope: !7)
!34 = !DILocation(line: 30, column: 35, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 36, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 36, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 26, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 34, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 46, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 47, column: 25, scope: !7)
!54 = !DILocation(line: 47, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 4, scope: !7)
