; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = icmp slt i32 %14, 38400, !dbg !14
  %17 = srem i32 %14, 150, !dbg !15
  %18 = srem i32 %15, 150, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !17
  %22 = sext i32 %17 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = sext i32 %18 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %16) #3, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !23
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %37 = bitcast i32 %35 to float, !dbg !23
  %38 = bitcast i32 %36 to float, !dbg !23
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %16) #3, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %42 = bitcast i32 %40 to float, !dbg !23
  %43 = bitcast i32 %41 to float, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #3, !dbg !25
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %16) #3, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !26
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %16) #3, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %16) #3, !dbg !27
  %52 = fadd float %37, 0x3EE4F8B580000000, !dbg !28
  %53 = fadd float %38, 0x3EE4F8B580000000, !dbg !28
  %54 = fadd float %42, 0x3EE4F8B580000000, !dbg !28
  %55 = fadd float %43, 0x3EE4F8B580000000, !dbg !28
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %56, 0, !dbg !29
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %57, 0, !dbg !29
  br i1 %.not.i, label %63, label %58, !dbg !29

58:                                               ; preds = %8
  br i1 %.not1.i, label %61, label %59, !dbg !29

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !29

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !29
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %68, 0, !dbg !29
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %69, 0, !dbg !29
  br i1 %.not.i1, label %75, label %70, !dbg !29

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !29

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !29

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %71, %73, %76, %78
  %.0.i3 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !29
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %80, 0, !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %81, 0, !dbg !29
  br i1 %.not.i6, label %87, label %82, !dbg !29

82:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %85, label %83, !dbg !29

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

87:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %90, label %88, !dbg !29

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %83, %85, %88, %90
  %.0.i8 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !29
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %92, 0, !dbg !29
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %93, 0, !dbg !29
  br i1 %.not.i11, label %99, label %94, !dbg !29

94:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %97, label %95, !dbg !29

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

99:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %102, label %100, !dbg !29

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %95, %97, %100, %102
  %.0.i13 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %105 = bitcast i32 %104 to float, !dbg !17
  %106 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %107 = bitcast i32 %106 to float, !dbg !19
  %108 = fadd float %105, %107, !dbg !30
  %109 = extractvalue { i32, i32 } %31, 1, !dbg !21
  %110 = bitcast i32 %109 to float, !dbg !21
  %111 = fsub float %108, %110, !dbg !31
  %112 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %113 = bitcast i32 %112 to float, !dbg !17
  %114 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %115 = bitcast i32 %114 to float, !dbg !19
  %116 = fadd float %113, %115, !dbg !30
  %117 = extractvalue { i32, i32 } %31, 0, !dbg !21
  %118 = bitcast i32 %117 to float, !dbg !21
  %119 = fsub float %116, %118, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %121 = bitcast i32 %120 to float, !dbg !17
  %122 = extractvalue { i32, i32 } %26, 1, !dbg !19
  %123 = bitcast i32 %122 to float, !dbg !19
  %124 = fadd float %121, %123, !dbg !30
  %125 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %126 = bitcast i32 %125 to float, !dbg !21
  %127 = fsub float %124, %126, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %129 = bitcast i32 %128 to float, !dbg !17
  %130 = extractvalue { i32, i32 } %26, 0, !dbg !19
  %131 = bitcast i32 %130 to float, !dbg !19
  %132 = fadd float %129, %131, !dbg !30
  %133 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %134 = bitcast i32 %133 to float, !dbg !21
  %135 = fsub float %132, %134, !dbg !31
  %136 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %139 = bitcast i32 %138 to float, !dbg !27
  %140 = extractvalue { i32, i32 } %50, 1, !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = extractvalue { i32, i32 } %50, 0, !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = extractvalue { i32, i32 } %47, 1, !dbg !25
  %145 = bitcast i32 %144 to float, !dbg !25
  %146 = extractvalue { i32, i32 } %47, 0, !dbg !25
  %147 = bitcast i32 %146 to float, !dbg !25
  %148 = extractvalue { i32, i32 } %46, 1, !dbg !25
  %149 = bitcast i32 %148 to float, !dbg !25
  %150 = extractvalue { i32, i32 } %46, 0, !dbg !25
  %151 = bitcast i32 %150 to float, !dbg !25
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %156 = fmul float %135, %152, !dbg !33
  %157 = fmul float %127, %153, !dbg !33
  %158 = fmul float %119, %154, !dbg !33
  %159 = fmul float %111, %155, !dbg !33
  %160 = fmul float %156, %151, !dbg !34
  %161 = fmul float %157, %149, !dbg !34
  %162 = fmul float %158, %147, !dbg !34
  %163 = fmul float %159, %145, !dbg !34
  %164 = fadd float %160, %143, !dbg !35
  %165 = fadd float %161, %141, !dbg !35
  %166 = fadd float %162, %139, !dbg !35
  %167 = fadd float %163, %137, !dbg !35
  %168 = bitcast float %132 to i32, !dbg !36
  %169 = bitcast float %124 to i32, !dbg !36
  %170 = bitcast float %116 to i32, !dbg !36
  %171 = bitcast float %108 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %168, i32 %169, i32 %170, i32 %171, ptr addrspace(1) %20, i1 %16) #3, !dbg !36
  %172 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !37
  %173 = bitcast float %164 to i32, !dbg !38
  %174 = bitcast float %165 to i32, !dbg !38
  %175 = bitcast float %166 to i32, !dbg !38
  %176 = bitcast float %167 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %174, i32 %175, i32 %176, ptr addrspace(1) %172, i1 %16) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cobq4w4ymxwfm2r6ubqtxlyvx6uvrm2gvgy3w3b4qd5tncu2uk6z.py", directory: "inductor_cache/ob")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 39, scope: !7)
!37 = !DILocation(line: 45, column: 25, scope: !7)
!38 = !DILocation(line: 45, column: 37, scope: !7)
!39 = !DILocation(line: 45, column: 4, scope: !7)
