; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 128, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 16, !dbg !15
  %12 = srem i32 %11, 2, !dbg !16
  %13 = mul i32 %11, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %13, !dbg !17
  %14 = sdiv i32 %9, 32, !dbg !18
  %15 = icmp slt i32 %12, 1, !dbg !19
  %16 = shl i32 %14, 6, !dbg !20
  %17 = add i32 %16, %.decomposed, !dbg !21
  %18 = sext i32 %17 to i64, !dbg !22
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !22
  %20 = and i1 %10, %15, !dbg !23
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20) #1, !dbg !24
  %22 = shl nsw i32 %14, 2, !dbg !25
  %23 = sext i32 %22 to i64, !dbg !26
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !26
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %20, i32 0, i1 %20) #1, !dbg !27
  %26 = add i32 %17, 16, !dbg !28
  %27 = sext i32 %26 to i64, !dbg !29
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !29
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %20, i32 0, i1 %20) #1, !dbg !30
  %30 = or disjoint i32 %22, 1, !dbg !31
  %31 = sext i32 %30 to i64, !dbg !32
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !32
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %20, i32 0, i1 %20) #1, !dbg !33
  %34 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !24
  %35 = insertelement <2 x i32> %34, i32 %29, i64 1, !dbg !24
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !24
  %37 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !27
  %38 = insertelement <2 x i32> %37, i32 %33, i64 1, !dbg !27
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !27
  %40 = fmul <2 x float> %36, %39, !dbg !34
  %41 = extractelement <2 x float> %40, i64 0, !dbg !35
  %42 = extractelement <2 x float> %40, i64 1, !dbg !35
  %43 = fcmp ogt float %41, %42, !dbg !39
  %44 = fcmp uno float %41, 0.000000e+00, !dbg !40
  %45 = or i1 %44, %43, !dbg !41
  %46 = select i1 %45, float %41, float %42, !dbg !35
  %47 = add i32 %17, 32, !dbg !42
  %48 = sext i32 %47 to i64, !dbg !43
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !43
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %20, i32 0, i1 %20) #1, !dbg !44
  %51 = bitcast i32 %50 to float, !dbg !44
  %52 = or disjoint i32 %22, 2, !dbg !45
  %53 = sext i32 %52 to i64, !dbg !46
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !46
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %20, i32 0, i1 %20) #1, !dbg !47
  %56 = bitcast i32 %55 to float, !dbg !47
  %57 = fmul float %51, %56, !dbg !48
  %58 = fcmp ogt float %46, %57, !dbg !49
  %59 = fcmp uno float %46, 0.000000e+00, !dbg !51
  %60 = or i1 %58, %59, !dbg !52
  %61 = select i1 %60, float %46, float %57, !dbg !53
  %62 = add i32 %17, 48, !dbg !54
  %63 = sext i32 %62 to i64, !dbg !55
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !55
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %20, i32 0, i1 %20) #1, !dbg !56
  %66 = bitcast i32 %65 to float, !dbg !56
  %67 = or disjoint i32 %22, 3, !dbg !57
  %68 = sext i32 %67 to i64, !dbg !58
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !58
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %20, i32 0, i1 %20) #1, !dbg !59
  %71 = bitcast i32 %70 to float, !dbg !59
  %72 = fmul float %66, %71, !dbg !60
  %73 = fcmp ogt float %61, %72, !dbg !61
  %74 = fcmp uno float %61, 0.000000e+00, !dbg !63
  %75 = or i1 %73, %74, !dbg !64
  %76 = select i1 %75, float %61, float %72, !dbg !65
  %77 = icmp sgt i32 %12, 0, !dbg !66
  %78 = and i1 %10, %77, !dbg !67
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %78, i32 0, i1 %78) #1, !dbg !68
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %78, i32 0, i1 %78) #1, !dbg !69
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %78, i32 0, i1 %78) #1, !dbg !70
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %78, i32 0, i1 %78) #1, !dbg !71
  %83 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !68
  %84 = insertelement <2 x i32> %83, i32 %81, i64 1, !dbg !68
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !68
  %86 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !69
  %87 = insertelement <2 x i32> %86, i32 %82, i64 1, !dbg !69
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !69
  %89 = fmul <2 x float> %85, %88, !dbg !72
  %shift = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !73
  %90 = fadd <2 x float> %89, %shift, !dbg !73
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %78, i32 0, i1 %78) #1, !dbg !74
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %78, i32 0, i1 %78) #1, !dbg !75
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %78, i32 0, i1 %78) #1, !dbg !76
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %78, i32 0, i1 %78) #1, !dbg !77
  %95 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !74
  %96 = insertelement <2 x i32> %95, i32 %93, i64 1, !dbg !74
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !74
  %98 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !75
  %99 = insertelement <2 x i32> %98, i32 %94, i64 1, !dbg !75
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !75
  %101 = fmul <2 x float> %97, %100, !dbg !78
  %102 = fadd <2 x float> %90, %101, !dbg !79
  %shift1 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %103 = fadd <2 x float> %102, %shift1, !dbg !80
  %104 = extractelement <2 x float> %103, i64 0, !dbg !80
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 4.000000e+00) #1, !dbg !81
  %106 = select i1 %15, float %76, float %105, !dbg !82
  %107 = sext i32 %9 to i64, !dbg !83
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !83
  %109 = bitcast float %106 to i32, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %108, i1 %10) #1, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csjopyy74o6babxpwozr3ffbi35xexi2irmqsvifwmbgpbp3hzdm.py", directory: "inductor_cache/sj")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 38, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 50, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 32, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 37, scope: !7)
!28 = !DILocation(line: 36, column: 40, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 48, scope: !7)
!31 = !DILocation(line: 37, column: 34, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 39, column: 41, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 40, column: 41, scope: !7)
!43 = !DILocation(line: 40, column: 31, scope: !7)
!44 = !DILocation(line: 40, column: 49, scope: !7)
!45 = !DILocation(line: 41, column: 35, scope: !7)
!46 = !DILocation(line: 41, column: 31, scope: !7)
!47 = !DILocation(line: 41, column: 42, scope: !7)
!48 = !DILocation(line: 42, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !50)
!50 = !DILocation(line: 43, column: 42, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !50)
!54 = !DILocation(line: 44, column: 41, scope: !7)
!55 = !DILocation(line: 44, column: 31, scope: !7)
!56 = !DILocation(line: 44, column: 49, scope: !7)
!57 = !DILocation(line: 45, column: 35, scope: !7)
!58 = !DILocation(line: 45, column: 31, scope: !7)
!59 = !DILocation(line: 45, column: 42, scope: !7)
!60 = !DILocation(line: 46, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !62)
!62 = !DILocation(line: 47, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !62)
!66 = !DILocation(line: 50, column: 20, scope: !7)
!67 = !DILocation(line: 53, column: 52, scope: !7)
!68 = !DILocation(line: 53, column: 44, scope: !7)
!69 = !DILocation(line: 54, column: 38, scope: !7)
!70 = !DILocation(line: 56, column: 49, scope: !7)
!71 = !DILocation(line: 57, column: 42, scope: !7)
!72 = !DILocation(line: 55, column: 20, scope: !7)
!73 = !DILocation(line: 59, column: 20, scope: !7)
!74 = !DILocation(line: 60, column: 49, scope: !7)
!75 = !DILocation(line: 61, column: 42, scope: !7)
!76 = !DILocation(line: 64, column: 49, scope: !7)
!77 = !DILocation(line: 65, column: 42, scope: !7)
!78 = !DILocation(line: 62, column: 20, scope: !7)
!79 = !DILocation(line: 63, column: 20, scope: !7)
!80 = !DILocation(line: 67, column: 20, scope: !7)
!81 = !DILocation(line: 69, column: 20, scope: !7)
!82 = !DILocation(line: 0, scope: !7)
!83 = !DILocation(line: 73, column: 25, scope: !7)
!84 = !DILocation(line: 73, column: 37, scope: !7)
!85 = !DILocation(line: 73, column: 4, scope: !7)
