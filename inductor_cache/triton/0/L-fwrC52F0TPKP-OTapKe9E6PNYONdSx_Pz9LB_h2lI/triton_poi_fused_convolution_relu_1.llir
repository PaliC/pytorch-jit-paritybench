; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 384, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 512, !dbg !14
  %14 = and i32 %10, 127, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %14, 512, !dbg !14
  %19 = or disjoint i32 %14, 640, !dbg !14
  %20 = or disjoint i32 %14, 768, !dbg !14
  %21 = or disjoint i32 %14, 896, !dbg !14
  %22 = or disjoint i32 %9, %14, !dbg !15
  %23 = or disjoint i32 %9, %15, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %27 = or disjoint i32 %9, %19, !dbg !15
  %28 = or disjoint i32 %9, %20, !dbg !15
  %29 = or disjoint i32 %9, %21, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %30 = sdiv i32 %.frozen, 96, !dbg !16
  %31 = mul i32 %30, 96, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = shl i32 %6, 12, !dbg !18
  %33 = or disjoint i32 %32, %12, !dbg !15
  %34 = add i32 %33, %9, !dbg !19
  %35 = or disjoint i32 %32, %13, !dbg !15
  %36 = add i32 %35, %9, !dbg !19
  %37 = sext i32 %34 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = sext i32 %36 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !20
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %7) #2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %7) #2, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %51 = sext i32 %.decomposed to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %7) #2, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %7) #2, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %7) #2, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %7) #2, !dbg !23
  %57 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !21
  %58 = insertelement <8 x i32> %57, i32 %49, i64 1, !dbg !21
  %59 = insertelement <8 x i32> %58, i32 %48, i64 2, !dbg !21
  %60 = insertelement <8 x i32> %59, i32 %47, i64 3, !dbg !21
  %61 = insertelement <8 x i32> %60, i32 %45, i64 4, !dbg !21
  %62 = insertelement <8 x i32> %61, i32 %44, i64 5, !dbg !21
  %63 = insertelement <8 x i32> %62, i32 %43, i64 6, !dbg !21
  %64 = insertelement <8 x i32> %63, i32 %42, i64 7, !dbg !21
  %65 = bitcast <8 x i32> %64 to <8 x float>, !dbg !21
  %66 = insertelement <8 x i32> poison, i32 %56, i64 0, !dbg !24
  %67 = bitcast <8 x i32> %66 to <8 x float>, !dbg !24
  %68 = shufflevector <8 x float> %67, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !24
  %69 = fadd <8 x float> %68, %65, !dbg !24
  %70 = fcmp olt <8 x float> %69, zeroinitializer, !dbg !25
  %71 = extractelement <8 x i1> %70, i64 7, !dbg !29
  %72 = extractelement <8 x float> %69, i64 7, !dbg !29
  %73 = select i1 %71, float 0.000000e+00, float %72, !dbg !29
  %74 = extractelement <8 x i1> %70, i64 6, !dbg !29
  %75 = extractelement <8 x float> %69, i64 6, !dbg !29
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !29
  %77 = extractelement <8 x i1> %70, i64 5, !dbg !29
  %78 = extractelement <8 x float> %69, i64 5, !dbg !29
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !29
  %80 = extractelement <8 x i1> %70, i64 4, !dbg !29
  %81 = extractelement <8 x float> %69, i64 4, !dbg !29
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !29
  %83 = extractelement <8 x i1> %70, i64 3, !dbg !29
  %84 = extractelement <8 x float> %69, i64 3, !dbg !29
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !29
  %86 = extractelement <8 x i1> %70, i64 2, !dbg !29
  %87 = extractelement <8 x float> %69, i64 2, !dbg !29
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !29
  %89 = extractelement <8 x i1> %70, i64 1, !dbg !29
  %90 = extractelement <8 x float> %69, i64 1, !dbg !29
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !29
  %92 = extractelement <8 x i1> %70, i64 0, !dbg !29
  %93 = extractelement <8 x float> %69, i64 0, !dbg !29
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !29
  %95 = mul i32 %22, 96, !dbg !30
  %96 = mul i32 %23, 96, !dbg !30
  %97 = mul i32 %24, 96, !dbg !30
  %98 = mul i32 %25, 96, !dbg !30
  %99 = mul i32 %26, 96, !dbg !30
  %100 = mul i32 %27, 96, !dbg !30
  %101 = mul i32 %28, 96, !dbg !30
  %102 = mul i32 %29, 96, !dbg !30
  %103 = mul i32 %30, 393216, !dbg !31
  %104 = add i32 %103, %.decomposed, !dbg !32
  %105 = add i32 %104, %95, !dbg !33
  %106 = add i32 %104, %96, !dbg !33
  %107 = add i32 %104, %97, !dbg !33
  %108 = add i32 %104, %98, !dbg !33
  %109 = add i32 %104, %99, !dbg !33
  %110 = add i32 %104, %100, !dbg !33
  %111 = add i32 %104, %101, !dbg !33
  %112 = add i32 %104, %102, !dbg !33
  %113 = sext i32 %105 to i64, !dbg !34
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !34
  %115 = sext i32 %106 to i64, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !34
  %117 = sext i32 %107 to i64, !dbg !34
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !34
  %119 = sext i32 %108 to i64, !dbg !34
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !34
  %121 = sext i32 %109 to i64, !dbg !34
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !34
  %123 = sext i32 %110 to i64, !dbg !34
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !34
  %125 = sext i32 %111 to i64, !dbg !34
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !34
  %127 = sext i32 %112 to i64, !dbg !34
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !34
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %130 = bitcast float %73 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !35
  %131 = or disjoint i32 %12, 1, !dbg !35
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !35
  %133 = bitcast float %76 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !35
  %134 = or disjoint i32 %12, 2, !dbg !35
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !35
  %136 = bitcast float %79 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !35
  %137 = or disjoint i32 %12, 3, !dbg !35
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !35
  %139 = bitcast float %82 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !35
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !35
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !35
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !35
  %145 = load i32, ptr addrspace(3) %144, align 4, !dbg !35
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !35
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %148 = bitcast float %85 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %148, i1 true) #2, !dbg !35
  %149 = bitcast float %88 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %149, i1 true) #2, !dbg !35
  %150 = bitcast float %91 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %150, i1 true) #2, !dbg !35
  %151 = bitcast float %94 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %151, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %152 = load i32, ptr addrspace(3) %140, align 4, !dbg !35
  %153 = load i32, ptr addrspace(3) %142, align 4, !dbg !35
  %154 = load i32, ptr addrspace(3) %144, align 4, !dbg !35
  %155 = load i32, ptr addrspace(3) %146, align 4, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %114, i1 %7) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %116, i1 %7) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %118, i1 %7) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %120, i1 %7) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %122, i1 %7) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %124, i1 %7) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %126, i1 %7) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %128, i1 %7) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp2wn3ejmsha5hn4vmb4gldqjeqnfuay2armejfescyld2dom7cv.py", directory: "inductor_cache/p2")
!4 = !{ptr @triton_poi_fused_convolution_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_1", linkageName: "triton_poi_fused_convolution_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 36, column: 40, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 37, column: 33, scope: !7)
!31 = !DILocation(line: 37, column: 45, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 38, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 56, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
