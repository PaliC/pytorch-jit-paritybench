; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_pow_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %16 = icmp slt i32 %14, 1024, !dbg !14
  %17 = lshr i32 %8, 5, !dbg !15
  %18 = lshr i32 %8, 3, !dbg !15
  %19 = and i32 %18, 31, !dbg !15
  %20 = or disjoint i32 %19, 32, !dbg !15
  %21 = shl nuw nsw i32 %19, 8, !dbg !16
  %22 = shl nuw nsw i32 %20, 8, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %23 = sdiv i32 %.frozen, 256, !dbg !17
  %24 = shl i32 %23, 14, !dbg !18
  %25 = mul i32 %23, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = add nsw i32 %.decomposed, %21, !dbg !20
  %27 = add i32 %26, %24, !dbg !21
  %28 = add nsw i32 %.decomposed, %22, !dbg !20
  %29 = add nuw i32 %28, %24, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = zext nneg i32 %19 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !24
  %54 = zext nneg i32 %20 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !25
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = fadd float %39, %60, !dbg !26
  %67 = fadd float %40, %60, !dbg !26
  %68 = fadd float %41, %60, !dbg !26
  %69 = fadd float %42, %60, !dbg !26
  %70 = fadd float %48, %65, !dbg !26
  %71 = fadd float %49, %65, !dbg !26
  %72 = fadd float %50, %65, !dbg !26
  %73 = fadd float %51, %65, !dbg !26
  %74 = fmul float %66, %66, !dbg !27
  %75 = fmul float %67, %67, !dbg !27
  %76 = fmul float %68, %68, !dbg !27
  %77 = fmul float %69, %69, !dbg !27
  %78 = fmul float %70, %70, !dbg !27
  %79 = fmul float %71, %71, !dbg !27
  %80 = fmul float %72, %72, !dbg !27
  %81 = fmul float %73, %73, !dbg !27
  %82 = fadd float %74, %78, !dbg !28
  %83 = select i1 %15, float %82, float 0.000000e+00, !dbg !28
  %84 = fadd float %75, %79, !dbg !28
  %85 = select i1 %15, float %84, float 0.000000e+00, !dbg !28
  %86 = fadd float %76, %80, !dbg !28
  %87 = select i1 %15, float %86, float 0.000000e+00, !dbg !28
  %88 = fadd float %77, %81, !dbg !28
  %89 = select i1 %15, float %88, float 0.000000e+00, !dbg !28
  %90 = bitcast float %83 to i32, !dbg !33
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !33
  %92 = bitcast i32 %91 to float, !dbg !33
  %93 = fadd float %83, %92, !dbg !28
  %94 = bitcast float %93 to i32, !dbg !33
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !33
  %96 = bitcast i32 %95 to float, !dbg !33
  %97 = fadd float %93, %96, !dbg !28
  %98 = bitcast float %85 to i32, !dbg !33
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !33
  %100 = bitcast i32 %99 to float, !dbg !33
  %101 = fadd float %85, %100, !dbg !28
  %102 = bitcast float %101 to i32, !dbg !33
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !33
  %104 = bitcast i32 %103 to float, !dbg !33
  %105 = fadd float %101, %104, !dbg !28
  %106 = bitcast float %87 to i32, !dbg !33
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = fadd float %87, %108, !dbg !28
  %110 = bitcast float %109 to i32, !dbg !33
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = fadd float %109, %112, !dbg !28
  %114 = bitcast float %89 to i32, !dbg !33
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = fadd float %89, %116, !dbg !28
  %118 = bitcast float %117 to i32, !dbg !33
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = fadd float %117, %120, !dbg !28
  %122 = icmp eq i32 %9, 0, !dbg !33
  %123 = and i32 %17, 7, !dbg !33
  %124 = shl nuw nsw i32 %11, 3, !dbg !33
  %125 = or disjoint i32 %124, %123, !dbg !33
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !33
  %127 = bitcast float %97 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 %122) #3, !dbg !33
  %128 = or disjoint i32 %124, 8, !dbg !33
  %129 = or disjoint i32 %128, %123, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !33
  %131 = bitcast float %105 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 %122) #3, !dbg !33
  %132 = or disjoint i32 %124, 16, !dbg !33
  %133 = or disjoint i32 %132, %123, !dbg !33
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !33
  %135 = bitcast float %113 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 %122) #3, !dbg !33
  %136 = or disjoint i32 %124, 24, !dbg !33
  %137 = or disjoint i32 %136, %123, !dbg !33
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !33
  %139 = bitcast float %121 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 %122) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %140 = icmp slt i32 %8, 256, !dbg !33
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !33
  %142 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %140) #3, !dbg !33
  %143 = bitcast i32 %142 to float, !dbg !33
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !33
  %145 = bitcast i32 %144 to float, !dbg !33
  %146 = fadd float %143, %145, !dbg !28
  %147 = bitcast float %146 to i32, !dbg !33
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !33
  %149 = bitcast i32 %148 to float, !dbg !33
  %150 = fadd float %146, %149, !dbg !28
  %151 = bitcast float %150 to i32, !dbg !33
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !33
  %153 = bitcast i32 %152 to float, !dbg !33
  %154 = fadd float %150, %153, !dbg !28
  %155 = and i32 %8, 7, !dbg !33
  %156 = icmp eq i32 %155, 0, !dbg !33
  %157 = and i1 %140, %156, !dbg !33
  %158 = bitcast float %154 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %158, i1 %157) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !33
  %160 = load i32, ptr addrspace(3) %159, align 16, !dbg !33
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !33
  %162 = load i32, ptr addrspace(3) %161, align 16, !dbg !33
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !33
  %164 = load i32, ptr addrspace(3) %163, align 16, !dbg !33
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !33
  %166 = load i32, ptr addrspace(3) %165, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %167, i32 %160, i32 %162, i32 %164, i32 %166, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !34
  %170 = sext i32 %14 to i64, !dbg !35
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !35
  %172 = icmp eq i32 %123, 0, !dbg !36
  %173 = and i1 %172, %16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %171, i1 %173) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6j57r5tibhajbljk6dxihukym2iyhniltt7eaxup2voqjkigbuj.py", directory: "inductor_cache/6j")
!4 = !{ptr @triton_per_fused_pow_sum_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_pow_sum_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_pow_sum_5", linkageName: "triton_per_fused_pow_sum_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 52, scope: !7)
!18 = !DILocation(line: 31, column: 46, scope: !7)
!19 = !DILocation(line: 31, column: 66, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 61, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 74, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 37, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 27, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
