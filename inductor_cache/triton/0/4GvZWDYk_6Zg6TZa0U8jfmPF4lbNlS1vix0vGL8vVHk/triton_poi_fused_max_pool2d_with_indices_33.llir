; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = or disjoint i32 %7, 1, !dbg !13
  %12 = icmp slt i32 %10, 1156, !dbg !14
  %13 = icmp slt i32 %7, 1156, !dbg !14
  %14 = icmp slt i32 %11, 1156, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %16 = shl i32 %15, 9, !dbg !16
  %17 = shl i32 %8, 3, !dbg !17
  %18 = and i32 %17, 504, !dbg !17
  %19 = and i32 %8, 127, !dbg !17
  %20 = or disjoint i32 %19, 128, !dbg !17
  %21 = or disjoint i32 %19, 256, !dbg !17
  %22 = or disjoint i32 %19, 384, !dbg !17
  %23 = or disjoint i32 %16, %18, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %16, %19, !dbg !18
  %26 = or disjoint i32 %16, %20, !dbg !18
  %27 = or disjoint i32 %16, %21, !dbg !18
  %28 = or disjoint i32 %16, %22, !dbg !18
  %29 = icmp slt i32 %23, 288, !dbg !19
  %30 = icmp slt i32 %25, 288, !dbg !19
  %31 = icmp slt i32 %26, 288, !dbg !19
  %32 = icmp slt i32 %27, 288, !dbg !19
  %33 = icmp slt i32 %28, 288, !dbg !19
  %.frozen = freeze i32 %10, !dbg !20
  %34 = sdiv i32 %.frozen, 17, !dbg !20
  %35 = mul i32 %34, 17, !dbg !21
  %.decomposed = sub i32 %.frozen, %35, !dbg !21
  %36 = srem i32 %34, 17, !dbg !22
  %37 = sdiv i32 %10, 289, !dbg !23
  %.frozen14 = freeze i32 %7, !dbg !23
  %38 = sdiv i32 %.frozen14, 289, !dbg !23
  %.frozen16 = freeze i32 %11, !dbg !23
  %39 = sdiv i32 %.frozen16, 289, !dbg !23
  %40 = mul i32 %38, 289, !dbg !24
  %.decomposed15 = sub i32 %.frozen14, %40, !dbg !24
  %41 = mul i32 %39, 289, !dbg !24
  %.decomposed17 = sub i32 %.frozen16, %41, !dbg !24
  %42 = mul nsw i32 %.decomposed, 576, !dbg !25
  %43 = mul nsw i32 %36, 20160, !dbg !26
  %44 = mul i32 %37, 352800, !dbg !27
  %45 = add i32 %44, %42, !dbg !28
  %46 = add i32 %45, %23, !dbg !29
  %47 = add i32 %46, %43, !dbg !30
  %48 = add i32 %45, %24, !dbg !29
  %49 = add i32 %48, %43, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = sext i32 %49 to i64, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !31
  %54 = and i1 %12, %29, !dbg !32
  %55 = and i1 %13, %30, !dbg !32
  %56 = and i1 %13, %31, !dbg !32
  %57 = and i1 %13, %32, !dbg !32
  %58 = and i1 %13, %33, !dbg !32
  %59 = and i1 %14, %30, !dbg !32
  %60 = and i1 %14, %31, !dbg !32
  %61 = and i1 %14, %32, !dbg !32
  %62 = and i1 %14, %33, !dbg !32
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %54) #2, !dbg !33
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !33
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !33
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !33
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !33
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %54) #2, !dbg !33
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !33
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !33
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !33
  %73 = add i32 %45, 288, !dbg !34
  %74 = add i32 %73, %23, !dbg !35
  %75 = add i32 %74, %43, !dbg !36
  %76 = add i32 %73, %24, !dbg !35
  %77 = add i32 %76, %43, !dbg !36
  %78 = sext i32 %75 to i64, !dbg !37
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !37
  %80 = sext i32 %77 to i64, !dbg !37
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !37
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %54) #2, !dbg !38
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !38
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !38
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !38
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %54) #2, !dbg !38
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !38
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !38
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !38
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !38
  %92 = add i32 %45, 576, !dbg !39
  %93 = add i32 %92, %23, !dbg !40
  %94 = add i32 %93, %43, !dbg !41
  %95 = add i32 %92, %24, !dbg !40
  %96 = add i32 %95, %43, !dbg !41
  %97 = sext i32 %94 to i64, !dbg !42
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !42
  %99 = sext i32 %96 to i64, !dbg !42
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !42
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %54) #2, !dbg !43
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !43
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !43
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !43
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !43
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %54) #2, !dbg !43
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !43
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !43
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !43
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !43
  %111 = add i32 %45, 10080, !dbg !44
  %112 = add i32 %111, %23, !dbg !45
  %113 = add i32 %112, %43, !dbg !46
  %114 = add i32 %111, %24, !dbg !45
  %115 = add i32 %114, %43, !dbg !46
  %116 = sext i32 %113 to i64, !dbg !47
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !47
  %118 = sext i32 %115 to i64, !dbg !47
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !47
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %54) #2, !dbg !48
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !48
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !48
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !48
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !48
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %54) #2, !dbg !48
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !48
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !48
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !48
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !48
  %130 = add i32 %45, 10368, !dbg !49
  %131 = add i32 %130, %23, !dbg !50
  %132 = add i32 %131, %43, !dbg !51
  %133 = add i32 %130, %24, !dbg !50
  %134 = add i32 %133, %43, !dbg !51
  %135 = sext i32 %132 to i64, !dbg !52
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !52
  %137 = sext i32 %134 to i64, !dbg !52
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !52
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %54) #2, !dbg !53
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !53
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !53
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !53
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !53
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %54) #2, !dbg !53
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !53
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !53
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !53
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !53
  %149 = add i32 %45, 10656, !dbg !54
  %150 = add i32 %149, %23, !dbg !55
  %151 = add i32 %150, %43, !dbg !56
  %152 = add i32 %149, %24, !dbg !55
  %153 = add i32 %152, %43, !dbg !56
  %154 = sext i32 %151 to i64, !dbg !57
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !57
  %156 = sext i32 %153 to i64, !dbg !57
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !57
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %54) #2, !dbg !58
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !58
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !58
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !58
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !58
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %54) #2, !dbg !58
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !58
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !58
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !58
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !58
  %168 = add i32 %45, 20160, !dbg !59
  %169 = add i32 %168, %23, !dbg !60
  %170 = add i32 %169, %43, !dbg !61
  %171 = add i32 %168, %24, !dbg !60
  %172 = add i32 %171, %43, !dbg !61
  %173 = sext i32 %170 to i64, !dbg !62
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !62
  %175 = sext i32 %172 to i64, !dbg !62
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !62
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %54) #2, !dbg !63
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !63
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !63
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !63
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !63
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %54) #2, !dbg !63
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !63
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !63
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !63
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !63
  %187 = add i32 %45, 20448, !dbg !64
  %188 = add i32 %187, %23, !dbg !65
  %189 = add i32 %188, %43, !dbg !66
  %190 = add i32 %187, %24, !dbg !65
  %191 = add i32 %190, %43, !dbg !66
  %192 = sext i32 %189 to i64, !dbg !67
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !67
  %194 = sext i32 %191 to i64, !dbg !67
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !67
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %193, i1 %54) #2, !dbg !68
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !68
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !68
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !68
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !68
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 %54) #2, !dbg !68
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !68
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !68
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !68
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !68
  %206 = add i32 %45, 20736, !dbg !69
  %207 = add i32 %206, %23, !dbg !70
  %208 = add i32 %207, %43, !dbg !71
  %209 = add i32 %206, %24, !dbg !70
  %210 = add i32 %209, %43, !dbg !71
  %211 = sext i32 %208 to i64, !dbg !72
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !72
  %213 = sext i32 %210 to i64, !dbg !72
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !72
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %212, i1 %54) #2, !dbg !73
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !73
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !73
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !73
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !73
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %214, i1 %54) #2, !dbg !73
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !73
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !73
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !73
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !73
  %225 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !33
  %226 = insertelement <4 x i32> %225, i32 %65, i64 1, !dbg !33
  %227 = insertelement <4 x i32> %226, i32 %66, i64 2, !dbg !33
  %228 = insertelement <4 x i32> %227, i32 %67, i64 3, !dbg !33
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !33
  %230 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !38
  %231 = insertelement <4 x i32> %230, i32 %84, i64 1, !dbg !38
  %232 = insertelement <4 x i32> %231, i32 %85, i64 2, !dbg !38
  %233 = insertelement <4 x i32> %232, i32 %86, i64 3, !dbg !38
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !38
  %235 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !43
  %236 = insertelement <4 x i32> %235, i32 %103, i64 1, !dbg !43
  %237 = insertelement <4 x i32> %236, i32 %104, i64 2, !dbg !43
  %238 = insertelement <4 x i32> %237, i32 %105, i64 3, !dbg !43
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !43
  %240 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !48
  %241 = insertelement <4 x i32> %240, i32 %122, i64 1, !dbg !48
  %242 = insertelement <4 x i32> %241, i32 %123, i64 2, !dbg !48
  %243 = insertelement <4 x i32> %242, i32 %124, i64 3, !dbg !48
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !48
  %245 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !53
  %246 = insertelement <4 x i32> %245, i32 %141, i64 1, !dbg !53
  %247 = insertelement <4 x i32> %246, i32 %142, i64 2, !dbg !53
  %248 = insertelement <4 x i32> %247, i32 %143, i64 3, !dbg !53
  %249 = bitcast <4 x i32> %248 to <4 x float>, !dbg !53
  %250 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !58
  %251 = insertelement <4 x i32> %250, i32 %160, i64 1, !dbg !58
  %252 = insertelement <4 x i32> %251, i32 %161, i64 2, !dbg !58
  %253 = insertelement <4 x i32> %252, i32 %162, i64 3, !dbg !58
  %254 = bitcast <4 x i32> %253 to <4 x float>, !dbg !58
  %255 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !63
  %256 = insertelement <4 x i32> %255, i32 %179, i64 1, !dbg !63
  %257 = insertelement <4 x i32> %256, i32 %180, i64 2, !dbg !63
  %258 = insertelement <4 x i32> %257, i32 %181, i64 3, !dbg !63
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !63
  %260 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !68
  %261 = insertelement <4 x i32> %260, i32 %198, i64 1, !dbg !68
  %262 = insertelement <4 x i32> %261, i32 %199, i64 2, !dbg !68
  %263 = insertelement <4 x i32> %262, i32 %200, i64 3, !dbg !68
  %264 = bitcast <4 x i32> %263 to <4 x float>, !dbg !68
  %265 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !73
  %266 = insertelement <4 x i32> %265, i32 %217, i64 1, !dbg !73
  %267 = insertelement <4 x i32> %266, i32 %218, i64 2, !dbg !73
  %268 = insertelement <4 x i32> %267, i32 %219, i64 3, !dbg !73
  %269 = bitcast <4 x i32> %268 to <4 x float>, !dbg !73
  %270 = fcmp ogt <4 x float> %234, %229, !dbg !74
  %271 = fcmp uno <4 x float> %234, zeroinitializer, !dbg !78
  %272 = or <4 x i1> %270, %271, !dbg !79
  %.v = select <4 x i1> %272, <4 x i32> %233, <4 x i32> %228, !dbg !80
  %273 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %274 = fcmp olt <4 x float> %273, %239, !dbg !81
  %275 = fcmp uno <4 x float> %239, zeroinitializer, !dbg !83
  %276 = or <4 x i1> %275, %274, !dbg !84
  %.v1 = select <4 x i1> %276, <4 x i32> %238, <4 x i32> %.v, !dbg !85
  %277 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !85
  %278 = fcmp olt <4 x float> %277, %244, !dbg !86
  %279 = fcmp uno <4 x float> %244, zeroinitializer, !dbg !88
  %280 = or <4 x i1> %279, %278, !dbg !89
  %.v2 = select <4 x i1> %280, <4 x i32> %243, <4 x i32> %.v1, !dbg !90
  %281 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !90
  %282 = fcmp olt <4 x float> %281, %249, !dbg !91
  %283 = fcmp uno <4 x float> %249, zeroinitializer, !dbg !93
  %284 = or <4 x i1> %283, %282, !dbg !94
  %.v3 = select <4 x i1> %284, <4 x i32> %248, <4 x i32> %.v2, !dbg !95
  %285 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !95
  %286 = fcmp olt <4 x float> %285, %254, !dbg !96
  %287 = fcmp uno <4 x float> %254, zeroinitializer, !dbg !98
  %288 = or <4 x i1> %287, %286, !dbg !99
  %.v4 = select <4 x i1> %288, <4 x i32> %253, <4 x i32> %.v3, !dbg !100
  %289 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !100
  %290 = fcmp olt <4 x float> %289, %259, !dbg !101
  %291 = fcmp uno <4 x float> %259, zeroinitializer, !dbg !103
  %292 = or <4 x i1> %291, %290, !dbg !104
  %.v5 = select <4 x i1> %292, <4 x i32> %258, <4 x i32> %.v4, !dbg !105
  %293 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !105
  %294 = fcmp olt <4 x float> %293, %264, !dbg !106
  %295 = fcmp uno <4 x float> %264, zeroinitializer, !dbg !108
  %296 = or <4 x i1> %295, %294, !dbg !109
  %.v6 = select <4 x i1> %296, <4 x i32> %263, <4 x i32> %.v5, !dbg !110
  %297 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !110
  %298 = fcmp olt <4 x float> %297, %269, !dbg !111
  %299 = extractelement <4 x i1> %298, i64 0, !dbg !113
  %300 = extractelement <4 x i1> %298, i64 1, !dbg !113
  %301 = extractelement <4 x i1> %298, i64 2, !dbg !113
  %302 = extractelement <4 x i1> %298, i64 3, !dbg !113
  %303 = zext <4 x i1> %270 to <4 x i8>, !dbg !114
  %304 = select <4 x i1> %274, <4 x i8> splat (i8 2), <4 x i8> %303, !dbg !115
  %305 = select <4 x i1> %278, <4 x i8> splat (i8 3), <4 x i8> %304, !dbg !116
  %306 = select <4 x i1> %282, <4 x i8> splat (i8 4), <4 x i8> %305, !dbg !117
  %307 = select <4 x i1> %286, <4 x i8> splat (i8 5), <4 x i8> %306, !dbg !118
  %308 = select <4 x i1> %290, <4 x i8> splat (i8 6), <4 x i8> %307, !dbg !119
  %309 = select <4 x i1> %294, <4 x i8> splat (i8 7), <4 x i8> %308, !dbg !120
  %310 = select <4 x i1> %298, <4 x i8> splat (i8 8), <4 x i8> %309, !dbg !121
  %311 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !33
  %312 = insertelement <4 x i32> %311, i32 %70, i64 1, !dbg !33
  %313 = insertelement <4 x i32> %312, i32 %71, i64 2, !dbg !33
  %314 = insertelement <4 x i32> %313, i32 %72, i64 3, !dbg !33
  %315 = bitcast <4 x i32> %314 to <4 x float>, !dbg !33
  %316 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !38
  %317 = insertelement <4 x i32> %316, i32 %89, i64 1, !dbg !38
  %318 = insertelement <4 x i32> %317, i32 %90, i64 2, !dbg !38
  %319 = insertelement <4 x i32> %318, i32 %91, i64 3, !dbg !38
  %320 = bitcast <4 x i32> %319 to <4 x float>, !dbg !38
  %321 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !43
  %322 = insertelement <4 x i32> %321, i32 %108, i64 1, !dbg !43
  %323 = insertelement <4 x i32> %322, i32 %109, i64 2, !dbg !43
  %324 = insertelement <4 x i32> %323, i32 %110, i64 3, !dbg !43
  %325 = bitcast <4 x i32> %324 to <4 x float>, !dbg !43
  %326 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !48
  %327 = insertelement <4 x i32> %326, i32 %127, i64 1, !dbg !48
  %328 = insertelement <4 x i32> %327, i32 %128, i64 2, !dbg !48
  %329 = insertelement <4 x i32> %328, i32 %129, i64 3, !dbg !48
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !48
  %331 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !53
  %332 = insertelement <4 x i32> %331, i32 %146, i64 1, !dbg !53
  %333 = insertelement <4 x i32> %332, i32 %147, i64 2, !dbg !53
  %334 = insertelement <4 x i32> %333, i32 %148, i64 3, !dbg !53
  %335 = bitcast <4 x i32> %334 to <4 x float>, !dbg !53
  %336 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !58
  %337 = insertelement <4 x i32> %336, i32 %165, i64 1, !dbg !58
  %338 = insertelement <4 x i32> %337, i32 %166, i64 2, !dbg !58
  %339 = insertelement <4 x i32> %338, i32 %167, i64 3, !dbg !58
  %340 = bitcast <4 x i32> %339 to <4 x float>, !dbg !58
  %341 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !63
  %342 = insertelement <4 x i32> %341, i32 %184, i64 1, !dbg !63
  %343 = insertelement <4 x i32> %342, i32 %185, i64 2, !dbg !63
  %344 = insertelement <4 x i32> %343, i32 %186, i64 3, !dbg !63
  %345 = bitcast <4 x i32> %344 to <4 x float>, !dbg !63
  %346 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !68
  %347 = insertelement <4 x i32> %346, i32 %203, i64 1, !dbg !68
  %348 = insertelement <4 x i32> %347, i32 %204, i64 2, !dbg !68
  %349 = insertelement <4 x i32> %348, i32 %205, i64 3, !dbg !68
  %350 = bitcast <4 x i32> %349 to <4 x float>, !dbg !68
  %351 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !73
  %352 = insertelement <4 x i32> %351, i32 %222, i64 1, !dbg !73
  %353 = insertelement <4 x i32> %352, i32 %223, i64 2, !dbg !73
  %354 = insertelement <4 x i32> %353, i32 %224, i64 3, !dbg !73
  %355 = bitcast <4 x i32> %354 to <4 x float>, !dbg !73
  %356 = fcmp ogt <4 x float> %320, %315, !dbg !74
  %357 = fcmp uno <4 x float> %320, zeroinitializer, !dbg !78
  %358 = or <4 x i1> %356, %357, !dbg !79
  %.v7 = select <4 x i1> %358, <4 x i32> %319, <4 x i32> %314, !dbg !80
  %359 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !80
  %360 = fcmp olt <4 x float> %359, %325, !dbg !81
  %361 = fcmp uno <4 x float> %325, zeroinitializer, !dbg !83
  %362 = or <4 x i1> %361, %360, !dbg !84
  %.v8 = select <4 x i1> %362, <4 x i32> %324, <4 x i32> %.v7, !dbg !85
  %363 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !85
  %364 = fcmp olt <4 x float> %363, %330, !dbg !86
  %365 = fcmp uno <4 x float> %330, zeroinitializer, !dbg !88
  %366 = or <4 x i1> %365, %364, !dbg !89
  %.v9 = select <4 x i1> %366, <4 x i32> %329, <4 x i32> %.v8, !dbg !90
  %367 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !90
  %368 = fcmp olt <4 x float> %367, %335, !dbg !91
  %369 = fcmp uno <4 x float> %335, zeroinitializer, !dbg !93
  %370 = or <4 x i1> %369, %368, !dbg !94
  %.v10 = select <4 x i1> %370, <4 x i32> %334, <4 x i32> %.v9, !dbg !95
  %371 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !95
  %372 = fcmp olt <4 x float> %371, %340, !dbg !96
  %373 = fcmp uno <4 x float> %340, zeroinitializer, !dbg !98
  %374 = or <4 x i1> %373, %372, !dbg !99
  %.v11 = select <4 x i1> %374, <4 x i32> %339, <4 x i32> %.v10, !dbg !100
  %375 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !100
  %376 = fcmp olt <4 x float> %375, %345, !dbg !101
  %377 = fcmp uno <4 x float> %345, zeroinitializer, !dbg !103
  %378 = or <4 x i1> %377, %376, !dbg !104
  %.v12 = select <4 x i1> %378, <4 x i32> %344, <4 x i32> %.v11, !dbg !105
  %379 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !105
  %380 = fcmp olt <4 x float> %379, %350, !dbg !106
  %381 = fcmp uno <4 x float> %350, zeroinitializer, !dbg !108
  %382 = or <4 x i1> %381, %380, !dbg !109
  %.v13 = select <4 x i1> %382, <4 x i32> %349, <4 x i32> %.v12, !dbg !110
  %383 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !110
  %384 = fcmp olt <4 x float> %383, %355, !dbg !111
  %385 = shufflevector <4 x float> %355, <4 x float> %269, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !122
  %386 = fcmp uno <8 x float> %385, zeroinitializer, !dbg !122
  %387 = extractelement <8 x i1> %386, i64 7, !dbg !113
  %388 = or i1 %387, %299, !dbg !113
  %389 = extractelement <8 x i1> %386, i64 6, !dbg !113
  %390 = or i1 %389, %300, !dbg !113
  %391 = extractelement <8 x i1> %386, i64 5, !dbg !113
  %392 = or i1 %391, %301, !dbg !113
  %393 = extractelement <8 x i1> %386, i64 4, !dbg !113
  %394 = or i1 %393, %302, !dbg !113
  %395 = extractelement <4 x i1> %384, i64 0, !dbg !113
  %396 = extractelement <8 x i1> %386, i64 3, !dbg !113
  %397 = or i1 %396, %395, !dbg !113
  %398 = extractelement <4 x i1> %384, i64 1, !dbg !113
  %399 = extractelement <8 x i1> %386, i64 2, !dbg !113
  %400 = or i1 %399, %398, !dbg !113
  %401 = extractelement <4 x i1> %384, i64 2, !dbg !113
  %402 = extractelement <8 x i1> %386, i64 1, !dbg !113
  %403 = or i1 %402, %401, !dbg !113
  %404 = extractelement <4 x i1> %384, i64 3, !dbg !113
  %405 = extractelement <8 x i1> %386, i64 0, !dbg !113
  %406 = or i1 %405, %404, !dbg !113
  %407 = zext <4 x i1> %356 to <4 x i8>, !dbg !114
  %408 = select <4 x i1> %360, <4 x i8> splat (i8 2), <4 x i8> %407, !dbg !115
  %409 = select <4 x i1> %364, <4 x i8> splat (i8 3), <4 x i8> %408, !dbg !116
  %410 = select <4 x i1> %368, <4 x i8> splat (i8 4), <4 x i8> %409, !dbg !117
  %411 = select <4 x i1> %372, <4 x i8> splat (i8 5), <4 x i8> %410, !dbg !118
  %412 = select <4 x i1> %376, <4 x i8> splat (i8 6), <4 x i8> %411, !dbg !119
  %413 = select <4 x i1> %380, <4 x i8> splat (i8 7), <4 x i8> %412, !dbg !120
  %414 = select <4 x i1> %384, <4 x i8> splat (i8 8), <4 x i8> %413, !dbg !121
  %415 = mul i32 %25, 289, !dbg !123
  %416 = mul i32 %26, 289, !dbg !123
  %417 = mul i32 %27, 289, !dbg !123
  %418 = mul i32 %28, 289, !dbg !123
  %419 = mul i32 %38, 221952, !dbg !124
  %420 = mul i32 %39, 221952, !dbg !124
  %421 = add i32 %419, %.decomposed15, !dbg !125
  %422 = add i32 %421, %415, !dbg !126
  %423 = add i32 %421, %416, !dbg !126
  %424 = add i32 %421, %417, !dbg !126
  %425 = add i32 %421, %418, !dbg !126
  %426 = add i32 %420, %.decomposed17, !dbg !125
  %427 = add i32 %426, %415, !dbg !126
  %428 = add i32 %426, %416, !dbg !126
  %429 = add i32 %426, %417, !dbg !126
  %430 = add i32 %426, %418, !dbg !126
  %431 = sext i32 %422 to i64, !dbg !127
  %432 = getelementptr float, ptr addrspace(1) %1, i64 %431, !dbg !127
  %433 = sext i32 %423 to i64, !dbg !127
  %434 = getelementptr float, ptr addrspace(1) %1, i64 %433, !dbg !127
  %435 = sext i32 %424 to i64, !dbg !127
  %436 = getelementptr float, ptr addrspace(1) %1, i64 %435, !dbg !127
  %437 = sext i32 %425 to i64, !dbg !127
  %438 = getelementptr float, ptr addrspace(1) %1, i64 %437, !dbg !127
  %439 = sext i32 %427 to i64, !dbg !127
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %439, !dbg !127
  %441 = sext i32 %428 to i64, !dbg !127
  %442 = getelementptr float, ptr addrspace(1) %1, i64 %441, !dbg !127
  %443 = sext i32 %429 to i64, !dbg !127
  %444 = getelementptr float, ptr addrspace(1) %1, i64 %443, !dbg !127
  %445 = sext i32 %430 to i64, !dbg !127
  %446 = getelementptr float, ptr addrspace(1) %1, i64 %445, !dbg !127
  %447 = and i32 %17, 1016, !dbg !128
  %448 = lshr i32 %447, 9, !dbg !128
  %449 = or disjoint i32 %448, %447, !dbg !128
  %450 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %449, !dbg !128
  %451 = extractelement <4 x i32> %.v6, i64 0, !dbg !128
  %452 = select i1 %388, i32 %216, i32 %451, !dbg !129
  %453 = insertelement <1 x i32> poison, i32 %452, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %453, i1 true) #2, !dbg !128
  %454 = or disjoint i32 %447, 1, !dbg !128
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !128
  %456 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %454, !dbg !128
  %457 = extractelement <4 x i32> %.v6, i64 1, !dbg !128
  %458 = select i1 %390, i32 %217, i32 %457, !dbg !129
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %459, i1 true) #2, !dbg !128
  %460 = or disjoint i32 %449, 2, !dbg !128
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %460, !dbg !128
  %462 = extractelement <4 x i32> %.v6, i64 2, !dbg !128
  %463 = select i1 %392, i32 %218, i32 %462, !dbg !129
  %464 = insertelement <1 x i32> poison, i32 %463, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %464, i1 true) #2, !dbg !128
  %465 = or disjoint i32 %447, 3, !dbg !128
  %466 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %465, !dbg !128
  %467 = extractelement <4 x i32> %.v6, i64 3, !dbg !128
  %468 = select i1 %394, i32 %219, i32 %467, !dbg !129
  %469 = insertelement <1 x i32> poison, i32 %468, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %469, i1 true) #2, !dbg !128
  %470 = or disjoint i32 %449, 4, !dbg !128
  %471 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %470, !dbg !128
  %472 = extractelement <4 x i32> %.v13, i64 0, !dbg !128
  %473 = select i1 %397, i32 %221, i32 %472, !dbg !129
  %474 = insertelement <1 x i32> poison, i32 %473, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %474, i1 true) #2, !dbg !128
  %475 = or disjoint i32 %447, 5, !dbg !128
  %476 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %475, !dbg !128
  %477 = extractelement <4 x i32> %.v13, i64 1, !dbg !128
  %478 = select i1 %400, i32 %222, i32 %477, !dbg !129
  %479 = insertelement <1 x i32> poison, i32 %478, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %479, i1 true) #2, !dbg !128
  %480 = or disjoint i32 %449, 6, !dbg !128
  %481 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %480, !dbg !128
  %482 = extractelement <4 x i32> %.v13, i64 2, !dbg !128
  %483 = select i1 %403, i32 %223, i32 %482, !dbg !129
  %484 = insertelement <1 x i32> poison, i32 %483, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %484, i1 true) #2, !dbg !128
  %485 = or disjoint i32 %447, 7, !dbg !128
  %486 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %485, !dbg !128
  %487 = extractelement <4 x i32> %.v13, i64 3, !dbg !128
  %488 = select i1 %406, i32 %224, i32 %487, !dbg !129
  %489 = insertelement <1 x i32> poison, i32 %488, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %489, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %490 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !128
  %491 = load i32, ptr addrspace(3) %490, align 4, !dbg !128
  %492 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !128
  %493 = load i32, ptr addrspace(3) %492, align 4, !dbg !128
  %494 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !128
  %495 = load i32, ptr addrspace(3) %494, align 4, !dbg !128
  %496 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !128
  %497 = load i32, ptr addrspace(3) %496, align 4, !dbg !128
  %498 = getelementptr inbounds i8, ptr addrspace(3) %490, i32 2052, !dbg !128
  %499 = load i32, ptr addrspace(3) %498, align 4, !dbg !128
  %500 = getelementptr inbounds i8, ptr addrspace(3) %490, i32 2564, !dbg !128
  %501 = load i32, ptr addrspace(3) %500, align 4, !dbg !128
  %502 = getelementptr inbounds i8, ptr addrspace(3) %490, i32 3076, !dbg !128
  %503 = load i32, ptr addrspace(3) %502, align 4, !dbg !128
  %504 = getelementptr inbounds i8, ptr addrspace(3) %490, i32 3588, !dbg !128
  %505 = load i32, ptr addrspace(3) %504, align 4, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %491, ptr addrspace(1) %432, i1 %55) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %493, ptr addrspace(1) %434, i1 %56) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %495, ptr addrspace(1) %436, i1 %57) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %497, ptr addrspace(1) %438, i1 %58) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %499, ptr addrspace(1) %440, i1 %59) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %501, ptr addrspace(1) %442, i1 %60) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %503, ptr addrspace(1) %444, i1 %61) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %505, ptr addrspace(1) %446, i1 %62) #2, !dbg !128
  %506 = mul i32 %10, 288, !dbg !130
  %507 = add i32 %23, %506, !dbg !131
  %508 = sext i32 %507 to i64, !dbg !132
  %509 = getelementptr i8, ptr addrspace(1) %2, i64 %508, !dbg !132
  %510 = bitcast <4 x i8> %310 to i32, !dbg !133
  %511 = bitcast <4 x i8> %414 to i32, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %510, i32 %511, ptr addrspace(1) %509, i1 %54) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnrb2fsk3244maxp22ftzahp45hqnrs5iatxqfkpvgqbd5e5eoy.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_33", linkageName: "triton_poi_fused_max_pool2d_with_indices_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 27, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 50, scope: !7)
!27 = !DILocation(line: 34, column: 62, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 55, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 75, scope: !7)
!33 = !DILocation(line: 34, column: 67, scope: !7)
!34 = !DILocation(line: 35, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 50, scope: !7)
!36 = !DILocation(line: 35, column: 61, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 73, scope: !7)
!39 = !DILocation(line: 36, column: 41, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 61, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 73, scope: !7)
!44 = !DILocation(line: 37, column: 43, scope: !7)
!45 = !DILocation(line: 37, column: 52, scope: !7)
!46 = !DILocation(line: 37, column: 63, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 75, scope: !7)
!49 = !DILocation(line: 38, column: 43, scope: !7)
!50 = !DILocation(line: 38, column: 52, scope: !7)
!51 = !DILocation(line: 38, column: 63, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 75, scope: !7)
!54 = !DILocation(line: 39, column: 43, scope: !7)
!55 = !DILocation(line: 39, column: 52, scope: !7)
!56 = !DILocation(line: 39, column: 63, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 75, scope: !7)
!59 = !DILocation(line: 40, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 53, scope: !7)
!61 = !DILocation(line: 40, column: 64, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 76, scope: !7)
!64 = !DILocation(line: 41, column: 44, scope: !7)
!65 = !DILocation(line: 41, column: 53, scope: !7)
!66 = !DILocation(line: 41, column: 64, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 76, scope: !7)
!69 = !DILocation(line: 42, column: 44, scope: !7)
!70 = !DILocation(line: 42, column: 53, scope: !7)
!71 = !DILocation(line: 42, column: 64, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 76, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!123 = !DILocation(line: 76, column: 34, scope: !7)
!124 = !DILocation(line: 76, column: 46, scope: !7)
!125 = !DILocation(line: 76, column: 30, scope: !7)
!126 = !DILocation(line: 76, column: 39, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 58, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
