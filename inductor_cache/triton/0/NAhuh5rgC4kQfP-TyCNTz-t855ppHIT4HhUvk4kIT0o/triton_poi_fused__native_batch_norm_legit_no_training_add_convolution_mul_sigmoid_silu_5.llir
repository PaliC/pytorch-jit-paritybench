; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %19 = shl i32 %18, 4, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = lshr i32 %20, 6, !dbg !12
  %22 = and i32 %21, 3, !dbg !12
  %23 = shl i32 %20, 2, !dbg !12
  %24 = or disjoint i32 %19, %22, !dbg !13
  %25 = or disjoint i32 %24, 4, !dbg !13
  %26 = or disjoint i32 %24, 8, !dbg !13
  %27 = or disjoint i32 %24, 12, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %29 = shl i32 %28, 8, !dbg !15
  %30 = and i32 %23, 252, !dbg !16
  %31 = and i32 %20, 255, !dbg !16
  %32 = or disjoint i32 %29, %30, !dbg !17
  %33 = or disjoint i32 %29, %31, !dbg !17
  %34 = icmp slt i32 %32, 512, !dbg !18
  %35 = icmp slt i32 %33, 512, !dbg !18
  %36 = sdiv i32 %24, 4096, !dbg !19
  %37 = sdiv i32 %25, 4096, !dbg !19
  %38 = sdiv i32 %26, 4096, !dbg !19
  %39 = sdiv i32 %27, 4096, !dbg !19
  %40 = shl i32 %24, 9, !dbg !20
  %41 = shl i32 %25, 9, !dbg !20
  %42 = shl i32 %26, 9, !dbg !20
  %43 = shl i32 %27, 9, !dbg !20
  %44 = add i32 %32, %40, !dbg !21
  %45 = add i32 %32, %41, !dbg !21
  %46 = add i32 %32, %42, !dbg !21
  %47 = add i32 %32, %43, !dbg !21
  %48 = sext i32 %44 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %45 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %46 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = sext i32 %47 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %34) #4, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %34) #4, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %34) #4, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !23
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %34) #4, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !23
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !23
  %76 = and i32 %23, 1020, !dbg !23
  %77 = lshr i32 %76, 8, !dbg !23
  %78 = or disjoint i32 %77, %76, !dbg !23
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !23
  %80 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #4, !dbg !23
  %81 = or disjoint i32 %76, 1, !dbg !23
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !23
  %83 = getelementptr inbounds float, ptr addrspace(3) %82, i32 %81, !dbg !23
  %84 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !23
  %85 = or disjoint i32 %76, 2, !dbg !23
  %86 = getelementptr inbounds float, ptr addrspace(3) %82, i32 %85, !dbg !23
  %87 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !23
  %88 = or disjoint i32 %76, 3, !dbg !23
  %89 = getelementptr inbounds float, ptr addrspace(3) %82, i32 %88, !dbg !23
  %90 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31, !dbg !23
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !23
  %93 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 1028, !dbg !23
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !23
  %95 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 2056, !dbg !23
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !23
  %97 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 3084, !dbg !23
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %99 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %99, i1 true) #4, !dbg !23
  %100 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %100, i1 true) #4, !dbg !23
  %101 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %101, i1 true) #4, !dbg !23
  %102 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %102, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %103 = load float, ptr addrspace(3) %91, align 4, !dbg !23
  %104 = load float, ptr addrspace(3) %93, align 4, !dbg !23
  %105 = load float, ptr addrspace(3) %95, align 4, !dbg !23
  %106 = load float, ptr addrspace(3) %97, align 4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %107 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %107, i1 true) #4, !dbg !23
  %108 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %108, i1 true) #4, !dbg !23
  %109 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %109, i1 true) #4, !dbg !23
  %110 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %110, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %111 = load float, ptr addrspace(3) %91, align 4, !dbg !23
  %112 = load float, ptr addrspace(3) %93, align 4, !dbg !23
  %113 = load float, ptr addrspace(3) %95, align 4, !dbg !23
  %114 = load float, ptr addrspace(3) %97, align 4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %115 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %115, i1 true) #4, !dbg !23
  %116 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %116, i1 true) #4, !dbg !23
  %117 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %117, i1 true) #4, !dbg !23
  %118 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %118, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %119 = load float, ptr addrspace(3) %91, align 4, !dbg !23
  %120 = load float, ptr addrspace(3) %93, align 4, !dbg !23
  %121 = load float, ptr addrspace(3) %95, align 4, !dbg !23
  %122 = load float, ptr addrspace(3) %97, align 4, !dbg !23
  %123 = sext i32 %33 to i64, !dbg !24
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !24
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %35) #4, !dbg !25
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %34) #4, !dbg !27
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !27
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !27
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !27
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %34) #4, !dbg !27
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !27
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !27
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !27
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !27
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %34) #4, !dbg !27
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !27
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !27
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !27
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !27
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %34) #4, !dbg !27
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !27
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !27
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %150 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %150, i1 true) #4, !dbg !27
  %151 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %151, i1 true) #4, !dbg !27
  %152 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %152, i1 true) #4, !dbg !27
  %153 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %153, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %154 = load float, ptr addrspace(3) %91, align 4, !dbg !27
  %155 = load float, ptr addrspace(3) %93, align 4, !dbg !27
  %156 = load float, ptr addrspace(3) %95, align 4, !dbg !27
  %157 = load float, ptr addrspace(3) %97, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %158 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %158, i1 true) #4, !dbg !27
  %159 = insertelement <1 x i32> poison, i32 %137, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %159, i1 true) #4, !dbg !27
  %160 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %160, i1 true) #4, !dbg !27
  %161 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %161, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %162 = load float, ptr addrspace(3) %91, align 4, !dbg !27
  %163 = load float, ptr addrspace(3) %93, align 4, !dbg !27
  %164 = load float, ptr addrspace(3) %95, align 4, !dbg !27
  %165 = load float, ptr addrspace(3) %97, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %166 = insertelement <1 x i32> poison, i32 %141, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %166, i1 true) #4, !dbg !27
  %167 = insertelement <1 x i32> poison, i32 %142, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %167, i1 true) #4, !dbg !27
  %168 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %168, i1 true) #4, !dbg !27
  %169 = insertelement <1 x i32> poison, i32 %144, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %169, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %170 = load float, ptr addrspace(3) %91, align 4, !dbg !27
  %171 = load float, ptr addrspace(3) %93, align 4, !dbg !27
  %172 = load float, ptr addrspace(3) %95, align 4, !dbg !27
  %173 = load float, ptr addrspace(3) %97, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %174 = insertelement <1 x i32> poison, i32 %146, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %174, i1 true) #4, !dbg !27
  %175 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %175, i1 true) #4, !dbg !27
  %176 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %176, i1 true) #4, !dbg !27
  %177 = insertelement <1 x i32> poison, i32 %149, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %177, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %178 = load float, ptr addrspace(3) %91, align 4, !dbg !27
  %179 = load float, ptr addrspace(3) %93, align 4, !dbg !27
  %180 = load float, ptr addrspace(3) %95, align 4, !dbg !27
  %181 = load float, ptr addrspace(3) %97, align 4, !dbg !27
  %182 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !28
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %35) #4, !dbg !29
  %184 = getelementptr float, ptr addrspace(1) %4, i64 %123, !dbg !30
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %35) #4, !dbg !31
  %186 = getelementptr float, ptr addrspace(1) %5, i64 %123, !dbg !32
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %35) #4, !dbg !33
  %188 = bitcast i32 %187 to float, !dbg !33
  %189 = getelementptr float, ptr addrspace(1) %6, i64 %123, !dbg !34
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %35) #4, !dbg !35
  %191 = getelementptr float, ptr addrspace(1) %7, i64 %123, !dbg !36
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %35) #4, !dbg !37
  %193 = getelementptr float, ptr addrspace(1) %8, i64 %123, !dbg !38
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %35) #4, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %9, i64 %123, !dbg !40
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %35) #4, !dbg !41
  %197 = bitcast i32 %196 to float, !dbg !41
  %198 = getelementptr float, ptr addrspace(1) %10, i64 %123, !dbg !42
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %35) #4, !dbg !43
  %200 = getelementptr float, ptr addrspace(1) %11, i64 %123, !dbg !44
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %35) #4, !dbg !45
  %202 = shl nsw i32 %36, 9, !dbg !46
  %203 = shl nsw i32 %37, 9, !dbg !46
  %204 = shl nsw i32 %38, 9, !dbg !46
  %205 = shl nsw i32 %39, 9, !dbg !46
  %206 = add i32 %202, %32, !dbg !47
  %207 = add i32 %32, %203, !dbg !47
  %208 = add i32 %32, %204, !dbg !47
  %209 = add i32 %32, %205, !dbg !47
  %210 = sext i32 %206 to i64, !dbg !48
  %211 = getelementptr float, ptr addrspace(1) %12, i64 %210, !dbg !48
  %212 = sext i32 %207 to i64, !dbg !48
  %213 = getelementptr float, ptr addrspace(1) %12, i64 %212, !dbg !48
  %214 = sext i32 %208 to i64, !dbg !48
  %215 = getelementptr float, ptr addrspace(1) %12, i64 %214, !dbg !48
  %216 = sext i32 %209 to i64, !dbg !48
  %217 = getelementptr float, ptr addrspace(1) %12, i64 %216, !dbg !48
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %211, i1 %34) #4, !dbg !49
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %34) #4, !dbg !49
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 %34) #4, !dbg !49
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %34) #4, !dbg !49
  %222 = getelementptr float, ptr addrspace(1) %13, i64 %48, !dbg !50
  %223 = getelementptr float, ptr addrspace(1) %13, i64 %50, !dbg !50
  %224 = getelementptr float, ptr addrspace(1) %13, i64 %52, !dbg !50
  %225 = getelementptr float, ptr addrspace(1) %13, i64 %54, !dbg !50
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %222, i1 %34) #4, !dbg !51
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %223, i1 %34) #4, !dbg !51
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %224, i1 %34) #4, !dbg !51
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %225, i1 %34) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %230 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %230, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !52
  %232 = load float, ptr addrspace(3) %231, align 16, !dbg !52
  %233 = or disjoint i32 %30, 1, !dbg !52
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !52
  %235 = load float, ptr addrspace(3) %234, align 4, !dbg !52
  %236 = or disjoint i32 %30, 2, !dbg !52
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !52
  %238 = load float, ptr addrspace(3) %237, align 8, !dbg !52
  %239 = or disjoint i32 %30, 3, !dbg !52
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !52
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %242 = insertelement <1 x i32> poison, i32 %183, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %242, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %243 = load float, ptr addrspace(3) %231, align 16, !dbg !53
  %244 = load float, ptr addrspace(3) %234, align 4, !dbg !53
  %245 = load float, ptr addrspace(3) %237, align 8, !dbg !53
  %246 = load float, ptr addrspace(3) %240, align 4, !dbg !53
  %247 = fadd float %188, 0x3EE4F8B580000000, !dbg !54
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i = icmp eq i32 %248, 0, !dbg !55
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i = icmp eq i32 %249, 0, !dbg !55
  br i1 %.not.i, label %255, label %250, !dbg !55

250:                                              ; preds = %17
  br i1 %.not1.i, label %253, label %251, !dbg !55

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %247) #4, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %247) #4, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

255:                                              ; preds = %17
  br i1 %.not1.i, label %258, label %256, !dbg !55

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %247) #4, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %247) #4, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %251, %253, %256, %258
  %.0.i = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !55
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !56
  %261 = fadd float %197, 0x3EE4F8B580000000, !dbg !57
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i35 = icmp eq i32 %262, 0, !dbg !58
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i38 = icmp eq i32 %263, 0, !dbg !58
  br i1 %.not.i35, label %269, label %264, !dbg !58

264:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i38, label %267, label %265, !dbg !58

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %261) #4, !dbg !58
  br label %__nv_sqrtf.exit39, !dbg !58

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %261) #4, !dbg !58
  br label %__nv_sqrtf.exit39, !dbg !58

269:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i38, label %272, label %270, !dbg !58

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %261) #4, !dbg !58
  br label %__nv_sqrtf.exit39, !dbg !58

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %261) #4, !dbg !58
  br label %__nv_sqrtf.exit39, !dbg !58

__nv_sqrtf.exit39:                                ; preds = %265, %267, %270, %272
  %.0.i37 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !58
  %274 = bitcast i32 %183 to float, !dbg !29
  %275 = fadd float %181, %274, !dbg !53
  %276 = bitcast i32 %194 to float, !dbg !39
  %277 = fsub float %275, %276, !dbg !59
  %278 = fadd float %180, %274, !dbg !53
  %279 = fsub float %278, %276, !dbg !59
  %280 = fadd float %179, %274, !dbg !53
  %281 = fsub float %280, %276, !dbg !59
  %282 = fadd float %178, %274, !dbg !53
  %283 = fsub float %282, %276, !dbg !59
  %284 = fadd float %173, %274, !dbg !53
  %285 = fsub float %284, %276, !dbg !59
  %286 = fadd float %172, %274, !dbg !53
  %287 = fsub float %286, %276, !dbg !59
  %288 = fadd float %171, %274, !dbg !53
  %289 = fsub float %288, %276, !dbg !59
  %290 = fadd float %170, %274, !dbg !53
  %291 = fsub float %290, %276, !dbg !59
  %292 = fadd float %165, %274, !dbg !53
  %293 = fsub float %292, %276, !dbg !59
  %294 = fadd float %164, %274, !dbg !53
  %295 = fsub float %294, %276, !dbg !59
  %296 = fadd float %163, %274, !dbg !53
  %297 = fsub float %296, %276, !dbg !59
  %298 = fadd float %162, %274, !dbg !53
  %299 = fsub float %298, %276, !dbg !59
  %300 = fadd float %157, %274, !dbg !53
  %301 = fsub float %300, %276, !dbg !59
  %302 = fadd float %156, %274, !dbg !53
  %303 = fsub float %302, %276, !dbg !59
  %304 = fadd float %155, %274, !dbg !53
  %305 = fsub float %304, %276, !dbg !59
  %306 = fadd float %154, %274, !dbg !53
  %307 = fsub float %306, %276, !dbg !59
  %308 = bitcast i32 %125 to float, !dbg !25
  %309 = fadd float %122, %308, !dbg !52
  %310 = bitcast i32 %185 to float, !dbg !31
  %311 = fsub float %309, %310, !dbg !60
  %312 = fmul float %311, %260, !dbg !61
  %313 = bitcast i32 %190 to float, !dbg !35
  %314 = fmul float %312, %313, !dbg !62
  %315 = bitcast i32 %192 to float, !dbg !37
  %316 = fadd float %314, %315, !dbg !63
  %317 = fadd float %121, %308, !dbg !52
  %318 = fsub float %317, %310, !dbg !60
  %319 = fmul float %318, %260, !dbg !61
  %320 = fmul float %319, %313, !dbg !62
  %321 = fadd float %320, %315, !dbg !63
  %322 = fadd float %120, %308, !dbg !52
  %323 = fsub float %322, %310, !dbg !60
  %324 = fmul float %323, %260, !dbg !61
  %325 = fmul float %324, %313, !dbg !62
  %326 = fadd float %325, %315, !dbg !63
  %327 = fadd float %119, %308, !dbg !52
  %328 = fsub float %327, %310, !dbg !60
  %329 = fmul float %328, %260, !dbg !61
  %330 = fmul float %329, %313, !dbg !62
  %331 = fadd float %330, %315, !dbg !63
  %332 = fadd float %114, %308, !dbg !52
  %333 = fsub float %332, %310, !dbg !60
  %334 = fmul float %333, %260, !dbg !61
  %335 = fmul float %334, %313, !dbg !62
  %336 = fadd float %335, %315, !dbg !63
  %337 = fadd float %113, %308, !dbg !52
  %338 = fsub float %337, %310, !dbg !60
  %339 = fmul float %338, %260, !dbg !61
  %340 = fmul float %339, %313, !dbg !62
  %341 = fadd float %340, %315, !dbg !63
  %342 = fadd float %112, %308, !dbg !52
  %343 = fsub float %342, %310, !dbg !60
  %344 = fmul float %343, %260, !dbg !61
  %345 = fmul float %344, %313, !dbg !62
  %346 = fadd float %345, %315, !dbg !63
  %347 = fadd float %111, %308, !dbg !52
  %348 = fsub float %347, %310, !dbg !60
  %349 = fmul float %348, %260, !dbg !61
  %350 = fmul float %349, %313, !dbg !62
  %351 = fadd float %350, %315, !dbg !63
  %352 = fadd float %106, %308, !dbg !52
  %353 = fsub float %352, %310, !dbg !60
  %354 = fmul float %353, %260, !dbg !61
  %355 = fmul float %354, %313, !dbg !62
  %356 = fadd float %355, %315, !dbg !63
  %357 = fadd float %105, %308, !dbg !52
  %358 = fsub float %357, %310, !dbg !60
  %359 = fmul float %358, %260, !dbg !61
  %360 = fmul float %359, %313, !dbg !62
  %361 = fadd float %360, %315, !dbg !63
  %362 = fadd float %104, %308, !dbg !52
  %363 = fsub float %362, %310, !dbg !60
  %364 = fmul float %363, %260, !dbg !61
  %365 = fmul float %364, %313, !dbg !62
  %366 = fadd float %365, %315, !dbg !63
  %367 = fadd float %103, %308, !dbg !52
  %368 = fsub float %367, %310, !dbg !60
  %369 = fmul float %368, %260, !dbg !61
  %370 = fmul float %369, %313, !dbg !62
  %371 = fadd float %370, %315, !dbg !63
  %372 = fadd float %98, %308, !dbg !52
  %373 = fsub float %372, %310, !dbg !60
  %374 = fmul float %373, %260, !dbg !61
  %375 = fmul float %374, %313, !dbg !62
  %376 = fadd float %375, %315, !dbg !63
  %377 = fadd float %96, %308, !dbg !52
  %378 = fsub float %377, %310, !dbg !60
  %379 = fmul float %378, %260, !dbg !61
  %380 = fmul float %379, %313, !dbg !62
  %381 = fadd float %380, %315, !dbg !63
  %382 = fadd float %94, %308, !dbg !52
  %383 = fsub float %382, %310, !dbg !60
  %384 = fmul float %383, %260, !dbg !61
  %385 = fmul float %384, %313, !dbg !62
  %386 = fadd float %385, %315, !dbg !63
  %387 = fadd float %92, %308, !dbg !52
  %388 = fsub float %387, %310, !dbg !60
  %389 = fmul float %388, %260, !dbg !61
  %390 = fmul float %389, %313, !dbg !62
  %391 = fadd float %390, %315, !dbg !63
  %392 = bitcast i32 %149 to float, !dbg !27
  %393 = fadd float %246, %392, !dbg !53
  %394 = bitcast i32 %148 to float, !dbg !27
  %395 = fadd float %245, %394, !dbg !53
  %396 = bitcast i32 %147 to float, !dbg !27
  %397 = fadd float %244, %396, !dbg !53
  %398 = bitcast i32 %146 to float, !dbg !27
  %399 = fadd float %243, %398, !dbg !53
  %400 = bitcast i32 %144 to float, !dbg !27
  %401 = fadd float %246, %400, !dbg !53
  %402 = bitcast i32 %143 to float, !dbg !27
  %403 = fadd float %245, %402, !dbg !53
  %404 = bitcast i32 %142 to float, !dbg !27
  %405 = fadd float %244, %404, !dbg !53
  %406 = bitcast i32 %141 to float, !dbg !27
  %407 = fadd float %243, %406, !dbg !53
  %408 = bitcast i32 %139 to float, !dbg !27
  %409 = fadd float %246, %408, !dbg !53
  %410 = bitcast i32 %138 to float, !dbg !27
  %411 = fadd float %245, %410, !dbg !53
  %412 = bitcast i32 %137 to float, !dbg !27
  %413 = fadd float %244, %412, !dbg !53
  %414 = bitcast i32 %136 to float, !dbg !27
  %415 = fadd float %243, %414, !dbg !53
  %416 = bitcast i32 %134 to float, !dbg !27
  %417 = fadd float %246, %416, !dbg !53
  %418 = bitcast i32 %133 to float, !dbg !27
  %419 = fadd float %245, %418, !dbg !53
  %420 = bitcast i32 %132 to float, !dbg !27
  %421 = fadd float %244, %420, !dbg !53
  %422 = bitcast i32 %131 to float, !dbg !27
  %423 = fadd float %243, %422, !dbg !53
  %424 = bitcast i32 %75 to float, !dbg !23
  %425 = fadd float %241, %424, !dbg !52
  %426 = bitcast i32 %74 to float, !dbg !23
  %427 = fadd float %238, %426, !dbg !52
  %428 = bitcast i32 %73 to float, !dbg !23
  %429 = fadd float %235, %428, !dbg !52
  %430 = bitcast i32 %72 to float, !dbg !23
  %431 = fadd float %232, %430, !dbg !52
  %432 = bitcast i32 %70 to float, !dbg !23
  %433 = fadd float %241, %432, !dbg !52
  %434 = bitcast i32 %69 to float, !dbg !23
  %435 = fadd float %238, %434, !dbg !52
  %436 = bitcast i32 %68 to float, !dbg !23
  %437 = fadd float %235, %436, !dbg !52
  %438 = bitcast i32 %67 to float, !dbg !23
  %439 = fadd float %232, %438, !dbg !52
  %440 = bitcast i32 %65 to float, !dbg !23
  %441 = fadd float %241, %440, !dbg !52
  %442 = bitcast i32 %64 to float, !dbg !23
  %443 = fadd float %238, %442, !dbg !52
  %444 = bitcast i32 %63 to float, !dbg !23
  %445 = fadd float %235, %444, !dbg !52
  %446 = bitcast i32 %62 to float, !dbg !23
  %447 = fadd float %232, %446, !dbg !52
  %448 = bitcast i32 %60 to float, !dbg !23
  %449 = fadd float %241, %448, !dbg !52
  %450 = bitcast i32 %59 to float, !dbg !23
  %451 = fadd float %238, %450, !dbg !52
  %452 = bitcast i32 %58 to float, !dbg !23
  %453 = fadd float %235, %452, !dbg !52
  %454 = bitcast i32 %57 to float, !dbg !23
  %455 = fadd float %232, %454, !dbg !52
  %456 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !51
  %457 = bitcast i32 %456 to float, !dbg !51
  %458 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !51
  %459 = bitcast i32 %458 to float, !dbg !51
  %460 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !51
  %461 = bitcast i32 %460 to float, !dbg !51
  %462 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !51
  %463 = bitcast i32 %462 to float, !dbg !51
  %464 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !51
  %465 = bitcast i32 %464 to float, !dbg !51
  %466 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !51
  %467 = bitcast i32 %466 to float, !dbg !51
  %468 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !51
  %469 = bitcast i32 %468 to float, !dbg !51
  %470 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !51
  %471 = bitcast i32 %470 to float, !dbg !51
  %472 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !51
  %473 = bitcast i32 %472 to float, !dbg !51
  %474 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !51
  %475 = bitcast i32 %474 to float, !dbg !51
  %476 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !51
  %477 = bitcast i32 %476 to float, !dbg !51
  %478 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !51
  %479 = bitcast i32 %478 to float, !dbg !51
  %480 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !51
  %481 = bitcast i32 %480 to float, !dbg !51
  %482 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !51
  %483 = bitcast i32 %482 to float, !dbg !51
  %484 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !51
  %485 = bitcast i32 %484 to float, !dbg !51
  %486 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !51
  %487 = bitcast i32 %486 to float, !dbg !51
  %488 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !49
  %489 = bitcast i32 %488 to float, !dbg !49
  %490 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !49
  %491 = bitcast i32 %490 to float, !dbg !49
  %492 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !49
  %493 = bitcast i32 %492 to float, !dbg !49
  %494 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !49
  %495 = bitcast i32 %494 to float, !dbg !49
  %496 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !49
  %497 = bitcast i32 %496 to float, !dbg !49
  %498 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !49
  %499 = bitcast i32 %498 to float, !dbg !49
  %500 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !49
  %501 = bitcast i32 %500 to float, !dbg !49
  %502 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !49
  %503 = bitcast i32 %502 to float, !dbg !49
  %504 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !49
  %505 = bitcast i32 %504 to float, !dbg !49
  %506 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !49
  %507 = bitcast i32 %506 to float, !dbg !49
  %508 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !49
  %509 = bitcast i32 %508 to float, !dbg !49
  %510 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !49
  %511 = bitcast i32 %510 to float, !dbg !49
  %512 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !49
  %513 = bitcast i32 %512 to float, !dbg !49
  %514 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !49
  %515 = bitcast i32 %514 to float, !dbg !49
  %516 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !49
  %517 = bitcast i32 %516 to float, !dbg !49
  %518 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !49
  %519 = bitcast i32 %518 to float, !dbg !49
  %520 = bitcast i32 %201 to float, !dbg !45
  %521 = bitcast i32 %199 to float, !dbg !43
  %522 = and i32 %23, 12, !dbg !12
  %523 = or disjoint i32 %19, %522, !dbg !13
  %.frozen = freeze i32 %523, !dbg !19
  %524 = sdiv i32 %.frozen, 4096, !dbg !19
  %525 = mul i32 %524, 4096, !dbg !64
  %.decomposed = sub i32 %.frozen, %525, !dbg !64
  %526 = lshr i32 %20, 2, !dbg !16
  %527 = and i32 %526, 63, !dbg !16
  %528 = or disjoint i32 %527, %29, !dbg !17
  %529 = or disjoint i32 %528, 192, !dbg !17
  %530 = icmp slt i32 %529, 512, !dbg !18
  %531 = or disjoint i32 %528, 128, !dbg !17
  %532 = icmp slt i32 %531, 512, !dbg !18
  %533 = or disjoint i32 %528, 64, !dbg !17
  %534 = icmp slt i32 %533, 512, !dbg !18
  %535 = icmp slt i32 %528, 512, !dbg !18
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !65
  %537 = fmul float %307, %536, !dbg !66
  %538 = fmul float %305, %536, !dbg !66
  %539 = fmul float %303, %536, !dbg !66
  %540 = fmul float %301, %536, !dbg !66
  %541 = fmul float %299, %536, !dbg !66
  %542 = fmul float %297, %536, !dbg !66
  %543 = fmul float %295, %536, !dbg !66
  %544 = fmul float %293, %536, !dbg !66
  %545 = fmul float %291, %536, !dbg !66
  %546 = fmul float %289, %536, !dbg !66
  %547 = fmul float %287, %536, !dbg !66
  %548 = fmul float %285, %536, !dbg !66
  %549 = fmul float %283, %536, !dbg !66
  %550 = fmul float %281, %536, !dbg !66
  %551 = fmul float %279, %536, !dbg !66
  %552 = fmul float %277, %536, !dbg !66
  %553 = fmul float %537, %521, !dbg !67
  %554 = fmul float %538, %521, !dbg !67
  %555 = fmul float %539, %521, !dbg !67
  %556 = fmul float %540, %521, !dbg !67
  %557 = fmul float %541, %521, !dbg !67
  %558 = fmul float %542, %521, !dbg !67
  %559 = fmul float %543, %521, !dbg !67
  %560 = fmul float %544, %521, !dbg !67
  %561 = fmul float %545, %521, !dbg !67
  %562 = fmul float %546, %521, !dbg !67
  %563 = fmul float %547, %521, !dbg !67
  %564 = fmul float %548, %521, !dbg !67
  %565 = fmul float %549, %521, !dbg !67
  %566 = fmul float %550, %521, !dbg !67
  %567 = fmul float %551, %521, !dbg !67
  %568 = fmul float %552, %521, !dbg !67
  %569 = fadd float %553, %520, !dbg !68
  %570 = fadd float %554, %520, !dbg !68
  %571 = fadd float %555, %520, !dbg !68
  %572 = fadd float %556, %520, !dbg !68
  %573 = fadd float %557, %520, !dbg !68
  %574 = fadd float %558, %520, !dbg !68
  %575 = fadd float %559, %520, !dbg !68
  %576 = fadd float %560, %520, !dbg !68
  %577 = fadd float %561, %520, !dbg !68
  %578 = fadd float %562, %520, !dbg !68
  %579 = fadd float %563, %520, !dbg !68
  %580 = fadd float %564, %520, !dbg !68
  %581 = fadd float %565, %520, !dbg !68
  %582 = fadd float %566, %520, !dbg !68
  %583 = fadd float %567, %520, !dbg !68
  %584 = fadd float %568, %520, !dbg !68
  %585 = fadd float %391, %569, !dbg !69
  %586 = fadd float %386, %570, !dbg !69
  %587 = fadd float %381, %571, !dbg !69
  %588 = fadd float %376, %572, !dbg !69
  %589 = fadd float %371, %573, !dbg !69
  %590 = fadd float %366, %574, !dbg !69
  %591 = fadd float %361, %575, !dbg !69
  %592 = fadd float %356, %576, !dbg !69
  %593 = fadd float %351, %577, !dbg !69
  %594 = fadd float %346, %578, !dbg !69
  %595 = fadd float %341, %579, !dbg !69
  %596 = fadd float %336, %580, !dbg !69
  %597 = fadd float %331, %581, !dbg !69
  %598 = fadd float %326, %582, !dbg !69
  %599 = fadd float %321, %583, !dbg !69
  %600 = fadd float %316, %584, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %601 = bitcast float %585 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %601, i1 true) #4, !dbg !69
  %602 = bitcast float %586 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %602, i1 true) #4, !dbg !69
  %603 = bitcast float %587 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %603, i1 true) #4, !dbg !69
  %604 = bitcast float %588 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %604, i1 true) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %605 = load float, ptr addrspace(3) %79, align 4, !dbg !69
  %606 = load float, ptr addrspace(3) %83, align 4, !dbg !69
  %607 = load float, ptr addrspace(3) %86, align 4, !dbg !69
  %608 = load float, ptr addrspace(3) %89, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %609 = bitcast float %589 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %609, i1 true) #4, !dbg !69
  %610 = bitcast float %590 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %610, i1 true) #4, !dbg !69
  %611 = bitcast float %591 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %611, i1 true) #4, !dbg !69
  %612 = bitcast float %592 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %612, i1 true) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %613 = load float, ptr addrspace(3) %79, align 4, !dbg !69
  %614 = load float, ptr addrspace(3) %83, align 4, !dbg !69
  %615 = load float, ptr addrspace(3) %86, align 4, !dbg !69
  %616 = load float, ptr addrspace(3) %89, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %617 = bitcast float %593 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %617, i1 true) #4, !dbg !69
  %618 = bitcast float %594 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %618, i1 true) #4, !dbg !69
  %619 = bitcast float %595 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %619, i1 true) #4, !dbg !69
  %620 = bitcast float %596 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %620, i1 true) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %621 = load float, ptr addrspace(3) %79, align 4, !dbg !69
  %622 = load float, ptr addrspace(3) %83, align 4, !dbg !69
  %623 = load float, ptr addrspace(3) %86, align 4, !dbg !69
  %624 = load float, ptr addrspace(3) %89, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %625 = bitcast float %597 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %625, i1 true) #4, !dbg !69
  %626 = bitcast float %598 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %626, i1 true) #4, !dbg !69
  %627 = bitcast float %599 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %627, i1 true) #4, !dbg !69
  %628 = bitcast float %600 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %628, i1 true) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %629 = load float, ptr addrspace(3) %79, align 4, !dbg !69
  %630 = load float, ptr addrspace(3) %83, align 4, !dbg !69
  %631 = load float, ptr addrspace(3) %86, align 4, !dbg !69
  %632 = load float, ptr addrspace(3) %89, align 4, !dbg !69
  %633 = fsub float 0.000000e+00, %519, !dbg !70
  %634 = fsub float 0.000000e+00, %517, !dbg !70
  %635 = fsub float 0.000000e+00, %515, !dbg !70
  %636 = fsub float 0.000000e+00, %513, !dbg !70
  %637 = fsub float 0.000000e+00, %511, !dbg !70
  %638 = fsub float 0.000000e+00, %509, !dbg !70
  %639 = fsub float 0.000000e+00, %507, !dbg !70
  %640 = fsub float 0.000000e+00, %505, !dbg !70
  %641 = fsub float 0.000000e+00, %503, !dbg !70
  %642 = fsub float 0.000000e+00, %501, !dbg !70
  %643 = fsub float 0.000000e+00, %499, !dbg !70
  %644 = fsub float 0.000000e+00, %497, !dbg !70
  %645 = fsub float 0.000000e+00, %495, !dbg !70
  %646 = fsub float 0.000000e+00, %493, !dbg !70
  %647 = fsub float 0.000000e+00, %491, !dbg !70
  %648 = fsub float 0.000000e+00, %489, !dbg !70
  %649 = fmul float %633, 0x3FF7154760000000, !dbg !74
  %650 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %649) #4, !dbg !74
  %651 = fmul float %634, 0x3FF7154760000000, !dbg !74
  %652 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %651) #4, !dbg !74
  %653 = fmul float %635, 0x3FF7154760000000, !dbg !74
  %654 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %653) #4, !dbg !74
  %655 = fmul float %636, 0x3FF7154760000000, !dbg !74
  %656 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %655) #4, !dbg !74
  %657 = fmul float %637, 0x3FF7154760000000, !dbg !74
  %658 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %657) #4, !dbg !74
  %659 = fmul float %638, 0x3FF7154760000000, !dbg !74
  %660 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %659) #4, !dbg !74
  %661 = fmul float %639, 0x3FF7154760000000, !dbg !74
  %662 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %661) #4, !dbg !74
  %663 = fmul float %640, 0x3FF7154760000000, !dbg !74
  %664 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %663) #4, !dbg !74
  %665 = fmul float %641, 0x3FF7154760000000, !dbg !74
  %666 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %665) #4, !dbg !74
  %667 = fmul float %642, 0x3FF7154760000000, !dbg !74
  %668 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %667) #4, !dbg !74
  %669 = fmul float %643, 0x3FF7154760000000, !dbg !74
  %670 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %669) #4, !dbg !74
  %671 = fmul float %644, 0x3FF7154760000000, !dbg !74
  %672 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %671) #4, !dbg !74
  %673 = fmul float %645, 0x3FF7154760000000, !dbg !74
  %674 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %673) #4, !dbg !74
  %675 = fmul float %646, 0x3FF7154760000000, !dbg !74
  %676 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %675) #4, !dbg !74
  %677 = fmul float %647, 0x3FF7154760000000, !dbg !74
  %678 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %677) #4, !dbg !74
  %679 = fmul float %648, 0x3FF7154760000000, !dbg !74
  %680 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %679) #4, !dbg !74
  %681 = fadd float %650, 1.000000e+00, !dbg !75
  %682 = fadd float %652, 1.000000e+00, !dbg !75
  %683 = fadd float %654, 1.000000e+00, !dbg !75
  %684 = fadd float %656, 1.000000e+00, !dbg !75
  %685 = fadd float %658, 1.000000e+00, !dbg !75
  %686 = fadd float %660, 1.000000e+00, !dbg !75
  %687 = fadd float %662, 1.000000e+00, !dbg !75
  %688 = fadd float %664, 1.000000e+00, !dbg !75
  %689 = fadd float %666, 1.000000e+00, !dbg !75
  %690 = fadd float %668, 1.000000e+00, !dbg !75
  %691 = fadd float %670, 1.000000e+00, !dbg !75
  %692 = fadd float %672, 1.000000e+00, !dbg !75
  %693 = fadd float %674, 1.000000e+00, !dbg !75
  %694 = fadd float %676, 1.000000e+00, !dbg !75
  %695 = fadd float %678, 1.000000e+00, !dbg !75
  %696 = fadd float %680, 1.000000e+00, !dbg !75
  %697 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %681) #4, !dbg !76
  %698 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %682) #4, !dbg !76
  %699 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %683) #4, !dbg !76
  %700 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %684) #4, !dbg !76
  %701 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %685) #4, !dbg !76
  %702 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %686) #4, !dbg !76
  %703 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %687) #4, !dbg !76
  %704 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %688) #4, !dbg !76
  %705 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %689) #4, !dbg !76
  %706 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %690) #4, !dbg !76
  %707 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %691) #4, !dbg !76
  %708 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %692) #4, !dbg !76
  %709 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %693) #4, !dbg !76
  %710 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %694) #4, !dbg !76
  %711 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %695) #4, !dbg !76
  %712 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %696) #4, !dbg !76
  %713 = fmul float %697, %487, !dbg !77
  %714 = fmul float %698, %485, !dbg !77
  %715 = fmul float %699, %483, !dbg !77
  %716 = fmul float %700, %481, !dbg !77
  %717 = fmul float %701, %479, !dbg !77
  %718 = fmul float %702, %477, !dbg !77
  %719 = fmul float %703, %475, !dbg !77
  %720 = fmul float %704, %473, !dbg !77
  %721 = fmul float %705, %471, !dbg !77
  %722 = fmul float %706, %469, !dbg !77
  %723 = fmul float %707, %467, !dbg !77
  %724 = fmul float %708, %465, !dbg !77
  %725 = fmul float %709, %463, !dbg !77
  %726 = fmul float %710, %461, !dbg !77
  %727 = fmul float %711, %459, !dbg !77
  %728 = fmul float %712, %457, !dbg !77
  %729 = fadd float %605, %713, !dbg !78
  %730 = fadd float %606, %714, !dbg !78
  %731 = fadd float %607, %715, !dbg !78
  %732 = fadd float %608, %716, !dbg !78
  %733 = fadd float %613, %717, !dbg !78
  %734 = fadd float %614, %718, !dbg !78
  %735 = fadd float %615, %719, !dbg !78
  %736 = fadd float %616, %720, !dbg !78
  %737 = fadd float %621, %721, !dbg !78
  %738 = fadd float %622, %722, !dbg !78
  %739 = fadd float %623, %723, !dbg !78
  %740 = fadd float %624, %724, !dbg !78
  %741 = fadd float %629, %725, !dbg !78
  %742 = fadd float %630, %726, !dbg !78
  %743 = fadd float %631, %727, !dbg !78
  %744 = fadd float %632, %728, !dbg !78
  %745 = fsub float 0.000000e+00, %729, !dbg !79
  %746 = fsub float 0.000000e+00, %730, !dbg !79
  %747 = fsub float 0.000000e+00, %731, !dbg !79
  %748 = fsub float 0.000000e+00, %732, !dbg !79
  %749 = fsub float 0.000000e+00, %733, !dbg !79
  %750 = fsub float 0.000000e+00, %734, !dbg !79
  %751 = fsub float 0.000000e+00, %735, !dbg !79
  %752 = fsub float 0.000000e+00, %736, !dbg !79
  %753 = fsub float 0.000000e+00, %737, !dbg !79
  %754 = fsub float 0.000000e+00, %738, !dbg !79
  %755 = fsub float 0.000000e+00, %739, !dbg !79
  %756 = fsub float 0.000000e+00, %740, !dbg !79
  %757 = fsub float 0.000000e+00, %741, !dbg !79
  %758 = fsub float 0.000000e+00, %742, !dbg !79
  %759 = fsub float 0.000000e+00, %743, !dbg !79
  %760 = fsub float 0.000000e+00, %744, !dbg !79
  %761 = fmul float %745, 0x3FF7154760000000, !dbg !81
  %762 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %761) #4, !dbg !81
  %763 = fmul float %746, 0x3FF7154760000000, !dbg !81
  %764 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %763) #4, !dbg !81
  %765 = fmul float %747, 0x3FF7154760000000, !dbg !81
  %766 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %765) #4, !dbg !81
  %767 = fmul float %748, 0x3FF7154760000000, !dbg !81
  %768 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %767) #4, !dbg !81
  %769 = fmul float %749, 0x3FF7154760000000, !dbg !81
  %770 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %769) #4, !dbg !81
  %771 = fmul float %750, 0x3FF7154760000000, !dbg !81
  %772 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %771) #4, !dbg !81
  %773 = fmul float %751, 0x3FF7154760000000, !dbg !81
  %774 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %773) #4, !dbg !81
  %775 = fmul float %752, 0x3FF7154760000000, !dbg !81
  %776 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %775) #4, !dbg !81
  %777 = fmul float %753, 0x3FF7154760000000, !dbg !81
  %778 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %777) #4, !dbg !81
  %779 = fmul float %754, 0x3FF7154760000000, !dbg !81
  %780 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %779) #4, !dbg !81
  %781 = fmul float %755, 0x3FF7154760000000, !dbg !81
  %782 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %781) #4, !dbg !81
  %783 = fmul float %756, 0x3FF7154760000000, !dbg !81
  %784 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %783) #4, !dbg !81
  %785 = fmul float %757, 0x3FF7154760000000, !dbg !81
  %786 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %785) #4, !dbg !81
  %787 = fmul float %758, 0x3FF7154760000000, !dbg !81
  %788 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %787) #4, !dbg !81
  %789 = fmul float %759, 0x3FF7154760000000, !dbg !81
  %790 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %789) #4, !dbg !81
  %791 = fmul float %760, 0x3FF7154760000000, !dbg !81
  %792 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %791) #4, !dbg !81
  %793 = fadd float %762, 1.000000e+00, !dbg !82
  %794 = fadd float %764, 1.000000e+00, !dbg !82
  %795 = fadd float %766, 1.000000e+00, !dbg !82
  %796 = fadd float %768, 1.000000e+00, !dbg !82
  %797 = fadd float %770, 1.000000e+00, !dbg !82
  %798 = fadd float %772, 1.000000e+00, !dbg !82
  %799 = fadd float %774, 1.000000e+00, !dbg !82
  %800 = fadd float %776, 1.000000e+00, !dbg !82
  %801 = fadd float %778, 1.000000e+00, !dbg !82
  %802 = fadd float %780, 1.000000e+00, !dbg !82
  %803 = fadd float %782, 1.000000e+00, !dbg !82
  %804 = fadd float %784, 1.000000e+00, !dbg !82
  %805 = fadd float %786, 1.000000e+00, !dbg !82
  %806 = fadd float %788, 1.000000e+00, !dbg !82
  %807 = fadd float %790, 1.000000e+00, !dbg !82
  %808 = fadd float %792, 1.000000e+00, !dbg !82
  %809 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %793) #4, !dbg !83
  %810 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %794) #4, !dbg !83
  %811 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %795) #4, !dbg !83
  %812 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %796) #4, !dbg !83
  %813 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %797) #4, !dbg !83
  %814 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %798) #4, !dbg !83
  %815 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %799) #4, !dbg !83
  %816 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %800) #4, !dbg !83
  %817 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %801) #4, !dbg !83
  %818 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %802) #4, !dbg !83
  %819 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %803) #4, !dbg !83
  %820 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %804) #4, !dbg !83
  %821 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %805) #4, !dbg !83
  %822 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %806) #4, !dbg !83
  %823 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %807) #4, !dbg !83
  %824 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %808) #4, !dbg !83
  %825 = fmul float %729, %809, !dbg !84
  %826 = fmul float %730, %810, !dbg !84
  %827 = fmul float %731, %811, !dbg !84
  %828 = fmul float %732, %812, !dbg !84
  %829 = fmul float %733, %813, !dbg !84
  %830 = fmul float %734, %814, !dbg !84
  %831 = fmul float %735, %815, !dbg !84
  %832 = fmul float %736, %816, !dbg !84
  %833 = fmul float %737, %817, !dbg !84
  %834 = fmul float %738, %818, !dbg !84
  %835 = fmul float %739, %819, !dbg !84
  %836 = fmul float %740, %820, !dbg !84
  %837 = fmul float %741, %821, !dbg !84
  %838 = fmul float %742, %822, !dbg !84
  %839 = fmul float %743, %823, !dbg !84
  %840 = fmul float %744, %824, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %841 = bitcast float %455 to i32, !dbg !86
  %842 = bitcast float %453 to i32, !dbg !86
  %843 = bitcast float %451 to i32, !dbg !86
  %844 = bitcast float %449 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %841, i32 %842, i32 %843, i32 %844, ptr addrspace(1) %49, i1 %34) #4, !dbg !86
  %845 = bitcast float %447 to i32, !dbg !86
  %846 = bitcast float %445 to i32, !dbg !86
  %847 = bitcast float %443 to i32, !dbg !86
  %848 = bitcast float %441 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %845, i32 %846, i32 %847, i32 %848, ptr addrspace(1) %51, i1 %34) #4, !dbg !86
  %849 = bitcast float %439 to i32, !dbg !86
  %850 = bitcast float %437 to i32, !dbg !86
  %851 = bitcast float %435 to i32, !dbg !86
  %852 = bitcast float %433 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %849, i32 %850, i32 %851, i32 %852, ptr addrspace(1) %53, i1 %34) #4, !dbg !86
  %853 = bitcast float %431 to i32, !dbg !86
  %854 = bitcast float %429 to i32, !dbg !86
  %855 = bitcast float %427 to i32, !dbg !86
  %856 = bitcast float %425 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %853, i32 %854, i32 %855, i32 %856, ptr addrspace(1) %55, i1 %34) #4, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %857 = bitcast float %423 to i32, !dbg !88
  %858 = bitcast float %421 to i32, !dbg !88
  %859 = bitcast float %419 to i32, !dbg !88
  %860 = bitcast float %417 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %857, i32 %858, i32 %859, i32 %860, ptr addrspace(1) %126, i1 %34) #4, !dbg !88
  %861 = bitcast float %415 to i32, !dbg !88
  %862 = bitcast float %413 to i32, !dbg !88
  %863 = bitcast float %411 to i32, !dbg !88
  %864 = bitcast float %409 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %861, i32 %862, i32 %863, i32 %864, ptr addrspace(1) %127, i1 %34) #4, !dbg !88
  %865 = bitcast float %407 to i32, !dbg !88
  %866 = bitcast float %405 to i32, !dbg !88
  %867 = bitcast float %403 to i32, !dbg !88
  %868 = bitcast float %401 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %865, i32 %866, i32 %867, i32 %868, ptr addrspace(1) %128, i1 %34) #4, !dbg !88
  %869 = bitcast float %399 to i32, !dbg !88
  %870 = bitcast float %397 to i32, !dbg !88
  %871 = bitcast float %395 to i32, !dbg !88
  %872 = bitcast float %393 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %869, i32 %870, i32 %871, i32 %872, ptr addrspace(1) %129, i1 %34) #4, !dbg !88
  %873 = shl i32 %528, 12, !dbg !89
  %874 = shl i32 %533, 12, !dbg !89
  %875 = shl i32 %531, 12, !dbg !89
  %876 = shl i32 %529, 12, !dbg !89
  %877 = shl i32 %524, 21, !dbg !90
  %878 = add i32 %877, %.decomposed, !dbg !91
  %879 = add i32 %878, %873, !dbg !92
  %880 = add i32 %878, %874, !dbg !92
  %881 = add i32 %878, %875, !dbg !92
  %882 = add i32 %878, %876, !dbg !92
  %883 = sext i32 %879 to i64, !dbg !93
  %884 = getelementptr float, ptr addrspace(1) %14, i64 %883, !dbg !93
  %885 = sext i32 %880 to i64, !dbg !93
  %886 = getelementptr float, ptr addrspace(1) %14, i64 %885, !dbg !93
  %887 = sext i32 %881 to i64, !dbg !93
  %888 = getelementptr float, ptr addrspace(1) %14, i64 %887, !dbg !93
  %889 = sext i32 %882 to i64, !dbg !93
  %890 = getelementptr float, ptr addrspace(1) %14, i64 %889, !dbg !93
  %891 = shl i32 %20, 6, !dbg !94
  %892 = and i32 %891, 4032, !dbg !94
  %893 = or disjoint i32 %892, %22, !dbg !94
  %894 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %892, !dbg !94
  %895 = getelementptr float, ptr addrspace(3) %894, i32 %893, !dbg !94
  %896 = bitcast float %825 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %895, <1 x i32> %896, i1 true) #4, !dbg !94
  %897 = or disjoint i32 %893, 16, !dbg !94
  %898 = lshr i32 %897, 2, !dbg !94
  %899 = getelementptr float, ptr addrspace(3) @global_smem, i32 %898, !dbg !94
  %900 = getelementptr float, ptr addrspace(3) %899, i32 %897, !dbg !94
  %901 = bitcast float %826 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %900, <1 x i32> %901, i1 true) #4, !dbg !94
  %902 = or disjoint i32 %893, 32, !dbg !94
  %903 = lshr i32 %902, 2, !dbg !94
  %904 = getelementptr float, ptr addrspace(3) @global_smem, i32 %903, !dbg !94
  %905 = getelementptr float, ptr addrspace(3) %904, i32 %902, !dbg !94
  %906 = bitcast float %827 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %905, <1 x i32> %906, i1 true) #4, !dbg !94
  %907 = or disjoint i32 %893, 48, !dbg !94
  %908 = lshr i32 %907, 2, !dbg !94
  %909 = getelementptr float, ptr addrspace(3) @global_smem, i32 %908, !dbg !94
  %910 = getelementptr float, ptr addrspace(3) %909, i32 %907, !dbg !94
  %911 = bitcast float %828 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %910, <1 x i32> %911, i1 true) #4, !dbg !94
  %912 = or disjoint i32 %893, 4, !dbg !94
  %913 = getelementptr float, ptr addrspace(3) %894, i32 %912, !dbg !94
  %914 = bitcast float %829 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %913, <1 x i32> %914, i1 true) #4, !dbg !94
  %915 = or disjoint i32 %893, 20, !dbg !94
  %916 = lshr i32 %915, 2, !dbg !94
  %917 = and i32 %916, 1012, !dbg !94
  %918 = getelementptr float, ptr addrspace(3) @global_smem, i32 %917, !dbg !94
  %919 = getelementptr float, ptr addrspace(3) %918, i32 %915, !dbg !94
  %920 = bitcast float %830 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %919, <1 x i32> %920, i1 true) #4, !dbg !94
  %921 = or disjoint i32 %893, 36, !dbg !94
  %922 = lshr i32 %921, 2, !dbg !94
  %923 = and i32 %922, 1016, !dbg !94
  %924 = getelementptr float, ptr addrspace(3) @global_smem, i32 %923, !dbg !94
  %925 = getelementptr float, ptr addrspace(3) %924, i32 %921, !dbg !94
  %926 = bitcast float %831 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %925, <1 x i32> %926, i1 true) #4, !dbg !94
  %927 = or disjoint i32 %893, 52, !dbg !94
  %928 = lshr i32 %927, 2, !dbg !94
  %929 = and i32 %928, 1020, !dbg !94
  %930 = getelementptr float, ptr addrspace(3) @global_smem, i32 %929, !dbg !94
  %931 = getelementptr float, ptr addrspace(3) %930, i32 %927, !dbg !94
  %932 = bitcast float %832 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %931, <1 x i32> %932, i1 true) #4, !dbg !94
  %933 = or disjoint i32 %893, 8, !dbg !94
  %934 = getelementptr float, ptr addrspace(3) %894, i32 %933, !dbg !94
  %935 = bitcast float %833 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %934, <1 x i32> %935, i1 true) #4, !dbg !94
  %936 = or disjoint i32 %893, 24, !dbg !94
  %937 = lshr i32 %936, 2, !dbg !94
  %938 = and i32 %937, 1012, !dbg !94
  %939 = getelementptr float, ptr addrspace(3) @global_smem, i32 %938, !dbg !94
  %940 = getelementptr float, ptr addrspace(3) %939, i32 %936, !dbg !94
  %941 = bitcast float %834 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %940, <1 x i32> %941, i1 true) #4, !dbg !94
  %942 = or disjoint i32 %893, 40, !dbg !94
  %943 = lshr i32 %942, 2, !dbg !94
  %944 = and i32 %943, 1016, !dbg !94
  %945 = getelementptr float, ptr addrspace(3) @global_smem, i32 %944, !dbg !94
  %946 = getelementptr float, ptr addrspace(3) %945, i32 %942, !dbg !94
  %947 = bitcast float %835 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %946, <1 x i32> %947, i1 true) #4, !dbg !94
  %948 = or disjoint i32 %893, 56, !dbg !94
  %949 = lshr i32 %948, 2, !dbg !94
  %950 = and i32 %949, 1020, !dbg !94
  %951 = getelementptr float, ptr addrspace(3) @global_smem, i32 %950, !dbg !94
  %952 = getelementptr float, ptr addrspace(3) %951, i32 %948, !dbg !94
  %953 = bitcast float %836 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %952, <1 x i32> %953, i1 true) #4, !dbg !94
  %954 = or disjoint i32 %893, 12, !dbg !94
  %955 = getelementptr float, ptr addrspace(3) %894, i32 %954, !dbg !94
  %956 = bitcast float %837 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %955, <1 x i32> %956, i1 true) #4, !dbg !94
  %957 = or disjoint i32 %893, 28, !dbg !94
  %958 = lshr i32 %957, 2, !dbg !94
  %959 = and i32 %958, 1012, !dbg !94
  %960 = getelementptr float, ptr addrspace(3) @global_smem, i32 %959, !dbg !94
  %961 = getelementptr float, ptr addrspace(3) %960, i32 %957, !dbg !94
  %962 = bitcast float %838 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %961, <1 x i32> %962, i1 true) #4, !dbg !94
  %963 = or disjoint i32 %893, 44, !dbg !94
  %964 = lshr i32 %963, 2, !dbg !94
  %965 = and i32 %964, 1016, !dbg !94
  %966 = getelementptr float, ptr addrspace(3) @global_smem, i32 %965, !dbg !94
  %967 = getelementptr float, ptr addrspace(3) %966, i32 %963, !dbg !94
  %968 = bitcast float %839 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %967, <1 x i32> %968, i1 true) #4, !dbg !94
  %969 = or disjoint i32 %893, 60, !dbg !94
  %970 = lshr i32 %969, 2, !dbg !94
  %971 = and i32 %970, 1020, !dbg !94
  %972 = getelementptr float, ptr addrspace(3) @global_smem, i32 %971, !dbg !94
  %973 = getelementptr float, ptr addrspace(3) %972, i32 %969, !dbg !94
  %974 = bitcast float %840 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %973, <1 x i32> %974, i1 true) #4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %975 = and i32 %20, 252, !dbg !94
  %976 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %975, !dbg !94
  %977 = getelementptr inbounds float, ptr addrspace(3) %976, i32 %76, !dbg !94
  %978 = or disjoint i32 %76, 1024, !dbg !94
  %979 = lshr exact i32 %978, 2, !dbg !94
  %980 = and i32 %979, 508, !dbg !94
  %981 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %980, !dbg !94
  %982 = getelementptr inbounds float, ptr addrspace(3) %981, i32 %978, !dbg !94
  %983 = load <4 x i32>, ptr addrspace(3) %982, align 16, !dbg !94
  %984 = or disjoint i32 %76, 2048, !dbg !94
  %985 = lshr exact i32 %984, 2, !dbg !94
  %986 = and i32 %985, 764, !dbg !94
  %987 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %986, !dbg !94
  %988 = getelementptr inbounds float, ptr addrspace(3) %987, i32 %984, !dbg !94
  %989 = load <4 x i32>, ptr addrspace(3) %988, align 16, !dbg !94
  %990 = or disjoint i32 %76, 3072, !dbg !94
  %991 = lshr exact i32 %990, 2, !dbg !94
  %992 = and i32 %991, 1020, !dbg !94
  %993 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %992, !dbg !94
  %994 = getelementptr inbounds float, ptr addrspace(3) %993, i32 %990, !dbg !94
  %995 = load <4 x i32>, ptr addrspace(3) %994, align 16, !dbg !94
  %.extract = load i32, ptr addrspace(3) %977, align 16, !dbg !94
  %996 = getelementptr inbounds i8, ptr addrspace(3) %977, i32 4, !dbg !94
  %.extract20 = load i32, ptr addrspace(3) %996, align 4, !dbg !94
  %997 = getelementptr inbounds i8, ptr addrspace(3) %977, i32 8, !dbg !94
  %.extract21 = load i32, ptr addrspace(3) %997, align 8, !dbg !94
  %998 = getelementptr inbounds i8, ptr addrspace(3) %977, i32 12, !dbg !94
  %.extract22 = load i32, ptr addrspace(3) %998, align 4, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %884, i1 %535) #4, !dbg !94
  %.extract23 = extractelement <4 x i32> %983, i64 0, !dbg !94
  %.extract24 = extractelement <4 x i32> %983, i64 1, !dbg !94
  %.extract25 = extractelement <4 x i32> %983, i64 2, !dbg !94
  %.extract26 = extractelement <4 x i32> %983, i64 3, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %886, i1 %534) #4, !dbg !94
  %.extract27 = extractelement <4 x i32> %989, i64 0, !dbg !94
  %.extract28 = extractelement <4 x i32> %989, i64 1, !dbg !94
  %.extract29 = extractelement <4 x i32> %989, i64 2, !dbg !94
  %.extract30 = extractelement <4 x i32> %989, i64 3, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %888, i1 %532) #4, !dbg !94
  %.extract31 = extractelement <4 x i32> %995, i64 0, !dbg !94
  %.extract32 = extractelement <4 x i32> %995, i64 1, !dbg !94
  %.extract33 = extractelement <4 x i32> %995, i64 2, !dbg !94
  %.extract34 = extractelement <4 x i32> %995, i64 3, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %890, i1 %530) #4, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6hb5osixqfolktdv6zhzfoegxdcrbaouwjwi44j2o4uo4y7wgui.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 34, scope: !7)
!27 = !DILocation(line: 34, column: 48, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 39, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 31, scope: !7)
!39 = !DILocation(line: 40, column: 36, scope: !7)
!40 = !DILocation(line: 41, column: 31, scope: !7)
!41 = !DILocation(line: 41, column: 36, scope: !7)
!42 = !DILocation(line: 42, column: 31, scope: !7)
!43 = !DILocation(line: 42, column: 36, scope: !7)
!44 = !DILocation(line: 43, column: 31, scope: !7)
!45 = !DILocation(line: 43, column: 36, scope: !7)
!46 = !DILocation(line: 44, column: 41, scope: !7)
!47 = !DILocation(line: 44, column: 37, scope: !7)
!48 = !DILocation(line: 44, column: 32, scope: !7)
!49 = !DILocation(line: 44, column: 46, scope: !7)
!50 = !DILocation(line: 45, column: 32, scope: !7)
!51 = !DILocation(line: 45, column: 46, scope: !7)
!52 = !DILocation(line: 46, column: 18, scope: !7)
!53 = !DILocation(line: 47, column: 18, scope: !7)
!54 = !DILocation(line: 50, column: 19, scope: !7)
!55 = !DILocation(line: 51, column: 27, scope: !7)
!56 = !DILocation(line: 53, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 27, scope: !7)
!59 = !DILocation(line: 59, column: 19, scope: !7)
!60 = !DILocation(line: 48, column: 18, scope: !7)
!61 = !DILocation(line: 56, column: 19, scope: !7)
!62 = !DILocation(line: 57, column: 20, scope: !7)
!63 = !DILocation(line: 58, column: 20, scope: !7)
!64 = !DILocation(line: 31, column: 19, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 64, column: 20, scope: !7)
!67 = !DILocation(line: 65, column: 20, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 20, scope: !7)
!70 = !DILocation(line: 47, column: 30, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!73 = !DILocation(line: 68, column: 23, scope: !7)
!74 = !DILocation(line: 47, column: 29, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 47, column: 20, scope: !71, inlinedAt: !73)
!76 = !DILocation(line: 47, column: 16, scope: !71, inlinedAt: !73)
!77 = !DILocation(line: 69, column: 20, scope: !7)
!78 = !DILocation(line: 70, column: 20, scope: !7)
!79 = !DILocation(line: 47, column: 30, scope: !71, inlinedAt: !80)
!80 = !DILocation(line: 71, column: 23, scope: !7)
!81 = !DILocation(line: 47, column: 29, scope: !71, inlinedAt: !80)
!82 = !DILocation(line: 47, column: 20, scope: !71, inlinedAt: !80)
!83 = !DILocation(line: 47, column: 16, scope: !71, inlinedAt: !80)
!84 = !DILocation(line: 72, column: 20, scope: !7)
!85 = !DILocation(line: 73, column: 4, scope: !7)
!86 = !DILocation(line: 74, column: 48, scope: !7)
!87 = !DILocation(line: 75, column: 4, scope: !7)
!88 = !DILocation(line: 76, column: 48, scope: !7)
!89 = !DILocation(line: 77, column: 35, scope: !7)
!90 = !DILocation(line: 77, column: 48, scope: !7)
!91 = !DILocation(line: 77, column: 30, scope: !7)
!92 = !DILocation(line: 77, column: 40, scope: !7)
!93 = !DILocation(line: 77, column: 25, scope: !7)
!94 = !DILocation(line: 77, column: 60, scope: !7)
!95 = !DILocation(line: 77, column: 4, scope: !7)
