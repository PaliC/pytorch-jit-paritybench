; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 11264, !dbg !14
  %11 = sext i32 %9 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %10) #1, !dbg !16
  %14 = bitcast i32 %13 to float, !dbg !16
  %15 = add i32 %9, -187, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = add i32 %9, -176, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = add i32 %9, -165, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = add i32 %9, -11, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = add i32 %9, 11, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = add i32 %9, 165, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !28
  %33 = add i32 %9, 176, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = add i32 %9, 187, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !32
  %39 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !33
  %40 = shufflevector <2 x i32> %39, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !33
  %41 = sdiv <2 x i32> %40, <i32 11, i32 176>, !dbg !33
  %42 = srem <2 x i32> %41, splat (i32 16), !dbg !34
  %43 = extractelement <2 x i32> %42, i64 1, !dbg !35
  %44 = icmp sgt i32 %43, 0, !dbg !36
  %45 = extractelement <2 x i32> %42, i64 0, !dbg !37
  %46 = add nsw i32 %45, -1, !dbg !38
  %47 = icmp sgt i32 %45, 0, !dbg !39
  %48 = and i1 %44, %47, !dbg !40
  %49 = and i1 %10, %48, !dbg !41
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %49, i32 0, i1 %49) #1, !dbg !42
  %51 = bitcast i32 %50 to float, !dbg !42
  %52 = icmp sgt i32 %45, -1, !dbg !43
  %53 = and i1 %44, %52, !dbg !44
  %54 = and i1 %10, %53, !dbg !45
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %54, i32 0, i1 %54) #1, !dbg !46
  %56 = bitcast i32 %55 to float, !dbg !46
  %57 = fadd float %51, %56, !dbg !47
  %58 = add nsw i32 %45, 1, !dbg !48
  %59 = icmp ult i32 %58, 16, !dbg !48
  %60 = and i1 %44, %59, !dbg !49
  %61 = and i1 %10, %60, !dbg !50
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %61, i32 0, i1 %61) #1, !dbg !51
  %63 = bitcast i32 %62 to float, !dbg !51
  %64 = fadd float %57, %63, !dbg !52
  %65 = icmp sgt i32 %43, -1, !dbg !53
  %66 = and i1 %65, %47, !dbg !54
  %67 = and i1 %10, %66, !dbg !55
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %67, i32 0, i1 %67) #1, !dbg !56
  %69 = bitcast i32 %68 to float, !dbg !56
  %70 = fadd float %64, %69, !dbg !57
  %71 = or i32 %43, %45, !dbg !37
  %72 = icmp sgt i32 %71, -1, !dbg !37
  %73 = and i1 %10, %72, !dbg !58
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 %73, i32 0, i1 %73) #1, !dbg !59
  %75 = bitcast i32 %74 to float, !dbg !59
  %76 = fadd float %70, %75, !dbg !60
  %77 = and i1 %65, %59, !dbg !61
  %78 = and i1 %10, %77, !dbg !62
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %78, i32 0, i1 %78) #1, !dbg !63
  %80 = bitcast i32 %79 to float, !dbg !63
  %81 = fadd float %76, %80, !dbg !64
  %82 = add nsw i32 %43, 1, !dbg !65
  %83 = icmp ult i32 %82, 16, !dbg !65
  %84 = and i1 %47, %83, !dbg !66
  %85 = and i1 %10, %84, !dbg !67
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %85, i32 0, i1 %85) #1, !dbg !68
  %87 = bitcast i32 %86 to float, !dbg !68
  %88 = fadd float %81, %87, !dbg !69
  %89 = and i1 %52, %83, !dbg !70
  %90 = and i1 %10, %89, !dbg !71
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %90, i32 0, i1 %90) #1, !dbg !72
  %92 = bitcast i32 %91 to float, !dbg !72
  %93 = fadd float %88, %92, !dbg !73
  %94 = or i32 %82, %58, !dbg !74
  %95 = icmp ult i32 %94, 16, !dbg !74
  %96 = and i1 %10, %95, !dbg !75
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %96, i32 0, i1 %96) #1, !dbg !76
  %98 = bitcast i32 %97 to float, !dbg !76
  %99 = fadd float %93, %98, !dbg !77
  %100 = add nsw <2 x i32> %42, <i32 2, i32 -1>, !dbg !78
  %101 = shufflevector <2 x i32> %42, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !79
  %102 = icmp sgt <2 x i32> %101, <i32 13, i32 1>, !dbg !79
  %103 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %46, i64 1, !dbg !80
  %104 = select <2 x i1> %102, <2 x i32> %103, <2 x i32> zeroinitializer, !dbg !80
  %105 = insertelement <2 x i32> %101, i32 1, i64 1, !dbg !81
  %106 = insertelement <2 x i32> %42, i32 14, i64 0, !dbg !81
  %107 = icmp slt <2 x i32> %105, %106, !dbg !81
  %108 = select <2 x i1> %107, <2 x i32> %100, <2 x i32> zeroinitializer, !dbg !82
  %109 = add nsw <2 x i32> %104, %108, !dbg !83
  %110 = mul nsw <2 x i32> %104, %108, !dbg !83
  %111 = add nsw i32 %43, 2, !dbg !84
  %112 = icmp sgt i32 %43, 13, !dbg !85
  %113 = select i1 %112, i32 16, i32 0, !dbg !86
  %114 = icmp slt i32 %43, 14, !dbg !35
  %115 = select i1 %114, i32 %111, i32 0, !dbg !87
  %116 = add nsw i32 %113, %115, !dbg !88
  %117 = extractelement <2 x i32> %109, i64 0, !dbg !89
  %118 = mul nsw i32 %117, %116, !dbg !90
  %119 = extractelement <2 x i32> %104, i64 1, !dbg !89
  %.neg = mul nsw i32 %116, %119, !dbg !89
  %120 = extractelement <2 x i32> %108, i64 1, !dbg !89
  %.neg1 = mul nsw i32 %117, %120, !dbg !89
  %reass.add = add nsw i32 %.neg, %.neg1
  %121 = extractelement <2 x i32> %110, i64 1, !dbg !91
  %122 = add nsw i32 %118, %121, !dbg !91
  %123 = sub nsw i32 %122, %reass.add, !dbg !89
  %124 = sitofp i32 %123 to float, !dbg !92
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %124) #1, !dbg !92
  %126 = fcmp olt float %14, 0.000000e+00, !dbg !93
  %127 = select i1 %126, float 0.000000e+00, float %14, !dbg !97
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !98
  %129 = bitcast float %125 to i32, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %128, i1 %10) #1, !dbg !99
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !100
  %131 = bitcast float %127 to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %130, i1 %10) #1, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6fk2g2cyhkxd4onuufrwcqzuvdorje4nigyrsjly43fvhmyz2ui.py", directory: "inductor_cache/6f")
!4 = !{ptr @triton_poi_fused_avg_pool2d_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_relu_7", linkageName: "triton_poi_fused_avg_pool2d_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 31, scope: !7)
!16 = !DILocation(line: 27, column: 36, scope: !7)
!17 = !DILocation(line: 39, column: 40, scope: !7)
!18 = !DILocation(line: 39, column: 31, scope: !7)
!19 = !DILocation(line: 45, column: 40, scope: !7)
!20 = !DILocation(line: 45, column: 31, scope: !7)
!21 = !DILocation(line: 52, column: 40, scope: !7)
!22 = !DILocation(line: 52, column: 31, scope: !7)
!23 = !DILocation(line: 59, column: 39, scope: !7)
!24 = !DILocation(line: 59, column: 31, scope: !7)
!25 = !DILocation(line: 65, column: 36, scope: !7)
!26 = !DILocation(line: 65, column: 31, scope: !7)
!27 = !DILocation(line: 72, column: 37, scope: !7)
!28 = !DILocation(line: 72, column: 31, scope: !7)
!29 = !DILocation(line: 75, column: 37, scope: !7)
!30 = !DILocation(line: 75, column: 31, scope: !7)
!31 = !DILocation(line: 78, column: 37, scope: !7)
!32 = !DILocation(line: 78, column: 31, scope: !7)
!33 = !DILocation(line: 25, column: 21, scope: !7)
!34 = !DILocation(line: 25, column: 27, scope: !7)
!35 = !DILocation(line: 80, column: 256, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 61, column: 20, scope: !7)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 35, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 53, scope: !7)
!42 = !DILocation(line: 39, column: 45, scope: !7)
!43 = !DILocation(line: 41, column: 21, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 53, scope: !7)
!46 = !DILocation(line: 45, column: 45, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 19, scope: !7)
!50 = !DILocation(line: 52, column: 53, scope: !7)
!51 = !DILocation(line: 52, column: 45, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 21, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 52, scope: !7)
!56 = !DILocation(line: 59, column: 44, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 44, scope: !7)
!59 = !DILocation(line: 62, column: 36, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 49, scope: !7)
!63 = !DILocation(line: 65, column: 41, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 50, scope: !7)
!68 = !DILocation(line: 72, column: 42, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 50, scope: !7)
!72 = !DILocation(line: 75, column: 42, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 50, scope: !7)
!76 = !DILocation(line: 78, column: 42, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 80, column: 166, scope: !7)
!79 = !DILocation(line: 80, column: 162, scope: !7)
!80 = !DILocation(line: 80, column: 153, scope: !7)
!81 = !DILocation(line: 80, column: 197, scope: !7)
!82 = !DILocation(line: 80, column: 185, scope: !7)
!83 = !DILocation(line: 80, column: 173, scope: !7)
!84 = !DILocation(line: 80, column: 225, scope: !7)
!85 = !DILocation(line: 80, column: 221, scope: !7)
!86 = !DILocation(line: 80, column: 212, scope: !7)
!87 = !DILocation(line: 80, column: 244, scope: !7)
!88 = !DILocation(line: 80, column: 232, scope: !7)
!89 = !DILocation(line: 80, column: 398, scope: !7)
!90 = !DILocation(line: 80, column: 204, scope: !7)
!91 = !DILocation(line: 80, column: 144, scope: !7)
!92 = !DILocation(line: 81, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !94, inlinedAt: !96)
!94 = distinct !DILexicalBlockFile(scope: !7, file: !95, discriminator: 0)
!95 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!96 = !DILocation(line: 83, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !94, inlinedAt: !96)
!98 = !DILocation(line: 84, column: 25, scope: !7)
!99 = !DILocation(line: 84, column: 37, scope: !7)
!100 = !DILocation(line: 85, column: 25, scope: !7)
!101 = !DILocation(line: 85, column: 37, scope: !7)
!102 = !DILocation(line: 85, column: 4, scope: !7)
