; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %7, 31, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %13 = shl i32 %12, 5, !dbg !16
  %14 = or disjoint i32 %13, %9, !dbg !17
  %15 = icmp slt i32 %14, 25, !dbg !18
  %16 = sdiv i32 %10, 4, !dbg !19
  %17 = sext i32 %10 to i64, !dbg !20
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %11) #2, !dbg !21
  %20 = bitcast i32 %19 to float, !dbg !21
  %21 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !22
  %22 = insertelement <2 x i32> %21, i32 %10, i64 1, !dbg !22
  %23 = srem <2 x i32> %22, splat (i32 4), !dbg !22
  %24 = add nsw <2 x i32> %23, splat (i32 -2), !dbg !23
  %25 = extractelement <2 x i32> %24, i64 0, !dbg !24
  %26 = extractelement <2 x i32> %24, i64 1, !dbg !25
  %27 = and i32 %8, 3, !dbg !12
  %28 = or disjoint i32 %27, 4, !dbg !12
  %29 = or disjoint i32 %27, 8, !dbg !12
  %30 = or disjoint i32 %27, 12, !dbg !12
  %31 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !12
  %32 = shufflevector <2 x i32> %31, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !12
  %33 = or disjoint <2 x i32> %32, <i32 20, i32 16>, !dbg !12
  %34 = or disjoint i32 %27, 24, !dbg !12
  %35 = or disjoint i32 %27, 28, !dbg !12
  %36 = or disjoint i32 %6, %27, !dbg !13
  %37 = or disjoint i32 %6, %28, !dbg !13
  %38 = or disjoint i32 %6, %29, !dbg !13
  %39 = or disjoint i32 %6, %30, !dbg !13
  %40 = extractelement <2 x i32> %33, i64 1, !dbg !13
  %41 = or disjoint i32 %6, %40, !dbg !13
  %42 = extractelement <2 x i32> %33, i64 0, !dbg !13
  %43 = or disjoint i32 %6, %42, !dbg !13
  %44 = or disjoint i32 %6, %34, !dbg !13
  %45 = or disjoint i32 %6, %35, !dbg !13
  %46 = icmp slt i32 %36, 256, !dbg !14
  %47 = icmp slt i32 %37, 256, !dbg !14
  %48 = icmp slt i32 %38, 256, !dbg !14
  %49 = icmp slt i32 %39, 256, !dbg !14
  %50 = icmp slt i32 %41, 256, !dbg !14
  %51 = icmp slt i32 %43, 256, !dbg !14
  %52 = icmp slt i32 %44, 256, !dbg !14
  %53 = icmp slt i32 %45, 256, !dbg !14
  %54 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !17
  %55 = shufflevector <4 x i32> %54, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !17
  %56 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !17
  %57 = insertelement <4 x i32> %56, i32 %29, i64 1, !dbg !17
  %58 = insertelement <4 x i32> %57, i32 %28, i64 2, !dbg !17
  %59 = insertelement <4 x i32> %58, i32 %27, i64 3, !dbg !17
  %60 = or disjoint <4 x i32> %55, %59, !dbg !17
  %61 = shufflevector <4 x i32> %54, <4 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %62 = or disjoint <2 x i32> %61, %33, !dbg !17
  %63 = or disjoint i32 %13, %34, !dbg !17
  %64 = or disjoint i32 %13, %35, !dbg !17
  %65 = extractelement <4 x i32> %60, i64 3, !dbg !18
  %66 = icmp slt i32 %65, 25, !dbg !18
  %67 = extractelement <4 x i32> %60, i64 2, !dbg !18
  %68 = icmp slt i32 %67, 25, !dbg !18
  %69 = shufflevector <2 x i32> %62, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !18
  %70 = shufflevector <4 x i32> %69, <4 x i32> %60, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !18
  %71 = icmp slt <4 x i32> %70, splat (i32 25), !dbg !18
  %72 = icmp slt i32 %63, 25, !dbg !18
  %73 = icmp slt i32 %64, 25, !dbg !18
  %.frozen = freeze <4 x i32> %60, !dbg !26
  %74 = sdiv <4 x i32> %.frozen, splat (i32 5), !dbg !26
  %.frozen2 = freeze <2 x i32> %62, !dbg !26
  %75 = sdiv <2 x i32> %.frozen2, splat (i32 5), !dbg !26
  %.frozen4 = freeze i32 %63, !dbg !26
  %76 = sdiv i32 %.frozen4, 5, !dbg !26
  %.frozen6 = freeze i32 %64, !dbg !26
  %77 = sdiv i32 %.frozen6, 5, !dbg !26
  %78 = mul <4 x i32> %74, splat (i32 5), !dbg !27
  %.decomposed = sub <4 x i32> %.frozen, %78, !dbg !27
  %79 = mul <2 x i32> %75, splat (i32 5), !dbg !27
  %.decomposed3 = sub <2 x i32> %.frozen2, %79, !dbg !27
  %80 = mul i32 %76, 5, !dbg !27
  %.decomposed5 = sub i32 %.frozen4, %80, !dbg !27
  %81 = mul i32 %77, 5, !dbg !27
  %.decomposed7 = sub i32 %.frozen6, %81, !dbg !27
  %82 = shufflevector <2 x i32> %24, <2 x i32> poison, <4 x i32> zeroinitializer, !dbg !24
  %83 = add nsw <4 x i32> %82, %74, !dbg !24
  %84 = shufflevector <2 x i32> %24, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !24
  %85 = add nsw <2 x i32> %84, %75, !dbg !24
  %86 = add nsw i32 %25, %76, !dbg !24
  %87 = shufflevector <2 x i32> %24, <2 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>, !dbg !25
  %88 = add nsw <4 x i32> %87, %.decomposed, !dbg !25
  %89 = shufflevector <2 x i32> %24, <2 x i32> poison, <2 x i32> <i32 1, i32 1>, !dbg !25
  %90 = add nsw <2 x i32> %89, %.decomposed3, !dbg !25
  %91 = add nsw i32 %26, %.decomposed5, !dbg !25
  %92 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !24
  %93 = insertelement <2 x i32> %92, i32 %.decomposed7, i64 1, !dbg !24
  %94 = add nsw <2 x i32> %24, %93, !dbg !24
  %95 = shufflevector <2 x i32> %94, <2 x i32> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %96 = insertelement <8 x i32> %95, i32 %86, i64 1, !dbg !28
  %97 = shufflevector <4 x i32> %83, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %98 = shufflevector <8 x i32> %96, <8 x i32> %97, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !28
  %99 = shufflevector <2 x i32> %85, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %100 = shufflevector <8 x i32> %98, <8 x i32> %99, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !28
  %101 = shufflevector <2 x i32> %94, <2 x i32> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %102 = insertelement <8 x i32> %101, i32 %91, i64 1, !dbg !28
  %103 = shufflevector <4 x i32> %88, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %104 = shufflevector <8 x i32> %102, <8 x i32> %103, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !28
  %105 = shufflevector <2 x i32> %90, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %106 = shufflevector <8 x i32> %104, <8 x i32> %105, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !28
  %107 = or <8 x i32> %100, %106, !dbg !28
  %108 = icmp ult <8 x i32> %107, splat (i32 4), !dbg !28
  %109 = extractelement <4 x i32> %74, i64 3, !dbg !29
  %110 = shl nsw i32 %109, 2, !dbg !29
  %111 = extractelement <4 x i32> %74, i64 2, !dbg !29
  %112 = shl nsw i32 %111, 2, !dbg !29
  %113 = extractelement <4 x i32> %74, i64 1, !dbg !29
  %114 = shl nsw i32 %113, 2, !dbg !29
  %115 = extractelement <4 x i32> %74, i64 0, !dbg !29
  %116 = shl nsw i32 %115, 2, !dbg !29
  %117 = extractelement <2 x i32> %75, i64 1, !dbg !29
  %118 = shl nsw i32 %117, 2, !dbg !29
  %119 = extractelement <2 x i32> %75, i64 0, !dbg !29
  %120 = shl nsw i32 %119, 2, !dbg !29
  %121 = shl nsw i32 %76, 2, !dbg !29
  %122 = shl nsw i32 %77, 2, !dbg !29
  %123 = add i32 %10, -10, !dbg !30
  %124 = extractelement <4 x i32> %.decomposed, i64 3, !dbg !31
  %125 = add i32 %123, %124, !dbg !31
  %126 = add i32 %125, %110, !dbg !32
  %127 = extractelement <4 x i32> %.decomposed, i64 2, !dbg !31
  %128 = add i32 %123, %127, !dbg !31
  %129 = add i32 %128, %112, !dbg !32
  %130 = extractelement <4 x i32> %.decomposed, i64 1, !dbg !31
  %131 = add i32 %123, %130, !dbg !31
  %132 = add i32 %131, %114, !dbg !32
  %133 = extractelement <4 x i32> %.decomposed, i64 0, !dbg !31
  %134 = add i32 %123, %133, !dbg !31
  %135 = add i32 %134, %116, !dbg !32
  %136 = extractelement <2 x i32> %.decomposed3, i64 1, !dbg !31
  %137 = add i32 %123, %136, !dbg !31
  %138 = add i32 %137, %118, !dbg !32
  %139 = extractelement <2 x i32> %.decomposed3, i64 0, !dbg !31
  %140 = add i32 %123, %139, !dbg !31
  %141 = add i32 %140, %120, !dbg !32
  %142 = add i32 %123, %.decomposed5, !dbg !31
  %143 = add i32 %142, %121, !dbg !32
  %144 = add i32 %123, %.decomposed7, !dbg !31
  %145 = add i32 %144, %122, !dbg !32
  %146 = sext i32 %126 to i64, !dbg !33
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !33
  %148 = sext i32 %129 to i64, !dbg !33
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !33
  %150 = sext i32 %132 to i64, !dbg !33
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !33
  %152 = sext i32 %135 to i64, !dbg !33
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !33
  %154 = sext i32 %138 to i64, !dbg !33
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !33
  %156 = sext i32 %141 to i64, !dbg !33
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !33
  %158 = sext i32 %143 to i64, !dbg !33
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !33
  %160 = sext i32 %145 to i64, !dbg !33
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !33
  %162 = extractelement <8 x i1> %108, i64 7, !dbg !34
  %163 = and i1 %66, %162, !dbg !34
  %164 = extractelement <8 x i1> %108, i64 6, !dbg !34
  %165 = and i1 %68, %164, !dbg !34
  %166 = extractelement <8 x i1> %108, i64 5, !dbg !34
  %167 = extractelement <4 x i1> %71, i64 3, !dbg !34
  %168 = and i1 %167, %166, !dbg !34
  %169 = extractelement <8 x i1> %108, i64 4, !dbg !34
  %170 = extractelement <4 x i1> %71, i64 2, !dbg !34
  %171 = and i1 %170, %169, !dbg !34
  %172 = extractelement <8 x i1> %108, i64 3, !dbg !34
  %173 = extractelement <4 x i1> %71, i64 1, !dbg !34
  %174 = and i1 %173, %172, !dbg !34
  %175 = extractelement <8 x i1> %108, i64 2, !dbg !34
  %176 = extractelement <4 x i1> %71, i64 0, !dbg !34
  %177 = and i1 %176, %175, !dbg !34
  %178 = extractelement <8 x i1> %108, i64 1, !dbg !34
  %179 = and i1 %72, %178, !dbg !34
  %180 = extractelement <8 x i1> %108, i64 0, !dbg !34
  %181 = and i1 %73, %180, !dbg !34
  %182 = and i1 %11, %163, !dbg !35
  %183 = and i1 %11, %165, !dbg !35
  %184 = and i1 %11, %168, !dbg !35
  %185 = and i1 %11, %171, !dbg !35
  %186 = and i1 %11, %174, !dbg !35
  %187 = and i1 %11, %177, !dbg !35
  %188 = and i1 %11, %179, !dbg !35
  %189 = and i1 %11, %181, !dbg !35
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %182, i32 0, i1 %182) #2, !dbg !36
  %191 = bitcast i32 %190 to float, !dbg !36
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %183, i32 0, i1 %183) #2, !dbg !36
  %193 = bitcast i32 %192 to float, !dbg !36
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %184, i32 0, i1 %184) #2, !dbg !36
  %195 = bitcast i32 %194 to float, !dbg !36
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %185, i32 0, i1 %185) #2, !dbg !36
  %197 = bitcast i32 %196 to float, !dbg !36
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %186, i32 0, i1 %186) #2, !dbg !36
  %199 = bitcast i32 %198 to float, !dbg !36
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %187, i32 0, i1 %187) #2, !dbg !36
  %201 = bitcast i32 %200 to float, !dbg !36
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %188, i32 0, i1 %188) #2, !dbg !36
  %203 = bitcast i32 %202 to float, !dbg !36
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %189, i32 0, i1 %189) #2, !dbg !36
  %205 = bitcast i32 %204 to float, !dbg !36
  %206 = fmul float %20, %191, !dbg !37
  %207 = fmul float %20, %193, !dbg !37
  %208 = fmul float %20, %195, !dbg !37
  %209 = fmul float %20, %197, !dbg !37
  %210 = fmul float %20, %199, !dbg !37
  %211 = fmul float %20, %201, !dbg !37
  %212 = fmul float %20, %203, !dbg !37
  %213 = fmul float %20, %205, !dbg !37
  %214 = mul i32 %36, 25, !dbg !38
  %215 = mul i32 %37, 25, !dbg !38
  %216 = mul i32 %38, 25, !dbg !38
  %217 = mul i32 %39, 25, !dbg !38
  %218 = mul i32 %41, 25, !dbg !38
  %219 = mul i32 %43, 25, !dbg !38
  %220 = mul i32 %44, 25, !dbg !38
  %221 = mul i32 %45, 25, !dbg !38
  %222 = add i32 %14, %214, !dbg !39
  %223 = add i32 %14, %215, !dbg !39
  %224 = add i32 %14, %216, !dbg !39
  %225 = add i32 %14, %217, !dbg !39
  %226 = add i32 %14, %218, !dbg !39
  %227 = add i32 %14, %219, !dbg !39
  %228 = add i32 %14, %220, !dbg !39
  %229 = add i32 %14, %221, !dbg !39
  %230 = sext i32 %222 to i64, !dbg !40
  %231 = getelementptr float, ptr addrspace(1) %1, i64 %230, !dbg !40
  %232 = sext i32 %223 to i64, !dbg !40
  %233 = getelementptr float, ptr addrspace(1) %1, i64 %232, !dbg !40
  %234 = sext i32 %224 to i64, !dbg !40
  %235 = getelementptr float, ptr addrspace(1) %1, i64 %234, !dbg !40
  %236 = sext i32 %225 to i64, !dbg !40
  %237 = getelementptr float, ptr addrspace(1) %1, i64 %236, !dbg !40
  %238 = sext i32 %226 to i64, !dbg !40
  %239 = getelementptr float, ptr addrspace(1) %1, i64 %238, !dbg !40
  %240 = sext i32 %227 to i64, !dbg !40
  %241 = getelementptr float, ptr addrspace(1) %1, i64 %240, !dbg !40
  %242 = sext i32 %228 to i64, !dbg !40
  %243 = getelementptr float, ptr addrspace(1) %1, i64 %242, !dbg !40
  %244 = sext i32 %229 to i64, !dbg !40
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %244, !dbg !40
  %246 = and i1 %46, %15, !dbg !41
  %247 = and i1 %47, %15, !dbg !41
  %248 = and i1 %48, %15, !dbg !41
  %249 = and i1 %49, %15, !dbg !41
  %250 = and i1 %50, %15, !dbg !41
  %251 = and i1 %51, %15, !dbg !41
  %252 = and i1 %52, %15, !dbg !41
  %253 = and i1 %53, %15, !dbg !41
  %254 = shl i32 %7, 5, !dbg !42
  %255 = and i32 %254, 992, !dbg !42
  %256 = or disjoint i32 %255, %27, !dbg !42
  %257 = and i32 %7, 127, !dbg !42
  %258 = lshr exact i32 %255, 3, !dbg !42
  %259 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %258, !dbg !42
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %256, !dbg !42
  %261 = bitcast float %206 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !42
  %262 = or disjoint i32 %256, 4, !dbg !42
  %263 = getelementptr float, ptr addrspace(3) %259, i32 %262, !dbg !42
  %264 = bitcast float %207 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !42
  %265 = or disjoint i32 %256, 8, !dbg !42
  %266 = getelementptr float, ptr addrspace(3) %259, i32 %265, !dbg !42
  %267 = bitcast float %208 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !42
  %268 = or disjoint i32 %256, 12, !dbg !42
  %269 = getelementptr float, ptr addrspace(3) %259, i32 %268, !dbg !42
  %270 = bitcast float %209 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !42
  %271 = or disjoint i32 %256, 16, !dbg !42
  %272 = getelementptr float, ptr addrspace(3) %259, i32 %271, !dbg !42
  %273 = bitcast float %210 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #2, !dbg !42
  %274 = or disjoint i32 %256, 20, !dbg !42
  %275 = getelementptr float, ptr addrspace(3) %259, i32 %274, !dbg !42
  %276 = bitcast float %211 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #2, !dbg !42
  %277 = or disjoint i32 %256, 24, !dbg !42
  %278 = getelementptr float, ptr addrspace(3) %259, i32 %277, !dbg !42
  %279 = bitcast float %212 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !42
  %280 = or disjoint i32 %256, 28, !dbg !42
  %281 = getelementptr float, ptr addrspace(3) %259, i32 %280, !dbg !42
  %282 = bitcast float %213 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %283 = lshr i32 %257, 5, !dbg !42
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !42
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %257, !dbg !42
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !42
  %287 = or disjoint i32 %257, 128, !dbg !42
  %288 = lshr i32 %287, 5, !dbg !42
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !42
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !42
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !42
  %292 = or disjoint i32 %257, 256, !dbg !42
  %293 = lshr i32 %292, 5, !dbg !42
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !42
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !42
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !42
  %297 = or disjoint i32 %257, 384, !dbg !42
  %298 = lshr i32 %297, 5, !dbg !42
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !42
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !42
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !42
  %302 = or disjoint i32 %257, 512, !dbg !42
  %303 = lshr i32 %302, 5, !dbg !42
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !42
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !42
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !42
  %307 = or disjoint i32 %257, 640, !dbg !42
  %308 = lshr i32 %307, 5, !dbg !42
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !42
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !42
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !42
  %312 = or disjoint i32 %257, 768, !dbg !42
  %313 = lshr i32 %312, 5, !dbg !42
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !42
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !42
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !42
  %317 = or disjoint i32 %257, 896, !dbg !42
  %318 = lshr i32 %317, 5, !dbg !42
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !42
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !42
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %231, i1 %246) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %233, i1 %247) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %296, ptr addrspace(1) %235, i1 %248) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %301, ptr addrspace(1) %237, i1 %249) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %306, ptr addrspace(1) %239, i1 %250) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %241, i1 %251) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %316, ptr addrspace(1) %243, i1 %252) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %321, ptr addrspace(1) %245, i1 %253) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdfvlla22cvih3zyefueemog72rpe7roemlbghxzcnf76wb73mdd.py", directory: "inductor_cache/df")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 21, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 29, column: 26, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 23, scope: !7)
!25 = !DILocation(line: 40, column: 23, scope: !7)
!26 = !DILocation(line: 28, column: 19, scope: !7)
!27 = !DILocation(line: 30, column: 19, scope: !7)
!28 = !DILocation(line: 45, column: 19, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 46, column: 39, scope: !7)
!31 = !DILocation(line: 46, column: 44, scope: !7)
!32 = !DILocation(line: 46, column: 49, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 64, scope: !7)
!35 = !DILocation(line: 46, column: 72, scope: !7)
!36 = !DILocation(line: 46, column: 56, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 33, scope: !7)
!39 = !DILocation(line: 48, column: 30, scope: !7)
!40 = !DILocation(line: 48, column: 25, scope: !7)
!41 = !DILocation(line: 48, column: 53, scope: !7)
!42 = !DILocation(line: 48, column: 45, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
