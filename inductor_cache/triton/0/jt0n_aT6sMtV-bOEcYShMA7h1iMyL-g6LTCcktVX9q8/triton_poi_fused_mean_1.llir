; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = mul i32 %9, 6, !dbg !15
  %12 = add i32 %11, 6, !dbg !15
  %13 = sext i32 %11 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %10) #1, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %10) #1, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = or disjoint i32 %11, 1, !dbg !18
  %22 = or disjoint i32 %12, 1, !dbg !18
  %23 = sext i32 %21 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #1, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %10) #1, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = or disjoint i32 %11, 2, !dbg !21
  %32 = add i32 %11, 8, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %10) #1, !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %10) #1, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = or disjoint i32 %11, 3, !dbg !24
  %42 = add i32 %11, 9, !dbg !24
  %43 = sext i32 %41 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %10) #1, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %10) #1, !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = add i32 %11, 4, !dbg !27
  %52 = add i32 %11, 10, !dbg !27
  %53 = sext i32 %51 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %52 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %10) #1, !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %10) #1, !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = add i32 %11, 5, !dbg !30
  %62 = add i32 %11, 11, !dbg !30
  %63 = sext i32 %61 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !31
  %65 = sext i32 %62 to i64, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %10) #1, !dbg !32
  %68 = bitcast i32 %67 to float, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %10) #1, !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = fadd float %18, %28, !dbg !33
  %72 = fadd float %20, %30, !dbg !33
  %73 = fadd float %71, %38, !dbg !34
  %74 = fadd float %72, %40, !dbg !34
  %75 = fadd float %73, %48, !dbg !35
  %76 = fadd float %74, %50, !dbg !35
  %77 = fadd float %75, %58, !dbg !36
  %78 = fadd float %76, %60, !dbg !36
  %79 = fadd float %77, %68, !dbg !37
  %80 = fadd float %78, %70, !dbg !37
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 6.000000e+00) #1, !dbg !38
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 6.000000e+00) #1, !dbg !38
  %83 = sext i32 %9 to i64, !dbg !39
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !39
  %85 = bitcast float %81 to i32, !dbg !40
  %86 = bitcast float %82 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %86, ptr addrspace(1) %84, i1 %10) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdaxnjhhelwwmyb32d7nrrcllfe7ktpjz25pb3svbs3irhztur5r.py", directory: "inductor_cache/da")
!4 = !{ptr @triton_poi_fused_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mean_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mean_1", linkageName: "triton_poi_fused_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 41, scope: !7)
!27 = !DILocation(line: 29, column: 34, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 34, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 41, scope: !7)
!33 = !DILocation(line: 31, column: 18, scope: !7)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 19, scope: !7)
!38 = !DILocation(line: 37, column: 20, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
