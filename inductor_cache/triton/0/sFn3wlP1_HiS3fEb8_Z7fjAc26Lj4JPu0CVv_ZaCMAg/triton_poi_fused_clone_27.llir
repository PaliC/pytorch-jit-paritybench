; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 8, !dbg !16
  %18 = lshr i32 %11, 2, !dbg !17
  %19 = and i32 %18, 63, !dbg !17
  %20 = and i32 %11, 255, !dbg !17
  %21 = or disjoint i32 %17, %19, !dbg !18
  %22 = or disjoint i32 %21, 64, !dbg !18
  %23 = or disjoint i32 %21, 128, !dbg !18
  %24 = or disjoint i32 %21, 192, !dbg !18
  %25 = or disjoint i32 %17, %20, !dbg !18
  %26 = icmp slt i32 %21, 2048, !dbg !19
  %27 = icmp slt i32 %22, 2048, !dbg !19
  %28 = icmp slt i32 %23, 2048, !dbg !19
  %29 = icmp slt i32 %24, 2048, !dbg !19
  %30 = icmp slt i32 %25, 2048, !dbg !19
  %31 = srem i32 %25, 512, !dbg !20
  %32 = shl i32 %21, 4, !dbg !21
  %33 = shl i32 %22, 4, !dbg !21
  %34 = shl i32 %23, 4, !dbg !21
  %35 = shl i32 %24, 4, !dbg !21
  %36 = add i32 %32, %14, !dbg !22
  %37 = add i32 %14, %33, !dbg !22
  %38 = add i32 %14, %34, !dbg !22
  %39 = add i32 %14, %35, !dbg !22
  %40 = sext i32 %36 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %37 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %38 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %39 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = and i1 %15, %26, !dbg !24
  %49 = and i1 %27, %15, !dbg !24
  %50 = and i1 %28, %15, !dbg !24
  %51 = and i1 %29, %15, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = shl i32 %11, 10, !dbg !25
  %73 = and i32 %72, 3072, !dbg !25
  %74 = or disjoint i32 %73, %19, !dbg !25
  %75 = lshr exact i32 %73, 6, !dbg !25
  %76 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %75, !dbg !25
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %74, !dbg !25
  %78 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #4, !dbg !25
  %79 = or disjoint i32 %74, 256, !dbg !25
  %80 = lshr i32 %79, 8, !dbg !25
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !25
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79, !dbg !25
  %83 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !25
  %84 = or disjoint i32 %74, 512, !dbg !25
  %85 = lshr i32 %84, 8, !dbg !25
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !25
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !25
  %88 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !25
  %89 = or disjoint i32 %74, 768, !dbg !25
  %90 = lshr i32 %89, 8, !dbg !25
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !25
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !25
  %93 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !25
  %94 = or disjoint i32 %74, 64, !dbg !25
  %95 = getelementptr float, ptr addrspace(3) %76, i32 %94, !dbg !25
  %96 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !25
  %97 = or disjoint i32 %74, 320, !dbg !25
  %98 = lshr i32 %97, 8, !dbg !25
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !25
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !25
  %101 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !25
  %102 = or disjoint i32 %74, 576, !dbg !25
  %103 = lshr i32 %102, 8, !dbg !25
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !25
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !25
  %106 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !25
  %107 = or disjoint i32 %74, 832, !dbg !25
  %108 = lshr i32 %107, 8, !dbg !25
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !25
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !25
  %111 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !25
  %112 = or disjoint i32 %74, 128, !dbg !25
  %113 = getelementptr float, ptr addrspace(3) %76, i32 %112, !dbg !25
  %114 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #4, !dbg !25
  %115 = or disjoint i32 %74, 384, !dbg !25
  %116 = lshr i32 %115, 8, !dbg !25
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !25
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !25
  %119 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #4, !dbg !25
  %120 = or disjoint i32 %74, 640, !dbg !25
  %121 = lshr i32 %120, 8, !dbg !25
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !25
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !25
  %124 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !25
  %125 = or disjoint i32 %74, 896, !dbg !25
  %126 = lshr i32 %125, 8, !dbg !25
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !25
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !25
  %129 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !25
  %130 = or disjoint i32 %74, 192, !dbg !25
  %131 = getelementptr float, ptr addrspace(3) %76, i32 %130, !dbg !25
  %132 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !25
  %133 = or disjoint i32 %74, 448, !dbg !25
  %134 = lshr i32 %133, 8, !dbg !25
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !25
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !25
  %137 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #4, !dbg !25
  %138 = or disjoint i32 %74, 704, !dbg !25
  %139 = lshr i32 %138, 8, !dbg !25
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !25
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !25
  %142 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !25
  %143 = or disjoint i32 %74, 960, !dbg !25
  %144 = lshr i32 %143, 8, !dbg !25
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !25
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !25
  %147 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !25
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !25
  %150 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 1028, !dbg !25
  %151 = load float, ptr addrspace(3) %150, align 4, !dbg !25
  %152 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 2056, !dbg !25
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !25
  %154 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 3084, !dbg !25
  %155 = load float, ptr addrspace(3) %154, align 4, !dbg !25
  %156 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 4112, !dbg !25
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !25
  %158 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 5140, !dbg !25
  %159 = load float, ptr addrspace(3) %158, align 4, !dbg !25
  %160 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 6168, !dbg !25
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !25
  %162 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 7196, !dbg !25
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !25
  %164 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 8224, !dbg !25
  %165 = load float, ptr addrspace(3) %164, align 4, !dbg !25
  %166 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 9252, !dbg !25
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !25
  %168 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 10280, !dbg !25
  %169 = load float, ptr addrspace(3) %168, align 4, !dbg !25
  %170 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 11308, !dbg !25
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !25
  %172 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 12336, !dbg !25
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !25
  %174 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 13364, !dbg !25
  %175 = load float, ptr addrspace(3) %174, align 4, !dbg !25
  %176 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 14392, !dbg !25
  %177 = load float, ptr addrspace(3) %176, align 4, !dbg !25
  %178 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 15420, !dbg !25
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !25
  %180 = sdiv i32 %25, 16, !dbg !26
  %181 = sext i32 %180 to i64, !dbg !27
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !27
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %30) #4, !dbg !28
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !29
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %30) #4, !dbg !30
  %186 = bitcast i32 %185 to float, !dbg !30
  %187 = sext i32 %31 to i64, !dbg !31
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !31
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %30) #4, !dbg !32
  %190 = getelementptr float, ptr addrspace(1) %4, i64 %187, !dbg !33
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %30) #4, !dbg !34
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float 2.560000e+02) #4, !dbg !35
  %193 = fadd float %192, 0x3EE4F8B580000000, !dbg !36
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %194, 0, !dbg !37
  br i1 %.not.i, label %197, label %195, !dbg !37

195:                                              ; preds = %8
  %196 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

197:                                              ; preds = %8
  %198 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %195, %197
  %.0.i = phi float [ %196, %195 ], [ %198, %197 ], !dbg !37
  %199 = bitcast i32 %183 to float, !dbg !28
  %200 = fsub float %179, %199, !dbg !38
  %201 = fsub float %177, %199, !dbg !38
  %202 = fsub float %175, %199, !dbg !38
  %203 = fsub float %173, %199, !dbg !38
  %204 = fsub float %171, %199, !dbg !38
  %205 = fsub float %169, %199, !dbg !38
  %206 = fsub float %167, %199, !dbg !38
  %207 = fsub float %165, %199, !dbg !38
  %208 = fsub float %163, %199, !dbg !38
  %209 = fsub float %161, %199, !dbg !38
  %210 = fsub float %159, %199, !dbg !38
  %211 = fsub float %157, %199, !dbg !38
  %212 = fsub float %155, %199, !dbg !38
  %213 = fsub float %153, %199, !dbg !38
  %214 = fsub float %151, %199, !dbg !38
  %215 = fsub float %149, %199, !dbg !38
  %216 = bitcast i32 %191 to float, !dbg !34
  %217 = bitcast i32 %189 to float, !dbg !32
  %218 = and i32 %12, 252, !dbg !17
  %219 = or disjoint i32 %17, %218, !dbg !18
  %220 = icmp slt i32 %219, 2048, !dbg !19
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %221 = and i32 %.lobit1, 3, !dbg !12
  %222 = or disjoint i32 %221, %10, !dbg !13
  %223 = or disjoint i32 %222, 12, !dbg !13
  %224 = icmp slt i32 %223, 16, !dbg !14
  %225 = and i1 %224, %220, !dbg !24
  %226 = or disjoint i32 %222, 8, !dbg !13
  %227 = icmp slt i32 %226, 16, !dbg !14
  %228 = and i1 %227, %220, !dbg !24
  %229 = or disjoint i32 %222, 4, !dbg !13
  %230 = icmp slt i32 %229, 16, !dbg !14
  %231 = and i1 %230, %220, !dbg !24
  %232 = icmp slt i32 %222, 16, !dbg !14
  %233 = and i1 %232, %220, !dbg !24
  %234 = fmul float %215, %.0.i, !dbg !39
  %235 = fmul float %214, %.0.i, !dbg !39
  %236 = fmul float %213, %.0.i, !dbg !39
  %237 = fmul float %212, %.0.i, !dbg !39
  %238 = fmul float %211, %.0.i, !dbg !39
  %239 = fmul float %210, %.0.i, !dbg !39
  %240 = fmul float %209, %.0.i, !dbg !39
  %241 = fmul float %208, %.0.i, !dbg !39
  %242 = fmul float %207, %.0.i, !dbg !39
  %243 = fmul float %206, %.0.i, !dbg !39
  %244 = fmul float %205, %.0.i, !dbg !39
  %245 = fmul float %204, %.0.i, !dbg !39
  %246 = fmul float %203, %.0.i, !dbg !39
  %247 = fmul float %202, %.0.i, !dbg !39
  %248 = fmul float %201, %.0.i, !dbg !39
  %249 = fmul float %200, %.0.i, !dbg !39
  %250 = fmul float %234, %217, !dbg !40
  %251 = fmul float %235, %217, !dbg !40
  %252 = fmul float %236, %217, !dbg !40
  %253 = fmul float %237, %217, !dbg !40
  %254 = fmul float %238, %217, !dbg !40
  %255 = fmul float %239, %217, !dbg !40
  %256 = fmul float %240, %217, !dbg !40
  %257 = fmul float %241, %217, !dbg !40
  %258 = fmul float %242, %217, !dbg !40
  %259 = fmul float %243, %217, !dbg !40
  %260 = fmul float %244, %217, !dbg !40
  %261 = fmul float %245, %217, !dbg !40
  %262 = fmul float %246, %217, !dbg !40
  %263 = fmul float %247, %217, !dbg !40
  %264 = fmul float %248, %217, !dbg !40
  %265 = fmul float %249, %217, !dbg !40
  %266 = fadd float %250, %216, !dbg !41
  %267 = fadd float %251, %216, !dbg !41
  %268 = fadd float %252, %216, !dbg !41
  %269 = fadd float %253, %216, !dbg !41
  %270 = fadd float %254, %216, !dbg !41
  %271 = fadd float %255, %216, !dbg !41
  %272 = fadd float %256, %216, !dbg !41
  %273 = fadd float %257, %216, !dbg !41
  %274 = fadd float %258, %216, !dbg !41
  %275 = fadd float %259, %216, !dbg !41
  %276 = fadd float %260, %216, !dbg !41
  %277 = fadd float %261, %216, !dbg !41
  %278 = fadd float %262, %216, !dbg !41
  %279 = fadd float %263, %216, !dbg !41
  %280 = fadd float %264, %216, !dbg !41
  %281 = fadd float %265, %216, !dbg !41
  %282 = shl i32 %222, 11, !dbg !42
  %283 = shl i32 %229, 11, !dbg !42
  %284 = shl i32 %226, 11, !dbg !42
  %285 = shl i32 %223, 11, !dbg !42
  %286 = add i32 %219, %282, !dbg !43
  %287 = add i32 %219, %283, !dbg !43
  %288 = add i32 %219, %284, !dbg !43
  %289 = add i32 %219, %285, !dbg !43
  %290 = sext i32 %286 to i64, !dbg !44
  %291 = getelementptr float, ptr addrspace(1) %5, i64 %290, !dbg !44
  %292 = sext i32 %287 to i64, !dbg !44
  %293 = getelementptr float, ptr addrspace(1) %5, i64 %292, !dbg !44
  %294 = sext i32 %288 to i64, !dbg !44
  %295 = getelementptr float, ptr addrspace(1) %5, i64 %294, !dbg !44
  %296 = sext i32 %289 to i64, !dbg !44
  %297 = getelementptr float, ptr addrspace(1) %5, i64 %296, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %298 = and i32 %12, 1020, !dbg !45
  %299 = bitcast float %266 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %299, i1 true) #4, !dbg !45
  %300 = bitcast float %267 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %300, i1 true) #4, !dbg !45
  %301 = bitcast float %268 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %301, i1 true) #4, !dbg !45
  %302 = bitcast float %269 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %302, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %303 = lshr i32 %298, 8, !dbg !45
  %304 = or disjoint i32 %303, %298, !dbg !45
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !45
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !45
  %307 = or disjoint i32 %298, 1, !dbg !45
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !45
  %309 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %307, !dbg !45
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !45
  %311 = or disjoint i32 %298, 2, !dbg !45
  %312 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %311, !dbg !45
  %313 = load i32, ptr addrspace(3) %312, align 4, !dbg !45
  %314 = or disjoint i32 %298, 3, !dbg !45
  %315 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %314, !dbg !45
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %317 = bitcast float %270 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %317, i1 true) #4, !dbg !45
  %318 = bitcast float %271 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %318, i1 true) #4, !dbg !45
  %319 = bitcast float %272 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %319, i1 true) #4, !dbg !45
  %320 = bitcast float %273 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %320, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %321 = load i32, ptr addrspace(3) %305, align 4, !dbg !45
  %322 = load i32, ptr addrspace(3) %309, align 4, !dbg !45
  %323 = load i32, ptr addrspace(3) %312, align 4, !dbg !45
  %324 = load i32, ptr addrspace(3) %315, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %325 = bitcast float %274 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %325, i1 true) #4, !dbg !45
  %326 = bitcast float %275 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %326, i1 true) #4, !dbg !45
  %327 = bitcast float %276 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %327, i1 true) #4, !dbg !45
  %328 = bitcast float %277 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %328, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %329 = load i32, ptr addrspace(3) %305, align 4, !dbg !45
  %330 = load i32, ptr addrspace(3) %309, align 4, !dbg !45
  %331 = load i32, ptr addrspace(3) %312, align 4, !dbg !45
  %332 = load i32, ptr addrspace(3) %315, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %333 = bitcast float %278 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %333, i1 true) #4, !dbg !45
  %334 = bitcast float %279 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %334, i1 true) #4, !dbg !45
  %335 = bitcast float %280 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %335, i1 true) #4, !dbg !45
  %336 = bitcast float %281 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %336, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %337 = load i32, ptr addrspace(3) %305, align 4, !dbg !45
  %338 = load i32, ptr addrspace(3) %309, align 4, !dbg !45
  %339 = load i32, ptr addrspace(3) %312, align 4, !dbg !45
  %340 = load i32, ptr addrspace(3) %315, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %310, i32 %313, i32 %316, ptr addrspace(1) %291, i1 %233) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %322, i32 %323, i32 %324, ptr addrspace(1) %293, i1 %231) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %295, i1 %228) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %337, i32 %338, i32 %339, i32 %340, ptr addrspace(1) %297, i1 %225) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czuwiecqcgwoxntkrxikx2iquhuyvzp66ikodxf5qw33jd3y6a4c.py", directory: "inductor_cache/zu")
!4 = !{ptr @triton_poi_fused_clone_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_27", linkageName: "triton_poi_fused_clone_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 38, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 51, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 41, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 41, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 27, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 35, scope: !7)
!43 = !DILocation(line: 45, column: 30, scope: !7)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 47, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
