; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = icmp slt i32 %11, 2560, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %15 = shl i32 %14, 8, !dbg !15
  %16 = and i32 %12, 127, !dbg !16
  %17 = or disjoint i32 %16, 128, !dbg !16
  %18 = or disjoint i32 %15, %16, !dbg !17
  %19 = or disjoint i32 %15, %17, !dbg !17
  %20 = icmp slt i32 %18, 256, !dbg !18
  %21 = icmp slt i32 %19, 256, !dbg !18
  %.frozen = freeze i32 %11, !dbg !19
  %22 = sdiv i32 %.frozen, 640, !dbg !19
  %23 = mul i32 %22, 640, !dbg !20
  %.decomposed = sub i32 %.frozen, %23, !dbg !20
  %24 = mul i32 %18, 640, !dbg !21
  %25 = mul i32 %19, 640, !dbg !21
  %26 = mul i32 %22, 163840, !dbg !22
  %27 = add i32 %26, %.decomposed, !dbg !23
  %28 = add i32 %27, %24, !dbg !24
  %29 = add i32 %27, %25, !dbg !24
  %30 = sext i32 %28 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = sext i32 %29 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = and i1 %13, %20, !dbg !26
  %35 = and i1 %13, %21, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %34) #4, !dbg !27
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %35) #4, !dbg !27
  %38 = sext i32 %.decomposed to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !28
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %13) #4, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !30
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %13) #4, !dbg !31
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !31
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !31
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !31
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !31
  %47 = bitcast i32 %43 to float, !dbg !31
  %48 = bitcast i32 %44 to float, !dbg !31
  %49 = bitcast i32 %45 to float, !dbg !31
  %50 = bitcast i32 %46 to float, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !32
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %13) #4, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !34
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %13) #4, !dbg !35
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !36
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !36
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !36
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %59, 0, !dbg !37
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %60, 0, !dbg !37
  br i1 %.not.i, label %66, label %61, !dbg !37

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !37

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !37

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i2 = icmp eq i32 %71, 0, !dbg !37
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i5 = icmp eq i32 %72, 0, !dbg !37
  br i1 %.not.i2, label %78, label %73, !dbg !37

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %76, label %74, !dbg !37

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %81, label %79, !dbg !37

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

__nv_sqrtf.exit6:                                 ; preds = %74, %76, %79, %81
  %.0.i4 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !37
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i7 = icmp eq i32 %83, 0, !dbg !37
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i10 = icmp eq i32 %84, 0, !dbg !37
  br i1 %.not.i7, label %90, label %85, !dbg !37

85:                                               ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %88, label %86, !dbg !37

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit11, !dbg !37

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit11, !dbg !37

90:                                               ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %93, label %91, !dbg !37

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit11, !dbg !37

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit11, !dbg !37

__nv_sqrtf.exit11:                                ; preds = %86, %88, %91, %93
  %.0.i9 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !37
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i12 = icmp eq i32 %95, 0, !dbg !37
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i15 = icmp eq i32 %96, 0, !dbg !37
  br i1 %.not.i12, label %102, label %97, !dbg !37

97:                                               ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %100, label %98, !dbg !37

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit16, !dbg !37

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit16, !dbg !37

102:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %105, label %103, !dbg !37

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit16, !dbg !37

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit16, !dbg !37

__nv_sqrtf.exit16:                                ; preds = %98, %100, %103, %105
  %.0.i14 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !37
  %107 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !35
  %122 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !35
  %123 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !33
  %127 = shl i32 %12, 2, !dbg !16
  %128 = and i32 %127, 252, !dbg !16
  %129 = or disjoint i32 %15, %128, !dbg !17
  %130 = icmp slt i32 %129, 256, !dbg !18
  %131 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %131, 1, !dbg !12
  %132 = or disjoint i32 %.lobit, %11, !dbg !38
  %133 = or disjoint i32 %132, 2, !dbg !38
  %134 = icmp slt i32 %133, 2560, !dbg !13
  %135 = and i1 %134, %130, !dbg !26
  %136 = icmp slt i32 %132, 2560, !dbg !13
  %137 = and i1 %136, %130, !dbg !26
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !39
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !39
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #4, !dbg !39
  %142 = shl i32 %132, 8, !dbg !40
  %143 = shl i32 %133, 8, !dbg !40
  %144 = add i32 %129, %142, !dbg !41
  %145 = add i32 %129, %143, !dbg !41
  %146 = sext i32 %144 to i64, !dbg !42
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %146, !dbg !42
  %148 = sext i32 %145 to i64, !dbg !42
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %148, !dbg !42
  %150 = and i32 %127, 508, !dbg !43
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !43
  %152 = getelementptr inbounds i8, ptr addrspace(3) %151, i32 1028, !dbg !43
  %153 = getelementptr inbounds i8, ptr addrspace(3) %151, i32 2056, !dbg !43
  %154 = getelementptr inbounds i8, ptr addrspace(3) %151, i32 3084, !dbg !43
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !43
  %156 = getelementptr inbounds i8, ptr addrspace(3) %151, i32 1540, !dbg !43
  %157 = getelementptr inbounds i8, ptr addrspace(3) %151, i32 2568, !dbg !43
  %158 = getelementptr inbounds i8, ptr addrspace(3) %151, i32 3596, !dbg !43
  %159 = lshr i32 %150, 8, !dbg !43
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !43
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %150, !dbg !43
  %162 = or disjoint i32 %150, 1, !dbg !43
  %163 = getelementptr float, ptr addrspace(3) %160, i32 %162, !dbg !43
  %164 = or disjoint i32 %150, 2, !dbg !43
  %165 = getelementptr float, ptr addrspace(3) %160, i32 %164, !dbg !43
  %166 = or disjoint i32 %150, 3, !dbg !43
  %167 = getelementptr float, ptr addrspace(3) %160, i32 %166, !dbg !43
  %168 = or disjoint i32 %150, 512, !dbg !43
  %169 = lshr i32 %168, 8, !dbg !43
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !43
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !43
  %172 = or disjoint i32 %150, 513, !dbg !43
  %173 = lshr i32 %172, 8, !dbg !43
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !43
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %172, !dbg !43
  %176 = or disjoint i32 %150, 514, !dbg !43
  %177 = lshr i32 %176, 8, !dbg !43
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !43
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !43
  %180 = or disjoint i32 %150, 515, !dbg !43
  %181 = lshr i32 %180, 8, !dbg !43
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !43
  %183 = getelementptr float, ptr addrspace(3) %182, i32 %180, !dbg !43
  %184 = getelementptr i1, ptr addrspace(1) %6, i64 %30, !dbg !44
  %185 = getelementptr i1, ptr addrspace(1) %6, i64 %32, !dbg !44
  %186 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !29
  %187 = insertelement <4 x i32> %186, i32 %112, i64 1, !dbg !29
  %188 = insertelement <4 x i32> %187, i32 %110, i64 2, !dbg !29
  %189 = insertelement <4 x i32> %188, i32 %108, i64 3, !dbg !29
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !29
  %191 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !27
  %192 = insertelement <4 x i32> %191, i32 %117, i64 1, !dbg !27
  %193 = insertelement <4 x i32> %192, i32 %116, i64 2, !dbg !27
  %194 = insertelement <4 x i32> %193, i32 %115, i64 3, !dbg !27
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !27
  %196 = fsub <4 x float> %195, %190, !dbg !45
  %197 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !35
  %198 = insertelement <4 x i32> %197, i32 %121, i64 1, !dbg !35
  %199 = insertelement <4 x i32> %198, i32 %120, i64 2, !dbg !35
  %200 = insertelement <4 x i32> %199, i32 %119, i64 3, !dbg !35
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !35
  %202 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !33
  %203 = insertelement <4 x i32> %202, i32 %125, i64 1, !dbg !33
  %204 = insertelement <4 x i32> %203, i32 %124, i64 2, !dbg !33
  %205 = insertelement <4 x i32> %204, i32 %123, i64 3, !dbg !33
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !33
  %207 = insertelement <4 x float> poison, float %138, i64 0, !dbg !46
  %208 = insertelement <4 x float> %207, float %139, i64 1, !dbg !46
  %209 = insertelement <4 x float> %208, float %140, i64 2, !dbg !46
  %210 = insertelement <4 x float> %209, float %141, i64 3, !dbg !46
  %211 = fmul <4 x float> %196, %210, !dbg !46
  %212 = fmul <4 x float> %211, %206, !dbg !47
  %213 = fadd <4 x float> %212, %201, !dbg !48
  %214 = fcmp olt <4 x float> %213, zeroinitializer, !dbg !49
  %215 = select <4 x i1> %214, <4 x float> zeroinitializer, <4 x float> %213, !dbg !53
  %216 = fcmp ole <4 x float> %215, zeroinitializer, !dbg !54
  %217 = extractelement <4 x float> %215, i64 0, !dbg !43
  %218 = bitcast float %217 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %218, i1 true) #4, !dbg !43
  %219 = extractelement <4 x float> %215, i64 1, !dbg !43
  %220 = bitcast float %219 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %220, i1 true) #4, !dbg !43
  %221 = extractelement <4 x float> %215, i64 2, !dbg !43
  %222 = bitcast float %221 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %222, i1 true) #4, !dbg !43
  %223 = extractelement <4 x float> %215, i64 3, !dbg !43
  %224 = bitcast float %223 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %224, i1 true) #4, !dbg !43
  %225 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !27
  %226 = insertelement <4 x i32> %225, i32 %111, i64 1, !dbg !27
  %227 = insertelement <4 x i32> %226, i32 %109, i64 2, !dbg !27
  %228 = insertelement <4 x i32> %227, i32 %107, i64 3, !dbg !27
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !27
  %230 = fsub <4 x float> %229, %190, !dbg !45
  %231 = fmul <4 x float> %230, %210, !dbg !46
  %232 = fmul <4 x float> %231, %206, !dbg !47
  %233 = fadd <4 x float> %232, %201, !dbg !48
  %234 = fcmp olt <4 x float> %233, zeroinitializer, !dbg !49
  %235 = select <4 x i1> %234, <4 x float> zeroinitializer, <4 x float> %233, !dbg !53
  %236 = fcmp ole <4 x float> %235, zeroinitializer, !dbg !54
  %237 = extractelement <4 x float> %235, i64 0, !dbg !43
  %238 = bitcast float %237 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %238, i1 true) #4, !dbg !43
  %239 = extractelement <4 x float> %235, i64 1, !dbg !43
  %240 = bitcast float %239 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %240, i1 true) #4, !dbg !43
  %241 = extractelement <4 x float> %235, i64 2, !dbg !43
  %242 = bitcast float %241 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %242, i1 true) #4, !dbg !43
  %243 = extractelement <4 x float> %235, i64 3, !dbg !43
  %244 = bitcast float %243 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %244, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %245 = load i32, ptr addrspace(3) %161, align 4, !dbg !43
  %246 = load i32, ptr addrspace(3) %163, align 4, !dbg !43
  %247 = load i32, ptr addrspace(3) %165, align 4, !dbg !43
  %248 = load i32, ptr addrspace(3) %167, align 4, !dbg !43
  %249 = load i32, ptr addrspace(3) %171, align 4, !dbg !43
  %250 = load i32, ptr addrspace(3) %175, align 4, !dbg !43
  %251 = load i32, ptr addrspace(3) %179, align 4, !dbg !43
  %252 = load i32, ptr addrspace(3) %183, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %245, i32 %246, i32 %247, i32 %248, ptr addrspace(1) %147, i1 %137) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %250, i32 %251, i32 %252, ptr addrspace(1) %149, i1 %135) #4, !dbg !43
  %253 = zext <4 x i1> %216 to <4 x i8>, !dbg !55
  %254 = bitcast <4 x i8> %253 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %254, ptr addrspace(1) %184, i1 %34) #4, !dbg !55
  %255 = zext <4 x i1> %236 to <4 x i8>, !dbg !55
  %256 = bitcast <4 x i8> %255 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %256, ptr addrspace(1) %185, i1 %35) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckmmk73m3umnwwrsfl4duy7uvpnx2cpzdwclh6z4z73xw4tmfxfi.py", directory: "inductor_cache/km")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 64, scope: !7)
!27 = !DILocation(line: 32, column: 56, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 23, column: 23, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 52, column: 34, scope: !7)
!41 = !DILocation(line: 52, column: 30, scope: !7)
!42 = !DILocation(line: 52, column: 25, scope: !7)
!43 = !DILocation(line: 52, column: 46, scope: !7)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 49, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 51, column: 21, scope: !7)
!55 = !DILocation(line: 53, column: 58, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
