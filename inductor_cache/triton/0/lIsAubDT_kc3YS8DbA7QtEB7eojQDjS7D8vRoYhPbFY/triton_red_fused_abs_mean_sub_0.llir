; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_abs_mean_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = shl i32 %6, 13, !dbg !13
  %12 = or disjoint i32 %11, %10
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = or disjoint i64 %13, 2048, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %39 = or disjoint i64 %13, 4096, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !15
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !16
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !17
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !18
  %52 = or disjoint i64 %13, 6144, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !15
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !16
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !16
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !16
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !16
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !17
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #4, !dbg !18
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !18
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !18
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !18
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !18
  %65 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %66 = insertelement <2 x i32> %65, i32 %17, i64 1, !dbg !16
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !16
  %68 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %69 = insertelement <2 x i32> %68, i32 %23, i64 1, !dbg !18
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !18
  %71 = fsub <2 x float> %67, %70, !dbg !20
  %72 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %71), !dbg !21
  %73 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %74 = insertelement <2 x i32> %73, i32 %30, i64 1, !dbg !16
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !16
  %76 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !18
  %77 = insertelement <2 x i32> %76, i32 %36, i64 1, !dbg !18
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !18
  %79 = fsub <2 x float> %75, %78, !dbg !20
  %80 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %79), !dbg !21
  %81 = fadd <2 x float> %72, %80, !dbg !22
  %82 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !16
  %83 = insertelement <2 x i32> %82, i32 %43, i64 1, !dbg !16
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !16
  %85 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !18
  %86 = insertelement <2 x i32> %85, i32 %49, i64 1, !dbg !18
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !18
  %88 = fsub <2 x float> %84, %87, !dbg !20
  %89 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %88), !dbg !21
  %90 = fadd <2 x float> %81, %89, !dbg !22
  %91 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !16
  %92 = insertelement <2 x i32> %91, i32 %56, i64 1, !dbg !16
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !16
  %94 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !18
  %95 = insertelement <2 x i32> %94, i32 %62, i64 1, !dbg !18
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !18
  %97 = fsub <2 x float> %93, %96, !dbg !20
  %98 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %97), !dbg !21
  %99 = fadd <2 x float> %90, %98, !dbg !22
  %100 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !16
  %101 = insertelement <2 x i32> %100, i32 %18, i64 1, !dbg !16
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !16
  %103 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %104 = insertelement <2 x i32> %103, i32 %24, i64 1, !dbg !18
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !18
  %106 = fsub <2 x float> %102, %105, !dbg !20
  %107 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %106), !dbg !21
  %108 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !16
  %109 = insertelement <2 x i32> %108, i32 %31, i64 1, !dbg !16
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !16
  %111 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !18
  %112 = insertelement <2 x i32> %111, i32 %37, i64 1, !dbg !18
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !18
  %114 = fsub <2 x float> %110, %113, !dbg !20
  %115 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %114), !dbg !21
  %116 = fadd <2 x float> %107, %115, !dbg !22
  %117 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !16
  %118 = insertelement <2 x i32> %117, i32 %44, i64 1, !dbg !16
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !16
  %120 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !18
  %121 = insertelement <2 x i32> %120, i32 %50, i64 1, !dbg !18
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !18
  %123 = fsub <2 x float> %119, %122, !dbg !20
  %124 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %123), !dbg !21
  %125 = fadd <2 x float> %116, %124, !dbg !22
  %126 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !16
  %127 = insertelement <2 x i32> %126, i32 %57, i64 1, !dbg !16
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !16
  %129 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !18
  %130 = insertelement <2 x i32> %129, i32 %63, i64 1, !dbg !18
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !18
  %132 = fsub <2 x float> %128, %131, !dbg !20
  %133 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %132), !dbg !21
  %134 = fadd <2 x float> %125, %133, !dbg !22
  %135 = lshr i32 %8, 5, !dbg !12
  %136 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %137 = fadd <2 x float> %99, %shift, !dbg !23
  %shift4 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %138 = fadd <2 x float> %shift4, %137, !dbg !23
  %139 = fadd <2 x float> %134, %138, !dbg !23
  %140 = extractelement <2 x float> %139, i64 0, !dbg !23
  %141 = select i1 %7, float %140, float 0.000000e+00, !dbg !23
  %142 = bitcast float %141 to i32, !dbg !28
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !28
  %144 = bitcast i32 %143 to float, !dbg !28
  %145 = fadd float %141, %144, !dbg !23
  %146 = bitcast float %145 to i32, !dbg !28
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = fadd float %145, %148, !dbg !23
  %150 = bitcast float %149 to i32, !dbg !28
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = fadd float %149, %152, !dbg !23
  %154 = bitcast float %153 to i32, !dbg !28
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !28
  %156 = bitcast i32 %155 to float, !dbg !28
  %157 = fadd float %153, %156, !dbg !23
  %158 = bitcast float %157 to i32, !dbg !28
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !28
  %160 = bitcast i32 %159 to float, !dbg !28
  %161 = fadd float %157, %160, !dbg !23
  %162 = icmp eq i32 %136, 0, !dbg !28
  %163 = and i32 %135, 15, !dbg !28
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !28
  %165 = bitcast float %161 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 %162) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %166 = icmp slt i32 %8, 16, !dbg !28
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !28
  %168 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %167, i1 %166) #4, !dbg !28
  %169 = bitcast i32 %168 to float, !dbg !28
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !28
  %171 = bitcast i32 %170 to float, !dbg !28
  %172 = fadd float %169, %171, !dbg !23
  %173 = bitcast float %172 to i32, !dbg !28
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !28
  %175 = bitcast i32 %174 to float, !dbg !28
  %176 = fadd float %172, %175, !dbg !23
  %177 = bitcast float %176 to i32, !dbg !28
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !28
  %179 = bitcast i32 %178 to float, !dbg !28
  %180 = fadd float %176, %179, !dbg !23
  %181 = bitcast float %180 to i32, !dbg !28
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !28
  %183 = bitcast i32 %182 to float, !dbg !28
  %184 = fadd float %180, %183, !dbg !23
  %185 = and i32 %8, 15, !dbg !28
  %186 = icmp eq i32 %185, 0, !dbg !28
  %187 = and i1 %166, %186, !dbg !28
  %188 = bitcast float %184 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %188, i1 %187) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %189 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %190 = sext i32 %6 to i64, !dbg !29
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !29
  %urem = and i32 %8, 511, !dbg !30
  %192 = icmp eq i32 %urem, 0, !dbg !30
  %193 = and i1 %192, %7, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %191, i1 %193) #4, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cajgd2xhvttlh2snvq5ctxakd4h6x5bjalo2cn7d4elpwx6tuzre.py", directory: "inductor_cache/aj")
!4 = !{ptr @triton_red_fused_abs_mean_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_abs_mean_sub_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_abs_mean_sub_0", linkageName: "triton_red_fused_abs_mean_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 22, scope: !7)
!21 = !DILocation(line: 35, column: 27, scope: !7)
!22 = !DILocation(line: 37, column: 23, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 39, column: 25, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 40, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 4, scope: !7)
