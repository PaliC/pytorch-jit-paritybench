; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_clone_mul_relu_stack_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 6, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 62, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 64, !dbg !14
  %21 = srem i32 %19, 4, !dbg !15
  %22 = sext i32 %19 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %20) #1, !dbg !17
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %27 = sext i32 %21 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %20) #1, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %20) #1, !dbg !21
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !22
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %20) #1, !dbg !23
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !24
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #1, !dbg !25
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !26
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %20) #1, !dbg !27
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !27
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !28
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %20) #1, !dbg !29
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !29
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !33
  %56 = getelementptr i1, ptr addrspace(1) %11, i64 %22, !dbg !34
  %57 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %58 = insertelement <2 x i32> %57, i32 %31, i64 1, !dbg !19
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !19
  %60 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !23
  %61 = insertelement <2 x i32> %60, i32 %39, i64 1, !dbg !23
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !23
  %63 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !27
  %64 = insertelement <2 x i32> %63, i32 %47, i64 1, !dbg !27
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !27
  %66 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !29
  %67 = insertelement <2 x i32> %66, i32 %51, i64 1, !dbg !29
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !29
  %69 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %70 = insertelement <2 x i32> %69, i32 %26, i64 1, !dbg !17
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !17
  %72 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !21
  %73 = insertelement <2 x i32> %72, i32 %35, i64 1, !dbg !21
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !21
  %75 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !25
  %76 = insertelement <2 x i32> %75, i32 %43, i64 1, !dbg !25
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !25
  %78 = fmul <2 x float> %59, %74, !dbg !35
  %79 = fadd <2 x float> %78, %71, !dbg !36
  %80 = fcmp olt <2 x float> %79, zeroinitializer, !dbg !37
  %81 = select <2 x i1> %80, <2 x float> zeroinitializer, <2 x float> %79, !dbg !41
  %82 = fmul <2 x float> %81, %59, !dbg !42
  %83 = fadd <2 x float> %82, %77, !dbg !43
  %84 = fcmp olt <2 x float> %83, zeroinitializer, !dbg !44
  %85 = select <2 x i1> %84, <2 x float> zeroinitializer, <2 x float> %83, !dbg !46
  %86 = fmul <2 x float> %85, %59, !dbg !47
  %87 = fadd <2 x float> %86, %62, !dbg !48
  %88 = fcmp olt <2 x float> %87, zeroinitializer, !dbg !49
  %89 = select <2 x i1> %88, <2 x float> zeroinitializer, <2 x float> %87, !dbg !51
  %90 = fadd <2 x float> %65, %68, !dbg !52
  %91 = fmul <2 x float> %89, %59, !dbg !53
  %92 = fadd <2 x float> %90, %91, !dbg !54
  %93 = fcmp olt <2 x float> %92, zeroinitializer, !dbg !55
  %94 = select <2 x i1> %93, <2 x float> zeroinitializer, <2 x float> %92, !dbg !57
  %95 = fcmp ole <2 x float> %94, zeroinitializer, !dbg !58
  %bc = bitcast <2 x float> %81 to <2 x i32>, !dbg !59
  %96 = extractelement <2 x i32> %bc, i64 0, !dbg !59
  %bc1 = bitcast <2 x float> %81 to <2 x i32>, !dbg !59
  %97 = extractelement <2 x i32> %bc1, i64 1, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %96, i32 %97, ptr addrspace(1) %52, i1 %20) #1, !dbg !59
  %bc2 = bitcast <2 x float> %89 to <2 x i32>, !dbg !60
  %98 = extractelement <2 x i32> %bc2, i64 0, !dbg !60
  %bc3 = bitcast <2 x float> %89 to <2 x i32>, !dbg !60
  %99 = extractelement <2 x i32> %bc3, i64 1, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %98, i32 %99, ptr addrspace(1) %53, i1 %20) #1, !dbg !60
  %bc4 = bitcast <2 x float> %85 to <2 x i32>, !dbg !61
  %100 = extractelement <2 x i32> %bc4, i64 0, !dbg !61
  %bc5 = bitcast <2 x float> %85 to <2 x i32>, !dbg !61
  %101 = extractelement <2 x i32> %bc5, i64 1, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %54, i1 %20) #1, !dbg !61
  %bc6 = bitcast <2 x float> %94 to <2 x i32>, !dbg !62
  %102 = extractelement <2 x i32> %bc6, i64 0, !dbg !62
  %bc7 = bitcast <2 x float> %94 to <2 x i32>, !dbg !62
  %103 = extractelement <2 x i32> %bc7, i64 1, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %44, i1 %20) #1, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %55, i1 %20) #1, !dbg !63
  %104 = zext <2 x i1> %95 to <2 x i8>, !dbg !64
  %105 = bitcast <2 x i8> %104 to i16, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %105, ptr addrspace(1) %56, i1 %20) #1, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2rprop2ktcc3wfiq7y5lvqpq6ydd2eiel25w7romohpghblrzkh.py", directory: "inductor_cache/2r")
!4 = !{ptr @triton_poi_fused_add_clone_mul_relu_stack_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_relu_stack_threshold_backward_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_relu_stack_threshold_backward_0", linkageName: "triton_poi_fused_add_clone_mul_relu_stack_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 40, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 49, column: 25, scope: !7)
!31 = !DILocation(line: 50, column: 25, scope: !7)
!32 = !DILocation(line: 51, column: 25, scope: !7)
!33 = !DILocation(line: 53, column: 25, scope: !7)
!34 = !DILocation(line: 54, column: 25, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 36, column: 40, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 19, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !45)
!45 = !DILocation(line: 39, column: 41, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !45)
!47 = !DILocation(line: 40, column: 19, scope: !7)
!48 = !DILocation(line: 41, column: 19, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !50)
!50 = !DILocation(line: 42, column: 41, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !50)
!52 = !DILocation(line: 43, column: 20, scope: !7)
!53 = !DILocation(line: 44, column: 19, scope: !7)
!54 = !DILocation(line: 45, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !56)
!56 = !DILocation(line: 46, column: 41, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !56)
!58 = !DILocation(line: 48, column: 21, scope: !7)
!59 = !DILocation(line: 49, column: 36, scope: !7)
!60 = !DILocation(line: 50, column: 37, scope: !7)
!61 = !DILocation(line: 51, column: 37, scope: !7)
!62 = !DILocation(line: 52, column: 40, scope: !7)
!63 = !DILocation(line: 53, column: 37, scope: !7)
!64 = !DILocation(line: 54, column: 37, scope: !7)
!65 = !DILocation(line: 54, column: 4, scope: !7)
