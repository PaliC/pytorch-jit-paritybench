; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 128, !dbg !14
  %12 = mul i32 %11, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = srem i32 %11, 16, !dbg !16
  %14 = sdiv i32 %10, 2048, !dbg !17
  %15 = shl nsw i32 %13, 9, !dbg !18
  %16 = shl i32 %14, 15, !dbg !19
  %17 = add i32 %16, %.decomposed, !dbg !20
  %18 = add i32 %17, %15, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !23
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !23
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !23
  %24 = add i32 %17, 128, !dbg !24
  %25 = add i32 %24, %15, !dbg !25
  %26 = sext i32 %25 to i64, !dbg !26
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !26
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !27
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !27
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !27
  %31 = add i32 %17, 256, !dbg !28
  %32 = add i32 %31, %15, !dbg !29
  %33 = sext i32 %32 to i64, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !30
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !31
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !31
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !31
  %38 = add i32 %17, 384, !dbg !32
  %39 = add i32 %38, %15, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !34
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !35
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !35
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !35
  %45 = add i32 %17, 8192, !dbg !36
  %46 = add i32 %45, %15, !dbg !37
  %47 = sext i32 %46 to i64, !dbg !38
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !38
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !39
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !39
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !39
  %52 = add i32 %17, 8320, !dbg !40
  %53 = add i32 %52, %15, !dbg !41
  %54 = sext i32 %53 to i64, !dbg !42
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !42
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !43
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !43
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !43
  %59 = add i32 %17, 8448, !dbg !44
  %60 = add i32 %59, %15, !dbg !45
  %61 = sext i32 %60 to i64, !dbg !46
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !46
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !47
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !47
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !47
  %66 = add i32 %17, 8576, !dbg !48
  %67 = add i32 %66, %15, !dbg !49
  %68 = sext i32 %67 to i64, !dbg !50
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !50
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !51
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !51
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !51
  %73 = add i32 %17, 16384, !dbg !52
  %74 = add i32 %73, %15, !dbg !53
  %75 = sext i32 %74 to i64, !dbg !54
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !54
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !55
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !55
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !55
  %80 = add i32 %17, 16512, !dbg !56
  %81 = add i32 %80, %15, !dbg !57
  %82 = sext i32 %81 to i64, !dbg !58
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !58
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !59
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !59
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !59
  %87 = add i32 %17, 16640, !dbg !60
  %88 = add i32 %87, %15, !dbg !61
  %89 = sext i32 %88 to i64, !dbg !62
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !62
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !63
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !63
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !63
  %94 = add i32 %17, 16768, !dbg !64
  %95 = add i32 %94, %15, !dbg !65
  %96 = sext i32 %95 to i64, !dbg !66
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !66
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !67
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !67
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !67
  %101 = add i32 %17, 24576, !dbg !68
  %102 = add i32 %101, %15, !dbg !69
  %103 = sext i32 %102 to i64, !dbg !70
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !70
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !71
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !71
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !71
  %108 = add i32 %17, 24704, !dbg !72
  %109 = add i32 %108, %15, !dbg !73
  %110 = sext i32 %109 to i64, !dbg !74
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !74
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !75
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !75
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !75
  %115 = add i32 %17, 24832, !dbg !76
  %116 = add i32 %115, %15, !dbg !77
  %117 = sext i32 %116 to i64, !dbg !78
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !78
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !79
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !79
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !79
  %122 = add i32 %17, 24960, !dbg !80
  %123 = add i32 %122, %15, !dbg !81
  %124 = sext i32 %123 to i64, !dbg !82
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !82
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !83
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !83
  %128 = extractvalue { i32, i32 } %126, 1, !dbg !83
  %129 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !23
  %130 = insertelement <2 x i32> %129, i32 %23, i64 1, !dbg !23
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !23
  %132 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !27
  %133 = insertelement <2 x i32> %132, i32 %30, i64 1, !dbg !27
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !27
  %135 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !31
  %136 = insertelement <2 x i32> %135, i32 %37, i64 1, !dbg !31
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !31
  %138 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !35
  %139 = insertelement <2 x i32> %138, i32 %44, i64 1, !dbg !35
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !35
  %141 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !39
  %142 = insertelement <2 x i32> %141, i32 %51, i64 1, !dbg !39
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !39
  %144 = fcmp ogt <2 x float> %134, %131, !dbg !84
  %145 = fcmp uno <2 x float> %134, zeroinitializer, !dbg !88
  %146 = or <2 x i1> %144, %145, !dbg !89
  %.v = select <2 x i1> %146, <2 x i32> %133, <2 x i32> %130, !dbg !90
  %147 = bitcast <2 x i32> %.v to <2 x float>, !dbg !90
  %148 = fcmp olt <2 x float> %147, %137, !dbg !91
  %149 = fcmp uno <2 x float> %137, zeroinitializer, !dbg !93
  %150 = or <2 x i1> %149, %148, !dbg !94
  %.v1 = select <2 x i1> %150, <2 x i32> %136, <2 x i32> %.v, !dbg !95
  %151 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !95
  %152 = fcmp olt <2 x float> %151, %140, !dbg !96
  %153 = fcmp uno <2 x float> %140, zeroinitializer, !dbg !98
  %154 = or <2 x i1> %153, %152, !dbg !99
  %.v2 = select <2 x i1> %154, <2 x i32> %139, <2 x i32> %.v1, !dbg !100
  %155 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !100
  %156 = fcmp olt <2 x float> %155, %143, !dbg !101
  %157 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !43
  %158 = insertelement <2 x i32> %157, i32 %58, i64 1, !dbg !43
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !43
  %160 = fcmp uno <2 x float> %143, zeroinitializer, !dbg !103
  %161 = or <2 x i1> %160, %156, !dbg !104
  %.v3 = select <2 x i1> %161, <2 x i32> %142, <2 x i32> %.v2, !dbg !105
  %162 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !105
  %163 = fcmp olt <2 x float> %162, %159, !dbg !106
  %164 = fcmp uno <2 x float> %159, zeroinitializer, !dbg !108
  %165 = or <2 x i1> %164, %163, !dbg !109
  %.v4 = select <2 x i1> %165, <2 x i32> %158, <2 x i32> %.v3, !dbg !110
  %166 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !110
  %167 = zext <2 x i1> %144 to <2 x i8>, !dbg !111
  %168 = select <2 x i1> %148, <2 x i8> splat (i8 2), <2 x i8> %167, !dbg !112
  %169 = select <2 x i1> %152, <2 x i8> splat (i8 3), <2 x i8> %168, !dbg !113
  %170 = select <2 x i1> %156, <2 x i8> splat (i8 4), <2 x i8> %169, !dbg !114
  %171 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !51
  %172 = insertelement <2 x i32> %171, i32 %72, i64 1, !dbg !51
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !51
  %174 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !55
  %175 = insertelement <2 x i32> %174, i32 %79, i64 1, !dbg !55
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !55
  %177 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !59
  %178 = insertelement <2 x i32> %177, i32 %86, i64 1, !dbg !59
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !59
  %180 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !63
  %181 = insertelement <2 x i32> %180, i32 %93, i64 1, !dbg !63
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !63
  %183 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !67
  %184 = insertelement <2 x i32> %183, i32 %100, i64 1, !dbg !67
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !67
  %186 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !71
  %187 = insertelement <2 x i32> %186, i32 %107, i64 1, !dbg !71
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !71
  %189 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !75
  %190 = insertelement <2 x i32> %189, i32 %114, i64 1, !dbg !75
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !75
  %192 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !79
  %193 = insertelement <2 x i32> %192, i32 %121, i64 1, !dbg !79
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !79
  %195 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !83
  %196 = insertelement <2 x i32> %195, i32 %128, i64 1, !dbg !83
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !83
  %198 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !47
  %199 = insertelement <2 x i32> %198, i32 %65, i64 1, !dbg !47
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !47
  %201 = fcmp uno <2 x float> %200, zeroinitializer, !dbg !115
  %202 = fcmp olt <2 x float> %166, %200, !dbg !117
  %203 = or <2 x i1> %201, %202, !dbg !118
  %.v5 = select <2 x i1> %203, <2 x i32> %199, <2 x i32> %.v4, !dbg !119
  %204 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !119
  %205 = fcmp olt <2 x float> %204, %173, !dbg !120
  %206 = fcmp uno <2 x float> %173, zeroinitializer, !dbg !122
  %207 = or <2 x i1> %206, %205, !dbg !123
  %.v6 = select <2 x i1> %207, <2 x i32> %172, <2 x i32> %.v5, !dbg !124
  %208 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !124
  %209 = fcmp olt <2 x float> %208, %176, !dbg !125
  %210 = fcmp uno <2 x float> %176, zeroinitializer, !dbg !127
  %211 = or <2 x i1> %210, %209, !dbg !128
  %.v7 = select <2 x i1> %211, <2 x i32> %175, <2 x i32> %.v6, !dbg !129
  %212 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !129
  %213 = fcmp olt <2 x float> %212, %179, !dbg !130
  %214 = fcmp uno <2 x float> %179, zeroinitializer, !dbg !132
  %215 = or <2 x i1> %214, %213, !dbg !133
  %.v8 = select <2 x i1> %215, <2 x i32> %178, <2 x i32> %.v7, !dbg !134
  %216 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !134
  %217 = fcmp olt <2 x float> %216, %182, !dbg !135
  %218 = fcmp uno <2 x float> %182, zeroinitializer, !dbg !137
  %219 = or <2 x i1> %218, %217, !dbg !138
  %.v9 = select <2 x i1> %219, <2 x i32> %181, <2 x i32> %.v8, !dbg !139
  %220 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !139
  %221 = fcmp olt <2 x float> %220, %185, !dbg !140
  %222 = fcmp uno <2 x float> %185, zeroinitializer, !dbg !142
  %223 = or <2 x i1> %222, %221, !dbg !143
  %.v10 = select <2 x i1> %223, <2 x i32> %184, <2 x i32> %.v9, !dbg !144
  %224 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !144
  %225 = fcmp olt <2 x float> %224, %188, !dbg !145
  %226 = fcmp uno <2 x float> %188, zeroinitializer, !dbg !147
  %227 = or <2 x i1> %226, %225, !dbg !148
  %.v11 = select <2 x i1> %227, <2 x i32> %187, <2 x i32> %.v10, !dbg !149
  %228 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !149
  %229 = fcmp olt <2 x float> %228, %191, !dbg !150
  %230 = fcmp uno <2 x float> %191, zeroinitializer, !dbg !152
  %231 = or <2 x i1> %230, %229, !dbg !153
  %.v12 = select <2 x i1> %231, <2 x i32> %190, <2 x i32> %.v11, !dbg !154
  %232 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !154
  %233 = fcmp olt <2 x float> %232, %194, !dbg !155
  %234 = fcmp uno <2 x float> %194, zeroinitializer, !dbg !157
  %235 = or <2 x i1> %234, %233, !dbg !158
  %.v13 = select <2 x i1> %235, <2 x i32> %193, <2 x i32> %.v12, !dbg !159
  %236 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !159
  %237 = fcmp olt <2 x float> %236, %197, !dbg !160
  %238 = bitcast i32 %127 to float, !dbg !162
  %239 = fcmp uno float %238, 0.000000e+00, !dbg !162
  %240 = bitcast i32 %128 to float, !dbg !162
  %241 = fcmp uno float %240, 0.000000e+00, !dbg !162
  %242 = extractelement <2 x i1> %237, i64 0, !dbg !163
  %243 = or i1 %239, %242, !dbg !163
  %244 = extractelement <2 x i1> %237, i64 1, !dbg !163
  %245 = or i1 %241, %244, !dbg !163
  %246 = select <2 x i1> %163, <2 x i8> splat (i8 5), <2 x i8> %170, !dbg !164
  %247 = select <2 x i1> %202, <2 x i8> splat (i8 6), <2 x i8> %246, !dbg !165
  %248 = select <2 x i1> %205, <2 x i8> splat (i8 7), <2 x i8> %247, !dbg !166
  %249 = select <2 x i1> %209, <2 x i8> splat (i8 8), <2 x i8> %248, !dbg !167
  %250 = select <2 x i1> %213, <2 x i8> splat (i8 9), <2 x i8> %249, !dbg !168
  %251 = select <2 x i1> %217, <2 x i8> splat (i8 10), <2 x i8> %250, !dbg !169
  %252 = select <2 x i1> %221, <2 x i8> splat (i8 11), <2 x i8> %251, !dbg !170
  %253 = select <2 x i1> %225, <2 x i8> splat (i8 12), <2 x i8> %252, !dbg !171
  %254 = select <2 x i1> %229, <2 x i8> splat (i8 13), <2 x i8> %253, !dbg !172
  %255 = select <2 x i1> %233, <2 x i8> splat (i8 14), <2 x i8> %254, !dbg !173
  %256 = select <2 x i1> %237, <2 x i8> splat (i8 15), <2 x i8> %255, !dbg !174
  %257 = sext i32 %10 to i64, !dbg !175
  %258 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !175
  %259 = extractelement <2 x i32> %.v13, i64 0, !dbg !176
  %260 = select i1 %243, i32 %127, i32 %259, !dbg !177
  %261 = extractelement <2 x i32> %.v13, i64 1, !dbg !176
  %262 = select i1 %245, i32 %128, i32 %261, !dbg !177
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %260, i32 %262, ptr addrspace(1) %258, i1 true) #1, !dbg !176
  %263 = getelementptr i8, ptr addrspace(1) %2, i64 %257, !dbg !178
  %264 = bitcast <2 x i8> %256 to i16, !dbg !179
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %264, ptr addrspace(1) %263, i1 true) #1, !dbg !179
  ret void, !dbg !180
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr6sruo5dx4zhvu3ga6n7sod43g3vd4xsm5l5vkeitsqfceqklqx.py", directory: "inductor_cache/r6")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 61, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 41, scope: !7)
!33 = !DILocation(line: 31, column: 50, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 32, column: 51, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 62, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 33, column: 51, scope: !7)
!42 = !DILocation(line: 33, column: 30, scope: !7)
!43 = !DILocation(line: 33, column: 62, scope: !7)
!44 = !DILocation(line: 34, column: 43, scope: !7)
!45 = !DILocation(line: 34, column: 52, scope: !7)
!46 = !DILocation(line: 34, column: 31, scope: !7)
!47 = !DILocation(line: 34, column: 63, scope: !7)
!48 = !DILocation(line: 35, column: 43, scope: !7)
!49 = !DILocation(line: 35, column: 52, scope: !7)
!50 = !DILocation(line: 35, column: 31, scope: !7)
!51 = !DILocation(line: 35, column: 63, scope: !7)
!52 = !DILocation(line: 36, column: 44, scope: !7)
!53 = !DILocation(line: 36, column: 53, scope: !7)
!54 = !DILocation(line: 36, column: 31, scope: !7)
!55 = !DILocation(line: 36, column: 64, scope: !7)
!56 = !DILocation(line: 37, column: 44, scope: !7)
!57 = !DILocation(line: 37, column: 53, scope: !7)
!58 = !DILocation(line: 37, column: 31, scope: !7)
!59 = !DILocation(line: 37, column: 64, scope: !7)
!60 = !DILocation(line: 38, column: 44, scope: !7)
!61 = !DILocation(line: 38, column: 53, scope: !7)
!62 = !DILocation(line: 38, column: 31, scope: !7)
!63 = !DILocation(line: 38, column: 64, scope: !7)
!64 = !DILocation(line: 39, column: 44, scope: !7)
!65 = !DILocation(line: 39, column: 53, scope: !7)
!66 = !DILocation(line: 39, column: 31, scope: !7)
!67 = !DILocation(line: 39, column: 64, scope: !7)
!68 = !DILocation(line: 40, column: 44, scope: !7)
!69 = !DILocation(line: 40, column: 53, scope: !7)
!70 = !DILocation(line: 40, column: 31, scope: !7)
!71 = !DILocation(line: 40, column: 64, scope: !7)
!72 = !DILocation(line: 41, column: 44, scope: !7)
!73 = !DILocation(line: 41, column: 53, scope: !7)
!74 = !DILocation(line: 41, column: 31, scope: !7)
!75 = !DILocation(line: 41, column: 64, scope: !7)
!76 = !DILocation(line: 42, column: 44, scope: !7)
!77 = !DILocation(line: 42, column: 53, scope: !7)
!78 = !DILocation(line: 42, column: 31, scope: !7)
!79 = !DILocation(line: 42, column: 64, scope: !7)
!80 = !DILocation(line: 43, column: 44, scope: !7)
!81 = !DILocation(line: 43, column: 53, scope: !7)
!82 = !DILocation(line: 43, column: 31, scope: !7)
!83 = !DILocation(line: 43, column: 64, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !87)
!85 = distinct !DILexicalBlockFile(scope: !7, file: !86, discriminator: 0)
!86 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!87 = !DILocation(line: 44, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !92)
!92 = !DILocation(line: 45, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !97)
!97 = !DILocation(line: 46, column: 40, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !102)
!102 = !DILocation(line: 47, column: 40, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !107)
!107 = !DILocation(line: 48, column: 41, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !107)
!111 = !DILocation(line: 62, column: 35, scope: !7)
!112 = !DILocation(line: 65, column: 35, scope: !7)
!113 = !DILocation(line: 68, column: 35, scope: !7)
!114 = !DILocation(line: 71, column: 35, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !116)
!116 = !DILocation(line: 49, column: 42, scope: !7)
!117 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !116)
!120 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !121)
!121 = !DILocation(line: 50, column: 42, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !121)
!123 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !121)
!124 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !121)
!125 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !126)
!126 = !DILocation(line: 51, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !126)
!130 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !131)
!131 = !DILocation(line: 52, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !136)
!136 = !DILocation(line: 53, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !136)
!140 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !141)
!141 = !DILocation(line: 54, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !141)
!143 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !141)
!144 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !141)
!145 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !146)
!146 = !DILocation(line: 55, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !146)
!150 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !151)
!151 = !DILocation(line: 56, column: 42, scope: !7)
!152 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !151)
!153 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !151)
!154 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !151)
!155 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !156)
!156 = !DILocation(line: 57, column: 42, scope: !7)
!157 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !156)
!158 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !156)
!159 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !156)
!160 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !161)
!161 = !DILocation(line: 58, column: 42, scope: !7)
!162 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !161)
!163 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !161)
!164 = !DILocation(line: 74, column: 35, scope: !7)
!165 = !DILocation(line: 77, column: 35, scope: !7)
!166 = !DILocation(line: 80, column: 35, scope: !7)
!167 = !DILocation(line: 83, column: 35, scope: !7)
!168 = !DILocation(line: 86, column: 35, scope: !7)
!169 = !DILocation(line: 89, column: 35, scope: !7)
!170 = !DILocation(line: 92, column: 35, scope: !7)
!171 = !DILocation(line: 95, column: 35, scope: !7)
!172 = !DILocation(line: 98, column: 35, scope: !7)
!173 = !DILocation(line: 101, column: 35, scope: !7)
!174 = !DILocation(line: 104, column: 35, scope: !7)
!175 = !DILocation(line: 105, column: 25, scope: !7)
!176 = !DILocation(line: 105, column: 37, scope: !7)
!177 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !161)
!178 = !DILocation(line: 106, column: 25, scope: !7)
!179 = !DILocation(line: 106, column: 37, scope: !7)
!180 = !DILocation(line: 106, column: 4, scope: !7)
