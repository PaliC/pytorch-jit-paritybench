; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 128, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = and i32 %10, 127, !dbg !14
  %14 = or disjoint i32 %13, 128, !dbg !14
  %15 = or disjoint i32 %13, 256, !dbg !14
  %16 = or disjoint i32 %13, 384, !dbg !14
  %17 = or disjoint i32 %9, %12, !dbg !15
  %18 = or disjoint i32 %17, 512, !dbg !15
  %19 = or disjoint i32 %9, %13, !dbg !15
  %20 = or disjoint i32 %9, %14, !dbg !15
  %21 = or disjoint i32 %9, %15, !dbg !15
  %22 = or disjoint i32 %9, %16, !dbg !15
  %23 = or disjoint i32 %19, 512, !dbg !15
  %24 = icmp slt i32 %17, 576, !dbg !16
  %25 = icmp slt i32 %18, 576, !dbg !16
  %26 = icmp slt i32 %19, 576, !dbg !16
  %27 = icmp slt i32 %20, 576, !dbg !16
  %28 = icmp slt i32 %21, 576, !dbg !16
  %29 = icmp slt i32 %22, 576, !dbg !16
  %30 = icmp slt i32 %23, 576, !dbg !16
  %31 = icmp slt i32 %9, 0, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %32 = sdiv i32 %.frozen, 32, !dbg !17
  %33 = mul i32 %32, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %33, !dbg !18
  %34 = mul i32 %6, 576, !dbg !19
  %35 = add i32 %17, %34, !dbg !20
  %36 = add i32 %34, %18, !dbg !20
  %37 = sext i32 %35 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %36 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = and i1 %7, %24, !dbg !22
  %42 = and i1 %25, %7, !dbg !22
  %43 = and i1 %7, %26, !dbg !22
  %44 = and i1 %7, %27, !dbg !22
  %45 = and i1 %7, %28, !dbg !22
  %46 = and i1 %7, %29, !dbg !22
  %47 = and i1 %30, %7, !dbg !22
  %48 = and i1 %31, %7, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %41) #2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %42) #2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = sext i32 %.decomposed to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %7) #2, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %7) #2, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %7) #2, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %7) #2, !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %54, %73, !dbg !26
  %75 = fadd float %55, %73, !dbg !26
  %76 = fadd float %56, %73, !dbg !26
  %77 = fadd float %57, %73, !dbg !26
  %78 = fadd float %63, %73, !dbg !26
  %79 = fadd float %64, %73, !dbg !26
  %80 = fadd float %65, %73, !dbg !26
  %81 = fadd float %66, %73, !dbg !26
  %82 = shl i32 %19, 5, !dbg !27
  %83 = shl i32 %20, 5, !dbg !27
  %84 = shl i32 %21, 5, !dbg !27
  %85 = shl i32 %22, 5, !dbg !27
  %86 = shl i32 %23, 5, !dbg !27
  %87 = or disjoint i32 %82, 20480, !dbg !27
  %88 = or disjoint i32 %82, 24576, !dbg !27
  %89 = or disjoint i32 %82, 28672, !dbg !27
  %90 = mul i32 %32, 18432, !dbg !28
  %91 = add i32 %90, %.decomposed, !dbg !29
  %92 = add i32 %91, %82, !dbg !30
  %93 = add i32 %91, %83, !dbg !30
  %94 = add i32 %91, %84, !dbg !30
  %95 = add i32 %91, %85, !dbg !30
  %96 = add i32 %91, %86, !dbg !30
  %97 = add i32 %91, %87, !dbg !30
  %98 = add i32 %91, %88, !dbg !30
  %99 = add i32 %91, %89, !dbg !30
  %100 = sext i32 %92 to i64, !dbg !31
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !31
  %102 = sext i32 %93 to i64, !dbg !31
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !31
  %104 = sext i32 %94 to i64, !dbg !31
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !31
  %106 = sext i32 %95 to i64, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !31
  %108 = sext i32 %96 to i64, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !31
  %110 = sext i32 %97 to i64, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !31
  %112 = sext i32 %98 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !31
  %114 = sext i32 %99 to i64, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !31
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %117 = bitcast float %74 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !32
  %118 = or disjoint i32 %12, 1, !dbg !32
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !32
  %120 = bitcast float %75 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !32
  %121 = or disjoint i32 %12, 2, !dbg !32
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !32
  %123 = bitcast float %76 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !32
  %124 = or disjoint i32 %12, 3, !dbg !32
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !32
  %126 = bitcast float %77 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !32
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !32
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !32
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !32
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !32
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !32
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %135 = bitcast float %78 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %135, i1 true) #2, !dbg !32
  %136 = bitcast float %79 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %136, i1 true) #2, !dbg !32
  %137 = bitcast float %80 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %137, i1 true) #2, !dbg !32
  %138 = bitcast float %81 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %138, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %139 = load i32, ptr addrspace(3) %127, align 4, !dbg !32
  %140 = load i32, ptr addrspace(3) %129, align 4, !dbg !32
  %141 = load i32, ptr addrspace(3) %131, align 4, !dbg !32
  %142 = load i32, ptr addrspace(3) %133, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %101, i1 %43) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %103, i1 %44) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %105, i1 %45) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %107, i1 %46) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %109, i1 %47) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %111, i1 %48) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %113, i1 %48) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %115, i1 %48) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpzrn4m5hgkv7qrqfldtmffoiftvvqj6xuuzdaudvdl3yss5n6nu.py", directory: "inductor_cache/pz")
!4 = !{ptr @triton_poi_fused_convolution_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_5", linkageName: "triton_poi_fused_convolution_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 33, scope: !7)
!28 = !DILocation(line: 35, column: 44, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 38, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 55, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
