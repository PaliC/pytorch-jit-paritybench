; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 784, !dbg !14
  %21 = icmp slt i32 %16, 784, !dbg !14
  %22 = icmp slt i32 %17, 784, !dbg !14
  %23 = icmp slt i32 %18, 784, !dbg !14
  %24 = icmp slt i32 %19, 784, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = icmp slt i32 %25, 64, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %27 = sdiv i32 %.frozen, 14, !dbg !17
  %28 = mul i32 %27, 14, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %.frozen7 = freeze i32 %16, !dbg !17
  %29 = sdiv i32 %.frozen7, 14, !dbg !17
  %30 = mul i32 %29, 14, !dbg !18
  %.decomposed8 = sub i32 %.frozen7, %30, !dbg !18
  %.frozen9 = freeze i32 %17, !dbg !17
  %31 = sdiv i32 %.frozen9, 14, !dbg !17
  %32 = mul i32 %31, 14, !dbg !18
  %.decomposed10 = sub i32 %.frozen9, %32, !dbg !18
  %.frozen11 = freeze i32 %18, !dbg !17
  %33 = sdiv i32 %.frozen11, 14, !dbg !17
  %34 = mul i32 %33, 14, !dbg !18
  %.decomposed12 = sub i32 %.frozen11, %34, !dbg !18
  %35 = srem i32 %27, 14, !dbg !19
  %36 = srem i32 %29, 14, !dbg !19
  %37 = srem i32 %31, 14, !dbg !19
  %38 = srem i32 %33, 14, !dbg !19
  %39 = sdiv i32 %15, 196, !dbg !20
  %40 = sdiv i32 %16, 196, !dbg !20
  %41 = sdiv i32 %17, 196, !dbg !20
  %42 = sdiv i32 %18, 196, !dbg !20
  %.frozen13 = freeze i32 %19, !dbg !20
  %43 = sdiv i32 %.frozen13, 196, !dbg !20
  %44 = mul i32 %43, 196, !dbg !21
  %.decomposed14 = sub i32 %.frozen13, %44, !dbg !21
  %45 = shl nsw i32 %.decomposed, 7, !dbg !22
  %46 = shl nsw i32 %.decomposed8, 7, !dbg !22
  %47 = shl nsw i32 %.decomposed10, 7, !dbg !22
  %48 = shl nsw i32 %.decomposed12, 7, !dbg !22
  %49 = mul nsw i32 %35, 3712, !dbg !23
  %50 = mul nsw i32 %36, 3712, !dbg !23
  %51 = mul nsw i32 %37, 3712, !dbg !23
  %52 = mul nsw i32 %38, 3712, !dbg !23
  %53 = mul i32 %39, 53824, !dbg !24
  %54 = mul i32 %40, 53824, !dbg !24
  %55 = mul i32 %41, 53824, !dbg !24
  %56 = mul i32 %42, 53824, !dbg !24
  %57 = add i32 %53, %45, !dbg !25
  %58 = add i32 %57, %25, !dbg !26
  %59 = add i32 %58, %49, !dbg !27
  %60 = add i32 %54, %46, !dbg !25
  %61 = add i32 %60, %25, !dbg !26
  %62 = add i32 %61, %50, !dbg !27
  %63 = add i32 %55, %47, !dbg !25
  %64 = add i32 %63, %25, !dbg !26
  %65 = add i32 %64, %51, !dbg !27
  %66 = add i32 %56, %48, !dbg !25
  %67 = add i32 %66, %25, !dbg !26
  %68 = add i32 %67, %52, !dbg !27
  %69 = sext i32 %59 to i64, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !28
  %71 = sext i32 %62 to i64, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !28
  %73 = sext i32 %65 to i64, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !28
  %75 = sext i32 %68 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !28
  %77 = and i1 %26, %20, !dbg !29
  %78 = and i1 %26, %21, !dbg !29
  %79 = and i1 %26, %22, !dbg !29
  %80 = and i1 %26, %23, !dbg !29
  %81 = and i1 %26, %24, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %77) #2, !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %78) #2, !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %79) #2, !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %80) #2, !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = add i32 %25, 64, !dbg !31
  %91 = add i32 %57, %90, !dbg !32
  %92 = add i32 %91, %49, !dbg !33
  %93 = add i32 %60, %90, !dbg !32
  %94 = add i32 %93, %50, !dbg !33
  %95 = add i32 %63, %90, !dbg !32
  %96 = add i32 %95, %51, !dbg !33
  %97 = add i32 %66, %90, !dbg !32
  %98 = add i32 %97, %52, !dbg !33
  %99 = sext i32 %92 to i64, !dbg !34
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !34
  %101 = sext i32 %94 to i64, !dbg !34
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !34
  %103 = sext i32 %96 to i64, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !34
  %105 = sext i32 %98 to i64, !dbg !34
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !34
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %77) #2, !dbg !35
  %108 = bitcast i32 %107 to float, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %78) #2, !dbg !35
  %110 = bitcast i32 %109 to float, !dbg !35
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %79) #2, !dbg !35
  %112 = bitcast i32 %111 to float, !dbg !35
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %80) #2, !dbg !35
  %114 = bitcast i32 %113 to float, !dbg !35
  %115 = add i32 %25, 128, !dbg !36
  %116 = add i32 %57, %115, !dbg !37
  %117 = add i32 %116, %49, !dbg !38
  %118 = add i32 %60, %115, !dbg !37
  %119 = add i32 %118, %50, !dbg !38
  %120 = add i32 %63, %115, !dbg !37
  %121 = add i32 %120, %51, !dbg !38
  %122 = add i32 %66, %115, !dbg !37
  %123 = add i32 %122, %52, !dbg !38
  %124 = sext i32 %117 to i64, !dbg !39
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !39
  %126 = sext i32 %119 to i64, !dbg !39
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !39
  %128 = sext i32 %121 to i64, !dbg !39
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !39
  %130 = sext i32 %123 to i64, !dbg !39
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !39
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %77) #2, !dbg !40
  %133 = bitcast i32 %132 to float, !dbg !40
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %78) #2, !dbg !40
  %135 = bitcast i32 %134 to float, !dbg !40
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %79) #2, !dbg !40
  %137 = bitcast i32 %136 to float, !dbg !40
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %80) #2, !dbg !40
  %139 = bitcast i32 %138 to float, !dbg !40
  %140 = add i32 %25, 1856, !dbg !41
  %141 = add i32 %57, %140, !dbg !42
  %142 = add i32 %141, %49, !dbg !43
  %143 = add i32 %60, %140, !dbg !42
  %144 = add i32 %143, %50, !dbg !43
  %145 = add i32 %63, %140, !dbg !42
  %146 = add i32 %145, %51, !dbg !43
  %147 = add i32 %66, %140, !dbg !42
  %148 = add i32 %147, %52, !dbg !43
  %149 = sext i32 %142 to i64, !dbg !44
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !44
  %151 = sext i32 %144 to i64, !dbg !44
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !44
  %153 = sext i32 %146 to i64, !dbg !44
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !44
  %155 = sext i32 %148 to i64, !dbg !44
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !44
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %77) #2, !dbg !45
  %158 = bitcast i32 %157 to float, !dbg !45
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %78) #2, !dbg !45
  %160 = bitcast i32 %159 to float, !dbg !45
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %79) #2, !dbg !45
  %162 = bitcast i32 %161 to float, !dbg !45
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %80) #2, !dbg !45
  %164 = bitcast i32 %163 to float, !dbg !45
  %165 = add i32 %25, 1920, !dbg !46
  %166 = add i32 %57, %165, !dbg !47
  %167 = add i32 %166, %49, !dbg !48
  %168 = add i32 %60, %165, !dbg !47
  %169 = add i32 %168, %50, !dbg !48
  %170 = add i32 %63, %165, !dbg !47
  %171 = add i32 %170, %51, !dbg !48
  %172 = add i32 %66, %165, !dbg !47
  %173 = add i32 %172, %52, !dbg !48
  %174 = sext i32 %167 to i64, !dbg !49
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !49
  %176 = sext i32 %169 to i64, !dbg !49
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !49
  %178 = sext i32 %171 to i64, !dbg !49
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !49
  %180 = sext i32 %173 to i64, !dbg !49
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !49
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %77) #2, !dbg !50
  %183 = bitcast i32 %182 to float, !dbg !50
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %78) #2, !dbg !50
  %185 = bitcast i32 %184 to float, !dbg !50
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %79) #2, !dbg !50
  %187 = bitcast i32 %186 to float, !dbg !50
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %80) #2, !dbg !50
  %189 = bitcast i32 %188 to float, !dbg !50
  %190 = add i32 %25, 1984, !dbg !51
  %191 = add i32 %57, %190, !dbg !52
  %192 = add i32 %191, %49, !dbg !53
  %193 = add i32 %60, %190, !dbg !52
  %194 = add i32 %193, %50, !dbg !53
  %195 = add i32 %63, %190, !dbg !52
  %196 = add i32 %195, %51, !dbg !53
  %197 = add i32 %66, %190, !dbg !52
  %198 = add i32 %197, %52, !dbg !53
  %199 = sext i32 %192 to i64, !dbg !54
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !54
  %201 = sext i32 %194 to i64, !dbg !54
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !54
  %203 = sext i32 %196 to i64, !dbg !54
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !54
  %205 = sext i32 %198 to i64, !dbg !54
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !54
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %77) #2, !dbg !55
  %208 = bitcast i32 %207 to float, !dbg !55
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %78) #2, !dbg !55
  %210 = bitcast i32 %209 to float, !dbg !55
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %79) #2, !dbg !55
  %212 = bitcast i32 %211 to float, !dbg !55
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %80) #2, !dbg !55
  %214 = bitcast i32 %213 to float, !dbg !55
  %215 = add i32 %25, 3712, !dbg !56
  %216 = add i32 %57, %215, !dbg !57
  %217 = add i32 %216, %49, !dbg !58
  %218 = add i32 %60, %215, !dbg !57
  %219 = add i32 %218, %50, !dbg !58
  %220 = add i32 %63, %215, !dbg !57
  %221 = add i32 %220, %51, !dbg !58
  %222 = add i32 %66, %215, !dbg !57
  %223 = add i32 %222, %52, !dbg !58
  %224 = sext i32 %217 to i64, !dbg !59
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !59
  %226 = sext i32 %219 to i64, !dbg !59
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !59
  %228 = sext i32 %221 to i64, !dbg !59
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !59
  %230 = sext i32 %223 to i64, !dbg !59
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !59
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %77) #2, !dbg !60
  %233 = bitcast i32 %232 to float, !dbg !60
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %78) #2, !dbg !60
  %235 = bitcast i32 %234 to float, !dbg !60
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %79) #2, !dbg !60
  %237 = bitcast i32 %236 to float, !dbg !60
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %80) #2, !dbg !60
  %239 = bitcast i32 %238 to float, !dbg !60
  %240 = add i32 %25, 3776, !dbg !61
  %241 = add i32 %57, %240, !dbg !62
  %242 = add i32 %241, %49, !dbg !63
  %243 = add i32 %60, %240, !dbg !62
  %244 = add i32 %243, %50, !dbg !63
  %245 = add i32 %63, %240, !dbg !62
  %246 = add i32 %245, %51, !dbg !63
  %247 = add i32 %66, %240, !dbg !62
  %248 = add i32 %247, %52, !dbg !63
  %249 = sext i32 %242 to i64, !dbg !64
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !64
  %251 = sext i32 %244 to i64, !dbg !64
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !64
  %253 = sext i32 %246 to i64, !dbg !64
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !64
  %255 = sext i32 %248 to i64, !dbg !64
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !64
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 %77) #2, !dbg !65
  %258 = bitcast i32 %257 to float, !dbg !65
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %78) #2, !dbg !65
  %260 = bitcast i32 %259 to float, !dbg !65
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %79) #2, !dbg !65
  %262 = bitcast i32 %261 to float, !dbg !65
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %80) #2, !dbg !65
  %264 = bitcast i32 %263 to float, !dbg !65
  %265 = add i32 %25, 3840, !dbg !66
  %266 = add i32 %57, %265, !dbg !67
  %267 = add i32 %266, %49, !dbg !68
  %268 = add i32 %60, %265, !dbg !67
  %269 = add i32 %268, %50, !dbg !68
  %270 = add i32 %63, %265, !dbg !67
  %271 = add i32 %270, %51, !dbg !68
  %272 = add i32 %66, %265, !dbg !67
  %273 = add i32 %272, %52, !dbg !68
  %274 = sext i32 %267 to i64, !dbg !69
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !69
  %276 = sext i32 %269 to i64, !dbg !69
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !69
  %278 = sext i32 %271 to i64, !dbg !69
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !69
  %280 = sext i32 %273 to i64, !dbg !69
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !69
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %77) #2, !dbg !70
  %283 = bitcast i32 %282 to float, !dbg !70
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %78) #2, !dbg !70
  %285 = bitcast i32 %284 to float, !dbg !70
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %79) #2, !dbg !70
  %287 = bitcast i32 %286 to float, !dbg !70
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %80) #2, !dbg !70
  %289 = bitcast i32 %288 to float, !dbg !70
  %290 = fcmp ogt float %108, %83, !dbg !71
  %291 = fcmp ogt float %110, %85, !dbg !71
  %292 = fcmp ogt float %112, %87, !dbg !71
  %293 = fcmp ogt float %114, %89, !dbg !71
  %294 = fcmp uno float %108, 0.000000e+00, !dbg !75
  %295 = fcmp uno float %110, 0.000000e+00, !dbg !75
  %296 = fcmp uno float %112, 0.000000e+00, !dbg !75
  %297 = fcmp uno float %114, 0.000000e+00, !dbg !75
  %298 = or i1 %290, %294, !dbg !76
  %299 = or i1 %291, %295, !dbg !76
  %300 = or i1 %292, %296, !dbg !76
  %301 = or i1 %293, %297, !dbg !76
  %302 = select i1 %298, float %108, float %83, !dbg !77
  %303 = select i1 %299, float %110, float %85, !dbg !77
  %304 = select i1 %300, float %112, float %87, !dbg !77
  %305 = select i1 %301, float %114, float %89, !dbg !77
  %306 = fcmp olt float %302, %133, !dbg !78
  %307 = fcmp olt float %303, %135, !dbg !78
  %308 = fcmp olt float %304, %137, !dbg !78
  %309 = fcmp olt float %305, %139, !dbg !78
  %310 = fcmp uno float %133, 0.000000e+00, !dbg !80
  %311 = fcmp uno float %135, 0.000000e+00, !dbg !80
  %312 = fcmp uno float %137, 0.000000e+00, !dbg !80
  %313 = fcmp uno float %139, 0.000000e+00, !dbg !80
  %314 = or i1 %306, %310, !dbg !81
  %315 = or i1 %307, %311, !dbg !81
  %316 = or i1 %308, %312, !dbg !81
  %317 = or i1 %309, %313, !dbg !81
  %318 = select i1 %314, float %133, float %302, !dbg !82
  %319 = select i1 %315, float %135, float %303, !dbg !82
  %320 = select i1 %316, float %137, float %304, !dbg !82
  %321 = select i1 %317, float %139, float %305, !dbg !82
  %322 = fcmp olt float %318, %158, !dbg !83
  %323 = fcmp olt float %319, %160, !dbg !83
  %324 = fcmp olt float %320, %162, !dbg !83
  %325 = fcmp olt float %321, %164, !dbg !83
  %326 = fcmp uno float %158, 0.000000e+00, !dbg !85
  %327 = fcmp uno float %160, 0.000000e+00, !dbg !85
  %328 = fcmp uno float %162, 0.000000e+00, !dbg !85
  %329 = fcmp uno float %164, 0.000000e+00, !dbg !85
  %330 = or i1 %322, %326, !dbg !86
  %331 = or i1 %323, %327, !dbg !86
  %332 = or i1 %324, %328, !dbg !86
  %333 = or i1 %325, %329, !dbg !86
  %334 = select i1 %330, float %158, float %318, !dbg !87
  %335 = select i1 %331, float %160, float %319, !dbg !87
  %336 = select i1 %332, float %162, float %320, !dbg !87
  %337 = select i1 %333, float %164, float %321, !dbg !87
  %338 = fcmp olt float %334, %183, !dbg !88
  %339 = fcmp olt float %335, %185, !dbg !88
  %340 = fcmp olt float %336, %187, !dbg !88
  %341 = fcmp olt float %337, %189, !dbg !88
  %342 = fcmp uno float %183, 0.000000e+00, !dbg !90
  %343 = fcmp uno float %185, 0.000000e+00, !dbg !90
  %344 = fcmp uno float %187, 0.000000e+00, !dbg !90
  %345 = fcmp uno float %189, 0.000000e+00, !dbg !90
  %346 = or i1 %338, %342, !dbg !91
  %347 = or i1 %339, %343, !dbg !91
  %348 = or i1 %340, %344, !dbg !91
  %349 = or i1 %341, %345, !dbg !91
  %350 = select i1 %346, float %183, float %334, !dbg !92
  %351 = select i1 %347, float %185, float %335, !dbg !92
  %352 = select i1 %348, float %187, float %336, !dbg !92
  %353 = select i1 %349, float %189, float %337, !dbg !92
  %354 = fcmp olt float %350, %208, !dbg !93
  %355 = fcmp olt float %351, %210, !dbg !93
  %356 = fcmp olt float %352, %212, !dbg !93
  %357 = fcmp olt float %353, %214, !dbg !93
  %358 = fcmp uno float %208, 0.000000e+00, !dbg !95
  %359 = fcmp uno float %210, 0.000000e+00, !dbg !95
  %360 = fcmp uno float %212, 0.000000e+00, !dbg !95
  %361 = fcmp uno float %214, 0.000000e+00, !dbg !95
  %362 = or i1 %354, %358, !dbg !96
  %363 = or i1 %355, %359, !dbg !96
  %364 = or i1 %356, %360, !dbg !96
  %365 = or i1 %357, %361, !dbg !96
  %366 = select i1 %362, float %208, float %350, !dbg !97
  %367 = select i1 %363, float %210, float %351, !dbg !97
  %368 = select i1 %364, float %212, float %352, !dbg !97
  %369 = select i1 %365, float %214, float %353, !dbg !97
  %370 = fcmp olt float %366, %233, !dbg !98
  %371 = fcmp olt float %367, %235, !dbg !98
  %372 = fcmp olt float %368, %237, !dbg !98
  %373 = fcmp olt float %369, %239, !dbg !98
  %374 = fcmp uno float %233, 0.000000e+00, !dbg !100
  %375 = fcmp uno float %235, 0.000000e+00, !dbg !100
  %376 = fcmp uno float %237, 0.000000e+00, !dbg !100
  %377 = fcmp uno float %239, 0.000000e+00, !dbg !100
  %378 = or i1 %370, %374, !dbg !101
  %379 = or i1 %371, %375, !dbg !101
  %380 = or i1 %372, %376, !dbg !101
  %381 = or i1 %373, %377, !dbg !101
  %382 = select i1 %378, float %233, float %366, !dbg !102
  %383 = select i1 %379, float %235, float %367, !dbg !102
  %384 = select i1 %380, float %237, float %368, !dbg !102
  %385 = select i1 %381, float %239, float %369, !dbg !102
  %386 = fcmp olt float %382, %258, !dbg !103
  %387 = fcmp olt float %383, %260, !dbg !103
  %388 = fcmp olt float %384, %262, !dbg !103
  %389 = fcmp olt float %385, %264, !dbg !103
  %390 = fcmp uno float %258, 0.000000e+00, !dbg !105
  %391 = fcmp uno float %260, 0.000000e+00, !dbg !105
  %392 = fcmp uno float %262, 0.000000e+00, !dbg !105
  %393 = fcmp uno float %264, 0.000000e+00, !dbg !105
  %394 = or i1 %386, %390, !dbg !106
  %395 = or i1 %387, %391, !dbg !106
  %396 = or i1 %388, %392, !dbg !106
  %397 = or i1 %389, %393, !dbg !106
  %398 = select i1 %394, float %258, float %382, !dbg !107
  %399 = select i1 %395, float %260, float %383, !dbg !107
  %400 = select i1 %396, float %262, float %384, !dbg !107
  %401 = select i1 %397, float %264, float %385, !dbg !107
  %402 = fcmp olt float %398, %283, !dbg !108
  %403 = fcmp olt float %399, %285, !dbg !108
  %404 = fcmp olt float %400, %287, !dbg !108
  %405 = fcmp olt float %401, %289, !dbg !108
  %406 = fcmp uno float %283, 0.000000e+00, !dbg !110
  %407 = fcmp uno float %285, 0.000000e+00, !dbg !110
  %408 = fcmp uno float %287, 0.000000e+00, !dbg !110
  %409 = fcmp uno float %289, 0.000000e+00, !dbg !110
  %410 = or i1 %402, %406, !dbg !111
  %411 = or i1 %403, %407, !dbg !111
  %412 = or i1 %404, %408, !dbg !111
  %413 = or i1 %405, %409, !dbg !111
  %414 = zext i1 %290 to i8, !dbg !112
  %415 = zext i1 %291 to i8, !dbg !112
  %416 = zext i1 %292 to i8, !dbg !112
  %417 = zext i1 %293 to i8, !dbg !112
  %418 = select i1 %306, i8 2, i8 %414, !dbg !113
  %419 = select i1 %307, i8 2, i8 %415, !dbg !113
  %420 = select i1 %308, i8 2, i8 %416, !dbg !113
  %421 = select i1 %309, i8 2, i8 %417, !dbg !113
  %422 = select i1 %322, i8 3, i8 %418, !dbg !114
  %423 = select i1 %323, i8 3, i8 %419, !dbg !114
  %424 = select i1 %324, i8 3, i8 %420, !dbg !114
  %425 = select i1 %325, i8 3, i8 %421, !dbg !114
  %426 = select i1 %338, i8 4, i8 %422, !dbg !115
  %427 = select i1 %339, i8 4, i8 %423, !dbg !115
  %428 = select i1 %340, i8 4, i8 %424, !dbg !115
  %429 = select i1 %341, i8 4, i8 %425, !dbg !115
  %430 = select i1 %354, i8 5, i8 %426, !dbg !116
  %431 = select i1 %355, i8 5, i8 %427, !dbg !116
  %432 = select i1 %356, i8 5, i8 %428, !dbg !116
  %433 = select i1 %357, i8 5, i8 %429, !dbg !116
  %434 = select i1 %370, i8 6, i8 %430, !dbg !117
  %435 = select i1 %371, i8 6, i8 %431, !dbg !117
  %436 = select i1 %372, i8 6, i8 %432, !dbg !117
  %437 = select i1 %373, i8 6, i8 %433, !dbg !117
  %438 = select i1 %386, i8 7, i8 %434, !dbg !118
  %439 = select i1 %387, i8 7, i8 %435, !dbg !118
  %440 = select i1 %388, i8 7, i8 %436, !dbg !118
  %441 = select i1 %389, i8 7, i8 %437, !dbg !118
  %442 = select i1 %402, i8 8, i8 %438, !dbg !119
  %443 = select i1 %403, i8 8, i8 %439, !dbg !119
  %444 = select i1 %404, i8 8, i8 %440, !dbg !119
  %445 = select i1 %405, i8 8, i8 %441, !dbg !119
  %446 = mul i32 %25, 196, !dbg !120
  %447 = add i32 %.decomposed14, %446, !dbg !121
  %448 = mul i32 %43, 31360, !dbg !122
  %449 = add i32 %447, %448, !dbg !123
  %450 = sext i32 %449 to i64, !dbg !124
  %451 = getelementptr float, ptr addrspace(1) %1, i64 %450, !dbg !124
  %452 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !125
  %453 = bitcast float %398 to i32, !dbg !125
  %454 = select i1 %410, i32 %282, i32 %453, !dbg !126
  %455 = insertelement <1 x i32> poison, i32 %454, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %455, i1 true) #2, !dbg !125
  %456 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !125
  %457 = bitcast float %399 to i32, !dbg !125
  %458 = select i1 %411, i32 %284, i32 %457, !dbg !126
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %459, i1 true) #2, !dbg !125
  %460 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !125
  %461 = bitcast float %400 to i32, !dbg !125
  %462 = select i1 %412, i32 %286, i32 %461, !dbg !126
  %463 = insertelement <1 x i32> poison, i32 %462, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %463, i1 true) #2, !dbg !125
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !125
  %465 = bitcast float %401 to i32, !dbg !125
  %466 = select i1 %413, i32 %288, i32 %465, !dbg !126
  %467 = insertelement <1 x i32> poison, i32 %466, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %467, i1 true) #2, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !125
  %.extract = load i32, ptr addrspace(3) %468, align 16, !dbg !125
  %469 = getelementptr inbounds i8, ptr addrspace(3) %468, i32 4, !dbg !125
  %.extract4 = load i32, ptr addrspace(3) %469, align 4, !dbg !125
  %470 = getelementptr inbounds i8, ptr addrspace(3) %468, i32 8, !dbg !125
  %.extract5 = load i32, ptr addrspace(3) %470, align 8, !dbg !125
  %471 = getelementptr inbounds i8, ptr addrspace(3) %468, i32 12, !dbg !125
  %.extract6 = load i32, ptr addrspace(3) %471, align 4, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %451, i1 %81) #2, !dbg !125
  %472 = shl i32 %15, 6, !dbg !127
  %473 = shl i32 %16, 6, !dbg !127
  %474 = shl i32 %17, 6, !dbg !127
  %475 = shl i32 %18, 6, !dbg !127
  %476 = add i32 %472, %25, !dbg !128
  %477 = add i32 %473, %25, !dbg !128
  %478 = add i32 %474, %25, !dbg !128
  %479 = add i32 %475, %25, !dbg !128
  %480 = sext i32 %476 to i64, !dbg !129
  %481 = getelementptr i8, ptr addrspace(1) %2, i64 %480, !dbg !129
  %482 = sext i32 %477 to i64, !dbg !129
  %483 = getelementptr i8, ptr addrspace(1) %2, i64 %482, !dbg !129
  %484 = sext i32 %478 to i64, !dbg !129
  %485 = getelementptr i8, ptr addrspace(1) %2, i64 %484, !dbg !129
  %486 = sext i32 %479 to i64, !dbg !129
  %487 = getelementptr i8, ptr addrspace(1) %2, i64 %486, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %442, ptr addrspace(1) %481, i1 %77) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %443, ptr addrspace(1) %483, i1 %78) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %444, ptr addrspace(1) %485, i1 %79) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %445, ptr addrspace(1) %487, i1 %80) #2, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c36b57f7vyhwycfpvila4qhuh2zkdksbwxjmj7zdg3qsrg5pac46.py", directory: "inductor_cache/36")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 27, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 34, column: 49, scope: !7)
!24 = !DILocation(line: 34, column: 60, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 54, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 73, scope: !7)
!30 = !DILocation(line: 34, column: 65, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 59, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 70, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 36, column: 60, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 71, scope: !7)
!41 = !DILocation(line: 37, column: 37, scope: !7)
!42 = !DILocation(line: 37, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 61, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 72, scope: !7)
!46 = !DILocation(line: 38, column: 37, scope: !7)
!47 = !DILocation(line: 38, column: 51, scope: !7)
!48 = !DILocation(line: 38, column: 61, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 72, scope: !7)
!51 = !DILocation(line: 39, column: 37, scope: !7)
!52 = !DILocation(line: 39, column: 51, scope: !7)
!53 = !DILocation(line: 39, column: 61, scope: !7)
!54 = !DILocation(line: 39, column: 30, scope: !7)
!55 = !DILocation(line: 39, column: 72, scope: !7)
!56 = !DILocation(line: 40, column: 38, scope: !7)
!57 = !DILocation(line: 40, column: 52, scope: !7)
!58 = !DILocation(line: 40, column: 62, scope: !7)
!59 = !DILocation(line: 40, column: 31, scope: !7)
!60 = !DILocation(line: 40, column: 73, scope: !7)
!61 = !DILocation(line: 41, column: 38, scope: !7)
!62 = !DILocation(line: 41, column: 52, scope: !7)
!63 = !DILocation(line: 41, column: 62, scope: !7)
!64 = !DILocation(line: 41, column: 31, scope: !7)
!65 = !DILocation(line: 41, column: 73, scope: !7)
!66 = !DILocation(line: 42, column: 38, scope: !7)
!67 = !DILocation(line: 42, column: 52, scope: !7)
!68 = !DILocation(line: 42, column: 62, scope: !7)
!69 = !DILocation(line: 42, column: 31, scope: !7)
!70 = !DILocation(line: 42, column: 73, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 43, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !79)
!79 = !DILocation(line: 44, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !84)
!84 = !DILocation(line: 45, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !89)
!89 = !DILocation(line: 46, column: 40, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !94)
!94 = !DILocation(line: 47, column: 41, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !99)
!99 = !DILocation(line: 48, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !104)
!104 = !DILocation(line: 49, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !109)
!109 = !DILocation(line: 50, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !109)
!112 = !DILocation(line: 54, column: 35, scope: !7)
!113 = !DILocation(line: 57, column: 35, scope: !7)
!114 = !DILocation(line: 60, column: 35, scope: !7)
!115 = !DILocation(line: 63, column: 35, scope: !7)
!116 = !DILocation(line: 66, column: 35, scope: !7)
!117 = !DILocation(line: 69, column: 35, scope: !7)
!118 = !DILocation(line: 72, column: 35, scope: !7)
!119 = !DILocation(line: 75, column: 35, scope: !7)
!120 = !DILocation(line: 76, column: 34, scope: !7)
!121 = !DILocation(line: 76, column: 30, scope: !7)
!122 = !DILocation(line: 76, column: 45, scope: !7)
!123 = !DILocation(line: 76, column: 39, scope: !7)
!124 = !DILocation(line: 76, column: 25, scope: !7)
!125 = !DILocation(line: 76, column: 57, scope: !7)
!126 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !109)
!127 = !DILocation(line: 77, column: 33, scope: !7)
!128 = !DILocation(line: 77, column: 30, scope: !7)
!129 = !DILocation(line: 77, column: 25, scope: !7)
!130 = !DILocation(line: 77, column: 45, scope: !7)
!131 = !DILocation(line: 77, column: 4, scope: !7)
