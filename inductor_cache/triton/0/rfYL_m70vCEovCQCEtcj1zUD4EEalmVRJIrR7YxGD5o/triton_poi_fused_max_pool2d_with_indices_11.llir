; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %8, 5, !dbg !12
  %9 = and i32 %.lobit1, 3, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = or disjoint i32 %7, 1, !dbg !13
  %12 = or disjoint i32 %7, 2, !dbg !13
  %13 = or disjoint i32 %7, 3, !dbg !13
  %14 = icmp slt i32 %10, 1156, !dbg !14
  %15 = icmp slt i32 %7, 1156, !dbg !14
  %16 = icmp slt i32 %11, 1156, !dbg !14
  %17 = icmp slt i32 %12, 1156, !dbg !14
  %18 = icmp slt i32 %13, 1156, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 8, !dbg !16
  %21 = shl i32 %8, 3, !dbg !17
  %22 = and i32 %21, 248, !dbg !17
  %23 = and i32 %8, 127, !dbg !17
  %24 = or disjoint i32 %23, 128, !dbg !17
  %25 = or disjoint i32 %20, %22, !dbg !18
  %26 = or disjoint i32 %25, 4, !dbg !18
  %27 = or disjoint i32 %20, %23, !dbg !18
  %28 = or disjoint i32 %20, %24, !dbg !18
  %29 = icmp slt i32 %25, 256, !dbg !19
  %30 = icmp slt i32 %27, 256, !dbg !19
  %31 = icmp slt i32 %28, 256, !dbg !19
  %32 = sdiv i32 %10, 17, !dbg !20
  %33 = sdiv i32 %10, 289, !dbg !21
  %.frozen = freeze i32 %7, !dbg !21
  %34 = sdiv i32 %.frozen, 289, !dbg !21
  %.frozen15 = freeze i32 %11, !dbg !21
  %35 = sdiv i32 %.frozen15, 289, !dbg !21
  %.frozen17 = freeze i32 %12, !dbg !21
  %36 = sdiv i32 %.frozen17, 289, !dbg !21
  %.frozen19 = freeze i32 %13, !dbg !21
  %37 = sdiv i32 %.frozen19, 289, !dbg !21
  %38 = mul i32 %34, 289, !dbg !22
  %.decomposed = sub i32 %.frozen, %38, !dbg !22
  %39 = mul i32 %35, 289, !dbg !22
  %.decomposed16 = sub i32 %.frozen15, %39, !dbg !22
  %40 = mul i32 %36, 289, !dbg !22
  %.decomposed18 = sub i32 %.frozen17, %40, !dbg !22
  %41 = mul i32 %37, 289, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %41, !dbg !22
  %42 = mul i32 %33, 278784, !dbg !23
  %43 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !24
  %44 = insertelement <2 x i32> %43, i32 %32, i64 1, !dbg !24
  %45 = srem <2 x i32> %44, splat (i32 17), !dbg !24
  %46 = extractelement <2 x i32> %45, i64 1, !dbg !25
  %47 = icmp sgt i32 %46, 0, !dbg !26
  %48 = shl nsw <2 x i32> %45, splat (i32 1), !dbg !27
  %49 = extractelement <2 x i32> %45, i64 0, !dbg !25
  %50 = icmp sgt i32 %49, 0, !dbg !28
  %51 = and i1 %50, %47, !dbg !29
  %52 = shl nsw i32 %49, 9, !dbg !30
  %53 = mul nsw i32 %46, 16896, !dbg !31
  %54 = add i32 %42, %52, !dbg !32
  %55 = add i32 %54, -8704, !dbg !33
  %56 = add i32 %55, %25, !dbg !34
  %57 = add i32 %56, %53, !dbg !35
  %58 = add i32 %55, %26, !dbg !34
  %59 = add i32 %58, %53, !dbg !35
  %60 = sext i32 %57 to i64, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !36
  %62 = sext i32 %59 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !36
  %64 = and i1 %29, %51, !dbg !37
  %65 = and i1 %14, %64, !dbg !38
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65) #2, !dbg !39
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !39
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !39
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !39
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !39
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65) #2, !dbg !39
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !39
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !39
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !39
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !39
  %76 = icmp sgt <2 x i32> %45, splat (i32 -1), !dbg !40
  %77 = extractelement <2 x i1> %76, i64 0, !dbg !41
  %78 = and i1 %77, %47, !dbg !41
  %79 = add i32 %54, -8448, !dbg !42
  %80 = add i32 %79, %25, !dbg !43
  %81 = add i32 %80, %53, !dbg !44
  %82 = add i32 %79, %26, !dbg !43
  %83 = add i32 %82, %53, !dbg !44
  %84 = sext i32 %81 to i64, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !45
  %86 = sext i32 %83 to i64, !dbg !45
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !45
  %88 = and i1 %29, %78, !dbg !46
  %89 = and i1 %14, %88, !dbg !47
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #2, !dbg !48
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !48
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !48
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !48
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !48
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #2, !dbg !48
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !48
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !48
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !48
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !48
  %100 = or disjoint <2 x i32> %48, splat (i32 1), !dbg !49
  %101 = icmp slt <2 x i32> %100, splat (i32 33), !dbg !50
  %102 = and <2 x i1> %76, %101, !dbg !51
  %103 = extractelement <2 x i1> %102, i64 0, !dbg !52
  %104 = and i1 %47, %103, !dbg !53
  %105 = add i32 %54, -8192, !dbg !54
  %106 = add i32 %105, %25, !dbg !55
  %107 = add i32 %106, %53, !dbg !56
  %108 = add i32 %105, %26, !dbg !55
  %109 = add i32 %108, %53, !dbg !56
  %110 = sext i32 %107 to i64, !dbg !57
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !57
  %112 = sext i32 %109 to i64, !dbg !57
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !57
  %114 = and i1 %29, %104, !dbg !58
  %115 = and i1 %14, %114, !dbg !59
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #2, !dbg !60
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !60
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !60
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !60
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !60
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #2, !dbg !60
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !60
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !60
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !60
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !60
  %126 = extractelement <2 x i1> %76, i64 1, !dbg !61
  %127 = and i1 %50, %126, !dbg !61
  %128 = add i32 %54, -256, !dbg !62
  %129 = add i32 %128, %25, !dbg !63
  %130 = add i32 %129, %53, !dbg !64
  %131 = add i32 %128, %26, !dbg !63
  %132 = add i32 %131, %53, !dbg !64
  %133 = sext i32 %130 to i64, !dbg !65
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !65
  %135 = sext i32 %132 to i64, !dbg !65
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !65
  %137 = and i1 %29, %127, !dbg !66
  %138 = and i1 %14, %137, !dbg !67
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %134, i1 %138, i32 -8388608, i1 %138, i32 -8388608, i1 %138, i32 -8388608, i1 %138, i32 -8388608, i1 %138) #2, !dbg !68
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !68
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !68
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !68
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !68
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %138, i32 -8388608, i1 %138, i32 -8388608, i1 %138, i32 -8388608, i1 %138, i32 -8388608, i1 %138) #2, !dbg !68
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !68
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !68
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !68
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !68
  %149 = or i32 %46, %49, !dbg !25
  %150 = icmp sgt i32 %149, -1, !dbg !25
  %151 = add i32 %54, %25, !dbg !69
  %152 = add i32 %151, %53, !dbg !70
  %153 = add i32 %54, %26, !dbg !69
  %154 = add i32 %153, %53, !dbg !70
  %155 = sext i32 %152 to i64, !dbg !71
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !71
  %157 = sext i32 %154 to i64, !dbg !71
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !71
  %159 = and i1 %29, %150, !dbg !72
  %160 = and i1 %14, %159, !dbg !73
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %160, i32 -8388608, i1 %160, i32 -8388608, i1 %160, i32 -8388608, i1 %160, i32 -8388608, i1 %160) #2, !dbg !74
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !74
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !74
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !74
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !74
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %160, i32 -8388608, i1 %160, i32 -8388608, i1 %160, i32 -8388608, i1 %160, i32 -8388608, i1 %160) #2, !dbg !74
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !74
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !74
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !74
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !74
  %171 = and i1 %126, %103, !dbg !75
  %172 = add i32 %54, 256, !dbg !76
  %173 = add i32 %172, %25, !dbg !77
  %174 = add i32 %173, %53, !dbg !78
  %175 = add i32 %172, %26, !dbg !77
  %176 = add i32 %175, %53, !dbg !78
  %177 = sext i32 %174 to i64, !dbg !79
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !79
  %179 = sext i32 %176 to i64, !dbg !79
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !79
  %181 = and i1 %29, %171, !dbg !80
  %182 = and i1 %14, %181, !dbg !81
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182) #2, !dbg !82
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !82
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !82
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !82
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !82
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182) #2, !dbg !82
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !82
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !82
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !82
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !82
  %193 = extractelement <2 x i1> %102, i64 1, !dbg !52
  %194 = and i1 %50, %193, !dbg !83
  %195 = add i32 %54, 8192, !dbg !84
  %196 = add i32 %195, %25, !dbg !85
  %197 = add i32 %196, %53, !dbg !86
  %198 = add i32 %195, %26, !dbg !85
  %199 = add i32 %198, %53, !dbg !86
  %200 = sext i32 %197 to i64, !dbg !87
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !87
  %202 = sext i32 %199 to i64, !dbg !87
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !87
  %204 = and i1 %29, %194, !dbg !88
  %205 = and i1 %14, %204, !dbg !89
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %205, i32 -8388608, i1 %205, i32 -8388608, i1 %205, i32 -8388608, i1 %205, i32 -8388608, i1 %205) #2, !dbg !90
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !90
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !90
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !90
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !90
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %205, i32 -8388608, i1 %205, i32 -8388608, i1 %205, i32 -8388608, i1 %205, i32 -8388608, i1 %205) #2, !dbg !90
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !90
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !90
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !90
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !90
  %216 = and i1 %77, %193, !dbg !91
  %217 = add i32 %54, 8448, !dbg !92
  %218 = add i32 %217, %25, !dbg !93
  %219 = add i32 %218, %53, !dbg !94
  %220 = add i32 %217, %26, !dbg !93
  %221 = add i32 %220, %53, !dbg !94
  %222 = sext i32 %219 to i64, !dbg !95
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !95
  %224 = sext i32 %221 to i64, !dbg !95
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !95
  %226 = and i1 %29, %216, !dbg !96
  %227 = and i1 %14, %226, !dbg !97
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 %227, i32 -8388608, i1 %227, i32 -8388608, i1 %227, i32 -8388608, i1 %227, i32 -8388608, i1 %227) #2, !dbg !98
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !98
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !98
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !98
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !98
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %225, i1 %227, i32 -8388608, i1 %227, i32 -8388608, i1 %227, i32 -8388608, i1 %227, i32 -8388608, i1 %227) #2, !dbg !98
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !98
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !98
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !98
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !98
  %238 = and i1 %103, %193, !dbg !52
  %239 = add i32 %54, 8704, !dbg !99
  %240 = add i32 %239, %25, !dbg !100
  %241 = add i32 %240, %53, !dbg !101
  %242 = add i32 %239, %26, !dbg !100
  %243 = add i32 %242, %53, !dbg !101
  %244 = sext i32 %241 to i64, !dbg !102
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !102
  %246 = sext i32 %243 to i64, !dbg !102
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !102
  %248 = and i1 %29, %238, !dbg !103
  %249 = and i1 %14, %248, !dbg !104
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %245, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #2, !dbg !105
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !105
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !105
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !105
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !105
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #2, !dbg !105
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !105
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !105
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !105
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !105
  %260 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !39
  %261 = insertelement <4 x i32> %260, i32 %68, i64 1, !dbg !39
  %262 = insertelement <4 x i32> %261, i32 %69, i64 2, !dbg !39
  %263 = insertelement <4 x i32> %262, i32 %70, i64 3, !dbg !39
  %264 = bitcast <4 x i32> %263 to <4 x float>, !dbg !39
  %265 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !48
  %266 = insertelement <4 x i32> %265, i32 %92, i64 1, !dbg !48
  %267 = insertelement <4 x i32> %266, i32 %93, i64 2, !dbg !48
  %268 = insertelement <4 x i32> %267, i32 %94, i64 3, !dbg !48
  %269 = bitcast <4 x i32> %268 to <4 x float>, !dbg !48
  %270 = fcmp ogt <4 x float> %269, %264, !dbg !106
  %271 = fcmp uno <4 x float> %269, zeroinitializer, !dbg !110
  %272 = or <4 x i1> %270, %271, !dbg !111
  %.v = select <4 x i1> %272, <4 x i32> %268, <4 x i32> %263, !dbg !112
  %273 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %274 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !60
  %275 = insertelement <4 x i32> %274, i32 %118, i64 1, !dbg !60
  %276 = insertelement <4 x i32> %275, i32 %119, i64 2, !dbg !60
  %277 = insertelement <4 x i32> %276, i32 %120, i64 3, !dbg !60
  %278 = bitcast <4 x i32> %277 to <4 x float>, !dbg !60
  %279 = fcmp olt <4 x float> %273, %278, !dbg !113
  %280 = fcmp uno <4 x float> %278, zeroinitializer, !dbg !115
  %281 = or <4 x i1> %280, %279, !dbg !116
  %.v2 = select <4 x i1> %281, <4 x i32> %277, <4 x i32> %.v, !dbg !117
  %282 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !117
  %283 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !68
  %284 = insertelement <4 x i32> %283, i32 %141, i64 1, !dbg !68
  %285 = insertelement <4 x i32> %284, i32 %142, i64 2, !dbg !68
  %286 = insertelement <4 x i32> %285, i32 %143, i64 3, !dbg !68
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !68
  %288 = fcmp olt <4 x float> %282, %287, !dbg !118
  %289 = fcmp uno <4 x float> %287, zeroinitializer, !dbg !120
  %290 = or <4 x i1> %289, %288, !dbg !121
  %.v3 = select <4 x i1> %290, <4 x i32> %286, <4 x i32> %.v2, !dbg !122
  %291 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !122
  %292 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !74
  %293 = insertelement <4 x i32> %292, i32 %163, i64 1, !dbg !74
  %294 = insertelement <4 x i32> %293, i32 %164, i64 2, !dbg !74
  %295 = insertelement <4 x i32> %294, i32 %165, i64 3, !dbg !74
  %296 = bitcast <4 x i32> %295 to <4 x float>, !dbg !74
  %297 = fcmp olt <4 x float> %291, %296, !dbg !123
  %298 = fcmp uno <4 x float> %296, zeroinitializer, !dbg !125
  %299 = or <4 x i1> %298, %297, !dbg !126
  %.v4 = select <4 x i1> %299, <4 x i32> %295, <4 x i32> %.v3, !dbg !127
  %300 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !127
  %301 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !82
  %302 = insertelement <4 x i32> %301, i32 %185, i64 1, !dbg !82
  %303 = insertelement <4 x i32> %302, i32 %186, i64 2, !dbg !82
  %304 = insertelement <4 x i32> %303, i32 %187, i64 3, !dbg !82
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !82
  %306 = fcmp olt <4 x float> %300, %305, !dbg !128
  %307 = fcmp uno <4 x float> %305, zeroinitializer, !dbg !130
  %308 = or <4 x i1> %307, %306, !dbg !131
  %.v5 = select <4 x i1> %308, <4 x i32> %304, <4 x i32> %.v4, !dbg !132
  %309 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !132
  %310 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !90
  %311 = insertelement <4 x i32> %310, i32 %208, i64 1, !dbg !90
  %312 = insertelement <4 x i32> %311, i32 %209, i64 2, !dbg !90
  %313 = insertelement <4 x i32> %312, i32 %210, i64 3, !dbg !90
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !90
  %315 = fcmp olt <4 x float> %309, %314, !dbg !133
  %316 = fcmp uno <4 x float> %314, zeroinitializer, !dbg !135
  %317 = or <4 x i1> %316, %315, !dbg !136
  %.v6 = select <4 x i1> %317, <4 x i32> %313, <4 x i32> %.v5, !dbg !137
  %318 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !137
  %319 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !98
  %320 = insertelement <4 x i32> %319, i32 %230, i64 1, !dbg !98
  %321 = insertelement <4 x i32> %320, i32 %231, i64 2, !dbg !98
  %322 = insertelement <4 x i32> %321, i32 %232, i64 3, !dbg !98
  %323 = bitcast <4 x i32> %322 to <4 x float>, !dbg !98
  %324 = fcmp olt <4 x float> %318, %323, !dbg !138
  %325 = fcmp uno <4 x float> %323, zeroinitializer, !dbg !140
  %326 = or <4 x i1> %325, %324, !dbg !141
  %.v7 = select <4 x i1> %326, <4 x i32> %322, <4 x i32> %.v6, !dbg !142
  %327 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !142
  %328 = insertelement <4 x i32> poison, i32 %251, i64 0, !dbg !105
  %329 = insertelement <4 x i32> %328, i32 %252, i64 1, !dbg !105
  %330 = insertelement <4 x i32> %329, i32 %253, i64 2, !dbg !105
  %331 = insertelement <4 x i32> %330, i32 %254, i64 3, !dbg !105
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !105
  %333 = fcmp olt <4 x float> %327, %332, !dbg !143
  %334 = extractelement <4 x i1> %333, i64 0, !dbg !145
  %335 = extractelement <4 x i1> %333, i64 1, !dbg !145
  %336 = extractelement <4 x i1> %333, i64 2, !dbg !145
  %337 = extractelement <4 x i1> %333, i64 3, !dbg !145
  %338 = zext <4 x i1> %270 to <4 x i8>, !dbg !146
  %339 = select <4 x i1> %279, <4 x i8> splat (i8 2), <4 x i8> %338, !dbg !147
  %340 = select <4 x i1> %288, <4 x i8> splat (i8 3), <4 x i8> %339, !dbg !148
  %341 = select <4 x i1> %297, <4 x i8> splat (i8 4), <4 x i8> %340, !dbg !149
  %342 = select <4 x i1> %306, <4 x i8> splat (i8 5), <4 x i8> %341, !dbg !150
  %343 = select <4 x i1> %315, <4 x i8> splat (i8 6), <4 x i8> %342, !dbg !151
  %344 = select <4 x i1> %324, <4 x i8> splat (i8 7), <4 x i8> %343, !dbg !152
  %345 = select <4 x i1> %333, <4 x i8> splat (i8 8), <4 x i8> %344, !dbg !153
  %346 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !39
  %347 = insertelement <4 x i32> %346, i32 %73, i64 1, !dbg !39
  %348 = insertelement <4 x i32> %347, i32 %74, i64 2, !dbg !39
  %349 = insertelement <4 x i32> %348, i32 %75, i64 3, !dbg !39
  %350 = bitcast <4 x i32> %349 to <4 x float>, !dbg !39
  %351 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !48
  %352 = insertelement <4 x i32> %351, i32 %97, i64 1, !dbg !48
  %353 = insertelement <4 x i32> %352, i32 %98, i64 2, !dbg !48
  %354 = insertelement <4 x i32> %353, i32 %99, i64 3, !dbg !48
  %355 = bitcast <4 x i32> %354 to <4 x float>, !dbg !48
  %356 = fcmp ogt <4 x float> %355, %350, !dbg !106
  %357 = fcmp uno <4 x float> %355, zeroinitializer, !dbg !110
  %358 = or <4 x i1> %356, %357, !dbg !111
  %.v8 = select <4 x i1> %358, <4 x i32> %354, <4 x i32> %349, !dbg !112
  %359 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !112
  %360 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !60
  %361 = insertelement <4 x i32> %360, i32 %123, i64 1, !dbg !60
  %362 = insertelement <4 x i32> %361, i32 %124, i64 2, !dbg !60
  %363 = insertelement <4 x i32> %362, i32 %125, i64 3, !dbg !60
  %364 = bitcast <4 x i32> %363 to <4 x float>, !dbg !60
  %365 = fcmp olt <4 x float> %359, %364, !dbg !113
  %366 = fcmp uno <4 x float> %364, zeroinitializer, !dbg !115
  %367 = or <4 x i1> %366, %365, !dbg !116
  %.v9 = select <4 x i1> %367, <4 x i32> %363, <4 x i32> %.v8, !dbg !117
  %368 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !117
  %369 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !68
  %370 = insertelement <4 x i32> %369, i32 %146, i64 1, !dbg !68
  %371 = insertelement <4 x i32> %370, i32 %147, i64 2, !dbg !68
  %372 = insertelement <4 x i32> %371, i32 %148, i64 3, !dbg !68
  %373 = bitcast <4 x i32> %372 to <4 x float>, !dbg !68
  %374 = fcmp olt <4 x float> %368, %373, !dbg !118
  %375 = fcmp uno <4 x float> %373, zeroinitializer, !dbg !120
  %376 = or <4 x i1> %375, %374, !dbg !121
  %.v10 = select <4 x i1> %376, <4 x i32> %372, <4 x i32> %.v9, !dbg !122
  %377 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !122
  %378 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !74
  %379 = insertelement <4 x i32> %378, i32 %168, i64 1, !dbg !74
  %380 = insertelement <4 x i32> %379, i32 %169, i64 2, !dbg !74
  %381 = insertelement <4 x i32> %380, i32 %170, i64 3, !dbg !74
  %382 = bitcast <4 x i32> %381 to <4 x float>, !dbg !74
  %383 = fcmp olt <4 x float> %377, %382, !dbg !123
  %384 = fcmp uno <4 x float> %382, zeroinitializer, !dbg !125
  %385 = or <4 x i1> %384, %383, !dbg !126
  %.v11 = select <4 x i1> %385, <4 x i32> %381, <4 x i32> %.v10, !dbg !127
  %386 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !127
  %387 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !82
  %388 = insertelement <4 x i32> %387, i32 %190, i64 1, !dbg !82
  %389 = insertelement <4 x i32> %388, i32 %191, i64 2, !dbg !82
  %390 = insertelement <4 x i32> %389, i32 %192, i64 3, !dbg !82
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !82
  %392 = fcmp olt <4 x float> %386, %391, !dbg !128
  %393 = fcmp uno <4 x float> %391, zeroinitializer, !dbg !130
  %394 = or <4 x i1> %393, %392, !dbg !131
  %.v12 = select <4 x i1> %394, <4 x i32> %390, <4 x i32> %.v11, !dbg !132
  %395 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !132
  %396 = insertelement <4 x i32> poison, i32 %212, i64 0, !dbg !90
  %397 = insertelement <4 x i32> %396, i32 %213, i64 1, !dbg !90
  %398 = insertelement <4 x i32> %397, i32 %214, i64 2, !dbg !90
  %399 = insertelement <4 x i32> %398, i32 %215, i64 3, !dbg !90
  %400 = bitcast <4 x i32> %399 to <4 x float>, !dbg !90
  %401 = fcmp olt <4 x float> %395, %400, !dbg !133
  %402 = fcmp uno <4 x float> %400, zeroinitializer, !dbg !135
  %403 = or <4 x i1> %402, %401, !dbg !136
  %.v13 = select <4 x i1> %403, <4 x i32> %399, <4 x i32> %.v12, !dbg !137
  %404 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !137
  %405 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !98
  %406 = insertelement <4 x i32> %405, i32 %235, i64 1, !dbg !98
  %407 = insertelement <4 x i32> %406, i32 %236, i64 2, !dbg !98
  %408 = insertelement <4 x i32> %407, i32 %237, i64 3, !dbg !98
  %409 = bitcast <4 x i32> %408 to <4 x float>, !dbg !98
  %410 = fcmp olt <4 x float> %404, %409, !dbg !138
  %411 = fcmp uno <4 x float> %409, zeroinitializer, !dbg !140
  %412 = or <4 x i1> %411, %410, !dbg !141
  %.v14 = select <4 x i1> %412, <4 x i32> %408, <4 x i32> %.v13, !dbg !142
  %413 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !142
  %414 = insertelement <4 x i32> poison, i32 %256, i64 0, !dbg !105
  %415 = insertelement <4 x i32> %414, i32 %257, i64 1, !dbg !105
  %416 = insertelement <4 x i32> %415, i32 %258, i64 2, !dbg !105
  %417 = insertelement <4 x i32> %416, i32 %259, i64 3, !dbg !105
  %418 = bitcast <4 x i32> %417 to <4 x float>, !dbg !105
  %419 = fcmp olt <4 x float> %413, %418, !dbg !143
  %420 = shufflevector <4 x float> %418, <4 x float> %332, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !154
  %421 = fcmp uno <8 x float> %420, zeroinitializer, !dbg !154
  %422 = extractelement <8 x i1> %421, i64 7, !dbg !145
  %423 = or i1 %422, %334, !dbg !145
  %424 = extractelement <8 x i1> %421, i64 6, !dbg !145
  %425 = or i1 %424, %335, !dbg !145
  %426 = extractelement <8 x i1> %421, i64 5, !dbg !145
  %427 = or i1 %426, %336, !dbg !145
  %428 = extractelement <8 x i1> %421, i64 4, !dbg !145
  %429 = or i1 %428, %337, !dbg !145
  %430 = extractelement <4 x i1> %419, i64 0, !dbg !145
  %431 = extractelement <8 x i1> %421, i64 3, !dbg !145
  %432 = or i1 %431, %430, !dbg !145
  %433 = extractelement <4 x i1> %419, i64 1, !dbg !145
  %434 = extractelement <8 x i1> %421, i64 2, !dbg !145
  %435 = or i1 %434, %433, !dbg !145
  %436 = extractelement <4 x i1> %419, i64 2, !dbg !145
  %437 = extractelement <8 x i1> %421, i64 1, !dbg !145
  %438 = or i1 %437, %436, !dbg !145
  %439 = extractelement <4 x i1> %419, i64 3, !dbg !145
  %440 = extractelement <8 x i1> %421, i64 0, !dbg !145
  %441 = or i1 %440, %439, !dbg !145
  %442 = zext <4 x i1> %356 to <4 x i8>, !dbg !146
  %443 = select <4 x i1> %365, <4 x i8> splat (i8 2), <4 x i8> %442, !dbg !147
  %444 = select <4 x i1> %374, <4 x i8> splat (i8 3), <4 x i8> %443, !dbg !148
  %445 = select <4 x i1> %383, <4 x i8> splat (i8 4), <4 x i8> %444, !dbg !149
  %446 = select <4 x i1> %392, <4 x i8> splat (i8 5), <4 x i8> %445, !dbg !150
  %447 = select <4 x i1> %401, <4 x i8> splat (i8 6), <4 x i8> %446, !dbg !151
  %448 = select <4 x i1> %410, <4 x i8> splat (i8 7), <4 x i8> %447, !dbg !152
  %449 = select <4 x i1> %419, <4 x i8> splat (i8 8), <4 x i8> %448, !dbg !153
  %450 = mul i32 %27, 289, !dbg !155
  %451 = mul i32 %28, 289, !dbg !155
  %452 = mul i32 %34, 110976, !dbg !156
  %453 = mul i32 %35, 110976, !dbg !156
  %454 = mul i32 %36, 110976, !dbg !156
  %455 = mul i32 %37, 110976, !dbg !156
  %456 = add i32 %452, %.decomposed, !dbg !157
  %457 = add i32 %456, %450, !dbg !158
  %458 = add i32 %456, %451, !dbg !158
  %459 = add i32 %453, %.decomposed16, !dbg !157
  %460 = add i32 %459, %450, !dbg !158
  %461 = add i32 %459, %451, !dbg !158
  %462 = add i32 %454, %.decomposed18, !dbg !157
  %463 = add i32 %462, %450, !dbg !158
  %464 = add i32 %462, %451, !dbg !158
  %465 = add i32 %455, %.decomposed20, !dbg !157
  %466 = add i32 %465, %450, !dbg !158
  %467 = add i32 %465, %451, !dbg !158
  %468 = sext i32 %457 to i64, !dbg !159
  %469 = getelementptr float, ptr addrspace(1) %1, i64 %468, !dbg !159
  %470 = sext i32 %458 to i64, !dbg !159
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !159
  %472 = sext i32 %460 to i64, !dbg !159
  %473 = getelementptr float, ptr addrspace(1) %1, i64 %472, !dbg !159
  %474 = sext i32 %461 to i64, !dbg !159
  %475 = getelementptr float, ptr addrspace(1) %1, i64 %474, !dbg !159
  %476 = sext i32 %463 to i64, !dbg !159
  %477 = getelementptr float, ptr addrspace(1) %1, i64 %476, !dbg !159
  %478 = sext i32 %464 to i64, !dbg !159
  %479 = getelementptr float, ptr addrspace(1) %1, i64 %478, !dbg !159
  %480 = sext i32 %466 to i64, !dbg !159
  %481 = getelementptr float, ptr addrspace(1) %1, i64 %480, !dbg !159
  %482 = sext i32 %467 to i64, !dbg !159
  %483 = getelementptr float, ptr addrspace(1) %1, i64 %482, !dbg !159
  %484 = and i1 %15, %30, !dbg !160
  %485 = and i1 %15, %31, !dbg !160
  %486 = and i1 %16, %30, !dbg !160
  %487 = and i1 %16, %31, !dbg !160
  %488 = and i1 %17, %30, !dbg !160
  %489 = and i1 %17, %31, !dbg !160
  %490 = and i1 %18, %30, !dbg !160
  %491 = and i1 %18, %31, !dbg !160
  %492 = and i1 %14, %29, !dbg !160
  %493 = and i32 %21, 768, !dbg !161
  %494 = and i32 %21, 1016, !dbg !161
  %495 = lshr exact i32 %493, 8, !dbg !161
  %496 = or disjoint i32 %495, %494, !dbg !161
  %497 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %496, !dbg !161
  %498 = extractelement <4 x i32> %.v7, i64 0, !dbg !161
  %499 = select i1 %423, i32 %251, i32 %498, !dbg !162
  %500 = insertelement <1 x i32> poison, i32 %499, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %500, i1 true) #2, !dbg !161
  %501 = or disjoint i32 %494, 1, !dbg !161
  %502 = lshr exact i32 %493, 6, !dbg !161
  %503 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %502, !dbg !161
  %504 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %501, !dbg !161
  %505 = extractelement <4 x i32> %.v7, i64 1, !dbg !161
  %506 = select i1 %425, i32 %252, i32 %505, !dbg !162
  %507 = insertelement <1 x i32> poison, i32 %506, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %504, <1 x i32> %507, i1 true) #2, !dbg !161
  %508 = or disjoint i32 %494, 2, !dbg !161
  %509 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %508, !dbg !161
  %510 = extractelement <4 x i32> %.v7, i64 2, !dbg !161
  %511 = select i1 %427, i32 %253, i32 %510, !dbg !162
  %512 = insertelement <1 x i32> poison, i32 %511, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %509, <1 x i32> %512, i1 true) #2, !dbg !161
  %513 = or disjoint i32 %494, 3, !dbg !161
  %514 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %513, !dbg !161
  %515 = extractelement <4 x i32> %.v7, i64 3, !dbg !161
  %516 = select i1 %429, i32 %254, i32 %515, !dbg !162
  %517 = insertelement <1 x i32> poison, i32 %516, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %517, i1 true) #2, !dbg !161
  %518 = or disjoint i32 %496, 4, !dbg !161
  %519 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %518, !dbg !161
  %520 = extractelement <4 x i32> %.v14, i64 0, !dbg !161
  %521 = select i1 %432, i32 %256, i32 %520, !dbg !162
  %522 = insertelement <1 x i32> poison, i32 %521, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %522, i1 true) #2, !dbg !161
  %523 = or disjoint i32 %494, 5, !dbg !161
  %524 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %523, !dbg !161
  %525 = extractelement <4 x i32> %.v14, i64 1, !dbg !161
  %526 = select i1 %435, i32 %257, i32 %525, !dbg !162
  %527 = insertelement <1 x i32> poison, i32 %526, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, <1 x i32> %527, i1 true) #2, !dbg !161
  %528 = or disjoint i32 %494, 6, !dbg !161
  %529 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %528, !dbg !161
  %530 = extractelement <4 x i32> %.v14, i64 2, !dbg !161
  %531 = select i1 %438, i32 %258, i32 %530, !dbg !162
  %532 = insertelement <1 x i32> poison, i32 %531, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %529, <1 x i32> %532, i1 true) #2, !dbg !161
  %533 = or disjoint i32 %494, 7, !dbg !161
  %534 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %533, !dbg !161
  %535 = extractelement <4 x i32> %.v14, i64 3, !dbg !161
  %536 = select i1 %441, i32 %259, i32 %535, !dbg !162
  %537 = insertelement <1 x i32> poison, i32 %536, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %534, <1 x i32> %537, i1 true) #2, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !161
  %539 = load i32, ptr addrspace(3) %538, align 4, !dbg !161
  %540 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !161
  %541 = load i32, ptr addrspace(3) %540, align 4, !dbg !161
  %542 = getelementptr inbounds i8, ptr addrspace(3) %538, i32 1028, !dbg !161
  %543 = load i32, ptr addrspace(3) %542, align 4, !dbg !161
  %544 = getelementptr inbounds i8, ptr addrspace(3) %538, i32 1540, !dbg !161
  %545 = load i32, ptr addrspace(3) %544, align 4, !dbg !161
  %546 = getelementptr inbounds i8, ptr addrspace(3) %538, i32 2056, !dbg !161
  %547 = load i32, ptr addrspace(3) %546, align 4, !dbg !161
  %548 = getelementptr inbounds i8, ptr addrspace(3) %538, i32 2568, !dbg !161
  %549 = load i32, ptr addrspace(3) %548, align 4, !dbg !161
  %550 = getelementptr inbounds i8, ptr addrspace(3) %538, i32 3084, !dbg !161
  %551 = load i32, ptr addrspace(3) %550, align 4, !dbg !161
  %552 = getelementptr inbounds i8, ptr addrspace(3) %538, i32 3596, !dbg !161
  %553 = load i32, ptr addrspace(3) %552, align 4, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %539, ptr addrspace(1) %469, i1 %484) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %541, ptr addrspace(1) %471, i1 %485) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %543, ptr addrspace(1) %473, i1 %486) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %545, ptr addrspace(1) %475, i1 %487) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %547, ptr addrspace(1) %477, i1 %488) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %549, ptr addrspace(1) %479, i1 %489) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %551, ptr addrspace(1) %481, i1 %490) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %553, ptr addrspace(1) %483, i1 %491) #2, !dbg !161
  %554 = shl i32 %10, 8, !dbg !163
  %555 = add i32 %25, %554, !dbg !164
  %556 = sext i32 %555 to i64, !dbg !165
  %557 = getelementptr i8, ptr addrspace(1) %2, i64 %556, !dbg !165
  %558 = bitcast <4 x i8> %345 to i32, !dbg !166
  %559 = bitcast <4 x i8> %449 to i32, !dbg !166
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %558, i32 %559, ptr addrspace(1) %557, i1 %492) #2, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chvcla2zmede5mb4omznrcq5e6yiy7c2kjevpimbpf2dhhpgvtyc.py", directory: "inductor_cache/hv")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 45, column: 73, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 67, column: 20, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 50, scope: !7)
!31 = !DILocation(line: 45, column: 61, scope: !7)
!32 = !DILocation(line: 45, column: 41, scope: !7)
!33 = !DILocation(line: 45, column: 46, scope: !7)
!34 = !DILocation(line: 45, column: 55, scope: !7)
!35 = !DILocation(line: 45, column: 66, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 86, scope: !7)
!38 = !DILocation(line: 45, column: 94, scope: !7)
!39 = !DILocation(line: 45, column: 78, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 51, column: 55, scope: !7)
!44 = !DILocation(line: 51, column: 66, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 86, scope: !7)
!47 = !DILocation(line: 51, column: 94, scope: !7)
!48 = !DILocation(line: 51, column: 78, scope: !7)
!49 = !DILocation(line: 53, column: 16, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 83, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 19, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 55, scope: !7)
!56 = !DILocation(line: 58, column: 66, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 86, scope: !7)
!59 = !DILocation(line: 58, column: 94, scope: !7)
!60 = !DILocation(line: 58, column: 78, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 45, scope: !7)
!63 = !DILocation(line: 65, column: 54, scope: !7)
!64 = !DILocation(line: 65, column: 65, scope: !7)
!65 = !DILocation(line: 65, column: 31, scope: !7)
!66 = !DILocation(line: 65, column: 85, scope: !7)
!67 = !DILocation(line: 65, column: 93, scope: !7)
!68 = !DILocation(line: 65, column: 77, scope: !7)
!69 = !DILocation(line: 68, column: 45, scope: !7)
!70 = !DILocation(line: 68, column: 56, scope: !7)
!71 = !DILocation(line: 68, column: 31, scope: !7)
!72 = !DILocation(line: 68, column: 76, scope: !7)
!73 = !DILocation(line: 68, column: 84, scope: !7)
!74 = !DILocation(line: 68, column: 68, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 42, scope: !7)
!77 = !DILocation(line: 71, column: 51, scope: !7)
!78 = !DILocation(line: 71, column: 62, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 82, scope: !7)
!81 = !DILocation(line: 71, column: 90, scope: !7)
!82 = !DILocation(line: 71, column: 74, scope: !7)
!83 = !DILocation(line: 77, column: 20, scope: !7)
!84 = !DILocation(line: 78, column: 43, scope: !7)
!85 = !DILocation(line: 78, column: 52, scope: !7)
!86 = !DILocation(line: 78, column: 63, scope: !7)
!87 = !DILocation(line: 78, column: 31, scope: !7)
!88 = !DILocation(line: 78, column: 83, scope: !7)
!89 = !DILocation(line: 78, column: 91, scope: !7)
!90 = !DILocation(line: 78, column: 75, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 43, scope: !7)
!93 = !DILocation(line: 81, column: 52, scope: !7)
!94 = !DILocation(line: 81, column: 63, scope: !7)
!95 = !DILocation(line: 81, column: 31, scope: !7)
!96 = !DILocation(line: 81, column: 83, scope: !7)
!97 = !DILocation(line: 81, column: 91, scope: !7)
!98 = !DILocation(line: 81, column: 75, scope: !7)
!99 = !DILocation(line: 84, column: 43, scope: !7)
!100 = !DILocation(line: 84, column: 52, scope: !7)
!101 = !DILocation(line: 84, column: 63, scope: !7)
!102 = !DILocation(line: 84, column: 31, scope: !7)
!103 = !DILocation(line: 84, column: 83, scope: !7)
!104 = !DILocation(line: 84, column: 91, scope: !7)
!105 = !DILocation(line: 84, column: 75, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 52, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 66, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !124)
!124 = !DILocation(line: 69, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !129)
!129 = !DILocation(line: 72, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !134)
!134 = !DILocation(line: 79, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !139)
!139 = !DILocation(line: 82, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !144)
!144 = !DILocation(line: 85, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !144)
!146 = !DILocation(line: 89, column: 35, scope: !7)
!147 = !DILocation(line: 92, column: 35, scope: !7)
!148 = !DILocation(line: 95, column: 35, scope: !7)
!149 = !DILocation(line: 98, column: 35, scope: !7)
!150 = !DILocation(line: 101, column: 35, scope: !7)
!151 = !DILocation(line: 104, column: 35, scope: !7)
!152 = !DILocation(line: 107, column: 35, scope: !7)
!153 = !DILocation(line: 110, column: 35, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !144)
!155 = !DILocation(line: 111, column: 34, scope: !7)
!156 = !DILocation(line: 111, column: 46, scope: !7)
!157 = !DILocation(line: 111, column: 30, scope: !7)
!158 = !DILocation(line: 111, column: 39, scope: !7)
!159 = !DILocation(line: 111, column: 25, scope: !7)
!160 = !DILocation(line: 111, column: 66, scope: !7)
!161 = !DILocation(line: 111, column: 58, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !144)
!163 = !DILocation(line: 112, column: 34, scope: !7)
!164 = !DILocation(line: 112, column: 30, scope: !7)
!165 = !DILocation(line: 112, column: 25, scope: !7)
!166 = !DILocation(line: 112, column: 46, scope: !7)
!167 = !DILocation(line: 112, column: 4, scope: !7)
