; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 256, !dbg !14
  %17 = srem i32 %16, 64, !dbg !15
  %18 = mul i32 %16, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen1 = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen1, 16384, !dbg !17
  %20 = mul i32 %19, 16384, !dbg !18
  %.decomposed2 = sub i32 %.frozen1, %20, !dbg !18
  %21 = sext i32 %15 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %28 = bitcast i32 %24 to float, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = icmp slt i32 %17, 16, !dbg !21
  %33 = shl nsw i32 %19, 12, !dbg !22
  %34 = add nsw i32 %33, %.decomposed2, !dbg !23
  %35 = sext i32 %34 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = bitcast i32 %38 to float, !dbg !25
  %43 = bitcast i32 %39 to float, !dbg !25
  %44 = bitcast i32 %40 to float, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = add nsw i32 %17, -16, !dbg !26
  %47 = icmp ult i32 %46, 12, !dbg !26
  %48 = shl nsw i32 %17, 8, !dbg !27
  %49 = mul nsw i32 %19, 3072, !dbg !28
  %50 = add nsw i32 %49, %.decomposed, !dbg !27
  %51 = add nsw i32 %50, -4096, !dbg !29
  %52 = add nsw i32 %51, %48, !dbg !30
  %53 = sext i32 %52 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !32
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !32
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !32
  %60 = bitcast i32 %56 to float, !dbg !32
  %61 = bitcast i32 %57 to float, !dbg !32
  %62 = bitcast i32 %58 to float, !dbg !32
  %63 = bitcast i32 %59 to float, !dbg !32
  %64 = add nsw i32 %17, -28, !dbg !33
  %65 = icmp ult i32 %64, 12, !dbg !33
  %66 = add nsw i32 %50, -7168, !dbg !34
  %67 = add nsw i32 %66, %48, !dbg !35
  %68 = sext i32 %67 to i64, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !36
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !37
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !37
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !37
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !37
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !37
  %75 = bitcast i32 %71 to float, !dbg !37
  %76 = bitcast i32 %72 to float, !dbg !37
  %77 = bitcast i32 %73 to float, !dbg !37
  %78 = bitcast i32 %74 to float, !dbg !37
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !38
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !39
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !39
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !39
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !39
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !39
  %85 = bitcast i32 %81 to float, !dbg !39
  %86 = bitcast i32 %82 to float, !dbg !39
  %87 = bitcast i32 %83 to float, !dbg !39
  %88 = bitcast i32 %84 to float, !dbg !39
  %89 = fadd float %75, %85, !dbg !40
  %90 = fadd float %76, %86, !dbg !40
  %91 = fadd float %77, %87, !dbg !40
  %92 = fadd float %78, %88, !dbg !40
  %93 = add nsw i32 %17, -40, !dbg !41
  %94 = icmp ult i32 %93, 12, !dbg !41
  %95 = add nsw i32 %50, -10240, !dbg !42
  %96 = add nsw i32 %95, %48, !dbg !43
  %97 = sext i32 %96 to i64, !dbg !44
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !44
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !45
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !45
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !45
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !45
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !45
  %104 = bitcast i32 %100 to float, !dbg !45
  %105 = bitcast i32 %101 to float, !dbg !45
  %106 = bitcast i32 %102 to float, !dbg !45
  %107 = bitcast i32 %103 to float, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !46
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !47
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !47
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !47
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !47
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !47
  %114 = bitcast i32 %110 to float, !dbg !47
  %115 = bitcast i32 %111 to float, !dbg !47
  %116 = bitcast i32 %112 to float, !dbg !47
  %117 = bitcast i32 %113 to float, !dbg !47
  %118 = fadd float %104, %114, !dbg !48
  %119 = fadd float %105, %115, !dbg !48
  %120 = fadd float %106, %116, !dbg !48
  %121 = fadd float %107, %117, !dbg !48
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !49
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !50
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !50
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !50
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !50
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !50
  %128 = bitcast i32 %124 to float, !dbg !50
  %129 = bitcast i32 %125 to float, !dbg !50
  %130 = bitcast i32 %126 to float, !dbg !50
  %131 = bitcast i32 %127 to float, !dbg !50
  %132 = fadd float %118, %128, !dbg !51
  %133 = fadd float %119, %129, !dbg !51
  %134 = fadd float %120, %130, !dbg !51
  %135 = fadd float %121, %131, !dbg !51
  %136 = icmp sgt i32 %17, 51, !dbg !52
  %137 = add nsw i32 %50, -13312, !dbg !53
  %138 = add nsw i32 %137, %48, !dbg !54
  %139 = sext i32 %138 to i64, !dbg !55
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !55
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #1, !dbg !56
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !56
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !56
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !56
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !56
  %146 = bitcast i32 %142 to float, !dbg !56
  %147 = bitcast i32 %143 to float, !dbg !56
  %148 = bitcast i32 %144 to float, !dbg !56
  %149 = bitcast i32 %145 to float, !dbg !56
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !57
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #1, !dbg !58
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !58
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !58
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !58
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !58
  %156 = bitcast i32 %152 to float, !dbg !58
  %157 = bitcast i32 %153 to float, !dbg !58
  %158 = bitcast i32 %154 to float, !dbg !58
  %159 = bitcast i32 %155 to float, !dbg !58
  %160 = fadd float %146, %156, !dbg !59
  %161 = fadd float %147, %157, !dbg !59
  %162 = fadd float %148, %158, !dbg !59
  %163 = fadd float %149, %159, !dbg !59
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %139, !dbg !60
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #1, !dbg !61
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !61
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !61
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !61
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !61
  %170 = bitcast i32 %166 to float, !dbg !61
  %171 = bitcast i32 %167 to float, !dbg !61
  %172 = bitcast i32 %168 to float, !dbg !61
  %173 = bitcast i32 %169 to float, !dbg !61
  %174 = fadd float %160, %170, !dbg !62
  %175 = fadd float %161, %171, !dbg !62
  %176 = fadd float %162, %172, !dbg !62
  %177 = fadd float %163, %173, !dbg !62
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %139, !dbg !63
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #1, !dbg !64
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !64
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !64
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !64
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !64
  %184 = bitcast i32 %180 to float, !dbg !64
  %185 = bitcast i32 %181 to float, !dbg !64
  %186 = bitcast i32 %182 to float, !dbg !64
  %187 = bitcast i32 %183 to float, !dbg !64
  %188 = fadd float %174, %184, !dbg !65
  %189 = fadd float %175, %185, !dbg !65
  %190 = fadd float %176, %186, !dbg !65
  %191 = fadd float %177, %187, !dbg !65
  %192 = select i1 %136, float %188, float 0.000000e+00, !dbg !66
  %193 = select i1 %136, float %189, float 0.000000e+00, !dbg !66
  %194 = select i1 %136, float %190, float 0.000000e+00, !dbg !66
  %195 = select i1 %136, float %191, float 0.000000e+00, !dbg !66
  %196 = select i1 %94, float %132, float %192, !dbg !67
  %197 = select i1 %94, float %133, float %193, !dbg !67
  %198 = select i1 %94, float %134, float %194, !dbg !67
  %199 = select i1 %94, float %135, float %195, !dbg !67
  %200 = select i1 %65, float %89, float %196, !dbg !67
  %201 = select i1 %65, float %90, float %197, !dbg !67
  %202 = select i1 %65, float %91, float %198, !dbg !67
  %203 = select i1 %65, float %92, float %199, !dbg !67
  %204 = select i1 %47, float %60, float %200, !dbg !68
  %205 = select i1 %47, float %61, float %201, !dbg !68
  %206 = select i1 %47, float %62, float %202, !dbg !68
  %207 = select i1 %47, float %63, float %203, !dbg !68
  %208 = select i1 %32, float %42, float %204, !dbg !69
  %209 = select i1 %32, float %43, float %205, !dbg !69
  %210 = select i1 %32, float %44, float %206, !dbg !69
  %211 = select i1 %32, float %45, float %207, !dbg !69
  %212 = fadd float %208, %28, !dbg !70
  %213 = fadd float %209, %29, !dbg !70
  %214 = fadd float %210, %30, !dbg !70
  %215 = fadd float %211, %31, !dbg !70
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !71
  %217 = bitcast float %212 to i32, !dbg !72
  %218 = bitcast float %213 to i32, !dbg !72
  %219 = bitcast float %214 to i32, !dbg !72
  %220 = bitcast float %215 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %218, i32 %219, i32 %220, ptr addrspace(1) %216, i1 true) #1, !dbg !72
  %221 = mul i32 %19, 33536, !dbg !73
  %222 = add i32 %221, %.decomposed2, !dbg !74
  %223 = sext i32 %222 to i64, !dbg !75
  %224 = getelementptr float, ptr addrspace(1) %7, i64 %223, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %24, i32 %25, i32 %26, i32 %27, ptr addrspace(1) %224, i1 true) #1, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbvizc6ualxp7uotvl7lehgtulxalltsoynx67jqgpcav7qikdtk.py", directory: "inductor_cache/bv")
!4 = !{ptr @triton_poi_fused_add_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_6", linkageName: "triton_poi_fused_add_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 51, scope: !7)
!23 = !DILocation(line: 35, column: 46, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 56, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 41, scope: !7)
!28 = !DILocation(line: 40, column: 60, scope: !7)
!29 = !DILocation(line: 40, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 55, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 65, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 45, column: 55, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 65, scope: !7)
!38 = !DILocation(line: 46, column: 31, scope: !7)
!39 = !DILocation(line: 46, column: 65, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 36, scope: !7)
!43 = !DILocation(line: 54, column: 55, scope: !7)
!44 = !DILocation(line: 54, column: 31, scope: !7)
!45 = !DILocation(line: 54, column: 65, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 65, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 31, scope: !7)
!50 = !DILocation(line: 57, column: 65, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 64, column: 36, scope: !7)
!54 = !DILocation(line: 64, column: 55, scope: !7)
!55 = !DILocation(line: 64, column: 31, scope: !7)
!56 = !DILocation(line: 64, column: 65, scope: !7)
!57 = !DILocation(line: 65, column: 31, scope: !7)
!58 = !DILocation(line: 65, column: 65, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 31, scope: !7)
!61 = !DILocation(line: 67, column: 65, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 31, scope: !7)
!64 = !DILocation(line: 69, column: 65, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 72, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 75, column: 34, scope: !7)
!69 = !DILocation(line: 76, column: 33, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 28, scope: !7)
!72 = !DILocation(line: 78, column: 40, scope: !7)
!73 = !DILocation(line: 79, column: 36, scope: !7)
!74 = !DILocation(line: 79, column: 30, scope: !7)
!75 = !DILocation(line: 79, column: 25, scope: !7)
!76 = !DILocation(line: 79, column: 48, scope: !7)
!77 = !DILocation(line: 79, column: 4, scope: !7)
