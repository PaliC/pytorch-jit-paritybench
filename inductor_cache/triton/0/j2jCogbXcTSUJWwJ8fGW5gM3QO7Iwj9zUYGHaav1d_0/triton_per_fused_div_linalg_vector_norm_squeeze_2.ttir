#loc = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":19:0)
#loc1 = loc(unknown)
#loc17 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":35:24)
#loc30 = loc(callsite(#loc1 at #loc17))
module {
  tt.func public @triton_per_fused_div_linalg_vector_norm_squeeze_2(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":19:0), %arg1: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.9999999999999998E-13> : tensor<8x1xf64> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x16xf64> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_1 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc9)
    %9 = arith.muli %5, %cst_1 : tensor<8x1xi32> loc(#loc10)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<8x16xi32> loc(#loc11)
    %11 = tt.broadcast %9 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc11)
    %12 = arith.addi %10, %11 : tensor<8x16xi32> loc(#loc11)
    %13 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<8x16x!tt.ptr<f64>> loc(#loc12)
    %14 = tt.addptr %13, %12 : tensor<8x16x!tt.ptr<f64>>, tensor<8x16xi32> loc(#loc12)
    %15 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x16xi1> loc(#loc13)
    %16 = tt.load %14, %15, %cst_0 : tensor<8x16x!tt.ptr<f64>> loc(#loc13)
    %17 = arith.mulf %16, %16 : tensor<8x16xf64> loc(#loc14)
    %18 = arith.select %15, %17, %cst_0 : tensor<8x16xi1>, tensor<8x16xf64> loc(#loc15)
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f64 loc(callsite(#loc1 at #loc17)), %arg4: f64 loc(callsite(#loc1 at #loc17))):
      %28 = arith.addf %arg3, %arg4 : f64 loc(#loc36)
      tt.reduce.return %28 : f64 loc(#loc29)
    }) : (tensor<8x16xf64>) -> tensor<8xf64> loc(#loc29)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<8xf64> -> tensor<8x1xf64> loc(#loc19)
    %21 = tt.extern_elementwise %20 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrt"} : (tensor<8x1xf64>) -> tensor<8x1xf64> loc(#loc20)
    %22 = arith.cmpf ogt, %21, %cst : tensor<8x1xf64> loc(#loc32)
    %23 = arith.cmpf une, %21, %21 : tensor<8x1xf64> loc(#loc33)
    %24 = arith.ori %22, %23 : tensor<8x1xi1> loc(#loc34)
    %25 = arith.select %24, %21, %cst : tensor<8x1xi1>, tensor<8x1xf64> loc(#loc35)
    %26 = tt.broadcast %25 : tensor<8x1xf64> -> tensor<8x16xf64> loc(#loc26)
    %27 = arith.divf %16, %26 : tensor<8x16xf64> loc(#loc26)
    tt.store %14, %27, %15 : tensor<8x16x!tt.ptr<f64>> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":23:28)
#loc3 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":23:33)
#loc4 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":24:36)
#loc5 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":24:44)
#loc6 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":24:23)
#loc7 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":25:21)
#loc8 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":26:26)
#loc9 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":26:34)
#loc10 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":31:42)
#loc11 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":31:39)
#loc12 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":31:34)
#loc13 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":31:47)
#loc14 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":32:18)
#loc15 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":34:33)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc19 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":35:27)
#loc20 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":36:26)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc22 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":38:40)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc26 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":39:18)
#loc27 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":40:47)
#loc28 = loc("inductor_cache/wh/cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py":40:4)
#loc29 = loc(callsite(#loc16 at #loc17))
#loc31 = loc(callsite(#loc18 at #loc16))
#loc32 = loc(callsite(#loc21 at #loc22))
#loc33 = loc(callsite(#loc23 at #loc22))
#loc34 = loc(callsite(#loc24 at #loc22))
#loc35 = loc(callsite(#loc25 at #loc22))
#loc36 = loc(callsite(#loc31 at #loc17))
