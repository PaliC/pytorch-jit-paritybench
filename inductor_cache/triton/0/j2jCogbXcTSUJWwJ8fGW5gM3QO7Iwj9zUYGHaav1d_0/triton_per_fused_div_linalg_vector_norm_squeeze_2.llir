; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_div_linalg_vector_norm_squeeze_2(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 3, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 3, !dbg !12
  %8 = and i32 %7, 7, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 16, !dbg !14
  %11 = shl i32 %6, 1, !dbg !15
  %12 = and i32 %11, 14, !dbg !15
  %13 = shl i32 %9, 4, !dbg !16
  %14 = or disjoint i32 %13, %12, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr double, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u64 $0, $4;\0A\09@!$7 mov.u64 $1, $6;", "=l,=l,l,b,l,b,l,b"(ptr addrspace(1) %16, i1 %10, i64 0, i1 %10, i64 0, i1 %10) #3, !dbg !19
  %18 = extractvalue { i64, i64 } %17, 0, !dbg !19
  %19 = extractvalue { i64, i64 } %17, 1, !dbg !19
  %20 = bitcast i64 %18 to double, !dbg !19
  %21 = bitcast i64 %19 to double, !dbg !19
  %22 = fmul double %20, %20, !dbg !20
  %23 = fmul double %21, %21, !dbg !20
  %24 = fadd double %22, %23, !dbg !21
  %25 = select i1 %10, double %24, double 0.000000e+00, !dbg !21
  %bc = bitcast double %25 to <2 x i32>, !dbg !26
  %26 = extractelement <2 x i32> %bc, i64 0, !dbg !26
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 4, i32 31), !dbg !26
  %28 = extractelement <2 x i32> %bc, i64 1, !dbg !26
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !26
  %30 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !26
  %31 = insertelement <2 x i32> %30, i32 %29, i64 1, !dbg !26
  %32 = bitcast <2 x i32> %31 to double, !dbg !26
  %33 = fadd double %25, %32, !dbg !21
  %bc2 = bitcast double %33 to <2 x i32>, !dbg !26
  %34 = extractelement <2 x i32> %bc2, i64 0, !dbg !26
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 2, i32 31), !dbg !26
  %36 = extractelement <2 x i32> %bc2, i64 1, !dbg !26
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 2, i32 31), !dbg !26
  %38 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !26
  %39 = insertelement <2 x i32> %38, i32 %37, i64 1, !dbg !26
  %40 = bitcast <2 x i32> %39 to double, !dbg !26
  %41 = fadd double %33, %40, !dbg !21
  %bc4 = bitcast double %41 to <2 x i32>, !dbg !26
  %42 = extractelement <2 x i32> %bc4, i64 0, !dbg !26
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !26
  %44 = extractelement <2 x i32> %bc4, i64 1, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !26
  %46 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !26
  %47 = insertelement <2 x i32> %46, i32 %45, i64 1, !dbg !26
  %48 = bitcast <2 x i32> %47 to double, !dbg !26
  %49 = fadd double %41, %48, !dbg !21
  %50 = tail call double @llvm.nvvm.sqrt.rn.d(double %49), !dbg !27
  %51 = fcmp ogt double %50, 0x3D719799812DEA11, !dbg !28
  %52 = fcmp uno double %50, 0.000000e+00, !dbg !32
  %53 = or i1 %51, %52, !dbg !33
  %54 = select i1 %53, double %50, double 0x3D719799812DEA11, !dbg !34
  %55 = tail call double asm "div.rn.f64 $0, $1, $2;", "=l,l,l"(double %20, double %54) #3, !dbg !35
  %56 = tail call double asm "div.rn.f64 $0, $1, $2;", "=l,l,l"(double %21, double %54) #3, !dbg !35
  %57 = bitcast double %55 to i64, !dbg !36
  %58 = bitcast double %56 to i64, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %57, i64 %58, ptr addrspace(1) %16, i1 %10) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare double @llvm.nvvm.sqrt.rn.d(double) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwhgslwsd3dweh64rslexwldu6wqgo2cpnycguwck6kz5vcawkbd.py", directory: "inductor_cache/wh")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_squeeze_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_squeeze_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_squeeze_2", linkageName: "triton_per_fused_div_linalg_vector_norm_squeeze_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 35, column: 24, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 36, column: 26, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 38, column: 40, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 47, scope: !7)
!37 = !DILocation(line: 40, column: 4, scope: !7)
