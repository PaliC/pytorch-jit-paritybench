; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_add_exp_mean_mul_stack_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 15, !dbg !10
  %8 = icmp samesign ult i32 %7, 12, !dbg !11
  %9 = getelementptr i8, ptr addrspace(1) %1, i64 16, !dbg !12
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !13
  %11 = getelementptr i8, ptr addrspace(1) %1, i64 44, !dbg !14
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !15
  %13 = getelementptr i8, ptr addrspace(1) %2, i64 16, !dbg !16
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !17
  %15 = getelementptr i8, ptr addrspace(1) %2, i64 44, !dbg !18
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !19
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !20
  %18 = bitcast i32 %17 to float, !dbg !20
  %19 = icmp samesign ult i32 %7, 3, !dbg !21
  %20 = add nuw nsw i32 %7, 1, !dbg !22
  %21 = zext nneg i32 %20 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !23
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %19, i32 0, i1 %19) #3, !dbg !24
  %24 = add nsw i32 %7, -3, !dbg !25
  %25 = icmp ult i32 %24, 3, !dbg !25
  %26 = icmp samesign ult i32 %7, 4, !dbg !26
  %27 = and i32 %6, 14, !dbg !27
  %28 = icmp eq i32 %27, 4, !dbg !27
  %29 = add nuw nsw i32 %7, 2, !dbg !28
  %30 = zext nneg i32 %29 to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !29
  %32 = and i1 %8, %28, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32) #3, !dbg !31
  %.v = select i1 %26, i32 %10, i32 %33, !dbg !32
  %34 = add nsw i32 %7, -6, !dbg !33
  %35 = icmp ult i32 %34, 3, !dbg !33
  %36 = icmp samesign ult i32 %7, 8, !dbg !34
  %37 = icmp eq i32 %27, 6, !dbg !35
  %38 = and i1 %8, %37, !dbg !36
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %38, i32 0, i1 %38) #3, !dbg !37
  %.v1 = select i1 %36, i32 %39, i32 %12, !dbg !38
  %40 = add nuw nsw i32 %7, 3, !dbg !39
  %41 = zext nneg i32 %40 to i64, !dbg !40
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !40
  %43 = add nsw i32 %7, -9, !dbg !41
  %44 = icmp ult i32 %43, 3, !dbg !41
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %44, i32 0, i1 %44) #3, !dbg !42
  %.v2 = select i1 %35, i32 %.v1, i32 %45, !dbg !43
  %.v3 = select i1 %25, i32 %.v, i32 %.v2, !dbg !43
  %.v4 = select i1 %19, i32 %23, i32 %.v3, !dbg !44
  %46 = bitcast i32 %.v4 to float, !dbg !44
  %47 = fmul float %46, -5.000000e-01, !dbg !45
  %48 = fmul float %47, 0x3FF7154760000000, !dbg !46
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #3, !dbg !46
  %50 = fadd float %49, 0.000000e+00, !dbg !47
  %51 = fmul float %46, 0xBF947AE140000000, !dbg !48
  %52 = fmul float %51, 0x3FF7154760000000, !dbg !49
  %53 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %52) #3, !dbg !49
  %54 = fadd float %50, %53, !dbg !50
  %55 = fmul float %46, 0xBF747AE140000000, !dbg !51
  %56 = fmul float %55, 0x3FF7154760000000, !dbg !52
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #3, !dbg !52
  %58 = fadd float %54, %57, !dbg !53
  %59 = select i1 %8, float %58, float 0.000000e+00, !dbg !54
  %60 = bitcast float %59 to i32, !dbg !55
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !55
  %62 = bitcast i32 %61 to float, !dbg !55
  %63 = fadd float %59, %62, !dbg !59
  %64 = bitcast float %63 to i32, !dbg !55
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !55
  %66 = bitcast i32 %65 to float, !dbg !55
  %67 = fadd float %63, %66, !dbg !59
  %68 = bitcast float %67 to i32, !dbg !55
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !55
  %70 = bitcast i32 %69 to float, !dbg !55
  %71 = fadd float %67, %70, !dbg !59
  %72 = bitcast float %71 to i32, !dbg !55
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !55
  %74 = bitcast i32 %73 to float, !dbg !55
  %75 = fadd float %71, %74, !dbg !59
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !61
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %19, i32 0, i1 %19) #3, !dbg !62
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !63
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %32, i32 0, i1 %32) #3, !dbg !64
  %.v5 = select i1 %26, i32 %14, i32 %79, !dbg !65
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %38, i32 0, i1 %38) #3, !dbg !66
  %.v6 = select i1 %36, i32 %80, i32 %16, !dbg !67
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !68
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %44, i32 0, i1 %44) #3, !dbg !69
  %.v7 = select i1 %35, i32 %.v6, i32 %82, !dbg !43
  %.v8 = select i1 %25, i32 %.v5, i32 %.v7, !dbg !43
  %.v9 = select i1 %19, i32 %77, i32 %.v8, !dbg !70
  %83 = bitcast i32 %.v9 to float, !dbg !70
  %84 = fmul float %83, -5.000000e-01, !dbg !71
  %85 = fmul float %84, 0x3FF7154760000000, !dbg !72
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #3, !dbg !72
  %87 = fadd float %86, 0.000000e+00, !dbg !73
  %88 = fmul float %83, 0xBF947AE140000000, !dbg !74
  %89 = fmul float %88, 0x3FF7154760000000, !dbg !75
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #3, !dbg !75
  %91 = fadd float %87, %90, !dbg !76
  %92 = fmul float %83, 0xBF747AE140000000, !dbg !77
  %93 = fmul float %92, 0x3FF7154760000000, !dbg !78
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #3, !dbg !78
  %95 = fadd float %91, %94, !dbg !79
  %96 = select i1 %8, float %95, float 0.000000e+00, !dbg !80
  %97 = bitcast float %96 to i32, !dbg !81
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !81
  %99 = bitcast i32 %98 to float, !dbg !81
  %100 = fadd float %96, %99, !dbg !83
  %101 = bitcast float %100 to i32, !dbg !81
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !81
  %103 = bitcast i32 %102 to float, !dbg !81
  %104 = fadd float %100, %103, !dbg !83
  %105 = bitcast float %104 to i32, !dbg !81
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !81
  %107 = bitcast i32 %106 to float, !dbg !81
  %108 = fadd float %104, %107, !dbg !83
  %109 = bitcast float %108 to i32, !dbg !81
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !81
  %111 = bitcast i32 %110 to float, !dbg !81
  %112 = fadd float %108, %111, !dbg !83
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.200000e+01) #3, !dbg !84
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 1.200000e+01) #3, !dbg !85
  %115 = fadd float %113, %114, !dbg !86
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %18, float 1.600000e+01) #3, !dbg !87
  %117 = fmul float %116, 2.000000e+00, !dbg !88
  %118 = fsub float %115, %117, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %119 = and i32 %6, 63, !dbg !91
  %120 = icmp eq i32 %119, 0, !dbg !91
  %121 = bitcast float %118 to i32, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %0, i1 %120) #3, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5frlkre2od4th5r447dzpxlychbmsdo6xdrymzttksck3y6kro7.py", directory: "inductor_cache/5f")
!4 = !{ptr @triton_per_fused_add_exp_mean_mul_stack_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_exp_mean_mul_stack_sub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_exp_mean_mul_stack_sub_1", linkageName: "triton_per_fused_add_exp_mean_mul_stack_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 30, column: 31, scope: !7)
!13 = !DILocation(line: 30, column: 20, scope: !7)
!14 = !DILocation(line: 32, column: 31, scope: !7)
!15 = !DILocation(line: 32, column: 20, scope: !7)
!16 = !DILocation(line: 34, column: 31, scope: !7)
!17 = !DILocation(line: 34, column: 20, scope: !7)
!18 = !DILocation(line: 36, column: 31, scope: !7)
!19 = !DILocation(line: 36, column: 20, scope: !7)
!20 = !DILocation(line: 38, column: 21, scope: !7)
!21 = !DILocation(line: 44, column: 18, scope: !7)
!22 = !DILocation(line: 45, column: 51, scope: !7)
!23 = !DILocation(line: 45, column: 30, scope: !7)
!24 = !DILocation(line: 45, column: 76, scope: !7)
!25 = !DILocation(line: 49, column: 18, scope: !7)
!26 = !DILocation(line: 54, column: 20, scope: !7)
!27 = !DILocation(line: 59, column: 20, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 31, scope: !7)
!30 = !DILocation(line: 60, column: 101, scope: !7)
!31 = !DILocation(line: 60, column: 93, scope: !7)
!32 = !DILocation(line: 61, column: 35, scope: !7)
!33 = !DILocation(line: 67, column: 20, scope: !7)
!34 = !DILocation(line: 72, column: 20, scope: !7)
!35 = !DILocation(line: 73, column: 20, scope: !7)
!36 = !DILocation(line: 74, column: 92, scope: !7)
!37 = !DILocation(line: 74, column: 84, scope: !7)
!38 = !DILocation(line: 79, column: 35, scope: !7)
!39 = !DILocation(line: 85, column: 53, scope: !7)
!40 = !DILocation(line: 85, column: 31, scope: !7)
!41 = !DILocation(line: 85, column: 93, scope: !7)
!42 = !DILocation(line: 85, column: 85, scope: !7)
!43 = !DILocation(line: 0, scope: !7)
!44 = !DILocation(line: 88, column: 33, scope: !7)
!45 = !DILocation(line: 90, column: 20, scope: !7)
!46 = !DILocation(line: 91, column: 24, scope: !7)
!47 = !DILocation(line: 93, column: 20, scope: !7)
!48 = !DILocation(line: 95, column: 20, scope: !7)
!49 = !DILocation(line: 96, column: 24, scope: !7)
!50 = !DILocation(line: 97, column: 20, scope: !7)
!51 = !DILocation(line: 99, column: 20, scope: !7)
!52 = !DILocation(line: 100, column: 24, scope: !7)
!53 = !DILocation(line: 101, column: 20, scope: !7)
!54 = !DILocation(line: 103, column: 35, scope: !7)
!55 = !DILocation(line: 267, column: 36, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!58 = !DILocation(line: 104, column: 26, scope: !7)
!59 = !DILocation(line: 256, column: 15, scope: !60, inlinedAt: !58)
!60 = distinct !DILexicalBlockFile(scope: !56, file: !57, discriminator: 0)
!61 = !DILocation(line: 105, column: 31, scope: !7)
!62 = !DILocation(line: 105, column: 77, scope: !7)
!63 = !DILocation(line: 106, column: 31, scope: !7)
!64 = !DILocation(line: 106, column: 93, scope: !7)
!65 = !DILocation(line: 107, column: 35, scope: !7)
!66 = !DILocation(line: 110, column: 84, scope: !7)
!67 = !DILocation(line: 111, column: 35, scope: !7)
!68 = !DILocation(line: 114, column: 31, scope: !7)
!69 = !DILocation(line: 114, column: 85, scope: !7)
!70 = !DILocation(line: 117, column: 34, scope: !7)
!71 = !DILocation(line: 118, column: 20, scope: !7)
!72 = !DILocation(line: 119, column: 24, scope: !7)
!73 = !DILocation(line: 120, column: 20, scope: !7)
!74 = !DILocation(line: 121, column: 20, scope: !7)
!75 = !DILocation(line: 122, column: 24, scope: !7)
!76 = !DILocation(line: 123, column: 20, scope: !7)
!77 = !DILocation(line: 124, column: 20, scope: !7)
!78 = !DILocation(line: 125, column: 24, scope: !7)
!79 = !DILocation(line: 126, column: 20, scope: !7)
!80 = !DILocation(line: 128, column: 35, scope: !7)
!81 = !DILocation(line: 267, column: 36, scope: !56, inlinedAt: !82)
!82 = !DILocation(line: 129, column: 26, scope: !7)
!83 = !DILocation(line: 256, column: 15, scope: !60, inlinedAt: !82)
!84 = !DILocation(line: 131, column: 21, scope: !7)
!85 = !DILocation(line: 132, column: 21, scope: !7)
!86 = !DILocation(line: 133, column: 22, scope: !7)
!87 = !DILocation(line: 135, column: 22, scope: !7)
!88 = !DILocation(line: 137, column: 22, scope: !7)
!89 = !DILocation(line: 138, column: 22, scope: !7)
!90 = !DILocation(line: 139, column: 4, scope: !7)
!91 = !DILocation(line: 140, column: 72, scope: !7)
!92 = !DILocation(line: 140, column: 4, scope: !7)
