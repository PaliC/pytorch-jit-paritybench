; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = srem i32 %17, 4, !dbg !15
  %21 = srem i32 %18, 4, !dbg !15
  %22 = sdiv i32 %17, 64, !dbg !16
  %23 = icmp slt i32 %20, 1, !dbg !17
  %24 = icmp slt i32 %21, 1, !dbg !17
  %25 = icmp sgt i32 %21, 0, !dbg !18
  %26 = icmp slt i32 %20, 2, !dbg !19
  %27 = and i1 %25, %26, !dbg !20
  %28 = icmp sgt i32 %20, 1, !dbg !21
  %29 = shl nsw i32 %20, 2, !dbg !22
  %30 = shl nsw i32 %21, 2, !dbg !22
  %31 = shl nsw i32 %22, 3, !dbg !23
  %32 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !24
  %33 = shufflevector <2 x i32> %32, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !24
  %34 = sdiv <2 x i32> %33, <i32 16, i32 4>, !dbg !24
  %35 = srem <2 x i32> %34, splat (i32 4), !dbg !25
  %36 = extractelement <2 x i32> %35, i64 1, !dbg !26
  %37 = icmp slt i32 %36, 1, !dbg !27
  %38 = and i1 %23, %37, !dbg !28
  %39 = and i1 %24, %37, !dbg !28
  %40 = extractelement <2 x i32> %34, i64 0, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !29
  %43 = and i1 %19, %38, !dbg !30
  %44 = and i1 %19, %39, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43) #1, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %44, i32 0, i1 %44) #1, !dbg !31
  %47 = and i1 %27, %37, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !33
  %49 = and i1 %19, %47, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 false, i32 0, i1 false) #1, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 0, i1 %49) #1, !dbg !35
  %52 = and i1 %28, %37, !dbg !36
  %53 = extractelement <2 x i32> %35, i64 0, !dbg !22
  %54 = add nsw i32 %53, -8, !dbg !22
  %55 = add nsw i32 %54, %29, !dbg !37
  %56 = add nsw i32 %54, %30, !dbg !37
  %57 = add nsw i32 %55, %31, !dbg !38
  %58 = add nsw i32 %31, %56, !dbg !38
  %59 = sext i32 %57 to i64, !dbg !39
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !39
  %61 = sext i32 %58 to i64, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !39
  %63 = and i1 %19, %52, !dbg !40
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %63, i32 0, i1 %63) #1, !dbg !41
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63) #1, !dbg !41
  %.v1 = select i1 %27, i32 %51, i32 %65, !dbg !42
  %.v2 = select i1 %23, i32 %45, i32 %64, !dbg !43
  %.v3 = select i1 %24, i32 %46, i32 %.v1, !dbg !43
  %66 = icmp eq i32 %36, 1, !dbg !44
  %67 = and i1 %23, %66, !dbg !45
  %68 = and i1 %24, %66, !dbg !45
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !46
  %70 = and i1 %19, %67, !dbg !47
  %71 = and i1 %19, %68, !dbg !47
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 0, i1 %70) #1, !dbg !48
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %71, i32 0, i1 %71) #1, !dbg !48
  %74 = and i1 %27, %66, !dbg !49
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !50
  %76 = and i1 %19, %74, !dbg !51
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 false, i32 0, i1 false) #1, !dbg !52
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 0, i1 %76) #1, !dbg !52
  %79 = and i1 %28, %66, !dbg !53
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !54
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !54
  %82 = and i1 %19, %79, !dbg !55
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %82, i32 0, i1 %82) #1, !dbg !56
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %82, i32 0, i1 %82) #1, !dbg !56
  %.v5 = select i1 %27, i32 %78, i32 %84, !dbg !57
  %.v6 = select i1 %23, i32 %72, i32 %83, !dbg !58
  %.v7 = select i1 %24, i32 %73, i32 %.v5, !dbg !58
  %85 = icmp sgt i32 %36, 1, !dbg !26
  %86 = and i1 %23, %85, !dbg !59
  %87 = and i1 %24, %85, !dbg !59
  %88 = insertelement <2 x i32> <i32 poison, i32 -2>, i32 %31, i64 0, !dbg !60
  %89 = add nsw <2 x i32> %88, %35, !dbg !60
  %90 = extractelement <2 x i32> %89, i64 1, !dbg !61
  %91 = shl nsw i32 %90, 2, !dbg !61
  %92 = extractelement <2 x i32> %89, i64 0, !dbg !62
  %93 = add nsw i32 %92, %91, !dbg !62
  %94 = sext i32 %93 to i64, !dbg !63
  %95 = getelementptr float, ptr addrspace(1) %6, i64 %94, !dbg !63
  %96 = and i1 %19, %86, !dbg !64
  %97 = and i1 %19, %87, !dbg !64
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96) #1, !dbg !65
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %97, i32 0, i1 %97) #1, !dbg !65
  %100 = and i1 %27, %85, !dbg !66
  %101 = getelementptr float, ptr addrspace(1) %7, i64 %94, !dbg !67
  %102 = and i1 %19, %100, !dbg !68
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 false, i32 0, i1 false) #1, !dbg !69
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %102, i32 0, i1 %102) #1, !dbg !69
  %105 = and i1 %28, %85, !dbg !70
  %106 = shl nsw i32 %90, 3, !dbg !71
  %107 = shl nsw i32 %22, 4, !dbg !72
  %108 = add nsw i32 %106, %107, !dbg !73
  %109 = add nsw i32 %108, %55, !dbg !74
  %110 = add nsw i32 %108, %56, !dbg !74
  %111 = sext i32 %109 to i64, !dbg !75
  %112 = getelementptr float, ptr addrspace(1) %8, i64 %111, !dbg !75
  %113 = sext i32 %110 to i64, !dbg !75
  %114 = getelementptr float, ptr addrspace(1) %8, i64 %113, !dbg !75
  %115 = and i1 %19, %105, !dbg !76
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %115, i32 0, i1 %115) #1, !dbg !77
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 0, i1 %115) #1, !dbg !77
  %.v9 = select i1 %27, i32 %104, i32 %117, !dbg !78
  %.v10 = select i1 %23, i32 %98, i32 %116, !dbg !79
  %.v11 = select i1 %24, i32 %99, i32 %.v9, !dbg !79
  %118 = sext i32 %17 to i64, !dbg !80
  %119 = getelementptr float, ptr addrspace(1) %9, i64 %118, !dbg !80
  %120 = select i1 %85, i32 %.v10, i32 0, !dbg !81
  %121 = select i1 %66, i32 %.v6, i32 %120, !dbg !82
  %122 = select i1 %37, i32 %.v2, i32 %121, !dbg !82
  %123 = select i1 %85, i32 %.v11, i32 0, !dbg !81
  %124 = select i1 %66, i32 %.v7, i32 %123, !dbg !82
  %125 = select i1 %37, i32 %.v3, i32 %124, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %125, ptr addrspace(1) %119, i1 %19) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cudva62zp6fn5eavyiq64wuehy6bc6fuqd6e4rpg24vr43cbqdi2.py", directory: "inductor_cache/ud")
!4 = !{ptr @triton_poi_fused_cat_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_25", linkageName: "triton_poi_fused_cat_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 39, column: 18, scope: !7)
!18 = !DILocation(line: 42, column: 20, scope: !7)
!19 = !DILocation(line: 44, column: 19, scope: !7)
!20 = !DILocation(line: 45, column: 20, scope: !7)
!21 = !DILocation(line: 48, column: 20, scope: !7)
!22 = !DILocation(line: 52, column: 39, scope: !7)
!23 = !DILocation(line: 52, column: 54, scope: !7)
!24 = !DILocation(line: 26, column: 19, scope: !7)
!25 = !DILocation(line: 27, column: 27, scope: !7)
!26 = !DILocation(line: 83, column: 20, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 31, scope: !7)
!30 = !DILocation(line: 41, column: 44, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 44, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 51, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 36, scope: !7)
!38 = !DILocation(line: 52, column: 52, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 67, scope: !7)
!41 = !DILocation(line: 52, column: 59, scope: !7)
!42 = !DILocation(line: 53, column: 35, scope: !7)
!43 = !DILocation(line: 54, column: 34, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 66, column: 20, scope: !7)
!46 = !DILocation(line: 67, column: 31, scope: !7)
!47 = !DILocation(line: 67, column: 44, scope: !7)
!48 = !DILocation(line: 67, column: 36, scope: !7)
!49 = !DILocation(line: 72, column: 20, scope: !7)
!50 = !DILocation(line: 73, column: 31, scope: !7)
!51 = !DILocation(line: 73, column: 44, scope: !7)
!52 = !DILocation(line: 73, column: 36, scope: !7)
!53 = !DILocation(line: 77, column: 20, scope: !7)
!54 = !DILocation(line: 78, column: 31, scope: !7)
!55 = !DILocation(line: 78, column: 67, scope: !7)
!56 = !DILocation(line: 78, column: 59, scope: !7)
!57 = !DILocation(line: 79, column: 35, scope: !7)
!58 = !DILocation(line: 80, column: 35, scope: !7)
!59 = !DILocation(line: 91, column: 20, scope: !7)
!60 = !DILocation(line: 92, column: 36, scope: !7)
!61 = !DILocation(line: 92, column: 39, scope: !7)
!62 = !DILocation(line: 92, column: 52, scope: !7)
!63 = !DILocation(line: 92, column: 31, scope: !7)
!64 = !DILocation(line: 92, column: 67, scope: !7)
!65 = !DILocation(line: 92, column: 59, scope: !7)
!66 = !DILocation(line: 97, column: 20, scope: !7)
!67 = !DILocation(line: 98, column: 31, scope: !7)
!68 = !DILocation(line: 98, column: 67, scope: !7)
!69 = !DILocation(line: 98, column: 59, scope: !7)
!70 = !DILocation(line: 102, column: 20, scope: !7)
!71 = !DILocation(line: 103, column: 55, scope: !7)
!72 = !DILocation(line: 103, column: 71, scope: !7)
!73 = !DILocation(line: 103, column: 52, scope: !7)
!74 = !DILocation(line: 103, column: 68, scope: !7)
!75 = !DILocation(line: 103, column: 31, scope: !7)
!76 = !DILocation(line: 103, column: 84, scope: !7)
!77 = !DILocation(line: 103, column: 76, scope: !7)
!78 = !DILocation(line: 104, column: 35, scope: !7)
!79 = !DILocation(line: 105, column: 35, scope: !7)
!80 = !DILocation(line: 110, column: 25, scope: !7)
!81 = !DILocation(line: 107, column: 35, scope: !7)
!82 = !DILocation(line: 0, scope: !7)
!83 = !DILocation(line: 110, column: 37, scope: !7)
!84 = !DILocation(line: 110, column: 4, scope: !7)
