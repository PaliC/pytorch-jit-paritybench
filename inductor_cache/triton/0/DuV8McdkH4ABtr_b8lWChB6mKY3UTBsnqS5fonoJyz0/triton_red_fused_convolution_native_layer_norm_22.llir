; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %.lobit1 = lshr i32 %12, 7, !dbg !12
  %14 = and i32 %.lobit1, 3, !dbg !12
  %15 = and i32 %12, 31, !dbg !12
  %16 = and i32 %12, 7, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = icmp slt i32 %11, 64, !dbg !14
  %22 = insertelement <8 x i32> poison, i32 %11, i64 0, !dbg !13
  %23 = shufflevector <8 x i32> %22, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !13
  %24 = insertelement <8 x i32> <i32 poison, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1>, i32 %16, i64 0, !dbg !13
  %25 = or disjoint <8 x i32> %23, %24, !dbg !13
  %26 = or disjoint i32 %11, %16, !dbg !13
  %27 = icmp slt <8 x i32> %25, splat (i32 64), !dbg !14
  %28 = shl i32 %12, 2, !dbg !15
  %29 = and i32 %28, 508, !dbg !15
  %30 = and i32 %12, 511, !dbg !15
  %31 = sdiv i32 %26, 4, !dbg !16
  %32 = insertelement <8 x i32> poison, i32 %31, i64 0, !dbg !17
  %33 = shufflevector <8 x i32> %32, <8 x i32> %25, <2 x i32> <i32 0, i32 8>, !dbg !17
  %34 = srem <2 x i32> %33, splat (i32 4), !dbg !17
  %35 = sdiv i32 %26, 16, !dbg !18
  %36 = icmp samesign ult i32 %29, 384, !dbg !19
  %37 = icmp samesign ult i32 %30, 384, !dbg !19
  %38 = mul i32 %17, 384, !dbg !20
  %39 = mul i32 %18, 384, !dbg !20
  %40 = add i32 %38, %29, !dbg !21
  %41 = add i32 %39, %29, !dbg !21
  %42 = sext i32 %40 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %41 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = and i1 %36, %19, !dbg !23
  %47 = and i1 %36, %20, !dbg !23
  %48 = and i1 %37, %21, !dbg !23
  %49 = extractelement <8 x i1> %27, i64 7, !dbg !23
  %50 = and i1 %37, %49, !dbg !23
  %51 = extractelement <8 x i1> %27, i64 6, !dbg !23
  %52 = and i1 %37, %51, !dbg !23
  %53 = extractelement <8 x i1> %27, i64 5, !dbg !23
  %54 = and i1 %37, %53, !dbg !23
  %55 = extractelement <8 x i1> %27, i64 4, !dbg !23
  %56 = and i1 %37, %55, !dbg !23
  %57 = extractelement <8 x i1> %27, i64 3, !dbg !23
  %58 = and i1 %37, %57, !dbg !23
  %59 = extractelement <8 x i1> %27, i64 2, !dbg !23
  %60 = and i1 %37, %59, !dbg !23
  %61 = extractelement <8 x i1> %27, i64 1, !dbg !23
  %62 = and i1 %37, %61, !dbg !23
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #5, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = bitcast i32 %66 to float, !dbg !24
  %71 = bitcast i32 %67 to float, !dbg !24
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #5, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !24
  %77 = bitcast i32 %73 to float, !dbg !24
  %78 = bitcast i32 %74 to float, !dbg !24
  %79 = bitcast i32 %75 to float, !dbg !24
  %80 = bitcast i32 %76 to float, !dbg !24
  %81 = and i32 %28, 2044, !dbg !24
  %82 = lshr i32 %28, 7, !dbg !24
  %83 = and i32 %82, 12, !dbg !24
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !24
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %81, !dbg !24
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %85, i32 %64, i32 %65, i32 %66, i32 %67, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !24
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %88 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 2064, !dbg !24
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %90 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 4128, !dbg !24
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %92 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 6192, !dbg !24
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %85, i32 %73, i32 %74, i32 %75, i32 %76, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %94 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %95 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %96 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %97 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  %98 = zext nneg i32 %30 to i64, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !25
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %37, i32 0, i1 %37) #5, !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %102 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %102, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29, !dbg !27
  %104 = load float, ptr addrspace(3) %103, align 16, !dbg !27
  %105 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 4, !dbg !27
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !27
  %107 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 8, !dbg !27
  %108 = load float, ptr addrspace(3) %107, align 8, !dbg !27
  %109 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 12, !dbg !27
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !27
  %111 = fadd float %104, %68, !dbg !27
  %112 = fadd float %106, %69, !dbg !27
  %113 = fadd float %108, %70, !dbg !27
  %114 = fadd float %110, %71, !dbg !27
  %115 = fadd float %104, %77, !dbg !27
  %116 = fadd float %106, %78, !dbg !27
  %117 = fadd float %108, %79, !dbg !27
  %118 = fadd float %110, %80, !dbg !27
  %119 = fadd float %87, %101, !dbg !27
  %120 = fadd float %89, %101, !dbg !27
  %121 = fadd float %91, %101, !dbg !27
  %122 = fadd float %93, %101, !dbg !27
  %123 = fadd float %94, %101, !dbg !27
  %124 = fadd float %95, %101, !dbg !27
  %125 = fadd float %96, %101, !dbg !27
  %126 = fadd float %97, %101, !dbg !27
  %127 = select i1 %48, float %119, float 0.000000e+00, !dbg !28
  %128 = select i1 %50, float %120, float 0.000000e+00, !dbg !28
  %129 = select i1 %52, float %121, float 0.000000e+00, !dbg !28
  %130 = select i1 %54, float %122, float 0.000000e+00, !dbg !28
  %131 = select i1 %56, float %123, float 0.000000e+00, !dbg !28
  %132 = select i1 %58, float %124, float 0.000000e+00, !dbg !28
  %133 = select i1 %60, float %125, float 0.000000e+00, !dbg !28
  %134 = select i1 %62, float %126, float 0.000000e+00, !dbg !28
  %135 = select i1 %48, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %136 = select i1 %50, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %137 = select i1 %52, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %138 = select i1 %54, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %139 = select i1 %56, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %140 = select i1 %58, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %141 = select i1 %60, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %142 = select i1 %62, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %143 = bitcast float %111 to i32, !dbg !30
  %144 = bitcast float %112 to i32, !dbg !30
  %145 = bitcast float %113 to i32, !dbg !30
  %146 = bitcast float %114 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %143, i32 %144, i32 %145, i32 %146, ptr addrspace(1) %43, i1 %46) #5, !dbg !30
  %147 = bitcast float %115 to i32, !dbg !30
  %148 = bitcast float %116 to i32, !dbg !30
  %149 = bitcast float %117 to i32, !dbg !30
  %150 = bitcast float %118 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %147, i32 %148, i32 %149, i32 %150, ptr addrspace(1) %45, i1 %47) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %151 = bitcast float %127 to i32, !dbg !31
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !31
  %153 = bitcast i32 %152 to float, !dbg !31
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %155 = bitcast i32 %154 to float, !dbg !31
  %156 = bitcast float %135 to i32, !dbg !31
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !31
  %158 = bitcast i32 %157 to float, !dbg !31
  %159 = fsub float %153, %127, !dbg !35
  %160 = fadd float %135, %158, !dbg !37
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !38
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float %160) #5, !dbg !39
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !40
  %164 = fmul float %159, %163, !dbg !41
  %165 = fadd float %127, %164, !dbg !42
  %166 = fadd float %155, 0.000000e+00, !dbg !43
  %167 = fmul float %159, %159, !dbg !44
  %168 = fmul float %135, %167, !dbg !45
  %169 = fmul float %168, %163, !dbg !46
  %170 = fadd float %166, %169, !dbg !47
  %171 = bitcast float %165 to i32, !dbg !31
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !31
  %173 = bitcast i32 %172 to float, !dbg !31
  %174 = bitcast float %170 to i32, !dbg !31
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 8, i32 31), !dbg !31
  %176 = bitcast i32 %175 to float, !dbg !31
  %177 = bitcast float %160 to i32, !dbg !31
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 8, i32 31), !dbg !31
  %179 = bitcast i32 %178 to float, !dbg !31
  %180 = fsub float %173, %165, !dbg !35
  %181 = fadd float %160, %179, !dbg !37
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !38
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %181) #5, !dbg !39
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !40
  %185 = fmul float %180, %184, !dbg !41
  %186 = fadd float %165, %185, !dbg !42
  %187 = fadd float %170, %176, !dbg !43
  %188 = fmul float %180, %180, !dbg !44
  %189 = fmul float %160, %188, !dbg !45
  %190 = fmul float %184, %189, !dbg !46
  %191 = fadd float %187, %190, !dbg !47
  %192 = bitcast float %186 to i32, !dbg !31
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !31
  %194 = bitcast i32 %193 to float, !dbg !31
  %195 = bitcast float %191 to i32, !dbg !31
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 4, i32 31), !dbg !31
  %197 = bitcast i32 %196 to float, !dbg !31
  %198 = bitcast float %181 to i32, !dbg !31
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = fsub float %194, %186, !dbg !35
  %202 = fadd float %181, %200, !dbg !37
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !38
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %202) #5, !dbg !39
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !40
  %206 = fmul float %201, %205, !dbg !41
  %207 = fadd float %186, %206, !dbg !42
  %208 = fadd float %191, %197, !dbg !43
  %209 = fmul float %201, %201, !dbg !44
  %210 = fmul float %181, %209, !dbg !45
  %211 = fmul float %205, %210, !dbg !46
  %212 = fadd float %208, %211, !dbg !47
  %213 = bitcast float %207 to i32, !dbg !31
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !31
  %215 = bitcast i32 %214 to float, !dbg !31
  %216 = bitcast float %212 to i32, !dbg !31
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !31
  %218 = bitcast i32 %217 to float, !dbg !31
  %219 = bitcast float %202 to i32, !dbg !31
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 2, i32 31), !dbg !31
  %221 = bitcast i32 %220 to float, !dbg !31
  %222 = fsub float %215, %207, !dbg !35
  %223 = fadd float %202, %221, !dbg !37
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !38
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %223) #5, !dbg !39
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !40
  %227 = fmul float %222, %226, !dbg !41
  %228 = fadd float %207, %227, !dbg !42
  %229 = fadd float %212, %218, !dbg !43
  %230 = fmul float %222, %222, !dbg !44
  %231 = fmul float %202, %230, !dbg !45
  %232 = fmul float %226, %231, !dbg !46
  %233 = fadd float %229, %232, !dbg !47
  %234 = bitcast float %228 to i32, !dbg !31
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !31
  %236 = bitcast i32 %235 to float, !dbg !31
  %237 = bitcast float %233 to i32, !dbg !31
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !31
  %239 = bitcast i32 %238 to float, !dbg !31
  %240 = bitcast float %223 to i32, !dbg !31
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 1, i32 31), !dbg !31
  %242 = bitcast i32 %241 to float, !dbg !31
  %243 = fsub float %236, %228, !dbg !35
  %244 = fadd float %223, %242, !dbg !37
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !38
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #5, !dbg !39
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !40
  %248 = fmul float %243, %247, !dbg !41
  %249 = fadd float %228, %248, !dbg !42
  %250 = fadd float %233, %239, !dbg !43
  %251 = fmul float %243, %243, !dbg !44
  %252 = fmul float %223, %251, !dbg !45
  %253 = fmul float %247, %252, !dbg !46
  %254 = fadd float %250, %253, !dbg !47
  %255 = bitcast float %128 to i32, !dbg !31
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 16, i32 31), !dbg !31
  %257 = bitcast i32 %256 to float, !dbg !31
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %259 = bitcast i32 %258 to float, !dbg !31
  %260 = bitcast float %136 to i32, !dbg !31
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 16, i32 31), !dbg !31
  %262 = bitcast i32 %261 to float, !dbg !31
  %263 = fsub float %257, %128, !dbg !35
  %264 = fadd float %136, %262, !dbg !37
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !38
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %264) #5, !dbg !39
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !40
  %268 = fmul float %263, %267, !dbg !41
  %269 = fadd float %128, %268, !dbg !42
  %270 = fadd float %259, 0.000000e+00, !dbg !43
  %271 = fmul float %263, %263, !dbg !44
  %272 = fmul float %136, %271, !dbg !45
  %273 = fmul float %272, %267, !dbg !46
  %274 = fadd float %270, %273, !dbg !47
  %275 = bitcast float %269 to i32, !dbg !31
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 8, i32 31), !dbg !31
  %277 = bitcast i32 %276 to float, !dbg !31
  %278 = bitcast float %274 to i32, !dbg !31
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 8, i32 31), !dbg !31
  %280 = bitcast i32 %279 to float, !dbg !31
  %281 = bitcast float %264 to i32, !dbg !31
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 8, i32 31), !dbg !31
  %283 = bitcast i32 %282 to float, !dbg !31
  %284 = fsub float %277, %269, !dbg !35
  %285 = fadd float %264, %283, !dbg !37
  %286 = fcmp oeq float %285, 0.000000e+00, !dbg !38
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float %285) #5, !dbg !39
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !40
  %289 = fmul float %284, %288, !dbg !41
  %290 = fadd float %269, %289, !dbg !42
  %291 = fadd float %274, %280, !dbg !43
  %292 = fmul float %284, %284, !dbg !44
  %293 = fmul float %264, %292, !dbg !45
  %294 = fmul float %288, %293, !dbg !46
  %295 = fadd float %291, %294, !dbg !47
  %296 = bitcast float %290 to i32, !dbg !31
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 4, i32 31), !dbg !31
  %298 = bitcast i32 %297 to float, !dbg !31
  %299 = bitcast float %295 to i32, !dbg !31
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 4, i32 31), !dbg !31
  %301 = bitcast i32 %300 to float, !dbg !31
  %302 = bitcast float %285 to i32, !dbg !31
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 4, i32 31), !dbg !31
  %304 = bitcast i32 %303 to float, !dbg !31
  %305 = fsub float %298, %290, !dbg !35
  %306 = fadd float %285, %304, !dbg !37
  %307 = fcmp oeq float %306, 0.000000e+00, !dbg !38
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %306) #5, !dbg !39
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !40
  %310 = fmul float %305, %309, !dbg !41
  %311 = fadd float %290, %310, !dbg !42
  %312 = fadd float %295, %301, !dbg !43
  %313 = fmul float %305, %305, !dbg !44
  %314 = fmul float %285, %313, !dbg !45
  %315 = fmul float %309, %314, !dbg !46
  %316 = fadd float %312, %315, !dbg !47
  %317 = bitcast float %311 to i32, !dbg !31
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !31
  %319 = bitcast i32 %318 to float, !dbg !31
  %320 = bitcast float %316 to i32, !dbg !31
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 2, i32 31), !dbg !31
  %322 = bitcast i32 %321 to float, !dbg !31
  %323 = bitcast float %306 to i32, !dbg !31
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 2, i32 31), !dbg !31
  %325 = bitcast i32 %324 to float, !dbg !31
  %326 = fsub float %319, %311, !dbg !35
  %327 = fadd float %306, %325, !dbg !37
  %328 = fcmp oeq float %327, 0.000000e+00, !dbg !38
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float %327) #5, !dbg !39
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !40
  %331 = fmul float %326, %330, !dbg !41
  %332 = fadd float %311, %331, !dbg !42
  %333 = fadd float %316, %322, !dbg !43
  %334 = fmul float %326, %326, !dbg !44
  %335 = fmul float %306, %334, !dbg !45
  %336 = fmul float %330, %335, !dbg !46
  %337 = fadd float %333, %336, !dbg !47
  %338 = bitcast float %332 to i32, !dbg !31
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 1, i32 31), !dbg !31
  %340 = bitcast i32 %339 to float, !dbg !31
  %341 = bitcast float %337 to i32, !dbg !31
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 1, i32 31), !dbg !31
  %343 = bitcast i32 %342 to float, !dbg !31
  %344 = bitcast float %327 to i32, !dbg !31
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 1, i32 31), !dbg !31
  %346 = bitcast i32 %345 to float, !dbg !31
  %347 = fsub float %340, %332, !dbg !35
  %348 = fadd float %327, %346, !dbg !37
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !38
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %346, float %348) #5, !dbg !39
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !40
  %352 = fmul float %347, %351, !dbg !41
  %353 = fadd float %332, %352, !dbg !42
  %354 = fadd float %337, %343, !dbg !43
  %355 = fmul float %347, %347, !dbg !44
  %356 = fmul float %327, %355, !dbg !45
  %357 = fmul float %351, %356, !dbg !46
  %358 = fadd float %354, %357, !dbg !47
  %359 = bitcast float %129 to i32, !dbg !31
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 16, i32 31), !dbg !31
  %361 = bitcast i32 %360 to float, !dbg !31
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %363 = bitcast i32 %362 to float, !dbg !31
  %364 = bitcast float %137 to i32, !dbg !31
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 16, i32 31), !dbg !31
  %366 = bitcast i32 %365 to float, !dbg !31
  %367 = fsub float %361, %129, !dbg !35
  %368 = fadd float %137, %366, !dbg !37
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !38
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %368) #5, !dbg !39
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !40
  %372 = fmul float %367, %371, !dbg !41
  %373 = fadd float %129, %372, !dbg !42
  %374 = fadd float %363, 0.000000e+00, !dbg !43
  %375 = fmul float %367, %367, !dbg !44
  %376 = fmul float %137, %375, !dbg !45
  %377 = fmul float %376, %371, !dbg !46
  %378 = fadd float %374, %377, !dbg !47
  %379 = bitcast float %373 to i32, !dbg !31
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 8, i32 31), !dbg !31
  %381 = bitcast i32 %380 to float, !dbg !31
  %382 = bitcast float %378 to i32, !dbg !31
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 8, i32 31), !dbg !31
  %384 = bitcast i32 %383 to float, !dbg !31
  %385 = bitcast float %368 to i32, !dbg !31
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 8, i32 31), !dbg !31
  %387 = bitcast i32 %386 to float, !dbg !31
  %388 = fsub float %381, %373, !dbg !35
  %389 = fadd float %368, %387, !dbg !37
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !38
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float %389) #5, !dbg !39
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !40
  %393 = fmul float %388, %392, !dbg !41
  %394 = fadd float %373, %393, !dbg !42
  %395 = fadd float %378, %384, !dbg !43
  %396 = fmul float %388, %388, !dbg !44
  %397 = fmul float %368, %396, !dbg !45
  %398 = fmul float %392, %397, !dbg !46
  %399 = fadd float %395, %398, !dbg !47
  %400 = bitcast float %394 to i32, !dbg !31
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 4, i32 31), !dbg !31
  %402 = bitcast i32 %401 to float, !dbg !31
  %403 = bitcast float %399 to i32, !dbg !31
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 4, i32 31), !dbg !31
  %405 = bitcast i32 %404 to float, !dbg !31
  %406 = bitcast float %389 to i32, !dbg !31
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 4, i32 31), !dbg !31
  %408 = bitcast i32 %407 to float, !dbg !31
  %409 = fsub float %402, %394, !dbg !35
  %410 = fadd float %389, %408, !dbg !37
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !38
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float %410) #5, !dbg !39
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !40
  %414 = fmul float %409, %413, !dbg !41
  %415 = fadd float %394, %414, !dbg !42
  %416 = fadd float %399, %405, !dbg !43
  %417 = fmul float %409, %409, !dbg !44
  %418 = fmul float %389, %417, !dbg !45
  %419 = fmul float %413, %418, !dbg !46
  %420 = fadd float %416, %419, !dbg !47
  %421 = bitcast float %415 to i32, !dbg !31
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 2, i32 31), !dbg !31
  %423 = bitcast i32 %422 to float, !dbg !31
  %424 = bitcast float %420 to i32, !dbg !31
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 2, i32 31), !dbg !31
  %426 = bitcast i32 %425 to float, !dbg !31
  %427 = bitcast float %410 to i32, !dbg !31
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 2, i32 31), !dbg !31
  %429 = bitcast i32 %428 to float, !dbg !31
  %430 = fsub float %423, %415, !dbg !35
  %431 = fadd float %410, %429, !dbg !37
  %432 = fcmp oeq float %431, 0.000000e+00, !dbg !38
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %431) #5, !dbg !39
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !40
  %435 = fmul float %430, %434, !dbg !41
  %436 = fadd float %415, %435, !dbg !42
  %437 = fadd float %420, %426, !dbg !43
  %438 = fmul float %430, %430, !dbg !44
  %439 = fmul float %410, %438, !dbg !45
  %440 = fmul float %434, %439, !dbg !46
  %441 = fadd float %437, %440, !dbg !47
  %442 = bitcast float %436 to i32, !dbg !31
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !31
  %444 = bitcast i32 %443 to float, !dbg !31
  %445 = bitcast float %441 to i32, !dbg !31
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 1, i32 31), !dbg !31
  %447 = bitcast i32 %446 to float, !dbg !31
  %448 = bitcast float %431 to i32, !dbg !31
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 1, i32 31), !dbg !31
  %450 = bitcast i32 %449 to float, !dbg !31
  %451 = fsub float %444, %436, !dbg !35
  %452 = fadd float %431, %450, !dbg !37
  %453 = fcmp oeq float %452, 0.000000e+00, !dbg !38
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %452) #5, !dbg !39
  %455 = select i1 %453, float 0.000000e+00, float %454, !dbg !40
  %456 = fmul float %451, %455, !dbg !41
  %457 = fadd float %436, %456, !dbg !42
  %458 = fadd float %441, %447, !dbg !43
  %459 = fmul float %451, %451, !dbg !44
  %460 = fmul float %431, %459, !dbg !45
  %461 = fmul float %455, %460, !dbg !46
  %462 = fadd float %458, %461, !dbg !47
  %463 = bitcast float %130 to i32, !dbg !31
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 16, i32 31), !dbg !31
  %465 = bitcast i32 %464 to float, !dbg !31
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %467 = bitcast i32 %466 to float, !dbg !31
  %468 = bitcast float %138 to i32, !dbg !31
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 16, i32 31), !dbg !31
  %470 = bitcast i32 %469 to float, !dbg !31
  %471 = fsub float %465, %130, !dbg !35
  %472 = fadd float %138, %470, !dbg !37
  %473 = fcmp oeq float %472, 0.000000e+00, !dbg !38
  %474 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %470, float %472) #5, !dbg !39
  %475 = select i1 %473, float 0.000000e+00, float %474, !dbg !40
  %476 = fmul float %471, %475, !dbg !41
  %477 = fadd float %130, %476, !dbg !42
  %478 = fadd float %467, 0.000000e+00, !dbg !43
  %479 = fmul float %471, %471, !dbg !44
  %480 = fmul float %138, %479, !dbg !45
  %481 = fmul float %480, %475, !dbg !46
  %482 = fadd float %478, %481, !dbg !47
  %483 = bitcast float %477 to i32, !dbg !31
  %484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %483, i32 8, i32 31), !dbg !31
  %485 = bitcast i32 %484 to float, !dbg !31
  %486 = bitcast float %482 to i32, !dbg !31
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 8, i32 31), !dbg !31
  %488 = bitcast i32 %487 to float, !dbg !31
  %489 = bitcast float %472 to i32, !dbg !31
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 8, i32 31), !dbg !31
  %491 = bitcast i32 %490 to float, !dbg !31
  %492 = fsub float %485, %477, !dbg !35
  %493 = fadd float %472, %491, !dbg !37
  %494 = fcmp oeq float %493, 0.000000e+00, !dbg !38
  %495 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %491, float %493) #5, !dbg !39
  %496 = select i1 %494, float 0.000000e+00, float %495, !dbg !40
  %497 = fmul float %492, %496, !dbg !41
  %498 = fadd float %477, %497, !dbg !42
  %499 = fadd float %482, %488, !dbg !43
  %500 = fmul float %492, %492, !dbg !44
  %501 = fmul float %472, %500, !dbg !45
  %502 = fmul float %496, %501, !dbg !46
  %503 = fadd float %499, %502, !dbg !47
  %504 = bitcast float %498 to i32, !dbg !31
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 4, i32 31), !dbg !31
  %506 = bitcast i32 %505 to float, !dbg !31
  %507 = bitcast float %503 to i32, !dbg !31
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 4, i32 31), !dbg !31
  %509 = bitcast i32 %508 to float, !dbg !31
  %510 = bitcast float %493 to i32, !dbg !31
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 4, i32 31), !dbg !31
  %512 = bitcast i32 %511 to float, !dbg !31
  %513 = fsub float %506, %498, !dbg !35
  %514 = fadd float %493, %512, !dbg !37
  %515 = fcmp oeq float %514, 0.000000e+00, !dbg !38
  %516 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %512, float %514) #5, !dbg !39
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !40
  %518 = fmul float %513, %517, !dbg !41
  %519 = fadd float %498, %518, !dbg !42
  %520 = fadd float %503, %509, !dbg !43
  %521 = fmul float %513, %513, !dbg !44
  %522 = fmul float %493, %521, !dbg !45
  %523 = fmul float %517, %522, !dbg !46
  %524 = fadd float %520, %523, !dbg !47
  %525 = bitcast float %519 to i32, !dbg !31
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 2, i32 31), !dbg !31
  %527 = bitcast i32 %526 to float, !dbg !31
  %528 = bitcast float %524 to i32, !dbg !31
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 2, i32 31), !dbg !31
  %530 = bitcast i32 %529 to float, !dbg !31
  %531 = bitcast float %514 to i32, !dbg !31
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 2, i32 31), !dbg !31
  %533 = bitcast i32 %532 to float, !dbg !31
  %534 = fsub float %527, %519, !dbg !35
  %535 = fadd float %514, %533, !dbg !37
  %536 = fcmp oeq float %535, 0.000000e+00, !dbg !38
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %533, float %535) #5, !dbg !39
  %538 = select i1 %536, float 0.000000e+00, float %537, !dbg !40
  %539 = fmul float %534, %538, !dbg !41
  %540 = fadd float %519, %539, !dbg !42
  %541 = fadd float %524, %530, !dbg !43
  %542 = fmul float %534, %534, !dbg !44
  %543 = fmul float %514, %542, !dbg !45
  %544 = fmul float %538, %543, !dbg !46
  %545 = fadd float %541, %544, !dbg !47
  %546 = bitcast float %540 to i32, !dbg !31
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 1, i32 31), !dbg !31
  %548 = bitcast i32 %547 to float, !dbg !31
  %549 = bitcast float %545 to i32, !dbg !31
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 1, i32 31), !dbg !31
  %551 = bitcast i32 %550 to float, !dbg !31
  %552 = bitcast float %535 to i32, !dbg !31
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 1, i32 31), !dbg !31
  %554 = bitcast i32 %553 to float, !dbg !31
  %555 = fsub float %548, %540, !dbg !35
  %556 = fadd float %535, %554, !dbg !37
  %557 = fcmp oeq float %556, 0.000000e+00, !dbg !38
  %558 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %554, float %556) #5, !dbg !39
  %559 = select i1 %557, float 0.000000e+00, float %558, !dbg !40
  %560 = fmul float %555, %559, !dbg !41
  %561 = fadd float %540, %560, !dbg !42
  %562 = fadd float %545, %551, !dbg !43
  %563 = fmul float %555, %555, !dbg !44
  %564 = fmul float %535, %563, !dbg !45
  %565 = fmul float %559, %564, !dbg !46
  %566 = fadd float %562, %565, !dbg !47
  %567 = bitcast float %131 to i32, !dbg !31
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 16, i32 31), !dbg !31
  %569 = bitcast i32 %568 to float, !dbg !31
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %571 = bitcast i32 %570 to float, !dbg !31
  %572 = bitcast float %139 to i32, !dbg !31
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 16, i32 31), !dbg !31
  %574 = bitcast i32 %573 to float, !dbg !31
  %575 = fsub float %569, %131, !dbg !35
  %576 = fadd float %139, %574, !dbg !37
  %577 = fcmp oeq float %576, 0.000000e+00, !dbg !38
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %574, float %576) #5, !dbg !39
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !40
  %580 = fmul float %575, %579, !dbg !41
  %581 = fadd float %131, %580, !dbg !42
  %582 = fadd float %571, 0.000000e+00, !dbg !43
  %583 = fmul float %575, %575, !dbg !44
  %584 = fmul float %139, %583, !dbg !45
  %585 = fmul float %584, %579, !dbg !46
  %586 = fadd float %582, %585, !dbg !47
  %587 = bitcast float %581 to i32, !dbg !31
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 8, i32 31), !dbg !31
  %589 = bitcast i32 %588 to float, !dbg !31
  %590 = bitcast float %586 to i32, !dbg !31
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 8, i32 31), !dbg !31
  %592 = bitcast i32 %591 to float, !dbg !31
  %593 = bitcast float %576 to i32, !dbg !31
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 8, i32 31), !dbg !31
  %595 = bitcast i32 %594 to float, !dbg !31
  %596 = fsub float %589, %581, !dbg !35
  %597 = fadd float %576, %595, !dbg !37
  %598 = fcmp oeq float %597, 0.000000e+00, !dbg !38
  %599 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %595, float %597) #5, !dbg !39
  %600 = select i1 %598, float 0.000000e+00, float %599, !dbg !40
  %601 = fmul float %596, %600, !dbg !41
  %602 = fadd float %581, %601, !dbg !42
  %603 = fadd float %586, %592, !dbg !43
  %604 = fmul float %596, %596, !dbg !44
  %605 = fmul float %576, %604, !dbg !45
  %606 = fmul float %600, %605, !dbg !46
  %607 = fadd float %603, %606, !dbg !47
  %608 = bitcast float %602 to i32, !dbg !31
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 4, i32 31), !dbg !31
  %610 = bitcast i32 %609 to float, !dbg !31
  %611 = bitcast float %607 to i32, !dbg !31
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 4, i32 31), !dbg !31
  %613 = bitcast i32 %612 to float, !dbg !31
  %614 = bitcast float %597 to i32, !dbg !31
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 4, i32 31), !dbg !31
  %616 = bitcast i32 %615 to float, !dbg !31
  %617 = fsub float %610, %602, !dbg !35
  %618 = fadd float %597, %616, !dbg !37
  %619 = fcmp oeq float %618, 0.000000e+00, !dbg !38
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %616, float %618) #5, !dbg !39
  %621 = select i1 %619, float 0.000000e+00, float %620, !dbg !40
  %622 = fmul float %617, %621, !dbg !41
  %623 = fadd float %602, %622, !dbg !42
  %624 = fadd float %607, %613, !dbg !43
  %625 = fmul float %617, %617, !dbg !44
  %626 = fmul float %597, %625, !dbg !45
  %627 = fmul float %621, %626, !dbg !46
  %628 = fadd float %624, %627, !dbg !47
  %629 = bitcast float %623 to i32, !dbg !31
  %630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %629, i32 2, i32 31), !dbg !31
  %631 = bitcast i32 %630 to float, !dbg !31
  %632 = bitcast float %628 to i32, !dbg !31
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 2, i32 31), !dbg !31
  %634 = bitcast i32 %633 to float, !dbg !31
  %635 = bitcast float %618 to i32, !dbg !31
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 2, i32 31), !dbg !31
  %637 = bitcast i32 %636 to float, !dbg !31
  %638 = fsub float %631, %623, !dbg !35
  %639 = fadd float %618, %637, !dbg !37
  %640 = fcmp oeq float %639, 0.000000e+00, !dbg !38
  %641 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %637, float %639) #5, !dbg !39
  %642 = select i1 %640, float 0.000000e+00, float %641, !dbg !40
  %643 = fmul float %638, %642, !dbg !41
  %644 = fadd float %623, %643, !dbg !42
  %645 = fadd float %628, %634, !dbg !43
  %646 = fmul float %638, %638, !dbg !44
  %647 = fmul float %618, %646, !dbg !45
  %648 = fmul float %642, %647, !dbg !46
  %649 = fadd float %645, %648, !dbg !47
  %650 = bitcast float %644 to i32, !dbg !31
  %651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %650, i32 1, i32 31), !dbg !31
  %652 = bitcast i32 %651 to float, !dbg !31
  %653 = bitcast float %649 to i32, !dbg !31
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 1, i32 31), !dbg !31
  %655 = bitcast i32 %654 to float, !dbg !31
  %656 = bitcast float %639 to i32, !dbg !31
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 1, i32 31), !dbg !31
  %658 = bitcast i32 %657 to float, !dbg !31
  %659 = fsub float %652, %644, !dbg !35
  %660 = fadd float %639, %658, !dbg !37
  %661 = fcmp oeq float %660, 0.000000e+00, !dbg !38
  %662 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %658, float %660) #5, !dbg !39
  %663 = select i1 %661, float 0.000000e+00, float %662, !dbg !40
  %664 = fmul float %659, %663, !dbg !41
  %665 = fadd float %644, %664, !dbg !42
  %666 = fadd float %649, %655, !dbg !43
  %667 = fmul float %659, %659, !dbg !44
  %668 = fmul float %639, %667, !dbg !45
  %669 = fmul float %663, %668, !dbg !46
  %670 = fadd float %666, %669, !dbg !47
  %671 = bitcast float %132 to i32, !dbg !31
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 16, i32 31), !dbg !31
  %673 = bitcast i32 %672 to float, !dbg !31
  %674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %675 = bitcast i32 %674 to float, !dbg !31
  %676 = bitcast float %140 to i32, !dbg !31
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 16, i32 31), !dbg !31
  %678 = bitcast i32 %677 to float, !dbg !31
  %679 = fsub float %673, %132, !dbg !35
  %680 = fadd float %140, %678, !dbg !37
  %681 = fcmp oeq float %680, 0.000000e+00, !dbg !38
  %682 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %678, float %680) #5, !dbg !39
  %683 = select i1 %681, float 0.000000e+00, float %682, !dbg !40
  %684 = fmul float %679, %683, !dbg !41
  %685 = fadd float %132, %684, !dbg !42
  %686 = fadd float %675, 0.000000e+00, !dbg !43
  %687 = fmul float %679, %679, !dbg !44
  %688 = fmul float %140, %687, !dbg !45
  %689 = fmul float %688, %683, !dbg !46
  %690 = fadd float %686, %689, !dbg !47
  %691 = bitcast float %685 to i32, !dbg !31
  %692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %691, i32 8, i32 31), !dbg !31
  %693 = bitcast i32 %692 to float, !dbg !31
  %694 = bitcast float %690 to i32, !dbg !31
  %695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 8, i32 31), !dbg !31
  %696 = bitcast i32 %695 to float, !dbg !31
  %697 = bitcast float %680 to i32, !dbg !31
  %698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %697, i32 8, i32 31), !dbg !31
  %699 = bitcast i32 %698 to float, !dbg !31
  %700 = fsub float %693, %685, !dbg !35
  %701 = fadd float %680, %699, !dbg !37
  %702 = fcmp oeq float %701, 0.000000e+00, !dbg !38
  %703 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %699, float %701) #5, !dbg !39
  %704 = select i1 %702, float 0.000000e+00, float %703, !dbg !40
  %705 = fmul float %700, %704, !dbg !41
  %706 = fadd float %685, %705, !dbg !42
  %707 = fadd float %690, %696, !dbg !43
  %708 = fmul float %700, %700, !dbg !44
  %709 = fmul float %680, %708, !dbg !45
  %710 = fmul float %704, %709, !dbg !46
  %711 = fadd float %707, %710, !dbg !47
  %712 = bitcast float %706 to i32, !dbg !31
  %713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %712, i32 4, i32 31), !dbg !31
  %714 = bitcast i32 %713 to float, !dbg !31
  %715 = bitcast float %711 to i32, !dbg !31
  %716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %715, i32 4, i32 31), !dbg !31
  %717 = bitcast i32 %716 to float, !dbg !31
  %718 = bitcast float %701 to i32, !dbg !31
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 4, i32 31), !dbg !31
  %720 = bitcast i32 %719 to float, !dbg !31
  %721 = fsub float %714, %706, !dbg !35
  %722 = fadd float %701, %720, !dbg !37
  %723 = fcmp oeq float %722, 0.000000e+00, !dbg !38
  %724 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %720, float %722) #5, !dbg !39
  %725 = select i1 %723, float 0.000000e+00, float %724, !dbg !40
  %726 = fmul float %721, %725, !dbg !41
  %727 = fadd float %706, %726, !dbg !42
  %728 = fadd float %711, %717, !dbg !43
  %729 = fmul float %721, %721, !dbg !44
  %730 = fmul float %701, %729, !dbg !45
  %731 = fmul float %725, %730, !dbg !46
  %732 = fadd float %728, %731, !dbg !47
  %733 = bitcast float %727 to i32, !dbg !31
  %734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %733, i32 2, i32 31), !dbg !31
  %735 = bitcast i32 %734 to float, !dbg !31
  %736 = bitcast float %732 to i32, !dbg !31
  %737 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %736, i32 2, i32 31), !dbg !31
  %738 = bitcast i32 %737 to float, !dbg !31
  %739 = bitcast float %722 to i32, !dbg !31
  %740 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %739, i32 2, i32 31), !dbg !31
  %741 = bitcast i32 %740 to float, !dbg !31
  %742 = fsub float %735, %727, !dbg !35
  %743 = fadd float %722, %741, !dbg !37
  %744 = fcmp oeq float %743, 0.000000e+00, !dbg !38
  %745 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %741, float %743) #5, !dbg !39
  %746 = select i1 %744, float 0.000000e+00, float %745, !dbg !40
  %747 = fmul float %742, %746, !dbg !41
  %748 = fadd float %727, %747, !dbg !42
  %749 = fadd float %732, %738, !dbg !43
  %750 = fmul float %742, %742, !dbg !44
  %751 = fmul float %722, %750, !dbg !45
  %752 = fmul float %746, %751, !dbg !46
  %753 = fadd float %749, %752, !dbg !47
  %754 = bitcast float %748 to i32, !dbg !31
  %755 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %754, i32 1, i32 31), !dbg !31
  %756 = bitcast i32 %755 to float, !dbg !31
  %757 = bitcast float %753 to i32, !dbg !31
  %758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %757, i32 1, i32 31), !dbg !31
  %759 = bitcast i32 %758 to float, !dbg !31
  %760 = bitcast float %743 to i32, !dbg !31
  %761 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %760, i32 1, i32 31), !dbg !31
  %762 = bitcast i32 %761 to float, !dbg !31
  %763 = fsub float %756, %748, !dbg !35
  %764 = fadd float %743, %762, !dbg !37
  %765 = fcmp oeq float %764, 0.000000e+00, !dbg !38
  %766 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %762, float %764) #5, !dbg !39
  %767 = select i1 %765, float 0.000000e+00, float %766, !dbg !40
  %768 = fmul float %763, %767, !dbg !41
  %769 = fadd float %748, %768, !dbg !42
  %770 = fadd float %753, %759, !dbg !43
  %771 = fmul float %763, %763, !dbg !44
  %772 = fmul float %743, %771, !dbg !45
  %773 = fmul float %767, %772, !dbg !46
  %774 = fadd float %770, %773, !dbg !47
  %775 = bitcast float %133 to i32, !dbg !31
  %776 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %775, i32 16, i32 31), !dbg !31
  %777 = bitcast i32 %776 to float, !dbg !31
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %779 = bitcast i32 %778 to float, !dbg !31
  %780 = bitcast float %141 to i32, !dbg !31
  %781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %780, i32 16, i32 31), !dbg !31
  %782 = bitcast i32 %781 to float, !dbg !31
  %783 = fsub float %777, %133, !dbg !35
  %784 = fadd float %141, %782, !dbg !37
  %785 = fcmp oeq float %784, 0.000000e+00, !dbg !38
  %786 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %782, float %784) #5, !dbg !39
  %787 = select i1 %785, float 0.000000e+00, float %786, !dbg !40
  %788 = fmul float %783, %787, !dbg !41
  %789 = fadd float %133, %788, !dbg !42
  %790 = fadd float %779, 0.000000e+00, !dbg !43
  %791 = fmul float %783, %783, !dbg !44
  %792 = fmul float %141, %791, !dbg !45
  %793 = fmul float %792, %787, !dbg !46
  %794 = fadd float %790, %793, !dbg !47
  %795 = bitcast float %789 to i32, !dbg !31
  %796 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %795, i32 8, i32 31), !dbg !31
  %797 = bitcast i32 %796 to float, !dbg !31
  %798 = bitcast float %794 to i32, !dbg !31
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 8, i32 31), !dbg !31
  %800 = bitcast i32 %799 to float, !dbg !31
  %801 = bitcast float %784 to i32, !dbg !31
  %802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %801, i32 8, i32 31), !dbg !31
  %803 = bitcast i32 %802 to float, !dbg !31
  %804 = fsub float %797, %789, !dbg !35
  %805 = fadd float %784, %803, !dbg !37
  %806 = fcmp oeq float %805, 0.000000e+00, !dbg !38
  %807 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %803, float %805) #5, !dbg !39
  %808 = select i1 %806, float 0.000000e+00, float %807, !dbg !40
  %809 = fmul float %804, %808, !dbg !41
  %810 = fadd float %789, %809, !dbg !42
  %811 = fadd float %794, %800, !dbg !43
  %812 = fmul float %804, %804, !dbg !44
  %813 = fmul float %784, %812, !dbg !45
  %814 = fmul float %808, %813, !dbg !46
  %815 = fadd float %811, %814, !dbg !47
  %816 = bitcast float %810 to i32, !dbg !31
  %817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %816, i32 4, i32 31), !dbg !31
  %818 = bitcast i32 %817 to float, !dbg !31
  %819 = bitcast float %815 to i32, !dbg !31
  %820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %819, i32 4, i32 31), !dbg !31
  %821 = bitcast i32 %820 to float, !dbg !31
  %822 = bitcast float %805 to i32, !dbg !31
  %823 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %822, i32 4, i32 31), !dbg !31
  %824 = bitcast i32 %823 to float, !dbg !31
  %825 = fsub float %818, %810, !dbg !35
  %826 = fadd float %805, %824, !dbg !37
  %827 = fcmp oeq float %826, 0.000000e+00, !dbg !38
  %828 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %824, float %826) #5, !dbg !39
  %829 = select i1 %827, float 0.000000e+00, float %828, !dbg !40
  %830 = fmul float %825, %829, !dbg !41
  %831 = fadd float %810, %830, !dbg !42
  %832 = fadd float %815, %821, !dbg !43
  %833 = fmul float %825, %825, !dbg !44
  %834 = fmul float %805, %833, !dbg !45
  %835 = fmul float %829, %834, !dbg !46
  %836 = fadd float %832, %835, !dbg !47
  %837 = bitcast float %831 to i32, !dbg !31
  %838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %837, i32 2, i32 31), !dbg !31
  %839 = bitcast i32 %838 to float, !dbg !31
  %840 = bitcast float %836 to i32, !dbg !31
  %841 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %840, i32 2, i32 31), !dbg !31
  %842 = bitcast i32 %841 to float, !dbg !31
  %843 = bitcast float %826 to i32, !dbg !31
  %844 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %843, i32 2, i32 31), !dbg !31
  %845 = bitcast i32 %844 to float, !dbg !31
  %846 = fsub float %839, %831, !dbg !35
  %847 = fadd float %826, %845, !dbg !37
  %848 = fcmp oeq float %847, 0.000000e+00, !dbg !38
  %849 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %845, float %847) #5, !dbg !39
  %850 = select i1 %848, float 0.000000e+00, float %849, !dbg !40
  %851 = fmul float %846, %850, !dbg !41
  %852 = fadd float %831, %851, !dbg !42
  %853 = fadd float %836, %842, !dbg !43
  %854 = fmul float %846, %846, !dbg !44
  %855 = fmul float %826, %854, !dbg !45
  %856 = fmul float %850, %855, !dbg !46
  %857 = fadd float %853, %856, !dbg !47
  %858 = bitcast float %852 to i32, !dbg !31
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 1, i32 31), !dbg !31
  %860 = bitcast i32 %859 to float, !dbg !31
  %861 = bitcast float %857 to i32, !dbg !31
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %861, i32 1, i32 31), !dbg !31
  %863 = bitcast i32 %862 to float, !dbg !31
  %864 = bitcast float %847 to i32, !dbg !31
  %865 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %864, i32 1, i32 31), !dbg !31
  %866 = bitcast i32 %865 to float, !dbg !31
  %867 = fsub float %860, %852, !dbg !35
  %868 = fadd float %847, %866, !dbg !37
  %869 = fcmp oeq float %868, 0.000000e+00, !dbg !38
  %870 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %866, float %868) #5, !dbg !39
  %871 = select i1 %869, float 0.000000e+00, float %870, !dbg !40
  %872 = fmul float %867, %871, !dbg !41
  %873 = fadd float %852, %872, !dbg !42
  %874 = fadd float %857, %863, !dbg !43
  %875 = fmul float %867, %867, !dbg !44
  %876 = fmul float %847, %875, !dbg !45
  %877 = fmul float %871, %876, !dbg !46
  %878 = fadd float %874, %877, !dbg !47
  %879 = bitcast float %134 to i32, !dbg !31
  %880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %879, i32 16, i32 31), !dbg !31
  %881 = bitcast i32 %880 to float, !dbg !31
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %883 = bitcast i32 %882 to float, !dbg !31
  %884 = bitcast float %142 to i32, !dbg !31
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 16, i32 31), !dbg !31
  %886 = bitcast i32 %885 to float, !dbg !31
  %887 = fsub float %881, %134, !dbg !35
  %888 = fadd float %142, %886, !dbg !37
  %889 = fcmp oeq float %888, 0.000000e+00, !dbg !38
  %890 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %886, float %888) #5, !dbg !39
  %891 = select i1 %889, float 0.000000e+00, float %890, !dbg !40
  %892 = fmul float %887, %891, !dbg !41
  %893 = fadd float %134, %892, !dbg !42
  %894 = fadd float %883, 0.000000e+00, !dbg !43
  %895 = fmul float %887, %887, !dbg !44
  %896 = fmul float %142, %895, !dbg !45
  %897 = fmul float %896, %891, !dbg !46
  %898 = fadd float %894, %897, !dbg !47
  %899 = bitcast float %893 to i32, !dbg !31
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 8, i32 31), !dbg !31
  %901 = bitcast i32 %900 to float, !dbg !31
  %902 = bitcast float %898 to i32, !dbg !31
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 8, i32 31), !dbg !31
  %904 = bitcast i32 %903 to float, !dbg !31
  %905 = bitcast float %888 to i32, !dbg !31
  %906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %905, i32 8, i32 31), !dbg !31
  %907 = bitcast i32 %906 to float, !dbg !31
  %908 = fsub float %901, %893, !dbg !35
  %909 = fadd float %888, %907, !dbg !37
  %910 = fcmp oeq float %909, 0.000000e+00, !dbg !38
  %911 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %907, float %909) #5, !dbg !39
  %912 = select i1 %910, float 0.000000e+00, float %911, !dbg !40
  %913 = fmul float %908, %912, !dbg !41
  %914 = fadd float %893, %913, !dbg !42
  %915 = fadd float %898, %904, !dbg !43
  %916 = fmul float %908, %908, !dbg !44
  %917 = fmul float %888, %916, !dbg !45
  %918 = fmul float %912, %917, !dbg !46
  %919 = fadd float %915, %918, !dbg !47
  %920 = bitcast float %914 to i32, !dbg !31
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 4, i32 31), !dbg !31
  %922 = bitcast i32 %921 to float, !dbg !31
  %923 = bitcast float %919 to i32, !dbg !31
  %924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %923, i32 4, i32 31), !dbg !31
  %925 = bitcast i32 %924 to float, !dbg !31
  %926 = bitcast float %909 to i32, !dbg !31
  %927 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %926, i32 4, i32 31), !dbg !31
  %928 = bitcast i32 %927 to float, !dbg !31
  %929 = fsub float %922, %914, !dbg !35
  %930 = fadd float %909, %928, !dbg !37
  %931 = fcmp oeq float %930, 0.000000e+00, !dbg !38
  %932 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %928, float %930) #5, !dbg !39
  %933 = select i1 %931, float 0.000000e+00, float %932, !dbg !40
  %934 = fmul float %929, %933, !dbg !41
  %935 = fadd float %914, %934, !dbg !42
  %936 = fadd float %919, %925, !dbg !43
  %937 = fmul float %929, %929, !dbg !44
  %938 = fmul float %909, %937, !dbg !45
  %939 = fmul float %933, %938, !dbg !46
  %940 = fadd float %936, %939, !dbg !47
  %941 = bitcast float %935 to i32, !dbg !31
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 2, i32 31), !dbg !31
  %943 = bitcast i32 %942 to float, !dbg !31
  %944 = bitcast float %940 to i32, !dbg !31
  %945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %944, i32 2, i32 31), !dbg !31
  %946 = bitcast i32 %945 to float, !dbg !31
  %947 = bitcast float %930 to i32, !dbg !31
  %948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %947, i32 2, i32 31), !dbg !31
  %949 = bitcast i32 %948 to float, !dbg !31
  %950 = fsub float %943, %935, !dbg !35
  %951 = fadd float %930, %949, !dbg !37
  %952 = fcmp oeq float %951, 0.000000e+00, !dbg !38
  %953 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %949, float %951) #5, !dbg !39
  %954 = select i1 %952, float 0.000000e+00, float %953, !dbg !40
  %955 = fmul float %950, %954, !dbg !41
  %956 = fadd float %935, %955, !dbg !42
  %957 = fadd float %940, %946, !dbg !43
  %958 = fmul float %950, %950, !dbg !44
  %959 = fmul float %930, %958, !dbg !45
  %960 = fmul float %954, %959, !dbg !46
  %961 = fadd float %957, %960, !dbg !47
  %962 = bitcast float %956 to i32, !dbg !31
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 1, i32 31), !dbg !31
  %964 = bitcast i32 %963 to float, !dbg !31
  %965 = bitcast float %961 to i32, !dbg !31
  %966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %965, i32 1, i32 31), !dbg !31
  %967 = bitcast i32 %966 to float, !dbg !31
  %968 = bitcast float %951 to i32, !dbg !31
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %968, i32 1, i32 31), !dbg !31
  %970 = bitcast i32 %969 to float, !dbg !31
  %971 = fsub float %964, %956, !dbg !35
  %972 = fadd float %951, %970, !dbg !37
  %973 = fcmp oeq float %972, 0.000000e+00, !dbg !38
  %974 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %970, float %972) #5, !dbg !39
  %975 = select i1 %973, float 0.000000e+00, float %974, !dbg !40
  %976 = fmul float %971, %975, !dbg !41
  %977 = fadd float %956, %976, !dbg !42
  %978 = fadd float %961, %967, !dbg !43
  %979 = fmul float %971, %971, !dbg !44
  %980 = fmul float %951, %979, !dbg !45
  %981 = fmul float %975, %980, !dbg !46
  %982 = fadd float %978, %981, !dbg !47
  %983 = icmp eq i32 %15, 0, !dbg !31
  %984 = and i32 %13, 15, !dbg !31
  %985 = getelementptr float, ptr addrspace(3) @global_smem, i32 %984, !dbg !31
  %986 = bitcast float %249 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %985, <1 x i32> %986, i1 %983) #5, !dbg !31
  %987 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %984, !dbg !31
  %988 = bitcast float %254 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %987, <1 x i32> %988, i1 %983) #5, !dbg !31
  %989 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %984, !dbg !31
  %990 = bitcast float %244 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %989, <1 x i32> %990, i1 %983) #5, !dbg !31
  %991 = or disjoint i32 %984, 16, !dbg !31
  %992 = getelementptr float, ptr addrspace(3) @global_smem, i32 %991, !dbg !31
  %993 = bitcast float %353 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %992, <1 x i32> %993, i1 %983) #5, !dbg !31
  %994 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %991, !dbg !31
  %995 = bitcast float %358 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %994, <1 x i32> %995, i1 %983) #5, !dbg !31
  %996 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %991, !dbg !31
  %997 = bitcast float %348 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %996, <1 x i32> %997, i1 %983) #5, !dbg !31
  %998 = or disjoint i32 %984, 32, !dbg !31
  %999 = getelementptr float, ptr addrspace(3) @global_smem, i32 %998, !dbg !31
  %1000 = bitcast float %457 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %999, <1 x i32> %1000, i1 %983) #5, !dbg !31
  %1001 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %998, !dbg !31
  %1002 = bitcast float %462 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1001, <1 x i32> %1002, i1 %983) #5, !dbg !31
  %1003 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %998, !dbg !31
  %1004 = bitcast float %452 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1003, <1 x i32> %1004, i1 %983) #5, !dbg !31
  %1005 = or disjoint i32 %984, 48, !dbg !31
  %1006 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1005, !dbg !31
  %1007 = bitcast float %561 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1006, <1 x i32> %1007, i1 %983) #5, !dbg !31
  %1008 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1005, !dbg !31
  %1009 = bitcast float %566 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1008, <1 x i32> %1009, i1 %983) #5, !dbg !31
  %1010 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1005, !dbg !31
  %1011 = bitcast float %556 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1010, <1 x i32> %1011, i1 %983) #5, !dbg !31
  %1012 = or disjoint i32 %984, 64, !dbg !31
  %1013 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1012, !dbg !31
  %1014 = bitcast float %665 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1013, <1 x i32> %1014, i1 %983) #5, !dbg !31
  %1015 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1012, !dbg !31
  %1016 = bitcast float %670 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1015, <1 x i32> %1016, i1 %983) #5, !dbg !31
  %1017 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1012, !dbg !31
  %1018 = bitcast float %660 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1017, <1 x i32> %1018, i1 %983) #5, !dbg !31
  %1019 = or disjoint i32 %984, 80, !dbg !31
  %1020 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1019, !dbg !31
  %1021 = bitcast float %769 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1020, <1 x i32> %1021, i1 %983) #5, !dbg !31
  %1022 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1019, !dbg !31
  %1023 = bitcast float %774 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1022, <1 x i32> %1023, i1 %983) #5, !dbg !31
  %1024 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1019, !dbg !31
  %1025 = bitcast float %764 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1024, <1 x i32> %1025, i1 %983) #5, !dbg !31
  %1026 = or disjoint i32 %984, 96, !dbg !31
  %1027 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1026, !dbg !31
  %1028 = bitcast float %873 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1027, <1 x i32> %1028, i1 %983) #5, !dbg !31
  %1029 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1026, !dbg !31
  %1030 = bitcast float %878 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1029, <1 x i32> %1030, i1 %983) #5, !dbg !31
  %1031 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1026, !dbg !31
  %1032 = bitcast float %868 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1031, <1 x i32> %1032, i1 %983) #5, !dbg !31
  %1033 = or disjoint i32 %984, 112, !dbg !31
  %1034 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1033, !dbg !31
  %1035 = bitcast float %977 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1034, <1 x i32> %1035, i1 %983) #5, !dbg !31
  %1036 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1033, !dbg !31
  %1037 = bitcast float %982 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1036, <1 x i32> %1037, i1 %983) #5, !dbg !31
  %1038 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1033, !dbg !31
  %1039 = bitcast float %972 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1039, i1 %983) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %1040 = icmp slt i32 %12, 128, !dbg !31
  %1041 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %1042 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1041, i1 %1040) #5, !dbg !31
  %1043 = bitcast i32 %1042 to float, !dbg !31
  %1044 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %12, !dbg !31
  %1045 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1044, i1 %1040) #5, !dbg !31
  %1046 = bitcast i32 %1045 to float, !dbg !31
  %1047 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %12, !dbg !31
  %1048 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1047, i1 %1040) #5, !dbg !31
  %1049 = bitcast i32 %1048 to float, !dbg !31
  %1050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 8, i32 31), !dbg !31
  %1051 = bitcast i32 %1050 to float, !dbg !31
  %1052 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 8, i32 31), !dbg !31
  %1053 = bitcast i32 %1052 to float, !dbg !31
  %1054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1048, i32 8, i32 31), !dbg !31
  %1055 = bitcast i32 %1054 to float, !dbg !31
  %1056 = fsub float %1051, %1043, !dbg !35
  %1057 = fadd float %1049, %1055, !dbg !37
  %1058 = fcmp oeq float %1057, 0.000000e+00, !dbg !38
  %1059 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1055, float %1057) #5, !dbg !39
  %1060 = select i1 %1058, float 0.000000e+00, float %1059, !dbg !40
  %1061 = fmul float %1056, %1060, !dbg !41
  %1062 = fadd float %1061, %1043, !dbg !42
  %1063 = fadd float %1046, %1053, !dbg !43
  %1064 = fmul float %1056, %1056, !dbg !44
  %1065 = fmul float %1064, %1049, !dbg !45
  %1066 = fmul float %1065, %1060, !dbg !46
  %1067 = fadd float %1063, %1066, !dbg !47
  %1068 = bitcast float %1062 to i32, !dbg !31
  %1069 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1068, i32 4, i32 31), !dbg !31
  %1070 = bitcast i32 %1069 to float, !dbg !31
  %1071 = bitcast float %1067 to i32, !dbg !31
  %1072 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1071, i32 4, i32 31), !dbg !31
  %1073 = bitcast i32 %1072 to float, !dbg !31
  %1074 = bitcast float %1057 to i32, !dbg !31
  %1075 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1074, i32 4, i32 31), !dbg !31
  %1076 = bitcast i32 %1075 to float, !dbg !31
  %1077 = fsub float %1070, %1062, !dbg !35
  %1078 = fadd float %1057, %1076, !dbg !37
  %1079 = fcmp oeq float %1078, 0.000000e+00, !dbg !38
  %1080 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1076, float %1078) #5, !dbg !39
  %1081 = select i1 %1079, float 0.000000e+00, float %1080, !dbg !40
  %1082 = fmul float %1077, %1081, !dbg !41
  %1083 = fadd float %1062, %1082, !dbg !42
  %1084 = fadd float %1067, %1073, !dbg !43
  %1085 = fmul float %1077, %1077, !dbg !44
  %1086 = fmul float %1057, %1085, !dbg !45
  %1087 = fmul float %1081, %1086, !dbg !46
  %1088 = fadd float %1084, %1087, !dbg !47
  %1089 = bitcast float %1083 to i32, !dbg !31
  %1090 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1089, i32 2, i32 31), !dbg !31
  %1091 = bitcast i32 %1090 to float, !dbg !31
  %1092 = bitcast float %1088 to i32, !dbg !31
  %1093 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1092, i32 2, i32 31), !dbg !31
  %1094 = bitcast i32 %1093 to float, !dbg !31
  %1095 = bitcast float %1078 to i32, !dbg !31
  %1096 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1095, i32 2, i32 31), !dbg !31
  %1097 = bitcast i32 %1096 to float, !dbg !31
  %1098 = fsub float %1091, %1083, !dbg !35
  %1099 = fadd float %1078, %1097, !dbg !37
  %1100 = fcmp oeq float %1099, 0.000000e+00, !dbg !38
  %1101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1097, float %1099) #5, !dbg !39
  %1102 = select i1 %1100, float 0.000000e+00, float %1101, !dbg !40
  %1103 = fmul float %1098, %1102, !dbg !41
  %1104 = fadd float %1083, %1103, !dbg !42
  %1105 = fadd float %1088, %1094, !dbg !43
  %1106 = fmul float %1098, %1098, !dbg !44
  %1107 = fmul float %1078, %1106, !dbg !45
  %1108 = fmul float %1102, %1107, !dbg !46
  %1109 = fadd float %1105, %1108, !dbg !47
  %1110 = bitcast float %1104 to i32, !dbg !31
  %1111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1110, i32 1, i32 31), !dbg !31
  %1112 = bitcast i32 %1111 to float, !dbg !31
  %1113 = bitcast float %1109 to i32, !dbg !31
  %1114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1113, i32 1, i32 31), !dbg !31
  %1115 = bitcast i32 %1114 to float, !dbg !31
  %1116 = bitcast float %1099 to i32, !dbg !31
  %1117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1116, i32 1, i32 31), !dbg !31
  %1118 = bitcast i32 %1117 to float, !dbg !31
  %1119 = fsub float %1112, %1104, !dbg !35
  %1120 = fadd float %1099, %1118, !dbg !37
  %1121 = fcmp oeq float %1120, 0.000000e+00, !dbg !38
  %1122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1118, float %1120) #5, !dbg !39
  %1123 = select i1 %1121, float 0.000000e+00, float %1122, !dbg !40
  %1124 = fmul float %1119, %1123, !dbg !41
  %1125 = fadd float %1104, %1124, !dbg !42
  %1126 = fadd float %1109, %1115, !dbg !43
  %1127 = fmul float %1119, %1119, !dbg !44
  %1128 = fmul float %1099, %1127, !dbg !45
  %1129 = fmul float %1123, %1128, !dbg !46
  %1130 = fadd float %1126, %1129, !dbg !47
  %1131 = and i32 %12, 15, !dbg !31
  %1132 = icmp eq i32 %1131, 0, !dbg !31
  %1133 = and i1 %1040, %1132, !dbg !31
  %1134 = bitcast float %1125 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1041, <1 x i32> %1134, i1 %1133) #5, !dbg !31
  %1135 = bitcast float %1130 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1044, <1 x i32> %1135, i1 %1133) #5, !dbg !31
  %1136 = bitcast float %1120 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1047, <1 x i32> %1136, i1 %1133) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %1137 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %1138 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !31
  %1139 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !31
  %1140 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !31
  %1141 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !31
  %1142 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !31
  %1143 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !31
  %1144 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !31
  %1145 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), align 16, !dbg !31
  %1146 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 576), align 16, !dbg !31
  %1147 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 640), align 16, !dbg !31
  %1148 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 704), align 16, !dbg !31
  %1149 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 768), align 16, !dbg !31
  %1150 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 832), align 16, !dbg !31
  %1151 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 896), align 16, !dbg !31
  %1152 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 960), align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1153 = insertelement <1 x i32> poison, i32 %1137, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1153, i1 true) #5, !dbg !48
  %1154 = insertelement <1 x i32> poison, i32 %1138, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %1154, i1 true) #5, !dbg !48
  %1155 = insertelement <1 x i32> poison, i32 %1139, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1155, i1 true) #5, !dbg !48
  %1156 = insertelement <1 x i32> poison, i32 %1140, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 12), <1 x i32> %1156, i1 true) #5, !dbg !48
  %1157 = insertelement <1 x i32> poison, i32 %1141, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1157, i1 true) #5, !dbg !48
  %1158 = insertelement <1 x i32> poison, i32 %1142, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 20), <1 x i32> %1158, i1 true) #5, !dbg !48
  %1159 = insertelement <1 x i32> poison, i32 %1143, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1159, i1 true) #5, !dbg !48
  %1160 = insertelement <1 x i32> poison, i32 %1144, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 28), <1 x i32> %1160, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !48
  %1162 = load i32, ptr addrspace(3) %1161, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %1163 = bitcast float %1145 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1163, i1 true) #5, !dbg !49
  %1164 = bitcast float %1146 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %1164, i1 true) #5, !dbg !49
  %1165 = bitcast float %1147 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1165, i1 true) #5, !dbg !49
  %1166 = bitcast float %1148 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 12), <1 x i32> %1166, i1 true) #5, !dbg !49
  %1167 = bitcast float %1149 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1167, i1 true) #5, !dbg !49
  %1168 = bitcast float %1150 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 20), <1 x i32> %1168, i1 true) #5, !dbg !49
  %1169 = bitcast float %1151 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1169, i1 true) #5, !dbg !49
  %1170 = bitcast float %1152 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 28), <1 x i32> %1170, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %1171 = load float, ptr addrspace(3) %1161, align 4, !dbg !49
  %1172 = extractelement <2 x i32> %34, i64 1, !dbg !50
  %1173 = shl nsw i32 %1172, 2, !dbg !50
  %1174 = extractelement <2 x i32> %34, i64 0, !dbg !51
  %1175 = add nsw i32 %1174, %1173, !dbg !51
  %1176 = shl nsw i32 %35, 4, !dbg !52
  %1177 = add i32 %1175, %1176, !dbg !53
  %1178 = sext i32 %1177 to i64, !dbg !54
  %1179 = getelementptr float, ptr addrspace(1) %4, i64 %1178, !dbg !54
  %1180 = lshr i32 %15, 3, !dbg !55
  %1181 = shl nuw nsw i32 %984, 2, !dbg !55
  %1182 = or disjoint i32 %1181, %1180, !dbg !55
  %1183 = icmp eq i32 %1182, 0, !dbg !55
  %1184 = extractelement <8 x i1> %27, i64 0, !dbg !55
  %1185 = and i1 %1183, %1184, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1162, ptr addrspace(1) %1179, i1 %1185) #5, !dbg !55
  %1186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1171, float 3.840000e+02) #5, !dbg !56
  %1187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1145, float 3.840000e+02) #5, !dbg !56
  %1188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1146, float 3.840000e+02) #5, !dbg !56
  %1189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1147, float 3.840000e+02) #5, !dbg !56
  %1190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1148, float 3.840000e+02) #5, !dbg !56
  %1191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1149, float 3.840000e+02) #5, !dbg !56
  %1192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1150, float 3.840000e+02) #5, !dbg !56
  %1193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1151, float 3.840000e+02) #5, !dbg !56
  %1194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1152, float 3.840000e+02) #5, !dbg !56
  %1195 = fadd float %1186, 0x3EB0C6F7A0000000, !dbg !57
  %1196 = fadd float %1187, 0x3EB0C6F7A0000000, !dbg !57
  %1197 = fadd float %1188, 0x3EB0C6F7A0000000, !dbg !57
  %1198 = fadd float %1189, 0x3EB0C6F7A0000000, !dbg !57
  %1199 = fadd float %1190, 0x3EB0C6F7A0000000, !dbg !57
  %1200 = fadd float %1191, 0x3EB0C6F7A0000000, !dbg !57
  %1201 = fadd float %1192, 0x3EB0C6F7A0000000, !dbg !57
  %1202 = fadd float %1193, 0x3EB0C6F7A0000000, !dbg !57
  %1203 = fadd float %1194, 0x3EB0C6F7A0000000, !dbg !57
  %1204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %1204, 0, !dbg !49
  br i1 %.not.i, label %1207, label %1205, !dbg !49

1205:                                             ; preds = %9
  %1206 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1195), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

1207:                                             ; preds = %9
  %1208 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1195), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %1205, %1207
  %.0.i = phi float [ %1206, %1205 ], [ %1208, %1207 ], !dbg !49
  %1209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i21 = icmp eq i32 %1209, 0, !dbg !49
  br i1 %.not.i21, label %1212, label %1210, !dbg !49

1210:                                             ; preds = %__nv_rsqrtf.exit
  %1211 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1196), !dbg !49
  br label %__nv_rsqrtf.exit23, !dbg !49

1212:                                             ; preds = %__nv_rsqrtf.exit
  %1213 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1196), !dbg !49
  br label %__nv_rsqrtf.exit23, !dbg !49

__nv_rsqrtf.exit23:                               ; preds = %1210, %1212
  %.0.i22 = phi float [ %1211, %1210 ], [ %1213, %1212 ], !dbg !49
  %1214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i24 = icmp eq i32 %1214, 0, !dbg !49
  br i1 %.not.i24, label %1217, label %1215, !dbg !49

1215:                                             ; preds = %__nv_rsqrtf.exit23
  %1216 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1197), !dbg !49
  br label %__nv_rsqrtf.exit26, !dbg !49

1217:                                             ; preds = %__nv_rsqrtf.exit23
  %1218 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1197), !dbg !49
  br label %__nv_rsqrtf.exit26, !dbg !49

__nv_rsqrtf.exit26:                               ; preds = %1215, %1217
  %.0.i25 = phi float [ %1216, %1215 ], [ %1218, %1217 ], !dbg !49
  %1219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i27 = icmp eq i32 %1219, 0, !dbg !49
  br i1 %.not.i27, label %1222, label %1220, !dbg !49

1220:                                             ; preds = %__nv_rsqrtf.exit26
  %1221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1198), !dbg !49
  br label %__nv_rsqrtf.exit29, !dbg !49

1222:                                             ; preds = %__nv_rsqrtf.exit26
  %1223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1198), !dbg !49
  br label %__nv_rsqrtf.exit29, !dbg !49

__nv_rsqrtf.exit29:                               ; preds = %1220, %1222
  %.0.i28 = phi float [ %1221, %1220 ], [ %1223, %1222 ], !dbg !49
  %1224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i30 = icmp eq i32 %1224, 0, !dbg !49
  br i1 %.not.i30, label %1227, label %1225, !dbg !49

1225:                                             ; preds = %__nv_rsqrtf.exit29
  %1226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1199), !dbg !49
  br label %__nv_rsqrtf.exit32, !dbg !49

1227:                                             ; preds = %__nv_rsqrtf.exit29
  %1228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1199), !dbg !49
  br label %__nv_rsqrtf.exit32, !dbg !49

__nv_rsqrtf.exit32:                               ; preds = %1225, %1227
  %.0.i31 = phi float [ %1226, %1225 ], [ %1228, %1227 ], !dbg !49
  %1229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i33 = icmp eq i32 %1229, 0, !dbg !49
  br i1 %.not.i33, label %1232, label %1230, !dbg !49

1230:                                             ; preds = %__nv_rsqrtf.exit32
  %1231 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1200), !dbg !49
  br label %__nv_rsqrtf.exit35, !dbg !49

1232:                                             ; preds = %__nv_rsqrtf.exit32
  %1233 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1200), !dbg !49
  br label %__nv_rsqrtf.exit35, !dbg !49

__nv_rsqrtf.exit35:                               ; preds = %1230, %1232
  %.0.i34 = phi float [ %1231, %1230 ], [ %1233, %1232 ], !dbg !49
  %1234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i36 = icmp eq i32 %1234, 0, !dbg !49
  br i1 %.not.i36, label %1237, label %1235, !dbg !49

1235:                                             ; preds = %__nv_rsqrtf.exit35
  %1236 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1201), !dbg !49
  br label %__nv_rsqrtf.exit38, !dbg !49

1237:                                             ; preds = %__nv_rsqrtf.exit35
  %1238 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1201), !dbg !49
  br label %__nv_rsqrtf.exit38, !dbg !49

__nv_rsqrtf.exit38:                               ; preds = %1235, %1237
  %.0.i37 = phi float [ %1236, %1235 ], [ %1238, %1237 ], !dbg !49
  %1239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i39 = icmp eq i32 %1239, 0, !dbg !49
  br i1 %.not.i39, label %1242, label %1240, !dbg !49

1240:                                             ; preds = %__nv_rsqrtf.exit38
  %1241 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1202), !dbg !49
  br label %__nv_rsqrtf.exit41, !dbg !49

1242:                                             ; preds = %__nv_rsqrtf.exit38
  %1243 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1202), !dbg !49
  br label %__nv_rsqrtf.exit41, !dbg !49

__nv_rsqrtf.exit41:                               ; preds = %1240, %1242
  %.0.i40 = phi float [ %1241, %1240 ], [ %1243, %1242 ], !dbg !49
  %1244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i42 = icmp eq i32 %1244, 0, !dbg !49
  br i1 %.not.i42, label %1247, label %1245, !dbg !49

1245:                                             ; preds = %__nv_rsqrtf.exit41
  %1246 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1203), !dbg !49
  br label %__nv_rsqrtf.exit44, !dbg !49

1247:                                             ; preds = %__nv_rsqrtf.exit41
  %1248 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1203), !dbg !49
  br label %__nv_rsqrtf.exit44, !dbg !49

__nv_rsqrtf.exit44:                               ; preds = %1245, %1247
  %.0.i43 = phi float [ %1246, %1245 ], [ %1248, %1247 ], !dbg !49
  %1249 = getelementptr float, ptr addrspace(1) %5, i64 %1178, !dbg !58
  %1250 = bitcast float %.0.i to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1250, ptr addrspace(1) %1249, i1 %1185) #5, !dbg !59
  %1251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #5, !dbg !60
  %1252 = extractvalue { i32, i32, i32, i32 } %1251, 0, !dbg !60
  %1253 = extractvalue { i32, i32, i32, i32 } %1251, 1, !dbg !60
  %1254 = extractvalue { i32, i32, i32, i32 } %1251, 2, !dbg !60
  %1255 = extractvalue { i32, i32, i32, i32 } %1251, 3, !dbg !60
  %1256 = bitcast i32 %1252 to float, !dbg !60
  %1257 = bitcast i32 %1253 to float, !dbg !60
  %1258 = bitcast i32 %1254 to float, !dbg !60
  %1259 = bitcast i32 %1255 to float, !dbg !60
  %1260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #5, !dbg !60
  %1261 = extractvalue { i32, i32, i32, i32 } %1260, 0, !dbg !60
  %1262 = extractvalue { i32, i32, i32, i32 } %1260, 1, !dbg !60
  %1263 = extractvalue { i32, i32, i32, i32 } %1260, 2, !dbg !60
  %1264 = extractvalue { i32, i32, i32, i32 } %1260, 3, !dbg !60
  %1265 = bitcast i32 %1261 to float, !dbg !60
  %1266 = bitcast i32 %1262 to float, !dbg !60
  %1267 = bitcast i32 %1263 to float, !dbg !60
  %1268 = bitcast i32 %1264 to float, !dbg !60
  %1269 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !61
  %1270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1269, i1 %37, i32 0, i1 %37) #5, !dbg !62
  %1271 = bitcast i32 %1270 to float, !dbg !62
  %1272 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !63
  %1273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1272, i1 %37, i32 0, i1 %37) #5, !dbg !64
  %1274 = bitcast i32 %1273 to float, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1153, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1154, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1155, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1156, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %.idx = shl nuw nsw i32 %14, 3, !dbg !65
  %1275 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !65
  %1276 = load float, ptr addrspace(3) %1275, align 8, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1157, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1158, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1159, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1160, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %1277 = load float, ptr addrspace(3) %1275, align 8, !dbg !65
  %1278 = fsub float %1256, %1276, !dbg !65
  %1279 = fsub float %1257, %1276, !dbg !65
  %1280 = fsub float %1258, %1276, !dbg !65
  %1281 = fsub float %1259, %1276, !dbg !65
  %1282 = fsub float %1265, %1277, !dbg !65
  %1283 = fsub float %1266, %1277, !dbg !65
  %1284 = fsub float %1267, %1277, !dbg !65
  %1285 = fsub float %1268, %1277, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1286 = bitcast float %.0.i22 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1286, i1 true) #5, !dbg !66
  %1287 = bitcast float %.0.i25 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1287, i1 true) #5, !dbg !66
  %1288 = bitcast float %.0.i28 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1288, i1 true) #5, !dbg !66
  %1289 = bitcast float %.0.i31 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1289, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1290 = load float, ptr addrspace(3) %1275, align 8, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1291 = bitcast float %.0.i34 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1291, i1 true) #5, !dbg !66
  %1292 = bitcast float %.0.i37 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1292, i1 true) #5, !dbg !66
  %1293 = bitcast float %.0.i40 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1293, i1 true) #5, !dbg !66
  %1294 = bitcast float %.0.i43 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1294, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1295 = load float, ptr addrspace(3) %1275, align 8, !dbg !66
  %1296 = fmul float %1278, %1290, !dbg !66
  %1297 = fmul float %1279, %1290, !dbg !66
  %1298 = fmul float %1280, %1290, !dbg !66
  %1299 = fmul float %1281, %1290, !dbg !66
  %1300 = fmul float %1282, %1295, !dbg !66
  %1301 = fmul float %1283, %1295, !dbg !66
  %1302 = fmul float %1284, %1295, !dbg !66
  %1303 = fmul float %1285, %1295, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1304 = bitcast float %1296 to i32, !dbg !66
  %1305 = bitcast float %1297 to i32, !dbg !66
  %1306 = bitcast float %1298 to i32, !dbg !66
  %1307 = bitcast float %1299 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %85, i32 %1304, i32 %1305, i32 %1306, i32 %1307, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1308 = load float, ptr addrspace(3) %86, align 4, !dbg !66
  %1309 = load float, ptr addrspace(3) %88, align 4, !dbg !66
  %1310 = load float, ptr addrspace(3) %90, align 4, !dbg !66
  %1311 = load float, ptr addrspace(3) %92, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1312 = bitcast float %1300 to i32, !dbg !66
  %1313 = bitcast float %1301 to i32, !dbg !66
  %1314 = bitcast float %1302 to i32, !dbg !66
  %1315 = bitcast float %1303 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %85, i32 %1312, i32 %1313, i32 %1314, i32 %1315, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %1316 = load float, ptr addrspace(3) %86, align 4, !dbg !66
  %1317 = load float, ptr addrspace(3) %88, align 4, !dbg !66
  %1318 = load float, ptr addrspace(3) %90, align 4, !dbg !66
  %1319 = load float, ptr addrspace(3) %92, align 4, !dbg !66
  %1320 = fmul float %1308, %1271, !dbg !67
  %1321 = fmul float %1309, %1271, !dbg !67
  %1322 = fmul float %1310, %1271, !dbg !67
  %1323 = fmul float %1311, %1271, !dbg !67
  %1324 = fmul float %1316, %1271, !dbg !67
  %1325 = fmul float %1317, %1271, !dbg !67
  %1326 = fmul float %1318, %1271, !dbg !67
  %1327 = fmul float %1319, %1271, !dbg !67
  %1328 = fadd float %1320, %1274, !dbg !68
  %1329 = fadd float %1321, %1274, !dbg !68
  %1330 = fadd float %1322, %1274, !dbg !68
  %1331 = fadd float %1323, %1274, !dbg !68
  %1332 = fadd float %1324, %1274, !dbg !68
  %1333 = fadd float %1325, %1274, !dbg !68
  %1334 = fadd float %1326, %1274, !dbg !68
  %1335 = fadd float %1327, %1274, !dbg !68
  %1336 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !69
  %1337 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %1338 = bitcast float %1328 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %1338, i1 true) #5, !dbg !70
  %1339 = bitcast float %1329 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %1339, i1 true) #5, !dbg !70
  %1340 = bitcast float %1330 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %1340, i1 true) #5, !dbg !70
  %1341 = bitcast float %1331 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %1341, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %1342 = load <4 x i32>, ptr addrspace(3) %85, align 16, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %1343 = bitcast float %1332 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %1343, i1 true) #5, !dbg !70
  %1344 = bitcast float %1333 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %1344, i1 true) #5, !dbg !70
  %1345 = bitcast float %1334 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %1345, i1 true) #5, !dbg !70
  %1346 = bitcast float %1335 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %1346, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %1347 = load <4 x i32>, ptr addrspace(3) %85, align 16, !dbg !70
  %.extract = extractelement <4 x i32> %1342, i64 0, !dbg !70
  %.extract14 = extractelement <4 x i32> %1342, i64 1, !dbg !70
  %.extract15 = extractelement <4 x i32> %1342, i64 2, !dbg !70
  %.extract16 = extractelement <4 x i32> %1342, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %1336, i1 %46) #5, !dbg !70
  %.extract17 = extractelement <4 x i32> %1347, i64 0, !dbg !70
  %.extract18 = extractelement <4 x i32> %1347, i64 1, !dbg !70
  %.extract19 = extractelement <4 x i32> %1347, i64 2, !dbg !70
  %.extract20 = extractelement <4 x i32> %1347, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract17, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %1337, i1 %47) #5, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py", directory: "inductor_cache/fk")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_22, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_22, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_22", linkageName: "triton_red_fused_convolution_native_layer_norm_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 25, scope: !7)
!20 = !DILocation(line: 37, column: 47, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 60, scope: !7)
!24 = !DILocation(line: 37, column: 52, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 44, column: 60, scope: !7)
!29 = !DILocation(line: 46, column: 64, scope: !7)
!30 = !DILocation(line: 47, column: 52, scope: !7)
!31 = !DILocation(line: 204, column: 46, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 49, column: 41, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 54, column: 32, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 40, scope: !7)
!53 = !DILocation(line: 54, column: 37, scope: !7)
!54 = !DILocation(line: 54, column: 25, scope: !7)
!55 = !DILocation(line: 54, column: 51, scope: !7)
!56 = !DILocation(line: 56, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 19, scope: !7)
!58 = !DILocation(line: 60, column: 25, scope: !7)
!59 = !DILocation(line: 60, column: 52, scope: !7)
!60 = !DILocation(line: 65, column: 53, scope: !7)
!61 = !DILocation(line: 66, column: 35, scope: !7)
!62 = !DILocation(line: 66, column: 40, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 68, column: 24, scope: !7)
!66 = !DILocation(line: 69, column: 24, scope: !7)
!67 = !DILocation(line: 70, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 29, scope: !7)
!70 = !DILocation(line: 72, column: 50, scope: !7)
!71 = !DILocation(line: 61, column: 4, scope: !7)
