; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp25 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp20 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp10 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_add_index_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %11 = icmp slt i32 %10, 4, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = and i32 %12, 31, !dbg !14
  %14 = lshr i32 %12, 5, !dbg !14
  %15 = sext i32 %10 to i64, !dbg !15
  %16 = getelementptr i64, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #4, !dbg !16
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #4, !dbg !16
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #4, !dbg !16
  %20 = getelementptr i64, ptr addrspace(1) %3, i64 %15, !dbg !17
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %11) #4, !dbg !18
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %11) #4, !dbg !18
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %11) #4, !dbg !18
  %24 = lshr i64 %18, 61, !dbg !19
  %25 = and i64 %24, 4, !dbg !19
  %26 = insertelement <2 x i64> poison, i64 %19, i64 0, !dbg !19
  %27 = insertelement <2 x i64> %26, i64 %17, i64 1, !dbg !19
  %28 = lshr <2 x i64> %27, splat (i64 61), !dbg !19
  %29 = and <2 x i64> %28, splat (i64 4), !dbg !19
  %30 = add <2 x i64> %29, %27, !dbg !19
  %31 = icmp ult <2 x i64> %30, splat (i64 4), !dbg !20
  %32 = icmp sgt i32 %10, 3, !dbg !21
  %33 = extractelement <2 x i1> %31, i64 1, !dbg !22
  %34 = or i1 %32, %33, !dbg !22
  %35 = extractelement <2 x i1> %31, i64 0, !dbg !22
  %36 = or i1 %32, %35, !dbg !22
  br i1 %34, label %38, label %37, !dbg !23

37:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 37, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  unreachable, !dbg !23

38:                                               ; preds = %9
  %39 = and i32 %12, 63, !dbg !14
  %40 = icmp samesign ult i32 %39, 40, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %41 = zext nneg i32 %39 to i64, !dbg !25
  %42 = extractelement <2 x i64> %30, i64 1, !dbg !26
  %.idx = mul i64 %42, 160, !dbg !26
  %43 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %43, i64 %41, !dbg !26
  %45 = and i1 %40, %11, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45) #4, !dbg !28
  %47 = insertelement <2 x i64> poison, i64 %23, i64 0, !dbg !29
  %48 = insertelement <2 x i64> %47, i64 %21, i64 1, !dbg !29
  %49 = lshr <2 x i64> %48, splat (i64 61), !dbg !29
  %50 = and <2 x i64> %49, splat (i64 4), !dbg !29
  %51 = add <2 x i64> %50, %48, !dbg !29
  %52 = icmp ult <2 x i64> %51, splat (i64 4), !dbg !30
  %53 = extractelement <2 x i1> %52, i64 1, !dbg !31
  %54 = or i1 %32, %53, !dbg !31
  %55 = extractelement <2 x i1> %52, i64 0, !dbg !31
  %56 = or i1 %32, %55, !dbg !31
  br i1 %54, label %58, label %57, !dbg !32

57:                                               ; preds = %38
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 42, ptr nonnull @assertFunc_1, i64 1), !dbg !32
  unreachable, !dbg !32

58:                                               ; preds = %38
  %59 = bitcast i32 %46 to float, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %60 = extractelement <2 x i64> %51, i64 1, !dbg !33
  %.idx1 = mul i64 %60, 160, !dbg !33
  %61 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %41, !dbg !33
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %45, i32 0, i1 %45) #4, !dbg !34
  %64 = bitcast i32 %63 to float, !dbg !34
  %65 = fmul float %59, %64, !dbg !35
  %66 = select i1 %45, float %65, float 0.000000e+00, !dbg !36
  %67 = bitcast float %66 to i32, !dbg !37
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = fadd float %66, %69, !dbg !41
  %71 = bitcast float %70 to i32, !dbg !37
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !37
  %73 = bitcast i32 %72 to float, !dbg !37
  %74 = fadd float %70, %73, !dbg !41
  %75 = bitcast float %74 to i32, !dbg !37
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !37
  %77 = bitcast i32 %76 to float, !dbg !37
  %78 = fadd float %74, %77, !dbg !41
  %79 = bitcast float %78 to i32, !dbg !37
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !37
  %81 = bitcast i32 %80 to float, !dbg !37
  %82 = fadd float %78, %81, !dbg !41
  %83 = bitcast float %82 to i32, !dbg !37
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !37
  %85 = bitcast i32 %84 to float, !dbg !37
  %86 = fadd float %82, %85, !dbg !41
  %87 = icmp eq i32 %13, 0, !dbg !37
  %88 = and i32 %14, 1, !dbg !37
  %89 = zext nneg i32 %88 to i64, !dbg !37
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i64 %89, !dbg !37
  %91 = bitcast float %86 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 %87) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %92 = icmp slt i32 %12, 2, !dbg !37
  %93 = sext i32 %12 to i64, !dbg !37
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i64 %93, !dbg !37
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %92) #4, !dbg !37
  %96 = bitcast i32 %95 to float, !dbg !37
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = fadd float %96, %98, !dbg !41
  %100 = and i32 %12, 1, !dbg !37
  %101 = icmp eq i32 %100, 0, !dbg !37
  %102 = and i1 %92, %101, !dbg !37
  %103 = bitcast float %99 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %103, i1 %102) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  br i1 %36, label %105, label %104, !dbg !43

104:                                              ; preds = %58
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 51, ptr nonnull @assertFunc_2, i64 1), !dbg !43
  unreachable, !dbg !43

105:                                              ; preds = %58
  %106 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !44
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %25, !dbg !44
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %11) #4, !dbg !45
  br i1 %56, label %111, label %110, !dbg !46

110:                                              ; preds = %105
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 56, ptr nonnull @assertFunc_3, i64 1), !dbg !46
  unreachable, !dbg !46

111:                                              ; preds = %105
  %112 = bitcast i32 %109 to float, !dbg !45
  %113 = fadd float %106, %112, !dbg !47
  %114 = lshr i64 %22, 61, !dbg !29
  %115 = and i64 %114, 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %116 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !48
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %115, !dbg !48
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %11) #4, !dbg !49
  %119 = bitcast i32 %118 to float, !dbg !49
  %120 = fadd float %113, %119, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !52
  %122 = icmp eq i32 %39, 0, !dbg !53
  %123 = bitcast float %120 to i32, !dbg !53
  %124 = and i1 %122, %11, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %121, i1 %124) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py", directory: "inductor_cache/n7")
!4 = !{ptr @triton_per_fused_add_index_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_index_mul_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_add_index_mul_sum_0", linkageName: "triton_per_fused_add_index_mul_sum_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 25, column: 21, scope: !11)
!14 = !DILocation(line: 26, column: 34, scope: !11)
!15 = !DILocation(line: 31, column: 30, scope: !11)
!16 = !DILocation(line: 31, column: 35, scope: !11)
!17 = !DILocation(line: 32, column: 30, scope: !11)
!18 = !DILocation(line: 32, column: 35, scope: !11)
!19 = !DILocation(line: 36, column: 32, scope: !11)
!20 = !DILocation(line: 37, column: 37, scope: !11)
!21 = !DILocation(line: 0, scope: !11)
!22 = !DILocation(line: 37, column: 50, scope: !11)
!23 = !DILocation(line: 37, column: 60, scope: !11)
!24 = !DILocation(line: 28, column: 21, scope: !11)
!25 = !DILocation(line: 38, column: 35, scope: !11)
!26 = !DILocation(line: 38, column: 30, scope: !11)
!27 = !DILocation(line: 38, column: 53, scope: !11)
!28 = !DILocation(line: 38, column: 45, scope: !11)
!29 = !DILocation(line: 41, column: 33, scope: !11)
!30 = !DILocation(line: 42, column: 38, scope: !11)
!31 = !DILocation(line: 42, column: 52, scope: !11)
!32 = !DILocation(line: 42, column: 62, scope: !11)
!33 = !DILocation(line: 43, column: 31, scope: !11)
!34 = !DILocation(line: 43, column: 47, scope: !11)
!35 = !DILocation(line: 44, column: 19, scope: !11)
!36 = !DILocation(line: 46, column: 43, scope: !11)
!37 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !11, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = !DILocation(line: 47, column: 26, scope: !11)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!43 = !DILocation(line: 51, column: 62, scope: !11)
!44 = !DILocation(line: 52, column: 31, scope: !11)
!45 = !DILocation(line: 52, column: 39, scope: !11)
!46 = !DILocation(line: 56, column: 62, scope: !11)
!47 = !DILocation(line: 53, column: 20, scope: !11)
!48 = !DILocation(line: 57, column: 31, scope: !11)
!49 = !DILocation(line: 57, column: 39, scope: !11)
!50 = !DILocation(line: 58, column: 20, scope: !11)
!51 = !DILocation(line: 59, column: 4, scope: !11)
!52 = !DILocation(line: 60, column: 28, scope: !11)
!53 = !DILocation(line: 60, column: 40, scope: !11)
!54 = !DILocation(line: 60, column: 4, scope: !11)
