//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_per_fused_add_index_mul_sum_0 // -- Begin function triton_per_fused_add_index_mul_sum_0
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
.noreturn;
.global .align 1 .b8 assertFunc_3[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_3[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 110, 55, 47, 99, 110, 55, 112, 51, 105, 115, 103, 117, 120, 106, 121, 116, 109, 98, 102, 107, 105, 118, 116, 119, 107, 118, 111, 102, 103, 53, 102, 55, 117, 97, 120, 53, 111, 98, 98, 117, 110, 119, 104, 104, 109, 120, 103, 51, 104, 98, 112, 112, 103, 107, 116, 46, 112, 121};
.global .align 1 .b8 assertMessage_3[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 50, 53, 32, 60, 32, 52};
.global .align 1 .b8 assertFunc_2[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_2[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 110, 55, 47, 99, 110, 55, 112, 51, 105, 115, 103, 117, 120, 106, 121, 116, 109, 98, 102, 107, 105, 118, 116, 119, 107, 118, 111, 102, 103, 53, 102, 55, 117, 97, 120, 53, 111, 98, 98, 117, 110, 119, 104, 104, 109, 120, 103, 51, 104, 98, 112, 112, 103, 107, 116, 46, 112, 121};
.global .align 1 .b8 assertMessage_2[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 50, 48, 32, 60, 32, 52};
.global .align 1 .b8 assertFunc_1[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_1[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 110, 55, 47, 99, 110, 55, 112, 51, 105, 115, 103, 117, 120, 106, 121, 116, 109, 98, 102, 107, 105, 118, 116, 119, 107, 118, 111, 102, 103, 53, 102, 55, 117, 97, 120, 53, 111, 98, 98, 117, 110, 119, 104, 104, 109, 120, 103, 51, 104, 98, 112, 112, 103, 107, 116, 46, 112, 121};
.global .align 1 .b8 assertMessage_1[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 49, 48, 32, 60, 32, 52};
.global .align 1 .b8 assertFunc_0[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_0[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 110, 55, 47, 99, 110, 55, 112, 51, 105, 115, 103, 117, 120, 106, 121, 116, 109, 98, 102, 107, 105, 118, 116, 119, 107, 118, 111, 102, 103, 53, 102, 55, 117, 97, 120, 53, 111, 98, 98, 117, 110, 119, 104, 104, 109, 120, 103, 51, 104, 98, 112, 112, 103, 107, 116, 46, 112, 121};
.global .align 1 .b8 assertMessage_0[35] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 52, 32, 60, 32, 52};
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_per_fused_add_index_mul_sum_0
.visible .entry triton_per_fused_add_index_mul_sum_0(
	.param .u64 .ptr .global .align 1 triton_per_fused_add_index_mul_sum_0_param_0,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_index_mul_sum_0_param_1,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_index_mul_sum_0_param_2,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_index_mul_sum_0_param_3,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_index_mul_sum_0_param_4,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_index_mul_sum_0_param_5,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_index_mul_sum_0_param_6,
	.param .u32 triton_per_fused_add_index_mul_sum_0_param_7,
	.param .u32 triton_per_fused_add_index_mul_sum_0_param_8
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<33>;
	.reg .b32 	%r<41>;
	.reg .f32 	%f<23>;
	.reg .b64 	%rd<84>;
	.loc	1 19 0                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:19:0

// %bb.0:
	ld.param.u64 	%rd29, [triton_per_fused_add_index_mul_sum_0_param_1];
$L__tmp0:
	.loc	1 23 28                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:23:28
	// begin inline asm
	mov.u32 %r6, %ctaid.x;
	// end inline asm
	.loc	1 25 21                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:25:21
	setp.lt.s32 	%p4, %r6, 4;
	ld.param.u64 	%rd30, [triton_per_fused_add_index_mul_sum_0_param_3];
	.loc	1 31 30                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:31:30
	mul.wide.s32 	%rd31, %r6, 8;
	add.s64 	%rd18, %rd29, %rd31;
	.loc	1 31 35                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:31:35
	// begin inline asm
	mov.u64 %rd17, 0x0;
	@%p4 ld.global.L1::evict_last.b64 { %rd17 }, [ %rd18 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd19, 0x0;
	@%p4 ld.global.L1::evict_last.b64 { %rd19 }, [ %rd18 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd21, 0x0;
	@%p4 ld.global.L1::evict_last.b64 { %rd21 }, [ %rd18 + 0 ];
	// end inline asm
	.loc	1 32 30                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:32:30
	add.s64 	%rd24, %rd30, %rd31;
	.loc	1 32 35                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:32:35
	// begin inline asm
	mov.u64 %rd23, 0x0;
	@%p4 ld.global.L1::evict_last.b64 { %rd23 }, [ %rd24 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd25, 0x0;
	@%p4 ld.global.L1::evict_last.b64 { %rd25 }, [ %rd24 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd27, 0x0;
	@%p4 ld.global.L1::evict_last.b64 { %rd27 }, [ %rd24 + 0 ];
	// end inline asm
	.loc	1 36 32                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:36:32
	shr.u64 	%rd33, %rd17, 61;
	and.b64  	%rd36, %rd33, 4;
	add.s64 	%rd8, %rd36, %rd17;
	.loc	1 37 37                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:37:37
	setp.lt.u64 	%p11, %rd8, 4;
	.loc	1 0 0                           // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:0:0
	setp.gt.s32 	%p12, %r6, 3;
	.loc	1 37 50                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:37:50
	or.pred  	%p13, %p12, %p11;
	.loc	1 37 60                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:37:60
	@%p13 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 60                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:0:60
	ld.param.u64 	%rd13, [triton_per_fused_add_index_mul_sum_0_param_2];
	mov.u32 	%r1, %tid.x;
	cvt.s64.s32 	%rd1, %r6;
	cvt.u32.u64 	%r9, %rd1;
	setp.gt.s32 	%p16, %r9, 3;
	.loc	1 25 21                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:25:21
	setp.lt.s32 	%p17, %r9, 4;
	.loc	1 26 34                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:26:34
	and.b32  	%r10, %r1, 63;
	.loc	1 28 21                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:28:21
	setp.lt.u32 	%p18, %r10, 40;
	.loc	1 37 60                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:37:60
	bar.sync 	0;
	.loc	1 38 30                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:38:30
	mul.lo.s64 	%rd44, %rd8, 160;
	add.s64 	%rd45, %rd13, %rd44;
	mul.wide.u32 	%rd46, %r10, 4;
	add.s64 	%rd43, %rd45, %rd46;
	.loc	1 38 53                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:38:53
	and.pred  	%p15, %p18, %p17;
	mov.b32 	%r8, 0;
	.loc	1 38 45                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:38:45
	// begin inline asm
	mov.u32 %r7, 0x0;
	@%p15 ld.global.b32 { %r7 }, [ %rd43 + 0 ];
	@!%p15 mov.u32 %r7, %r8;
	// end inline asm
	.loc	1 41 33                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:41:33
	shr.u64 	%rd47, %rd23, 61;
	and.b64  	%rd50, %rd47, 4;
	add.s64 	%rd11, %rd50, %rd23;
	.loc	1 42 38                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:42:38
	setp.lt.u64 	%p20, %rd11, 4;
	.loc	1 42 52                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:42:52
	or.pred  	%p21, %p16, %p20;
	.loc	1 42 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:42:62
	@%p21 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:
	.loc	1 0 62                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:0:62
	ld.param.u64 	%rd14, [triton_per_fused_add_index_mul_sum_0_param_4];
	and.b32  	%r2, %r1, 31;
	shr.u32 	%r3, %r1, 5;
	shr.u64 	%rd34, %rd21, 61;
	and.b64  	%rd35, %rd34, 4;
	add.s64 	%rd7, %rd35, %rd21;
	setp.lt.u64 	%p10, %rd7, 4;
	or.pred  	%p1, %p12, %p10;
	cvt.u64.u32 	%rd9, %r10;
	.loc	1 38 45                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:38:45
	mov.b32 	%f2, %r7;
	.loc	1 42 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:42:62
	bar.sync 	0;
	.loc	1 43 31                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:43:31
	mul.lo.s64 	%rd58, %rd11, 160;
	add.s64 	%rd59, %rd14, %rd58;
	shl.b64 	%rd60, %rd9, 2;
	add.s64 	%rd57, %rd59, %rd60;
	.loc	1 43 47                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:43:47
	// begin inline asm
	mov.u32 %r11, 0x0;
	@%p15 ld.global.b32 { %r11 }, [ %rd57 + 0 ];
	@!%p15 mov.u32 %r11, %r8;
	// end inline asm
	mov.b32 	%f3, %r11;
	.loc	1 44 19                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:44:19
	mul.f32 	%f4, %f2, %f3;
	.loc	1 46 43                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:46:43
	selp.f32 	%f5, %f4, 0f00000000, %p15;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r19, %f5;
	shfl.sync.bfly.b32	%r20, %r19, 16, 31, -1;
	mov.b32 	%f6, %r20;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f7, %f5, %f6;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r21, %f7;
	shfl.sync.bfly.b32	%r22, %r21, 8, 31, -1;
	mov.b32 	%f8, %r22;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f9, %f7, %f8;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r23, %f9;
	shfl.sync.bfly.b32	%r24, %r23, 4, 31, -1;
	mov.b32 	%f10, %r24;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f11, %f9, %f10;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r25, %f11;
	shfl.sync.bfly.b32	%r26, %r25, 2, 31, -1;
	mov.b32 	%f12, %r26;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f13, %f11, %f12;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r27, %f13;
	shfl.sync.bfly.b32	%r28, %r27, 1, 31, -1;
	mov.b32 	%f14, %r28;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f15, %f13, %f14;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p24, %r2, 0;
	and.b32  	%r29, %r3, 1;
	shl.b32 	%r30, %r29, 2;
	mov.u32 	%r31, global_smem;
	add.s32 	%r13, %r31, %r30;
	mov.b32 	%r14, %f15;
	// begin inline asm
	@%p24 st.shared.b32 [ %r13 + 0 ], %r14;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p25, %r1, 2;
	shl.b32 	%r32, %r1, 2;
	add.s32 	%r16, %r31, %r32;
	// begin inline asm
	@%p25 ld.shared.b32 %r15, [ %r16 + 0 ];
	// end inline asm
	mov.b32 	%f16, %r15;
	shfl.sync.bfly.b32	%r33, %r15, 1, 31, -1;
	mov.b32 	%f17, %r33;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f18, %f16, %f17;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r34, %r1, 1;
	setp.eq.b32 	%p27, %r34, 1;
	not.pred 	%p28, %p27;
	and.pred  	%p26, %p25, %p28;
	mov.b32 	%r18, %f18;
	// begin inline asm
	@%p26 st.shared.b32 [ %r16 + 0 ], %r18;
	// end inline asm
	bar.sync 	0;
$L__tmp2:
	.loc	1 51 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:51:62
	@%p1 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:
	.loc	1 0 62                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:0:62
	ld.param.u64 	%rd15, [triton_per_fused_add_index_mul_sum_0_param_5];
	shr.u64 	%rd32, %rd19, 61;
	and.b64  	%rd6, %rd32, 4;
	shr.u64 	%rd48, %rd27, 61;
	and.b64  	%rd49, %rd48, 4;
	add.s64 	%rd10, %rd49, %rd27;
	setp.lt.u64 	%p19, %rd10, 4;
	or.pred  	%p3, %p16, %p19;
$L__tmp3:
	.loc	2 267 36                        // standard.py:267:36
	ld.shared.f32 	%f1, [global_smem];
$L__tmp4:
	.loc	1 51 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:51:62
	bar.sync 	0;
	.loc	1 52 31                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:52:31
	shl.b64 	%rd68, %rd19, 2;
	add.s64 	%rd69, %rd15, %rd68;
	shl.b64 	%rd70, %rd6, 2;
	add.s64 	%rd67, %rd69, %rd70;
	.loc	1 52 39                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:52:39
	// begin inline asm
	mov.u32 %r35, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r35 }, [ %rd67 + 0 ];
	// end inline asm
	.loc	1 56 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:56:62
	@%p3 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:
	.loc	1 0 62                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:0:62
	ld.param.u64 	%rd16, [triton_per_fused_add_index_mul_sum_0_param_6];
	ld.param.u64 	%rd12, [triton_per_fused_add_index_mul_sum_0_param_0];
	cvt.u32.u64 	%r40, %rd9;
	.loc	1 52 39                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:52:39
	mov.b32 	%f19, %r35;
	.loc	1 53 20                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:53:20
	add.f32 	%f20, %f1, %f19;
	.loc	1 56 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:56:62
	bar.sync 	0;
	.loc	1 57 31                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:57:31
	shl.b64 	%rd79, %rd25, 2;
	add.s64 	%rd80, %rd16, %rd79;
	shr.u64 	%rd81, %rd25, 59;
	and.b64  	%rd82, %rd81, 16;
	add.s64 	%rd77, %rd80, %rd82;
	.loc	1 57 39                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:57:39
	// begin inline asm
	mov.u32 %r37, 0x0;
	@%p17 ld.global.L1::evict_last.b32 { %r37 }, [ %rd77 + 0 ];
	// end inline asm
	mov.b32 	%f21, %r37;
	.loc	1 58 20                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:58:20
	add.f32 	%f22, %f20, %f21;
	.loc	1 59 4                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:59:4
	bar.sync 	0;
	.loc	1 60 28                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:60:28
	shl.b64 	%rd83, %rd1, 2;
	add.s64 	%rd78, %rd12, %rd83;
	.loc	1 60 40                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:60:40
	setp.eq.s32 	%p32, %r40, 0;
	mov.b32 	%r38, %f22;
	and.pred  	%p31, %p32, %p17;
	// begin inline asm
	@%p31 st.global.b32 [ %rd78 + 0 ], { %r38 };
	// end inline asm
	.loc	1 60 4                          // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:60:4
	ret;
$L__BB0_1:
	.loc	1 37 60                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:37:60
	mov.u64 	%rd37, assertMessage_0;
	cvta.global.u64 	%rd38, %rd37;
	mov.u64 	%rd39, assertFile_0;
	cvta.global.u64 	%rd40, %rd39;
	mov.u64 	%rd41, assertFunc_0;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd38;
	.param .b64 param1;
	st.param.b64 	[param1], %rd40;
	.param .b32 param2;
	st.param.b32 	[param2], 37;
	.param .b64 param3;
	st.param.b64 	[param3], %rd42;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 0
	trap;
$L__BB0_3:
	.loc	1 42 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:42:62
	mov.u64 	%rd51, assertMessage_1;
	cvta.global.u64 	%rd52, %rd51;
	mov.u64 	%rd53, assertFile_1;
	cvta.global.u64 	%rd54, %rd53;
	mov.u64 	%rd55, assertFunc_1;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 1, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd52;
	.param .b64 param1;
	st.param.b64 	[param1], %rd54;
	.param .b32 param2;
	st.param.b32 	[param2], 42;
	.param .b64 param3;
	st.param.b64 	[param3], %rd56;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 1
	trap;
$L__BB0_5:
	.loc	1 51 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:51:62
	mov.u64 	%rd61, assertMessage_2;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, assertFile_2;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, assertFunc_2;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 2, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd62;
	.param .b64 param1;
	st.param.b64 	[param1], %rd64;
	.param .b32 param2;
	st.param.b32 	[param2], 51;
	.param .b64 param3;
	st.param.b64 	[param3], %rd66;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 2
	trap;
$L__BB0_7:
	.loc	1 56 62                         // cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py:56:62
	mov.u64 	%rd71, assertMessage_3;
	cvta.global.u64 	%rd72, %rd71;
	mov.u64 	%rd73, assertFile_3;
	cvta.global.u64 	%rd74, %rd73;
	mov.u64 	%rd75, assertFunc_3;
	cvta.global.u64 	%rd76, %rd75;
	{ // callseq 3, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd72;
	.param .b64 param1;
	st.param.b64 	[param1], %rd74;
	.param .b32 param2;
	st.param.b32 	[param2], 56;
	.param .b64 param3;
	st.param.b64 	[param3], %rd76;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 3
	trap;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 181                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xae DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 110
.b8 55
.b8 112
.b8 51
.b8 105
.b8 115
.b8 103
.b8 117
.b8 120
.b8 106
.b8 121
.b8 116
.b8 109
.b8 98
.b8 102
.b8 107
.b8 105
.b8 118
.b8 116
.b8 119
.b8 107
.b8 118
.b8 111
.b8 102
.b8 103
.b8 53
.b8 102
.b8 55
.b8 117
.b8 97
.b8 120
.b8 53
.b8 111
.b8 98
.b8 98
.b8 117
.b8 110
.b8 119
.b8 104
.b8 104
.b8 109
.b8 120
.b8 103
.b8 51
.b8 104
.b8 98
.b8 112
.b8 112
.b8 103
.b8 107
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 110
.b8 55
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x27 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 101
.b8 114
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 97
.b8 100
.b8 100
.b8 95
.b8 105
.b8 110
.b8 100
.b8 101
.b8 120
.b8 95
.b8 109
.b8 117
.b8 108
.b8 95
.b8 115
.b8 117
.b8 109
.b8 95
.b8 48
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8a:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x9f:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 47                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
