#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0)
#loc1 = loc(unknown)
#loc39 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":47:26)
#loc56 = loc(callsite(#loc1 at #loc39))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_index_mul_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg3: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg7: i32 loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0), %arg8: i32 loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<1x1xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<1x1xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<40> : tensor<1x1xi64, #blocked1> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x1xi64, #blocked2> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<1x1xi64, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<40> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<1x1xi64, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<1x1xi64, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %4 = arith.cmpi slt, %3, %cst_5 : tensor<1x64xi32, #blocked1> loc(#loc5)
    %5 = tt.addptr %arg1, %0 : !tt.ptr<i64>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked1> loc(#loc7)
    %7 = tt.splat %5 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked> loc(#loc7)
    %8 = tt.splat %5 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked2> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc7)
    %10 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %11 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked2> loc(#loc7)
    %12 = tt.load %6, %9 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked1> loc(#loc7)
    %13 = tt.load %7, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked> loc(#loc7)
    %14 = tt.load %8, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked2> loc(#loc7)
    %15 = tt.addptr %arg3, %0 : !tt.ptr<i64>, i32 loc(#loc8)
    %16 = tt.splat %15 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked1> loc(#loc9)
    %17 = tt.splat %15 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked> loc(#loc9)
    %18 = tt.splat %15 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked2> loc(#loc9)
    %19 = tt.load %16, %9 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked1> loc(#loc9)
    %20 = tt.load %17, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked> loc(#loc9)
    %21 = tt.load %18, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked2> loc(#loc9)
    %22 = arith.addi %12, %cst_0 : tensor<1x1xi64, #blocked1> loc(#loc10)
    %23 = arith.addi %13, %cst : tensor<1x1xi64, #blocked> loc(#loc10)
    %24 = arith.addi %14, %cst_2 : tensor<1x1xi64, #blocked2> loc(#loc10)
    %25 = arith.cmpi slt, %12, %cst_6 : tensor<1x1xi64, #blocked1> loc(#loc11)
    %26 = arith.cmpi slt, %13, %cst_7 : tensor<1x1xi64, #blocked> loc(#loc11)
    %27 = arith.cmpi slt, %14, %cst_3 : tensor<1x1xi64, #blocked2> loc(#loc11)
    %28 = arith.select %25, %22, %12 : tensor<1x1xi1, #blocked1>, tensor<1x1xi64, #blocked1> loc(#loc12)
    %29 = arith.select %26, %23, %13 : tensor<1x1xi1, #blocked>, tensor<1x1xi64, #blocked> loc(#loc12)
    %30 = arith.select %27, %24, %14 : tensor<1x1xi1, #blocked2>, tensor<1x1xi64, #blocked2> loc(#loc12)
    %31 = arith.cmpi sge, %28, %cst_6 : tensor<1x1xi64, #blocked1> loc(#loc13)
    %32 = arith.cmpi sge, %30, %cst_3 : tensor<1x1xi64, #blocked2> loc(#loc13)
    %33 = arith.cmpi slt, %28, %cst_0 : tensor<1x1xi64, #blocked1> loc(#loc14)
    %34 = arith.cmpi slt, %30, %cst_2 : tensor<1x1xi64, #blocked2> loc(#loc14)
    %35 = arith.andi %31, %33 : tensor<1x1xi1, #blocked1> loc(#loc15)
    %36 = arith.andi %32, %34 : tensor<1x1xi1, #blocked2> loc(#loc15)
    %37 = arith.cmpi sge, %0, %c4_i32 : i32 loc(#loc54)
    %38 = tt.splat %37 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc16)
    %39 = tt.splat %37 : i1 -> tensor<1x1xi1, #blocked2> loc(#loc16)
    %40 = arith.ori %35, %38 : tensor<1x1xi1, #blocked1> loc(#loc17)
    %41 = arith.ori %36, %39 : tensor<1x1xi1, #blocked2> loc(#loc17)
    %42 = tt.broadcast %40 : tensor<1x1xi1, #blocked1> -> tensor<1x64xi1, #blocked1> loc(#loc17)
    tt.assert %42, "index out of bounds: 0 <= tmp4 < 4" : tensor<1x64xi1, #blocked1> loc(#loc18)
    %43 = arith.muli %28, %cst_1 : tensor<1x1xi64, #blocked1> loc(#loc19)
    %44 = tt.broadcast %43 : tensor<1x1xi64, #blocked1> -> tensor<1x64xi64, #blocked1> loc(#loc19)
    %45 = arith.extsi %3 : tensor<1x64xi32, #blocked1> to tensor<1x64xi64, #blocked1> loc(#loc20)
    %46 = arith.addi %45, %44 : tensor<1x64xi64, #blocked1> loc(#loc20)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc21)
    %48 = tt.addptr %47, %46 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi64, #blocked1> loc(#loc21)
    %49 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked1> loc(#loc22)
    %50 = arith.andi %4, %49 : tensor<1x64xi1, #blocked1> loc(#loc22)
    %51 = tt.load %48, %50, %cst_4 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %52 = arith.addi %19, %cst_0 : tensor<1x1xi64, #blocked1> loc(#loc24)
    %53 = arith.addi %20, %cst : tensor<1x1xi64, #blocked> loc(#loc24)
    %54 = arith.addi %21, %cst_2 : tensor<1x1xi64, #blocked2> loc(#loc24)
    %55 = arith.cmpi slt, %19, %cst_6 : tensor<1x1xi64, #blocked1> loc(#loc25)
    %56 = arith.cmpi slt, %20, %cst_7 : tensor<1x1xi64, #blocked> loc(#loc25)
    %57 = arith.cmpi slt, %21, %cst_3 : tensor<1x1xi64, #blocked2> loc(#loc25)
    %58 = arith.select %55, %52, %19 : tensor<1x1xi1, #blocked1>, tensor<1x1xi64, #blocked1> loc(#loc26)
    %59 = arith.select %56, %53, %20 : tensor<1x1xi1, #blocked>, tensor<1x1xi64, #blocked> loc(#loc26)
    %60 = arith.select %57, %54, %21 : tensor<1x1xi1, #blocked2>, tensor<1x1xi64, #blocked2> loc(#loc26)
    %61 = arith.cmpi sge, %58, %cst_6 : tensor<1x1xi64, #blocked1> loc(#loc27)
    %62 = arith.cmpi sge, %60, %cst_3 : tensor<1x1xi64, #blocked2> loc(#loc27)
    %63 = arith.cmpi slt, %58, %cst_0 : tensor<1x1xi64, #blocked1> loc(#loc28)
    %64 = arith.cmpi slt, %60, %cst_2 : tensor<1x1xi64, #blocked2> loc(#loc28)
    %65 = arith.andi %61, %63 : tensor<1x1xi1, #blocked1> loc(#loc29)
    %66 = arith.andi %62, %64 : tensor<1x1xi1, #blocked2> loc(#loc29)
    %67 = arith.ori %65, %38 : tensor<1x1xi1, #blocked1> loc(#loc30)
    %68 = arith.ori %66, %39 : tensor<1x1xi1, #blocked2> loc(#loc30)
    %69 = tt.broadcast %67 : tensor<1x1xi1, #blocked1> -> tensor<1x64xi1, #blocked1> loc(#loc30)
    tt.assert %69, "index out of bounds: 0 <= tmp10 < 4" : tensor<1x64xi1, #blocked1> loc(#loc31)
    %70 = arith.muli %58, %cst_1 : tensor<1x1xi64, #blocked1> loc(#loc32)
    %71 = tt.broadcast %70 : tensor<1x1xi64, #blocked1> -> tensor<1x64xi64, #blocked1> loc(#loc32)
    %72 = arith.addi %45, %71 : tensor<1x64xi64, #blocked1> loc(#loc33)
    %73 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %74 = tt.addptr %73, %72 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi64, #blocked1> loc(#loc34)
    %75 = tt.load %74, %50, %cst_4 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %76 = arith.mulf %51, %75 : tensor<1x64xf32, #blocked1> loc(#loc36)
    %77 = arith.select %50, %76, %cst_4 : tensor<1x64xi1, #blocked1>, tensor<1x64xf32, #blocked1> loc(#loc37)
    %78 = "tt.reduce"(%77) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc39)), %arg10: f32 loc(callsite(#loc1 at #loc39))):
      %91 = arith.addf %arg9, %arg10 : f32 loc(#loc58)
      tt.reduce.return %91 : f32 loc(#loc55)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc55)
    %79 = triton_gpu.convert_layout %78 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %80 = tt.expand_dims %79 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc42)
    tt.assert %41, "index out of bounds: 0 <= tmp20 < 4" : tensor<1x1xi1, #blocked2> loc(#loc43)
    %81 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc44)
    %82 = tt.addptr %81, %29 : tensor<1x1x!tt.ptr<f32>, #blocked>, tensor<1x1xi64, #blocked> loc(#loc44)
    %83 = tt.load %82, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc45)
    %84 = arith.addf %80, %83 : tensor<1x1xf32, #blocked> loc(#loc46)
    tt.assert %68, "index out of bounds: 0 <= tmp25 < 4" : tensor<1x1xi1, #blocked2> loc(#loc47)
    %85 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc48)
    %86 = tt.addptr %85, %59 : tensor<1x1x!tt.ptr<f32>, #blocked>, tensor<1x1xi64, #blocked> loc(#loc48)
    %87 = tt.load %86, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc49)
    %88 = arith.addf %84, %87 : tensor<1x1xf32, #blocked> loc(#loc41)
    gpu.barrier loc(#loc50)
    %89 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc51)
    %90 = tt.splat %89 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc52)
    tt.store %90, %88, %10 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc52)
    tt.return loc(#loc53)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":23:28)
#loc3 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":25:21)
#loc4 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":26:34)
#loc5 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":28:21)
#loc6 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":31:30)
#loc7 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":31:35)
#loc8 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":32:30)
#loc9 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":32:35)
#loc10 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":34:18)
#loc11 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":35:18)
#loc12 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":36:32)
#loc13 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":37:28)
#loc14 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":37:44)
#loc15 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":37:37)
#loc16 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":37:52)
#loc17 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":37:50)
#loc18 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":37:60)
#loc19 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":38:38)
#loc20 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":38:35)
#loc21 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":38:30)
#loc22 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":38:53)
#loc23 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":38:45)
#loc24 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":39:18)
#loc25 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":40:18)
#loc26 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":41:33)
#loc27 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":42:28)
#loc28 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":42:46)
#loc29 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":42:38)
#loc30 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":42:52)
#loc31 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":42:62)
#loc32 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":43:39)
#loc33 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":43:36)
#loc34 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":43:31)
#loc35 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":43:47)
#loc36 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":44:19)
#loc37 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":46:43)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc41 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":58:20)
#loc42 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":47:29)
#loc43 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":51:62)
#loc44 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":52:31)
#loc45 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":52:39)
#loc46 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":53:20)
#loc47 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":56:62)
#loc48 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":57:31)
#loc49 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":57:39)
#loc50 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":59:4)
#loc51 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":60:28)
#loc52 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":60:40)
#loc53 = loc("inductor_cache/n7/cn7p3isguxjytmbfkivtwkvofg5f7uax5obbunwhhmxg3hbppgkt.py":60:4)
#loc54 = loc(fused[#loc16, #loc3])
#loc55 = loc(callsite(#loc38 at #loc39))
#loc57 = loc(callsite(#loc40 at #loc38))
#loc58 = loc(callsite(#loc57 at #loc39))
