; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_transpose_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %.lobit1 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %.lobit1, 3, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = icmp slt i32 %17, 16, !dbg !14
  %23 = icmp slt i32 %18, 16, !dbg !14
  %24 = icmp slt i32 %19, 16, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 5, !dbg !16
  %27 = lshr i32 %11, 2, !dbg !17
  %28 = and i32 %27, 31, !dbg !17
  %29 = and i32 %11, 31, !dbg !17
  %30 = or disjoint i32 %26, %28, !dbg !18
  %31 = or disjoint i32 %26, %29, !dbg !18
  %32 = icmp slt i32 %30, 17, !dbg !19
  %33 = icmp slt i32 %31, 17, !dbg !19
  %34 = shl i32 %30, 4, !dbg !20
  %35 = add i32 %34, %15, !dbg !21
  %36 = sext i32 %35 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = and i1 %20, %32, !dbg !23
  %39 = and i1 %21, %33, !dbg !23
  %40 = and i1 %22, %33, !dbg !23
  %41 = and i1 %23, %33, !dbg !23
  %42 = and i1 %24, %33, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = getelementptr i8, ptr addrspace(1) %2, i64 -16, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !27
  %63 = getelementptr i8, ptr addrspace(1) %3, i64 -32, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !29
  %65 = fadd float %48, %57, !dbg !30
  %66 = fadd float %49, %58, !dbg !30
  %67 = fadd float %50, %59, !dbg !30
  %68 = fadd float %51, %60, !dbg !30
  %69 = mul i32 %16, 17, !dbg !31
  %70 = mul i32 %17, 17, !dbg !31
  %71 = mul i32 %18, 17, !dbg !31
  %72 = mul i32 %19, 17, !dbg !31
  %73 = add i32 %31, %69, !dbg !32
  %74 = add i32 %31, %70, !dbg !32
  %75 = add i32 %31, %71, !dbg !32
  %76 = add i32 %31, %72, !dbg !32
  %77 = sext i32 %73 to i64, !dbg !33
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !33
  %79 = sext i32 %74 to i64, !dbg !33
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !33
  %81 = sext i32 %75 to i64, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !33
  %83 = sext i32 %76 to i64, !dbg !33
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !33
  %85 = shl i32 %11, 7, !dbg !34
  %86 = and i32 %85, 384, !dbg !34
  %87 = or disjoint i32 %86, %28, !dbg !34
  %88 = and i32 %11, 127, !dbg !34
  %89 = lshr exact i32 %86, 5, !dbg !34
  %90 = add nuw nsw i32 %89, %87, !dbg !34
  %91 = zext nneg i32 %90 to i64, !dbg !34
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !34
  %93 = bitcast float %65 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !34
  %94 = or disjoint i32 %87, 32, !dbg !34
  %95 = lshr i32 %94, 5, !dbg !34
  %96 = add nuw nsw i32 %95, %94, !dbg !34
  %97 = zext nneg i32 %96 to i64, !dbg !34
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !34
  %99 = bitcast float %66 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !34
  %100 = or disjoint i32 %87, 64, !dbg !34
  %101 = lshr i32 %100, 5, !dbg !34
  %102 = add nuw nsw i32 %101, %100, !dbg !34
  %103 = zext nneg i32 %102 to i64, !dbg !34
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !34
  %105 = bitcast float %67 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !34
  %106 = or disjoint i32 %87, 96, !dbg !34
  %107 = lshr i32 %106, 5, !dbg !34
  %108 = add nuw nsw i32 %107, %106, !dbg !34
  %109 = zext nneg i32 %108 to i64, !dbg !34
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !34
  %111 = bitcast float %68 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %112 = lshr i32 %88, 5, !dbg !34
  %113 = add nuw nsw i32 %112, %88, !dbg !34
  %114 = zext nneg i32 %113 to i64, !dbg !34
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !34
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !34
  %117 = or disjoint i32 %88, 128, !dbg !34
  %118 = lshr i32 %117, 5, !dbg !34
  %119 = add nuw nsw i32 %118, %117, !dbg !34
  %120 = zext nneg i32 %119 to i64, !dbg !34
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !34
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !34
  %123 = or disjoint i32 %88, 256, !dbg !34
  %124 = lshr i32 %123, 5, !dbg !34
  %125 = add nuw nsw i32 %124, %123, !dbg !34
  %126 = zext nneg i32 %125 to i64, !dbg !34
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !34
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !34
  %129 = or disjoint i32 %88, 384, !dbg !34
  %130 = lshr i32 %129, 5, !dbg !34
  %131 = add nuw nsw i32 %130, %129, !dbg !34
  %132 = zext nneg i32 %131 to i64, !dbg !34
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !34
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %78, i1 %39) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %80, i1 %40) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %82, i1 %41) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %84, i1 %42) #2, !dbg !34
  %135 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !35
  %136 = bitcast float %65 to i32, !dbg !36
  %137 = bitcast float %66 to i32, !dbg !36
  %138 = bitcast float %67 to i32, !dbg !36
  %139 = bitcast float %68 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %136, i32 %137, i32 %138, i32 %139, ptr addrspace(1) %135, i1 %38) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwwgsrp2azrmbd7utsadkpcw4nqy5vcm4qyxczwrqxprmcu2yfhk.py", directory: "inductor_cache/ww")
!4 = !{ptr @triton_poi_fused_mul_transpose_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_transpose_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_transpose_3", linkageName: "triton_poi_fused_mul_transpose_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 51, scope: !7)
!24 = !DILocation(line: 31, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 70, scope: !7)
!26 = !DILocation(line: 42, column: 31, scope: !7)
!27 = !DILocation(line: 42, column: 78, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 78, scope: !7)
!30 = !DILocation(line: 49, column: 19, scope: !7)
!31 = !DILocation(line: 52, column: 33, scope: !7)
!32 = !DILocation(line: 52, column: 30, scope: !7)
!33 = !DILocation(line: 52, column: 25, scope: !7)
!34 = !DILocation(line: 52, column: 45, scope: !7)
!35 = !DILocation(line: 53, column: 25, scope: !7)
!36 = !DILocation(line: 53, column: 45, scope: !7)
!37 = !DILocation(line: 53, column: 4, scope: !7)
