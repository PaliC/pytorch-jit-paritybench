; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_native_group_norm_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 32, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = shl i32 %9, 5, !dbg !12
  %15 = and i32 %14, 16128, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %16 = sdiv i32 %.frozen, 8, !dbg !13
  %17 = mul i32 %16, 8, !dbg !14
  %.decomposed = sub i32 %.frozen, %17, !dbg !14
  %18 = shl nsw i32 %.decomposed, 5, !dbg !15
  %19 = shl i32 %16, 14, !dbg !16
  %20 = or disjoint i32 %15, %13, !dbg !17
  %21 = add nsw i32 %20, %18, !dbg !18
  %22 = add i32 %21, %19, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = bitcast i32 %27 to float, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = select i1 %8, float %30, float 0.000000e+00, !dbg !22
  %35 = select i1 %8, float %31, float 0.000000e+00, !dbg !22
  %36 = select i1 %8, float %32, float 0.000000e+00, !dbg !22
  %37 = select i1 %8, float %33, float 0.000000e+00, !dbg !22
  %38 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %39 = fsub float %35, %34, !dbg !24
  %40 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %41 = fcmp oeq float %40, 0.000000e+00, !dbg !30
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %40) #5, !dbg !31
  %43 = select i1 %41, float 0.000000e+00, float %42, !dbg !32
  %44 = fmul float %43, %39, !dbg !33
  %45 = fadd float %34, %44, !dbg !34
  %46 = fmul float %39, %39, !dbg !35
  %47 = fmul float %38, %46, !dbg !36
  %48 = fmul float %43, %47, !dbg !37
  %49 = fadd float %48, 0.000000e+00, !dbg !38
  %50 = fsub float %36, %45, !dbg !24
  %51 = select i1 %8, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %52 = fcmp oeq float %51, 0.000000e+00, !dbg !30
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %51) #5, !dbg !31
  %54 = select i1 %52, float 0.000000e+00, float %53, !dbg !32
  %55 = fmul float %54, %50, !dbg !33
  %56 = fadd float %45, %55, !dbg !34
  %57 = fmul float %50, %50, !dbg !35
  %58 = fmul float %40, %57, !dbg !36
  %59 = fmul float %54, %58, !dbg !37
  %60 = fadd float %49, %59, !dbg !38
  %61 = fsub float %37, %56, !dbg !24
  %62 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %63 = fcmp oeq float %62, 0.000000e+00, !dbg !30
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %62) #5, !dbg !31
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !32
  %66 = fmul float %65, %61, !dbg !33
  %67 = fadd float %56, %66, !dbg !34
  %68 = fmul float %61, %61, !dbg !35
  %69 = fmul float %51, %68, !dbg !36
  %70 = fmul float %65, %69, !dbg !37
  %71 = fadd float %60, %70, !dbg !38
  %72 = bitcast float %67 to i32, !dbg !39
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !39
  %74 = bitcast i32 %73 to float, !dbg !39
  %75 = bitcast float %71 to i32, !dbg !39
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !39
  %77 = bitcast i32 %76 to float, !dbg !39
  %78 = bitcast float %62 to i32, !dbg !39
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !39
  %80 = bitcast i32 %79 to float, !dbg !39
  %81 = fsub float %74, %67, !dbg !24
  %82 = fadd float %62, %80, !dbg !29
  %83 = fcmp oeq float %82, 0.000000e+00, !dbg !30
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %82) #5, !dbg !31
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !32
  %86 = fmul float %85, %81, !dbg !33
  %87 = fadd float %67, %86, !dbg !34
  %88 = fadd float %71, %77, !dbg !40
  %89 = fmul float %81, %81, !dbg !35
  %90 = fmul float %62, %89, !dbg !36
  %91 = fmul float %85, %90, !dbg !37
  %92 = fadd float %88, %91, !dbg !38
  %93 = bitcast float %87 to i32, !dbg !39
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !39
  %95 = bitcast i32 %94 to float, !dbg !39
  %96 = bitcast float %92 to i32, !dbg !39
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !39
  %98 = bitcast i32 %97 to float, !dbg !39
  %99 = bitcast float %82 to i32, !dbg !39
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !39
  %101 = bitcast i32 %100 to float, !dbg !39
  %102 = fsub float %95, %87, !dbg !24
  %103 = fadd float %82, %101, !dbg !29
  %104 = fcmp oeq float %103, 0.000000e+00, !dbg !30
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %103) #5, !dbg !31
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !32
  %107 = fmul float %106, %102, !dbg !33
  %108 = fadd float %87, %107, !dbg !34
  %109 = fadd float %92, %98, !dbg !40
  %110 = fmul float %102, %102, !dbg !35
  %111 = fmul float %82, %110, !dbg !36
  %112 = fmul float %106, %111, !dbg !37
  %113 = fadd float %109, %112, !dbg !38
  %114 = bitcast float %108 to i32, !dbg !39
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !39
  %116 = bitcast i32 %115 to float, !dbg !39
  %117 = bitcast float %113 to i32, !dbg !39
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !39
  %119 = bitcast i32 %118 to float, !dbg !39
  %120 = bitcast float %103 to i32, !dbg !39
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !39
  %122 = bitcast i32 %121 to float, !dbg !39
  %123 = fsub float %116, %108, !dbg !24
  %124 = fadd float %103, %122, !dbg !29
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !30
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %124) #5, !dbg !31
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !32
  %128 = fmul float %127, %123, !dbg !33
  %129 = fadd float %108, %128, !dbg !34
  %130 = fadd float %113, %119, !dbg !40
  %131 = fmul float %123, %123, !dbg !35
  %132 = fmul float %103, %131, !dbg !36
  %133 = fmul float %127, %132, !dbg !37
  %134 = fadd float %130, %133, !dbg !38
  %135 = bitcast float %129 to i32, !dbg !39
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !39
  %137 = bitcast i32 %136 to float, !dbg !39
  %138 = bitcast float %134 to i32, !dbg !39
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !39
  %140 = bitcast i32 %139 to float, !dbg !39
  %141 = bitcast float %124 to i32, !dbg !39
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !39
  %143 = bitcast i32 %142 to float, !dbg !39
  %144 = fsub float %137, %129, !dbg !24
  %145 = fadd float %124, %143, !dbg !29
  %146 = fcmp oeq float %145, 0.000000e+00, !dbg !30
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %145) #5, !dbg !31
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !32
  %149 = fmul float %144, %148, !dbg !33
  %150 = fadd float %129, %149, !dbg !34
  %151 = fadd float %134, %140, !dbg !40
  %152 = fmul float %144, %144, !dbg !35
  %153 = fmul float %124, %152, !dbg !36
  %154 = fmul float %148, %153, !dbg !37
  %155 = fadd float %151, %154, !dbg !38
  %156 = bitcast float %150 to i32, !dbg !39
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !39
  %158 = bitcast i32 %157 to float, !dbg !39
  %159 = bitcast float %155 to i32, !dbg !39
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !39
  %161 = bitcast i32 %160 to float, !dbg !39
  %162 = bitcast float %145 to i32, !dbg !39
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !39
  %164 = bitcast i32 %163 to float, !dbg !39
  %165 = fsub float %158, %150, !dbg !24
  %166 = fadd float %145, %164, !dbg !29
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !30
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %166) #5, !dbg !31
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !32
  %170 = fmul float %165, %169, !dbg !33
  %171 = fadd float %150, %170, !dbg !34
  %172 = fadd float %155, %161, !dbg !40
  %173 = fmul float %165, %165, !dbg !35
  %174 = fmul float %145, %173, !dbg !36
  %175 = fmul float %169, %174, !dbg !37
  %176 = fadd float %172, %175, !dbg !38
  %177 = icmp eq i32 %10, 0, !dbg !39
  %178 = and i32 %11, 15, !dbg !39
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !39
  %180 = bitcast float %171 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 %177) #5, !dbg !39
  %181 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %178, !dbg !39
  %182 = bitcast float %176 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 %177) #5, !dbg !39
  %183 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %178, !dbg !39
  %184 = bitcast float %166 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 %177) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %185 = icmp slt i32 %9, 16, !dbg !39
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !39
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %185) #5, !dbg !39
  %188 = bitcast i32 %187 to float, !dbg !39
  %189 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %9, !dbg !39
  %190 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %189, i1 %185) #5, !dbg !39
  %191 = bitcast i32 %190 to float, !dbg !39
  %192 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %9, !dbg !39
  %193 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %192, i1 %185) #5, !dbg !39
  %194 = bitcast i32 %193 to float, !dbg !39
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !39
  %196 = bitcast i32 %195 to float, !dbg !39
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !39
  %198 = bitcast i32 %197 to float, !dbg !39
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 8, i32 31), !dbg !39
  %200 = bitcast i32 %199 to float, !dbg !39
  %201 = fsub float %196, %188, !dbg !24
  %202 = fadd float %194, %200, !dbg !29
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !30
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %202) #5, !dbg !31
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !32
  %206 = fmul float %201, %205, !dbg !33
  %207 = fadd float %206, %188, !dbg !34
  %208 = fadd float %191, %198, !dbg !40
  %209 = fmul float %201, %201, !dbg !35
  %210 = fmul float %209, %194, !dbg !36
  %211 = fmul float %210, %205, !dbg !37
  %212 = fadd float %208, %211, !dbg !38
  %213 = bitcast float %207 to i32, !dbg !39
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !39
  %215 = bitcast i32 %214 to float, !dbg !39
  %216 = bitcast float %212 to i32, !dbg !39
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !39
  %218 = bitcast i32 %217 to float, !dbg !39
  %219 = bitcast float %202 to i32, !dbg !39
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !39
  %221 = bitcast i32 %220 to float, !dbg !39
  %222 = fsub float %215, %207, !dbg !24
  %223 = fadd float %202, %221, !dbg !29
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !30
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %223) #5, !dbg !31
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !32
  %227 = fmul float %222, %226, !dbg !33
  %228 = fadd float %207, %227, !dbg !34
  %229 = fadd float %212, %218, !dbg !40
  %230 = fmul float %222, %222, !dbg !35
  %231 = fmul float %202, %230, !dbg !36
  %232 = fmul float %226, %231, !dbg !37
  %233 = fadd float %229, %232, !dbg !38
  %234 = bitcast float %228 to i32, !dbg !39
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !39
  %236 = bitcast i32 %235 to float, !dbg !39
  %237 = bitcast float %233 to i32, !dbg !39
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !39
  %239 = bitcast i32 %238 to float, !dbg !39
  %240 = bitcast float %223 to i32, !dbg !39
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !39
  %242 = bitcast i32 %241 to float, !dbg !39
  %243 = fsub float %236, %228, !dbg !24
  %244 = fadd float %223, %242, !dbg !29
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !30
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #5, !dbg !31
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !32
  %248 = fmul float %243, %247, !dbg !33
  %249 = fadd float %228, %248, !dbg !34
  %250 = fadd float %233, %239, !dbg !40
  %251 = fmul float %243, %243, !dbg !35
  %252 = fmul float %223, %251, !dbg !36
  %253 = fmul float %247, %252, !dbg !37
  %254 = fadd float %250, %253, !dbg !38
  %255 = bitcast float %249 to i32, !dbg !39
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !39
  %257 = bitcast i32 %256 to float, !dbg !39
  %258 = bitcast float %254 to i32, !dbg !39
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !39
  %260 = bitcast i32 %259 to float, !dbg !39
  %261 = bitcast float %244 to i32, !dbg !39
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !39
  %263 = bitcast i32 %262 to float, !dbg !39
  %264 = fsub float %257, %249, !dbg !24
  %265 = fadd float %244, %263, !dbg !29
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !30
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %265) #5, !dbg !31
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !32
  %269 = fmul float %264, %268, !dbg !33
  %270 = fadd float %249, %269, !dbg !34
  %271 = fadd float %254, %260, !dbg !40
  %272 = fmul float %264, %264, !dbg !35
  %273 = fmul float %244, %272, !dbg !36
  %274 = fmul float %268, %273, !dbg !37
  %275 = fadd float %271, %274, !dbg !38
  %276 = and i32 %9, 15, !dbg !39
  %277 = icmp eq i32 %276, 0, !dbg !39
  %278 = and i1 %185, %277, !dbg !39
  %279 = bitcast float %270 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %279, i1 %278) #5, !dbg !39
  %280 = bitcast float %275 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %280, i1 %278) #5, !dbg !39
  %281 = bitcast float %265 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %281, i1 %278) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %282 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %283 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !39
  %284 = sext i32 %7 to i64, !dbg !41
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %284, !dbg !41
  %urem = and i32 %9, 511, !dbg !42
  %286 = icmp eq i32 %urem, 0, !dbg !42
  %287 = and i1 %286, %8, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %282, ptr addrspace(1) %285, i1 %287) #5, !dbg !42
  %288 = getelementptr float, ptr addrspace(1) %2, i64 %284, !dbg !43
  %289 = bitcast float %283 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %288, i1 %287) #5, !dbg !44
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float 2.048000e+03) #5, !dbg !45
  %291 = fadd float %290, 0x3EE4F8B580000000, !dbg !46
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %292, 0, !dbg !47
  br i1 %.not.i, label %295, label %293, !dbg !47

293:                                              ; preds = %6
  %294 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %291), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

295:                                              ; preds = %6
  %296 = tail call float @llvm.nvvm.rsqrt.approx.f(float %291), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %293, %295
  %.0.i = phi float [ %294, %293 ], [ %296, %295 ], !dbg !47
  %297 = getelementptr float, ptr addrspace(1) %3, i64 %284, !dbg !48
  %298 = bitcast float %.0.i to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %297, i1 %287) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co64fd6fagogun2nsrvn7tnntyzhgaxqtangf2pqkibkki55cpwi.py", directory: "inductor_cache/o6")
!4 = !{ptr @triton_red_fused_native_group_norm_26, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_group_norm_26, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_group_norm_26", linkageName: "triton_red_fused_native_group_norm_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 37, column: 62, scope: !7)
!17 = !DILocation(line: 37, column: 39, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 37, column: 56, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 67, scope: !7)
!22 = !DILocation(line: 42, column: 60, scope: !7)
!23 = !DILocation(line: 44, column: 64, scope: !7)
!24 = !DILocation(line: 192, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 46, column: 41, scope: !7)
!29 = !DILocation(line: 193, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 194, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 194, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 194, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 196, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 196, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 197, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 197, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 197, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 197, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 204, column: 46, scope: !27, inlinedAt: !28)
!40 = !DILocation(line: 197, column: 15, scope: !25, inlinedAt: !28)
!41 = !DILocation(line: 51, column: 25, scope: !7)
!42 = !DILocation(line: 51, column: 36, scope: !7)
!43 = !DILocation(line: 52, column: 25, scope: !7)
!44 = !DILocation(line: 52, column: 36, scope: !7)
!45 = !DILocation(line: 54, column: 18, scope: !7)
!46 = !DILocation(line: 56, column: 18, scope: !7)
!47 = !DILocation(line: 57, column: 27, scope: !7)
!48 = !DILocation(line: 58, column: 25, scope: !7)
!49 = !DILocation(line: 58, column: 36, scope: !7)
!50 = !DILocation(line: 58, column: 4, scope: !7)
