; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_ones_like_pow_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = srem i32 %9, 16, !dbg !15
  %12 = sdiv i32 %9, 64, !dbg !16
  %13 = sext i32 %9 to i64, !dbg !17
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !17
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %10) #1, !dbg !18
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !18
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !18
  %18 = bitcast i32 %16 to float, !dbg !18
  %19 = bitcast i32 %17 to float, !dbg !18
  %20 = shl nsw i32 %12, 6, !dbg !19
  %21 = add i32 %20, %11, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %10) #1, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = add i32 %21, 16, !dbg !23
  %28 = sext i32 %27 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %10) #1, !dbg !25
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !25
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !25
  %33 = add i32 %21, 32, !dbg !26
  %34 = sext i32 %33 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !27
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %10) #1, !dbg !28
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !28
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !28
  %39 = add i32 %21, 48, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %10) #1, !dbg !31
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %45 = fadd float %18, 1.000000e+00, !dbg !32
  %46 = fadd float %19, 1.000000e+00, !dbg !32
  %47 = fmul float %18, %18, !dbg !33
  %48 = fmul float %19, %19, !dbg !33
  %49 = fmul float %47, 5.000000e-01, !dbg !34
  %50 = fmul float %48, 5.000000e-01, !dbg !34
  %51 = fadd float %45, %49, !dbg !35
  %52 = fadd float %46, %50, !dbg !35
  %53 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !22
  %54 = insertelement <2 x i32> %53, i32 %31, i64 1, !dbg !22
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !22
  %56 = fadd <2 x float> %55, splat (float 1.000000e+00), !dbg !36
  %57 = fmul <2 x float> %55, %55, !dbg !37
  %58 = fmul <2 x float> %57, splat (float 5.000000e-01), !dbg !38
  %59 = fadd <2 x float> %56, %58, !dbg !39
  %60 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !22
  %61 = insertelement <2 x i32> %60, i32 %32, i64 1, !dbg !22
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !22
  %63 = fadd <2 x float> %62, splat (float 1.000000e+00), !dbg !36
  %64 = fmul <2 x float> %62, %62, !dbg !37
  %65 = fmul <2 x float> %64, splat (float 5.000000e-01), !dbg !38
  %66 = fadd <2 x float> %63, %65, !dbg !39
  %shift = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %67 = fadd <2 x float> %59, %shift, !dbg !40
  %shift1 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %68 = fadd <2 x float> %66, %shift1, !dbg !40
  %69 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !28
  %70 = insertelement <2 x i32> %69, i32 %43, i64 1, !dbg !28
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !28
  %72 = fadd <2 x float> %71, splat (float 1.000000e+00), !dbg !41
  %73 = fmul <2 x float> %71, %71, !dbg !42
  %74 = fmul <2 x float> %73, splat (float 5.000000e-01), !dbg !43
  %75 = fadd <2 x float> %72, %74, !dbg !44
  %76 = fadd <2 x float> %67, %75, !dbg !45
  %77 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !28
  %78 = insertelement <2 x i32> %77, i32 %44, i64 1, !dbg !28
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !28
  %80 = fadd <2 x float> %79, splat (float 1.000000e+00), !dbg !41
  %81 = fmul <2 x float> %79, %79, !dbg !42
  %82 = fmul <2 x float> %81, splat (float 5.000000e-01), !dbg !43
  %83 = fadd <2 x float> %80, %82, !dbg !44
  %84 = fadd <2 x float> %68, %83, !dbg !45
  %shift2 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %85 = fadd <2 x float> %76, %shift2, !dbg !46
  %86 = extractelement <2 x float> %85, i64 0, !dbg !46
  %shift3 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %87 = fadd <2 x float> %84, %shift3, !dbg !46
  %88 = extractelement <2 x float> %87, i64 0, !dbg !46
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %86) #1, !dbg !47
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %88) #1, !dbg !47
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !48
  %92 = bitcast float %89 to i32, !dbg !49
  %93 = bitcast float %90 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %93, ptr addrspace(1) %91, i1 %10) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjs5ju22rkjla5tlcqopxfvdblh63vx3yx4ejle36bqzwt2wgued.py", directory: "inductor_cache/js")
!4 = !{ptr @triton_poi_fused_add_div_ones_like_pow_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_ones_like_pow_sum_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_ones_like_pow_sum_0", linkageName: "triton_poi_fused_add_div_ones_like_pow_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 49, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 49, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 19, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 19, scope: !7)
!48 = !DILocation(line: 63, column: 25, scope: !7)
!49 = !DILocation(line: 63, column: 37, scope: !7)
!50 = !DILocation(line: 63, column: 4, scope: !7)
