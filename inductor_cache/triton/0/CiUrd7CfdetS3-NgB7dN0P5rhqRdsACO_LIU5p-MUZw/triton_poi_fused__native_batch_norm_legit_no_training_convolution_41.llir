; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %18 = shl i32 %17, 5, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 2, !dbg !12
  %21 = and i32 %20, 28, !dbg !12
  %22 = lshr i32 %19, 3, !dbg !12
  %23 = and i32 %22, 15, !dbg !12
  %24 = or disjoint i32 %23, 16, !dbg !12
  %25 = or disjoint i32 %18, %21, !dbg !13
  %26 = icmp slt i32 %25, 128, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %28 = shl i32 %27, 5, !dbg !16
  %29 = or disjoint i32 %28, %23, !dbg !17
  %30 = or disjoint i32 %28, %24, !dbg !17
  %31 = icmp slt i32 %29, 64, !dbg !18
  %32 = icmp slt i32 %30, 64, !dbg !18
  %.frozen = freeze i32 %25, !dbg !19
  %33 = sdiv i32 %.frozen, 32, !dbg !19
  %34 = mul i32 %33, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = shl i32 %29, 5, !dbg !21
  %36 = shl i32 %30, 5, !dbg !21
  %37 = shl i32 %33, 11, !dbg !22
  %38 = add i32 %37, %.decomposed, !dbg !23
  %39 = add i32 %38, %35, !dbg !24
  %40 = add i32 %38, %36, !dbg !24
  %41 = sext i32 %39 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %40 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = and i1 %26, %31, !dbg !26
  %46 = and i1 %26, %32, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %45) #4, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %46) #4, !dbg !27
  %49 = sext i32 %.decomposed to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !28
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %26) #4, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %26) #4, !dbg !31
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !31
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !31
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !31
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !31
  %58 = bitcast i32 %54 to float, !dbg !31
  %59 = bitcast i32 %55 to float, !dbg !31
  %60 = bitcast i32 %56 to float, !dbg !31
  %61 = bitcast i32 %57 to float, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !32
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !34
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %26) #4, !dbg !35
  %66 = fadd float %58, 0x3EE4F8B580000000, !dbg !36
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !36
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !36
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !36
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %70, 0, !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %71, 0, !dbg !37
  br i1 %.not.i, label %77, label %72, !dbg !37

72:                                               ; preds = %16
  br i1 %.not1.i, label %75, label %73, !dbg !37

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

77:                                               ; preds = %16
  br i1 %.not1.i, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !37
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %82, 0, !dbg !37
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !37
  br i1 %.not.i1, label %89, label %84, !dbg !37

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !37

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !37

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !37
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %94, 0, !dbg !37
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %95, 0, !dbg !37
  br i1 %.not.i6, label %101, label %96, !dbg !37

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !37

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !37

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %97, %99, %102, %104
  %.0.i8 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !37
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %106, 0, !dbg !37
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !37
  br i1 %.not.i11, label %113, label %108, !dbg !37

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !37

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !37

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !37
  %118 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !29
  %121 = bitcast i32 %120 to float, !dbg !29
  %122 = fsub float %119, %121, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = fsub float %124, %126, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = fsub float %129, %131, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = fsub float %134, %136, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %139 = bitcast i32 %138 to float, !dbg !27
  %140 = fsub float %139, %121, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %142 = bitcast i32 %141 to float, !dbg !27
  %143 = fsub float %142, %126, !dbg !38
  %144 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = fsub float %145, %131, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %148 = bitcast i32 %147 to float, !dbg !27
  %149 = fsub float %148, %136, !dbg !38
  %150 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !35
  %151 = bitcast i32 %150 to float, !dbg !35
  %152 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !35
  %153 = bitcast i32 %152 to float, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !35
  %155 = bitcast i32 %154 to float, !dbg !35
  %156 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !35
  %157 = bitcast i32 %156 to float, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !33
  %159 = bitcast i32 %158 to float, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !33
  %161 = bitcast i32 %160 to float, !dbg !33
  %162 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !33
  %163 = bitcast i32 %162 to float, !dbg !33
  %164 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !33
  %165 = bitcast i32 %164 to float, !dbg !33
  %166 = or disjoint i32 %28, %21, !dbg !17
  %167 = icmp slt i32 %166, 64, !dbg !18
  %168 = or disjoint i32 %18, %24, !dbg !13
  %169 = icmp slt i32 %168, 128, !dbg !14
  %170 = and i1 %169, %167, !dbg !26
  %171 = or disjoint i32 %18, %23, !dbg !13
  %172 = icmp slt i32 %171, 128, !dbg !14
  %173 = and i1 %172, %167, !dbg !26
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %178 = fmul float %149, %174, !dbg !40
  %179 = fmul float %146, %175, !dbg !40
  %180 = fmul float %143, %176, !dbg !40
  %181 = fmul float %140, %177, !dbg !40
  %182 = fmul float %137, %174, !dbg !40
  %183 = fmul float %132, %175, !dbg !40
  %184 = fmul float %127, %176, !dbg !40
  %185 = fmul float %122, %177, !dbg !40
  %186 = fmul float %178, %165, !dbg !41
  %187 = fmul float %179, %163, !dbg !41
  %188 = fmul float %180, %161, !dbg !41
  %189 = fmul float %181, %159, !dbg !41
  %190 = fmul float %182, %165, !dbg !41
  %191 = fmul float %183, %163, !dbg !41
  %192 = fmul float %184, %161, !dbg !41
  %193 = fmul float %185, %159, !dbg !41
  %194 = fadd float %186, %157, !dbg !42
  %195 = fadd float %187, %155, !dbg !42
  %196 = fadd float %188, %153, !dbg !42
  %197 = fadd float %189, %151, !dbg !42
  %198 = fadd float %190, %157, !dbg !42
  %199 = fadd float %191, %155, !dbg !42
  %200 = fadd float %192, %153, !dbg !42
  %201 = fadd float %193, %151, !dbg !42
  %202 = shl i32 %171, 6, !dbg !43
  %203 = shl i32 %168, 6, !dbg !43
  %204 = add i32 %166, %202, !dbg !44
  %205 = add i32 %166, %203, !dbg !44
  %206 = sext i32 %204 to i64, !dbg !45
  %207 = getelementptr float, ptr addrspace(1) %5, i64 %206, !dbg !45
  %208 = sext i32 %205 to i64, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !45
  %210 = shl i32 %19, 7, !dbg !46
  %211 = and i32 %210, 896, !dbg !46
  %212 = or disjoint i32 %211, %23, !dbg !46
  %213 = and i32 %20, 508, !dbg !46
  %214 = lshr exact i32 %211, 3, !dbg !46
  %215 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %214, !dbg !46
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %212, !dbg !46
  %217 = bitcast float %194 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #4, !dbg !46
  %218 = or disjoint i32 %212, 32, !dbg !46
  %219 = lshr i32 %218, 5, !dbg !46
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !46
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %218, !dbg !46
  %222 = bitcast float %195 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #4, !dbg !46
  %223 = or disjoint i32 %212, 64, !dbg !46
  %224 = lshr i32 %223, 5, !dbg !46
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !46
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %223, !dbg !46
  %227 = bitcast float %196 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !46
  %228 = or disjoint i32 %212, 96, !dbg !46
  %229 = lshr i32 %228, 5, !dbg !46
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !46
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %228, !dbg !46
  %232 = bitcast float %197 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !46
  %233 = or disjoint i32 %212, 16, !dbg !46
  %234 = getelementptr float, ptr addrspace(3) %215, i32 %233, !dbg !46
  %235 = bitcast float %198 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !46
  %236 = or disjoint i32 %212, 48, !dbg !46
  %237 = lshr i32 %236, 5, !dbg !46
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !46
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !46
  %240 = bitcast float %199 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #4, !dbg !46
  %241 = or disjoint i32 %212, 80, !dbg !46
  %242 = lshr i32 %241, 5, !dbg !46
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !46
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !46
  %245 = bitcast float %200 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !46
  %246 = or disjoint i32 %212, 112, !dbg !46
  %247 = lshr i32 %246, 5, !dbg !46
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !46
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !46
  %250 = bitcast float %201 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %251 = lshr i32 %213, 5, !dbg !46
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !46
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %213, !dbg !46
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !46
  %255 = or disjoint i32 %213, 1, !dbg !46
  %256 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %255, !dbg !46
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !46
  %258 = or disjoint i32 %213, 2, !dbg !46
  %259 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %258, !dbg !46
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !46
  %261 = or disjoint i32 %213, 3, !dbg !46
  %262 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %261, !dbg !46
  %263 = load i32, ptr addrspace(3) %262, align 4, !dbg !46
  %264 = or disjoint i32 %213, 512, !dbg !46
  %265 = lshr i32 %264, 5, !dbg !46
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !46
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %264, !dbg !46
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !46
  %269 = or disjoint i32 %213, 513, !dbg !46
  %270 = lshr i32 %269, 5, !dbg !46
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !46
  %272 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %269, !dbg !46
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !46
  %274 = or disjoint i32 %213, 514, !dbg !46
  %275 = lshr i32 %274, 5, !dbg !46
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !46
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !46
  %278 = load i32, ptr addrspace(3) %277, align 4, !dbg !46
  %279 = or disjoint i32 %213, 515, !dbg !46
  %280 = lshr i32 %279, 5, !dbg !46
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !46
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !46
  %283 = load i32, ptr addrspace(3) %282, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %257, i32 %260, i32 %263, ptr addrspace(1) %207, i1 %173) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %268, i32 %273, i32 %278, i32 %283, ptr addrspace(1) %209, i1 %170) #4, !dbg !46
  %284 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !47
  %285 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !47
  %286 = bitcast float %194 to i32, !dbg !48
  %287 = bitcast float %195 to i32, !dbg !48
  %288 = bitcast float %196 to i32, !dbg !48
  %289 = bitcast float %197 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %284, i1 %45) #4, !dbg !48
  %290 = bitcast float %198 to i32, !dbg !48
  %291 = bitcast float %199 to i32, !dbg !48
  %292 = bitcast float %200 to i32, !dbg !48
  %293 = bitcast float %201 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %285, i1 %46) #4, !dbg !48
  %294 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !49
  %295 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %294, i1 %45) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %295, i1 %46) #4, !dbg !50
  %296 = getelementptr float, ptr addrspace(1) %8, i64 %41, !dbg !51
  %297 = getelementptr float, ptr addrspace(1) %8, i64 %43, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %296, i1 %45) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %297, i1 %46) #4, !dbg !52
  %298 = getelementptr float, ptr addrspace(1) %9, i64 %41, !dbg !53
  %299 = getelementptr float, ptr addrspace(1) %9, i64 %43, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %298, i1 %45) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %299, i1 %46) #4, !dbg !54
  %300 = getelementptr float, ptr addrspace(1) %10, i64 %41, !dbg !55
  %301 = getelementptr float, ptr addrspace(1) %10, i64 %43, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %300, i1 %45) #4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %301, i1 %46) #4, !dbg !56
  %302 = getelementptr float, ptr addrspace(1) %11, i64 %41, !dbg !57
  %303 = getelementptr float, ptr addrspace(1) %11, i64 %43, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %302, i1 %45) #4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %303, i1 %46) #4, !dbg !58
  %304 = getelementptr float, ptr addrspace(1) %12, i64 %41, !dbg !59
  %305 = getelementptr float, ptr addrspace(1) %12, i64 %43, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %304, i1 %45) #4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %305, i1 %46) #4, !dbg !60
  %306 = getelementptr float, ptr addrspace(1) %13, i64 %41, !dbg !61
  %307 = getelementptr float, ptr addrspace(1) %13, i64 %43, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %306, i1 %45) #4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %307, i1 %46) #4, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvkzgni6zqqakimhxdfsudt6xklgkm6r27vcpnyq5cud54n27wdn.py", directory: "inductor_cache/vk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 61, scope: !7)
!27 = !DILocation(line: 32, column: 53, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 33, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 45, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 55, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 55, scope: !7)
!51 = !DILocation(line: 51, column: 25, scope: !7)
!52 = !DILocation(line: 51, column: 55, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 55, scope: !7)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 55, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 55, scope: !7)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 55, scope: !7)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 55, scope: !7)
!63 = !DILocation(line: 56, column: 4, scope: !7)
