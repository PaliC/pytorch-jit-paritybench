; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = sdiv i32 %9, 6, !dbg !14
  %18 = sdiv i32 %11, 6, !dbg !14
  %19 = sdiv i32 %13, 6, !dbg !14
  %20 = sdiv i32 %15, 6, !dbg !14
  %21 = srem i32 %10, 6, !dbg !15
  %22 = srem i32 %12, 6, !dbg !15
  %23 = srem i32 %14, 6, !dbg !15
  %24 = srem i32 %16, 6, !dbg !15
  %25 = sdiv i32 %9, 36, !dbg !16
  %26 = sdiv i32 %13, 36, !dbg !16
  %.tr55 = trunc nsw i32 %21 to i8, !dbg !17
  %.lhs.trunc17 = shl nsw i8 %.tr55, 1, !dbg !17
  %.tr57 = trunc nsw i32 %22 to i8, !dbg !17
  %.lhs.trunc21 = shl nsw i8 %.tr57, 1, !dbg !17
  %.tr59 = trunc nsw i32 %23 to i8, !dbg !17
  %.lhs.trunc25 = shl nsw i8 %.tr59, 1, !dbg !17
  %.tr61 = trunc nsw i32 %24 to i8, !dbg !17
  %.lhs.trunc29 = shl nsw i8 %.tr61, 1, !dbg !17
  %27 = shl nsw i8 %.tr55, 2, !dbg !18
  %.lhs.trunc33 = add nsw i8 %27, 9, !dbg !18
  %28 = insertelement <2 x i8> poison, i8 %.lhs.trunc17, i64 0, !dbg !17
  %29 = insertelement <2 x i8> %28, i8 %.lhs.trunc33, i64 1, !dbg !17
  %30 = sdiv <2 x i8> %29, <i8 3, i8 6>, !dbg !17
  %31 = extractelement <2 x i8> %30, i64 0, !dbg !19
  %.sext18 = sext i8 %31 to i32, !dbg !17
  %32 = extractelement <2 x i8> %30, i64 1, !dbg !19
  %.sext34 = sext i8 %32 to i32, !dbg !18
  %33 = shl nsw i8 %.tr57, 2, !dbg !18
  %.lhs.trunc37 = add nsw i8 %33, 9, !dbg !18
  %34 = insertelement <2 x i8> poison, i8 %.lhs.trunc21, i64 0, !dbg !17
  %35 = insertelement <2 x i8> %34, i8 %.lhs.trunc37, i64 1, !dbg !17
  %36 = sdiv <2 x i8> %35, <i8 3, i8 6>, !dbg !17
  %37 = extractelement <2 x i8> %36, i64 0, !dbg !19
  %.sext22 = sext i8 %37 to i32, !dbg !17
  %38 = extractelement <2 x i8> %36, i64 1, !dbg !19
  %.sext38 = sext i8 %38 to i32, !dbg !18
  %39 = shl nsw i8 %.tr59, 2, !dbg !18
  %.lhs.trunc41 = add nsw i8 %39, 9, !dbg !18
  %40 = insertelement <2 x i8> poison, i8 %.lhs.trunc25, i64 0, !dbg !17
  %41 = insertelement <2 x i8> %40, i8 %.lhs.trunc41, i64 1, !dbg !17
  %42 = sdiv <2 x i8> %41, <i8 3, i8 6>, !dbg !17
  %43 = extractelement <2 x i8> %42, i64 0, !dbg !19
  %.sext26 = sext i8 %43 to i32, !dbg !17
  %44 = extractelement <2 x i8> %42, i64 1, !dbg !19
  %.sext42 = sext i8 %44 to i32, !dbg !18
  %45 = shl nsw i8 %.tr61, 2, !dbg !18
  %.lhs.trunc45 = add nsw i8 %45, 9, !dbg !18
  %46 = insertelement <2 x i8> poison, i8 %.lhs.trunc29, i64 0, !dbg !17
  %47 = insertelement <2 x i8> %46, i8 %.lhs.trunc45, i64 1, !dbg !17
  %48 = sdiv <2 x i8> %47, <i8 3, i8 6>, !dbg !17
  %49 = extractelement <2 x i8> %48, i64 0, !dbg !19
  %.sext30 = sext i8 %49 to i32, !dbg !17
  %50 = extractelement <2 x i8> %48, i64 1, !dbg !19
  %.sext46 = sext i8 %50 to i32, !dbg !18
  %51 = icmp slt i8 %31, %32, !dbg !19
  %52 = icmp slt i8 %37, %38, !dbg !19
  %53 = icmp slt i8 %43, %44, !dbg !19
  %54 = icmp slt i8 %49, %50, !dbg !19
  %55 = shl nsw i32 %25, 4, !dbg !20
  %56 = shl nsw i32 %26, 4, !dbg !20
  %57 = add nsw i32 %.sext18, 1, !dbg !21
  %58 = add nsw i32 %.sext22, 1, !dbg !21
  %59 = add nsw i32 %.sext26, 1, !dbg !21
  %60 = add nsw i32 %.sext30, 1, !dbg !21
  %61 = icmp slt i32 %57, %.sext34, !dbg !22
  %62 = icmp slt i32 %58, %.sext38, !dbg !22
  %63 = icmp slt i32 %59, %.sext42, !dbg !22
  %64 = icmp slt i32 %60, %.sext46, !dbg !22
  %65 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %66 = insertelement <2 x i32> %65, i32 %17, i64 1, !dbg !15
  %67 = srem <2 x i32> %66, splat (i32 6), !dbg !15
  %68 = trunc nsw <2 x i32> %67 to <2 x i8>, !dbg !17
  %69 = shl nsw <2 x i8> %68, splat (i8 1), !dbg !17
  %70 = sdiv <2 x i8> %69, splat (i8 3), !dbg !17
  %71 = shl nsw <2 x i8> %68, splat (i8 2), !dbg !18
  %72 = add nsw <2 x i8> %71, splat (i8 9), !dbg !18
  %73 = sdiv <2 x i8> %72, splat (i8 6), !dbg !18
  %74 = sext <2 x i8> %70 to <2 x i32>, !dbg !17
  %75 = icmp slt <2 x i8> %70, %73, !dbg !19
  %76 = extractelement <2 x i1> %75, i64 0, !dbg !23
  %77 = extractelement <2 x i1> %75, i64 1, !dbg !23
  %78 = and i1 %76, %77, !dbg !23
  %79 = and i1 %51, %77, !dbg !23
  %80 = extractelement <2 x i32> %74, i64 1, !dbg !24
  %81 = shl nsw i32 %80, 2, !dbg !24
  %82 = add nsw i32 %81, %55, !dbg !25
  %83 = extractelement <2 x i32> %74, i64 0, !dbg !26
  %84 = add nsw i32 %82, %83, !dbg !26
  %85 = add nsw i32 %82, %.sext18, !dbg !26
  %86 = sext i32 %84 to i64, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !27
  %88 = sext i32 %85 to i64, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !27
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %78, i32 0, i1 %78) #1, !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %79, i32 0, i1 %79) #1, !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = add nsw <2 x i32> %74, splat (i32 1), !dbg !21
  %95 = sext <2 x i8> %73 to <2 x i32>, !dbg !22
  %96 = icmp slt <2 x i32> %94, %95, !dbg !22
  %97 = extractelement <2 x i1> %96, i64 0, !dbg !29
  %98 = and i1 %77, %97, !dbg !30
  %99 = and i1 %61, %77, !dbg !30
  %100 = or disjoint i32 %81, 1, !dbg !31
  %101 = add nsw i32 %100, %55, !dbg !32
  %102 = add nsw i32 %101, %83, !dbg !33
  %103 = add nsw i32 %101, %.sext18, !dbg !33
  %104 = sext i32 %102 to i64, !dbg !34
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !34
  %106 = sext i32 %103 to i64, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !34
  %108 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %109 = insertelement <2 x i32> %108, i32 %18, i64 1, !dbg !15
  %110 = srem <2 x i32> %109, splat (i32 6), !dbg !15
  %111 = trunc nsw <2 x i32> %110 to <2 x i8>, !dbg !17
  %112 = shl nsw <2 x i8> %111, splat (i8 1), !dbg !17
  %113 = sdiv <2 x i8> %112, splat (i8 3), !dbg !17
  %114 = shl nsw <2 x i8> %111, splat (i8 2), !dbg !18
  %115 = add nsw <2 x i8> %114, splat (i8 9), !dbg !18
  %116 = sdiv <2 x i8> %115, splat (i8 6), !dbg !18
  %117 = sext <2 x i8> %113 to <2 x i32>, !dbg !17
  %118 = icmp slt <2 x i8> %113, %116, !dbg !19
  %119 = extractelement <2 x i1> %118, i64 0, !dbg !23
  %120 = extractelement <2 x i1> %118, i64 1, !dbg !23
  %121 = and i1 %119, %120, !dbg !23
  %122 = and i1 %52, %120, !dbg !23
  %123 = extractelement <2 x i32> %117, i64 1, !dbg !24
  %124 = shl nsw i32 %123, 2, !dbg !24
  %125 = add nsw i32 %55, %124, !dbg !25
  %126 = extractelement <2 x i32> %117, i64 0, !dbg !26
  %127 = add nsw i32 %125, %126, !dbg !26
  %128 = add nsw i32 %125, %.sext22, !dbg !26
  %129 = sext i32 %127 to i64, !dbg !27
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !27
  %131 = sext i32 %128 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !27
  %133 = add nsw <2 x i32> %117, splat (i32 1), !dbg !21
  %134 = sext <2 x i8> %116 to <2 x i32>, !dbg !22
  %135 = icmp slt <2 x i32> %133, %134, !dbg !22
  %136 = extractelement <2 x i1> %135, i64 0, !dbg !29
  %137 = and i1 %120, %136, !dbg !30
  %138 = and i1 %120, %62, !dbg !30
  %139 = or disjoint i32 %124, 1, !dbg !31
  %140 = add nsw i32 %55, %139, !dbg !32
  %141 = add nsw i32 %140, %126, !dbg !33
  %142 = add nsw i32 %140, %.sext22, !dbg !33
  %143 = sext i32 %141 to i64, !dbg !34
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !34
  %145 = sext i32 %142 to i64, !dbg !34
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !34
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %121, i32 0, i1 %121) #1, !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %122, i32 0, i1 %122) #1, !dbg !28
  %150 = bitcast i32 %149 to float, !dbg !28
  %151 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !15
  %152 = insertelement <2 x i32> %151, i32 %19, i64 1, !dbg !15
  %153 = srem <2 x i32> %152, splat (i32 6), !dbg !15
  %154 = trunc nsw <2 x i32> %153 to <2 x i8>, !dbg !17
  %155 = shl nsw <2 x i8> %154, splat (i8 1), !dbg !17
  %156 = sdiv <2 x i8> %155, splat (i8 3), !dbg !17
  %157 = shl nsw <2 x i8> %154, splat (i8 2), !dbg !18
  %158 = add nsw <2 x i8> %157, splat (i8 9), !dbg !18
  %159 = sdiv <2 x i8> %158, splat (i8 6), !dbg !18
  %160 = sext <2 x i8> %156 to <2 x i32>, !dbg !17
  %161 = icmp slt <2 x i8> %156, %159, !dbg !19
  %162 = extractelement <2 x i1> %161, i64 0, !dbg !23
  %163 = extractelement <2 x i1> %161, i64 1, !dbg !23
  %164 = and i1 %162, %163, !dbg !23
  %165 = and i1 %53, %163, !dbg !23
  %166 = extractelement <2 x i32> %160, i64 1, !dbg !24
  %167 = shl nsw i32 %166, 2, !dbg !24
  %168 = add nsw i32 %167, %56, !dbg !25
  %169 = extractelement <2 x i32> %160, i64 0, !dbg !26
  %170 = add nsw i32 %168, %169, !dbg !26
  %171 = add nsw i32 %168, %.sext26, !dbg !26
  %172 = sext i32 %170 to i64, !dbg !27
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !27
  %174 = sext i32 %171 to i64, !dbg !27
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !27
  %176 = add nsw <2 x i32> %160, splat (i32 1), !dbg !21
  %177 = sext <2 x i8> %159 to <2 x i32>, !dbg !22
  %178 = icmp slt <2 x i32> %176, %177, !dbg !22
  %179 = extractelement <2 x i1> %178, i64 0, !dbg !29
  %180 = and i1 %163, %179, !dbg !30
  %181 = and i1 %163, %63, !dbg !30
  %182 = or disjoint i32 %167, 1, !dbg !31
  %183 = add nsw i32 %182, %56, !dbg !32
  %184 = add nsw i32 %183, %169, !dbg !33
  %185 = add nsw i32 %183, %.sext26, !dbg !33
  %186 = sext i32 %184 to i64, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !34
  %188 = sext i32 %185 to i64, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !34
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %164, i32 0, i1 %164) #1, !dbg !28
  %191 = bitcast i32 %190 to float, !dbg !28
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %165, i32 0, i1 %165) #1, !dbg !28
  %193 = bitcast i32 %192 to float, !dbg !28
  %194 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !15
  %195 = insertelement <2 x i32> %194, i32 %20, i64 1, !dbg !15
  %196 = srem <2 x i32> %195, splat (i32 6), !dbg !15
  %197 = trunc nsw <2 x i32> %196 to <2 x i8>, !dbg !17
  %198 = shl nsw <2 x i8> %197, splat (i8 1), !dbg !17
  %199 = sdiv <2 x i8> %198, splat (i8 3), !dbg !17
  %200 = shl nsw <2 x i8> %197, splat (i8 2), !dbg !18
  %201 = add nsw <2 x i8> %200, splat (i8 9), !dbg !18
  %202 = sdiv <2 x i8> %201, splat (i8 6), !dbg !18
  %203 = sext <2 x i8> %199 to <2 x i32>, !dbg !17
  %204 = icmp slt <2 x i8> %199, %202, !dbg !19
  %205 = extractelement <2 x i1> %204, i64 0, !dbg !23
  %206 = extractelement <2 x i1> %204, i64 1, !dbg !23
  %207 = and i1 %205, %206, !dbg !23
  %208 = and i1 %54, %206, !dbg !23
  %209 = extractelement <2 x i32> %203, i64 1, !dbg !24
  %210 = shl nsw i32 %209, 2, !dbg !24
  %211 = add nsw i32 %210, %56, !dbg !25
  %212 = extractelement <2 x i32> %203, i64 0, !dbg !26
  %213 = add nsw i32 %211, %212, !dbg !26
  %214 = add nsw i32 %211, %.sext30, !dbg !26
  %215 = sext i32 %213 to i64, !dbg !27
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !27
  %217 = sext i32 %214 to i64, !dbg !27
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !27
  %219 = add nsw <2 x i32> %203, splat (i32 1), !dbg !21
  %220 = sext <2 x i8> %202 to <2 x i32>, !dbg !22
  %221 = icmp slt <2 x i32> %219, %220, !dbg !22
  %222 = extractelement <2 x i1> %221, i64 0, !dbg !29
  %223 = and i1 %206, %222, !dbg !30
  %224 = and i1 %206, %64, !dbg !30
  %225 = or disjoint i32 %210, 1, !dbg !31
  %226 = add nsw i32 %225, %56, !dbg !32
  %227 = add nsw i32 %226, %212, !dbg !33
  %228 = add nsw i32 %226, %.sext30, !dbg !33
  %229 = sext i32 %227 to i64, !dbg !34
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !34
  %231 = sext i32 %228 to i64, !dbg !34
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !34
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %207, i32 0, i1 %207) #1, !dbg !28
  %234 = bitcast i32 %233 to float, !dbg !28
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %208, i32 0, i1 %208) #1, !dbg !28
  %236 = bitcast i32 %235 to float, !dbg !28
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %98, i32 0, i1 %98) #1, !dbg !35
  %238 = bitcast i32 %237 to float, !dbg !35
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %99, i32 0, i1 %99) #1, !dbg !35
  %240 = bitcast i32 %239 to float, !dbg !35
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %137, i32 0, i1 %137) #1, !dbg !35
  %242 = bitcast i32 %241 to float, !dbg !35
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %138, i32 0, i1 %138) #1, !dbg !35
  %244 = bitcast i32 %243 to float, !dbg !35
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %180, i32 0, i1 %180) #1, !dbg !35
  %246 = bitcast i32 %245 to float, !dbg !35
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %181, i32 0, i1 %181) #1, !dbg !35
  %248 = bitcast i32 %247 to float, !dbg !35
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %223, i32 0, i1 %223) #1, !dbg !35
  %250 = bitcast i32 %249 to float, !dbg !35
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %224, i32 0, i1 %224) #1, !dbg !35
  %252 = bitcast i32 %251 to float, !dbg !35
  %253 = fadd float %91, %238, !dbg !36
  %254 = fadd float %93, %240, !dbg !36
  %255 = fadd float %148, %242, !dbg !36
  %256 = fadd float %150, %244, !dbg !36
  %257 = fadd float %191, %246, !dbg !36
  %258 = fadd float %193, %248, !dbg !36
  %259 = fadd float %234, %250, !dbg !36
  %260 = fadd float %236, %252, !dbg !36
  %261 = extractelement <2 x i1> %96, i64 1, !dbg !29
  %262 = and i1 %76, %261, !dbg !37
  %263 = and i1 %51, %261, !dbg !37
  %264 = extractelement <2 x i1> %135, i64 1, !dbg !29
  %265 = and i1 %119, %264, !dbg !37
  %266 = and i1 %52, %264, !dbg !37
  %267 = extractelement <2 x i1> %178, i64 1, !dbg !29
  %268 = and i1 %162, %267, !dbg !37
  %269 = and i1 %53, %267, !dbg !37
  %270 = extractelement <2 x i1> %221, i64 1, !dbg !29
  %271 = and i1 %205, %270, !dbg !37
  %272 = and i1 %54, %270, !dbg !37
  %273 = add nsw i32 %82, 4, !dbg !38
  %274 = add nsw i32 %125, 4, !dbg !38
  %275 = add nsw i32 %168, 4, !dbg !38
  %276 = add nsw i32 %211, 4, !dbg !38
  %277 = add nsw i32 %273, %83, !dbg !39
  %278 = add nsw i32 %273, %.sext18, !dbg !39
  %279 = add nsw i32 %274, %126, !dbg !39
  %280 = add nsw i32 %274, %.sext22, !dbg !39
  %281 = add nsw i32 %275, %169, !dbg !39
  %282 = add nsw i32 %275, %.sext26, !dbg !39
  %283 = add nsw i32 %276, %212, !dbg !39
  %284 = add nsw i32 %276, %.sext30, !dbg !39
  %285 = sext i32 %277 to i64, !dbg !40
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !40
  %287 = sext i32 %278 to i64, !dbg !40
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !40
  %289 = sext i32 %279 to i64, !dbg !40
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !40
  %291 = sext i32 %280 to i64, !dbg !40
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !40
  %293 = sext i32 %281 to i64, !dbg !40
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !40
  %295 = sext i32 %282 to i64, !dbg !40
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !40
  %297 = sext i32 %283 to i64, !dbg !40
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !40
  %299 = sext i32 %284 to i64, !dbg !40
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !40
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 %262, i32 0, i1 %262) #1, !dbg !41
  %302 = bitcast i32 %301 to float, !dbg !41
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %263, i32 0, i1 %263) #1, !dbg !41
  %304 = bitcast i32 %303 to float, !dbg !41
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %265, i32 0, i1 %265) #1, !dbg !41
  %306 = bitcast i32 %305 to float, !dbg !41
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %266, i32 0, i1 %266) #1, !dbg !41
  %308 = bitcast i32 %307 to float, !dbg !41
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %268, i32 0, i1 %268) #1, !dbg !41
  %310 = bitcast i32 %309 to float, !dbg !41
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %296, i1 %269, i32 0, i1 %269) #1, !dbg !41
  %312 = bitcast i32 %311 to float, !dbg !41
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %271, i32 0, i1 %271) #1, !dbg !41
  %314 = bitcast i32 %313 to float, !dbg !41
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %300, i1 %272, i32 0, i1 %272) #1, !dbg !41
  %316 = bitcast i32 %315 to float, !dbg !41
  %317 = fadd float %253, %302, !dbg !42
  %318 = fadd float %254, %304, !dbg !42
  %319 = fadd float %255, %306, !dbg !42
  %320 = fadd float %256, %308, !dbg !42
  %321 = fadd float %257, %310, !dbg !42
  %322 = fadd float %258, %312, !dbg !42
  %323 = fadd float %259, %314, !dbg !42
  %324 = fadd float %260, %316, !dbg !42
  %325 = and i1 %97, %261, !dbg !29
  %326 = and i1 %61, %261, !dbg !29
  %327 = and i1 %136, %264, !dbg !29
  %328 = and i1 %62, %264, !dbg !29
  %329 = and i1 %179, %267, !dbg !29
  %330 = and i1 %63, %267, !dbg !29
  %331 = and i1 %222, %270, !dbg !29
  %332 = and i1 %64, %270, !dbg !29
  %333 = add nsw i32 %82, 5, !dbg !43
  %334 = add nsw i32 %125, 5, !dbg !43
  %335 = add nsw i32 %168, 5, !dbg !43
  %336 = add nsw i32 %211, 5, !dbg !43
  %337 = add nsw i32 %333, %83, !dbg !44
  %338 = add nsw i32 %333, %.sext18, !dbg !44
  %339 = add nsw i32 %334, %126, !dbg !44
  %340 = add nsw i32 %334, %.sext22, !dbg !44
  %341 = add nsw i32 %335, %169, !dbg !44
  %342 = add nsw i32 %335, %.sext26, !dbg !44
  %343 = add nsw i32 %336, %212, !dbg !44
  %344 = add nsw i32 %336, %.sext30, !dbg !44
  %345 = sext i32 %337 to i64, !dbg !45
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !45
  %347 = sext i32 %338 to i64, !dbg !45
  %348 = getelementptr float, ptr addrspace(1) %0, i64 %347, !dbg !45
  %349 = sext i32 %339 to i64, !dbg !45
  %350 = getelementptr float, ptr addrspace(1) %0, i64 %349, !dbg !45
  %351 = sext i32 %340 to i64, !dbg !45
  %352 = getelementptr float, ptr addrspace(1) %0, i64 %351, !dbg !45
  %353 = sext i32 %341 to i64, !dbg !45
  %354 = getelementptr float, ptr addrspace(1) %0, i64 %353, !dbg !45
  %355 = sext i32 %342 to i64, !dbg !45
  %356 = getelementptr float, ptr addrspace(1) %0, i64 %355, !dbg !45
  %357 = sext i32 %343 to i64, !dbg !45
  %358 = getelementptr float, ptr addrspace(1) %0, i64 %357, !dbg !45
  %359 = sext i32 %344 to i64, !dbg !45
  %360 = getelementptr float, ptr addrspace(1) %0, i64 %359, !dbg !45
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %346, i1 %325, i32 0, i1 %325) #1, !dbg !46
  %362 = bitcast i32 %361 to float, !dbg !46
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %348, i1 %326, i32 0, i1 %326) #1, !dbg !46
  %364 = bitcast i32 %363 to float, !dbg !46
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %350, i1 %327, i32 0, i1 %327) #1, !dbg !46
  %366 = bitcast i32 %365 to float, !dbg !46
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %352, i1 %328, i32 0, i1 %328) #1, !dbg !46
  %368 = bitcast i32 %367 to float, !dbg !46
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %354, i1 %329, i32 0, i1 %329) #1, !dbg !46
  %370 = bitcast i32 %369 to float, !dbg !46
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %356, i1 %330, i32 0, i1 %330) #1, !dbg !46
  %372 = bitcast i32 %371 to float, !dbg !46
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %358, i1 %331, i32 0, i1 %331) #1, !dbg !46
  %374 = bitcast i32 %373 to float, !dbg !46
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %360, i1 %332, i32 0, i1 %332) #1, !dbg !46
  %376 = bitcast i32 %375 to float, !dbg !46
  %377 = fadd float %317, %362, !dbg !47
  %378 = fadd float %318, %364, !dbg !47
  %379 = fadd float %319, %366, !dbg !47
  %380 = fadd float %320, %368, !dbg !47
  %381 = fadd float %321, %370, !dbg !47
  %382 = fadd float %322, %372, !dbg !47
  %383 = fadd float %323, %374, !dbg !47
  %384 = fadd float %324, %376, !dbg !47
  %385 = select i1 %78, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %386 = select i1 %79, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %387 = select i1 %121, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %388 = select i1 %122, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %389 = select i1 %164, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %390 = select i1 %165, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %391 = select i1 %207, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %392 = select i1 %208, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %393 = select i1 %98, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %394 = select i1 %99, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %395 = select i1 %137, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %396 = select i1 %138, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %397 = select i1 %180, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %398 = select i1 %181, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %399 = select i1 %223, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %400 = select i1 %224, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %401 = fadd float %393, %385, !dbg !50
  %402 = fadd float %394, %386, !dbg !50
  %403 = fadd float %395, %387, !dbg !50
  %404 = fadd float %396, %388, !dbg !50
  %405 = fadd float %397, %389, !dbg !50
  %406 = fadd float %398, %390, !dbg !50
  %407 = fadd float %399, %391, !dbg !50
  %408 = fadd float %400, %392, !dbg !50
  %409 = select i1 %262, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %410 = select i1 %263, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %411 = select i1 %265, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %412 = select i1 %266, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %413 = select i1 %268, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %414 = select i1 %269, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %415 = select i1 %271, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %416 = select i1 %272, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %417 = fadd float %409, %401, !dbg !52
  %418 = fadd float %410, %402, !dbg !52
  %419 = fadd float %411, %403, !dbg !52
  %420 = fadd float %412, %404, !dbg !52
  %421 = fadd float %413, %405, !dbg !52
  %422 = fadd float %414, %406, !dbg !52
  %423 = fadd float %415, %407, !dbg !52
  %424 = fadd float %416, %408, !dbg !52
  %425 = select i1 %325, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %426 = select i1 %326, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %427 = select i1 %327, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %428 = select i1 %328, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %429 = select i1 %329, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %430 = select i1 %330, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %431 = select i1 %331, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %432 = select i1 %332, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %433 = fadd float %425, %417, !dbg !54
  %434 = fadd float %426, %418, !dbg !54
  %435 = fadd float %427, %419, !dbg !54
  %436 = fadd float %428, %420, !dbg !54
  %437 = fadd float %429, %421, !dbg !54
  %438 = fadd float %430, %422, !dbg !54
  %439 = fadd float %431, %423, !dbg !54
  %440 = fadd float %432, %424, !dbg !54
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %433) #1, !dbg !55
  %442 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %434) #1, !dbg !55
  %443 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float %435) #1, !dbg !55
  %444 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %436) #1, !dbg !55
  %445 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float %437) #1, !dbg !55
  %446 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %438) #1, !dbg !55
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %439) #1, !dbg !55
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %384, float %440) #1, !dbg !55
  %449 = sext i32 %9 to i64, !dbg !56
  %450 = getelementptr float, ptr addrspace(1) %1, i64 %449, !dbg !56
  %451 = sext i32 %13 to i64, !dbg !56
  %452 = getelementptr float, ptr addrspace(1) %1, i64 %451, !dbg !56
  %453 = bitcast float %441 to i32, !dbg !57
  %454 = bitcast float %442 to i32, !dbg !57
  %455 = bitcast float %443 to i32, !dbg !57
  %456 = bitcast float %444 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %454, i32 %455, i32 %456, ptr addrspace(1) %450, i1 true) #1, !dbg !57
  %457 = bitcast float %445 to i32, !dbg !57
  %458 = bitcast float %446 to i32, !dbg !57
  %459 = bitcast float %447 to i32, !dbg !57
  %460 = bitcast float %448 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %457, i32 %458, i32 %459, i32 %460, ptr addrspace(1) %452, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqq5nfs2ol2cx5msnt3rpsupkf57clhjdmkovi7crff7mi4d6gab.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_17", linkageName: "triton_poi_fused__adaptive_avg_pool2d_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 25, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 51, scope: !7)
!21 = !DILocation(line: 36, column: 16, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 35, column: 48, scope: !7)
!26 = !DILocation(line: 35, column: 57, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 72, scope: !7)
!29 = !DILocation(line: 46, column: 20, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 35, scope: !7)
!32 = !DILocation(line: 39, column: 53, scope: !7)
!33 = !DILocation(line: 39, column: 62, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 77, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 53, scope: !7)
!39 = !DILocation(line: 44, column: 62, scope: !7)
!40 = !DILocation(line: 44, column: 31, scope: !7)
!41 = !DILocation(line: 44, column: 77, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 53, scope: !7)
!44 = !DILocation(line: 47, column: 62, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 77, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 34, scope: !7)
!49 = !DILocation(line: 54, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 35, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 35, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 65, column: 37, scope: !7)
!58 = !DILocation(line: 65, column: 4, scope: !7)
