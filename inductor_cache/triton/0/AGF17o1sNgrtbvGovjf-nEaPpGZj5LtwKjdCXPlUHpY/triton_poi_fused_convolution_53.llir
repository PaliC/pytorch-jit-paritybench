; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = or disjoint i32 %10, 64, !dbg !12
  %12 = or disjoint i32 %10, 128, !dbg !12
  %13 = or disjoint i32 %10, 192, !dbg !12
  %14 = and i32 %8, 255, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 1020, !dbg !14
  %21 = icmp slt i32 %16, 1020, !dbg !14
  %22 = icmp slt i32 %17, 1020, !dbg !14
  %23 = icmp slt i32 %18, 1020, !dbg !14
  %24 = icmp slt i32 %19, 1020, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 4, !dbg !16
  %27 = shl i32 %8, 2, !dbg !17
  %28 = and i32 %27, 12, !dbg !17
  %29 = or disjoint i32 %26, %28, !dbg !18
  %30 = icmp slt i32 %29, 16, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %31 = sdiv i32 %.frozen, 255, !dbg !20
  %32 = mul i32 %31, 255, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %.frozen7 = freeze i32 %16, !dbg !20
  %33 = sdiv i32 %.frozen7, 255, !dbg !20
  %34 = mul i32 %33, 255, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %34, !dbg !21
  %.frozen9 = freeze i32 %17, !dbg !20
  %35 = sdiv i32 %.frozen9, 255, !dbg !20
  %36 = mul i32 %35, 255, !dbg !21
  %.decomposed10 = sub i32 %.frozen9, %36, !dbg !21
  %.frozen11 = freeze i32 %18, !dbg !20
  %37 = sdiv i32 %.frozen11, 255, !dbg !20
  %38 = mul i32 %37, 255, !dbg !21
  %.decomposed12 = sub i32 %.frozen11, %38, !dbg !21
  %39 = srem i32 %19, 255, !dbg !21
  %40 = mul i32 %29, 255, !dbg !22
  %41 = add i32 %40, 255, !dbg !22
  %42 = add i32 %40, 510, !dbg !22
  %43 = add i32 %40, 765, !dbg !22
  %44 = mul i32 %31, 4080, !dbg !23
  %45 = mul i32 %33, 4080, !dbg !23
  %46 = mul i32 %35, 4080, !dbg !23
  %47 = mul i32 %37, 4080, !dbg !23
  %48 = add i32 %44, %.decomposed, !dbg !24
  %49 = add i32 %48, %40, !dbg !25
  %50 = add i32 %48, %41, !dbg !25
  %51 = add i32 %48, %42, !dbg !25
  %52 = add i32 %48, %43, !dbg !25
  %53 = add i32 %45, %.decomposed8, !dbg !24
  %54 = add i32 %53, %40, !dbg !25
  %55 = add i32 %53, %41, !dbg !25
  %56 = add i32 %53, %42, !dbg !25
  %57 = add i32 %53, %43, !dbg !25
  %58 = add i32 %46, %.decomposed10, !dbg !24
  %59 = add i32 %58, %40, !dbg !25
  %60 = add i32 %58, %41, !dbg !25
  %61 = add i32 %58, %42, !dbg !25
  %62 = add i32 %58, %43, !dbg !25
  %63 = add i32 %47, %.decomposed12, !dbg !24
  %64 = add i32 %63, %40, !dbg !25
  %65 = add i32 %63, %41, !dbg !25
  %66 = add i32 %63, %42, !dbg !25
  %67 = add i32 %63, %43, !dbg !25
  %68 = sext i32 %49 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !26
  %70 = sext i32 %50 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %51 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %52 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %54 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %55 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = sext i32 %56 to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !26
  %82 = sext i32 %57 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !26
  %84 = sext i32 %59 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !26
  %86 = sext i32 %60 to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !26
  %88 = sext i32 %61 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !26
  %90 = sext i32 %62 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !26
  %92 = sext i32 %64 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !26
  %94 = sext i32 %65 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !26
  %96 = sext i32 %66 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !26
  %98 = sext i32 %67 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !26
  %100 = and i1 %20, %30, !dbg !27
  %101 = and i1 %21, %30, !dbg !27
  %102 = and i1 %22, %30, !dbg !27
  %103 = and i1 %23, %30, !dbg !27
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %100) #2, !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %100) #2, !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %100) #2, !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %100) #2, !dbg !28
  %111 = bitcast i32 %110 to float, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %101) #2, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %101) #2, !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %101) #2, !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %101) #2, !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %102) #2, !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %102) #2, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %102) #2, !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %102) #2, !dbg !28
  %127 = bitcast i32 %126 to float, !dbg !28
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %103) #2, !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %103) #2, !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %103) #2, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %103) #2, !dbg !28
  %135 = bitcast i32 %134 to float, !dbg !28
  %136 = sext i32 %39 to i64, !dbg !29
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %24) #2, !dbg !30
  %.idx = shl nuw nsw i32 %14, 3, !dbg !31
  %139 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %140 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx3 = shl nuw nsw i32 %10, 3, !dbg !31
  %141 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !31
  %142 = load float, ptr addrspace(3) %141, align 8, !dbg !31
  %.idx4 = shl nuw nsw i32 %11, 3, !dbg !31
  %143 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %144 = load float, ptr addrspace(3) %143, align 8, !dbg !31
  %.idx5 = shl nuw nsw i32 %12, 3, !dbg !31
  %145 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !31
  %146 = load float, ptr addrspace(3) %145, align 8, !dbg !31
  %.idx6 = shl nuw nsw i32 %13, 3, !dbg !31
  %147 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !31
  %148 = load float, ptr addrspace(3) %147, align 8, !dbg !31
  %149 = fadd float %142, %105, !dbg !31
  %150 = fadd float %142, %107, !dbg !31
  %151 = fadd float %142, %109, !dbg !31
  %152 = fadd float %142, %111, !dbg !31
  %153 = fadd float %144, %113, !dbg !31
  %154 = fadd float %144, %115, !dbg !31
  %155 = fadd float %144, %117, !dbg !31
  %156 = fadd float %144, %119, !dbg !31
  %157 = fadd float %146, %121, !dbg !31
  %158 = fadd float %146, %123, !dbg !31
  %159 = fadd float %146, %125, !dbg !31
  %160 = fadd float %146, %127, !dbg !31
  %161 = fadd float %148, %129, !dbg !31
  %162 = fadd float %148, %131, !dbg !31
  %163 = fadd float %148, %133, !dbg !31
  %164 = fadd float %148, %135, !dbg !31
  %165 = shl i32 %15, 4, !dbg !32
  %166 = shl i32 %16, 4, !dbg !32
  %167 = shl i32 %17, 4, !dbg !32
  %168 = shl i32 %18, 4, !dbg !32
  %169 = add i32 %29, %165, !dbg !33
  %170 = add i32 %29, %166, !dbg !33
  %171 = add i32 %29, %167, !dbg !33
  %172 = add i32 %29, %168, !dbg !33
  %173 = sext i32 %169 to i64, !dbg !34
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !34
  %175 = sext i32 %170 to i64, !dbg !34
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !34
  %177 = sext i32 %171 to i64, !dbg !34
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !34
  %179 = sext i32 %172 to i64, !dbg !34
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !34
  %181 = bitcast float %149 to i32, !dbg !35
  %182 = bitcast float %150 to i32, !dbg !35
  %183 = bitcast float %151 to i32, !dbg !35
  %184 = bitcast float %152 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %174, i1 %100) #2, !dbg !35
  %185 = bitcast float %153 to i32, !dbg !35
  %186 = bitcast float %154 to i32, !dbg !35
  %187 = bitcast float %155 to i32, !dbg !35
  %188 = bitcast float %156 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %186, i32 %187, i32 %188, ptr addrspace(1) %176, i1 %101) #2, !dbg !35
  %189 = bitcast float %157 to i32, !dbg !35
  %190 = bitcast float %158 to i32, !dbg !35
  %191 = bitcast float %159 to i32, !dbg !35
  %192 = bitcast float %160 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %189, i32 %190, i32 %191, i32 %192, ptr addrspace(1) %178, i1 %102) #2, !dbg !35
  %193 = bitcast float %161 to i32, !dbg !35
  %194 = bitcast float %162 to i32, !dbg !35
  %195 = bitcast float %163 to i32, !dbg !35
  %196 = bitcast float %164 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %193, i32 %194, i32 %195, i32 %196, ptr addrspace(1) %180, i1 %103) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq7mhlfdc32s4umaqsxoj4tp4xjqoceyolnyrg62k5kokm6g7kmw.py", directory: "inductor_cache/q7")
!4 = !{ptr @triton_poi_fused_convolution_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_53, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_53", linkageName: "triton_poi_fused_convolution_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 33, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 44, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
