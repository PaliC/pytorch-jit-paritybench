; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 256, !dbg !14
  %16 = sdiv i32 %13, 4, !dbg !15
  %17 = srem i32 %14, 4, !dbg !16
  %18 = sdiv i32 %13, 16, !dbg !17
  %19 = srem i32 %18, 4, !dbg !18
  %20 = sdiv i32 %13, 64, !dbg !19
  %21 = sext i32 %13 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !20
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %15) #2, !dbg !21
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !21
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !21
  %26 = bitcast i32 %24 to float, !dbg !21
  %27 = bitcast i32 %25 to float, !dbg !21
  %28 = sitofp i32 %17 to float, !dbg !22
  %29 = fadd float %28, 5.000000e-01, !dbg !23
  %30 = fadd float %29, -5.000000e-01, !dbg !24
  %31 = fcmp ogt float %30, 0.000000e+00, !dbg !25
  %32 = select i1 %31, float %30, float 0.000000e+00, !dbg !29
  %33 = fptosi float %32 to i32, !dbg !30
  %34 = shl nsw i32 %20, 6, !dbg !31
  %35 = shl i32 %33, 2, !dbg !32
  %36 = add i32 %19, %35, !dbg !33
  %37 = sext i32 %36 to i64, !dbg !34
  %38 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !35
  %39 = insertelement <2 x i32> %38, i32 %13, i64 1, !dbg !35
  %40 = srem <2 x i32> %39, splat (i32 4), !dbg !35
  %41 = sitofp <2 x i32> %40 to <2 x float>, !dbg !36
  %42 = fadd <2 x float> %41, splat (float 5.000000e-01), !dbg !37
  %43 = fadd <2 x float> %42, splat (float -5.000000e-01), !dbg !38
  %44 = fcmp ogt <2 x float> %43, zeroinitializer, !dbg !39
  %45 = select <2 x i1> %44, <2 x float> %43, <2 x float> zeroinitializer, !dbg !41
  %46 = fptosi <2 x float> %45 to <2 x i32>, !dbg !42
  %47 = extractelement <2 x i32> %46, i64 0, !dbg !42
  %48 = extractelement <2 x i32> %46, i64 1, !dbg !43
  %49 = tail call i32 @llvm.smin.i32(i32 %48, i32 2), !dbg !43
  %narrow1 = add nsw i32 %49, 1, !dbg !43
  %50 = sext i32 %narrow1 to i64, !dbg !43
  %51 = shl nsw i64 %50, 2, !dbg !45
  %52 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !46
  %53 = insertelement <2 x i32> %52, i32 %19, i64 1, !dbg !46
  %54 = sext <2 x i32> %53 to <2 x i64>, !dbg !46
  %55 = insertelement <2 x i32> %46, i32 %33, i64 1, !dbg !47
  %56 = tail call <2 x i32> @llvm.smin.v2i32(<2 x i32> %55, <2 x i32> splat (i32 2)), !dbg !47
  %57 = add nsw <2 x i32> %56, splat (i32 1), !dbg !47
  %58 = sext <2 x i32> %57 to <2 x i64>, !dbg !47
  %59 = shl nsw <2 x i64> %58, <i64 4, i64 2>, !dbg !49
  %60 = add nsw <2 x i64> %59, %54, !dbg !50
  %61 = extractelement <2 x i64> %60, i64 1, !dbg !46
  %62 = extractelement <2 x i64> %54, i64 0, !dbg !51
  %63 = add nsw i64 %61, %62, !dbg !51
  %64 = extractelement <2 x i64> %54, i64 1, !dbg !52
  %65 = add nsw i64 %51, %64, !dbg !52
  %66 = extractelement <2 x i64> %60, i64 0, !dbg !53
  %67 = add nsw i64 %66, %65, !dbg !46
  %68 = add nsw i64 %66, %61, !dbg !46
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !54
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !54
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %15) #2, !dbg !55
  %72 = bitcast i32 %71 to float, !dbg !55
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %15) #2, !dbg !55
  %74 = bitcast i32 %73 to float, !dbg !55
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !56
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !56
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %15) #2, !dbg !57
  %78 = bitcast i32 %77 to float, !dbg !57
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %15) #2, !dbg !57
  %80 = bitcast i32 %79 to float, !dbg !57
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !58
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !58
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %15) #2, !dbg !59
  %84 = bitcast i32 %83 to float, !dbg !59
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %15) #2, !dbg !59
  %86 = bitcast i32 %85 to float, !dbg !59
  %87 = fmul float %78, %84, !dbg !60
  %88 = fmul float %80, %86, !dbg !60
  %89 = fsub float %72, %87, !dbg !61
  %90 = fsub float %74, %88, !dbg !61
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !62
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !62
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %15) #2, !dbg !63
  %94 = bitcast i32 %93 to float, !dbg !63
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %15) #2, !dbg !63
  %96 = bitcast i32 %95 to float, !dbg !63
  %97 = fmul float %78, %78, !dbg !64
  %98 = fmul float %80, %80, !dbg !64
  %99 = fsub float %94, %97, !dbg !65
  %100 = fsub float %96, %98, !dbg !65
  %101 = fadd float %99, 0x3EE4F8B580000000, !dbg !66
  %102 = fadd float %100, 0x3EE4F8B580000000, !dbg !66
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %101) #2, !dbg !67
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %102) #2, !dbg !67
  %105 = shl <2 x i32> %46, <i32 4, i32 2>, !dbg !68
  %106 = shl i32 %47, 4, !dbg !68
  %107 = add <2 x i32> %105, %53, !dbg !69
  %108 = extractelement <2 x i32> %107, i64 1, !dbg !70
  %109 = sext i32 %108 to i64, !dbg !34
  %110 = add nsw i64 %66, %109, !dbg !53
  %111 = add nsw i64 %66, %37, !dbg !53
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !71
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !71
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %15) #2, !dbg !72
  %115 = bitcast i32 %114 to float, !dbg !72
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %15) #2, !dbg !72
  %117 = bitcast i32 %116 to float, !dbg !72
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !73
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !73
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %15) #2, !dbg !74
  %121 = bitcast i32 %120 to float, !dbg !74
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %15) #2, !dbg !74
  %123 = bitcast i32 %122 to float, !dbg !74
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !75
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !75
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %15) #2, !dbg !76
  %127 = bitcast i32 %126 to float, !dbg !76
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %15) #2, !dbg !76
  %129 = bitcast i32 %128 to float, !dbg !76
  %130 = fmul float %121, %127, !dbg !77
  %131 = fmul float %123, %129, !dbg !77
  %132 = fsub float %115, %130, !dbg !78
  %133 = fsub float %117, %131, !dbg !78
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %110, !dbg !79
  %135 = getelementptr float, ptr addrspace(1) %4, i64 %111, !dbg !79
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %15) #2, !dbg !80
  %137 = bitcast i32 %136 to float, !dbg !80
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %15) #2, !dbg !80
  %139 = bitcast i32 %138 to float, !dbg !80
  %140 = fmul float %121, %121, !dbg !81
  %141 = fmul float %123, %123, !dbg !81
  %142 = fsub float %137, %140, !dbg !82
  %143 = fsub float %139, %141, !dbg !82
  %144 = fadd float %142, 0x3EE4F8B580000000, !dbg !83
  %145 = fadd float %143, 0x3EE4F8B580000000, !dbg !83
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %144) #2, !dbg !84
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %145) #2, !dbg !84
  %148 = sext i32 %106 to i64, !dbg !51
  %149 = add nsw i64 %62, %148, !dbg !51
  %150 = add nsw i64 %149, %65, !dbg !85
  %151 = add nsw i64 %63, %148, !dbg !85
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !86
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !86
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %15) #2, !dbg !87
  %155 = bitcast i32 %154 to float, !dbg !87
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %15) #2, !dbg !87
  %157 = bitcast i32 %156 to float, !dbg !87
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !88
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !88
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %15) #2, !dbg !89
  %161 = bitcast i32 %160 to float, !dbg !89
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %15) #2, !dbg !89
  %163 = bitcast i32 %162 to float, !dbg !89
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !90
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !90
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %15) #2, !dbg !91
  %167 = bitcast i32 %166 to float, !dbg !91
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %15) #2, !dbg !91
  %169 = bitcast i32 %168 to float, !dbg !91
  %170 = fmul float %161, %167, !dbg !92
  %171 = fmul float %163, %169, !dbg !92
  %172 = fsub float %155, %170, !dbg !93
  %173 = fsub float %157, %171, !dbg !93
  %174 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !94
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !94
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %15) #2, !dbg !95
  %177 = bitcast i32 %176 to float, !dbg !95
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %15) #2, !dbg !95
  %179 = bitcast i32 %178 to float, !dbg !95
  %180 = fmul float %161, %161, !dbg !96
  %181 = fmul float %163, %163, !dbg !96
  %182 = fsub float %177, %180, !dbg !97
  %183 = fsub float %179, %181, !dbg !97
  %184 = fadd float %182, 0x3EE4F8B580000000, !dbg !98
  %185 = fadd float %183, 0x3EE4F8B580000000, !dbg !98
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %184) #2, !dbg !99
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %185) #2, !dbg !99
  %188 = extractelement <2 x i32> %107, i64 0, !dbg !70
  %189 = add i32 %188, %108, !dbg !70
  %190 = add i32 %188, %36, !dbg !70
  %191 = sext i32 %189 to i64, !dbg !100
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !100
  %193 = sext i32 %190 to i64, !dbg !100
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !100
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %15) #2, !dbg !101
  %196 = bitcast i32 %195 to float, !dbg !101
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %15) #2, !dbg !101
  %198 = bitcast i32 %197 to float, !dbg !101
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !102
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !102
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %15) #2, !dbg !103
  %202 = bitcast i32 %201 to float, !dbg !103
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %15) #2, !dbg !103
  %204 = bitcast i32 %203 to float, !dbg !103
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !104
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !104
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %15) #2, !dbg !105
  %208 = bitcast i32 %207 to float, !dbg !105
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %15) #2, !dbg !105
  %210 = bitcast i32 %209 to float, !dbg !105
  %211 = fmul float %202, %208, !dbg !106
  %212 = fmul float %204, %210, !dbg !106
  %213 = fsub float %196, %211, !dbg !107
  %214 = fsub float %198, %212, !dbg !107
  %215 = getelementptr float, ptr addrspace(1) %4, i64 %191, !dbg !108
  %216 = getelementptr float, ptr addrspace(1) %4, i64 %193, !dbg !108
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %15) #2, !dbg !109
  %218 = bitcast i32 %217 to float, !dbg !109
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %15) #2, !dbg !109
  %220 = bitcast i32 %219 to float, !dbg !109
  %221 = fmul float %202, %202, !dbg !110
  %222 = fmul float %204, %204, !dbg !110
  %223 = fsub float %218, %221, !dbg !111
  %224 = fsub float %220, %222, !dbg !111
  %225 = fadd float %223, 0x3EE4F8B580000000, !dbg !112
  %226 = fadd float %224, 0x3EE4F8B580000000, !dbg !112
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %225) #2, !dbg !113
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %226) #2, !dbg !113
  %229 = sitofp i32 %48 to float, !dbg !114
  %230 = sitofp i32 %33 to float, !dbg !114
  %231 = extractelement <2 x float> %45, i64 1, !dbg !115
  %232 = fsub float %231, %229, !dbg !115
  %233 = fsub float %32, %230, !dbg !115
  %234 = fcmp ogt float %232, 0.000000e+00, !dbg !116
  %235 = fcmp ogt float %233, 0.000000e+00, !dbg !116
  %236 = select i1 %234, float %232, float 0.000000e+00, !dbg !118
  %237 = select i1 %235, float %233, float 0.000000e+00, !dbg !118
  %238 = fcmp olt float %236, 1.000000e+00, !dbg !119
  %239 = fcmp olt float %237, 1.000000e+00, !dbg !119
  %240 = select i1 %238, float %236, float 1.000000e+00, !dbg !121
  %241 = select i1 %239, float %237, float 1.000000e+00, !dbg !121
  %242 = fmul float %103, %78, !dbg !122
  %243 = fmul float %104, %80, !dbg !122
  %244 = fsub float %84, %242, !dbg !123
  %245 = fsub float %86, %243, !dbg !123
  %246 = fmul float %146, %121, !dbg !124
  %247 = fmul float %147, %123, !dbg !124
  %248 = fsub float %127, %246, !dbg !125
  %249 = fsub float %129, %247, !dbg !125
  %250 = fmul float %186, %161, !dbg !126
  %251 = fmul float %187, %163, !dbg !126
  %252 = fsub float %167, %250, !dbg !127
  %253 = fsub float %169, %251, !dbg !127
  %254 = fmul float %227, %202, !dbg !128
  %255 = fmul float %228, %204, !dbg !128
  %256 = fsub float %208, %254, !dbg !129
  %257 = fsub float %210, %255, !dbg !129
  %258 = sitofp i32 %47 to float, !dbg !130
  %259 = extractelement <2 x float> %45, i64 0, !dbg !131
  %260 = fsub float %259, %258, !dbg !131
  %261 = fcmp ogt float %260, 0.000000e+00, !dbg !132
  %262 = select i1 %261, float %260, float 0.000000e+00, !dbg !134
  %263 = fcmp olt float %262, 1.000000e+00, !dbg !135
  %264 = select i1 %263, float %262, float 1.000000e+00, !dbg !137
  %265 = insertelement <2 x float> poison, float %186, i64 0, !dbg !138
  %266 = insertelement <2 x float> %265, float %252, i64 1, !dbg !138
  %267 = insertelement <2 x float> poison, float %227, i64 0, !dbg !138
  %268 = insertelement <2 x float> %267, float %256, i64 1, !dbg !138
  %269 = fsub <2 x float> %266, %268, !dbg !138
  %270 = insertelement <2 x float> poison, float %240, i64 0, !dbg !139
  %271 = shufflevector <2 x float> %270, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !139
  %272 = fmul <2 x float> %271, %269, !dbg !139
  %273 = fadd <2 x float> %268, %272, !dbg !140
  %274 = insertelement <2 x float> poison, float %103, i64 0, !dbg !141
  %275 = insertelement <2 x float> %274, float %244, i64 1, !dbg !141
  %276 = insertelement <2 x float> poison, float %146, i64 0, !dbg !141
  %277 = insertelement <2 x float> %276, float %248, i64 1, !dbg !141
  %278 = fsub <2 x float> %275, %277, !dbg !141
  %279 = fmul <2 x float> %271, %278, !dbg !142
  %280 = fadd <2 x float> %277, %279, !dbg !143
  %281 = fsub <2 x float> %280, %273, !dbg !144
  %282 = insertelement <2 x float> poison, float %264, i64 0, !dbg !145
  %283 = shufflevector <2 x float> %282, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !145
  %284 = fmul <2 x float> %283, %281, !dbg !145
  %285 = fadd <2 x float> %273, %284, !dbg !146
  %286 = extractelement <2 x float> %285, i64 0, !dbg !147
  %287 = fmul float %286, %26, !dbg !147
  %288 = insertelement <2 x float> poison, float %187, i64 0, !dbg !138
  %289 = insertelement <2 x float> %288, float %253, i64 1, !dbg !138
  %290 = insertelement <2 x float> poison, float %228, i64 0, !dbg !138
  %291 = insertelement <2 x float> %290, float %257, i64 1, !dbg !138
  %292 = fsub <2 x float> %289, %291, !dbg !138
  %293 = insertelement <2 x float> poison, float %241, i64 0, !dbg !139
  %294 = shufflevector <2 x float> %293, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !139
  %295 = fmul <2 x float> %294, %292, !dbg !139
  %296 = fadd <2 x float> %291, %295, !dbg !140
  %297 = insertelement <2 x float> poison, float %104, i64 0, !dbg !141
  %298 = insertelement <2 x float> %297, float %245, i64 1, !dbg !141
  %299 = insertelement <2 x float> poison, float %147, i64 0, !dbg !141
  %300 = insertelement <2 x float> %299, float %249, i64 1, !dbg !141
  %301 = fsub <2 x float> %298, %300, !dbg !141
  %302 = fmul <2 x float> %294, %301, !dbg !142
  %303 = fadd <2 x float> %300, %302, !dbg !143
  %304 = fsub <2 x float> %303, %296, !dbg !144
  %305 = fmul <2 x float> %283, %304, !dbg !145
  %306 = fadd <2 x float> %296, %305, !dbg !146
  %307 = extractelement <2 x float> %306, i64 0, !dbg !147
  %308 = fmul float %307, %27, !dbg !147
  %309 = extractelement <2 x float> %285, i64 1, !dbg !148
  %310 = fadd float %287, %309, !dbg !148
  %311 = extractelement <2 x float> %306, i64 1, !dbg !148
  %312 = fadd float %308, %311, !dbg !148
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !149
  %314 = bitcast float %310 to i32, !dbg !150
  %315 = bitcast float %312 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %314, i32 %315, ptr addrspace(1) %313, i1 %15) #2, !dbg !150
  ret void, !dbg !151
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.smin.v2i32(<2 x i32>, <2 x i32>) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clzdozvaaxqyyce4hs7j5mvezwwj2rb3hpgfhosc2i455pcgzoaa.py", directory: "inductor_cache/lz")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 45, column: 21, scope: !7)
!23 = !DILocation(line: 46, column: 20, scope: !7)
!24 = !DILocation(line: 48, column: 20, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 49, column: 42, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 50, column: 21, scope: !7)
!31 = !DILocation(line: 53, column: 60, scope: !7)
!32 = !DILocation(line: 64, column: 38, scope: !7)
!33 = !DILocation(line: 64, column: 36, scope: !7)
!34 = !DILocation(line: 64, column: 46, scope: !7)
!35 = !DILocation(line: 24, column: 26, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !40)
!40 = !DILocation(line: 38, column: 40, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !40)
!42 = !DILocation(line: 39, column: 19, scope: !7)
!43 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 42, scope: !7)
!45 = !DILocation(line: 53, column: 38, scope: !7)
!46 = !DILocation(line: 53, column: 57, scope: !7)
!47 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !48)
!48 = !DILocation(line: 43, column: 42, scope: !7)
!49 = !DILocation(line: 53, column: 49, scope: !7)
!50 = !DILocation(line: 53, column: 46, scope: !7)
!51 = !DILocation(line: 74, column: 46, scope: !7)
!52 = !DILocation(line: 53, column: 36, scope: !7)
!53 = !DILocation(line: 64, column: 57, scope: !7)
!54 = !DILocation(line: 53, column: 31, scope: !7)
!55 = !DILocation(line: 53, column: 65, scope: !7)
!56 = !DILocation(line: 54, column: 31, scope: !7)
!57 = !DILocation(line: 54, column: 65, scope: !7)
!58 = !DILocation(line: 55, column: 31, scope: !7)
!59 = !DILocation(line: 55, column: 65, scope: !7)
!60 = !DILocation(line: 56, column: 20, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 31, scope: !7)
!63 = !DILocation(line: 58, column: 65, scope: !7)
!64 = !DILocation(line: 59, column: 20, scope: !7)
!65 = !DILocation(line: 60, column: 20, scope: !7)
!66 = !DILocation(line: 62, column: 20, scope: !7)
!67 = !DILocation(line: 63, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 49, scope: !7)
!69 = !DILocation(line: 84, column: 46, scope: !7)
!70 = !DILocation(line: 84, column: 56, scope: !7)
!71 = !DILocation(line: 64, column: 31, scope: !7)
!72 = !DILocation(line: 64, column: 65, scope: !7)
!73 = !DILocation(line: 65, column: 31, scope: !7)
!74 = !DILocation(line: 65, column: 65, scope: !7)
!75 = !DILocation(line: 66, column: 31, scope: !7)
!76 = !DILocation(line: 66, column: 65, scope: !7)
!77 = !DILocation(line: 67, column: 20, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 69, column: 31, scope: !7)
!80 = !DILocation(line: 69, column: 65, scope: !7)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 71, column: 20, scope: !7)
!83 = !DILocation(line: 72, column: 20, scope: !7)
!84 = !DILocation(line: 73, column: 20, scope: !7)
!85 = !DILocation(line: 74, column: 56, scope: !7)
!86 = !DILocation(line: 74, column: 31, scope: !7)
!87 = !DILocation(line: 74, column: 64, scope: !7)
!88 = !DILocation(line: 75, column: 31, scope: !7)
!89 = !DILocation(line: 75, column: 64, scope: !7)
!90 = !DILocation(line: 76, column: 31, scope: !7)
!91 = !DILocation(line: 76, column: 64, scope: !7)
!92 = !DILocation(line: 77, column: 20, scope: !7)
!93 = !DILocation(line: 78, column: 20, scope: !7)
!94 = !DILocation(line: 79, column: 31, scope: !7)
!95 = !DILocation(line: 79, column: 64, scope: !7)
!96 = !DILocation(line: 80, column: 20, scope: !7)
!97 = !DILocation(line: 81, column: 20, scope: !7)
!98 = !DILocation(line: 82, column: 20, scope: !7)
!99 = !DILocation(line: 83, column: 20, scope: !7)
!100 = !DILocation(line: 84, column: 31, scope: !7)
!101 = !DILocation(line: 84, column: 64, scope: !7)
!102 = !DILocation(line: 85, column: 31, scope: !7)
!103 = !DILocation(line: 85, column: 64, scope: !7)
!104 = !DILocation(line: 86, column: 31, scope: !7)
!105 = !DILocation(line: 86, column: 64, scope: !7)
!106 = !DILocation(line: 87, column: 20, scope: !7)
!107 = !DILocation(line: 88, column: 20, scope: !7)
!108 = !DILocation(line: 89, column: 31, scope: !7)
!109 = !DILocation(line: 89, column: 64, scope: !7)
!110 = !DILocation(line: 90, column: 20, scope: !7)
!111 = !DILocation(line: 91, column: 20, scope: !7)
!112 = !DILocation(line: 92, column: 20, scope: !7)
!113 = !DILocation(line: 93, column: 20, scope: !7)
!114 = !DILocation(line: 95, column: 21, scope: !7)
!115 = !DILocation(line: 96, column: 20, scope: !7)
!116 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !117)
!117 = !DILocation(line: 97, column: 42, scope: !7)
!118 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !117)
!119 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !120)
!120 = !DILocation(line: 98, column: 42, scope: !7)
!121 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !120)
!122 = !DILocation(line: 101, column: 20, scope: !7)
!123 = !DILocation(line: 102, column: 20, scope: !7)
!124 = !DILocation(line: 103, column: 20, scope: !7)
!125 = !DILocation(line: 104, column: 20, scope: !7)
!126 = !DILocation(line: 105, column: 20, scope: !7)
!127 = !DILocation(line: 106, column: 20, scope: !7)
!128 = !DILocation(line: 107, column: 20, scope: !7)
!129 = !DILocation(line: 108, column: 20, scope: !7)
!130 = !DILocation(line: 116, column: 20, scope: !7)
!131 = !DILocation(line: 117, column: 19, scope: !7)
!132 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !133)
!133 = !DILocation(line: 118, column: 42, scope: !7)
!134 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !133)
!135 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !136)
!136 = !DILocation(line: 119, column: 42, scope: !7)
!137 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !136)
!138 = !DILocation(line: 94, column: 20, scope: !7)
!139 = !DILocation(line: 99, column: 20, scope: !7)
!140 = !DILocation(line: 100, column: 20, scope: !7)
!141 = !DILocation(line: 112, column: 20, scope: !7)
!142 = !DILocation(line: 113, column: 20, scope: !7)
!143 = !DILocation(line: 114, column: 20, scope: !7)
!144 = !DILocation(line: 115, column: 20, scope: !7)
!145 = !DILocation(line: 120, column: 20, scope: !7)
!146 = !DILocation(line: 126, column: 20, scope: !7)
!147 = !DILocation(line: 127, column: 20, scope: !7)
!148 = !DILocation(line: 129, column: 21, scope: !7)
!149 = !DILocation(line: 130, column: 28, scope: !7)
!150 = !DILocation(line: 130, column: 41, scope: !7)
!151 = !DILocation(line: 130, column: 4, scope: !7)
