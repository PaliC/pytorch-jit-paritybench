; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_45(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 373248, !dbg !14
  %18 = icmp slt i32 %13, 373248, !dbg !14
  %19 = sdiv i32 %9, 729, !dbg !15
  %20 = sdiv i32 %10, 729, !dbg !15
  %21 = sdiv i32 %11, 729, !dbg !15
  %22 = sdiv i32 %12, 729, !dbg !15
  %23 = sdiv i32 %13, 729, !dbg !15
  %24 = sdiv i32 %14, 729, !dbg !15
  %25 = sdiv i32 %15, 729, !dbg !15
  %26 = sdiv i32 %16, 729, !dbg !15
  %27 = srem i32 %19, 128, !dbg !16
  %28 = srem i32 %20, 128, !dbg !16
  %29 = srem i32 %21, 128, !dbg !16
  %30 = srem i32 %22, 128, !dbg !16
  %31 = srem i32 %23, 128, !dbg !16
  %32 = srem i32 %24, 128, !dbg !16
  %33 = srem i32 %25, 128, !dbg !16
  %34 = srem i32 %26, 128, !dbg !16
  %35 = sext i32 %9 to i64, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = sext i32 %13 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !18
  %44 = bitcast i32 %40 to float, !dbg !18
  %45 = bitcast i32 %41 to float, !dbg !18
  %46 = bitcast i32 %42 to float, !dbg !18
  %47 = bitcast i32 %43 to float, !dbg !18
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #1, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !18
  %53 = bitcast i32 %49 to float, !dbg !18
  %54 = bitcast i32 %50 to float, !dbg !18
  %55 = bitcast i32 %51 to float, !dbg !18
  %56 = bitcast i32 %52 to float, !dbg !18
  %57 = sext i32 %27 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !19
  %59 = sext i32 %28 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !19
  %61 = sext i32 %29 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !19
  %63 = sext i32 %30 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !19
  %65 = sext i32 %31 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !19
  %67 = sext i32 %32 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !19
  %69 = sext i32 %33 to i64, !dbg !19
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !19
  %71 = sext i32 %34 to i64, !dbg !19
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !19
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #1, !dbg !20
  %74 = bitcast i32 %73 to float, !dbg !20
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %17) #1, !dbg !20
  %76 = bitcast i32 %75 to float, !dbg !20
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %17) #1, !dbg !20
  %78 = bitcast i32 %77 to float, !dbg !20
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %17) #1, !dbg !20
  %80 = bitcast i32 %79 to float, !dbg !20
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %18) #1, !dbg !20
  %82 = bitcast i32 %81 to float, !dbg !20
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #1, !dbg !20
  %84 = bitcast i32 %83 to float, !dbg !20
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %18) #1, !dbg !20
  %86 = bitcast i32 %85 to float, !dbg !20
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #1, !dbg !20
  %88 = bitcast i32 %87 to float, !dbg !20
  %89 = fadd float %44, %74, !dbg !21
  %90 = fadd float %45, %76, !dbg !21
  %91 = fadd float %46, %78, !dbg !21
  %92 = fadd float %47, %80, !dbg !21
  %93 = fadd float %53, %82, !dbg !21
  %94 = fadd float %54, %84, !dbg !21
  %95 = fadd float %55, %86, !dbg !21
  %96 = fadd float %56, %88, !dbg !21
  %97 = bitcast float %89 to i32, !dbg !22
  %98 = bitcast float %90 to i32, !dbg !22
  %99 = bitcast float %91 to i32, !dbg !22
  %100 = bitcast float %92 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %97, i32 %98, i32 %99, i32 %100, ptr addrspace(1) %36, i1 %17) #1, !dbg !22
  %101 = bitcast float %93 to i32, !dbg !22
  %102 = bitcast float %94 to i32, !dbg !22
  %103 = bitcast float %95 to i32, !dbg !22
  %104 = bitcast float %96 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %101, i32 %102, i32 %103, i32 %104, ptr addrspace(1) %38, i1 %18) #1, !dbg !22
  ret void, !dbg !23
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6loqklcf5jzirltmsiyur53z4vlsjqxcocti3s6xcl36vdlwdmd.py", directory: "inductor_cache/6l")
!4 = !{ptr @triton_poi_fused_convolution_45, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_45, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_45", linkageName: "triton_poi_fused_convolution_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 29, column: 39, scope: !7)
!23 = !DILocation(line: 29, column: 4, scope: !7)
