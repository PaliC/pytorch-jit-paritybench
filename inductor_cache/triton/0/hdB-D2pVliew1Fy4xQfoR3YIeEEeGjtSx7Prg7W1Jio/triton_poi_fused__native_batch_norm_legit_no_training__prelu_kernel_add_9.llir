; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = srem i32 %20, 256, !dbg !14
  %23 = sext i32 %20 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !15
  %25 = sext i32 %21 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !16
  %29 = sext i32 %22 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = bitcast i32 %45 to float, !dbg !20
  %50 = bitcast i32 %46 to float, !dbg !20
  %51 = bitcast i32 %47 to float, !dbg !20
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !21
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !22
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !29
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = bitcast i32 %69 to float, !dbg !30
  %74 = bitcast i32 %70 to float, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = bitcast i32 %78 to float, !dbg !30
  %83 = bitcast i32 %79 to float, !dbg !30
  %84 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !31
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !32
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !33
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !34
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !35
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !36
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !36
  %93 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !37
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !38
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !38
  %96 = fadd float %39, 0x3EE4F8B580000000, !dbg !39
  %97 = fadd float %40, 0x3EE4F8B580000000, !dbg !39
  %98 = fadd float %41, 0x3EE4F8B580000000, !dbg !39
  %99 = fadd float %42, 0x3EE4F8B580000000, !dbg !39
  %100 = fadd float %48, 0x3EE4F8B580000000, !dbg !39
  %101 = fadd float %49, 0x3EE4F8B580000000, !dbg !39
  %102 = fadd float %50, 0x3EE4F8B580000000, !dbg !39
  %103 = fadd float %51, 0x3EE4F8B580000000, !dbg !39
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %104, 0, !dbg !40
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %105, 0, !dbg !40
  br i1 %.not.i, label %111, label %106, !dbg !40

106:                                              ; preds = %14
  br i1 %.not1.i, label %109, label %107, !dbg !40

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

111:                                              ; preds = %14
  br i1 %.not1.i, label %114, label %112, !dbg !40

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !40
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %116, 0, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %117, 0, !dbg !40
  br i1 %.not.i1, label %123, label %118, !dbg !40

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !40

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !40

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %119, %121, %124, %126
  %.0.i3 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !40
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %128, 0, !dbg !40
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %129, 0, !dbg !40
  br i1 %.not.i6, label %135, label %130, !dbg !40

130:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %133, label %131, !dbg !40

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

135:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %138, label %136, !dbg !40

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %131, %133, %136, %138
  %.0.i8 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !40
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %140, 0, !dbg !40
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %141, 0, !dbg !40
  br i1 %.not.i11, label %147, label %142, !dbg !40

142:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %145, label %143, !dbg !40

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

147:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %150, label %148, !dbg !40

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %143, %145, %148, %150
  %.0.i13 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !40
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i16 = icmp eq i32 %152, 0, !dbg !40
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i19 = icmp eq i32 %153, 0, !dbg !40
  br i1 %.not.i16, label %159, label %154, !dbg !40

154:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %157, label %155, !dbg !40

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

159:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %162, label %160, !dbg !40

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

__nv_sqrtf.exit20:                                ; preds = %155, %157, %160, %162
  %.0.i18 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !40
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i21 = icmp eq i32 %164, 0, !dbg !40
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i24 = icmp eq i32 %165, 0, !dbg !40
  br i1 %.not.i21, label %171, label %166, !dbg !40

166:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %169, label %167, !dbg !40

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

171:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %174, label %172, !dbg !40

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

__nv_sqrtf.exit25:                                ; preds = %167, %169, %172, %174
  %.0.i23 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !40
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i26 = icmp eq i32 %176, 0, !dbg !40
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i29 = icmp eq i32 %177, 0, !dbg !40
  br i1 %.not.i26, label %183, label %178, !dbg !40

178:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %181, label %179, !dbg !40

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

183:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %186, label %184, !dbg !40

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

__nv_sqrtf.exit30:                                ; preds = %179, %181, %184, %186
  %.0.i28 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !40
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i31 = icmp eq i32 %188, 0, !dbg !40
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i34 = icmp eq i32 %189, 0, !dbg !40
  br i1 %.not.i31, label %195, label %190, !dbg !40

190:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %193, label %191, !dbg !40

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

195:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %198, label %196, !dbg !40

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

__nv_sqrtf.exit35:                                ; preds = %191, %193, %196, %198
  %.0.i33 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !40
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !41
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !41
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !41
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !41
  %208 = fadd float %71, 0x3EE4F8B580000000, !dbg !42
  %209 = fadd float %72, 0x3EE4F8B580000000, !dbg !42
  %210 = fadd float %73, 0x3EE4F8B580000000, !dbg !42
  %211 = fadd float %74, 0x3EE4F8B580000000, !dbg !42
  %212 = fadd float %80, 0x3EE4F8B580000000, !dbg !42
  %213 = fadd float %81, 0x3EE4F8B580000000, !dbg !42
  %214 = fadd float %82, 0x3EE4F8B580000000, !dbg !42
  %215 = fadd float %83, 0x3EE4F8B580000000, !dbg !42
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i36 = icmp eq i32 %216, 0, !dbg !43
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i39 = icmp eq i32 %217, 0, !dbg !43
  br i1 %.not.i36, label %223, label %218, !dbg !43

218:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %221, label %219, !dbg !43

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %208) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %208) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

223:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %226, label %224, !dbg !43

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %208) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %208) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

__nv_sqrtf.exit40:                                ; preds = %219, %221, %224, %226
  %.0.i38 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !43
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i41 = icmp eq i32 %228, 0, !dbg !43
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i44 = icmp eq i32 %229, 0, !dbg !43
  br i1 %.not.i41, label %235, label %230, !dbg !43

230:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %233, label %231, !dbg !43

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %209) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %209) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

235:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %238, label %236, !dbg !43

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %209) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %209) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

__nv_sqrtf.exit45:                                ; preds = %231, %233, %236, %238
  %.0.i43 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !43
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i46 = icmp eq i32 %240, 0, !dbg !43
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i49 = icmp eq i32 %241, 0, !dbg !43
  br i1 %.not.i46, label %247, label %242, !dbg !43

242:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %245, label %243, !dbg !43

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

247:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %250, label %248, !dbg !43

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

__nv_sqrtf.exit50:                                ; preds = %243, %245, %248, %250
  %.0.i48 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !43
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i51 = icmp eq i32 %252, 0, !dbg !43
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i54 = icmp eq i32 %253, 0, !dbg !43
  br i1 %.not.i51, label %259, label %254, !dbg !43

254:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %257, label %255, !dbg !43

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

259:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %262, label %260, !dbg !43

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

__nv_sqrtf.exit55:                                ; preds = %255, %257, %260, %262
  %.0.i53 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !43
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i56 = icmp eq i32 %264, 0, !dbg !43
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i59 = icmp eq i32 %265, 0, !dbg !43
  br i1 %.not.i56, label %271, label %266, !dbg !43

266:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %269, label %267, !dbg !43

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

271:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %274, label %272, !dbg !43

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

__nv_sqrtf.exit60:                                ; preds = %267, %269, %272, %274
  %.0.i58 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !43
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i61 = icmp eq i32 %276, 0, !dbg !43
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i64 = icmp eq i32 %277, 0, !dbg !43
  br i1 %.not.i61, label %283, label %278, !dbg !43

278:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %281, label %279, !dbg !43

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

283:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %286, label %284, !dbg !43

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

__nv_sqrtf.exit65:                                ; preds = %279, %281, %284, %286
  %.0.i63 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !43
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i66 = icmp eq i32 %288, 0, !dbg !43
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i69 = icmp eq i32 %289, 0, !dbg !43
  br i1 %.not.i66, label %295, label %290, !dbg !43

290:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %293, label %291, !dbg !43

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

295:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %298, label %296, !dbg !43

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

__nv_sqrtf.exit70:                                ; preds = %291, %293, %296, %298
  %.0.i68 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !43
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i71 = icmp eq i32 %300, 0, !dbg !43
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i74 = icmp eq i32 %301, 0, !dbg !43
  br i1 %.not.i71, label %307, label %302, !dbg !43

302:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %305, label %303, !dbg !43

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

307:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %310, label %308, !dbg !43

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

__nv_sqrtf.exit75:                                ; preds = %303, %305, %308, %310
  %.0.i73 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !43
  %312 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %313 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !28
  %314 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %315 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !28
  %316 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %317 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !28
  %318 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %319 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !28
  %320 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %321 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %322 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %323 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %324 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %325 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %326 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %327 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %329 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %330 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !22
  %331 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %332 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %333 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %334 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !22
  %335 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %336 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %337 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %338 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !22
  %339 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %340 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %341 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %342 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !22
  %343 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %344 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %345 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %346 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !22
  %347 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %348 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %349 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %350 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !22
  %351 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %352 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %353 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %354 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !22
  %355 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %356 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %357 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %358 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !22
  %359 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %360 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !38
  %361 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !38
  %362 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !38
  %363 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !38
  %364 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !38
  %365 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !38
  %366 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !38
  %367 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !38
  %368 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !36
  %369 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !36
  %370 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !36
  %371 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !36
  %372 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !36
  %373 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !36
  %374 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !36
  %375 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !36
  %376 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !34
  %377 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !34
  %378 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !34
  %379 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !34
  %380 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !34
  %381 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !34
  %382 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !34
  %383 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !34
  %384 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !32
  %385 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !32
  %386 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !32
  %387 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !32
  %388 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !32
  %389 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !32
  %390 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !32
  %391 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !32
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !44
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !44
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !44
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !44
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !44
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !44
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !44
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !44
  %400 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !16
  %401 = insertelement <2 x i32> %400, i32 %326, i64 1, !dbg !16
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !16
  %403 = insertelement <2 x i32> poison, i32 %357, i64 0, !dbg !18
  %404 = insertelement <2 x i32> %403, i32 %327, i64 1, !dbg !18
  %405 = bitcast <2 x i32> %404 to <2 x float>, !dbg !18
  %406 = fsub <2 x float> %402, %405, !dbg !45
  %407 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !36
  %408 = insertelement <2 x i32> %407, i32 %367, i64 1, !dbg !36
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !36
  %410 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !24
  %411 = insertelement <2 x i32> %410, i32 %383, i64 1, !dbg !24
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !24
  %413 = insertelement <2 x i32> poison, i32 %358, i64 0, !dbg !22
  %414 = insertelement <2 x i32> %413, i32 %391, i64 1, !dbg !22
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !22
  %416 = insertelement <2 x float> poison, float %200, i64 0, !dbg !46
  %417 = insertelement <2 x float> %416, float %392, i64 1, !dbg !46
  %418 = fmul <2 x float> %406, %417, !dbg !46
  %419 = fmul <2 x float> %418, %415, !dbg !47
  %420 = fadd <2 x float> %419, %412, !dbg !48
  %421 = fcmp ogt <2 x float> %420, zeroinitializer, !dbg !49
  %422 = fmul <2 x float> %420, %409, !dbg !50
  %423 = select <2 x i1> %421, <2 x float> %420, <2 x float> %422, !dbg !51
  %424 = insertelement <2 x i32> poison, i32 %352, i64 0, !dbg !16
  %425 = insertelement <2 x i32> %424, i32 %324, i64 1, !dbg !16
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !16
  %427 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !18
  %428 = insertelement <2 x i32> %427, i32 %325, i64 1, !dbg !18
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !18
  %430 = fsub <2 x float> %426, %429, !dbg !45
  %431 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !36
  %432 = insertelement <2 x i32> %431, i32 %366, i64 1, !dbg !36
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !36
  %434 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !24
  %435 = insertelement <2 x i32> %434, i32 %382, i64 1, !dbg !24
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !24
  %437 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !22
  %438 = insertelement <2 x i32> %437, i32 %390, i64 1, !dbg !22
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !22
  %440 = insertelement <2 x float> poison, float %201, i64 0, !dbg !46
  %441 = insertelement <2 x float> %440, float %393, i64 1, !dbg !46
  %442 = fmul <2 x float> %430, %441, !dbg !46
  %443 = fmul <2 x float> %442, %439, !dbg !47
  %444 = fadd <2 x float> %443, %436, !dbg !48
  %445 = fcmp ogt <2 x float> %444, zeroinitializer, !dbg !49
  %446 = fmul <2 x float> %444, %433, !dbg !50
  %447 = select <2 x i1> %445, <2 x float> %444, <2 x float> %446, !dbg !51
  %448 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !16
  %449 = insertelement <2 x i32> %448, i32 %322, i64 1, !dbg !16
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !16
  %451 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !18
  %452 = insertelement <2 x i32> %451, i32 %323, i64 1, !dbg !18
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !18
  %454 = fsub <2 x float> %450, %453, !dbg !45
  %455 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !36
  %456 = insertelement <2 x i32> %455, i32 %365, i64 1, !dbg !36
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !36
  %458 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !24
  %459 = insertelement <2 x i32> %458, i32 %381, i64 1, !dbg !24
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !24
  %461 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !22
  %462 = insertelement <2 x i32> %461, i32 %389, i64 1, !dbg !22
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !22
  %464 = insertelement <2 x float> poison, float %202, i64 0, !dbg !46
  %465 = insertelement <2 x float> %464, float %394, i64 1, !dbg !46
  %466 = fmul <2 x float> %454, %465, !dbg !46
  %467 = fmul <2 x float> %466, %463, !dbg !47
  %468 = fadd <2 x float> %467, %460, !dbg !48
  %469 = fcmp ogt <2 x float> %468, zeroinitializer, !dbg !49
  %470 = fmul <2 x float> %468, %457, !dbg !50
  %471 = select <2 x i1> %469, <2 x float> %468, <2 x float> %470, !dbg !51
  %472 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !16
  %473 = insertelement <2 x i32> %472, i32 %320, i64 1, !dbg !16
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !16
  %475 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !18
  %476 = insertelement <2 x i32> %475, i32 %321, i64 1, !dbg !18
  %477 = bitcast <2 x i32> %476 to <2 x float>, !dbg !18
  %478 = fsub <2 x float> %474, %477, !dbg !45
  %479 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !36
  %480 = insertelement <2 x i32> %479, i32 %364, i64 1, !dbg !36
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !36
  %482 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !24
  %483 = insertelement <2 x i32> %482, i32 %380, i64 1, !dbg !24
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !24
  %485 = insertelement <2 x i32> poison, i32 %346, i64 0, !dbg !22
  %486 = insertelement <2 x i32> %485, i32 %388, i64 1, !dbg !22
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !22
  %488 = insertelement <2 x float> poison, float %203, i64 0, !dbg !46
  %489 = insertelement <2 x float> %488, float %395, i64 1, !dbg !46
  %490 = fmul <2 x float> %478, %489, !dbg !46
  %491 = fmul <2 x float> %490, %487, !dbg !47
  %492 = fadd <2 x float> %491, %484, !dbg !48
  %493 = fcmp ogt <2 x float> %492, zeroinitializer, !dbg !49
  %494 = fmul <2 x float> %492, %481, !dbg !50
  %495 = select <2 x i1> %493, <2 x float> %492, <2 x float> %494, !dbg !51
  %496 = insertelement <2 x i32> poison, i32 %340, i64 0, !dbg !16
  %497 = insertelement <2 x i32> %496, i32 %318, i64 1, !dbg !16
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !16
  %499 = insertelement <2 x i32> poison, i32 %341, i64 0, !dbg !18
  %500 = insertelement <2 x i32> %499, i32 %319, i64 1, !dbg !18
  %501 = bitcast <2 x i32> %500 to <2 x float>, !dbg !18
  %502 = fsub <2 x float> %498, %501, !dbg !45
  %503 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !36
  %504 = insertelement <2 x i32> %503, i32 %363, i64 1, !dbg !36
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !36
  %506 = insertelement <2 x i32> poison, i32 %343, i64 0, !dbg !24
  %507 = insertelement <2 x i32> %506, i32 %379, i64 1, !dbg !24
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !24
  %509 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !22
  %510 = insertelement <2 x i32> %509, i32 %387, i64 1, !dbg !22
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !22
  %512 = insertelement <2 x float> poison, float %204, i64 0, !dbg !46
  %513 = insertelement <2 x float> %512, float %396, i64 1, !dbg !46
  %514 = fmul <2 x float> %502, %513, !dbg !46
  %515 = fmul <2 x float> %514, %511, !dbg !47
  %516 = fadd <2 x float> %515, %508, !dbg !48
  %517 = fcmp ogt <2 x float> %516, zeroinitializer, !dbg !49
  %518 = fmul <2 x float> %516, %505, !dbg !50
  %519 = select <2 x i1> %517, <2 x float> %516, <2 x float> %518, !dbg !51
  %520 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !16
  %521 = insertelement <2 x i32> %520, i32 %316, i64 1, !dbg !16
  %522 = bitcast <2 x i32> %521 to <2 x float>, !dbg !16
  %523 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !18
  %524 = insertelement <2 x i32> %523, i32 %317, i64 1, !dbg !18
  %525 = bitcast <2 x i32> %524 to <2 x float>, !dbg !18
  %526 = fsub <2 x float> %522, %525, !dbg !45
  %527 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !36
  %528 = insertelement <2 x i32> %527, i32 %362, i64 1, !dbg !36
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !36
  %530 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !24
  %531 = insertelement <2 x i32> %530, i32 %378, i64 1, !dbg !24
  %532 = bitcast <2 x i32> %531 to <2 x float>, !dbg !24
  %533 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !22
  %534 = insertelement <2 x i32> %533, i32 %386, i64 1, !dbg !22
  %535 = bitcast <2 x i32> %534 to <2 x float>, !dbg !22
  %536 = insertelement <2 x float> poison, float %205, i64 0, !dbg !46
  %537 = insertelement <2 x float> %536, float %397, i64 1, !dbg !46
  %538 = fmul <2 x float> %526, %537, !dbg !46
  %539 = fmul <2 x float> %538, %535, !dbg !47
  %540 = fadd <2 x float> %539, %532, !dbg !48
  %541 = fcmp ogt <2 x float> %540, zeroinitializer, !dbg !49
  %542 = fmul <2 x float> %540, %529, !dbg !50
  %543 = select <2 x i1> %541, <2 x float> %540, <2 x float> %542, !dbg !51
  %544 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !16
  %545 = insertelement <2 x i32> %544, i32 %314, i64 1, !dbg !16
  %546 = bitcast <2 x i32> %545 to <2 x float>, !dbg !16
  %547 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !18
  %548 = insertelement <2 x i32> %547, i32 %315, i64 1, !dbg !18
  %549 = bitcast <2 x i32> %548 to <2 x float>, !dbg !18
  %550 = fsub <2 x float> %546, %549, !dbg !45
  %551 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !36
  %552 = insertelement <2 x i32> %551, i32 %361, i64 1, !dbg !36
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !36
  %554 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !24
  %555 = insertelement <2 x i32> %554, i32 %377, i64 1, !dbg !24
  %556 = bitcast <2 x i32> %555 to <2 x float>, !dbg !24
  %557 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !22
  %558 = insertelement <2 x i32> %557, i32 %385, i64 1, !dbg !22
  %559 = bitcast <2 x i32> %558 to <2 x float>, !dbg !22
  %560 = insertelement <2 x float> poison, float %206, i64 0, !dbg !46
  %561 = insertelement <2 x float> %560, float %398, i64 1, !dbg !46
  %562 = fmul <2 x float> %550, %561, !dbg !46
  %563 = fmul <2 x float> %562, %559, !dbg !47
  %564 = fadd <2 x float> %563, %556, !dbg !48
  %565 = fcmp ogt <2 x float> %564, zeroinitializer, !dbg !49
  %566 = fmul <2 x float> %564, %553, !dbg !50
  %567 = select <2 x i1> %565, <2 x float> %564, <2 x float> %566, !dbg !51
  %568 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !16
  %569 = insertelement <2 x i32> %568, i32 %312, i64 1, !dbg !16
  %570 = bitcast <2 x i32> %569 to <2 x float>, !dbg !16
  %571 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !18
  %572 = insertelement <2 x i32> %571, i32 %313, i64 1, !dbg !18
  %573 = bitcast <2 x i32> %572 to <2 x float>, !dbg !18
  %574 = fsub <2 x float> %570, %573, !dbg !45
  %575 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !36
  %576 = insertelement <2 x i32> %575, i32 %360, i64 1, !dbg !36
  %577 = bitcast <2 x i32> %576 to <2 x float>, !dbg !36
  %578 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !24
  %579 = insertelement <2 x i32> %578, i32 %376, i64 1, !dbg !24
  %580 = bitcast <2 x i32> %579 to <2 x float>, !dbg !24
  %581 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !22
  %582 = insertelement <2 x i32> %581, i32 %384, i64 1, !dbg !22
  %583 = bitcast <2 x i32> %582 to <2 x float>, !dbg !22
  %584 = insertelement <2 x float> poison, float %207, i64 0, !dbg !46
  %585 = insertelement <2 x float> %584, float %399, i64 1, !dbg !46
  %586 = fmul <2 x float> %574, %585, !dbg !46
  %587 = fmul <2 x float> %586, %583, !dbg !47
  %588 = fadd <2 x float> %587, %580, !dbg !48
  %589 = fcmp ogt <2 x float> %588, zeroinitializer, !dbg !49
  %590 = fmul <2 x float> %588, %577, !dbg !50
  %591 = select <2 x i1> %589, <2 x float> %588, <2 x float> %590, !dbg !51
  %shift = shufflevector <2 x float> %423, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %592 = fadd <2 x float> %423, %shift, !dbg !52
  %shift76 = shufflevector <2 x float> %447, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %593 = fadd <2 x float> %447, %shift76, !dbg !52
  %shift77 = shufflevector <2 x float> %471, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %594 = fadd <2 x float> %471, %shift77, !dbg !52
  %shift78 = shufflevector <2 x float> %495, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %595 = fadd <2 x float> %495, %shift78, !dbg !52
  %shift79 = shufflevector <2 x float> %519, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %596 = fadd <2 x float> %519, %shift79, !dbg !52
  %shift80 = shufflevector <2 x float> %543, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %597 = fadd <2 x float> %543, %shift80, !dbg !52
  %shift81 = shufflevector <2 x float> %567, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %598 = fadd <2 x float> %567, %shift81, !dbg !52
  %shift82 = shufflevector <2 x float> %591, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %599 = fadd <2 x float> %591, %shift82, !dbg !52
  %600 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !53
  %601 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !53
  %bc = bitcast <2 x float> %592 to <2 x i32>, !dbg !54
  %602 = extractelement <2 x i32> %bc, i64 0, !dbg !54
  %bc83 = bitcast <2 x float> %593 to <2 x i32>, !dbg !54
  %603 = extractelement <2 x i32> %bc83, i64 0, !dbg !54
  %bc84 = bitcast <2 x float> %594 to <2 x i32>, !dbg !54
  %604 = extractelement <2 x i32> %bc84, i64 0, !dbg !54
  %bc85 = bitcast <2 x float> %595 to <2 x i32>, !dbg !54
  %605 = extractelement <2 x i32> %bc85, i64 0, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %603, i32 %604, i32 %605, ptr addrspace(1) %600, i1 true) #3, !dbg !54
  %bc86 = bitcast <2 x float> %596 to <2 x i32>, !dbg !54
  %606 = extractelement <2 x i32> %bc86, i64 0, !dbg !54
  %bc87 = bitcast <2 x float> %597 to <2 x i32>, !dbg !54
  %607 = extractelement <2 x i32> %bc87, i64 0, !dbg !54
  %bc88 = bitcast <2 x float> %598 to <2 x i32>, !dbg !54
  %608 = extractelement <2 x i32> %bc88, i64 0, !dbg !54
  %bc89 = bitcast <2 x float> %599 to <2 x i32>, !dbg !54
  %609 = extractelement <2 x i32> %bc89, i64 0, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %606, i32 %607, i32 %608, i32 %609, ptr addrspace(1) %601, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq2p2kvegss3k6qem4w2nbvjbwmr6x4dtqqp4io4dljdiwgvrdtn.py", directory: "inductor_cache/q2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 26, scope: !7)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 27, scope: !7)
!44 = !DILocation(line: 52, column: 19, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 19, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 35, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 28, scope: !7)
!54 = !DILocation(line: 65, column: 40, scope: !7)
!55 = !DILocation(line: 65, column: 4, scope: !7)
