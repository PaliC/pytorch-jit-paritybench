; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = and i32 %9, 128, !dbg !12
  %13 = lshr exact i32 %12, 5, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !12
  %15 = and i32 %9, 31, !dbg !12
  %16 = and i32 %9, 7, !dbg !12
  %17 = or disjoint i32 %14, %8, !dbg !13
  %18 = or disjoint i32 %8, %16, !dbg !13
  %19 = icmp slt i32 %18, 128, !dbg !14
  %20 = icmp slt i32 %17, 128, !dbg !14
  %21 = shl i32 %9, 2, !dbg !15
  %22 = and i32 %21, 124, !dbg !15
  %23 = lshr exact i32 %12, 7, !dbg !16
  %24 = srem i32 %18, 32, !dbg !17
  %25 = shl i32 %17, 7, !dbg !18
  %26 = or disjoint i32 %25, %22, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %34 = shl i32 %9, 5, !dbg !21
  %35 = and i32 %34, 992, !dbg !21
  %36 = or disjoint i32 %11, %35, !dbg !21
  %37 = or disjoint i32 %36, %13, !dbg !21
  %38 = and i32 %9, 255, !dbg !21
  %39 = lshr exact i32 %35, 1, !dbg !21
  %40 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %39, !dbg !21
  %41 = getelementptr inbounds float, ptr addrspace(3) %40, i32 %37, !dbg !21
  %42 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 true) #5, !dbg !21
  %43 = or disjoint i32 %37, 8, !dbg !21
  %44 = lshr i32 %43, 3, !dbg !21
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !21
  %46 = getelementptr inbounds float, ptr addrspace(3) %45, i32 %43, !dbg !21
  %47 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !21
  %48 = or disjoint i32 %37, 16, !dbg !21
  %49 = lshr i32 %48, 3, !dbg !21
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !21
  %51 = getelementptr inbounds float, ptr addrspace(3) %50, i32 %48, !dbg !21
  %52 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #5, !dbg !21
  %53 = or disjoint i32 %37, 24, !dbg !21
  %54 = lshr i32 %53, 3, !dbg !21
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !21
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %53, !dbg !21
  %57 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %58 = lshr i32 %38, 3, !dbg !21
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !21
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %38, !dbg !21
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !21
  %62 = or disjoint i32 %38, 256, !dbg !21
  %63 = lshr i32 %62, 3, !dbg !21
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !21
  %65 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %62, !dbg !21
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !21
  %67 = or disjoint i32 %38, 512, !dbg !21
  %68 = lshr i32 %67, 3, !dbg !21
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !21
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %67, !dbg !21
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !21
  %72 = or disjoint i32 %38, 768, !dbg !21
  %73 = lshr i32 %72, 3, !dbg !21
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !21
  %75 = getelementptr inbounds float, ptr addrspace(3) %74, i32 %72, !dbg !21
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !21
  %77 = shl nsw i32 %24, 3, !dbg !22
  %78 = or disjoint i32 %77, %23, !dbg !23
  %79 = or disjoint i32 %78, 2, !dbg !23
  %80 = or disjoint i32 %78, 4, !dbg !23
  %81 = or disjoint i32 %78, 6, !dbg !23
  %82 = sext i32 %78 to i64, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !24
  %84 = sext i32 %79 to i64, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !24
  %86 = sext i32 %80 to i64, !dbg !24
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !24
  %88 = sext i32 %81 to i64, !dbg !24
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %91 = bitcast i32 %90 to float, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %95 = bitcast i32 %94 to float, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = fadd float %61, %91, !dbg !26
  %99 = fadd float %66, %93, !dbg !26
  %100 = fadd float %71, %95, !dbg !26
  %101 = fadd float %76, %97, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %102 = fadd float %98, %99, !dbg !31
  %103 = fadd float %102, %100, !dbg !31
  %104 = fadd float %103, %101, !dbg !31
  %105 = select i1 %19, float %104, float 0.000000e+00, !dbg !31
  %106 = bitcast float %105 to i32, !dbg !27
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !27
  %108 = bitcast i32 %107 to float, !dbg !27
  %109 = fadd float %105, %108, !dbg !31
  %110 = bitcast float %109 to i32, !dbg !27
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !27
  %112 = bitcast i32 %111 to float, !dbg !27
  %113 = fadd float %109, %112, !dbg !31
  %114 = icmp samesign ult i32 %15, 8, !dbg !27
  %115 = and i32 %10, 7, !dbg !27
  %116 = shl nuw nsw i32 %16, 3, !dbg !27
  %117 = or disjoint i32 %116, %115, !dbg !27
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !27
  %119 = bitcast float %113 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %114) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %120 = icmp slt i32 %9, 64, !dbg !27
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !27
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #5, !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = fadd float %123, %125, !dbg !31
  %127 = bitcast float %126 to i32, !dbg !27
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = fadd float %126, %129, !dbg !31
  %131 = bitcast float %130 to i32, !dbg !27
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = fadd float %130, %133, !dbg !31
  %135 = icmp eq i32 %16, 0, !dbg !27
  %136 = and i1 %120, %135, !dbg !27
  %137 = bitcast float %134 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %137, i1 %136) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !27
  %139 = load float, ptr addrspace(3) %138, align 16, !dbg !27
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 1.280000e+02) #5, !dbg !33
  %141 = fsub float %98, %140, !dbg !34
  %142 = fsub float %99, %140, !dbg !34
  %143 = fsub float %100, %140, !dbg !34
  %144 = fsub float %101, %140, !dbg !34
  %145 = fmul float %141, %141, !dbg !35
  %146 = fmul float %142, %142, !dbg !35
  %147 = fmul float %143, %143, !dbg !35
  %148 = fmul float %144, %144, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %149 = fadd float %145, %146, !dbg !38
  %150 = fadd float %147, %149, !dbg !38
  %151 = fadd float %148, %150, !dbg !38
  %152 = select i1 %19, float %151, float 0.000000e+00, !dbg !38
  %153 = bitcast float %152 to i32, !dbg !36
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !36
  %155 = bitcast i32 %154 to float, !dbg !36
  %156 = fadd float %152, %155, !dbg !38
  %157 = bitcast float %156 to i32, !dbg !36
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !36
  %159 = bitcast i32 %158 to float, !dbg !36
  %160 = fadd float %156, %159, !dbg !38
  %161 = bitcast float %160 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %161, i1 %114) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %162 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #5, !dbg !36
  %163 = bitcast i32 %162 to float, !dbg !36
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !36
  %165 = bitcast i32 %164 to float, !dbg !36
  %166 = fadd float %163, %165, !dbg !38
  %167 = bitcast float %166 to i32, !dbg !36
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !36
  %169 = bitcast i32 %168 to float, !dbg !36
  %170 = fadd float %166, %169, !dbg !38
  %171 = bitcast float %170 to i32, !dbg !36
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !36
  %173 = bitcast i32 %172 to float, !dbg !36
  %174 = fadd float %170, %173, !dbg !38
  %175 = bitcast float %174 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %175, i1 %136) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %176 = load float, ptr addrspace(3) %138, align 16, !dbg !36
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 1.280000e+02) #5, !dbg !39
  %178 = fadd float %177, 0x3EB0C6F7A0000000, !dbg !40
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %179, 0, !dbg !41
  br i1 %.not.i, label %182, label %180, !dbg !41

180:                                              ; preds = %6
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %178), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

182:                                              ; preds = %6
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %178), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %180, %182
  %.0.i = phi float [ %181, %180 ], [ %183, %182 ], !dbg !41
  %184 = lshr i32 %15, 3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %185 = shl i32 %9, 7, !dbg !42
  %186 = and i32 %185, 896, !dbg !42
  %187 = lshr i32 %9, 3, !dbg !42
  %188 = and i32 %187, 31, !dbg !42
  %189 = or disjoint i32 %188, %186, !dbg !42
  %190 = and i32 %21, 1020, !dbg !42
  %191 = lshr exact i32 %186, 3, !dbg !42
  %192 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %191, !dbg !42
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %189, !dbg !42
  %194 = bitcast float %98 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #5, !dbg !42
  %195 = or disjoint i32 %189, 32, !dbg !42
  %196 = getelementptr float, ptr addrspace(3) %192, i32 %195, !dbg !42
  %197 = bitcast float %99 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #5, !dbg !42
  %198 = or disjoint i32 %189, 64, !dbg !42
  %199 = getelementptr float, ptr addrspace(3) %192, i32 %198, !dbg !42
  %200 = bitcast float %100 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #5, !dbg !42
  %201 = or disjoint i32 %189, 96, !dbg !42
  %202 = getelementptr float, ptr addrspace(3) %192, i32 %201, !dbg !42
  %203 = bitcast float %101 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %204 = lshr i32 %21, 5, !dbg !42
  %205 = and i32 %204, 28, !dbg !42
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !42
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %190, !dbg !42
  %.extract = load i32, ptr addrspace(3) %207, align 16, !dbg !42
  %208 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 4, !dbg !42
  %.extract7 = load i32, ptr addrspace(3) %208, align 4, !dbg !42
  %209 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 8, !dbg !42
  %.extract8 = load i32, ptr addrspace(3) %209, align 8, !dbg !42
  %210 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 12, !dbg !42
  %.extract9 = load i32, ptr addrspace(3) %210, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %28, i1 %20) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %211 = sext i32 %18 to i64, !dbg !44
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %211, !dbg !44
  %213 = shl nuw nsw i32 %115, 2, !dbg !45
  %214 = or disjoint i32 %213, %184, !dbg !45
  %215 = icmp eq i32 %214, 0, !dbg !45
  %216 = bitcast float %.0.i to i32, !dbg !45
  %217 = and i1 %215, %19, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %212, i1 %217) #5, !dbg !45
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !46
  %219 = bitcast float %140 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %218, i1 %217) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py", directory: "inductor_cache/4t")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_22", linkageName: "triton_per_fused_convolution_native_group_norm_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 34, column: 37, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 42, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 40, column: 24, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !37)
!37 = !DILocation(line: 48, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !37)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 28, scope: !7)
!42 = !DILocation(line: 54, column: 48, scope: !7)
!43 = !DILocation(line: 55, column: 4, scope: !7)
!44 = !DILocation(line: 56, column: 28, scope: !7)
!45 = !DILocation(line: 56, column: 40, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
