#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0)
#loc1 = loc(unknown)
#loc15 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":36:24)
#loc22 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":44:26)
#loc39 = loc(callsite(#loc1 at #loc15))
#loc42 = loc(callsite(#loc1 at #loc22))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_native_batch_norm_backward_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0), %arg5: i32 loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %6 = arith.remsi %0, %c2_i32 : i32 loc(#loc5)
    %7 = arith.muli %6, %c16_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc7)
    %9 = tt.splat %7 : i32 -> tensor<1x16xi32, #blocked> loc(#loc7)
    %10 = arith.addi %4, %8 : tensor<1x16xi32, #blocked1> loc(#loc7)
    %11 = arith.addi %5, %9 : tensor<1x16xi32, #blocked> loc(#loc7)
    %12 = arith.divsi %0, %c2_i32 : i32 loc(#loc8)
    %13 = arith.muli %12, %c64_i32 : i32 loc(#loc9)
    %14 = tt.splat %13 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc10)
    %15 = tt.splat %13 : i32 -> tensor<1x16xi32, #blocked> loc(#loc10)
    %16 = arith.addi %10, %14 : tensor<1x16xi32, #blocked1> loc(#loc10)
    %17 = arith.addi %11, %15 : tensor<1x16xi32, #blocked> loc(#loc10)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = tt.addptr %18, %16 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc11)
    %21 = tt.addptr %19, %17 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc11)
    %22 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc12)
    %23 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc12)
    %24 = tt.load %20, %22, %cst_3 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %25 = tt.load %21, %23, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %26 = arith.select %22, %24, %cst_3 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc13)
    %27 = arith.select %23, %25, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc13)
    %28 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc15)), %arg8: f32 loc(callsite(#loc1 at #loc15))):
      %57 = arith.addf %arg7, %arg8 : f32 loc(#loc43)
      tt.reduce.return %57 : f32 loc(#loc38)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc38)
    %29 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc15)), %arg8: f32 loc(callsite(#loc1 at #loc15))):
      %57 = arith.addf %arg7, %arg8 : f32 loc(#loc43)
      tt.reduce.return %57 : f32 loc(#loc38)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc38)
    %30 = tt.expand_dims %28 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc17)
    %31 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc17)
    %32 = arith.divf %30, %cst_1 : tensor<1x1xf32, #blocked1> loc(#loc18)
    %33 = arith.divf %31, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc18)
    %34 = tt.broadcast %32 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc19)
    %35 = tt.broadcast %33 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc19)
    %36 = arith.subf %24, %34 : tensor<1x16xf32, #blocked1> loc(#loc19)
    %37 = arith.subf %25, %35 : tensor<1x16xf32, #blocked> loc(#loc19)
    %38 = arith.mulf %36, %36 : tensor<1x16xf32, #blocked1> loc(#loc20)
    %39 = arith.select %22, %38, %cst_3 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc21)
    %40 = "tt.reduce"(%39) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc22)), %arg8: f32 loc(callsite(#loc1 at #loc22))):
      %57 = arith.addf %arg7, %arg8 : f32 loc(#loc44)
      tt.reduce.return %57 : f32 loc(#loc41)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc41)
    %41 = tt.expand_dims %40 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc23)
    %42 = arith.divf %41, %cst_1 : tensor<1x1xf32, #blocked1> loc(#loc24)
    %43 = arith.addf %42, %cst_0 : tensor<1x1xf32, #blocked1> loc(#loc25)
    %44 = tt.extern_elementwise %43 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc26)
    %45 = arith.muli %0, %c16_i32 : i32 loc(#loc27)
    %46 = tt.splat %45 : i32 -> tensor<1x16xi32, #blocked> loc(#loc28)
    %47 = arith.addi %5, %46 : tensor<1x16xi32, #blocked> loc(#loc28)
    %48 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc29)
    %49 = tt.addptr %48, %47 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc29)
    tt.store %49, %37, %23 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc30)
    %50 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc31)
    %51 = tt.splat %50 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %52 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc32)
    tt.store %51, %44, %52 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %53 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc33)
    %54 = tt.splat %53 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    tt.store %54, %32, %52 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %55 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc35)
    %56 = tt.splat %55 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.store %56, %41, %52 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":23:28)
#loc3 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":25:21)
#loc4 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":26:34)
#loc5 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:45)
#loc6 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:40)
#loc7 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:35)
#loc8 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:61)
#loc9 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:55)
#loc10 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:51)
#loc11 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:30)
#loc12 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":31:66)
#loc13 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":35:33)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc17 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":36:27)
#loc18 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":39:19)
#loc19 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":40:19)
#loc20 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":41:20)
#loc21 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":43:35)
#loc23 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":44:29)
#loc24 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":47:20)
#loc25 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":49:20)
#loc26 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":50:28)
#loc27 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":51:33)
#loc28 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":51:30)
#loc29 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":51:25)
#loc30 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":51:45)
#loc31 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":52:25)
#loc32 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":52:37)
#loc33 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":53:25)
#loc34 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":53:37)
#loc35 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":54:25)
#loc36 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":54:37)
#loc37 = loc("inductor_cache/zi/czivgkwt32gsvytlxwdtgfywctshbogrvvwzlk33zejdzfeutbjg.py":54:4)
#loc38 = loc(callsite(#loc14 at #loc15))
#loc40 = loc(callsite(#loc16 at #loc14))
#loc41 = loc(callsite(#loc14 at #loc22))
#loc43 = loc(callsite(#loc40 at #loc15))
#loc44 = loc(callsite(#loc40 at #loc22))
