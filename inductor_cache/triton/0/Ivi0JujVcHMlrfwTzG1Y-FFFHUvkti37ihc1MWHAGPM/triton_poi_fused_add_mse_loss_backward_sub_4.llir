; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/wg/cwgeldvwi4hwj7cxrahrrkejd5xeor2c5zb7u76j56axaaskz4ls.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp5 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_mse_loss_backward_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 4, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = lshr i32 %10, 3, !dbg !14
  %12 = and i32 %11, 15, !dbg !14
  %13 = shl i32 %10, 1, !dbg !14
  %14 = and i32 %13, 14, !dbg !14
  %15 = or disjoint i32 %9, %12, !dbg !15
  %16 = icmp slt i32 %15, 16, !dbg !16
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !17
  %18 = shl i32 %17, 4, !dbg !18
  %19 = or disjoint i32 %18, %14, !dbg !19
  %20 = icmp slt i32 %19, 16, !dbg !20
  %.frozen6 = freeze i32 %15, !dbg !21
  %21 = sdiv i32 %.frozen6, 4, !dbg !21
  %22 = shl i32 %15, 4, !dbg !22
  %23 = add i32 %19, %22, !dbg !23
  %24 = sext i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !24
  %26 = and i1 %16, %20, !dbg !25
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %26) #3, !dbg !26
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !26
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !26
  %30 = shl i32 %10, 5, !dbg !26
  %31 = and i32 %30, 224, !dbg !26
  %32 = or disjoint i32 %31, %12, !dbg !26
  %33 = and i32 %13, 254, !dbg !26
  %34 = lshr exact i32 %31, 3, !dbg !26
  %35 = add nuw nsw i32 %34, %32, !dbg !26
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35, !dbg !26
  %37 = insertelement <1 x i32> poison, i32 %28, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %37, i1 true) #3, !dbg !26
  %38 = or disjoint i32 %32, 16, !dbg !26
  %39 = lshr i32 %38, 4, !dbg !26
  %40 = shl nuw nsw i32 %39, 1, !dbg !26
  %41 = add nuw nsw i32 %40, %38, !dbg !26
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %41, !dbg !26
  %43 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %44 = lshr i32 %33, 4, !dbg !26
  %45 = and i32 %10, 127, !dbg !26
  %46 = add nuw nsw i32 %44, %45, !dbg !26
  %47 = shl nuw nsw i32 %46, 1, !dbg !26
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47, !dbg !26
  %49 = load <2 x float>, ptr addrspace(3) %48, align 8, !dbg !26
  %50 = shl i32 %21, 4, !dbg !27
  %51 = add i32 %50, %19, !dbg !28
  %52 = sext i32 %51 to i64, !dbg !29
  %53 = getelementptr i64, ptr addrspace(1) %1, i64 %52, !dbg !29
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %53, i1 %26) #3, !dbg !30
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !30
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !30
  %57 = insertelement <2 x i64> poison, i64 %55, i64 0, !dbg !31
  %58 = insertelement <2 x i64> %57, i64 %56, i64 1, !dbg !31
  %59 = lshr <2 x i64> %58, splat (i64 61), !dbg !31
  %60 = and <2 x i64> %59, splat (i64 4), !dbg !31
  %61 = add <2 x i64> %60, %58, !dbg !31
  %62 = extractelement <2 x i64> %61, i64 0, !dbg !32
  %63 = extractelement <2 x i64> %61, i64 1, !dbg !32
  %64 = or i64 %62, %63, !dbg !32
  %.not24 = icmp ugt i64 %64, 3, !dbg !32
  %65 = and i1 %26, %.not24, !dbg !32
  br i1 %65, label %66, label %67, !dbg !32

66:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

67:                                               ; preds = %7
  %68 = extractelement <2 x float> %49, i64 1, !dbg !26
  %69 = extractelement <2 x float> %49, i64 0, !dbg !26
  %70 = or disjoint i32 %18, %12, !dbg !19
  %71 = icmp slt i32 %70, 16, !dbg !20
  %72 = or disjoint i32 %9, %14, !dbg !15
  %73 = icmp slt i32 %72, 16, !dbg !16
  %74 = and i1 %73, %71, !dbg !25
  %.frozen = freeze i32 %72, !dbg !21
  %75 = sdiv i32 %.frozen, 4, !dbg !21
  %76 = mul i32 %75, 4, !dbg !33
  %.decomposed = sub i32 %.frozen, %76, !dbg !33
  %77 = mul i32 %21, 4, !dbg !33
  %.decomposed7 = sub i32 %.frozen6, %77, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %78 = sext i32 %.decomposed7 to i64, !dbg !34
  %.idx = shl i64 %62, 4, !dbg !35
  %79 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %78, !dbg !35
  %.idx5 = shl i64 %63, 4, !dbg !35
  %81 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx5, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %78, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %83 = ptrtoint ptr addrspace(1) %80 to i64, !dbg !36
  %84 = ptrtoint ptr addrspace(1) %82 to i64, !dbg !36
  %85 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %35, !dbg !36
  %86 = insertelement <1 x i64> poison, i64 %83, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %85, <1 x i64> %86, i1 true) #3, !dbg !36
  %87 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %41, !dbg !36
  %88 = insertelement <1 x i64> poison, i64 %84, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %87, <1 x i64> %88, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %89 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %47, !dbg !36
  %90 = load i64, ptr addrspace(3) %89, align 16, !dbg !36
  %91 = inttoptr i64 %90 to ptr addrspace(1), !dbg !36
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %74) #3, !dbg !36
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !36
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !36
  %95 = bitcast i32 %93 to float, !dbg !36
  %96 = bitcast i32 %94 to float, !dbg !36
  %97 = fsub float %95, %69, !dbg !37
  %98 = fsub float %96, %68, !dbg !37
  %99 = fadd float %69, %97, !dbg !38
  %100 = fadd float %68, %98, !dbg !38
  %101 = fmul float %97, 7.812500e-03, !dbg !39
  %102 = fmul float %98, 7.812500e-03, !dbg !39
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %104 = lshr exact i32 %31, 2, !dbg !41
  %105 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %104, !dbg !41
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %32, !dbg !41
  %107 = bitcast float %99 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #3, !dbg !41
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %39, !dbg !41
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %38, !dbg !41
  %110 = bitcast float %100 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !41
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %33, !dbg !41
  %113 = load i32, ptr addrspace(3) %112, align 4, !dbg !41
  %114 = or disjoint i32 %33, 1, !dbg !41
  %115 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %114, !dbg !41
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %116, ptr addrspace(1) %103, i1 %26) #3, !dbg !41
  %117 = shl i32 %70, 2, !dbg !42
  %118 = add i32 %117, %.decomposed, !dbg !43
  %119 = shl i32 %75, 6, !dbg !44
  %120 = add i32 %118, %119, !dbg !45
  %121 = sext i32 %120 to i64, !dbg !46
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !46
  %123 = bitcast float %101 to i32, !dbg !47
  %124 = bitcast float %102 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %122, i1 %74) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwgeldvwi4hwj7cxrahrrkejd5xeor2c5zb7u76j56axaaskz4ls.py", directory: "inductor_cache/wg")
!4 = !{ptr @triton_poi_fused_add_mse_loss_backward_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mse_loss_backward_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_mse_loss_backward_sub_4", linkageName: "triton_poi_fused_add_mse_loss_backward_sub_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 23, scope: !11)
!20 = !DILocation(line: 27, column: 21, scope: !11)
!21 = !DILocation(line: 30, column: 19, scope: !11)
!22 = !DILocation(line: 32, column: 38, scope: !11)
!23 = !DILocation(line: 32, column: 35, scope: !11)
!24 = !DILocation(line: 32, column: 30, scope: !11)
!25 = !DILocation(line: 32, column: 51, scope: !11)
!26 = !DILocation(line: 32, column: 43, scope: !11)
!27 = !DILocation(line: 33, column: 38, scope: !11)
!28 = !DILocation(line: 33, column: 35, scope: !11)
!29 = !DILocation(line: 33, column: 30, scope: !11)
!30 = !DILocation(line: 33, column: 43, scope: !11)
!31 = !DILocation(line: 37, column: 32, scope: !11)
!32 = !DILocation(line: 38, column: 68, scope: !11)
!33 = !DILocation(line: 31, column: 19, scope: !11)
!34 = !DILocation(line: 39, column: 35, scope: !11)
!35 = !DILocation(line: 39, column: 30, scope: !11)
!36 = !DILocation(line: 39, column: 44, scope: !11)
!37 = !DILocation(line: 40, column: 18, scope: !11)
!38 = !DILocation(line: 41, column: 18, scope: !11)
!39 = !DILocation(line: 43, column: 19, scope: !11)
!40 = !DILocation(line: 44, column: 25, scope: !11)
!41 = !DILocation(line: 44, column: 44, scope: !11)
!42 = !DILocation(line: 45, column: 32, scope: !11)
!43 = !DILocation(line: 45, column: 30, scope: !11)
!44 = !DILocation(line: 45, column: 40, scope: !11)
!45 = !DILocation(line: 45, column: 37, scope: !11)
!46 = !DILocation(line: 45, column: 25, scope: !11)
!47 = !DILocation(line: 45, column: 52, scope: !11)
!48 = !DILocation(line: 45, column: 4, scope: !11)
