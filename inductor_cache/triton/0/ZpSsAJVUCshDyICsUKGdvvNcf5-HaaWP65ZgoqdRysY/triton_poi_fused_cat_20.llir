; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %22 = icmp slt i32 %20, 7988544, !dbg !14
  %23 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !15
  %24 = insertelement <2 x i32> %23, i32 %20, i64 1, !dbg !15
  %25 = sdiv <2 x i32> %24, splat (i32 81), !dbg !15
  %26 = srem <2 x i32> %25, splat (i32 24656), !dbg !16
  %27 = shufflevector <2 x i32> %26, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !16
  %.frozen = freeze i32 %20, !dbg !17
  %28 = sdiv i32 %.frozen, 1997136, !dbg !17
  %29 = extractelement <2 x i32> %26, i64 1, !dbg !18
  %30 = icmp slt i32 %29, 16384, !dbg !19
  %31 = extractelement <2 x i32> %26, i64 0, !dbg !18
  %32 = icmp slt i32 %31, 16384, !dbg !19
  %33 = mul i32 %28, 1997136, !dbg !20
  %srem.decomposed = sub i32 %.frozen, %33, !dbg !20
  %srem1 = srem i32 %21, 1997136, !dbg !20
  %34 = mul nsw i32 %28, 1327104, !dbg !21
  %35 = add nsw i32 %34, %srem.decomposed, !dbg !22
  %36 = add nsw i32 %34, %srem1, !dbg !22
  %37 = sdiv i32 %35, 1327104, !dbg !23
  %38 = sdiv i32 %36, 1327104, !dbg !23
  %.lhs.trunc = trunc nsw i32 %37 to i16, !dbg !24
  %39 = srem i16 %.lhs.trunc, 4, !dbg !24
  %.sext = sext i16 %39 to i32, !dbg !24
  %.lhs.trunc2 = trunc nsw i32 %38 to i16, !dbg !24
  %40 = srem i16 %.lhs.trunc2, 4, !dbg !24
  %.sext3 = sext i16 %40 to i32, !dbg !24
  %41 = mul nsw i32 %.sext, 1327104, !dbg !25
  %42 = mul nsw i32 %.sext3, 1327104, !dbg !25
  %43 = srem i32 %srem.decomposed, 1327104, !dbg !26
  %44 = srem i32 %srem1, 1327104, !dbg !26
  %45 = add nsw i32 %41, %43, !dbg !27
  %46 = add nsw i32 %42, %44, !dbg !27
  %47 = sext i32 %45 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = sext i32 %46 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = and i1 %22, %30, !dbg !29
  %52 = and i1 %32, %22, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %51, i32 0, i1 %51) #1, !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %52, i32 0, i1 %52) #1, !dbg !30
  %56 = bitcast i32 %55 to float, !dbg !30
  %57 = sdiv i32 %srem.decomposed, 4096, !dbg !31
  %58 = sdiv i32 %srem1, 4096, !dbg !31
  %.lhs.trunc4 = trunc nsw i32 %57 to i16, !dbg !32
  %59 = srem i16 %.lhs.trunc4, 324, !dbg !32
  %.lhs.trunc6 = trunc nsw i32 %58 to i16, !dbg !32
  %60 = srem i16 %.lhs.trunc6, 324, !dbg !32
  %61 = sext i16 %59 to i64, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !33
  %63 = sext i16 %60 to i64, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %51, i32 0, i1 %51) #1, !dbg !34
  %66 = bitcast i32 %65 to float, !dbg !34
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %52, i32 0, i1 %52) #1, !dbg !34
  %68 = bitcast i32 %67 to float, !dbg !34
  %69 = fadd float %54, %66, !dbg !35
  %70 = fadd float %56, %68, !dbg !35
  %71 = add nsw i32 %srem.decomposed, -1327104, !dbg !36
  %72 = add nsw i32 %srem1, -1327104, !dbg !36
  %73 = mul nsw i32 %28, 497664, !dbg !37
  %74 = add nsw i32 %71, %73, !dbg !38
  %75 = add nsw i32 %73, %72, !dbg !38
  %76 = sdiv i32 %74, 497664, !dbg !39
  %77 = sdiv i32 %75, 497664, !dbg !39
  %.lhs.trunc8 = trunc nsw i32 %76 to i16, !dbg !40
  %78 = srem i16 %.lhs.trunc8, 4, !dbg !40
  %.sext9 = sext i16 %78 to i32, !dbg !40
  %.lhs.trunc10 = trunc nsw i32 %77 to i16, !dbg !40
  %79 = srem i16 %.lhs.trunc10, 4, !dbg !40
  %.sext11 = sext i16 %79 to i32, !dbg !40
  %80 = mul nsw i32 %.sext9, 497664, !dbg !41
  %81 = mul nsw i32 %.sext11, 497664, !dbg !41
  %82 = srem i32 %71, 497664, !dbg !42
  %83 = srem i32 %72, 497664, !dbg !42
  %84 = add nsw i32 %80, %82, !dbg !43
  %85 = add nsw i32 %81, %83, !dbg !43
  %86 = sext i32 %84 to i64, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !44
  %88 = sext i32 %85 to i64, !dbg !44
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !44
  %90 = add nsw <8 x i32> %27, <i32 -24448, i32 -24448, i32 -24064, i32 -24064, i32 -22528, i32 -22528, i32 -16384, i32 -16384>, !dbg !45
  %91 = icmp ult <8 x i32> %90, <i32 144, i32 144, i32 384, i32 384, i32 1536, i32 1536, i32 6144, i32 6144>, !dbg !45
  %92 = extractelement <8 x i1> %91, i64 7, !dbg !46
  %93 = and i1 %22, %92, !dbg !46
  %94 = extractelement <8 x i1> %91, i64 6, !dbg !46
  %95 = and i1 %94, %22, !dbg !46
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %93, i32 0, i1 %93) #1, !dbg !47
  %97 = bitcast i32 %96 to float, !dbg !47
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %95, i32 0, i1 %95) #1, !dbg !47
  %99 = bitcast i32 %98 to float, !dbg !47
  %100 = sdiv i32 %71, 1024, !dbg !48
  %101 = sdiv i32 %72, 1024, !dbg !48
  %.lhs.trunc12 = trunc nsw i32 %100 to i16, !dbg !49
  %102 = srem i16 %.lhs.trunc12, 486, !dbg !49
  %.lhs.trunc14 = trunc nsw i32 %101 to i16, !dbg !49
  %103 = srem i16 %.lhs.trunc14, 486, !dbg !49
  %104 = sext i16 %102 to i64, !dbg !50
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !50
  %106 = sext i16 %103 to i64, !dbg !50
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !50
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %93, i32 0, i1 %93) #1, !dbg !51
  %109 = bitcast i32 %108 to float, !dbg !51
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %95, i32 0, i1 %95) #1, !dbg !51
  %111 = bitcast i32 %110 to float, !dbg !51
  %112 = fadd float %97, %109, !dbg !52
  %113 = fadd float %99, %111, !dbg !52
  %114 = add nsw i32 %srem.decomposed, -1824768, !dbg !53
  %115 = add nsw i32 %srem1, -1824768, !dbg !53
  %116 = mul nsw i32 %28, 124416, !dbg !54
  %117 = add nsw i32 %114, %116, !dbg !55
  %118 = add nsw i32 %116, %115, !dbg !55
  %119 = sdiv i32 %117, 124416, !dbg !56
  %120 = sdiv i32 %118, 124416, !dbg !56
  %.lhs.trunc16 = trunc nsw i32 %119 to i16, !dbg !57
  %121 = srem i16 %.lhs.trunc16, 4, !dbg !57
  %.sext17 = sext i16 %121 to i32, !dbg !57
  %.lhs.trunc18 = trunc nsw i32 %120 to i16, !dbg !57
  %122 = srem i16 %.lhs.trunc18, 4, !dbg !57
  %.sext19 = sext i16 %122 to i32, !dbg !57
  %123 = mul nsw i32 %.sext17, 124416, !dbg !58
  %124 = mul nsw i32 %.sext19, 124416, !dbg !58
  %125 = srem i32 %114, 124416, !dbg !59
  %126 = srem i32 %115, 124416, !dbg !59
  %127 = add nsw i32 %123, %125, !dbg !60
  %128 = add nsw i32 %124, %126, !dbg !60
  %129 = sext i32 %127 to i64, !dbg !61
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !61
  %131 = sext i32 %128 to i64, !dbg !61
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !61
  %133 = extractelement <8 x i1> %91, i64 5, !dbg !62
  %134 = and i1 %22, %133, !dbg !62
  %135 = extractelement <8 x i1> %91, i64 4, !dbg !62
  %136 = and i1 %135, %22, !dbg !62
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %134, i32 0, i1 %134) #1, !dbg !63
  %138 = bitcast i32 %137 to float, !dbg !63
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %136, i32 0, i1 %136) #1, !dbg !63
  %140 = bitcast i32 %139 to float, !dbg !63
  %141 = sdiv i32 %114, 256, !dbg !64
  %142 = sdiv i32 %115, 256, !dbg !64
  %.lhs.trunc20 = trunc nsw i32 %141 to i16, !dbg !65
  %143 = srem i16 %.lhs.trunc20, 486, !dbg !65
  %.lhs.trunc22 = trunc nsw i32 %142 to i16, !dbg !65
  %144 = srem i16 %.lhs.trunc22, 486, !dbg !65
  %145 = sext i16 %143 to i64, !dbg !66
  %146 = getelementptr float, ptr addrspace(1) %5, i64 %145, !dbg !66
  %147 = sext i16 %144 to i64, !dbg !66
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %147, !dbg !66
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %134, i32 0, i1 %134) #1, !dbg !67
  %150 = bitcast i32 %149 to float, !dbg !67
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %136, i32 0, i1 %136) #1, !dbg !67
  %152 = bitcast i32 %151 to float, !dbg !67
  %153 = fadd float %138, %150, !dbg !68
  %154 = fadd float %140, %152, !dbg !68
  %155 = add nsw i32 %srem.decomposed, -1949184, !dbg !69
  %156 = add nsw i32 %srem1, -1949184, !dbg !69
  %157 = mul nsw i32 %28, 31104, !dbg !70
  %158 = add nsw i32 %155, %157, !dbg !71
  %159 = add nsw i32 %157, %156, !dbg !71
  %160 = sdiv i32 %158, 31104, !dbg !72
  %161 = sdiv i32 %159, 31104, !dbg !72
  %.lhs.trunc24 = trunc nsw i32 %160 to i16, !dbg !73
  %162 = srem i16 %.lhs.trunc24, 4, !dbg !73
  %.sext25 = sext i16 %162 to i32, !dbg !73
  %.lhs.trunc26 = trunc nsw i32 %161 to i16, !dbg !73
  %163 = srem i16 %.lhs.trunc26, 4, !dbg !73
  %.sext27 = sext i16 %163 to i32, !dbg !73
  %164 = mul nsw i32 %.sext25, 31104, !dbg !74
  %165 = mul nsw i32 %.sext27, 31104, !dbg !74
  %166 = srem i32 %155, 31104, !dbg !75
  %167 = srem i32 %156, 31104, !dbg !75
  %168 = add nsw i32 %164, %166, !dbg !76
  %169 = add nsw i32 %165, %167, !dbg !76
  %170 = sext i32 %168 to i64, !dbg !77
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %170, !dbg !77
  %172 = sext i32 %169 to i64, !dbg !77
  %173 = getelementptr float, ptr addrspace(1) %6, i64 %172, !dbg !77
  %174 = extractelement <8 x i1> %91, i64 3, !dbg !78
  %175 = and i1 %22, %174, !dbg !78
  %176 = extractelement <8 x i1> %91, i64 2, !dbg !78
  %177 = and i1 %176, %22, !dbg !78
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %175, i32 0, i1 %175) #1, !dbg !79
  %179 = bitcast i32 %178 to float, !dbg !79
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %177, i32 0, i1 %177) #1, !dbg !79
  %181 = bitcast i32 %180 to float, !dbg !79
  %182 = sdiv i32 %155, 64, !dbg !80
  %183 = sdiv i32 %156, 64, !dbg !80
  %184 = srem i32 %182, 486, !dbg !81
  %185 = srem i32 %183, 486, !dbg !81
  %186 = sext i32 %184 to i64, !dbg !82
  %187 = getelementptr float, ptr addrspace(1) %7, i64 %186, !dbg !82
  %188 = sext i32 %185 to i64, !dbg !82
  %189 = getelementptr float, ptr addrspace(1) %7, i64 %188, !dbg !82
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %175, i32 0, i1 %175) #1, !dbg !83
  %191 = bitcast i32 %190 to float, !dbg !83
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %177, i32 0, i1 %177) #1, !dbg !83
  %193 = bitcast i32 %192 to float, !dbg !83
  %194 = fadd float %179, %191, !dbg !84
  %195 = fadd float %181, %193, !dbg !84
  %196 = add nsw i32 %srem.decomposed, -1980288, !dbg !85
  %197 = add nsw i32 %srem1, -1980288, !dbg !85
  %198 = mul nsw i32 %28, 11664, !dbg !86
  %199 = add nsw i32 %196, %198, !dbg !87
  %200 = add nsw i32 %198, %197, !dbg !87
  %201 = sdiv i32 %199, 11664, !dbg !88
  %202 = sdiv i32 %200, 11664, !dbg !88
  %.lhs.trunc28 = trunc nsw i32 %201 to i16, !dbg !89
  %203 = srem i16 %.lhs.trunc28, 4, !dbg !89
  %.sext29 = sext i16 %203 to i32, !dbg !89
  %.lhs.trunc30 = trunc nsw i32 %202 to i16, !dbg !89
  %204 = srem i16 %.lhs.trunc30, 4, !dbg !89
  %.sext31 = sext i16 %204 to i32, !dbg !89
  %205 = mul nsw i32 %.sext29, 11664, !dbg !90
  %206 = mul nsw i32 %.sext31, 11664, !dbg !90
  %207 = srem i32 %196, 11664, !dbg !91
  %208 = srem i32 %197, 11664, !dbg !91
  %209 = add nsw i32 %205, %207, !dbg !92
  %210 = add nsw i32 %206, %208, !dbg !92
  %211 = sext i32 %209 to i64, !dbg !93
  %212 = getelementptr float, ptr addrspace(1) %8, i64 %211, !dbg !93
  %213 = sext i32 %210 to i64, !dbg !93
  %214 = getelementptr float, ptr addrspace(1) %8, i64 %213, !dbg !93
  %215 = extractelement <8 x i1> %91, i64 1, !dbg !94
  %216 = and i1 %22, %215, !dbg !94
  %217 = extractelement <8 x i1> %91, i64 0, !dbg !94
  %218 = and i1 %217, %22, !dbg !94
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %216, i32 0, i1 %216) #1, !dbg !95
  %220 = bitcast i32 %219 to float, !dbg !95
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %218, i32 0, i1 %218) #1, !dbg !95
  %222 = bitcast i32 %221 to float, !dbg !95
  %223 = sdiv i32 %196, 36, !dbg !96
  %224 = sdiv i32 %197, 36, !dbg !96
  %225 = srem i32 %223, 324, !dbg !97
  %226 = srem i32 %224, 324, !dbg !97
  %227 = sext i32 %225 to i64, !dbg !98
  %228 = getelementptr float, ptr addrspace(1) %9, i64 %227, !dbg !98
  %229 = sext i32 %226 to i64, !dbg !98
  %230 = getelementptr float, ptr addrspace(1) %9, i64 %229, !dbg !98
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %216, i32 0, i1 %216) #1, !dbg !99
  %232 = bitcast i32 %231 to float, !dbg !99
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %218, i32 0, i1 %218) #1, !dbg !99
  %234 = bitcast i32 %233 to float, !dbg !99
  %235 = fadd float %220, %232, !dbg !100
  %236 = fadd float %222, %234, !dbg !100
  %237 = icmp sgt i32 %29, 24591, !dbg !18
  %238 = icmp sgt i32 %31, 24591, !dbg !18
  %239 = add nsw i32 %srem.decomposed, -1991952, !dbg !101
  %240 = add nsw i32 %srem1, -1991952, !dbg !101
  %241 = mul nsw i32 %28, 5184, !dbg !102
  %242 = add nsw i32 %239, %241, !dbg !103
  %243 = add nsw i32 %241, %240, !dbg !103
  %244 = sdiv i32 %242, 5184, !dbg !104
  %245 = sdiv i32 %243, 5184, !dbg !104
  %.lhs.trunc32 = trunc nsw i32 %244 to i16, !dbg !105
  %246 = srem i16 %.lhs.trunc32, 4, !dbg !105
  %.lhs.trunc34 = trunc nsw i32 %245 to i16, !dbg !105
  %247 = srem i16 %.lhs.trunc34, 4, !dbg !105
  %narrow = mul nsw i16 %246, 5184, !dbg !106
  %248 = sext i16 %narrow to i32, !dbg !106
  %narrow36 = mul nsw i16 %247, 5184, !dbg !106
  %249 = sext i16 %narrow36 to i32, !dbg !106
  %250 = srem i32 %239, 5184, !dbg !107
  %251 = srem i32 %240, 5184, !dbg !107
  %252 = add nsw i32 %250, %248, !dbg !108
  %253 = add nsw i32 %251, %249, !dbg !108
  %254 = sext i32 %252 to i64, !dbg !109
  %255 = getelementptr float, ptr addrspace(1) %10, i64 %254, !dbg !109
  %256 = sext i32 %253 to i64, !dbg !109
  %257 = getelementptr float, ptr addrspace(1) %10, i64 %256, !dbg !109
  %258 = and i1 %22, %237, !dbg !110
  %259 = and i1 %238, %22, !dbg !110
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %258, i32 0, i1 %258) #1, !dbg !111
  %261 = bitcast i32 %260 to float, !dbg !111
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %259, i32 0, i1 %259) #1, !dbg !111
  %263 = bitcast i32 %262 to float, !dbg !111
  %264 = sdiv i32 %239, 16, !dbg !112
  %265 = sdiv i32 %240, 16, !dbg !112
  %266 = srem i32 %264, 324, !dbg !113
  %267 = srem i32 %265, 324, !dbg !113
  %268 = sext i32 %266 to i64, !dbg !114
  %269 = getelementptr float, ptr addrspace(1) %11, i64 %268, !dbg !114
  %270 = sext i32 %267 to i64, !dbg !114
  %271 = getelementptr float, ptr addrspace(1) %11, i64 %270, !dbg !114
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %258, i32 0, i1 %258) #1, !dbg !115
  %273 = bitcast i32 %272 to float, !dbg !115
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %259, i32 0, i1 %259) #1, !dbg !115
  %275 = bitcast i32 %274 to float, !dbg !115
  %276 = fadd float %261, %273, !dbg !116
  %277 = fadd float %263, %275, !dbg !116
  %278 = select i1 %237, float %276, float 0.000000e+00, !dbg !117
  %279 = select i1 %238, float %277, float 0.000000e+00, !dbg !117
  %280 = select i1 %215, float %235, float %278, !dbg !118
  %281 = select i1 %217, float %236, float %279, !dbg !118
  %282 = select i1 %174, float %194, float %280, !dbg !118
  %283 = select i1 %176, float %195, float %281, !dbg !118
  %284 = select i1 %133, float %153, float %282, !dbg !118
  %285 = select i1 %135, float %154, float %283, !dbg !118
  %286 = select i1 %92, float %112, float %284, !dbg !118
  %287 = select i1 %94, float %113, float %285, !dbg !118
  %288 = select i1 %30, float %69, float %286, !dbg !118
  %289 = select i1 %32, float %70, float %287, !dbg !118
  %290 = sext i32 %20 to i64, !dbg !119
  %291 = getelementptr float, ptr addrspace(1) %12, i64 %290, !dbg !119
  %292 = bitcast float %288 to i32, !dbg !120
  %293 = bitcast float %289 to i32, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %292, i32 %293, ptr addrspace(1) %291, i1 %22) #1, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clq5dt3z7haslx32inezmzcqvupogps2dsdhnqfcguagg3qdcndw.py", directory: "inductor_cache/lq")
!4 = !{ptr @triton_poi_fused_cat_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_20", linkageName: "triton_poi_fused_cat_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 74, column: 20, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 65, scope: !7)
!22 = !DILocation(line: 33, column: 57, scope: !7)
!23 = !DILocation(line: 33, column: 72, scope: !7)
!24 = !DILocation(line: 33, column: 83, scope: !7)
!25 = !DILocation(line: 33, column: 40, scope: !7)
!26 = !DILocation(line: 33, column: 108, scope: !7)
!27 = !DILocation(line: 33, column: 91, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 127, scope: !7)
!30 = !DILocation(line: 33, column: 120, scope: !7)
!31 = !DILocation(line: 34, column: 50, scope: !7)
!32 = !DILocation(line: 34, column: 58, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 65, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 47, scope: !7)
!37 = !DILocation(line: 42, column: 75, scope: !7)
!38 = !DILocation(line: 42, column: 68, scope: !7)
!39 = !DILocation(line: 42, column: 82, scope: !7)
!40 = !DILocation(line: 42, column: 92, scope: !7)
!41 = !DILocation(line: 42, column: 40, scope: !7)
!42 = !DILocation(line: 42, column: 128, scope: !7)
!43 = !DILocation(line: 42, column: 100, scope: !7)
!44 = !DILocation(line: 42, column: 31, scope: !7)
!45 = !DILocation(line: 68, column: 20, scope: !7)
!46 = !DILocation(line: 42, column: 147, scope: !7)
!47 = !DILocation(line: 42, column: 139, scope: !7)
!48 = !DILocation(line: 43, column: 62, scope: !7)
!49 = !DILocation(line: 43, column: 70, scope: !7)
!50 = !DILocation(line: 43, column: 32, scope: !7)
!51 = !DILocation(line: 43, column: 77, scope: !7)
!52 = !DILocation(line: 44, column: 20, scope: !7)
!53 = !DILocation(line: 51, column: 47, scope: !7)
!54 = !DILocation(line: 51, column: 75, scope: !7)
!55 = !DILocation(line: 51, column: 68, scope: !7)
!56 = !DILocation(line: 51, column: 82, scope: !7)
!57 = !DILocation(line: 51, column: 92, scope: !7)
!58 = !DILocation(line: 51, column: 40, scope: !7)
!59 = !DILocation(line: 51, column: 128, scope: !7)
!60 = !DILocation(line: 51, column: 100, scope: !7)
!61 = !DILocation(line: 51, column: 31, scope: !7)
!62 = !DILocation(line: 51, column: 147, scope: !7)
!63 = !DILocation(line: 51, column: 139, scope: !7)
!64 = !DILocation(line: 52, column: 62, scope: !7)
!65 = !DILocation(line: 52, column: 69, scope: !7)
!66 = !DILocation(line: 52, column: 32, scope: !7)
!67 = !DILocation(line: 52, column: 76, scope: !7)
!68 = !DILocation(line: 53, column: 20, scope: !7)
!69 = !DILocation(line: 60, column: 46, scope: !7)
!70 = !DILocation(line: 60, column: 73, scope: !7)
!71 = !DILocation(line: 60, column: 67, scope: !7)
!72 = !DILocation(line: 60, column: 80, scope: !7)
!73 = !DILocation(line: 60, column: 89, scope: !7)
!74 = !DILocation(line: 60, column: 39, scope: !7)
!75 = !DILocation(line: 60, column: 125, scope: !7)
!76 = !DILocation(line: 60, column: 97, scope: !7)
!77 = !DILocation(line: 60, column: 31, scope: !7)
!78 = !DILocation(line: 60, column: 143, scope: !7)
!79 = !DILocation(line: 60, column: 135, scope: !7)
!80 = !DILocation(line: 61, column: 62, scope: !7)
!81 = !DILocation(line: 61, column: 68, scope: !7)
!82 = !DILocation(line: 61, column: 32, scope: !7)
!83 = !DILocation(line: 61, column: 75, scope: !7)
!84 = !DILocation(line: 62, column: 20, scope: !7)
!85 = !DILocation(line: 69, column: 46, scope: !7)
!86 = !DILocation(line: 69, column: 73, scope: !7)
!87 = !DILocation(line: 69, column: 67, scope: !7)
!88 = !DILocation(line: 69, column: 80, scope: !7)
!89 = !DILocation(line: 69, column: 89, scope: !7)
!90 = !DILocation(line: 69, column: 39, scope: !7)
!91 = !DILocation(line: 69, column: 125, scope: !7)
!92 = !DILocation(line: 69, column: 97, scope: !7)
!93 = !DILocation(line: 69, column: 31, scope: !7)
!94 = !DILocation(line: 69, column: 143, scope: !7)
!95 = !DILocation(line: 69, column: 135, scope: !7)
!96 = !DILocation(line: 70, column: 62, scope: !7)
!97 = !DILocation(line: 70, column: 68, scope: !7)
!98 = !DILocation(line: 70, column: 32, scope: !7)
!99 = !DILocation(line: 70, column: 75, scope: !7)
!100 = !DILocation(line: 71, column: 20, scope: !7)
!101 = !DILocation(line: 77, column: 46, scope: !7)
!102 = !DILocation(line: 77, column: 72, scope: !7)
!103 = !DILocation(line: 77, column: 67, scope: !7)
!104 = !DILocation(line: 77, column: 79, scope: !7)
!105 = !DILocation(line: 77, column: 87, scope: !7)
!106 = !DILocation(line: 77, column: 39, scope: !7)
!107 = !DILocation(line: 77, column: 123, scope: !7)
!108 = !DILocation(line: 77, column: 95, scope: !7)
!109 = !DILocation(line: 77, column: 32, scope: !7)
!110 = !DILocation(line: 77, column: 140, scope: !7)
!111 = !DILocation(line: 77, column: 132, scope: !7)
!112 = !DILocation(line: 78, column: 63, scope: !7)
!113 = !DILocation(line: 78, column: 69, scope: !7)
!114 = !DILocation(line: 78, column: 33, scope: !7)
!115 = !DILocation(line: 78, column: 76, scope: !7)
!116 = !DILocation(line: 79, column: 20, scope: !7)
!117 = !DILocation(line: 81, column: 35, scope: !7)
!118 = !DILocation(line: 0, scope: !7)
!119 = !DILocation(line: 87, column: 25, scope: !7)
!120 = !DILocation(line: 87, column: 37, scope: !7)
!121 = !DILocation(line: 87, column: 4, scope: !7)
