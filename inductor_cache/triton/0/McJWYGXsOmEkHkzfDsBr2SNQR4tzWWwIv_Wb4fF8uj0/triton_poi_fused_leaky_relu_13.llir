; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %15 = shl i32 %14, 6, !dbg !15
  %16 = and i32 %12, 60, !dbg !16
  %17 = or disjoint i32 %15, %16, !dbg !17
  %18 = icmp slt i32 %17, 64, !dbg !18
  %19 = sdiv i32 %13, 256, !dbg !19
  %20 = shl i32 %13, 6, !dbg !20
  %21 = add i32 %17, %20, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %18) #4, !dbg !23
  %25 = shl nsw i32 %19, 6, !dbg !24
  %26 = add i32 %25, %17, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !26
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #4, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !28
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %18) #4, !dbg !29
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !29
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !29
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !29
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !29
  %36 = bitcast i32 %32 to float, !dbg !29
  %37 = bitcast i32 %33 to float, !dbg !29
  %38 = bitcast i32 %34 to float, !dbg !29
  %39 = bitcast i32 %35 to float, !dbg !29
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 2.560000e+02) #4, !dbg !30
  %41 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 2.560000e+02) #4, !dbg !30
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 2.560000e+02) #4, !dbg !30
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 2.560000e+02) #4, !dbg !30
  %44 = fadd float %40, 0x3EE4F8B580000000, !dbg !31
  %45 = fadd float %41, 0x3EE4F8B580000000, !dbg !31
  %46 = fadd float %42, 0x3EE4F8B580000000, !dbg !31
  %47 = fadd float %43, 0x3EE4F8B580000000, !dbg !31
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %48, 0, !dbg !32
  br i1 %.not.i, label %51, label %49, !dbg !32

49:                                               ; preds = %6
  %50 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %44), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

51:                                               ; preds = %6
  %52 = tail call float @llvm.nvvm.rsqrt.approx.f(float %44), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %49, %51
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], !dbg !32
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i10 = icmp eq i32 %53, 0, !dbg !32
  br i1 %.not.i10, label %56, label %54, !dbg !32

54:                                               ; preds = %__nv_rsqrtf.exit
  %55 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %45), !dbg !32
  br label %__nv_rsqrtf.exit12, !dbg !32

56:                                               ; preds = %__nv_rsqrtf.exit
  %57 = tail call float @llvm.nvvm.rsqrt.approx.f(float %45), !dbg !32
  br label %__nv_rsqrtf.exit12, !dbg !32

__nv_rsqrtf.exit12:                               ; preds = %54, %56
  %.0.i11 = phi float [ %55, %54 ], [ %57, %56 ], !dbg !32
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i13 = icmp eq i32 %58, 0, !dbg !32
  br i1 %.not.i13, label %61, label %59, !dbg !32

59:                                               ; preds = %__nv_rsqrtf.exit12
  %60 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %46), !dbg !32
  br label %__nv_rsqrtf.exit15, !dbg !32

61:                                               ; preds = %__nv_rsqrtf.exit12
  %62 = tail call float @llvm.nvvm.rsqrt.approx.f(float %46), !dbg !32
  br label %__nv_rsqrtf.exit15, !dbg !32

__nv_rsqrtf.exit15:                               ; preds = %59, %61
  %.0.i14 = phi float [ %60, %59 ], [ %62, %61 ], !dbg !32
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i16 = icmp eq i32 %63, 0, !dbg !32
  br i1 %.not.i16, label %66, label %64, !dbg !32

64:                                               ; preds = %__nv_rsqrtf.exit15
  %65 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %47), !dbg !32
  br label %__nv_rsqrtf.exit18, !dbg !32

66:                                               ; preds = %__nv_rsqrtf.exit15
  %67 = tail call float @llvm.nvvm.rsqrt.approx.f(float %47), !dbg !32
  br label %__nv_rsqrtf.exit18, !dbg !32

__nv_rsqrtf.exit18:                               ; preds = %64, %66
  %.0.i17 = phi float [ %65, %64 ], [ %67, %66 ], !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !23
  %75 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !27
  %76 = and i32 %12, 4, !dbg !12
  %77 = or disjoint i32 %8, %76, !dbg !13
  %.frozen = freeze i32 %77, !dbg !19
  %78 = sdiv i32 %.frozen, 256, !dbg !19
  %79 = mul i32 %78, 256, !dbg !33
  %.decomposed = sub i32 %.frozen, %79, !dbg !33
  %80 = lshr i32 %9, 1, !dbg !16
  %81 = and i32 %80, 63, !dbg !16
  %82 = or disjoint i32 %15, %81, !dbg !17
  %83 = icmp slt i32 %82, 64, !dbg !18
  %84 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !23
  %85 = insertelement <4 x i32> %84, i32 %70, i64 1, !dbg !23
  %86 = insertelement <4 x i32> %85, i32 %72, i64 2, !dbg !23
  %87 = insertelement <4 x i32> %86, i32 %74, i64 3, !dbg !23
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !23
  %89 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !27
  %90 = insertelement <4 x i32> %89, i32 %71, i64 1, !dbg !27
  %91 = insertelement <4 x i32> %90, i32 %73, i64 2, !dbg !27
  %92 = insertelement <4 x i32> %91, i32 %75, i64 3, !dbg !27
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !27
  %94 = fsub <4 x float> %88, %93, !dbg !34
  %95 = insertelement <4 x float> poison, float %.0.i17, i64 0, !dbg !35
  %96 = insertelement <4 x float> %95, float %.0.i14, i64 1, !dbg !35
  %97 = insertelement <4 x float> %96, float %.0.i11, i64 2, !dbg !35
  %98 = insertelement <4 x float> %97, float %.0.i, i64 3, !dbg !35
  %99 = fmul <4 x float> %94, %98, !dbg !35
  %100 = fcmp ogt <4 x float> %99, zeroinitializer, !dbg !36
  %101 = extractelement <4 x float> %99, i64 3, !dbg !37
  %102 = fmul float %101, 0x3FB99999A0000000, !dbg !38
  %103 = extractelement <4 x float> %99, i64 2, !dbg !37
  %104 = fmul float %103, 0x3FB99999A0000000, !dbg !38
  %105 = extractelement <4 x float> %99, i64 1, !dbg !37
  %106 = fmul float %105, 0x3FB99999A0000000, !dbg !38
  %107 = extractelement <4 x float> %99, i64 0, !dbg !37
  %108 = fmul float %107, 0x3FB99999A0000000, !dbg !38
  %109 = extractelement <4 x i1> %100, i64 3, !dbg !37
  %110 = select i1 %109, float %101, float %102, !dbg !37
  %111 = extractelement <4 x i1> %100, i64 2, !dbg !37
  %112 = select i1 %111, float %103, float %104, !dbg !37
  %113 = extractelement <4 x i1> %100, i64 1, !dbg !37
  %114 = select i1 %113, float %105, float %106, !dbg !37
  %115 = extractelement <4 x i1> %100, i64 0, !dbg !37
  %116 = select i1 %115, float %107, float %108, !dbg !37
  %117 = shl i32 %82, 8, !dbg !39
  %118 = add i32 %117, %.decomposed, !dbg !40
  %119 = shl i32 %78, 14, !dbg !41
  %120 = add i32 %118, %119, !dbg !42
  %121 = sext i32 %120 to i64, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !43
  %123 = shl i32 %9, 5, !dbg !44
  %124 = and i32 %123, 480, !dbg !44
  %125 = or disjoint i32 %124, %11, !dbg !44
  %126 = and i32 %12, 508, !dbg !44
  %127 = lshr exact i32 %124, 1, !dbg !44
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !44
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %125, !dbg !44
  %130 = bitcast float %110 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #4, !dbg !44
  %131 = or disjoint i32 %125, 8, !dbg !44
  %132 = lshr i32 %131, 1, !dbg !44
  %133 = and i32 %132, 244, !dbg !44
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !44
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %131, !dbg !44
  %136 = bitcast float %112 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #4, !dbg !44
  %137 = or disjoint i32 %125, 16, !dbg !44
  %138 = lshr i32 %137, 1, !dbg !44
  %139 = and i32 %138, 248, !dbg !44
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !44
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %137, !dbg !44
  %142 = bitcast float %114 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !44
  %143 = or disjoint i32 %125, 24, !dbg !44
  %144 = lshr i32 %143, 1, !dbg !44
  %145 = and i32 %144, 252, !dbg !44
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !44
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %143, !dbg !44
  %148 = bitcast float %116 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %149 = lshr exact i32 %12, 1, !dbg !44
  %150 = and i32 %149, 252, !dbg !44
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !44
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %126, !dbg !44
  %.extract = load i32, ptr addrspace(3) %152, align 16, !dbg !44
  %153 = getelementptr inbounds i8, ptr addrspace(3) %152, i32 4, !dbg !44
  %.extract7 = load i32, ptr addrspace(3) %153, align 4, !dbg !44
  %154 = getelementptr inbounds i8, ptr addrspace(3) %152, i32 8, !dbg !44
  %.extract8 = load i32, ptr addrspace(3) %154, align 8, !dbg !44
  %155 = getelementptr inbounds i8, ptr addrspace(3) %152, i32 12, !dbg !44
  %.extract9 = load i32, ptr addrspace(3) %155, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %122, i1 %83) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czgyn7uzcuuf5e2cfubq7xjjgu5vtgvtsb3z53cijxhjt24b4mvi.py", directory: "inductor_cache/zg")
!4 = !{ptr @triton_poi_fused_leaky_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_13", linkageName: "triton_poi_fused_leaky_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 43, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 27, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 34, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 34, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !7)
!41 = !DILocation(line: 47, column: 45, scope: !7)
!42 = !DILocation(line: 47, column: 39, scope: !7)
!43 = !DILocation(line: 47, column: 25, scope: !7)
!44 = !DILocation(line: 47, column: 57, scope: !7)
!45 = !DILocation(line: 47, column: 4, scope: !7)
