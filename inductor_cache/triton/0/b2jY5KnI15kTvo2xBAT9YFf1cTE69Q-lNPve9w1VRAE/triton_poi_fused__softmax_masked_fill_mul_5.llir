; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_masked_fill_mul_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %18 = sdiv i32 %.frozen, 16, !dbg !15
  %19 = mul i32 %18, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %15, 4, !dbg !17
  %21 = srem i32 %16, 4, !dbg !18
  %22 = srem i32 %20, 4, !dbg !19
  %23 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !20
  %24 = insertelement <2 x i32> %23, i32 %15, i64 1, !dbg !20
  %25 = srem <2 x i32> %24, splat (i32 4), !dbg !20
  %26 = srem i32 %20, 16, !dbg !21
  %27 = sext i32 %.decomposed to i64, !dbg !22
  %28 = getelementptr i1, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #1, !dbg !23
  %30 = bitcast i16 %29 to <2 x i8>, !dbg !23
  %31 = icmp eq <2 x i8> %30, zeroinitializer, !dbg !23
  %32 = sext i32 %15 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #1, !dbg !25
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %37 = bitcast i32 %35 to float, !dbg !25
  %38 = bitcast i32 %36 to float, !dbg !25
  %39 = sext i32 %20 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %17) #1, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %17) #1, !dbg !27
  %44 = bitcast i32 %43 to float, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #1, !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #1, !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = mul nsw i32 %22, 7, !dbg !30
  %51 = extractelement <2 x i32> %25, i64 0, !dbg !31
  %52 = shl nsw i32 %51, 5, !dbg !32
  %53 = add nsw i32 %50, 3, !dbg !33
  %54 = extractelement <2 x i32> %25, i64 1, !dbg !34
  %55 = add nsw i32 %53, %54, !dbg !34
  %56 = add nsw i32 %55, %52, !dbg !35
  %57 = add nsw i32 %53, %21, !dbg !34
  %58 = add nsw i32 %57, %52, !dbg !35
  %59 = sext i32 %56 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !36
  %61 = sext i32 %58 to i64, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %17) #1, !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %17) #1, !dbg !37
  %66 = bitcast i32 %65 to float, !dbg !37
  %67 = shl nsw i32 %51, 2, !dbg !31
  %68 = add nsw i32 %67, %54, !dbg !38
  %69 = sext i32 %68 to i64, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !39
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %17) #1, !dbg !40
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !40
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !40
  %74 = bitcast i32 %72 to float, !dbg !40
  %75 = bitcast i32 %73 to float, !dbg !40
  %76 = sext i32 %26 to i64, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %76, !dbg !41
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %17) #1, !dbg !42
  %79 = bitcast i32 %78 to float, !dbg !42
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %17) #1, !dbg !42
  %81 = bitcast i32 %80 to float, !dbg !42
  %82 = extractelement <2 x i1> %31, i64 0, !dbg !43
  %83 = select i1 %82, float %37, float 0xFFF0000000000000, !dbg !43
  %84 = extractelement <2 x i1> %31, i64 1, !dbg !43
  %85 = select i1 %84, float %38, float 0xFFF0000000000000, !dbg !43
  %86 = fsub float %83, %42, !dbg !44
  %87 = fsub float %85, %44, !dbg !44
  %88 = fmul float %86, 0x3FF7154760000000, !dbg !45
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #1, !dbg !45
  %90 = fmul float %87, 0x3FF7154760000000, !dbg !45
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #1, !dbg !45
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %47) #1, !dbg !46
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %49) #1, !dbg !46
  %94 = fmul float %64, %74, !dbg !47
  %95 = fmul float %66, %75, !dbg !47
  %96 = fmul float %94, %79, !dbg !48
  %97 = fmul float %95, %81, !dbg !48
  %98 = fmul float %96, %92, !dbg !49
  %99 = fmul float %97, %93, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !50
  %101 = bitcast float %98 to i32, !dbg !51
  %102 = bitcast float %99 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %17) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cengelguqw6bzjykwrid4gbr7vzb2kjkme6wauc7wniaaypjlr7t.py", directory: "inductor_cache/en")
!4 = !{ptr @triton_poi_fused__softmax_masked_fill_mul_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_masked_fill_mul_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_masked_fill_mul_5", linkageName: "triton_poi_fused__softmax_masked_fill_mul_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 29, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 26, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 42, scope: !7)
!31 = !DILocation(line: 36, column: 38, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 40, scope: !7)
!35 = !DILocation(line: 35, column: 47, scope: !7)
!36 = !DILocation(line: 35, column: 31, scope: !7)
!37 = !DILocation(line: 35, column: 55, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 36, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 23, scope: !7)
!46 = !DILocation(line: 44, column: 19, scope: !7)
!47 = !DILocation(line: 45, column: 20, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 25, scope: !7)
!51 = !DILocation(line: 48, column: 37, scope: !7)
!52 = !DILocation(line: 48, column: 4, scope: !7)
