; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 64, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 63, !dbg !12
  %14 = lshr i32 %13, 4, !dbg !13
  %15 = srem i32 %8, 16, !dbg !14
  %16 = shl i32 %8, 6, !dbg !15
  %17 = or disjoint i32 %16, %13, !dbg !16
  %18 = sext i32 %17 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %21 = bitcast i32 %20 to float, !dbg !18
  %22 = shl nsw i32 %15, 2, !dbg !19
  %23 = or disjoint i32 %22, %14, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = fadd float %21, %27, !dbg !23
  %29 = select i1 %9, float %28, float 0.000000e+00, !dbg !24
  %30 = bitcast float %29 to i32, !dbg !25
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 16, i32 31), !dbg !25
  %32 = bitcast i32 %31 to float, !dbg !25
  %33 = fadd float %29, %32, !dbg !29
  %34 = bitcast float %33 to i32, !dbg !25
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = fadd float %33, %36, !dbg !29
  %38 = bitcast float %37 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 4, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %37, %40, !dbg !29
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !29
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !29
  %50 = icmp eq i32 %11, 0, !dbg !25
  %51 = and i32 %12, 1, !dbg !25
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51, !dbg !25
  %53 = bitcast float %49 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 %50) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %54 = icmp slt i32 %10, 2, !dbg !25
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  %56 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %54) #5, !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = fadd float %57, %59, !dbg !29
  %61 = and i32 %10, 1, !dbg !25
  %62 = icmp eq i32 %61, 0, !dbg !25
  %63 = and i1 %54, %62, !dbg !25
  %64 = bitcast float %60 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %64, i1 %63) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %65 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 6.400000e+01) #5, !dbg !31
  %67 = fsub float %28, %66, !dbg !32
  %68 = fmul float %67, %67, !dbg !33
  %69 = select i1 %9, float %68, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %70 = bitcast float %69 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %69, %72, !dbg !37
  %74 = bitcast float %73 to i32, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %73, %76, !dbg !37
  %78 = bitcast float %77 to i32, !dbg !35
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !35
  %80 = bitcast i32 %79 to float, !dbg !35
  %81 = fadd float %77, %80, !dbg !37
  %82 = bitcast float %81 to i32, !dbg !35
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !35
  %84 = bitcast i32 %83 to float, !dbg !35
  %85 = fadd float %81, %84, !dbg !37
  %86 = bitcast float %85 to i32, !dbg !35
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !35
  %88 = bitcast i32 %87 to float, !dbg !35
  %89 = fadd float %85, %88, !dbg !37
  %90 = bitcast float %89 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %90, i1 %50) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %91 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %54) #5, !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !35
  %94 = bitcast i32 %93 to float, !dbg !35
  %95 = fadd float %92, %94, !dbg !37
  %96 = bitcast float %95 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %96, i1 %63) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %97 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 6.400000e+01) #5, !dbg !38
  %99 = fadd float %98, 0x3EE4F8B580000000, !dbg !39
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %100, 0, !dbg !40
  br i1 %.not.i, label %103, label %101, !dbg !40

101:                                              ; preds = %7
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

103:                                              ; preds = %7
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %101, %103
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], !dbg !40
  %105 = bitcast float %28 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %19, i1 %9) #5, !dbg !41
  %106 = sext i32 %8 to i64, !dbg !42
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !42
  %108 = icmp eq i32 %13, 0, !dbg !43
  %109 = bitcast float %.0.i to i32, !dbg !43
  %110 = and i1 %108, %9, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %107, i1 %110) #5, !dbg !43
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !44
  %112 = bitcast float %66 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %111, i1 %110) #5, !dbg !45
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !46
  %114 = bitcast float %97 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %113, i1 %110) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfgwodrczjtkt6ozwusst6lk2ym33u3ruljnr6onqxbkcoozlrz7.py", directory: "inductor_cache/fg")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_0", linkageName: "triton_per_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 42, scope: !7)
!16 = !DILocation(line: 33, column: 39, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 34, column: 37, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 40, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 47, scope: !7)
!42 = !DILocation(line: 55, column: 25, scope: !7)
!43 = !DILocation(line: 55, column: 37, scope: !7)
!44 = !DILocation(line: 56, column: 25, scope: !7)
!45 = !DILocation(line: 56, column: 37, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
