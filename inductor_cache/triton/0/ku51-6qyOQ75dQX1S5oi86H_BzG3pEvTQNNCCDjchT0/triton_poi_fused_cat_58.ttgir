#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_58(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg4: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<-64> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<256> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<2048> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<128> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_9 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %5, %cst_8 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_7 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %4, %cst_9 : tensor<128xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc10)
    %10 = arith.remsi %9, %cst_6 : tensor<128xi32, #blocked> loc(#loc11)
    %11 = arith.remsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc12)
    %12 = arith.extsi %6 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc13)
    %13 = arith.cmpi slt, %12, %cst_5 : tensor<128xi64, #blocked> loc(#loc13)
    %14 = arith.muli %6, %cst_9 : tensor<128xi32, #blocked> loc(#loc14)
    %15 = arith.addi %8, %14 : tensor<128xi32, #blocked> loc(#loc15)
    %16 = arith.muli %7, %cst_4 : tensor<128xi32, #blocked> loc(#loc16)
    %17 = arith.addi %15, %16 : tensor<128xi32, #blocked> loc(#loc17)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc18)
    %19 = tt.addptr %18, %17 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc18)
    %20 = tt.load %19, %13, %cst_3 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %21 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<128x!tt.ptr<i64>, #blocked> loc(#loc20)
    %22 = tt.addptr %21, %10 : tensor<128x!tt.ptr<i64>, #blocked>, tensor<128xi32, #blocked> loc(#loc20)
    %23 = tt.load %22, %13, %cst evictionPolicy = evict_last : tensor<128x!tt.ptr<i64>, #blocked> loc(#loc21)
    %24 = arith.addi %23, %cst_2 : tensor<128xi64, #blocked> loc(#loc22)
    %25 = arith.cmpi slt, %23, %cst : tensor<128xi64, #blocked> loc(#loc23)
    %26 = arith.select %25, %24, %23 : tensor<128xi1, #blocked>, tensor<128xi64, #blocked> loc(#loc24)
    %27 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<128x!tt.ptr<i64>, #blocked> loc(#loc25)
    %28 = tt.addptr %27, %11 : tensor<128x!tt.ptr<i64>, #blocked>, tensor<128xi32, #blocked> loc(#loc25)
    %29 = tt.load %28, %13, %cst evictionPolicy = evict_last : tensor<128x!tt.ptr<i64>, #blocked> loc(#loc26)
    %30 = arith.addi %29, %cst_2 : tensor<128xi64, #blocked> loc(#loc27)
    %31 = arith.cmpi slt, %29, %cst : tensor<128xi64, #blocked> loc(#loc28)
    %32 = arith.select %31, %30, %29 : tensor<128xi1, #blocked>, tensor<128xi64, #blocked> loc(#loc29)
    %33 = arith.muli %26, %cst_2 : tensor<128xi64, #blocked> loc(#loc30)
    %34 = arith.addi %32, %33 : tensor<128xi64, #blocked> loc(#loc31)
    %35 = arith.muli %6, %cst_6 : tensor<128xi32, #blocked> loc(#loc32)
    %36 = arith.extsi %35 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc33)
    %37 = arith.addi %34, %36 : tensor<128xi64, #blocked> loc(#loc33)
    %38 = arith.muli %7, %cst_1 : tensor<128xi32, #blocked> loc(#loc34)
    %39 = arith.extsi %38 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc35)
    %40 = arith.addi %37, %39 : tensor<128xi64, #blocked> loc(#loc35)
    %41 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc36)
    %42 = tt.addptr %41, %40 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi64, #blocked> loc(#loc36)
    %43 = tt.load %42, %13, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc37)
    %44 = tt.splat %arg4 : !tt.ptr<i64> -> tensor<128x!tt.ptr<i64>, #blocked> loc(#loc38)
    %45 = tt.addptr %44, %11 : tensor<128x!tt.ptr<i64>, #blocked>, tensor<128xi32, #blocked> loc(#loc38)
    %46 = tt.load %45, %13, %cst evictionPolicy = evict_last : tensor<128x!tt.ptr<i64>, #blocked> loc(#loc39)
    %47 = arith.addi %46, %cst_2 : tensor<128xi64, #blocked> loc(#loc40)
    %48 = arith.cmpi slt, %46, %cst : tensor<128xi64, #blocked> loc(#loc41)
    %49 = arith.select %48, %47, %46 : tensor<128xi1, #blocked>, tensor<128xi64, #blocked> loc(#loc42)
    %50 = arith.addi %49, %33 : tensor<128xi64, #blocked> loc(#loc43)
    %51 = arith.addi %50, %36 : tensor<128xi64, #blocked> loc(#loc44)
    %52 = arith.addi %51, %39 : tensor<128xi64, #blocked> loc(#loc45)
    %53 = tt.addptr %41, %52 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi64, #blocked> loc(#loc46)
    %54 = tt.load %53, %13, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc47)
    %55 = arith.subf %54, %43 : tensor<128xf32, #blocked> loc(#loc48)
    %56 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc49)
    %57 = tt.addptr %56, %11 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc49)
    %58 = tt.load %57, %13, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc50)
    %59 = arith.mulf %55, %58 : tensor<128xf32, #blocked> loc(#loc51)
    %60 = arith.addf %43, %59 : tensor<128xf32, #blocked> loc(#loc52)
    %61 = arith.subf %60, %20 : tensor<128xf32, #blocked> loc(#loc53)
    %62 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc54)
    %63 = tt.addptr %62, %10 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc54)
    %64 = tt.load %63, %13, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc55)
    %65 = arith.mulf %61, %64 : tensor<128xf32, #blocked> loc(#loc56)
    %66 = arith.addf %20, %65 : tensor<128xf32, #blocked> loc(#loc57)
    %67 = arith.cmpi sge, %12, %cst_5 : tensor<128xi64, #blocked> loc(#loc58)
    %68 = arith.addi %6, %cst_0 : tensor<128xi32, #blocked> loc(#loc59)
    %69 = arith.muli %68, %cst_9 : tensor<128xi32, #blocked> loc(#loc60)
    %70 = arith.addi %8, %69 : tensor<128xi32, #blocked> loc(#loc61)
    %71 = arith.addi %70, %16 : tensor<128xi32, #blocked> loc(#loc62)
    %72 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc63)
    %73 = tt.addptr %72, %71 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc63)
    %74 = tt.load %73, %67, %cst_3 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc64)
    %75 = arith.select %13, %66, %74 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc70)
    %76 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc67)
    %77 = tt.addptr %76, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc67)
    tt.store %77, %75 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc68)
    tt.return loc(#loc69)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":21:28)
#loc3 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":21:33)
#loc4 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":22:36)
#loc5 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":22:23)
#loc6 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":24:21)
#loc7 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":24:27)
#loc8 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":25:19)
#loc9 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":26:19)
#loc10 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":27:21)
#loc11 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":27:26)
#loc12 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":28:19)
#loc13 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":34:18)
#loc14 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":35:39)
#loc15 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":35:35)
#loc16 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":35:50)
#loc17 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":35:45)
#loc18 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":35:30)
#loc19 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":35:55)
#loc20 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":36:30)
#loc21 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":36:35)
#loc22 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":38:18)
#loc23 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":39:18)
#loc24 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":40:33)
#loc25 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":41:31)
#loc26 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":41:36)
#loc27 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":42:20)
#loc28 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":43:20)
#loc29 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":44:35)
#loc30 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:41)
#loc31 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:39)
#loc32 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:52)
#loc33 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:49)
#loc34 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:62)
#loc35 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:58)
#loc36 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:31)
#loc37 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":45:67)
#loc38 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":46:31)
#loc39 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":46:36)
#loc40 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":47:20)
#loc41 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":48:20)
#loc42 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":49:35)
#loc43 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":50:39)
#loc44 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":50:49)
#loc45 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":50:58)
#loc46 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":50:31)
#loc47 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":50:67)
#loc48 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":51:20)
#loc49 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":52:31)
#loc50 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":52:36)
#loc51 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":53:20)
#loc52 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":54:20)
#loc53 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":55:20)
#loc54 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":56:31)
#loc55 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":56:36)
#loc56 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":57:20)
#loc57 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":58:19)
#loc58 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":61:20)
#loc59 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":64:48)
#loc60 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":64:40)
#loc61 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":64:36)
#loc62 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":64:54)
#loc63 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":64:31)
#loc64 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":64:64)
#loc65 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":65:34)
#loc66 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":60:34)
#loc67 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":66:25)
#loc68 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":66:37)
#loc69 = loc("inductor_cache/v4/cv42hpt5cwkg4j3vmi3dmuzfwnenybxqlzmydfja3h2yg5zvfb7v.py":66:4)
#loc70 = loc(fused[#loc65, #loc66])
