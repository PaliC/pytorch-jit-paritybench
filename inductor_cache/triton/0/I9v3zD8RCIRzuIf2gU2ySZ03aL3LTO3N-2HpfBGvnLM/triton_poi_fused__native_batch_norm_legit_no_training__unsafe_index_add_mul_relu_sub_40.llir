; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) nocapture readnone %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 4, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 15, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !13
  %21 = icmp slt i32 %20, 16, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %24 = lshr i32 %18, 4, !dbg !17
  %.lobit = and i32 %24, 1, !dbg !17
  %25 = or disjoint i32 %23, %.lobit, !dbg !18
  %26 = icmp slt i32 %25, 4, !dbg !19
  %.frozen = freeze i32 %25, !dbg !20
  %27 = sdiv i32 %.frozen, 2, !dbg !20
  %28 = mul i32 %27, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen4 = freeze i32 %20, !dbg !22
  %29 = sdiv i32 %.frozen4, 4, !dbg !22
  %30 = mul i32 %29, 4, !dbg !23
  %.decomposed5 = sub i32 %.frozen4, %30, !dbg !23
  %31 = sext i32 %20 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %21) #4, !dbg !25
  %34 = sext i32 %.decomposed to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %26) #4, !dbg !27
  %37 = shl i32 %25, 2, !dbg !28
  %38 = add i32 %37, %.decomposed5, !dbg !29
  %39 = shl i32 %29, 4, !dbg !30
  %40 = add i32 %38, %39, !dbg !31
  %41 = sext i32 %40 to i64, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !32
  %43 = and i1 %21, %26, !dbg !33
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %43) #4, !dbg !34
  %45 = sext i32 %.decomposed5 to i64, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %45, !dbg !35
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %21) #4, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %45, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %21) #4, !dbg !38
  %50 = bitcast i32 %49 to float, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %45, !dbg !39
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %21) #4, !dbg !40
  %53 = getelementptr float, ptr addrspace(1) %10, i64 %45, !dbg !41
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #4, !dbg !42
  %55 = sext i32 %27 to i64, !dbg !43
  %56 = getelementptr float, ptr addrspace(1) %12, i64 %55, !dbg !43
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #4, !dbg !44
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !45
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %59, 0, !dbg !46
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i = icmp eq i32 %60, 0, !dbg !46
  br i1 %.not.i, label %66, label %61, !dbg !46

61:                                               ; preds = %15
  br i1 %.not1.i, label %64, label %62, !dbg !46

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

66:                                               ; preds = %15
  br i1 %.not1.i, label %69, label %67, !dbg !46

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !46
  %71 = bitcast i32 %44 to float, !dbg !34
  %72 = bitcast i32 %47 to float, !dbg !36
  %73 = fsub float %71, %72, !dbg !47
  %74 = bitcast i32 %33 to float, !dbg !25
  %75 = fsub float %74, %74, !dbg !48
  %76 = bitcast i32 %36 to float, !dbg !27
  %77 = fmul float %75, %76, !dbg !49
  %78 = fadd float %77, %74, !dbg !50
  %79 = bitcast i32 %57 to float, !dbg !44
  %80 = bitcast i32 %54 to float, !dbg !42
  %81 = bitcast i32 %52 to float, !dbg !40
  %82 = and i32 %18, 1, !dbg !12
  %83 = or disjoint i32 %23, %82, !dbg !18
  %84 = icmp slt i32 %83, 4, !dbg !19
  %85 = lshr i32 %18, 1, !dbg !12
  %86 = and i32 %85, 15, !dbg !12
  %87 = or disjoint i32 %17, %86, !dbg !13
  %88 = icmp slt i32 %87, 16, !dbg !14
  %89 = and i1 %88, %84, !dbg !33
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !51
  %91 = fmul float %73, %90, !dbg !52
  %92 = fmul float %91, %81, !dbg !53
  %93 = fadd float %92, %80, !dbg !54
  %94 = fcmp olt float %93, 0.000000e+00, !dbg !55
  %95 = select i1 %94, float 0.000000e+00, float %93, !dbg !59
  %96 = fsub float %78, %78, !dbg !60
  %97 = fmul float %96, %79, !dbg !61
  %98 = fadd float %78, %97, !dbg !62
  %99 = fadd float %98, %95, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %100 = shl i32 %87, 2, !dbg !65
  %101 = add i32 %83, %100, !dbg !66
  %102 = sext i32 %101 to i64, !dbg !67
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !67
  %104 = shl i32 %18, 1, !dbg !68
  %105 = and i32 %104, 30, !dbg !68
  %106 = or disjoint i32 %105, %.lobit, !dbg !68
  %107 = and i32 %18, 31, !dbg !68
  %108 = lshr exact i32 %105, 1, !dbg !68
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !68
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %106, !dbg !68
  %111 = bitcast float %99 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %112 = lshr i32 %107, 1, !dbg !68
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !68
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %107, !dbg !68
  %115 = load i32, ptr addrspace(3) %114, align 4, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %103, i1 %89) #4, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx3bsplwxnra7k2uxjnrxn72uuxz347jv3tpy44rlpra3xdltfwl.py", directory: "inductor_cache/x3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 31, scope: !7)
!27 = !DILocation(line: 38, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 38, scope: !7)
!29 = !DILocation(line: 39, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 46, scope: !7)
!31 = !DILocation(line: 39, column: 43, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 59, scope: !7)
!34 = !DILocation(line: 39, column: 51, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 36, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 45, column: 37, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 27, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 19, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 19, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 71, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 75, column: 20, scope: !7)
!61 = !DILocation(line: 76, column: 20, scope: !7)
!62 = !DILocation(line: 77, column: 20, scope: !7)
!63 = !DILocation(line: 78, column: 20, scope: !7)
!64 = !DILocation(line: 79, column: 4, scope: !7)
!65 = !DILocation(line: 80, column: 35, scope: !7)
!66 = !DILocation(line: 80, column: 33, scope: !7)
!67 = !DILocation(line: 80, column: 28, scope: !7)
!68 = !DILocation(line: 80, column: 47, scope: !7)
!69 = !DILocation(line: 80, column: 4, scope: !7)
