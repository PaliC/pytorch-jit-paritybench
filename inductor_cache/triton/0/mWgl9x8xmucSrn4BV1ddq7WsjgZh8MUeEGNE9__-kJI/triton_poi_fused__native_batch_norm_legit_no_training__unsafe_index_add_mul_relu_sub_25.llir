; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = icmp slt i32 %21, 9216, !dbg !14
  %.frozen = freeze i32 %21, !dbg !15
  %23 = sdiv i32 %.frozen, 8, !dbg !15
  %24 = srem i32 %23, 8, !dbg !16
  %25 = mul i32 %23, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = sdiv i32 %21, 64, !dbg !18
  %27 = srem i32 %26, 36, !dbg !19
  %28 = sext i32 %24 to i64, !dbg !20
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !21
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !21
  %32 = sext i32 %.decomposed to i64, !dbg !22
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !22
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 %22) #3, !dbg !23
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !23
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !23
  %37 = getelementptr i64, ptr addrspace(1) %4, i64 %32, !dbg !24
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !25
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !25
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !26
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %22) #3, !dbg !27
  %43 = sext i32 %21 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !28
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #3, !dbg !29
  %46 = sext i32 %27 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %22) #3, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %22) #3, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %8, i64 %46, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #3, !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #3, !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %46, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %10, i64 %46, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %22) #3, !dbg !37
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %22) #3, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %11, i64 %43, !dbg !38
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %22) #3, !dbg !39
  %63 = getelementptr i64, ptr addrspace(1) %12, i64 %28, !dbg !40
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 %22) #3, !dbg !41
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 %22) #3, !dbg !41
  %66 = getelementptr float, ptr addrspace(1) %13, i64 %28, !dbg !42
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %22) #3, !dbg !43
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %22) #3, !dbg !43
  %69 = lshr i64 %30, 61, !dbg !44
  %70 = and i64 %69, 4, !dbg !44
  %71 = add i64 %70, %30, !dbg !44
  %72 = lshr i64 %35, 61, !dbg !45
  %73 = and i64 %72, 4, !dbg !45
  %74 = lshr i64 %36, 61, !dbg !45
  %75 = and i64 %74, 4, !dbg !45
  %76 = shl i64 %71, 2, !dbg !46
  %77 = shl nsw i32 %26, 4, !dbg !47
  %78 = sext i32 %77 to i64, !dbg !48
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !49
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %73, !dbg !49
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %76, !dbg !49
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %78, !dbg !49
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !49
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %75, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %76, !dbg !49
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %78, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #3, !dbg !50
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %22) #3, !dbg !50
  %89 = lshr i64 %39, 61, !dbg !51
  %90 = and i64 %89, 4, !dbg !51
  %91 = lshr i64 %40, 61, !dbg !51
  %92 = and i64 %91, 4, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !52
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %90, !dbg !52
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %76, !dbg !52
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %78, !dbg !52
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !52
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %92, !dbg !52
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %76, !dbg !52
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %78, !dbg !52
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #3, !dbg !53
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %22) #3, !dbg !53
  %103 = fadd float %52, 0x3EE4F8B580000000, !dbg !54
  %104 = fadd float %54, 0x3EE4F8B580000000, !dbg !54
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %105, 0, !dbg !55
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %106, 0, !dbg !55
  br i1 %.not.i, label %112, label %107, !dbg !55

107:                                              ; preds = %15
  br i1 %.not1.i, label %110, label %108, !dbg !55

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

112:                                              ; preds = %15
  br i1 %.not1.i, label %115, label %113, !dbg !55

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !55
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i1 = icmp eq i32 %117, 0, !dbg !55
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i4 = icmp eq i32 %118, 0, !dbg !55
  br i1 %.not.i1, label %124, label %119, !dbg !55

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %122, label %120, !dbg !55

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

124:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %127, label %125, !dbg !55

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

__nv_sqrtf.exit5:                                 ; preds = %120, %122, %125, %127
  %.0.i3 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !55
  %129 = extractvalue { i32, i32 } %45, 1, !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = bitcast i32 %49 to float, !dbg !31
  %132 = fsub float %130, %131, !dbg !56
  %133 = extractvalue { i32, i32 } %45, 0, !dbg !29
  %134 = bitcast i32 %133 to float, !dbg !29
  %135 = bitcast i32 %48 to float, !dbg !31
  %136 = fsub float %134, %135, !dbg !56
  %137 = extractvalue { i32, i32 } %42, 1, !dbg !27
  %138 = extractvalue { i32, i32 } %42, 0, !dbg !27
  %139 = bitcast i32 %68 to float, !dbg !43
  %140 = bitcast i32 %67 to float, !dbg !43
  %141 = extractvalue { i32, i32 } %62, 1, !dbg !39
  %142 = bitcast i32 %141 to float, !dbg !39
  %143 = extractvalue { i32, i32 } %62, 0, !dbg !39
  %144 = bitcast i32 %143 to float, !dbg !39
  %145 = bitcast i32 %60 to float, !dbg !37
  %146 = bitcast i32 %59 to float, !dbg !37
  %147 = bitcast i32 %57 to float, !dbg !35
  %148 = bitcast i32 %56 to float, !dbg !35
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !57
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !57
  %151 = fmul float %136, %149, !dbg !58
  %152 = fmul float %132, %150, !dbg !58
  %153 = fmul float %151, %148, !dbg !59
  %154 = fmul float %152, %147, !dbg !59
  %155 = fadd float %153, %146, !dbg !60
  %156 = fadd float %154, %145, !dbg !60
  %157 = fadd float %155, 0.000000e+00, !dbg !61
  %158 = fadd float %156, 0.000000e+00, !dbg !61
  %159 = fadd float %157, %144, !dbg !62
  %160 = fadd float %158, %142, !dbg !62
  %161 = lshr i64 %64, 61, !dbg !63
  %162 = and i64 %161, 4, !dbg !63
  %163 = add i64 %162, %64, !dbg !63
  %164 = shl i64 %163, 2, !dbg !64
  %165 = getelementptr float, ptr addrspace(1) %80, i64 %164, !dbg !65
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %78, !dbg !65
  %167 = getelementptr float, ptr addrspace(1) %84, i64 %164, !dbg !65
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %78, !dbg !65
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %22) #3, !dbg !66
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %22) #3, !dbg !66
  %171 = getelementptr float, ptr addrspace(1) %94, i64 %164, !dbg !67
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %78, !dbg !67
  %173 = getelementptr float, ptr addrspace(1) %98, i64 %164, !dbg !67
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %78, !dbg !67
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %22) #3, !dbg !68
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %22) #3, !dbg !68
  %177 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !66
  %178 = insertelement <2 x i32> %177, i32 %87, i64 1, !dbg !66
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !66
  %180 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !68
  %181 = insertelement <2 x i32> %180, i32 %101, i64 1, !dbg !68
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !68
  %183 = fsub <2 x float> %182, %179, !dbg !69
  %184 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !70
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !70
  %186 = shufflevector <2 x float> %185, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !70
  %187 = fmul <2 x float> %183, %186, !dbg !70
  %188 = fadd <2 x float> %187, %179, !dbg !71
  %189 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !66
  %190 = insertelement <2 x i32> %189, i32 %88, i64 1, !dbg !66
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !66
  %192 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !68
  %193 = insertelement <2 x i32> %192, i32 %102, i64 1, !dbg !68
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !68
  %195 = fsub <2 x float> %194, %191, !dbg !69
  %196 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !70
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !70
  %198 = shufflevector <2 x float> %197, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !70
  %199 = fmul <2 x float> %195, %198, !dbg !70
  %200 = fadd <2 x float> %199, %191, !dbg !71
  %201 = extractelement <2 x float> %188, i64 0, !dbg !72
  %202 = extractelement <2 x float> %188, i64 1, !dbg !73
  %203 = fsub float %201, %202, !dbg !72
  %204 = extractelement <2 x float> %200, i64 0, !dbg !72
  %205 = extractelement <2 x float> %200, i64 1, !dbg !73
  %206 = fsub float %204, %205, !dbg !72
  %207 = fmul float %203, %140, !dbg !74
  %208 = fmul float %206, %139, !dbg !74
  %209 = fadd float %202, %207, !dbg !73
  %210 = fadd float %205, %208, !dbg !73
  %211 = fadd float %159, %209, !dbg !75
  %212 = fadd float %160, %210, !dbg !75
  %213 = fcmp olt float %211, 0.000000e+00, !dbg !76
  %214 = fcmp olt float %212, 0.000000e+00, !dbg !76
  %215 = select i1 %213, float 0.000000e+00, float %211, !dbg !80
  %216 = select i1 %214, float 0.000000e+00, float %212, !dbg !80
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !81
  %218 = bitcast float %215 to i32, !dbg !82
  %219 = bitcast float %216 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %218, i32 %219, ptr addrspace(1) %217, i1 %22) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctlkko5w57xnt6zbictmaoxxyoxawvqt4gh2eypcrwucwxotoofk.py", directory: "inductor_cache/tl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 44, column: 32, scope: !7)
!45 = !DILocation(line: 47, column: 32, scope: !7)
!46 = !DILocation(line: 48, column: 39, scope: !7)
!47 = !DILocation(line: 48, column: 49, scope: !7)
!48 = !DILocation(line: 48, column: 46, scope: !7)
!49 = !DILocation(line: 48, column: 30, scope: !7)
!50 = !DILocation(line: 48, column: 54, scope: !7)
!51 = !DILocation(line: 51, column: 35, scope: !7)
!52 = !DILocation(line: 52, column: 31, scope: !7)
!53 = !DILocation(line: 52, column: 56, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 27, scope: !7)
!56 = !DILocation(line: 56, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 68, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 72, column: 35, scope: !7)
!64 = !DILocation(line: 73, column: 40, scope: !7)
!65 = !DILocation(line: 73, column: 31, scope: !7)
!66 = !DILocation(line: 73, column: 56, scope: !7)
!67 = !DILocation(line: 74, column: 31, scope: !7)
!68 = !DILocation(line: 74, column: 57, scope: !7)
!69 = !DILocation(line: 75, column: 20, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 77, column: 20, scope: !7)
!72 = !DILocation(line: 78, column: 20, scope: !7)
!73 = !DILocation(line: 80, column: 20, scope: !7)
!74 = !DILocation(line: 79, column: 20, scope: !7)
!75 = !DILocation(line: 81, column: 20, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !79)
!77 = distinct !DILexicalBlockFile(scope: !7, file: !78, discriminator: 0)
!78 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!79 = !DILocation(line: 83, column: 42, scope: !7)
!80 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !79)
!81 = !DILocation(line: 84, column: 28, scope: !7)
!82 = !DILocation(line: 84, column: 40, scope: !7)
!83 = !DILocation(line: 84, column: 4, scope: !7)
