; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = icmp slt i32 %18, 64, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %20 = sdiv i32 %.frozen, 512, !dbg !16
  %21 = mul i32 %20, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = srem i32 %17, 512, !dbg !17
  %23 = shl i32 %18, 9, !dbg !18
  %24 = shl i32 %20, 15, !dbg !19
  %25 = add i32 %24, %23, !dbg !20
  %26 = add i32 %25, %.decomposed, !dbg !21
  %27 = add i32 %25, %22, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %19) #4, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %19) #4, !dbg !23
  %34 = sext i32 %.decomposed to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = sext i32 %22 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !29
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !31
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !31
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !32
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !32
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !32
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !32
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !32
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !32
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !32
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %76, 0, !dbg !33
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %77, 0, !dbg !33
  br i1 %.not.i, label %83, label %78, !dbg !33

78:                                               ; preds = %9
  br i1 %.not1.i, label %81, label %79, !dbg !33

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

83:                                               ; preds = %9
  br i1 %.not1.i, label %86, label %84, !dbg !33

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !33
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i10 = icmp eq i32 %88, 0, !dbg !33
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i13 = icmp eq i32 %89, 0, !dbg !33
  br i1 %.not.i10, label %95, label %90, !dbg !33

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %93, label %91, !dbg !33

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %98, label %96, !dbg !33

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

__nv_sqrtf.exit14:                                ; preds = %91, %93, %96, %98
  %.0.i12 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !33
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %100, 0, !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %101, 0, !dbg !33
  br i1 %.not.i15, label %107, label %102, !dbg !33

102:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %105, label %103, !dbg !33

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

107:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %110, label %108, !dbg !33

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %103, %105, %108, %110
  %.0.i17 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !33
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %112, 0, !dbg !33
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %113, 0, !dbg !33
  br i1 %.not.i20, label %119, label %114, !dbg !33

114:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %117, label %115, !dbg !33

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

119:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %122, label %120, !dbg !33

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %115, %117, %120, %122
  %.0.i22 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !33
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %124, 0, !dbg !33
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %125, 0, !dbg !33
  br i1 %.not.i25, label %131, label %126, !dbg !33

126:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %129, label %127, !dbg !33

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

131:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %134, label %132, !dbg !33

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %127, %129, %132, %134
  %.0.i27 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !33
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %136, 0, !dbg !33
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i33 = icmp eq i32 %137, 0, !dbg !33
  br i1 %.not.i30, label %143, label %138, !dbg !33

138:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %141, label %139, !dbg !33

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

143:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %146, label %144, !dbg !33

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

__nv_sqrtf.exit34:                                ; preds = %139, %141, %144, %146
  %.0.i32 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !33
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i35 = icmp eq i32 %148, 0, !dbg !33
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i38 = icmp eq i32 %149, 0, !dbg !33
  br i1 %.not.i35, label %155, label %150, !dbg !33

150:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %153, label %151, !dbg !33

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

155:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %158, label %156, !dbg !33

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

__nv_sqrtf.exit39:                                ; preds = %151, %153, %156, %158
  %.0.i37 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !33
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i40 = icmp eq i32 %160, 0, !dbg !33
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i43 = icmp eq i32 %161, 0, !dbg !33
  br i1 %.not.i40, label %167, label %162, !dbg !33

162:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %165, label %163, !dbg !33

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

167:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %170, label %168, !dbg !33

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

__nv_sqrtf.exit44:                                ; preds = %163, %165, %168, %170
  %.0.i42 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !33
  %172 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %173 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %174 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %175 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %176 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %177 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %178 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %179 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %180 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %181 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %182 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %183 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %184 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %185 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %186 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %187 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %188 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !31
  %194 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !31
  %196 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !29
  %199 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !29
  %201 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !29
  %203 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !29
  %204 = and i32 %12, 127, !dbg !12
  %205 = or disjoint i32 %204, 896, !dbg !12
  %206 = or disjoint i32 %11, %205, !dbg !13
  %207 = or disjoint i32 %204, 768, !dbg !12
  %208 = or disjoint i32 %11, %207, !dbg !13
  %209 = or disjoint i32 %204, 640, !dbg !12
  %210 = or disjoint i32 %11, %209, !dbg !13
  %211 = or disjoint i32 %204, 512, !dbg !12
  %212 = or disjoint i32 %11, %211, !dbg !13
  %213 = or disjoint i32 %204, 384, !dbg !12
  %214 = or disjoint i32 %11, %213, !dbg !13
  %215 = or disjoint i32 %204, 256, !dbg !12
  %216 = or disjoint i32 %11, %215, !dbg !13
  %217 = or disjoint i32 %204, 128, !dbg !12
  %218 = or disjoint i32 %11, %217, !dbg !13
  %219 = or disjoint i32 %11, %204, !dbg !13
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !34
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !34
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !34
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !34
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !34
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !34
  %228 = shl i32 %219, 6, !dbg !35
  %229 = shl i32 %218, 6, !dbg !35
  %230 = shl i32 %216, 6, !dbg !35
  %231 = shl i32 %214, 6, !dbg !35
  %232 = shl i32 %212, 6, !dbg !35
  %233 = shl i32 %210, 6, !dbg !35
  %234 = shl i32 %208, 6, !dbg !35
  %235 = shl i32 %206, 6, !dbg !35
  %236 = add i32 %228, %18, !dbg !36
  %237 = add i32 %229, %18, !dbg !36
  %238 = add i32 %230, %18, !dbg !36
  %239 = add i32 %231, %18, !dbg !36
  %240 = add i32 %232, %18, !dbg !36
  %241 = add i32 %233, %18, !dbg !36
  %242 = add i32 %234, %18, !dbg !36
  %243 = add i32 %235, %18, !dbg !36
  %244 = sext i32 %236 to i64, !dbg !37
  %245 = getelementptr float, ptr addrspace(1) %5, i64 %244, !dbg !37
  %246 = sext i32 %237 to i64, !dbg !37
  %247 = getelementptr float, ptr addrspace(1) %5, i64 %246, !dbg !37
  %248 = sext i32 %238 to i64, !dbg !37
  %249 = getelementptr float, ptr addrspace(1) %5, i64 %248, !dbg !37
  %250 = sext i32 %239 to i64, !dbg !37
  %251 = getelementptr float, ptr addrspace(1) %5, i64 %250, !dbg !37
  %252 = sext i32 %240 to i64, !dbg !37
  %253 = getelementptr float, ptr addrspace(1) %5, i64 %252, !dbg !37
  %254 = sext i32 %241 to i64, !dbg !37
  %255 = getelementptr float, ptr addrspace(1) %5, i64 %254, !dbg !37
  %256 = sext i32 %242 to i64, !dbg !37
  %257 = getelementptr float, ptr addrspace(1) %5, i64 %256, !dbg !37
  %258 = sext i32 %243 to i64, !dbg !37
  %259 = getelementptr float, ptr addrspace(1) %5, i64 %258, !dbg !37
  %.idx = shl nuw nsw i32 %14, 3, !dbg !38
  %260 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %261 = shl nuw nsw i32 %14, 1, !dbg !38
  %262 = or disjoint i32 %261, 2, !dbg !38
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !38
  %264 = or disjoint i32 %261, 4, !dbg !38
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !38
  %266 = or disjoint i32 %261, 6, !dbg !38
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !38
  %.idx1 = shl nuw nsw i32 %15, 3, !dbg !38
  %268 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !38
  %269 = or disjoint i32 %261, 10, !dbg !38
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !38
  %271 = or disjoint i32 %261, 12, !dbg !38
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !38
  %273 = or disjoint i32 %261, 14, !dbg !38
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !38
  %.idx2 = shl nuw nsw i32 %204, 3, !dbg !38
  %275 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !38
  %.idx3 = shl nuw nsw i32 %217, 3, !dbg !38
  %276 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !38
  %.idx4 = shl nuw nsw i32 %215, 3, !dbg !38
  %277 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !38
  %.idx5 = shl nuw nsw i32 %213, 3, !dbg !38
  %278 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !38
  %.idx6 = shl nuw nsw i32 %211, 3, !dbg !38
  %279 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !38
  %.idx7 = shl nuw nsw i32 %209, 3, !dbg !38
  %280 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !38
  %.idx8 = shl nuw nsw i32 %207, 3, !dbg !38
  %281 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !38
  %.idx9 = shl nuw nsw i32 %205, 3, !dbg !38
  %282 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !38
  %283 = getelementptr i1, ptr addrspace(1) %6, i64 %28, !dbg !39
  %284 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !23
  %285 = insertelement <4 x i32> %284, i32 %184, i64 1, !dbg !23
  %286 = insertelement <4 x i32> %285, i32 %182, i64 2, !dbg !23
  %287 = insertelement <4 x i32> %286, i32 %180, i64 3, !dbg !23
  %288 = bitcast <4 x i32> %287 to <4 x float>, !dbg !23
  %289 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !25
  %290 = insertelement <4 x i32> %289, i32 %185, i64 1, !dbg !25
  %291 = insertelement <4 x i32> %290, i32 %183, i64 2, !dbg !25
  %292 = insertelement <4 x i32> %291, i32 %181, i64 3, !dbg !25
  %293 = bitcast <4 x i32> %292 to <4 x float>, !dbg !25
  %294 = fsub <4 x float> %288, %293, !dbg !40
  %295 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !31
  %296 = insertelement <4 x i32> %295, i32 %194, i64 1, !dbg !31
  %297 = insertelement <4 x i32> %296, i32 %193, i64 2, !dbg !31
  %298 = insertelement <4 x i32> %297, i32 %192, i64 3, !dbg !31
  %299 = bitcast <4 x i32> %298 to <4 x float>, !dbg !31
  %300 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !29
  %301 = insertelement <4 x i32> %300, i32 %202, i64 1, !dbg !29
  %302 = insertelement <4 x i32> %301, i32 %201, i64 2, !dbg !29
  %303 = insertelement <4 x i32> %302, i32 %200, i64 3, !dbg !29
  %304 = bitcast <4 x i32> %303 to <4 x float>, !dbg !29
  %305 = insertelement <4 x float> poison, float %220, i64 0, !dbg !41
  %306 = insertelement <4 x float> %305, float %221, i64 1, !dbg !41
  %307 = insertelement <4 x float> %306, float %222, i64 2, !dbg !41
  %308 = insertelement <4 x float> %307, float %223, i64 3, !dbg !41
  %309 = fmul <4 x float> %294, %308, !dbg !41
  %310 = fmul <4 x float> %309, %304, !dbg !42
  %311 = fadd <4 x float> %310, %299, !dbg !43
  %312 = fcmp olt <4 x float> %311, zeroinitializer, !dbg !44
  %313 = select <4 x i1> %312, <4 x float> zeroinitializer, <4 x float> %311, !dbg !48
  %314 = fcmp ole <4 x float> %313, zeroinitializer, !dbg !49
  %315 = extractelement <4 x float> %313, i64 0, !dbg !38
  %316 = bitcast float %315 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %316, i1 true) #4, !dbg !38
  %317 = extractelement <4 x float> %313, i64 1, !dbg !38
  %318 = bitcast float %317 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %318, i1 true) #4, !dbg !38
  %319 = extractelement <4 x float> %313, i64 2, !dbg !38
  %320 = bitcast float %319 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %320, i1 true) #4, !dbg !38
  %321 = extractelement <4 x float> %313, i64 3, !dbg !38
  %322 = bitcast float %321 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %322, i1 true) #4, !dbg !38
  %323 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !23
  %324 = insertelement <4 x i32> %323, i32 %176, i64 1, !dbg !23
  %325 = insertelement <4 x i32> %324, i32 %174, i64 2, !dbg !23
  %326 = insertelement <4 x i32> %325, i32 %172, i64 3, !dbg !23
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !23
  %328 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !25
  %329 = insertelement <4 x i32> %328, i32 %177, i64 1, !dbg !25
  %330 = insertelement <4 x i32> %329, i32 %175, i64 2, !dbg !25
  %331 = insertelement <4 x i32> %330, i32 %173, i64 3, !dbg !25
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !25
  %333 = fsub <4 x float> %327, %332, !dbg !40
  %334 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !31
  %335 = insertelement <4 x i32> %334, i32 %190, i64 1, !dbg !31
  %336 = insertelement <4 x i32> %335, i32 %189, i64 2, !dbg !31
  %337 = insertelement <4 x i32> %336, i32 %188, i64 3, !dbg !31
  %338 = bitcast <4 x i32> %337 to <4 x float>, !dbg !31
  %339 = insertelement <4 x i32> poison, i32 %199, i64 0, !dbg !29
  %340 = insertelement <4 x i32> %339, i32 %198, i64 1, !dbg !29
  %341 = insertelement <4 x i32> %340, i32 %197, i64 2, !dbg !29
  %342 = insertelement <4 x i32> %341, i32 %196, i64 3, !dbg !29
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !29
  %344 = insertelement <4 x float> poison, float %224, i64 0, !dbg !41
  %345 = insertelement <4 x float> %344, float %225, i64 1, !dbg !41
  %346 = insertelement <4 x float> %345, float %226, i64 2, !dbg !41
  %347 = insertelement <4 x float> %346, float %227, i64 3, !dbg !41
  %348 = fmul <4 x float> %333, %347, !dbg !41
  %349 = fmul <4 x float> %348, %343, !dbg !42
  %350 = fadd <4 x float> %349, %338, !dbg !43
  %351 = fcmp olt <4 x float> %350, zeroinitializer, !dbg !44
  %352 = select <4 x i1> %351, <4 x float> zeroinitializer, <4 x float> %350, !dbg !48
  %353 = fcmp ole <4 x float> %352, zeroinitializer, !dbg !49
  %354 = extractelement <4 x float> %352, i64 0, !dbg !38
  %355 = bitcast float %354 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %355, i1 true) #4, !dbg !38
  %356 = extractelement <4 x float> %352, i64 1, !dbg !38
  %357 = bitcast float %356 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %357, i1 true) #4, !dbg !38
  %358 = extractelement <4 x float> %352, i64 2, !dbg !38
  %359 = bitcast float %358 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %359, i1 true) #4, !dbg !38
  %360 = extractelement <4 x float> %352, i64 3, !dbg !38
  %361 = bitcast float %360 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %361, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %362 = load i32, ptr addrspace(3) %275, align 8, !dbg !38
  %363 = load i32, ptr addrspace(3) %276, align 8, !dbg !38
  %364 = load i32, ptr addrspace(3) %277, align 8, !dbg !38
  %365 = load i32, ptr addrspace(3) %278, align 8, !dbg !38
  %366 = load i32, ptr addrspace(3) %279, align 8, !dbg !38
  %367 = load i32, ptr addrspace(3) %280, align 8, !dbg !38
  %368 = load i32, ptr addrspace(3) %281, align 8, !dbg !38
  %369 = load i32, ptr addrspace(3) %282, align 8, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %245, i1 %19) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %247, i1 %19) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %249, i1 %19) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %251, i1 %19) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %253, i1 %19) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %255, i1 %19) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %257, i1 %19) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %259, i1 %19) #4, !dbg !38
  %370 = zext <4 x i1> %314 to <4 x i8>, !dbg !50
  %371 = bitcast <4 x i8> %370 to i32, !dbg !50
  %372 = zext <4 x i1> %353 to <4 x i8>, !dbg !50
  %373 = bitcast <4 x i8> %372 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %371, i32 %373, ptr addrspace(1) %283, i1 %19) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbo7v7ymvfdgtfvcqlp5bkr75lgogvqq7xl4qg2yqzieaqi2auyl.py", directory: "inductor_cache/bo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 50, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 52, column: 33, scope: !7)
!36 = !DILocation(line: 52, column: 30, scope: !7)
!37 = !DILocation(line: 52, column: 25, scope: !7)
!38 = !DILocation(line: 52, column: 45, scope: !7)
!39 = !DILocation(line: 53, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 51, column: 21, scope: !7)
!50 = !DILocation(line: 53, column: 57, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
