; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 14, !dbg !12
  %12 = lshr i32 %9, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 4, !dbg !15
  %18 = or disjoint i32 %17, %13, !dbg !16
  %19 = or disjoint i32 %17, %11, !dbg !16
  %20 = icmp slt i32 %18, 16, !dbg !17
  %21 = icmp slt i32 %19, 16, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %22 = sdiv i32 %.frozen, 512, !dbg !18
  %23 = mul i32 %22, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %23, !dbg !19
  %24 = sdiv i32 %15, 512, !dbg !18
  %25 = shl i32 %18, 9, !dbg !20
  %26 = add i32 %25, %.decomposed, !dbg !21
  %27 = shl i32 %22, 13, !dbg !22
  %28 = add i32 %26, %27, !dbg !23
  %29 = sext i32 %28 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %20) #4, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = bitcast i32 %32 to float, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = sext i32 %.decomposed to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !27
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %41 = bitcast i32 %39 to float, !dbg !27
  %42 = bitcast i32 %40 to float, !dbg !27
  %43 = shl nsw i32 %24, 4, !dbg !28
  %44 = add i32 %43, %19, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !30
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %21) #4, !dbg !31
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !31
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !31
  %50 = bitcast i32 %48 to float, !dbg !31
  %51 = bitcast i32 %49 to float, !dbg !31
  %52 = fadd float %34, %41, !dbg !32
  %53 = fadd float %35, %42, !dbg !32
  %54 = fcmp olt float %52, 0.000000e+00, !dbg !33
  %55 = fcmp olt float %53, 0.000000e+00, !dbg !33
  %56 = select i1 %54, float 0.000000e+00, float %52, !dbg !37
  %57 = select i1 %55, float 0.000000e+00, float %53, !dbg !37
  %58 = shl i32 %9, 5, !dbg !37
  %59 = and i32 %58, 224, !dbg !37
  %60 = or disjoint i32 %59, %13, !dbg !37
  %61 = and i32 %10, 254, !dbg !37
  %62 = lshr exact i32 %59, 2, !dbg !37
  %63 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %62, !dbg !37
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %60, !dbg !37
  %65 = bitcast float %56 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #4, !dbg !37
  %66 = or disjoint i32 %60, 16, !dbg !37
  %67 = lshr i32 %66, 4, !dbg !37
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !37
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %66, !dbg !37
  %70 = bitcast float %57 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %71 = lshr i32 %61, 4, !dbg !37
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !37
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %61, !dbg !37
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !37
  %75 = or disjoint i32 %61, 1, !dbg !37
  %76 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %75, !dbg !37
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !37
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %78, 0, !dbg !38
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %79, 0, !dbg !38
  br i1 %.not.i, label %85, label %80, !dbg !38

80:                                               ; preds = %6
  br i1 %.not1.i, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

85:                                               ; preds = %6
  br i1 %.not1.i, label %88, label %86, !dbg !38

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i1 = icmp eq i32 %90, 0, !dbg !38
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !38
  br i1 %.not.i1, label %97, label %92, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !38

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !38
  %102 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !39
  %103 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !39
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %102) #4, !dbg !40
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %103) #4, !dbg !40
  %106 = shl i32 %15, 4, !dbg !41
  %107 = add i32 %19, %106, !dbg !42
  %108 = sext i32 %107 to i64, !dbg !43
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !43
  %110 = bitcast float %104 to i32, !dbg !44
  %111 = bitcast float %105 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %110, i32 %111, ptr addrspace(1) %109, i1 %21) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5mifbgakz566ok727nnv5bs5mtq7t4wjqyjnrjvbuexlm72gafo.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", linkageName: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 38, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 37, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 38, column: 26, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 33, scope: !7)
!42 = !DILocation(line: 42, column: 30, scope: !7)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 42, column: 44, scope: !7)
!45 = !DILocation(line: 42, column: 4, scope: !7)
