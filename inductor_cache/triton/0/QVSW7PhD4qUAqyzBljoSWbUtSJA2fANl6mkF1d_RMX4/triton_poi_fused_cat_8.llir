; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 32, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 8, !dbg !15
  %14 = mul i32 %13, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = icmp slt i32 %.decomposed, 2, !dbg !17
  %16 = shl nsw i32 %13, 1, !dbg !18
  %17 = add nsw i32 %16, %.decomposed, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = and i1 %12, %15, !dbg !21
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20) #3, !dbg !22
  %22 = and i32 %.decomposed, -2, !dbg !23
  %23 = icmp eq i32 %22, 2, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !24
  %25 = getelementptr i8, ptr addrspace(1) %24, i64 -8, !dbg !24
  %26 = and i1 %12, %23, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %26, i32 0, i1 %26) #3, !dbg !26
  %28 = bitcast i32 %27 to float, !dbg !26
  %29 = fcmp ogt float %28, 0x3E7AD7F2A0000000, !dbg !27
  %30 = fcmp uno float %28, 0.000000e+00, !dbg !31
  %31 = or i1 %29, %30, !dbg !32
  %32 = select i1 %31, float %28, float 0x3E7AD7F2A0000000, !dbg !33
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %33, 0, !dbg !34
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %34, 0, !dbg !34
  br i1 %.not.i, label %40, label %35, !dbg !34

35:                                               ; preds = %6
  br i1 %.not1.i, label %38, label %36, !dbg !34

36:                                               ; preds = %35
  %37 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

38:                                               ; preds = %35
  %39 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

40:                                               ; preds = %6
  br i1 %.not1.i, label %43, label %41, !dbg !34

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %36, %38, %41, %43
  %.0.i = phi float [ %37, %36 ], [ %39, %38 ], [ %42, %41 ], [ %44, %43 ], !dbg !34
  %45 = icmp eq i32 %22, 4, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !36
  %47 = getelementptr i8, ptr addrspace(1) %46, i64 -16, !dbg !36
  %48 = and i1 %12, %45, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48) #3, !dbg !38
  %50 = icmp sgt i32 %.decomposed, 5, !dbg !39
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !40
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 -24, !dbg !40
  %53 = and i1 %12, %50, !dbg !41
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53) #3, !dbg !42
  %55 = bitcast i32 %54 to float, !dbg !42
  %56 = fcmp ogt float %55, 0x3E7AD7F2A0000000, !dbg !43
  %57 = fcmp uno float %55, 0.000000e+00, !dbg !45
  %58 = or i1 %56, %57, !dbg !46
  %59 = select i1 %58, float %55, float 0x3E7AD7F2A0000000, !dbg !47
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i1 = icmp eq i32 %60, 0, !dbg !48
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !48
  br i1 %.not.i1, label %67, label %62, !dbg !48

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !48

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !48

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !48
  %72 = bitcast i32 %49 to float, !dbg !38
  %73 = icmp slt i32 %.decomposed, 6, !dbg !49
  %74 = bitcast i32 %21 to float, !dbg !22
  %75 = select i1 %23, float %.0.i, float 0.000000e+00, !dbg !50
  %76 = select i1 %15, float %74, float %75, !dbg !51
  %77 = icmp slt i32 %.decomposed, 4, !dbg !52
  %78 = select i1 %73, float %72, float %.0.i3, !dbg !53
  %79 = select i1 %77, float %76, float %78, !dbg !54
  %80 = sext i32 %11 to i64, !dbg !55
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !55
  %82 = bitcast float %79 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %82, ptr addrspace(1) %81, i1 %12) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cndyrbajcct5eteju53xiny6zxstnculmo3c733y2nl432yi2gns.py", directory: "inductor_cache/nd")
!4 = !{ptr @triton_poi_fused_cat_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 38, column: 33, scope: !7)
!19 = !DILocation(line: 38, column: 39, scope: !7)
!20 = !DILocation(line: 38, column: 31, scope: !7)
!21 = !DILocation(line: 38, column: 53, scope: !7)
!22 = !DILocation(line: 38, column: 45, scope: !7)
!23 = !DILocation(line: 42, column: 20, scope: !7)
!24 = !DILocation(line: 43, column: 31, scope: !7)
!25 = !DILocation(line: 43, column: 62, scope: !7)
!26 = !DILocation(line: 43, column: 54, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 45, column: 42, scope: !7)
!31 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 46, column: 27, scope: !7)
!35 = !DILocation(line: 60, column: 20, scope: !7)
!36 = !DILocation(line: 61, column: 31, scope: !7)
!37 = !DILocation(line: 61, column: 60, scope: !7)
!38 = !DILocation(line: 61, column: 52, scope: !7)
!39 = !DILocation(line: 62, column: 21, scope: !7)
!40 = !DILocation(line: 66, column: 31, scope: !7)
!41 = !DILocation(line: 66, column: 69, scope: !7)
!42 = !DILocation(line: 66, column: 61, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !44)
!44 = !DILocation(line: 68, column: 42, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !44)
!48 = !DILocation(line: 69, column: 27, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 35, scope: !7)
!51 = !DILocation(line: 49, column: 34, scope: !7)
!52 = !DILocation(line: 31, column: 18, scope: !7)
!53 = !DILocation(line: 72, column: 35, scope: !7)
!54 = !DILocation(line: 0, scope: !7)
!55 = !DILocation(line: 76, column: 25, scope: !7)
!56 = !DILocation(line: 76, column: 37, scope: !7)
!57 = !DILocation(line: 76, column: 4, scope: !7)
