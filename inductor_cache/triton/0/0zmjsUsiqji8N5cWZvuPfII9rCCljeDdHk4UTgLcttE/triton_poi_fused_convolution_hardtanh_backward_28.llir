; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_hardtanh_backward_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 4, !dbg !13
  %12 = icmp slt i32 %10, 230400, !dbg !14
  %13 = srem i32 %10, 256, !dbg !15
  %14 = srem i32 %11, 256, !dbg !15
  %15 = sext i32 %10 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %11 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %29 = sext i32 %13 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = sext i32 %14 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %12) #1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = getelementptr i1, ptr addrspace(1) %2, i64 %15, !dbg !20
  %44 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !17
  %45 = insertelement <4 x i32> %44, i32 %21, i64 1, !dbg !17
  %46 = insertelement <4 x i32> %45, i32 %22, i64 2, !dbg !17
  %47 = insertelement <4 x i32> %46, i32 %23, i64 3, !dbg !17
  %48 = bitcast <4 x i32> %47 to <4 x float>, !dbg !17
  %49 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !19
  %50 = insertelement <4 x i32> %49, i32 %35, i64 1, !dbg !19
  %51 = insertelement <4 x i32> %50, i32 %36, i64 2, !dbg !19
  %52 = insertelement <4 x i32> %51, i32 %37, i64 3, !dbg !19
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !19
  %54 = fadd <4 x float> %48, %53, !dbg !21
  %55 = fcmp ole <4 x float> %54, zeroinitializer, !dbg !22
  %56 = fcmp oge <4 x float> %54, splat (float 6.000000e+00), !dbg !23
  %57 = or <4 x i1> %55, %56, !dbg !24
  %58 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !17
  %59 = insertelement <4 x i32> %58, i32 %26, i64 1, !dbg !17
  %60 = insertelement <4 x i32> %59, i32 %27, i64 2, !dbg !17
  %61 = insertelement <4 x i32> %60, i32 %28, i64 3, !dbg !17
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !17
  %63 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !19
  %64 = insertelement <4 x i32> %63, i32 %40, i64 1, !dbg !19
  %65 = insertelement <4 x i32> %64, i32 %41, i64 2, !dbg !19
  %66 = insertelement <4 x i32> %65, i32 %42, i64 3, !dbg !19
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !19
  %68 = fadd <4 x float> %62, %67, !dbg !21
  %69 = fcmp ole <4 x float> %68, zeroinitializer, !dbg !22
  %70 = fcmp oge <4 x float> %68, splat (float 6.000000e+00), !dbg !23
  %71 = or <4 x i1> %69, %70, !dbg !24
  %72 = zext <4 x i1> %57 to <4 x i8>, !dbg !25
  %73 = bitcast <4 x i8> %72 to i32, !dbg !25
  %74 = zext <4 x i1> %71 to <4 x i8>, !dbg !25
  %75 = bitcast <4 x i8> %74 to i32, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %73, i32 %75, ptr addrspace(1) %43, i1 %12) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnxvfvefeyuxnnrhwbvo2gvnvrupdooxjazu3yctg7qi422hwenf.py", directory: "inductor_cache/nx")
!4 = !{ptr @triton_poi_fused_convolution_hardtanh_backward_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_hardtanh_backward_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_hardtanh_backward_28", linkageName: "triton_poi_fused_convolution_hardtanh_backward_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 25, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 4, scope: !7)
