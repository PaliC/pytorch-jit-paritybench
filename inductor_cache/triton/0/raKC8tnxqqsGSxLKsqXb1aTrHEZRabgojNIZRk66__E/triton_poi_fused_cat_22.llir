; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = or disjoint i32 %15, 2, !dbg !13
  %18 = or disjoint i32 %15, 3, !dbg !13
  %19 = or disjoint i32 %15, 512, !dbg !13
  %20 = or disjoint i32 %15, 513, !dbg !13
  %21 = or disjoint i32 %15, 514, !dbg !13
  %22 = or disjoint i32 %15, 515, !dbg !13
  %23 = icmp slt i32 %15, 77312, !dbg !14
  %24 = icmp slt i32 %19, 77312, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %25 = sdiv i32 %.frozen, 19328, !dbg !15
  %26 = mul i32 %25, 19328, !dbg !16
  %.decomposed = sub i32 %.frozen, %26, !dbg !16
  %27 = srem i32 %16, 19328, !dbg !16
  %28 = srem i32 %17, 19328, !dbg !16
  %29 = srem i32 %18, 19328, !dbg !16
  %.frozen101 = freeze i32 %19, !dbg !15
  %30 = sdiv i32 %.frozen101, 19328, !dbg !15
  %31 = mul i32 %30, 19328, !dbg !16
  %.decomposed102 = sub i32 %.frozen101, %31, !dbg !16
  %32 = srem i32 %20, 19328, !dbg !16
  %33 = srem i32 %21, 19328, !dbg !16
  %34 = srem i32 %22, 19328, !dbg !16
  %35 = icmp slt i32 %.decomposed, 12544, !dbg !17
  %36 = icmp slt i32 %.decomposed102, 12544, !dbg !17
  %37 = shl nsw i32 %25, 6, !dbg !18
  %38 = shl nsw i32 %30, 6, !dbg !18
  %.lhs.trunc = trunc nsw i32 %.decomposed to i16, !dbg !19
  %39 = sdiv i16 %.lhs.trunc, 196, !dbg !19
  %.lhs.trunc71 = trunc nsw i32 %27 to i16, !dbg !19
  %40 = sdiv i16 %.lhs.trunc71, 196, !dbg !19
  %.lhs.trunc73 = trunc nsw i32 %28 to i16, !dbg !19
  %41 = sdiv i16 %.lhs.trunc73, 196, !dbg !19
  %.lhs.trunc75 = trunc nsw i32 %29 to i16, !dbg !19
  %42 = sdiv i16 %.lhs.trunc75, 196, !dbg !19
  %.lhs.trunc77 = trunc nsw i32 %.decomposed102 to i16, !dbg !19
  %43 = sdiv i16 %.lhs.trunc77, 196, !dbg !19
  %.lhs.trunc79 = trunc nsw i32 %32 to i16, !dbg !19
  %44 = sdiv i16 %.lhs.trunc79, 196, !dbg !19
  %.lhs.trunc81 = trunc nsw i32 %33 to i16, !dbg !19
  %45 = sdiv i16 %.lhs.trunc81, 196, !dbg !19
  %.lhs.trunc83 = trunc nsw i32 %34 to i16, !dbg !19
  %46 = sdiv i16 %.lhs.trunc83, 196, !dbg !19
  %.lhs.trunc85 = trunc nsw i16 %39 to i8, !dbg !20
  %47 = srem i8 %.lhs.trunc85, 64, !dbg !20
  %.sext86 = sext i8 %47 to i32, !dbg !20
  %.lhs.trunc87 = trunc nsw i16 %40 to i8, !dbg !20
  %48 = srem i8 %.lhs.trunc87, 64, !dbg !20
  %.sext88 = sext i8 %48 to i32, !dbg !20
  %.lhs.trunc89 = trunc nsw i16 %41 to i8, !dbg !20
  %49 = srem i8 %.lhs.trunc89, 64, !dbg !20
  %.sext90 = sext i8 %49 to i32, !dbg !20
  %.lhs.trunc91 = trunc nsw i16 %42 to i8, !dbg !20
  %50 = srem i8 %.lhs.trunc91, 64, !dbg !20
  %.sext92 = sext i8 %50 to i32, !dbg !20
  %.lhs.trunc93 = trunc nsw i16 %43 to i8, !dbg !20
  %51 = srem i8 %.lhs.trunc93, 64, !dbg !20
  %.sext94 = sext i8 %51 to i32, !dbg !20
  %.lhs.trunc95 = trunc nsw i16 %44 to i8, !dbg !20
  %52 = srem i8 %.lhs.trunc95, 64, !dbg !20
  %.sext96 = sext i8 %52 to i32, !dbg !20
  %.lhs.trunc97 = trunc nsw i16 %45 to i8, !dbg !20
  %53 = srem i8 %.lhs.trunc97, 64, !dbg !20
  %.sext98 = sext i8 %53 to i32, !dbg !20
  %.lhs.trunc99 = trunc nsw i16 %46 to i8, !dbg !20
  %54 = srem i8 %.lhs.trunc99, 64, !dbg !20
  %.sext100 = sext i8 %54 to i32, !dbg !20
  %55 = add nsw i32 %37, %.sext86, !dbg !21
  %56 = add nsw i32 %37, %.sext88, !dbg !21
  %57 = add nsw i32 %37, %.sext90, !dbg !21
  %58 = add nsw i32 %37, %.sext92, !dbg !21
  %59 = add nsw i32 %38, %.sext94, !dbg !21
  %60 = add nsw i32 %38, %.sext96, !dbg !21
  %61 = add nsw i32 %38, %.sext98, !dbg !21
  %62 = add nsw i32 %38, %.sext100, !dbg !21
  %63 = sext i32 %55 to i64, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !22
  %65 = sext i32 %56 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !22
  %67 = sext i32 %57 to i64, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !22
  %69 = sext i32 %58 to i64, !dbg !22
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !22
  %71 = sext i32 %59 to i64, !dbg !22
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !22
  %73 = sext i32 %60 to i64, !dbg !22
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !22
  %75 = sext i32 %61 to i64, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !22
  %77 = sext i32 %62 to i64, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !22
  %79 = and i1 %23, %35, !dbg !23
  %80 = and i1 %24, %36, !dbg !23
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %79, i32 0, i1 %79) #3, !dbg !24
  %82 = bitcast i32 %81 to float, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %79, i32 0, i1 %79) #3, !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %79, i32 0, i1 %79) #3, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %79, i32 0, i1 %79) #3, !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %80, i32 0, i1 %80) #3, !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %80, i32 0, i1 %80) #3, !dbg !24
  %92 = bitcast i32 %91 to float, !dbg !24
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %80, i32 0, i1 %80) #3, !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %80, i32 0, i1 %80) #3, !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = select i1 %35, float 1.000000e+00, float 0.000000e+00, !dbg !25
  %98 = select i1 %36, float 1.000000e+00, float 0.000000e+00, !dbg !25
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %97) #3, !dbg !26
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %97) #3, !dbg !26
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %97) #3, !dbg !26
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %97) #3, !dbg !26
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %98) #3, !dbg !26
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %98) #3, !dbg !26
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %98) #3, !dbg !26
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %98) #3, !dbg !26
  %107 = add nsw i32 %.decomposed, -12544, !dbg !27
  %108 = icmp ult i32 %107, 6272, !dbg !27
  %109 = add nsw i32 %.decomposed102, -12544, !dbg !27
  %110 = icmp ult i32 %109, 6272, !dbg !27
  %111 = mul nsw i32 %25, 6272, !dbg !28
  %112 = mul nsw i32 %30, 6272, !dbg !28
  %113 = add nsw i32 %111, %107, !dbg !29
  %114 = add nsw i32 %112, %109, !dbg !29
  %115 = sext i32 %113 to i64, !dbg !30
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !30
  %117 = sext i32 %114 to i64, !dbg !30
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !30
  %119 = and i1 %23, %108, !dbg !31
  %120 = and i1 %24, %110, !dbg !31
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !32
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !32
  %123 = icmp sgt i32 %.decomposed, 18815, !dbg !33
  %124 = icmp sgt i32 %.decomposed102, 18815, !dbg !33
  %125 = shl nsw i32 %25, 9, !dbg !34
  %126 = shl nsw i32 %30, 9, !dbg !34
  %127 = add nsw i32 %.decomposed, -18816, !dbg !35
  %128 = add nsw i32 %.decomposed102, -18816, !dbg !35
  %129 = add nsw i32 %125, %127, !dbg !36
  %130 = add nsw i32 %126, %128, !dbg !36
  %131 = sext i32 %129 to i64, !dbg !37
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !37
  %133 = sext i32 %130 to i64, !dbg !37
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !37
  %135 = and i1 %23, %123, !dbg !38
  %136 = and i1 %24, %124, !dbg !38
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #3, !dbg !39
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %134, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !39
  %139 = sext i32 %127 to i64, !dbg !40
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !40
  %141 = sext i32 %128 to i64, !dbg !40
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !40
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #3, !dbg !41
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !41
  %145 = getelementptr float, ptr addrspace(1) %4, i64 %139, !dbg !42
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %141, !dbg !42
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #3, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !43
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !43
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !43
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !43
  %152 = bitcast i32 %148 to float, !dbg !43
  %153 = bitcast i32 %149 to float, !dbg !43
  %154 = bitcast i32 %150 to float, !dbg !43
  %155 = bitcast i32 %151 to float, !dbg !43
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !43
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !43
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !43
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !43
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !43
  %161 = bitcast i32 %157 to float, !dbg !43
  %162 = bitcast i32 %158 to float, !dbg !43
  %163 = bitcast i32 %159 to float, !dbg !43
  %164 = bitcast i32 %160 to float, !dbg !43
  %165 = fadd float %152, 0x3EE4F8B580000000, !dbg !44
  %166 = fadd float %153, 0x3EE4F8B580000000, !dbg !44
  %167 = fadd float %154, 0x3EE4F8B580000000, !dbg !44
  %168 = fadd float %155, 0x3EE4F8B580000000, !dbg !44
  %169 = fadd float %161, 0x3EE4F8B580000000, !dbg !44
  %170 = fadd float %162, 0x3EE4F8B580000000, !dbg !44
  %171 = fadd float %163, 0x3EE4F8B580000000, !dbg !44
  %172 = fadd float %164, 0x3EE4F8B580000000, !dbg !44
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %173, 0, !dbg !45
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %174, 0, !dbg !45
  br i1 %.not.i, label %180, label %175, !dbg !45

175:                                              ; preds = %9
  br i1 %.not1.i, label %178, label %176, !dbg !45

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

180:                                              ; preds = %9
  br i1 %.not1.i, label %183, label %181, !dbg !45

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %176, %178, %181, %183
  %.0.i = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !45
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i36 = icmp eq i32 %185, 0, !dbg !45
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i39 = icmp eq i32 %186, 0, !dbg !45
  br i1 %.not.i36, label %192, label %187, !dbg !45

187:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i39, label %190, label %188, !dbg !45

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

192:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i39, label %195, label %193, !dbg !45

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

__nv_sqrtf.exit40:                                ; preds = %188, %190, %193, %195
  %.0.i38 = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !45
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i41 = icmp eq i32 %197, 0, !dbg !45
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i44 = icmp eq i32 %198, 0, !dbg !45
  br i1 %.not.i41, label %204, label %199, !dbg !45

199:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %202, label %200, !dbg !45

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

204:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %207, label %205, !dbg !45

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

__nv_sqrtf.exit45:                                ; preds = %200, %202, %205, %207
  %.0.i43 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !45
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i46 = icmp eq i32 %209, 0, !dbg !45
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i49 = icmp eq i32 %210, 0, !dbg !45
  br i1 %.not.i46, label %216, label %211, !dbg !45

211:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %214, label %212, !dbg !45

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

216:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %219, label %217, !dbg !45

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

__nv_sqrtf.exit50:                                ; preds = %212, %214, %217, %219
  %.0.i48 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !45
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i51 = icmp eq i32 %221, 0, !dbg !45
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i54 = icmp eq i32 %222, 0, !dbg !45
  br i1 %.not.i51, label %228, label %223, !dbg !45

223:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %226, label %224, !dbg !45

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

228:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %231, label %229, !dbg !45

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

__nv_sqrtf.exit55:                                ; preds = %224, %226, %229, %231
  %.0.i53 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !45
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i56 = icmp eq i32 %233, 0, !dbg !45
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i59 = icmp eq i32 %234, 0, !dbg !45
  br i1 %.not.i56, label %240, label %235, !dbg !45

235:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %238, label %236, !dbg !45

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

240:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %243, label %241, !dbg !45

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

__nv_sqrtf.exit60:                                ; preds = %236, %238, %241, %243
  %.0.i58 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !45
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i61 = icmp eq i32 %245, 0, !dbg !45
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i64 = icmp eq i32 %246, 0, !dbg !45
  br i1 %.not.i61, label %252, label %247, !dbg !45

247:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %250, label %248, !dbg !45

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

252:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %255, label %253, !dbg !45

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

__nv_sqrtf.exit65:                                ; preds = %248, %250, %253, %255
  %.0.i63 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !45
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i66 = icmp eq i32 %257, 0, !dbg !45
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i69 = icmp eq i32 %258, 0, !dbg !45
  br i1 %.not.i66, label %264, label %259, !dbg !45

259:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %262, label %260, !dbg !45

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

264:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %267, label %265, !dbg !45

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

__nv_sqrtf.exit70:                                ; preds = %260, %262, %265, %267
  %.0.i68 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !45
  %269 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !39
  %270 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !41
  %271 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !39
  %272 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !41
  %273 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !39
  %274 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !41
  %275 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !39
  %276 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !41
  %277 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !39
  %278 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !41
  %279 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !39
  %280 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !41
  %281 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !41
  %283 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !39
  %284 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !41
  %285 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !32
  %286 = bitcast i32 %285 to float, !dbg !32
  %287 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !32
  %288 = bitcast i32 %287 to float, !dbg !32
  %289 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !32
  %290 = bitcast i32 %289 to float, !dbg !32
  %291 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !32
  %292 = bitcast i32 %291 to float, !dbg !32
  %293 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !32
  %294 = bitcast i32 %293 to float, !dbg !32
  %295 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !32
  %296 = bitcast i32 %295 to float, !dbg !32
  %297 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !32
  %298 = bitcast i32 %297 to float, !dbg !32
  %299 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !32
  %300 = bitcast i32 %299 to float, !dbg !32
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !46
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !46
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !46
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !46
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !46
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !46
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !46
  %309 = getelementptr float, ptr addrspace(1) %5, i64 %139, !dbg !47
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %141, !dbg !47
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %309, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #3, !dbg !48
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !48
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !48
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !48
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !48
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %310, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !48
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !48
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !48
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !48
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !48
  %321 = getelementptr float, ptr addrspace(1) %6, i64 %139, !dbg !49
  %322 = getelementptr float, ptr addrspace(1) %6, i64 %141, !dbg !49
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %321, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #3, !dbg !50
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !50
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !50
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !50
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !50
  %328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %322, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !50
  %329 = extractvalue { i32, i32, i32, i32 } %328, 0, !dbg !50
  %330 = extractvalue { i32, i32, i32, i32 } %328, 1, !dbg !50
  %331 = extractvalue { i32, i32, i32, i32 } %328, 2, !dbg !50
  %332 = extractvalue { i32, i32, i32, i32 } %328, 3, !dbg !50
  %333 = insertelement <8 x i32> poison, i32 %269, i64 0, !dbg !39
  %334 = insertelement <8 x i32> %333, i32 %271, i64 1, !dbg !39
  %335 = insertelement <8 x i32> %334, i32 %273, i64 2, !dbg !39
  %336 = insertelement <8 x i32> %335, i32 %275, i64 3, !dbg !39
  %337 = insertelement <8 x i32> %336, i32 %277, i64 4, !dbg !39
  %338 = insertelement <8 x i32> %337, i32 %279, i64 5, !dbg !39
  %339 = insertelement <8 x i32> %338, i32 %281, i64 6, !dbg !39
  %340 = insertelement <8 x i32> %339, i32 %283, i64 7, !dbg !39
  %341 = bitcast <8 x i32> %340 to <8 x float>, !dbg !39
  %342 = insertelement <8 x i32> poison, i32 %270, i64 0, !dbg !41
  %343 = insertelement <8 x i32> %342, i32 %272, i64 1, !dbg !41
  %344 = insertelement <8 x i32> %343, i32 %274, i64 2, !dbg !41
  %345 = insertelement <8 x i32> %344, i32 %276, i64 3, !dbg !41
  %346 = insertelement <8 x i32> %345, i32 %278, i64 4, !dbg !41
  %347 = insertelement <8 x i32> %346, i32 %280, i64 5, !dbg !41
  %348 = insertelement <8 x i32> %347, i32 %282, i64 6, !dbg !41
  %349 = insertelement <8 x i32> %348, i32 %284, i64 7, !dbg !41
  %350 = bitcast <8 x i32> %349 to <8 x float>, !dbg !41
  %351 = fsub <8 x float> %341, %350, !dbg !51
  %352 = insertelement <8 x float> poison, float %308, i64 0, !dbg !52
  %353 = insertelement <8 x float> %352, float %307, i64 1, !dbg !52
  %354 = insertelement <8 x float> %353, float %306, i64 2, !dbg !52
  %355 = insertelement <8 x float> %354, float %305, i64 3, !dbg !52
  %356 = insertelement <8 x float> %355, float %304, i64 4, !dbg !52
  %357 = insertelement <8 x float> %356, float %303, i64 5, !dbg !52
  %358 = insertelement <8 x float> %357, float %302, i64 6, !dbg !52
  %359 = insertelement <8 x float> %358, float %301, i64 7, !dbg !52
  %360 = fmul <8 x float> %351, %359, !dbg !52
  %361 = insertelement <8 x i32> poison, i32 %320, i64 0, !dbg !48
  %362 = insertelement <8 x i32> %361, i32 %319, i64 1, !dbg !48
  %363 = insertelement <8 x i32> %362, i32 %318, i64 2, !dbg !48
  %364 = insertelement <8 x i32> %363, i32 %317, i64 3, !dbg !48
  %365 = insertelement <8 x i32> %364, i32 %315, i64 4, !dbg !48
  %366 = insertelement <8 x i32> %365, i32 %314, i64 5, !dbg !48
  %367 = insertelement <8 x i32> %366, i32 %313, i64 6, !dbg !48
  %368 = insertelement <8 x i32> %367, i32 %312, i64 7, !dbg !48
  %369 = bitcast <8 x i32> %368 to <8 x float>, !dbg !48
  %370 = fmul <8 x float> %360, %369, !dbg !53
  %371 = insertelement <8 x i32> poison, i32 %332, i64 0, !dbg !50
  %372 = insertelement <8 x i32> %371, i32 %331, i64 1, !dbg !50
  %373 = insertelement <8 x i32> %372, i32 %330, i64 2, !dbg !50
  %374 = insertelement <8 x i32> %373, i32 %329, i64 3, !dbg !50
  %375 = insertelement <8 x i32> %374, i32 %327, i64 4, !dbg !50
  %376 = insertelement <8 x i32> %375, i32 %326, i64 5, !dbg !50
  %377 = insertelement <8 x i32> %376, i32 %325, i64 6, !dbg !50
  %378 = insertelement <8 x i32> %377, i32 %324, i64 7, !dbg !50
  %379 = bitcast <8 x i32> %378 to <8 x float>, !dbg !50
  %380 = fadd <8 x float> %370, %379, !dbg !54
  %381 = fcmp ole <8 x float> %380, zeroinitializer, !dbg !55
  %382 = select <8 x i1> %381, <8 x float> zeroinitializer, <8 x float> %380, !dbg !55
  %383 = fcmp olt <8 x float> %382, splat (float 6.000000e+00), !dbg !59
  %384 = extractelement <8 x float> %382, i64 7, !dbg !61
  %385 = fcmp uno float %384, 0.000000e+00, !dbg !61
  %386 = extractelement <8 x float> %382, i64 6, !dbg !61
  %387 = fcmp uno float %386, 0.000000e+00, !dbg !61
  %388 = extractelement <8 x float> %382, i64 5, !dbg !61
  %389 = fcmp uno float %388, 0.000000e+00, !dbg !61
  %390 = extractelement <8 x float> %382, i64 4, !dbg !61
  %391 = fcmp uno float %390, 0.000000e+00, !dbg !61
  %392 = extractelement <8 x float> %382, i64 3, !dbg !61
  %393 = fcmp uno float %392, 0.000000e+00, !dbg !61
  %394 = extractelement <8 x float> %382, i64 2, !dbg !61
  %395 = fcmp uno float %394, 0.000000e+00, !dbg !61
  %396 = extractelement <8 x float> %382, i64 1, !dbg !61
  %397 = fcmp uno float %396, 0.000000e+00, !dbg !61
  %398 = extractelement <8 x float> %382, i64 0, !dbg !61
  %399 = fcmp uno float %398, 0.000000e+00, !dbg !61
  %400 = extractelement <8 x i1> %383, i64 7, !dbg !62
  %401 = or i1 %400, %385, !dbg !62
  %402 = extractelement <8 x i1> %383, i64 6, !dbg !62
  %403 = or i1 %402, %387, !dbg !62
  %404 = extractelement <8 x i1> %383, i64 5, !dbg !62
  %405 = or i1 %404, %389, !dbg !62
  %406 = extractelement <8 x i1> %383, i64 4, !dbg !62
  %407 = or i1 %406, %391, !dbg !62
  %408 = extractelement <8 x i1> %383, i64 3, !dbg !62
  %409 = or i1 %408, %393, !dbg !62
  %410 = extractelement <8 x i1> %383, i64 2, !dbg !62
  %411 = or i1 %410, %395, !dbg !62
  %412 = extractelement <8 x i1> %383, i64 1, !dbg !62
  %413 = or i1 %412, %397, !dbg !62
  %414 = extractelement <8 x i1> %383, i64 0, !dbg !62
  %415 = or i1 %414, %399, !dbg !62
  %416 = select i1 %401, float %384, float 6.000000e+00, !dbg !63
  %417 = select i1 %403, float %386, float 6.000000e+00, !dbg !63
  %418 = select i1 %405, float %388, float 6.000000e+00, !dbg !63
  %419 = select i1 %407, float %390, float 6.000000e+00, !dbg !63
  %420 = select i1 %409, float %392, float 6.000000e+00, !dbg !63
  %421 = select i1 %411, float %394, float 6.000000e+00, !dbg !63
  %422 = select i1 %413, float %396, float 6.000000e+00, !dbg !63
  %423 = select i1 %415, float %398, float 6.000000e+00, !dbg !63
  %424 = select i1 %123, float %416, float 0.000000e+00, !dbg !64
  %425 = select i1 %123, float %417, float 0.000000e+00, !dbg !64
  %426 = select i1 %123, float %418, float 0.000000e+00, !dbg !64
  %427 = select i1 %123, float %419, float 0.000000e+00, !dbg !64
  %428 = select i1 %124, float %420, float 0.000000e+00, !dbg !64
  %429 = select i1 %124, float %421, float 0.000000e+00, !dbg !64
  %430 = select i1 %124, float %422, float 0.000000e+00, !dbg !64
  %431 = select i1 %124, float %423, float 0.000000e+00, !dbg !64
  %432 = select i1 %108, float %300, float %424, !dbg !65
  %433 = select i1 %108, float %298, float %425, !dbg !65
  %434 = select i1 %108, float %296, float %426, !dbg !65
  %435 = select i1 %108, float %294, float %427, !dbg !65
  %436 = select i1 %110, float %292, float %428, !dbg !65
  %437 = select i1 %110, float %290, float %429, !dbg !65
  %438 = select i1 %110, float %288, float %430, !dbg !65
  %439 = select i1 %110, float %286, float %431, !dbg !65
  %440 = select i1 %35, float %99, float %432, !dbg !66
  %441 = select i1 %35, float %100, float %433, !dbg !66
  %442 = select i1 %35, float %101, float %434, !dbg !66
  %443 = select i1 %35, float %102, float %435, !dbg !66
  %444 = select i1 %36, float %103, float %436, !dbg !66
  %445 = select i1 %36, float %104, float %437, !dbg !66
  %446 = select i1 %36, float %105, float %438, !dbg !66
  %447 = select i1 %36, float %106, float %439, !dbg !66
  %448 = sext i32 %15 to i64, !dbg !67
  %449 = getelementptr float, ptr addrspace(1) %7, i64 %448, !dbg !67
  %450 = sext i32 %19 to i64, !dbg !67
  %451 = getelementptr float, ptr addrspace(1) %7, i64 %450, !dbg !67
  %452 = bitcast float %440 to i32, !dbg !68
  %453 = bitcast float %441 to i32, !dbg !68
  %454 = bitcast float %442 to i32, !dbg !68
  %455 = bitcast float %443 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %449, i1 %23) #3, !dbg !68
  %456 = bitcast float %444 to i32, !dbg !68
  %457 = bitcast float %445 to i32, !dbg !68
  %458 = bitcast float %446 to i32, !dbg !68
  %459 = bitcast float %447 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %451, i1 %24) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuubzoplxitwce3canav7w5ljnakvyjxwqw3hlu25i5cg3d5bcwk.py", directory: "inductor_cache/uu")
!4 = !{ptr @triton_poi_fused_cat_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_22", linkageName: "triton_poi_fused_cat_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 40, column: 34, scope: !7)
!19 = !DILocation(line: 40, column: 50, scope: !7)
!20 = !DILocation(line: 40, column: 57, scope: !7)
!21 = !DILocation(line: 40, column: 41, scope: !7)
!22 = !DILocation(line: 40, column: 31, scope: !7)
!23 = !DILocation(line: 40, column: 72, scope: !7)
!24 = !DILocation(line: 40, column: 64, scope: !7)
!25 = !DILocation(line: 43, column: 35, scope: !7)
!26 = !DILocation(line: 44, column: 20, scope: !7)
!27 = !DILocation(line: 50, column: 20, scope: !7)
!28 = !DILocation(line: 51, column: 36, scope: !7)
!29 = !DILocation(line: 51, column: 42, scope: !7)
!30 = !DILocation(line: 51, column: 31, scope: !7)
!31 = !DILocation(line: 51, column: 67, scope: !7)
!32 = !DILocation(line: 51, column: 59, scope: !7)
!33 = !DILocation(line: 52, column: 20, scope: !7)
!34 = !DILocation(line: 55, column: 35, scope: !7)
!35 = !DILocation(line: 55, column: 52, scope: !7)
!36 = !DILocation(line: 55, column: 41, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 66, scope: !7)
!39 = !DILocation(line: 55, column: 58, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 47, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 47, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 27, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 67, column: 31, scope: !7)
!48 = !DILocation(line: 67, column: 47, scope: !7)
!49 = !DILocation(line: 69, column: 31, scope: !7)
!50 = !DILocation(line: 69, column: 47, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 72, column: 42, scope: !7)
!59 = !DILocation(line: 110, column: 15, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 74, column: 42, scope: !7)
!61 = !DILocation(line: 112, column: 21, scope: !56, inlinedAt: !60)
!62 = !DILocation(line: 112, column: 16, scope: !56, inlinedAt: !60)
!63 = !DILocation(line: 113, column: 29, scope: !56, inlinedAt: !60)
!64 = !DILocation(line: 76, column: 35, scope: !7)
!65 = !DILocation(line: 77, column: 35, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 79, column: 25, scope: !7)
!68 = !DILocation(line: 79, column: 37, scope: !7)
!69 = !DILocation(line: 79, column: 4, scope: !7)
