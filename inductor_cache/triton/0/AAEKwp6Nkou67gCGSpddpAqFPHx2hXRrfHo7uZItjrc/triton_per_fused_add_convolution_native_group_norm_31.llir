; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_convolution_native_group_norm_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 2, !dbg !11
  %14 = and i32 %13, 252, !dbg !11
  %15 = lshr i32 %14, 4, !dbg !12
  %16 = srem i32 %9, 32, !dbg !13
  %17 = shl i32 %9, 8, !dbg !14
  %18 = or disjoint i32 %17, %14, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %32 = shl nsw i32 %16, 4, !dbg !20
  %33 = or disjoint i32 %32, %15, !dbg !21
  %34 = sext i32 %33 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !23
  %40 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %41 = insertelement <2 x i32> %40, i32 %23, i64 1, !dbg !17
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !17
  %43 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %44 = insertelement <2 x i32> %43, i32 %29, i64 1, !dbg !19
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !19
  %46 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !23
  %47 = insertelement <2 x i32> %46, i32 %37, i64 1, !dbg !23
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !23
  %49 = fadd <2 x float> %45, %48, !dbg !24
  %50 = fadd <2 x float> %49, %42, !dbg !25
  %51 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !17
  %52 = insertelement <2 x i32> %51, i32 %25, i64 1, !dbg !17
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !17
  %54 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %55 = insertelement <2 x i32> %54, i32 %31, i64 1, !dbg !19
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !19
  %57 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !23
  %58 = insertelement <2 x i32> %57, i32 %39, i64 1, !dbg !23
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !23
  %60 = fadd <2 x float> %56, %59, !dbg !24
  %61 = fadd <2 x float> %60, %53, !dbg !25
  %62 = extractelement <2 x float> %50, i64 0, !dbg !26
  %63 = extractelement <2 x float> %50, i64 1, !dbg !26
  %64 = fadd float %62, %63, !dbg !27
  %65 = extractelement <2 x float> %61, i64 0, !dbg !26
  %66 = fadd float %64, %65, !dbg !27
  %67 = extractelement <2 x float> %61, i64 1, !dbg !26
  %68 = fadd float %66, %67, !dbg !27
  %69 = bitcast float %68 to i32, !dbg !32
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = fadd float %68, %71, !dbg !27
  %73 = bitcast float %72 to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %72, %75, !dbg !27
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !27
  %81 = bitcast float %80 to i32, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %80, %83, !dbg !27
  %85 = bitcast float %84 to i32, !dbg !32
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = fadd float %84, %87, !dbg !27
  %89 = icmp eq i32 %11, 0, !dbg !32
  %90 = and i32 %12, 1, !dbg !32
  %91 = zext nneg i32 %90 to i64, !dbg !32
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i64 %91, !dbg !32
  %93 = bitcast float %88 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %89) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %94 = icmp slt i32 %10, 2, !dbg !32
  %95 = sext i32 %10 to i64, !dbg !32
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95, !dbg !32
  %97 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %96, i1 %94) #5, !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = fadd float %98, %100, !dbg !27
  %102 = and i32 %10, 1, !dbg !32
  %103 = icmp eq i32 %102, 0, !dbg !32
  %104 = and i1 %94, %103, !dbg !32
  %105 = bitcast float %101 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %105, i1 %104) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %106 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %107 = fadd float %106, 0.000000e+00, !dbg !33
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 2.560000e+02) #5, !dbg !37
  %109 = fsub float %62, %108, !dbg !26
  %110 = fsub float %63, %108, !dbg !26
  %111 = fsub float %65, %108, !dbg !26
  %112 = fsub float %67, %108, !dbg !26
  %113 = fmul float %109, %109, !dbg !38
  %114 = fmul float %110, %110, !dbg !38
  %115 = fmul float %111, %111, !dbg !38
  %116 = fmul float %112, %112, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %117 = fadd float %113, %114, !dbg !41
  %118 = fadd float %115, %117, !dbg !41
  %119 = fadd float %116, %118, !dbg !41
  %120 = bitcast float %119 to i32, !dbg !39
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !39
  %122 = bitcast i32 %121 to float, !dbg !39
  %123 = fadd float %119, %122, !dbg !41
  %124 = bitcast float %123 to i32, !dbg !39
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 8, i32 31), !dbg !39
  %126 = bitcast i32 %125 to float, !dbg !39
  %127 = fadd float %123, %126, !dbg !41
  %128 = bitcast float %127 to i32, !dbg !39
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !39
  %130 = bitcast i32 %129 to float, !dbg !39
  %131 = fadd float %127, %130, !dbg !41
  %132 = bitcast float %131 to i32, !dbg !39
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !39
  %134 = bitcast i32 %133 to float, !dbg !39
  %135 = fadd float %131, %134, !dbg !41
  %136 = bitcast float %135 to i32, !dbg !39
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !39
  %138 = bitcast i32 %137 to float, !dbg !39
  %139 = fadd float %135, %138, !dbg !41
  %140 = bitcast float %139 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %140, i1 %89) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %141 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %96, i1 %94) #5, !dbg !39
  %142 = bitcast i32 %141 to float, !dbg !39
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !39
  %144 = bitcast i32 %143 to float, !dbg !39
  %145 = fadd float %142, %144, !dbg !41
  %146 = bitcast float %145 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %146, i1 %104) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %147 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %148 = fadd float %147, 0.000000e+00, !dbg !42
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.560000e+02) #5, !dbg !44
  %150 = fadd float %149, 0x3EB0C6F7A0000000, !dbg !45
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %151, 0, !dbg !46
  br i1 %.not.i, label %154, label %152, !dbg !46

152:                                              ; preds = %8
  %153 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %150), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

154:                                              ; preds = %8
  %155 = tail call float @llvm.nvvm.rsqrt.approx.f(float %150), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %152, %154
  %.0.i = phi float [ %153, %152 ], [ %155, %154 ], !dbg !46
  %156 = bitcast float %62 to i32, !dbg !47
  %157 = bitcast float %63 to i32, !dbg !47
  %158 = bitcast float %65 to i32, !dbg !47
  %159 = bitcast float %67 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %157, i32 %158, i32 %159, ptr addrspace(1) %26, i1 true) #5, !dbg !47
  %160 = sext i32 %9 to i64, !dbg !48
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %160, !dbg !48
  %urem = and i32 %10, 63, !dbg !49
  %162 = icmp eq i32 %urem, 0, !dbg !49
  %163 = bitcast float %.0.i to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %161, i1 %162) #5, !dbg !49
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !50
  %165 = bitcast float %108 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %164, i1 %162) #5, !dbg !51
  %166 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !52
  %167 = bitcast float %148 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %166, i1 %162) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cezomnbd7cz2vj2qiexpweeiptatjtwvycqkulod7rrdrrlwy5rz.py", directory: "inductor_cache/ez")
!4 = !{ptr @triton_per_fused_add_convolution_native_group_norm_31, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_native_group_norm_31, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_native_group_norm_31", linkageName: "triton_per_fused_add_convolution_native_group_norm_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 39, scope: !7)
!15 = !DILocation(line: 34, column: 35, scope: !7)
!16 = !DILocation(line: 34, column: 30, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 35, column: 34, scope: !7)
!19 = !DILocation(line: 35, column: 48, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 36, column: 35, scope: !7)
!22 = !DILocation(line: 36, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 43, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 45, column: 19, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 41, column: 57, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !40)
!40 = !DILocation(line: 48, column: 59, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !40)
!42 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !43)
!43 = !DILocation(line: 48, column: 45, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 28, scope: !7)
!47 = !DILocation(line: 54, column: 48, scope: !7)
!48 = !DILocation(line: 55, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 37, scope: !7)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 57, column: 25, scope: !7)
!53 = !DILocation(line: 57, column: 37, scope: !7)
!54 = !DILocation(line: 57, column: 4, scope: !7)
