; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 424000, !dbg !14
  %18 = icmp slt i32 %13, 424000, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %19 = sdiv i32 %.frozen, 6625, !dbg !15
  %20 = mul i32 %19, 6625, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %.frozen1 = freeze i32 %10, !dbg !15
  %21 = sdiv i32 %.frozen1, 6625, !dbg !15
  %22 = mul i32 %21, 6625, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %22, !dbg !16
  %.frozen3 = freeze i32 %11, !dbg !15
  %23 = sdiv i32 %.frozen3, 6625, !dbg !15
  %24 = mul i32 %23, 6625, !dbg !16
  %.decomposed4 = sub i32 %.frozen3, %24, !dbg !16
  %.frozen5 = freeze i32 %12, !dbg !15
  %25 = sdiv i32 %.frozen5, 6625, !dbg !15
  %26 = mul i32 %25, 6625, !dbg !16
  %.decomposed6 = sub i32 %.frozen5, %26, !dbg !16
  %.frozen7 = freeze i32 %13, !dbg !15
  %27 = sdiv i32 %.frozen7, 6625, !dbg !15
  %28 = mul i32 %27, 6625, !dbg !16
  %.decomposed8 = sub i32 %.frozen7, %28, !dbg !16
  %.frozen9 = freeze i32 %14, !dbg !15
  %29 = sdiv i32 %.frozen9, 6625, !dbg !15
  %30 = mul i32 %29, 6625, !dbg !16
  %.decomposed10 = sub i32 %.frozen9, %30, !dbg !16
  %.frozen11 = freeze i32 %15, !dbg !15
  %31 = sdiv i32 %.frozen11, 6625, !dbg !15
  %32 = mul i32 %31, 6625, !dbg !16
  %.decomposed12 = sub i32 %.frozen11, %32, !dbg !16
  %.frozen13 = freeze i32 %16, !dbg !15
  %33 = sdiv i32 %.frozen13, 6625, !dbg !15
  %34 = mul i32 %33, 6625, !dbg !16
  %.decomposed14 = sub i32 %.frozen13, %34, !dbg !16
  %35 = sdiv i32 %9, 26500, !dbg !17
  %36 = sdiv i32 %13, 26500, !dbg !17
  %37 = mul i32 %19, 6656, !dbg !18
  %38 = mul i32 %21, 6656, !dbg !18
  %39 = mul i32 %23, 6656, !dbg !18
  %40 = mul i32 %25, 6656, !dbg !18
  %41 = mul i32 %27, 6656, !dbg !18
  %42 = mul i32 %29, 6656, !dbg !18
  %43 = mul i32 %31, 6656, !dbg !18
  %44 = mul i32 %33, 6656, !dbg !18
  %45 = add i32 %37, %.decomposed, !dbg !19
  %46 = add i32 %38, %.decomposed2, !dbg !19
  %47 = add i32 %39, %.decomposed4, !dbg !19
  %48 = add i32 %40, %.decomposed6, !dbg !19
  %49 = add i32 %41, %.decomposed8, !dbg !19
  %50 = add i32 %42, %.decomposed10, !dbg !19
  %51 = add i32 %43, %.decomposed12, !dbg !19
  %52 = add i32 %44, %.decomposed14, !dbg !19
  %53 = sext i32 %45 to i64, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !20
  %55 = sext i32 %46 to i64, !dbg !20
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !20
  %57 = sext i32 %47 to i64, !dbg !20
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !20
  %59 = sext i32 %48 to i64, !dbg !20
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !20
  %61 = sext i32 %49 to i64, !dbg !20
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !20
  %63 = sext i32 %50 to i64, !dbg !20
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !20
  %65 = sext i32 %51 to i64, !dbg !20
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !20
  %67 = sext i32 %52 to i64, !dbg !20
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #1, !dbg !21
  %70 = bitcast i32 %69 to float, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %17) #1, !dbg !21
  %72 = bitcast i32 %71 to float, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #1, !dbg !21
  %74 = bitcast i32 %73 to float, !dbg !21
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %17) #1, !dbg !21
  %76 = bitcast i32 %75 to float, !dbg !21
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #1, !dbg !21
  %78 = bitcast i32 %77 to float, !dbg !21
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %18) #1, !dbg !21
  %80 = bitcast i32 %79 to float, !dbg !21
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %18) #1, !dbg !21
  %82 = bitcast i32 %81 to float, !dbg !21
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #1, !dbg !21
  %84 = bitcast i32 %83 to float, !dbg !21
  %85 = mul i32 %35, 26624, !dbg !22
  %86 = mul i32 %36, 26624, !dbg !22
  %87 = add i32 %85, %.decomposed, !dbg !23
  %88 = add i32 %85, %.decomposed2, !dbg !23
  %89 = add i32 %85, %.decomposed4, !dbg !23
  %90 = add i32 %85, %.decomposed6, !dbg !23
  %91 = add i32 %86, %.decomposed8, !dbg !23
  %92 = add i32 %86, %.decomposed10, !dbg !23
  %93 = add i32 %86, %.decomposed12, !dbg !23
  %94 = add i32 %86, %.decomposed14, !dbg !23
  %95 = sext i32 %87 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !24
  %97 = sext i32 %88 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !24
  %99 = sext i32 %89 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !24
  %101 = sext i32 %90 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !24
  %103 = sext i32 %91 to i64, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !24
  %105 = sext i32 %92 to i64, !dbg !24
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !24
  %107 = sext i32 %93 to i64, !dbg !24
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !24
  %109 = sext i32 %94 to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %17) #1, !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %17) #1, !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %17) #1, !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %17) #1, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %18) #1, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #1, !dbg !25
  %122 = bitcast i32 %121 to float, !dbg !25
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %18) #1, !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %18) #1, !dbg !25
  %126 = bitcast i32 %125 to float, !dbg !25
  %127 = add i32 %85, 6656, !dbg !26
  %128 = add i32 %127, %.decomposed, !dbg !27
  %129 = add i32 %127, %.decomposed2, !dbg !27
  %130 = add i32 %127, %.decomposed4, !dbg !27
  %131 = add i32 %127, %.decomposed6, !dbg !27
  %132 = add i32 %86, 6656, !dbg !26
  %133 = add i32 %132, %.decomposed8, !dbg !27
  %134 = add i32 %132, %.decomposed10, !dbg !27
  %135 = add i32 %132, %.decomposed12, !dbg !27
  %136 = add i32 %132, %.decomposed14, !dbg !27
  %137 = sext i32 %128 to i64, !dbg !28
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !28
  %139 = sext i32 %129 to i64, !dbg !28
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !28
  %141 = sext i32 %130 to i64, !dbg !28
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !28
  %143 = sext i32 %131 to i64, !dbg !28
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !28
  %145 = sext i32 %133 to i64, !dbg !28
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !28
  %147 = sext i32 %134 to i64, !dbg !28
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !28
  %149 = sext i32 %135 to i64, !dbg !28
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !28
  %151 = sext i32 %136 to i64, !dbg !28
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !28
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %17) #1, !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %17) #1, !dbg !29
  %156 = bitcast i32 %155 to float, !dbg !29
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %17) #1, !dbg !29
  %158 = bitcast i32 %157 to float, !dbg !29
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %17) #1, !dbg !29
  %160 = bitcast i32 %159 to float, !dbg !29
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %18) #1, !dbg !29
  %162 = bitcast i32 %161 to float, !dbg !29
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %18) #1, !dbg !29
  %164 = bitcast i32 %163 to float, !dbg !29
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %18) #1, !dbg !29
  %166 = bitcast i32 %165 to float, !dbg !29
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %18) #1, !dbg !29
  %168 = bitcast i32 %167 to float, !dbg !29
  %169 = add i32 %85, 13312, !dbg !30
  %170 = add i32 %169, %.decomposed, !dbg !31
  %171 = add i32 %169, %.decomposed2, !dbg !31
  %172 = add i32 %169, %.decomposed4, !dbg !31
  %173 = add i32 %169, %.decomposed6, !dbg !31
  %174 = add i32 %86, 13312, !dbg !30
  %175 = add i32 %174, %.decomposed8, !dbg !31
  %176 = add i32 %174, %.decomposed10, !dbg !31
  %177 = add i32 %174, %.decomposed12, !dbg !31
  %178 = add i32 %174, %.decomposed14, !dbg !31
  %179 = sext i32 %170 to i64, !dbg !32
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !32
  %181 = sext i32 %171 to i64, !dbg !32
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !32
  %183 = sext i32 %172 to i64, !dbg !32
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !32
  %185 = sext i32 %173 to i64, !dbg !32
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !32
  %187 = sext i32 %175 to i64, !dbg !32
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !32
  %189 = sext i32 %176 to i64, !dbg !32
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !32
  %191 = sext i32 %177 to i64, !dbg !32
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !32
  %193 = sext i32 %178 to i64, !dbg !32
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !32
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %17) #1, !dbg !33
  %196 = bitcast i32 %195 to float, !dbg !33
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #1, !dbg !33
  %198 = bitcast i32 %197 to float, !dbg !33
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %17) #1, !dbg !33
  %200 = bitcast i32 %199 to float, !dbg !33
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %17) #1, !dbg !33
  %202 = bitcast i32 %201 to float, !dbg !33
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %18) #1, !dbg !33
  %204 = bitcast i32 %203 to float, !dbg !33
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %18) #1, !dbg !33
  %206 = bitcast i32 %205 to float, !dbg !33
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %18) #1, !dbg !33
  %208 = bitcast i32 %207 to float, !dbg !33
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %18) #1, !dbg !33
  %210 = bitcast i32 %209 to float, !dbg !33
  %211 = add i32 %85, 19968, !dbg !34
  %212 = add i32 %211, %.decomposed, !dbg !35
  %213 = add i32 %211, %.decomposed2, !dbg !35
  %214 = add i32 %211, %.decomposed4, !dbg !35
  %215 = add i32 %211, %.decomposed6, !dbg !35
  %216 = add i32 %86, 19968, !dbg !34
  %217 = add i32 %216, %.decomposed8, !dbg !35
  %218 = add i32 %216, %.decomposed10, !dbg !35
  %219 = add i32 %216, %.decomposed12, !dbg !35
  %220 = add i32 %216, %.decomposed14, !dbg !35
  %221 = sext i32 %212 to i64, !dbg !36
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !36
  %223 = sext i32 %213 to i64, !dbg !36
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !36
  %225 = sext i32 %214 to i64, !dbg !36
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !36
  %227 = sext i32 %215 to i64, !dbg !36
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !36
  %229 = sext i32 %217 to i64, !dbg !36
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !36
  %231 = sext i32 %218 to i64, !dbg !36
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !36
  %233 = sext i32 %219 to i64, !dbg !36
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !36
  %235 = sext i32 %220 to i64, !dbg !36
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !36
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 %17) #1, !dbg !37
  %238 = bitcast i32 %237 to float, !dbg !37
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %17) #1, !dbg !37
  %240 = bitcast i32 %239 to float, !dbg !37
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %17) #1, !dbg !37
  %242 = bitcast i32 %241 to float, !dbg !37
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %17) #1, !dbg !37
  %244 = bitcast i32 %243 to float, !dbg !37
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %18) #1, !dbg !37
  %246 = bitcast i32 %245 to float, !dbg !37
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %18) #1, !dbg !37
  %248 = bitcast i32 %247 to float, !dbg !37
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %18) #1, !dbg !37
  %250 = bitcast i32 %249 to float, !dbg !37
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %18) #1, !dbg !37
  %252 = bitcast i32 %251 to float, !dbg !37
  %253 = fadd float %112, %154, !dbg !38
  %254 = fadd float %114, %156, !dbg !38
  %255 = fadd float %116, %158, !dbg !38
  %256 = fadd float %118, %160, !dbg !38
  %257 = fadd float %120, %162, !dbg !38
  %258 = fadd float %122, %164, !dbg !38
  %259 = fadd float %124, %166, !dbg !38
  %260 = fadd float %126, %168, !dbg !38
  %261 = fadd float %253, %196, !dbg !39
  %262 = fadd float %254, %198, !dbg !39
  %263 = fadd float %255, %200, !dbg !39
  %264 = fadd float %256, %202, !dbg !39
  %265 = fadd float %257, %204, !dbg !39
  %266 = fadd float %258, %206, !dbg !39
  %267 = fadd float %259, %208, !dbg !39
  %268 = fadd float %260, %210, !dbg !39
  %269 = fadd float %261, %238, !dbg !40
  %270 = fadd float %262, %240, !dbg !40
  %271 = fadd float %263, %242, !dbg !40
  %272 = fadd float %264, %244, !dbg !40
  %273 = fadd float %265, %246, !dbg !40
  %274 = fadd float %266, %248, !dbg !40
  %275 = fadd float %267, %250, !dbg !40
  %276 = fadd float %268, %252, !dbg !40
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %269) #1, !dbg !41
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %270) #1, !dbg !41
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %271) #1, !dbg !41
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %272) #1, !dbg !41
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %273) #1, !dbg !41
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %274) #1, !dbg !41
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %275) #1, !dbg !41
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %276) #1, !dbg !41
  %285 = sext i32 %9 to i64, !dbg !42
  %286 = getelementptr float, ptr addrspace(1) %1, i64 %285, !dbg !42
  %287 = sext i32 %13 to i64, !dbg !42
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %287, !dbg !42
  %289 = bitcast float %277 to i32, !dbg !43
  %290 = bitcast float %278 to i32, !dbg !43
  %291 = bitcast float %279 to i32, !dbg !43
  %292 = bitcast float %280 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %290, i32 %291, i32 %292, ptr addrspace(1) %286, i1 %17) #1, !dbg !43
  %293 = bitcast float %281 to i32, !dbg !43
  %294 = bitcast float %282 to i32, !dbg !43
  %295 = bitcast float %283 to i32, !dbg !43
  %296 = bitcast float %284 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %294, i32 %295, i32 %296, ptr addrspace(1) %288, i1 %18) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ymejq3p272raafzjymvanqcsyff6n6xxt4zdu3rrcwb2um3oet.py", directory: "inductor_cache/2y")
!4 = !{ptr @triton_poi_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_1", linkageName: "triton_poi_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 29, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 46, scope: !7)
!26 = !DILocation(line: 30, column: 37, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 53, scope: !7)
!30 = !DILocation(line: 31, column: 38, scope: !7)
!31 = !DILocation(line: 31, column: 43, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 54, scope: !7)
!34 = !DILocation(line: 32, column: 38, scope: !7)
!35 = !DILocation(line: 32, column: 43, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 54, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 34, column: 18, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 36, scope: !7)
!44 = !DILocation(line: 37, column: 4, scope: !7)
