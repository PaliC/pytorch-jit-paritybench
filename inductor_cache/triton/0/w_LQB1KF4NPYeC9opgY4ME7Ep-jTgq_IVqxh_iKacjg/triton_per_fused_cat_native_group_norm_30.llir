; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_cat_native_group_norm_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 5, !dbg !12
  %15 = and i32 %13, 31, !dbg !12
  %16 = shl i32 %13, 2, !dbg !13
  %17 = and i32 %16, 12, !dbg !13
  %18 = and i32 %16, 124, !dbg !13
  %19 = lshr i32 %18, 4, !dbg !14
  %20 = or disjoint i32 %19, -128, !dbg !15
  %21 = and i32 %14, 7, !dbg !12
  %22 = or disjoint i32 %21, 8, !dbg !12
  %23 = or disjoint i32 %21, 16, !dbg !12
  %24 = or disjoint i32 %21, 24, !dbg !12
  %25 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !16
  %26 = shufflevector <4 x i32> %25, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !16
  %27 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !16
  %28 = insertelement <4 x i32> %27, i32 %23, i64 1, !dbg !16
  %29 = insertelement <4 x i32> %28, i32 %22, i64 2, !dbg !16
  %30 = insertelement <4 x i32> %29, i32 %21, i64 3, !dbg !16
  %31 = or disjoint <4 x i32> %26, %30, !dbg !16
  %32 = extractelement <4 x i32> %31, i64 3, !dbg !17
  %33 = icmp slt i32 %32, 128, !dbg !18
  %34 = extractelement <4 x i32> %31, i64 2, !dbg !17
  %35 = icmp slt i32 %34, 128, !dbg !18
  %36 = extractelement <4 x i32> %31, i64 1, !dbg !17
  %37 = icmp slt i32 %36, 128, !dbg !18
  %38 = extractelement <4 x i32> %31, i64 0, !dbg !17
  %39 = icmp slt i32 %38, 128, !dbg !18
  %40 = srem <4 x i32> %31, splat (i32 32), !dbg !19
  %41 = sdiv i32 %32, 32, !dbg !20
  %42 = sdiv i32 %34, 32, !dbg !20
  %43 = sdiv i32 %36, 32, !dbg !20
  %44 = sdiv i32 %38, 32, !dbg !20
  %45 = shl i32 %32, 7, !dbg !17
  %46 = shl i32 %34, 7, !dbg !17
  %47 = shl i32 %36, 7, !dbg !17
  %48 = shl i32 %38, 7, !dbg !17
  %49 = or disjoint i32 %45, %18, !dbg !21
  %50 = or disjoint i32 %46, %18, !dbg !21
  %51 = or disjoint i32 %47, %18, !dbg !21
  %52 = or disjoint i32 %48, %18, !dbg !21
  %53 = sext i32 %49 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !22
  %55 = sext i32 %50 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !22
  %57 = sext i32 %51 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !22
  %59 = sext i32 %52 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !22
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #5, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = bitcast i32 %65 to float, !dbg !23
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #5, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = bitcast i32 %74 to float, !dbg !23
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #5, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !23
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !23
  %84 = bitcast i32 %80 to float, !dbg !23
  %85 = bitcast i32 %81 to float, !dbg !23
  %86 = bitcast i32 %82 to float, !dbg !23
  %87 = bitcast i32 %83 to float, !dbg !23
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #5, !dbg !23
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !23
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !23
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !23
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !23
  %93 = bitcast i32 %89 to float, !dbg !23
  %94 = bitcast i32 %90 to float, !dbg !23
  %95 = bitcast i32 %91 to float, !dbg !23
  %96 = bitcast i32 %92 to float, !dbg !23
  %97 = shl nsw <4 x i32> %40, splat (i32 3), !dbg !24
  %98 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !25
  %99 = shufflevector <4 x i32> %98, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !25
  %100 = or disjoint <4 x i32> %97, %99, !dbg !25
  %101 = extractelement <4 x i32> %100, i64 3, !dbg !26
  %102 = icmp slt i32 %101, 128, !dbg !27
  %103 = extractelement <4 x i32> %100, i64 2, !dbg !26
  %104 = icmp slt i32 %103, 128, !dbg !27
  %105 = extractelement <4 x i32> %100, i64 1, !dbg !26
  %106 = icmp slt i32 %105, 128, !dbg !27
  %107 = extractelement <4 x i32> %100, i64 0, !dbg !26
  %108 = icmp slt i32 %107, 128, !dbg !27
  %109 = shl nsw i32 %101, 4, !dbg !26
  %110 = shl nsw i32 %103, 4, !dbg !26
  %111 = shl nsw i32 %105, 4, !dbg !26
  %112 = shl nsw i32 %107, 4, !dbg !26
  %113 = shl i32 %41, 11, !dbg !28
  %114 = shl i32 %42, 11, !dbg !28
  %115 = shl i32 %43, 11, !dbg !28
  %116 = shl i32 %44, 11, !dbg !28
  %117 = or disjoint i32 %113, %17, !dbg !29
  %118 = add i32 %117, %109, !dbg !30
  %119 = or disjoint i32 %114, %17, !dbg !29
  %120 = add i32 %119, %110, !dbg !30
  %121 = or disjoint i32 %115, %17, !dbg !29
  %122 = add i32 %121, %111, !dbg !30
  %123 = or disjoint i32 %116, %17, !dbg !29
  %124 = add i32 %123, %112, !dbg !30
  %125 = sext i32 %118 to i64, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !31
  %127 = sext i32 %120 to i64, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !31
  %129 = sext i32 %122 to i64, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !31
  %131 = sext i32 %124 to i64, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !31
  %133 = and i1 %33, %102, !dbg !32
  %134 = and i1 %35, %104, !dbg !32
  %135 = and i1 %37, %106, !dbg !32
  %136 = and i1 %39, %108, !dbg !32
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #5, !dbg !33
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !33
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #5, !dbg !33
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !33
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !33
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !33
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #5, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !33
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #5, !dbg !33
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !33
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !33
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !33
  %157 = extractelement <4 x i32> %40, i64 1, !dbg !34
  %158 = and i32 %157, 536870896, !dbg !34
  %159 = icmp eq i32 %158, 16, !dbg !34
  %160 = extractelement <4 x i32> %97, i64 3, !dbg !35
  %161 = add nsw i32 %160, %20, !dbg !35
  %162 = extractelement <4 x i32> %97, i64 2, !dbg !35
  %163 = add nsw i32 %162, %20, !dbg !35
  %164 = extractelement <4 x i32> %97, i64 1, !dbg !35
  %165 = add nsw i32 %164, %20, !dbg !35
  %166 = extractelement <4 x i32> %97, i64 0, !dbg !35
  %167 = add nsw i32 %166, %20, !dbg !35
  %168 = shl nsw i32 %161, 4, !dbg !36
  %169 = shl nsw i32 %163, 4, !dbg !36
  %170 = shl nsw i32 %165, 4, !dbg !36
  %171 = shl nsw i32 %167, 4, !dbg !36
  %172 = shl i32 %41, 10, !dbg !37
  %173 = shl i32 %42, 10, !dbg !37
  %174 = shl i32 %43, 10, !dbg !37
  %175 = shl i32 %44, 10, !dbg !37
  %176 = or disjoint i32 %172, %17, !dbg !38
  %177 = add i32 %176, %168, !dbg !39
  %178 = or disjoint i32 %173, %17, !dbg !38
  %179 = add i32 %178, %169, !dbg !39
  %180 = or disjoint i32 %174, %17, !dbg !38
  %181 = add i32 %180, %170, !dbg !39
  %182 = or disjoint i32 %175, %17, !dbg !38
  %183 = add i32 %182, %171, !dbg !39
  %184 = sext i32 %177 to i64, !dbg !40
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !40
  %186 = sext i32 %179 to i64, !dbg !40
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !40
  %188 = sext i32 %181 to i64, !dbg !40
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !40
  %190 = sext i32 %183 to i64, !dbg !40
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !40
  %192 = and i1 %37, %159, !dbg !41
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !42
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %187, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !42
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %192, i32 0, i1 %192, i32 0, i1 %192, i32 0, i1 %192, i32 0, i1 %192) #5, !dbg !42
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !42
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !42
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !42
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !42
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !42
  %201 = icmp sgt <4 x i32> %100, splat (i32 191), !dbg !43
  %202 = or disjoint i32 %19, -192, !dbg !44
  %203 = add nsw i32 %160, %202, !dbg !45
  %204 = add nsw i32 %162, %202, !dbg !45
  %205 = add nsw i32 %164, %202, !dbg !45
  %206 = add nsw i32 %166, %202, !dbg !45
  %207 = shl nsw i32 %203, 4, !dbg !46
  %208 = shl nsw i32 %204, 4, !dbg !46
  %209 = shl nsw i32 %205, 4, !dbg !46
  %210 = shl nsw i32 %206, 4, !dbg !46
  %211 = add i32 %176, %207, !dbg !47
  %212 = add i32 %178, %208, !dbg !47
  %213 = add i32 %180, %209, !dbg !47
  %214 = add i32 %182, %210, !dbg !47
  %215 = sext i32 %211 to i64, !dbg !48
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %215, !dbg !48
  %217 = sext i32 %212 to i64, !dbg !48
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !48
  %219 = sext i32 %213 to i64, !dbg !48
  %220 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !48
  %221 = sext i32 %214 to i64, !dbg !48
  %222 = getelementptr float, ptr addrspace(1) %2, i64 %221, !dbg !48
  %223 = extractelement <4 x i1> %201, i64 3, !dbg !49
  %224 = and i1 %33, %223, !dbg !49
  %225 = extractelement <4 x i1> %201, i64 2, !dbg !49
  %226 = and i1 %35, %225, !dbg !49
  %227 = extractelement <4 x i1> %201, i64 1, !dbg !49
  %228 = and i1 %37, %227, !dbg !49
  %229 = extractelement <4 x i1> %201, i64 0, !dbg !49
  %230 = and i1 %39, %229, !dbg !49
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %216, i1 %224, i32 0, i1 %224, i32 0, i1 %224, i32 0, i1 %224, i32 0, i1 %224) #5, !dbg !50
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !50
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !50
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !50
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !50
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %218, i1 %226, i32 0, i1 %226, i32 0, i1 %226, i32 0, i1 %226, i32 0, i1 %226) #5, !dbg !50
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !50
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !50
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !50
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !50
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %220, i1 %228, i32 0, i1 %228, i32 0, i1 %228, i32 0, i1 %228, i32 0, i1 %228) #5, !dbg !50
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !50
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !50
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !50
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !50
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %222, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #5, !dbg !50
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !50
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !50
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !50
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !50
  %.v4 = select i1 %159, i32 %196, i32 %242, !dbg !51
  %.v5 = select i1 %159, i32 %197, i32 %243, !dbg !51
  %.v6 = select i1 %159, i32 %198, i32 %244, !dbg !51
  %.v7 = select i1 %159, i32 %199, i32 %245, !dbg !51
  %.v8 = select i1 %102, i32 %138, i32 %232, !dbg !52
  %251 = bitcast i32 %.v8 to float, !dbg !52
  %.v9 = select i1 %102, i32 %139, i32 %233, !dbg !52
  %252 = bitcast i32 %.v9 to float, !dbg !52
  %.v10 = select i1 %102, i32 %140, i32 %234, !dbg !52
  %253 = bitcast i32 %.v10 to float, !dbg !52
  %.v11 = select i1 %102, i32 %141, i32 %235, !dbg !52
  %254 = bitcast i32 %.v11 to float, !dbg !52
  %.v12 = select i1 %104, i32 %143, i32 %237, !dbg !52
  %255 = bitcast i32 %.v12 to float, !dbg !52
  %.v13 = select i1 %104, i32 %144, i32 %238, !dbg !52
  %256 = bitcast i32 %.v13 to float, !dbg !52
  %.v14 = select i1 %104, i32 %145, i32 %239, !dbg !52
  %257 = bitcast i32 %.v14 to float, !dbg !52
  %.v15 = select i1 %104, i32 %146, i32 %240, !dbg !52
  %258 = bitcast i32 %.v15 to float, !dbg !52
  %.v16 = select i1 %106, i32 %148, i32 %.v4, !dbg !52
  %259 = bitcast i32 %.v16 to float, !dbg !52
  %.v17 = select i1 %106, i32 %149, i32 %.v5, !dbg !52
  %260 = bitcast i32 %.v17 to float, !dbg !52
  %.v18 = select i1 %106, i32 %150, i32 %.v6, !dbg !52
  %261 = bitcast i32 %.v18 to float, !dbg !52
  %.v19 = select i1 %106, i32 %151, i32 %.v7, !dbg !52
  %262 = bitcast i32 %.v19 to float, !dbg !52
  %.v20 = select i1 %108, i32 %153, i32 %247, !dbg !52
  %263 = bitcast i32 %.v20 to float, !dbg !52
  %.v21 = select i1 %108, i32 %154, i32 %248, !dbg !52
  %264 = bitcast i32 %.v21 to float, !dbg !52
  %.v22 = select i1 %108, i32 %155, i32 %249, !dbg !52
  %265 = bitcast i32 %.v22 to float, !dbg !52
  %.v23 = select i1 %108, i32 %156, i32 %250, !dbg !52
  %266 = bitcast i32 %.v23 to float, !dbg !52
  %267 = fadd float %66, %251, !dbg !53
  %268 = fadd float %67, %252, !dbg !53
  %269 = fadd float %68, %253, !dbg !53
  %270 = fadd float %69, %254, !dbg !53
  %271 = fadd float %75, %255, !dbg !53
  %272 = fadd float %76, %256, !dbg !53
  %273 = fadd float %77, %257, !dbg !53
  %274 = fadd float %78, %258, !dbg !53
  %275 = fadd float %84, %259, !dbg !53
  %276 = fadd float %85, %260, !dbg !53
  %277 = fadd float %86, %261, !dbg !53
  %278 = fadd float %87, %262, !dbg !53
  %279 = fadd float %93, %263, !dbg !53
  %280 = fadd float %94, %264, !dbg !53
  %281 = fadd float %95, %265, !dbg !53
  %282 = fadd float %96, %266, !dbg !53
  %283 = fadd float %267, %268, !dbg !54
  %284 = fadd float %269, %283, !dbg !54
  %285 = fadd float %270, %284, !dbg !54
  %286 = select i1 %33, float %285, float 0.000000e+00, !dbg !54
  %287 = fadd float %271, %272, !dbg !54
  %288 = fadd float %273, %287, !dbg !54
  %289 = fadd float %274, %288, !dbg !54
  %290 = select i1 %35, float %289, float 0.000000e+00, !dbg !54
  %291 = fadd float %275, %276, !dbg !54
  %292 = fadd float %277, %291, !dbg !54
  %293 = fadd float %278, %292, !dbg !54
  %294 = select i1 %37, float %293, float 0.000000e+00, !dbg !54
  %295 = fadd float %279, %280, !dbg !54
  %296 = fadd float %281, %295, !dbg !54
  %297 = fadd float %282, %296, !dbg !54
  %298 = select i1 %39, float %297, float 0.000000e+00, !dbg !54
  %299 = bitcast float %286 to i32, !dbg !59
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 16, i32 31), !dbg !59
  %301 = bitcast i32 %300 to float, !dbg !59
  %302 = fadd float %286, %301, !dbg !54
  %303 = bitcast float %302 to i32, !dbg !59
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !59
  %305 = bitcast i32 %304 to float, !dbg !59
  %306 = fadd float %302, %305, !dbg !54
  %307 = bitcast float %306 to i32, !dbg !59
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 4, i32 31), !dbg !59
  %309 = bitcast i32 %308 to float, !dbg !59
  %310 = fadd float %306, %309, !dbg !54
  %311 = bitcast float %310 to i32, !dbg !59
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !59
  %313 = bitcast i32 %312 to float, !dbg !59
  %314 = fadd float %310, %313, !dbg !54
  %315 = bitcast float %314 to i32, !dbg !59
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !59
  %317 = bitcast i32 %316 to float, !dbg !59
  %318 = fadd float %314, %317, !dbg !54
  %319 = bitcast float %290 to i32, !dbg !59
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 16, i32 31), !dbg !59
  %321 = bitcast i32 %320 to float, !dbg !59
  %322 = fadd float %290, %321, !dbg !54
  %323 = bitcast float %322 to i32, !dbg !59
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 8, i32 31), !dbg !59
  %325 = bitcast i32 %324 to float, !dbg !59
  %326 = fadd float %322, %325, !dbg !54
  %327 = bitcast float %326 to i32, !dbg !59
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !59
  %329 = bitcast i32 %328 to float, !dbg !59
  %330 = fadd float %326, %329, !dbg !54
  %331 = bitcast float %330 to i32, !dbg !59
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 2, i32 31), !dbg !59
  %333 = bitcast i32 %332 to float, !dbg !59
  %334 = fadd float %330, %333, !dbg !54
  %335 = bitcast float %334 to i32, !dbg !59
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !59
  %337 = bitcast i32 %336 to float, !dbg !59
  %338 = fadd float %334, %337, !dbg !54
  %339 = bitcast float %294 to i32, !dbg !59
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 16, i32 31), !dbg !59
  %341 = bitcast i32 %340 to float, !dbg !59
  %342 = fadd float %294, %341, !dbg !54
  %343 = bitcast float %342 to i32, !dbg !59
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 8, i32 31), !dbg !59
  %345 = bitcast i32 %344 to float, !dbg !59
  %346 = fadd float %342, %345, !dbg !54
  %347 = bitcast float %346 to i32, !dbg !59
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 4, i32 31), !dbg !59
  %349 = bitcast i32 %348 to float, !dbg !59
  %350 = fadd float %346, %349, !dbg !54
  %351 = bitcast float %350 to i32, !dbg !59
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 2, i32 31), !dbg !59
  %353 = bitcast i32 %352 to float, !dbg !59
  %354 = fadd float %350, %353, !dbg !54
  %355 = bitcast float %354 to i32, !dbg !59
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 1, i32 31), !dbg !59
  %357 = bitcast i32 %356 to float, !dbg !59
  %358 = fadd float %354, %357, !dbg !54
  %359 = bitcast float %298 to i32, !dbg !59
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 16, i32 31), !dbg !59
  %361 = bitcast i32 %360 to float, !dbg !59
  %362 = fadd float %298, %361, !dbg !54
  %363 = bitcast float %362 to i32, !dbg !59
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 8, i32 31), !dbg !59
  %365 = bitcast i32 %364 to float, !dbg !59
  %366 = fadd float %362, %365, !dbg !54
  %367 = bitcast float %366 to i32, !dbg !59
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 4, i32 31), !dbg !59
  %369 = bitcast i32 %368 to float, !dbg !59
  %370 = fadd float %366, %369, !dbg !54
  %371 = bitcast float %370 to i32, !dbg !59
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 2, i32 31), !dbg !59
  %373 = bitcast i32 %372 to float, !dbg !59
  %374 = fadd float %370, %373, !dbg !54
  %375 = bitcast float %374 to i32, !dbg !59
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !59
  %377 = bitcast i32 %376 to float, !dbg !59
  %378 = fadd float %374, %377, !dbg !54
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !60
  %380 = bitcast float %318 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #5, !dbg !60
  %381 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !60
  %382 = bitcast float %338 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #5, !dbg !60
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !60
  %384 = bitcast float %358 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #5, !dbg !60
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !60
  %386 = bitcast float %378 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 true) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !60
  %388 = load float, ptr addrspace(3) %387, align 4, !dbg !60
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float 1.280000e+02) #5, !dbg !60
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 1.280000e+02) #5, !dbg !60
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float 1.280000e+02) #5, !dbg !60
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %358, float 1.280000e+02) #5, !dbg !60
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float 1.280000e+02) #5, !dbg !60
  %394 = fsub float %267, %390, !dbg !61
  %395 = fsub float %268, %390, !dbg !61
  %396 = fsub float %269, %390, !dbg !61
  %397 = fsub float %270, %390, !dbg !61
  %398 = fsub float %271, %391, !dbg !61
  %399 = fsub float %272, %391, !dbg !61
  %400 = fsub float %273, %391, !dbg !61
  %401 = fsub float %274, %391, !dbg !61
  %402 = fsub float %275, %392, !dbg !61
  %403 = fsub float %276, %392, !dbg !61
  %404 = fsub float %277, %392, !dbg !61
  %405 = fsub float %278, %392, !dbg !61
  %406 = fsub float %279, %393, !dbg !61
  %407 = fsub float %280, %393, !dbg !61
  %408 = fsub float %281, %393, !dbg !61
  %409 = fsub float %282, %393, !dbg !61
  %410 = fmul float %394, %394, !dbg !62
  %411 = fmul float %395, %395, !dbg !62
  %412 = fmul float %396, %396, !dbg !62
  %413 = fmul float %397, %397, !dbg !62
  %414 = fmul float %398, %398, !dbg !62
  %415 = fmul float %399, %399, !dbg !62
  %416 = fmul float %400, %400, !dbg !62
  %417 = fmul float %401, %401, !dbg !62
  %418 = fmul float %402, %402, !dbg !62
  %419 = fmul float %403, %403, !dbg !62
  %420 = fmul float %404, %404, !dbg !62
  %421 = fmul float %405, %405, !dbg !62
  %422 = fmul float %406, %406, !dbg !62
  %423 = fmul float %407, %407, !dbg !62
  %424 = fmul float %408, %408, !dbg !62
  %425 = fmul float %409, %409, !dbg !62
  %426 = fadd float %410, %411, !dbg !63
  %427 = fadd float %412, %426, !dbg !63
  %428 = fadd float %413, %427, !dbg !63
  %429 = select i1 %33, float %428, float 0.000000e+00, !dbg !63
  %430 = fadd float %414, %415, !dbg !63
  %431 = fadd float %416, %430, !dbg !63
  %432 = fadd float %417, %431, !dbg !63
  %433 = select i1 %35, float %432, float 0.000000e+00, !dbg !63
  %434 = fadd float %418, %419, !dbg !63
  %435 = fadd float %420, %434, !dbg !63
  %436 = fadd float %421, %435, !dbg !63
  %437 = select i1 %37, float %436, float 0.000000e+00, !dbg !63
  %438 = fadd float %422, %423, !dbg !63
  %439 = fadd float %424, %438, !dbg !63
  %440 = fadd float %425, %439, !dbg !63
  %441 = select i1 %39, float %440, float 0.000000e+00, !dbg !63
  %442 = bitcast float %429 to i32, !dbg !65
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 16, i32 31), !dbg !65
  %444 = bitcast i32 %443 to float, !dbg !65
  %445 = fadd float %429, %444, !dbg !63
  %446 = bitcast float %445 to i32, !dbg !65
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 8, i32 31), !dbg !65
  %448 = bitcast i32 %447 to float, !dbg !65
  %449 = fadd float %445, %448, !dbg !63
  %450 = bitcast float %449 to i32, !dbg !65
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 4, i32 31), !dbg !65
  %452 = bitcast i32 %451 to float, !dbg !65
  %453 = fadd float %449, %452, !dbg !63
  %454 = bitcast float %453 to i32, !dbg !65
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 2, i32 31), !dbg !65
  %456 = bitcast i32 %455 to float, !dbg !65
  %457 = fadd float %453, %456, !dbg !63
  %458 = bitcast float %457 to i32, !dbg !65
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 1, i32 31), !dbg !65
  %460 = bitcast i32 %459 to float, !dbg !65
  %461 = fadd float %457, %460, !dbg !63
  %462 = bitcast float %433 to i32, !dbg !65
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 16, i32 31), !dbg !65
  %464 = bitcast i32 %463 to float, !dbg !65
  %465 = fadd float %433, %464, !dbg !63
  %466 = bitcast float %465 to i32, !dbg !65
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 8, i32 31), !dbg !65
  %468 = bitcast i32 %467 to float, !dbg !65
  %469 = fadd float %465, %468, !dbg !63
  %470 = bitcast float %469 to i32, !dbg !65
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 4, i32 31), !dbg !65
  %472 = bitcast i32 %471 to float, !dbg !65
  %473 = fadd float %469, %472, !dbg !63
  %474 = bitcast float %473 to i32, !dbg !65
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 2, i32 31), !dbg !65
  %476 = bitcast i32 %475 to float, !dbg !65
  %477 = fadd float %473, %476, !dbg !63
  %478 = bitcast float %477 to i32, !dbg !65
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 1, i32 31), !dbg !65
  %480 = bitcast i32 %479 to float, !dbg !65
  %481 = fadd float %477, %480, !dbg !63
  %482 = bitcast float %437 to i32, !dbg !65
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 16, i32 31), !dbg !65
  %484 = bitcast i32 %483 to float, !dbg !65
  %485 = fadd float %437, %484, !dbg !63
  %486 = bitcast float %485 to i32, !dbg !65
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 8, i32 31), !dbg !65
  %488 = bitcast i32 %487 to float, !dbg !65
  %489 = fadd float %485, %488, !dbg !63
  %490 = bitcast float %489 to i32, !dbg !65
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 4, i32 31), !dbg !65
  %492 = bitcast i32 %491 to float, !dbg !65
  %493 = fadd float %489, %492, !dbg !63
  %494 = bitcast float %493 to i32, !dbg !65
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 2, i32 31), !dbg !65
  %496 = bitcast i32 %495 to float, !dbg !65
  %497 = fadd float %493, %496, !dbg !63
  %498 = bitcast float %497 to i32, !dbg !65
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 1, i32 31), !dbg !65
  %500 = bitcast i32 %499 to float, !dbg !65
  %501 = fadd float %497, %500, !dbg !63
  %502 = bitcast float %441 to i32, !dbg !65
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 16, i32 31), !dbg !65
  %504 = bitcast i32 %503 to float, !dbg !65
  %505 = fadd float %441, %504, !dbg !63
  %506 = bitcast float %505 to i32, !dbg !65
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 8, i32 31), !dbg !65
  %508 = bitcast i32 %507 to float, !dbg !65
  %509 = fadd float %505, %508, !dbg !63
  %510 = bitcast float %509 to i32, !dbg !65
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 4, i32 31), !dbg !65
  %512 = bitcast i32 %511 to float, !dbg !65
  %513 = fadd float %509, %512, !dbg !63
  %514 = bitcast float %513 to i32, !dbg !65
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 2, i32 31), !dbg !65
  %516 = bitcast i32 %515 to float, !dbg !65
  %517 = fadd float %513, %516, !dbg !63
  %518 = bitcast float %517 to i32, !dbg !65
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 1, i32 31), !dbg !65
  %520 = bitcast i32 %519 to float, !dbg !65
  %521 = fadd float %517, %520, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %522 = bitcast float %461 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %522, i1 true) #5, !dbg !66
  %523 = bitcast float %481 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %523, i1 true) #5, !dbg !66
  %524 = bitcast float %501 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %524, i1 true) #5, !dbg !66
  %525 = bitcast float %521 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %525, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %526 = load float, ptr addrspace(3) %387, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %522, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %523, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %524, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %525, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %527 = load i32, ptr addrspace(3) %387, align 4, !dbg !67
  %528 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float 1.280000e+02) #5, !dbg !68
  %529 = fadd float %528, 0x3EE4F8B580000000, !dbg !69
  %530 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not.i = icmp eq i32 %530, 0, !dbg !66
  br i1 %.not.i, label %533, label %531, !dbg !66

531:                                              ; preds = %10
  %532 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %529), !dbg !66
  br label %__nv_rsqrtf.exit, !dbg !66

533:                                              ; preds = %10
  %534 = tail call float @llvm.nvvm.rsqrt.approx.f(float %529), !dbg !66
  br label %__nv_rsqrtf.exit, !dbg !66

__nv_rsqrtf.exit:                                 ; preds = %531, %533
  %.0.i = phi float [ %532, %531 ], [ %534, %533 ], !dbg !66
  %535 = or disjoint i32 %12, %15, !dbg !16
  %536 = icmp slt i32 %535, 128, !dbg !18
  %537 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !70
  %538 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !70
  %539 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !70
  %540 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v8, i32 %.v9, i32 %.v10, i32 %.v11, ptr addrspace(1) %537, i1 %33) #5, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v12, i32 %.v13, i32 %.v14, i32 %.v15, ptr addrspace(1) %538, i1 %35) #5, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v16, i32 %.v17, i32 %.v18, i32 %.v19, ptr addrspace(1) %539, i1 %37) #5, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v20, i32 %.v21, i32 %.v22, i32 %.v23, ptr addrspace(1) %540, i1 %39) #5, !dbg !71
  %541 = sext i32 %535 to i64, !dbg !72
  %542 = getelementptr float, ptr addrspace(1) %7, i64 %541, !dbg !72
  %543 = and i32 %13, 224, !dbg !73
  %544 = icmp eq i32 %543, 0, !dbg !73
  %545 = bitcast float %.0.i to i32, !dbg !73
  %546 = and i1 %544, %536, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %545, ptr addrspace(1) %542, i1 %546) #5, !dbg !73
  %547 = getelementptr float, ptr addrspace(1) %5, i64 %541, !dbg !74
  %548 = bitcast float %389 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %548, ptr addrspace(1) %547, i1 %546) #5, !dbg !75
  %549 = getelementptr float, ptr addrspace(1) %6, i64 %541, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %527, ptr addrspace(1) %549, i1 %546) #5, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3y3yz5sfk7oz6kcvh2rrfcgq3jb3b42pko7ublpe6cptugbwbcj.py", directory: "inductor_cache/3y")
!4 = !{ptr @triton_per_fused_cat_native_group_norm_30, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_native_group_norm_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_native_group_norm_30", linkageName: "triton_per_fused_cat_native_group_norm_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 26, column: 34, scope: !7)
!14 = !DILocation(line: 29, column: 19, scope: !7)
!15 = !DILocation(line: 46, column: 49, scope: !7)
!16 = !DILocation(line: 24, column: 23, scope: !7)
!17 = !DILocation(line: 35, column: 40, scope: !7)
!18 = !DILocation(line: 25, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 45, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 16, scope: !7)
!26 = !DILocation(line: 41, column: 39, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 57, scope: !7)
!29 = !DILocation(line: 41, column: 35, scope: !7)
!30 = !DILocation(line: 41, column: 52, scope: !7)
!31 = !DILocation(line: 41, column: 30, scope: !7)
!32 = !DILocation(line: 41, column: 69, scope: !7)
!33 = !DILocation(line: 41, column: 62, scope: !7)
!34 = !DILocation(line: 45, column: 18, scope: !7)
!35 = !DILocation(line: 46, column: 54, scope: !7)
!36 = !DILocation(line: 46, column: 40, scope: !7)
!37 = !DILocation(line: 46, column: 67, scope: !7)
!38 = !DILocation(line: 46, column: 36, scope: !7)
!39 = !DILocation(line: 46, column: 62, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 79, scope: !7)
!42 = !DILocation(line: 46, column: 72, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 49, scope: !7)
!45 = !DILocation(line: 50, column: 54, scope: !7)
!46 = !DILocation(line: 50, column: 40, scope: !7)
!47 = !DILocation(line: 50, column: 62, scope: !7)
!48 = !DILocation(line: 50, column: 31, scope: !7)
!49 = !DILocation(line: 50, column: 80, scope: !7)
!50 = !DILocation(line: 50, column: 72, scope: !7)
!51 = !DILocation(line: 51, column: 34, scope: !7)
!52 = !DILocation(line: 52, column: 33, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!55 = distinct !DILexicalBlockFile(scope: !57, file: !56, discriminator: 0)
!56 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!57 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!58 = !DILocation(line: 58, column: 26, scope: !7)
!59 = !DILocation(line: 267, column: 36, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !64)
!64 = !DILocation(line: 66, column: 26, scope: !7)
!65 = !DILocation(line: 267, column: 36, scope: !57, inlinedAt: !64)
!66 = !DILocation(line: 71, column: 28, scope: !7)
!67 = !DILocation(line: 66, column: 29, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 72, column: 25, scope: !7)
!71 = !DILocation(line: 72, column: 46, scope: !7)
!72 = !DILocation(line: 73, column: 25, scope: !7)
!73 = !DILocation(line: 73, column: 37, scope: !7)
!74 = !DILocation(line: 74, column: 25, scope: !7)
!75 = !DILocation(line: 74, column: 37, scope: !7)
!76 = !DILocation(line: 75, column: 25, scope: !7)
!77 = !DILocation(line: 75, column: 37, scope: !7)
!78 = !DILocation(line: 75, column: 4, scope: !7)
