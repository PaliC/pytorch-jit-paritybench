; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 4096, !dbg !14
  %16 = srem i32 %15, 384, !dbg !15
  %17 = mul i32 %15, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen1 = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen1, 1572864, !dbg !17
  %19 = icmp slt i32 %16, 64, !dbg !18
  %20 = mul i32 %18, 1572864, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %20, !dbg !19
  %21 = shl nsw i32 %18, 18, !dbg !20
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #1, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = and i32 %16, -64, !dbg !24
  %29 = icmp eq i32 %28, 64, !dbg !24
  %30 = shl nsw i32 %16, 12, !dbg !25
  %31 = add nsw i32 %21, %.decomposed, !dbg !25
  %32 = add nsw i32 %31, -262144, !dbg !26
  %33 = add nsw i32 %32, %30, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !29
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %39 = icmp eq i32 %28, 128, !dbg !30
  %40 = add nsw i32 %31, -524288, !dbg !31
  %41 = add nsw i32 %40, %30, !dbg !32
  %42 = sext i32 %41 to i64, !dbg !33
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !33
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !34
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !34
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !34
  %47 = icmp eq i32 %28, 192, !dbg !35
  %48 = add nsw i32 %31, -786432, !dbg !36
  %49 = add nsw i32 %48, %30, !dbg !37
  %50 = sext i32 %49 to i64, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !38
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !39
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !39
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !39
  %55 = icmp eq i32 %28, 256, !dbg !40
  %56 = add nsw i32 %31, -1048576, !dbg !41
  %57 = add nsw i32 %56, %30, !dbg !42
  %58 = sext i32 %57 to i64, !dbg !43
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !43
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !44
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !44
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !44
  %63 = bitcast i32 %61 to float, !dbg !44
  %64 = bitcast i32 %62 to float, !dbg !44
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !45
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !46
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !46
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !46
  %69 = bitcast i32 %67 to float, !dbg !46
  %70 = bitcast i32 %68 to float, !dbg !46
  %71 = fadd float %63, %69, !dbg !47
  %72 = fadd float %64, %70, !dbg !47
  %73 = icmp sgt i32 %16, 319, !dbg !48
  %74 = add nsw i32 %31, -1310720, !dbg !49
  %75 = add nsw i32 %74, %30, !dbg !50
  %76 = sext i32 %75 to i64, !dbg !51
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %76, !dbg !51
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #1, !dbg !52
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !52
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !52
  %81 = sext i32 %14 to i64, !dbg !53
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !53
  %83 = bitcast float %71 to i32, !dbg !54
  %84 = select i1 %55, i32 %83, i32 %79, !dbg !55
  %85 = select i1 %47, i32 %53, i32 %84, !dbg !56
  %86 = select i1 %39, i32 %45, i32 %85, !dbg !57
  %87 = select i1 %29, i32 %37, i32 %86, !dbg !58
  %88 = select i1 %19, i32 %26, i32 %87, !dbg !59
  %89 = bitcast float %72 to i32, !dbg !54
  %90 = select i1 %55, i32 %89, i32 %80, !dbg !55
  %91 = select i1 %47, i32 %54, i32 %90, !dbg !56
  %92 = select i1 %39, i32 %46, i32 %91, !dbg !57
  %93 = select i1 %29, i32 %38, i32 %92, !dbg !58
  %94 = select i1 %19, i32 %27, i32 %93, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %94, ptr addrspace(1) %82, i1 true) #1, !dbg !54
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3e4oxktlelbb62cze2nntth7xro7se3cjpffh5wmpzaklxeffuc.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 54, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 42, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 56, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 68, scope: !7)
!30 = !DILocation(line: 42, column: 20, scope: !7)
!31 = !DILocation(line: 43, column: 36, scope: !7)
!32 = !DILocation(line: 43, column: 57, scope: !7)
!33 = !DILocation(line: 43, column: 31, scope: !7)
!34 = !DILocation(line: 43, column: 69, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 36, scope: !7)
!37 = !DILocation(line: 48, column: 57, scope: !7)
!38 = !DILocation(line: 48, column: 31, scope: !7)
!39 = !DILocation(line: 48, column: 69, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 36, scope: !7)
!42 = !DILocation(line: 53, column: 57, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 53, column: 69, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 69, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 20, scope: !7)
!49 = !DILocation(line: 61, column: 36, scope: !7)
!50 = !DILocation(line: 61, column: 57, scope: !7)
!51 = !DILocation(line: 61, column: 31, scope: !7)
!52 = !DILocation(line: 61, column: 69, scope: !7)
!53 = !DILocation(line: 67, column: 25, scope: !7)
!54 = !DILocation(line: 67, column: 37, scope: !7)
!55 = !DILocation(line: 0, scope: !7)
!56 = !DILocation(line: 63, column: 35, scope: !7)
!57 = !DILocation(line: 64, column: 35, scope: !7)
!58 = !DILocation(line: 65, column: 34, scope: !7)
!59 = !DILocation(line: 66, column: 33, scope: !7)
!60 = !DILocation(line: 67, column: 4, scope: !7)
