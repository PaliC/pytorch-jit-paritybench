; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %16 = sdiv i32 %.frozen, 16, !dbg !14
  %17 = sdiv i32 %15, 16, !dbg !14
  %18 = srem i32 %16, 16, !dbg !15
  %19 = srem i32 %17, 16, !dbg !15
  %20 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %14, 16, !dbg !16
  %22 = sdiv i32 %13, 256, !dbg !17
  %23 = sdiv i32 %15, 256, !dbg !17
  %24 = srem i32 %22, 128, !dbg !18
  %25 = srem i32 %23, 128, !dbg !18
  %26 = sdiv i32 %13, 32768, !dbg !19
  %27 = sdiv i32 %15, 32768, !dbg !19
  %28 = sext i32 %18 to i64, !dbg !20
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = sext i32 %19 to i64, !dbg !20
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %40 = sext i32 %.decomposed to i64, !dbg !22
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !22
  %42 = sext i32 %21 to i64, !dbg !22
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !22
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !23
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !23
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !23
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !23
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !23
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !23
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !23
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !23
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !23
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !23
  %56 = getelementptr i64, ptr addrspace(1) %3, i64 %40, !dbg !24
  %57 = getelementptr i64, ptr addrspace(1) %3, i64 %42, !dbg !24
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !25
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !25
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !25
  %61 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !25
  %62 = extractvalue { i64, i64 } %61, 0, !dbg !25
  %63 = extractvalue { i64, i64 } %61, 1, !dbg !25
  %64 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !25
  %65 = extractvalue { i64, i64 } %64, 0, !dbg !25
  %66 = extractvalue { i64, i64 } %64, 1, !dbg !25
  %67 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !25
  %68 = extractvalue { i64, i64 } %67, 0, !dbg !25
  %69 = extractvalue { i64, i64 } %67, 1, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !27
  %76 = bitcast i32 %72 to float, !dbg !27
  %77 = bitcast i32 %73 to float, !dbg !27
  %78 = bitcast i32 %74 to float, !dbg !27
  %79 = bitcast i32 %75 to float, !dbg !27
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !27
  %85 = bitcast i32 %81 to float, !dbg !27
  %86 = bitcast i32 %82 to float, !dbg !27
  %87 = bitcast i32 %83 to float, !dbg !27
  %88 = bitcast i32 %84 to float, !dbg !27
  %89 = lshr i64 %32, 59, !dbg !28
  %90 = and i64 %89, 16, !dbg !28
  %91 = add i64 %90, %32, !dbg !28
  %92 = lshr i64 %36, 59, !dbg !28
  %93 = and i64 %92, 16, !dbg !28
  %94 = add i64 %93, %36, !dbg !28
  %95 = lshr i64 %45, 59, !dbg !29
  %96 = and i64 %95, 16, !dbg !29
  %97 = add i64 %96, %45, !dbg !29
  %98 = lshr i64 %46, 59, !dbg !29
  %99 = and i64 %98, 16, !dbg !29
  %100 = add i64 %99, %46, !dbg !29
  %101 = lshr i64 %48, 59, !dbg !29
  %102 = and i64 %101, 16, !dbg !29
  %103 = add i64 %102, %48, !dbg !29
  %104 = lshr i64 %49, 59, !dbg !29
  %105 = and i64 %104, 16, !dbg !29
  %106 = add i64 %105, %49, !dbg !29
  %107 = lshr i64 %51, 59, !dbg !29
  %108 = and i64 %107, 16, !dbg !29
  %109 = add i64 %108, %51, !dbg !29
  %110 = lshr i64 %52, 59, !dbg !29
  %111 = and i64 %110, 16, !dbg !29
  %112 = add i64 %111, %52, !dbg !29
  %113 = lshr i64 %54, 59, !dbg !29
  %114 = and i64 %113, 16, !dbg !29
  %115 = add i64 %114, %54, !dbg !29
  %116 = lshr i64 %55, 59, !dbg !29
  %117 = and i64 %116, 16, !dbg !29
  %118 = add i64 %117, %55, !dbg !29
  %119 = sext i32 %24 to i64, !dbg !30
  %120 = sext i32 %25 to i64, !dbg !30
  %121 = shl i64 %91, 11, !dbg !31
  %122 = shl i64 %94, 11, !dbg !31
  %123 = shl nsw i32 %26, 15, !dbg !32
  %124 = shl nsw i32 %27, 15, !dbg !32
  %125 = sext i32 %123 to i64, !dbg !33
  %126 = sext i32 %124 to i64, !dbg !33
  %.idx = shl i64 %97, 9, !dbg !34
  %127 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !34
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %119, !dbg !34
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %121, !dbg !34
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %125, !dbg !34
  %.idx1 = shl i64 %100, 9, !dbg !34
  %131 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx1, !dbg !34
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %119, !dbg !34
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %121, !dbg !34
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %125, !dbg !34
  %.idx2 = shl i64 %103, 9, !dbg !34
  %135 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx2, !dbg !34
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %119, !dbg !34
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %121, !dbg !34
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %125, !dbg !34
  %.idx3 = shl i64 %106, 9, !dbg !34
  %139 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx3, !dbg !34
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %119, !dbg !34
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %121, !dbg !34
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %125, !dbg !34
  %.idx4 = shl i64 %109, 9, !dbg !34
  %143 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx4, !dbg !34
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %120, !dbg !34
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %122, !dbg !34
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %126, !dbg !34
  %.idx5 = shl i64 %112, 9, !dbg !34
  %147 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx5, !dbg !34
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %120, !dbg !34
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %122, !dbg !34
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %126, !dbg !34
  %.idx6 = shl i64 %115, 9, !dbg !34
  %151 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx6, !dbg !34
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %120, !dbg !34
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %122, !dbg !34
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %126, !dbg !34
  %.idx7 = shl i64 %118, 9, !dbg !34
  %155 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx7, !dbg !34
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %120, !dbg !34
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %122, !dbg !34
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %126, !dbg !34
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !35
  %160 = bitcast i32 %159 to float, !dbg !35
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !35
  %162 = bitcast i32 %161 to float, !dbg !35
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !35
  %164 = bitcast i32 %163 to float, !dbg !35
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !35
  %166 = bitcast i32 %165 to float, !dbg !35
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !35
  %168 = bitcast i32 %167 to float, !dbg !35
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !35
  %170 = bitcast i32 %169 to float, !dbg !35
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !35
  %172 = bitcast i32 %171 to float, !dbg !35
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = lshr i64 %59, 59, !dbg !36
  %176 = and i64 %175, 16, !dbg !36
  %177 = add i64 %176, %59, !dbg !36
  %178 = lshr i64 %60, 59, !dbg !36
  %179 = and i64 %178, 16, !dbg !36
  %180 = add i64 %179, %60, !dbg !36
  %181 = lshr i64 %62, 59, !dbg !36
  %182 = and i64 %181, 16, !dbg !36
  %183 = add i64 %182, %62, !dbg !36
  %184 = lshr i64 %63, 59, !dbg !36
  %185 = and i64 %184, 16, !dbg !36
  %186 = add i64 %185, %63, !dbg !36
  %187 = lshr i64 %65, 59, !dbg !36
  %188 = and i64 %187, 16, !dbg !36
  %189 = add i64 %188, %65, !dbg !36
  %190 = lshr i64 %66, 59, !dbg !36
  %191 = and i64 %190, 16, !dbg !36
  %192 = add i64 %191, %66, !dbg !36
  %193 = lshr i64 %68, 59, !dbg !36
  %194 = and i64 %193, 16, !dbg !36
  %195 = add i64 %194, %68, !dbg !36
  %196 = lshr i64 %69, 59, !dbg !36
  %197 = and i64 %196, 16, !dbg !36
  %198 = add i64 %197, %69, !dbg !36
  %.idx8 = shl i64 %177, 9, !dbg !37
  %199 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx8, !dbg !37
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %119, !dbg !37
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %121, !dbg !37
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %125, !dbg !37
  %.idx9 = shl i64 %180, 9, !dbg !37
  %203 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx9, !dbg !37
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %119, !dbg !37
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %121, !dbg !37
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %125, !dbg !37
  %.idx10 = shl i64 %183, 9, !dbg !37
  %207 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx10, !dbg !37
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %119, !dbg !37
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %121, !dbg !37
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %125, !dbg !37
  %.idx11 = shl i64 %186, 9, !dbg !37
  %211 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx11, !dbg !37
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %119, !dbg !37
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %121, !dbg !37
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %125, !dbg !37
  %.idx12 = shl i64 %189, 9, !dbg !37
  %215 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx12, !dbg !37
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %120, !dbg !37
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %122, !dbg !37
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %126, !dbg !37
  %.idx13 = shl i64 %192, 9, !dbg !37
  %219 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx13, !dbg !37
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %120, !dbg !37
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %122, !dbg !37
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %126, !dbg !37
  %.idx14 = shl i64 %195, 9, !dbg !37
  %223 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx14, !dbg !37
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %120, !dbg !37
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %122, !dbg !37
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %126, !dbg !37
  %.idx15 = shl i64 %198, 9, !dbg !37
  %227 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx15, !dbg !37
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %120, !dbg !37
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %122, !dbg !37
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %126, !dbg !37
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !38
  %232 = bitcast i32 %231 to float, !dbg !38
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !38
  %234 = bitcast i32 %233 to float, !dbg !38
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #1, !dbg !38
  %236 = bitcast i32 %235 to float, !dbg !38
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !38
  %238 = bitcast i32 %237 to float, !dbg !38
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !38
  %240 = bitcast i32 %239 to float, !dbg !38
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !38
  %242 = bitcast i32 %241 to float, !dbg !38
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !38
  %244 = bitcast i32 %243 to float, !dbg !38
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !38
  %246 = bitcast i32 %245 to float, !dbg !38
  %247 = fsub float %232, %160, !dbg !39
  %248 = fsub float %234, %162, !dbg !39
  %249 = fsub float %236, %164, !dbg !39
  %250 = fsub float %238, %166, !dbg !39
  %251 = fsub float %240, %168, !dbg !39
  %252 = fsub float %242, %170, !dbg !39
  %253 = fsub float %244, %172, !dbg !39
  %254 = fsub float %246, %174, !dbg !39
  %255 = fmul float %247, %76, !dbg !40
  %256 = fmul float %248, %77, !dbg !40
  %257 = fmul float %249, %78, !dbg !40
  %258 = fmul float %250, %79, !dbg !40
  %259 = fmul float %251, %85, !dbg !40
  %260 = fmul float %252, %86, !dbg !40
  %261 = fmul float %253, %87, !dbg !40
  %262 = fmul float %254, %88, !dbg !40
  %263 = fadd float %255, %160, !dbg !41
  %264 = fadd float %256, %162, !dbg !41
  %265 = fadd float %257, %164, !dbg !41
  %266 = fadd float %258, %166, !dbg !41
  %267 = fadd float %259, %168, !dbg !41
  %268 = fadd float %260, %170, !dbg !41
  %269 = fadd float %261, %172, !dbg !41
  %270 = fadd float %262, %174, !dbg !41
  %271 = sext i32 %13 to i64, !dbg !42
  %272 = getelementptr float, ptr addrspace(1) %5, i64 %271, !dbg !42
  %273 = sext i32 %15 to i64, !dbg !42
  %274 = getelementptr float, ptr addrspace(1) %5, i64 %273, !dbg !42
  %275 = bitcast float %263 to i32, !dbg !43
  %276 = bitcast float %264 to i32, !dbg !43
  %277 = bitcast float %265 to i32, !dbg !43
  %278 = bitcast float %266 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %275, i32 %276, i32 %277, i32 %278, ptr addrspace(1) %272, i1 true) #1, !dbg !43
  %279 = bitcast float %267 to i32, !dbg !43
  %280 = bitcast float %268 to i32, !dbg !43
  %281 = bitcast float %269 to i32, !dbg !43
  %282 = bitcast float %270 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %274, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4e5zyz2rbvjadzakvc7hsnhcot2llt2xq5xvu72evvovdg6pz43.py", directory: "inductor_cache/4e")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_38", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 32, scope: !7)
!29 = !DILocation(line: 39, column: 32, scope: !7)
!30 = !DILocation(line: 40, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 51, scope: !7)
!32 = !DILocation(line: 40, column: 64, scope: !7)
!33 = !DILocation(line: 40, column: 58, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 69, scope: !7)
!36 = !DILocation(line: 43, column: 35, scope: !7)
!37 = !DILocation(line: 44, column: 31, scope: !7)
!38 = !DILocation(line: 44, column: 71, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 25, scope: !7)
!43 = !DILocation(line: 48, column: 37, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
