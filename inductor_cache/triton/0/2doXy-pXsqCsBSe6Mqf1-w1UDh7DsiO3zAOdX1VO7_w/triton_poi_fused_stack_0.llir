; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_stack_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 192, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 4, !dbg !15
  %12 = srem i32 %11, 12, !dbg !16
  %13 = mul i32 %11, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %13, !dbg !17
  %.frozen35 = freeze i32 %9, !dbg !18
  %14 = sdiv i32 %.frozen35, 48, !dbg !18
  %15 = icmp slt i32 %12, 4, !dbg !19
  %16 = add nsw i32 %.decomposed, 16, !dbg !20
  %17 = shl nsw i32 %12, 2, !dbg !21
  %18 = shl i32 %14, 6, !dbg !22
  %19 = add nuw i32 %18, %16, !dbg !23
  %20 = add i32 %19, %17, !dbg !24
  %21 = sext i32 %20 to i64, !dbg !25
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !25
  %23 = and i1 %10, %15, !dbg !26
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !27
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !27
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !27
  %27 = bitcast i32 %25 to float, !dbg !27
  %28 = bitcast i32 %26 to float, !dbg !27
  %29 = add nsw i32 %.decomposed, 32, !dbg !28
  %30 = add nuw i32 %18, %29, !dbg !29
  %31 = add i32 %30, %17, !dbg !30
  %32 = sext i32 %31 to i64, !dbg !31
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !31
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !32
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !32
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !32
  %37 = bitcast i32 %35 to float, !dbg !32
  %38 = bitcast i32 %36 to float, !dbg !32
  %39 = fsub float %27, %37, !dbg !33
  %40 = fsub float %28, %38, !dbg !33
  %41 = fmul float %39, 0x3FFBB67AE0000000, !dbg !34
  %42 = fmul float %40, 0x3FFBB67AE0000000, !dbg !34
  %43 = mul i32 %14, 48, !dbg !35
  %srem.decomposed = sub i32 %.frozen35, %43, !dbg !35
  %44 = add i32 %18, %srem.decomposed, !dbg !36
  %45 = sext i32 %44 to i64, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !37
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !38
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !38
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !38
  %50 = bitcast i32 %48 to float, !dbg !38
  %51 = bitcast i32 %49 to float, !dbg !38
  %52 = fmul float %50, 2.000000e+00, !dbg !39
  %53 = fmul float %51, 2.000000e+00, !dbg !39
  %54 = fsub float %52, %27, !dbg !40
  %55 = fsub float %53, %28, !dbg !40
  %56 = fsub float %54, %37, !dbg !41
  %57 = fsub float %55, %38, !dbg !41
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i5 = icmp eq i32 %58, 0, !dbg !42
  %59 = tail call float @llvm.nvvm.fabs.ftz.f(float %56) #3, !dbg !42
  %60 = tail call float @llvm.nvvm.fabs.f(float %56) #3, !dbg !42
  %.02.i = select i1 %.not.i5, float %60, float %59, !dbg !42
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not3.i = icmp eq i32 %61, 0, !dbg !42
  %62 = tail call float @llvm.nvvm.fabs.ftz.f(float %41) #3, !dbg !42
  %63 = tail call float @llvm.nvvm.fabs.f(float %41) #3, !dbg !42
  %.03.i = select i1 %.not3.i, float %63, float %62, !dbg !42
  %64 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !42
  %65 = fcmp oeq float %.03.i, 0.000000e+00, !dbg !42
  %or.cond.i = select i1 %64, i1 %65, i1 false, !dbg !42
  br i1 %or.cond.i, label %66, label %72, !dbg !42

66:                                               ; preds = %3
  %67 = bitcast float %56 to i32, !dbg !42
  %68 = icmp slt i32 %67, 0, !dbg !42
  %69 = select i1 %68, i32 1078530011, i32 0, !dbg !42
  %70 = bitcast i32 %69 to float, !dbg !42
  %71 = tail call float @llvm.copysign.f32(float %70, float %41), !dbg !42
  br label %__nv_atan2f.exit, !dbg !42

72:                                               ; preds = %3
  %73 = fcmp oeq float %.02.i, 0x7FF0000000000000, !dbg !42
  %74 = fcmp oeq float %.03.i, 0x7FF0000000000000, !dbg !42
  %or.cond2.i = select i1 %73, i1 %74, i1 false, !dbg !42
  br i1 %or.cond2.i, label %75, label %__nv_fmaxf.exit.i, !dbg !42

75:                                               ; preds = %72
  %76 = bitcast float %56 to i32, !dbg !42
  %77 = icmp slt i32 %76, 0, !dbg !42
  %78 = select i1 %77, i32 1075235812, i32 1061752795, !dbg !42
  %79 = bitcast i32 %78 to float, !dbg !42
  %80 = tail call float @llvm.copysign.f32(float %79, float %41), !dbg !42
  br label %__nv_atan2f.exit, !dbg !42

__nv_fmaxf.exit.i:                                ; preds = %72
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not4.i = icmp eq i32 %81, 0, !dbg !42
  %82 = tail call float @llvm.nvvm.fmax.ftz.f(float %.03.i, float %.02.i) #3, !dbg !42
  %83 = tail call float @llvm.nvvm.fmax.f(float %.03.i, float %.02.i) #3, !dbg !42
  %.01.i = select i1 %.not4.i, float %83, float %82, !dbg !42
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not5.i = icmp eq i32 %84, 0, !dbg !42
  %85 = tail call float @llvm.nvvm.fmin.ftz.f(float %.03.i, float %.02.i) #3, !dbg !42
  %86 = tail call float @llvm.nvvm.fmin.f(float %.03.i, float %.02.i) #3, !dbg !42
  %.0.i6 = select i1 %.not5.i, float %86, float %85, !dbg !42
  %87 = fdiv float %.0.i6, %.01.i, !dbg !42
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not6.i = icmp eq i32 %88, 0, !dbg !42
  %89 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %87, float %87) #3, !dbg !42
  %90 = tail call float @llvm.nvvm.mul.rn.f(float %87, float %87) #3, !dbg !42
  %.04.i = select i1 %.not6.i, float %90, float %89, !dbg !42
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not7.i = icmp eq i32 %91, 0, !dbg !42
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #3, !dbg !42
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #3, !dbg !42
  %.05.i = select i1 %.not7.i, float %93, float %92, !dbg !42
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not8.i = icmp eq i32 %94, 0, !dbg !42
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %.04.i, float 0xC01A4320E0000000) #3, !dbg !42
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %.04.i, float 0xC01A4320E0000000) #3, !dbg !42
  %.06.i = select i1 %.not8.i, float %96, float %95, !dbg !42
  %97 = fmul float %.04.i, %.06.i, !dbg !42
  %98 = fmul float %87, %97, !dbg !42
  %99 = fadd float %.04.i, 0x4026ABB800000000, !dbg !42
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not9.i = icmp eq i32 %100, 0, !dbg !42
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %99, float %.04.i, float 0x403CD7AC00000000) #3, !dbg !42
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %99, float %.04.i, float 0x403CD7AC00000000) #3, !dbg !42
  %.07.i = select i1 %.not9.i, float %102, float %101, !dbg !42
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not10.i = icmp eq i32 %103, 0, !dbg !42
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.04.i, float 0x4033B25900000000) #3, !dbg !42
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.04.i, float 0x4033B25900000000) #3, !dbg !42
  %.08.i = select i1 %.not10.i, float %105, float %104, !dbg !42
  %106 = fdiv float 1.000000e+00, %.08.i, !dbg !42
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not11.i = icmp eq i32 %107, 0, !dbg !42
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %98, float %106, float %87) #3, !dbg !42
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %98, float %106, float %87) #3, !dbg !42
  %.09.i = select i1 %.not11.i, float %109, float %108, !dbg !42
  %110 = fcmp ogt float %.03.i, %.02.i, !dbg !42
  %111 = fsub float 0x3FF921FB60000000, %.09.i, !dbg !42
  %t0.0.i = select i1 %110, float %111, float %.09.i, !dbg !42
  %112 = bitcast float %56 to i32, !dbg !42
  %113 = icmp slt i32 %112, 0, !dbg !42
  %114 = fsub float 0x400921FB60000000, %t0.0.i, !dbg !42
  %t0.1.i = select i1 %113, float %114, float %t0.0.i, !dbg !42
  %115 = bitcast float %t0.1.i to i32, !dbg !42
  %116 = bitcast float %41 to i32, !dbg !42
  %117 = and i32 %116, -2147483648, !dbg !42
  %118 = or i32 %117, %115, !dbg !42
  %119 = bitcast i32 %118 to float, !dbg !42
  %120 = fadd float %.03.i, %.02.i, !dbg !42
  %121 = fcmp ord float %120, 0.000000e+00, !dbg !42
  %t0.2.i = select i1 %121, float %119, float %120, !dbg !42
  br label %__nv_atan2f.exit, !dbg !42

__nv_atan2f.exit:                                 ; preds = %66, %75, %__nv_fmaxf.exit.i
  %t0.4.i = phi float [ %71, %66 ], [ %80, %75 ], [ %t0.2.i, %__nv_fmaxf.exit.i ], !dbg !42
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i7 = icmp eq i32 %122, 0, !dbg !42
  %123 = tail call float @llvm.nvvm.fabs.ftz.f(float %57) #3, !dbg !42
  %124 = tail call float @llvm.nvvm.fabs.f(float %57) #3, !dbg !42
  %.02.i8 = select i1 %.not.i7, float %124, float %123, !dbg !42
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not3.i9 = icmp eq i32 %125, 0, !dbg !42
  %126 = tail call float @llvm.nvvm.fabs.ftz.f(float %42) #3, !dbg !42
  %127 = tail call float @llvm.nvvm.fabs.f(float %42) #3, !dbg !42
  %.03.i10 = select i1 %.not3.i9, float %127, float %126, !dbg !42
  %128 = fcmp oeq float %.02.i8, 0.000000e+00, !dbg !42
  %129 = fcmp oeq float %.03.i10, 0.000000e+00, !dbg !42
  %or.cond.i11 = select i1 %128, i1 %129, i1 false, !dbg !42
  br i1 %or.cond.i11, label %130, label %136, !dbg !42

130:                                              ; preds = %__nv_atan2f.exit
  %131 = bitcast float %57 to i32, !dbg !42
  %132 = icmp slt i32 %131, 0, !dbg !42
  %133 = select i1 %132, i32 1078530011, i32 0, !dbg !42
  %134 = bitcast i32 %133 to float, !dbg !42
  %135 = tail call float @llvm.copysign.f32(float %134, float %42), !dbg !42
  br label %__nv_atan2f.exit34, !dbg !42

136:                                              ; preds = %__nv_atan2f.exit
  %137 = fcmp oeq float %.02.i8, 0x7FF0000000000000, !dbg !42
  %138 = fcmp oeq float %.03.i10, 0x7FF0000000000000, !dbg !42
  %or.cond2.i12 = select i1 %137, i1 %138, i1 false, !dbg !42
  br i1 %or.cond2.i12, label %139, label %__nv_fmaxf.exit.i13, !dbg !42

139:                                              ; preds = %136
  %140 = bitcast float %57 to i32, !dbg !42
  %141 = icmp slt i32 %140, 0, !dbg !42
  %142 = select i1 %141, i32 1075235812, i32 1061752795, !dbg !42
  %143 = bitcast i32 %142 to float, !dbg !42
  %144 = tail call float @llvm.copysign.f32(float %143, float %42), !dbg !42
  br label %__nv_atan2f.exit34, !dbg !42

__nv_fmaxf.exit.i13:                              ; preds = %136
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not4.i14 = icmp eq i32 %145, 0, !dbg !42
  %146 = tail call float @llvm.nvvm.fmax.ftz.f(float %.03.i10, float %.02.i8) #3, !dbg !42
  %147 = tail call float @llvm.nvvm.fmax.f(float %.03.i10, float %.02.i8) #3, !dbg !42
  %.01.i15 = select i1 %.not4.i14, float %147, float %146, !dbg !42
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not5.i16 = icmp eq i32 %148, 0, !dbg !42
  %149 = tail call float @llvm.nvvm.fmin.ftz.f(float %.03.i10, float %.02.i8) #3, !dbg !42
  %150 = tail call float @llvm.nvvm.fmin.f(float %.03.i10, float %.02.i8) #3, !dbg !42
  %.0.i17 = select i1 %.not5.i16, float %150, float %149, !dbg !42
  %151 = fdiv float %.0.i17, %.01.i15, !dbg !42
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not6.i18 = icmp eq i32 %152, 0, !dbg !42
  %153 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %151, float %151) #3, !dbg !42
  %154 = tail call float @llvm.nvvm.mul.rn.f(float %151, float %151) #3, !dbg !42
  %.04.i19 = select i1 %.not6.i18, float %154, float %153, !dbg !42
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not7.i20 = icmp eq i32 %155, 0, !dbg !42
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i19, float 0xBFEA58FD40000000, float 0xC016B31060000000) #3, !dbg !42
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i19, float 0xBFEA58FD40000000, float 0xC016B31060000000) #3, !dbg !42
  %.05.i21 = select i1 %.not7.i20, float %157, float %156, !dbg !42
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not8.i22 = icmp eq i32 %158, 0, !dbg !42
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i21, float %.04.i19, float 0xC01A4320E0000000) #3, !dbg !42
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i21, float %.04.i19, float 0xC01A4320E0000000) #3, !dbg !42
  %.06.i23 = select i1 %.not8.i22, float %160, float %159, !dbg !42
  %161 = fmul float %.04.i19, %.06.i23, !dbg !42
  %162 = fmul float %151, %161, !dbg !42
  %163 = fadd float %.04.i19, 0x4026ABB800000000, !dbg !42
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not9.i24 = icmp eq i32 %164, 0, !dbg !42
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %163, float %.04.i19, float 0x403CD7AC00000000) #3, !dbg !42
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %163, float %.04.i19, float 0x403CD7AC00000000) #3, !dbg !42
  %.07.i25 = select i1 %.not9.i24, float %166, float %165, !dbg !42
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not10.i26 = icmp eq i32 %167, 0, !dbg !42
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i25, float %.04.i19, float 0x4033B25900000000) #3, !dbg !42
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i25, float %.04.i19, float 0x4033B25900000000) #3, !dbg !42
  %.08.i27 = select i1 %.not10.i26, float %169, float %168, !dbg !42
  %170 = fdiv float 1.000000e+00, %.08.i27, !dbg !42
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not11.i28 = icmp eq i32 %171, 0, !dbg !42
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %162, float %170, float %151) #3, !dbg !42
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %162, float %170, float %151) #3, !dbg !42
  %.09.i29 = select i1 %.not11.i28, float %173, float %172, !dbg !42
  %174 = fcmp ogt float %.03.i10, %.02.i8, !dbg !42
  %175 = fsub float 0x3FF921FB60000000, %.09.i29, !dbg !42
  %t0.0.i30 = select i1 %174, float %175, float %.09.i29, !dbg !42
  %176 = bitcast float %57 to i32, !dbg !42
  %177 = icmp slt i32 %176, 0, !dbg !42
  %178 = fsub float 0x400921FB60000000, %t0.0.i30, !dbg !42
  %t0.1.i31 = select i1 %177, float %178, float %t0.0.i30, !dbg !42
  %179 = bitcast float %t0.1.i31 to i32, !dbg !42
  %180 = bitcast float %42 to i32, !dbg !42
  %181 = and i32 %180, -2147483648, !dbg !42
  %182 = or i32 %181, %179, !dbg !42
  %183 = bitcast i32 %182 to float, !dbg !42
  %184 = fadd float %.02.i8, %.03.i10, !dbg !42
  %185 = fcmp ord float %184, 0.000000e+00, !dbg !42
  %t0.2.i32 = select i1 %185, float %183, float %184, !dbg !42
  br label %__nv_atan2f.exit34, !dbg !42

__nv_atan2f.exit34:                               ; preds = %130, %139, %__nv_fmaxf.exit.i13
  %t0.4.i33 = phi float [ %135, %130 ], [ %144, %139 ], [ %t0.2.i32, %__nv_fmaxf.exit.i13 ], !dbg !42
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %t0.4.i, float 0x401921FB60000000) #3, !dbg !43
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %t0.4.i33, float 0x401921FB60000000) #3, !dbg !43
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %188, 0, !dbg !43
  %189 = tail call float @llvm.nvvm.floor.ftz.f(float %186), !dbg !43
  %190 = tail call float @llvm.nvvm.floor.f(float %186), !dbg !43
  %.0.i = select i1 %.not.i, float %190, float %189, !dbg !43
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i3 = icmp eq i32 %191, 0, !dbg !43
  %192 = tail call float @llvm.nvvm.floor.ftz.f(float %187), !dbg !43
  %193 = tail call float @llvm.nvvm.floor.f(float %187), !dbg !43
  %.0.i4 = select i1 %.not.i3, float %193, float %192, !dbg !43
  %194 = fmul float %.0.i, 0x401921FB60000000, !dbg !43
  %195 = fmul float %.0.i4, 0x401921FB60000000, !dbg !43
  %196 = fsub float %t0.4.i, %194, !dbg !43
  %197 = fsub float %t0.4.i33, %195, !dbg !43
  %198 = fcmp olt float %196, 0.000000e+00, !dbg !44
  %199 = fcmp olt float %197, 0.000000e+00, !dbg !44
  %200 = fadd float %196, 0x401921FB60000000, !dbg !45
  %201 = fadd float %197, 0x401921FB60000000, !dbg !45
  %202 = select i1 %198, float %200, float %196, !dbg !46
  %203 = select i1 %199, float %201, float %197, !dbg !46
  %204 = fmul float %202, 0x3FC45F3060000000, !dbg !47
  %205 = fmul float %203, 0x3FC45F3060000000, !dbg !47
  %206 = and i32 %12, -4, !dbg !48
  %207 = icmp eq i32 %206, 4, !dbg !48
  %208 = add nsw i32 %17, -16, !dbg !49
  %209 = add i32 %18, %.decomposed, !dbg !50
  %210 = add i32 %209, %208, !dbg !51
  %211 = sext i32 %210 to i64, !dbg !52
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !52
  %213 = and i1 %10, %207, !dbg !53
  %214 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %212, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #3, !dbg !54
  %215 = extractvalue { i32, i32 } %214, 0, !dbg !54
  %216 = extractvalue { i32, i32 } %214, 1, !dbg !54
  %217 = bitcast i32 %215 to float, !dbg !54
  %218 = bitcast i32 %216 to float, !dbg !54
  %219 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #3, !dbg !55
  %220 = extractvalue { i32, i32 } %219, 0, !dbg !55
  %221 = extractvalue { i32, i32 } %219, 1, !dbg !55
  %222 = bitcast i32 %220 to float, !dbg !55
  %223 = bitcast i32 %221 to float, !dbg !55
  %224 = fcmp olt float %217, %222, !dbg !56
  %225 = fcmp olt float %218, %223, !dbg !56
  %226 = fcmp uno float %217, 0.000000e+00, !dbg !60
  %227 = fcmp uno float %218, 0.000000e+00, !dbg !60
  %228 = or i1 %226, %224, !dbg !61
  %229 = or i1 %227, %225, !dbg !61
  %230 = select i1 %228, float %217, float %222, !dbg !62
  %231 = select i1 %229, float %218, float %223, !dbg !62
  %232 = add i32 %30, %208, !dbg !63
  %233 = sext i32 %232 to i64, !dbg !64
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !64
  %235 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %234, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #3, !dbg !65
  %236 = extractvalue { i32, i32 } %235, 0, !dbg !65
  %237 = extractvalue { i32, i32 } %235, 1, !dbg !65
  %238 = bitcast i32 %236 to float, !dbg !65
  %239 = bitcast i32 %237 to float, !dbg !65
  %240 = fcmp olt float %230, %238, !dbg !66
  %241 = fcmp olt float %231, %239, !dbg !66
  %242 = fcmp uno float %230, 0.000000e+00, !dbg !68
  %243 = fcmp uno float %231, 0.000000e+00, !dbg !68
  %244 = or i1 %240, %242, !dbg !69
  %245 = or i1 %241, %243, !dbg !69
  %246 = select i1 %244, float %230, float %238, !dbg !70
  %247 = select i1 %245, float %231, float %239, !dbg !70
  %248 = add nsw i32 %.decomposed, 48, !dbg !71
  %249 = add nuw i32 %18, %248, !dbg !72
  %250 = add i32 %249, %208, !dbg !73
  %251 = sext i32 %250 to i64, !dbg !74
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !74
  %253 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %252, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #3, !dbg !75
  %254 = extractvalue { i32, i32 } %253, 0, !dbg !75
  %255 = extractvalue { i32, i32 } %253, 1, !dbg !75
  %256 = bitcast i32 %254 to float, !dbg !75
  %257 = bitcast i32 %255 to float, !dbg !75
  %258 = fcmp olt float %246, %256, !dbg !76
  %259 = fcmp olt float %247, %257, !dbg !76
  %260 = fcmp uno float %246, 0.000000e+00, !dbg !78
  %261 = fcmp uno float %247, 0.000000e+00, !dbg !78
  %262 = or i1 %258, %260, !dbg !79
  %263 = or i1 %259, %261, !dbg !79
  %264 = select i1 %262, float %246, float %256, !dbg !80
  %265 = select i1 %263, float %247, float %257, !dbg !80
  %266 = fcmp ogt float %217, %222, !dbg !81
  %267 = fcmp ogt float %218, %223, !dbg !81
  %268 = or i1 %226, %266, !dbg !83
  %269 = or i1 %227, %267, !dbg !83
  %270 = select i1 %268, float %217, float %222, !dbg !84
  %271 = select i1 %269, float %218, float %223, !dbg !84
  %272 = fcmp ogt float %270, %238, !dbg !85
  %273 = fcmp ogt float %271, %239, !dbg !85
  %274 = fcmp uno float %270, 0.000000e+00, !dbg !87
  %275 = fcmp uno float %271, 0.000000e+00, !dbg !87
  %276 = or i1 %272, %274, !dbg !88
  %277 = or i1 %273, %275, !dbg !88
  %278 = select i1 %276, float %270, float %238, !dbg !89
  %279 = select i1 %277, float %271, float %239, !dbg !89
  %280 = fcmp ogt float %278, %256, !dbg !90
  %281 = fcmp ogt float %279, %257, !dbg !90
  %282 = fcmp uno float %278, 0.000000e+00, !dbg !92
  %283 = fcmp uno float %279, 0.000000e+00, !dbg !92
  %284 = or i1 %280, %282, !dbg !93
  %285 = or i1 %281, %283, !dbg !93
  %286 = select i1 %284, float %278, float %256, !dbg !94
  %287 = select i1 %285, float %279, float %257, !dbg !94
  %288 = fadd float %286, 0x3E45798EE0000000, !dbg !95
  %289 = fadd float %287, 0x3E45798EE0000000, !dbg !95
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %288) #3, !dbg !96
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %289) #3, !dbg !96
  %292 = fsub float 1.000000e+00, %290, !dbg !97
  %293 = fsub float 1.000000e+00, %291, !dbg !97
  %294 = icmp sgt i32 %12, 7, !dbg !98
  %295 = add nsw i32 %17, -32, !dbg !99
  %296 = add i32 %209, %295, !dbg !100
  %297 = sext i32 %296 to i64, !dbg !101
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !101
  %299 = and i1 %10, %294, !dbg !102
  %300 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %298, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #3, !dbg !103
  %301 = extractvalue { i32, i32 } %300, 0, !dbg !103
  %302 = extractvalue { i32, i32 } %300, 1, !dbg !103
  %303 = bitcast i32 %301 to float, !dbg !103
  %304 = bitcast i32 %302 to float, !dbg !103
  %305 = add i32 %19, %295, !dbg !104
  %306 = sext i32 %305 to i64, !dbg !105
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !105
  %308 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %307, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #3, !dbg !106
  %309 = extractvalue { i32, i32 } %308, 0, !dbg !106
  %310 = extractvalue { i32, i32 } %308, 1, !dbg !106
  %311 = bitcast i32 %309 to float, !dbg !106
  %312 = bitcast i32 %310 to float, !dbg !106
  %313 = fcmp ogt float %303, %311, !dbg !107
  %314 = fcmp ogt float %304, %312, !dbg !107
  %315 = fcmp uno float %303, 0.000000e+00, !dbg !109
  %316 = fcmp uno float %304, 0.000000e+00, !dbg !109
  %317 = or i1 %315, %313, !dbg !110
  %318 = or i1 %316, %314, !dbg !110
  %319 = select i1 %317, float %303, float %311, !dbg !111
  %320 = select i1 %318, float %304, float %312, !dbg !111
  %321 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #3, !dbg !112
  %322 = extractvalue { i32, i32 } %321, 0, !dbg !112
  %323 = extractvalue { i32, i32 } %321, 1, !dbg !112
  %324 = bitcast i32 %322 to float, !dbg !112
  %325 = bitcast i32 %323 to float, !dbg !112
  %326 = fcmp ogt float %319, %324, !dbg !113
  %327 = fcmp ogt float %320, %325, !dbg !113
  %328 = fcmp uno float %319, 0.000000e+00, !dbg !115
  %329 = fcmp uno float %320, 0.000000e+00, !dbg !115
  %330 = or i1 %326, %328, !dbg !116
  %331 = or i1 %327, %329, !dbg !116
  %332 = select i1 %330, float %319, float %324, !dbg !117
  %333 = select i1 %331, float %320, float %325, !dbg !117
  %334 = add i32 %249, %295, !dbg !118
  %335 = sext i32 %334 to i64, !dbg !119
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !119
  %337 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %336, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #3, !dbg !120
  %338 = extractvalue { i32, i32 } %337, 0, !dbg !120
  %339 = extractvalue { i32, i32 } %337, 1, !dbg !120
  %340 = bitcast i32 %338 to float, !dbg !120
  %341 = bitcast i32 %339 to float, !dbg !120
  %342 = fcmp ogt float %332, %340, !dbg !121
  %343 = fcmp ogt float %333, %341, !dbg !121
  %344 = fcmp uno float %332, 0.000000e+00, !dbg !123
  %345 = fcmp uno float %333, 0.000000e+00, !dbg !123
  %346 = or i1 %342, %344, !dbg !124
  %347 = or i1 %343, %345, !dbg !124
  %348 = select i1 %346, float %332, float %340, !dbg !125
  %349 = select i1 %347, float %333, float %341, !dbg !125
  %350 = select i1 %294, float %348, float 0.000000e+00, !dbg !126
  %351 = select i1 %294, float %349, float 0.000000e+00, !dbg !126
  %352 = select i1 %207, float %292, float %350, !dbg !127
  %353 = select i1 %207, float %293, float %351, !dbg !127
  %354 = select i1 %15, float %204, float %352, !dbg !127
  %355 = select i1 %15, float %205, float %353, !dbg !127
  %356 = sext i32 %9 to i64, !dbg !128
  %357 = getelementptr float, ptr addrspace(1) %1, i64 %356, !dbg !128
  %358 = bitcast float %354 to i32, !dbg !129
  %359 = bitcast float %355 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %358, i32 %359, ptr addrspace(1) %357, i1 %10) #3, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmax.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmax.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmin.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmin.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.copysign.f32(float, float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpy3dtspa76vnxf7yr2srtqup3sgm6ki7rxft3ta6itk34x3l5rq.py", directory: "inductor_cache/py")
!4 = !{ptr @triton_poi_fused_stack_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_0", linkageName: "triton_poi_fused_stack_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 52, scope: !7)
!23 = !DILocation(line: 33, column: 40, scope: !7)
!24 = !DILocation(line: 33, column: 49, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 64, scope: !7)
!27 = !DILocation(line: 33, column: 57, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 40, scope: !7)
!30 = !DILocation(line: 34, column: 49, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 57, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 53, scope: !7)
!39 = !DILocation(line: 40, column: 20, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 20, scope: !7)
!42 = !DILocation(line: 43, column: 34, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 39, scope: !7)
!50 = !DILocation(line: 62, column: 36, scope: !7)
!51 = !DILocation(line: 62, column: 52, scope: !7)
!52 = !DILocation(line: 62, column: 31, scope: !7)
!53 = !DILocation(line: 62, column: 68, scope: !7)
!54 = !DILocation(line: 62, column: 60, scope: !7)
!55 = !DILocation(line: 63, column: 65, scope: !7)
!56 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 64, column: 42, scope: !7)
!60 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 65, column: 57, scope: !7)
!64 = !DILocation(line: 65, column: 31, scope: !7)
!65 = !DILocation(line: 65, column: 65, scope: !7)
!66 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !67)
!67 = !DILocation(line: 66, column: 42, scope: !7)
!68 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !67)
!69 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !67)
!70 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !67)
!71 = !DILocation(line: 67, column: 36, scope: !7)
!72 = !DILocation(line: 67, column: 41, scope: !7)
!73 = !DILocation(line: 67, column: 57, scope: !7)
!74 = !DILocation(line: 67, column: 31, scope: !7)
!75 = !DILocation(line: 67, column: 65, scope: !7)
!76 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !77)
!77 = !DILocation(line: 68, column: 42, scope: !7)
!78 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !77)
!79 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !77)
!80 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !82)
!82 = !DILocation(line: 69, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !82)
!84 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !82)
!85 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !86)
!86 = !DILocation(line: 70, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !91)
!91 = !DILocation(line: 71, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !91)
!95 = !DILocation(line: 73, column: 20, scope: !7)
!96 = !DILocation(line: 74, column: 20, scope: !7)
!97 = !DILocation(line: 76, column: 20, scope: !7)
!98 = !DILocation(line: 79, column: 20, scope: !7)
!99 = !DILocation(line: 82, column: 39, scope: !7)
!100 = !DILocation(line: 82, column: 52, scope: !7)
!101 = !DILocation(line: 82, column: 31, scope: !7)
!102 = !DILocation(line: 82, column: 68, scope: !7)
!103 = !DILocation(line: 82, column: 60, scope: !7)
!104 = !DILocation(line: 83, column: 57, scope: !7)
!105 = !DILocation(line: 83, column: 31, scope: !7)
!106 = !DILocation(line: 83, column: 65, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !108)
!108 = !DILocation(line: 84, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !108)
!112 = !DILocation(line: 85, column: 65, scope: !7)
!113 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !114)
!114 = !DILocation(line: 86, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !114)
!118 = !DILocation(line: 87, column: 57, scope: !7)
!119 = !DILocation(line: 87, column: 31, scope: !7)
!120 = !DILocation(line: 87, column: 65, scope: !7)
!121 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !122)
!122 = !DILocation(line: 88, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !122)
!126 = !DILocation(line: 90, column: 35, scope: !7)
!127 = !DILocation(line: 0, scope: !7)
!128 = !DILocation(line: 93, column: 25, scope: !7)
!129 = !DILocation(line: 93, column: 37, scope: !7)
!130 = !DILocation(line: 93, column: 4, scope: !7)
