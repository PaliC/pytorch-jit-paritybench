; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_sigmoid_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 8, !dbg !15
  %21 = and i32 %12, 252, !dbg !16
  %22 = lshr i32 %9, 2, !dbg !16
  %23 = and i32 %22, 63, !dbg !16
  %24 = or disjoint i32 %20, %21, !dbg !17
  %25 = or disjoint i32 %20, %23, !dbg !17
  %26 = or disjoint i32 %25, 64, !dbg !17
  %27 = or disjoint i32 %25, 128, !dbg !17
  %28 = or disjoint i32 %25, 192, !dbg !17
  %29 = icmp slt i32 %24, 512, !dbg !18
  %30 = icmp slt i32 %25, 512, !dbg !18
  %31 = icmp slt i32 %26, 512, !dbg !18
  %32 = icmp slt i32 %27, 512, !dbg !18
  %33 = icmp slt i32 %28, 512, !dbg !18
  %34 = sdiv i32 %14, 4096, !dbg !19
  %35 = sdiv i32 %15, 4096, !dbg !19
  %36 = sdiv i32 %16, 4096, !dbg !19
  %37 = sdiv i32 %17, 4096, !dbg !19
  %.frozen = freeze i32 %18, !dbg !19
  %38 = sdiv i32 %.frozen, 4096, !dbg !19
  %39 = mul i32 %38, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = sext i32 %14 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %15 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %16 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = sext i32 %17 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = shl i32 %14, 9, !dbg !23
  %69 = shl i32 %15, 9, !dbg !23
  %70 = shl i32 %16, 9, !dbg !23
  %71 = shl i32 %17, 9, !dbg !23
  %72 = add i32 %24, %68, !dbg !24
  %73 = add i32 %24, %69, !dbg !24
  %74 = add i32 %24, %70, !dbg !24
  %75 = add i32 %24, %71, !dbg !24
  %76 = sext i32 %72 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !25
  %78 = sext i32 %73 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !25
  %80 = sext i32 %74 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !25
  %82 = sext i32 %75 to i64, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !25
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %29) #2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %29) #2, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %29) #2, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !26
  %107 = bitcast i32 %103 to float, !dbg !26
  %108 = bitcast i32 %104 to float, !dbg !26
  %109 = bitcast i32 %105 to float, !dbg !26
  %110 = bitcast i32 %106 to float, !dbg !26
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %29) #2, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !26
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !26
  %116 = bitcast i32 %112 to float, !dbg !26
  %117 = bitcast i32 %113 to float, !dbg !26
  %118 = bitcast i32 %114 to float, !dbg !26
  %119 = bitcast i32 %115 to float, !dbg !26
  %120 = shl nsw i32 %34, 9, !dbg !27
  %121 = shl nsw i32 %35, 9, !dbg !27
  %122 = shl nsw i32 %36, 9, !dbg !27
  %123 = shl nsw i32 %37, 9, !dbg !27
  %124 = add i32 %120, %24, !dbg !28
  %125 = add i32 %24, %121, !dbg !28
  %126 = add i32 %24, %122, !dbg !28
  %127 = add i32 %24, %123, !dbg !28
  %128 = sext i32 %124 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !29
  %130 = sext i32 %125 to i64, !dbg !29
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !29
  %132 = sext i32 %126 to i64, !dbg !29
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !29
  %134 = sext i32 %127 to i64, !dbg !29
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !29
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %29) #2, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !30
  %141 = bitcast i32 %137 to float, !dbg !30
  %142 = bitcast i32 %138 to float, !dbg !30
  %143 = bitcast i32 %139 to float, !dbg !30
  %144 = bitcast i32 %140 to float, !dbg !30
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %29) #2, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !30
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = bitcast i32 %147 to float, !dbg !30
  %152 = bitcast i32 %148 to float, !dbg !30
  %153 = bitcast i32 %149 to float, !dbg !30
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 %29) #2, !dbg !30
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !30
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !30
  %159 = bitcast i32 %155 to float, !dbg !30
  %160 = bitcast i32 %156 to float, !dbg !30
  %161 = bitcast i32 %157 to float, !dbg !30
  %162 = bitcast i32 %158 to float, !dbg !30
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %29) #2, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !30
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !30
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !30
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !30
  %168 = bitcast i32 %164 to float, !dbg !30
  %169 = bitcast i32 %165 to float, !dbg !30
  %170 = bitcast i32 %166 to float, !dbg !30
  %171 = bitcast i32 %167 to float, !dbg !30
  %172 = fsub float 0.000000e+00, %52, !dbg !31
  %173 = fsub float 0.000000e+00, %57, !dbg !31
  %174 = fsub float 0.000000e+00, %62, !dbg !31
  %175 = fsub float 0.000000e+00, %67, !dbg !31
  %176 = fmul float %172, 0x3FF7154760000000, !dbg !35
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #2, !dbg !35
  %178 = fmul float %173, 0x3FF7154760000000, !dbg !35
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #2, !dbg !35
  %180 = fmul float %174, 0x3FF7154760000000, !dbg !35
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #2, !dbg !35
  %182 = fmul float %175, 0x3FF7154760000000, !dbg !35
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #2, !dbg !35
  %184 = fadd float %177, 1.000000e+00, !dbg !36
  %185 = fadd float %179, 1.000000e+00, !dbg !36
  %186 = fadd float %181, 1.000000e+00, !dbg !36
  %187 = fadd float %183, 1.000000e+00, !dbg !36
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %184) #2, !dbg !37
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %185) #2, !dbg !37
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %186) #2, !dbg !37
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %187) #2, !dbg !37
  %192 = fmul float %188, %89, !dbg !38
  %193 = fmul float %188, %90, !dbg !38
  %194 = fmul float %188, %91, !dbg !38
  %195 = fmul float %188, %92, !dbg !38
  %196 = fmul float %189, %98, !dbg !38
  %197 = fmul float %189, %99, !dbg !38
  %198 = fmul float %189, %100, !dbg !38
  %199 = fmul float %189, %101, !dbg !38
  %200 = fmul float %190, %107, !dbg !38
  %201 = fmul float %190, %108, !dbg !38
  %202 = fmul float %190, %109, !dbg !38
  %203 = fmul float %190, %110, !dbg !38
  %204 = fmul float %191, %116, !dbg !38
  %205 = fmul float %191, %117, !dbg !38
  %206 = fmul float %191, %118, !dbg !38
  %207 = fmul float %191, %119, !dbg !38
  %208 = fmul float %89, %141, !dbg !39
  %209 = fmul float %90, %142, !dbg !39
  %210 = fmul float %91, %143, !dbg !39
  %211 = fmul float %92, %144, !dbg !39
  %212 = fmul float %98, %150, !dbg !39
  %213 = fmul float %99, %151, !dbg !39
  %214 = fmul float %100, %152, !dbg !39
  %215 = fmul float %101, %153, !dbg !39
  %216 = fmul float %107, %159, !dbg !39
  %217 = fmul float %108, %160, !dbg !39
  %218 = fmul float %109, %161, !dbg !39
  %219 = fmul float %110, %162, !dbg !39
  %220 = fmul float %116, %168, !dbg !39
  %221 = fmul float %117, %169, !dbg !39
  %222 = fmul float %118, %170, !dbg !39
  %223 = fmul float %119, %171, !dbg !39
  %224 = fadd float %208, %192, !dbg !40
  %225 = fadd float %209, %193, !dbg !40
  %226 = fadd float %210, %194, !dbg !40
  %227 = fadd float %211, %195, !dbg !40
  %228 = fadd float %212, %196, !dbg !40
  %229 = fadd float %213, %197, !dbg !40
  %230 = fadd float %214, %198, !dbg !40
  %231 = fadd float %215, %199, !dbg !40
  %232 = fadd float %216, %200, !dbg !40
  %233 = fadd float %217, %201, !dbg !40
  %234 = fadd float %218, %202, !dbg !40
  %235 = fadd float %219, %203, !dbg !40
  %236 = fadd float %220, %204, !dbg !40
  %237 = fadd float %221, %205, !dbg !40
  %238 = fadd float %222, %206, !dbg !40
  %239 = fadd float %223, %207, !dbg !40
  %240 = shl i32 %25, 12, !dbg !41
  %241 = shl i32 %26, 12, !dbg !41
  %242 = shl i32 %27, 12, !dbg !41
  %243 = shl i32 %28, 12, !dbg !41
  %244 = shl i32 %38, 21, !dbg !42
  %245 = add i32 %244, %.decomposed, !dbg !43
  %246 = add i32 %245, %240, !dbg !44
  %247 = add i32 %245, %241, !dbg !44
  %248 = add i32 %245, %242, !dbg !44
  %249 = add i32 %245, %243, !dbg !44
  %250 = sext i32 %246 to i64, !dbg !45
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %250, !dbg !45
  %252 = sext i32 %247 to i64, !dbg !45
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !45
  %254 = sext i32 %248 to i64, !dbg !45
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !45
  %256 = sext i32 %249 to i64, !dbg !45
  %257 = getelementptr float, ptr addrspace(1) %3, i64 %256, !dbg !45
  %258 = shl i32 %9, 6, !dbg !46
  %259 = and i32 %258, 4032, !dbg !46
  %260 = or disjoint i32 %259, %11, !dbg !46
  %261 = and i32 %12, 1020, !dbg !46
  %262 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %259, !dbg !46
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !46
  %264 = bitcast float %224 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !46
  %265 = or disjoint i32 %260, 16, !dbg !46
  %266 = lshr i32 %265, 2, !dbg !46
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !46
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !46
  %269 = bitcast float %225 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !46
  %270 = or disjoint i32 %260, 32, !dbg !46
  %271 = lshr i32 %270, 2, !dbg !46
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !46
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !46
  %274 = bitcast float %226 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !46
  %275 = or disjoint i32 %260, 48, !dbg !46
  %276 = lshr i32 %275, 2, !dbg !46
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !46
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %275, !dbg !46
  %279 = bitcast float %227 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !46
  %280 = or disjoint i32 %260, 4, !dbg !46
  %281 = getelementptr float, ptr addrspace(3) %262, i32 %280, !dbg !46
  %282 = bitcast float %228 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !46
  %283 = or disjoint i32 %260, 20, !dbg !46
  %284 = lshr i32 %283, 2, !dbg !46
  %285 = and i32 %284, 1012, !dbg !46
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !46
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %283, !dbg !46
  %288 = bitcast float %229 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #2, !dbg !46
  %289 = or disjoint i32 %260, 36, !dbg !46
  %290 = lshr i32 %289, 2, !dbg !46
  %291 = and i32 %290, 1016, !dbg !46
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %291, !dbg !46
  %293 = getelementptr float, ptr addrspace(3) %292, i32 %289, !dbg !46
  %294 = bitcast float %230 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #2, !dbg !46
  %295 = or disjoint i32 %260, 52, !dbg !46
  %296 = lshr i32 %295, 2, !dbg !46
  %297 = and i32 %296, 1020, !dbg !46
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !46
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %295, !dbg !46
  %300 = bitcast float %231 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !46
  %301 = or disjoint i32 %260, 8, !dbg !46
  %302 = getelementptr float, ptr addrspace(3) %262, i32 %301, !dbg !46
  %303 = bitcast float %232 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #2, !dbg !46
  %304 = or disjoint i32 %260, 24, !dbg !46
  %305 = lshr i32 %304, 2, !dbg !46
  %306 = and i32 %305, 1012, !dbg !46
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %306, !dbg !46
  %308 = getelementptr float, ptr addrspace(3) %307, i32 %304, !dbg !46
  %309 = bitcast float %233 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #2, !dbg !46
  %310 = or disjoint i32 %260, 40, !dbg !46
  %311 = lshr i32 %310, 2, !dbg !46
  %312 = and i32 %311, 1016, !dbg !46
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %312, !dbg !46
  %314 = getelementptr float, ptr addrspace(3) %313, i32 %310, !dbg !46
  %315 = bitcast float %234 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #2, !dbg !46
  %316 = or disjoint i32 %260, 56, !dbg !46
  %317 = lshr i32 %316, 2, !dbg !46
  %318 = and i32 %317, 1020, !dbg !46
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i32 %318, !dbg !46
  %320 = getelementptr float, ptr addrspace(3) %319, i32 %316, !dbg !46
  %321 = bitcast float %235 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #2, !dbg !46
  %322 = or disjoint i32 %260, 12, !dbg !46
  %323 = getelementptr float, ptr addrspace(3) %262, i32 %322, !dbg !46
  %324 = bitcast float %236 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #2, !dbg !46
  %325 = or disjoint i32 %260, 28, !dbg !46
  %326 = lshr i32 %325, 2, !dbg !46
  %327 = and i32 %326, 1012, !dbg !46
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !46
  %329 = getelementptr float, ptr addrspace(3) %328, i32 %325, !dbg !46
  %330 = bitcast float %237 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #2, !dbg !46
  %331 = or disjoint i32 %260, 44, !dbg !46
  %332 = lshr i32 %331, 2, !dbg !46
  %333 = and i32 %332, 1016, !dbg !46
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i32 %333, !dbg !46
  %335 = getelementptr float, ptr addrspace(3) %334, i32 %331, !dbg !46
  %336 = bitcast float %238 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #2, !dbg !46
  %337 = or disjoint i32 %260, 60, !dbg !46
  %338 = lshr i32 %337, 2, !dbg !46
  %339 = and i32 %338, 1020, !dbg !46
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i32 %339, !dbg !46
  %341 = getelementptr float, ptr addrspace(3) %340, i32 %337, !dbg !46
  %342 = bitcast float %239 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %343 = and i32 %9, 252, !dbg !46
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !46
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %261, !dbg !46
  %346 = or disjoint i32 %261, 1024, !dbg !46
  %347 = lshr exact i32 %346, 2, !dbg !46
  %348 = and i32 %347, 508, !dbg !46
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !46
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %346, !dbg !46
  %351 = load <4 x i32>, ptr addrspace(3) %350, align 16, !dbg !46
  %352 = or disjoint i32 %261, 2048, !dbg !46
  %353 = lshr exact i32 %352, 2, !dbg !46
  %354 = and i32 %353, 764, !dbg !46
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !46
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %352, !dbg !46
  %357 = load <4 x i32>, ptr addrspace(3) %356, align 16, !dbg !46
  %358 = or disjoint i32 %261, 3072, !dbg !46
  %359 = lshr exact i32 %358, 2, !dbg !46
  %360 = and i32 %359, 1020, !dbg !46
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %360, !dbg !46
  %362 = getelementptr inbounds float, ptr addrspace(3) %361, i32 %358, !dbg !46
  %363 = load <4 x i32>, ptr addrspace(3) %362, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %345, align 16, !dbg !46
  %364 = getelementptr inbounds i8, ptr addrspace(3) %345, i32 4, !dbg !46
  %.extract19 = load i32, ptr addrspace(3) %364, align 4, !dbg !46
  %365 = getelementptr inbounds i8, ptr addrspace(3) %345, i32 8, !dbg !46
  %.extract20 = load i32, ptr addrspace(3) %365, align 8, !dbg !46
  %366 = getelementptr inbounds i8, ptr addrspace(3) %345, i32 12, !dbg !46
  %.extract21 = load i32, ptr addrspace(3) %366, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %251, i1 %30) #2, !dbg !46
  %.extract22 = extractelement <4 x i32> %351, i64 0, !dbg !46
  %.extract23 = extractelement <4 x i32> %351, i64 1, !dbg !46
  %.extract24 = extractelement <4 x i32> %351, i64 2, !dbg !46
  %.extract25 = extractelement <4 x i32> %351, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %253, i1 %31) #2, !dbg !46
  %.extract26 = extractelement <4 x i32> %357, i64 0, !dbg !46
  %.extract27 = extractelement <4 x i32> %357, i64 1, !dbg !46
  %.extract28 = extractelement <4 x i32> %357, i64 2, !dbg !46
  %.extract29 = extractelement <4 x i32> %357, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %255, i1 %32) #2, !dbg !46
  %.extract30 = extractelement <4 x i32> %363, i64 0, !dbg !46
  %.extract31 = extractelement <4 x i32> %363, i64 1, !dbg !46
  %.extract32 = extractelement <4 x i32> %363, i64 2, !dbg !46
  %.extract33 = extractelement <4 x i32> %363, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %257, i1 %33) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_7", linkageName: "triton_poi_fused_add_mul_sigmoid_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 39, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 35, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 35, scope: !7)
!42 = !DILocation(line: 39, column: 48, scope: !7)
!43 = !DILocation(line: 39, column: 30, scope: !7)
!44 = !DILocation(line: 39, column: 40, scope: !7)
!45 = !DILocation(line: 39, column: 25, scope: !7)
!46 = !DILocation(line: 39, column: 59, scope: !7)
!47 = !DILocation(line: 39, column: 4, scope: !7)
