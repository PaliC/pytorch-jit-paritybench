; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = and i32 %16, 252, !dbg !12
  %18 = or disjoint i32 %10, %12, !dbg !13
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %15, !dbg !13
  %21 = or disjoint i32 %10, %17, !dbg !13
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = icmp slt i32 %21, 256, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 2, !dbg !16
  %28 = lshr i32 %11, 6, !dbg !17
  %.lobit = and i32 %28, 1, !dbg !17
  %29 = or disjoint i32 %.lobit, 2, !dbg !17
  %30 = or disjoint i32 %27, %.lobit, !dbg !18
  %31 = or disjoint i32 %27, %29, !dbg !18
  %32 = srem i32 %20, 64, !dbg !19
  %.frozen = freeze i32 %21, !dbg !20
  %33 = sdiv i32 %.frozen, 64, !dbg !20
  %34 = mul i32 %33, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %18, 12, !dbg !21
  %36 = shl i32 %19, 12, !dbg !21
  %37 = add i32 %35, %27, !dbg !22
  %38 = add i32 %36, %27, !dbg !22
  %39 = sext i32 %37 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %38 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %23) #2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = and i32 %16, 508, !dbg !24
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !24
  %63 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !24
  %64 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 1040, !dbg !24
  %65 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !24
  %66 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 2080, !dbg !24
  %67 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !24
  %68 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 3120, !dbg !24
  %69 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !24
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !24
  %71 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !24
  %72 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 1552, !dbg !24
  %73 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !24
  %74 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 2592, !dbg !24
  %75 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !24
  %76 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 3632, !dbg !24
  %77 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %78 = lshr i32 %16, 6, !dbg !24
  %79 = and i32 %78, 4, !dbg !24
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !24
  %81 = getelementptr inbounds float, ptr addrspace(3) %80, i32 %61, !dbg !24
  %82 = load float, ptr addrspace(3) %81, align 16, !dbg !24
  %83 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 4, !dbg !24
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !24
  %85 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 8, !dbg !24
  %86 = load float, ptr addrspace(3) %85, align 8, !dbg !24
  %87 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 12, !dbg !24
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %89 = or disjoint i32 %61, 512, !dbg !24
  %90 = lshr i32 %89, 6, !dbg !24
  %91 = and i32 %90, 12, !dbg !24
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !24
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %89, !dbg !24
  %94 = load float, ptr addrspace(3) %93, align 16, !dbg !24
  %95 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 4, !dbg !24
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !24
  %97 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 8, !dbg !24
  %98 = load float, ptr addrspace(3) %97, align 8, !dbg !24
  %99 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 12, !dbg !24
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !24
  %101 = sext i32 %32 to i64, !dbg !25
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !25
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %102, i1 %24) #2, !dbg !26
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !26
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !26
  %106 = shl i32 %30, 6, !dbg !27
  %107 = shl i32 %31, 6, !dbg !27
  %108 = shl i32 %33, 18, !dbg !28
  %109 = add i32 %108, %.decomposed, !dbg !29
  %110 = add i32 %109, %106, !dbg !30
  %111 = add i32 %109, %107, !dbg !30
  %112 = sext i32 %110 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !31
  %114 = sext i32 %111 to i64, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !31
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %25) #2, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !32
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !32
  %121 = bitcast i32 %117 to float, !dbg !32
  %122 = bitcast i32 %118 to float, !dbg !32
  %123 = bitcast i32 %119 to float, !dbg !32
  %124 = bitcast i32 %120 to float, !dbg !32
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %25) #2, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !32
  %130 = bitcast i32 %126 to float, !dbg !32
  %131 = bitcast i32 %127 to float, !dbg !32
  %132 = bitcast i32 %128 to float, !dbg !32
  %133 = bitcast i32 %129 to float, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !33
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %134, i1 %24) #2, !dbg !34
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !34
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !35
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %138, i32 %104, i32 %105, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !35
  %140 = load float, ptr addrspace(3) %139, align 16, !dbg !35
  %141 = getelementptr inbounds i8, ptr addrspace(3) %139, i32 4, !dbg !35
  %142 = load float, ptr addrspace(3) %141, align 4, !dbg !35
  %143 = getelementptr inbounds i8, ptr addrspace(3) %139, i32 8, !dbg !35
  %144 = load float, ptr addrspace(3) %143, align 8, !dbg !35
  %145 = getelementptr inbounds i8, ptr addrspace(3) %139, i32 12, !dbg !35
  %146 = load float, ptr addrspace(3) %145, align 4, !dbg !35
  %147 = fmul float %140, %121, !dbg !35
  %148 = fmul float %142, %122, !dbg !35
  %149 = fmul float %144, %123, !dbg !35
  %150 = fmul float %146, %124, !dbg !35
  %151 = fmul float %140, %130, !dbg !35
  %152 = fmul float %142, %131, !dbg !35
  %153 = fmul float %144, %132, !dbg !35
  %154 = fmul float %146, %133, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %155 = shl i32 %11, 4, !dbg !35
  %156 = and i32 %155, 1008, !dbg !35
  %157 = or disjoint i32 %156, %.lobit, !dbg !35
  %158 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %156, !dbg !35
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %157, !dbg !35
  %160 = bitcast float %147 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !35
  %161 = or disjoint i32 %157, 4, !dbg !35
  %162 = lshr i32 %161, 2, !dbg !35
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !35
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !35
  %165 = bitcast float %148 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !35
  %166 = or disjoint i32 %157, 8, !dbg !35
  %167 = lshr i32 %166, 2, !dbg !35
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !35
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !35
  %170 = bitcast float %149 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !35
  %171 = or disjoint i32 %157, 12, !dbg !35
  %172 = lshr i32 %171, 2, !dbg !35
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !35
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !35
  %175 = bitcast float %150 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !35
  %176 = or disjoint i32 %157, 2, !dbg !35
  %177 = getelementptr float, ptr addrspace(3) %158, i32 %176, !dbg !35
  %178 = bitcast float %151 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !35
  %179 = or disjoint i32 %157, 6, !dbg !35
  %180 = lshr i32 %179, 2, !dbg !35
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !35
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %179, !dbg !35
  %183 = bitcast float %152 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !35
  %184 = or disjoint i32 %157, 10, !dbg !35
  %185 = lshr i32 %184, 2, !dbg !35
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !35
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !35
  %188 = bitcast float %153 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !35
  %189 = or disjoint i32 %157, 14, !dbg !35
  %190 = lshr i32 %189, 2, !dbg !35
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !35
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !35
  %193 = bitcast float %154 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %194 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %61, !dbg !35
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %61, !dbg !35
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !35
  %197 = or disjoint i32 %61, 1, !dbg !35
  %198 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %197, !dbg !35
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !35
  %200 = or disjoint i32 %61, 2, !dbg !35
  %201 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %200, !dbg !35
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !35
  %203 = or disjoint i32 %61, 3, !dbg !35
  %204 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %203, !dbg !35
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !35
  %206 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %89, !dbg !35
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %89, !dbg !35
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !35
  %209 = or disjoint i32 %61, 513, !dbg !35
  %210 = lshr i32 %209, 2, !dbg !35
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !35
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %209, !dbg !35
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !35
  %214 = or disjoint i32 %61, 514, !dbg !35
  %215 = lshr i32 %214, 2, !dbg !35
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !35
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !35
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !35
  %219 = or disjoint i32 %61, 515, !dbg !35
  %220 = lshr i32 %219, 2, !dbg !35
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !35
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %219, !dbg !35
  %223 = load float, ptr addrspace(3) %222, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %.idx = shl nuw nsw i32 %15, 3, !dbg !36
  %224 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !36
  %225 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !36
  %226 = shl nuw nsw i32 %15, 1, !dbg !36
  %227 = or disjoint i32 %226, 2, !dbg !36
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !36
  %229 = insertelement <1 x i32> poison, i32 %137, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %.idx13 = shl nuw nsw i32 %12, 3, !dbg !36
  %230 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !36
  %231 = load float, ptr addrspace(3) %230, align 8, !dbg !36
  %.idx14 = shl nuw nsw i32 %13, 3, !dbg !36
  %232 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !36
  %233 = load float, ptr addrspace(3) %232, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %138, i32 %136, i32 %137, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %234 = load float, ptr addrspace(3) %139, align 16, !dbg !36
  %235 = load float, ptr addrspace(3) %141, align 4, !dbg !36
  %236 = load float, ptr addrspace(3) %143, align 8, !dbg !36
  %237 = load float, ptr addrspace(3) %145, align 4, !dbg !36
  %238 = fadd float %196, %231, !dbg !37
  %239 = fadd float %199, %231, !dbg !37
  %240 = fadd float %202, %231, !dbg !37
  %241 = fadd float %205, %231, !dbg !37
  %242 = fadd float %208, %233, !dbg !37
  %243 = fadd float %213, %233, !dbg !37
  %244 = fadd float %218, %233, !dbg !37
  %245 = fadd float %223, %233, !dbg !37
  %246 = fadd float %147, %234, !dbg !37
  %247 = fadd float %148, %235, !dbg !37
  %248 = fadd float %149, %236, !dbg !37
  %249 = fadd float %150, %237, !dbg !37
  %250 = fadd float %151, %234, !dbg !37
  %251 = fadd float %152, %235, !dbg !37
  %252 = fadd float %153, %236, !dbg !37
  %253 = fadd float %154, %237, !dbg !37
  %254 = fadd float %238, %48, !dbg !36
  %255 = fadd float %239, %49, !dbg !36
  %256 = fadd float %240, %50, !dbg !36
  %257 = fadd float %241, %51, !dbg !36
  %258 = fadd float %242, %57, !dbg !36
  %259 = fadd float %243, %58, !dbg !36
  %260 = fadd float %244, %59, !dbg !36
  %261 = fadd float %245, %60, !dbg !36
  %262 = fadd float %82, %246, !dbg !36
  %263 = fadd float %84, %247, !dbg !36
  %264 = fadd float %86, %248, !dbg !36
  %265 = fadd float %88, %249, !dbg !36
  %266 = fadd float %94, %250, !dbg !36
  %267 = fadd float %96, %251, !dbg !36
  %268 = fadd float %98, %252, !dbg !36
  %269 = fadd float %100, %253, !dbg !36
  %270 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !38
  %271 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !38
  %272 = bitcast float %254 to i32, !dbg !39
  %273 = bitcast float %255 to i32, !dbg !39
  %274 = bitcast float %256 to i32, !dbg !39
  %275 = bitcast float %257 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %272, i32 %273, i32 %274, i32 %275, ptr addrspace(1) %270, i1 %22) #2, !dbg !39
  %276 = bitcast float %258 to i32, !dbg !39
  %277 = bitcast float %259 to i32, !dbg !39
  %278 = bitcast float %260 to i32, !dbg !39
  %279 = bitcast float %261 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %276, i32 %277, i32 %278, i32 %279, ptr addrspace(1) %271, i1 %23) #2, !dbg !39
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !40
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !40
  %282 = bitcast float %262 to i32, !dbg !41
  %283 = bitcast float %263 to i32, !dbg !41
  %284 = bitcast float %264 to i32, !dbg !41
  %285 = bitcast float %265 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %282, i32 %283, i32 %284, i32 %285, ptr addrspace(1) %280, i1 %25) #2, !dbg !41
  %286 = bitcast float %266 to i32, !dbg !41
  %287 = bitcast float %267 to i32, !dbg !41
  %288 = bitcast float %268 to i32, !dbg !41
  %289 = bitcast float %269 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %281, i1 %25) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypkicl3pvgg3zxdqen46p3jyav2kym5ooq3nx6ylg5qfk6d4ev6.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_12", linkageName: "triton_poi_fused_add_convolution_mul_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 38, scope: !7)
!28 = !DILocation(line: 34, column: 50, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 43, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 55, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 46, scope: !7)
!40 = !DILocation(line: 40, column: 25, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
