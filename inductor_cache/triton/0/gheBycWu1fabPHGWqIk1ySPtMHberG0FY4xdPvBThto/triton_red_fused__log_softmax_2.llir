; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__log_softmax_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 16, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = sdiv i32 %6, 4, !dbg !13
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %18 = bitcast i32 %17 to float, !dbg !15
  %19 = mul i32 %6, 8032, !dbg !16
  %20 = add i32 %10, %19, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = fsub float %28, %18, !dbg !20
  %33 = fsub float %29, %18, !dbg !20
  %34 = fsub float %30, %18, !dbg !20
  %35 = fsub float %31, %18, !dbg !20
  %36 = fmul float %32, 0x3FF7154760000000, !dbg !21
  %37 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %36) #3, !dbg !21
  %38 = fmul float %33, 0x3FF7154760000000, !dbg !21
  %39 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %38) #3, !dbg !21
  %40 = fmul float %34, 0x3FF7154760000000, !dbg !21
  %41 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %40) #3, !dbg !21
  %42 = fmul float %35, 0x3FF7154760000000, !dbg !21
  %43 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %42) #3, !dbg !21
  %44 = fadd float %37, 0.000000e+00, !dbg !22
  %45 = fadd float %39, 0.000000e+00, !dbg !22
  %46 = fadd float %41, 0.000000e+00, !dbg !22
  %47 = fadd float %43, 0.000000e+00, !dbg !22
  %48 = or disjoint i32 %10, 2048, !dbg !23
  %49 = add i32 %48, %19, !dbg !17
  %50 = sext i32 %49 to i64, !dbg !18
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !18
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !19
  %57 = bitcast i32 %53 to float, !dbg !19
  %58 = bitcast i32 %54 to float, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = bitcast i32 %56 to float, !dbg !19
  %61 = fsub float %57, %18, !dbg !20
  %62 = fsub float %58, %18, !dbg !20
  %63 = fsub float %59, %18, !dbg !20
  %64 = fsub float %60, %18, !dbg !20
  %65 = fmul float %61, 0x3FF7154760000000, !dbg !21
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #3, !dbg !21
  %67 = fmul float %62, 0x3FF7154760000000, !dbg !21
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #3, !dbg !21
  %69 = fmul float %63, 0x3FF7154760000000, !dbg !21
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #3, !dbg !21
  %71 = fmul float %64, 0x3FF7154760000000, !dbg !21
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #3, !dbg !21
  %73 = fadd float %44, %66, !dbg !22
  %74 = fadd float %45, %68, !dbg !22
  %75 = fadd float %46, %70, !dbg !22
  %76 = fadd float %47, %72, !dbg !22
  %77 = or disjoint i32 %10, 4096, !dbg !23
  %78 = add i32 %77, %19, !dbg !17
  %79 = sext i32 %78 to i64, !dbg !18
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !18
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !19
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !19
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !19
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !19
  %86 = bitcast i32 %82 to float, !dbg !19
  %87 = bitcast i32 %83 to float, !dbg !19
  %88 = bitcast i32 %84 to float, !dbg !19
  %89 = bitcast i32 %85 to float, !dbg !19
  %90 = fsub float %86, %18, !dbg !20
  %91 = fsub float %87, %18, !dbg !20
  %92 = fsub float %88, %18, !dbg !20
  %93 = fsub float %89, %18, !dbg !20
  %94 = fmul float %90, 0x3FF7154760000000, !dbg !21
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #3, !dbg !21
  %96 = fmul float %91, 0x3FF7154760000000, !dbg !21
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #3, !dbg !21
  %98 = fmul float %92, 0x3FF7154760000000, !dbg !21
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #3, !dbg !21
  %100 = fmul float %93, 0x3FF7154760000000, !dbg !21
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #3, !dbg !21
  %102 = fadd float %73, %95, !dbg !22
  %103 = fadd float %74, %97, !dbg !22
  %104 = fadd float %75, %99, !dbg !22
  %105 = fadd float %76, %101, !dbg !22
  %106 = select i1 %7, float %102, float 0.000000e+00, !dbg !24
  %107 = select i1 %7, float %103, float 0.000000e+00, !dbg !24
  %108 = select i1 %7, float %104, float 0.000000e+00, !dbg !24
  %109 = select i1 %7, float %105, float 0.000000e+00, !dbg !24
  %110 = or disjoint i32 %10, 6144, !dbg !23
  %111 = icmp samesign ult i32 %110, 8032, !dbg !25
  %112 = add i32 %110, %19, !dbg !17
  %113 = sext i32 %112 to i64, !dbg !18
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !18
  %115 = and i1 %7, %111, !dbg !26
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #3, !dbg !19
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !19
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !19
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !19
  %121 = bitcast i32 %117 to float, !dbg !19
  %122 = bitcast i32 %118 to float, !dbg !19
  %123 = bitcast i32 %119 to float, !dbg !19
  %124 = bitcast i32 %120 to float, !dbg !19
  %125 = fsub float %121, %18, !dbg !20
  %126 = fsub float %122, %18, !dbg !20
  %127 = fsub float %123, %18, !dbg !20
  %128 = fsub float %124, %18, !dbg !20
  %129 = fmul float %125, 0x3FF7154760000000, !dbg !21
  %130 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %129) #3, !dbg !21
  %131 = fmul float %126, 0x3FF7154760000000, !dbg !21
  %132 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %131) #3, !dbg !21
  %133 = fmul float %127, 0x3FF7154760000000, !dbg !21
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #3, !dbg !21
  %135 = fmul float %128, 0x3FF7154760000000, !dbg !21
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #3, !dbg !21
  %137 = fadd float %106, %130, !dbg !22
  %138 = fadd float %107, %132, !dbg !22
  %139 = fadd float %108, %134, !dbg !22
  %140 = fadd float %109, %136, !dbg !22
  %141 = select i1 %115, float %137, float %106, !dbg !24
  %142 = select i1 %115, float %138, float %107, !dbg !24
  %143 = select i1 %115, float %139, float %108, !dbg !24
  %144 = select i1 %115, float %140, float %109, !dbg !24
  %145 = lshr i32 %8, 5, !dbg !12
  %146 = and i32 %8, 31, !dbg !12
  %147 = fadd float %141, %142, !dbg !27
  %148 = fadd float %143, %147, !dbg !27
  %149 = fadd float %144, %148, !dbg !27
  %150 = bitcast float %149 to i32, !dbg !32
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 16, i32 31), !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = fadd float %149, %152, !dbg !27
  %154 = bitcast float %153 to i32, !dbg !32
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = fadd float %153, %156, !dbg !27
  %158 = bitcast float %157 to i32, !dbg !32
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 4, i32 31), !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = fadd float %157, %160, !dbg !27
  %162 = bitcast float %161 to i32, !dbg !32
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = fadd float %161, %164, !dbg !27
  %166 = bitcast float %165 to i32, !dbg !32
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !32
  %168 = bitcast i32 %167 to float, !dbg !32
  %169 = fadd float %165, %168, !dbg !27
  %170 = icmp eq i32 %146, 0, !dbg !32
  %171 = and i32 %145, 15, !dbg !32
  %172 = zext nneg i32 %171 to i64, !dbg !32
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %172, !dbg !32
  %174 = bitcast float %169 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 %170) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %175 = icmp slt i32 %8, 16, !dbg !32
  %176 = sext i32 %8 to i64, !dbg !32
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !32
  %178 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %177, i1 %175) #3, !dbg !32
  %179 = bitcast i32 %178 to float, !dbg !32
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 8, i32 31), !dbg !32
  %181 = bitcast i32 %180 to float, !dbg !32
  %182 = fadd float %179, %181, !dbg !27
  %183 = bitcast float %182 to i32, !dbg !32
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !32
  %185 = bitcast i32 %184 to float, !dbg !32
  %186 = fadd float %182, %185, !dbg !27
  %187 = bitcast float %186 to i32, !dbg !32
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !32
  %189 = bitcast i32 %188 to float, !dbg !32
  %190 = fadd float %186, %189, !dbg !27
  %191 = bitcast float %190 to i32, !dbg !32
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !32
  %193 = bitcast i32 %192 to float, !dbg !32
  %194 = fadd float %190, %193, !dbg !27
  %195 = and i32 %8, 15, !dbg !32
  %196 = icmp eq i32 %195, 0, !dbg !32
  %197 = and i1 %175, %196, !dbg !32
  %198 = bitcast float %194 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %198, i1 %197) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %199 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %200 = sext i32 %6 to i64, !dbg !33
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %200, !dbg !33
  %urem = and i32 %8, 511, !dbg !34
  %202 = icmp eq i32 %urem, 0, !dbg !34
  %203 = and i1 %202, %7, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %201, i1 %203) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgihnn2dfjlggohq4qkjk2tbe4k7widahwckg7ppwcrenb72c77s.py", directory: "inductor_cache/gi")
!4 = !{ptr @triton_red_fused__log_softmax_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__log_softmax_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__log_softmax_2", linkageName: "triton_red_fused__log_softmax_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 28, column: 30, scope: !7)
!15 = !DILocation(line: 28, column: 35, scope: !7)
!16 = !DILocation(line: 34, column: 44, scope: !7)
!17 = !DILocation(line: 34, column: 39, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 49, scope: !7)
!20 = !DILocation(line: 35, column: 22, scope: !7)
!21 = !DILocation(line: 36, column: 27, scope: !7)
!22 = !DILocation(line: 38, column: 23, scope: !7)
!23 = !DILocation(line: 31, column: 27, scope: !7)
!24 = !DILocation(line: 39, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 25, scope: !7)
!26 = !DILocation(line: 34, column: 57, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 40, column: 25, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 41, column: 25, scope: !7)
!34 = !DILocation(line: 41, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 4, scope: !7)
