; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = and i32 %9, 31, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = shl i32 %9, 2, !dbg !15
  %18 = and i32 %17, 12, !dbg !15
  %19 = sdiv i32 %13, 16, !dbg !16
  %20 = sext i32 %13 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = sext i32 %14 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !18
  %30 = bitcast i32 %29 to float, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = shl nsw i32 %19, 4, !dbg !20
  %34 = or disjoint i32 %33, %18, !dbg !21
  %35 = sext i32 %34 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = fadd float %28, %32, !dbg !24
  %47 = fadd float %30, %32, !dbg !24
  %48 = fmul float %46, %42, !dbg !25
  %49 = fmul float %46, %43, !dbg !25
  %50 = fmul float %46, %44, !dbg !25
  %51 = fmul float %46, %45, !dbg !25
  %52 = select i1 %15, float %48, float 0xFFF0000000000000, !dbg !26
  %53 = select i1 %15, float %49, float 0xFFF0000000000000, !dbg !26
  %54 = select i1 %15, float %50, float 0xFFF0000000000000, !dbg !26
  %55 = select i1 %15, float %51, float 0xFFF0000000000000, !dbg !26
  %56 = fcmp ogt float %52, %53, !dbg !27
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !32
  %58 = or i1 %56, %57, !dbg !33
  %59 = select i1 %58, float %52, float %53, !dbg !34
  %60 = fcmp ogt float %59, %54, !dbg !27
  %61 = fcmp uno float %59, 0.000000e+00, !dbg !32
  %62 = or i1 %60, %61, !dbg !33
  %63 = select i1 %62, float %59, float %54, !dbg !34
  %64 = fcmp ogt float %63, %55, !dbg !27
  %65 = fcmp uno float %63, 0.000000e+00, !dbg !32
  %66 = or i1 %64, %65, !dbg !33
  %67 = select i1 %66, float %63, float %55, !dbg !34
  %68 = bitcast float %67 to i32, !dbg !35
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !35
  %70 = bitcast i32 %69 to float, !dbg !35
  %71 = fcmp ogt float %67, %70, !dbg !27
  %72 = fcmp uno float %67, 0.000000e+00, !dbg !32
  %73 = or i1 %71, %72, !dbg !33
  %74 = select i1 %73, float %67, float %70, !dbg !34
  %75 = bitcast float %74 to i32, !dbg !35
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !35
  %77 = bitcast i32 %76 to float, !dbg !35
  %78 = fcmp ogt float %74, %77, !dbg !27
  %79 = fcmp uno float %74, 0.000000e+00, !dbg !32
  %80 = or i1 %78, %79, !dbg !33
  %81 = select i1 %80, float %74, float %77, !dbg !34
  %82 = fsub float %48, %81, !dbg !36
  %83 = fsub float %49, %81, !dbg !36
  %84 = fsub float %50, %81, !dbg !36
  %85 = fsub float %51, %81, !dbg !36
  %86 = fmul float %82, 0x3FF7154760000000, !dbg !37
  %87 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %86) #3, !dbg !37
  %88 = fmul float %83, 0x3FF7154760000000, !dbg !37
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #3, !dbg !37
  %90 = fmul float %84, 0x3FF7154760000000, !dbg !37
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #3, !dbg !37
  %92 = fmul float %85, 0x3FF7154760000000, !dbg !37
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #3, !dbg !37
  %94 = fadd float %87, %89, !dbg !38
  %95 = fadd float %94, %91, !dbg !38
  %96 = fadd float %95, %93, !dbg !38
  %97 = select i1 %15, float %96, float 0.000000e+00, !dbg !38
  %98 = bitcast float %97 to i32, !dbg !43
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = fadd float %97, %100, !dbg !38
  %102 = bitcast float %101 to i32, !dbg !43
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = fadd float %101, %104, !dbg !38
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %105) #3, !dbg !44
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %105) #3, !dbg !44
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %105) #3, !dbg !44
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %105) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %110 = and i32 %9, 96, !dbg !46
  %111 = icmp eq i32 %110, 0, !dbg !46
  %112 = bitcast float %47 to i32, !dbg !46
  %113 = and i1 %111, %16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %23, i1 %113) #3, !dbg !46
  %114 = shl i32 %13, 4, !dbg !47
  %115 = or disjoint i32 %114, %18, !dbg !48
  %116 = sext i32 %115 to i64, !dbg !49
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !49
  %118 = bitcast float %106 to i32, !dbg !50
  %119 = bitcast float %107 to i32, !dbg !50
  %120 = bitcast float %108 to i32, !dbg !50
  %121 = bitcast float %109 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %118, i32 %119, i32 %120, i32 %121, ptr addrspace(1) %117, i1 %15) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6uc6nga7pn375zg5insaarlpkmnzoy6pphieb5xk63qzvu2eexd.py", directory: "inductor_cache/6u")
!4 = !{ptr @triton_per_fused__softmax_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_convolution_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_convolution_2", linkageName: "triton_per_fused__softmax_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 38, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 43, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 41, column: 34, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 42, column: 39, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 131, column: 29, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 48, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 4, scope: !7)
!46 = !DILocation(line: 51, column: 39, scope: !7)
!47 = !DILocation(line: 52, column: 33, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 52, column: 4, scope: !7)
