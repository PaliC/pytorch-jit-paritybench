; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_mul_sub_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %18, !dbg !13
  %24 = icmp slt i32 %19, 768, !dbg !14
  %25 = icmp slt i32 %20, 768, !dbg !14
  %26 = icmp slt i32 %21, 768, !dbg !14
  %27 = icmp slt i32 %22, 768, !dbg !14
  %28 = icmp slt i32 %23, 768, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = or disjoint i32 %30, %18, !dbg !17
  %32 = or disjoint i32 %30, %13, !dbg !17
  %33 = or disjoint i32 %30, %14, !dbg !17
  %34 = or disjoint i32 %30, %15, !dbg !17
  %35 = or disjoint i32 %30, %16, !dbg !17
  %36 = icmp slt i32 %31, 64, !dbg !18
  %37 = icmp slt i32 %32, 64, !dbg !18
  %38 = icmp slt i32 %33, 64, !dbg !18
  %39 = icmp slt i32 %34, 64, !dbg !18
  %40 = icmp slt i32 %35, 64, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %41 = sdiv i32 %.frozen, 192, !dbg !19
  %42 = mul i32 %41, 192, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %.frozen31 = freeze i32 %20, !dbg !19
  %43 = sdiv i32 %.frozen31, 192, !dbg !19
  %44 = mul i32 %43, 192, !dbg !20
  %.decomposed32 = sub i32 %.frozen31, %44, !dbg !20
  %.frozen33 = freeze i32 %21, !dbg !19
  %45 = sdiv i32 %.frozen33, 192, !dbg !19
  %46 = mul i32 %45, 192, !dbg !20
  %.decomposed34 = sub i32 %.frozen33, %46, !dbg !20
  %.frozen35 = freeze i32 %22, !dbg !19
  %47 = sdiv i32 %.frozen35, 192, !dbg !19
  %48 = mul i32 %47, 192, !dbg !20
  %.decomposed36 = sub i32 %.frozen35, %48, !dbg !20
  %.frozen37 = freeze i32 %23, !dbg !19
  %49 = sdiv i32 %.frozen37, 192, !dbg !19
  %50 = mul i32 %49, 192, !dbg !20
  %.decomposed38 = sub i32 %.frozen37, %50, !dbg !20
  %51 = sext i32 %.decomposed to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %.decomposed32 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %.decomposed34 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %.decomposed36 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %24) #2, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %24) #2, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %24) #2, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %24) #2, !dbg !22
  %63 = bitcast i32 %62 to float, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %25) #2, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %25) #2, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %25) #2, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %25) #2, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %27) #2, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %27) #2, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %27) #2, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %27) #2, !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = shl i32 %19, 6, !dbg !23
  %80 = shl i32 %20, 6, !dbg !23
  %81 = shl i32 %21, 6, !dbg !23
  %82 = shl i32 %22, 6, !dbg !23
  %83 = add i32 %31, %79, !dbg !24
  %84 = add i32 %31, %80, !dbg !24
  %85 = add i32 %31, %81, !dbg !24
  %86 = add i32 %31, %82, !dbg !24
  %87 = sext i32 %83 to i64, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !25
  %89 = sext i32 %84 to i64, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !25
  %91 = sext i32 %85 to i64, !dbg !25
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !25
  %93 = sext i32 %86 to i64, !dbg !25
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !25
  %95 = and i1 %24, %36, !dbg !26
  %96 = and i1 %25, %36, !dbg !26
  %97 = and i1 %26, %36, !dbg !26
  %98 = and i1 %27, %36, !dbg !26
  %99 = and i1 %28, %37, !dbg !26
  %100 = and i1 %28, %38, !dbg !26
  %101 = and i1 %28, %39, !dbg !26
  %102 = and i1 %28, %40, !dbg !26
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %95) #2, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !27
  %108 = bitcast i32 %104 to float, !dbg !27
  %109 = bitcast i32 %105 to float, !dbg !27
  %110 = bitcast i32 %106 to float, !dbg !27
  %111 = bitcast i32 %107 to float, !dbg !27
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %96) #2, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !27
  %117 = bitcast i32 %113 to float, !dbg !27
  %118 = bitcast i32 %114 to float, !dbg !27
  %119 = bitcast i32 %115 to float, !dbg !27
  %120 = bitcast i32 %116 to float, !dbg !27
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %97) #2, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !27
  %126 = bitcast i32 %122 to float, !dbg !27
  %127 = bitcast i32 %123 to float, !dbg !27
  %128 = bitcast i32 %124 to float, !dbg !27
  %129 = bitcast i32 %125 to float, !dbg !27
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %98) #2, !dbg !27
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !27
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !27
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !27
  %135 = bitcast i32 %131 to float, !dbg !27
  %136 = bitcast i32 %132 to float, !dbg !27
  %137 = bitcast i32 %133 to float, !dbg !27
  %138 = bitcast i32 %134 to float, !dbg !27
  %139 = shl nsw i32 %41, 6, !dbg !28
  %140 = shl nsw i32 %43, 6, !dbg !28
  %141 = shl nsw i32 %45, 6, !dbg !28
  %142 = shl nsw i32 %47, 6, !dbg !28
  %143 = add i32 %139, %31, !dbg !29
  %144 = add i32 %140, %31, !dbg !29
  %145 = add i32 %141, %31, !dbg !29
  %146 = add i32 %142, %31, !dbg !29
  %147 = sext i32 %143 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !30
  %149 = sext i32 %144 to i64, !dbg !30
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !30
  %151 = sext i32 %145 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !30
  %153 = sext i32 %146 to i64, !dbg !30
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !30
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %148, i1 %95) #2, !dbg !31
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !31
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !31
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !31
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !31
  %160 = bitcast i32 %156 to float, !dbg !31
  %161 = bitcast i32 %157 to float, !dbg !31
  %162 = bitcast i32 %158 to float, !dbg !31
  %163 = bitcast i32 %159 to float, !dbg !31
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %96) #2, !dbg !31
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !31
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !31
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !31
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !31
  %169 = bitcast i32 %165 to float, !dbg !31
  %170 = bitcast i32 %166 to float, !dbg !31
  %171 = bitcast i32 %167 to float, !dbg !31
  %172 = bitcast i32 %168 to float, !dbg !31
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %97) #2, !dbg !31
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !31
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !31
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !31
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !31
  %178 = bitcast i32 %174 to float, !dbg !31
  %179 = bitcast i32 %175 to float, !dbg !31
  %180 = bitcast i32 %176 to float, !dbg !31
  %181 = bitcast i32 %177 to float, !dbg !31
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %98) #2, !dbg !31
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !31
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !31
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !31
  %187 = bitcast i32 %183 to float, !dbg !31
  %188 = bitcast i32 %184 to float, !dbg !31
  %189 = bitcast i32 %185 to float, !dbg !31
  %190 = bitcast i32 %186 to float, !dbg !31
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !32
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %149, !dbg !32
  %193 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !32
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %153, !dbg !32
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %191, i1 %95) #2, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !33
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !33
  %200 = bitcast i32 %196 to float, !dbg !33
  %201 = bitcast i32 %197 to float, !dbg !33
  %202 = bitcast i32 %198 to float, !dbg !33
  %203 = bitcast i32 %199 to float, !dbg !33
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 %96) #2, !dbg !33
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !33
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !33
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !33
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !33
  %209 = bitcast i32 %205 to float, !dbg !33
  %210 = bitcast i32 %206 to float, !dbg !33
  %211 = bitcast i32 %207 to float, !dbg !33
  %212 = bitcast i32 %208 to float, !dbg !33
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %193, i1 %97) #2, !dbg !33
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !33
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !33
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !33
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !33
  %218 = bitcast i32 %214 to float, !dbg !33
  %219 = bitcast i32 %215 to float, !dbg !33
  %220 = bitcast i32 %216 to float, !dbg !33
  %221 = bitcast i32 %217 to float, !dbg !33
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 %98) #2, !dbg !33
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !33
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !33
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !33
  %227 = bitcast i32 %223 to float, !dbg !33
  %228 = bitcast i32 %224 to float, !dbg !33
  %229 = bitcast i32 %225 to float, !dbg !33
  %230 = bitcast i32 %226 to float, !dbg !33
  %231 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !34
  %232 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !34
  %233 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !34
  %234 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !34
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %24) #2, !dbg !35
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %24) #2, !dbg !35
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %24) #2, !dbg !35
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %24) #2, !dbg !35
  %239 = bitcast i32 %238 to float, !dbg !35
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %25) #2, !dbg !35
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %25) #2, !dbg !35
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %25) #2, !dbg !35
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %25) #2, !dbg !35
  %244 = bitcast i32 %243 to float, !dbg !35
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %26) #2, !dbg !35
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %26) #2, !dbg !35
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %26) #2, !dbg !35
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %26) #2, !dbg !35
  %249 = bitcast i32 %248 to float, !dbg !35
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %27) #2, !dbg !35
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %27) #2, !dbg !35
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %27) #2, !dbg !35
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %27) #2, !dbg !35
  %254 = bitcast i32 %253 to float, !dbg !35
  %255 = fsub float %108, %160, !dbg !36
  %256 = fsub float %109, %161, !dbg !36
  %257 = fsub float %110, %162, !dbg !36
  %258 = fsub float %111, %163, !dbg !36
  %259 = fsub float %117, %169, !dbg !36
  %260 = fsub float %118, %170, !dbg !36
  %261 = fsub float %119, %171, !dbg !36
  %262 = fsub float %120, %172, !dbg !36
  %263 = fsub float %126, %178, !dbg !36
  %264 = fsub float %127, %179, !dbg !36
  %265 = fsub float %128, %180, !dbg !36
  %266 = fsub float %129, %181, !dbg !36
  %267 = fsub float %135, %187, !dbg !36
  %268 = fsub float %136, %188, !dbg !36
  %269 = fsub float %137, %189, !dbg !36
  %270 = fsub float %138, %190, !dbg !36
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %200) #2, !dbg !37
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %201) #2, !dbg !37
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %202) #2, !dbg !37
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %258, float %203) #2, !dbg !37
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %209) #2, !dbg !37
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float %210) #2, !dbg !37
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %211) #2, !dbg !37
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %212) #2, !dbg !37
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %218) #2, !dbg !37
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %219) #2, !dbg !37
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %220) #2, !dbg !37
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %221) #2, !dbg !37
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %227) #2, !dbg !37
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %228) #2, !dbg !37
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %229) #2, !dbg !37
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %230) #2, !dbg !37
  %287 = fmul float %271, %63, !dbg !38
  %288 = fmul float %272, %63, !dbg !38
  %289 = fmul float %273, %63, !dbg !38
  %290 = fmul float %274, %63, !dbg !38
  %291 = fmul float %275, %68, !dbg !38
  %292 = fmul float %276, %68, !dbg !38
  %293 = fmul float %277, %68, !dbg !38
  %294 = fmul float %278, %68, !dbg !38
  %295 = fmul float %279, %73, !dbg !38
  %296 = fmul float %280, %73, !dbg !38
  %297 = fmul float %281, %73, !dbg !38
  %298 = fmul float %282, %73, !dbg !38
  %299 = fmul float %283, %78, !dbg !38
  %300 = fmul float %284, %78, !dbg !38
  %301 = fmul float %285, %78, !dbg !38
  %302 = fmul float %286, %78, !dbg !38
  %303 = fadd float %287, %239, !dbg !39
  %304 = fadd float %288, %239, !dbg !39
  %305 = fadd float %289, %239, !dbg !39
  %306 = fadd float %290, %239, !dbg !39
  %307 = fadd float %291, %244, !dbg !39
  %308 = fadd float %292, %244, !dbg !39
  %309 = fadd float %293, %244, !dbg !39
  %310 = fadd float %294, %244, !dbg !39
  %311 = fadd float %295, %249, !dbg !39
  %312 = fadd float %296, %249, !dbg !39
  %313 = fadd float %297, %249, !dbg !39
  %314 = fadd float %298, %249, !dbg !39
  %315 = fadd float %299, %254, !dbg !39
  %316 = fadd float %300, %254, !dbg !39
  %317 = fadd float %301, %254, !dbg !39
  %318 = fadd float %302, %254, !dbg !39
  %319 = mul i32 %32, 192, !dbg !40
  %320 = mul i32 %33, 192, !dbg !40
  %321 = mul i32 %34, 192, !dbg !40
  %322 = mul i32 %35, 192, !dbg !40
  %323 = mul i32 %49, 12288, !dbg !41
  %324 = add i32 %323, %.decomposed38, !dbg !42
  %325 = add i32 %324, %319, !dbg !43
  %326 = add i32 %324, %320, !dbg !43
  %327 = add i32 %324, %321, !dbg !43
  %328 = add i32 %324, %322, !dbg !43
  %329 = sext i32 %325 to i64, !dbg !44
  %330 = getelementptr float, ptr addrspace(1) %5, i64 %329, !dbg !44
  %331 = sext i32 %326 to i64, !dbg !44
  %332 = getelementptr float, ptr addrspace(1) %5, i64 %331, !dbg !44
  %333 = sext i32 %327 to i64, !dbg !44
  %334 = getelementptr float, ptr addrspace(1) %5, i64 %333, !dbg !44
  %335 = sext i32 %328 to i64, !dbg !44
  %336 = getelementptr float, ptr addrspace(1) %5, i64 %335, !dbg !44
  %337 = shl i32 %11, 8, !dbg !45
  %338 = and i32 %337, 3840, !dbg !45
  %339 = or disjoint i32 %338, %13, !dbg !45
  %340 = and i32 %17, 1020, !dbg !45
  %341 = lshr exact i32 %338, 2, !dbg !45
  %342 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %341, !dbg !45
  %343 = getelementptr float, ptr addrspace(3) %342, i32 %339, !dbg !45
  %344 = bitcast float %303 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 true) #2, !dbg !45
  %345 = or disjoint i32 %339, 64, !dbg !45
  %346 = lshr i32 %345, 4, !dbg !45
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i32 %346, !dbg !45
  %348 = getelementptr float, ptr addrspace(3) %347, i32 %345, !dbg !45
  %349 = bitcast float %304 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #2, !dbg !45
  %350 = or disjoint i32 %339, 128, !dbg !45
  %351 = lshr i32 %350, 4, !dbg !45
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i32 %351, !dbg !45
  %353 = getelementptr float, ptr addrspace(3) %352, i32 %350, !dbg !45
  %354 = bitcast float %305 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #2, !dbg !45
  %355 = or disjoint i32 %339, 192, !dbg !45
  %356 = lshr i32 %355, 4, !dbg !45
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !45
  %358 = getelementptr float, ptr addrspace(3) %357, i32 %355, !dbg !45
  %359 = bitcast float %306 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #2, !dbg !45
  %360 = or disjoint i32 %339, 16, !dbg !45
  %361 = getelementptr float, ptr addrspace(3) %342, i32 %360, !dbg !45
  %362 = bitcast float %307 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #2, !dbg !45
  %363 = or disjoint i32 %339, 80, !dbg !45
  %364 = lshr i32 %363, 4, !dbg !45
  %365 = and i32 %364, 244, !dbg !45
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !45
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %363, !dbg !45
  %368 = bitcast float %308 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #2, !dbg !45
  %369 = or disjoint i32 %339, 144, !dbg !45
  %370 = lshr i32 %369, 4, !dbg !45
  %371 = and i32 %370, 248, !dbg !45
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %371, !dbg !45
  %373 = getelementptr float, ptr addrspace(3) %372, i32 %369, !dbg !45
  %374 = bitcast float %309 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #2, !dbg !45
  %375 = or disjoint i32 %339, 208, !dbg !45
  %376 = lshr i32 %375, 4, !dbg !45
  %377 = and i32 %376, 252, !dbg !45
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !45
  %379 = getelementptr float, ptr addrspace(3) %378, i32 %375, !dbg !45
  %380 = bitcast float %310 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #2, !dbg !45
  %381 = or disjoint i32 %339, 32, !dbg !45
  %382 = getelementptr float, ptr addrspace(3) %342, i32 %381, !dbg !45
  %383 = bitcast float %311 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %383, i1 true) #2, !dbg !45
  %384 = or disjoint i32 %339, 96, !dbg !45
  %385 = lshr i32 %384, 4, !dbg !45
  %386 = and i32 %385, 244, !dbg !45
  %387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %386, !dbg !45
  %388 = getelementptr float, ptr addrspace(3) %387, i32 %384, !dbg !45
  %389 = bitcast float %312 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #2, !dbg !45
  %390 = or disjoint i32 %339, 160, !dbg !45
  %391 = lshr i32 %390, 4, !dbg !45
  %392 = and i32 %391, 248, !dbg !45
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %392, !dbg !45
  %394 = getelementptr float, ptr addrspace(3) %393, i32 %390, !dbg !45
  %395 = bitcast float %313 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %395, i1 true) #2, !dbg !45
  %396 = or disjoint i32 %339, 224, !dbg !45
  %397 = lshr i32 %396, 4, !dbg !45
  %398 = and i32 %397, 252, !dbg !45
  %399 = getelementptr float, ptr addrspace(3) @global_smem, i32 %398, !dbg !45
  %400 = getelementptr float, ptr addrspace(3) %399, i32 %396, !dbg !45
  %401 = bitcast float %314 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 true) #2, !dbg !45
  %402 = or disjoint i32 %339, 48, !dbg !45
  %403 = getelementptr float, ptr addrspace(3) %342, i32 %402, !dbg !45
  %404 = bitcast float %315 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #2, !dbg !45
  %405 = or disjoint i32 %339, 112, !dbg !45
  %406 = lshr i32 %405, 4, !dbg !45
  %407 = and i32 %406, 244, !dbg !45
  %408 = getelementptr float, ptr addrspace(3) @global_smem, i32 %407, !dbg !45
  %409 = getelementptr float, ptr addrspace(3) %408, i32 %405, !dbg !45
  %410 = bitcast float %316 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 true) #2, !dbg !45
  %411 = or disjoint i32 %339, 176, !dbg !45
  %412 = lshr i32 %411, 4, !dbg !45
  %413 = and i32 %412, 248, !dbg !45
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i32 %413, !dbg !45
  %415 = getelementptr float, ptr addrspace(3) %414, i32 %411, !dbg !45
  %416 = bitcast float %317 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 true) #2, !dbg !45
  %417 = or disjoint i32 %339, 240, !dbg !45
  %418 = lshr i32 %417, 4, !dbg !45
  %419 = and i32 %418, 252, !dbg !45
  %420 = getelementptr float, ptr addrspace(3) @global_smem, i32 %419, !dbg !45
  %421 = getelementptr float, ptr addrspace(3) %420, i32 %417, !dbg !45
  %422 = bitcast float %318 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %422, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %423 = lshr i32 %17, 4, !dbg !45
  %424 = and i32 %423, 60, !dbg !45
  %425 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %424, !dbg !45
  %426 = getelementptr inbounds float, ptr addrspace(3) %425, i32 %340, !dbg !45
  %427 = or disjoint i32 %340, 1024, !dbg !45
  %428 = lshr i32 %427, 4, !dbg !45
  %429 = and i32 %428, 124, !dbg !45
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %429, !dbg !45
  %431 = getelementptr inbounds float, ptr addrspace(3) %430, i32 %427, !dbg !45
  %432 = load <4 x i32>, ptr addrspace(3) %431, align 16, !dbg !45
  %433 = or disjoint i32 %340, 2048, !dbg !45
  %434 = lshr i32 %433, 4, !dbg !45
  %435 = and i32 %434, 188, !dbg !45
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !45
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %433, !dbg !45
  %438 = load <4 x i32>, ptr addrspace(3) %437, align 16, !dbg !45
  %439 = or disjoint i32 %340, 3072, !dbg !45
  %440 = lshr i32 %439, 4, !dbg !45
  %441 = and i32 %440, 252, !dbg !45
  %442 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %441, !dbg !45
  %443 = getelementptr inbounds float, ptr addrspace(3) %442, i32 %439, !dbg !45
  %444 = load <4 x i32>, ptr addrspace(3) %443, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %426, align 16, !dbg !45
  %445 = getelementptr inbounds i8, ptr addrspace(3) %426, i32 4, !dbg !45
  %.extract16 = load i32, ptr addrspace(3) %445, align 4, !dbg !45
  %446 = getelementptr inbounds i8, ptr addrspace(3) %426, i32 8, !dbg !45
  %.extract17 = load i32, ptr addrspace(3) %446, align 8, !dbg !45
  %447 = getelementptr inbounds i8, ptr addrspace(3) %426, i32 12, !dbg !45
  %.extract18 = load i32, ptr addrspace(3) %447, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %330, i1 %99) #2, !dbg !45
  %.extract19 = extractelement <4 x i32> %432, i64 0, !dbg !45
  %.extract20 = extractelement <4 x i32> %432, i64 1, !dbg !45
  %.extract21 = extractelement <4 x i32> %432, i64 2, !dbg !45
  %.extract22 = extractelement <4 x i32> %432, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %332, i1 %100) #2, !dbg !45
  %.extract23 = extractelement <4 x i32> %438, i64 0, !dbg !45
  %.extract24 = extractelement <4 x i32> %438, i64 1, !dbg !45
  %.extract25 = extractelement <4 x i32> %438, i64 2, !dbg !45
  %.extract26 = extractelement <4 x i32> %438, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %334, i1 %101) #2, !dbg !45
  %.extract27 = extractelement <4 x i32> %444, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %444, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %444, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %444, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %336, i1 %102) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czljpydhichoxdexmxala4vbl7kni7botlf6dwbzhy44njbbgmma.py", directory: "inductor_cache/zl")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_20", linkageName: "triton_poi_fused_add_div_mul_sub_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 51, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 38, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 43, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 34, scope: !7)
!41 = !DILocation(line: 41, column: 45, scope: !7)
!42 = !DILocation(line: 41, column: 30, scope: !7)
!43 = !DILocation(line: 41, column: 39, scope: !7)
!44 = !DILocation(line: 41, column: 25, scope: !7)
!45 = !DILocation(line: 41, column: 56, scope: !7)
!46 = !DILocation(line: 41, column: 4, scope: !7)
