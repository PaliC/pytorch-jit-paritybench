; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, i32 %19) local_unnamed_addr !dbg !7 {
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 8, !dbg !11
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %24 = shl i32 %23, 1, !dbg !12
  %25 = and i32 %24, 254, !dbg !12
  %26 = or disjoint i32 %22, %25, !dbg !13
  %27 = sdiv i32 %26, 64, !dbg !14
  %28 = srem i32 %27, 32, !dbg !15
  %29 = sdiv i32 %26, 16, !dbg !16
  %30 = sext i32 %26 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %33 = sext i32 %28 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %48 = sext i32 %29 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !29
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %33, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !38
  %68 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !39
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %12, i64 %33, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !42
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !42
  %73 = getelementptr float, ptr addrspace(1) %13, i64 %33, !dbg !43
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !44
  %75 = bitcast i32 %74 to float, !dbg !44
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !44
  %77 = bitcast i32 %76 to float, !dbg !44
  %78 = getelementptr float, ptr addrspace(1) %14, i64 %33, !dbg !45
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !46
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !46
  %81 = getelementptr float, ptr addrspace(1) %15, i64 %33, !dbg !47
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !48
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !48
  %84 = fadd float %39, 0x3EE4F8B580000000, !dbg !49
  %85 = fadd float %41, 0x3EE4F8B580000000, !dbg !49
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %86, 0, !dbg !50
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %87, 0, !dbg !50
  br i1 %.not.i, label %93, label %88, !dbg !50

88:                                               ; preds = %20
  br i1 %.not1.i, label %91, label %89, !dbg !50

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

93:                                               ; preds = %20
  br i1 %.not1.i, label %96, label %94, !dbg !50

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !50
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %98, 0, !dbg !50
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %99, 0, !dbg !50
  br i1 %.not.i1, label %105, label %100, !dbg !50

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !50

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %108, label %106, !dbg !50

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %101, %103, %106, %108
  %.0.i3 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !50
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %112 = fadd float %59, 0x3EE4F8B580000000, !dbg !52
  %113 = fadd float %61, 0x3EE4F8B580000000, !dbg !52
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i6 = icmp eq i32 %114, 0, !dbg !53
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i9 = icmp eq i32 %115, 0, !dbg !53
  br i1 %.not.i6, label %121, label %116, !dbg !53

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !53

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !53

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

__nv_sqrtf.exit10:                                ; preds = %117, %119, %122, %124
  %.0.i8 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !53
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i11 = icmp eq i32 %126, 0, !dbg !53
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i14 = icmp eq i32 %127, 0, !dbg !53
  br i1 %.not.i11, label %133, label %128, !dbg !53

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !53

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !53

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

__nv_sqrtf.exit15:                                ; preds = %129, %131, %134, %136
  %.0.i13 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !53
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !54
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !54
  %140 = fadd float %75, 0x3EE4F8B580000000, !dbg !55
  %141 = fadd float %77, 0x3EE4F8B580000000, !dbg !55
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i16 = icmp eq i32 %142, 0, !dbg !56
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i19 = icmp eq i32 %143, 0, !dbg !56
  br i1 %.not.i16, label %149, label %144, !dbg !56

144:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %147, label %145, !dbg !56

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

149:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %152, label %150, !dbg !56

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

__nv_sqrtf.exit20:                                ; preds = %145, %147, %150, %152
  %.0.i18 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !56
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i21 = icmp eq i32 %154, 0, !dbg !56
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i24 = icmp eq i32 %155, 0, !dbg !56
  br i1 %.not.i21, label %161, label %156, !dbg !56

156:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %159, label %157, !dbg !56

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

161:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %164, label %162, !dbg !56

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

__nv_sqrtf.exit25:                                ; preds = %157, %159, %162, %164
  %.0.i23 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !56
  %166 = extractvalue { i32, i32 } %69, 1, !dbg !40
  %167 = bitcast i32 %166 to float, !dbg !40
  %168 = bitcast i32 %72 to float, !dbg !42
  %169 = fsub float %167, %168, !dbg !57
  %170 = extractvalue { i32, i32 } %69, 0, !dbg !40
  %171 = bitcast i32 %170 to float, !dbg !40
  %172 = bitcast i32 %71 to float, !dbg !42
  %173 = fsub float %171, %172, !dbg !57
  %174 = extractvalue { i32, i32 } %53, 1, !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = bitcast i32 %56 to float, !dbg !32
  %177 = fsub float %175, %176, !dbg !58
  %178 = fmul float %177, %139, !dbg !59
  %179 = bitcast i32 %64 to float, !dbg !36
  %180 = fmul float %178, %179, !dbg !60
  %181 = bitcast i32 %67 to float, !dbg !38
  %182 = fadd float %180, %181, !dbg !61
  %183 = bitcast i32 %51 to float, !dbg !28
  %184 = fadd float %182, %183, !dbg !62
  %185 = extractvalue { i32, i32 } %53, 0, !dbg !30
  %186 = bitcast i32 %185 to float, !dbg !30
  %187 = bitcast i32 %55 to float, !dbg !32
  %188 = fsub float %186, %187, !dbg !58
  %189 = fmul float %188, %138, !dbg !59
  %190 = bitcast i32 %63 to float, !dbg !36
  %191 = fmul float %189, %190, !dbg !60
  %192 = bitcast i32 %66 to float, !dbg !38
  %193 = fadd float %191, %192, !dbg !61
  %194 = bitcast i32 %50 to float, !dbg !28
  %195 = fadd float %193, %194, !dbg !62
  %196 = extractvalue { i32, i32 } %32, 1, !dbg !18
  %197 = bitcast i32 %196 to float, !dbg !18
  %198 = bitcast i32 %36 to float, !dbg !20
  %199 = fsub float %197, %198, !dbg !63
  %200 = fmul float %199, %111, !dbg !64
  %201 = bitcast i32 %44 to float, !dbg !24
  %202 = fmul float %200, %201, !dbg !65
  %203 = bitcast i32 %47 to float, !dbg !26
  %204 = fadd float %202, %203, !dbg !66
  %205 = fadd float %204, %183, !dbg !67
  %206 = extractvalue { i32, i32 } %32, 0, !dbg !18
  %207 = bitcast i32 %206 to float, !dbg !18
  %208 = bitcast i32 %35 to float, !dbg !20
  %209 = fsub float %207, %208, !dbg !63
  %210 = fmul float %209, %110, !dbg !64
  %211 = bitcast i32 %43 to float, !dbg !24
  %212 = fmul float %210, %211, !dbg !65
  %213 = bitcast i32 %46 to float, !dbg !26
  %214 = fadd float %212, %213, !dbg !66
  %215 = fadd float %214, %194, !dbg !67
  %216 = bitcast i32 %83 to float, !dbg !48
  %217 = bitcast i32 %82 to float, !dbg !48
  %218 = bitcast i32 %80 to float, !dbg !46
  %219 = bitcast i32 %79 to float, !dbg !46
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !68
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !68
  %222 = fmul float %173, %220, !dbg !69
  %223 = fmul float %169, %221, !dbg !69
  %224 = fmul float %222, %219, !dbg !70
  %225 = fmul float %223, %218, !dbg !70
  %226 = fadd float %224, %217, !dbg !71
  %227 = fadd float %225, %216, !dbg !71
  %228 = fadd float %226, %194, !dbg !72
  %229 = fadd float %227, %183, !dbg !72
  %230 = getelementptr float, ptr addrspace(1) %16, i64 %30, !dbg !73
  %231 = bitcast float %215 to i32, !dbg !74
  %232 = bitcast float %205 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %231, i32 %232, ptr addrspace(1) %230, i1 true) #3, !dbg !74
  %233 = getelementptr float, ptr addrspace(1) %17, i64 %30, !dbg !75
  %234 = bitcast float %195 to i32, !dbg !76
  %235 = bitcast float %184 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %234, i32 %235, ptr addrspace(1) %233, i1 true) #3, !dbg !76
  %236 = getelementptr float, ptr addrspace(1) %18, i64 %30, !dbg !77
  %237 = bitcast float %228 to i32, !dbg !78
  %238 = bitcast float %229 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %237, i32 %238, ptr addrspace(1) %236, i1 true) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdkhyvd6bwdpqx6duwb5fpyvxgwrh4g4a7zrmiycqed2xo6zipjm.py", directory: "inductor_cache/dk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 40, column: 32, scope: !7)
!44 = !DILocation(line: 40, column: 37, scope: !7)
!45 = !DILocation(line: 41, column: 32, scope: !7)
!46 = !DILocation(line: 41, column: 37, scope: !7)
!47 = !DILocation(line: 42, column: 32, scope: !7)
!48 = !DILocation(line: 42, column: 37, scope: !7)
!49 = !DILocation(line: 45, column: 18, scope: !7)
!50 = !DILocation(line: 46, column: 26, scope: !7)
!51 = !DILocation(line: 48, column: 18, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 27, scope: !7)
!54 = !DILocation(line: 58, column: 19, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 27, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 55, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 43, column: 18, scope: !7)
!64 = !DILocation(line: 51, column: 19, scope: !7)
!65 = !DILocation(line: 52, column: 20, scope: !7)
!66 = !DILocation(line: 53, column: 20, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 19, scope: !7)
!69 = !DILocation(line: 69, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 73, column: 25, scope: !7)
!74 = !DILocation(line: 73, column: 37, scope: !7)
!75 = !DILocation(line: 74, column: 25, scope: !7)
!76 = !DILocation(line: 74, column: 37, scope: !7)
!77 = !DILocation(line: 75, column: 25, scope: !7)
!78 = !DILocation(line: 75, column: 37, scope: !7)
!79 = !DILocation(line: 75, column: 4, scope: !7)
