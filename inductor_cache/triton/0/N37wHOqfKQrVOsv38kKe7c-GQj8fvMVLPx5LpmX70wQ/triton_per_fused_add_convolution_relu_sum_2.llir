; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_convolution_relu_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %8, 31, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 64, !dbg !14
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = shl i32 %8, 2, !dbg !15
  %17 = and i32 %16, 12, !dbg !15
  %18 = shl i32 %12, 4, !dbg !16
  %19 = or disjoint i32 %18, %17, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = zext nneg i32 %17 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %34 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %35 = insertelement <2 x i32> %34, i32 %24, i64 1, !dbg !19
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !19
  %37 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %38 = insertelement <2 x i32> %37, i32 %31, i64 1, !dbg !21
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !21
  %40 = fadd <2 x float> %36, %39, !dbg !22
  %41 = fcmp olt <2 x float> %40, zeroinitializer, !dbg !23
  %42 = select <2 x i1> %41, <2 x float> zeroinitializer, <2 x float> %40, !dbg !27
  %43 = fadd <2 x float> %42, splat (float 0x3F50624DE0000000), !dbg !28
  %44 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %45 = insertelement <2 x i32> %44, i32 %25, i64 1, !dbg !19
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !19
  %47 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !21
  %48 = insertelement <2 x i32> %47, i32 %32, i64 1, !dbg !21
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !21
  %50 = fadd <2 x float> %46, %49, !dbg !22
  %51 = fcmp olt <2 x float> %50, zeroinitializer, !dbg !23
  %52 = select <2 x i1> %51, <2 x float> zeroinitializer, <2 x float> %50, !dbg !27
  %53 = fadd <2 x float> %52, splat (float 0x3F50624DE0000000), !dbg !28
  %shift = shufflevector <2 x float> %43, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %54 = fadd <2 x float> %43, %shift, !dbg !29
  %shift3 = shufflevector <2 x float> %53, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %55 = fadd <2 x float> %shift3, %54, !dbg !29
  %56 = fadd <2 x float> %53, %55, !dbg !29
  %57 = extractelement <2 x float> %56, i64 0, !dbg !29
  %58 = select i1 %14, float %57, float 0.000000e+00, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !34
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 2, i32 31), !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = fadd float %58, %61, !dbg !29
  %63 = bitcast float %62 to i32, !dbg !34
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = fadd float %62, %65, !dbg !29
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !35
  %68 = bitcast float %66 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !35
  %70 = load i32, ptr addrspace(3) %69, align 4, !dbg !35
  %bc = bitcast <2 x float> %40 to <2 x i32>, !dbg !36
  %71 = extractelement <2 x i32> %bc, i64 0, !dbg !36
  %bc4 = bitcast <2 x float> %40 to <2 x i32>, !dbg !36
  %72 = extractelement <2 x i32> %bc4, i64 1, !dbg !36
  %bc5 = bitcast <2 x float> %50 to <2 x i32>, !dbg !36
  %73 = extractelement <2 x i32> %bc5, i64 1, !dbg !36
  %bc6 = bitcast <2 x float> %50 to <2 x i32>, !dbg !36
  %74 = extractelement <2 x i32> %bc6, i64 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %71, i32 %72, i32 %73, i32 %74, ptr addrspace(1) %21, i1 %14) #3, !dbg !36
  %75 = sext i32 %13 to i64, !dbg !37
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !37
  %77 = and i32 %8, 96, !dbg !38
  %78 = icmp eq i32 %77, 0, !dbg !38
  %79 = and i1 %78, %15, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %70, ptr addrspace(1) %76, i1 %79) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caktzfbohhd6ltzx7dvzmh6qxm5xfs6wm6by2r2klwv5tldoikds.py", directory: "inductor_cache/ak")
!4 = !{ptr @triton_per_fused_add_convolution_relu_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_relu_sum_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_relu_sum_2", linkageName: "triton_per_fused_add_convolution_relu_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 35, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 40, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 47, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 37, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
