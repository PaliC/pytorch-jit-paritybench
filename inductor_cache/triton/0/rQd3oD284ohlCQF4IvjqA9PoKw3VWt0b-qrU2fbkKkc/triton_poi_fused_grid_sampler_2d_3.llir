; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/mg/cmggrrefyyngtfixenrh6wsqek6eshrmo5aik2i7gbeonyg6woi6.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp95 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/mg/cmggrrefyyngtfixenrh6wsqek6eshrmo5aik2i7gbeonyg6woi6.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp90 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/mg/cmggrrefyyngtfixenrh6wsqek6eshrmo5aik2i7gbeonyg6woi6.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp77 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/mg/cmggrrefyyngtfixenrh6wsqek6eshrmo5aik2i7gbeonyg6woi6.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp72 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/mg/cmggrrefyyngtfixenrh6wsqek6eshrmo5aik2i7gbeonyg6woi6.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp61 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/mg/cmggrrefyyngtfixenrh6wsqek6eshrmo5aik2i7gbeonyg6woi6.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp55 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %11 = shl i32 %10, 8, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 1, !dbg !14
  %14 = and i32 %13, 254, !dbg !14
  %15 = or disjoint i32 %11, %14, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %16 = sdiv i32 %.frozen, 16, !dbg !16
  %17 = mul i32 %16, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = sdiv i32 %15, 64, !dbg !18
  %19 = shl nsw i32 %18, 5, !dbg !19
  %20 = add nsw i32 %19, %.decomposed, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %23 = getelementptr i8, ptr addrspace(1) %22, i64 64, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = sext i32 %20 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %34 = bitcast i32 %32 to float, !dbg !24
  %35 = bitcast i32 %33 to float, !dbg !24
  %36 = fmul float %27, 2.000000e+00, !dbg !25
  %37 = fmul float %28, 2.000000e+00, !dbg !25
  %38 = fmul float %36, 0x3FD5555560000000, !dbg !26
  %39 = fmul float %37, 0x3FD5555560000000, !dbg !26
  %40 = fadd float %38, -1.000000e+00, !dbg !27
  %41 = fadd float %39, -1.000000e+00, !dbg !27
  %42 = fmul float %34, 2.000000e+00, !dbg !28
  %43 = fmul float %35, 2.000000e+00, !dbg !28
  %44 = fadd float %42, 1.500000e+00, !dbg !29
  %45 = fadd float %43, 1.500000e+00, !dbg !29
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %47 = tail call float @llvm.nvvm.floor.ftz.f(float %44), !dbg !30
  %48 = tail call float @llvm.nvvm.floor.f(float %44), !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %50 = tail call float @llvm.nvvm.floor.ftz.f(float %45), !dbg !30
  %51 = tail call float @llvm.nvvm.floor.f(float %45), !dbg !30
  %52 = fmul float %40, 2.000000e+00, !dbg !31
  %53 = fmul float %41, 2.000000e+00, !dbg !31
  %54 = fadd float %52, 1.500000e+00, !dbg !32
  %55 = fadd float %53, 1.500000e+00, !dbg !32
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %57 = tail call float @llvm.nvvm.floor.ftz.f(float %54), !dbg !33
  %58 = tail call float @llvm.nvvm.floor.f(float %54), !dbg !33
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %60 = tail call float @llvm.nvvm.floor.ftz.f(float %55), !dbg !33
  %61 = tail call float @llvm.nvvm.floor.f(float %55), !dbg !33
  %62 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !33
  %63 = insertelement <4 x i32> %62, i32 %56, i64 1, !dbg !33
  %64 = insertelement <4 x i32> %63, i32 %49, i64 2, !dbg !33
  %65 = insertelement <4 x i32> %64, i32 %46, i64 3, !dbg !33
  %66 = icmp eq <4 x i32> %65, zeroinitializer, !dbg !33
  %67 = insertelement <4 x float> poison, float %61, i64 0, !dbg !33
  %68 = insertelement <4 x float> %67, float %58, i64 1, !dbg !33
  %69 = insertelement <4 x float> %68, float %51, i64 2, !dbg !33
  %70 = insertelement <4 x float> %69, float %48, i64 3, !dbg !33
  %71 = insertelement <4 x float> poison, float %60, i64 0, !dbg !33
  %72 = insertelement <4 x float> %71, float %57, i64 1, !dbg !33
  %73 = insertelement <4 x float> %72, float %50, i64 2, !dbg !33
  %74 = insertelement <4 x float> %73, float %47, i64 3, !dbg !33
  %75 = select <4 x i1> %66, <4 x float> %70, <4 x float> %74, !dbg !33
  %76 = extractelement <4 x float> %75, i64 3, !dbg !34
  %77 = fcmp oge float %76, 0.000000e+00, !dbg !34
  %78 = extractelement <4 x float> %75, i64 2, !dbg !34
  %79 = fcmp oge float %78, 0.000000e+00, !dbg !34
  %80 = extractelement <4 x float> %75, i64 1, !dbg !35
  %81 = fcmp oge float %80, 0.000000e+00, !dbg !35
  %82 = extractelement <4 x float> %75, i64 0, !dbg !35
  %83 = fcmp oge float %82, 0.000000e+00, !dbg !35
  %84 = fcmp olt <4 x float> %75, splat (float 4.000000e+00), !dbg !36
  %85 = extractelement <4 x i1> %84, i64 1, !dbg !37
  %86 = and i1 %81, %85, !dbg !37
  %87 = extractelement <4 x i1> %84, i64 0, !dbg !37
  %88 = and i1 %83, %87, !dbg !37
  %89 = fptosi float %80 to i64, !dbg !38
  %90 = fptosi float %82 to i64, !dbg !38
  %91 = fptosi float %76 to i64, !dbg !39
  %92 = fptosi float %78 to i64, !dbg !39
  %93 = fadd float %76, 1.000000e+00, !dbg !40
  %94 = fadd float %78, 1.000000e+00, !dbg !40
  %95 = fadd float %80, 1.000000e+00, !dbg !41
  %96 = fadd float %82, 1.000000e+00, !dbg !41
  %97 = fcmp olt float %93, 4.000000e+00, !dbg !42
  %98 = fcmp olt float %94, 4.000000e+00, !dbg !42
  %99 = fcmp oge float %95, 0.000000e+00, !dbg !43
  %100 = fcmp oge float %96, 0.000000e+00, !dbg !43
  %101 = fcmp olt float %95, 4.000000e+00, !dbg !44
  %102 = fcmp olt float %96, 4.000000e+00, !dbg !44
  %103 = and i1 %99, %101, !dbg !45
  %104 = and i1 %100, %102, !dbg !45
  %105 = and i1 %97, %103, !dbg !46
  %106 = and i1 %98, %104, !dbg !46
  %107 = extractelement <4 x i1> %84, i64 3, !dbg !47
  %108 = and i1 %107, %103, !dbg !47
  %109 = extractelement <4 x i1> %84, i64 2, !dbg !47
  %110 = and i1 %109, %104, !dbg !47
  %111 = and i1 %77, %108, !dbg !48
  %112 = and i1 %79, %110, !dbg !48
  %113 = fcmp oge float %93, 0.000000e+00, !dbg !49
  %114 = fcmp oge float %94, 0.000000e+00, !dbg !49
  %115 = and i1 %97, %86, !dbg !50
  %116 = and i1 %98, %88, !dbg !50
  %117 = and i1 %113, %115, !dbg !51
  %118 = and i1 %114, %116, !dbg !51
  %119 = select i1 %117, i64 %89, i64 0, !dbg !52
  %120 = select i1 %118, i64 %90, i64 0, !dbg !52
  %121 = lshr i64 %119, 61, !dbg !53
  %122 = and i64 %121, 4, !dbg !53
  %123 = add i64 %122, %119, !dbg !53
  %124 = lshr i64 %120, 61, !dbg !53
  %125 = and i64 %124, 4, !dbg !53
  %126 = add i64 %125, %120, !dbg !53
  %127 = or i64 %123, %126, !dbg !54
  %.not = icmp ult i64 %127, 4, !dbg !54
  br i1 %.not, label %129, label %128, !dbg !54

128:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 84, ptr nonnull @assertFunc_0, i64 1), !dbg !54
  unreachable, !dbg !54

129:                                              ; preds = %9
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %130 = fptosi float %93 to i64, !dbg !55
  %131 = fptosi float %94 to i64, !dbg !55
  %132 = select i1 %117, i64 %130, i64 0, !dbg !56
  %133 = select i1 %118, i64 %131, i64 0, !dbg !56
  %134 = lshr i64 %132, 61, !dbg !57
  %135 = and i64 %134, 4, !dbg !57
  %136 = add i64 %135, %132, !dbg !57
  %137 = lshr i64 %133, 61, !dbg !57
  %138 = and i64 %137, 4, !dbg !57
  %139 = add i64 %138, %133, !dbg !57
  %140 = or i64 %136, %139, !dbg !58
  %.not1 = icmp ult i64 %140, 4, !dbg !58
  br i1 %.not1, label %142, label %141, !dbg !58

141:                                              ; preds = %129
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 90, ptr nonnull @assertFunc_1, i64 1), !dbg !58
  unreachable, !dbg !58

142:                                              ; preds = %129
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %143 = shl nuw nsw i64 %123, 2, !dbg !59
  %144 = shl nuw nsw i64 %126, 2, !dbg !59
  %145 = or disjoint i64 %143, %136, !dbg !60
  %146 = or disjoint i64 %144, %139, !dbg !60
  %147 = shl nsw i32 %16, 4, !dbg !61
  %148 = sext i32 %147 to i64, !dbg !62
  %149 = or disjoint i64 %145, %148, !dbg !62
  %150 = or disjoint i64 %146, %148, !dbg !62
  %151 = getelementptr float, ptr addrspace(1) %4, i64 %149, !dbg !63
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !63
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #4, !dbg !64
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #4, !dbg !64
  %155 = fptosi float %95 to i64, !dbg !65
  %156 = fptosi float %96 to i64, !dbg !65
  %157 = select i1 %111, i64 %155, i64 0, !dbg !66
  %158 = select i1 %112, i64 %156, i64 0, !dbg !66
  %159 = lshr i64 %157, 61, !dbg !67
  %160 = and i64 %159, 4, !dbg !67
  %161 = add i64 %160, %157, !dbg !67
  %162 = lshr i64 %158, 61, !dbg !67
  %163 = and i64 %162, 4, !dbg !67
  %164 = add i64 %163, %158, !dbg !67
  %165 = or i64 %161, %164, !dbg !68
  %.not2 = icmp ult i64 %165, 4, !dbg !68
  br i1 %.not2, label %167, label %166, !dbg !68

166:                                              ; preds = %142
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 101, ptr nonnull @assertFunc_2, i64 1), !dbg !68
  unreachable, !dbg !68

167:                                              ; preds = %142
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %168 = select i1 %111, i64 %91, i64 0, !dbg !69
  %169 = select i1 %112, i64 %92, i64 0, !dbg !69
  %170 = lshr i64 %168, 61, !dbg !70
  %171 = and i64 %170, 4, !dbg !70
  %172 = add i64 %171, %168, !dbg !70
  %173 = lshr i64 %169, 61, !dbg !70
  %174 = and i64 %173, 4, !dbg !70
  %175 = add i64 %174, %169, !dbg !70
  %176 = or i64 %172, %175, !dbg !71
  %.not3 = icmp ult i64 %176, 4, !dbg !71
  br i1 %.not3, label %178, label %177, !dbg !71

177:                                              ; preds = %167
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 106, ptr nonnull @assertFunc_3, i64 1), !dbg !71
  unreachable, !dbg !71

178:                                              ; preds = %167
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %179 = shl nuw nsw i64 %161, 2, !dbg !72
  %180 = shl nuw nsw i64 %164, 2, !dbg !72
  %181 = or disjoint i64 %179, %172, !dbg !73
  %182 = or disjoint i64 %180, %175, !dbg !73
  %183 = or disjoint i64 %181, %148, !dbg !74
  %184 = or disjoint i64 %182, %148, !dbg !74
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %183, !dbg !75
  %186 = getelementptr float, ptr addrspace(1) %4, i64 %184, !dbg !75
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #4, !dbg !76
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #4, !dbg !76
  %189 = and i1 %113, %105, !dbg !77
  %190 = and i1 %114, %106, !dbg !77
  %191 = select i1 %189, i64 %155, i64 0, !dbg !78
  %192 = select i1 %190, i64 %156, i64 0, !dbg !78
  %193 = lshr i64 %191, 61, !dbg !79
  %194 = and i64 %193, 4, !dbg !79
  %195 = add i64 %194, %191, !dbg !79
  %196 = lshr i64 %192, 61, !dbg !79
  %197 = and i64 %196, 4, !dbg !79
  %198 = add i64 %197, %192, !dbg !79
  %199 = or i64 %195, %198, !dbg !80
  %.not4 = icmp ult i64 %199, 4, !dbg !80
  br i1 %.not4, label %201, label %200, !dbg !80

200:                                              ; preds = %178
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 119, ptr nonnull @assertFunc_4, i64 1), !dbg !80
  unreachable, !dbg !80

201:                                              ; preds = %178
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %202 = select i1 %189, i64 %130, i64 0, !dbg !81
  %203 = select i1 %190, i64 %131, i64 0, !dbg !81
  %204 = lshr i64 %202, 61, !dbg !82
  %205 = and i64 %204, 4, !dbg !82
  %206 = add i64 %205, %202, !dbg !82
  %207 = lshr i64 %203, 61, !dbg !82
  %208 = and i64 %207, 4, !dbg !82
  %209 = add i64 %208, %203, !dbg !82
  %210 = or i64 %206, %209, !dbg !83
  %.not5 = icmp ult i64 %210, 4, !dbg !83
  br i1 %.not5, label %212, label %211, !dbg !83

211:                                              ; preds = %201
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 124, ptr nonnull @assertFunc_5, i64 1), !dbg !83
  unreachable, !dbg !83

212:                                              ; preds = %201
  %213 = fsub float %45, %78, !dbg !84
  %214 = fsub float %55, %82, !dbg !85
  %215 = fmul float %213, %214, !dbg !86
  %216 = select i1 %190, float %215, float 0.000000e+00, !dbg !87
  %217 = fsub float %44, %76, !dbg !84
  %218 = fsub float %54, %80, !dbg !85
  %219 = fmul float %217, %218, !dbg !86
  %220 = select i1 %189, float %219, float 0.000000e+00, !dbg !87
  %221 = bitcast i32 %188 to float, !dbg !76
  %222 = fsub float %94, %45, !dbg !88
  %223 = fmul float %222, %214, !dbg !89
  %224 = select i1 %112, float %223, float 0.000000e+00, !dbg !90
  %225 = fmul float %224, %221, !dbg !91
  %226 = bitcast i32 %187 to float, !dbg !76
  %227 = fsub float %93, %44, !dbg !88
  %228 = fmul float %227, %218, !dbg !89
  %229 = select i1 %111, float %228, float 0.000000e+00, !dbg !90
  %230 = fmul float %229, %226, !dbg !91
  %231 = bitcast i32 %154 to float, !dbg !64
  %232 = fsub float %96, %55, !dbg !92
  %233 = fmul float %213, %232, !dbg !93
  %234 = select i1 %118, float %233, float 0.000000e+00, !dbg !94
  %235 = fmul float %234, %231, !dbg !95
  %236 = bitcast i32 %153 to float, !dbg !64
  %237 = fsub float %95, %54, !dbg !92
  %238 = fmul float %217, %237, !dbg !93
  %239 = select i1 %117, float %238, float 0.000000e+00, !dbg !94
  %240 = fmul float %239, %236, !dbg !95
  %241 = and i1 %109, %88, !dbg !96
  %242 = and i1 %79, %241, !dbg !97
  %243 = fmul float %222, %232, !dbg !98
  %244 = and i1 %107, %86, !dbg !96
  %245 = and i1 %77, %244, !dbg !97
  %246 = fmul float %227, %237, !dbg !98
  %247 = select i1 %242, i64 %92, i64 0, !dbg !99
  %248 = select i1 %245, i64 %91, i64 0, !dbg !99
  %249 = select i1 %242, i64 %90, i64 0, !dbg !100
  %250 = select i1 %245, i64 %89, i64 0, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %251 = shl nuw nsw i64 %195, 2, !dbg !101
  %252 = shl nuw nsw i64 %198, 2, !dbg !101
  %253 = or disjoint i64 %251, %206, !dbg !102
  %254 = or disjoint i64 %252, %209, !dbg !102
  %255 = or disjoint i64 %253, %148, !dbg !103
  %256 = or disjoint i64 %254, %148, !dbg !103
  %257 = getelementptr float, ptr addrspace(1) %4, i64 %255, !dbg !104
  %258 = getelementptr float, ptr addrspace(1) %4, i64 %256, !dbg !104
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #4, !dbg !105
  %260 = bitcast i32 %259 to float, !dbg !105
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #4, !dbg !105
  %262 = bitcast i32 %261 to float, !dbg !105
  %263 = fmul float %220, %260, !dbg !106
  %264 = fmul float %216, %262, !dbg !106
  %265 = sext i32 %15 to i64, !dbg !107
  %266 = getelementptr i64, ptr addrspace(1) %5, i64 %265, !dbg !107
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %250, i64 %249, ptr addrspace(1) %266, i1 true) #4, !dbg !108
  %267 = getelementptr i64, ptr addrspace(1) %6, i64 %265, !dbg !109
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %248, i64 %247, ptr addrspace(1) %267, i1 true) #4, !dbg !110
  %268 = getelementptr float, ptr addrspace(1) %7, i64 %265, !dbg !111
  %269 = bitcast float %246 to i32, !dbg !112
  %270 = select i1 %245, i32 %269, i32 0, !dbg !113
  %271 = bitcast float %243 to i32, !dbg !112
  %272 = select i1 %242, i32 %271, i32 0, !dbg !113
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %270, i32 %272, ptr addrspace(1) %268, i1 true) #4, !dbg !112
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !114
  %274 = bitcast float %240 to i32, !dbg !115
  %275 = bitcast float %235 to i32, !dbg !115
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %274, i32 %275, ptr addrspace(1) %273, i1 true) #4, !dbg !115
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !116
  %277 = bitcast float %230 to i32, !dbg !117
  %278 = bitcast float %225 to i32, !dbg !117
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %277, i32 %278, ptr addrspace(1) %276, i1 true) #4, !dbg !117
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !118
  %280 = bitcast float %263 to i32, !dbg !119
  %281 = bitcast float %264 to i32, !dbg !119
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %280, i32 %281, ptr addrspace(1) %279, i1 true) #4, !dbg !119
  ret void, !dbg !120
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmggrrefyyngtfixenrh6wsqek6eshrmo5aik2i7gbeonyg6woi6.py", directory: "inductor_cache/mg")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_3", linkageName: "triton_poi_fused_grid_sampler_2d_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 27, column: 19, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 19, scope: !11)
!19 = !DILocation(line: 28, column: 43, scope: !11)
!20 = !DILocation(line: 28, column: 35, scope: !11)
!21 = !DILocation(line: 28, column: 30, scope: !11)
!22 = !DILocation(line: 28, column: 48, scope: !11)
!23 = !DILocation(line: 29, column: 31, scope: !11)
!24 = !DILocation(line: 29, column: 44, scope: !11)
!25 = !DILocation(line: 34, column: 18, scope: !11)
!26 = !DILocation(line: 36, column: 18, scope: !11)
!27 = !DILocation(line: 38, column: 18, scope: !11)
!28 = !DILocation(line: 40, column: 20, scope: !11)
!29 = !DILocation(line: 42, column: 20, scope: !11)
!30 = !DILocation(line: 43, column: 28, scope: !11)
!31 = !DILocation(line: 50, column: 20, scope: !11)
!32 = !DILocation(line: 51, column: 20, scope: !11)
!33 = !DILocation(line: 52, column: 28, scope: !11)
!34 = !DILocation(line: 45, column: 21, scope: !11)
!35 = !DILocation(line: 53, column: 21, scope: !11)
!36 = !DILocation(line: 54, column: 20, scope: !11)
!37 = !DILocation(line: 55, column: 20, scope: !11)
!38 = !DILocation(line: 58, column: 21, scope: !11)
!39 = !DILocation(line: 61, column: 21, scope: !11)
!40 = !DILocation(line: 63, column: 20, scope: !11)
!41 = !DILocation(line: 65, column: 20, scope: !11)
!42 = !DILocation(line: 69, column: 20, scope: !11)
!43 = !DILocation(line: 70, column: 21, scope: !11)
!44 = !DILocation(line: 71, column: 20, scope: !11)
!45 = !DILocation(line: 72, column: 20, scope: !11)
!46 = !DILocation(line: 73, column: 20, scope: !11)
!47 = !DILocation(line: 74, column: 20, scope: !11)
!48 = !DILocation(line: 75, column: 20, scope: !11)
!49 = !DILocation(line: 76, column: 21, scope: !11)
!50 = !DILocation(line: 77, column: 20, scope: !11)
!51 = !DILocation(line: 78, column: 20, scope: !11)
!52 = !DILocation(line: 79, column: 35, scope: !11)
!53 = !DILocation(line: 83, column: 35, scope: !11)
!54 = !DILocation(line: 84, column: 49, scope: !11)
!55 = !DILocation(line: 85, column: 21, scope: !11)
!56 = !DILocation(line: 86, column: 35, scope: !11)
!57 = !DILocation(line: 89, column: 35, scope: !11)
!58 = !DILocation(line: 90, column: 49, scope: !11)
!59 = !DILocation(line: 91, column: 41, scope: !11)
!60 = !DILocation(line: 91, column: 39, scope: !11)
!61 = !DILocation(line: 91, column: 52, scope: !11)
!62 = !DILocation(line: 91, column: 49, scope: !11)
!63 = !DILocation(line: 91, column: 31, scope: !11)
!64 = !DILocation(line: 91, column: 57, scope: !11)
!65 = !DILocation(line: 96, column: 21, scope: !11)
!66 = !DILocation(line: 97, column: 35, scope: !11)
!67 = !DILocation(line: 100, column: 35, scope: !11)
!68 = !DILocation(line: 101, column: 49, scope: !11)
!69 = !DILocation(line: 102, column: 35, scope: !11)
!70 = !DILocation(line: 105, column: 35, scope: !11)
!71 = !DILocation(line: 106, column: 49, scope: !11)
!72 = !DILocation(line: 107, column: 41, scope: !11)
!73 = !DILocation(line: 107, column: 39, scope: !11)
!74 = !DILocation(line: 107, column: 49, scope: !11)
!75 = !DILocation(line: 107, column: 31, scope: !11)
!76 = !DILocation(line: 107, column: 57, scope: !11)
!77 = !DILocation(line: 112, column: 20, scope: !11)
!78 = !DILocation(line: 115, column: 35, scope: !11)
!79 = !DILocation(line: 118, column: 35, scope: !11)
!80 = !DILocation(line: 119, column: 49, scope: !11)
!81 = !DILocation(line: 120, column: 35, scope: !11)
!82 = !DILocation(line: 123, column: 35, scope: !11)
!83 = !DILocation(line: 124, column: 49, scope: !11)
!84 = !DILocation(line: 92, column: 20, scope: !11)
!85 = !DILocation(line: 108, column: 20, scope: !11)
!86 = !DILocation(line: 113, column: 20, scope: !11)
!87 = !DILocation(line: 114, column: 35, scope: !11)
!88 = !DILocation(line: 64, column: 20, scope: !11)
!89 = !DILocation(line: 109, column: 20, scope: !11)
!90 = !DILocation(line: 110, column: 35, scope: !11)
!91 = !DILocation(line: 111, column: 20, scope: !11)
!92 = !DILocation(line: 66, column: 20, scope: !11)
!93 = !DILocation(line: 93, column: 20, scope: !11)
!94 = !DILocation(line: 94, column: 35, scope: !11)
!95 = !DILocation(line: 95, column: 20, scope: !11)
!96 = !DILocation(line: 56, column: 20, scope: !11)
!97 = !DILocation(line: 57, column: 20, scope: !11)
!98 = !DILocation(line: 67, column: 20, scope: !11)
!99 = !DILocation(line: 62, column: 35, scope: !11)
!100 = !DILocation(line: 60, column: 35, scope: !11)
!101 = !DILocation(line: 125, column: 41, scope: !11)
!102 = !DILocation(line: 125, column: 39, scope: !11)
!103 = !DILocation(line: 125, column: 49, scope: !11)
!104 = !DILocation(line: 125, column: 31, scope: !11)
!105 = !DILocation(line: 125, column: 57, scope: !11)
!106 = !DILocation(line: 126, column: 20, scope: !11)
!107 = !DILocation(line: 127, column: 25, scope: !11)
!108 = !DILocation(line: 127, column: 37, scope: !11)
!109 = !DILocation(line: 128, column: 25, scope: !11)
!110 = !DILocation(line: 128, column: 37, scope: !11)
!111 = !DILocation(line: 129, column: 25, scope: !11)
!112 = !DILocation(line: 129, column: 37, scope: !11)
!113 = !DILocation(line: 68, column: 35, scope: !11)
!114 = !DILocation(line: 130, column: 28, scope: !11)
!115 = !DILocation(line: 130, column: 40, scope: !11)
!116 = !DILocation(line: 131, column: 28, scope: !11)
!117 = !DILocation(line: 131, column: 40, scope: !11)
!118 = !DILocation(line: 132, column: 28, scope: !11)
!119 = !DILocation(line: 132, column: 40, scope: !11)
!120 = !DILocation(line: 132, column: 4, scope: !11)
