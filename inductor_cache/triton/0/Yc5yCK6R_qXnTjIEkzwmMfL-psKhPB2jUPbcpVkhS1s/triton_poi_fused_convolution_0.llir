; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %7 = lshr i32 %6, 4, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %9 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !13
  %10 = insertelement <2 x i32> %9, i32 %5, i64 1, !dbg !13
  %11 = shl <2 x i32> %10, <i32 4, i32 6>, !dbg !13
  %12 = insertelement <2 x i32> poison, i32 %6, i64 0, !dbg !14
  %13 = insertelement <2 x i32> %12, i32 %7, i64 1, !dbg !14
  %14 = and <2 x i32> %13, <i32 15, i32 7>, !dbg !14
  %15 = or disjoint <2 x i32> %11, %14, !dbg !15
  %16 = extractelement <2 x i32> %15, i64 1, !dbg !16
  %17 = or disjoint i32 %16, 8, !dbg !16
  %18 = or disjoint i32 %16, 16, !dbg !16
  %19 = or disjoint i32 %16, 24, !dbg !16
  %20 = or disjoint i32 %16, 32, !dbg !16
  %21 = or disjoint i32 %16, 40, !dbg !16
  %22 = or disjoint i32 %16, 48, !dbg !16
  %23 = or disjoint i32 %16, 56, !dbg !16
  %24 = icmp slt i32 %16, 484, !dbg !17
  %25 = icmp slt i32 %17, 484, !dbg !17
  %26 = icmp slt i32 %18, 484, !dbg !17
  %27 = icmp slt i32 %19, 484, !dbg !17
  %28 = icmp slt i32 %20, 484, !dbg !17
  %29 = icmp slt i32 %21, 484, !dbg !17
  %30 = icmp slt i32 %22, 484, !dbg !17
  %31 = icmp slt i32 %23, 484, !dbg !17
  %32 = extractelement <2 x i32> %15, i64 0, !dbg !18
  %33 = icmp slt i32 %32, 11, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %34 = sdiv i32 %.frozen, 11, !dbg !19
  %35 = mul i32 %34, 11, !dbg !20
  %.decomposed = sub i32 %.frozen, %35, !dbg !20
  %.frozen1 = freeze i32 %17, !dbg !19
  %36 = sdiv i32 %.frozen1, 11, !dbg !19
  %37 = mul i32 %36, 11, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %37, !dbg !20
  %.frozen3 = freeze i32 %18, !dbg !19
  %38 = sdiv i32 %.frozen3, 11, !dbg !19
  %39 = mul i32 %38, 11, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %39, !dbg !20
  %.frozen5 = freeze i32 %19, !dbg !19
  %40 = sdiv i32 %.frozen5, 11, !dbg !19
  %41 = mul i32 %40, 11, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %41, !dbg !20
  %.frozen7 = freeze i32 %20, !dbg !19
  %42 = sdiv i32 %.frozen7, 11, !dbg !19
  %43 = mul i32 %42, 11, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %43, !dbg !20
  %.frozen9 = freeze i32 %21, !dbg !19
  %44 = sdiv i32 %.frozen9, 11, !dbg !19
  %45 = mul i32 %44, 11, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %45, !dbg !20
  %.frozen11 = freeze i32 %22, !dbg !19
  %46 = sdiv i32 %.frozen11, 11, !dbg !19
  %47 = mul i32 %46, 11, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %47, !dbg !20
  %.frozen13 = freeze i32 %23, !dbg !19
  %48 = sdiv i32 %.frozen13, 11, !dbg !19
  %49 = mul i32 %48, 11, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %49, !dbg !20
  %50 = mul i32 %32, 11, !dbg !21
  %51 = add i32 %50, %.decomposed, !dbg !22
  %52 = mul i32 %34, 121, !dbg !23
  %53 = mul i32 %36, 121, !dbg !23
  %54 = mul i32 %38, 121, !dbg !23
  %55 = mul i32 %40, 121, !dbg !23
  %56 = mul i32 %42, 121, !dbg !23
  %57 = mul i32 %44, 121, !dbg !23
  %58 = mul i32 %46, 121, !dbg !23
  %59 = mul i32 %48, 121, !dbg !23
  %60 = add i32 %51, %52, !dbg !24
  %61 = add i32 %53, %.decomposed2, !dbg !22
  %62 = add i32 %61, %50, !dbg !24
  %63 = add i32 %54, %.decomposed4, !dbg !22
  %64 = add i32 %63, %50, !dbg !24
  %65 = add i32 %55, %.decomposed6, !dbg !22
  %66 = add i32 %65, %50, !dbg !24
  %67 = add i32 %56, %.decomposed8, !dbg !22
  %68 = add i32 %67, %50, !dbg !24
  %69 = add i32 %57, %.decomposed10, !dbg !22
  %70 = add i32 %69, %50, !dbg !24
  %71 = add i32 %58, %.decomposed12, !dbg !22
  %72 = add i32 %71, %50, !dbg !24
  %73 = add i32 %59, %.decomposed14, !dbg !22
  %74 = add i32 %73, %50, !dbg !24
  %75 = sext i32 %60 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = sext i32 %62 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %64 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %66 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = sext i32 %68 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !25
  %85 = sext i32 %70 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !25
  %87 = sext i32 %72 to i64, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !25
  %89 = sext i32 %74 to i64, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !25
  %91 = and i1 %24, %33, !dbg !26
  %92 = and i1 %25, %33, !dbg !26
  %93 = and i1 %26, %33, !dbg !26
  %94 = and i1 %27, %33, !dbg !26
  %95 = and i1 %28, %33, !dbg !26
  %96 = and i1 %29, %33, !dbg !26
  %97 = and i1 %30, %33, !dbg !26
  %98 = and i1 %31, %33, !dbg !26
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %91) #1, !dbg !27
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %92) #1, !dbg !27
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %93) #1, !dbg !27
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %94) #1, !dbg !27
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %95) #1, !dbg !27
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %96) #1, !dbg !27
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %97) #1, !dbg !27
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %98) #1, !dbg !27
  %107 = mul i32 %16, 11, !dbg !28
  %108 = mul i32 %17, 11, !dbg !28
  %109 = mul i32 %18, 11, !dbg !28
  %110 = mul i32 %19, 11, !dbg !28
  %111 = mul i32 %20, 11, !dbg !28
  %112 = mul i32 %21, 11, !dbg !28
  %113 = mul i32 %22, 11, !dbg !28
  %114 = mul i32 %23, 11, !dbg !28
  %115 = add i32 %32, %107, !dbg !29
  %116 = add i32 %32, %108, !dbg !29
  %117 = add i32 %32, %109, !dbg !29
  %118 = add i32 %32, %110, !dbg !29
  %119 = add i32 %32, %111, !dbg !29
  %120 = add i32 %32, %112, !dbg !29
  %121 = add i32 %32, %113, !dbg !29
  %122 = add i32 %32, %114, !dbg !29
  %123 = sext i32 %115 to i64, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !30
  %125 = sext i32 %116 to i64, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !30
  %127 = sext i32 %117 to i64, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !30
  %129 = sext i32 %118 to i64, !dbg !30
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !30
  %131 = sext i32 %119 to i64, !dbg !30
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !30
  %133 = sext i32 %120 to i64, !dbg !30
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !30
  %135 = sext i32 %121 to i64, !dbg !30
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !30
  %137 = sext i32 %122 to i64, !dbg !30
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %124, i1 %91) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %126, i1 %92) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %128, i1 %93) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %130, i1 %94) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %132, i1 %95) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %134, i1 %96) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %136, i1 %97) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %138, i1 %98) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp4cgxeimt77ei4y57jzasagdbsxp4ay7w2usiwvsq7mml5xpbxp.py", directory: "inductor_cache/p4")
!4 = !{ptr @triton_poi_fused_convolution_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_0", linkageName: "triton_poi_fused_convolution_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 60, scope: !7)
!27 = !DILocation(line: 32, column: 52, scope: !7)
!28 = !DILocation(line: 33, column: 33, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 44, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
