; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 8, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 254, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = icmp slt i32 %24, 256, !dbg !14
  %26 = sdiv i32 %24, 16, !dbg !15
  %27 = srem i32 %26, 4, !dbg !16
  %28 = sext i32 %24 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !17
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %25) #3, !dbg !18
  %31 = sext i32 %27 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %25) #3, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %25) #3, !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %25) #3, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %25) #3, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %25) #3, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %25) #3, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !27
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %25) #3, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %25) #3, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %25) #3, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %25) #3, !dbg !32
  %53 = bitcast i32 %52 to float, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %25) #3, !dbg !32
  %55 = bitcast i32 %54 to float, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #3, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #3, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #3, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #3, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !37
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %25) #3, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !39
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %25) #3, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %25) #3, !dbg !40
  %67 = getelementptr float, ptr addrspace(1) %12, i64 %31, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %25) #3, !dbg !42
  %69 = bitcast i32 %68 to float, !dbg !42
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %25) #3, !dbg !42
  %71 = bitcast i32 %70 to float, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %13, i64 %31, !dbg !43
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %25) #3, !dbg !44
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %25) #3, !dbg !44
  %75 = getelementptr float, ptr addrspace(1) %14, i64 %31, !dbg !45
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #3, !dbg !46
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #3, !dbg !46
  %78 = fadd float %37, 0x3EE4F8B580000000, !dbg !47
  %79 = fadd float %39, 0x3EE4F8B580000000, !dbg !47
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %80, 0, !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %81, 0, !dbg !48
  br i1 %.not.i, label %87, label %82, !dbg !48

82:                                               ; preds = %18
  br i1 %.not1.i, label %85, label %83, !dbg !48

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

87:                                               ; preds = %18
  br i1 %.not1.i, label %90, label %88, !dbg !48

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !48
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i1 = icmp eq i32 %92, 0, !dbg !48
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i4 = icmp eq i32 %93, 0, !dbg !48
  br i1 %.not.i1, label %99, label %94, !dbg !48

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !48

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !48

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %95, %97, %100, %102
  %.0.i3 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !48
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !49
  %106 = fadd float %53, 0x3EE4F8B580000000, !dbg !50
  %107 = fadd float %55, 0x3EE4F8B580000000, !dbg !50
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i6 = icmp eq i32 %108, 0, !dbg !51
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i9 = icmp eq i32 %109, 0, !dbg !51
  br i1 %.not.i6, label %115, label %110, !dbg !51

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !51

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

115:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %118, label %116, !dbg !51

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

__nv_sqrtf.exit10:                                ; preds = %111, %113, %116, %118
  %.0.i8 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !51
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i11 = icmp eq i32 %120, 0, !dbg !51
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i14 = icmp eq i32 %121, 0, !dbg !51
  br i1 %.not.i11, label %127, label %122, !dbg !51

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !51

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

127:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %130, label %128, !dbg !51

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

__nv_sqrtf.exit15:                                ; preds = %123, %125, %128, %130
  %.0.i13 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !51
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !52
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !52
  %134 = fadd float %69, 0x3EE4F8B580000000, !dbg !53
  %135 = fadd float %71, 0x3EE4F8B580000000, !dbg !53
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i16 = icmp eq i32 %136, 0, !dbg !54
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i19 = icmp eq i32 %137, 0, !dbg !54
  br i1 %.not.i16, label %143, label %138, !dbg !54

138:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %141, label %139, !dbg !54

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

143:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %146, label %144, !dbg !54

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

__nv_sqrtf.exit20:                                ; preds = %139, %141, %144, %146
  %.0.i18 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !54
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i21 = icmp eq i32 %148, 0, !dbg !54
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i24 = icmp eq i32 %149, 0, !dbg !54
  br i1 %.not.i21, label %155, label %150, !dbg !54

150:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %153, label %151, !dbg !54

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

155:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %158, label %156, !dbg !54

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

__nv_sqrtf.exit25:                                ; preds = %151, %153, %156, %158
  %.0.i23 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !54
  %160 = extractvalue { i32, i32 } %63, 1, !dbg !38
  %161 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !20
  %162 = insertelement <2 x i32> %161, i32 %66, i64 1, !dbg !20
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !20
  %164 = extractvalue { i32, i32 } %63, 0, !dbg !38
  %165 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !20
  %166 = insertelement <2 x i32> %165, i32 %65, i64 1, !dbg !20
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !20
  %168 = extractvalue { i32, i32 } %30, 1, !dbg !18
  %169 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !24
  %170 = insertelement <2 x i32> %169, i32 %74, i64 1, !dbg !24
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !24
  %172 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !26
  %173 = insertelement <2 x i32> %172, i32 %77, i64 1, !dbg !26
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !26
  %175 = extractvalue { i32, i32 } %47, 1, !dbg !28
  %176 = bitcast i32 %175 to float, !dbg !28
  %177 = bitcast i32 %50 to float, !dbg !30
  %178 = fsub float %176, %177, !dbg !55
  %179 = fmul float %178, %133, !dbg !56
  %180 = bitcast i32 %58 to float, !dbg !34
  %181 = fmul float %179, %180, !dbg !57
  %182 = bitcast i32 %61 to float, !dbg !36
  %183 = fadd float %181, %182, !dbg !58
  %184 = extractvalue { i32, i32 } %30, 0, !dbg !18
  %185 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %186 = insertelement <2 x i32> %185, i32 %73, i64 1, !dbg !24
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !24
  %188 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !26
  %189 = insertelement <2 x i32> %188, i32 %76, i64 1, !dbg !26
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !26
  %191 = extractvalue { i32, i32 } %47, 0, !dbg !28
  %192 = bitcast i32 %191 to float, !dbg !28
  %193 = bitcast i32 %49 to float, !dbg !30
  %194 = fsub float %192, %193, !dbg !55
  %195 = fmul float %194, %132, !dbg !56
  %196 = bitcast i32 %57 to float, !dbg !34
  %197 = fmul float %195, %196, !dbg !57
  %198 = bitcast i32 %60 to float, !dbg !36
  %199 = fadd float %197, %198, !dbg !58
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !59
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !59
  %202 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !18
  %203 = insertelement <2 x i32> %202, i32 %164, i64 1, !dbg !18
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !18
  %205 = fsub <2 x float> %204, %167, !dbg !60
  %206 = insertelement <2 x float> poison, float %104, i64 0, !dbg !61
  %207 = insertelement <2 x float> %206, float %200, i64 1, !dbg !61
  %208 = fmul <2 x float> %205, %207, !dbg !61
  %209 = fmul <2 x float> %208, %187, !dbg !62
  %210 = fadd <2 x float> %209, %190, !dbg !63
  %211 = extractelement <2 x float> %210, i64 0, !dbg !64
  %212 = fadd float %211, %199, !dbg !64
  %213 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !18
  %214 = insertelement <2 x i32> %213, i32 %160, i64 1, !dbg !18
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !18
  %216 = fsub <2 x float> %215, %163, !dbg !60
  %217 = insertelement <2 x float> poison, float %105, i64 0, !dbg !61
  %218 = insertelement <2 x float> %217, float %201, i64 1, !dbg !61
  %219 = fmul <2 x float> %216, %218, !dbg !61
  %220 = fmul <2 x float> %219, %171, !dbg !62
  %221 = fadd <2 x float> %220, %174, !dbg !63
  %222 = extractelement <2 x float> %221, i64 0, !dbg !64
  %223 = fadd float %222, %183, !dbg !64
  %224 = extractelement <2 x float> %210, i64 1, !dbg !65
  %225 = fadd float %212, %224, !dbg !65
  %226 = extractelement <2 x float> %221, i64 1, !dbg !65
  %227 = fadd float %223, %226, !dbg !65
  %228 = fsub float 0.000000e+00, %225, !dbg !66
  %229 = fsub float 0.000000e+00, %227, !dbg !66
  %230 = fmul float %228, 0x3FF7154760000000, !dbg !70
  %231 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %230) #3, !dbg !70
  %232 = fmul float %229, 0x3FF7154760000000, !dbg !70
  %233 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %232) #3, !dbg !70
  %234 = fadd float %231, 1.000000e+00, !dbg !71
  %235 = fadd float %233, 1.000000e+00, !dbg !71
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %234) #3, !dbg !72
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %235) #3, !dbg !72
  %238 = fmul float %225, %236, !dbg !73
  %239 = fmul float %227, %237, !dbg !73
  %240 = fsub float 1.000000e+00, %236, !dbg !74
  %241 = fsub float 1.000000e+00, %237, !dbg !74
  %242 = fmul float %225, %240, !dbg !75
  %243 = fmul float %227, %241, !dbg !75
  %244 = fadd float %242, 1.000000e+00, !dbg !76
  %245 = fadd float %243, 1.000000e+00, !dbg !76
  %246 = fmul float %236, %244, !dbg !77
  %247 = fmul float %237, %245, !dbg !77
  %248 = getelementptr float, ptr addrspace(1) %15, i64 %28, !dbg !78
  %249 = bitcast float %238 to i32, !dbg !79
  %250 = bitcast float %239 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %249, i32 %250, ptr addrspace(1) %248, i1 %25) #3, !dbg !79
  %251 = getelementptr float, ptr addrspace(1) %16, i64 %28, !dbg !80
  %252 = bitcast float %246 to i32, !dbg !81
  %253 = bitcast float %247 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %252, i32 %253, ptr addrspace(1) %251, i1 %25) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czoltedlqoiqeniq3w2xbrkbwy62tiyrwc2nng75nevh63zsxs6r.py", directory: "inductor_cache/zo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 26, scope: !7)
!49 = !DILocation(line: 46, column: 18, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 27, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 27, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 19, scope: !7)
!60 = !DILocation(line: 41, column: 18, scope: !7)
!61 = !DILocation(line: 49, column: 19, scope: !7)
!62 = !DILocation(line: 50, column: 20, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 47, column: 30, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!69 = !DILocation(line: 70, column: 23, scope: !7)
!70 = !DILocation(line: 47, column: 29, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 47, column: 20, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 47, column: 16, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 19, scope: !7)
!75 = !DILocation(line: 73, column: 20, scope: !7)
!76 = !DILocation(line: 74, column: 20, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 76, column: 25, scope: !7)
!79 = !DILocation(line: 76, column: 37, scope: !7)
!80 = !DILocation(line: 77, column: 25, scope: !7)
!81 = !DILocation(line: 77, column: 37, scope: !7)
!82 = !DILocation(line: 77, column: 4, scope: !7)
