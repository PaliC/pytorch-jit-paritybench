#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":19:0)
#loc1 = loc(unknown)
#loc10 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":37:57)
#loc14 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":42:59)
#loc43 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":71:59)
#loc52 = loc(callsite(#loc1 at #loc10))
#loc55 = loc(callsite(#loc1 at #loc14))
#loc61 = loc(callsite(#loc1 at #loc43))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_eq_log_sigmoid_forward_mean_mul_neg_pow_rsub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_2 = arith.constant 1.000000e-07 : f32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = arith.cmpf oeq, %3, %cst_4 : tensor<256xf32, #blocked> loc(#loc7)
    %8 = arith.extui %7 : tensor<256xi1, #blocked> to tensor<256xi64, #blocked> loc(#loc8)
    %9 = "tt.reduce"(%8) <{axis = 0 : i32}> ({
    ^bb0(%arg4: i64 loc(callsite(#loc1 at #loc10)), %arg5: i64 loc(callsite(#loc1 at #loc10))):
      %49 = arith.addi %arg4, %arg5 : i64 loc(#loc63)
      tt.reduce.return %49 : i64 loc(#loc51)
    }) : (tensor<256xi64, #blocked>) -> i64 loc(#loc51)
    %10 = arith.cmpf oeq, %3, %cst_3 : tensor<256xf32, #blocked> loc(#loc12)
    %11 = arith.extui %10 : tensor<256xi1, #blocked> to tensor<256xi64, #blocked> loc(#loc13)
    %12 = "tt.reduce"(%11) <{axis = 0 : i32}> ({
    ^bb0(%arg4: i64 loc(callsite(#loc1 at #loc14)), %arg5: i64 loc(callsite(#loc1 at #loc14))):
      %49 = arith.addi %arg4, %arg5 : i64 loc(#loc64)
      tt.reduce.return %49 : i64 loc(#loc54)
    }) : (tensor<256xi64, #blocked>) -> i64 loc(#loc54)
    %13 = arith.sitofp %12 : i64 to f32 loc(#loc15)
    %14 = arith.addi %9, %12 : i64 loc(#loc16)
    %15 = arith.sitofp %14 : i64 to f32 loc(#loc17)
    %16 = arith.addf %15, %cst_2 : f32 loc(#loc18)
    %17 = arith.divf %13, %16 : f32 loc(#loc19)
    %18 = tt.splat %17 : f32 -> tensor<256xf32, #blocked> loc(#loc20)
    %19 = arith.mulf %18, %3 : tensor<256xf32, #blocked> loc(#loc20)
    %20 = arith.cmpf olt, %cst_3, %6 : tensor<256xf32, #blocked> loc(#loc56)
    %21 = arith.select %20, %cst_3, %6 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc57)
    %22 = math.absf %6 : tensor<256xf32, #blocked> loc(#loc24)
    %23 = arith.subf %cst_3, %22 : tensor<256xf32, #blocked> loc(#loc25)
    %24 = math.exp %23 : tensor<256xf32, #blocked> loc(#loc26)
    %25 = tt.extern_elementwise %24 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc27)
    %26 = arith.subf %21, %25 : tensor<256xf32, #blocked> loc(#loc28)
    %27 = arith.mulf %19, %26 : tensor<256xf32, #blocked> loc(#loc29)
    %28 = arith.subf %cst_1, %17 : f32 loc(#loc30)
    %29 = arith.subf %cst_4, %3 : tensor<256xf32, #blocked> loc(#loc31)
    %30 = tt.splat %28 : f32 -> tensor<256xf32, #blocked> loc(#loc32)
    %31 = arith.mulf %30, %29 : tensor<256xf32, #blocked> loc(#loc32)
    %32 = arith.subf %cst_3, %6 : tensor<256xf32, #blocked> loc(#loc33)
    %33 = arith.cmpf olt, %cst_3, %32 : tensor<256xf32, #blocked> loc(#loc58)
    %34 = arith.select %33, %cst_3, %32 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc59)
    %35 = math.absf %32 : tensor<256xf32, #blocked> loc(#loc35)
    %36 = arith.subf %cst_3, %35 : tensor<256xf32, #blocked> loc(#loc36)
    %37 = math.exp %36 : tensor<256xf32, #blocked> loc(#loc37)
    %38 = tt.extern_elementwise %37 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc38)
    %39 = arith.subf %34, %38 : tensor<256xf32, #blocked> loc(#loc39)
    %40 = arith.mulf %31, %39 : tensor<256xf32, #blocked> loc(#loc40)
    %41 = arith.addf %27, %40 : tensor<256xf32, #blocked> loc(#loc41)
    %42 = arith.subf %cst_3, %41 : tensor<256xf32, #blocked> loc(#loc42)
    %43 = "tt.reduce"(%42) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc43)), %arg5: f32 loc(callsite(#loc1 at #loc43))):
      %49 = arith.addf %arg4, %arg5 : f32 loc(#loc65)
      tt.reduce.return %49 : f32 loc(#loc60)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc60)
    %44 = arith.addf %43, %cst_0 : f32 loc(#loc62)
    %45 = arith.divf %44, %cst : f32 loc(#loc46)
    %46 = tt.splat %45 : f32 -> tensor<1xf32, #blocked1> loc(#loc46)
    gpu.barrier loc(#loc47)
    %47 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc48)
    %48 = tt.splat %47 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc48)
    tt.store %48, %46 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":27:26)
#loc3 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":31:30)
#loc4 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":31:35)
#loc5 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":32:31)
#loc6 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":32:36)
#loc7 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":34:19)
#loc8 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":35:19)
#loc9 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc12 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":39:19)
#loc13 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":40:19)
#loc15 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":43:21)
#loc16 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":44:19)
#loc17 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":45:21)
#loc18 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":47:20)
#loc19 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":48:20)
#loc20 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":49:20)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc22 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":50:41)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc24 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":51:24)
#loc25 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":52:13)
#loc26 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":53:24)
#loc27 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":54:28)
#loc28 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":55:20)
#loc29 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":56:20)
#loc30 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":57:19)
#loc31 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":58:19)
#loc32 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":59:20)
#loc33 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":60:13)
#loc34 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":61:41)
#loc35 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":62:24)
#loc36 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":63:13)
#loc37 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":64:24)
#loc38 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":65:28)
#loc39 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":66:20)
#loc40 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":67:20)
#loc41 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":68:20)
#loc42 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":69:13)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc45 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":71:45)
#loc46 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":73:20)
#loc47 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":74:4)
#loc48 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":75:28)
#loc49 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":75:63)
#loc50 = loc("inductor_cache/p7/cp7vq4abu22ulllrstrzkrp5a5o5ebk5ntaisukuxtnoebue7h5a.py":75:4)
#loc51 = loc(callsite(#loc9 at #loc10))
#loc53 = loc(callsite(#loc11 at #loc9))
#loc54 = loc(callsite(#loc9 at #loc14))
#loc56 = loc(callsite(#loc21 at #loc22))
#loc57 = loc(callsite(#loc23 at #loc22))
#loc58 = loc(callsite(#loc21 at #loc34))
#loc59 = loc(callsite(#loc23 at #loc34))
#loc60 = loc(callsite(#loc9 at #loc43))
#loc62 = loc(callsite(#loc44 at #loc45))
#loc63 = loc(callsite(#loc53 at #loc10))
#loc64 = loc(callsite(#loc53 at #loc14))
#loc65 = loc(callsite(#loc53 at #loc43))
