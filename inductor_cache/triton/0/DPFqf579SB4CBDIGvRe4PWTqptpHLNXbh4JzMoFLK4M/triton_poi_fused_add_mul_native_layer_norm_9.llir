; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_native_layer_norm_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 16, !dbg !12
  %12 = and i32 %10, 15, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 16, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 4, !dbg !15
  %16 = mul i32 %15, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl nsw i32 %.decomposed, 2, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %14) #1, !dbg !19
  %21 = mul i32 %15, 24, !dbg !20
  %22 = add i32 %21, 8, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #1, !dbg !23
  %26 = shl i32 %13, 2, !dbg !24
  %27 = sext i32 %26 to i64, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #1, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !27
  %31 = or disjoint i32 %17, 1, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #1, !dbg !30
  %35 = add i32 %21, 9, !dbg !31
  %36 = sext i32 %35 to i64, !dbg !32
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !32
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %14) #1, !dbg !33
  %39 = or disjoint i32 %26, 1, !dbg !34
  %40 = sext i32 %39 to i64, !dbg !35
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !35
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %14) #1, !dbg !36
  %43 = getelementptr i8, ptr addrspace(1) %3, i64 4, !dbg !37
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !38
  %45 = or disjoint i32 %17, 2, !dbg !39
  %46 = sext i32 %45 to i64, !dbg !40
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !40
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %14) #1, !dbg !41
  %49 = add i32 %21, 10, !dbg !42
  %50 = sext i32 %49 to i64, !dbg !43
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !43
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %14) #1, !dbg !44
  %53 = or disjoint i32 %26, 2, !dbg !45
  %54 = sext i32 %53 to i64, !dbg !46
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !46
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %14) #1, !dbg !47
  %57 = getelementptr i8, ptr addrspace(1) %3, i64 8, !dbg !48
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !49
  %59 = or disjoint i32 %17, 3, !dbg !50
  %60 = sext i32 %59 to i64, !dbg !51
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !51
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %14) #1, !dbg !52
  %63 = add i32 %21, 11, !dbg !53
  %64 = sext i32 %63 to i64, !dbg !54
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !54
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %14) #1, !dbg !55
  %67 = or disjoint i32 %26, 3, !dbg !56
  %68 = sext i32 %67 to i64, !dbg !57
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !57
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %14) #1, !dbg !58
  %71 = getelementptr i8, ptr addrspace(1) %3, i64 12, !dbg !59
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !60
  %73 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !19
  %74 = insertelement <2 x i32> %73, i32 %34, i64 1, !dbg !19
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !19
  %76 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !23
  %77 = insertelement <2 x i32> %76, i32 %38, i64 1, !dbg !23
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !23
  %79 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !26
  %80 = insertelement <2 x i32> %79, i32 %42, i64 1, !dbg !26
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !26
  %82 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !27
  %83 = insertelement <2 x i32> %82, i32 %44, i64 1, !dbg !27
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !27
  %85 = fadd <2 x float> %81, %84, !dbg !61
  %86 = fmul <2 x float> %85, %78, !dbg !62
  %87 = fadd <2 x float> %86, %75, !dbg !63
  %88 = extractelement <2 x float> %87, i64 0, !dbg !64
  %89 = extractelement <2 x float> %87, i64 1, !dbg !65
  %90 = fadd float %88, %89, !dbg !66
  %91 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !41
  %92 = insertelement <2 x i32> %91, i32 %62, i64 1, !dbg !41
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !41
  %94 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !44
  %95 = insertelement <2 x i32> %94, i32 %66, i64 1, !dbg !44
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !44
  %97 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !47
  %98 = insertelement <2 x i32> %97, i32 %70, i64 1, !dbg !47
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !47
  %100 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !49
  %101 = insertelement <2 x i32> %100, i32 %72, i64 1, !dbg !49
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !49
  %103 = fadd <2 x float> %99, %102, !dbg !67
  %104 = fmul <2 x float> %103, %96, !dbg !68
  %105 = fadd <2 x float> %104, %93, !dbg !69
  %106 = extractelement <2 x float> %105, i64 0, !dbg !70
  %107 = fadd float %90, %106, !dbg !71
  %108 = extractelement <2 x float> %105, i64 1, !dbg !72
  %109 = fadd float %107, %108, !dbg !73
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float 4.000000e+00) #1, !dbg !74
  %111 = fsub float %88, %110, !dbg !64
  %112 = fmul float %111, %111, !dbg !75
  %113 = fsub float %89, %110, !dbg !65
  %114 = fmul float %113, %113, !dbg !76
  %115 = fadd float %112, %114, !dbg !77
  %116 = fsub float %106, %110, !dbg !70
  %117 = fmul float %116, %116, !dbg !78
  %118 = fadd float %117, %115, !dbg !79
  %119 = fsub float %108, %110, !dbg !72
  %120 = fmul float %119, %119, !dbg !80
  %121 = fadd float %118, %120, !dbg !81
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 4.000000e+00) #1, !dbg !82
  %123 = sext i32 %13 to i64, !dbg !83
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %123, !dbg !83
  %125 = icmp eq i32 %11, 0, !dbg !84
  %126 = bitcast float %110 to i32, !dbg !84
  %127 = and i1 %125, %14, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %124, i1 %127) #1, !dbg !84
  %128 = getelementptr float, ptr addrspace(1) %5, i64 %123, !dbg !85
  %129 = bitcast float %122 to i32, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %128, i1 %127) #1, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck2sqgbb6iwu4vrgfukxirdgrlvhg7snbchapv2z6eumngfn5ok2.py", directory: "inductor_cache/k2")
!4 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_9, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_native_layer_norm_9", linkageName: "triton_poi_fused_add_mul_native_layer_norm_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 42, scope: !7)
!24 = !DILocation(line: 29, column: 32, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 37, scope: !7)
!27 = !DILocation(line: 30, column: 19, scope: !7)
!28 = !DILocation(line: 32, column: 34, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 41, scope: !7)
!31 = !DILocation(line: 33, column: 34, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 42, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 20, scope: !7)
!39 = !DILocation(line: 37, column: 35, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 38, column: 36, scope: !7)
!43 = !DILocation(line: 38, column: 31, scope: !7)
!44 = !DILocation(line: 38, column: 44, scope: !7)
!45 = !DILocation(line: 39, column: 35, scope: !7)
!46 = !DILocation(line: 39, column: 31, scope: !7)
!47 = !DILocation(line: 39, column: 42, scope: !7)
!48 = !DILocation(line: 40, column: 31, scope: !7)
!49 = !DILocation(line: 40, column: 20, scope: !7)
!50 = !DILocation(line: 42, column: 35, scope: !7)
!51 = !DILocation(line: 42, column: 31, scope: !7)
!52 = !DILocation(line: 42, column: 42, scope: !7)
!53 = !DILocation(line: 43, column: 36, scope: !7)
!54 = !DILocation(line: 43, column: 31, scope: !7)
!55 = !DILocation(line: 43, column: 44, scope: !7)
!56 = !DILocation(line: 44, column: 35, scope: !7)
!57 = !DILocation(line: 44, column: 31, scope: !7)
!58 = !DILocation(line: 44, column: 42, scope: !7)
!59 = !DILocation(line: 45, column: 31, scope: !7)
!60 = !DILocation(line: 45, column: 20, scope: !7)
!61 = !DILocation(line: 47, column: 18, scope: !7)
!62 = !DILocation(line: 48, column: 18, scope: !7)
!63 = !DILocation(line: 49, column: 18, scope: !7)
!64 = !DILocation(line: 64, column: 19, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 53, column: 19, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 55, column: 20, scope: !7)
!69 = !DILocation(line: 56, column: 20, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 57, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 61, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 20, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 67, column: 20, scope: !7)
!77 = !DILocation(line: 68, column: 20, scope: !7)
!78 = !DILocation(line: 70, column: 20, scope: !7)
!79 = !DILocation(line: 71, column: 20, scope: !7)
!80 = !DILocation(line: 73, column: 20, scope: !7)
!81 = !DILocation(line: 74, column: 20, scope: !7)
!82 = !DILocation(line: 75, column: 20, scope: !7)
!83 = !DILocation(line: 76, column: 25, scope: !7)
!84 = !DILocation(line: 76, column: 37, scope: !7)
!85 = !DILocation(line: 77, column: 25, scope: !7)
!86 = !DILocation(line: 77, column: 37, scope: !7)
!87 = !DILocation(line: 77, column: 4, scope: !7)
