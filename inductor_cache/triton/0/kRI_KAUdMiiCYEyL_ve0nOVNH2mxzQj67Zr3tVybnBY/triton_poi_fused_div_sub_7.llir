; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %9, 6, !dbg !12
  %10 = and i32 %.lobit1, 3, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = or disjoint i32 %11, 4, !dbg !13
  %13 = or disjoint i32 %11, 8, !dbg !13
  %14 = or disjoint i32 %11, 12, !dbg !13
  %15 = or disjoint i32 %8, 1, !dbg !13
  %16 = or disjoint i32 %8, 2, !dbg !13
  %17 = or disjoint i32 %8, 3, !dbg !13
  %18 = or disjoint i32 %8, 4, !dbg !13
  %19 = or disjoint i32 %8, 5, !dbg !13
  %20 = or disjoint i32 %8, 6, !dbg !13
  %21 = or disjoint i32 %8, 7, !dbg !13
  %22 = or disjoint i32 %8, 8, !dbg !13
  %23 = or disjoint i32 %8, 9, !dbg !13
  %24 = or disjoint i32 %8, 10, !dbg !13
  %25 = or disjoint i32 %8, 11, !dbg !13
  %26 = or disjoint i32 %8, 12, !dbg !13
  %27 = or disjoint i32 %8, 13, !dbg !13
  %28 = or disjoint i32 %8, 14, !dbg !13
  %29 = or disjoint i32 %8, 15, !dbg !13
  %30 = icmp slt i32 %11, 12, !dbg !14
  %31 = icmp slt i32 %12, 12, !dbg !14
  %32 = icmp slt i32 %13, 12, !dbg !14
  %33 = icmp slt i32 %8, 0, !dbg !14
  %34 = icmp slt i32 %8, 12, !dbg !14
  %35 = icmp slt i32 %15, 12, !dbg !14
  %36 = icmp slt i32 %16, 12, !dbg !14
  %37 = icmp slt i32 %17, 12, !dbg !14
  %38 = icmp slt i32 %18, 12, !dbg !14
  %39 = icmp slt i32 %19, 12, !dbg !14
  %40 = icmp slt i32 %20, 12, !dbg !14
  %41 = icmp slt i32 %21, 12, !dbg !14
  %42 = icmp slt i32 %22, 12, !dbg !14
  %43 = icmp slt i32 %23, 12, !dbg !14
  %44 = icmp slt i32 %24, 12, !dbg !14
  %45 = icmp slt i32 %25, 12, !dbg !14
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %47 = shl i32 %46, 8, !dbg !16
  %48 = shl i32 %9, 2, !dbg !17
  %49 = and i32 %48, 252, !dbg !17
  %50 = and i32 %9, 255, !dbg !17
  %51 = or disjoint i32 %47, %49, !dbg !18
  %52 = or disjoint i32 %47, %50, !dbg !18
  %53 = srem i32 %11, 3, !dbg !19
  %54 = srem i32 %12, 3, !dbg !19
  %55 = srem i32 %13, 3, !dbg !19
  %56 = srem i32 %14, 3, !dbg !19
  %.frozen = freeze i32 %8, !dbg !20
  %57 = sdiv i32 %.frozen, 3, !dbg !20
  %58 = mul i32 %57, 3, !dbg !19
  %.decomposed = sub i32 %.frozen, %58, !dbg !19
  %.frozen2 = freeze i32 %15, !dbg !20
  %59 = sdiv i32 %.frozen2, 3, !dbg !20
  %60 = mul i32 %59, 3, !dbg !19
  %.decomposed3 = sub i32 %.frozen2, %60, !dbg !19
  %.frozen4 = freeze i32 %16, !dbg !20
  %61 = sdiv i32 %.frozen4, 3, !dbg !20
  %62 = mul i32 %61, 3, !dbg !19
  %.decomposed5 = sub i32 %.frozen4, %62, !dbg !19
  %.frozen6 = freeze i32 %17, !dbg !20
  %63 = sdiv i32 %.frozen6, 3, !dbg !20
  %64 = mul i32 %63, 3, !dbg !19
  %.decomposed7 = sub i32 %.frozen6, %64, !dbg !19
  %.frozen8 = freeze i32 %18, !dbg !20
  %65 = sdiv i32 %.frozen8, 3, !dbg !20
  %66 = mul i32 %65, 3, !dbg !19
  %.decomposed9 = sub i32 %.frozen8, %66, !dbg !19
  %.frozen10 = freeze i32 %19, !dbg !20
  %67 = sdiv i32 %.frozen10, 3, !dbg !20
  %68 = mul i32 %67, 3, !dbg !19
  %.decomposed11 = sub i32 %.frozen10, %68, !dbg !19
  %.frozen12 = freeze i32 %20, !dbg !20
  %69 = sdiv i32 %.frozen12, 3, !dbg !20
  %70 = mul i32 %69, 3, !dbg !19
  %.decomposed13 = sub i32 %.frozen12, %70, !dbg !19
  %.frozen14 = freeze i32 %21, !dbg !20
  %71 = sdiv i32 %.frozen14, 3, !dbg !20
  %72 = mul i32 %71, 3, !dbg !19
  %.decomposed15 = sub i32 %.frozen14, %72, !dbg !19
  %.frozen16 = freeze i32 %22, !dbg !20
  %73 = sdiv i32 %.frozen16, 3, !dbg !20
  %74 = mul i32 %73, 3, !dbg !19
  %.decomposed17 = sub i32 %.frozen16, %74, !dbg !19
  %.frozen18 = freeze i32 %23, !dbg !20
  %75 = sdiv i32 %.frozen18, 3, !dbg !20
  %76 = mul i32 %75, 3, !dbg !19
  %.decomposed19 = sub i32 %.frozen18, %76, !dbg !19
  %.frozen20 = freeze i32 %24, !dbg !20
  %77 = sdiv i32 %.frozen20, 3, !dbg !20
  %78 = mul i32 %77, 3, !dbg !19
  %.decomposed21 = sub i32 %.frozen20, %78, !dbg !19
  %.frozen22 = freeze i32 %25, !dbg !20
  %79 = sdiv i32 %.frozen22, 3, !dbg !20
  %80 = mul i32 %79, 3, !dbg !19
  %.decomposed23 = sub i32 %.frozen22, %80, !dbg !19
  %.frozen24 = freeze i32 %26, !dbg !20
  %81 = sdiv i32 %.frozen24, 3, !dbg !20
  %82 = mul i32 %81, 3, !dbg !19
  %.decomposed25 = sub i32 %.frozen24, %82, !dbg !19
  %.frozen26 = freeze i32 %27, !dbg !20
  %83 = sdiv i32 %.frozen26, 3, !dbg !20
  %84 = mul i32 %83, 3, !dbg !19
  %.decomposed27 = sub i32 %.frozen26, %84, !dbg !19
  %.frozen28 = freeze i32 %28, !dbg !20
  %85 = sdiv i32 %.frozen28, 3, !dbg !20
  %86 = mul i32 %85, 3, !dbg !19
  %.decomposed29 = sub i32 %.frozen28, %86, !dbg !19
  %.frozen30 = freeze i32 %29, !dbg !20
  %87 = sdiv i32 %.frozen30, 3, !dbg !20
  %88 = mul i32 %87, 3, !dbg !19
  %.decomposed31 = sub i32 %.frozen30, %88, !dbg !19
  %89 = shl i32 %11, 12, !dbg !21
  %90 = shl i32 %12, 12, !dbg !21
  %91 = shl i32 %13, 12, !dbg !21
  %92 = shl i32 %14, 12, !dbg !21
  %93 = add i32 %51, %89, !dbg !22
  %94 = add i32 %51, %90, !dbg !22
  %95 = add i32 %51, %91, !dbg !22
  %96 = add i32 %51, %92, !dbg !22
  %97 = sext i32 %93 to i64, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !23
  %99 = sext i32 %94 to i64, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !23
  %101 = sext i32 %95 to i64, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !23
  %103 = sext i32 %96 to i64, !dbg !23
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !23
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %30) #2, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !24
  %110 = bitcast i32 %106 to float, !dbg !24
  %111 = bitcast i32 %107 to float, !dbg !24
  %112 = bitcast i32 %108 to float, !dbg !24
  %113 = bitcast i32 %109 to float, !dbg !24
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %31) #2, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !24
  %119 = bitcast i32 %115 to float, !dbg !24
  %120 = bitcast i32 %116 to float, !dbg !24
  %121 = bitcast i32 %117 to float, !dbg !24
  %122 = bitcast i32 %118 to float, !dbg !24
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %32) #2, !dbg !24
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !24
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !24
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !24
  %128 = bitcast i32 %124 to float, !dbg !24
  %129 = bitcast i32 %125 to float, !dbg !24
  %130 = bitcast i32 %126 to float, !dbg !24
  %131 = bitcast i32 %127 to float, !dbg !24
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %33) #2, !dbg !24
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !24
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !24
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !24
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !24
  %137 = bitcast i32 %133 to float, !dbg !24
  %138 = bitcast i32 %134 to float, !dbg !24
  %139 = bitcast i32 %135 to float, !dbg !24
  %140 = bitcast i32 %136 to float, !dbg !24
  %141 = sext i32 %53 to i64, !dbg !25
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !25
  %143 = sext i32 %54 to i64, !dbg !25
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !25
  %145 = sext i32 %55 to i64, !dbg !25
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !25
  %147 = sext i32 %56 to i64, !dbg !25
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !25
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %30) #2, !dbg !26
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %30) #2, !dbg !26
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %30) #2, !dbg !26
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %30) #2, !dbg !26
  %153 = bitcast i32 %152 to float, !dbg !26
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %31) #2, !dbg !26
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %31) #2, !dbg !26
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %31) #2, !dbg !26
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %31) #2, !dbg !26
  %158 = bitcast i32 %157 to float, !dbg !26
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %32) #2, !dbg !26
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %32) #2, !dbg !26
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %32) #2, !dbg !26
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %32) #2, !dbg !26
  %163 = bitcast i32 %162 to float, !dbg !26
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %33) #2, !dbg !26
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %33) #2, !dbg !26
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %33) #2, !dbg !26
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %33) #2, !dbg !26
  %168 = bitcast i32 %167 to float, !dbg !26
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !27
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !27
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !27
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !27
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %30) #2, !dbg !28
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %30) #2, !dbg !28
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %30) #2, !dbg !28
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %30) #2, !dbg !28
  %177 = bitcast i32 %176 to float, !dbg !28
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %31) #2, !dbg !28
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %31) #2, !dbg !28
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %31) #2, !dbg !28
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %31) #2, !dbg !28
  %182 = bitcast i32 %181 to float, !dbg !28
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %187 = bitcast i32 %186 to float, !dbg !28
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %192 = bitcast i32 %191 to float, !dbg !28
  %193 = fsub float %110, %153, !dbg !29
  %194 = fsub float %111, %153, !dbg !29
  %195 = fsub float %112, %153, !dbg !29
  %196 = fsub float %113, %153, !dbg !29
  %197 = fsub float %119, %158, !dbg !29
  %198 = fsub float %120, %158, !dbg !29
  %199 = fsub float %121, %158, !dbg !29
  %200 = fsub float %122, %158, !dbg !29
  %201 = fsub float %128, %163, !dbg !29
  %202 = fsub float %129, %163, !dbg !29
  %203 = fsub float %130, %163, !dbg !29
  %204 = fsub float %131, %163, !dbg !29
  %205 = fsub float %137, %168, !dbg !29
  %206 = fsub float %138, %168, !dbg !29
  %207 = fsub float %139, %168, !dbg !29
  %208 = fsub float %140, %168, !dbg !29
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %177) #2, !dbg !30
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %177) #2, !dbg !30
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %177) #2, !dbg !30
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %177) #2, !dbg !30
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %182) #2, !dbg !30
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %182) #2, !dbg !30
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %182) #2, !dbg !30
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %182) #2, !dbg !30
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %187) #2, !dbg !30
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float %187) #2, !dbg !30
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %187) #2, !dbg !30
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %187) #2, !dbg !30
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %192) #2, !dbg !30
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %192) #2, !dbg !30
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %192) #2, !dbg !30
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %192) #2, !dbg !30
  %225 = mul i32 %52, 3, !dbg !31
  %226 = add i32 %225, %.decomposed3, !dbg !32
  %227 = add i32 %225, %.decomposed5, !dbg !32
  %228 = add i32 %225, %.decomposed7, !dbg !32
  %229 = add i32 %225, %.decomposed9, !dbg !32
  %230 = add i32 %225, %.decomposed11, !dbg !32
  %231 = add i32 %225, %.decomposed13, !dbg !32
  %232 = add i32 %225, %.decomposed15, !dbg !32
  %233 = add i32 %225, %.decomposed17, !dbg !32
  %234 = add i32 %225, %.decomposed19, !dbg !32
  %235 = add i32 %225, %.decomposed21, !dbg !32
  %236 = add i32 %225, %.decomposed23, !dbg !32
  %237 = add i32 %225, %.decomposed25, !dbg !32
  %238 = add i32 %225, %.decomposed27, !dbg !32
  %239 = add i32 %225, %.decomposed29, !dbg !32
  %240 = add i32 %225, %.decomposed31, !dbg !32
  %241 = mul i32 %57, 12288, !dbg !33
  %242 = mul i32 %59, 12288, !dbg !33
  %243 = mul i32 %61, 12288, !dbg !33
  %244 = mul i32 %63, 12288, !dbg !33
  %245 = mul i32 %65, 12288, !dbg !33
  %246 = mul i32 %67, 12288, !dbg !33
  %247 = mul i32 %69, 12288, !dbg !33
  %248 = mul i32 %71, 12288, !dbg !33
  %249 = mul i32 %73, 12288, !dbg !33
  %250 = mul i32 %75, 12288, !dbg !33
  %251 = mul i32 %77, 12288, !dbg !33
  %252 = mul i32 %79, 12288, !dbg !33
  %253 = mul i32 %81, 12288, !dbg !33
  %254 = mul i32 %83, 12288, !dbg !33
  %255 = mul i32 %85, 12288, !dbg !33
  %256 = mul i32 %87, 12288, !dbg !33
  %257 = add i32 %241, %.decomposed, !dbg !32
  %258 = add i32 %257, %225, !dbg !34
  %259 = add i32 %226, %242, !dbg !34
  %260 = add i32 %227, %243, !dbg !34
  %261 = add i32 %228, %244, !dbg !34
  %262 = add i32 %229, %245, !dbg !34
  %263 = add i32 %230, %246, !dbg !34
  %264 = add i32 %231, %247, !dbg !34
  %265 = add i32 %232, %248, !dbg !34
  %266 = add i32 %233, %249, !dbg !34
  %267 = add i32 %234, %250, !dbg !34
  %268 = add i32 %235, %251, !dbg !34
  %269 = add i32 %236, %252, !dbg !34
  %270 = add i32 %237, %253, !dbg !34
  %271 = add i32 %238, %254, !dbg !34
  %272 = add i32 %239, %255, !dbg !34
  %273 = add i32 %240, %256, !dbg !34
  %274 = sext i32 %258 to i64, !dbg !35
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %274, !dbg !35
  %276 = sext i32 %259 to i64, !dbg !35
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %276, !dbg !35
  %278 = sext i32 %260 to i64, !dbg !35
  %279 = getelementptr float, ptr addrspace(1) %3, i64 %278, !dbg !35
  %280 = sext i32 %261 to i64, !dbg !35
  %281 = getelementptr float, ptr addrspace(1) %3, i64 %280, !dbg !35
  %282 = sext i32 %262 to i64, !dbg !35
  %283 = getelementptr float, ptr addrspace(1) %3, i64 %282, !dbg !35
  %284 = sext i32 %263 to i64, !dbg !35
  %285 = getelementptr float, ptr addrspace(1) %3, i64 %284, !dbg !35
  %286 = sext i32 %264 to i64, !dbg !35
  %287 = getelementptr float, ptr addrspace(1) %3, i64 %286, !dbg !35
  %288 = sext i32 %265 to i64, !dbg !35
  %289 = getelementptr float, ptr addrspace(1) %3, i64 %288, !dbg !35
  %290 = sext i32 %266 to i64, !dbg !35
  %291 = getelementptr float, ptr addrspace(1) %3, i64 %290, !dbg !35
  %292 = sext i32 %267 to i64, !dbg !35
  %293 = getelementptr float, ptr addrspace(1) %3, i64 %292, !dbg !35
  %294 = sext i32 %268 to i64, !dbg !35
  %295 = getelementptr float, ptr addrspace(1) %3, i64 %294, !dbg !35
  %296 = sext i32 %269 to i64, !dbg !35
  %297 = getelementptr float, ptr addrspace(1) %3, i64 %296, !dbg !35
  %298 = sext i32 %270 to i64, !dbg !35
  %299 = getelementptr float, ptr addrspace(1) %3, i64 %298, !dbg !35
  %300 = sext i32 %271 to i64, !dbg !35
  %301 = getelementptr float, ptr addrspace(1) %3, i64 %300, !dbg !35
  %302 = sext i32 %272 to i64, !dbg !35
  %303 = getelementptr float, ptr addrspace(1) %3, i64 %302, !dbg !35
  %304 = sext i32 %273 to i64, !dbg !35
  %305 = getelementptr float, ptr addrspace(1) %3, i64 %304, !dbg !35
  %306 = and i32 %48, 768, !dbg !36
  %307 = and i32 %48, 1020, !dbg !36
  %308 = lshr exact i32 %306, 8, !dbg !36
  %309 = or disjoint i32 %308, %307, !dbg !36
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !36
  %311 = bitcast float %209 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #2, !dbg !36
  %312 = or disjoint i32 %307, 1, !dbg !36
  %313 = lshr exact i32 %306, 6, !dbg !36
  %314 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %313, !dbg !36
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !36
  %316 = bitcast float %210 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #2, !dbg !36
  %317 = or disjoint i32 %307, 2, !dbg !36
  %318 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %317, !dbg !36
  %319 = bitcast float %211 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #2, !dbg !36
  %320 = or disjoint i32 %307, 3, !dbg !36
  %321 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %320, !dbg !36
  %322 = bitcast float %212 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !36
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !36
  %325 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 1028, !dbg !36
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !36
  %327 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 2056, !dbg !36
  %328 = load i32, ptr addrspace(3) %327, align 4, !dbg !36
  %329 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 3084, !dbg !36
  %330 = load i32, ptr addrspace(3) %329, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %331 = bitcast float %213 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %331, i1 true) #2, !dbg !36
  %332 = bitcast float %214 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %332, i1 true) #2, !dbg !36
  %333 = bitcast float %215 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %333, i1 true) #2, !dbg !36
  %334 = bitcast float %216 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %334, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %335 = load i32, ptr addrspace(3) %323, align 4, !dbg !36
  %336 = load i32, ptr addrspace(3) %325, align 4, !dbg !36
  %337 = load i32, ptr addrspace(3) %327, align 4, !dbg !36
  %338 = load i32, ptr addrspace(3) %329, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %339 = bitcast float %217 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %339, i1 true) #2, !dbg !36
  %340 = bitcast float %218 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %340, i1 true) #2, !dbg !36
  %341 = bitcast float %219 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %341, i1 true) #2, !dbg !36
  %342 = bitcast float %220 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %342, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %343 = load i32, ptr addrspace(3) %323, align 4, !dbg !36
  %344 = load i32, ptr addrspace(3) %325, align 4, !dbg !36
  %345 = load i32, ptr addrspace(3) %327, align 4, !dbg !36
  %346 = load i32, ptr addrspace(3) %329, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %347 = bitcast float %221 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %347, i1 true) #2, !dbg !36
  %348 = bitcast float %222 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %348, i1 true) #2, !dbg !36
  %349 = bitcast float %223 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %349, i1 true) #2, !dbg !36
  %350 = bitcast float %224 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %350, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %351 = load i32, ptr addrspace(3) %323, align 4, !dbg !36
  %352 = load i32, ptr addrspace(3) %325, align 4, !dbg !36
  %353 = load i32, ptr addrspace(3) %327, align 4, !dbg !36
  %354 = load i32, ptr addrspace(3) %329, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %275, i1 %34) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %277, i1 %35) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %328, ptr addrspace(1) %279, i1 %36) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %330, ptr addrspace(1) %281, i1 %37) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %335, ptr addrspace(1) %283, i1 %38) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %285, i1 %39) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %337, ptr addrspace(1) %287, i1 %40) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %338, ptr addrspace(1) %289, i1 %41) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %343, ptr addrspace(1) %291, i1 %42) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %293, i1 %43) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %345, ptr addrspace(1) %295, i1 %44) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %297, i1 %45) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %351, ptr addrspace(1) %299, i1 %33) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %352, ptr addrspace(1) %301, i1 %33) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %303, i1 %33) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %305, i1 %33) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciexeegzt7lq3ige4u2a5gigqi26eyrvnqyrx3tvzfp2vh3t3ido.py", directory: "inductor_cache/ie")
!4 = !{ptr @triton_poi_fused_div_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_7", linkageName: "triton_poi_fused_div_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 43, scope: !7)
!34 = !DILocation(line: 37, column: 37, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 54, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
