; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %13 = sdiv i32 %.frozen, 24, !dbg !14
  %14 = mul i32 %13, 24, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %10, 24, !dbg !15
  %16 = srem i32 %11, 24, !dbg !15
  %17 = srem i32 %12, 24, !dbg !15
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !16
  %.lhs.trunc1 = trunc nsw i32 %15 to i8, !dbg !16
  %.lhs.trunc3 = trunc nsw i32 %16 to i8, !dbg !16
  %.lhs.trunc5 = trunc nsw i32 %17 to i8, !dbg !16
  %18 = shl nsw i8 %.lhs.trunc, 2, !dbg !17
  %.lhs.trunc7 = add nsw i8 %18, 27, !dbg !17
  %19 = insertelement <2 x i8> poison, i8 %.lhs.trunc, i64 0, !dbg !16
  %20 = insertelement <2 x i8> %19, i8 %.lhs.trunc7, i64 1, !dbg !16
  %21 = sdiv <2 x i8> %20, <i8 6, i8 24>, !dbg !16
  %22 = extractelement <2 x i8> %21, i64 0, !dbg !18
  %.sext = sext i8 %22 to i32, !dbg !16
  %23 = extractelement <2 x i8> %21, i64 1, !dbg !18
  %.sext8 = sext i8 %23 to i32, !dbg !17
  %24 = shl nsw i8 %.lhs.trunc1, 2, !dbg !17
  %.lhs.trunc9 = add nsw i8 %24, 27, !dbg !17
  %25 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !16
  %26 = insertelement <2 x i8> %25, i8 %.lhs.trunc9, i64 1, !dbg !16
  %27 = sdiv <2 x i8> %26, <i8 6, i8 24>, !dbg !16
  %28 = extractelement <2 x i8> %27, i64 0, !dbg !18
  %.sext2 = sext i8 %28 to i32, !dbg !16
  %29 = extractelement <2 x i8> %27, i64 1, !dbg !18
  %.sext10 = sext i8 %29 to i32, !dbg !17
  %30 = shl nsw i8 %.lhs.trunc3, 2, !dbg !17
  %.lhs.trunc11 = add nsw i8 %30, 27, !dbg !17
  %31 = insertelement <2 x i8> poison, i8 %.lhs.trunc3, i64 0, !dbg !16
  %32 = insertelement <2 x i8> %31, i8 %.lhs.trunc11, i64 1, !dbg !16
  %33 = sdiv <2 x i8> %32, <i8 6, i8 24>, !dbg !16
  %34 = extractelement <2 x i8> %33, i64 0, !dbg !18
  %.sext4 = sext i8 %34 to i32, !dbg !16
  %35 = extractelement <2 x i8> %33, i64 1, !dbg !18
  %.sext12 = sext i8 %35 to i32, !dbg !17
  %36 = shl nsw i8 %.lhs.trunc5, 2, !dbg !17
  %.lhs.trunc13 = add nsw i8 %36, 27, !dbg !17
  %37 = insertelement <2 x i8> poison, i8 %.lhs.trunc5, i64 0, !dbg !16
  %38 = insertelement <2 x i8> %37, i8 %.lhs.trunc13, i64 1, !dbg !16
  %39 = sdiv <2 x i8> %38, <i8 6, i8 24>, !dbg !16
  %40 = extractelement <2 x i8> %39, i64 0, !dbg !18
  %.sext6 = sext i8 %40 to i32, !dbg !16
  %41 = extractelement <2 x i8> %39, i64 1, !dbg !18
  %.sext14 = sext i8 %41 to i32, !dbg !17
  %42 = icmp slt i8 %22, %23, !dbg !18
  %43 = icmp slt i8 %28, %29, !dbg !18
  %44 = icmp slt i8 %34, %35, !dbg !18
  %45 = icmp slt i8 %40, %41, !dbg !18
  %46 = shl nsw i32 %.sext, 2, !dbg !19
  %47 = shl nsw i32 %.sext2, 2, !dbg !19
  %48 = shl nsw i32 %.sext4, 2, !dbg !19
  %49 = shl nsw i32 %.sext6, 2, !dbg !19
  %50 = shl nsw i32 %13, 4, !dbg !20
  %51 = add nsw i32 %46, %50, !dbg !21
  %52 = add nsw i32 %50, %47, !dbg !21
  %53 = add nsw i32 %50, %48, !dbg !21
  %54 = add nsw i32 %50, %49, !dbg !21
  %55 = sext i32 %51 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %52 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %53 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %54 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %42, i32 0, i1 %42) #1, !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %43, i32 0, i1 %43) #1, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %44, i32 0, i1 %44) #1, !dbg !23
  %68 = bitcast i32 %67 to float, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %45, i32 0, i1 %45) #1, !dbg !23
  %70 = bitcast i32 %69 to float, !dbg !23
  %71 = or disjoint i32 %51, 1, !dbg !24
  %72 = or disjoint i32 %52, 1, !dbg !24
  %73 = or disjoint i32 %53, 1, !dbg !24
  %74 = or disjoint i32 %54, 1, !dbg !24
  %75 = sext i32 %71 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = sext i32 %72 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %73 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %74 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %42, i32 0, i1 %42) #1, !dbg !26
  %84 = bitcast i32 %83 to float, !dbg !26
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %43, i32 0, i1 %43) #1, !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %44, i32 0, i1 %44) #1, !dbg !26
  %88 = bitcast i32 %87 to float, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %45, i32 0, i1 %45) #1, !dbg !26
  %90 = bitcast i32 %89 to float, !dbg !26
  %91 = fadd float %64, %84, !dbg !27
  %92 = fadd float %66, %86, !dbg !27
  %93 = fadd float %68, %88, !dbg !27
  %94 = fadd float %70, %90, !dbg !27
  %95 = or disjoint i32 %51, 2, !dbg !28
  %96 = or disjoint i32 %52, 2, !dbg !28
  %97 = or disjoint i32 %53, 2, !dbg !28
  %98 = or disjoint i32 %54, 2, !dbg !28
  %99 = sext i32 %95 to i64, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !29
  %101 = sext i32 %96 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !29
  %103 = sext i32 %97 to i64, !dbg !29
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !29
  %105 = sext i32 %98 to i64, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %42, i32 0, i1 %42) #1, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %43, i32 0, i1 %43) #1, !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %44, i32 0, i1 %44) #1, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %45, i32 0, i1 %45) #1, !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = fadd float %91, %108, !dbg !31
  %116 = fadd float %92, %110, !dbg !31
  %117 = fadd float %93, %112, !dbg !31
  %118 = fadd float %94, %114, !dbg !31
  %119 = or disjoint i32 %51, 3, !dbg !32
  %120 = or disjoint i32 %52, 3, !dbg !32
  %121 = or disjoint i32 %53, 3, !dbg !32
  %122 = or disjoint i32 %54, 3, !dbg !32
  %123 = sext i32 %119 to i64, !dbg !33
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !33
  %125 = sext i32 %120 to i64, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !33
  %127 = sext i32 %121 to i64, !dbg !33
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !33
  %129 = sext i32 %122 to i64, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %42, i32 0, i1 %42) #1, !dbg !34
  %132 = bitcast i32 %131 to float, !dbg !34
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %43, i32 0, i1 %43) #1, !dbg !34
  %134 = bitcast i32 %133 to float, !dbg !34
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %44, i32 0, i1 %44) #1, !dbg !34
  %136 = bitcast i32 %135 to float, !dbg !34
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %45, i32 0, i1 %45) #1, !dbg !34
  %138 = bitcast i32 %137 to float, !dbg !34
  %139 = fadd float %115, %132, !dbg !35
  %140 = fadd float %116, %134, !dbg !35
  %141 = fadd float %117, %136, !dbg !35
  %142 = fadd float %118, %138, !dbg !35
  %143 = add nsw i32 %.sext, 1, !dbg !36
  %144 = add nsw i32 %.sext2, 1, !dbg !36
  %145 = add nsw i32 %.sext4, 1, !dbg !36
  %146 = add nsw i32 %.sext6, 1, !dbg !36
  %147 = icmp slt i32 %143, %.sext8, !dbg !37
  %148 = icmp slt i32 %144, %.sext10, !dbg !37
  %149 = icmp slt i32 %145, %.sext12, !dbg !37
  %150 = icmp slt i32 %146, %.sext14, !dbg !37
  %151 = sext i32 %51 to i64, !dbg !38
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !38
  %153 = getelementptr i8, ptr addrspace(1) %152, i64 16, !dbg !38
  %154 = sext i32 %52 to i64, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !38
  %156 = getelementptr i8, ptr addrspace(1) %155, i64 16, !dbg !38
  %157 = sext i32 %53 to i64, !dbg !38
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !38
  %159 = getelementptr i8, ptr addrspace(1) %158, i64 16, !dbg !38
  %160 = sext i32 %54 to i64, !dbg !38
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !38
  %162 = getelementptr i8, ptr addrspace(1) %161, i64 16, !dbg !38
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %147, i32 0, i1 %147) #1, !dbg !39
  %164 = bitcast i32 %163 to float, !dbg !39
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %148, i32 0, i1 %148) #1, !dbg !39
  %166 = bitcast i32 %165 to float, !dbg !39
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %149, i32 0, i1 %149) #1, !dbg !39
  %168 = bitcast i32 %167 to float, !dbg !39
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %150, i32 0, i1 %150) #1, !dbg !39
  %170 = bitcast i32 %169 to float, !dbg !39
  %171 = fadd float %139, %164, !dbg !40
  %172 = fadd float %140, %166, !dbg !40
  %173 = fadd float %141, %168, !dbg !40
  %174 = fadd float %142, %170, !dbg !40
  %175 = sext i32 %51 to i64, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !41
  %177 = getelementptr i8, ptr addrspace(1) %176, i64 20, !dbg !41
  %178 = sext i32 %52 to i64, !dbg !41
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !41
  %180 = getelementptr i8, ptr addrspace(1) %179, i64 20, !dbg !41
  %181 = sext i32 %53 to i64, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !41
  %183 = getelementptr i8, ptr addrspace(1) %182, i64 20, !dbg !41
  %184 = sext i32 %54 to i64, !dbg !41
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !41
  %186 = getelementptr i8, ptr addrspace(1) %185, i64 20, !dbg !41
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %147, i32 0, i1 %147) #1, !dbg !42
  %188 = bitcast i32 %187 to float, !dbg !42
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %148, i32 0, i1 %148) #1, !dbg !42
  %190 = bitcast i32 %189 to float, !dbg !42
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %149, i32 0, i1 %149) #1, !dbg !42
  %192 = bitcast i32 %191 to float, !dbg !42
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %150, i32 0, i1 %150) #1, !dbg !42
  %194 = bitcast i32 %193 to float, !dbg !42
  %195 = fadd float %171, %188, !dbg !43
  %196 = fadd float %172, %190, !dbg !43
  %197 = fadd float %173, %192, !dbg !43
  %198 = fadd float %174, %194, !dbg !43
  %199 = sext i32 %51 to i64, !dbg !44
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !44
  %201 = getelementptr i8, ptr addrspace(1) %200, i64 24, !dbg !44
  %202 = sext i32 %52 to i64, !dbg !44
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !44
  %204 = getelementptr i8, ptr addrspace(1) %203, i64 24, !dbg !44
  %205 = sext i32 %53 to i64, !dbg !44
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !44
  %207 = getelementptr i8, ptr addrspace(1) %206, i64 24, !dbg !44
  %208 = sext i32 %54 to i64, !dbg !44
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !44
  %210 = getelementptr i8, ptr addrspace(1) %209, i64 24, !dbg !44
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %147, i32 0, i1 %147) #1, !dbg !45
  %212 = bitcast i32 %211 to float, !dbg !45
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %148, i32 0, i1 %148) #1, !dbg !45
  %214 = bitcast i32 %213 to float, !dbg !45
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %149, i32 0, i1 %149) #1, !dbg !45
  %216 = bitcast i32 %215 to float, !dbg !45
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %150, i32 0, i1 %150) #1, !dbg !45
  %218 = bitcast i32 %217 to float, !dbg !45
  %219 = fadd float %195, %212, !dbg !46
  %220 = fadd float %196, %214, !dbg !46
  %221 = fadd float %197, %216, !dbg !46
  %222 = fadd float %198, %218, !dbg !46
  %223 = sext i32 %51 to i64, !dbg !47
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !47
  %225 = getelementptr i8, ptr addrspace(1) %224, i64 28, !dbg !47
  %226 = sext i32 %52 to i64, !dbg !47
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !47
  %228 = getelementptr i8, ptr addrspace(1) %227, i64 28, !dbg !47
  %229 = sext i32 %53 to i64, !dbg !47
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !47
  %231 = getelementptr i8, ptr addrspace(1) %230, i64 28, !dbg !47
  %232 = sext i32 %54 to i64, !dbg !47
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !47
  %234 = getelementptr i8, ptr addrspace(1) %233, i64 28, !dbg !47
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %147, i32 0, i1 %147) #1, !dbg !48
  %236 = bitcast i32 %235 to float, !dbg !48
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %148, i32 0, i1 %148) #1, !dbg !48
  %238 = bitcast i32 %237 to float, !dbg !48
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %149, i32 0, i1 %149) #1, !dbg !48
  %240 = bitcast i32 %239 to float, !dbg !48
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %150, i32 0, i1 %150) #1, !dbg !48
  %242 = bitcast i32 %241 to float, !dbg !48
  %243 = fadd float %219, %236, !dbg !49
  %244 = fadd float %220, %238, !dbg !49
  %245 = fadd float %221, %240, !dbg !49
  %246 = fadd float %222, %242, !dbg !49
  %247 = select i1 %42, float 4.000000e+00, float 0.000000e+00, !dbg !50
  %248 = select i1 %43, float 4.000000e+00, float 0.000000e+00, !dbg !50
  %249 = select i1 %44, float 4.000000e+00, float 0.000000e+00, !dbg !50
  %250 = select i1 %45, float 4.000000e+00, float 0.000000e+00, !dbg !50
  %251 = select i1 %147, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %252 = select i1 %148, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %253 = select i1 %149, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %254 = select i1 %150, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %255 = fadd float %247, %251, !dbg !52
  %256 = fadd float %248, %252, !dbg !52
  %257 = fadd float %249, %253, !dbg !52
  %258 = fadd float %250, %254, !dbg !52
  %259 = fadd float %251, %255, !dbg !53
  %260 = fadd float %252, %256, !dbg !53
  %261 = fadd float %253, %257, !dbg !53
  %262 = fadd float %254, %258, !dbg !53
  %263 = fadd float %251, %259, !dbg !54
  %264 = fadd float %252, %260, !dbg !54
  %265 = fadd float %253, %261, !dbg !54
  %266 = fadd float %254, %262, !dbg !54
  %267 = fadd float %251, %263, !dbg !55
  %268 = fadd float %252, %264, !dbg !55
  %269 = fadd float %253, %265, !dbg !55
  %270 = fadd float %254, %266, !dbg !55
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %267) #1, !dbg !56
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %268) #1, !dbg !56
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %269) #1, !dbg !56
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %270) #1, !dbg !56
  %275 = sext i32 %9 to i64, !dbg !57
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !57
  %277 = bitcast float %271 to i32, !dbg !58
  %278 = bitcast float %272 to i32, !dbg !58
  %279 = bitcast float %273 to i32, !dbg !58
  %280 = bitcast float %274 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %276, i1 true) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfnmi3ksr4k2fsmkxwjga32o74myz2bujyhuq2i47qgzaisawhum.py", directory: "inductor_cache/fn")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_0", linkageName: "triton_poi_fused__adaptive_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 17, scope: !7)
!17 = !DILocation(line: 28, column: 26, scope: !7)
!18 = !DILocation(line: 29, column: 18, scope: !7)
!19 = !DILocation(line: 34, column: 33, scope: !7)
!20 = !DILocation(line: 34, column: 47, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 52, scope: !7)
!24 = !DILocation(line: 38, column: 49, scope: !7)
!25 = !DILocation(line: 38, column: 31, scope: !7)
!26 = !DILocation(line: 38, column: 57, scope: !7)
!27 = !DILocation(line: 39, column: 20, scope: !7)
!28 = !DILocation(line: 43, column: 49, scope: !7)
!29 = !DILocation(line: 43, column: 31, scope: !7)
!30 = !DILocation(line: 43, column: 57, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 48, column: 49, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 57, scope: !7)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 17, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 31, scope: !7)
!39 = !DILocation(line: 53, column: 57, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 57, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 57, scope: !7)
!46 = !DILocation(line: 60, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 57, scope: !7)
!49 = !DILocation(line: 63, column: 20, scope: !7)
!50 = !DILocation(line: 78, column: 20, scope: !7)
!51 = !DILocation(line: 81, column: 35, scope: !7)
!52 = !DILocation(line: 82, column: 20, scope: !7)
!53 = !DILocation(line: 86, column: 20, scope: !7)
!54 = !DILocation(line: 90, column: 20, scope: !7)
!55 = !DILocation(line: 94, column: 20, scope: !7)
!56 = !DILocation(line: 95, column: 20, scope: !7)
!57 = !DILocation(line: 96, column: 25, scope: !7)
!58 = !DILocation(line: 96, column: 37, scope: !7)
!59 = !DILocation(line: 96, column: 4, scope: !7)
