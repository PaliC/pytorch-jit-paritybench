; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = srem i32 %10, 512, !dbg !14
  %12 = sext i32 %10 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #1, !dbg !16
  %15 = add i32 %10, -3072, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 false, i32 -8388608, i1 false) #1, !dbg !19
  %19 = bitcast i32 %18 to float, !dbg !19
  %20 = add i32 %10, -2560, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 false, i32 -8388608, i1 false) #1, !dbg !22
  %24 = bitcast i32 %23 to float, !dbg !22
  %25 = fcmp ogt float %24, %19, !dbg !23
  %26 = fcmp uno float %24, 0.000000e+00, !dbg !27
  %27 = or i1 %25, %26, !dbg !28
  %28 = select i1 %27, float %24, float %19, !dbg !29
  %29 = add i32 %10, -2048, !dbg !30
  %30 = sext i32 %29 to i64, !dbg !31
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !31
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 false, i32 -8388608, i1 false) #1, !dbg !32
  %33 = bitcast i32 %32 to float, !dbg !32
  %34 = fcmp olt float %28, %33, !dbg !33
  %35 = fcmp uno float %33, 0.000000e+00, !dbg !35
  %36 = or i1 %35, %34, !dbg !36
  %37 = select i1 %36, float %33, float %28, !dbg !37
  %38 = add i32 %10, -1536, !dbg !38
  %39 = sext i32 %38 to i64, !dbg !39
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !39
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 false, i32 -8388608, i1 false) #1, !dbg !40
  %42 = bitcast i32 %41 to float, !dbg !40
  %43 = fcmp olt float %37, %42, !dbg !41
  %44 = fcmp uno float %42, 0.000000e+00, !dbg !43
  %45 = or i1 %44, %43, !dbg !44
  %46 = select i1 %45, float %42, float %37, !dbg !45
  %47 = add i32 %10, -1024, !dbg !46
  %48 = sext i32 %47 to i64, !dbg !47
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !47
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 false, i32 -8388608, i1 false) #1, !dbg !48
  %51 = bitcast i32 %50 to float, !dbg !48
  %52 = fcmp olt float %46, %51, !dbg !49
  %53 = fcmp uno float %51, 0.000000e+00, !dbg !51
  %54 = or i1 %53, %52, !dbg !52
  %55 = select i1 %54, float %51, float %46, !dbg !53
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 false, i32 -8388608, i1 false) #1, !dbg !54
  %57 = bitcast i32 %56 to float, !dbg !54
  %58 = fcmp olt float %55, %57, !dbg !55
  %59 = fcmp uno float %57, 0.000000e+00, !dbg !57
  %60 = or i1 %59, %58, !dbg !58
  %61 = select i1 %60, float %57, float %55, !dbg !59
  %62 = add i32 %10, -512, !dbg !60
  %63 = sext i32 %62 to i64, !dbg !61
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !61
  %65 = add i32 %10, 512, !dbg !62
  %66 = sext i32 %65 to i64, !dbg !63
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !63
  %68 = add i32 %10, 1024, !dbg !64
  %69 = sext i32 %68 to i64, !dbg !65
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !65
  %71 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !66
  %72 = shufflevector <2 x i32> %71, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !66
  %73 = sdiv <2 x i32> %72, <i32 1024, i32 512>, !dbg !66
  %74 = srem <2 x i32> %73, splat (i32 2), !dbg !67
  %75 = extractelement <2 x i32> %74, i64 1, !dbg !68
  %76 = icmp sgt i32 %75, 0, !dbg !69
  %77 = icmp sgt i32 %75, -1, !dbg !70
  %78 = icmp ugt i32 %75, -3, !dbg !71
  %79 = extractelement <2 x i32> %74, i64 0, !dbg !68
  %80 = icmp sgt i32 %79, 0, !dbg !72
  %81 = and i1 %80, %76, !dbg !73
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %81, i32 -8388608, i1 %81) #1, !dbg !74
  %83 = bitcast i32 %82 to float, !dbg !74
  %84 = fcmp olt float %61, %83, !dbg !75
  %85 = fcmp uno float %83, 0.000000e+00, !dbg !77
  %86 = or i1 %85, %84, !dbg !78
  %87 = select i1 %86, float %83, float %61, !dbg !79
  %88 = and i1 %80, %77, !dbg !80
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %88, i32 -8388608, i1 %88) #1, !dbg !81
  %90 = bitcast i32 %89 to float, !dbg !81
  %91 = fcmp olt float %87, %90, !dbg !82
  %92 = fcmp uno float %90, 0.000000e+00, !dbg !84
  %93 = or i1 %92, %91, !dbg !85
  %94 = select i1 %93, float %90, float %87, !dbg !86
  %95 = icmp slt <2 x i32> %74, splat (i32 1), !dbg !87
  %96 = extractelement <2 x i1> %95, i64 1, !dbg !88
  %97 = and i1 %80, %96, !dbg !88
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %97, i32 -8388608, i1 %97) #1, !dbg !89
  %99 = bitcast i32 %98 to float, !dbg !89
  %100 = fcmp olt float %94, %99, !dbg !90
  %101 = fcmp uno float %99, 0.000000e+00, !dbg !92
  %102 = or i1 %101, %100, !dbg !93
  %103 = select i1 %102, float %99, float %94, !dbg !94
  %104 = and i1 %80, %78, !dbg !95
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %104, i32 -8388608, i1 %104) #1, !dbg !96
  %106 = bitcast i32 %105 to float, !dbg !96
  %107 = fcmp olt float %103, %106, !dbg !97
  %108 = fcmp uno float %106, 0.000000e+00, !dbg !99
  %109 = or i1 %108, %107, !dbg !100
  %110 = select i1 %109, float %106, float %103, !dbg !101
  %111 = icmp sgt i32 %79, -1, !dbg !102
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 false, i32 -8388608, i1 false) #1, !dbg !103
  %113 = bitcast i32 %112 to float, !dbg !103
  %114 = fcmp olt float %110, %113, !dbg !104
  %115 = fcmp uno float %113, 0.000000e+00, !dbg !106
  %116 = or i1 %115, %114, !dbg !107
  %117 = select i1 %116, float %113, float %110, !dbg !108
  %118 = and i1 %111, %76, !dbg !109
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %118, i32 -8388608, i1 %118) #1, !dbg !110
  %120 = bitcast i32 %119 to float, !dbg !110
  %121 = fcmp olt float %117, %120, !dbg !111
  %122 = fcmp uno float %120, 0.000000e+00, !dbg !113
  %123 = or i1 %122, %121, !dbg !114
  %124 = select i1 %123, float %120, float %117, !dbg !115
  %125 = or i32 %79, %75, !dbg !116
  %126 = icmp sgt i32 %125, -1, !dbg !116
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %126, i32 -8388608, i1 %126) #1, !dbg !117
  %128 = bitcast i32 %127 to float, !dbg !117
  %129 = fcmp olt float %124, %128, !dbg !118
  %130 = fcmp uno float %128, 0.000000e+00, !dbg !120
  %131 = or i1 %130, %129, !dbg !121
  %132 = select i1 %131, float %128, float %124, !dbg !122
  %133 = and i1 %111, %96, !dbg !123
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %133, i32 -8388608, i1 %133) #1, !dbg !124
  %135 = bitcast i32 %134 to float, !dbg !124
  %136 = fcmp olt float %132, %135, !dbg !125
  %137 = fcmp uno float %135, 0.000000e+00, !dbg !127
  %138 = or i1 %137, %136, !dbg !128
  %139 = select i1 %138, float %135, float %132, !dbg !129
  %140 = and i1 %111, %78, !dbg !130
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %140, i32 -8388608, i1 %140) #1, !dbg !131
  %142 = bitcast i32 %141 to float, !dbg !131
  %143 = fcmp olt float %139, %142, !dbg !132
  %144 = fcmp uno float %142, 0.000000e+00, !dbg !134
  %145 = or i1 %144, %143, !dbg !135
  %146 = select i1 %145, float %142, float %139, !dbg !136
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 false, i32 -8388608, i1 false) #1, !dbg !137
  %148 = bitcast i32 %147 to float, !dbg !137
  %149 = fcmp olt float %146, %148, !dbg !138
  %150 = fcmp uno float %148, 0.000000e+00, !dbg !140
  %151 = or i1 %150, %149, !dbg !141
  %152 = select i1 %151, float %148, float %146, !dbg !142
  %153 = extractelement <2 x i1> %95, i64 0, !dbg !143
  %154 = and i1 %153, %76, !dbg !143
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %154, i32 -8388608, i1 %154) #1, !dbg !144
  %156 = bitcast i32 %155 to float, !dbg !144
  %157 = fcmp olt float %152, %156, !dbg !145
  %158 = fcmp uno float %156, 0.000000e+00, !dbg !147
  %159 = or i1 %158, %157, !dbg !148
  %160 = select i1 %159, float %156, float %152, !dbg !149
  %161 = and i1 %153, %77, !dbg !150
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %161, i32 -8388608, i1 %161) #1, !dbg !151
  %163 = bitcast i32 %162 to float, !dbg !151
  %164 = fcmp olt float %160, %163, !dbg !152
  %165 = fcmp uno float %163, 0.000000e+00, !dbg !154
  %166 = or i1 %165, %164, !dbg !155
  %167 = select i1 %166, float %163, float %160, !dbg !156
  %168 = and i1 %153, %96, !dbg !157
  %169 = add i32 %10, 1536, !dbg !158
  %170 = sext i32 %169 to i64, !dbg !159
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !159
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %168, i32 -8388608, i1 %168) #1, !dbg !160
  %173 = bitcast i32 %172 to float, !dbg !160
  %174 = fcmp olt float %167, %173, !dbg !161
  %175 = fcmp uno float %173, 0.000000e+00, !dbg !163
  %176 = or i1 %175, %174, !dbg !164
  %177 = select i1 %176, float %173, float %167, !dbg !165
  %178 = and i1 %153, %78, !dbg !166
  %179 = add i32 %10, 2048, !dbg !167
  %180 = sext i32 %179 to i64, !dbg !168
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !168
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %178, i32 -8388608, i1 %178) #1, !dbg !169
  %183 = bitcast i32 %182 to float, !dbg !169
  %184 = fcmp olt float %177, %183, !dbg !170
  %185 = fcmp uno float %183, 0.000000e+00, !dbg !172
  %186 = or i1 %185, %184, !dbg !173
  %187 = select i1 %186, float %183, float %177, !dbg !174
  %188 = icmp ugt i32 %79, -3, !dbg !175
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 false, i32 -8388608, i1 false) #1, !dbg !176
  %190 = bitcast i32 %189 to float, !dbg !176
  %191 = fcmp olt float %187, %190, !dbg !177
  %192 = fcmp uno float %190, 0.000000e+00, !dbg !179
  %193 = or i1 %192, %191, !dbg !180
  %194 = select i1 %193, float %190, float %187, !dbg !181
  %195 = and i1 %188, %76, !dbg !182
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %195, i32 -8388608, i1 %195) #1, !dbg !183
  %197 = bitcast i32 %196 to float, !dbg !183
  %198 = fcmp olt float %194, %197, !dbg !184
  %199 = fcmp uno float %197, 0.000000e+00, !dbg !186
  %200 = or i1 %199, %198, !dbg !187
  %201 = select i1 %200, float %197, float %194, !dbg !188
  %202 = and i1 %188, %77, !dbg !189
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %202, i32 -8388608, i1 %202) #1, !dbg !190
  %204 = bitcast i32 %203 to float, !dbg !190
  %205 = fcmp olt float %201, %204, !dbg !191
  %206 = fcmp uno float %204, 0.000000e+00, !dbg !193
  %207 = or i1 %206, %205, !dbg !194
  %208 = select i1 %207, float %204, float %201, !dbg !195
  %209 = and i1 %188, %96, !dbg !196
  %210 = add i32 %10, 2560, !dbg !197
  %211 = sext i32 %210 to i64, !dbg !198
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !198
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %209, i32 -8388608, i1 %209) #1, !dbg !199
  %214 = bitcast i32 %213 to float, !dbg !199
  %215 = fcmp olt float %208, %214, !dbg !200
  %216 = fcmp uno float %214, 0.000000e+00, !dbg !202
  %217 = or i1 %216, %215, !dbg !203
  %218 = select i1 %217, float %214, float %208, !dbg !204
  %219 = and i32 %79, %75, !dbg !68
  %220 = icmp ugt i32 %219, -3, !dbg !68
  %221 = add i32 %10, 3072, !dbg !205
  %222 = sext i32 %221 to i64, !dbg !206
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !206
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %220, i32 -8388608, i1 %220) #1, !dbg !207
  %225 = bitcast i32 %224 to float, !dbg !207
  %226 = fcmp olt float %218, %225, !dbg !208
  %227 = fcmp uno float %225, 0.000000e+00, !dbg !210
  %228 = or i1 %227, %226, !dbg !211
  %229 = zext i1 %25 to i8, !dbg !212
  %230 = select i1 %34, i8 2, i8 %229, !dbg !213
  %231 = select i1 %43, i8 3, i8 %230, !dbg !214
  %232 = select i1 %52, i8 4, i8 %231, !dbg !215
  %233 = select i1 %58, i8 5, i8 %232, !dbg !216
  %234 = select i1 %84, i8 6, i8 %233, !dbg !217
  %235 = select i1 %91, i8 7, i8 %234, !dbg !218
  %236 = select i1 %100, i8 8, i8 %235, !dbg !219
  %237 = select i1 %107, i8 9, i8 %236, !dbg !220
  %238 = select i1 %114, i8 10, i8 %237, !dbg !221
  %239 = select i1 %121, i8 11, i8 %238, !dbg !222
  %240 = select i1 %129, i8 12, i8 %239, !dbg !223
  %241 = select i1 %136, i8 13, i8 %240, !dbg !224
  %242 = select i1 %143, i8 14, i8 %241, !dbg !225
  %243 = select i1 %149, i8 15, i8 %242, !dbg !226
  %244 = select i1 %157, i8 16, i8 %243, !dbg !227
  %245 = select i1 %164, i8 17, i8 %244, !dbg !228
  %246 = select i1 %174, i8 18, i8 %245, !dbg !229
  %247 = select i1 %184, i8 19, i8 %246, !dbg !230
  %248 = select i1 %191, i8 20, i8 %247, !dbg !231
  %249 = select i1 %198, i8 21, i8 %248, !dbg !232
  %250 = select i1 %205, i8 22, i8 %249, !dbg !233
  %251 = select i1 %215, i8 23, i8 %250, !dbg !234
  %252 = select i1 %226, i8 24, i8 %251, !dbg !235
  %253 = extractelement <2 x i32> %73, i64 1, !dbg !236
  %254 = shl i32 %253, 11, !dbg !236
  %255 = add i32 %254, %11, !dbg !237
  %256 = sext i32 %255 to i64, !dbg !238
  %257 = getelementptr float, ptr addrspace(1) %1, i64 %256, !dbg !238
  %258 = bitcast float %218 to i32, !dbg !239
  %259 = select i1 %228, i32 %224, i32 %258, !dbg !240
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %259, ptr addrspace(1) %257, i1 true) #1, !dbg !239
  %260 = getelementptr i8, ptr addrspace(1) %2, i64 %12, !dbg !241
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %252, ptr addrspace(1) %260, i1 true) #1, !dbg !242
  %261 = getelementptr float, ptr addrspace(1) %3, i64 %256, !dbg !243
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %14, ptr addrspace(1) %261, i1 true) #1, !dbg !244
  ret void, !dbg !245
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7iu3wku25cddsag5avoed6aey2etwotdwmxo2itab4uwdyw2coc.py", directory: "inductor_cache/7i")
!4 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_cat_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 29, column: 32, scope: !7)
!16 = !DILocation(line: 29, column: 37, scope: !7)
!17 = !DILocation(line: 41, column: 41, scope: !7)
!18 = !DILocation(line: 41, column: 31, scope: !7)
!19 = !DILocation(line: 41, column: 46, scope: !7)
!20 = !DILocation(line: 47, column: 41, scope: !7)
!21 = !DILocation(line: 47, column: 31, scope: !7)
!22 = !DILocation(line: 47, column: 46, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 48, column: 42, scope: !7)
!27 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 54, column: 41, scope: !7)
!31 = !DILocation(line: 54, column: 31, scope: !7)
!32 = !DILocation(line: 54, column: 46, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !34)
!34 = !DILocation(line: 55, column: 42, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !34)
!38 = !DILocation(line: 61, column: 41, scope: !7)
!39 = !DILocation(line: 61, column: 31, scope: !7)
!40 = !DILocation(line: 61, column: 46, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !42)
!42 = !DILocation(line: 62, column: 42, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !42)
!46 = !DILocation(line: 68, column: 41, scope: !7)
!47 = !DILocation(line: 68, column: 31, scope: !7)
!48 = !DILocation(line: 68, column: 46, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !50)
!50 = !DILocation(line: 69, column: 42, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !50)
!54 = !DILocation(line: 75, column: 46, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !56)
!56 = !DILocation(line: 76, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !56)
!60 = !DILocation(line: 84, column: 40, scope: !7)
!61 = !DILocation(line: 84, column: 31, scope: !7)
!62 = !DILocation(line: 103, column: 37, scope: !7)
!63 = !DILocation(line: 103, column: 31, scope: !7)
!64 = !DILocation(line: 106, column: 38, scope: !7)
!65 = !DILocation(line: 106, column: 31, scope: !7)
!66 = !DILocation(line: 24, column: 21, scope: !7)
!67 = !DILocation(line: 24, column: 29, scope: !7)
!68 = !DILocation(line: 143, column: 22, scope: !7)
!69 = !DILocation(line: 43, column: 21, scope: !7)
!70 = !DILocation(line: 50, column: 21, scope: !7)
!71 = !DILocation(line: 65, column: 20, scope: !7)
!72 = !DILocation(line: 71, column: 21, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 46, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !76)
!76 = !DILocation(line: 79, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !76)
!80 = !DILocation(line: 80, column: 20, scope: !7)
!81 = !DILocation(line: 81, column: 46, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !83)
!83 = !DILocation(line: 82, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !83)
!87 = !DILocation(line: 110, column: 20, scope: !7)
!88 = !DILocation(line: 83, column: 20, scope: !7)
!89 = !DILocation(line: 84, column: 45, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !91)
!91 = !DILocation(line: 85, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !91)
!95 = !DILocation(line: 86, column: 20, scope: !7)
!96 = !DILocation(line: 87, column: 36, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !98)
!98 = !DILocation(line: 88, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !98)
!102 = !DILocation(line: 90, column: 21, scope: !7)
!103 = !DILocation(line: 94, column: 46, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !105)
!105 = !DILocation(line: 95, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !105)
!109 = !DILocation(line: 96, column: 20, scope: !7)
!110 = !DILocation(line: 97, column: 45, scope: !7)
!111 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !112)
!112 = !DILocation(line: 98, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !112)
!116 = !DILocation(line: 99, column: 20, scope: !7)
!117 = !DILocation(line: 100, column: 36, scope: !7)
!118 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !119)
!119 = !DILocation(line: 101, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !119)
!123 = !DILocation(line: 102, column: 20, scope: !7)
!124 = !DILocation(line: 103, column: 42, scope: !7)
!125 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !126)
!126 = !DILocation(line: 104, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !126)
!130 = !DILocation(line: 105, column: 20, scope: !7)
!131 = !DILocation(line: 106, column: 43, scope: !7)
!132 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !133)
!133 = !DILocation(line: 107, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !133)
!137 = !DILocation(line: 113, column: 36, scope: !7)
!138 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !139)
!139 = !DILocation(line: 114, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !139)
!143 = !DILocation(line: 115, column: 20, scope: !7)
!144 = !DILocation(line: 116, column: 42, scope: !7)
!145 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !146)
!146 = !DILocation(line: 117, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !146)
!150 = !DILocation(line: 118, column: 20, scope: !7)
!151 = !DILocation(line: 119, column: 43, scope: !7)
!152 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !153)
!153 = !DILocation(line: 120, column: 42, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !153)
!155 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !153)
!156 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !153)
!157 = !DILocation(line: 121, column: 20, scope: !7)
!158 = !DILocation(line: 122, column: 38, scope: !7)
!159 = !DILocation(line: 122, column: 31, scope: !7)
!160 = !DILocation(line: 122, column: 43, scope: !7)
!161 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !162)
!162 = !DILocation(line: 123, column: 42, scope: !7)
!163 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !162)
!164 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !162)
!165 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !162)
!166 = !DILocation(line: 124, column: 20, scope: !7)
!167 = !DILocation(line: 125, column: 38, scope: !7)
!168 = !DILocation(line: 125, column: 31, scope: !7)
!169 = !DILocation(line: 125, column: 43, scope: !7)
!170 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !171)
!171 = !DILocation(line: 126, column: 42, scope: !7)
!172 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !171)
!173 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !171)
!174 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !171)
!175 = !DILocation(line: 129, column: 20, scope: !7)
!176 = !DILocation(line: 132, column: 44, scope: !7)
!177 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !178)
!178 = !DILocation(line: 133, column: 44, scope: !7)
!179 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !178)
!180 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !178)
!181 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !178)
!182 = !DILocation(line: 134, column: 22, scope: !7)
!183 = !DILocation(line: 135, column: 44, scope: !7)
!184 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !185)
!185 = !DILocation(line: 136, column: 44, scope: !7)
!186 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !185)
!187 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !185)
!188 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !185)
!189 = !DILocation(line: 137, column: 22, scope: !7)
!190 = !DILocation(line: 138, column: 44, scope: !7)
!191 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !192)
!192 = !DILocation(line: 139, column: 44, scope: !7)
!193 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !192)
!194 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !192)
!195 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !192)
!196 = !DILocation(line: 140, column: 22, scope: !7)
!197 = !DILocation(line: 141, column: 39, scope: !7)
!198 = !DILocation(line: 141, column: 32, scope: !7)
!199 = !DILocation(line: 141, column: 44, scope: !7)
!200 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !201)
!201 = !DILocation(line: 142, column: 44, scope: !7)
!202 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !201)
!203 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !201)
!204 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !201)
!205 = !DILocation(line: 144, column: 39, scope: !7)
!206 = !DILocation(line: 144, column: 32, scope: !7)
!207 = !DILocation(line: 144, column: 44, scope: !7)
!208 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !209)
!209 = !DILocation(line: 145, column: 44, scope: !7)
!210 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !209)
!211 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !209)
!212 = !DILocation(line: 149, column: 38, scope: !7)
!213 = !DILocation(line: 152, column: 38, scope: !7)
!214 = !DILocation(line: 155, column: 38, scope: !7)
!215 = !DILocation(line: 158, column: 38, scope: !7)
!216 = !DILocation(line: 161, column: 38, scope: !7)
!217 = !DILocation(line: 164, column: 38, scope: !7)
!218 = !DILocation(line: 167, column: 38, scope: !7)
!219 = !DILocation(line: 170, column: 38, scope: !7)
!220 = !DILocation(line: 173, column: 38, scope: !7)
!221 = !DILocation(line: 176, column: 38, scope: !7)
!222 = !DILocation(line: 179, column: 38, scope: !7)
!223 = !DILocation(line: 182, column: 38, scope: !7)
!224 = !DILocation(line: 185, column: 38, scope: !7)
!225 = !DILocation(line: 188, column: 38, scope: !7)
!226 = !DILocation(line: 191, column: 38, scope: !7)
!227 = !DILocation(line: 194, column: 38, scope: !7)
!228 = !DILocation(line: 197, column: 38, scope: !7)
!229 = !DILocation(line: 200, column: 38, scope: !7)
!230 = !DILocation(line: 203, column: 38, scope: !7)
!231 = !DILocation(line: 206, column: 38, scope: !7)
!232 = !DILocation(line: 209, column: 38, scope: !7)
!233 = !DILocation(line: 212, column: 38, scope: !7)
!234 = !DILocation(line: 215, column: 38, scope: !7)
!235 = !DILocation(line: 218, column: 38, scope: !7)
!236 = !DILocation(line: 219, column: 35, scope: !7)
!237 = !DILocation(line: 219, column: 30, scope: !7)
!238 = !DILocation(line: 219, column: 25, scope: !7)
!239 = !DILocation(line: 219, column: 48, scope: !7)
!240 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !209)
!241 = !DILocation(line: 220, column: 25, scope: !7)
!242 = !DILocation(line: 220, column: 38, scope: !7)
!243 = !DILocation(line: 221, column: 25, scope: !7)
!244 = !DILocation(line: 221, column: 48, scope: !7)
!245 = !DILocation(line: 221, column: 4, scope: !7)
