; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, ptr addrspace(1) %30, ptr addrspace(1) %31, ptr addrspace(1) %32, ptr addrspace(1) %33, ptr addrspace(1) %34, ptr addrspace(1) %35, ptr addrspace(1) %36, ptr addrspace(1) %37, ptr addrspace(1) %38, ptr addrspace(1) %39, ptr addrspace(1) %40, i32 %41) local_unnamed_addr !dbg !7 {
  %43 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %44 = shl i32 %43, 7, !dbg !11
  %45 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %46 = and i32 %45, 127, !dbg !12
  %47 = or disjoint i32 %44, %46, !dbg !13
  %48 = icmp slt i32 %47, 2048, !dbg !14
  %.frozen = freeze i32 %47, !dbg !15
  %49 = sdiv i32 %.frozen, 16, !dbg !15
  %50 = srem i32 %49, 32, !dbg !16
  %.frozen45 = freeze i32 %47, !dbg !17
  %51 = sdiv i32 %.frozen45, 512, !dbg !17
  %52 = mul i32 %49, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %52, !dbg !18
  %.frozen43 = freeze i32 %47, !dbg !19
  %53 = sdiv i32 %.frozen43, 4, !dbg !19
  %54 = mul i32 %53, 4, !dbg !20
  %.decomposed44 = sub i32 %.frozen43, %54, !dbg !20
  %55 = srem i32 %53, 4, !dbg !21
  %56 = icmp slt i32 %50, 4, !dbg !22
  %57 = mul i32 %51, 512, !dbg !23
  %srem.decomposed = sub i32 %.frozen45, %57, !dbg !23
  %58 = shl nsw i32 %51, 6, !dbg !24
  %59 = add nsw i32 %58, %srem.decomposed, !dbg !25
  %60 = sext i32 %59 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = and i1 %48, %56, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 0, i1 %62) #3, !dbg !28
  %64 = sext i32 %50 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %62, i32 0, i1 %62) #3, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %62, i32 0, i1 %62) #3, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = fadd float %69, 0x3EE4F8B580000000, !dbg !33
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %71, 0, !dbg !34
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %72, 0, !dbg !34
  br i1 %.not.i, label %78, label %73, !dbg !34

73:                                               ; preds = %42
  br i1 %.not1.i, label %76, label %74, !dbg !34

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

78:                                               ; preds = %42
  br i1 %.not1.i, label %81, label %79, !dbg !34

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !34
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !36
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %62, i32 0, i1 %62) #3, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !38
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %62, i32 0, i1 %62) #3, !dbg !39
  %88 = and i32 %50, -4, !dbg !40
  %89 = icmp eq i32 %88, 4, !dbg !40
  %90 = add nsw i32 %50, -4, !dbg !41
  %91 = shl nsw i32 %90, 4, !dbg !42
  %92 = add nsw i32 %58, %.decomposed, !dbg !43
  %93 = add nsw i32 %92, %91, !dbg !44
  %94 = sext i32 %93 to i64, !dbg !45
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %94, !dbg !45
  %96 = and i1 %48, %89, !dbg !46
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96) #3, !dbg !47
  %98 = sext i32 %90 to i64, !dbg !48
  %99 = getelementptr float, ptr addrspace(1) %6, i64 %98, !dbg !48
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %96, i32 0, i1 %96) #3, !dbg !49
  %101 = getelementptr float, ptr addrspace(1) %7, i64 %98, !dbg !50
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %96, i32 0, i1 %96) #3, !dbg !51
  %103 = bitcast i32 %102 to float, !dbg !51
  %104 = fadd float %103, 0x3EE4F8B580000000, !dbg !52
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i8 = icmp eq i32 %105, 0, !dbg !53
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i11 = icmp eq i32 %106, 0, !dbg !53
  br i1 %.not.i8, label %112, label %107, !dbg !53

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %110, label %108, !dbg !53

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !53
  br label %__nv_sqrtf.exit12, !dbg !53

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !53
  br label %__nv_sqrtf.exit12, !dbg !53

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %115, label %113, !dbg !53

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !53
  br label %__nv_sqrtf.exit12, !dbg !53

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !53
  br label %__nv_sqrtf.exit12, !dbg !53

__nv_sqrtf.exit12:                                ; preds = %108, %110, %113, %115
  %.0.i10 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !53
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !54
  %118 = getelementptr float, ptr addrspace(1) %8, i64 %98, !dbg !55
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %96, i32 0, i1 %96) #3, !dbg !56
  %120 = getelementptr float, ptr addrspace(1) %9, i64 %98, !dbg !57
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %96, i32 0, i1 %96) #3, !dbg !58
  %122 = icmp eq i32 %88, 8, !dbg !59
  %123 = add nsw i32 %50, -8, !dbg !60
  %124 = shl nsw i32 %123, 4, !dbg !61
  %125 = add nsw i32 %92, %124, !dbg !62
  %126 = sext i32 %125 to i64, !dbg !63
  %127 = getelementptr float, ptr addrspace(1) %10, i64 %126, !dbg !63
  %128 = and i1 %48, %122, !dbg !64
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %128, i32 0, i1 %128) #3, !dbg !65
  %130 = sext i32 %123 to i64, !dbg !66
  %131 = getelementptr float, ptr addrspace(1) %11, i64 %130, !dbg !66
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %128, i32 0, i1 %128) #3, !dbg !67
  %133 = getelementptr float, ptr addrspace(1) %12, i64 %130, !dbg !68
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %128, i32 0, i1 %128) #3, !dbg !69
  %135 = bitcast i32 %134 to float, !dbg !69
  %136 = fadd float %135, 0x3EE4F8B580000000, !dbg !70
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i13 = icmp eq i32 %137, 0, !dbg !71
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i16 = icmp eq i32 %138, 0, !dbg !71
  br i1 %.not.i13, label %144, label %139, !dbg !71

139:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %142, label %140, !dbg !71

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !71
  br label %__nv_sqrtf.exit17, !dbg !71

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !71
  br label %__nv_sqrtf.exit17, !dbg !71

144:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %147, label %145, !dbg !71

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !71
  br label %__nv_sqrtf.exit17, !dbg !71

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !71
  br label %__nv_sqrtf.exit17, !dbg !71

__nv_sqrtf.exit17:                                ; preds = %140, %142, %145, %147
  %.0.i15 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !71
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !72
  %150 = getelementptr float, ptr addrspace(1) %13, i64 %130, !dbg !73
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %128, i32 0, i1 %128) #3, !dbg !74
  %152 = getelementptr float, ptr addrspace(1) %14, i64 %130, !dbg !75
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %128, i32 0, i1 %128) #3, !dbg !76
  %154 = icmp eq i32 %88, 12, !dbg !77
  %155 = add nsw i32 %50, -12, !dbg !78
  %156 = shl nsw i32 %155, 4, !dbg !79
  %157 = add nsw i32 %92, %156, !dbg !80
  %158 = sext i32 %157 to i64, !dbg !81
  %159 = getelementptr float, ptr addrspace(1) %15, i64 %158, !dbg !81
  %160 = and i1 %48, %154, !dbg !82
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %160, i32 0, i1 %160) #3, !dbg !83
  %162 = sext i32 %155 to i64, !dbg !84
  %163 = getelementptr float, ptr addrspace(1) %16, i64 %162, !dbg !84
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %160, i32 0, i1 %160) #3, !dbg !85
  %165 = getelementptr float, ptr addrspace(1) %17, i64 %162, !dbg !86
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %160, i32 0, i1 %160) #3, !dbg !87
  %167 = bitcast i32 %166 to float, !dbg !87
  %168 = fadd float %167, 0x3EE4F8B580000000, !dbg !88
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i18 = icmp eq i32 %169, 0, !dbg !89
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i21 = icmp eq i32 %170, 0, !dbg !89
  br i1 %.not.i18, label %176, label %171, !dbg !89

171:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %174, label %172, !dbg !89

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !89
  br label %__nv_sqrtf.exit22, !dbg !89

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !89
  br label %__nv_sqrtf.exit22, !dbg !89

176:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %179, label %177, !dbg !89

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !89
  br label %__nv_sqrtf.exit22, !dbg !89

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !89
  br label %__nv_sqrtf.exit22, !dbg !89

__nv_sqrtf.exit22:                                ; preds = %172, %174, %177, %179
  %.0.i20 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !89
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !90
  %182 = getelementptr float, ptr addrspace(1) %18, i64 %162, !dbg !91
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %160, i32 0, i1 %160) #3, !dbg !92
  %184 = getelementptr float, ptr addrspace(1) %19, i64 %162, !dbg !93
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %160, i32 0, i1 %160) #3, !dbg !94
  %186 = icmp eq i32 %88, 16, !dbg !95
  %187 = add nsw i32 %50, -16, !dbg !96
  %188 = mul nsw i32 %187, 20, !dbg !97
  %189 = mul nsw i32 %51, 80, !dbg !98
  %190 = add nsw i32 %189, %.decomposed, !dbg !99
  %191 = add nsw i32 %190, %188, !dbg !100
  %192 = sext i32 %191 to i64, !dbg !101
  %193 = getelementptr float, ptr addrspace(1) %20, i64 %192, !dbg !101
  %194 = and i1 %48, %186, !dbg !102
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %194, i32 0, i1 %194) #3, !dbg !103
  %196 = sext i32 %187 to i64, !dbg !104
  %197 = getelementptr float, ptr addrspace(1) %21, i64 %196, !dbg !104
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %194, i32 0, i1 %194) #3, !dbg !105
  %199 = getelementptr float, ptr addrspace(1) %22, i64 %196, !dbg !106
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %194, i32 0, i1 %194) #3, !dbg !107
  %201 = bitcast i32 %200 to float, !dbg !107
  %202 = fadd float %201, 0x3EE4F8B580000000, !dbg !108
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !109
  %.not.i23 = icmp eq i32 %203, 0, !dbg !109
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !109
  %.not1.i26 = icmp eq i32 %204, 0, !dbg !109
  br i1 %.not.i23, label %210, label %205, !dbg !109

205:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %208, label %206, !dbg !109

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #3, !dbg !109
  br label %__nv_sqrtf.exit27, !dbg !109

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #3, !dbg !109
  br label %__nv_sqrtf.exit27, !dbg !109

210:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %213, label %211, !dbg !109

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #3, !dbg !109
  br label %__nv_sqrtf.exit27, !dbg !109

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #3, !dbg !109
  br label %__nv_sqrtf.exit27, !dbg !109

__nv_sqrtf.exit27:                                ; preds = %206, %208, %211, %213
  %.0.i25 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !109
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !110
  %216 = getelementptr float, ptr addrspace(1) %23, i64 %196, !dbg !111
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %194, i32 0, i1 %194) #3, !dbg !112
  %218 = getelementptr float, ptr addrspace(1) %24, i64 %196, !dbg !113
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %194, i32 0, i1 %194) #3, !dbg !114
  %220 = icmp eq i32 %88, 20, !dbg !115
  %221 = mul nsw i32 %55, 5, !dbg !116
  %222 = add nsw i32 %221, %.decomposed44, !dbg !117
  %223 = add nsw i32 %50, -20, !dbg !118
  %224 = mul nsw i32 %223, 20, !dbg !119
  %225 = add nsw i32 %224, %189, !dbg !120
  %226 = add nsw i32 %225, %222, !dbg !121
  %227 = sext i32 %226 to i64, !dbg !122
  %228 = getelementptr float, ptr addrspace(1) %25, i64 %227, !dbg !122
  %229 = and i1 %48, %220, !dbg !123
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %229, i32 0, i1 %229) #3, !dbg !124
  %231 = sext i32 %223 to i64, !dbg !125
  %232 = getelementptr float, ptr addrspace(1) %26, i64 %231, !dbg !125
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %229, i32 0, i1 %229) #3, !dbg !126
  %234 = getelementptr float, ptr addrspace(1) %27, i64 %231, !dbg !127
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %229, i32 0, i1 %229) #3, !dbg !128
  %236 = bitcast i32 %235 to float, !dbg !128
  %237 = fadd float %236, 0x3EE4F8B580000000, !dbg !129
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !130
  %.not.i28 = icmp eq i32 %238, 0, !dbg !130
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !130
  %.not1.i31 = icmp eq i32 %239, 0, !dbg !130
  br i1 %.not.i28, label %245, label %240, !dbg !130

240:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %243, label %241, !dbg !130

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %237) #3, !dbg !130
  br label %__nv_sqrtf.exit32, !dbg !130

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %237) #3, !dbg !130
  br label %__nv_sqrtf.exit32, !dbg !130

245:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %248, label %246, !dbg !130

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %237) #3, !dbg !130
  br label %__nv_sqrtf.exit32, !dbg !130

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %237) #3, !dbg !130
  br label %__nv_sqrtf.exit32, !dbg !130

__nv_sqrtf.exit32:                                ; preds = %241, %243, %246, %248
  %.0.i30 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !130
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !131
  %251 = getelementptr float, ptr addrspace(1) %28, i64 %231, !dbg !132
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %229, i32 0, i1 %229) #3, !dbg !133
  %253 = getelementptr float, ptr addrspace(1) %29, i64 %231, !dbg !134
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %229, i32 0, i1 %229) #3, !dbg !135
  %255 = icmp eq i32 %88, 24, !dbg !136
  %256 = add nsw i32 %50, -24, !dbg !137
  %257 = mul nsw i32 %256, 25, !dbg !138
  %258 = mul nsw i32 %51, 100, !dbg !139
  %259 = add nsw i32 %257, %258, !dbg !140
  %260 = add nsw i32 %259, %222, !dbg !141
  %261 = sext i32 %260 to i64, !dbg !142
  %262 = getelementptr float, ptr addrspace(1) %30, i64 %261, !dbg !142
  %263 = and i1 %48, %255, !dbg !143
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %263, i32 0, i1 %263) #3, !dbg !144
  %265 = sext i32 %256 to i64, !dbg !145
  %266 = getelementptr float, ptr addrspace(1) %31, i64 %265, !dbg !145
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %263, i32 0, i1 %263) #3, !dbg !146
  %268 = getelementptr float, ptr addrspace(1) %32, i64 %265, !dbg !147
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %263, i32 0, i1 %263) #3, !dbg !148
  %270 = bitcast i32 %269 to float, !dbg !148
  %271 = fadd float %270, 0x3EE4F8B580000000, !dbg !149
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !150
  %.not.i33 = icmp eq i32 %272, 0, !dbg !150
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !150
  %.not1.i36 = icmp eq i32 %273, 0, !dbg !150
  br i1 %.not.i33, label %279, label %274, !dbg !150

274:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %277, label %275, !dbg !150

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %271) #3, !dbg !150
  br label %__nv_sqrtf.exit37, !dbg !150

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %271) #3, !dbg !150
  br label %__nv_sqrtf.exit37, !dbg !150

279:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %282, label %280, !dbg !150

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %271) #3, !dbg !150
  br label %__nv_sqrtf.exit37, !dbg !150

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %271) #3, !dbg !150
  br label %__nv_sqrtf.exit37, !dbg !150

__nv_sqrtf.exit37:                                ; preds = %275, %277, %280, %282
  %.0.i35 = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !150
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !151
  %285 = getelementptr float, ptr addrspace(1) %33, i64 %265, !dbg !152
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %263, i32 0, i1 %263) #3, !dbg !153
  %287 = getelementptr float, ptr addrspace(1) %34, i64 %265, !dbg !154
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %263, i32 0, i1 %263) #3, !dbg !155
  %289 = icmp sgt i32 %50, 27, !dbg !156
  %290 = add nsw i32 %50, -28, !dbg !157
  %291 = shl nsw i32 %290, 4, !dbg !158
  %292 = add nsw i32 %92, %291, !dbg !159
  %293 = sext i32 %292 to i64, !dbg !160
  %294 = getelementptr float, ptr addrspace(1) %35, i64 %293, !dbg !160
  %295 = and i1 %48, %289, !dbg !161
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %295, i32 0, i1 %295) #3, !dbg !162
  %297 = sext i32 %290 to i64, !dbg !163
  %298 = getelementptr float, ptr addrspace(1) %36, i64 %297, !dbg !163
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %295, i32 0, i1 %295) #3, !dbg !164
  %300 = getelementptr float, ptr addrspace(1) %37, i64 %297, !dbg !165
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %300, i1 %295, i32 0, i1 %295) #3, !dbg !166
  %302 = bitcast i32 %301 to float, !dbg !166
  %303 = fadd float %302, 0x3EE4F8B580000000, !dbg !167
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !168
  %.not.i38 = icmp eq i32 %304, 0, !dbg !168
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !168
  %.not1.i41 = icmp eq i32 %305, 0, !dbg !168
  br i1 %.not.i38, label %311, label %306, !dbg !168

306:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %309, label %307, !dbg !168

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %303) #3, !dbg !168
  br label %__nv_sqrtf.exit42, !dbg !168

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %303) #3, !dbg !168
  br label %__nv_sqrtf.exit42, !dbg !168

311:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %314, label %312, !dbg !168

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.f(float %303) #3, !dbg !168
  br label %__nv_sqrtf.exit42, !dbg !168

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.f(float %303) #3, !dbg !168
  br label %__nv_sqrtf.exit42, !dbg !168

__nv_sqrtf.exit42:                                ; preds = %307, %309, %312, %314
  %.0.i40 = phi float [ %308, %307 ], [ %310, %309 ], [ %313, %312 ], [ %315, %314 ], !dbg !168
  %316 = insertelement <8 x i32> poison, i32 %296, i64 0, !dbg !162
  %317 = insertelement <8 x i32> %316, i32 %63, i64 1, !dbg !162
  %318 = insertelement <8 x i32> %317, i32 %97, i64 2, !dbg !162
  %319 = insertelement <8 x i32> %318, i32 %129, i64 3, !dbg !162
  %320 = insertelement <8 x i32> %319, i32 %161, i64 4, !dbg !162
  %321 = insertelement <8 x i32> %320, i32 %195, i64 5, !dbg !162
  %322 = insertelement <8 x i32> %321, i32 %230, i64 6, !dbg !162
  %323 = insertelement <8 x i32> %322, i32 %264, i64 7, !dbg !162
  %324 = bitcast <8 x i32> %323 to <8 x float>, !dbg !162
  %325 = insertelement <8 x i32> poison, i32 %299, i64 0, !dbg !164
  %326 = insertelement <8 x i32> %325, i32 %66, i64 1, !dbg !164
  %327 = insertelement <8 x i32> %326, i32 %100, i64 2, !dbg !164
  %328 = insertelement <8 x i32> %327, i32 %132, i64 3, !dbg !164
  %329 = insertelement <8 x i32> %328, i32 %164, i64 4, !dbg !164
  %330 = insertelement <8 x i32> %329, i32 %198, i64 5, !dbg !164
  %331 = insertelement <8 x i32> %330, i32 %233, i64 6, !dbg !164
  %332 = insertelement <8 x i32> %331, i32 %267, i64 7, !dbg !164
  %333 = bitcast <8 x i32> %332 to <8 x float>, !dbg !164
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !169
  %335 = getelementptr float, ptr addrspace(1) %38, i64 %297, !dbg !170
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %295, i32 0, i1 %295) #3, !dbg !171
  %337 = getelementptr float, ptr addrspace(1) %39, i64 %297, !dbg !172
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %295, i32 0, i1 %295) #3, !dbg !173
  %339 = fsub <8 x float> %324, %333, !dbg !174
  %340 = insertelement <8 x float> poison, float %334, i64 0, !dbg !175
  %341 = insertelement <8 x float> %340, float %83, i64 1, !dbg !175
  %342 = insertelement <8 x float> %341, float %117, i64 2, !dbg !175
  %343 = insertelement <8 x float> %342, float %149, i64 3, !dbg !175
  %344 = insertelement <8 x float> %343, float %181, i64 4, !dbg !175
  %345 = insertelement <8 x float> %344, float %215, i64 5, !dbg !175
  %346 = insertelement <8 x float> %345, float %250, i64 6, !dbg !175
  %347 = insertelement <8 x float> %346, float %284, i64 7, !dbg !175
  %348 = fmul <8 x float> %339, %347, !dbg !175
  %349 = insertelement <8 x i32> poison, i32 %336, i64 0, !dbg !171
  %350 = insertelement <8 x i32> %349, i32 %85, i64 1, !dbg !171
  %351 = insertelement <8 x i32> %350, i32 %119, i64 2, !dbg !171
  %352 = insertelement <8 x i32> %351, i32 %151, i64 3, !dbg !171
  %353 = insertelement <8 x i32> %352, i32 %183, i64 4, !dbg !171
  %354 = insertelement <8 x i32> %353, i32 %217, i64 5, !dbg !171
  %355 = insertelement <8 x i32> %354, i32 %252, i64 6, !dbg !171
  %356 = insertelement <8 x i32> %355, i32 %286, i64 7, !dbg !171
  %357 = bitcast <8 x i32> %356 to <8 x float>, !dbg !171
  %358 = fmul <8 x float> %348, %357, !dbg !176
  %359 = insertelement <8 x i32> poison, i32 %338, i64 0, !dbg !173
  %360 = insertelement <8 x i32> %359, i32 %87, i64 1, !dbg !173
  %361 = insertelement <8 x i32> %360, i32 %121, i64 2, !dbg !173
  %362 = insertelement <8 x i32> %361, i32 %153, i64 3, !dbg !173
  %363 = insertelement <8 x i32> %362, i32 %185, i64 4, !dbg !173
  %364 = insertelement <8 x i32> %363, i32 %219, i64 5, !dbg !173
  %365 = insertelement <8 x i32> %364, i32 %254, i64 6, !dbg !173
  %366 = insertelement <8 x i32> %365, i32 %288, i64 7, !dbg !173
  %367 = bitcast <8 x i32> %366 to <8 x float>, !dbg !173
  %368 = fadd <8 x float> %358, %367, !dbg !177
  %369 = fcmp ole <8 x float> %368, zeroinitializer, !dbg !178
  %370 = select <8 x i1> %369, <8 x float> zeroinitializer, <8 x float> %368, !dbg !178
  %371 = extractelement <8 x float> %370, i64 7, !dbg !182
  %372 = fcmp uno float %371, 0.000000e+00, !dbg !182
  %373 = fcmp olt <8 x float> %370, splat (float 6.000000e+00), !dbg !184
  %374 = extractelement <8 x i1> %373, i64 7, !dbg !186
  %375 = or i1 %374, %372, !dbg !186
  %376 = select i1 %375, float %371, float 6.000000e+00, !dbg !187
  %377 = extractelement <8 x float> %370, i64 6, !dbg !188
  %378 = fcmp uno float %377, 0.000000e+00, !dbg !188
  %379 = extractelement <8 x i1> %373, i64 6, !dbg !190
  %380 = or i1 %379, %378, !dbg !190
  %381 = select i1 %380, float %377, float 6.000000e+00, !dbg !191
  %382 = extractelement <8 x float> %370, i64 5, !dbg !192
  %383 = fcmp uno float %382, 0.000000e+00, !dbg !192
  %384 = extractelement <8 x i1> %373, i64 5, !dbg !194
  %385 = or i1 %384, %383, !dbg !194
  %386 = select i1 %385, float %382, float 6.000000e+00, !dbg !195
  %387 = extractelement <8 x float> %370, i64 4, !dbg !196
  %388 = fcmp uno float %387, 0.000000e+00, !dbg !196
  %389 = extractelement <8 x i1> %373, i64 4, !dbg !198
  %390 = or i1 %389, %388, !dbg !198
  %391 = select i1 %390, float %387, float 6.000000e+00, !dbg !199
  %392 = extractelement <8 x float> %370, i64 3, !dbg !200
  %393 = fcmp uno float %392, 0.000000e+00, !dbg !200
  %394 = extractelement <8 x i1> %373, i64 3, !dbg !202
  %395 = or i1 %394, %393, !dbg !202
  %396 = select i1 %395, float %392, float 6.000000e+00, !dbg !203
  %397 = extractelement <8 x float> %370, i64 2, !dbg !204
  %398 = fcmp uno float %397, 0.000000e+00, !dbg !204
  %399 = extractelement <8 x i1> %373, i64 2, !dbg !206
  %400 = or i1 %399, %398, !dbg !206
  %401 = select i1 %400, float %397, float 6.000000e+00, !dbg !207
  %402 = extractelement <8 x float> %370, i64 1, !dbg !208
  %403 = fcmp uno float %402, 0.000000e+00, !dbg !208
  %404 = extractelement <8 x i1> %373, i64 1, !dbg !210
  %405 = or i1 %404, %403, !dbg !210
  %406 = select i1 %405, float %402, float 6.000000e+00, !dbg !211
  %407 = extractelement <8 x float> %370, i64 0, !dbg !212
  %408 = fcmp uno float %407, 0.000000e+00, !dbg !212
  %409 = extractelement <8 x i1> %373, i64 0, !dbg !213
  %410 = or i1 %409, %408, !dbg !213
  %411 = select i1 %410, float %407, float 6.000000e+00, !dbg !214
  %412 = select i1 %289, float %411, float 0.000000e+00, !dbg !215
  %413 = select i1 %255, float %376, float %412, !dbg !216
  %414 = select i1 %220, float %381, float %413, !dbg !216
  %415 = select i1 %186, float %386, float %414, !dbg !216
  %416 = select i1 %154, float %391, float %415, !dbg !216
  %417 = select i1 %122, float %396, float %416, !dbg !216
  %418 = select i1 %89, float %401, float %417, !dbg !216
  %419 = select i1 %56, float %406, float %418, !dbg !216
  %420 = sext i32 %47 to i64, !dbg !217
  %421 = getelementptr float, ptr addrspace(1) %40, i64 %420, !dbg !217
  %422 = bitcast float %419 to i32, !dbg !218
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %421, i1 %48) #3, !dbg !218
  ret void, !dbg !219
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfd46hfvgug5rnfjm2wp2merxuwih44ia2zzbxtail6bsbtp67cm.py", directory: "inductor_cache/fd")
!4 = !{ptr @triton_poi_fused_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_3", linkageName: "triton_poi_fused_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 26, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 60, scope: !7)
!28 = !DILocation(line: 35, column: 53, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 35, scope: !7)
!33 = !DILocation(line: 40, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 27, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 36, scope: !7)
!40 = !DILocation(line: 60, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 47, scope: !7)
!42 = !DILocation(line: 61, column: 40, scope: !7)
!43 = !DILocation(line: 61, column: 36, scope: !7)
!44 = !DILocation(line: 61, column: 53, scope: !7)
!45 = !DILocation(line: 61, column: 31, scope: !7)
!46 = !DILocation(line: 61, column: 69, scope: !7)
!47 = !DILocation(line: 61, column: 61, scope: !7)
!48 = !DILocation(line: 62, column: 31, scope: !7)
!49 = !DILocation(line: 62, column: 43, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 43, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 67, column: 27, scope: !7)
!54 = !DILocation(line: 69, column: 20, scope: !7)
!55 = !DILocation(line: 73, column: 31, scope: !7)
!56 = !DILocation(line: 73, column: 43, scope: !7)
!57 = !DILocation(line: 75, column: 31, scope: !7)
!58 = !DILocation(line: 75, column: 43, scope: !7)
!59 = !DILocation(line: 86, column: 20, scope: !7)
!60 = !DILocation(line: 87, column: 48, scope: !7)
!61 = !DILocation(line: 87, column: 41, scope: !7)
!62 = !DILocation(line: 87, column: 54, scope: !7)
!63 = !DILocation(line: 87, column: 32, scope: !7)
!64 = !DILocation(line: 87, column: 70, scope: !7)
!65 = !DILocation(line: 87, column: 62, scope: !7)
!66 = !DILocation(line: 88, column: 32, scope: !7)
!67 = !DILocation(line: 88, column: 44, scope: !7)
!68 = !DILocation(line: 90, column: 32, scope: !7)
!69 = !DILocation(line: 90, column: 44, scope: !7)
!70 = !DILocation(line: 92, column: 20, scope: !7)
!71 = !DILocation(line: 93, column: 27, scope: !7)
!72 = !DILocation(line: 95, column: 20, scope: !7)
!73 = !DILocation(line: 99, column: 32, scope: !7)
!74 = !DILocation(line: 99, column: 44, scope: !7)
!75 = !DILocation(line: 101, column: 32, scope: !7)
!76 = !DILocation(line: 101, column: 44, scope: !7)
!77 = !DILocation(line: 112, column: 20, scope: !7)
!78 = !DILocation(line: 113, column: 49, scope: !7)
!79 = !DILocation(line: 113, column: 41, scope: !7)
!80 = !DILocation(line: 113, column: 55, scope: !7)
!81 = !DILocation(line: 113, column: 32, scope: !7)
!82 = !DILocation(line: 113, column: 71, scope: !7)
!83 = !DILocation(line: 113, column: 63, scope: !7)
!84 = !DILocation(line: 114, column: 32, scope: !7)
!85 = !DILocation(line: 114, column: 45, scope: !7)
!86 = !DILocation(line: 116, column: 32, scope: !7)
!87 = !DILocation(line: 116, column: 45, scope: !7)
!88 = !DILocation(line: 118, column: 20, scope: !7)
!89 = !DILocation(line: 119, column: 27, scope: !7)
!90 = !DILocation(line: 121, column: 20, scope: !7)
!91 = !DILocation(line: 125, column: 32, scope: !7)
!92 = !DILocation(line: 125, column: 45, scope: !7)
!93 = !DILocation(line: 127, column: 32, scope: !7)
!94 = !DILocation(line: 127, column: 45, scope: !7)
!95 = !DILocation(line: 138, column: 22, scope: !7)
!96 = !DILocation(line: 139, column: 50, scope: !7)
!97 = !DILocation(line: 139, column: 42, scope: !7)
!98 = !DILocation(line: 139, column: 59, scope: !7)
!99 = !DILocation(line: 139, column: 38, scope: !7)
!100 = !DILocation(line: 139, column: 56, scope: !7)
!101 = !DILocation(line: 139, column: 33, scope: !7)
!102 = !DILocation(line: 139, column: 73, scope: !7)
!103 = !DILocation(line: 139, column: 64, scope: !7)
!104 = !DILocation(line: 140, column: 33, scope: !7)
!105 = !DILocation(line: 140, column: 46, scope: !7)
!106 = !DILocation(line: 142, column: 33, scope: !7)
!107 = !DILocation(line: 142, column: 46, scope: !7)
!108 = !DILocation(line: 144, column: 22, scope: !7)
!109 = !DILocation(line: 145, column: 28, scope: !7)
!110 = !DILocation(line: 147, column: 22, scope: !7)
!111 = !DILocation(line: 151, column: 33, scope: !7)
!112 = !DILocation(line: 151, column: 46, scope: !7)
!113 = !DILocation(line: 153, column: 33, scope: !7)
!114 = !DILocation(line: 153, column: 46, scope: !7)
!115 = !DILocation(line: 164, column: 22, scope: !7)
!116 = !DILocation(line: 165, column: 40, scope: !7)
!117 = !DILocation(line: 165, column: 38, scope: !7)
!118 = !DILocation(line: 165, column: 57, scope: !7)
!119 = !DILocation(line: 165, column: 49, scope: !7)
!120 = !DILocation(line: 165, column: 45, scope: !7)
!121 = !DILocation(line: 165, column: 63, scope: !7)
!122 = !DILocation(line: 165, column: 33, scope: !7)
!123 = !DILocation(line: 165, column: 80, scope: !7)
!124 = !DILocation(line: 165, column: 71, scope: !7)
!125 = !DILocation(line: 166, column: 33, scope: !7)
!126 = !DILocation(line: 166, column: 46, scope: !7)
!127 = !DILocation(line: 168, column: 33, scope: !7)
!128 = !DILocation(line: 168, column: 46, scope: !7)
!129 = !DILocation(line: 170, column: 22, scope: !7)
!130 = !DILocation(line: 171, column: 28, scope: !7)
!131 = !DILocation(line: 173, column: 22, scope: !7)
!132 = !DILocation(line: 177, column: 33, scope: !7)
!133 = !DILocation(line: 177, column: 46, scope: !7)
!134 = !DILocation(line: 179, column: 33, scope: !7)
!135 = !DILocation(line: 179, column: 46, scope: !7)
!136 = !DILocation(line: 190, column: 22, scope: !7)
!137 = !DILocation(line: 191, column: 57, scope: !7)
!138 = !DILocation(line: 191, column: 49, scope: !7)
!139 = !DILocation(line: 191, column: 67, scope: !7)
!140 = !DILocation(line: 191, column: 45, scope: !7)
!141 = !DILocation(line: 191, column: 63, scope: !7)
!142 = !DILocation(line: 191, column: 33, scope: !7)
!143 = !DILocation(line: 191, column: 81, scope: !7)
!144 = !DILocation(line: 191, column: 72, scope: !7)
!145 = !DILocation(line: 192, column: 33, scope: !7)
!146 = !DILocation(line: 192, column: 46, scope: !7)
!147 = !DILocation(line: 194, column: 33, scope: !7)
!148 = !DILocation(line: 194, column: 46, scope: !7)
!149 = !DILocation(line: 196, column: 22, scope: !7)
!150 = !DILocation(line: 197, column: 28, scope: !7)
!151 = !DILocation(line: 199, column: 22, scope: !7)
!152 = !DILocation(line: 203, column: 33, scope: !7)
!153 = !DILocation(line: 203, column: 46, scope: !7)
!154 = !DILocation(line: 205, column: 33, scope: !7)
!155 = !DILocation(line: 205, column: 46, scope: !7)
!156 = !DILocation(line: 213, column: 21, scope: !7)
!157 = !DILocation(line: 216, column: 50, scope: !7)
!158 = !DILocation(line: 216, column: 42, scope: !7)
!159 = !DILocation(line: 216, column: 56, scope: !7)
!160 = !DILocation(line: 216, column: 33, scope: !7)
!161 = !DILocation(line: 216, column: 73, scope: !7)
!162 = !DILocation(line: 216, column: 64, scope: !7)
!163 = !DILocation(line: 217, column: 33, scope: !7)
!164 = !DILocation(line: 217, column: 46, scope: !7)
!165 = !DILocation(line: 219, column: 33, scope: !7)
!166 = !DILocation(line: 219, column: 46, scope: !7)
!167 = !DILocation(line: 221, column: 22, scope: !7)
!168 = !DILocation(line: 222, column: 28, scope: !7)
!169 = !DILocation(line: 224, column: 22, scope: !7)
!170 = !DILocation(line: 228, column: 33, scope: !7)
!171 = !DILocation(line: 228, column: 46, scope: !7)
!172 = !DILocation(line: 230, column: 33, scope: !7)
!173 = !DILocation(line: 230, column: 46, scope: !7)
!174 = !DILocation(line: 218, column: 22, scope: !7)
!175 = !DILocation(line: 227, column: 22, scope: !7)
!176 = !DILocation(line: 229, column: 22, scope: !7)
!177 = !DILocation(line: 231, column: 22, scope: !7)
!178 = !DILocation(line: 121, column: 29, scope: !179, inlinedAt: !181)
!179 = distinct !DILexicalBlockFile(scope: !7, file: !180, discriminator: 0)
!180 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!181 = !DILocation(line: 233, column: 44, scope: !7)
!182 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !183)
!183 = !DILocation(line: 210, column: 44, scope: !7)
!184 = !DILocation(line: 110, column: 15, scope: !179, inlinedAt: !185)
!185 = !DILocation(line: 235, column: 44, scope: !7)
!186 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !183)
!187 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !183)
!188 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !189)
!189 = !DILocation(line: 184, column: 44, scope: !7)
!190 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !189)
!191 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !189)
!192 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !193)
!193 = !DILocation(line: 158, column: 44, scope: !7)
!194 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !193)
!195 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !193)
!196 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !197)
!197 = !DILocation(line: 132, column: 44, scope: !7)
!198 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !197)
!199 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !197)
!200 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !201)
!201 = !DILocation(line: 106, column: 42, scope: !7)
!202 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !201)
!203 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !201)
!204 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !205)
!205 = !DILocation(line: 80, column: 42, scope: !7)
!206 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !205)
!207 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !205)
!208 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !209)
!209 = !DILocation(line: 54, column: 42, scope: !7)
!210 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !209)
!211 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !209)
!212 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !185)
!213 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !185)
!214 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !185)
!215 = !DILocation(line: 237, column: 38, scope: !7)
!216 = !DILocation(line: 0, scope: !7)
!217 = !DILocation(line: 245, column: 25, scope: !7)
!218 = !DILocation(line: 245, column: 38, scope: !7)
!219 = !DILocation(line: 245, column: 4, scope: !7)
