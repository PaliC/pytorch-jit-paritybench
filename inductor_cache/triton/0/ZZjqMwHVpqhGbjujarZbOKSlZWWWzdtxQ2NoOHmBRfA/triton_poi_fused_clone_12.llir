; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %9, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = or disjoint i32 %23, 2, !dbg !18
  %25 = icmp slt i32 %21, 4, !dbg !19
  %26 = icmp slt i32 %23, 4, !dbg !19
  %27 = icmp slt i32 %24, 4, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %28 = sdiv i32 %.frozen, 64, !dbg !20
  %29 = mul i32 %28, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = add i32 %14, %20, !dbg !22
  %31 = shl i32 %30, 2, !dbg !22
  %32 = add i32 %15, %20, !dbg !22
  %33 = shl i32 %32, 2, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = and i1 %25, %17, !dbg !24
  %39 = and i1 %25, %18, !dbg !24
  %40 = and i1 %19, %26, !dbg !24
  %41 = and i1 %27, %19, !dbg !24
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %38) #2, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %67 = bitcast i32 %63 to float, !dbg !27
  %68 = bitcast i32 %64 to float, !dbg !27
  %69 = bitcast i32 %65 to float, !dbg !27
  %70 = bitcast i32 %66 to float, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %39) #2, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !27
  %76 = bitcast i32 %72 to float, !dbg !27
  %77 = bitcast i32 %73 to float, !dbg !27
  %78 = bitcast i32 %74 to float, !dbg !27
  %79 = bitcast i32 %75 to float, !dbg !27
  %80 = sext i32 %21 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %25) #2, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %87 = bitcast i32 %83 to float, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = bitcast i32 %86 to float, !dbg !29
  %91 = fadd float %67, %87, !dbg !30
  %92 = fadd float %68, %88, !dbg !30
  %93 = fadd float %69, %89, !dbg !30
  %94 = fadd float %70, %90, !dbg !30
  %95 = fadd float %76, %87, !dbg !30
  %96 = fadd float %77, %88, !dbg !30
  %97 = fadd float %78, %89, !dbg !30
  %98 = fadd float %79, %90, !dbg !30
  %99 = fadd float %91, %47, !dbg !31
  %100 = fadd float %92, %48, !dbg !31
  %101 = fadd float %93, %49, !dbg !31
  %102 = fadd float %94, %50, !dbg !31
  %103 = fadd float %95, %56, !dbg !31
  %104 = fadd float %96, %57, !dbg !31
  %105 = fadd float %97, %58, !dbg !31
  %106 = fadd float %98, %59, !dbg !31
  %107 = shl i32 %23, 6, !dbg !32
  %108 = shl i32 %24, 6, !dbg !32
  %109 = shl i32 %28, 8, !dbg !33
  %110 = add i32 %109, %.decomposed, !dbg !34
  %111 = add i32 %110, %107, !dbg !35
  %112 = add i32 %110, %108, !dbg !35
  %113 = sext i32 %111 to i64, !dbg !36
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !36
  %115 = sext i32 %112 to i64, !dbg !36
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !36
  %117 = and i32 %12, 508, !dbg !37
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !37
  %119 = bitcast float %99 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !37
  %120 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 1040, !dbg !37
  %121 = bitcast float %100 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !37
  %122 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 2080, !dbg !37
  %123 = bitcast float %101 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !37
  %124 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 3120, !dbg !37
  %125 = bitcast float %102 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !37
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %127 = bitcast float %103 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !37
  %128 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 1552, !dbg !37
  %129 = bitcast float %104 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !37
  %130 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 2592, !dbg !37
  %131 = bitcast float %105 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !37
  %132 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 3632, !dbg !37
  %133 = bitcast float %106 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %134 = lshr i32 %12, 6, !dbg !37
  %135 = and i32 %134, 4, !dbg !37
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !37
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %117, !dbg !37
  %138 = or disjoint i32 %117, 512, !dbg !37
  %139 = lshr i32 %138, 6, !dbg !37
  %140 = and i32 %139, 12, !dbg !37
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !37
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %138, !dbg !37
  %143 = load <4 x i32>, ptr addrspace(3) %142, align 16, !dbg !37
  %.extract = load i32, ptr addrspace(3) %137, align 16, !dbg !37
  %144 = getelementptr inbounds i8, ptr addrspace(3) %137, i32 4, !dbg !37
  %.extract8 = load i32, ptr addrspace(3) %144, align 4, !dbg !37
  %145 = getelementptr inbounds i8, ptr addrspace(3) %137, i32 8, !dbg !37
  %.extract9 = load i32, ptr addrspace(3) %145, align 8, !dbg !37
  %146 = getelementptr inbounds i8, ptr addrspace(3) %137, i32 12, !dbg !37
  %.extract10 = load i32, ptr addrspace(3) %146, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %114, i1 %40) #2, !dbg !37
  %.extract11 = extractelement <4 x i32> %143, i64 0, !dbg !37
  %.extract12 = extractelement <4 x i32> %143, i64 1, !dbg !37
  %.extract13 = extractelement <4 x i32> %143, i64 2, !dbg !37
  %.extract14 = extractelement <4 x i32> %143, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %116, i1 %41) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxsaktgl4yafrcwonfxkoakr7xyqoiuiot2ac5gbqlju4a2jsgbl.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_poi_fused_clone_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_12", linkageName: "triton_poi_fused_clone_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 37, column: 42, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 38, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 53, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
