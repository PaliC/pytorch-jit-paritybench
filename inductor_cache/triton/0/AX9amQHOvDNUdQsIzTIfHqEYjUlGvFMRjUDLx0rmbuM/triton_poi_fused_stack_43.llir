; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_stack_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !13
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %20 = or disjoint <2 x i32> %19, <i32 3, i32 1>, !dbg !13
  %21 = or disjoint i32 %16, 512, !dbg !13
  %22 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %23 = insertelement <2 x i32> %22, i32 %16, i64 1, !dbg !14
  %24 = sdiv <2 x i32> %23, splat (i32 32), !dbg !14
  %25 = srem <2 x i32> %24, splat (i32 32), !dbg !15
  %26 = srem i32 %16, 32, !dbg !16
  %27 = srem i32 %17, 32, !dbg !16
  %28 = srem <2 x i32> %20, splat (i32 32), !dbg !16
  %29 = sdiv i32 %16, 1024, !dbg !17
  %30 = sdiv i32 %21, 1024, !dbg !17
  %31 = srem i32 %29, 64, !dbg !18
  %32 = srem i32 %30, 64, !dbg !18
  %33 = extractelement <2 x i32> %25, i64 1, !dbg !19
  %34 = icmp slt i32 %33, 16, !dbg !20
  %35 = extractelement <2 x i32> %25, i64 0, !dbg !19
  %36 = icmp slt i32 %35, 16, !dbg !20
  %37 = trunc nsw <2 x i32> %28 to <2 x i8>, !dbg !21
  %38 = srem <2 x i8> %37, splat (i8 2), !dbg !21
  %39 = shl nsw <2 x i8> %38, splat (i8 4), !dbg !22
  %40 = shufflevector <2 x i8> %39, <2 x i8> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !22
  %41 = add nsw <2 x i32> %25, splat (i32 -16), !dbg !23
  %42 = trunc nsw <2 x i32> %41 to <2 x i8>, !dbg !24
  %43 = trunc nsw <2 x i32> %25 to <2 x i8>, !dbg !24
  %44 = shufflevector <2 x i8> %42, <2 x i8> %43, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !24
  %45 = add nsw <8 x i8> %40, %44, !dbg !24
  %46 = icmp slt <8 x i8> %45, splat (i8 16), !dbg !25
  %47 = extractelement <8 x i1> %46, i64 7, !dbg !26
  %48 = and i1 %34, %47, !dbg !26
  %49 = extractelement <8 x i1> %46, i64 6, !dbg !26
  %50 = and i1 %34, %49, !dbg !26
  %51 = extractelement <8 x i1> %46, i64 5, !dbg !26
  %52 = and i1 %36, %51, !dbg !26
  %53 = extractelement <8 x i1> %46, i64 4, !dbg !26
  %54 = and i1 %36, %53, !dbg !26
  %55 = shl nsw i32 %33, 4, !dbg !27
  %56 = extractelement <8 x i8> %45, i64 7, !dbg !27
  %57 = sext i8 %56 to i32, !dbg !27
  %58 = shl nsw i32 %57, 4, !dbg !27
  %59 = extractelement <8 x i8> %45, i64 6, !dbg !27
  %60 = sext i8 %59 to i32, !dbg !27
  %61 = shl nsw i32 %60, 4, !dbg !27
  %62 = shl nsw i32 %35, 4, !dbg !27
  %63 = extractelement <8 x i8> %45, i64 5, !dbg !27
  %64 = sext i8 %63 to i32, !dbg !27
  %65 = shl nsw i32 %64, 4, !dbg !27
  %66 = extractelement <8 x i8> %45, i64 4, !dbg !27
  %67 = sext i8 %66 to i32, !dbg !27
  %68 = shl nsw i32 %67, 4, !dbg !27
  %69 = shl nsw i32 %29, 8, !dbg !28
  %70 = shl nsw i32 %30, 8, !dbg !28
  %.lhs.trunc15 = trunc nsw i32 %26 to i8, !dbg !29
  %71 = ashr exact i8 %.lhs.trunc15, 1, !dbg !29
  %.sext16 = sext i8 %71 to i32, !dbg !29
  %72 = extractelement <2 x i8> %37, i64 1, !dbg !29
  %73 = sdiv i8 %72, 2, !dbg !29
  %.sext18 = sext i8 %73 to i32, !dbg !29
  %.lhs.trunc19 = trunc nsw i32 %27 to i8, !dbg !29
  %74 = ashr exact i8 %.lhs.trunc19, 1, !dbg !29
  %.sext20 = sext i8 %74 to i32, !dbg !29
  %75 = extractelement <2 x i8> %37, i64 0, !dbg !29
  %76 = sdiv i8 %75, 2, !dbg !29
  %.sext22 = sext i8 %76 to i32, !dbg !29
  %77 = add nsw i32 %69, %.sext16, !dbg !30
  %78 = add nsw i32 %77, %55, !dbg !31
  %79 = add nsw i32 %69, %.sext18, !dbg !30
  %80 = add nsw i32 %79, %58, !dbg !31
  %81 = add nsw i32 %69, %.sext20, !dbg !30
  %82 = add nsw i32 %81, %55, !dbg !31
  %83 = add nsw i32 %69, %.sext22, !dbg !30
  %84 = add nsw i32 %83, %61, !dbg !31
  %85 = add nsw i32 %70, %.sext16, !dbg !30
  %86 = add nsw i32 %85, %62, !dbg !31
  %87 = add nsw i32 %70, %.sext18, !dbg !30
  %88 = add nsw i32 %87, %65, !dbg !31
  %89 = add nsw i32 %70, %.sext20, !dbg !30
  %90 = add nsw i32 %89, %62, !dbg !31
  %91 = add nsw i32 %70, %.sext22, !dbg !30
  %92 = add nsw i32 %91, %68, !dbg !31
  %93 = sext i32 %78 to i64, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !32
  %95 = sext i32 %80 to i64, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !32
  %97 = sext i32 %82 to i64, !dbg !32
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !32
  %99 = sext i32 %84 to i64, !dbg !32
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !32
  %101 = sext i32 %86 to i64, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !32
  %103 = sext i32 %88 to i64, !dbg !32
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !32
  %105 = sext i32 %90 to i64, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !32
  %107 = sext i32 %92 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %34, i32 0, i1 %34) #1, !dbg !33
  %110 = bitcast i32 %109 to float, !dbg !33
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %48, i32 0, i1 %48) #1, !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %34, i32 0, i1 %34) #1, !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %50, i32 0, i1 %50) #1, !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %36, i32 0, i1 %36) #1, !dbg !33
  %118 = bitcast i32 %117 to float, !dbg !33
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %52, i32 0, i1 %52) #1, !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %36, i32 0, i1 %36) #1, !dbg !33
  %122 = bitcast i32 %121 to float, !dbg !33
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %54, i32 0, i1 %54) #1, !dbg !33
  %124 = bitcast i32 %123 to float, !dbg !33
  %125 = sext i32 %31 to i64, !dbg !34
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !34
  %127 = sext i32 %32 to i64, !dbg !34
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !34
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %34, i32 0, i1 %34) #1, !dbg !35
  %130 = bitcast i32 %129 to float, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %48, i32 0, i1 %48) #1, !dbg !35
  %132 = bitcast i32 %131 to float, !dbg !35
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %34, i32 0, i1 %34) #1, !dbg !35
  %134 = bitcast i32 %133 to float, !dbg !35
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %50, i32 0, i1 %50) #1, !dbg !35
  %136 = bitcast i32 %135 to float, !dbg !35
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %36, i32 0, i1 %36) #1, !dbg !35
  %138 = bitcast i32 %137 to float, !dbg !35
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %52, i32 0, i1 %52) #1, !dbg !35
  %140 = bitcast i32 %139 to float, !dbg !35
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %36, i32 0, i1 %36) #1, !dbg !35
  %142 = bitcast i32 %141 to float, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %54, i32 0, i1 %54) #1, !dbg !35
  %144 = bitcast i32 %143 to float, !dbg !35
  %145 = fadd float %110, %130, !dbg !36
  %146 = fadd float %112, %132, !dbg !36
  %147 = fadd float %114, %134, !dbg !36
  %148 = fadd float %116, %136, !dbg !36
  %149 = fadd float %118, %138, !dbg !36
  %150 = fadd float %120, %140, !dbg !36
  %151 = fadd float %122, %142, !dbg !36
  %152 = fadd float %124, %144, !dbg !36
  %153 = select i1 %48, float %146, float 0.000000e+00, !dbg !37
  %154 = select i1 %50, float %148, float 0.000000e+00, !dbg !37
  %155 = select i1 %52, float %150, float 0.000000e+00, !dbg !37
  %156 = select i1 %54, float %152, float 0.000000e+00, !dbg !37
  %157 = icmp sgt i8 %56, 15, !dbg !38
  %158 = icmp sgt i8 %59, 15, !dbg !38
  %159 = icmp sgt i8 %63, 15, !dbg !38
  %160 = icmp sgt i8 %66, 15, !dbg !38
  %161 = and i1 %34, %157, !dbg !39
  %162 = and i1 %34, %158, !dbg !39
  %163 = and i1 %36, %159, !dbg !39
  %164 = and i1 %36, %160, !dbg !39
  %165 = extractelement <2 x i8> %39, i64 1, !dbg !40
  %narrow = add nsw i8 %165, -16, !dbg !40
  %166 = sext i8 %narrow to i32, !dbg !40
  %167 = extractelement <2 x i8> %39, i64 0, !dbg !40
  %narrow31 = add nsw i8 %167, -16, !dbg !40
  %168 = sext i8 %narrow31 to i32, !dbg !40
  %169 = add nsw i32 %33, %166, !dbg !19
  %170 = add nsw i32 %33, %168, !dbg !19
  %171 = add nsw i32 %35, %166, !dbg !19
  %172 = add nsw i32 %35, %168, !dbg !19
  %173 = shl nsw i32 %169, 4, !dbg !41
  %174 = shl nsw i32 %170, 4, !dbg !41
  %175 = shl nsw i32 %171, 4, !dbg !41
  %176 = shl nsw i32 %172, 4, !dbg !41
  %177 = add nsw i32 %77, -256, !dbg !42
  %178 = add nsw i32 %177, %55, !dbg !43
  %179 = add nsw i32 %79, %173, !dbg !43
  %180 = add nsw i32 %81, -256, !dbg !42
  %181 = add nsw i32 %180, %55, !dbg !43
  %182 = add nsw i32 %83, %174, !dbg !43
  %183 = add nsw i32 %85, -256, !dbg !42
  %184 = add nsw i32 %183, %62, !dbg !43
  %185 = add nsw i32 %87, %175, !dbg !43
  %186 = add nsw i32 %89, -256, !dbg !42
  %187 = add nsw i32 %186, %62, !dbg !43
  %188 = add nsw i32 %91, %176, !dbg !43
  %189 = sext i32 %178 to i64, !dbg !44
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !44
  %191 = sext i32 %179 to i64, !dbg !44
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !44
  %193 = sext i32 %181 to i64, !dbg !44
  %194 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !44
  %195 = sext i32 %182 to i64, !dbg !44
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !44
  %197 = sext i32 %184 to i64, !dbg !44
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !44
  %199 = sext i32 %185 to i64, !dbg !44
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !44
  %201 = sext i32 %187 to i64, !dbg !44
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !44
  %203 = sext i32 %188 to i64, !dbg !44
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !44
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 false, i32 0, i1 false) #1, !dbg !45
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %161, i32 0, i1 %161) #1, !dbg !45
  %207 = bitcast i32 %206 to float, !dbg !45
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 false, i32 0, i1 false) #1, !dbg !45
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %162, i32 0, i1 %162) #1, !dbg !45
  %210 = bitcast i32 %209 to float, !dbg !45
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 false, i32 0, i1 false) #1, !dbg !45
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %163, i32 0, i1 %163) #1, !dbg !45
  %213 = bitcast i32 %212 to float, !dbg !45
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 false, i32 0, i1 false) #1, !dbg !45
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %164, i32 0, i1 %164) #1, !dbg !45
  %216 = bitcast i32 %215 to float, !dbg !45
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !46
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !46
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 false, i32 0, i1 false) #1, !dbg !47
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %161, i32 0, i1 %161) #1, !dbg !47
  %221 = bitcast i32 %220 to float, !dbg !47
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 false, i32 0, i1 false) #1, !dbg !47
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %162, i32 0, i1 %162) #1, !dbg !47
  %224 = bitcast i32 %223 to float, !dbg !47
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 false, i32 0, i1 false) #1, !dbg !47
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %163, i32 0, i1 %163) #1, !dbg !47
  %227 = bitcast i32 %226 to float, !dbg !47
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 false, i32 0, i1 false) #1, !dbg !47
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %164, i32 0, i1 %164) #1, !dbg !47
  %230 = bitcast i32 %229 to float, !dbg !47
  %231 = fadd float %207, %221, !dbg !48
  %232 = fadd float %210, %224, !dbg !48
  %233 = fadd float %213, %227, !dbg !48
  %234 = fadd float %216, %230, !dbg !48
  %235 = select i1 %161, float %231, float 0.000000e+00, !dbg !49
  %236 = select i1 %162, float %232, float 0.000000e+00, !dbg !49
  %237 = select i1 %163, float %233, float 0.000000e+00, !dbg !49
  %238 = select i1 %164, float %234, float 0.000000e+00, !dbg !49
  %239 = select i1 %47, float %153, float %235, !dbg !50
  %240 = select i1 %49, float %154, float %236, !dbg !50
  %241 = select i1 %51, float %155, float %237, !dbg !50
  %242 = select i1 %53, float %156, float %238, !dbg !50
  %243 = icmp sgt i32 %33, 15, !dbg !51
  %244 = icmp sgt i32 %35, 15, !dbg !51
  %245 = extractelement <8 x i1> %46, i64 3, !dbg !52
  %246 = and i1 %243, %245, !dbg !52
  %247 = extractelement <8 x i1> %46, i64 2, !dbg !52
  %248 = and i1 %243, %247, !dbg !52
  %249 = extractelement <8 x i1> %46, i64 1, !dbg !52
  %250 = and i1 %244, %249, !dbg !52
  %251 = extractelement <8 x i1> %46, i64 0, !dbg !52
  %252 = and i1 %244, %251, !dbg !52
  %253 = extractelement <2 x i32> %41, i64 1, !dbg !53
  %254 = shl nsw i32 %253, 4, !dbg !53
  %255 = extractelement <8 x i8> %45, i64 3, !dbg !53
  %256 = sext i8 %255 to i32, !dbg !53
  %257 = shl nsw i32 %256, 4, !dbg !53
  %258 = extractelement <8 x i8> %45, i64 2, !dbg !53
  %259 = sext i8 %258 to i32, !dbg !53
  %260 = shl nsw i32 %259, 4, !dbg !53
  %261 = extractelement <2 x i32> %41, i64 0, !dbg !53
  %262 = shl nsw i32 %261, 4, !dbg !53
  %263 = extractelement <8 x i8> %45, i64 1, !dbg !53
  %264 = sext i8 %263 to i32, !dbg !53
  %265 = shl nsw i32 %264, 4, !dbg !53
  %266 = extractelement <8 x i8> %45, i64 0, !dbg !53
  %267 = sext i8 %266 to i32, !dbg !53
  %268 = shl nsw i32 %267, 4, !dbg !53
  %269 = add nsw i32 %77, %254, !dbg !54
  %270 = add nsw i32 %79, %257, !dbg !54
  %271 = add nsw i32 %81, %254, !dbg !54
  %272 = add nsw i32 %83, %260, !dbg !54
  %273 = add nsw i32 %85, %262, !dbg !54
  %274 = add nsw i32 %87, %265, !dbg !54
  %275 = add nsw i32 %89, %262, !dbg !54
  %276 = add nsw i32 %91, %268, !dbg !54
  %277 = sext i32 %269 to i64, !dbg !55
  %278 = getelementptr float, ptr addrspace(1) %4, i64 %277, !dbg !55
  %279 = sext i32 %270 to i64, !dbg !55
  %280 = getelementptr float, ptr addrspace(1) %4, i64 %279, !dbg !55
  %281 = sext i32 %271 to i64, !dbg !55
  %282 = getelementptr float, ptr addrspace(1) %4, i64 %281, !dbg !55
  %283 = sext i32 %272 to i64, !dbg !55
  %284 = getelementptr float, ptr addrspace(1) %4, i64 %283, !dbg !55
  %285 = sext i32 %273 to i64, !dbg !55
  %286 = getelementptr float, ptr addrspace(1) %4, i64 %285, !dbg !55
  %287 = sext i32 %274 to i64, !dbg !55
  %288 = getelementptr float, ptr addrspace(1) %4, i64 %287, !dbg !55
  %289 = sext i32 %275 to i64, !dbg !55
  %290 = getelementptr float, ptr addrspace(1) %4, i64 %289, !dbg !55
  %291 = sext i32 %276 to i64, !dbg !55
  %292 = getelementptr float, ptr addrspace(1) %4, i64 %291, !dbg !55
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %243, i32 0, i1 %243) #1, !dbg !56
  %294 = bitcast i32 %293 to float, !dbg !56
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %246, i32 0, i1 %246) #1, !dbg !56
  %296 = bitcast i32 %295 to float, !dbg !56
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %243, i32 0, i1 %243) #1, !dbg !56
  %298 = bitcast i32 %297 to float, !dbg !56
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %248, i32 0, i1 %248) #1, !dbg !56
  %300 = bitcast i32 %299 to float, !dbg !56
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 %244, i32 0, i1 %244) #1, !dbg !56
  %302 = bitcast i32 %301 to float, !dbg !56
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %250, i32 0, i1 %250) #1, !dbg !56
  %304 = bitcast i32 %303 to float, !dbg !56
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %244, i32 0, i1 %244) #1, !dbg !56
  %306 = bitcast i32 %305 to float, !dbg !56
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %252, i32 0, i1 %252) #1, !dbg !56
  %308 = bitcast i32 %307 to float, !dbg !56
  %309 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !57
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %127, !dbg !57
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %243, i32 0, i1 %243) #1, !dbg !58
  %312 = bitcast i32 %311 to float, !dbg !58
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %246, i32 0, i1 %246) #1, !dbg !58
  %314 = bitcast i32 %313 to float, !dbg !58
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %243, i32 0, i1 %243) #1, !dbg !58
  %316 = bitcast i32 %315 to float, !dbg !58
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %248, i32 0, i1 %248) #1, !dbg !58
  %318 = bitcast i32 %317 to float, !dbg !58
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %244, i32 0, i1 %244) #1, !dbg !58
  %320 = bitcast i32 %319 to float, !dbg !58
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %250, i32 0, i1 %250) #1, !dbg !58
  %322 = bitcast i32 %321 to float, !dbg !58
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %244, i32 0, i1 %244) #1, !dbg !58
  %324 = bitcast i32 %323 to float, !dbg !58
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %252, i32 0, i1 %252) #1, !dbg !58
  %326 = bitcast i32 %325 to float, !dbg !58
  %327 = fadd float %294, %312, !dbg !59
  %328 = fadd float %296, %314, !dbg !59
  %329 = fadd float %298, %316, !dbg !59
  %330 = fadd float %300, %318, !dbg !59
  %331 = fadd float %302, %320, !dbg !59
  %332 = fadd float %304, %322, !dbg !59
  %333 = fadd float %306, %324, !dbg !59
  %334 = fadd float %308, %326, !dbg !59
  %335 = select i1 %246, float %328, float 0.000000e+00, !dbg !60
  %336 = select i1 %248, float %330, float 0.000000e+00, !dbg !60
  %337 = select i1 %250, float %332, float 0.000000e+00, !dbg !60
  %338 = select i1 %252, float %334, float 0.000000e+00, !dbg !60
  %339 = icmp sgt i8 %255, 15, !dbg !61
  %340 = icmp sgt i8 %258, 15, !dbg !61
  %341 = icmp sgt i8 %263, 15, !dbg !61
  %342 = icmp sgt i8 %266, 15, !dbg !61
  %343 = and i1 %243, %339, !dbg !62
  %344 = and i1 %243, %340, !dbg !62
  %345 = and i1 %244, %341, !dbg !62
  %346 = and i1 %244, %342, !dbg !62
  %347 = add nsw i32 %253, %166, !dbg !63
  %348 = add nsw i32 %253, %168, !dbg !63
  %349 = add nsw i32 %261, %166, !dbg !63
  %350 = add nsw i32 %261, %168, !dbg !63
  %351 = shl nsw i32 %347, 4, !dbg !64
  %352 = shl nsw i32 %348, 4, !dbg !64
  %353 = shl nsw i32 %349, 4, !dbg !64
  %354 = shl nsw i32 %350, 4, !dbg !64
  %355 = add nsw i32 %77, -512, !dbg !65
  %356 = add nsw i32 %355, %55, !dbg !66
  %357 = add nsw i32 %79, %351, !dbg !66
  %358 = add nsw i32 %81, -512, !dbg !65
  %359 = add nsw i32 %358, %55, !dbg !66
  %360 = add nsw i32 %83, %352, !dbg !66
  %361 = add nsw i32 %85, -512, !dbg !65
  %362 = add nsw i32 %361, %62, !dbg !66
  %363 = add nsw i32 %87, %353, !dbg !66
  %364 = add nsw i32 %89, -512, !dbg !65
  %365 = add nsw i32 %364, %62, !dbg !66
  %366 = add nsw i32 %91, %354, !dbg !66
  %367 = sext i32 %356 to i64, !dbg !67
  %368 = getelementptr float, ptr addrspace(1) %6, i64 %367, !dbg !67
  %369 = sext i32 %357 to i64, !dbg !67
  %370 = getelementptr float, ptr addrspace(1) %6, i64 %369, !dbg !67
  %371 = sext i32 %359 to i64, !dbg !67
  %372 = getelementptr float, ptr addrspace(1) %6, i64 %371, !dbg !67
  %373 = sext i32 %360 to i64, !dbg !67
  %374 = getelementptr float, ptr addrspace(1) %6, i64 %373, !dbg !67
  %375 = sext i32 %362 to i64, !dbg !67
  %376 = getelementptr float, ptr addrspace(1) %6, i64 %375, !dbg !67
  %377 = sext i32 %363 to i64, !dbg !67
  %378 = getelementptr float, ptr addrspace(1) %6, i64 %377, !dbg !67
  %379 = sext i32 %365 to i64, !dbg !67
  %380 = getelementptr float, ptr addrspace(1) %6, i64 %379, !dbg !67
  %381 = sext i32 %366 to i64, !dbg !67
  %382 = getelementptr float, ptr addrspace(1) %6, i64 %381, !dbg !67
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 false, i32 0, i1 false) #1, !dbg !68
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %370, i1 %343, i32 0, i1 %343) #1, !dbg !68
  %385 = bitcast i32 %384 to float, !dbg !68
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %372, i1 false, i32 0, i1 false) #1, !dbg !68
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %374, i1 %344, i32 0, i1 %344) #1, !dbg !68
  %388 = bitcast i32 %387 to float, !dbg !68
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %376, i1 false, i32 0, i1 false) #1, !dbg !68
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %378, i1 %345, i32 0, i1 %345) #1, !dbg !68
  %391 = bitcast i32 %390 to float, !dbg !68
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %380, i1 false, i32 0, i1 false) #1, !dbg !68
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %382, i1 %346, i32 0, i1 %346) #1, !dbg !68
  %394 = bitcast i32 %393 to float, !dbg !68
  %395 = getelementptr float, ptr addrspace(1) %7, i64 %125, !dbg !69
  %396 = getelementptr float, ptr addrspace(1) %7, i64 %127, !dbg !69
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 false, i32 0, i1 false) #1, !dbg !70
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %343, i32 0, i1 %343) #1, !dbg !70
  %399 = bitcast i32 %398 to float, !dbg !70
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 false, i32 0, i1 false) #1, !dbg !70
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %344, i32 0, i1 %344) #1, !dbg !70
  %402 = bitcast i32 %401 to float, !dbg !70
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 false, i32 0, i1 false) #1, !dbg !70
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %345, i32 0, i1 %345) #1, !dbg !70
  %405 = bitcast i32 %404 to float, !dbg !70
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 false, i32 0, i1 false) #1, !dbg !70
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %346, i32 0, i1 %346) #1, !dbg !70
  %408 = bitcast i32 %407 to float, !dbg !70
  %409 = fadd float %385, %399, !dbg !71
  %410 = fadd float %388, %402, !dbg !71
  %411 = fadd float %391, %405, !dbg !71
  %412 = fadd float %394, %408, !dbg !71
  %413 = select i1 %343, float %409, float 0.000000e+00, !dbg !72
  %414 = select i1 %344, float %410, float 0.000000e+00, !dbg !72
  %415 = select i1 %345, float %411, float 0.000000e+00, !dbg !72
  %416 = select i1 %346, float %412, float 0.000000e+00, !dbg !72
  %417 = select i1 %245, float %335, float %413, !dbg !73
  %418 = select i1 %247, float %336, float %414, !dbg !73
  %419 = select i1 %249, float %337, float %415, !dbg !73
  %420 = select i1 %251, float %338, float %416, !dbg !73
  %421 = select i1 %34, float %145, float %327, !dbg !74
  %422 = select i1 %34, float %239, float %417, !dbg !74
  %423 = select i1 %34, float %147, float %329, !dbg !74
  %424 = select i1 %34, float %240, float %418, !dbg !74
  %425 = select i1 %36, float %149, float %331, !dbg !74
  %426 = select i1 %36, float %241, float %419, !dbg !74
  %427 = select i1 %36, float %151, float %333, !dbg !74
  %428 = select i1 %36, float %242, float %420, !dbg !74
  %429 = sext i32 %16 to i64, !dbg !75
  %430 = getelementptr float, ptr addrspace(1) %8, i64 %429, !dbg !75
  %431 = sext i32 %21 to i64, !dbg !75
  %432 = getelementptr float, ptr addrspace(1) %8, i64 %431, !dbg !75
  %433 = bitcast float %421 to i32, !dbg !76
  %434 = bitcast float %422 to i32, !dbg !76
  %435 = bitcast float %423 to i32, !dbg !76
  %436 = bitcast float %424 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %433, i32 %434, i32 %435, i32 %436, ptr addrspace(1) %430, i1 true) #1, !dbg !76
  %437 = bitcast float %425 to i32, !dbg !76
  %438 = bitcast float %426 to i32, !dbg !76
  %439 = bitcast float %427 to i32, !dbg !76
  %440 = bitcast float %428 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %437, i32 %438, i32 %439, i32 %440, ptr addrspace(1) %432, i1 true) #1, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfvkhh2rp4zt6mqi36vhtextrrplg56vp5wyom5dz6w5lhn7xfrf.py", directory: "inductor_cache/fv")
!4 = !{ptr @triton_poi_fused_stack_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_43", linkageName: "triton_poi_fused_stack_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 49, column: 60, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 21, scope: !7)
!22 = !DILocation(line: 34, column: 16, scope: !7)
!23 = !DILocation(line: 60, column: 37, scope: !7)
!24 = !DILocation(line: 60, column: 29, scope: !7)
!25 = !DILocation(line: 64, column: 20, scope: !7)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 35, scope: !7)
!28 = !DILocation(line: 40, column: 63, scope: !7)
!29 = !DILocation(line: 40, column: 75, scope: !7)
!30 = !DILocation(line: 40, column: 59, scope: !7)
!31 = !DILocation(line: 40, column: 69, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 80, scope: !7)
!34 = !DILocation(line: 41, column: 31, scope: !7)
!35 = !DILocation(line: 41, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 35, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 43, scope: !7)
!41 = !DILocation(line: 49, column: 35, scope: !7)
!42 = !DILocation(line: 49, column: 67, scope: !7)
!43 = !DILocation(line: 49, column: 77, scope: !7)
!44 = !DILocation(line: 49, column: 31, scope: !7)
!45 = !DILocation(line: 49, column: 88, scope: !7)
!46 = !DILocation(line: 50, column: 31, scope: !7)
!47 = !DILocation(line: 50, column: 36, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 35, scope: !7)
!50 = !DILocation(line: 54, column: 34, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 35, scope: !7)
!54 = !DILocation(line: 66, column: 77, scope: !7)
!55 = !DILocation(line: 66, column: 31, scope: !7)
!56 = !DILocation(line: 66, column: 88, scope: !7)
!57 = !DILocation(line: 67, column: 31, scope: !7)
!58 = !DILocation(line: 67, column: 36, scope: !7)
!59 = !DILocation(line: 68, column: 20, scope: !7)
!60 = !DILocation(line: 70, column: 35, scope: !7)
!61 = !DILocation(line: 71, column: 21, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 75, column: 60, scope: !7)
!64 = !DILocation(line: 75, column: 35, scope: !7)
!65 = !DILocation(line: 75, column: 75, scope: !7)
!66 = !DILocation(line: 75, column: 85, scope: !7)
!67 = !DILocation(line: 75, column: 31, scope: !7)
!68 = !DILocation(line: 75, column: 96, scope: !7)
!69 = !DILocation(line: 76, column: 31, scope: !7)
!70 = !DILocation(line: 76, column: 36, scope: !7)
!71 = !DILocation(line: 77, column: 20, scope: !7)
!72 = !DILocation(line: 79, column: 35, scope: !7)
!73 = !DILocation(line: 80, column: 35, scope: !7)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 84, column: 25, scope: !7)
!76 = !DILocation(line: 84, column: 37, scope: !7)
!77 = !DILocation(line: 84, column: 4, scope: !7)
