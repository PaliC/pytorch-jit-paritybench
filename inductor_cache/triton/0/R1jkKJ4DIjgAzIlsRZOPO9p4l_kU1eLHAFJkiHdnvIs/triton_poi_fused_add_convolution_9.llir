; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %11, 64, !dbg !12
  %13 = or disjoint i32 %11, 128, !dbg !12
  %14 = or disjoint i32 %11, 192, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 12, !dbg !12
  %17 = and i32 %15, 252, !dbg !12
  %18 = or disjoint i32 %8, %11, !dbg !13
  %19 = or disjoint i32 %8, %12, !dbg !13
  %20 = or disjoint i32 %8, %13, !dbg !13
  %21 = or disjoint i32 %8, %14, !dbg !13
  %22 = or disjoint i32 %8, %17, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %24 = shl i32 %23, 4, !dbg !15
  %.lobit12 = lshr i32 %9, 6, !dbg !16
  %25 = and i32 %.lobit12, 3, !dbg !16
  %26 = or disjoint i32 %24, %16, !dbg !17
  %27 = or disjoint i32 %24, %25, !dbg !17
  %28 = or disjoint i32 %27, 4, !dbg !17
  %29 = or disjoint i32 %27, 8, !dbg !17
  %30 = or disjoint i32 %27, 12, !dbg !17
  %31 = icmp slt i32 %26, 64, !dbg !18
  %32 = icmp slt i32 %27, 64, !dbg !18
  %33 = icmp slt i32 %28, 64, !dbg !18
  %34 = icmp slt i32 %29, 64, !dbg !18
  %35 = icmp slt i32 %30, 64, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %36 = sdiv i32 %.frozen, 4096, !dbg !19
  %37 = mul i32 %36, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %37, !dbg !20
  %38 = shl i32 %18, 6, !dbg !21
  %39 = shl i32 %19, 6, !dbg !21
  %40 = shl i32 %20, 6, !dbg !21
  %41 = shl i32 %21, 6, !dbg !21
  %42 = add i32 %26, %38, !dbg !22
  %43 = add i32 %26, %39, !dbg !22
  %44 = add i32 %26, %40, !dbg !22
  %45 = add i32 %26, %41, !dbg !22
  %46 = sext i32 %42 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %43 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %44 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %45 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = bitcast i32 %66 to float, !dbg !24
  %71 = bitcast i32 %67 to float, !dbg !24
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %31) #2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !24
  %77 = bitcast i32 %73 to float, !dbg !24
  %78 = bitcast i32 %74 to float, !dbg !24
  %79 = bitcast i32 %75 to float, !dbg !24
  %80 = bitcast i32 %76 to float, !dbg !24
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %31) #2, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !24
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !24
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !24
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !24
  %86 = bitcast i32 %82 to float, !dbg !24
  %87 = bitcast i32 %83 to float, !dbg !24
  %88 = bitcast i32 %84 to float, !dbg !24
  %89 = bitcast i32 %85 to float, !dbg !24
  %90 = sext i32 %26 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !25
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %31) #2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !27
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !27
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %31) #2, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !28
  %110 = bitcast i32 %106 to float, !dbg !28
  %111 = bitcast i32 %107 to float, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %31) #2, !dbg !28
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !28
  %119 = bitcast i32 %115 to float, !dbg !28
  %120 = bitcast i32 %116 to float, !dbg !28
  %121 = bitcast i32 %117 to float, !dbg !28
  %122 = bitcast i32 %118 to float, !dbg !28
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %31) #2, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !28
  %128 = bitcast i32 %124 to float, !dbg !28
  %129 = bitcast i32 %125 to float, !dbg !28
  %130 = bitcast i32 %126 to float, !dbg !28
  %131 = bitcast i32 %127 to float, !dbg !28
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %31) #2, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !28
  %137 = bitcast i32 %133 to float, !dbg !28
  %138 = bitcast i32 %134 to float, !dbg !28
  %139 = bitcast i32 %135 to float, !dbg !28
  %140 = bitcast i32 %136 to float, !dbg !28
  %141 = fadd float %59, %97, !dbg !29
  %142 = fadd float %60, %98, !dbg !29
  %143 = fadd float %61, %99, !dbg !29
  %144 = fadd float %62, %100, !dbg !29
  %145 = fadd float %68, %97, !dbg !29
  %146 = fadd float %69, %98, !dbg !29
  %147 = fadd float %70, %99, !dbg !29
  %148 = fadd float %71, %100, !dbg !29
  %149 = fadd float %77, %97, !dbg !29
  %150 = fadd float %78, %98, !dbg !29
  %151 = fadd float %79, %99, !dbg !29
  %152 = fadd float %80, %100, !dbg !29
  %153 = fadd float %86, %97, !dbg !29
  %154 = fadd float %87, %98, !dbg !29
  %155 = fadd float %88, %99, !dbg !29
  %156 = fadd float %89, %100, !dbg !29
  %157 = fadd float %141, %110, !dbg !30
  %158 = fadd float %142, %111, !dbg !30
  %159 = fadd float %143, %112, !dbg !30
  %160 = fadd float %144, %113, !dbg !30
  %161 = fadd float %145, %119, !dbg !30
  %162 = fadd float %146, %120, !dbg !30
  %163 = fadd float %147, %121, !dbg !30
  %164 = fadd float %148, %122, !dbg !30
  %165 = fadd float %149, %128, !dbg !30
  %166 = fadd float %150, %129, !dbg !30
  %167 = fadd float %151, %130, !dbg !30
  %168 = fadd float %152, %131, !dbg !30
  %169 = fadd float %153, %137, !dbg !30
  %170 = fadd float %154, %138, !dbg !30
  %171 = fadd float %155, %139, !dbg !30
  %172 = fadd float %156, %140, !dbg !30
  %173 = shl i32 %27, 12, !dbg !31
  %174 = shl i32 %28, 12, !dbg !31
  %175 = shl i32 %29, 12, !dbg !31
  %176 = shl i32 %30, 12, !dbg !31
  %177 = shl i32 %36, 18, !dbg !32
  %178 = add i32 %177, %.decomposed, !dbg !33
  %179 = add i32 %178, %173, !dbg !34
  %180 = add i32 %178, %174, !dbg !34
  %181 = add i32 %178, %175, !dbg !34
  %182 = add i32 %178, %176, !dbg !34
  %183 = sext i32 %179 to i64, !dbg !35
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %183, !dbg !35
  %185 = sext i32 %180 to i64, !dbg !35
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %185, !dbg !35
  %187 = sext i32 %181 to i64, !dbg !35
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !35
  %189 = sext i32 %182 to i64, !dbg !35
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !35
  %191 = shl i32 %9, 10, !dbg !36
  %192 = and i32 %191, 3072, !dbg !36
  %193 = or disjoint i32 %192, %11, !dbg !36
  %194 = and i32 %15, 1020, !dbg !36
  %195 = lshr exact i32 %192, 4, !dbg !36
  %196 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %195, !dbg !36
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %193, !dbg !36
  %198 = bitcast float %157 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !36
  %199 = or disjoint i32 %193, 256, !dbg !36
  %200 = lshr i32 %199, 6, !dbg !36
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !36
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !36
  %203 = bitcast float %158 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !36
  %204 = or disjoint i32 %193, 512, !dbg !36
  %205 = lshr i32 %204, 6, !dbg !36
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !36
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %204, !dbg !36
  %208 = bitcast float %159 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !36
  %209 = or disjoint i32 %193, 768, !dbg !36
  %210 = lshr i32 %209, 6, !dbg !36
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !36
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %209, !dbg !36
  %213 = bitcast float %160 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !36
  %214 = or disjoint i32 %193, 64, !dbg !36
  %215 = getelementptr float, ptr addrspace(3) %196, i32 %214, !dbg !36
  %216 = bitcast float %161 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !36
  %217 = or disjoint i32 %193, 320, !dbg !36
  %218 = lshr i32 %217, 6, !dbg !36
  %219 = and i32 %218, 52, !dbg !36
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !36
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %217, !dbg !36
  %222 = bitcast float %162 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #2, !dbg !36
  %223 = or disjoint i32 %193, 576, !dbg !36
  %224 = lshr i32 %223, 6, !dbg !36
  %225 = and i32 %224, 56, !dbg !36
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !36
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %223, !dbg !36
  %228 = bitcast float %163 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !36
  %229 = or disjoint i32 %193, 832, !dbg !36
  %230 = lshr i32 %229, 6, !dbg !36
  %231 = and i32 %230, 60, !dbg !36
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !36
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %229, !dbg !36
  %234 = bitcast float %164 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !36
  %235 = or disjoint i32 %193, 128, !dbg !36
  %236 = getelementptr float, ptr addrspace(3) %196, i32 %235, !dbg !36
  %237 = bitcast float %165 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #2, !dbg !36
  %238 = or disjoint i32 %193, 384, !dbg !36
  %239 = lshr i32 %238, 6, !dbg !36
  %240 = and i32 %239, 52, !dbg !36
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %240, !dbg !36
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %238, !dbg !36
  %243 = bitcast float %166 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #2, !dbg !36
  %244 = or disjoint i32 %193, 640, !dbg !36
  %245 = lshr i32 %244, 6, !dbg !36
  %246 = and i32 %245, 56, !dbg !36
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !36
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %244, !dbg !36
  %249 = bitcast float %167 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !36
  %250 = or disjoint i32 %193, 896, !dbg !36
  %251 = lshr i32 %250, 6, !dbg !36
  %252 = and i32 %251, 60, !dbg !36
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !36
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !36
  %255 = bitcast float %168 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !36
  %256 = or disjoint i32 %193, 192, !dbg !36
  %257 = getelementptr float, ptr addrspace(3) %196, i32 %256, !dbg !36
  %258 = bitcast float %169 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #2, !dbg !36
  %259 = or disjoint i32 %193, 448, !dbg !36
  %260 = lshr i32 %259, 6, !dbg !36
  %261 = and i32 %260, 52, !dbg !36
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !36
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %259, !dbg !36
  %264 = bitcast float %170 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !36
  %265 = or disjoint i32 %193, 704, !dbg !36
  %266 = lshr i32 %265, 6, !dbg !36
  %267 = and i32 %266, 56, !dbg !36
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !36
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %265, !dbg !36
  %270 = bitcast float %171 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !36
  %271 = or disjoint i32 %193, 960, !dbg !36
  %272 = lshr i32 %271, 6, !dbg !36
  %273 = and i32 %272, 60, !dbg !36
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !36
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %271, !dbg !36
  %276 = bitcast float %172 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %277 = lshr i32 %15, 6, !dbg !36
  %278 = and i32 %277, 12, !dbg !36
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !36
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %194, !dbg !36
  %281 = or disjoint i32 %194, 1024, !dbg !36
  %282 = lshr i32 %281, 6, !dbg !36
  %283 = and i32 %282, 28, !dbg !36
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !36
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %281, !dbg !36
  %286 = load <4 x i32>, ptr addrspace(3) %285, align 16, !dbg !36
  %287 = or disjoint i32 %194, 2048, !dbg !36
  %288 = lshr i32 %287, 6, !dbg !36
  %289 = and i32 %288, 44, !dbg !36
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !36
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %287, !dbg !36
  %292 = load <4 x i32>, ptr addrspace(3) %291, align 16, !dbg !36
  %293 = or disjoint i32 %194, 3072, !dbg !36
  %294 = lshr i32 %293, 6, !dbg !36
  %295 = and i32 %294, 60, !dbg !36
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !36
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %293, !dbg !36
  %298 = load <4 x i32>, ptr addrspace(3) %297, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %280, align 16, !dbg !36
  %299 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 4, !dbg !36
  %.extract18 = load i32, ptr addrspace(3) %299, align 4, !dbg !36
  %300 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 8, !dbg !36
  %.extract19 = load i32, ptr addrspace(3) %300, align 8, !dbg !36
  %301 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 12, !dbg !36
  %.extract20 = load i32, ptr addrspace(3) %301, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %184, i1 %32) #2, !dbg !36
  %.extract21 = extractelement <4 x i32> %286, i64 0, !dbg !36
  %.extract22 = extractelement <4 x i32> %286, i64 1, !dbg !36
  %.extract23 = extractelement <4 x i32> %286, i64 2, !dbg !36
  %.extract24 = extractelement <4 x i32> %286, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %186, i1 %33) #2, !dbg !36
  %.extract25 = extractelement <4 x i32> %292, i64 0, !dbg !36
  %.extract26 = extractelement <4 x i32> %292, i64 1, !dbg !36
  %.extract27 = extractelement <4 x i32> %292, i64 2, !dbg !36
  %.extract28 = extractelement <4 x i32> %292, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %188, i1 %34) #2, !dbg !36
  %.extract29 = extractelement <4 x i32> %298, i64 0, !dbg !36
  %.extract30 = extractelement <4 x i32> %298, i64 1, !dbg !36
  %.extract31 = extractelement <4 x i32> %298, i64 2, !dbg !36
  %.extract32 = extractelement <4 x i32> %298, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %190, i1 %35) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2azcitplqiajftz4frpjloezo4q5y4qt7zgz5o3ag4yfttc72qr.py", directory: "inductor_cache/2a")
!4 = !{ptr @triton_poi_fused_add_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_9", linkageName: "triton_poi_fused_add_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 47, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 40, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 58, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
