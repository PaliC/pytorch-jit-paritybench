; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_mul_sigmoid_32(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 4608, !dbg !14
  %15 = icmp slt i32 %13, 4608, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = lshr i32 %7, 3, !dbg !15
  %18 = and i32 %17, 15, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen, 1152, !dbg !16
  %20 = mul i32 %19, 1152, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = mul nuw nsw i32 %18, 1152, !dbg !18
  %22 = add nsw i32 %.decomposed, %21, !dbg !19
  %23 = mul i32 %19, 18432, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = fsub float 0.000000e+00, %32, !dbg !24
  %37 = fsub float 0.000000e+00, %33, !dbg !24
  %38 = fsub float 0.000000e+00, %34, !dbg !24
  %39 = fsub float 0.000000e+00, %35, !dbg !24
  %40 = fmul float %36, 0x3FF7154760000000, !dbg !28
  %41 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %40) #3, !dbg !28
  %42 = fmul float %37, 0x3FF7154760000000, !dbg !28
  %43 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %42) #3, !dbg !28
  %44 = fmul float %38, 0x3FF7154760000000, !dbg !28
  %45 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %44) #3, !dbg !28
  %46 = fmul float %39, 0x3FF7154760000000, !dbg !28
  %47 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %46) #3, !dbg !28
  %48 = fadd float %41, 1.000000e+00, !dbg !29
  %49 = fadd float %43, 1.000000e+00, !dbg !29
  %50 = fadd float %45, 1.000000e+00, !dbg !29
  %51 = fadd float %47, 1.000000e+00, !dbg !29
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %48) #3, !dbg !30
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %49) #3, !dbg !30
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %50) #3, !dbg !30
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %51) #3, !dbg !30
  %56 = fmul float %52, %32, !dbg !31
  %57 = fmul float %53, %33, !dbg !31
  %58 = fmul float %54, %34, !dbg !31
  %59 = fmul float %55, %35, !dbg !31
  %60 = select i1 %14, float %56, float 0.000000e+00, !dbg !32
  %61 = select i1 %14, float %57, float 0.000000e+00, !dbg !32
  %62 = select i1 %14, float %58, float 0.000000e+00, !dbg !32
  %63 = select i1 %14, float %59, float 0.000000e+00, !dbg !32
  %64 = bitcast float %60 to i32, !dbg !33
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = fadd float %60, %66, !dbg !35
  %68 = bitcast float %67 to i32, !dbg !33
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !33
  %70 = bitcast i32 %69 to float, !dbg !33
  %71 = fadd float %67, %70, !dbg !35
  %72 = bitcast float %61 to i32, !dbg !33
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = fadd float %61, %74, !dbg !35
  %76 = bitcast float %75 to i32, !dbg !33
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !33
  %78 = bitcast i32 %77 to float, !dbg !33
  %79 = fadd float %75, %78, !dbg !35
  %80 = bitcast float %62 to i32, !dbg !33
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !33
  %82 = bitcast i32 %81 to float, !dbg !33
  %83 = fadd float %62, %82, !dbg !35
  %84 = bitcast float %83 to i32, !dbg !33
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = fadd float %83, %86, !dbg !35
  %88 = bitcast float %63 to i32, !dbg !33
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !33
  %90 = bitcast i32 %89 to float, !dbg !33
  %91 = fadd float %63, %90, !dbg !35
  %92 = bitcast float %91 to i32, !dbg !33
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !33
  %94 = bitcast i32 %93 to float, !dbg !33
  %95 = fadd float %91, %94, !dbg !35
  %96 = icmp eq i32 %8, 0, !dbg !33
  %97 = and i32 %16, 3, !dbg !33
  %98 = shl nuw nsw i32 %10, 2, !dbg !33
  %99 = or disjoint i32 %98, %97, !dbg !33
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !33
  %101 = bitcast float %71 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 %96) #3, !dbg !33
  %102 = or disjoint i32 %98, 4, !dbg !33
  %103 = or disjoint i32 %102, %97, !dbg !33
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !33
  %105 = bitcast float %79 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %96) #3, !dbg !33
  %106 = or disjoint i32 %98, 8, !dbg !33
  %107 = or disjoint i32 %106, %97, !dbg !33
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !33
  %109 = bitcast float %87 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %96) #3, !dbg !33
  %110 = or disjoint i32 %98, 12, !dbg !33
  %111 = or disjoint i32 %110, %97, !dbg !33
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !33
  %113 = bitcast float %95 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %96) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %114 = icmp slt i32 %7, 128, !dbg !33
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !33
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #3, !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !33
  %119 = bitcast i32 %118 to float, !dbg !33
  %120 = fadd float %117, %119, !dbg !35
  %121 = bitcast float %120 to i32, !dbg !33
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !33
  %123 = bitcast i32 %122 to float, !dbg !33
  %124 = fadd float %120, %123, !dbg !35
  %125 = and i32 %7, 3, !dbg !33
  %126 = icmp eq i32 %125, 0, !dbg !33
  %127 = and i1 %114, %126, !dbg !33
  %128 = bitcast float %124 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %128, i1 %127) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !33
  %130 = load i32, ptr addrspace(3) %129, align 16, !dbg !33
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !33
  %132 = load i32, ptr addrspace(3) %131, align 16, !dbg !33
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !33
  %134 = load i32, ptr addrspace(3) %133, align 16, !dbg !33
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !33
  %136 = load i32, ptr addrspace(3) %135, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %137, i32 %130, i32 %132, i32 %134, i32 %136, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !37
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 1.600000e+01) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %141 = sext i32 %13 to i64, !dbg !39
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !39
  %143 = icmp eq i32 %97, 0, !dbg !40
  %144 = bitcast float %140 to i32, !dbg !40
  %145 = and i1 %143, %15, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %142, i1 %145) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2bpgsjsaevxo5rzbx2hrnkudz6fopp5geglejmlgnmzhy4snxej.py", directory: "inductor_cache/2b")
!4 = !{ptr @triton_per_fused_mean_mul_sigmoid_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_mul_sigmoid_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_mul_sigmoid_32", linkageName: "triton_per_fused_mean_mul_sigmoid_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 34, column: 22, scope: !7)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 38, column: 24, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 4, scope: !7)
!39 = !DILocation(line: 42, column: 28, scope: !7)
!40 = !DILocation(line: 42, column: 39, scope: !7)
!41 = !DILocation(line: 42, column: 4, scope: !7)
