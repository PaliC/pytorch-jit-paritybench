; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 2112, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %23 = icmp slt i32 %22, 16, !dbg !16
  %.frozen = freeze i32 %20, !dbg !17
  %24 = sdiv i32 %.frozen, 528, !dbg !17
  %25 = mul i32 %24, 528, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = icmp slt i32 %.decomposed, 88, !dbg !19
  %27 = mul i32 %22, 88, !dbg !20
  %28 = mul i32 %24, 1408, !dbg !21
  %29 = add i32 %28, %27, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %23, %26, !dbg !25
  %34 = and i1 %21, %33, !dbg !26
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !27
  %36 = add nsw i32 %.decomposed, -88, !dbg !28
  %37 = icmp ult i32 %36, 88, !dbg !28
  %38 = add i32 %29, %36, !dbg !29
  %39 = sext i32 %38 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !30
  %41 = and i1 %23, %37, !dbg !31
  %42 = and i1 %21, %41, !dbg !32
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !33
  %44 = add nsw i32 %.decomposed, -176, !dbg !34
  %45 = icmp ult i32 %44, 88, !dbg !34
  %46 = add i32 %29, %44, !dbg !35
  %47 = sext i32 %46 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !36
  %49 = and i1 %23, %45, !dbg !37
  %50 = and i1 %21, %49, !dbg !38
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !39
  %52 = add nsw i32 %.decomposed, -264, !dbg !40
  %53 = icmp ult i32 %52, 88, !dbg !40
  %54 = add i32 %29, %52, !dbg !41
  %55 = sext i32 %54 to i64, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !42
  %57 = and i1 %23, %53, !dbg !43
  %58 = and i1 %21, %57, !dbg !44
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !46
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !47
  %62 = add nsw i32 %.decomposed, -352, !dbg !48
  %63 = icmp ult i32 %62, 88, !dbg !48
  %64 = add i32 %29, %62, !dbg !49
  %65 = sext i32 %64 to i64, !dbg !50
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !50
  %67 = and i1 %23, %63, !dbg !51
  %68 = and i1 %21, %67, !dbg !52
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !53
  %70 = icmp sgt i32 %.decomposed, 439, !dbg !54
  %71 = add nsw i32 %.decomposed, -440, !dbg !55
  %72 = add i32 %29, %71, !dbg !56
  %73 = sext i32 %72 to i64, !dbg !57
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !57
  %75 = and i1 %23, %70, !dbg !58
  %76 = and i1 %21, %75, !dbg !59
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !60
  %78 = sext i32 %71 to i64, !dbg !61
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %78, !dbg !61
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !62
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %78, !dbg !63
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !64
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !64
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !64
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !64
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !64
  %87 = bitcast i32 %83 to float, !dbg !64
  %88 = bitcast i32 %84 to float, !dbg !64
  %89 = bitcast i32 %85 to float, !dbg !64
  %90 = bitcast i32 %86 to float, !dbg !64
  %91 = fadd float %87, 0x3F50624DE0000000, !dbg !65
  %92 = fadd float %88, 0x3F50624DE0000000, !dbg !65
  %93 = fadd float %89, 0x3F50624DE0000000, !dbg !65
  %94 = fadd float %90, 0x3F50624DE0000000, !dbg !65
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i = icmp eq i32 %95, 0, !dbg !66
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i = icmp eq i32 %96, 0, !dbg !66
  br i1 %.not.i, label %102, label %97, !dbg !66

97:                                               ; preds = %14
  br i1 %.not1.i, label %100, label %98, !dbg !66

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

102:                                              ; preds = %14
  br i1 %.not1.i, label %105, label %103, !dbg !66

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !66
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i1 = icmp eq i32 %107, 0, !dbg !66
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i4 = icmp eq i32 %108, 0, !dbg !66
  br i1 %.not.i1, label %114, label %109, !dbg !66

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !66

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !66

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

__nv_sqrtf.exit5:                                 ; preds = %110, %112, %115, %117
  %.0.i3 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !66
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i6 = icmp eq i32 %119, 0, !dbg !66
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i9 = icmp eq i32 %120, 0, !dbg !66
  br i1 %.not.i6, label %126, label %121, !dbg !66

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !66

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

126:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %129, label %127, !dbg !66

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

__nv_sqrtf.exit10:                                ; preds = %122, %124, %127, %129
  %.0.i8 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !66
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i11 = icmp eq i32 %131, 0, !dbg !66
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i14 = icmp eq i32 %132, 0, !dbg !66
  br i1 %.not.i11, label %138, label %133, !dbg !66

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !66

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

138:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %141, label %139, !dbg !66

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

__nv_sqrtf.exit15:                                ; preds = %134, %136, %139, %141
  %.0.i13 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !66
  %143 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !60
  %144 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !62
  %145 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !60
  %146 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !62
  %147 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !60
  %148 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !62
  %149 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !60
  %150 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !60
  %151 = insertelement <4 x i32> %150, i32 %145, i64 1, !dbg !60
  %152 = insertelement <4 x i32> %151, i32 %147, i64 2, !dbg !60
  %153 = insertelement <4 x i32> %152, i32 %149, i64 3, !dbg !60
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !60
  %155 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !62
  %156 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !62
  %157 = insertelement <4 x i32> %156, i32 %146, i64 1, !dbg !62
  %158 = insertelement <4 x i32> %157, i32 %148, i64 2, !dbg !62
  %159 = insertelement <4 x i32> %158, i32 %155, i64 3, !dbg !62
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !62
  %161 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !53
  %162 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !53
  %163 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !53
  %164 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !53
  %165 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !45
  %166 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !47
  %167 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !45
  %168 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !47
  %169 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !45
  %170 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !47
  %171 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !45
  %172 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !47
  %173 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !39
  %174 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !39
  %175 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !39
  %176 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !39
  %177 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !33
  %178 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !33
  %179 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !33
  %180 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !33
  %181 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !27
  %182 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !27
  %183 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !27
  %184 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !27
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !67
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !67
  %189 = getelementptr float, ptr addrspace(1) %8, i64 %78, !dbg !68
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !69
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !69
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !69
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !69
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !69
  %195 = getelementptr float, ptr addrspace(1) %9, i64 %78, !dbg !70
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !71
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !71
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !71
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !71
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !71
  %201 = getelementptr float, ptr addrspace(1) %10, i64 %73, !dbg !72
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !73
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !73
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !73
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !73
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !73
  %207 = fsub <4 x float> %154, %160, !dbg !74
  %208 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !53
  %209 = insertelement <4 x i32> %208, i32 %162, i64 1, !dbg !53
  %210 = insertelement <4 x i32> %209, i32 %163, i64 2, !dbg !53
  %211 = insertelement <4 x i32> %210, i32 %164, i64 3, !dbg !53
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !53
  %213 = fadd <4 x float> %212, %212, !dbg !75
  %214 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !45
  %215 = insertelement <4 x i32> %214, i32 %167, i64 1, !dbg !45
  %216 = insertelement <4 x i32> %215, i32 %169, i64 2, !dbg !45
  %217 = insertelement <4 x i32> %216, i32 %171, i64 3, !dbg !45
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !45
  %219 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !47
  %220 = insertelement <4 x i32> %219, i32 %168, i64 1, !dbg !47
  %221 = insertelement <4 x i32> %220, i32 %170, i64 2, !dbg !47
  %222 = insertelement <4 x i32> %221, i32 %172, i64 3, !dbg !47
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !47
  %224 = fadd <4 x float> %218, %223, !dbg !76
  %225 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !39
  %226 = insertelement <4 x i32> %225, i32 %174, i64 1, !dbg !39
  %227 = insertelement <4 x i32> %226, i32 %175, i64 2, !dbg !39
  %228 = insertelement <4 x i32> %227, i32 %176, i64 3, !dbg !39
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !39
  %230 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !33
  %231 = insertelement <4 x i32> %230, i32 %178, i64 1, !dbg !33
  %232 = insertelement <4 x i32> %231, i32 %179, i64 2, !dbg !33
  %233 = insertelement <4 x i32> %232, i32 %180, i64 3, !dbg !33
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !33
  %235 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !27
  %236 = insertelement <4 x i32> %235, i32 %182, i64 1, !dbg !27
  %237 = insertelement <4 x i32> %236, i32 %183, i64 2, !dbg !27
  %238 = insertelement <4 x i32> %237, i32 %184, i64 3, !dbg !27
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !27
  %240 = insertelement <4 x float> poison, float %188, i64 0, !dbg !77
  %241 = insertelement <4 x float> %240, float %187, i64 1, !dbg !77
  %242 = insertelement <4 x float> %241, float %186, i64 2, !dbg !77
  %243 = insertelement <4 x float> %242, float %185, i64 3, !dbg !77
  %244 = fmul <4 x float> %207, %243, !dbg !77
  %245 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !69
  %246 = insertelement <4 x i32> %245, i32 %193, i64 1, !dbg !69
  %247 = insertelement <4 x i32> %246, i32 %192, i64 2, !dbg !69
  %248 = insertelement <4 x i32> %247, i32 %191, i64 3, !dbg !69
  %249 = bitcast <4 x i32> %248 to <4 x float>, !dbg !69
  %250 = fmul <4 x float> %244, %249, !dbg !78
  %251 = insertelement <4 x i32> poison, i32 %200, i64 0, !dbg !71
  %252 = insertelement <4 x i32> %251, i32 %199, i64 1, !dbg !71
  %253 = insertelement <4 x i32> %252, i32 %198, i64 2, !dbg !71
  %254 = insertelement <4 x i32> %253, i32 %197, i64 3, !dbg !71
  %255 = bitcast <4 x i32> %254 to <4 x float>, !dbg !71
  %256 = fadd <4 x float> %250, %255, !dbg !79
  %257 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !73
  %258 = insertelement <4 x i32> %257, i32 %205, i64 1, !dbg !73
  %259 = insertelement <4 x i32> %258, i32 %204, i64 2, !dbg !73
  %260 = insertelement <4 x i32> %259, i32 %203, i64 3, !dbg !73
  %261 = bitcast <4 x i32> %260 to <4 x float>, !dbg !73
  %262 = fadd <4 x float> %256, %261, !dbg !80
  %263 = insertelement <4 x i1> poison, i1 %70, i64 0, !dbg !81
  %264 = shufflevector <4 x i1> %263, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !81
  %265 = select <4 x i1> %264, <4 x float> %262, <4 x float> zeroinitializer, !dbg !81
  %266 = insertelement <4 x i1> poison, i1 %63, i64 0, !dbg !82
  %267 = shufflevector <4 x i1> %266, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !82
  %268 = select <4 x i1> %267, <4 x float> %213, <4 x float> %265, !dbg !82
  %269 = insertelement <4 x i1> poison, i1 %53, i64 0, !dbg !82
  %270 = shufflevector <4 x i1> %269, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !82
  %271 = select <4 x i1> %270, <4 x float> %224, <4 x float> %268, !dbg !82
  %272 = insertelement <4 x i1> poison, i1 %45, i64 0, !dbg !83
  %273 = shufflevector <4 x i1> %272, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !83
  %274 = select <4 x i1> %273, <4 x float> %229, <4 x float> %271, !dbg !83
  %275 = insertelement <4 x i1> poison, i1 %37, i64 0, !dbg !84
  %276 = shufflevector <4 x i1> %275, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !84
  %277 = select <4 x i1> %276, <4 x float> %234, <4 x float> %274, !dbg !84
  %278 = insertelement <4 x i1> poison, i1 %26, i64 0, !dbg !85
  %279 = shufflevector <4 x i1> %278, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !85
  %280 = select <4 x i1> %279, <4 x float> %239, <4 x float> %277, !dbg !85
  %281 = fcmp olt <4 x float> %280, zeroinitializer, !dbg !86
  %282 = extractelement <4 x i1> %281, i64 3, !dbg !90
  %283 = extractelement <4 x i1> %281, i64 2, !dbg !90
  %284 = extractelement <4 x i1> %281, i64 1, !dbg !90
  %285 = extractelement <4 x i1> %281, i64 0, !dbg !90
  %286 = mul i32 %22, 528, !dbg !91
  %287 = add i32 %.decomposed, %286, !dbg !92
  %288 = mul i32 %24, 8448, !dbg !93
  %289 = add i32 %287, %288, !dbg !94
  %290 = sext i32 %289 to i64, !dbg !95
  %291 = getelementptr float, ptr addrspace(1) %11, i64 %290, !dbg !95
  %292 = and i1 %23, %21, !dbg !96
  %bc = bitcast <4 x float> %280 to <4 x i32>, !dbg !97
  %293 = extractelement <4 x i32> %bc, i64 3, !dbg !97
  %294 = select i1 %282, i32 0, i32 %293, !dbg !90
  %bc16 = bitcast <4 x float> %280 to <4 x i32>, !dbg !97
  %295 = extractelement <4 x i32> %bc16, i64 2, !dbg !97
  %296 = select i1 %283, i32 0, i32 %295, !dbg !90
  %bc17 = bitcast <4 x float> %280 to <4 x i32>, !dbg !97
  %297 = extractelement <4 x i32> %bc17, i64 1, !dbg !97
  %298 = select i1 %284, i32 0, i32 %297, !dbg !90
  %bc18 = bitcast <4 x float> %280 to <4 x i32>, !dbg !97
  %299 = extractelement <4 x i32> %bc18, i64 0, !dbg !97
  %300 = select i1 %285, i32 0, i32 %299, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %296, i32 %298, i32 %300, ptr addrspace(1) %291, i1 %292) #3, !dbg !97
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy3zzexkc5gmoezujoipxnl5tk35fatzwgji7rtfhym4hlmc5cfc.py", directory: "inductor_cache/y3")
!4 = !{ptr @triton_poi_fused_cat_relu_50, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_50, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_50", linkageName: "triton_poi_fused_cat_relu_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 37, column: 33, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 49, scope: !7)
!24 = !DILocation(line: 37, column: 30, scope: !7)
!25 = !DILocation(line: 37, column: 62, scope: !7)
!26 = !DILocation(line: 37, column: 70, scope: !7)
!27 = !DILocation(line: 37, column: 55, scope: !7)
!28 = !DILocation(line: 41, column: 18, scope: !7)
!29 = !DILocation(line: 42, column: 50, scope: !7)
!30 = !DILocation(line: 42, column: 31, scope: !7)
!31 = !DILocation(line: 42, column: 71, scope: !7)
!32 = !DILocation(line: 42, column: 79, scope: !7)
!33 = !DILocation(line: 42, column: 64, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 50, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 73, scope: !7)
!38 = !DILocation(line: 47, column: 81, scope: !7)
!39 = !DILocation(line: 47, column: 65, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 50, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 73, scope: !7)
!44 = !DILocation(line: 52, column: 81, scope: !7)
!45 = !DILocation(line: 52, column: 65, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 65, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 61, column: 50, scope: !7)
!50 = !DILocation(line: 61, column: 31, scope: !7)
!51 = !DILocation(line: 61, column: 73, scope: !7)
!52 = !DILocation(line: 61, column: 81, scope: !7)
!53 = !DILocation(line: 61, column: 65, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 68, column: 59, scope: !7)
!56 = !DILocation(line: 68, column: 50, scope: !7)
!57 = !DILocation(line: 68, column: 31, scope: !7)
!58 = !DILocation(line: 68, column: 73, scope: !7)
!59 = !DILocation(line: 68, column: 81, scope: !7)
!60 = !DILocation(line: 68, column: 65, scope: !7)
!61 = !DILocation(line: 69, column: 31, scope: !7)
!62 = !DILocation(line: 69, column: 80, scope: !7)
!63 = !DILocation(line: 71, column: 31, scope: !7)
!64 = !DILocation(line: 71, column: 80, scope: !7)
!65 = !DILocation(line: 73, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 27, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 80, column: 31, scope: !7)
!69 = !DILocation(line: 80, column: 80, scope: !7)
!70 = !DILocation(line: 82, column: 31, scope: !7)
!71 = !DILocation(line: 82, column: 80, scope: !7)
!72 = !DILocation(line: 84, column: 32, scope: !7)
!73 = !DILocation(line: 84, column: 66, scope: !7)
!74 = !DILocation(line: 70, column: 20, scope: !7)
!75 = !DILocation(line: 62, column: 20, scope: !7)
!76 = !DILocation(line: 54, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 83, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 87, column: 35, scope: !7)
!82 = !DILocation(line: 0, scope: !7)
!83 = !DILocation(line: 90, column: 35, scope: !7)
!84 = !DILocation(line: 91, column: 34, scope: !7)
!85 = !DILocation(line: 92, column: 33, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 94, column: 42, scope: !7)
!90 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!91 = !DILocation(line: 95, column: 34, scope: !7)
!92 = !DILocation(line: 95, column: 30, scope: !7)
!93 = !DILocation(line: 95, column: 44, scope: !7)
!94 = !DILocation(line: 95, column: 39, scope: !7)
!95 = !DILocation(line: 95, column: 25, scope: !7)
!96 = !DILocation(line: 95, column: 64, scope: !7)
!97 = !DILocation(line: 95, column: 56, scope: !7)
!98 = !DILocation(line: 95, column: 4, scope: !7)
