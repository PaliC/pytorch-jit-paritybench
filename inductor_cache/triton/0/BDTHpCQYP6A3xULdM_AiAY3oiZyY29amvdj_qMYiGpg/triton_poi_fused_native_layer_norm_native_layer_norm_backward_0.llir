; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_layer_norm_native_layer_norm_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl i32 %14, 6, !dbg !17
  %17 = add i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #3, !dbg !20
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %23 = bitcast i32 %21 to float, !dbg !20
  %24 = bitcast i32 %22 to float, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = add i32 %17, 16, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %13) #3, !dbg !24
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %33 = bitcast i32 %31 to float, !dbg !24
  %34 = bitcast i32 %32 to float, !dbg !24
  %35 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = add i32 %17, 32, !dbg !27
  %39 = sext i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %13) #3, !dbg !29
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %44 = bitcast i32 %42 to float, !dbg !29
  %45 = bitcast i32 %43 to float, !dbg !29
  %46 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = add i32 %17, 48, !dbg !32
  %50 = sext i32 %49 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !33
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %13) #3, !dbg !34
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !34
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !34
  %55 = bitcast i32 %53 to float, !dbg !34
  %56 = bitcast i32 %54 to float, !dbg !34
  %57 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !36
  %59 = bitcast i32 %58 to float, !dbg !36
  %60 = fadd float %23, %26, !dbg !37
  %61 = fadd float %24, %26, !dbg !37
  %62 = fadd float %33, %37, !dbg !38
  %63 = fadd float %34, %37, !dbg !38
  %64 = fadd float %60, %62, !dbg !39
  %65 = fadd float %61, %63, !dbg !39
  %66 = fadd float %44, %48, !dbg !40
  %67 = fadd float %45, %48, !dbg !40
  %68 = fadd float %64, %66, !dbg !41
  %69 = fadd float %65, %67, !dbg !41
  %70 = fadd float %55, %59, !dbg !42
  %71 = fadd float %56, %59, !dbg !42
  %72 = fadd float %68, %70, !dbg !43
  %73 = fadd float %69, %71, !dbg !43
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float 4.000000e+00) #3, !dbg !44
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 4.000000e+00) #3, !dbg !44
  %76 = fsub float %60, %74, !dbg !45
  %77 = fsub float %61, %75, !dbg !45
  %78 = fmul float %76, %76, !dbg !46
  %79 = fmul float %77, %77, !dbg !46
  %80 = fsub float %62, %74, !dbg !47
  %81 = fsub float %63, %75, !dbg !47
  %82 = fmul float %80, %80, !dbg !48
  %83 = fmul float %81, %81, !dbg !48
  %84 = fadd float %78, %82, !dbg !49
  %85 = fadd float %79, %83, !dbg !49
  %86 = fsub float %66, %74, !dbg !50
  %87 = fsub float %67, %75, !dbg !50
  %88 = fmul float %86, %86, !dbg !51
  %89 = fmul float %87, %87, !dbg !51
  %90 = fadd float %88, %84, !dbg !52
  %91 = fadd float %89, %85, !dbg !52
  %92 = fsub float %70, %74, !dbg !53
  %93 = fsub float %71, %75, !dbg !53
  %94 = fmul float %92, %92, !dbg !54
  %95 = fmul float %93, %93, !dbg !54
  %96 = fadd float %94, %90, !dbg !55
  %97 = fadd float %95, %91, !dbg !55
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #3, !dbg !56
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 4.000000e+00) #3, !dbg !56
  %100 = fadd float %98, 0x3EB0C6F7A0000000, !dbg !57
  %101 = fadd float %99, 0x3EB0C6F7A0000000, !dbg !57
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %102, 0, !dbg !58
  br i1 %.not.i, label %105, label %103, !dbg !58

103:                                              ; preds = %6
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

105:                                              ; preds = %6
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

__nv_rsqrtf.exit:                                 ; preds = %103, %105
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], !dbg !58
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i1 = icmp eq i32 %107, 0, !dbg !58
  br i1 %.not.i1, label %110, label %108, !dbg !58

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !58
  br label %__nv_rsqrtf.exit3, !dbg !58

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !58
  br label %__nv_rsqrtf.exit3, !dbg !58

__nv_rsqrtf.exit3:                                ; preds = %108, %110
  %.0.i2 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !58
  %112 = fmul float %.0.i, 2.500000e-01, !dbg !59
  %113 = fmul float %.0.i2, 2.500000e-01, !dbg !59
  %114 = sext i32 %12 to i64, !dbg !60
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !60
  %116 = bitcast float %74 to i32, !dbg !61
  %117 = bitcast float %75 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %116, i32 %117, ptr addrspace(1) %115, i1 %13) #3, !dbg !61
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !62
  %119 = bitcast float %98 to i32, !dbg !63
  %120 = bitcast float %99 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %120, ptr addrspace(1) %118, i1 %13) #3, !dbg !63
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %114, !dbg !64
  %122 = bitcast float %112 to i32, !dbg !65
  %123 = bitcast float %113 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %123, ptr addrspace(1) %121, i1 %13) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3pfq4df46jk3zzan3t6k4rjx4v7g6jj6pwff6pt2dvyzgvs5rg7.py", directory: "inductor_cache/3p")
!4 = !{ptr @triton_poi_fused_native_layer_norm_native_layer_norm_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_native_layer_norm_backward_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_native_layer_norm_backward_0", linkageName: "triton_poi_fused_native_layer_norm_native_layer_norm_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 48, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 19, scope: !7)
!27 = !DILocation(line: 33, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 48, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 20, scope: !7)
!32 = !DILocation(line: 36, column: 41, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 49, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 20, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 19, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 28, scope: !7)
!59 = !DILocation(line: 64, column: 20, scope: !7)
!60 = !DILocation(line: 65, column: 25, scope: !7)
!61 = !DILocation(line: 65, column: 37, scope: !7)
!62 = !DILocation(line: 66, column: 25, scope: !7)
!63 = !DILocation(line: 66, column: 37, scope: !7)
!64 = !DILocation(line: 67, column: 25, scope: !7)
!65 = !DILocation(line: 67, column: 37, scope: !7)
!66 = !DILocation(line: 67, column: 4, scope: !7)
