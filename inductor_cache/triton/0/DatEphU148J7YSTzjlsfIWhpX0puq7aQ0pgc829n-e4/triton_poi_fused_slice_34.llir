; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_slice_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %.lobit = lshr exact i32 %10, 6, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %.lobit, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = or disjoint i32 %12, 4, !dbg !13
  %15 = or disjoint i32 %12, 6, !dbg !13
  %16 = or disjoint i32 %12, 8, !dbg !13
  %17 = or disjoint i32 %12, 10, !dbg !13
  %18 = or disjoint i32 %12, 12, !dbg !13
  %19 = or disjoint i32 %12, 14, !dbg !13
  %20 = icmp slt i32 %11, 16, !dbg !14
  %21 = icmp slt i32 %12, 16, !dbg !14
  %22 = icmp slt i32 %13, 16, !dbg !14
  %23 = icmp slt i32 %14, 16, !dbg !14
  %24 = icmp slt i32 %15, 16, !dbg !14
  %25 = icmp slt i32 %16, 16, !dbg !14
  %26 = icmp slt i32 %17, 16, !dbg !14
  %27 = icmp slt i32 %18, 16, !dbg !14
  %28 = icmp slt i32 %19, 16, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = lshr i32 %7, 2, !dbg !17
  %32 = and i32 %31, 15, !dbg !17
  %33 = lshr exact i32 %10, 2, !dbg !17
  %34 = or disjoint i32 %32, %33, !dbg !17
  %35 = and i32 %7, 63, !dbg !17
  %36 = or disjoint i32 %30, %34, !dbg !18
  %37 = or disjoint i32 %36, 32, !dbg !18
  %38 = or disjoint i32 %30, %35, !dbg !18
  %39 = icmp slt i32 %36, 90721, !dbg !19
  %40 = icmp slt i32 %37, 90721, !dbg !19
  %41 = icmp slt i32 %38, 90721, !dbg !19
  %42 = ashr exact i32 %11, 2, !dbg !20
  %43 = mul i32 %36, 12, !dbg !21
  %44 = mul i32 %37, 12, !dbg !21
  %45 = mul i32 %42, 1088652, !dbg !22
  %46 = add i32 %45, 8, !dbg !23
  %47 = add i32 %46, %43, !dbg !24
  %48 = add i32 %46, %44, !dbg !24
  %49 = sext i32 %47 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = sext i32 %48 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = and i1 %20, %39, !dbg !26
  %54 = and i1 %40, %20, !dbg !26
  %55 = and i1 %21, %41, !dbg !26
  %56 = and i1 %22, %41, !dbg !26
  %57 = and i1 %23, %41, !dbg !26
  %58 = and i1 %24, %41, !dbg !26
  %59 = and i1 %25, %41, !dbg !26
  %60 = and i1 %26, %41, !dbg !26
  %61 = and i1 %27, %41, !dbg !26
  %62 = and i1 %28, %41, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %54) #2, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !27
  %73 = mul i32 %12, 90721, !dbg !28
  %74 = mul i32 %13, 90721, !dbg !28
  %75 = mul i32 %14, 90721, !dbg !28
  %76 = mul i32 %15, 90721, !dbg !28
  %77 = mul i32 %16, 90721, !dbg !28
  %78 = mul i32 %17, 90721, !dbg !28
  %79 = mul i32 %18, 90721, !dbg !28
  %80 = mul i32 %19, 90721, !dbg !28
  %81 = add i32 %38, %73, !dbg !29
  %82 = add i32 %38, %74, !dbg !29
  %83 = add i32 %38, %75, !dbg !29
  %84 = add i32 %38, %76, !dbg !29
  %85 = add i32 %38, %77, !dbg !29
  %86 = add i32 %38, %78, !dbg !29
  %87 = add i32 %38, %79, !dbg !29
  %88 = add i32 %38, %80, !dbg !29
  %89 = sext i32 %81 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !30
  %91 = sext i32 %82 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !30
  %93 = sext i32 %83 to i64, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !30
  %95 = sext i32 %84 to i64, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !30
  %97 = sext i32 %85 to i64, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !30
  %99 = sext i32 %86 to i64, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !30
  %101 = sext i32 %87 to i64, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !30
  %103 = sext i32 %88 to i64, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !30
  %105 = shl i32 %7, 8, !dbg !31
  %106 = and i32 %105, 768, !dbg !31
  %107 = or disjoint i32 %106, %32, !dbg !31
  %108 = or disjoint i32 %107, %33, !dbg !31
  %109 = and i32 %7, 127, !dbg !31
  %110 = lshr exact i32 %106, 6, !dbg !31
  %111 = add nuw nsw i32 %108, %110, !dbg !31
  %112 = zext nneg i32 %111 to i64, !dbg !31
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !31
  %114 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !31
  %115 = or disjoint i32 %108, 64, !dbg !31
  %116 = lshr i32 %115, 6, !dbg !31
  %117 = add nuw nsw i32 %116, %115, !dbg !31
  %118 = zext nneg i32 %117 to i64, !dbg !31
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !31
  %120 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !31
  %121 = or disjoint i32 %108, 128, !dbg !31
  %122 = lshr i32 %121, 6, !dbg !31
  %123 = add nuw nsw i32 %122, %121, !dbg !31
  %124 = zext nneg i32 %123 to i64, !dbg !31
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !31
  %126 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !31
  %127 = or disjoint i32 %108, 192, !dbg !31
  %128 = lshr i32 %127, 6, !dbg !31
  %129 = add nuw nsw i32 %128, %127, !dbg !31
  %130 = zext nneg i32 %129 to i64, !dbg !31
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !31
  %132 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !31
  %133 = or disjoint i32 %110, 32, !dbg !31
  %134 = add nuw nsw i32 %133, %108, !dbg !31
  %135 = zext nneg i32 %134 to i64, !dbg !31
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !31
  %137 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !31
  %138 = or disjoint i32 %108, 96, !dbg !31
  %139 = lshr i32 %138, 6, !dbg !31
  %140 = add nuw nsw i32 %139, %138, !dbg !31
  %141 = zext nneg i32 %140 to i64, !dbg !31
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %141, !dbg !31
  %143 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !31
  %144 = or disjoint i32 %108, 160, !dbg !31
  %145 = lshr i32 %144, 6, !dbg !31
  %146 = add nuw nsw i32 %145, %144, !dbg !31
  %147 = zext nneg i32 %146 to i64, !dbg !31
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !31
  %149 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !31
  %150 = or disjoint i32 %108, 224, !dbg !31
  %151 = lshr i32 %150, 6, !dbg !31
  %152 = add nuw nsw i32 %151, %150, !dbg !31
  %153 = zext nneg i32 %152 to i64, !dbg !31
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !31
  %155 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %156 = lshr i32 %109, 6, !dbg !31
  %157 = add nuw nsw i32 %156, %109, !dbg !31
  %158 = zext nneg i32 %157 to i64, !dbg !31
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !31
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !31
  %161 = or disjoint i32 %109, 128, !dbg !31
  %162 = lshr i32 %161, 6, !dbg !31
  %163 = add nuw nsw i32 %162, %161, !dbg !31
  %164 = zext nneg i32 %163 to i64, !dbg !31
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !31
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !31
  %167 = or disjoint i32 %109, 256, !dbg !31
  %168 = lshr i32 %167, 6, !dbg !31
  %169 = add nuw nsw i32 %168, %167, !dbg !31
  %170 = zext nneg i32 %169 to i64, !dbg !31
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !31
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !31
  %173 = or disjoint i32 %109, 384, !dbg !31
  %174 = lshr i32 %173, 6, !dbg !31
  %175 = add nuw nsw i32 %174, %173, !dbg !31
  %176 = zext nneg i32 %175 to i64, !dbg !31
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !31
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !31
  %179 = or disjoint i32 %109, 512, !dbg !31
  %180 = lshr i32 %179, 6, !dbg !31
  %181 = add nuw nsw i32 %180, %179, !dbg !31
  %182 = zext nneg i32 %181 to i64, !dbg !31
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !31
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !31
  %185 = or disjoint i32 %109, 640, !dbg !31
  %186 = lshr i32 %185, 6, !dbg !31
  %187 = add nuw nsw i32 %186, %185, !dbg !31
  %188 = zext nneg i32 %187 to i64, !dbg !31
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !31
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !31
  %191 = or disjoint i32 %109, 768, !dbg !31
  %192 = lshr i32 %191, 6, !dbg !31
  %193 = add nuw nsw i32 %192, %191, !dbg !31
  %194 = zext nneg i32 %193 to i64, !dbg !31
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !31
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !31
  %197 = or disjoint i32 %109, 896, !dbg !31
  %198 = lshr i32 %197, 6, !dbg !31
  %199 = add nuw nsw i32 %198, %197, !dbg !31
  %200 = zext nneg i32 %199 to i64, !dbg !31
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %200, !dbg !31
  %202 = load i32, ptr addrspace(3) %201, align 4, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %90, i1 %55) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %92, i1 %56) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %94, i1 %57) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %96, i1 %58) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %98, i1 %59) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %100, i1 %60) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %102, i1 %61) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %104, i1 %62) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csrsf3cjjaeh3nbebrmc5oyjxowujastsas2vvopcjteuwqzh2jk.py", directory: "inductor_cache/sr")
!4 = !{ptr @triton_poi_fused_slice_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_slice_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_slice_34", linkageName: "triton_poi_fused_slice_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 55, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 68, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 47, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
