; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %21 = sdiv i32 %.frozen, 128, !dbg !14
  %22 = mul i32 %21, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %22, !dbg !15
  %23 = srem i32 %21, 16, !dbg !16
  %24 = sdiv i32 %20, 2048, !dbg !17
  %25 = sext i32 %20 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %28 = sext i32 %.decomposed to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = shl nsw i32 %23, 8, !dbg !22
  %32 = shl i32 %24, 13, !dbg !23
  %33 = add i32 %32, %.decomposed, !dbg !24
  %34 = add i32 %33, %31, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !27
  %38 = add i32 %33, 128, !dbg !28
  %39 = add i32 %38, %31, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !31
  %43 = add i32 %33, 4096, !dbg !32
  %44 = add i32 %43, %31, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !34
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !35
  %48 = add i32 %33, 4224, !dbg !36
  %49 = add i32 %48, %31, !dbg !37
  %50 = sext i32 %49 to i64, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !38
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !40
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !41
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !42
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !43
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !43
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !43
  %59 = bitcast i32 %57 to float, !dbg !43
  %60 = bitcast i32 %58 to float, !dbg !43
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !44
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !45
  %63 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !46
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !47
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !48
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !49
  %67 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !50
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !51
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !51
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !51
  %71 = bitcast i32 %69 to float, !dbg !51
  %72 = bitcast i32 %70 to float, !dbg !51
  %73 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !52
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !53
  %75 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !54
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !55
  %77 = fadd float %59, 0x3EE4F8B580000000, !dbg !56
  %78 = fadd float %60, 0x3EE4F8B580000000, !dbg !56
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i = icmp eq i32 %79, 0, !dbg !57
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i = icmp eq i32 %80, 0, !dbg !57
  br i1 %.not.i, label %86, label %81, !dbg !57

81:                                               ; preds = %14
  br i1 %.not1.i, label %84, label %82, !dbg !57

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

86:                                               ; preds = %14
  br i1 %.not1.i, label %89, label %87, !dbg !57

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !57
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i1 = icmp eq i32 %91, 0, !dbg !57
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i4 = icmp eq i32 %92, 0, !dbg !57
  br i1 %.not.i1, label %98, label %93, !dbg !57

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !57

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !57

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

__nv_sqrtf.exit5:                                 ; preds = %94, %96, %99, %101
  %.0.i3 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !57
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !58
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !58
  %105 = fadd float %71, 0x3EE4F8B580000000, !dbg !59
  %106 = fadd float %72, 0x3EE4F8B580000000, !dbg !59
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i6 = icmp eq i32 %107, 0, !dbg !60
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i9 = icmp eq i32 %108, 0, !dbg !60
  br i1 %.not.i6, label %114, label %109, !dbg !60

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !60

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !60

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

__nv_sqrtf.exit10:                                ; preds = %110, %112, %115, %117
  %.0.i8 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !60
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i11 = icmp eq i32 %119, 0, !dbg !60
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i14 = icmp eq i32 %120, 0, !dbg !60
  br i1 %.not.i11, label %126, label %121, !dbg !60

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !60

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !60

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

__nv_sqrtf.exit15:                                ; preds = %122, %124, %127, %129
  %.0.i13 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !60
  %131 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %132 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %133 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %134 = extractvalue { i32, i32 } %37, 1, !dbg !27
  %135 = extractvalue { i32, i32 } %47, 1, !dbg !35
  %136 = extractvalue { i32, i32 } %52, 1, !dbg !39
  %137 = extractvalue { i32, i32 } %66, 1, !dbg !49
  %138 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %139 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %140 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %141 = extractvalue { i32, i32 } %37, 0, !dbg !27
  %142 = extractvalue { i32, i32 } %47, 0, !dbg !35
  %143 = extractvalue { i32, i32 } %52, 0, !dbg !39
  %144 = extractvalue { i32, i32 } %66, 0, !dbg !49
  %145 = extractvalue { i32, i32 } %54, 1, !dbg !41
  %146 = extractvalue { i32, i32 } %62, 1, !dbg !45
  %147 = extractvalue { i32, i32 } %64, 1, !dbg !47
  %148 = extractvalue { i32, i32 } %54, 0, !dbg !41
  %149 = extractvalue { i32, i32 } %62, 0, !dbg !45
  %150 = extractvalue { i32, i32 } %64, 0, !dbg !47
  %151 = extractvalue { i32, i32 } %76, 1, !dbg !55
  %152 = extractvalue { i32, i32 } %76, 0, !dbg !55
  %153 = extractvalue { i32, i32 } %74, 1, !dbg !53
  %154 = extractvalue { i32, i32 } %74, 0, !dbg !53
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !61
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !61
  %157 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !31
  %158 = insertelement <2 x i32> %157, i32 %140, i64 1, !dbg !31
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !31
  %160 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !27
  %161 = insertelement <2 x i32> %160, i32 %141, i64 1, !dbg !27
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !27
  %163 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !19
  %164 = insertelement <2 x i32> %163, i32 %138, i64 1, !dbg !19
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !19
  %166 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !21
  %167 = insertelement <2 x i32> %166, i32 %139, i64 1, !dbg !21
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !21
  %169 = fadd <2 x float> %165, %168, !dbg !62
  %170 = fcmp ogt <2 x float> %159, %162, !dbg !63
  %171 = fcmp uno <2 x float> %159, zeroinitializer, !dbg !67
  %172 = or <2 x i1> %170, %171, !dbg !68
  %.v = select <2 x i1> %172, <2 x i32> %158, <2 x i32> %161, !dbg !69
  %173 = bitcast <2 x i32> %.v to <2 x float>, !dbg !69
  %174 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !35
  %175 = insertelement <2 x i32> %174, i32 %142, i64 1, !dbg !35
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !35
  %177 = fcmp olt <2 x float> %173, %176, !dbg !70
  %178 = fcmp uno <2 x float> %176, zeroinitializer, !dbg !72
  %179 = or <2 x i1> %178, %177, !dbg !73
  %.v16 = select <2 x i1> %179, <2 x i32> %175, <2 x i32> %.v, !dbg !74
  %180 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !74
  %181 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !39
  %182 = insertelement <2 x i32> %181, i32 %143, i64 1, !dbg !39
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !39
  %184 = fcmp olt <2 x float> %180, %183, !dbg !75
  %185 = fcmp uno <2 x float> %183, zeroinitializer, !dbg !77
  %186 = or <2 x i1> %185, %184, !dbg !78
  %.v17 = select <2 x i1> %186, <2 x i32> %182, <2 x i32> %.v16, !dbg !79
  %187 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !79
  %188 = fadd <2 x float> %169, %187, !dbg !80
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !80
  %190 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !49
  %191 = insertelement <4 x i32> %190, i32 %144, i64 1, !dbg !49
  %192 = insertelement <4 x i32> %191, i32 %148, i64 2, !dbg !49
  %193 = insertelement <4 x i32> %192, i32 %145, i64 3, !dbg !49
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !49
  %195 = fsub <4 x float> %189, %194, !dbg !81
  %196 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !55
  %197 = insertelement <4 x i32> %196, i32 %152, i64 1, !dbg !55
  %198 = insertelement <4 x i32> %197, i32 %150, i64 2, !dbg !55
  %199 = insertelement <4 x i32> %198, i32 %147, i64 3, !dbg !55
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !55
  %201 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !53
  %202 = insertelement <4 x i32> %201, i32 %154, i64 1, !dbg !53
  %203 = insertelement <4 x i32> %202, i32 %149, i64 2, !dbg !53
  %204 = insertelement <4 x i32> %203, i32 %146, i64 3, !dbg !53
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !53
  %206 = insertelement <4 x float> poison, float %156, i64 0, !dbg !82
  %207 = insertelement <4 x float> %206, float %155, i64 1, !dbg !82
  %208 = insertelement <4 x float> %207, float %103, i64 2, !dbg !82
  %209 = insertelement <4 x float> %208, float %104, i64 3, !dbg !82
  %210 = fmul <4 x float> %195, %209, !dbg !82
  %211 = fmul <4 x float> %210, %205, !dbg !83
  %212 = fadd <4 x float> %211, %200, !dbg !84
  %213 = fcmp olt <4 x float> %212, zeroinitializer, !dbg !85
  %214 = extractelement <4 x i1> %213, i64 3, !dbg !87
  %215 = extractelement <4 x i1> %213, i64 2, !dbg !87
  %216 = extractelement <4 x i1> %213, i64 1, !dbg !89
  %217 = extractelement <4 x i1> %213, i64 0, !dbg !89
  %bc = bitcast <2 x float> %188 to <2 x i32>, !dbg !90
  %218 = extractelement <2 x i32> %bc, i64 1, !dbg !90
  %bc18 = bitcast <2 x float> %188 to <2 x i32>, !dbg !90
  %219 = extractelement <2 x i32> %bc18, i64 0, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %218, i32 %219, ptr addrspace(1) %26, i1 true) #3, !dbg !90
  %220 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !91
  %bc19 = bitcast <4 x float> %212 to <4 x i32>, !dbg !92
  %221 = extractelement <4 x i32> %bc19, i64 2, !dbg !92
  %222 = select i1 %215, i32 0, i32 %221, !dbg !87
  %bc20 = bitcast <4 x float> %212 to <4 x i32>, !dbg !92
  %223 = extractelement <4 x i32> %bc20, i64 3, !dbg !92
  %224 = select i1 %214, i32 0, i32 %223, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %222, i32 %224, ptr addrspace(1) %220, i1 true) #3, !dbg !92
  %225 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !93
  %bc21 = bitcast <4 x float> %212 to <4 x i32>, !dbg !94
  %226 = extractelement <4 x i32> %bc21, i64 1, !dbg !94
  %227 = select i1 %216, i32 0, i32 %226, !dbg !89
  %bc22 = bitcast <4 x float> %212 to <4 x i32>, !dbg !94
  %228 = extractelement <4 x i32> %bc22, i64 0, !dbg !94
  %229 = select i1 %217, i32 0, i32 %228, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %227, i32 %229, ptr addrspace(1) %225, i1 true) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c47ezbhlzvxr33dk2vjtjm7mb76pbudrbkyag5cmqnopjgwbgqmo.py", directory: "inductor_cache/47")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 28, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 49, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 44, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 54, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 50, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 60, scope: !7)
!32 = !DILocation(line: 32, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 51, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 61, scope: !7)
!36 = !DILocation(line: 33, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 51, scope: !7)
!38 = !DILocation(line: 33, column: 30, scope: !7)
!39 = !DILocation(line: 33, column: 61, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 37, column: 31, scope: !7)
!47 = !DILocation(line: 37, column: 36, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 36, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 36, scope: !7)
!52 = !DILocation(line: 40, column: 31, scope: !7)
!53 = !DILocation(line: 40, column: 36, scope: !7)
!54 = !DILocation(line: 41, column: 31, scope: !7)
!55 = !DILocation(line: 41, column: 36, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 50, column: 27, scope: !7)
!58 = !DILocation(line: 52, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 27, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 42, column: 18, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 43, column: 40, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!70 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !71)
!71 = !DILocation(line: 44, column: 40, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !76)
!76 = !DILocation(line: 45, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !76)
!80 = !DILocation(line: 46, column: 19, scope: !7)
!81 = !DILocation(line: 60, column: 20, scope: !7)
!82 = !DILocation(line: 65, column: 20, scope: !7)
!83 = !DILocation(line: 66, column: 20, scope: !7)
!84 = !DILocation(line: 67, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !86)
!86 = !DILocation(line: 68, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !88)
!88 = !DILocation(line: 59, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !86)
!90 = !DILocation(line: 69, column: 40, scope: !7)
!91 = !DILocation(line: 70, column: 25, scope: !7)
!92 = !DILocation(line: 70, column: 37, scope: !7)
!93 = !DILocation(line: 71, column: 25, scope: !7)
!94 = !DILocation(line: 71, column: 37, scope: !7)
!95 = !DILocation(line: 71, column: 4, scope: !7)
