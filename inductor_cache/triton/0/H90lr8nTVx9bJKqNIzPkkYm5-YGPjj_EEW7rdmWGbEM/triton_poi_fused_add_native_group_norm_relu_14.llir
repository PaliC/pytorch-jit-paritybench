; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %13, 256, !dbg !12
  %16 = or disjoint i32 %13, 384, !dbg !12
  %17 = or disjoint i32 %11, %13, !dbg !13
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = or disjoint i32 %11, %16, !dbg !13
  %21 = or disjoint i32 %17, 512, !dbg !13
  %22 = or disjoint i32 %17, 640, !dbg !13
  %23 = or disjoint i32 %17, 768, !dbg !13
  %24 = or disjoint i32 %17, 896, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %26 = icmp slt i32 %25, 256, !dbg !15
  %27 = sdiv i32 %17, 256, !dbg !16
  %28 = sdiv i32 %18, 256, !dbg !16
  %29 = sdiv i32 %19, 256, !dbg !16
  %30 = sdiv i32 %20, 256, !dbg !16
  %31 = sdiv i32 %21, 256, !dbg !16
  %32 = sdiv i32 %22, 256, !dbg !16
  %33 = sdiv i32 %23, 256, !dbg !16
  %34 = sdiv i32 %24, 256, !dbg !16
  %35 = shl i32 %17, 8, !dbg !17
  %36 = shl i32 %18, 8, !dbg !17
  %37 = shl i32 %19, 8, !dbg !17
  %38 = shl i32 %20, 8, !dbg !17
  %39 = shl i32 %21, 8, !dbg !17
  %40 = shl i32 %22, 8, !dbg !17
  %41 = shl i32 %23, 8, !dbg !17
  %42 = shl i32 %24, 8, !dbg !17
  %43 = add i32 %35, %25, !dbg !18
  %44 = add i32 %36, %25, !dbg !18
  %45 = add i32 %37, %25, !dbg !18
  %46 = add i32 %38, %25, !dbg !18
  %47 = add i32 %25, %39, !dbg !18
  %48 = add i32 %25, %40, !dbg !18
  %49 = add i32 %25, %41, !dbg !18
  %50 = add i32 %25, %42, !dbg !18
  %51 = sext i32 %43 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = sext i32 %44 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = sext i32 %45 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = sext i32 %46 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = sext i32 %47 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = sext i32 %48 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = sext i32 %49 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = sext i32 %50 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %26) #4, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %26) #4, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #4, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %26) #4, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %26) #4, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !20
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #4, !dbg !20
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %26) #4, !dbg !20
  %75 = shl nsw i32 %27, 5, !dbg !21
  %76 = shl nsw i32 %28, 5, !dbg !21
  %77 = shl nsw i32 %29, 5, !dbg !21
  %78 = shl nsw i32 %30, 5, !dbg !21
  %79 = shl nsw i32 %31, 5, !dbg !21
  %80 = shl nsw i32 %32, 5, !dbg !21
  %81 = shl nsw i32 %33, 5, !dbg !21
  %82 = shl nsw i32 %34, 5, !dbg !21
  %83 = sdiv i32 %25, 8, !dbg !22
  %84 = add nsw i32 %75, %83, !dbg !23
  %85 = add nsw i32 %76, %83, !dbg !23
  %86 = add nsw i32 %77, %83, !dbg !23
  %87 = add nsw i32 %78, %83, !dbg !23
  %88 = add nsw i32 %83, %79, !dbg !23
  %89 = add nsw i32 %83, %80, !dbg !23
  %90 = add nsw i32 %83, %81, !dbg !23
  %91 = add nsw i32 %83, %82, !dbg !23
  %92 = sext i32 %84 to i64, !dbg !24
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !24
  %94 = sext i32 %85 to i64, !dbg !24
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !24
  %96 = sext i32 %86 to i64, !dbg !24
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !24
  %98 = sext i32 %87 to i64, !dbg !24
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !24
  %100 = sext i32 %88 to i64, !dbg !24
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !24
  %102 = sext i32 %89 to i64, !dbg !24
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !24
  %104 = sext i32 %90 to i64, !dbg !24
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !24
  %106 = sext i32 %91 to i64, !dbg !24
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !24
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %26) #4, !dbg !25
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %26) #4, !dbg !25
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %26) #4, !dbg !25
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %26) #4, !dbg !25
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %26) #4, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %26) #4, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %26) #4, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %26) #4, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %26) #4, !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %26) #4, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %26) #4, !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %26) #4, !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %26) #4, !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %26) #4, !dbg !27
  %135 = bitcast i32 %134 to float, !dbg !27
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %26) #4, !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %26) #4, !dbg !27
  %139 = bitcast i32 %138 to float, !dbg !27
  %140 = sext i32 %25 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %140, !dbg !28
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %26) #4, !dbg !29
  %143 = getelementptr float, ptr addrspace(1) %4, i64 %140, !dbg !30
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %26) #4, !dbg !31
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !32
  %146 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !32
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !32
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !32
  %151 = getelementptr float, ptr addrspace(1) %5, i64 %63, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !32
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %26) #4, !dbg !33
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %26) #4, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %26) #4, !dbg !33
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %26) #4, !dbg !33
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %26) #4, !dbg !33
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %26) #4, !dbg !33
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %26) #4, !dbg !33
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %26) #4, !dbg !33
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 2.048000e+03) #4, !dbg !34
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 2.048000e+03) #4, !dbg !34
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 2.048000e+03) #4, !dbg !34
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 2.048000e+03) #4, !dbg !34
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 2.048000e+03) #4, !dbg !34
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.048000e+03) #4, !dbg !34
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 2.048000e+03) #4, !dbg !34
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 2.048000e+03) #4, !dbg !34
  %169 = fadd float %161, 0x3EE4F8B580000000, !dbg !35
  %170 = fadd float %162, 0x3EE4F8B580000000, !dbg !35
  %171 = fadd float %163, 0x3EE4F8B580000000, !dbg !35
  %172 = fadd float %164, 0x3EE4F8B580000000, !dbg !35
  %173 = fadd float %165, 0x3EE4F8B580000000, !dbg !35
  %174 = fadd float %166, 0x3EE4F8B580000000, !dbg !35
  %175 = fadd float %167, 0x3EE4F8B580000000, !dbg !35
  %176 = fadd float %168, 0x3EE4F8B580000000, !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %177, 0, !dbg !36
  br i1 %.not.i, label %180, label %178, !dbg !36

178:                                              ; preds = %9
  %179 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

180:                                              ; preds = %9
  %181 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %178, %180
  %.0.i = phi float [ %179, %178 ], [ %181, %180 ], !dbg !36
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i15 = icmp eq i32 %182, 0, !dbg !36
  br i1 %.not.i15, label %185, label %183, !dbg !36

183:                                              ; preds = %__nv_rsqrtf.exit
  %184 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %170), !dbg !36
  br label %__nv_rsqrtf.exit17, !dbg !36

185:                                              ; preds = %__nv_rsqrtf.exit
  %186 = tail call float @llvm.nvvm.rsqrt.approx.f(float %170), !dbg !36
  br label %__nv_rsqrtf.exit17, !dbg !36

__nv_rsqrtf.exit17:                               ; preds = %183, %185
  %.0.i16 = phi float [ %184, %183 ], [ %186, %185 ], !dbg !36
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i18 = icmp eq i32 %187, 0, !dbg !36
  br i1 %.not.i18, label %190, label %188, !dbg !36

188:                                              ; preds = %__nv_rsqrtf.exit17
  %189 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %171), !dbg !36
  br label %__nv_rsqrtf.exit20, !dbg !36

190:                                              ; preds = %__nv_rsqrtf.exit17
  %191 = tail call float @llvm.nvvm.rsqrt.approx.f(float %171), !dbg !36
  br label %__nv_rsqrtf.exit20, !dbg !36

__nv_rsqrtf.exit20:                               ; preds = %188, %190
  %.0.i19 = phi float [ %189, %188 ], [ %191, %190 ], !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i21 = icmp eq i32 %192, 0, !dbg !36
  br i1 %.not.i21, label %195, label %193, !dbg !36

193:                                              ; preds = %__nv_rsqrtf.exit20
  %194 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %172), !dbg !36
  br label %__nv_rsqrtf.exit23, !dbg !36

195:                                              ; preds = %__nv_rsqrtf.exit20
  %196 = tail call float @llvm.nvvm.rsqrt.approx.f(float %172), !dbg !36
  br label %__nv_rsqrtf.exit23, !dbg !36

__nv_rsqrtf.exit23:                               ; preds = %193, %195
  %.0.i22 = phi float [ %194, %193 ], [ %196, %195 ], !dbg !36
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i24 = icmp eq i32 %197, 0, !dbg !36
  br i1 %.not.i24, label %200, label %198, !dbg !36

198:                                              ; preds = %__nv_rsqrtf.exit23
  %199 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %173), !dbg !36
  br label %__nv_rsqrtf.exit26, !dbg !36

200:                                              ; preds = %__nv_rsqrtf.exit23
  %201 = tail call float @llvm.nvvm.rsqrt.approx.f(float %173), !dbg !36
  br label %__nv_rsqrtf.exit26, !dbg !36

__nv_rsqrtf.exit26:                               ; preds = %198, %200
  %.0.i25 = phi float [ %199, %198 ], [ %201, %200 ], !dbg !36
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i27 = icmp eq i32 %202, 0, !dbg !36
  br i1 %.not.i27, label %205, label %203, !dbg !36

203:                                              ; preds = %__nv_rsqrtf.exit26
  %204 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %174), !dbg !36
  br label %__nv_rsqrtf.exit29, !dbg !36

205:                                              ; preds = %__nv_rsqrtf.exit26
  %206 = tail call float @llvm.nvvm.rsqrt.approx.f(float %174), !dbg !36
  br label %__nv_rsqrtf.exit29, !dbg !36

__nv_rsqrtf.exit29:                               ; preds = %203, %205
  %.0.i28 = phi float [ %204, %203 ], [ %206, %205 ], !dbg !36
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i30 = icmp eq i32 %207, 0, !dbg !36
  br i1 %.not.i30, label %210, label %208, !dbg !36

208:                                              ; preds = %__nv_rsqrtf.exit29
  %209 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %175), !dbg !36
  br label %__nv_rsqrtf.exit32, !dbg !36

210:                                              ; preds = %__nv_rsqrtf.exit29
  %211 = tail call float @llvm.nvvm.rsqrt.approx.f(float %175), !dbg !36
  br label %__nv_rsqrtf.exit32, !dbg !36

__nv_rsqrtf.exit32:                               ; preds = %208, %210
  %.0.i31 = phi float [ %209, %208 ], [ %211, %210 ], !dbg !36
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i33 = icmp eq i32 %212, 0, !dbg !36
  br i1 %.not.i33, label %215, label %213, !dbg !36

213:                                              ; preds = %__nv_rsqrtf.exit32
  %214 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %176), !dbg !36
  br label %__nv_rsqrtf.exit35, !dbg !36

215:                                              ; preds = %__nv_rsqrtf.exit32
  %216 = tail call float @llvm.nvvm.rsqrt.approx.f(float %176), !dbg !36
  br label %__nv_rsqrtf.exit35, !dbg !36

__nv_rsqrtf.exit35:                               ; preds = %213, %215
  %.0.i34 = phi float [ %214, %213 ], [ %216, %215 ], !dbg !36
  %217 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !20
  %218 = insertelement <8 x i32> %217, i32 %73, i64 1, !dbg !20
  %219 = insertelement <8 x i32> %218, i32 %72, i64 2, !dbg !20
  %220 = insertelement <8 x i32> %219, i32 %71, i64 3, !dbg !20
  %221 = insertelement <8 x i32> %220, i32 %70, i64 4, !dbg !20
  %222 = insertelement <8 x i32> %221, i32 %69, i64 5, !dbg !20
  %223 = insertelement <8 x i32> %222, i32 %68, i64 6, !dbg !20
  %224 = insertelement <8 x i32> %223, i32 %67, i64 7, !dbg !20
  %225 = bitcast <8 x i32> %224 to <8 x float>, !dbg !20
  %226 = insertelement <8 x i32> poison, i32 %115, i64 0, !dbg !25
  %227 = insertelement <8 x i32> %226, i32 %114, i64 1, !dbg !25
  %228 = insertelement <8 x i32> %227, i32 %113, i64 2, !dbg !25
  %229 = insertelement <8 x i32> %228, i32 %112, i64 3, !dbg !25
  %230 = insertelement <8 x i32> %229, i32 %111, i64 4, !dbg !25
  %231 = insertelement <8 x i32> %230, i32 %110, i64 5, !dbg !25
  %232 = insertelement <8 x i32> %231, i32 %109, i64 6, !dbg !25
  %233 = insertelement <8 x i32> %232, i32 %108, i64 7, !dbg !25
  %234 = bitcast <8 x i32> %233 to <8 x float>, !dbg !25
  %235 = insertelement <8 x i32> poison, i32 %160, i64 0, !dbg !33
  %236 = insertelement <8 x i32> %235, i32 %159, i64 1, !dbg !33
  %237 = insertelement <8 x i32> %236, i32 %158, i64 2, !dbg !33
  %238 = insertelement <8 x i32> %237, i32 %157, i64 3, !dbg !33
  %239 = insertelement <8 x i32> %238, i32 %156, i64 4, !dbg !33
  %240 = insertelement <8 x i32> %239, i32 %155, i64 5, !dbg !33
  %241 = insertelement <8 x i32> %240, i32 %154, i64 6, !dbg !33
  %242 = insertelement <8 x i32> %241, i32 %153, i64 7, !dbg !33
  %243 = bitcast <8 x i32> %242 to <8 x float>, !dbg !33
  %244 = shl i32 %12, 2, !dbg !12
  %245 = and i32 %244, 508, !dbg !12
  %246 = or disjoint i32 %245, %11, !dbg !13
  %247 = or disjoint i32 %246, 512, !dbg !13
  %.frozen = freeze i32 %246, !dbg !16
  %248 = sdiv i32 %.frozen, 256, !dbg !16
  %249 = mul i32 %248, 256, !dbg !37
  %.decomposed = sub i32 %.frozen, %249, !dbg !37
  %250 = sdiv i32 %247, 256, !dbg !16
  %251 = fsub <8 x float> %225, %234, !dbg !38
  %252 = insertelement <8 x float> poison, float %.0.i34, i64 0, !dbg !39
  %253 = insertelement <8 x float> %252, float %.0.i31, i64 1, !dbg !39
  %254 = insertelement <8 x float> %253, float %.0.i28, i64 2, !dbg !39
  %255 = insertelement <8 x float> %254, float %.0.i25, i64 3, !dbg !39
  %256 = insertelement <8 x float> %255, float %.0.i22, i64 4, !dbg !39
  %257 = insertelement <8 x float> %256, float %.0.i19, i64 5, !dbg !39
  %258 = insertelement <8 x float> %257, float %.0.i16, i64 6, !dbg !39
  %259 = insertelement <8 x float> %258, float %.0.i, i64 7, !dbg !39
  %260 = fmul <8 x float> %251, %259, !dbg !39
  %261 = insertelement <8 x i32> poison, i32 %142, i64 0, !dbg !40
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !40
  %263 = shufflevector <8 x float> %262, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  %264 = fmul <8 x float> %260, %263, !dbg !40
  %265 = insertelement <8 x i32> poison, i32 %144, i64 0, !dbg !41
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !41
  %267 = shufflevector <8 x float> %266, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !41
  %268 = fadd <8 x float> %264, %267, !dbg !41
  %269 = fadd <8 x float> %268, %243, !dbg !42
  %270 = fcmp olt <8 x float> %269, zeroinitializer, !dbg !43
  %271 = extractelement <8 x i1> %270, i64 7, !dbg !47
  %272 = extractelement <8 x float> %269, i64 7, !dbg !47
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !47
  %274 = extractelement <8 x i1> %270, i64 6, !dbg !47
  %275 = extractelement <8 x float> %269, i64 6, !dbg !47
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !47
  %277 = extractelement <8 x i1> %270, i64 5, !dbg !47
  %278 = extractelement <8 x float> %269, i64 5, !dbg !47
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !47
  %280 = extractelement <8 x i1> %270, i64 4, !dbg !47
  %281 = extractelement <8 x float> %269, i64 4, !dbg !47
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !47
  %283 = extractelement <8 x i1> %270, i64 3, !dbg !47
  %284 = extractelement <8 x float> %269, i64 3, !dbg !47
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !47
  %286 = extractelement <8 x i1> %270, i64 2, !dbg !47
  %287 = extractelement <8 x float> %269, i64 2, !dbg !47
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !47
  %289 = extractelement <8 x i1> %270, i64 1, !dbg !47
  %290 = extractelement <8 x float> %269, i64 1, !dbg !47
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !47
  %292 = extractelement <8 x i1> %270, i64 0, !dbg !47
  %293 = extractelement <8 x float> %269, i64 0, !dbg !47
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !47
  %295 = shl i32 %25, 8, !dbg !48
  %296 = add i32 %.decomposed, %295, !dbg !49
  %297 = shl i32 %248, 16, !dbg !50
  %298 = shl i32 %250, 16, !dbg !50
  %299 = add i32 %296, %297, !dbg !51
  %300 = add i32 %296, %298, !dbg !51
  %301 = sext i32 %299 to i64, !dbg !52
  %302 = getelementptr float, ptr addrspace(1) %6, i64 %301, !dbg !52
  %303 = sext i32 %300 to i64, !dbg !52
  %304 = getelementptr float, ptr addrspace(1) %6, i64 %303, !dbg !52
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !53
  %306 = bitcast float %273 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #4, !dbg !53
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !53
  %308 = bitcast float %276 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !53
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !53
  %310 = bitcast float %279 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !53
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !53
  %312 = bitcast float %282 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !53
  %314 = load <4 x i32>, ptr addrspace(3) %313, align 16, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %315 = bitcast float %285 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %315, i1 true) #4, !dbg !53
  %316 = bitcast float %288 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %316, i1 true) #4, !dbg !53
  %317 = bitcast float %291 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %317, i1 true) #4, !dbg !53
  %318 = bitcast float %294 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %318, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %319 = load <4 x i32>, ptr addrspace(3) %313, align 16, !dbg !53
  %.extract = extractelement <4 x i32> %314, i64 0, !dbg !53
  %.extract8 = extractelement <4 x i32> %314, i64 1, !dbg !53
  %.extract9 = extractelement <4 x i32> %314, i64 2, !dbg !53
  %.extract10 = extractelement <4 x i32> %314, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %302, i1 %26) #4, !dbg !53
  %.extract11 = extractelement <4 x i32> %319, i64 0, !dbg !53
  %.extract12 = extractelement <4 x i32> %319, i64 1, !dbg !53
  %.extract13 = extractelement <4 x i32> %319, i64 2, !dbg !53
  %.extract14 = extractelement <4 x i32> %319, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %304, i1 %26) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chpkzmamrinkofmye3hsfimvddb7xudxygedx6ls64oqmoqmbf2p.py", directory: "inductor_cache/hp")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_14", linkageName: "triton_poi_fused_add_native_group_norm_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 33, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 50, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 45, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 27, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 49, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 50, column: 34, scope: !7)
!49 = !DILocation(line: 50, column: 30, scope: !7)
!50 = !DILocation(line: 50, column: 45, scope: !7)
!51 = !DILocation(line: 50, column: 39, scope: !7)
!52 = !DILocation(line: 50, column: 25, scope: !7)
!53 = !DILocation(line: 50, column: 57, scope: !7)
!54 = !DILocation(line: 50, column: 4, scope: !7)
