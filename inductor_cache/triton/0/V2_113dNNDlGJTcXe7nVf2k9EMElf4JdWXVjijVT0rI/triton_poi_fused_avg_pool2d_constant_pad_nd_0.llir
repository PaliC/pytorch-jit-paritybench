; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_constant_pad_nd_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 144, !dbg !14
  %12 = sdiv i32 %9, 3, !dbg !15
  %13 = sdiv i32 %10, 3, !dbg !15
  %14 = sdiv i32 %9, 9, !dbg !16
  %15 = sdiv i32 %10, 9, !dbg !16
  %16 = shl i32 %14, 4, !dbg !17
  %17 = shl i32 %15, 4, !dbg !17
  %18 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !18
  %19 = insertelement <2 x i32> %18, i32 %12, i64 1, !dbg !18
  %20 = srem <2 x i32> %19, splat (i32 3), !dbg !18
  %21 = shl nsw <2 x i32> %20, splat (i32 1), !dbg !19
  %22 = extractelement <2 x i32> %21, i64 1, !dbg !20
  %23 = add nsw i32 %22, -1, !dbg !20
  %24 = extractelement <2 x i32> %20, i64 1, !dbg !21
  %25 = icmp sgt i32 %24, 0, !dbg !21
  %26 = extractelement <2 x i32> %21, i64 0, !dbg !22
  %27 = add nsw i32 %26, -1, !dbg !22
  %28 = extractelement <2 x i32> %20, i64 0, !dbg !23
  %29 = icmp sgt i32 %28, 0, !dbg !23
  %30 = and i1 %29, %25, !dbg !24
  %31 = shl nsw i32 %24, 3, !dbg !25
  %32 = add i32 %31, %16, !dbg !26
  %33 = add i32 %32, -10, !dbg !27
  %34 = add i32 %33, %26, !dbg !28
  %35 = sext i32 %34 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !29
  %37 = and i1 %11, %30, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %37, i32 0, i1 %37) #1, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = select i1 %30, float %39, float 0.000000e+00, !dbg !32
  %41 = icmp sgt <2 x i32> %20, splat (i32 -1), !dbg !33
  %42 = extractelement <2 x i1> %41, i64 0, !dbg !34
  %43 = and i1 %42, %25, !dbg !34
  %44 = add i32 %32, -9, !dbg !35
  %45 = add i32 %44, %26, !dbg !36
  %46 = sext i32 %45 to i64, !dbg !37
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !37
  %48 = or disjoint <2 x i32> %21, splat (i32 1), !dbg !38
  %49 = icmp slt <2 x i32> %48, splat (i32 5), !dbg !39
  %50 = and <2 x i1> %41, %49, !dbg !40
  %51 = extractelement <2 x i1> %50, i64 0, !dbg !41
  %52 = and i1 %25, %51, !dbg !42
  %53 = add i32 %32, -8, !dbg !43
  %54 = add i32 %53, %26, !dbg !44
  %55 = sext i32 %54 to i64, !dbg !45
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !45
  %57 = and i1 %11, %52, !dbg !46
  %58 = extractelement <2 x i1> %41, i64 1, !dbg !47
  %59 = and i1 %29, %58, !dbg !47
  %60 = add i32 %32, -6, !dbg !48
  %61 = add i32 %60, %26, !dbg !49
  %62 = sext i32 %61 to i64, !dbg !50
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !50
  %64 = or i32 %24, %28, !dbg !51
  %65 = icmp sgt i32 %64, -1, !dbg !51
  %66 = and i1 %30, %65, !dbg !52
  %67 = add i32 %32, -5, !dbg !53
  %68 = add i32 %67, %26, !dbg !54
  %69 = sext i32 %68 to i64, !dbg !55
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !55
  %71 = and i1 %11, %66, !dbg !56
  %72 = and i1 %58, %51, !dbg !57
  %73 = add i32 %32, -4, !dbg !58
  %74 = add i32 %73, %26, !dbg !59
  %75 = sext i32 %74 to i64, !dbg !60
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !60
  %77 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !18
  %78 = insertelement <2 x i32> %77, i32 %13, i64 1, !dbg !18
  %79 = srem <2 x i32> %78, splat (i32 3), !dbg !18
  %80 = shl nsw <2 x i32> %79, splat (i32 1), !dbg !19
  %81 = extractelement <2 x i32> %80, i64 1, !dbg !20
  %82 = add nsw i32 %81, -1, !dbg !20
  %83 = extractelement <2 x i32> %79, i64 1, !dbg !21
  %84 = icmp sgt i32 %83, 0, !dbg !21
  %85 = extractelement <2 x i32> %80, i64 0, !dbg !22
  %86 = add nsw i32 %85, -1, !dbg !22
  %87 = extractelement <2 x i32> %79, i64 0, !dbg !23
  %88 = icmp sgt i32 %87, 0, !dbg !23
  %89 = and i1 %88, %84, !dbg !24
  %90 = shl nsw i32 %83, 3, !dbg !25
  %91 = add i32 %90, %17, !dbg !26
  %92 = add i32 %91, -10, !dbg !27
  %93 = add i32 %92, %85, !dbg !28
  %94 = sext i32 %93 to i64, !dbg !29
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !29
  %96 = and i1 %89, %11, !dbg !30
  %97 = icmp sgt <2 x i32> %79, splat (i32 -1), !dbg !33
  %98 = extractelement <2 x i1> %97, i64 0, !dbg !34
  %99 = and i1 %98, %84, !dbg !34
  %100 = add i32 %91, -9, !dbg !35
  %101 = add i32 %100, %85, !dbg !36
  %102 = sext i32 %101 to i64, !dbg !37
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !37
  %104 = or disjoint <2 x i32> %80, splat (i32 1), !dbg !38
  %105 = icmp slt <2 x i32> %104, splat (i32 5), !dbg !39
  %106 = and <2 x i1> %97, %105, !dbg !40
  %107 = extractelement <2 x i1> %106, i64 0, !dbg !41
  %108 = and i1 %84, %107, !dbg !42
  %109 = add i32 %91, -8, !dbg !43
  %110 = add i32 %109, %85, !dbg !44
  %111 = sext i32 %110 to i64, !dbg !45
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !45
  %113 = and i1 %108, %11, !dbg !46
  %114 = extractelement <2 x i1> %97, i64 1, !dbg !47
  %115 = and i1 %88, %114, !dbg !47
  %116 = add i32 %91, -6, !dbg !48
  %117 = add i32 %116, %85, !dbg !49
  %118 = sext i32 %117 to i64, !dbg !50
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !50
  %120 = or i32 %83, %87, !dbg !51
  %121 = icmp sgt i32 %120, -1, !dbg !51
  %122 = and i1 %89, %121, !dbg !52
  %123 = add i32 %91, -5, !dbg !53
  %124 = add i32 %123, %85, !dbg !54
  %125 = sext i32 %124 to i64, !dbg !55
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !55
  %127 = and i1 %122, %11, !dbg !56
  %128 = and i1 %114, %107, !dbg !57
  %129 = add i32 %91, -4, !dbg !58
  %130 = add i32 %129, %85, !dbg !59
  %131 = sext i32 %130 to i64, !dbg !60
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !60
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96) #1, !dbg !31
  %134 = bitcast i32 %133 to float, !dbg !31
  %135 = select i1 %89, float %134, float 0.000000e+00, !dbg !32
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %37, i32 0, i1 %37) #1, !dbg !61
  %137 = bitcast i32 %136 to float, !dbg !61
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %96, i32 0, i1 %96) #1, !dbg !61
  %139 = bitcast i32 %138 to float, !dbg !61
  %140 = select i1 %43, float %137, float 0.000000e+00, !dbg !62
  %141 = select i1 %99, float %139, float 0.000000e+00, !dbg !62
  %142 = fadd float %140, %40, !dbg !63
  %143 = fadd float %135, %141, !dbg !63
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %57, i32 0, i1 %57) #1, !dbg !64
  %145 = bitcast i32 %144 to float, !dbg !64
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %113, i32 0, i1 %113) #1, !dbg !64
  %147 = bitcast i32 %146 to float, !dbg !64
  %148 = select i1 %52, float %145, float 0.000000e+00, !dbg !65
  %149 = select i1 %108, float %147, float 0.000000e+00, !dbg !65
  %150 = fadd float %142, %148, !dbg !66
  %151 = fadd float %143, %149, !dbg !66
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %37, i32 0, i1 %37) #1, !dbg !67
  %153 = bitcast i32 %152 to float, !dbg !67
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %96, i32 0, i1 %96) #1, !dbg !67
  %155 = bitcast i32 %154 to float, !dbg !67
  %156 = select i1 %59, float %153, float 0.000000e+00, !dbg !68
  %157 = select i1 %115, float %155, float 0.000000e+00, !dbg !68
  %158 = fadd float %156, %150, !dbg !69
  %159 = fadd float %151, %157, !dbg !69
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71) #1, !dbg !70
  %161 = bitcast i32 %160 to float, !dbg !70
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %127, i32 0, i1 %127) #1, !dbg !70
  %163 = bitcast i32 %162 to float, !dbg !70
  %164 = select i1 %65, float %161, float 0.000000e+00, !dbg !71
  %165 = select i1 %121, float %163, float 0.000000e+00, !dbg !71
  %166 = fadd float %164, %158, !dbg !72
  %167 = fadd float %159, %165, !dbg !72
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %57, i32 0, i1 %57) #1, !dbg !73
  %169 = bitcast i32 %168 to float, !dbg !73
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %113, i32 0, i1 %113) #1, !dbg !73
  %171 = bitcast i32 %170 to float, !dbg !73
  %172 = select i1 %72, float %169, float 0.000000e+00, !dbg !74
  %173 = select i1 %128, float %171, float 0.000000e+00, !dbg !74
  %174 = fadd float %166, %172, !dbg !75
  %175 = fadd float %167, %173, !dbg !75
  %176 = extractelement <2 x i1> %50, i64 1, !dbg !41
  %177 = and i1 %29, %176, !dbg !76
  %178 = extractelement <2 x i1> %106, i64 1, !dbg !41
  %179 = and i1 %88, %178, !dbg !76
  %180 = add i32 %32, -2, !dbg !77
  %181 = add i32 %180, %26, !dbg !78
  %182 = add i32 %91, -2, !dbg !77
  %183 = add i32 %182, %85, !dbg !78
  %184 = sext i32 %181 to i64, !dbg !79
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !79
  %186 = sext i32 %183 to i64, !dbg !79
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !79
  %188 = and i1 %11, %177, !dbg !80
  %189 = and i1 %179, %11, !dbg !80
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %188, i32 0, i1 %188) #1, !dbg !81
  %191 = bitcast i32 %190 to float, !dbg !81
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %189, i32 0, i1 %189) #1, !dbg !81
  %193 = bitcast i32 %192 to float, !dbg !81
  %194 = select i1 %177, float %191, float 0.000000e+00, !dbg !82
  %195 = select i1 %179, float %193, float 0.000000e+00, !dbg !82
  %196 = fadd float %174, %194, !dbg !83
  %197 = fadd float %175, %195, !dbg !83
  %198 = and i1 %42, %176, !dbg !84
  %199 = and i1 %98, %178, !dbg !84
  %200 = add i32 %32, %27, !dbg !85
  %201 = add i32 %91, %86, !dbg !85
  %202 = sext i32 %200 to i64, !dbg !86
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !86
  %204 = sext i32 %201 to i64, !dbg !86
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !86
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %188, i32 0, i1 %188) #1, !dbg !87
  %207 = bitcast i32 %206 to float, !dbg !87
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %189, i32 0, i1 %189) #1, !dbg !87
  %209 = bitcast i32 %208 to float, !dbg !87
  %210 = select i1 %198, float %207, float 0.000000e+00, !dbg !88
  %211 = select i1 %199, float %209, float 0.000000e+00, !dbg !88
  %212 = fadd float %196, %210, !dbg !89
  %213 = fadd float %197, %211, !dbg !89
  %214 = and i1 %51, %176, !dbg !41
  %215 = and i1 %107, %178, !dbg !41
  %216 = and i1 %65, %214, !dbg !90
  %217 = and i1 %121, %215, !dbg !90
  %218 = add i32 %32, %26, !dbg !91
  %219 = add i32 %91, %85, !dbg !91
  %220 = sext i32 %218 to i64, !dbg !92
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !92
  %222 = sext i32 %219 to i64, !dbg !92
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !92
  %224 = and i1 %11, %216, !dbg !93
  %225 = and i1 %217, %11, !dbg !93
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %224, i32 0, i1 %224) #1, !dbg !94
  %227 = bitcast i32 %226 to float, !dbg !94
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %225, i32 0, i1 %225) #1, !dbg !94
  %229 = bitcast i32 %228 to float, !dbg !94
  %230 = select i1 %214, float %227, float 0.000000e+00, !dbg !95
  %231 = select i1 %215, float %229, float 0.000000e+00, !dbg !95
  %232 = fadd float %212, %230, !dbg !96
  %233 = fadd float %213, %231, !dbg !96
  %234 = select i1 %29, i32 %27, i32 0, !dbg !97
  %235 = select i1 %88, i32 %86, i32 0, !dbg !97
  %236 = select i1 %25, i32 %23, i32 0, !dbg !98
  %237 = select i1 %84, i32 %82, i32 0, !dbg !98
  %238 = add nsw <2 x i32> %21, splat (i32 2), !dbg !99
  %239 = icmp sgt <2 x i32> %20, splat (i32 1), !dbg !100
  %240 = select <2 x i1> %239, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !101
  %241 = icmp slt <2 x i32> %20, splat (i32 2), !dbg !102
  %242 = select <2 x i1> %241, <2 x i32> %238, <2 x i32> zeroinitializer, !dbg !103
  %243 = add nsw <2 x i32> %242, %240, !dbg !104
  %244 = add nsw <2 x i32> %80, splat (i32 2), !dbg !99
  %245 = icmp sgt <2 x i32> %79, splat (i32 1), !dbg !100
  %246 = select <2 x i1> %245, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !101
  %247 = icmp slt <2 x i32> %79, splat (i32 2), !dbg !102
  %248 = select <2 x i1> %247, <2 x i32> %244, <2 x i32> zeroinitializer, !dbg !103
  %249 = add nsw <2 x i32> %248, %246, !dbg !104
  %250 = extractelement <2 x i32> %243, i64 0
  %reass.add = sub nsw i32 %250, %234
  %251 = extractelement <2 x i32> %243, i64 1
  %reass.mul = mul nsw i32 %reass.add, %251
  %reass.add6 = sub nsw i32 %234, %250
  %reass.mul7 = mul nsw i32 %reass.add6, %236
  %252 = add nsw i32 %reass.mul7, %reass.mul, !dbg !105
  %253 = extractelement <2 x i32> %249, i64 0
  %reass.add8 = sub nsw i32 %253, %235
  %254 = extractelement <2 x i32> %249, i64 1
  %reass.mul9 = mul nsw i32 %reass.add8, %254
  %reass.add10 = sub nsw i32 %235, %253
  %reass.mul11 = mul nsw i32 %reass.add10, %237
  %255 = add nsw i32 %reass.mul11, %reass.mul9, !dbg !105
  %256 = sitofp i32 %252 to float, !dbg !106
  %257 = sitofp i32 %255 to float, !dbg !106
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %256) #1, !dbg !106
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %257) #1, !dbg !106
  %260 = sext i32 %9 to i64, !dbg !107
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !107
  %262 = bitcast float %258 to i32, !dbg !108
  %263 = bitcast float %259 to i32, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %262, i32 %263, ptr addrspace(1) %261, i1 %11) #1, !dbg !108
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ced5jguse5qlwp42sksu4c4izxu2lhzicqkrvqnbbqtxvyybingn.py", directory: "inductor_cache/ed")
!4 = !{ptr @triton_poi_fused_avg_pool2d_constant_pad_nd_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_constant_pad_nd_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_constant_pad_nd_0", linkageName: "triton_poi_fused_avg_pool2d_constant_pad_nd_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 46, column: 56, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 20, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 38, column: 19, scope: !7)
!25 = !DILocation(line: 46, column: 48, scope: !7)
!26 = !DILocation(line: 46, column: 39, scope: !7)
!27 = !DILocation(line: 46, column: 46, scope: !7)
!28 = !DILocation(line: 46, column: 53, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 46, column: 69, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 48, column: 35, scope: !7)
!33 = !DILocation(line: 50, column: 21, scope: !7)
!34 = !DILocation(line: 53, column: 19, scope: !7)
!35 = !DILocation(line: 61, column: 45, scope: !7)
!36 = !DILocation(line: 61, column: 52, scope: !7)
!37 = !DILocation(line: 61, column: 31, scope: !7)
!38 = !DILocation(line: 65, column: 16, scope: !7)
!39 = !DILocation(line: 67, column: 20, scope: !7)
!40 = !DILocation(line: 68, column: 20, scope: !7)
!41 = !DILocation(line: 149, column: 21, scope: !7)
!42 = !DILocation(line: 69, column: 19, scope: !7)
!43 = !DILocation(line: 77, column: 45, scope: !7)
!44 = !DILocation(line: 77, column: 52, scope: !7)
!45 = !DILocation(line: 77, column: 31, scope: !7)
!46 = !DILocation(line: 77, column: 68, scope: !7)
!47 = !DILocation(line: 85, column: 20, scope: !7)
!48 = !DILocation(line: 93, column: 45, scope: !7)
!49 = !DILocation(line: 93, column: 52, scope: !7)
!50 = !DILocation(line: 93, column: 31, scope: !7)
!51 = !DILocation(line: 97, column: 20, scope: !7)
!52 = !DILocation(line: 104, column: 20, scope: !7)
!53 = !DILocation(line: 105, column: 45, scope: !7)
!54 = !DILocation(line: 105, column: 52, scope: !7)
!55 = !DILocation(line: 105, column: 31, scope: !7)
!56 = !DILocation(line: 105, column: 68, scope: !7)
!57 = !DILocation(line: 109, column: 20, scope: !7)
!58 = !DILocation(line: 117, column: 45, scope: !7)
!59 = !DILocation(line: 117, column: 52, scope: !7)
!60 = !DILocation(line: 117, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 60, scope: !7)
!62 = !DILocation(line: 63, column: 35, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 77, column: 60, scope: !7)
!65 = !DILocation(line: 79, column: 35, scope: !7)
!66 = !DILocation(line: 80, column: 20, scope: !7)
!67 = !DILocation(line: 93, column: 60, scope: !7)
!68 = !DILocation(line: 95, column: 35, scope: !7)
!69 = !DILocation(line: 96, column: 20, scope: !7)
!70 = !DILocation(line: 105, column: 60, scope: !7)
!71 = !DILocation(line: 107, column: 35, scope: !7)
!72 = !DILocation(line: 108, column: 20, scope: !7)
!73 = !DILocation(line: 117, column: 60, scope: !7)
!74 = !DILocation(line: 119, column: 35, scope: !7)
!75 = !DILocation(line: 120, column: 20, scope: !7)
!76 = !DILocation(line: 125, column: 20, scope: !7)
!77 = !DILocation(line: 133, column: 46, scope: !7)
!78 = !DILocation(line: 133, column: 53, scope: !7)
!79 = !DILocation(line: 133, column: 32, scope: !7)
!80 = !DILocation(line: 133, column: 70, scope: !7)
!81 = !DILocation(line: 133, column: 61, scope: !7)
!82 = !DILocation(line: 135, column: 37, scope: !7)
!83 = !DILocation(line: 136, column: 22, scope: !7)
!84 = !DILocation(line: 137, column: 21, scope: !7)
!85 = !DILocation(line: 145, column: 53, scope: !7)
!86 = !DILocation(line: 145, column: 32, scope: !7)
!87 = !DILocation(line: 145, column: 61, scope: !7)
!88 = !DILocation(line: 147, column: 38, scope: !7)
!89 = !DILocation(line: 148, column: 22, scope: !7)
!90 = !DILocation(line: 156, column: 22, scope: !7)
!91 = !DILocation(line: 157, column: 46, scope: !7)
!92 = !DILocation(line: 157, column: 32, scope: !7)
!93 = !DILocation(line: 157, column: 63, scope: !7)
!94 = !DILocation(line: 157, column: 54, scope: !7)
!95 = !DILocation(line: 159, column: 38, scope: !7)
!96 = !DILocation(line: 160, column: 22, scope: !7)
!97 = !DILocation(line: 161, column: 62, scope: !7)
!98 = !DILocation(line: 161, column: 133, scope: !7)
!99 = !DILocation(line: 161, column: 177, scope: !7)
!100 = !DILocation(line: 161, column: 173, scope: !7)
!101 = !DILocation(line: 161, column: 165, scope: !7)
!102 = !DILocation(line: 161, column: 214, scope: !7)
!103 = !DILocation(line: 161, column: 200, scope: !7)
!104 = !DILocation(line: 161, column: 186, scope: !7)
!105 = !DILocation(line: 161, column: 426, scope: !7)
!106 = !DILocation(line: 162, column: 22, scope: !7)
!107 = !DILocation(line: 163, column: 25, scope: !7)
!108 = !DILocation(line: 163, column: 38, scope: !7)
!109 = !DILocation(line: 163, column: 4, scope: !7)
