; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 6, !dbg !12
  %13 = and i32 %8, 7, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = and i32 %11, 14, !dbg !15
  %21 = and i32 %8, 60, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %22 = sdiv i32 %.frozen, 4, !dbg !16
  %23 = mul i32 %22, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = shl i32 %14, 4, !dbg !18
  %25 = or disjoint i32 %24, %20, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !21
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = fadd float %31, %32, !dbg !22
  %34 = select i1 %17, float %33, float 0.000000e+00, !dbg !22
  %35 = bitcast float %34 to i32, !dbg !27
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = fadd float %34, %37, !dbg !22
  %39 = bitcast float %38 to i32, !dbg !27
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = fadd float %38, %41, !dbg !22
  %43 = bitcast float %42 to i32, !dbg !27
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = fadd float %42, %45, !dbg !22
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !28
  %48 = bitcast float %46 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !28
  %50 = load float, ptr addrspace(3) %49, align 4, !dbg !28
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 1.600000e+01) #3, !dbg !28
  %52 = add nsw i32 %.decomposed, %21, !dbg !29
  %53 = shl i32 %22, 6, !dbg !30
  %54 = add i32 %52, %53, !dbg !31
  %55 = sext i32 %54 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %57 = shl i32 %8, 4, !dbg !33
  %58 = and i32 %57, 112, !dbg !33
  %59 = or disjoint i32 %58, %10, !dbg !33
  %60 = and i32 %11, 126, !dbg !33
  %61 = lshr exact i32 %58, 1, !dbg !33
  %62 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %61, !dbg !33
  %63 = getelementptr inbounds float, ptr addrspace(3) %62, i32 %59, !dbg !33
  %64 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #3, !dbg !33
  %65 = or disjoint i32 %59, 8, !dbg !33
  %66 = lshr i32 %65, 3, !dbg !33
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !33
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65, !dbg !33
  %69 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %70 = lshr i32 %60, 3, !dbg !33
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !33
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %60, !dbg !33
  %73 = load i32, ptr addrspace(3) %72, align 4, !dbg !33
  %74 = or disjoint i32 %60, 1, !dbg !33
  %75 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %74, !dbg !33
  %76 = load i32, ptr addrspace(3) %75, align 4, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %73, i32 %76, ptr addrspace(1) %56, i1 %18) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %77 = sext i32 %16 to i64, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !35
  %79 = and i32 %8, 56, !dbg !36
  %80 = icmp eq i32 %79, 0, !dbg !36
  %81 = bitcast float %51 to i32, !dbg !36
  %82 = and i1 %80, %19, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %81, ptr addrspace(1) %78, i1 %82) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdrl6d44evjwofzoayfsrodn6a2ieuasz4nlrt573x2nkjkouqut.py", directory: "inductor_cache/dr")
!4 = !{ptr @triton_per_fused_mean_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_0", linkageName: "triton_per_fused_mean_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 30, scope: !7)
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 39, column: 37, scope: !7)
!32 = !DILocation(line: 39, column: 25, scope: !7)
!33 = !DILocation(line: 39, column: 51, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 41, column: 4, scope: !7)
