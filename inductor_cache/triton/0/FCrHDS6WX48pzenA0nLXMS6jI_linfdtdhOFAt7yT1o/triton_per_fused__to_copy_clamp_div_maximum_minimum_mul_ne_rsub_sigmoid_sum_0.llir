; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_clamp_div_maximum_minimum_mul_ne_rsub_sigmoid_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = bitcast i32 %24 to float, !dbg !14
  %29 = bitcast i32 %25 to float, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = fsub float 0.000000e+00, %17, !dbg !15
  %32 = fsub float 0.000000e+00, %18, !dbg !15
  %33 = fsub float 0.000000e+00, %19, !dbg !15
  %34 = fsub float 0.000000e+00, %20, !dbg !15
  %35 = fmul float %31, 0x3FF7154760000000, !dbg !19
  %36 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %35) #3, !dbg !19
  %37 = fmul float %32, 0x3FF7154760000000, !dbg !19
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #3, !dbg !19
  %39 = fmul float %33, 0x3FF7154760000000, !dbg !19
  %40 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #3, !dbg !19
  %41 = fmul float %34, 0x3FF7154760000000, !dbg !19
  %42 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %41) #3, !dbg !19
  %43 = fadd float %36, 1.000000e+00, !dbg !20
  %44 = fadd float %38, 1.000000e+00, !dbg !20
  %45 = fadd float %40, 1.000000e+00, !dbg !20
  %46 = fadd float %42, 1.000000e+00, !dbg !20
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %43) #3, !dbg !21
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %44) #3, !dbg !21
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %45) #3, !dbg !21
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %46) #3, !dbg !21
  %51 = fcmp olt float %47, %27, !dbg !22
  %52 = fcmp olt float %48, %28, !dbg !22
  %53 = fcmp olt float %49, %29, !dbg !22
  %54 = fcmp olt float %50, %30, !dbg !22
  %55 = fcmp uno float %47, 0.000000e+00, !dbg !26
  %56 = fcmp uno float %48, 0.000000e+00, !dbg !26
  %57 = fcmp uno float %49, 0.000000e+00, !dbg !26
  %58 = fcmp uno float %50, 0.000000e+00, !dbg !26
  %59 = or i1 %51, %55, !dbg !27
  %60 = or i1 %52, %56, !dbg !27
  %61 = or i1 %53, %57, !dbg !27
  %62 = or i1 %54, %58, !dbg !27
  %63 = select i1 %59, float %47, float %27, !dbg !28
  %64 = select i1 %60, float %48, float %28, !dbg !28
  %65 = select i1 %61, float %49, float %29, !dbg !28
  %66 = select i1 %62, float %50, float %30, !dbg !28
  %67 = fcmp une float %27, -1.000000e+00, !dbg !29
  %68 = fcmp une float %28, -1.000000e+00, !dbg !29
  %69 = fcmp une float %29, -1.000000e+00, !dbg !29
  %70 = fcmp une float %30, -1.000000e+00, !dbg !29
  %71 = uitofp i1 %67 to float, !dbg !30
  %72 = uitofp i1 %68 to float, !dbg !30
  %73 = uitofp i1 %69 to float, !dbg !30
  %74 = uitofp i1 %70 to float, !dbg !30
  %75 = fmul float %63, %71, !dbg !31
  %76 = fmul float %64, %72, !dbg !31
  %77 = fmul float %65, %73, !dbg !31
  %78 = fmul float %66, %74, !dbg !31
  %79 = fadd float %75, %76, !dbg !32
  %80 = fadd float %79, %77, !dbg !32
  %81 = fadd float %80, %78, !dbg !32
  %82 = bitcast float %81 to i32, !dbg !35
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !35
  %84 = bitcast i32 %83 to float, !dbg !35
  %85 = fadd float %81, %84, !dbg !32
  %86 = bitcast float %85 to i32, !dbg !35
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !35
  %88 = bitcast i32 %87 to float, !dbg !35
  %89 = fadd float %85, %88, !dbg !32
  %90 = bitcast float %89 to i32, !dbg !35
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = fadd float %89, %92, !dbg !32
  %94 = bitcast float %93 to i32, !dbg !35
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = fadd float %93, %96, !dbg !32
  %98 = bitcast float %97 to i32, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %97, %100, !dbg !32
  %102 = icmp eq i32 %6, 0, !dbg !35
  %103 = and i32 %7, 1, !dbg !35
  %104 = zext nneg i32 %103 to i64, !dbg !35
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !35
  %106 = bitcast float %101 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 %102) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %107 = icmp slt i32 %5, 2, !dbg !35
  %108 = sext i32 %5 to i64, !dbg !35
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i64 %108, !dbg !35
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #3, !dbg !35
  %111 = bitcast i32 %110 to float, !dbg !35
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = fadd float %111, %113, !dbg !32
  %115 = and i32 %5, 1, !dbg !35
  %116 = icmp eq i32 %115, 0, !dbg !35
  %117 = and i1 %107, %116, !dbg !35
  %118 = bitcast float %114 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %118, i1 %117) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %119 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %120 = fadd float %119, 0.000000e+00, !dbg !36
  %121 = fcmp ogt float %47, %27, !dbg !38
  %122 = fcmp ogt float %48, %28, !dbg !38
  %123 = fcmp ogt float %49, %29, !dbg !38
  %124 = fcmp ogt float %50, %30, !dbg !38
  %125 = or i1 %121, %55, !dbg !40
  %126 = or i1 %122, %56, !dbg !40
  %127 = or i1 %123, %57, !dbg !40
  %128 = or i1 %124, %58, !dbg !40
  %129 = select i1 %125, float %47, float %27, !dbg !41
  %130 = select i1 %126, float %48, float %28, !dbg !41
  %131 = select i1 %127, float %49, float %29, !dbg !41
  %132 = select i1 %128, float %50, float %30, !dbg !41
  %133 = fmul float %129, %71, !dbg !42
  %134 = fmul float %130, %72, !dbg !42
  %135 = fmul float %131, %73, !dbg !42
  %136 = fmul float %132, %74, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %137 = fadd float %133, %134, !dbg !45
  %138 = fadd float %137, %135, !dbg !45
  %139 = fadd float %138, %136, !dbg !45
  %140 = bitcast float %139 to i32, !dbg !43
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !43
  %142 = bitcast i32 %141 to float, !dbg !43
  %143 = fadd float %139, %142, !dbg !45
  %144 = bitcast float %143 to i32, !dbg !43
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !43
  %146 = bitcast i32 %145 to float, !dbg !43
  %147 = fadd float %143, %146, !dbg !45
  %148 = bitcast float %147 to i32, !dbg !43
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !43
  %150 = bitcast i32 %149 to float, !dbg !43
  %151 = fadd float %147, %150, !dbg !45
  %152 = bitcast float %151 to i32, !dbg !43
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !43
  %154 = bitcast i32 %153 to float, !dbg !43
  %155 = fadd float %151, %154, !dbg !45
  %156 = bitcast float %155 to i32, !dbg !43
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !43
  %158 = bitcast i32 %157 to float, !dbg !43
  %159 = fadd float %155, %158, !dbg !45
  %160 = bitcast float %159 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %160, i1 %102) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #3, !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = fadd float %162, %164, !dbg !45
  %166 = bitcast float %165 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %166, i1 %117) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %167 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %168 = fadd float %167, 0.000000e+00, !dbg !46
  %169 = fcmp ogt float %167, 1.000000e+00, !dbg !48
  %170 = fcmp uno float %167, 0.000000e+00, !dbg !50
  %171 = or i1 %169, %170, !dbg !51
  %172 = select i1 %171, float %168, float 1.000000e+00, !dbg !52
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %172) #3, !dbg !53
  %174 = fsub float 1.000000e+00, %173, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %urem = and i32 %5, 63, !dbg !56
  %175 = icmp eq i32 %urem, 0, !dbg !56
  %176 = bitcast float %174 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %0, i1 %175) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c72oq4dzajknb3dechl4pia2uqptf2qiadwy2c3lrgyeicwlmhp3.py", directory: "inductor_cache/72")
!4 = !{ptr @triton_per_fused__to_copy_clamp_div_maximum_minimum_mul_ne_rsub_sigmoid_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_clamp_div_maximum_minimum_mul_ne_rsub_sigmoid_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_clamp_div_maximum_minimum_mul_ne_rsub_sigmoid_sum_0", linkageName: "triton_per_fused__to_copy_clamp_div_maximum_minimum_mul_ne_rsub_sigmoid_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !18)
!21 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !18)
!22 = !DILocation(line: 110, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 112, column: 21, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 112, column: 16, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 36, column: 19, scope: !7)
!30 = !DILocation(line: 37, column: 19, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !16, file: !17, discriminator: 0)
!34 = !DILocation(line: 40, column: 58, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !37)
!37 = !DILocation(line: 40, column: 45, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !39)
!39 = !DILocation(line: 41, column: 41, scope: !7)
!40 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !39)
!41 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !39)
!42 = !DILocation(line: 42, column: 20, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !44)
!44 = !DILocation(line: 44, column: 59, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !44)
!46 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !47)
!47 = !DILocation(line: 44, column: 45, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !49)
!49 = !DILocation(line: 46, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !49)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 49, column: 4, scope: !7)
!56 = !DILocation(line: 50, column: 63, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
