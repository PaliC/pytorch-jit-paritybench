#loc = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0)
#loc1 = loc(unknown)
#loc69 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":56:44)
#loc124 = loc(callsite(#loc1 at #loc69))
module {
  tt.func public @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<64x8xf32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.010416667> : tensor<64x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999997E-7> : tensor<64x1xf32> loc(#loc1)
    %cst_3 = arith.constant dense<9.600000e+01> : tensor<64x1xf32> loc(#loc1)
    %cst_4 = arith.constant dense<12288> : tensor<64x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<6144> : tensor<64x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<768> : tensor<64x1xi32> loc(#loc1)
    %cst_7 = arith.constant dense<8> : tensor<64x1xi32> loc(#loc1)
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x8xf32> loc(#loc1)
    %cst_9 = arith.constant dense<96> : tensor<64x1xi32> loc(#loc1)
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<64x8xf32> loc(#loc1)
    %cst_11 = arith.constant dense<24576> : tensor<64x1xi32> loc(#loc1)
    %cst_12 = arith.constant dense<256> : tensor<1x8xi32> loc(#loc1)
    %cst_13 = arith.constant dense<96> : tensor<1x8xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_14 = arith.constant dense<16> : tensor<64x1xi32> loc(#loc1)
    %cst_15 = arith.constant dense<256> : tensor<64x1xi32> loc(#loc1)
    %cst_16 = arith.constant dense<1024> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_16 : tensor<64x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc9)
    %9 = arith.divsi %5, %cst_15 : tensor<64x1xi32> loc(#loc10)
    %10 = arith.remsi %5, %cst_15 : tensor<64x1xi32> loc(#loc11)
    %11 = arith.remsi %5, %cst_14 : tensor<64x1xi32> loc(#loc12)
    %12 = arith.divsi %5, %cst_14 : tensor<64x1xi32> loc(#loc13)
    %13 = arith.remsi %12, %cst_14 : tensor<64x1xi32> loc(#loc14)
    %14 = tt.broadcast %10 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc15)
    %15 = arith.muli %9, %cst_11 : tensor<64x1xi32> loc(#loc16)
    %16 = tt.broadcast %15 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc17)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc18)
    %18 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x8xi1> loc(#loc19)
    %19 = arith.muli %5, %cst_9 : tensor<64x1xi32> loc(#loc20)
    %20 = tt.broadcast %19 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc21)
    %21 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc22)
    %22 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc23)
    %23 = arith.remsi %11, %cst_7 : tensor<64x1xi32> loc(#loc24)
    %24 = arith.muli %23, %cst_9 : tensor<64x1xi32> loc(#loc25)
    %25 = tt.broadcast %24 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc26)
    %26 = arith.remsi %13, %cst_7 : tensor<64x1xi32> loc(#loc27)
    %27 = arith.muli %26, %cst_6 : tensor<64x1xi32> loc(#loc28)
    %28 = tt.broadcast %27 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc29)
    %29 = arith.divsi %11, %cst_7 : tensor<64x1xi32> loc(#loc30)
    %30 = arith.muli %29, %cst_5 : tensor<64x1xi32> loc(#loc31)
    %31 = tt.broadcast %30 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc32)
    %32 = arith.divsi %13, %cst_7 : tensor<64x1xi32> loc(#loc33)
    %33 = arith.muli %32, %cst_4 : tensor<64x1xi32> loc(#loc34)
    %34 = tt.broadcast %33 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc35)
    %35 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc36)
    %36 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc37)
    %37:3 = scf.for %arg12 = %c0_i32 to %c96_i32 step %c8_i32 iter_args(%arg13 = %cst_10, %arg14 = %cst_10, %arg15 = %cst_10) -> (tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32>)  : i32 {
      %60 = tt.splat %arg12 : i32 -> tensor<1x8xi32> loc(#loc39)
      %61 = arith.addi %60, %8 : tensor<1x8xi32> loc(#loc39)
      %62 = arith.cmpi slt, %61, %cst_13 : tensor<1x8xi32> loc(#loc40)
      %63 = arith.muli %61, %cst_12 : tensor<1x8xi32> loc(#loc41)
      %64 = tt.broadcast %63 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc15)
      %65 = arith.addi %14, %64 : tensor<64x8xi32> loc(#loc15)
      %66 = arith.addi %65, %16 : tensor<64x8xi32> loc(#loc17)
      %67 = tt.addptr %17, %66 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc18)
      %68 = tt.broadcast %62 : tensor<1x8xi1> -> tensor<64x8xi1> loc(#loc19)
      %69 = arith.andi %68, %18 : tensor<64x8xi1> loc(#loc19)
      %70 = tt.load %67, %69, %cst_10 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc42)
      %71 = tt.broadcast %61 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc21)
      %72 = arith.addi %71, %20 : tensor<64x8xi32> loc(#loc21)
      %73 = tt.addptr %21, %72 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc22)
      %74 = tt.load %73, %69, %cst_10 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc43)
      %75 = tt.addptr %22, %61 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc23)
      %76 = tt.load %75, %62, %cst_8 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>> loc(#loc44)
      %77 = arith.addi %71, %25 : tensor<64x8xi32> loc(#loc26)
      %78 = arith.addi %77, %28 : tensor<64x8xi32> loc(#loc29)
      %79 = arith.addi %78, %31 : tensor<64x8xi32> loc(#loc32)
      %80 = arith.addi %79, %34 : tensor<64x8xi32> loc(#loc35)
      %81 = arith.addi %80, %16 : tensor<64x8xi32> loc(#loc45)
      %82 = tt.addptr %35, %81 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc36)
      %83 = tt.load %82, %69, %cst_10 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc46)
      %84 = tt.addptr %36, %61 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc37)
      %85 = tt.load %84, %62, %cst_8 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>> loc(#loc47)
      %86 = tt.broadcast %76 : tensor<1x8xf32> -> tensor<64x8xf32> loc(#loc48)
      %87 = arith.addf %74, %86 : tensor<64x8xf32> loc(#loc48)
      %88 = arith.addf %70, %87 : tensor<64x8xf32> loc(#loc49)
      %89 = tt.broadcast %85 : tensor<1x8xf32> -> tensor<64x8xf32> loc(#loc50)
      %90 = arith.addf %83, %89 : tensor<64x8xf32> loc(#loc50)
      %91 = arith.addf %88, %90 : tensor<64x8xf32> loc(#loc51)
      %92 = arith.cmpi eq, %arg12, %c0_i32 : i32 loc(#loc52)
      %93:3 = scf.if %92 -> (tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32>) {
        scf.yield %cst_10, %91, %cst_0 : tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32> loc(#loc115)
      } else {
        %97 = arith.subf %91, %arg13 : tensor<64x8xf32> loc(#loc116)
        %98 = arith.addf %arg15, %cst_0 : tensor<64x8xf32> loc(#loc117)
        %99 = arith.divf %97, %98 : tensor<64x8xf32> loc(#loc118)
        %100 = arith.addf %arg13, %99 : tensor<64x8xf32> loc(#loc119)
        %101 = arith.subf %91, %100 : tensor<64x8xf32> loc(#loc120)
        %102 = arith.mulf %97, %101 : tensor<64x8xf32> loc(#loc121)
        %103 = arith.addf %arg14, %102 : tensor<64x8xf32> loc(#loc122)
        scf.yield %103, %100, %98 : tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32> loc(#loc122)
      } loc(#loc114)
      %94 = arith.select %69, %93#1, %arg13 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc63)
      %95 = arith.select %69, %93#0, %arg14 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc64)
      %96 = arith.select %69, %93#2, %arg15 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc65)
      tt.store %73, %91, %69 : tensor<64x8x!tt.ptr<f32>> loc(#loc66)
      scf.yield %94, %95, %96 : tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32> loc(#loc67)
    } loc(#loc38)
    %38:3 = "tt.reduce"(%37#0, %37#1, %37#2) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc69)), %arg13: f32 loc(callsite(#loc1 at #loc69)), %arg14: f32 loc(callsite(#loc1 at #loc69)), %arg15: f32 loc(callsite(#loc1 at #loc69)), %arg16: f32 loc(callsite(#loc1 at #loc69)), %arg17: f32 loc(callsite(#loc1 at #loc69))):
      %60 = arith.subf %arg15, %arg12 : f32 loc(#loc137)
      %61 = arith.addf %arg14, %arg17 : f32 loc(#loc138)
      %62 = arith.cmpf oeq, %61, %cst : f32 loc(#loc139)
      %63 = arith.divf %arg17, %61 : f32 loc(#loc140)
      %64 = arith.select %62, %cst, %63 : f32 loc(#loc141)
      %65 = arith.mulf %60, %64 : f32 loc(#loc142)
      %66 = arith.addf %arg12, %65 : f32 loc(#loc143)
      %67 = arith.addf %arg13, %arg16 : f32 loc(#loc144)
      %68 = arith.mulf %60, %60 : f32 loc(#loc145)
      %69 = arith.mulf %68, %arg14 : f32 loc(#loc146)
      %70 = arith.mulf %69, %64 : f32 loc(#loc147)
      %71 = arith.addf %67, %70 : f32 loc(#loc148)
      tt.reduce.return %66, %71, %61 : f32, f32, f32 loc(#loc123)
    }) : (tensor<64x8xf32>, tensor<64x8xf32>, tensor<64x8xf32>) -> (tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) loc(#loc123)
    %39 = tt.expand_dims %38#0 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc82)
    %40 = tt.expand_dims %38#1 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc83)
    %41 = arith.muli %5, %cst_9 : tensor<64x1xi32> loc(#loc84)
    %42 = tt.broadcast %41 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc85)
    %43 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc86)
    %44 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x8xi1> loc(#loc87)
    %45 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc88)
    %46 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc89)
    %47 = tt.broadcast %39 : tensor<64x1xf32> -> tensor<64x8xf32> loc(#loc90)
    %48 = arith.divf %40, %cst_3 : tensor<64x1xf32> loc(#loc91)
    %49 = arith.addf %48, %cst_2 : tensor<64x1xf32> loc(#loc92)
    %50 = tt.extern_elementwise %49 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32>) -> tensor<64x1xf32> loc(#loc93)
    %51 = tt.broadcast %50 : tensor<64x1xf32> -> tensor<64x8xf32> loc(#loc94)
    %52 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc95)
    %53 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc96)
    scf.for %arg12 = %c0_i32 to %c96_i32 step %c8_i32  : i32 {
      %60 = tt.splat %arg12 : i32 -> tensor<1x8xi32> loc(#loc98)
      %61 = arith.addi %60, %8 : tensor<1x8xi32> loc(#loc98)
      %62 = arith.cmpi slt, %61, %cst_13 : tensor<1x8xi32> loc(#loc99)
      %63 = tt.broadcast %61 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc85)
      %64 = arith.addi %63, %42 : tensor<64x8xi32> loc(#loc85)
      %65 = tt.addptr %43, %64 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc86)
      %66 = tt.broadcast %62 : tensor<1x8xi1> -> tensor<64x8xi1> loc(#loc87)
      %67 = arith.andi %66, %44 : tensor<64x8xi1> loc(#loc87)
      %68 = tt.load %65, %67, %cst_10 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc100)
      %69 = tt.addptr %45, %61 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc88)
      %70 = tt.load %69, %62, %cst_8 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>> loc(#loc101)
      %71 = tt.addptr %46, %61 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc89)
      %72 = tt.load %71, %62, %cst_8 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>> loc(#loc102)
      %73 = arith.subf %68, %47 : tensor<64x8xf32> loc(#loc90)
      %74 = arith.mulf %73, %51 : tensor<64x8xf32> loc(#loc94)
      %75 = tt.broadcast %70 : tensor<1x8xf32> -> tensor<64x8xf32> loc(#loc103)
      %76 = arith.mulf %74, %75 : tensor<64x8xf32> loc(#loc103)
      %77 = tt.broadcast %72 : tensor<1x8xf32> -> tensor<64x8xf32> loc(#loc104)
      %78 = arith.addf %76, %77 : tensor<64x8xf32> loc(#loc104)
      %79 = tt.addptr %52, %64 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc95)
      tt.store %79, %74, %67 : tensor<64x8x!tt.ptr<f32>> loc(#loc105)
      %80 = tt.addptr %53, %64 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc96)
      tt.store %80, %78, %67 : tensor<64x8x!tt.ptr<f32>> loc(#loc106)
    } loc(#loc97)
    %54 = arith.divf %40, %cst_3 : tensor<64x1xf32> loc(#loc107)
    %55 = arith.addf %54, %cst_2 : tensor<64x1xf32> loc(#loc108)
    %56 = tt.extern_elementwise %55 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32>) -> tensor<64x1xf32> loc(#loc109)
    %57 = arith.mulf %56, %cst_1 : tensor<64x1xf32> loc(#loc110)
    %58 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc111)
    %59 = tt.addptr %58, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc111)
    tt.store %59, %57, %6 : tensor<64x1x!tt.ptr<f32>> loc(#loc112)
    tt.return loc(#loc113)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":22:28)
#loc3 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":22:33)
#loc4 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":23:36)
#loc5 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":23:44)
#loc6 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":23:23)
#loc7 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":24:21)
#loc8 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":25:25)
#loc9 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":25:33)
#loc10 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":26:19)
#loc11 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":27:19)
#loc12 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":29:19)
#loc13 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":30:21)
#loc14 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":30:27)
#loc15 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:39)
#loc16 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:54)
#loc17 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:48)
#loc18 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:34)
#loc19 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:67)
#loc20 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:46)
#loc21 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:43)
#loc22 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:38)
#loc23 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":40:34)
#loc24 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:49)
#loc25 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:44)
#loc26 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:39)
#loc27 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:66)
#loc28 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:61)
#loc29 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:55)
#loc30 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:84)
#loc31 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:78)
#loc32 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:72)
#loc33 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:102)
#loc34 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:96)
#loc35 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:89)
#loc36 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:34)
#loc37 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":42:34)
#loc38 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":34:36)
#loc39 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":35:27)
#loc40 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":36:25)
#loc41 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:43)
#loc42 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:59)
#loc43 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:51)
#loc44 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":40:39)
#loc45 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:107)
#loc46 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:118)
#loc47 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":42:39)
#loc48 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":43:22)
#loc49 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":44:22)
#loc50 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":45:22)
#loc51 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":46:22)
#loc52 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":49:65)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc54 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":49:54)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc63 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":51:62)
#loc64 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":52:58)
#loc65 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":53:66)
#loc66 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":54:51)
#loc67 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":54:8)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc70 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc71 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc73 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc75 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc77 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc78 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc79 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc80 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc81 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc82 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":58:22)
#loc83 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":59:22)
#loc84 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":65:47)
#loc85 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":65:44)
#loc86 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":65:39)
#loc87 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":65:60)
#loc88 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":66:35)
#loc89 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":67:35)
#loc90 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":68:24)
#loc91 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":70:24)
#loc92 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":72:24)
#loc93 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":73:32)
#loc94 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":74:24)
#loc95 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":77:29)
#loc96 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":78:29)
#loc97 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":61:36)
#loc98 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":62:27)
#loc99 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":63:25)
#loc100 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":65:52)
#loc101 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":66:40)
#loc102 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":67:40)
#loc103 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":75:24)
#loc104 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":76:24)
#loc105 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":77:49)
#loc106 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":78:49)
#loc107 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":80:20)
#loc108 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":82:20)
#loc109 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":83:28)
#loc110 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":85:20)
#loc111 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":86:25)
#loc112 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":86:37)
#loc113 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":86:4)
#loc114 = loc(callsite(#loc53 at #loc54))
#loc115 = loc(callsite(#loc55 at #loc54))
#loc116 = loc(callsite(#loc56 at #loc54))
#loc117 = loc(callsite(#loc57 at #loc54))
#loc118 = loc(callsite(#loc58 at #loc54))
#loc119 = loc(callsite(#loc59 at #loc54))
#loc120 = loc(callsite(#loc60 at #loc54))
#loc121 = loc(callsite(#loc61 at #loc54))
#loc122 = loc(callsite(#loc62 at #loc54))
#loc123 = loc(callsite(#loc68 at #loc69))
#loc125 = loc(callsite(#loc70 at #loc68))
#loc126 = loc(callsite(#loc71 at #loc68))
#loc127 = loc(callsite(#loc72 at #loc68))
#loc128 = loc(callsite(#loc73 at #loc68))
#loc129 = loc(callsite(#loc74 at #loc68))
#loc130 = loc(callsite(#loc75 at #loc68))
#loc131 = loc(callsite(#loc76 at #loc68))
#loc132 = loc(callsite(#loc77 at #loc68))
#loc133 = loc(callsite(#loc78 at #loc68))
#loc134 = loc(callsite(#loc79 at #loc68))
#loc135 = loc(callsite(#loc80 at #loc68))
#loc136 = loc(callsite(#loc81 at #loc68))
#loc137 = loc(callsite(#loc125 at #loc69))
#loc138 = loc(callsite(#loc126 at #loc69))
#loc139 = loc(callsite(#loc127 at #loc69))
#loc140 = loc(callsite(#loc128 at #loc69))
#loc141 = loc(callsite(#loc129 at #loc69))
#loc142 = loc(callsite(#loc130 at #loc69))
#loc143 = loc(callsite(#loc131 at #loc69))
#loc144 = loc(callsite(#loc132 at #loc69))
#loc145 = loc(callsite(#loc133 at #loc69))
#loc146 = loc(callsite(#loc134 at #loc69))
#loc147 = loc(callsite(#loc135 at #loc69))
#loc148 = loc(callsite(#loc136 at #loc69))
