; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 1, !dbg !12
  %17 = and i32 %16, 63, !dbg !12
  %18 = shl i32 %15, 2, !dbg !12
  %19 = and i32 %18, 4, !dbg !12
  %20 = and i32 %18, 60, !dbg !12
  %21 = or disjoint i32 %14, %17, !dbg !13
  %22 = or disjoint i32 %14, %20, !dbg !13
  %23 = icmp slt i32 %21, 1024, !dbg !14
  %24 = icmp slt i32 %22, 1024, !dbg !14
  %25 = lshr i32 %15, 4, !dbg !15
  %26 = and i32 %25, 7, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %27 = sdiv i32 %.frozen, 256, !dbg !16
  %28 = sdiv i32 %21, 256, !dbg !16
  %29 = mul i32 %27, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %29, !dbg !17
  %.frozen114 = freeze i32 %21, !dbg !18
  %30 = sdiv i32 %.frozen114, 16, !dbg !18
  %31 = mul i32 %30, 16, !dbg !19
  %.decomposed115 = sub i32 %.frozen114, %31, !dbg !19
  %32 = srem i32 %30, 16, !dbg !20
  %33 = mul i32 %27, 24576, !dbg !21
  %34 = mul i32 %21, 96, !dbg !22
  %.lhs.trunc = trunc nsw i32 %.decomposed115 to i8, !dbg !23
  %35 = sdiv i8 %.lhs.trunc, 8, !dbg !24
  %36 = mul i8 %35, 8, !dbg !23
  %.decomposed116 = sub i8 %.lhs.trunc, %36, !dbg !23
  %.sext = sext i8 %.decomposed116 to i32, !dbg !23
  %.lhs.trunc27 = trunc nsw i32 %32 to i8, !dbg !25
  %37 = sdiv i8 %.lhs.trunc27, 8, !dbg !26
  %38 = mul i8 %37, 8, !dbg !25
  %.decomposed117 = sub i8 %.lhs.trunc27, %38, !dbg !25
  %39 = insertelement <2 x i8> poison, i8 %35, i64 0, !dbg !24
  %40 = insertelement <2 x i8> %39, i8 %.decomposed117, i64 1, !dbg !24
  %41 = insertelement <4 x i32> poison, i32 %.sext, i64 0, !dbg !27
  %42 = insertelement <4 x i32> %41, i32 %28, i64 1, !dbg !27
  %43 = sext <2 x i8> %40 to <2 x i32>, !dbg !27
  %44 = shufflevector <2 x i32> %43, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %45 = shufflevector <4 x i32> %42, <4 x i32> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !27
  %46 = mul <4 x i32> %45, <i32 96, i32 24576, i32 6144, i32 768>, !dbg !27
  %.sext32 = sext i8 %37 to i32, !dbg !26
  %47 = mul nsw i32 %.sext32, 12288, !dbg !28
  %48 = add i32 %33, %.decomposed
  %49 = shl i32 %15, 5
  %50 = and i32 %49, 480
  %51 = or disjoint i32 %50, %26
  %52 = and i32 %18, 508
  %53 = lshr exact i32 %50, 1
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53
  %55 = getelementptr inbounds float, ptr addrspace(3) %54, i32 %51
  %56 = or disjoint i32 %51, 8
  %57 = lshr i32 %56, 1
  %58 = and i32 %57, 244
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %56
  %61 = or disjoint i32 %51, 16
  %62 = lshr i32 %61, 1
  %63 = and i32 %62, 248
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %61
  %66 = or disjoint i32 %51, 24
  %67 = lshr i32 %66, 1
  %68 = and i32 %67, 252
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %66
  %71 = lshr exact i32 %18, 1
  %72 = and i32 %71, 252
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %52
  %75 = zext nneg i32 %19 to i64, !dbg !29
  %76 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !30
  %77 = shufflevector <4 x i1> %76, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !30
  %78 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %46)
  %op.rdx = add i32 %78, %47
  br label %79, !dbg !29

79:                                               ; preds = %12, %._crit_edge
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %12 ], [ %210, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %12 ], [ %211, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %12 ], [ %212, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %12 ], [ %213, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %12 ], [ %206, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %12 ], [ %207, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %12 ], [ %208, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %12 ], [ %209, %._crit_edge ]
  %88 = phi <4 x float> [ zeroinitializer, %12 ], [ %205, %._crit_edge ]
  %89 = or disjoint i64 %indvars.iv, %75, !dbg !31
  %90 = trunc i64 %indvars.iv to i32, !dbg !32
  %.tr = or disjoint i32 %26, %90, !dbg !32
  %91 = shl i32 %.tr, 8, !dbg !32
  %92 = add i32 %48, %91, !dbg !32
  %93 = sext i32 %92 to i64, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !33
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %100 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %100, i1 true) #6, !dbg !34
  %101 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %101, i1 true) #6, !dbg !34
  %102 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %102, i1 true) #6, !dbg !34
  %103 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %103, i1 true) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %104 = trunc nuw nsw i64 %89 to i32, !dbg !35
  %105 = add i32 %34, %104, !dbg !35
  %106 = sext i32 %105 to i64, !dbg !36
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !36
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !37
  %op.rdx94 = add i32 %op.rdx, %104, !dbg !38
  %109 = sext i32 %op.rdx94 to i64, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !39
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !40
  %112 = load <4 x float>, ptr addrspace(3) %74, align 16, !dbg !34
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #6, !dbg !41
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !41
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !41
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !41
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !41
  %118 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !41
  %119 = insertelement <4 x i32> %118, i32 %115, i64 1, !dbg !41
  %120 = insertelement <4 x i32> %119, i32 %116, i64 2, !dbg !41
  %121 = insertelement <4 x i32> %120, i32 %117, i64 3, !dbg !41
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !41
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !42
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !42
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !42
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !42
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !42
  %128 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !42
  %129 = insertelement <4 x i32> %128, i32 %125, i64 1, !dbg !42
  %130 = insertelement <4 x i32> %129, i32 %126, i64 2, !dbg !42
  %131 = insertelement <4 x i32> %130, i32 %127, i64 3, !dbg !42
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !42
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #6, !dbg !43
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !43
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !43
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !43
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !43
  %138 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !43
  %139 = insertelement <4 x i32> %138, i32 %135, i64 1, !dbg !43
  %140 = insertelement <4 x i32> %139, i32 %136, i64 2, !dbg !43
  %141 = insertelement <4 x i32> %140, i32 %137, i64 3, !dbg !43
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !43
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !44
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !44
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !44
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !44
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !44
  %148 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !44
  %149 = insertelement <4 x i32> %148, i32 %145, i64 1, !dbg !44
  %150 = insertelement <4 x i32> %149, i32 %146, i64 2, !dbg !44
  %151 = insertelement <4 x i32> %150, i32 %147, i64 3, !dbg !44
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !44
  %153 = fadd <4 x float> %122, %132, !dbg !45
  %154 = fadd <4 x float> %112, %153, !dbg !46
  %155 = fadd <4 x float> %142, %152, !dbg !47
  %156 = fadd <4 x float> %154, %155, !dbg !48
  %157 = icmp eq i64 %indvars.iv, 0, !dbg !49
  br i1 %157, label %._crit_edge, label %158, !dbg !50

158:                                              ; preds = %79
  %159 = fsub <4 x float> %156, %88, !dbg !54
  %160 = extractelement <4 x float> %159, i64 0, !dbg !54
  %161 = fsub <4 x float> %156, %88, !dbg !54
  %162 = extractelement <4 x float> %161, i64 1, !dbg !54
  %163 = fsub <4 x float> %156, %88, !dbg !54
  %164 = extractelement <4 x float> %163, i64 2, !dbg !54
  %165 = fsub <4 x float> %156, %88, !dbg !54
  %166 = extractelement <4 x float> %165, i64 3, !dbg !54
  %167 = fadd float %80, 1.000000e+00, !dbg !55
  %168 = fadd float %81, 1.000000e+00, !dbg !55
  %169 = fadd float %82, 1.000000e+00, !dbg !55
  %170 = fadd float %83, 1.000000e+00, !dbg !55
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %167) #6, !dbg !56
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %168) #6, !dbg !56
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %169) #6, !dbg !56
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %170) #6, !dbg !56
  %175 = insertelement <4 x float> poison, float %171, i64 0, !dbg !57
  %176 = insertelement <4 x float> %175, float %172, i64 1, !dbg !57
  %177 = insertelement <4 x float> %176, float %173, i64 2, !dbg !57
  %178 = insertelement <4 x float> %177, float %174, i64 3, !dbg !57
  %179 = fadd <4 x float> %88, %178, !dbg !57
  %180 = fsub <4 x float> %156, %179, !dbg !58
  %181 = fsub <4 x float> %156, %179, !dbg !58
  %182 = fsub <4 x float> %156, %179, !dbg !58
  %183 = fsub <4 x float> %156, %179, !dbg !58
  %184 = fmul <4 x float> %159, %180, !dbg !59
  %185 = extractelement <4 x float> %184, i64 0, !dbg !59
  %186 = fmul <4 x float> %161, %181, !dbg !59
  %187 = extractelement <4 x float> %186, i64 1, !dbg !59
  %188 = fmul <4 x float> %163, %182, !dbg !59
  %189 = extractelement <4 x float> %188, i64 2, !dbg !59
  %190 = fmul <4 x float> %165, %183, !dbg !59
  %191 = extractelement <4 x float> %190, i64 3, !dbg !59
  %192 = fadd float %84, %185, !dbg !60
  %193 = fadd float %85, %187, !dbg !60
  %194 = fadd float %86, %189, !dbg !60
  %195 = fadd float %87, %191, !dbg !60
  br label %._crit_edge, !dbg !50

._crit_edge:                                      ; preds = %79, %158
  %196 = phi float [ %192, %158 ], [ 0.000000e+00, %79 ], !dbg !53
  %197 = phi float [ %193, %158 ], [ 0.000000e+00, %79 ], !dbg !53
  %198 = phi float [ %194, %158 ], [ 0.000000e+00, %79 ], !dbg !53
  %199 = phi float [ %195, %158 ], [ 0.000000e+00, %79 ], !dbg !53
  %200 = phi float [ %167, %158 ], [ 1.000000e+00, %79 ], !dbg !53
  %201 = phi float [ %168, %158 ], [ 1.000000e+00, %79 ], !dbg !53
  %202 = phi float [ %169, %158 ], [ 1.000000e+00, %79 ], !dbg !53
  %203 = phi float [ %170, %158 ], [ 1.000000e+00, %79 ], !dbg !53
  %204 = phi <4 x float> [ %179, %158 ], [ %156, %79 ]
  %205 = select <4 x i1> %77, <4 x float> %204, <4 x float> %88, !dbg !30
  %206 = select i1 %23, float %196, float %84, !dbg !61
  %207 = select i1 %23, float %197, float %85, !dbg !61
  %208 = select i1 %23, float %198, float %86, !dbg !61
  %209 = select i1 %23, float %199, float %87, !dbg !61
  %210 = select i1 %23, float %200, float %80, !dbg !62
  %211 = select i1 %23, float %201, float %81, !dbg !62
  %212 = select i1 %23, float %202, float %82, !dbg !62
  %213 = select i1 %23, float %203, float %83, !dbg !62
  %bc = bitcast <4 x float> %156 to <4 x i32>, !dbg !63
  %214 = extractelement <4 x i32> %bc, i64 0, !dbg !63
  %bc95 = bitcast <4 x float> %156 to <4 x i32>, !dbg !63
  %215 = extractelement <4 x i32> %bc95, i64 1, !dbg !63
  %bc96 = bitcast <4 x float> %156 to <4 x i32>, !dbg !63
  %216 = extractelement <4 x i32> %bc96, i64 2, !dbg !63
  %bc97 = bitcast <4 x float> %156 to <4 x i32>, !dbg !63
  %217 = extractelement <4 x i32> %bc97, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %215, i32 %216, i32 %217, ptr addrspace(1) %107, i1 %23) #6, !dbg !63
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !29
  %218 = icmp samesign ult i64 %indvars.iv, 88, !dbg !29
  br i1 %218, label %79, label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %219 = and i32 %15, 63, !dbg !12
  %220 = extractelement <4 x float> %205, i64 0, !dbg !64
  %221 = extractelement <4 x float> %205, i64 1, !dbg !64
  %222 = fsub float %221, %220, !dbg !64
  %223 = fadd float %210, %211, !dbg !67
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !68
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %223) #6, !dbg !69
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !70
  %227 = fmul float %222, %226, !dbg !71
  %228 = fadd float %220, %227, !dbg !72
  %229 = fadd float %206, %207, !dbg !73
  %230 = fmul float %222, %222, !dbg !74
  %231 = fmul float %230, %210, !dbg !75
  %232 = fmul float %231, %226, !dbg !76
  %233 = fadd float %229, %232, !dbg !77
  %234 = extractelement <4 x float> %205, i64 2, !dbg !64
  %235 = fsub float %234, %228, !dbg !64
  %236 = fadd float %212, %223, !dbg !67
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !68
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %236) #6, !dbg !69
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !70
  %240 = fmul float %239, %235, !dbg !71
  %241 = fadd float %228, %240, !dbg !72
  %242 = fadd float %208, %233, !dbg !73
  %243 = fmul float %235, %235, !dbg !74
  %244 = fmul float %223, %243, !dbg !75
  %245 = fmul float %239, %244, !dbg !76
  %246 = fadd float %242, %245, !dbg !77
  %247 = extractelement <4 x float> %205, i64 3, !dbg !64
  %248 = fsub float %247, %241, !dbg !64
  %249 = fadd float %213, %236, !dbg !67
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !68
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %249) #6, !dbg !69
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !70
  %253 = fmul float %252, %248, !dbg !71
  %254 = fadd float %241, %253, !dbg !72
  %255 = fadd float %209, %246, !dbg !73
  %256 = fmul float %248, %248, !dbg !74
  %257 = fmul float %236, %256, !dbg !75
  %258 = fmul float %252, %257, !dbg !76
  %259 = fadd float %255, %258, !dbg !77
  %260 = bitcast float %254 to i32, !dbg !78
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 1, i32 31), !dbg !78
  %262 = bitcast i32 %261 to float, !dbg !78
  %263 = bitcast float %259 to i32, !dbg !78
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !78
  %265 = bitcast i32 %264 to float, !dbg !78
  %266 = bitcast float %249 to i32, !dbg !78
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !78
  %268 = bitcast i32 %267 to float, !dbg !78
  %269 = fsub float %262, %254, !dbg !64
  %270 = fadd float %249, %268, !dbg !67
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !68
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %270) #6, !dbg !69
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !70
  %274 = fmul float %273, %269, !dbg !71
  %275 = fadd float %254, %274, !dbg !72
  %276 = fadd float %259, %265, !dbg !73
  %277 = fmul float %269, %269, !dbg !74
  %278 = fmul float %249, %277, !dbg !75
  %279 = fmul float %273, %278, !dbg !76
  %280 = fadd float %276, %279, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !79
  %282 = bitcast float %280 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #6, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !79
  %284 = load float, ptr addrspace(3) %283, align 4, !dbg !79
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float 9.600000e+01) #6, !dbg !80
  %286 = fadd float %285, 0x3EB0C6F7A0000000, !dbg !81
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !82
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !82
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !82
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !82
  %.not.i21 = icmp eq i32 %290, 0, !dbg !82
  br i1 %.not.i21, label %293, label %291, !dbg !82

291:                                              ; preds = %__nv_rsqrtf.exit
  %292 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %286), !dbg !82
  br label %__nv_rsqrtf.exit23, !dbg !82

293:                                              ; preds = %__nv_rsqrtf.exit
  %294 = tail call float @llvm.nvvm.rsqrt.approx.f(float %286), !dbg !82
  br label %__nv_rsqrtf.exit23, !dbg !82

__nv_rsqrtf.exit23:                               ; preds = %291, %293
  %.0.i22 = phi float [ %292, %291 ], [ %294, %293 ], !dbg !82
  br label %295, !dbg !83

295:                                              ; preds = %__nv_rsqrtf.exit23, %295
  %indvars.iv48 = phi i64 [ 0, %__nv_rsqrtf.exit23 ], [ %indvars.iv.next49, %295 ]
  %296 = or disjoint i64 %indvars.iv48, %75, !dbg !84
  %297 = trunc nuw nsw i64 %296 to i32, !dbg !85
  %298 = add i32 %34, %297, !dbg !85
  %299 = sext i32 %298 to i64, !dbg !86
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !86
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #6, !dbg !87
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !87
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !87
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !87
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !87
  %306 = bitcast i32 %302 to float, !dbg !87
  %307 = bitcast i32 %303 to float, !dbg !87
  %308 = bitcast i32 %304 to float, !dbg !87
  %309 = bitcast i32 %305 to float, !dbg !87
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %296, !dbg !88
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %310, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !89
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !89
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !89
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !89
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !89
  %316 = bitcast i32 %312 to float, !dbg !89
  %317 = bitcast i32 %313 to float, !dbg !89
  %318 = bitcast i32 %314 to float, !dbg !89
  %319 = bitcast i32 %315 to float, !dbg !89
  %320 = getelementptr float, ptr addrspace(1) %6, i64 %296, !dbg !90
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %320, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !91
  %322 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !91
  %323 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !91
  %324 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !91
  %325 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !91
  %326 = bitcast i32 %322 to float, !dbg !91
  %327 = bitcast i32 %323 to float, !dbg !91
  %328 = bitcast i32 %324 to float, !dbg !91
  %329 = bitcast i32 %325 to float, !dbg !91
  %330 = fsub float %306, %275, !dbg !92
  %331 = fsub float %307, %275, !dbg !92
  %332 = fsub float %308, %275, !dbg !92
  %333 = fsub float %309, %275, !dbg !92
  %334 = fmul float %.0.i22, %330, !dbg !93
  %335 = fmul float %.0.i22, %331, !dbg !93
  %336 = fmul float %.0.i22, %332, !dbg !93
  %337 = fmul float %.0.i22, %333, !dbg !93
  %338 = fmul float %334, %316, !dbg !94
  %339 = fmul float %335, %317, !dbg !94
  %340 = fmul float %336, %318, !dbg !94
  %341 = fmul float %337, %319, !dbg !94
  %342 = fadd float %338, %326, !dbg !95
  %343 = fadd float %339, %327, !dbg !95
  %344 = fadd float %340, %328, !dbg !95
  %345 = fadd float %341, %329, !dbg !95
  %346 = getelementptr float, ptr addrspace(1) %7, i64 %299, !dbg !96
  %347 = bitcast float %334 to i32, !dbg !97
  %348 = bitcast float %335 to i32, !dbg !97
  %349 = bitcast float %336 to i32, !dbg !97
  %350 = bitcast float %337 to i32, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %346, i1 %23) #6, !dbg !97
  %351 = getelementptr float, ptr addrspace(1) %8, i64 %299, !dbg !98
  %352 = bitcast float %342 to i32, !dbg !99
  %353 = bitcast float %343 to i32, !dbg !99
  %354 = bitcast float %344 to i32, !dbg !99
  %355 = bitcast float %345 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %353, i32 %354, i32 %355, ptr addrspace(1) %351, i1 %23) #6, !dbg !99
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 8, !dbg !83
  %356 = icmp samesign ult i64 %indvars.iv48, 88, !dbg !83
  br i1 %356, label %295, label %357, !dbg !83

357:                                              ; preds = %295
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float 9.600000e+01) #6, !dbg !100
  %359 = fadd float %358, 0x3EB0C6F7A0000000, !dbg !101
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !102
  %.not.i24 = icmp eq i32 %360, 0, !dbg !102
  br i1 %.not.i24, label %363, label %361, !dbg !102

361:                                              ; preds = %357
  %362 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %359), !dbg !102
  br label %__nv_rsqrtf.exit26, !dbg !102

363:                                              ; preds = %357
  %364 = tail call float @llvm.nvvm.rsqrt.approx.f(float %359), !dbg !102
  br label %__nv_rsqrtf.exit26, !dbg !102

__nv_rsqrtf.exit26:                               ; preds = %361, %363
  %.0.i25 = phi float [ %362, %361 ], [ %364, %363 ], !dbg !102
  %365 = or disjoint i32 %14, %219, !dbg !13
  %366 = icmp slt i32 %365, 1024, !dbg !14
  %367 = fmul float %.0.i25, 0x3F85555560000000, !dbg !79
  %368 = sext i32 %365 to i64, !dbg !103
  %369 = getelementptr float, ptr addrspace(1) %9, i64 %368, !dbg !103
  %370 = and i32 %15, 64, !dbg !104
  %371 = icmp eq i32 %370, 0, !dbg !104
  %372 = bitcast float %367 to i32, !dbg !104
  %373 = and i1 %371, %366, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %372, ptr addrspace(1) %369, i1 %373) #6, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py", directory: "inductor_cache/jx")
!4 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", linkageName: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 27, scope: !7)
!21 = !DILocation(line: 38, column: 54, scope: !7)
!22 = !DILocation(line: 39, column: 46, scope: !7)
!23 = !DILocation(line: 41, column: 49, scope: !7)
!24 = !DILocation(line: 41, column: 84, scope: !7)
!25 = !DILocation(line: 41, column: 66, scope: !7)
!26 = !DILocation(line: 41, column: 102, scope: !7)
!27 = !DILocation(line: 41, column: 44, scope: !7)
!28 = !DILocation(line: 41, column: 96, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 51, column: 62, scope: !7)
!31 = !DILocation(line: 35, column: 27, scope: !7)
!32 = !DILocation(line: 38, column: 48, scope: !7)
!33 = !DILocation(line: 38, column: 34, scope: !7)
!34 = !DILocation(line: 38, column: 59, scope: !7)
!35 = !DILocation(line: 39, column: 43, scope: !7)
!36 = !DILocation(line: 39, column: 38, scope: !7)
!37 = !DILocation(line: 40, column: 34, scope: !7)
!38 = !DILocation(line: 41, column: 107, scope: !7)
!39 = !DILocation(line: 41, column: 34, scope: !7)
!40 = !DILocation(line: 42, column: 34, scope: !7)
!41 = !DILocation(line: 39, column: 51, scope: !7)
!42 = !DILocation(line: 40, column: 39, scope: !7)
!43 = !DILocation(line: 41, column: 118, scope: !7)
!44 = !DILocation(line: 42, column: 39, scope: !7)
!45 = !DILocation(line: 43, column: 22, scope: !7)
!46 = !DILocation(line: 44, column: 22, scope: !7)
!47 = !DILocation(line: 45, column: 22, scope: !7)
!48 = !DILocation(line: 46, column: 22, scope: !7)
!49 = !DILocation(line: 49, column: 65, scope: !7)
!50 = !DILocation(line: 178, column: 7, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 49, column: 54, scope: !7)
!54 = !DILocation(line: 183, column: 24, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 184, column: 30, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 185, column: 34, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 185, column: 26, scope: !51, inlinedAt: !53)
!58 = !DILocation(line: 186, column: 39, scope: !51, inlinedAt: !53)
!59 = !DILocation(line: 186, column: 31, scope: !51, inlinedAt: !53)
!60 = !DILocation(line: 186, column: 22, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 52, column: 58, scope: !7)
!62 = !DILocation(line: 53, column: 66, scope: !7)
!63 = !DILocation(line: 54, column: 51, scope: !7)
!64 = !DILocation(line: 192, column: 21, scope: !65, inlinedAt: !66)
!65 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!66 = !DILocation(line: 56, column: 44, scope: !7)
!67 = !DILocation(line: 193, column: 28, scope: !65, inlinedAt: !66)
!68 = !DILocation(line: 194, column: 39, scope: !65, inlinedAt: !66)
!69 = !DILocation(line: 194, column: 60, scope: !65, inlinedAt: !66)
!70 = !DILocation(line: 194, column: 49, scope: !65, inlinedAt: !66)
!71 = !DILocation(line: 196, column: 25, scope: !65, inlinedAt: !66)
!72 = !DILocation(line: 196, column: 17, scope: !65, inlinedAt: !66)
!73 = !DILocation(line: 197, column: 15, scope: !65, inlinedAt: !66)
!74 = !DILocation(line: 197, column: 30, scope: !65, inlinedAt: !66)
!75 = !DILocation(line: 197, column: 38, scope: !65, inlinedAt: !66)
!76 = !DILocation(line: 197, column: 49, scope: !65, inlinedAt: !66)
!77 = !DILocation(line: 197, column: 22, scope: !65, inlinedAt: !66)
!78 = !DILocation(line: 204, column: 46, scope: !51, inlinedAt: !66)
!79 = !DILocation(line: 85, column: 20, scope: !7)
!80 = !DILocation(line: 70, column: 24, scope: !7)
!81 = !DILocation(line: 72, column: 24, scope: !7)
!82 = !DILocation(line: 73, column: 32, scope: !7)
!83 = !DILocation(line: 61, column: 36, scope: !7)
!84 = !DILocation(line: 62, column: 27, scope: !7)
!85 = !DILocation(line: 65, column: 44, scope: !7)
!86 = !DILocation(line: 65, column: 39, scope: !7)
!87 = !DILocation(line: 65, column: 52, scope: !7)
!88 = !DILocation(line: 66, column: 35, scope: !7)
!89 = !DILocation(line: 66, column: 40, scope: !7)
!90 = !DILocation(line: 67, column: 35, scope: !7)
!91 = !DILocation(line: 67, column: 40, scope: !7)
!92 = !DILocation(line: 68, column: 24, scope: !7)
!93 = !DILocation(line: 74, column: 24, scope: !7)
!94 = !DILocation(line: 75, column: 24, scope: !7)
!95 = !DILocation(line: 76, column: 24, scope: !7)
!96 = !DILocation(line: 77, column: 29, scope: !7)
!97 = !DILocation(line: 77, column: 49, scope: !7)
!98 = !DILocation(line: 78, column: 29, scope: !7)
!99 = !DILocation(line: 78, column: 49, scope: !7)
!100 = !DILocation(line: 80, column: 20, scope: !7)
!101 = !DILocation(line: 82, column: 20, scope: !7)
!102 = !DILocation(line: 83, column: 28, scope: !7)
!103 = !DILocation(line: 86, column: 25, scope: !7)
!104 = !DILocation(line: 86, column: 37, scope: !7)
!105 = !DILocation(line: 86, column: 4, scope: !7)
