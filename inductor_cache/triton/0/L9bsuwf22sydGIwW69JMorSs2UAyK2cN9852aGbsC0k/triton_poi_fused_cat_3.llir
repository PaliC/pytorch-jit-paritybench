; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, i32 %22) local_unnamed_addr !dbg !7 {
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 7, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %27 = and i32 %26, 127, !dbg !12
  %28 = or disjoint i32 %25, %27, !dbg !13
  %29 = icmp slt i32 %28, 1280, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %30 = sdiv i32 %.frozen, 16, !dbg !15
  %31 = srem i32 %30, 20, !dbg !16
  %32 = mul i32 %30, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %.frozen16 = freeze i32 %28, !dbg !18
  %33 = sdiv i32 %.frozen16, 320, !dbg !18
  %34 = icmp slt i32 %31, 4, !dbg !19
  %35 = mul i32 %33, 320, !dbg !20
  %srem.decomposed = sub i32 %.frozen16, %35, !dbg !20
  %36 = shl nsw i32 %33, 6, !dbg !21
  %37 = add nsw i32 %36, %srem.decomposed, !dbg !22
  %38 = sext i32 %37 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = and i1 %29, %34, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40) #3, !dbg !25
  %42 = sext i32 %31 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %40, i32 0, i1 %40) #3, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %40, i32 0, i1 %40) #3, !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = fadd float %47, 0x3EE4F8B580000000, !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %49, 0, !dbg !31
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %50, 0, !dbg !31
  br i1 %.not.i, label %56, label %51, !dbg !31

51:                                               ; preds = %23
  br i1 %.not1.i, label %54, label %52, !dbg !31

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

56:                                               ; preds = %23
  br i1 %.not1.i, label %59, label %57, !dbg !31

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !31
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !33
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %40, i32 0, i1 %40) #3, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %40, i32 0, i1 %40) #3, !dbg !36
  %66 = and i32 %31, -4, !dbg !37
  %67 = icmp eq i32 %66, 4, !dbg !37
  %68 = add nsw i32 %31, -4, !dbg !38
  %69 = shl nsw i32 %68, 4, !dbg !39
  %70 = add nsw i32 %36, %.decomposed, !dbg !40
  %71 = add nsw i32 %70, %69, !dbg !41
  %72 = sext i32 %71 to i64, !dbg !42
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !42
  %74 = and i1 %29, %67, !dbg !43
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %74, i32 0, i1 %74) #3, !dbg !44
  %76 = sext i32 %68 to i64, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %76, !dbg !45
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %74, i32 0, i1 %74) #3, !dbg !46
  %79 = getelementptr float, ptr addrspace(1) %7, i64 %76, !dbg !47
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %74, i32 0, i1 %74) #3, !dbg !48
  %81 = bitcast i32 %80 to float, !dbg !48
  %82 = fadd float %81, 0x3EE4F8B580000000, !dbg !49
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %83, 0, !dbg !50
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !50
  br i1 %.not.i1, label %90, label %85, !dbg !50

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !50

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !50

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !50
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %76, !dbg !52
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %74, i32 0, i1 %74) #3, !dbg !53
  %98 = getelementptr float, ptr addrspace(1) %9, i64 %76, !dbg !54
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %74, i32 0, i1 %74) #3, !dbg !55
  %100 = icmp eq i32 %66, 8, !dbg !56
  %101 = add nsw i32 %31, -8, !dbg !57
  %102 = shl nsw i32 %101, 4, !dbg !58
  %103 = add nsw i32 %70, %102, !dbg !59
  %104 = sext i32 %103 to i64, !dbg !60
  %105 = getelementptr float, ptr addrspace(1) %10, i64 %104, !dbg !60
  %106 = and i1 %29, %100, !dbg !61
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %106, i32 0, i1 %106) #3, !dbg !62
  %108 = sext i32 %101 to i64, !dbg !63
  %109 = getelementptr float, ptr addrspace(1) %11, i64 %108, !dbg !63
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %106, i32 0, i1 %106) #3, !dbg !64
  %111 = getelementptr float, ptr addrspace(1) %12, i64 %108, !dbg !65
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %106, i32 0, i1 %106) #3, !dbg !66
  %113 = bitcast i32 %112 to float, !dbg !66
  %114 = fadd float %113, 0x3EE4F8B580000000, !dbg !67
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i6 = icmp eq i32 %115, 0, !dbg !68
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i9 = icmp eq i32 %116, 0, !dbg !68
  br i1 %.not.i6, label %122, label %117, !dbg !68

117:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %120, label %118, !dbg !68

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !68

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

__nv_sqrtf.exit10:                                ; preds = %118, %120, %123, %125
  %.0.i8 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !68
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !69
  %128 = getelementptr float, ptr addrspace(1) %13, i64 %108, !dbg !70
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %106, i32 0, i1 %106) #3, !dbg !71
  %130 = getelementptr float, ptr addrspace(1) %14, i64 %108, !dbg !72
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %106, i32 0, i1 %106) #3, !dbg !73
  %132 = icmp eq i32 %66, 12, !dbg !74
  %133 = add nsw i32 %31, -12, !dbg !75
  %134 = shl nsw i32 %133, 4, !dbg !76
  %135 = add nsw i32 %70, %134, !dbg !77
  %136 = sext i32 %135 to i64, !dbg !78
  %137 = getelementptr float, ptr addrspace(1) %15, i64 %136, !dbg !78
  %138 = and i1 %29, %132, !dbg !79
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %138, i32 0, i1 %138) #3, !dbg !80
  %140 = sext i32 %133 to i64, !dbg !81
  %141 = getelementptr float, ptr addrspace(1) %16, i64 %140, !dbg !81
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %138, i32 0, i1 %138) #3, !dbg !82
  %143 = getelementptr float, ptr addrspace(1) %17, i64 %140, !dbg !83
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %138, i32 0, i1 %138) #3, !dbg !84
  %145 = bitcast i32 %144 to float, !dbg !84
  %146 = fadd float %145, 0x3EE4F8B580000000, !dbg !85
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !86
  %.not.i11 = icmp eq i32 %147, 0, !dbg !86
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !86
  %.not1.i14 = icmp eq i32 %148, 0, !dbg !86
  br i1 %.not.i11, label %154, label %149, !dbg !86

149:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %152, label %150, !dbg !86

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit15, !dbg !86

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit15, !dbg !86

154:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %157, label %155, !dbg !86

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit15, !dbg !86

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit15, !dbg !86

__nv_sqrtf.exit15:                                ; preds = %150, %152, %155, %157
  %.0.i13 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !86
  %159 = bitcast i32 %139 to float, !dbg !80
  %160 = bitcast i32 %142 to float, !dbg !82
  %161 = fsub float %159, %160, !dbg !87
  %162 = bitcast i32 %107 to float, !dbg !62
  %163 = bitcast i32 %110 to float, !dbg !64
  %164 = fsub float %162, %163, !dbg !88
  %165 = fmul float %164, %127, !dbg !89
  %166 = bitcast i32 %129 to float, !dbg !71
  %167 = fmul float %165, %166, !dbg !90
  %168 = bitcast i32 %131 to float, !dbg !73
  %169 = fadd float %167, %168, !dbg !91
  %170 = bitcast i32 %75 to float, !dbg !44
  %171 = bitcast i32 %78 to float, !dbg !46
  %172 = fsub float %170, %171, !dbg !92
  %173 = fmul float %172, %95, !dbg !93
  %174 = bitcast i32 %97 to float, !dbg !53
  %175 = fmul float %173, %174, !dbg !94
  %176 = bitcast i32 %99 to float, !dbg !55
  %177 = fadd float %175, %176, !dbg !95
  %178 = bitcast i32 %41 to float, !dbg !25
  %179 = bitcast i32 %44 to float, !dbg !27
  %180 = fsub float %178, %179, !dbg !96
  %181 = fmul float %180, %61, !dbg !97
  %182 = bitcast i32 %63 to float, !dbg !34
  %183 = fmul float %181, %182, !dbg !98
  %184 = bitcast i32 %65 to float, !dbg !36
  %185 = fadd float %183, %184, !dbg !99
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !100
  %187 = fmul float %161, %186, !dbg !101
  %188 = getelementptr float, ptr addrspace(1) %18, i64 %140, !dbg !102
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %138, i32 0, i1 %138) #3, !dbg !103
  %190 = bitcast i32 %189 to float, !dbg !103
  %191 = fmul float %187, %190, !dbg !104
  %192 = getelementptr float, ptr addrspace(1) %19, i64 %140, !dbg !105
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %138, i32 0, i1 %138) #3, !dbg !106
  %194 = bitcast i32 %193 to float, !dbg !106
  %195 = fadd float %191, %194, !dbg !107
  %196 = icmp sgt i32 %31, 15, !dbg !108
  %197 = shl nsw i32 %33, 2, !dbg !109
  %198 = add nsw i32 %31, -16, !dbg !110
  %199 = add nsw i32 %198, %197, !dbg !111
  %200 = sext i32 %199 to i64, !dbg !112
  %201 = getelementptr float, ptr addrspace(1) %20, i64 %200, !dbg !112
  %202 = and i1 %29, %196, !dbg !113
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %202, i32 0, i1 %202) #3, !dbg !114
  %204 = bitcast i32 %203 to float, !dbg !114
  %205 = select i1 %132, float %195, float %204, !dbg !115
  %206 = select i1 %100, float %169, float %205, !dbg !115
  %207 = select i1 %67, float %177, float %206, !dbg !115
  %208 = select i1 %34, float %185, float %207, !dbg !115
  %209 = sext i32 %28 to i64, !dbg !116
  %210 = getelementptr float, ptr addrspace(1) %21, i64 %209, !dbg !116
  %211 = bitcast float %208 to i32, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %210, i1 %29) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz4b3owndgnezv4enxfqnwq4zokeykohkqentpiof3hji7pcxfag.py", directory: "inductor_cache/z4")
!4 = !{ptr @triton_poi_fused_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_3", linkageName: "triton_poi_fused_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 27, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 54, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 47, scope: !7)
!39 = !DILocation(line: 55, column: 40, scope: !7)
!40 = !DILocation(line: 55, column: 36, scope: !7)
!41 = !DILocation(line: 55, column: 53, scope: !7)
!42 = !DILocation(line: 55, column: 31, scope: !7)
!43 = !DILocation(line: 55, column: 69, scope: !7)
!44 = !DILocation(line: 55, column: 61, scope: !7)
!45 = !DILocation(line: 56, column: 31, scope: !7)
!46 = !DILocation(line: 56, column: 43, scope: !7)
!47 = !DILocation(line: 58, column: 31, scope: !7)
!48 = !DILocation(line: 58, column: 43, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 27, scope: !7)
!51 = !DILocation(line: 63, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 31, scope: !7)
!53 = !DILocation(line: 67, column: 43, scope: !7)
!54 = !DILocation(line: 69, column: 31, scope: !7)
!55 = !DILocation(line: 69, column: 43, scope: !7)
!56 = !DILocation(line: 76, column: 20, scope: !7)
!57 = !DILocation(line: 77, column: 48, scope: !7)
!58 = !DILocation(line: 77, column: 41, scope: !7)
!59 = !DILocation(line: 77, column: 54, scope: !7)
!60 = !DILocation(line: 77, column: 32, scope: !7)
!61 = !DILocation(line: 77, column: 70, scope: !7)
!62 = !DILocation(line: 77, column: 62, scope: !7)
!63 = !DILocation(line: 78, column: 32, scope: !7)
!64 = !DILocation(line: 78, column: 44, scope: !7)
!65 = !DILocation(line: 80, column: 32, scope: !7)
!66 = !DILocation(line: 80, column: 44, scope: !7)
!67 = !DILocation(line: 82, column: 20, scope: !7)
!68 = !DILocation(line: 83, column: 27, scope: !7)
!69 = !DILocation(line: 85, column: 20, scope: !7)
!70 = !DILocation(line: 89, column: 32, scope: !7)
!71 = !DILocation(line: 89, column: 44, scope: !7)
!72 = !DILocation(line: 91, column: 32, scope: !7)
!73 = !DILocation(line: 91, column: 44, scope: !7)
!74 = !DILocation(line: 98, column: 20, scope: !7)
!75 = !DILocation(line: 99, column: 49, scope: !7)
!76 = !DILocation(line: 99, column: 41, scope: !7)
!77 = !DILocation(line: 99, column: 55, scope: !7)
!78 = !DILocation(line: 99, column: 32, scope: !7)
!79 = !DILocation(line: 99, column: 71, scope: !7)
!80 = !DILocation(line: 99, column: 63, scope: !7)
!81 = !DILocation(line: 100, column: 32, scope: !7)
!82 = !DILocation(line: 100, column: 45, scope: !7)
!83 = !DILocation(line: 102, column: 32, scope: !7)
!84 = !DILocation(line: 102, column: 45, scope: !7)
!85 = !DILocation(line: 104, column: 20, scope: !7)
!86 = !DILocation(line: 105, column: 27, scope: !7)
!87 = !DILocation(line: 101, column: 20, scope: !7)
!88 = !DILocation(line: 79, column: 20, scope: !7)
!89 = !DILocation(line: 88, column: 20, scope: !7)
!90 = !DILocation(line: 90, column: 20, scope: !7)
!91 = !DILocation(line: 92, column: 20, scope: !7)
!92 = !DILocation(line: 57, column: 20, scope: !7)
!93 = !DILocation(line: 66, column: 20, scope: !7)
!94 = !DILocation(line: 68, column: 20, scope: !7)
!95 = !DILocation(line: 70, column: 20, scope: !7)
!96 = !DILocation(line: 35, column: 18, scope: !7)
!97 = !DILocation(line: 44, column: 19, scope: !7)
!98 = !DILocation(line: 46, column: 20, scope: !7)
!99 = !DILocation(line: 48, column: 20, scope: !7)
!100 = !DILocation(line: 107, column: 20, scope: !7)
!101 = !DILocation(line: 110, column: 20, scope: !7)
!102 = !DILocation(line: 111, column: 32, scope: !7)
!103 = !DILocation(line: 111, column: 45, scope: !7)
!104 = !DILocation(line: 112, column: 20, scope: !7)
!105 = !DILocation(line: 113, column: 32, scope: !7)
!106 = !DILocation(line: 113, column: 45, scope: !7)
!107 = !DILocation(line: 114, column: 20, scope: !7)
!108 = !DILocation(line: 117, column: 20, scope: !7)
!109 = !DILocation(line: 120, column: 34, scope: !7)
!110 = !DILocation(line: 120, column: 48, scope: !7)
!111 = !DILocation(line: 120, column: 40, scope: !7)
!112 = !DILocation(line: 120, column: 32, scope: !7)
!113 = !DILocation(line: 120, column: 62, scope: !7)
!114 = !DILocation(line: 120, column: 54, scope: !7)
!115 = !DILocation(line: 0, scope: !7)
!116 = !DILocation(line: 125, column: 25, scope: !7)
!117 = !DILocation(line: 125, column: 37, scope: !7)
!118 = !DILocation(line: 125, column: 4, scope: !7)
