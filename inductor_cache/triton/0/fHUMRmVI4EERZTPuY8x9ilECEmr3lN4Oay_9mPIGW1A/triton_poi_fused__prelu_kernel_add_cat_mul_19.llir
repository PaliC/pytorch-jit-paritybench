; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__prelu_kernel_add_cat_mul_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = or disjoint i32 %8, %15, !dbg !13
  %21 = srem i32 %16, 64, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %22 = sdiv i32 %.frozen, 64, !dbg !15
  %23 = mul i32 %22, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %23, !dbg !14
  %.frozen1 = freeze i32 %18, !dbg !15
  %24 = sdiv i32 %.frozen1, 64, !dbg !15
  %25 = mul i32 %24, 64, !dbg !14
  %.decomposed2 = sub i32 %.frozen1, %25, !dbg !14
  %.frozen3 = freeze i32 %19, !dbg !15
  %26 = sdiv i32 %.frozen3, 64, !dbg !15
  %27 = mul i32 %26, 64, !dbg !14
  %.decomposed4 = sub i32 %.frozen3, %27, !dbg !14
  %.frozen5 = freeze i32 %20, !dbg !15
  %28 = sdiv i32 %.frozen5, 64, !dbg !15
  %29 = mul i32 %28, 64, !dbg !14
  %.decomposed6 = sub i32 %.frozen5, %29, !dbg !14
  %30 = sdiv i32 %16, 16384, !dbg !16
  %31 = sext i32 %16 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %38 = bitcast i32 %34 to float, !dbg !18
  %39 = bitcast i32 %35 to float, !dbg !18
  %40 = bitcast i32 %36 to float, !dbg !18
  %41 = bitcast i32 %37 to float, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = bitcast i32 %45 to float, !dbg !20
  %50 = bitcast i32 %46 to float, !dbg !20
  %51 = bitcast i32 %47 to float, !dbg !20
  %52 = sext i32 %21 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !21
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !22
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !22
  %59 = bitcast i32 %55 to float, !dbg !22
  %60 = bitcast i32 %56 to float, !dbg !22
  %61 = bitcast i32 %57 to float, !dbg !22
  %62 = bitcast i32 %58 to float, !dbg !22
  %63 = shl nsw i32 %30, 6, !dbg !23
  %64 = add nsw i32 %63, %21, !dbg !24
  %65 = sext i32 %64 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = fcmp ogt float %48, 0.000000e+00, !dbg !27
  %77 = fcmp ogt float %49, 0.000000e+00, !dbg !27
  %78 = fcmp ogt float %50, 0.000000e+00, !dbg !27
  %79 = fcmp ogt float %51, 0.000000e+00, !dbg !27
  %80 = fmul float %48, %59, !dbg !28
  %81 = fmul float %49, %60, !dbg !28
  %82 = fmul float %50, %61, !dbg !28
  %83 = fmul float %51, %62, !dbg !28
  %84 = select i1 %76, float %48, float %80, !dbg !29
  %85 = select i1 %77, float %49, float %81, !dbg !29
  %86 = select i1 %78, float %50, float %82, !dbg !29
  %87 = select i1 %79, float %51, float %83, !dbg !29
  %88 = fsub float 0.000000e+00, %72, !dbg !30
  %89 = fsub float 0.000000e+00, %73, !dbg !30
  %90 = fsub float 0.000000e+00, %74, !dbg !30
  %91 = fsub float 0.000000e+00, %75, !dbg !30
  %92 = fmul float %88, 0x3FF7154760000000, !dbg !34
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #2, !dbg !34
  %94 = fmul float %89, 0x3FF7154760000000, !dbg !34
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #2, !dbg !34
  %96 = fmul float %90, 0x3FF7154760000000, !dbg !34
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #2, !dbg !34
  %98 = fmul float %91, 0x3FF7154760000000, !dbg !34
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #2, !dbg !34
  %100 = fadd float %93, 1.000000e+00, !dbg !35
  %101 = fadd float %95, 1.000000e+00, !dbg !35
  %102 = fadd float %97, 1.000000e+00, !dbg !35
  %103 = fadd float %99, 1.000000e+00, !dbg !35
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %100) #2, !dbg !36
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %101) #2, !dbg !36
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %102) #2, !dbg !36
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %103) #2, !dbg !36
  %108 = fmul float %84, %104, !dbg !37
  %109 = fmul float %85, %105, !dbg !37
  %110 = fmul float %86, %106, !dbg !37
  %111 = fmul float %87, %107, !dbg !37
  %112 = fadd float %108, %38, !dbg !38
  %113 = fadd float %109, %39, !dbg !38
  %114 = fadd float %110, %40, !dbg !38
  %115 = fadd float %111, %41, !dbg !38
  %116 = bitcast float %112 to i32, !dbg !39
  %117 = bitcast float %113 to i32, !dbg !39
  %118 = bitcast float %114 to i32, !dbg !39
  %119 = bitcast float %115 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %116, i32 %117, i32 %118, i32 %119, ptr addrspace(1) %42, i1 true) #2, !dbg !39
  %120 = mul i32 %22, 129, !dbg !40
  %121 = mul i32 %24, 129, !dbg !40
  %122 = mul i32 %26, 129, !dbg !40
  %123 = mul i32 %28, 129, !dbg !40
  %124 = add i32 %120, %.decomposed, !dbg !41
  %125 = add i32 %121, %.decomposed2, !dbg !41
  %126 = add i32 %122, %.decomposed4, !dbg !41
  %127 = add i32 %123, %.decomposed6, !dbg !41
  %128 = sext i32 %124 to i64, !dbg !42
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %128, !dbg !42
  %130 = sext i32 %125 to i64, !dbg !42
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !42
  %132 = sext i32 %126 to i64, !dbg !42
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %132, !dbg !42
  %134 = sext i32 %127 to i64, !dbg !42
  %135 = getelementptr float, ptr addrspace(1) %4, i64 %134, !dbg !42
  %136 = zext nneg i32 %11 to i64, !dbg !43
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %137, i32 %34, i32 %35, i32 %36, i32 %37, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %138 = zext nneg i32 %12 to i64, !dbg !43
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !43
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !43
  %141 = zext nneg i32 %13 to i64, !dbg !43
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %141, !dbg !43
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !43
  %144 = zext nneg i32 %14 to i64, !dbg !43
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !43
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !43
  %147 = zext nneg i32 %15 to i64, !dbg !43
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !43
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %129, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %131, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %133, i1 true) #2, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %135, i1 true) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnhpbslbcp3owelra62gaspao6tugipqn6zzpjmqxeuxqnkt5o6c.py", directory: "inductor_cache/nh")
!4 = !{ptr @triton_poi_fused__prelu_kernel_add_cat_mul_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_add_cat_mul_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_add_cat_mul_19", linkageName: "triton_poi_fused__prelu_kernel_add_cat_mul_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 38, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 32, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 36, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 19, scope: !7)
!39 = !DILocation(line: 39, column: 40, scope: !7)
!40 = !DILocation(line: 40, column: 34, scope: !7)
!41 = !DILocation(line: 40, column: 30, scope: !7)
!42 = !DILocation(line: 40, column: 25, scope: !7)
!43 = !DILocation(line: 40, column: 45, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
