; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_relu_sigmoid_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 16, !dbg !14
  %15 = sext i32 %13 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = sext i32 %14 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = fsub float 0.000000e+00, %35, !dbg !25
  %49 = fsub float 0.000000e+00, %37, !dbg !25
  %50 = fsub float 0.000000e+00, %39, !dbg !25
  %51 = fsub float 0.000000e+00, %41, !dbg !25
  %52 = fmul float %48, 0x3FF7154760000000, !dbg !29
  %53 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %52) #1, !dbg !29
  %54 = fmul float %49, 0x3FF7154760000000, !dbg !29
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #1, !dbg !29
  %56 = fmul float %50, 0x3FF7154760000000, !dbg !29
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #1, !dbg !29
  %58 = fmul float %51, 0x3FF7154760000000, !dbg !29
  %59 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %58) #1, !dbg !29
  %60 = fadd float %53, 1.000000e+00, !dbg !30
  %61 = fadd float %55, 1.000000e+00, !dbg !30
  %62 = fadd float %57, 1.000000e+00, !dbg !30
  %63 = fadd float %59, 1.000000e+00, !dbg !30
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %60) #1, !dbg !31
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %61) #1, !dbg !31
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %62) #1, !dbg !31
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %63) #1, !dbg !31
  %68 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !16
  %69 = insertelement <4 x i32> %68, i32 %20, i64 1, !dbg !16
  %70 = insertelement <4 x i32> %69, i32 %19, i64 2, !dbg !16
  %71 = insertelement <4 x i32> %70, i32 %18, i64 3, !dbg !16
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !16
  %73 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !18
  %74 = insertelement <4 x i32> %73, i32 %26, i64 1, !dbg !18
  %75 = insertelement <4 x i32> %74, i32 %25, i64 2, !dbg !18
  %76 = insertelement <4 x i32> %75, i32 %24, i64 3, !dbg !18
  %77 = bitcast <4 x i32> %76 to <4 x float>, !dbg !18
  %78 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !20
  %79 = insertelement <4 x i32> %78, i32 %31, i64 1, !dbg !20
  %80 = insertelement <4 x i32> %79, i32 %30, i64 2, !dbg !20
  %81 = insertelement <4 x i32> %80, i32 %29, i64 3, !dbg !20
  %82 = bitcast <4 x i32> %81 to <4 x float>, !dbg !20
  %83 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !24
  %84 = insertelement <4 x i32> %83, i32 %46, i64 1, !dbg !24
  %85 = insertelement <4 x i32> %84, i32 %45, i64 2, !dbg !24
  %86 = insertelement <4 x i32> %85, i32 %44, i64 3, !dbg !24
  %87 = bitcast <4 x i32> %86 to <4 x float>, !dbg !24
  %88 = fsub <4 x float> %72, %77, !dbg !32
  %89 = fmul <4 x float> %88, %82, !dbg !33
  %90 = insertelement <4 x float> poison, float %67, i64 0, !dbg !34
  %91 = insertelement <4 x float> %90, float %66, i64 1, !dbg !34
  %92 = insertelement <4 x float> %91, float %65, i64 2, !dbg !34
  %93 = insertelement <4 x float> %92, float %64, i64 3, !dbg !34
  %94 = fmul <4 x float> %89, %93, !dbg !34
  %95 = fadd <4 x float> %94, %87, !dbg !35
  %96 = fcmp olt <4 x float> %95, zeroinitializer, !dbg !36
  %97 = extractelement <4 x i1> %96, i64 3, !dbg !40
  %98 = extractelement <4 x i1> %96, i64 2, !dbg !40
  %99 = extractelement <4 x i1> %96, i64 1, !dbg !40
  %100 = extractelement <4 x i1> %96, i64 0, !dbg !40
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %15, !dbg !41
  %bc = bitcast <4 x float> %95 to <4 x i32>, !dbg !42
  %102 = extractelement <4 x i32> %bc, i64 3, !dbg !42
  %103 = select i1 %97, i32 0, i32 %102, !dbg !40
  %bc1 = bitcast <4 x float> %95 to <4 x i32>, !dbg !42
  %104 = extractelement <4 x i32> %bc1, i64 2, !dbg !42
  %105 = select i1 %98, i32 0, i32 %104, !dbg !40
  %bc2 = bitcast <4 x float> %95 to <4 x i32>, !dbg !42
  %106 = extractelement <4 x i32> %bc2, i64 1, !dbg !42
  %107 = select i1 %99, i32 0, i32 %106, !dbg !40
  %bc3 = bitcast <4 x float> %95 to <4 x i32>, !dbg !42
  %108 = extractelement <4 x i32> %bc3, i64 0, !dbg !42
  %109 = select i1 %100, i32 0, i32 %108, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %103, i32 %105, i32 %107, i32 %109, ptr addrspace(1) %101, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbod63rztndgjfcigaycvmmngr34p4z7wkdg6q25yftvxc6ihayt.py", directory: "inductor_cache/bo")
!4 = !{ptr @triton_poi_fused_add_mul_relu_sigmoid_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_relu_sigmoid_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_relu_sigmoid_35", linkageName: "triton_poi_fused_add_mul_relu_sigmoid_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 47, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 33, column: 22, scope: !7)
!29 = !DILocation(line: 47, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 47, column: 20, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 47, column: 16, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 31, column: 18, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 38, column: 25, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 38, column: 4, scope: !7)
