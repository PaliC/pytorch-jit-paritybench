; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 38440, !dbg !14
  %13 = sdiv i32 %10, 31, !dbg !15
  %14 = sdiv i32 %11, 31, !dbg !15
  %15 = sdiv i32 %10, 961, !dbg !16
  %16 = sdiv i32 %11, 961, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %17 = sdiv i32 %.frozen, 9610, !dbg !17
  %18 = mul i32 %17, 9610, !dbg !18
  %.decomposed = sub i32 %.frozen, %18, !dbg !18
  %19 = mul i32 %15, 3872, !dbg !19
  %20 = mul i32 %16, 3872, !dbg !19
  %21 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !20
  %22 = insertelement <2 x i32> %21, i32 %13, i64 1, !dbg !20
  %23 = srem <2 x i32> %22, splat (i32 31), !dbg !20
  %24 = extractelement <2 x i32> %23, i64 1, !dbg !21
  %25 = icmp sgt i32 %24, -1, !dbg !22
  %26 = extractelement <2 x i32> %23, i64 0, !dbg !21
  %27 = shl nsw i32 %26, 1, !dbg !23
  %28 = icmp sgt i32 %26, -1, !dbg !24
  %29 = or i32 %24, %26, !dbg !21
  %30 = icmp sgt i32 %29, -1, !dbg !21
  %31 = mul nsw i32 %24, 124, !dbg !25
  %32 = add i32 %31, %19, !dbg !26
  %33 = add i32 %32, %27, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = and i1 %12, %30, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %36, i32 -8388608, i1 %36) #1, !dbg !30
  %38 = or disjoint i32 %32, 1, !dbg !31
  %39 = add i32 %38, %27, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !33
  %42 = add nsw <2 x i32> %23, splat (i32 1), !dbg !34
  %43 = icmp ult <2 x i32> %42, splat (i32 31), !dbg !34
  %44 = extractelement <2 x i1> %43, i64 0, !dbg !35
  %45 = and i1 %25, %44, !dbg !35
  %46 = or disjoint i32 %32, 2, !dbg !36
  %47 = add i32 %46, %27, !dbg !37
  %48 = sext i32 %47 to i64, !dbg !38
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !38
  %50 = and i1 %12, %45, !dbg !39
  %51 = add i32 %32, 62, !dbg !40
  %52 = add i32 %51, %27, !dbg !41
  %53 = sext i32 %52 to i64, !dbg !42
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !42
  %55 = add i32 %32, 63, !dbg !43
  %56 = add i32 %55, %27, !dbg !44
  %57 = sext i32 %56 to i64, !dbg !45
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !45
  %59 = add i32 %32, 64, !dbg !46
  %60 = add i32 %59, %27, !dbg !47
  %61 = sext i32 %60 to i64, !dbg !48
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !48
  %63 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !20
  %64 = insertelement <2 x i32> %63, i32 %14, i64 1, !dbg !20
  %65 = srem <2 x i32> %64, splat (i32 31), !dbg !20
  %66 = extractelement <2 x i32> %65, i64 1, !dbg !21
  %67 = icmp sgt i32 %66, -1, !dbg !22
  %68 = extractelement <2 x i32> %65, i64 0, !dbg !21
  %69 = shl nsw i32 %68, 1, !dbg !23
  %70 = icmp sgt i32 %68, -1, !dbg !24
  %71 = or i32 %66, %68, !dbg !21
  %72 = icmp sgt i32 %71, -1, !dbg !21
  %73 = mul nsw i32 %66, 124, !dbg !25
  %74 = add i32 %73, %20, !dbg !26
  %75 = add i32 %74, %69, !dbg !27
  %76 = sext i32 %75 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !28
  %78 = and i1 %72, %12, !dbg !29
  %79 = or disjoint i32 %74, 1, !dbg !31
  %80 = add i32 %79, %69, !dbg !32
  %81 = sext i32 %80 to i64, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !33
  %83 = add nsw <2 x i32> %65, splat (i32 1), !dbg !34
  %84 = icmp ult <2 x i32> %83, splat (i32 31), !dbg !34
  %85 = extractelement <2 x i1> %84, i64 0, !dbg !35
  %86 = and i1 %67, %85, !dbg !35
  %87 = or disjoint i32 %74, 2, !dbg !36
  %88 = add i32 %87, %69, !dbg !37
  %89 = sext i32 %88 to i64, !dbg !38
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !38
  %91 = and i1 %86, %12, !dbg !39
  %92 = add i32 %74, 62, !dbg !40
  %93 = add i32 %92, %69, !dbg !41
  %94 = sext i32 %93 to i64, !dbg !42
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !42
  %96 = add i32 %74, 63, !dbg !43
  %97 = add i32 %96, %69, !dbg !44
  %98 = sext i32 %97 to i64, !dbg !45
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !45
  %100 = add i32 %74, 64, !dbg !46
  %101 = add i32 %100, %69, !dbg !47
  %102 = sext i32 %101 to i64, !dbg !48
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !48
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %78, i32 -8388608, i1 %78) #1, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 -8388608, i1 %36) #1, !dbg !49
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %78, i32 -8388608, i1 %78) #1, !dbg !49
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 -8388608, i1 %50) #1, !dbg !50
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %91, i32 -8388608, i1 %91) #1, !dbg !50
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %36, i32 -8388608, i1 %36) #1, !dbg !51
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %78, i32 -8388608, i1 %78) #1, !dbg !51
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %36, i32 -8388608, i1 %36) #1, !dbg !52
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %78, i32 -8388608, i1 %78) #1, !dbg !52
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %50, i32 -8388608, i1 %50) #1, !dbg !53
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %91, i32 -8388608, i1 %91) #1, !dbg !53
  %115 = extractelement <2 x i1> %43, i64 1, !dbg !54
  %116 = and i1 %28, %115, !dbg !54
  %117 = extractelement <2 x i1> %84, i64 1, !dbg !54
  %118 = and i1 %70, %117, !dbg !54
  %119 = add i32 %32, 124, !dbg !55
  %120 = add i32 %119, %27, !dbg !56
  %121 = add i32 %74, 124, !dbg !55
  %122 = add i32 %121, %69, !dbg !56
  %123 = sext i32 %120 to i64, !dbg !57
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !57
  %125 = sext i32 %122 to i64, !dbg !57
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !57
  %127 = and i1 %12, %116, !dbg !58
  %128 = and i1 %118, %12, !dbg !58
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %127, i32 -8388608, i1 %127) #1, !dbg !59
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %128, i32 -8388608, i1 %128) #1, !dbg !59
  %131 = add i32 %32, 125, !dbg !60
  %132 = add i32 %131, %27, !dbg !61
  %133 = add i32 %74, 125, !dbg !60
  %134 = add i32 %133, %69, !dbg !61
  %135 = sext i32 %132 to i64, !dbg !62
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !62
  %137 = sext i32 %134 to i64, !dbg !62
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !62
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %127, i32 -8388608, i1 %127) #1, !dbg !63
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %128, i32 -8388608, i1 %128) #1, !dbg !63
  %141 = and i1 %44, %115, !dbg !64
  %142 = and i1 %85, %117, !dbg !64
  %143 = add i32 %32, 126, !dbg !65
  %144 = add i32 %143, %27, !dbg !66
  %145 = add i32 %74, 126, !dbg !65
  %146 = add i32 %145, %69, !dbg !66
  %147 = sext i32 %144 to i64, !dbg !67
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !67
  %149 = sext i32 %146 to i64, !dbg !67
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !67
  %151 = and i1 %12, %141, !dbg !68
  %152 = and i1 %142, %12, !dbg !68
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %151, i32 -8388608, i1 %151) #1, !dbg !69
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %152, i32 -8388608, i1 %152) #1, !dbg !69
  %155 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !30
  %156 = insertelement <2 x i32> %155, i32 %104, i64 1, !dbg !30
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !30
  %158 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !49
  %159 = insertelement <2 x i32> %158, i32 %106, i64 1, !dbg !49
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !49
  %161 = fcmp ogt <2 x float> %160, %157, !dbg !70
  %162 = fcmp uno <2 x float> %160, zeroinitializer, !dbg !74
  %163 = or <2 x i1> %161, %162, !dbg !75
  %.v = select <2 x i1> %163, <2 x i32> %159, <2 x i32> %156, !dbg !76
  %164 = bitcast <2 x i32> %.v to <2 x float>, !dbg !76
  %165 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !50
  %166 = insertelement <2 x i32> %165, i32 %108, i64 1, !dbg !50
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !50
  %168 = fcmp olt <2 x float> %164, %167, !dbg !77
  %169 = fcmp uno <2 x float> %167, zeroinitializer, !dbg !79
  %170 = or <2 x i1> %169, %168, !dbg !80
  %.v1 = select <2 x i1> %170, <2 x i32> %166, <2 x i32> %.v, !dbg !81
  %171 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !81
  %172 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !51
  %173 = insertelement <2 x i32> %172, i32 %110, i64 1, !dbg !51
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !51
  %175 = fcmp olt <2 x float> %171, %174, !dbg !82
  %176 = fcmp uno <2 x float> %174, zeroinitializer, !dbg !84
  %177 = or <2 x i1> %176, %175, !dbg !85
  %.v2 = select <2 x i1> %177, <2 x i32> %173, <2 x i32> %.v1, !dbg !86
  %178 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !86
  %179 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !52
  %180 = insertelement <2 x i32> %179, i32 %112, i64 1, !dbg !52
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !52
  %182 = fcmp olt <2 x float> %178, %181, !dbg !87
  %183 = fcmp uno <2 x float> %181, zeroinitializer, !dbg !89
  %184 = or <2 x i1> %183, %182, !dbg !90
  %.v3 = select <2 x i1> %184, <2 x i32> %180, <2 x i32> %.v2, !dbg !91
  %185 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !91
  %186 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !53
  %187 = insertelement <2 x i32> %186, i32 %114, i64 1, !dbg !53
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !53
  %189 = fcmp olt <2 x float> %185, %188, !dbg !92
  %190 = fcmp uno <2 x float> %188, zeroinitializer, !dbg !94
  %191 = or <2 x i1> %190, %189, !dbg !95
  %.v4 = select <2 x i1> %191, <2 x i32> %187, <2 x i32> %.v3, !dbg !96
  %192 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !96
  %193 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !59
  %194 = insertelement <2 x i32> %193, i32 %130, i64 1, !dbg !59
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !59
  %196 = fcmp olt <2 x float> %192, %195, !dbg !97
  %197 = fcmp uno <2 x float> %195, zeroinitializer, !dbg !99
  %198 = or <2 x i1> %197, %196, !dbg !100
  %.v5 = select <2 x i1> %198, <2 x i32> %194, <2 x i32> %.v4, !dbg !101
  %199 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !101
  %200 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !63
  %201 = insertelement <2 x i32> %200, i32 %140, i64 1, !dbg !63
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !63
  %203 = fcmp olt <2 x float> %199, %202, !dbg !102
  %204 = fcmp uno <2 x float> %202, zeroinitializer, !dbg !104
  %205 = or <2 x i1> %204, %203, !dbg !105
  %.v6 = select <2 x i1> %205, <2 x i32> %201, <2 x i32> %.v5, !dbg !106
  %206 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !106
  %207 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !69
  %208 = insertelement <2 x i32> %207, i32 %154, i64 1, !dbg !69
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !69
  %210 = fcmp olt <2 x float> %206, %209, !dbg !107
  %211 = bitcast i32 %153 to float, !dbg !109
  %212 = fcmp uno float %211, 0.000000e+00, !dbg !109
  %213 = bitcast i32 %154 to float, !dbg !109
  %214 = fcmp uno float %213, 0.000000e+00, !dbg !109
  %215 = extractelement <2 x i1> %210, i64 0, !dbg !110
  %216 = or i1 %212, %215, !dbg !110
  %217 = extractelement <2 x i1> %210, i64 1, !dbg !110
  %218 = or i1 %214, %217, !dbg !110
  %219 = zext <2 x i1> %161 to <2 x i8>, !dbg !111
  %220 = select <2 x i1> %168, <2 x i8> splat (i8 2), <2 x i8> %219, !dbg !112
  %221 = select <2 x i1> %175, <2 x i8> splat (i8 3), <2 x i8> %220, !dbg !113
  %222 = select <2 x i1> %182, <2 x i8> splat (i8 4), <2 x i8> %221, !dbg !114
  %223 = select <2 x i1> %189, <2 x i8> splat (i8 5), <2 x i8> %222, !dbg !115
  %224 = select <2 x i1> %196, <2 x i8> splat (i8 6), <2 x i8> %223, !dbg !116
  %225 = select <2 x i1> %203, <2 x i8> splat (i8 7), <2 x i8> %224, !dbg !117
  %226 = select <2 x i1> %210, <2 x i8> splat (i8 8), <2 x i8> %225, !dbg !118
  %227 = mul i32 %17, 9632, !dbg !119
  %228 = add i32 %227, %.decomposed, !dbg !120
  %229 = sext i32 %228 to i64, !dbg !121
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !121
  %231 = extractelement <2 x i32> %.v6, i64 0, !dbg !122
  %232 = select i1 %216, i32 %153, i32 %231, !dbg !123
  %233 = extractelement <2 x i32> %.v6, i64 1, !dbg !122
  %234 = select i1 %218, i32 %154, i32 %233, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %232, i32 %234, ptr addrspace(1) %230, i1 %12) #1, !dbg !122
  %235 = mul i32 %17, 9728, !dbg !124
  %236 = add i32 %235, %.decomposed, !dbg !125
  %237 = sext i32 %236 to i64, !dbg !126
  %238 = getelementptr i8, ptr addrspace(1) %2, i64 %237, !dbg !126
  %239 = bitcast <2 x i8> %226 to i16, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %239, ptr addrspace(1) %238, i1 %12) #1, !dbg !127
  ret void, !dbg !128
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbkzvlpjwzp27nlefirexklpj5xtpcopkghtasqm64cvl6gw5fm5.py", directory: "inductor_cache/bk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 52, scope: !7)
!20 = !DILocation(line: 25, column: 19, scope: !7)
!21 = !DILocation(line: 39, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 35, column: 13, scope: !7)
!24 = !DILocation(line: 36, column: 19, scope: !7)
!25 = !DILocation(line: 40, column: 42, scope: !7)
!26 = !DILocation(line: 40, column: 38, scope: !7)
!27 = !DILocation(line: 40, column: 47, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 65, scope: !7)
!30 = !DILocation(line: 40, column: 57, scope: !7)
!31 = !DILocation(line: 46, column: 42, scope: !7)
!32 = !DILocation(line: 46, column: 51, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 19, scope: !7)
!36 = !DILocation(line: 53, column: 42, scope: !7)
!37 = !DILocation(line: 53, column: 51, scope: !7)
!38 = !DILocation(line: 53, column: 31, scope: !7)
!39 = !DILocation(line: 53, column: 69, scope: !7)
!40 = !DILocation(line: 60, column: 43, scope: !7)
!41 = !DILocation(line: 60, column: 52, scope: !7)
!42 = !DILocation(line: 60, column: 31, scope: !7)
!43 = !DILocation(line: 63, column: 43, scope: !7)
!44 = !DILocation(line: 63, column: 52, scope: !7)
!45 = !DILocation(line: 63, column: 31, scope: !7)
!46 = !DILocation(line: 66, column: 43, scope: !7)
!47 = !DILocation(line: 66, column: 52, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 46, column: 61, scope: !7)
!50 = !DILocation(line: 53, column: 61, scope: !7)
!51 = !DILocation(line: 60, column: 62, scope: !7)
!52 = !DILocation(line: 63, column: 62, scope: !7)
!53 = !DILocation(line: 66, column: 62, scope: !7)
!54 = !DILocation(line: 72, column: 20, scope: !7)
!55 = !DILocation(line: 73, column: 44, scope: !7)
!56 = !DILocation(line: 73, column: 53, scope: !7)
!57 = !DILocation(line: 73, column: 31, scope: !7)
!58 = !DILocation(line: 73, column: 71, scope: !7)
!59 = !DILocation(line: 73, column: 63, scope: !7)
!60 = !DILocation(line: 76, column: 44, scope: !7)
!61 = !DILocation(line: 76, column: 53, scope: !7)
!62 = !DILocation(line: 76, column: 31, scope: !7)
!63 = !DILocation(line: 76, column: 63, scope: !7)
!64 = !DILocation(line: 78, column: 20, scope: !7)
!65 = !DILocation(line: 79, column: 44, scope: !7)
!66 = !DILocation(line: 79, column: 53, scope: !7)
!67 = !DILocation(line: 79, column: 31, scope: !7)
!68 = !DILocation(line: 79, column: 71, scope: !7)
!69 = !DILocation(line: 79, column: 63, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!73 = !DILocation(line: 47, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !78)
!78 = !DILocation(line: 54, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !83)
!83 = !DILocation(line: 61, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !88)
!88 = !DILocation(line: 64, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !93)
!93 = !DILocation(line: 67, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !98)
!98 = !DILocation(line: 74, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !103)
!103 = !DILocation(line: 77, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !108)
!108 = !DILocation(line: 80, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !108)
!111 = !DILocation(line: 84, column: 35, scope: !7)
!112 = !DILocation(line: 87, column: 35, scope: !7)
!113 = !DILocation(line: 90, column: 35, scope: !7)
!114 = !DILocation(line: 93, column: 35, scope: !7)
!115 = !DILocation(line: 96, column: 35, scope: !7)
!116 = !DILocation(line: 99, column: 35, scope: !7)
!117 = !DILocation(line: 102, column: 35, scope: !7)
!118 = !DILocation(line: 105, column: 35, scope: !7)
!119 = !DILocation(line: 106, column: 35, scope: !7)
!120 = !DILocation(line: 106, column: 30, scope: !7)
!121 = !DILocation(line: 106, column: 25, scope: !7)
!122 = !DILocation(line: 106, column: 47, scope: !7)
!123 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !108)
!124 = !DILocation(line: 107, column: 35, scope: !7)
!125 = !DILocation(line: 107, column: 30, scope: !7)
!126 = !DILocation(line: 107, column: 25, scope: !7)
!127 = !DILocation(line: 107, column: 47, scope: !7)
!128 = !DILocation(line: 107, column: 4, scope: !7)
