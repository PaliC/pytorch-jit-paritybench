; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/lb/clba6enbylwu75fns2z576v77njhz2xfenc2py6vvoypbf5ysxyc.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp6 < 65536\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_max_unpool2d_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !11 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %10 = shl i32 %9, 8, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = and i32 %11, 127, !dbg !14
  %13 = or disjoint i32 %10, %12, !dbg !15
  %14 = or disjoint i32 %13, 128, !dbg !15
  %15 = srem i32 %13, 64, !dbg !16
  %16 = shl nsw i32 %15, 6, !dbg !17
  %17 = sdiv i32 %13, 4096, !dbg !18
  %18 = sdiv i32 %14, 4096, !dbg !18
  %19 = shl nsw i32 %17, 12, !dbg !19
  %20 = shl nsw i32 %18, 12, !dbg !19
  %21 = add i32 %16, %19, !dbg !20
  %22 = add i32 %16, %20, !dbg !20
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !21
  %24 = insertelement <2 x i32> %23, i32 %14, i64 1, !dbg !21
  %25 = sdiv <2 x i32> %24, splat (i32 64), !dbg !21
  %26 = extractelement <2 x i32> %25, i64 0, !dbg !22
  %27 = srem i32 %26, 64, !dbg !22
  %28 = extractelement <2 x i32> %25, i64 1, !dbg !22
  %29 = srem i32 %28, 64, !dbg !22
  %30 = add i32 %21, %27, !dbg !23
  %31 = add i32 %22, %29, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !25
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !27
  %42 = sext i32 %27 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !28
  %44 = sext i32 %29 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #5, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #5, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !35
  %60 = shl <2 x i32> %25, splat (i32 8), !dbg !36
  %61 = sext <2 x i32> %60 to <2 x i64>, !dbg !37
  %62 = insertelement <2 x i64> poison, i64 %36, i64 0, !dbg !37
  %63 = insertelement <2 x i64> %62, i64 %37, i64 1, !dbg !37
  %64 = add <2 x i64> %63, %61, !dbg !37
  %65 = lshr <2 x i64> %64, splat (i64 47), !dbg !38
  %66 = and <2 x i64> %65, splat (i64 65536), !dbg !38
  %67 = add <2 x i64> %66, %64, !dbg !38
  %68 = extractelement <2 x i64> %67, i64 0, !dbg !39
  %69 = extractelement <2 x i64> %67, i64 1, !dbg !39
  %70 = or i64 %68, %69, !dbg !39
  %.not = icmp ult i64 %70, 65536, !dbg !39
  br i1 %.not, label %72, label %71, !dbg !39

71:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 37, ptr nonnull @assertFunc_0, i64 1), !dbg !39
  unreachable, !dbg !39

72:                                               ; preds = %8
  %73 = bitcast i32 %51 to float, !dbg !31
  %74 = bitcast i32 %50 to float, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %75 = fadd float %74, 0x3EE4F8B580000000, !dbg !40
  %76 = fadd float %73, 0x3EE4F8B580000000, !dbg !40
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %77, 0, !dbg !41
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %78, 0, !dbg !41
  br i1 %.not.i, label %84, label %79, !dbg !41

79:                                               ; preds = %72
  br i1 %.not1.i, label %82, label %80, !dbg !41

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

84:                                               ; preds = %72
  br i1 %.not1.i, label %87, label %85, !dbg !41

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !41
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i1 = icmp eq i32 %89, 0, !dbg !41
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i4 = icmp eq i32 %90, 0, !dbg !41
  br i1 %.not.i1, label %96, label %91, !dbg !41

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !41

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %99, label %97, !dbg !41

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %92, %94, %97, %99
  %.0.i3 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !41
  %101 = bitcast i32 %41 to float, !dbg !27
  %102 = bitcast i32 %47 to float, !dbg !29
  %103 = fsub float %101, %102, !dbg !42
  %104 = bitcast i32 %40 to float, !dbg !27
  %105 = bitcast i32 %46 to float, !dbg !29
  %106 = fsub float %104, %105, !dbg !42
  %107 = bitcast i32 %54 to float, !dbg !33
  %108 = bitcast i32 %55 to float, !dbg !33
  %109 = bitcast i32 %58 to float, !dbg !35
  %110 = bitcast i32 %59 to float, !dbg !35
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !43
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !43
  %113 = fmul float %106, %111, !dbg !44
  %114 = fmul float %103, %112, !dbg !44
  %115 = fmul float %113, %107, !dbg !45
  %116 = fmul float %114, %108, !dbg !45
  %117 = fadd float %115, %109, !dbg !46
  %118 = fadd float %116, %110, !dbg !46
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %68, !dbg !47
  %120 = getelementptr float, ptr addrspace(1) %6, i64 %69, !dbg !47
  %121 = bitcast float %117 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %119, i1 true) #5, !dbg !48
  %122 = bitcast float %118 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %120, i1 true) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clba6enbylwu75fns2z576v77njhz2xfenc2py6vvoypbf5ysxyc.py", directory: "inductor_cache/lb")
!4 = !{ptr @triton_poi_fused_max_unpool2d_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_unpool2d_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_max_unpool2d_22", linkageName: "triton_poi_fused_max_unpool2d_22", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 40, scope: !11)
!17 = !DILocation(line: 25, column: 35, scope: !11)
!18 = !DILocation(line: 25, column: 59, scope: !11)
!19 = !DILocation(line: 25, column: 53, scope: !11)
!20 = !DILocation(line: 25, column: 47, scope: !11)
!21 = !DILocation(line: 25, column: 76, scope: !11)
!22 = !DILocation(line: 25, column: 82, scope: !11)
!23 = !DILocation(line: 25, column: 69, scope: !11)
!24 = !DILocation(line: 25, column: 30, scope: !11)
!25 = !DILocation(line: 25, column: 89, scope: !11)
!26 = !DILocation(line: 26, column: 30, scope: !11)
!27 = !DILocation(line: 26, column: 89, scope: !11)
!28 = !DILocation(line: 27, column: 31, scope: !11)
!29 = !DILocation(line: 27, column: 50, scope: !11)
!30 = !DILocation(line: 28, column: 32, scope: !11)
!31 = !DILocation(line: 28, column: 51, scope: !11)
!32 = !DILocation(line: 29, column: 32, scope: !11)
!33 = !DILocation(line: 29, column: 51, scope: !11)
!34 = !DILocation(line: 30, column: 32, scope: !11)
!35 = !DILocation(line: 30, column: 51, scope: !11)
!36 = !DILocation(line: 31, column: 16, scope: !11)
!37 = !DILocation(line: 32, column: 18, scope: !11)
!38 = !DILocation(line: 36, column: 32, scope: !11)
!39 = !DILocation(line: 37, column: 51, scope: !11)
!40 = !DILocation(line: 40, column: 20, scope: !11)
!41 = !DILocation(line: 41, column: 27, scope: !11)
!42 = !DILocation(line: 38, column: 19, scope: !11)
!43 = !DILocation(line: 43, column: 20, scope: !11)
!44 = !DILocation(line: 46, column: 20, scope: !11)
!45 = !DILocation(line: 47, column: 20, scope: !11)
!46 = !DILocation(line: 48, column: 20, scope: !11)
!47 = !DILocation(line: 49, column: 25, scope: !11)
!48 = !DILocation(line: 49, column: 66, scope: !11)
!49 = !DILocation(line: 49, column: 4, scope: !11)
