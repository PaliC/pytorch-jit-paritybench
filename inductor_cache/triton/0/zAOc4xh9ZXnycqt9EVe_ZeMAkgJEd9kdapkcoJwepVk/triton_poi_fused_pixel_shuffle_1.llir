; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 1020, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %16, 256, !dbg !13
  %18 = or disjoint i32 %16, 512, !dbg !13
  %19 = or disjoint i32 %16, 768, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 2, !dbg !15
  %22 = or disjoint i32 %21, 1, !dbg !16
  %23 = or disjoint i32 %21, 2, !dbg !16
  %24 = or disjoint i32 %21, 3, !dbg !16
  %25 = icmp slt i32 %21, 4, !dbg !17
  %26 = icmp slt i32 %22, 4, !dbg !17
  %27 = icmp slt i32 %23, 4, !dbg !17
  %28 = icmp slt i32 %24, 4, !dbg !17
  %29 = ashr exact i32 %15, 2, !dbg !18
  %30 = sdiv i32 %16, 4, !dbg !18
  %31 = sdiv i32 %17, 4, !dbg !18
  %32 = sdiv i32 %18, 4, !dbg !18
  %33 = sdiv i32 %19, 4, !dbg !18
  %34 = srem i32 %29, 4, !dbg !19
  %35 = srem i32 %30, 4, !dbg !19
  %36 = srem i32 %31, 4, !dbg !19
  %37 = srem i32 %32, 4, !dbg !19
  %38 = srem i32 %33, 4, !dbg !19
  %39 = sdiv i32 %15, 16, !dbg !20
  %40 = srem i32 %39, 4, !dbg !21
  %41 = sdiv i32 %15, 64, !dbg !22
  %42 = sdiv i32 %16, 64, !dbg !22
  %43 = sdiv i32 %17, 64, !dbg !22
  %44 = sdiv i32 %18, 64, !dbg !22
  %45 = sdiv i32 %19, 64, !dbg !22
  %46 = srem i32 %42, 4, !dbg !23
  %47 = srem i32 %43, 4, !dbg !23
  %48 = srem i32 %44, 4, !dbg !23
  %49 = srem i32 %45, 4, !dbg !23
  %50 = shl nsw i32 %40, 2, !dbg !24
  %51 = shl i32 %20, 6, !dbg !25
  %52 = shl i32 %22, 4, !dbg !25
  %53 = shl i32 %23, 4, !dbg !25
  %54 = shl i32 %24, 4, !dbg !25
  %55 = shl nsw i32 %34, 6, !dbg !26
  %56 = shl i32 %41, 8, !dbg !27
  %57 = add i32 %50, %56, !dbg !28
  %58 = add i32 %57, %51, !dbg !29
  %59 = add i32 %58, %55, !dbg !30
  %60 = add i32 %57, %52, !dbg !29
  %61 = add i32 %60, %55, !dbg !30
  %62 = add i32 %57, %53, !dbg !29
  %63 = add i32 %62, %55, !dbg !30
  %64 = add i32 %57, %54, !dbg !29
  %65 = add i32 %64, %55, !dbg !30
  %66 = sext i32 %59 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !31
  %68 = sext i32 %61 to i64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !31
  %70 = sext i32 %63 to i64, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !31
  %72 = sext i32 %65 to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %25) #4, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %26) #4, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %27) #4, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !32
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %28) #4, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !32
  %94 = shl i32 %11, 4, !dbg !32
  %95 = and i32 %94, 4080, !dbg !32
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !32
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %95, !dbg !32
  %98 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !32
  %99 = or disjoint i32 %95, 4, !dbg !32
  %100 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %99, !dbg !32
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %99, !dbg !32
  %102 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !32
  %103 = or disjoint i32 %95, 8, !dbg !32
  %104 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %103, !dbg !32
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %103, !dbg !32
  %106 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !32
  %107 = or disjoint i32 %95, 12, !dbg !32
  %108 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !32
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %107, !dbg !32
  %110 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #4, !dbg !32
  %111 = or disjoint i32 %95, 1, !dbg !32
  %112 = getelementptr float, ptr addrspace(3) %96, i32 %111, !dbg !32
  %113 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #4, !dbg !32
  %114 = or disjoint i32 %95, 5, !dbg !32
  %115 = lshr i32 %114, 2, !dbg !32
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !32
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %114, !dbg !32
  %118 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #4, !dbg !32
  %119 = or disjoint i32 %95, 9, !dbg !32
  %120 = lshr i32 %119, 2, !dbg !32
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !32
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !32
  %123 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #4, !dbg !32
  %124 = or disjoint i32 %95, 13, !dbg !32
  %125 = lshr i32 %124, 2, !dbg !32
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !32
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !32
  %128 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #4, !dbg !32
  %129 = or disjoint i32 %95, 2, !dbg !32
  %130 = getelementptr float, ptr addrspace(3) %96, i32 %129, !dbg !32
  %131 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #4, !dbg !32
  %132 = or disjoint i32 %95, 6, !dbg !32
  %133 = lshr i32 %132, 2, !dbg !32
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !32
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %132, !dbg !32
  %136 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #4, !dbg !32
  %137 = or disjoint i32 %95, 10, !dbg !32
  %138 = lshr i32 %137, 2, !dbg !32
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !32
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !32
  %141 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #4, !dbg !32
  %142 = or disjoint i32 %95, 14, !dbg !32
  %143 = lshr i32 %142, 2, !dbg !32
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !32
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !32
  %146 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #4, !dbg !32
  %147 = or disjoint i32 %95, 3, !dbg !32
  %148 = getelementptr float, ptr addrspace(3) %96, i32 %147, !dbg !32
  %149 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #4, !dbg !32
  %150 = or disjoint i32 %95, 7, !dbg !32
  %151 = lshr i32 %150, 2, !dbg !32
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !32
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !32
  %154 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !32
  %155 = or disjoint i32 %95, 11, !dbg !32
  %156 = lshr i32 %155, 2, !dbg !32
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !32
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !32
  %159 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #4, !dbg !32
  %160 = or disjoint i32 %95, 15, !dbg !32
  %161 = lshr i32 %160, 2, !dbg !32
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !32
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !32
  %164 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %165 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !32
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %13, !dbg !32
  %167 = load <4 x float>, ptr addrspace(3) %166, align 4, !dbg !32
  %168 = or disjoint i32 %13, 1024, !dbg !32
  %169 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %168, !dbg !32
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %168, !dbg !32
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !32
  %172 = or disjoint i32 %13, 1025, !dbg !32
  %173 = lshr i32 %172, 2, !dbg !32
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !32
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %172, !dbg !32
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !32
  %177 = or disjoint i32 %13, 1026, !dbg !32
  %178 = lshr i32 %177, 2, !dbg !32
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !32
  %180 = getelementptr inbounds float, ptr addrspace(3) %179, i32 %177, !dbg !32
  %181 = load float, ptr addrspace(3) %180, align 4, !dbg !32
  %182 = or disjoint i32 %13, 1027, !dbg !32
  %183 = lshr i32 %182, 2, !dbg !32
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !32
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !32
  %186 = load float, ptr addrspace(3) %185, align 4, !dbg !32
  %187 = or disjoint i32 %13, 2048, !dbg !32
  %188 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %187, !dbg !32
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %187, !dbg !32
  %190 = load float, ptr addrspace(3) %189, align 4, !dbg !32
  %191 = or disjoint i32 %13, 2049, !dbg !32
  %192 = lshr i32 %191, 2, !dbg !32
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !32
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %191, !dbg !32
  %195 = load float, ptr addrspace(3) %194, align 4, !dbg !32
  %196 = or disjoint i32 %13, 2050, !dbg !32
  %197 = lshr i32 %196, 2, !dbg !32
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !32
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %196, !dbg !32
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !32
  %201 = or disjoint i32 %13, 2051, !dbg !32
  %202 = lshr i32 %201, 2, !dbg !32
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !32
  %204 = getelementptr inbounds float, ptr addrspace(3) %203, i32 %201, !dbg !32
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !32
  %206 = or disjoint i32 %13, 3072, !dbg !32
  %207 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %206, !dbg !32
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %206, !dbg !32
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !32
  %210 = or disjoint i32 %13, 3073, !dbg !32
  %211 = lshr i32 %210, 2, !dbg !32
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !32
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !32
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !32
  %215 = or disjoint i32 %13, 3074, !dbg !32
  %216 = lshr i32 %215, 2, !dbg !32
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !32
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !32
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !32
  %220 = or disjoint i32 %13, 3075, !dbg !32
  %221 = lshr i32 %220, 2, !dbg !32
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !32
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !32
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !32
  %225 = add i32 %35, %20, !dbg !33
  %226 = shl i32 %225, 2, !dbg !33
  %227 = add i32 %20, %36, !dbg !33
  %228 = shl i32 %227, 2, !dbg !33
  %229 = add i32 %20, %37, !dbg !33
  %230 = shl i32 %229, 2, !dbg !33
  %231 = add i32 %20, %38, !dbg !33
  %232 = shl i32 %231, 2, !dbg !33
  %233 = shl nsw i32 %46, 4, !dbg !34
  %234 = shl nsw i32 %47, 4, !dbg !34
  %235 = shl nsw i32 %48, 4, !dbg !34
  %236 = shl nsw i32 %49, 4, !dbg !34
  %237 = add i32 %226, %233, !dbg !35
  %238 = add i32 %228, %234, !dbg !35
  %239 = add i32 %230, %235, !dbg !35
  %240 = add i32 %232, %236, !dbg !35
  %241 = sext i32 %237 to i64, !dbg !36
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !36
  %243 = sext i32 %238 to i64, !dbg !36
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !36
  %245 = sext i32 %239 to i64, !dbg !36
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !36
  %247 = sext i32 %240 to i64, !dbg !36
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !36
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %242, i1 %25) #4, !dbg !37
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %244, i1 %25) #4, !dbg !37
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %246, i1 %25) #4, !dbg !37
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %248, i1 %25) #4, !dbg !37
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !38
  %254 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !38
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !38
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !38
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %253, i1 %25) #4, !dbg !39
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !39
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !39
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !39
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !39
  %262 = bitcast i32 %258 to float, !dbg !39
  %263 = bitcast i32 %259 to float, !dbg !39
  %264 = bitcast i32 %260 to float, !dbg !39
  %265 = bitcast i32 %261 to float, !dbg !39
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %254, i1 %25) #4, !dbg !39
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !39
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !39
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !39
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !39
  %271 = bitcast i32 %267 to float, !dbg !39
  %272 = bitcast i32 %268 to float, !dbg !39
  %273 = bitcast i32 %269 to float, !dbg !39
  %274 = bitcast i32 %270 to float, !dbg !39
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %25) #4, !dbg !39
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !39
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !39
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !39
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !39
  %280 = bitcast i32 %276 to float, !dbg !39
  %281 = bitcast i32 %277 to float, !dbg !39
  %282 = bitcast i32 %278 to float, !dbg !39
  %283 = bitcast i32 %279 to float, !dbg !39
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %256, i1 %25) #4, !dbg !39
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !39
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !39
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !39
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !39
  %289 = bitcast i32 %285 to float, !dbg !39
  %290 = bitcast i32 %286 to float, !dbg !39
  %291 = bitcast i32 %287 to float, !dbg !39
  %292 = bitcast i32 %288 to float, !dbg !39
  %293 = getelementptr float, ptr addrspace(1) %3, i64 %241, !dbg !40
  %294 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !40
  %295 = getelementptr float, ptr addrspace(1) %3, i64 %245, !dbg !40
  %296 = getelementptr float, ptr addrspace(1) %3, i64 %247, !dbg !40
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %293, i1 %25) #4, !dbg !41
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 %25) #4, !dbg !41
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %295, i1 %25) #4, !dbg !41
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %296, i1 %25) #4, !dbg !41
  %301 = getelementptr float, ptr addrspace(1) %4, i64 %241, !dbg !42
  %302 = getelementptr float, ptr addrspace(1) %4, i64 %243, !dbg !42
  %303 = getelementptr float, ptr addrspace(1) %4, i64 %245, !dbg !42
  %304 = getelementptr float, ptr addrspace(1) %4, i64 %247, !dbg !42
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %301, i1 %25) #4, !dbg !43
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %302, i1 %25) #4, !dbg !43
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %303, i1 %25) #4, !dbg !43
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %304, i1 %25) #4, !dbg !43
  %309 = fadd float %262, 0x3EE4F8B580000000, !dbg !44
  %310 = fadd float %263, 0x3EE4F8B580000000, !dbg !44
  %311 = fadd float %264, 0x3EE4F8B580000000, !dbg !44
  %312 = fadd float %265, 0x3EE4F8B580000000, !dbg !44
  %313 = fadd float %271, 0x3EE4F8B580000000, !dbg !44
  %314 = fadd float %272, 0x3EE4F8B580000000, !dbg !44
  %315 = fadd float %273, 0x3EE4F8B580000000, !dbg !44
  %316 = fadd float %274, 0x3EE4F8B580000000, !dbg !44
  %317 = fadd float %280, 0x3EE4F8B580000000, !dbg !44
  %318 = fadd float %281, 0x3EE4F8B580000000, !dbg !44
  %319 = fadd float %282, 0x3EE4F8B580000000, !dbg !44
  %320 = fadd float %283, 0x3EE4F8B580000000, !dbg !44
  %321 = fadd float %289, 0x3EE4F8B580000000, !dbg !44
  %322 = fadd float %290, 0x3EE4F8B580000000, !dbg !44
  %323 = fadd float %291, 0x3EE4F8B580000000, !dbg !44
  %324 = fadd float %292, 0x3EE4F8B580000000, !dbg !44
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %325, 0, !dbg !45
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %326, 0, !dbg !45
  br i1 %.not.i, label %332, label %327, !dbg !45

327:                                              ; preds = %8
  br i1 %.not1.i, label %330, label %328, !dbg !45

328:                                              ; preds = %327
  %329 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %309) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

330:                                              ; preds = %327
  %331 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %309) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

332:                                              ; preds = %8
  br i1 %.not1.i, label %335, label %333, !dbg !45

333:                                              ; preds = %332
  %334 = tail call float @llvm.nvvm.sqrt.rn.f(float %309) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

335:                                              ; preds = %332
  %336 = tail call float @llvm.nvvm.sqrt.approx.f(float %309) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %328, %330, %333, %335
  %.0.i = phi float [ %329, %328 ], [ %331, %330 ], [ %334, %333 ], [ %336, %335 ], !dbg !45
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i1 = icmp eq i32 %337, 0, !dbg !45
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i4 = icmp eq i32 %338, 0, !dbg !45
  br i1 %.not.i1, label %344, label %339, !dbg !45

339:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %342, label %340, !dbg !45

340:                                              ; preds = %339
  %341 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %310) #4, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

342:                                              ; preds = %339
  %343 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %310) #4, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

344:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %347, label %345, !dbg !45

345:                                              ; preds = %344
  %346 = tail call float @llvm.nvvm.sqrt.rn.f(float %310) #4, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

347:                                              ; preds = %344
  %348 = tail call float @llvm.nvvm.sqrt.approx.f(float %310) #4, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

__nv_sqrtf.exit5:                                 ; preds = %340, %342, %345, %347
  %.0.i3 = phi float [ %341, %340 ], [ %343, %342 ], [ %346, %345 ], [ %348, %347 ], !dbg !45
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i6 = icmp eq i32 %349, 0, !dbg !45
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i9 = icmp eq i32 %350, 0, !dbg !45
  br i1 %.not.i6, label %356, label %351, !dbg !45

351:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %354, label %352, !dbg !45

352:                                              ; preds = %351
  %353 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %311) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

354:                                              ; preds = %351
  %355 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %311) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

356:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %359, label %357, !dbg !45

357:                                              ; preds = %356
  %358 = tail call float @llvm.nvvm.sqrt.rn.f(float %311) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

359:                                              ; preds = %356
  %360 = tail call float @llvm.nvvm.sqrt.approx.f(float %311) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

__nv_sqrtf.exit10:                                ; preds = %352, %354, %357, %359
  %.0.i8 = phi float [ %353, %352 ], [ %355, %354 ], [ %358, %357 ], [ %360, %359 ], !dbg !45
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i11 = icmp eq i32 %361, 0, !dbg !45
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i14 = icmp eq i32 %362, 0, !dbg !45
  br i1 %.not.i11, label %368, label %363, !dbg !45

363:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %366, label %364, !dbg !45

364:                                              ; preds = %363
  %365 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %312) #4, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

366:                                              ; preds = %363
  %367 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %312) #4, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

368:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %371, label %369, !dbg !45

369:                                              ; preds = %368
  %370 = tail call float @llvm.nvvm.sqrt.rn.f(float %312) #4, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

371:                                              ; preds = %368
  %372 = tail call float @llvm.nvvm.sqrt.approx.f(float %312) #4, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

__nv_sqrtf.exit15:                                ; preds = %364, %366, %369, %371
  %.0.i13 = phi float [ %365, %364 ], [ %367, %366 ], [ %370, %369 ], [ %372, %371 ], !dbg !45
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i16 = icmp eq i32 %373, 0, !dbg !45
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i19 = icmp eq i32 %374, 0, !dbg !45
  br i1 %.not.i16, label %380, label %375, !dbg !45

375:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %378, label %376, !dbg !45

376:                                              ; preds = %375
  %377 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %313) #4, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

378:                                              ; preds = %375
  %379 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %313) #4, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

380:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %383, label %381, !dbg !45

381:                                              ; preds = %380
  %382 = tail call float @llvm.nvvm.sqrt.rn.f(float %313) #4, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

383:                                              ; preds = %380
  %384 = tail call float @llvm.nvvm.sqrt.approx.f(float %313) #4, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

__nv_sqrtf.exit20:                                ; preds = %376, %378, %381, %383
  %.0.i18 = phi float [ %377, %376 ], [ %379, %378 ], [ %382, %381 ], [ %384, %383 ], !dbg !45
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i21 = icmp eq i32 %385, 0, !dbg !45
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i24 = icmp eq i32 %386, 0, !dbg !45
  br i1 %.not.i21, label %392, label %387, !dbg !45

387:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %390, label %388, !dbg !45

388:                                              ; preds = %387
  %389 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %314) #4, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

390:                                              ; preds = %387
  %391 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %314) #4, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

392:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %395, label %393, !dbg !45

393:                                              ; preds = %392
  %394 = tail call float @llvm.nvvm.sqrt.rn.f(float %314) #4, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

395:                                              ; preds = %392
  %396 = tail call float @llvm.nvvm.sqrt.approx.f(float %314) #4, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

__nv_sqrtf.exit25:                                ; preds = %388, %390, %393, %395
  %.0.i23 = phi float [ %389, %388 ], [ %391, %390 ], [ %394, %393 ], [ %396, %395 ], !dbg !45
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i26 = icmp eq i32 %397, 0, !dbg !45
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i29 = icmp eq i32 %398, 0, !dbg !45
  br i1 %.not.i26, label %404, label %399, !dbg !45

399:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %402, label %400, !dbg !45

400:                                              ; preds = %399
  %401 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %315) #4, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

402:                                              ; preds = %399
  %403 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %315) #4, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

404:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %407, label %405, !dbg !45

405:                                              ; preds = %404
  %406 = tail call float @llvm.nvvm.sqrt.rn.f(float %315) #4, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

407:                                              ; preds = %404
  %408 = tail call float @llvm.nvvm.sqrt.approx.f(float %315) #4, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

__nv_sqrtf.exit30:                                ; preds = %400, %402, %405, %407
  %.0.i28 = phi float [ %401, %400 ], [ %403, %402 ], [ %406, %405 ], [ %408, %407 ], !dbg !45
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i31 = icmp eq i32 %409, 0, !dbg !45
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i34 = icmp eq i32 %410, 0, !dbg !45
  br i1 %.not.i31, label %416, label %411, !dbg !45

411:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %414, label %412, !dbg !45

412:                                              ; preds = %411
  %413 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %316) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

414:                                              ; preds = %411
  %415 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %316) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

416:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %419, label %417, !dbg !45

417:                                              ; preds = %416
  %418 = tail call float @llvm.nvvm.sqrt.rn.f(float %316) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

419:                                              ; preds = %416
  %420 = tail call float @llvm.nvvm.sqrt.approx.f(float %316) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

__nv_sqrtf.exit35:                                ; preds = %412, %414, %417, %419
  %.0.i33 = phi float [ %413, %412 ], [ %415, %414 ], [ %418, %417 ], [ %420, %419 ], !dbg !45
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i36 = icmp eq i32 %421, 0, !dbg !45
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i39 = icmp eq i32 %422, 0, !dbg !45
  br i1 %.not.i36, label %428, label %423, !dbg !45

423:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %426, label %424, !dbg !45

424:                                              ; preds = %423
  %425 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %317) #4, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

426:                                              ; preds = %423
  %427 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %317) #4, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

428:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %431, label %429, !dbg !45

429:                                              ; preds = %428
  %430 = tail call float @llvm.nvvm.sqrt.rn.f(float %317) #4, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

431:                                              ; preds = %428
  %432 = tail call float @llvm.nvvm.sqrt.approx.f(float %317) #4, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

__nv_sqrtf.exit40:                                ; preds = %424, %426, %429, %431
  %.0.i38 = phi float [ %425, %424 ], [ %427, %426 ], [ %430, %429 ], [ %432, %431 ], !dbg !45
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i41 = icmp eq i32 %433, 0, !dbg !45
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i44 = icmp eq i32 %434, 0, !dbg !45
  br i1 %.not.i41, label %440, label %435, !dbg !45

435:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %438, label %436, !dbg !45

436:                                              ; preds = %435
  %437 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %318) #4, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

438:                                              ; preds = %435
  %439 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %318) #4, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

440:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %443, label %441, !dbg !45

441:                                              ; preds = %440
  %442 = tail call float @llvm.nvvm.sqrt.rn.f(float %318) #4, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

443:                                              ; preds = %440
  %444 = tail call float @llvm.nvvm.sqrt.approx.f(float %318) #4, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

__nv_sqrtf.exit45:                                ; preds = %436, %438, %441, %443
  %.0.i43 = phi float [ %437, %436 ], [ %439, %438 ], [ %442, %441 ], [ %444, %443 ], !dbg !45
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i46 = icmp eq i32 %445, 0, !dbg !45
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i49 = icmp eq i32 %446, 0, !dbg !45
  br i1 %.not.i46, label %452, label %447, !dbg !45

447:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %450, label %448, !dbg !45

448:                                              ; preds = %447
  %449 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %319) #4, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

450:                                              ; preds = %447
  %451 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %319) #4, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

452:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %455, label %453, !dbg !45

453:                                              ; preds = %452
  %454 = tail call float @llvm.nvvm.sqrt.rn.f(float %319) #4, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

455:                                              ; preds = %452
  %456 = tail call float @llvm.nvvm.sqrt.approx.f(float %319) #4, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

__nv_sqrtf.exit50:                                ; preds = %448, %450, %453, %455
  %.0.i48 = phi float [ %449, %448 ], [ %451, %450 ], [ %454, %453 ], [ %456, %455 ], !dbg !45
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i51 = icmp eq i32 %457, 0, !dbg !45
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i54 = icmp eq i32 %458, 0, !dbg !45
  br i1 %.not.i51, label %464, label %459, !dbg !45

459:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %462, label %460, !dbg !45

460:                                              ; preds = %459
  %461 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %320) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

462:                                              ; preds = %459
  %463 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %320) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

464:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %467, label %465, !dbg !45

465:                                              ; preds = %464
  %466 = tail call float @llvm.nvvm.sqrt.rn.f(float %320) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

467:                                              ; preds = %464
  %468 = tail call float @llvm.nvvm.sqrt.approx.f(float %320) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

__nv_sqrtf.exit55:                                ; preds = %460, %462, %465, %467
  %.0.i53 = phi float [ %461, %460 ], [ %463, %462 ], [ %466, %465 ], [ %468, %467 ], !dbg !45
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i56 = icmp eq i32 %469, 0, !dbg !45
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i59 = icmp eq i32 %470, 0, !dbg !45
  br i1 %.not.i56, label %476, label %471, !dbg !45

471:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %474, label %472, !dbg !45

472:                                              ; preds = %471
  %473 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %321) #4, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

474:                                              ; preds = %471
  %475 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %321) #4, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

476:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %479, label %477, !dbg !45

477:                                              ; preds = %476
  %478 = tail call float @llvm.nvvm.sqrt.rn.f(float %321) #4, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

479:                                              ; preds = %476
  %480 = tail call float @llvm.nvvm.sqrt.approx.f(float %321) #4, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

__nv_sqrtf.exit60:                                ; preds = %472, %474, %477, %479
  %.0.i58 = phi float [ %473, %472 ], [ %475, %474 ], [ %478, %477 ], [ %480, %479 ], !dbg !45
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i61 = icmp eq i32 %481, 0, !dbg !45
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i64 = icmp eq i32 %482, 0, !dbg !45
  br i1 %.not.i61, label %488, label %483, !dbg !45

483:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %486, label %484, !dbg !45

484:                                              ; preds = %483
  %485 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %322) #4, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

486:                                              ; preds = %483
  %487 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %322) #4, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

488:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %491, label %489, !dbg !45

489:                                              ; preds = %488
  %490 = tail call float @llvm.nvvm.sqrt.rn.f(float %322) #4, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

491:                                              ; preds = %488
  %492 = tail call float @llvm.nvvm.sqrt.approx.f(float %322) #4, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

__nv_sqrtf.exit65:                                ; preds = %484, %486, %489, %491
  %.0.i63 = phi float [ %485, %484 ], [ %487, %486 ], [ %490, %489 ], [ %492, %491 ], !dbg !45
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i66 = icmp eq i32 %493, 0, !dbg !45
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i69 = icmp eq i32 %494, 0, !dbg !45
  br i1 %.not.i66, label %500, label %495, !dbg !45

495:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %498, label %496, !dbg !45

496:                                              ; preds = %495
  %497 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %323) #4, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

498:                                              ; preds = %495
  %499 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %323) #4, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

500:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %503, label %501, !dbg !45

501:                                              ; preds = %500
  %502 = tail call float @llvm.nvvm.sqrt.rn.f(float %323) #4, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

503:                                              ; preds = %500
  %504 = tail call float @llvm.nvvm.sqrt.approx.f(float %323) #4, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

__nv_sqrtf.exit70:                                ; preds = %496, %498, %501, %503
  %.0.i68 = phi float [ %497, %496 ], [ %499, %498 ], [ %502, %501 ], [ %504, %503 ], !dbg !45
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i71 = icmp eq i32 %505, 0, !dbg !45
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i74 = icmp eq i32 %506, 0, !dbg !45
  br i1 %.not.i71, label %512, label %507, !dbg !45

507:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %510, label %508, !dbg !45

508:                                              ; preds = %507
  %509 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %324) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

510:                                              ; preds = %507
  %511 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %324) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

512:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %515, label %513, !dbg !45

513:                                              ; preds = %512
  %514 = tail call float @llvm.nvvm.sqrt.rn.f(float %324) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

515:                                              ; preds = %512
  %516 = tail call float @llvm.nvvm.sqrt.approx.f(float %324) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

__nv_sqrtf.exit75:                                ; preds = %508, %510, %513, %515
  %.0.i73 = phi float [ %509, %508 ], [ %511, %510 ], [ %514, %513 ], [ %516, %515 ], !dbg !45
  %517 = shufflevector <4 x float> %167, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !32
  %518 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !37
  %519 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !37
  %520 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !37
  %521 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !37
  %522 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !37
  %523 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !37
  %524 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !37
  %525 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !37
  %526 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !37
  %527 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !37
  %528 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !37
  %529 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !37
  %530 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !37
  %531 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !37
  %532 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !37
  %533 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !37
  %534 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !43
  %535 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !43
  %536 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !43
  %537 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !43
  %538 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !43
  %539 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !43
  %540 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !43
  %541 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !43
  %542 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !43
  %543 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !43
  %544 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !43
  %545 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !43
  %546 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !43
  %547 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !43
  %548 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !43
  %549 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !43
  %550 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !41
  %551 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !41
  %552 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !41
  %553 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !41
  %554 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !41
  %555 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !41
  %556 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !41
  %557 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !41
  %558 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !41
  %559 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !41
  %560 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !41
  %561 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !41
  %562 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !41
  %563 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !41
  %564 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !41
  %565 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !41
  %566 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %567 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !46
  %568 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !46
  %569 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !46
  %570 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !46
  %571 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !46
  %572 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !46
  %573 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !46
  %574 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !46
  %575 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !46
  %576 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #4, !dbg !46
  %577 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #4, !dbg !46
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #4, !dbg !46
  %579 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #4, !dbg !46
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #4, !dbg !46
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #4, !dbg !46
  %582 = insertelement <16 x i32> poison, i32 %518, i64 0, !dbg !37
  %583 = insertelement <16 x i32> %582, i32 %519, i64 1, !dbg !37
  %584 = insertelement <16 x i32> %583, i32 %520, i64 2, !dbg !37
  %585 = insertelement <16 x i32> %584, i32 %521, i64 3, !dbg !37
  %586 = insertelement <16 x i32> %585, i32 %522, i64 4, !dbg !37
  %587 = insertelement <16 x i32> %586, i32 %523, i64 5, !dbg !37
  %588 = insertelement <16 x i32> %587, i32 %524, i64 6, !dbg !37
  %589 = insertelement <16 x i32> %588, i32 %525, i64 7, !dbg !37
  %590 = insertelement <16 x i32> %589, i32 %526, i64 8, !dbg !37
  %591 = insertelement <16 x i32> %590, i32 %527, i64 9, !dbg !37
  %592 = insertelement <16 x i32> %591, i32 %528, i64 10, !dbg !37
  %593 = insertelement <16 x i32> %592, i32 %529, i64 11, !dbg !37
  %594 = insertelement <16 x i32> %593, i32 %530, i64 12, !dbg !37
  %595 = insertelement <16 x i32> %594, i32 %531, i64 13, !dbg !37
  %596 = insertelement <16 x i32> %595, i32 %532, i64 14, !dbg !37
  %597 = insertelement <16 x i32> %596, i32 %533, i64 15, !dbg !37
  %598 = bitcast <16 x i32> %597 to <16 x float>, !dbg !37
  %599 = insertelement <16 x float> poison, float %224, i64 0, !dbg !47
  %600 = insertelement <16 x float> %599, float %219, i64 1, !dbg !47
  %601 = insertelement <16 x float> %600, float %214, i64 2, !dbg !47
  %602 = insertelement <16 x float> %601, float %209, i64 3, !dbg !47
  %603 = insertelement <16 x float> %602, float %205, i64 4, !dbg !47
  %604 = insertelement <16 x float> %603, float %200, i64 5, !dbg !47
  %605 = insertelement <16 x float> %604, float %195, i64 6, !dbg !47
  %606 = insertelement <16 x float> %605, float %190, i64 7, !dbg !47
  %607 = insertelement <16 x float> %606, float %186, i64 8, !dbg !47
  %608 = insertelement <16 x float> %607, float %181, i64 9, !dbg !47
  %609 = insertelement <16 x float> %608, float %176, i64 10, !dbg !47
  %610 = insertelement <16 x float> %609, float %171, i64 11, !dbg !47
  %611 = shufflevector <4 x float> %517, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %612 = shufflevector <16 x float> %610, <16 x float> %611, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !47
  %613 = fsub <16 x float> %612, %598, !dbg !47
  %614 = insertelement <16 x i32> poison, i32 %534, i64 0, !dbg !43
  %615 = insertelement <16 x i32> %614, i32 %535, i64 1, !dbg !43
  %616 = insertelement <16 x i32> %615, i32 %536, i64 2, !dbg !43
  %617 = insertelement <16 x i32> %616, i32 %537, i64 3, !dbg !43
  %618 = insertelement <16 x i32> %617, i32 %538, i64 4, !dbg !43
  %619 = insertelement <16 x i32> %618, i32 %539, i64 5, !dbg !43
  %620 = insertelement <16 x i32> %619, i32 %540, i64 6, !dbg !43
  %621 = insertelement <16 x i32> %620, i32 %541, i64 7, !dbg !43
  %622 = insertelement <16 x i32> %621, i32 %542, i64 8, !dbg !43
  %623 = insertelement <16 x i32> %622, i32 %543, i64 9, !dbg !43
  %624 = insertelement <16 x i32> %623, i32 %544, i64 10, !dbg !43
  %625 = insertelement <16 x i32> %624, i32 %545, i64 11, !dbg !43
  %626 = insertelement <16 x i32> %625, i32 %546, i64 12, !dbg !43
  %627 = insertelement <16 x i32> %626, i32 %547, i64 13, !dbg !43
  %628 = insertelement <16 x i32> %627, i32 %548, i64 14, !dbg !43
  %629 = insertelement <16 x i32> %628, i32 %549, i64 15, !dbg !43
  %630 = bitcast <16 x i32> %629 to <16 x float>, !dbg !43
  %631 = insertelement <16 x i32> poison, i32 %550, i64 0, !dbg !41
  %632 = insertelement <16 x i32> %631, i32 %551, i64 1, !dbg !41
  %633 = insertelement <16 x i32> %632, i32 %552, i64 2, !dbg !41
  %634 = insertelement <16 x i32> %633, i32 %553, i64 3, !dbg !41
  %635 = insertelement <16 x i32> %634, i32 %554, i64 4, !dbg !41
  %636 = insertelement <16 x i32> %635, i32 %555, i64 5, !dbg !41
  %637 = insertelement <16 x i32> %636, i32 %556, i64 6, !dbg !41
  %638 = insertelement <16 x i32> %637, i32 %557, i64 7, !dbg !41
  %639 = insertelement <16 x i32> %638, i32 %558, i64 8, !dbg !41
  %640 = insertelement <16 x i32> %639, i32 %559, i64 9, !dbg !41
  %641 = insertelement <16 x i32> %640, i32 %560, i64 10, !dbg !41
  %642 = insertelement <16 x i32> %641, i32 %561, i64 11, !dbg !41
  %643 = insertelement <16 x i32> %642, i32 %562, i64 12, !dbg !41
  %644 = insertelement <16 x i32> %643, i32 %563, i64 13, !dbg !41
  %645 = insertelement <16 x i32> %644, i32 %564, i64 14, !dbg !41
  %646 = insertelement <16 x i32> %645, i32 %565, i64 15, !dbg !41
  %647 = bitcast <16 x i32> %646 to <16 x float>, !dbg !41
  %648 = insertelement <16 x float> poison, float %581, i64 0, !dbg !48
  %649 = insertelement <16 x float> %648, float %580, i64 1, !dbg !48
  %650 = insertelement <16 x float> %649, float %579, i64 2, !dbg !48
  %651 = insertelement <16 x float> %650, float %578, i64 3, !dbg !48
  %652 = insertelement <16 x float> %651, float %577, i64 4, !dbg !48
  %653 = insertelement <16 x float> %652, float %576, i64 5, !dbg !48
  %654 = insertelement <16 x float> %653, float %575, i64 6, !dbg !48
  %655 = insertelement <16 x float> %654, float %574, i64 7, !dbg !48
  %656 = insertelement <16 x float> %655, float %573, i64 8, !dbg !48
  %657 = insertelement <16 x float> %656, float %572, i64 9, !dbg !48
  %658 = insertelement <16 x float> %657, float %571, i64 10, !dbg !48
  %659 = insertelement <16 x float> %658, float %570, i64 11, !dbg !48
  %660 = insertelement <16 x float> %659, float %569, i64 12, !dbg !48
  %661 = insertelement <16 x float> %660, float %568, i64 13, !dbg !48
  %662 = insertelement <16 x float> %661, float %567, i64 14, !dbg !48
  %663 = insertelement <16 x float> %662, float %566, i64 15, !dbg !48
  %664 = fmul <16 x float> %613, %663, !dbg !48
  %665 = fmul <16 x float> %664, %647, !dbg !49
  %666 = fadd <16 x float> %665, %630, !dbg !50
  %667 = fcmp olt <16 x float> %666, zeroinitializer, !dbg !51
  %668 = extractelement <16 x i1> %667, i64 15, !dbg !55
  %669 = extractelement <16 x i1> %667, i64 14, !dbg !55
  %670 = extractelement <16 x i1> %667, i64 13, !dbg !55
  %671 = extractelement <16 x i1> %667, i64 12, !dbg !55
  %672 = extractelement <16 x i1> %667, i64 11, !dbg !55
  %673 = extractelement <16 x i1> %667, i64 10, !dbg !55
  %674 = extractelement <16 x i1> %667, i64 9, !dbg !55
  %675 = extractelement <16 x i1> %667, i64 8, !dbg !55
  %676 = extractelement <16 x i1> %667, i64 7, !dbg !55
  %677 = extractelement <16 x i1> %667, i64 6, !dbg !55
  %678 = extractelement <16 x i1> %667, i64 5, !dbg !55
  %679 = extractelement <16 x i1> %667, i64 4, !dbg !55
  %680 = extractelement <16 x i1> %667, i64 3, !dbg !55
  %681 = extractelement <16 x i1> %667, i64 2, !dbg !55
  %682 = extractelement <16 x i1> %667, i64 1, !dbg !55
  %683 = extractelement <16 x i1> %667, i64 0, !dbg !55
  %684 = add i32 %16, %20, !dbg !56
  %685 = shl i32 %684, 2, !dbg !56
  %686 = add i32 %20, %17, !dbg !56
  %687 = shl i32 %686, 2, !dbg !56
  %688 = add i32 %20, %18, !dbg !56
  %689 = shl i32 %688, 2, !dbg !56
  %690 = add i32 %20, %19, !dbg !56
  %691 = shl i32 %690, 2, !dbg !56
  %692 = sext i32 %685 to i64, !dbg !57
  %693 = getelementptr float, ptr addrspace(1) %5, i64 %692, !dbg !57
  %694 = sext i32 %687 to i64, !dbg !57
  %695 = getelementptr float, ptr addrspace(1) %5, i64 %694, !dbg !57
  %696 = sext i32 %689 to i64, !dbg !57
  %697 = getelementptr float, ptr addrspace(1) %5, i64 %696, !dbg !57
  %698 = sext i32 %691 to i64, !dbg !57
  %699 = getelementptr float, ptr addrspace(1) %5, i64 %698, !dbg !57
  %bc = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %700 = extractelement <16 x i32> %bc, i64 15, !dbg !58
  %701 = select i1 %668, i32 0, i32 %700, !dbg !55
  %bc76 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %702 = extractelement <16 x i32> %bc76, i64 14, !dbg !58
  %703 = select i1 %669, i32 0, i32 %702, !dbg !55
  %bc77 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %704 = extractelement <16 x i32> %bc77, i64 13, !dbg !58
  %705 = select i1 %670, i32 0, i32 %704, !dbg !55
  %bc78 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %706 = extractelement <16 x i32> %bc78, i64 12, !dbg !58
  %707 = select i1 %671, i32 0, i32 %706, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %701, i32 %703, i32 %705, i32 %707, ptr addrspace(1) %693, i1 %25) #4, !dbg !58
  %bc79 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %708 = extractelement <16 x i32> %bc79, i64 11, !dbg !58
  %709 = select i1 %672, i32 0, i32 %708, !dbg !55
  %bc80 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %710 = extractelement <16 x i32> %bc80, i64 10, !dbg !58
  %711 = select i1 %673, i32 0, i32 %710, !dbg !55
  %bc81 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %712 = extractelement <16 x i32> %bc81, i64 9, !dbg !58
  %713 = select i1 %674, i32 0, i32 %712, !dbg !55
  %bc82 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %714 = extractelement <16 x i32> %bc82, i64 8, !dbg !58
  %715 = select i1 %675, i32 0, i32 %714, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %709, i32 %711, i32 %713, i32 %715, ptr addrspace(1) %695, i1 %25) #4, !dbg !58
  %bc83 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %716 = extractelement <16 x i32> %bc83, i64 7, !dbg !58
  %717 = select i1 %676, i32 0, i32 %716, !dbg !55
  %bc84 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %718 = extractelement <16 x i32> %bc84, i64 6, !dbg !58
  %719 = select i1 %677, i32 0, i32 %718, !dbg !55
  %bc85 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %720 = extractelement <16 x i32> %bc85, i64 5, !dbg !58
  %721 = select i1 %678, i32 0, i32 %720, !dbg !55
  %bc86 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %722 = extractelement <16 x i32> %bc86, i64 4, !dbg !58
  %723 = select i1 %679, i32 0, i32 %722, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %717, i32 %719, i32 %721, i32 %723, ptr addrspace(1) %697, i1 %25) #4, !dbg !58
  %bc87 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %724 = extractelement <16 x i32> %bc87, i64 3, !dbg !58
  %725 = select i1 %680, i32 0, i32 %724, !dbg !55
  %bc88 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %726 = extractelement <16 x i32> %bc88, i64 2, !dbg !58
  %727 = select i1 %681, i32 0, i32 %726, !dbg !55
  %bc89 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %728 = extractelement <16 x i32> %bc89, i64 1, !dbg !58
  %729 = select i1 %682, i32 0, i32 %728, !dbg !55
  %bc90 = bitcast <16 x float> %666 to <16 x i32>, !dbg !58
  %730 = extractelement <16 x i32> %bc90, i64 0, !dbg !58
  %731 = select i1 %683, i32 0, i32 %730, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %725, i32 %727, i32 %729, i32 %731, ptr addrspace(1) %699, i1 %25) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py", directory: "inductor_cache/x4")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_1", linkageName: "triton_poi_fused_pixel_shuffle_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 26, scope: !7)
!20 = !DILocation(line: 31, column: 21, scope: !7)
!21 = !DILocation(line: 31, column: 27, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 27, scope: !7)
!24 = !DILocation(line: 35, column: 37, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 53, scope: !7)
!27 = !DILocation(line: 35, column: 62, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 35, column: 50, scope: !7)
!30 = !DILocation(line: 35, column: 58, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 67, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 45, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 50, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 51, scope: !7)
!42 = !DILocation(line: 39, column: 31, scope: !7)
!43 = !DILocation(line: 39, column: 51, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 26, scope: !7)
!46 = !DILocation(line: 45, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 52, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 53, column: 30, scope: !7)
!57 = !DILocation(line: 53, column: 25, scope: !7)
!58 = !DILocation(line: 53, column: 44, scope: !7)
!59 = !DILocation(line: 53, column: 4, scope: !7)
