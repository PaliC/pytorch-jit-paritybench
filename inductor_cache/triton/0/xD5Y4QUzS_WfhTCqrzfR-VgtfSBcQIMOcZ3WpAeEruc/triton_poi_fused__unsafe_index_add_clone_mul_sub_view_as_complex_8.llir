; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_clone_mul_sub_view_as_complex_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 2, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 2, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 4, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = lshr i32 %13, 1, !dbg !17
  %21 = and i32 %20, 15, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = icmp slt i32 %22, 12, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %24 = sdiv i32 %.frozen, 3, !dbg !20
  %25 = mul i32 %24, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = ashr exact i32 %16, 1, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !23
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %23) #1, !dbg !24
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %23) #1, !dbg !24
  %31 = sext i32 %.decomposed to i64, !dbg !25
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %31, !dbg !25
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %23) #1, !dbg !26
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %23) #1, !dbg !26
  %35 = getelementptr i64, ptr addrspace(1) %3, i64 %31, !dbg !27
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %23) #1, !dbg !28
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %23) #1, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !29
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %23) #1, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %23) #1, !dbg !30
  %41 = getelementptr i64, ptr addrspace(1) %5, i64 %27, !dbg !31
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %23) #1, !dbg !32
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %23) #1, !dbg !32
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !33
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #1, !dbg !34
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #1, !dbg !34
  %47 = bitcast i32 %46 to float, !dbg !34
  %48 = icmp slt i64 %30, 0, !dbg !35
  %49 = lshr i64 %34, 60, !dbg !36
  %50 = and i64 %49, 8, !dbg !36
  %51 = add i64 %50, %34, !dbg !36
  %52 = shl i64 %30, 4, !dbg !37
  %53 = add i64 %52, 224, !dbg !37
  %54 = select i1 %48, i64 %53, i64 %52, !dbg !37
  %55 = mul i32 %26, 224, !dbg !38
  %56 = sext i32 %55 to i64, !dbg !39
  %.idx = shl i64 %51, 3, !dbg !40
  %57 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !40
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %54, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %56, !dbg !40
  %60 = and i1 %17, %23, !dbg !41
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %60) #1, !dbg !42
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !42
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !42
  %64 = lshr i64 %37, 60, !dbg !43
  %65 = and i64 %64, 8, !dbg !43
  %66 = add i64 %65, %37, !dbg !43
  %.idx1 = shl i64 %66, 3, !dbg !44
  %67 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx1, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %54, !dbg !44
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %56, !dbg !44
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %60) #1, !dbg !45
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !45
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !45
  %73 = icmp slt i64 %43, 0, !dbg !46
  %74 = shl i64 %43, 4, !dbg !47
  %75 = add i64 %74, 224, !dbg !47
  %76 = select i1 %73, i64 %75, i64 %74, !dbg !47
  %77 = getelementptr float, ptr addrspace(1) %57, i64 %76, !dbg !48
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %56, !dbg !48
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %60) #1, !dbg !49
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !49
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !49
  %82 = getelementptr float, ptr addrspace(1) %67, i64 %76, !dbg !50
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %56, !dbg !50
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %60) #1, !dbg !51
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !51
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !51
  %87 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !49
  %88 = insertelement <2 x i32> %87, i32 %62, i64 1, !dbg !49
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !49
  %90 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !51
  %91 = insertelement <2 x i32> %90, i32 %71, i64 1, !dbg !51
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !51
  %93 = fsub <2 x float> %92, %89, !dbg !52
  %94 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !53
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !53
  %96 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %97 = fmul <2 x float> %93, %96, !dbg !53
  %98 = fadd <2 x float> %97, %89, !dbg !54
  %99 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !49
  %100 = insertelement <2 x i32> %99, i32 %63, i64 1, !dbg !49
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !49
  %102 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !51
  %103 = insertelement <2 x i32> %102, i32 %72, i64 1, !dbg !51
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !51
  %105 = fsub <2 x float> %104, %101, !dbg !52
  %106 = fmul <2 x float> %105, %96, !dbg !53
  %107 = fadd <2 x float> %106, %101, !dbg !54
  %108 = extractelement <2 x float> %98, i64 0, !dbg !55
  %109 = extractelement <2 x float> %98, i64 1, !dbg !56
  %110 = fsub float %108, %109, !dbg !55
  %111 = extractelement <2 x float> %107, i64 0, !dbg !55
  %112 = extractelement <2 x float> %107, i64 1, !dbg !56
  %113 = fsub float %111, %112, !dbg !55
  %114 = fmul float %110, %47, !dbg !57
  %115 = fmul float %113, %47, !dbg !57
  %116 = fadd float %109, %114, !dbg !56
  %117 = fadd float %112, %115, !dbg !56
  %118 = shl i32 %22, 1, !dbg !58
  %119 = mul i32 %26, 24, !dbg !59
  %120 = add i32 %118, %119, !dbg !60
  %121 = sext i32 %120 to i64, !dbg !61
  %122 = getelementptr float, ptr addrspace(1) %7, i64 %121, !dbg !61
  %123 = bitcast float %116 to i32, !dbg !62
  %124 = bitcast float %117 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %122, i1 %60) #1, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cby3hkkvsjlucgitvlw2bgkn44672irm3pruyvhwc4qob4se4rjg.py", directory: "inductor_cache/by")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_clone_mul_sub_view_as_complex_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_clone_mul_sub_view_as_complex_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_clone_mul_sub_view_as_complex_8", linkageName: "triton_poi_fused__unsafe_index_add_clone_mul_sub_view_as_complex_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 47, column: 32, scope: !7)
!37 = !DILocation(line: 48, column: 48, scope: !7)
!38 = !DILocation(line: 48, column: 59, scope: !7)
!39 = !DILocation(line: 48, column: 55, scope: !7)
!40 = !DILocation(line: 48, column: 31, scope: !7)
!41 = !DILocation(line: 48, column: 72, scope: !7)
!42 = !DILocation(line: 48, column: 64, scope: !7)
!43 = !DILocation(line: 51, column: 35, scope: !7)
!44 = !DILocation(line: 52, column: 31, scope: !7)
!45 = !DILocation(line: 52, column: 65, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 59, column: 48, scope: !7)
!48 = !DILocation(line: 59, column: 31, scope: !7)
!49 = !DILocation(line: 59, column: 65, scope: !7)
!50 = !DILocation(line: 60, column: 31, scope: !7)
!51 = !DILocation(line: 60, column: 66, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 32, scope: !7)
!59 = !DILocation(line: 67, column: 40, scope: !7)
!60 = !DILocation(line: 67, column: 37, scope: !7)
!61 = !DILocation(line: 67, column: 25, scope: !7)
!62 = !DILocation(line: 67, column: 52, scope: !7)
!63 = !DILocation(line: 67, column: 4, scope: !7)
