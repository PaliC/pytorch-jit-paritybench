; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_convolution_elu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 256, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %10, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = srem i32 %8, 64, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !14
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #5, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #5, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #5, !dbg !15
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %9) #5, !dbg !15
  %21 = shl i32 %8, 12, !dbg !16
  %22 = or disjoint i32 %21, %13
  %23 = sext i32 %22 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %26 = bitcast i32 %20 to float, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = fadd float %26, %28, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %31 = bitcast i32 %30 to float, !dbg !18
  %32 = fadd float %26, %31, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %34 = bitcast i32 %33 to float, !dbg !18
  %35 = fadd float %26, %34, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %37 = bitcast i32 %36 to float, !dbg !18
  %38 = fadd float %26, %37, !dbg !19
  %39 = select i1 %9, float %38, float 0.000000e+00, !dbg !20
  %40 = select i1 %9, float %35, float 0.000000e+00, !dbg !20
  %41 = select i1 %9, float %32, float 0.000000e+00, !dbg !20
  %42 = select i1 %9, float %29, float 0.000000e+00, !dbg !20
  %43 = bitcast float %38 to i32, !dbg !21
  %44 = bitcast float %35 to i32, !dbg !21
  %45 = bitcast float %32 to i32, !dbg !21
  %46 = bitcast float %29 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %43, i32 %44, i32 %45, i32 %46, ptr addrspace(1) %24, i1 %9) #5, !dbg !21
  %47 = or disjoint i32 %22, 2048, !dbg !22
  %48 = sext i32 %47 to i64, !dbg !17
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !17
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !18
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !18
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !18
  %55 = bitcast i32 %51 to float, !dbg !18
  %56 = bitcast i32 %52 to float, !dbg !18
  %57 = bitcast i32 %53 to float, !dbg !18
  %58 = bitcast i32 %54 to float, !dbg !18
  %59 = fadd float %26, %55, !dbg !19
  %60 = fadd float %26, %56, !dbg !19
  %61 = fadd float %26, %57, !dbg !19
  %62 = fadd float %26, %58, !dbg !19
  %63 = fsub float %59, %39, !dbg !23
  %64 = fsub float %60, %40, !dbg !23
  %65 = fsub float %61, %41, !dbg !23
  %66 = fsub float %62, %42, !dbg !23
  %67 = select i1 %9, float 2.000000e+00, float 1.000000e+00, !dbg !27
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %67) #5, !dbg !28
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %67) #5, !dbg !28
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %67) #5, !dbg !28
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %67) #5, !dbg !28
  %72 = fadd float %39, %68, !dbg !29
  %73 = fsub float %59, %72, !dbg !30
  %74 = fmul float %63, %73, !dbg !31
  %75 = fadd float %74, 0.000000e+00, !dbg !32
  %76 = fadd float %40, %69, !dbg !29
  %77 = fsub float %60, %76, !dbg !30
  %78 = fmul float %64, %77, !dbg !31
  %79 = fadd float %78, 0.000000e+00, !dbg !32
  %80 = fadd float %41, %70, !dbg !29
  %81 = fsub float %61, %80, !dbg !30
  %82 = fmul float %65, %81, !dbg !31
  %83 = fadd float %82, 0.000000e+00, !dbg !32
  %84 = fadd float %42, %71, !dbg !29
  %85 = fsub float %62, %84, !dbg !30
  %86 = fmul float %66, %85, !dbg !31
  %87 = fadd float %86, 0.000000e+00, !dbg !32
  %88 = select i1 %9, float %72, float 0.000000e+00, !dbg !20
  %89 = select i1 %9, float %76, float 0.000000e+00, !dbg !20
  %90 = select i1 %9, float %80, float 0.000000e+00, !dbg !20
  %91 = select i1 %9, float %84, float 0.000000e+00, !dbg !20
  %92 = select i1 %9, float %83, float 0.000000e+00, !dbg !33
  %93 = select i1 %9, float %87, float 0.000000e+00, !dbg !33
  %94 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !27
  %95 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !27
  %96 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !27
  %97 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !27
  %98 = bitcast float %59 to i32, !dbg !21
  %99 = bitcast float %60 to i32, !dbg !21
  %100 = bitcast float %61 to i32, !dbg !21
  %101 = bitcast float %62 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %98, i32 %99, i32 %100, i32 %101, ptr addrspace(1) %49, i1 %9) #5, !dbg !21
  %102 = lshr i32 %10, 5, !dbg !12
  %103 = fsub float %89, %88, !dbg !34
  %104 = select i1 %9, float 4.000000e+00, float 0.000000e+00, !dbg !37
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !38
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %104) #5, !dbg !39
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !40
  %108 = fmul float %103, %107, !dbg !41
  %109 = fadd float %88, %108, !dbg !42
  %110 = fadd float %75, %79, !dbg !43
  %111 = select i1 %9, float %110, float 0.000000e+00, !dbg !43
  %112 = fmul float %103, %103, !dbg !44
  %113 = fmul float %112, %94, !dbg !45
  %114 = fmul float %113, %107, !dbg !46
  %115 = fadd float %111, %114, !dbg !47
  %116 = fsub float %90, %109, !dbg !34
  %117 = select i1 %9, float 6.000000e+00, float 0.000000e+00, !dbg !37
  %118 = fcmp oeq float %117, 0.000000e+00, !dbg !38
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %117) #5, !dbg !39
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !40
  %121 = fmul float %120, %116, !dbg !41
  %122 = fadd float %109, %121, !dbg !42
  %123 = fadd float %92, %115, !dbg !43
  %124 = fmul float %116, %116, !dbg !44
  %125 = fmul float %104, %124, !dbg !45
  %126 = fmul float %120, %125, !dbg !46
  %127 = fadd float %123, %126, !dbg !47
  %128 = fsub float %91, %122, !dbg !34
  %129 = select i1 %9, float 8.000000e+00, float 0.000000e+00, !dbg !37
  %130 = fcmp oeq float %129, 0.000000e+00, !dbg !38
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %129) #5, !dbg !39
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !40
  %133 = fmul float %132, %128, !dbg !41
  %134 = fadd float %122, %133, !dbg !42
  %135 = fadd float %93, %127, !dbg !43
  %136 = fmul float %128, %128, !dbg !44
  %137 = fmul float %117, %136, !dbg !45
  %138 = fmul float %132, %137, !dbg !46
  %139 = fadd float %135, %138, !dbg !47
  %140 = bitcast float %134 to i32, !dbg !48
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !48
  %142 = bitcast i32 %141 to float, !dbg !48
  %143 = bitcast float %139 to i32, !dbg !48
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 16, i32 31), !dbg !48
  %145 = bitcast i32 %144 to float, !dbg !48
  %146 = bitcast float %129 to i32, !dbg !48
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !48
  %148 = bitcast i32 %147 to float, !dbg !48
  %149 = fsub float %142, %134, !dbg !34
  %150 = fadd float %129, %148, !dbg !37
  %151 = fcmp oeq float %150, 0.000000e+00, !dbg !38
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %150) #5, !dbg !39
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !40
  %154 = fmul float %153, %149, !dbg !41
  %155 = fadd float %134, %154, !dbg !42
  %156 = fadd float %139, %145, !dbg !43
  %157 = fmul float %149, %149, !dbg !44
  %158 = fmul float %129, %157, !dbg !45
  %159 = fmul float %153, %158, !dbg !46
  %160 = fadd float %156, %159, !dbg !47
  %161 = bitcast float %155 to i32, !dbg !48
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !48
  %163 = bitcast i32 %162 to float, !dbg !48
  %164 = bitcast float %160 to i32, !dbg !48
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !48
  %166 = bitcast i32 %165 to float, !dbg !48
  %167 = bitcast float %150 to i32, !dbg !48
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !48
  %169 = bitcast i32 %168 to float, !dbg !48
  %170 = fsub float %163, %155, !dbg !34
  %171 = fadd float %150, %169, !dbg !37
  %172 = fcmp oeq float %171, 0.000000e+00, !dbg !38
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %171) #5, !dbg !39
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !40
  %175 = fmul float %170, %174, !dbg !41
  %176 = fadd float %155, %175, !dbg !42
  %177 = fadd float %160, %166, !dbg !43
  %178 = fmul float %170, %170, !dbg !44
  %179 = fmul float %150, %178, !dbg !45
  %180 = fmul float %174, %179, !dbg !46
  %181 = fadd float %177, %180, !dbg !47
  %182 = bitcast float %176 to i32, !dbg !48
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 4, i32 31), !dbg !48
  %184 = bitcast i32 %183 to float, !dbg !48
  %185 = bitcast float %181 to i32, !dbg !48
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 4, i32 31), !dbg !48
  %187 = bitcast i32 %186 to float, !dbg !48
  %188 = bitcast float %171 to i32, !dbg !48
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !48
  %190 = bitcast i32 %189 to float, !dbg !48
  %191 = fsub float %184, %176, !dbg !34
  %192 = fadd float %171, %190, !dbg !37
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !38
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %192) #5, !dbg !39
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !40
  %196 = fmul float %191, %195, !dbg !41
  %197 = fadd float %176, %196, !dbg !42
  %198 = fadd float %181, %187, !dbg !43
  %199 = fmul float %191, %191, !dbg !44
  %200 = fmul float %171, %199, !dbg !45
  %201 = fmul float %195, %200, !dbg !46
  %202 = fadd float %198, %201, !dbg !47
  %203 = bitcast float %197 to i32, !dbg !48
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !48
  %205 = bitcast i32 %204 to float, !dbg !48
  %206 = bitcast float %202 to i32, !dbg !48
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !48
  %208 = bitcast i32 %207 to float, !dbg !48
  %209 = bitcast float %192 to i32, !dbg !48
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !48
  %211 = bitcast i32 %210 to float, !dbg !48
  %212 = fsub float %205, %197, !dbg !34
  %213 = fadd float %192, %211, !dbg !37
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !38
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %213) #5, !dbg !39
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !40
  %217 = fmul float %212, %216, !dbg !41
  %218 = fadd float %197, %217, !dbg !42
  %219 = fadd float %202, %208, !dbg !43
  %220 = fmul float %212, %212, !dbg !44
  %221 = fmul float %192, %220, !dbg !45
  %222 = fmul float %216, %221, !dbg !46
  %223 = fadd float %219, %222, !dbg !47
  %224 = bitcast float %218 to i32, !dbg !48
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !48
  %226 = bitcast i32 %225 to float, !dbg !48
  %227 = bitcast float %223 to i32, !dbg !48
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !48
  %229 = bitcast i32 %228 to float, !dbg !48
  %230 = bitcast float %213 to i32, !dbg !48
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 1, i32 31), !dbg !48
  %232 = bitcast i32 %231 to float, !dbg !48
  %233 = fsub float %226, %218, !dbg !34
  %234 = fadd float %213, %232, !dbg !37
  %235 = fcmp oeq float %234, 0.000000e+00, !dbg !38
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %234) #5, !dbg !39
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !40
  %238 = fmul float %233, %237, !dbg !41
  %239 = fadd float %218, %238, !dbg !42
  %240 = fadd float %223, %229, !dbg !43
  %241 = fmul float %233, %233, !dbg !44
  %242 = fmul float %213, %241, !dbg !45
  %243 = fmul float %237, %242, !dbg !46
  %244 = fadd float %240, %243, !dbg !47
  %245 = icmp eq i32 %11, 0, !dbg !48
  %246 = and i32 %102, 15, !dbg !48
  %247 = zext nneg i32 %246 to i64, !dbg !48
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !48
  %249 = bitcast float %239 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 %245) #5, !dbg !48
  %250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %247, !dbg !48
  %251 = bitcast float %244 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 %245) #5, !dbg !48
  %252 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %247, !dbg !48
  %253 = bitcast float %234 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 %245) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %254 = icmp slt i32 %10, 16, !dbg !48
  %255 = sext i32 %10 to i64, !dbg !48
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i64 %255, !dbg !48
  %257 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %256, i1 %254) #5, !dbg !48
  %258 = bitcast i32 %257 to float, !dbg !48
  %259 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %255, !dbg !48
  %260 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %259, i1 %254) #5, !dbg !48
  %261 = bitcast i32 %260 to float, !dbg !48
  %262 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %255, !dbg !48
  %263 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %262, i1 %254) #5, !dbg !48
  %264 = bitcast i32 %263 to float, !dbg !48
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !48
  %266 = bitcast i32 %265 to float, !dbg !48
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !48
  %268 = bitcast i32 %267 to float, !dbg !48
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 8, i32 31), !dbg !48
  %270 = bitcast i32 %269 to float, !dbg !48
  %271 = fsub float %266, %258, !dbg !34
  %272 = fadd float %264, %270, !dbg !37
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !38
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %272) #5, !dbg !39
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !40
  %276 = fmul float %271, %275, !dbg !41
  %277 = fadd float %276, %258, !dbg !42
  %278 = fadd float %261, %268, !dbg !43
  %279 = fmul float %271, %271, !dbg !44
  %280 = fmul float %279, %264, !dbg !45
  %281 = fmul float %280, %275, !dbg !46
  %282 = fadd float %278, %281, !dbg !47
  %283 = bitcast float %277 to i32, !dbg !48
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !48
  %285 = bitcast i32 %284 to float, !dbg !48
  %286 = bitcast float %282 to i32, !dbg !48
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !48
  %288 = bitcast i32 %287 to float, !dbg !48
  %289 = bitcast float %272 to i32, !dbg !48
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 4, i32 31), !dbg !48
  %291 = bitcast i32 %290 to float, !dbg !48
  %292 = fsub float %285, %277, !dbg !34
  %293 = fadd float %272, %291, !dbg !37
  %294 = fcmp oeq float %293, 0.000000e+00, !dbg !38
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float %293) #5, !dbg !39
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !40
  %297 = fmul float %292, %296, !dbg !41
  %298 = fadd float %277, %297, !dbg !42
  %299 = fadd float %282, %288, !dbg !43
  %300 = fmul float %292, %292, !dbg !44
  %301 = fmul float %272, %300, !dbg !45
  %302 = fmul float %296, %301, !dbg !46
  %303 = fadd float %299, %302, !dbg !47
  %304 = bitcast float %298 to i32, !dbg !48
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !48
  %306 = bitcast i32 %305 to float, !dbg !48
  %307 = bitcast float %303 to i32, !dbg !48
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !48
  %309 = bitcast i32 %308 to float, !dbg !48
  %310 = bitcast float %293 to i32, !dbg !48
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !48
  %312 = bitcast i32 %311 to float, !dbg !48
  %313 = fsub float %306, %298, !dbg !34
  %314 = fadd float %293, %312, !dbg !37
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !38
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float %314) #5, !dbg !39
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !40
  %318 = fmul float %313, %317, !dbg !41
  %319 = fadd float %298, %318, !dbg !42
  %320 = fadd float %303, %309, !dbg !43
  %321 = fmul float %313, %313, !dbg !44
  %322 = fmul float %293, %321, !dbg !45
  %323 = fmul float %317, %322, !dbg !46
  %324 = fadd float %320, %323, !dbg !47
  %325 = bitcast float %319 to i32, !dbg !48
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !48
  %327 = bitcast i32 %326 to float, !dbg !48
  %328 = bitcast float %324 to i32, !dbg !48
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !48
  %330 = bitcast i32 %329 to float, !dbg !48
  %331 = bitcast float %314 to i32, !dbg !48
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 1, i32 31), !dbg !48
  %333 = bitcast i32 %332 to float, !dbg !48
  %334 = fsub float %327, %319, !dbg !34
  %335 = fadd float %314, %333, !dbg !37
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !38
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %335) #5, !dbg !39
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !40
  %339 = fmul float %334, %338, !dbg !41
  %340 = fadd float %319, %339, !dbg !42
  %341 = fadd float %324, %330, !dbg !43
  %342 = fmul float %334, %334, !dbg !44
  %343 = fmul float %314, %342, !dbg !45
  %344 = fmul float %338, %343, !dbg !46
  %345 = fadd float %341, %344, !dbg !47
  %346 = and i32 %10, 15, !dbg !48
  %347 = icmp eq i32 %346, 0, !dbg !48
  %348 = and i1 %254, %347, !dbg !48
  %349 = bitcast float %340 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %349, i1 %348) #5, !dbg !48
  %350 = bitcast float %345 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %350, i1 %348) #5, !dbg !48
  %351 = bitcast float %335 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %351, i1 %348) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %352 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %353 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !48
  %354 = sext i32 %8 to i64, !dbg !49
  %355 = getelementptr float, ptr addrspace(1) %3, i64 %354, !dbg !49
  %urem = and i32 %10, 511, !dbg !50
  %356 = icmp eq i32 %urem, 0, !dbg !50
  %357 = bitcast float %352 to i32, !dbg !50
  %358 = and i1 %356, %9, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %355, i1 %358) #5, !dbg !50
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float 4.096000e+03) #5, !dbg !51
  %360 = fadd float %359, 0x3EE4F8B580000000, !dbg !52
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %361, 0, !dbg !53
  br i1 %.not.i, label %364, label %362, !dbg !53

362:                                              ; preds = %7
  %363 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %360), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

364:                                              ; preds = %7
  %365 = tail call float @llvm.nvvm.rsqrt.approx.f(float %360), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %362, %364
  %.0.i = phi float [ %363, %362 ], [ %365, %364 ], !dbg !53
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i18 = icmp eq i32 %369, 0, !dbg !53
  br i1 %.not.i18, label %372, label %370, !dbg !53

370:                                              ; preds = %__nv_rsqrtf.exit
  %371 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %360), !dbg !53
  br label %__nv_rsqrtf.exit20, !dbg !53

372:                                              ; preds = %__nv_rsqrtf.exit
  %373 = tail call float @llvm.nvvm.rsqrt.approx.f(float %360), !dbg !53
  br label %__nv_rsqrtf.exit20, !dbg !53

__nv_rsqrtf.exit20:                               ; preds = %370, %372
  %.0.i19 = phi float [ %371, %370 ], [ %373, %372 ], !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %374 = getelementptr float, ptr addrspace(1) %1, i64 %354, !dbg !55
  %375 = bitcast float %.0.i to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %374, i1 %358) #5, !dbg !56
  br label %376, !dbg !57

376:                                              ; preds = %__nv_rsqrtf.exit20, %__nv_expm1f.exit103
  %377 = phi i1 [ true, %__nv_rsqrtf.exit20 ], [ false, %__nv_expm1f.exit103 ]
  %378 = phi i32 [ 0, %__nv_rsqrtf.exit20 ], [ 2048, %__nv_expm1f.exit103 ]
  %379 = or disjoint i32 %22, %378, !dbg !58
  %380 = sext i32 %379 to i64, !dbg !59
  %381 = getelementptr float, ptr addrspace(1) %0, i64 %380, !dbg !59
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %381, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !60
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !60
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !60
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !60
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !60
  %387 = bitcast i32 %383 to float, !dbg !60
  %388 = bitcast i32 %384 to float, !dbg !60
  %389 = bitcast i32 %385 to float, !dbg !60
  %390 = bitcast i32 %386 to float, !dbg !60
  %391 = fsub float %387, %352, !dbg !61
  %392 = fsub float %388, %352, !dbg !61
  %393 = fsub float %389, %352, !dbg !61
  %394 = fsub float %390, %352, !dbg !61
  %395 = fmul float %.0.i19, %391, !dbg !62
  %396 = fmul float %.0.i19, %392, !dbg !62
  %397 = fmul float %.0.i19, %393, !dbg !62
  %398 = fmul float %.0.i19, %394, !dbg !62
  %399 = fcmp ogt float %395, 0.000000e+00, !dbg !63
  %400 = fcmp ogt float %396, 0.000000e+00, !dbg !63
  %401 = fcmp ogt float %397, 0.000000e+00, !dbg !63
  %402 = fcmp ogt float %398, 0.000000e+00, !dbg !63
  %403 = fmul float %395, 0x3FF7154760000000, !dbg !64
  %404 = tail call float @llvm.nvvm.round.f(float %403) #5, !dbg !64
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i21 = icmp eq i32 %405, 0, !dbg !64
  %406 = tail call float @llvm.nvvm.fabs.ftz.f(float %395) #5, !dbg !64
  %407 = tail call float @llvm.nvvm.fabs.f(float %395) #5, !dbg !64
  %.03.i = select i1 %.not.i21, float %407, float %406, !dbg !64
  %408 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !64
  %t.0.i = select i1 %408, float 0.000000e+00, float %404, !dbg !64
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %411 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !64
  %j.0.i = select i1 %411, float 1.270000e+02, float %t.0.i, !dbg !64
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not8.i = icmp eq i32 %417, 0, !dbg !64
  br i1 %.not8.i, label %420, label %418, !dbg !64

418:                                              ; preds = %376
  %419 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #5, !dbg !64
  br label %__nv_expm1f.exit, !dbg !64

420:                                              ; preds = %376
  %421 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #5, !dbg !64
  br label %__nv_expm1f.exit, !dbg !64

__nv_expm1f.exit:                                 ; preds = %418, %420
  %.0.i22 = phi float [ %419, %418 ], [ %421, %420 ], !dbg !64
  %.not7.i = icmp eq i32 %416, 0, !dbg !64
  %.not6.i = icmp eq i32 %415, 0, !dbg !64
  %.not5.i = icmp eq i32 %414, 0, !dbg !64
  %.not4.i = icmp eq i32 %413, 0, !dbg !64
  %.not3.i = icmp eq i32 %412, 0, !dbg !64
  %.not2.i = icmp eq i32 %410, 0, !dbg !64
  %422 = fneg float %t.0.i, !dbg !64
  %.not1.i = icmp eq i32 %409, 0, !dbg !64
  %423 = tail call float @llvm.nvvm.fma.rn.f(float %422, float 0x3FE62E4000000000, float %395) #5, !dbg !64
  %424 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %422, float 0x3FE62E4000000000, float %395) #5, !dbg !64
  %.04.i = select i1 %.not1.i, float %423, float %424, !dbg !64
  %425 = tail call float @llvm.nvvm.fma.rn.f(float %422, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !64
  %426 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %422, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !64
  %.05.i = select i1 %.not2.i, float %425, float %426, !dbg !64
  %427 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !64
  %428 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !64
  %.07.i = select i1 %.not3.i, float %427, float %428, !dbg !64
  %429 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !64
  %430 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !64
  %.08.i = select i1 %.not4.i, float %429, float %430, !dbg !64
  %431 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !64
  %432 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !64
  %.09.i = select i1 %.not5.i, float %431, float %432, !dbg !64
  %433 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %434 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %.06.i = select i1 %.not6.i, float %433, float %434, !dbg !64
  %435 = fmul float %.05.i, %.06.i, !dbg !64
  %436 = tail call float @llvm.nvvm.fma.rn.f(float %435, float %.05.i, float %.05.i) #5, !dbg !64
  %437 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %435, float %.05.i, float %.05.i) #5, !dbg !64
  %.01.i = select i1 %.not7.i, float %436, float %437, !dbg !64
  %438 = fadd float %.0.i22, -1.000000e+00, !dbg !64
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not9.i = icmp eq i32 %439, 0, !dbg !64
  %440 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i22, float %438) #5, !dbg !64
  %441 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i22, float %438) #5, !dbg !64
  %.02.i = select i1 %.not9.i, float %441, float %440, !dbg !64
  %442 = fadd float %.02.i, %.02.i, !dbg !64
  %u.0.i = select i1 %411, float %442, float %.02.i, !dbg !64
  %443 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !64
  %u.1.i = select i1 %443, float 0x7FF0000000000000, float %u.0.i, !dbg !64
  %444 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !64
  %u.2.i = select i1 %444, float -1.000000e+00, float %u.1.i, !dbg !64
  %445 = fcmp oeq float %395, 0.000000e+00, !dbg !64
  %446 = fadd float %395, %395, !dbg !64
  %u.3.i = select i1 %445, float %446, float %u.2.i, !dbg !64
  %447 = fmul float %396, 0x3FF7154760000000, !dbg !64
  %448 = tail call float @llvm.nvvm.round.f(float %447) #5, !dbg !64
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i23 = icmp eq i32 %449, 0, !dbg !64
  %450 = tail call float @llvm.nvvm.fabs.ftz.f(float %396) #5, !dbg !64
  %451 = tail call float @llvm.nvvm.fabs.f(float %396) #5, !dbg !64
  %.03.i24 = select i1 %.not.i23, float %451, float %450, !dbg !64
  %452 = fcmp olt float %.03.i24, 0x3FDA3D70A0000000, !dbg !64
  %t.0.i25 = select i1 %452, float 0.000000e+00, float %448, !dbg !64
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %455 = fcmp oeq float %t.0.i25, 1.280000e+02, !dbg !64
  %j.0.i26 = select i1 %455, float 1.270000e+02, float %t.0.i25, !dbg !64
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not8.i27 = icmp eq i32 %461, 0, !dbg !64
  br i1 %.not8.i27, label %464, label %462, !dbg !64

462:                                              ; preds = %__nv_expm1f.exit
  %463 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i26) #5, !dbg !64
  br label %__nv_expm1f.exit49, !dbg !64

464:                                              ; preds = %__nv_expm1f.exit
  %465 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i26) #5, !dbg !64
  br label %__nv_expm1f.exit49, !dbg !64

__nv_expm1f.exit49:                               ; preds = %462, %464
  %.0.i28 = phi float [ %463, %462 ], [ %465, %464 ], !dbg !64
  %.not7.i29 = icmp eq i32 %460, 0, !dbg !64
  %.not6.i30 = icmp eq i32 %459, 0, !dbg !64
  %.not5.i31 = icmp eq i32 %458, 0, !dbg !64
  %.not4.i32 = icmp eq i32 %457, 0, !dbg !64
  %.not3.i33 = icmp eq i32 %456, 0, !dbg !64
  %.not2.i34 = icmp eq i32 %454, 0, !dbg !64
  %466 = fneg float %t.0.i25, !dbg !64
  %.not1.i35 = icmp eq i32 %453, 0, !dbg !64
  %467 = tail call float @llvm.nvvm.fma.rn.f(float %466, float 0x3FE62E4000000000, float %396) #5, !dbg !64
  %468 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %466, float 0x3FE62E4000000000, float %396) #5, !dbg !64
  %.04.i36 = select i1 %.not1.i35, float %467, float %468, !dbg !64
  %469 = tail call float @llvm.nvvm.fma.rn.f(float %466, float 0x3EB7F7D1C0000000, float %.04.i36) #5, !dbg !64
  %470 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %466, float 0x3EB7F7D1C0000000, float %.04.i36) #5, !dbg !64
  %.05.i37 = select i1 %.not2.i34, float %469, float %470, !dbg !64
  %471 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i37, float 0x3F812ACC60000000) #5, !dbg !64
  %472 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i37, float 0x3F812ACC60000000) #5, !dbg !64
  %.07.i38 = select i1 %.not3.i33, float %471, float %472, !dbg !64
  %473 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i38, float %.05.i37, float 0x3FA5557C60000000) #5, !dbg !64
  %474 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i38, float %.05.i37, float 0x3FA5557C60000000) #5, !dbg !64
  %.08.i39 = select i1 %.not4.i32, float %473, float %474, !dbg !64
  %475 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i39, float %.05.i37, float 0x3FC5553EC0000000) #5, !dbg !64
  %476 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i39, float %.05.i37, float 0x3FC5553EC0000000) #5, !dbg !64
  %.09.i40 = select i1 %.not5.i31, float %475, float %476, !dbg !64
  %477 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i40, float %.05.i37, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %478 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i40, float %.05.i37, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %.06.i41 = select i1 %.not6.i30, float %477, float %478, !dbg !64
  %479 = fmul float %.05.i37, %.06.i41, !dbg !64
  %480 = tail call float @llvm.nvvm.fma.rn.f(float %479, float %.05.i37, float %.05.i37) #5, !dbg !64
  %481 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %479, float %.05.i37, float %.05.i37) #5, !dbg !64
  %.01.i42 = select i1 %.not7.i29, float %480, float %481, !dbg !64
  %482 = fadd float %.0.i28, -1.000000e+00, !dbg !64
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not9.i43 = icmp eq i32 %483, 0, !dbg !64
  %484 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i42, float %.0.i28, float %482) #5, !dbg !64
  %485 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i42, float %.0.i28, float %482) #5, !dbg !64
  %.02.i44 = select i1 %.not9.i43, float %485, float %484, !dbg !64
  %486 = fadd float %.02.i44, %.02.i44, !dbg !64
  %u.0.i45 = select i1 %455, float %486, float %.02.i44, !dbg !64
  %487 = fcmp ogt float %j.0.i26, 1.280000e+02, !dbg !64
  %u.1.i46 = select i1 %487, float 0x7FF0000000000000, float %u.0.i45, !dbg !64
  %488 = fcmp olt float %j.0.i26, -2.500000e+01, !dbg !64
  %u.2.i47 = select i1 %488, float -1.000000e+00, float %u.1.i46, !dbg !64
  %489 = fcmp oeq float %396, 0.000000e+00, !dbg !64
  %490 = fadd float %396, %396, !dbg !64
  %u.3.i48 = select i1 %489, float %490, float %u.2.i47, !dbg !64
  %491 = fmul float %397, 0x3FF7154760000000, !dbg !64
  %492 = tail call float @llvm.nvvm.round.f(float %491) #5, !dbg !64
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i50 = icmp eq i32 %493, 0, !dbg !64
  %494 = tail call float @llvm.nvvm.fabs.ftz.f(float %397) #5, !dbg !64
  %495 = tail call float @llvm.nvvm.fabs.f(float %397) #5, !dbg !64
  %.03.i51 = select i1 %.not.i50, float %495, float %494, !dbg !64
  %496 = fcmp olt float %.03.i51, 0x3FDA3D70A0000000, !dbg !64
  %t.0.i52 = select i1 %496, float 0.000000e+00, float %492, !dbg !64
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %499 = fcmp oeq float %t.0.i52, 1.280000e+02, !dbg !64
  %j.0.i53 = select i1 %499, float 1.270000e+02, float %t.0.i52, !dbg !64
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not8.i54 = icmp eq i32 %505, 0, !dbg !64
  br i1 %.not8.i54, label %508, label %506, !dbg !64

506:                                              ; preds = %__nv_expm1f.exit49
  %507 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i53) #5, !dbg !64
  br label %__nv_expm1f.exit76, !dbg !64

508:                                              ; preds = %__nv_expm1f.exit49
  %509 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i53) #5, !dbg !64
  br label %__nv_expm1f.exit76, !dbg !64

__nv_expm1f.exit76:                               ; preds = %506, %508
  %.0.i55 = phi float [ %507, %506 ], [ %509, %508 ], !dbg !64
  %.not7.i56 = icmp eq i32 %504, 0, !dbg !64
  %.not6.i57 = icmp eq i32 %503, 0, !dbg !64
  %.not5.i58 = icmp eq i32 %502, 0, !dbg !64
  %.not4.i59 = icmp eq i32 %501, 0, !dbg !64
  %.not3.i60 = icmp eq i32 %500, 0, !dbg !64
  %.not2.i61 = icmp eq i32 %498, 0, !dbg !64
  %510 = fneg float %t.0.i52, !dbg !64
  %.not1.i62 = icmp eq i32 %497, 0, !dbg !64
  %511 = tail call float @llvm.nvvm.fma.rn.f(float %510, float 0x3FE62E4000000000, float %397) #5, !dbg !64
  %512 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %510, float 0x3FE62E4000000000, float %397) #5, !dbg !64
  %.04.i63 = select i1 %.not1.i62, float %511, float %512, !dbg !64
  %513 = tail call float @llvm.nvvm.fma.rn.f(float %510, float 0x3EB7F7D1C0000000, float %.04.i63) #5, !dbg !64
  %514 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %510, float 0x3EB7F7D1C0000000, float %.04.i63) #5, !dbg !64
  %.05.i64 = select i1 %.not2.i61, float %513, float %514, !dbg !64
  %515 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i64, float 0x3F812ACC60000000) #5, !dbg !64
  %516 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i64, float 0x3F812ACC60000000) #5, !dbg !64
  %.07.i65 = select i1 %.not3.i60, float %515, float %516, !dbg !64
  %517 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i65, float %.05.i64, float 0x3FA5557C60000000) #5, !dbg !64
  %518 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i65, float %.05.i64, float 0x3FA5557C60000000) #5, !dbg !64
  %.08.i66 = select i1 %.not4.i59, float %517, float %518, !dbg !64
  %519 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i66, float %.05.i64, float 0x3FC5553EC0000000) #5, !dbg !64
  %520 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i66, float %.05.i64, float 0x3FC5553EC0000000) #5, !dbg !64
  %.09.i67 = select i1 %.not5.i58, float %519, float %520, !dbg !64
  %521 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i67, float %.05.i64, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %522 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i67, float %.05.i64, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %.06.i68 = select i1 %.not6.i57, float %521, float %522, !dbg !64
  %523 = fmul float %.05.i64, %.06.i68, !dbg !64
  %524 = tail call float @llvm.nvvm.fma.rn.f(float %523, float %.05.i64, float %.05.i64) #5, !dbg !64
  %525 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %523, float %.05.i64, float %.05.i64) #5, !dbg !64
  %.01.i69 = select i1 %.not7.i56, float %524, float %525, !dbg !64
  %526 = fadd float %.0.i55, -1.000000e+00, !dbg !64
  %527 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not9.i70 = icmp eq i32 %527, 0, !dbg !64
  %528 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i69, float %.0.i55, float %526) #5, !dbg !64
  %529 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i69, float %.0.i55, float %526) #5, !dbg !64
  %.02.i71 = select i1 %.not9.i70, float %529, float %528, !dbg !64
  %530 = fadd float %.02.i71, %.02.i71, !dbg !64
  %u.0.i72 = select i1 %499, float %530, float %.02.i71, !dbg !64
  %531 = fcmp ogt float %j.0.i53, 1.280000e+02, !dbg !64
  %u.1.i73 = select i1 %531, float 0x7FF0000000000000, float %u.0.i72, !dbg !64
  %532 = fcmp olt float %j.0.i53, -2.500000e+01, !dbg !64
  %u.2.i74 = select i1 %532, float -1.000000e+00, float %u.1.i73, !dbg !64
  %533 = fcmp oeq float %397, 0.000000e+00, !dbg !64
  %534 = fadd float %397, %397, !dbg !64
  %u.3.i75 = select i1 %533, float %534, float %u.2.i74, !dbg !64
  %535 = fmul float %398, 0x3FF7154760000000, !dbg !64
  %536 = tail call float @llvm.nvvm.round.f(float %535) #5, !dbg !64
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i77 = icmp eq i32 %537, 0, !dbg !64
  %538 = tail call float @llvm.nvvm.fabs.ftz.f(float %398) #5, !dbg !64
  %539 = tail call float @llvm.nvvm.fabs.f(float %398) #5, !dbg !64
  %.03.i78 = select i1 %.not.i77, float %539, float %538, !dbg !64
  %540 = fcmp olt float %.03.i78, 0x3FDA3D70A0000000, !dbg !64
  %t.0.i79 = select i1 %540, float 0.000000e+00, float %536, !dbg !64
  %541 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %542 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %543 = fcmp oeq float %t.0.i79, 1.280000e+02, !dbg !64
  %j.0.i80 = select i1 %543, float 1.270000e+02, float %t.0.i79, !dbg !64
  %544 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %545 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %546 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %547 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %548 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not8.i81 = icmp eq i32 %549, 0, !dbg !64
  br i1 %.not8.i81, label %552, label %550, !dbg !64

550:                                              ; preds = %__nv_expm1f.exit76
  %551 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i80) #5, !dbg !64
  br label %__nv_expm1f.exit103, !dbg !64

552:                                              ; preds = %__nv_expm1f.exit76
  %553 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i80) #5, !dbg !64
  br label %__nv_expm1f.exit103, !dbg !64

__nv_expm1f.exit103:                              ; preds = %550, %552
  %.0.i82 = phi float [ %551, %550 ], [ %553, %552 ], !dbg !64
  %.not7.i83 = icmp eq i32 %548, 0, !dbg !64
  %.not6.i84 = icmp eq i32 %547, 0, !dbg !64
  %.not5.i85 = icmp eq i32 %546, 0, !dbg !64
  %.not4.i86 = icmp eq i32 %545, 0, !dbg !64
  %.not3.i87 = icmp eq i32 %544, 0, !dbg !64
  %.not2.i88 = icmp eq i32 %542, 0, !dbg !64
  %554 = fneg float %t.0.i79, !dbg !64
  %.not1.i89 = icmp eq i32 %541, 0, !dbg !64
  %555 = tail call float @llvm.nvvm.fma.rn.f(float %554, float 0x3FE62E4000000000, float %398) #5, !dbg !64
  %556 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %554, float 0x3FE62E4000000000, float %398) #5, !dbg !64
  %.04.i90 = select i1 %.not1.i89, float %555, float %556, !dbg !64
  %557 = tail call float @llvm.nvvm.fma.rn.f(float %554, float 0x3EB7F7D1C0000000, float %.04.i90) #5, !dbg !64
  %558 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %554, float 0x3EB7F7D1C0000000, float %.04.i90) #5, !dbg !64
  %.05.i91 = select i1 %.not2.i88, float %557, float %558, !dbg !64
  %559 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i91, float 0x3F812ACC60000000) #5, !dbg !64
  %560 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i91, float 0x3F812ACC60000000) #5, !dbg !64
  %.07.i92 = select i1 %.not3.i87, float %559, float %560, !dbg !64
  %561 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i92, float %.05.i91, float 0x3FA5557C60000000) #5, !dbg !64
  %562 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i92, float %.05.i91, float 0x3FA5557C60000000) #5, !dbg !64
  %.08.i93 = select i1 %.not4.i86, float %561, float %562, !dbg !64
  %563 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i93, float %.05.i91, float 0x3FC5553EC0000000) #5, !dbg !64
  %564 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i93, float %.05.i91, float 0x3FC5553EC0000000) #5, !dbg !64
  %.09.i94 = select i1 %.not5.i85, float %563, float %564, !dbg !64
  %565 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i94, float %.05.i91, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %566 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i94, float %.05.i91, float 0x3FDFFFFFC0000000) #5, !dbg !64
  %.06.i95 = select i1 %.not6.i84, float %565, float %566, !dbg !64
  %567 = fmul float %.05.i91, %.06.i95, !dbg !64
  %568 = tail call float @llvm.nvvm.fma.rn.f(float %567, float %.05.i91, float %.05.i91) #5, !dbg !64
  %569 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %567, float %.05.i91, float %.05.i91) #5, !dbg !64
  %.01.i96 = select i1 %.not7.i83, float %568, float %569, !dbg !64
  %570 = fadd float %.0.i82, -1.000000e+00, !dbg !64
  %571 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not9.i97 = icmp eq i32 %571, 0, !dbg !64
  %572 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i96, float %.0.i82, float %570) #5, !dbg !64
  %573 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i96, float %.0.i82, float %570) #5, !dbg !64
  %.02.i98 = select i1 %.not9.i97, float %573, float %572, !dbg !64
  %574 = fadd float %.02.i98, %.02.i98, !dbg !64
  %u.0.i99 = select i1 %543, float %574, float %.02.i98, !dbg !64
  %575 = fcmp ogt float %j.0.i80, 1.280000e+02, !dbg !64
  %u.1.i100 = select i1 %575, float 0x7FF0000000000000, float %u.0.i99, !dbg !64
  %576 = fcmp olt float %j.0.i80, -2.500000e+01, !dbg !64
  %u.2.i101 = select i1 %576, float -1.000000e+00, float %u.1.i100, !dbg !64
  %577 = fcmp oeq float %398, 0.000000e+00, !dbg !64
  %578 = fadd float %398, %398, !dbg !64
  %u.3.i102 = select i1 %577, float %578, float %u.2.i101, !dbg !64
  %579 = select i1 %399, float %395, float %u.3.i, !dbg !65
  %580 = select i1 %400, float %396, float %u.3.i48, !dbg !65
  %581 = select i1 %401, float %397, float %u.3.i75, !dbg !65
  %582 = select i1 %402, float %398, float %u.3.i102, !dbg !65
  %583 = getelementptr float, ptr addrspace(1) %4, i64 %380, !dbg !66
  %584 = bitcast float %579 to i32, !dbg !67
  %585 = bitcast float %580 to i32, !dbg !67
  %586 = bitcast float %581 to i32, !dbg !67
  %587 = bitcast float %582 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %584, i32 %585, i32 %586, i32 %587, ptr addrspace(1) %583, i1 %9) #5, !dbg !67
  br i1 %377, label %376, label %588, !dbg !57

588:                                              ; preds = %__nv_expm1f.exit103
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb3c2ulvdrsgaqtp5eubxepcskmmnvf4l3jbdwojhcyiisefhuy5.py", directory: "inductor_cache/b3")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_convolution_elu_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_convolution_elu_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_convolution_elu_1", linkageName: "triton_red_fused__native_batch_norm_legit_convolution_elu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 28, column: 30, scope: !7)
!15 = !DILocation(line: 28, column: 35, scope: !7)
!16 = !DILocation(line: 36, column: 48, scope: !7)
!17 = !DILocation(line: 36, column: 38, scope: !7)
!18 = !DILocation(line: 36, column: 53, scope: !7)
!19 = !DILocation(line: 37, column: 22, scope: !7)
!20 = !DILocation(line: 42, column: 60, scope: !7)
!21 = !DILocation(line: 45, column: 53, scope: !7)
!22 = !DILocation(line: 36, column: 43, scope: !7)
!23 = !DILocation(line: 183, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 40, column: 51, scope: !7)
!27 = !DILocation(line: 44, column: 64, scope: !7)
!28 = !DILocation(line: 185, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 185, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 186, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 186, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 186, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 43, column: 56, scope: !7)
!34 = !DILocation(line: 192, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!36 = !DILocation(line: 47, column: 41, scope: !7)
!37 = !DILocation(line: 193, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 194, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 194, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 194, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 196, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 196, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 197, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 197, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 197, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 197, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 197, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 204, column: 46, scope: !24, inlinedAt: !36)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 36, scope: !7)
!51 = !DILocation(line: 54, column: 18, scope: !7)
!52 = !DILocation(line: 56, column: 19, scope: !7)
!53 = !DILocation(line: 57, column: 28, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
!55 = !DILocation(line: 59, column: 28, scope: !7)
!56 = !DILocation(line: 59, column: 40, scope: !7)
!57 = !DILocation(line: 60, column: 36, scope: !7)
!58 = !DILocation(line: 64, column: 44, scope: !7)
!59 = !DILocation(line: 64, column: 39, scope: !7)
!60 = !DILocation(line: 64, column: 54, scope: !7)
!61 = !DILocation(line: 65, column: 24, scope: !7)
!62 = !DILocation(line: 66, column: 24, scope: !7)
!63 = !DILocation(line: 68, column: 24, scope: !7)
!64 = !DILocation(line: 71, column: 32, scope: !7)
!65 = !DILocation(line: 73, column: 39, scope: !7)
!66 = !DILocation(line: 74, column: 29, scope: !7)
!67 = !DILocation(line: 74, column: 51, scope: !7)
!68 = !DILocation(line: 60, column: 4, scope: !7)
