; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 2, !dbg !16
  %18 = lshr i32 %11, 3, !dbg !17
  %19 = and i32 %18, 3, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = icmp slt i32 %20, 4, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %22 = sdiv i32 %.frozen, 4, !dbg !20
  %23 = mul i32 %22, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %23, !dbg !21
  %24 = shl i32 %20, 2, !dbg !22
  %25 = add i32 %24, %.decomposed, !dbg !23
  %26 = shl i32 %22, 4, !dbg !24
  %27 = add i32 %25, %26, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = and i1 %15, %21, !dbg !27
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #4, !dbg !28
  %32 = sext i32 %22 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !29
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #4, !dbg !30
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #4, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #4, !dbg !32
  %38 = bitcast i32 %37 to float, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #4, !dbg !32
  %40 = bitcast i32 %39 to float, !dbg !32
  %41 = sext i32 %20 to i64, !dbg !33
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #4, !dbg !34
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #4, !dbg !34
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !35
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %21) #4, !dbg !36
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %21) #4, !dbg !36
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 1.600000e+01) #4, !dbg !37
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 1.600000e+01) #4, !dbg !37
  %50 = fadd float %48, 0x3EE4F8B580000000, !dbg !38
  %51 = fadd float %49, 0x3EE4F8B580000000, !dbg !38
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %52, 0, !dbg !39
  br i1 %.not.i, label %55, label %53, !dbg !39

53:                                               ; preds = %8
  %54 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %50), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

55:                                               ; preds = %8
  %56 = tail call float @llvm.nvvm.rsqrt.approx.f(float %50), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %53, %55
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], !dbg !39
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i3 = icmp eq i32 %57, 0, !dbg !39
  br i1 %.not.i3, label %60, label %58, !dbg !39

58:                                               ; preds = %__nv_rsqrtf.exit
  %59 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %51), !dbg !39
  br label %__nv_rsqrtf.exit5, !dbg !39

60:                                               ; preds = %__nv_rsqrtf.exit
  %61 = tail call float @llvm.nvvm.rsqrt.approx.f(float %51), !dbg !39
  br label %__nv_rsqrtf.exit5, !dbg !39

__nv_rsqrtf.exit5:                                ; preds = %58, %60
  %.0.i4 = phi float [ %59, %58 ], [ %61, %60 ], !dbg !39
  %62 = extractvalue { i32, i32 } %31, 1, !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = bitcast i32 %35 to float, !dbg !30
  %65 = fsub float %63, %64, !dbg !40
  %66 = extractvalue { i32, i32 } %31, 0, !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = bitcast i32 %34 to float, !dbg !30
  %69 = fsub float %67, %68, !dbg !40
  %70 = bitcast i32 %47 to float, !dbg !36
  %71 = bitcast i32 %44 to float, !dbg !34
  %72 = and i32 %12, 2, !dbg !12
  %73 = or disjoint i32 %17, %72, !dbg !18
  %74 = icmp slt i32 %73, 4, !dbg !19
  %75 = lshr i32 %11, 1, !dbg !12
  %76 = and i32 %75, 15, !dbg !12
  %77 = or disjoint i32 %10, %76, !dbg !13
  %78 = icmp slt i32 %77, 16, !dbg !14
  %79 = and i1 %78, %74, !dbg !27
  %80 = fmul float %69, %.0.i, !dbg !41
  %81 = fmul float %65, %.0.i4, !dbg !41
  %82 = fmul float %80, %71, !dbg !42
  %83 = fmul float %81, %71, !dbg !42
  %84 = fadd float %82, %70, !dbg !43
  %85 = fadd float %83, %70, !dbg !43
  %86 = shl i32 %77, 2, !dbg !44
  %87 = add i32 %73, %86, !dbg !45
  %88 = sext i32 %87 to i64, !dbg !46
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !46
  %90 = shl i32 %11, 3, !dbg !47
  %91 = and i32 %90, 56, !dbg !47
  %92 = or disjoint i32 %91, %19, !dbg !47
  %93 = and i32 %12, 62, !dbg !47
  %94 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !47
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %92, !dbg !47
  %96 = bitcast float %84 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !47
  %97 = or disjoint i32 %92, 4, !dbg !47
  %98 = lshr i32 %97, 2, !dbg !47
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !47
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %97, !dbg !47
  %101 = bitcast float %85 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %102 = lshr i32 %93, 2, !dbg !47
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !47
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %93, !dbg !47
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !47
  %106 = or disjoint i32 %93, 1, !dbg !47
  %107 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %106, !dbg !47
  %108 = load i32, ptr addrspace(3) %107, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %105, i32 %108, ptr addrspace(1) %89, i1 %79) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxuyc64iokwsnd57f2a77bqngia3kev7xr73lndrxnw36ya7sik.py", directory: "inductor_cache/mx")
!4 = !{ptr @triton_poi_fused_clone_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_1", linkageName: "triton_poi_fused_clone_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 27, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 32, scope: !7)
!45 = !DILocation(line: 46, column: 30, scope: !7)
!46 = !DILocation(line: 46, column: 25, scope: !7)
!47 = !DILocation(line: 46, column: 44, scope: !7)
!48 = !DILocation(line: 46, column: 4, scope: !7)
