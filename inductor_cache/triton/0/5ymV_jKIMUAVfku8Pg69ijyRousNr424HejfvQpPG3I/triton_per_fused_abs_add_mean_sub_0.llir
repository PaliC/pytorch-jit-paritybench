; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_add_mean_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %15 to float, !dbg !12
  %18 = bitcast i32 %16 to float, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = bitcast i32 %23 to float, !dbg !14
  %26 = bitcast i32 %24 to float, !dbg !14
  %27 = fsub float %17, %25, !dbg !15
  %28 = fsub float %18, %26, !dbg !15
  %29 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %30 = insertelement <2 x i32> %29, i32 %14, i64 1, !dbg !12
  %31 = bitcast <2 x i32> %30 to <2 x float>, !dbg !12
  %32 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %33 = insertelement <2 x i32> %32, i32 %22, i64 1, !dbg !14
  %34 = bitcast <2 x i32> %33 to <2 x float>, !dbg !14
  %35 = fsub <2 x float> %31, %34, !dbg !15
  %36 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %35), !dbg !16
  %37 = tail call float @llvm.fabs.f32(float %27), !dbg !16
  %38 = tail call float @llvm.fabs.f32(float %28), !dbg !16
  %shift = shufflevector <2 x float> %36, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %39 = fadd <2 x float> %36, %shift, !dbg !17
  %40 = extractelement <2 x float> %39, i64 0, !dbg !17
  %41 = fadd float %37, %40, !dbg !17
  %42 = fadd float %38, %41, !dbg !17
  %43 = bitcast float %42 to i32, !dbg !22
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = fadd float %42, %45, !dbg !17
  %47 = bitcast float %46 to i32, !dbg !22
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = fadd float %46, %49, !dbg !17
  %51 = bitcast float %50 to i32, !dbg !22
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = fadd float %50, %53, !dbg !17
  %55 = bitcast float %54 to i32, !dbg !22
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = fadd float %54, %57, !dbg !17
  %59 = bitcast float %58 to i32, !dbg !22
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fadd float %58, %61, !dbg !17
  %63 = icmp eq i32 %6, 0, !dbg !22
  %64 = and i32 %7, 1, !dbg !22
  %65 = zext nneg i32 %64 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65, !dbg !22
  %67 = bitcast float %62 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %63) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %68 = icmp slt i32 %5, 2, !dbg !22
  %69 = sext i32 %5 to i64, !dbg !22
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !22
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #4, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = fadd float %72, %74, !dbg !17
  %76 = and i32 %5, 1, !dbg !22
  %77 = icmp eq i32 %76, 0, !dbg !22
  %78 = and i1 %68, %77, !dbg !22
  %79 = bitcast float %75 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %79, i1 %78) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %80 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %81 = fadd float %80, 0.000000e+00, !dbg !23
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 2.560000e+02) #4, !dbg !27
  %83 = fadd float %82, 0.000000e+00, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %urem = and i32 %5, 63, !dbg !30
  %84 = icmp eq i32 %urem, 0, !dbg !30
  %85 = bitcast float %83 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %0, i1 %84) #4, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czclvrs44o45s4flcwutddexqbrbeo4ufftyqh23tajvzluagudz.py", directory: "inductor_cache/zc")
!4 = !{ptr @triton_per_fused_abs_add_mean_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_mean_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_mean_sub_0", linkageName: "triton_per_fused_abs_add_mean_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 23, scope: !7)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 36, column: 57, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 73, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 36, column: 44, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 4, scope: !7)
!30 = !DILocation(line: 42, column: 63, scope: !7)
!31 = !DILocation(line: 42, column: 4, scope: !7)
