; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_mean_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 1, !dbg !12
  %11 = and i32 %10, 6, !dbg !12
  %12 = and i32 %8, 7, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 4000, !dbg !14
  %16 = icmp slt i32 %14, 4000, !dbg !14
  %17 = lshr i32 %8, 5, !dbg !15
  %18 = lshr i32 %8, 2, !dbg !15
  %19 = and i32 %18, 15, !dbg !15
  %20 = icmp samesign ult i32 %19, 9, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %21 = sdiv i32 %.frozen, 1000, !dbg !17
  %22 = mul i32 %21, 1000, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = mul nuw nsw i32 %19, 1000, !dbg !19
  %24 = add nsw i32 %.decomposed, %23, !dbg !20
  %25 = mul i32 %21, 9000, !dbg !21
  %26 = add i32 %24, %25, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %29 = and i1 %20, %15, !dbg !24
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !25
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !25
  %33 = bitcast i32 %31 to float, !dbg !25
  %34 = bitcast i32 %32 to float, !dbg !25
  %35 = sext i32 %.decomposed to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %15) #3, !dbg !27
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !27
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !27
  %40 = bitcast i32 %38 to float, !dbg !27
  %41 = bitcast i32 %39 to float, !dbg !27
  %42 = fadd float %33, %40, !dbg !28
  %43 = fadd float %34, %41, !dbg !28
  %44 = fcmp olt float %42, 0.000000e+00, !dbg !29
  %45 = fcmp olt float %43, 0.000000e+00, !dbg !29
  %46 = select i1 %44, float 0.000000e+00, float %42, !dbg !33
  %47 = select i1 %45, float 0.000000e+00, float %43, !dbg !33
  %48 = select i1 %29, float %46, float 0.000000e+00, !dbg !34
  %49 = select i1 %29, float %47, float 0.000000e+00, !dbg !34
  %50 = bitcast float %48 to i32, !dbg !35
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !35
  %52 = bitcast i32 %51 to float, !dbg !35
  %53 = fadd float %48, %52, !dbg !39
  %54 = bitcast float %53 to i32, !dbg !35
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !35
  %56 = bitcast i32 %55 to float, !dbg !35
  %57 = fadd float %53, %56, !dbg !39
  %58 = bitcast float %57 to i32, !dbg !35
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !35
  %60 = bitcast i32 %59 to float, !dbg !35
  %61 = fadd float %57, %60, !dbg !39
  %62 = bitcast float %49 to i32, !dbg !35
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !35
  %64 = bitcast i32 %63 to float, !dbg !35
  %65 = fadd float %49, %64, !dbg !39
  %66 = bitcast float %65 to i32, !dbg !35
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !35
  %68 = bitcast i32 %67 to float, !dbg !35
  %69 = fadd float %65, %68, !dbg !39
  %70 = bitcast float %69 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %69, %72, !dbg !39
  %74 = icmp samesign ult i32 %9, 4, !dbg !35
  %75 = and i32 %17, 1, !dbg !35
  %76 = shl nuw nsw i32 %11, 1, !dbg !35
  %77 = or disjoint i32 %76, %75, !dbg !35
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !35
  %79 = bitcast float %61 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %74) #3, !dbg !35
  %80 = or disjoint i32 %76, 2, !dbg !35
  %81 = or disjoint i32 %80, %75, !dbg !35
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !35
  %83 = bitcast float %73 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 %74) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %84 = icmp slt i32 %8, 16, !dbg !35
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !35
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %84) #3, !dbg !35
  %87 = bitcast i32 %86 to float, !dbg !35
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !35
  %89 = bitcast i32 %88 to float, !dbg !35
  %90 = fadd float %87, %89, !dbg !39
  %91 = and i32 %8, 1, !dbg !35
  %92 = icmp eq i32 %91, 0, !dbg !35
  %93 = and i1 %84, %92, !dbg !35
  %94 = bitcast float %90 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %94, i1 %93) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !35
  %96 = load i32, ptr addrspace(3) %95, align 16, !dbg !35
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !35
  %98 = load i32, ptr addrspace(3) %97, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !41
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %99, i32 %96, i32 %98, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !41
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 9.000000e+00) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %103 = sext i32 %14 to i64, !dbg !43
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !43
  %105 = lshr i32 %9, 3, !dbg !44
  %106 = shl nuw nsw i32 %75, 2, !dbg !44
  %107 = or disjoint i32 %106, %105, !dbg !44
  %108 = icmp eq i32 %107, 0, !dbg !44
  %109 = bitcast float %102 to i32, !dbg !44
  %110 = and i1 %108, %16, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %104, i1 %110) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py", directory: "inductor_cache/2y")
!4 = !{ptr @triton_per_fused_convolution_mean_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_mean_relu_28, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_mean_relu_28", linkageName: "triton_per_fused_convolution_mean_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 50, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 63, scope: !7)
!25 = !DILocation(line: 33, column: 55, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 39, column: 41, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = !DILocation(line: 40, column: 24, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)
!43 = !DILocation(line: 44, column: 28, scope: !7)
!44 = !DILocation(line: 44, column: 40, scope: !7)
!45 = !DILocation(line: 44, column: 4, scope: !7)
