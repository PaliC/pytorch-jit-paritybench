#loc = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":19:0)
#loc1 = loc(unknown)
#loc28 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":40:24)
#loc39 = loc(callsite(#loc1 at #loc28))
module {
  tt.func public @triton_per_fused_convolution_mean_relu_28(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":19:0), %arg4: i32 loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.000000e+00> : tensor<8x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x16xf32> loc(#loc1)
    %cst_1 = arith.constant dense<9000> : tensor<8x1xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1000> : tensor<1x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<1000> : tensor<8x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<9> : tensor<1x16xi32> loc(#loc1)
    %cst_5 = arith.constant dense<4000> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc9)
    %9 = arith.cmpi slt, %8, %cst_4 : tensor<1x16xi32> loc(#loc10)
    %10 = arith.remsi %5, %cst_3 : tensor<8x1xi32> loc(#loc11)
    %11 = arith.divsi %5, %cst_3 : tensor<8x1xi32> loc(#loc12)
    %12 = arith.muli %8, %cst_2 : tensor<1x16xi32> loc(#loc13)
    %13 = tt.broadcast %10 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc14)
    %14 = tt.broadcast %12 : tensor<1x16xi32> -> tensor<8x16xi32> loc(#loc14)
    %15 = arith.addi %13, %14 : tensor<8x16xi32> loc(#loc14)
    %16 = arith.muli %11, %cst_1 : tensor<8x1xi32> loc(#loc15)
    %17 = tt.broadcast %16 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc16)
    %18 = arith.addi %15, %17 : tensor<8x16xi32> loc(#loc16)
    %19 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc17)
    %20 = tt.addptr %19, %18 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc17)
    %21 = tt.broadcast %9 : tensor<1x16xi1> -> tensor<8x16xi1> loc(#loc18)
    %22 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x16xi1> loc(#loc18)
    %23 = arith.andi %21, %22 : tensor<8x16xi1> loc(#loc18)
    %24 = tt.load %20, %23, %cst_0 : tensor<8x16x!tt.ptr<f32>> loc(#loc19)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc20)
    %26 = tt.addptr %25, %10 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc20)
    %27 = tt.load %26, %6 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>> loc(#loc21)
    %28 = tt.broadcast %27 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc22)
    %29 = arith.addf %24, %28 : tensor<8x16xf32> loc(#loc22)
    %30 = arith.cmpf ogt, %cst_0, %29 : tensor<8x16xf32> loc(#loc36)
    %31 = arith.select %30, %cst_0, %29 : tensor<8x16xi1>, tensor<8x16xf32> loc(#loc37)
    %32 = arith.select %23, %31, %cst_0 : tensor<8x16xi1>, tensor<8x16xf32> loc(#loc26)
    %33 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc28)), %arg6: f32 loc(callsite(#loc1 at #loc28))):
      %38 = arith.addf %arg5, %arg6 : f32 loc(#loc41)
      tt.reduce.return %38 : f32 loc(#loc38)
    }) : (tensor<8x16xf32>) -> tensor<8xf32> loc(#loc38)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc30)
    %35 = arith.divf %34, %cst : tensor<8x1xf32> loc(#loc31)
    gpu.barrier loc(#loc32)
    %36 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc33)
    %37 = tt.addptr %36, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc33)
    tt.store %37, %35, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":23:28)
#loc3 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":23:33)
#loc4 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":24:36)
#loc5 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":24:44)
#loc6 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":24:23)
#loc7 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":25:21)
#loc8 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":26:26)
#loc9 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":26:34)
#loc10 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":28:21)
#loc11 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":30:19)
#loc12 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":31:19)
#loc13 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":33:40)
#loc14 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":33:35)
#loc15 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":33:50)
#loc16 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":33:45)
#loc17 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":33:30)
#loc18 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":33:63)
#loc19 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":33:55)
#loc20 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":34:30)
#loc21 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":34:35)
#loc22 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":35:18)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc24 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":37:40)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc26 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":39:41)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc30 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":40:27)
#loc31 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":42:19)
#loc32 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":43:4)
#loc33 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":44:28)
#loc34 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":44:40)
#loc35 = loc("inductor_cache/2y/c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py":44:4)
#loc36 = loc(callsite(#loc23 at #loc24))
#loc37 = loc(callsite(#loc25 at #loc24))
#loc38 = loc(callsite(#loc27 at #loc28))
#loc40 = loc(callsite(#loc29 at #loc27))
#loc41 = loc(callsite(#loc40 at #loc28))
