; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 7, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %21 = sdiv i32 %.frozen, 8, !dbg !14
  %22 = srem i32 %21, 8, !dbg !15
  %23 = mul i32 %21, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = sdiv i32 %20, 64, !dbg !17
  %25 = srem i32 %24, 96, !dbg !18
  %26 = sext i32 %22 to i64, !dbg !19
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = sext i32 %.decomposed to i64, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %2, i64 %29, !dbg !21
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %32 = getelementptr i64, ptr addrspace(1) %4, i64 %29, !dbg !23
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = sext i32 %20 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !28
  %39 = sext i32 %25 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %39, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %39, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !32
  %44 = bitcast i32 %43 to float, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %9, i64 %39, !dbg !33
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %10, i64 %39, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !38
  %51 = getelementptr i64, ptr addrspace(1) %12, i64 %26, !dbg !39
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !40
  %53 = getelementptr float, ptr addrspace(1) %13, i64 %26, !dbg !41
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !42
  %55 = lshr i64 %28, 61, !dbg !43
  %56 = and i64 %55, 4, !dbg !43
  %57 = add i64 %56, %28, !dbg !43
  %58 = lshr i64 %31, 61, !dbg !44
  %59 = and i64 %58, 4, !dbg !44
  %60 = shl i64 %57, 2, !dbg !45
  %61 = shl nsw i32 %24, 4, !dbg !46
  %62 = sext i32 %61 to i64, !dbg !47
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !48
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %59, !dbg !48
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %60, !dbg !48
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %62, !dbg !48
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !49
  %68 = lshr i64 %33, 61, !dbg !50
  %69 = and i64 %68, 4, !dbg !50
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !51
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %69, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %60, !dbg !51
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %62, !dbg !51
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !52
  %75 = fadd float %44, 0x3EE4F8B580000000, !dbg !53
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %76, 0, !dbg !54
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %77, 0, !dbg !54
  br i1 %.not.i, label %83, label %78, !dbg !54

78:                                               ; preds = %15
  br i1 %.not1.i, label %81, label %79, !dbg !54

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

83:                                               ; preds = %15
  br i1 %.not1.i, label %86, label %84, !dbg !54

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !54
  %88 = bitcast i32 %38 to float, !dbg !28
  %89 = bitcast i32 %41 to float, !dbg !30
  %90 = fsub float %88, %89, !dbg !55
  %91 = bitcast i32 %54 to float, !dbg !42
  %92 = bitcast i32 %50 to float, !dbg !38
  %93 = bitcast i32 %48 to float, !dbg !36
  %94 = bitcast i32 %46 to float, !dbg !34
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %96 = fmul float %90, %95, !dbg !57
  %97 = fmul float %96, %94, !dbg !58
  %98 = fadd float %97, %93, !dbg !59
  %99 = fadd float %98, %92, !dbg !60
  %100 = lshr i64 %52, 61, !dbg !61
  %101 = and i64 %100, 4, !dbg !61
  %102 = add i64 %101, %52, !dbg !61
  %103 = shl i64 %102, 2, !dbg !62
  %104 = getelementptr float, ptr addrspace(1) %64, i64 %103, !dbg !63
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %62, !dbg !63
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !64
  %107 = getelementptr float, ptr addrspace(1) %71, i64 %103, !dbg !65
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %62, !dbg !65
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !66
  %110 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !64
  %111 = insertelement <2 x i32> %110, i32 %67, i64 1, !dbg !64
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !64
  %113 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !66
  %114 = insertelement <2 x i32> %113, i32 %74, i64 1, !dbg !66
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !66
  %116 = fsub <2 x float> %115, %112, !dbg !67
  %117 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !68
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !68
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %120 = fmul <2 x float> %116, %119, !dbg !68
  %121 = fadd <2 x float> %120, %112, !dbg !69
  %122 = extractelement <2 x float> %121, i64 0, !dbg !70
  %123 = extractelement <2 x float> %121, i64 1, !dbg !71
  %124 = fsub float %122, %123, !dbg !70
  %125 = fmul float %124, %91, !dbg !72
  %126 = fadd float %123, %125, !dbg !71
  %127 = fadd float %99, %126, !dbg !73
  %128 = fcmp olt float %127, 0.000000e+00, !dbg !74
  %129 = select i1 %128, float 0.000000e+00, float %127, !dbg !78
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !79
  %131 = bitcast float %129 to i32, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %130, i1 true) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwdxzwdihzsenfae3aidrkubeh4mqnfq7u5lzjd4pn5gjxgba7tp.py", directory: "inductor_cache/wd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 44, column: 32, scope: !7)
!44 = !DILocation(line: 47, column: 32, scope: !7)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 48, column: 49, scope: !7)
!47 = !DILocation(line: 48, column: 46, scope: !7)
!48 = !DILocation(line: 48, column: 30, scope: !7)
!49 = !DILocation(line: 48, column: 54, scope: !7)
!50 = !DILocation(line: 51, column: 35, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 56, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 27, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 70, column: 35, scope: !7)
!62 = !DILocation(line: 71, column: 40, scope: !7)
!63 = !DILocation(line: 71, column: 31, scope: !7)
!64 = !DILocation(line: 71, column: 56, scope: !7)
!65 = !DILocation(line: 72, column: 31, scope: !7)
!66 = !DILocation(line: 72, column: 57, scope: !7)
!67 = !DILocation(line: 73, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 20, scope: !7)
!69 = !DILocation(line: 75, column: 20, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 20, scope: !7)
!72 = !DILocation(line: 77, column: 20, scope: !7)
!73 = !DILocation(line: 79, column: 20, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 81, column: 42, scope: !7)
!78 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 82, column: 28, scope: !7)
!80 = !DILocation(line: 82, column: 40, scope: !7)
!81 = !DILocation(line: 82, column: 4, scope: !7)
