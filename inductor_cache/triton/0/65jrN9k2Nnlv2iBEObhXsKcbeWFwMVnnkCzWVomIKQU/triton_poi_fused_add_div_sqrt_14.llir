; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %7, 1, !dbg !13
  %13 = or disjoint i32 %7, 2, !dbg !13
  %14 = or disjoint i32 %7, 3, !dbg !13
  %15 = or disjoint i32 %7, 4, !dbg !13
  %16 = or disjoint i32 %7, 5, !dbg !13
  %17 = or disjoint i32 %7, 6, !dbg !13
  %18 = or disjoint i32 %7, 7, !dbg !13
  %19 = or disjoint i32 %7, 8, !dbg !13
  %20 = or disjoint i32 %7, 9, !dbg !13
  %21 = or disjoint i32 %7, 10, !dbg !13
  %22 = or disjoint i32 %7, 11, !dbg !13
  %23 = or disjoint i32 %7, 12, !dbg !13
  %24 = or disjoint i32 %7, 13, !dbg !13
  %25 = or disjoint i32 %7, 14, !dbg !13
  %26 = or disjoint i32 %7, 15, !dbg !13
  %27 = icmp slt i32 %11, 256, !dbg !14
  %28 = icmp slt i32 %7, 256, !dbg !14
  %29 = icmp slt i32 %12, 256, !dbg !14
  %30 = icmp slt i32 %13, 256, !dbg !14
  %31 = icmp slt i32 %14, 256, !dbg !14
  %32 = icmp slt i32 %15, 256, !dbg !14
  %33 = icmp slt i32 %16, 256, !dbg !14
  %34 = icmp slt i32 %17, 256, !dbg !14
  %35 = icmp slt i32 %18, 256, !dbg !14
  %36 = icmp slt i32 %19, 256, !dbg !14
  %37 = icmp slt i32 %20, 256, !dbg !14
  %38 = icmp slt i32 %21, 256, !dbg !14
  %39 = icmp slt i32 %22, 256, !dbg !14
  %40 = icmp slt i32 %23, 256, !dbg !14
  %41 = icmp slt i32 %24, 256, !dbg !14
  %42 = icmp slt i32 %25, 256, !dbg !14
  %43 = icmp slt i32 %26, 256, !dbg !14
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %45 = shl i32 %44, 8, !dbg !16
  %46 = lshr i32 %8, 2, !dbg !17
  %47 = and i32 %46, 63, !dbg !17
  %48 = and i32 %8, 255, !dbg !17
  %49 = or disjoint i32 %45, %47, !dbg !18
  %50 = or disjoint i32 %49, 64, !dbg !18
  %51 = or disjoint i32 %49, 128, !dbg !18
  %52 = or disjoint i32 %49, 192, !dbg !18
  %53 = or disjoint i32 %45, %48, !dbg !18
  %54 = icmp slt i32 %49, 961, !dbg !19
  %55 = icmp slt i32 %50, 961, !dbg !19
  %56 = icmp slt i32 %51, 961, !dbg !19
  %57 = icmp slt i32 %52, 961, !dbg !19
  %58 = icmp slt i32 %53, 961, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %59 = sdiv i32 %.frozen, 64, !dbg !20
  %60 = mul i32 %59, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %60, !dbg !21
  %61 = sdiv i32 %7, 64, !dbg !20
  %62 = sdiv i32 %12, 64, !dbg !20
  %63 = sdiv i32 %13, 64, !dbg !20
  %64 = sdiv i32 %14, 64, !dbg !20
  %65 = sdiv i32 %15, 64, !dbg !20
  %66 = sdiv i32 %16, 64, !dbg !20
  %67 = sdiv i32 %17, 64, !dbg !20
  %68 = sdiv i32 %18, 64, !dbg !20
  %69 = sdiv i32 %19, 64, !dbg !20
  %70 = sdiv i32 %20, 64, !dbg !20
  %71 = sdiv i32 %21, 64, !dbg !20
  %72 = sdiv i32 %22, 64, !dbg !20
  %73 = sdiv i32 %23, 64, !dbg !20
  %74 = sdiv i32 %24, 64, !dbg !20
  %75 = sdiv i32 %25, 64, !dbg !20
  %76 = sdiv i32 %26, 64, !dbg !20
  %77 = shl i32 %49, 6, !dbg !22
  %78 = shl i32 %50, 6, !dbg !22
  %79 = shl i32 %51, 6, !dbg !22
  %80 = shl i32 %52, 6, !dbg !22
  %81 = mul i32 %59, 61504, !dbg !23
  %82 = add i32 %81, %.decomposed, !dbg !24
  %83 = add i32 %82, %77, !dbg !25
  %84 = add i32 %82, %78, !dbg !25
  %85 = add i32 %82, %79, !dbg !25
  %86 = add i32 %82, %80, !dbg !25
  %87 = sext i32 %83 to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !26
  %89 = sext i32 %84 to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !26
  %91 = sext i32 %85 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !26
  %93 = sext i32 %86 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !26
  %95 = and i1 %27, %54, !dbg !27
  %96 = and i1 %55, %27, !dbg !27
  %97 = and i1 %56, %27, !dbg !27
  %98 = and i1 %57, %27, !dbg !27
  %99 = and i1 %28, %58, !dbg !27
  %100 = and i1 %29, %58, !dbg !27
  %101 = and i1 %30, %58, !dbg !27
  %102 = and i1 %31, %58, !dbg !27
  %103 = and i1 %32, %58, !dbg !27
  %104 = and i1 %33, %58, !dbg !27
  %105 = and i1 %34, %58, !dbg !27
  %106 = and i1 %35, %58, !dbg !27
  %107 = and i1 %36, %58, !dbg !27
  %108 = and i1 %37, %58, !dbg !27
  %109 = and i1 %38, %58, !dbg !27
  %110 = and i1 %39, %58, !dbg !27
  %111 = and i1 %40, %58, !dbg !27
  %112 = and i1 %41, %58, !dbg !27
  %113 = and i1 %42, %58, !dbg !27
  %114 = and i1 %43, %58, !dbg !27
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %95) #4, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !28
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %96) #4, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !28
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %97) #4, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !28
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %98) #4, !dbg !28
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !28
  %135 = shl i32 %8, 10, !dbg !28
  %136 = and i32 %135, 3072, !dbg !28
  %137 = or disjoint i32 %136, %47, !dbg !28
  %138 = lshr exact i32 %136, 6, !dbg !28
  %139 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %138, !dbg !28
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !28
  %141 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #4, !dbg !28
  %142 = or disjoint i32 %137, 256, !dbg !28
  %143 = lshr i32 %142, 8, !dbg !28
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !28
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !28
  %146 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #4, !dbg !28
  %147 = or disjoint i32 %137, 512, !dbg !28
  %148 = lshr i32 %147, 8, !dbg !28
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !28
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !28
  %151 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #4, !dbg !28
  %152 = or disjoint i32 %137, 768, !dbg !28
  %153 = lshr i32 %152, 8, !dbg !28
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !28
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !28
  %156 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #4, !dbg !28
  %157 = or disjoint i32 %137, 64, !dbg !28
  %158 = getelementptr float, ptr addrspace(3) %139, i32 %157, !dbg !28
  %159 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #4, !dbg !28
  %160 = or disjoint i32 %137, 320, !dbg !28
  %161 = lshr i32 %160, 8, !dbg !28
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !28
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !28
  %164 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #4, !dbg !28
  %165 = or disjoint i32 %137, 576, !dbg !28
  %166 = lshr i32 %165, 8, !dbg !28
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !28
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !28
  %169 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #4, !dbg !28
  %170 = or disjoint i32 %137, 832, !dbg !28
  %171 = lshr i32 %170, 8, !dbg !28
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !28
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !28
  %174 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #4, !dbg !28
  %175 = or disjoint i32 %137, 128, !dbg !28
  %176 = getelementptr float, ptr addrspace(3) %139, i32 %175, !dbg !28
  %177 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #4, !dbg !28
  %178 = or disjoint i32 %137, 384, !dbg !28
  %179 = lshr i32 %178, 8, !dbg !28
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !28
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !28
  %182 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #4, !dbg !28
  %183 = or disjoint i32 %137, 640, !dbg !28
  %184 = lshr i32 %183, 8, !dbg !28
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !28
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !28
  %187 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #4, !dbg !28
  %188 = or disjoint i32 %137, 896, !dbg !28
  %189 = lshr i32 %188, 8, !dbg !28
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !28
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188, !dbg !28
  %192 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #4, !dbg !28
  %193 = or disjoint i32 %137, 192, !dbg !28
  %194 = getelementptr float, ptr addrspace(3) %139, i32 %193, !dbg !28
  %195 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #4, !dbg !28
  %196 = or disjoint i32 %137, 448, !dbg !28
  %197 = lshr i32 %196, 8, !dbg !28
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !28
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %196, !dbg !28
  %200 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #4, !dbg !28
  %201 = or disjoint i32 %137, 704, !dbg !28
  %202 = lshr i32 %201, 8, !dbg !28
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !28
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !28
  %205 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !28
  %206 = or disjoint i32 %137, 960, !dbg !28
  %207 = lshr i32 %206, 8, !dbg !28
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !28
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !28
  %210 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !28
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !28
  %213 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 1028, !dbg !28
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !28
  %215 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 2056, !dbg !28
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !28
  %217 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 3084, !dbg !28
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !28
  %219 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 4112, !dbg !28
  %220 = load float, ptr addrspace(3) %219, align 4, !dbg !28
  %221 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 5140, !dbg !28
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !28
  %223 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 6168, !dbg !28
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !28
  %225 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 7196, !dbg !28
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !28
  %227 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 8224, !dbg !28
  %228 = load float, ptr addrspace(3) %227, align 4, !dbg !28
  %229 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 9252, !dbg !28
  %230 = load float, ptr addrspace(3) %229, align 4, !dbg !28
  %231 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 10280, !dbg !28
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !28
  %233 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 11308, !dbg !28
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !28
  %235 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 12336, !dbg !28
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !28
  %237 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 13364, !dbg !28
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !28
  %239 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 14392, !dbg !28
  %240 = load float, ptr addrspace(3) %239, align 4, !dbg !28
  %241 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 15420, !dbg !28
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !28
  %243 = mul i32 %61, 961, !dbg !29
  %244 = mul i32 %62, 961, !dbg !29
  %245 = mul i32 %63, 961, !dbg !29
  %246 = mul i32 %64, 961, !dbg !29
  %247 = mul i32 %65, 961, !dbg !29
  %248 = mul i32 %66, 961, !dbg !29
  %249 = mul i32 %67, 961, !dbg !29
  %250 = mul i32 %68, 961, !dbg !29
  %251 = mul i32 %69, 961, !dbg !29
  %252 = mul i32 %70, 961, !dbg !29
  %253 = mul i32 %71, 961, !dbg !29
  %254 = mul i32 %72, 961, !dbg !29
  %255 = mul i32 %73, 961, !dbg !29
  %256 = mul i32 %74, 961, !dbg !29
  %257 = mul i32 %75, 961, !dbg !29
  %258 = mul i32 %76, 961, !dbg !29
  %259 = add i32 %53, %243, !dbg !30
  %260 = add i32 %244, %53, !dbg !30
  %261 = add i32 %245, %53, !dbg !30
  %262 = add i32 %246, %53, !dbg !30
  %263 = add i32 %247, %53, !dbg !30
  %264 = add i32 %248, %53, !dbg !30
  %265 = add i32 %249, %53, !dbg !30
  %266 = add i32 %250, %53, !dbg !30
  %267 = add i32 %251, %53, !dbg !30
  %268 = add i32 %252, %53, !dbg !30
  %269 = add i32 %253, %53, !dbg !30
  %270 = add i32 %254, %53, !dbg !30
  %271 = add i32 %255, %53, !dbg !30
  %272 = add i32 %256, %53, !dbg !30
  %273 = add i32 %257, %53, !dbg !30
  %274 = add i32 %258, %53, !dbg !30
  %275 = sext i32 %259 to i64, !dbg !31
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !31
  %277 = sext i32 %260 to i64, !dbg !31
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %277, !dbg !31
  %279 = sext i32 %261 to i64, !dbg !31
  %280 = getelementptr float, ptr addrspace(1) %1, i64 %279, !dbg !31
  %281 = sext i32 %262 to i64, !dbg !31
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !31
  %283 = sext i32 %263 to i64, !dbg !31
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %283, !dbg !31
  %285 = sext i32 %264 to i64, !dbg !31
  %286 = getelementptr float, ptr addrspace(1) %1, i64 %285, !dbg !31
  %287 = sext i32 %265 to i64, !dbg !31
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %287, !dbg !31
  %289 = sext i32 %266 to i64, !dbg !31
  %290 = getelementptr float, ptr addrspace(1) %1, i64 %289, !dbg !31
  %291 = sext i32 %267 to i64, !dbg !31
  %292 = getelementptr float, ptr addrspace(1) %1, i64 %291, !dbg !31
  %293 = sext i32 %268 to i64, !dbg !31
  %294 = getelementptr float, ptr addrspace(1) %1, i64 %293, !dbg !31
  %295 = sext i32 %269 to i64, !dbg !31
  %296 = getelementptr float, ptr addrspace(1) %1, i64 %295, !dbg !31
  %297 = sext i32 %270 to i64, !dbg !31
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %297, !dbg !31
  %299 = sext i32 %271 to i64, !dbg !31
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %299, !dbg !31
  %301 = sext i32 %272 to i64, !dbg !31
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %301, !dbg !31
  %303 = sext i32 %273 to i64, !dbg !31
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %303, !dbg !31
  %305 = sext i32 %274 to i64, !dbg !31
  %306 = getelementptr float, ptr addrspace(1) %1, i64 %305, !dbg !31
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %99) #4, !dbg !32
  %308 = bitcast i32 %307 to float, !dbg !32
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %100) #4, !dbg !32
  %310 = bitcast i32 %309 to float, !dbg !32
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %101) #4, !dbg !32
  %312 = bitcast i32 %311 to float, !dbg !32
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %102) #4, !dbg !32
  %314 = bitcast i32 %313 to float, !dbg !32
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 %103) #4, !dbg !32
  %316 = bitcast i32 %315 to float, !dbg !32
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 %104) #4, !dbg !32
  %318 = bitcast i32 %317 to float, !dbg !32
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 %105) #4, !dbg !32
  %320 = bitcast i32 %319 to float, !dbg !32
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 %106) #4, !dbg !32
  %322 = bitcast i32 %321 to float, !dbg !32
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 %107) #4, !dbg !32
  %324 = bitcast i32 %323 to float, !dbg !32
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %108) #4, !dbg !32
  %326 = bitcast i32 %325 to float, !dbg !32
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %109) #4, !dbg !32
  %328 = bitcast i32 %327 to float, !dbg !32
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 %110) #4, !dbg !32
  %330 = bitcast i32 %329 to float, !dbg !32
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 %111) #4, !dbg !32
  %332 = bitcast i32 %331 to float, !dbg !32
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 %112) #4, !dbg !32
  %334 = bitcast i32 %333 to float, !dbg !32
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 %113) #4, !dbg !32
  %336 = bitcast i32 %335 to float, !dbg !32
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 %114) #4, !dbg !32
  %338 = bitcast i32 %337 to float, !dbg !32
  %339 = fadd float %308, 0x3E112E0BE0000000, !dbg !33
  %340 = fadd float %310, 0x3E112E0BE0000000, !dbg !33
  %341 = fadd float %312, 0x3E112E0BE0000000, !dbg !33
  %342 = fadd float %314, 0x3E112E0BE0000000, !dbg !33
  %343 = fadd float %316, 0x3E112E0BE0000000, !dbg !33
  %344 = fadd float %318, 0x3E112E0BE0000000, !dbg !33
  %345 = fadd float %320, 0x3E112E0BE0000000, !dbg !33
  %346 = fadd float %322, 0x3E112E0BE0000000, !dbg !33
  %347 = fadd float %324, 0x3E112E0BE0000000, !dbg !33
  %348 = fadd float %326, 0x3E112E0BE0000000, !dbg !33
  %349 = fadd float %328, 0x3E112E0BE0000000, !dbg !33
  %350 = fadd float %330, 0x3E112E0BE0000000, !dbg !33
  %351 = fadd float %332, 0x3E112E0BE0000000, !dbg !33
  %352 = fadd float %334, 0x3E112E0BE0000000, !dbg !33
  %353 = fadd float %336, 0x3E112E0BE0000000, !dbg !33
  %354 = fadd float %338, 0x3E112E0BE0000000, !dbg !33
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %355, 0, !dbg !34
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %356, 0, !dbg !34
  br i1 %.not.i, label %362, label %357, !dbg !34

357:                                              ; preds = %5
  br i1 %.not1.i, label %360, label %358, !dbg !34

358:                                              ; preds = %357
  %359 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %339) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

360:                                              ; preds = %357
  %361 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %339) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

362:                                              ; preds = %5
  br i1 %.not1.i, label %365, label %363, !dbg !34

363:                                              ; preds = %362
  %364 = tail call float @llvm.nvvm.sqrt.rn.f(float %339) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

365:                                              ; preds = %362
  %366 = tail call float @llvm.nvvm.sqrt.approx.f(float %339) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %358, %360, %363, %365
  %.0.i = phi float [ %359, %358 ], [ %361, %360 ], [ %364, %363 ], [ %366, %365 ], !dbg !34
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i2 = icmp eq i32 %367, 0, !dbg !34
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i5 = icmp eq i32 %368, 0, !dbg !34
  br i1 %.not.i2, label %374, label %369, !dbg !34

369:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %372, label %370, !dbg !34

370:                                              ; preds = %369
  %371 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %340) #4, !dbg !34
  br label %__nv_sqrtf.exit6, !dbg !34

372:                                              ; preds = %369
  %373 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %340) #4, !dbg !34
  br label %__nv_sqrtf.exit6, !dbg !34

374:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %377, label %375, !dbg !34

375:                                              ; preds = %374
  %376 = tail call float @llvm.nvvm.sqrt.rn.f(float %340) #4, !dbg !34
  br label %__nv_sqrtf.exit6, !dbg !34

377:                                              ; preds = %374
  %378 = tail call float @llvm.nvvm.sqrt.approx.f(float %340) #4, !dbg !34
  br label %__nv_sqrtf.exit6, !dbg !34

__nv_sqrtf.exit6:                                 ; preds = %370, %372, %375, %377
  %.0.i4 = phi float [ %371, %370 ], [ %373, %372 ], [ %376, %375 ], [ %378, %377 ], !dbg !34
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i7 = icmp eq i32 %379, 0, !dbg !34
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i10 = icmp eq i32 %380, 0, !dbg !34
  br i1 %.not.i7, label %386, label %381, !dbg !34

381:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %384, label %382, !dbg !34

382:                                              ; preds = %381
  %383 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %341) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

384:                                              ; preds = %381
  %385 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %341) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

386:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %389, label %387, !dbg !34

387:                                              ; preds = %386
  %388 = tail call float @llvm.nvvm.sqrt.rn.f(float %341) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

389:                                              ; preds = %386
  %390 = tail call float @llvm.nvvm.sqrt.approx.f(float %341) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

__nv_sqrtf.exit11:                                ; preds = %382, %384, %387, %389
  %.0.i9 = phi float [ %383, %382 ], [ %385, %384 ], [ %388, %387 ], [ %390, %389 ], !dbg !34
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i12 = icmp eq i32 %391, 0, !dbg !34
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i15 = icmp eq i32 %392, 0, !dbg !34
  br i1 %.not.i12, label %398, label %393, !dbg !34

393:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %396, label %394, !dbg !34

394:                                              ; preds = %393
  %395 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %342) #4, !dbg !34
  br label %__nv_sqrtf.exit16, !dbg !34

396:                                              ; preds = %393
  %397 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %342) #4, !dbg !34
  br label %__nv_sqrtf.exit16, !dbg !34

398:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %401, label %399, !dbg !34

399:                                              ; preds = %398
  %400 = tail call float @llvm.nvvm.sqrt.rn.f(float %342) #4, !dbg !34
  br label %__nv_sqrtf.exit16, !dbg !34

401:                                              ; preds = %398
  %402 = tail call float @llvm.nvvm.sqrt.approx.f(float %342) #4, !dbg !34
  br label %__nv_sqrtf.exit16, !dbg !34

__nv_sqrtf.exit16:                                ; preds = %394, %396, %399, %401
  %.0.i14 = phi float [ %395, %394 ], [ %397, %396 ], [ %400, %399 ], [ %402, %401 ], !dbg !34
  %403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i17 = icmp eq i32 %403, 0, !dbg !34
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i20 = icmp eq i32 %404, 0, !dbg !34
  br i1 %.not.i17, label %410, label %405, !dbg !34

405:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %408, label %406, !dbg !34

406:                                              ; preds = %405
  %407 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %343) #4, !dbg !34
  br label %__nv_sqrtf.exit21, !dbg !34

408:                                              ; preds = %405
  %409 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %343) #4, !dbg !34
  br label %__nv_sqrtf.exit21, !dbg !34

410:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %413, label %411, !dbg !34

411:                                              ; preds = %410
  %412 = tail call float @llvm.nvvm.sqrt.rn.f(float %343) #4, !dbg !34
  br label %__nv_sqrtf.exit21, !dbg !34

413:                                              ; preds = %410
  %414 = tail call float @llvm.nvvm.sqrt.approx.f(float %343) #4, !dbg !34
  br label %__nv_sqrtf.exit21, !dbg !34

__nv_sqrtf.exit21:                                ; preds = %406, %408, %411, %413
  %.0.i19 = phi float [ %407, %406 ], [ %409, %408 ], [ %412, %411 ], [ %414, %413 ], !dbg !34
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i22 = icmp eq i32 %415, 0, !dbg !34
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i25 = icmp eq i32 %416, 0, !dbg !34
  br i1 %.not.i22, label %422, label %417, !dbg !34

417:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %420, label %418, !dbg !34

418:                                              ; preds = %417
  %419 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %344) #4, !dbg !34
  br label %__nv_sqrtf.exit26, !dbg !34

420:                                              ; preds = %417
  %421 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %344) #4, !dbg !34
  br label %__nv_sqrtf.exit26, !dbg !34

422:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %425, label %423, !dbg !34

423:                                              ; preds = %422
  %424 = tail call float @llvm.nvvm.sqrt.rn.f(float %344) #4, !dbg !34
  br label %__nv_sqrtf.exit26, !dbg !34

425:                                              ; preds = %422
  %426 = tail call float @llvm.nvvm.sqrt.approx.f(float %344) #4, !dbg !34
  br label %__nv_sqrtf.exit26, !dbg !34

__nv_sqrtf.exit26:                                ; preds = %418, %420, %423, %425
  %.0.i24 = phi float [ %419, %418 ], [ %421, %420 ], [ %424, %423 ], [ %426, %425 ], !dbg !34
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i27 = icmp eq i32 %427, 0, !dbg !34
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i30 = icmp eq i32 %428, 0, !dbg !34
  br i1 %.not.i27, label %434, label %429, !dbg !34

429:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %432, label %430, !dbg !34

430:                                              ; preds = %429
  %431 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %345) #4, !dbg !34
  br label %__nv_sqrtf.exit31, !dbg !34

432:                                              ; preds = %429
  %433 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %345) #4, !dbg !34
  br label %__nv_sqrtf.exit31, !dbg !34

434:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %437, label %435, !dbg !34

435:                                              ; preds = %434
  %436 = tail call float @llvm.nvvm.sqrt.rn.f(float %345) #4, !dbg !34
  br label %__nv_sqrtf.exit31, !dbg !34

437:                                              ; preds = %434
  %438 = tail call float @llvm.nvvm.sqrt.approx.f(float %345) #4, !dbg !34
  br label %__nv_sqrtf.exit31, !dbg !34

__nv_sqrtf.exit31:                                ; preds = %430, %432, %435, %437
  %.0.i29 = phi float [ %431, %430 ], [ %433, %432 ], [ %436, %435 ], [ %438, %437 ], !dbg !34
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i32 = icmp eq i32 %439, 0, !dbg !34
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i35 = icmp eq i32 %440, 0, !dbg !34
  br i1 %.not.i32, label %446, label %441, !dbg !34

441:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %444, label %442, !dbg !34

442:                                              ; preds = %441
  %443 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %346) #4, !dbg !34
  br label %__nv_sqrtf.exit36, !dbg !34

444:                                              ; preds = %441
  %445 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %346) #4, !dbg !34
  br label %__nv_sqrtf.exit36, !dbg !34

446:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %449, label %447, !dbg !34

447:                                              ; preds = %446
  %448 = tail call float @llvm.nvvm.sqrt.rn.f(float %346) #4, !dbg !34
  br label %__nv_sqrtf.exit36, !dbg !34

449:                                              ; preds = %446
  %450 = tail call float @llvm.nvvm.sqrt.approx.f(float %346) #4, !dbg !34
  br label %__nv_sqrtf.exit36, !dbg !34

__nv_sqrtf.exit36:                                ; preds = %442, %444, %447, %449
  %.0.i34 = phi float [ %443, %442 ], [ %445, %444 ], [ %448, %447 ], [ %450, %449 ], !dbg !34
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i37 = icmp eq i32 %451, 0, !dbg !34
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i40 = icmp eq i32 %452, 0, !dbg !34
  br i1 %.not.i37, label %458, label %453, !dbg !34

453:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %456, label %454, !dbg !34

454:                                              ; preds = %453
  %455 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %347) #4, !dbg !34
  br label %__nv_sqrtf.exit41, !dbg !34

456:                                              ; preds = %453
  %457 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %347) #4, !dbg !34
  br label %__nv_sqrtf.exit41, !dbg !34

458:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %461, label %459, !dbg !34

459:                                              ; preds = %458
  %460 = tail call float @llvm.nvvm.sqrt.rn.f(float %347) #4, !dbg !34
  br label %__nv_sqrtf.exit41, !dbg !34

461:                                              ; preds = %458
  %462 = tail call float @llvm.nvvm.sqrt.approx.f(float %347) #4, !dbg !34
  br label %__nv_sqrtf.exit41, !dbg !34

__nv_sqrtf.exit41:                                ; preds = %454, %456, %459, %461
  %.0.i39 = phi float [ %455, %454 ], [ %457, %456 ], [ %460, %459 ], [ %462, %461 ], !dbg !34
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i42 = icmp eq i32 %463, 0, !dbg !34
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i45 = icmp eq i32 %464, 0, !dbg !34
  br i1 %.not.i42, label %470, label %465, !dbg !34

465:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %468, label %466, !dbg !34

466:                                              ; preds = %465
  %467 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %348) #4, !dbg !34
  br label %__nv_sqrtf.exit46, !dbg !34

468:                                              ; preds = %465
  %469 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %348) #4, !dbg !34
  br label %__nv_sqrtf.exit46, !dbg !34

470:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %473, label %471, !dbg !34

471:                                              ; preds = %470
  %472 = tail call float @llvm.nvvm.sqrt.rn.f(float %348) #4, !dbg !34
  br label %__nv_sqrtf.exit46, !dbg !34

473:                                              ; preds = %470
  %474 = tail call float @llvm.nvvm.sqrt.approx.f(float %348) #4, !dbg !34
  br label %__nv_sqrtf.exit46, !dbg !34

__nv_sqrtf.exit46:                                ; preds = %466, %468, %471, %473
  %.0.i44 = phi float [ %467, %466 ], [ %469, %468 ], [ %472, %471 ], [ %474, %473 ], !dbg !34
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i47 = icmp eq i32 %475, 0, !dbg !34
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i50 = icmp eq i32 %476, 0, !dbg !34
  br i1 %.not.i47, label %482, label %477, !dbg !34

477:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %480, label %478, !dbg !34

478:                                              ; preds = %477
  %479 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %349) #4, !dbg !34
  br label %__nv_sqrtf.exit51, !dbg !34

480:                                              ; preds = %477
  %481 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %349) #4, !dbg !34
  br label %__nv_sqrtf.exit51, !dbg !34

482:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %485, label %483, !dbg !34

483:                                              ; preds = %482
  %484 = tail call float @llvm.nvvm.sqrt.rn.f(float %349) #4, !dbg !34
  br label %__nv_sqrtf.exit51, !dbg !34

485:                                              ; preds = %482
  %486 = tail call float @llvm.nvvm.sqrt.approx.f(float %349) #4, !dbg !34
  br label %__nv_sqrtf.exit51, !dbg !34

__nv_sqrtf.exit51:                                ; preds = %478, %480, %483, %485
  %.0.i49 = phi float [ %479, %478 ], [ %481, %480 ], [ %484, %483 ], [ %486, %485 ], !dbg !34
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i52 = icmp eq i32 %487, 0, !dbg !34
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i55 = icmp eq i32 %488, 0, !dbg !34
  br i1 %.not.i52, label %494, label %489, !dbg !34

489:                                              ; preds = %__nv_sqrtf.exit51
  br i1 %.not1.i55, label %492, label %490, !dbg !34

490:                                              ; preds = %489
  %491 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %350) #4, !dbg !34
  br label %__nv_sqrtf.exit56, !dbg !34

492:                                              ; preds = %489
  %493 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %350) #4, !dbg !34
  br label %__nv_sqrtf.exit56, !dbg !34

494:                                              ; preds = %__nv_sqrtf.exit51
  br i1 %.not1.i55, label %497, label %495, !dbg !34

495:                                              ; preds = %494
  %496 = tail call float @llvm.nvvm.sqrt.rn.f(float %350) #4, !dbg !34
  br label %__nv_sqrtf.exit56, !dbg !34

497:                                              ; preds = %494
  %498 = tail call float @llvm.nvvm.sqrt.approx.f(float %350) #4, !dbg !34
  br label %__nv_sqrtf.exit56, !dbg !34

__nv_sqrtf.exit56:                                ; preds = %490, %492, %495, %497
  %.0.i54 = phi float [ %491, %490 ], [ %493, %492 ], [ %496, %495 ], [ %498, %497 ], !dbg !34
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i57 = icmp eq i32 %499, 0, !dbg !34
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i60 = icmp eq i32 %500, 0, !dbg !34
  br i1 %.not.i57, label %506, label %501, !dbg !34

501:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i60, label %504, label %502, !dbg !34

502:                                              ; preds = %501
  %503 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %351) #4, !dbg !34
  br label %__nv_sqrtf.exit61, !dbg !34

504:                                              ; preds = %501
  %505 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %351) #4, !dbg !34
  br label %__nv_sqrtf.exit61, !dbg !34

506:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i60, label %509, label %507, !dbg !34

507:                                              ; preds = %506
  %508 = tail call float @llvm.nvvm.sqrt.rn.f(float %351) #4, !dbg !34
  br label %__nv_sqrtf.exit61, !dbg !34

509:                                              ; preds = %506
  %510 = tail call float @llvm.nvvm.sqrt.approx.f(float %351) #4, !dbg !34
  br label %__nv_sqrtf.exit61, !dbg !34

__nv_sqrtf.exit61:                                ; preds = %502, %504, %507, %509
  %.0.i59 = phi float [ %503, %502 ], [ %505, %504 ], [ %508, %507 ], [ %510, %509 ], !dbg !34
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i62 = icmp eq i32 %511, 0, !dbg !34
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i65 = icmp eq i32 %512, 0, !dbg !34
  br i1 %.not.i62, label %518, label %513, !dbg !34

513:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %516, label %514, !dbg !34

514:                                              ; preds = %513
  %515 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %352) #4, !dbg !34
  br label %__nv_sqrtf.exit66, !dbg !34

516:                                              ; preds = %513
  %517 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %352) #4, !dbg !34
  br label %__nv_sqrtf.exit66, !dbg !34

518:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %521, label %519, !dbg !34

519:                                              ; preds = %518
  %520 = tail call float @llvm.nvvm.sqrt.rn.f(float %352) #4, !dbg !34
  br label %__nv_sqrtf.exit66, !dbg !34

521:                                              ; preds = %518
  %522 = tail call float @llvm.nvvm.sqrt.approx.f(float %352) #4, !dbg !34
  br label %__nv_sqrtf.exit66, !dbg !34

__nv_sqrtf.exit66:                                ; preds = %514, %516, %519, %521
  %.0.i64 = phi float [ %515, %514 ], [ %517, %516 ], [ %520, %519 ], [ %522, %521 ], !dbg !34
  %523 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i67 = icmp eq i32 %523, 0, !dbg !34
  %524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i70 = icmp eq i32 %524, 0, !dbg !34
  br i1 %.not.i67, label %530, label %525, !dbg !34

525:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %528, label %526, !dbg !34

526:                                              ; preds = %525
  %527 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %353) #4, !dbg !34
  br label %__nv_sqrtf.exit71, !dbg !34

528:                                              ; preds = %525
  %529 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %353) #4, !dbg !34
  br label %__nv_sqrtf.exit71, !dbg !34

530:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %533, label %531, !dbg !34

531:                                              ; preds = %530
  %532 = tail call float @llvm.nvvm.sqrt.rn.f(float %353) #4, !dbg !34
  br label %__nv_sqrtf.exit71, !dbg !34

533:                                              ; preds = %530
  %534 = tail call float @llvm.nvvm.sqrt.approx.f(float %353) #4, !dbg !34
  br label %__nv_sqrtf.exit71, !dbg !34

__nv_sqrtf.exit71:                                ; preds = %526, %528, %531, %533
  %.0.i69 = phi float [ %527, %526 ], [ %529, %528 ], [ %532, %531 ], [ %534, %533 ], !dbg !34
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i72 = icmp eq i32 %535, 0, !dbg !34
  %536 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i75 = icmp eq i32 %536, 0, !dbg !34
  br i1 %.not.i72, label %542, label %537, !dbg !34

537:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %540, label %538, !dbg !34

538:                                              ; preds = %537
  %539 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %354) #4, !dbg !34
  br label %__nv_sqrtf.exit76, !dbg !34

540:                                              ; preds = %537
  %541 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %354) #4, !dbg !34
  br label %__nv_sqrtf.exit76, !dbg !34

542:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %545, label %543, !dbg !34

543:                                              ; preds = %542
  %544 = tail call float @llvm.nvvm.sqrt.rn.f(float %354) #4, !dbg !34
  br label %__nv_sqrtf.exit76, !dbg !34

545:                                              ; preds = %542
  %546 = tail call float @llvm.nvvm.sqrt.approx.f(float %354) #4, !dbg !34
  br label %__nv_sqrtf.exit76, !dbg !34

__nv_sqrtf.exit76:                                ; preds = %538, %540, %543, %545
  %.0.i74 = phi float [ %539, %538 ], [ %541, %540 ], [ %544, %543 ], [ %546, %545 ], !dbg !34
  %547 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !35
  %548 = fadd float %.0.i4, 0x3DDB7CDFE0000000, !dbg !35
  %549 = fadd float %.0.i9, 0x3DDB7CDFE0000000, !dbg !35
  %550 = fadd float %.0.i14, 0x3DDB7CDFE0000000, !dbg !35
  %551 = fadd float %.0.i19, 0x3DDB7CDFE0000000, !dbg !35
  %552 = fadd float %.0.i24, 0x3DDB7CDFE0000000, !dbg !35
  %553 = fadd float %.0.i29, 0x3DDB7CDFE0000000, !dbg !35
  %554 = fadd float %.0.i34, 0x3DDB7CDFE0000000, !dbg !35
  %555 = fadd float %.0.i39, 0x3DDB7CDFE0000000, !dbg !35
  %556 = fadd float %.0.i44, 0x3DDB7CDFE0000000, !dbg !35
  %557 = fadd float %.0.i49, 0x3DDB7CDFE0000000, !dbg !35
  %558 = fadd float %.0.i54, 0x3DDB7CDFE0000000, !dbg !35
  %559 = fadd float %.0.i59, 0x3DDB7CDFE0000000, !dbg !35
  %560 = fadd float %.0.i64, 0x3DDB7CDFE0000000, !dbg !35
  %561 = fadd float %.0.i69, 0x3DDB7CDFE0000000, !dbg !35
  %562 = fadd float %.0.i74, 0x3DDB7CDFE0000000, !dbg !35
  %563 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %547) #4, !dbg !36
  %564 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %548) #4, !dbg !36
  %565 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %549) #4, !dbg !36
  %566 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %550) #4, !dbg !36
  %567 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %551) #4, !dbg !36
  %568 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %552) #4, !dbg !36
  %569 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %553) #4, !dbg !36
  %570 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %554) #4, !dbg !36
  %571 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %555) #4, !dbg !36
  %572 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %556) #4, !dbg !36
  %573 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %557) #4, !dbg !36
  %574 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %558) #4, !dbg !36
  %575 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %559) #4, !dbg !36
  %576 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %560) #4, !dbg !36
  %577 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %561) #4, !dbg !36
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %562) #4, !dbg !36
  %579 = mul i32 %6, 15376, !dbg !37
  %580 = mul i32 %12, 961, !dbg !37
  %581 = mul i32 %13, 961, !dbg !37
  %582 = mul i32 %14, 961, !dbg !37
  %583 = mul i32 %15, 961, !dbg !37
  %584 = mul i32 %16, 961, !dbg !37
  %585 = mul i32 %17, 961, !dbg !37
  %586 = mul i32 %18, 961, !dbg !37
  %587 = mul i32 %19, 961, !dbg !37
  %588 = mul i32 %20, 961, !dbg !37
  %589 = mul i32 %21, 961, !dbg !37
  %590 = mul i32 %22, 961, !dbg !37
  %591 = mul i32 %23, 961, !dbg !37
  %592 = mul i32 %24, 961, !dbg !37
  %593 = mul i32 %25, 961, !dbg !37
  %594 = mul i32 %26, 961, !dbg !37
  %595 = add i32 %53, %579, !dbg !38
  %596 = add i32 %53, %580, !dbg !38
  %597 = add i32 %53, %581, !dbg !38
  %598 = add i32 %53, %582, !dbg !38
  %599 = add i32 %53, %583, !dbg !38
  %600 = add i32 %53, %584, !dbg !38
  %601 = add i32 %53, %585, !dbg !38
  %602 = add i32 %53, %586, !dbg !38
  %603 = add i32 %53, %587, !dbg !38
  %604 = add i32 %53, %588, !dbg !38
  %605 = add i32 %53, %589, !dbg !38
  %606 = add i32 %53, %590, !dbg !38
  %607 = add i32 %53, %591, !dbg !38
  %608 = add i32 %53, %592, !dbg !38
  %609 = add i32 %53, %593, !dbg !38
  %610 = add i32 %53, %594, !dbg !38
  %611 = sext i32 %595 to i64, !dbg !39
  %612 = getelementptr float, ptr addrspace(1) %2, i64 %611, !dbg !39
  %613 = sext i32 %596 to i64, !dbg !39
  %614 = getelementptr float, ptr addrspace(1) %2, i64 %613, !dbg !39
  %615 = sext i32 %597 to i64, !dbg !39
  %616 = getelementptr float, ptr addrspace(1) %2, i64 %615, !dbg !39
  %617 = sext i32 %598 to i64, !dbg !39
  %618 = getelementptr float, ptr addrspace(1) %2, i64 %617, !dbg !39
  %619 = sext i32 %599 to i64, !dbg !39
  %620 = getelementptr float, ptr addrspace(1) %2, i64 %619, !dbg !39
  %621 = sext i32 %600 to i64, !dbg !39
  %622 = getelementptr float, ptr addrspace(1) %2, i64 %621, !dbg !39
  %623 = sext i32 %601 to i64, !dbg !39
  %624 = getelementptr float, ptr addrspace(1) %2, i64 %623, !dbg !39
  %625 = sext i32 %602 to i64, !dbg !39
  %626 = getelementptr float, ptr addrspace(1) %2, i64 %625, !dbg !39
  %627 = sext i32 %603 to i64, !dbg !39
  %628 = getelementptr float, ptr addrspace(1) %2, i64 %627, !dbg !39
  %629 = sext i32 %604 to i64, !dbg !39
  %630 = getelementptr float, ptr addrspace(1) %2, i64 %629, !dbg !39
  %631 = sext i32 %605 to i64, !dbg !39
  %632 = getelementptr float, ptr addrspace(1) %2, i64 %631, !dbg !39
  %633 = sext i32 %606 to i64, !dbg !39
  %634 = getelementptr float, ptr addrspace(1) %2, i64 %633, !dbg !39
  %635 = sext i32 %607 to i64, !dbg !39
  %636 = getelementptr float, ptr addrspace(1) %2, i64 %635, !dbg !39
  %637 = sext i32 %608 to i64, !dbg !39
  %638 = getelementptr float, ptr addrspace(1) %2, i64 %637, !dbg !39
  %639 = sext i32 %609 to i64, !dbg !39
  %640 = getelementptr float, ptr addrspace(1) %2, i64 %639, !dbg !39
  %641 = sext i32 %610 to i64, !dbg !39
  %642 = getelementptr float, ptr addrspace(1) %2, i64 %641, !dbg !39
  %643 = bitcast float %563 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %643, ptr addrspace(1) %612, i1 %99) #4, !dbg !40
  %644 = bitcast float %564 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %644, ptr addrspace(1) %614, i1 %100) #4, !dbg !40
  %645 = bitcast float %565 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %645, ptr addrspace(1) %616, i1 %101) #4, !dbg !40
  %646 = bitcast float %566 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %646, ptr addrspace(1) %618, i1 %102) #4, !dbg !40
  %647 = bitcast float %567 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %647, ptr addrspace(1) %620, i1 %103) #4, !dbg !40
  %648 = bitcast float %568 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %648, ptr addrspace(1) %622, i1 %104) #4, !dbg !40
  %649 = bitcast float %569 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %649, ptr addrspace(1) %624, i1 %105) #4, !dbg !40
  %650 = bitcast float %570 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %650, ptr addrspace(1) %626, i1 %106) #4, !dbg !40
  %651 = bitcast float %571 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %651, ptr addrspace(1) %628, i1 %107) #4, !dbg !40
  %652 = bitcast float %572 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %652, ptr addrspace(1) %630, i1 %108) #4, !dbg !40
  %653 = bitcast float %573 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %653, ptr addrspace(1) %632, i1 %109) #4, !dbg !40
  %654 = bitcast float %574 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %654, ptr addrspace(1) %634, i1 %110) #4, !dbg !40
  %655 = bitcast float %575 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %655, ptr addrspace(1) %636, i1 %111) #4, !dbg !40
  %656 = bitcast float %576 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %656, ptr addrspace(1) %638, i1 %112) #4, !dbg !40
  %657 = bitcast float %577 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %657, ptr addrspace(1) %640, i1 %113) #4, !dbg !40
  %658 = bitcast float %578 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %658, ptr addrspace(1) %642, i1 %114) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4ebqrsq2ikwesrt4tjtb2k3y4xpbe7yogrspynmxwobged3he5.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_14", linkageName: "triton_poi_fused_add_div_sqrt_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 26, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 34, scope: !7)
!38 = !DILocation(line: 40, column: 30, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 45, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
