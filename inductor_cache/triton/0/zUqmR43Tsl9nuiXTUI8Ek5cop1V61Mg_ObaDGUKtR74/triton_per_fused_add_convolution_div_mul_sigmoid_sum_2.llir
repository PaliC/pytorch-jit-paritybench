; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_convolution_div_mul_sigmoid_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 7, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = shl i32 %12, 1, !dbg !15
  %21 = and i32 %20, 14, !dbg !15
  %22 = srem i32 %16, 4, !dbg !16
  %23 = shl i32 %16, 4, !dbg !17
  %24 = or disjoint i32 %23, %21, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = bitcast i32 %29 to float, !dbg !20
  %32 = sext i32 %22 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %41 = bitcast i32 %39 to float, !dbg !24
  %42 = bitcast i32 %40 to float, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %30, %36, !dbg !27
  %48 = fadd float %31, %36, !dbg !27
  %49 = fadd float %41, %46, !dbg !28
  %50 = fadd float %42, %46, !dbg !28
  %51 = fsub float 0.000000e+00, %47, !dbg !29
  %52 = fsub float 0.000000e+00, %48, !dbg !29
  %53 = fmul float %51, 0x3FF7154760000000, !dbg !33
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #3, !dbg !33
  %55 = fmul float %52, 0x3FF7154760000000, !dbg !33
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #3, !dbg !33
  %57 = fadd float %54, 1.000000e+00, !dbg !34
  %58 = fadd float %56, 1.000000e+00, !dbg !34
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %57) #3, !dbg !35
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %58) #3, !dbg !35
  %61 = fmul float %49, %59, !dbg !36
  %62 = fmul float %50, %60, !dbg !36
  %63 = fadd float %61, %62, !dbg !37
  %64 = select i1 %18, float %63, float 0.000000e+00, !dbg !37
  %65 = bitcast float %64 to i32, !dbg !40
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = fadd float %64, %67, !dbg !37
  %69 = bitcast float %68 to i32, !dbg !40
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !40
  %71 = bitcast i32 %70 to float, !dbg !40
  %72 = fadd float %68, %71, !dbg !37
  %73 = bitcast float %72 to i32, !dbg !40
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !40
  %75 = bitcast i32 %74 to float, !dbg !40
  %76 = fadd float %72, %75, !dbg !37
  %77 = fadd float %59, %60, !dbg !41
  %78 = select i1 %18, float %77, float 0.000000e+00, !dbg !41
  %79 = bitcast float %78 to i32, !dbg !43
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !43
  %81 = bitcast i32 %80 to float, !dbg !43
  %82 = fadd float %78, %81, !dbg !41
  %83 = bitcast float %82 to i32, !dbg !43
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !43
  %85 = bitcast i32 %84 to float, !dbg !43
  %86 = fadd float %82, %85, !dbg !41
  %87 = bitcast float %86 to i32, !dbg !43
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !43
  %89 = bitcast i32 %88 to float, !dbg !43
  %90 = fadd float %86, %89, !dbg !41
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !44
  %92 = bitcast float %90 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !44
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !44
  %95 = fadd float %94, 0x3EB0C6F7A0000000, !dbg !44
  %96 = fadd float %90, 0x3EB0C6F7A0000000, !dbg !44
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %96) #3, !dbg !45
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %96) #3, !dbg !46
  %99 = bitcast float %47 to i32, !dbg !47
  %100 = bitcast float %48 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %99, i32 %100, ptr addrspace(1) %26, i1 %18) #3, !dbg !47
  %101 = bitcast float %49 to i32, !dbg !48
  %102 = bitcast float %50 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %37, i1 %18) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %103 = sext i32 %17 to i64, !dbg !50
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !50
  %105 = and i32 %12, 56, !dbg !51
  %106 = icmp eq i32 %105, 0, !dbg !51
  %107 = bitcast float %95 to i32, !dbg !51
  %108 = and i1 %106, %19, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %104, i1 %108) #3, !dbg !51
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %103, !dbg !52
  %110 = bitcast float %97 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %110, i1 true) #3, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %110, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %111 = load i32, ptr addrspace(3) %93, align 4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %109, i1 %108) #3, !dbg !53
  %112 = getelementptr float, ptr addrspace(1) %6, i64 %103, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %113 = bitcast float %98 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %113, i1 true) #3, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %113, i1 true) #3, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %114 = load i32, ptr addrspace(3) %93, align 4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %112, i1 %108) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py", directory: "inductor_cache/s3")
!4 = !{ptr @triton_per_fused_add_convolution_div_mul_sigmoid_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_mul_sigmoid_sum_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_mul_sigmoid_sum_2", linkageName: "triton_per_fused_add_convolution_div_mul_sigmoid_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 38, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!39 = !DILocation(line: 42, column: 26, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !39)
!41 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !42)
!42 = !DILocation(line: 45, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 47, scope: !7)
!48 = !DILocation(line: 51, column: 47, scope: !7)
!49 = !DILocation(line: 52, column: 4, scope: !7)
!50 = !DILocation(line: 53, column: 28, scope: !7)
!51 = !DILocation(line: 53, column: 40, scope: !7)
!52 = !DILocation(line: 54, column: 25, scope: !7)
!53 = !DILocation(line: 54, column: 37, scope: !7)
!54 = !DILocation(line: 55, column: 25, scope: !7)
!55 = !DILocation(line: 55, column: 37, scope: !7)
!56 = !DILocation(line: 55, column: 4, scope: !7)
