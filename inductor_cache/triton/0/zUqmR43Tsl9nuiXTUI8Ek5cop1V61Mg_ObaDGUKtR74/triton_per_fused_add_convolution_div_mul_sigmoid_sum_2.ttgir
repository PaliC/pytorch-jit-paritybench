#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0)
#loc1 = loc(unknown)
#loc29 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":42:26)
#loc33 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":45:26)
#loc53 = loc(callsite(#loc1 at #loc29))
#loc56 = loc(callsite(#loc1 at #loc33))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_convolution_div_mul_sigmoid_sum_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999997E-7> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999997E-7> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_0 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = arith.muli %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %13 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %15 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc10)
    %18 = arith.addi %16, %17 : tensor<8x16xi32, #blocked> loc(#loc10)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = tt.addptr %19, %18 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc11)
    %21 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc12)
    %22 = tt.load %20, %21, %cst_3 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %23 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %24 = tt.addptr %23, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc13)
    %25 = tt.load %24, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %27 = tt.addptr %26, %18 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc15)
    %28 = tt.load %27, %21, %cst_3 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc16)
    %29 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %30 = tt.addptr %29, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc17)
    %31 = tt.load %30, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %32 = tt.broadcast %25 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc19)
    %33 = arith.addf %22, %32 : tensor<8x16xf32, #blocked> loc(#loc19)
    %34 = tt.broadcast %31 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc20)
    %35 = arith.addf %28, %34 : tensor<8x16xf32, #blocked> loc(#loc20)
    %36 = arith.subf %cst_3, %33 : tensor<8x16xf32, #blocked> loc(#loc48)
    %37 = math.exp %36 : tensor<8x16xf32, #blocked> loc(#loc49)
    %38 = arith.addf %37, %cst_2 : tensor<8x16xf32, #blocked> loc(#loc50)
    %39 = arith.divf %cst_2, %38 : tensor<8x16xf32, #blocked> loc(#loc51)
    %40 = arith.mulf %39, %35 : tensor<8x16xf32, #blocked> loc(#loc26)
    %41 = arith.select %21, %40, %cst_3 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc27)
    %42 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc29)), %arg10: f32 loc(callsite(#loc1 at #loc29))):
      %61 = arith.addf %arg9, %arg10 : f32 loc(#loc57)
      tt.reduce.return %61 : f32 loc(#loc52)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc52)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc31)
    %44 = arith.select %21, %39, %cst_3 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc32)
    %45 = "tt.reduce"(%44) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc33)), %arg10: f32 loc(callsite(#loc1 at #loc33))):
      %61 = arith.addf %arg9, %arg10 : f32 loc(#loc58)
      tt.reduce.return %61 : f32 loc(#loc55)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc55)
    %46 = triton_gpu.convert_layout %45 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc34)
    %47 = tt.expand_dims %46 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc35)
    %48 = tt.expand_dims %45 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc35)
    %49 = arith.addf %47, %cst_5 : tensor<8x1xf32, #blocked1> loc(#loc34)
    %50 = arith.addf %48, %cst_4 : tensor<8x1xf32, #blocked> loc(#loc34)
    %51 = arith.divf %43, %50 : tensor<8x1xf32, #blocked> loc(#loc36)
    %52 = arith.divf %51, %50 : tensor<8x1xf32, #blocked> loc(#loc37)
    tt.store %20, %33, %21 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc38)
    tt.store %27, %35, %21 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc39)
    gpu.barrier loc(#loc40)
    %53 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %54 = tt.addptr %53, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc41)
    tt.store %54, %49, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    %55 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    %56 = tt.addptr %55, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc43)
    %57 = triton_gpu.convert_layout %51 : tensor<8x1xf32, #blocked> -> tensor<8x1xf32, #blocked1> loc(#loc44)
    tt.store %56, %57, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %58 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %59 = tt.addptr %58, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc45)
    %60 = triton_gpu.convert_layout %52 : tensor<8x1xf32, #blocked> -> tensor<8x1xf32, #blocked1> loc(#loc46)
    tt.store %59, %60, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":23:28)
#loc3 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":23:33)
#loc4 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":24:44)
#loc5 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":24:23)
#loc6 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":25:21)
#loc7 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":26:34)
#loc8 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":31:19)
#loc9 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":32:42)
#loc10 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":32:39)
#loc11 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":32:34)
#loc12 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":32:47)
#loc13 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":33:30)
#loc14 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":33:35)
#loc15 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":34:34)
#loc16 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":34:47)
#loc17 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":35:30)
#loc18 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":35:35)
#loc19 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":36:18)
#loc20 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":37:18)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc22 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":38:22)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc26 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":39:18)
#loc27 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":41:34)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc31 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":42:29)
#loc32 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":44:35)
#loc34 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":47:20)
#loc35 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":45:29)
#loc36 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":48:20)
#loc37 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":49:20)
#loc38 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":50:47)
#loc39 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":51:47)
#loc40 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":52:4)
#loc41 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":53:28)
#loc42 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":53:40)
#loc43 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":54:25)
#loc44 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":54:37)
#loc45 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":55:25)
#loc46 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":55:37)
#loc47 = loc("inductor_cache/s3/cs3dtg44navhfebfvh7richhd3jed6ukqlc4tfkan7qjriv6lls4.py":55:4)
#loc48 = loc(callsite(#loc21 at #loc22))
#loc49 = loc(callsite(#loc23 at #loc22))
#loc50 = loc(callsite(#loc24 at #loc22))
#loc51 = loc(callsite(#loc25 at #loc22))
#loc52 = loc(callsite(#loc28 at #loc29))
#loc54 = loc(callsite(#loc30 at #loc28))
#loc55 = loc(callsite(#loc28 at #loc33))
#loc57 = loc(callsite(#loc54 at #loc29))
#loc58 = loc(callsite(#loc54 at #loc33))
