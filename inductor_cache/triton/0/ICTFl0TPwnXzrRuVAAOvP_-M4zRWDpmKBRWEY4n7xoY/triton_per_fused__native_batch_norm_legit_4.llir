; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 124, !dbg !12
  %11 = lshr i32 %8, 5, !dbg !12
  %12 = and i32 %8, 127, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = icmp slt i32 %13, 1024, !dbg !14
  %15 = shl i32 %11, 8, !dbg !15
  %16 = and i32 %15, 1792, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %17 = sdiv i32 %.frozen, 256, !dbg !16
  %18 = shl i32 %17, 12, !dbg !17
  %19 = or disjoint i32 %18, %16, !dbg !18
  %20 = mul i32 %17, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %20, !dbg !19
  %21 = add i32 %19, %.decomposed, !dbg !20
  %22 = add nsw i32 %.decomposed, 2048, !dbg !18
  %23 = add i32 %22, %19, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = fadd float %33, %42, !dbg !23
  %47 = fadd float %34, %43, !dbg !23
  %48 = fadd float %35, %44, !dbg !23
  %49 = fadd float %36, %45, !dbg !23
  %50 = and i32 %11, 7, !dbg !28
  %51 = shl nuw nsw i32 %10, 3, !dbg !28
  %52 = or disjoint i32 %51, %50, !dbg !28
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !28
  %54 = bitcast float %46 to i32, !dbg !28
  %55 = select i1 %14, i32 %54, i32 0, !dbg !23
  %56 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %56, i1 true) #5, !dbg !28
  %57 = or disjoint i32 %51, 8, !dbg !28
  %58 = or disjoint i32 %57, %50, !dbg !28
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !28
  %60 = bitcast float %47 to i32, !dbg !28
  %61 = select i1 %14, i32 %60, i32 0, !dbg !23
  %62 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %62, i1 true) #5, !dbg !28
  %63 = or disjoint i32 %51, 16, !dbg !28
  %64 = or disjoint i32 %63, %50, !dbg !28
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !28
  %66 = bitcast float %48 to i32, !dbg !28
  %67 = select i1 %14, i32 %66, i32 0, !dbg !23
  %68 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %68, i1 true) #5, !dbg !28
  %69 = or disjoint i32 %51, 24, !dbg !28
  %70 = or disjoint i32 %69, %50, !dbg !28
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !28
  %72 = bitcast float %49 to i32, !dbg !28
  %73 = select i1 %14, i32 %72, i32 0, !dbg !23
  %74 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %74, i1 true) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %75 = icmp slt i32 %8, 1024, !dbg !28
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !28
  %77 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %76, i1 %75) #5, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = fadd float %78, %80, !dbg !23
  %82 = bitcast float %81 to i32, !dbg !28
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fadd float %81, %84, !dbg !23
  %86 = bitcast float %85 to i32, !dbg !28
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !28
  %88 = bitcast i32 %87 to float, !dbg !28
  %89 = fadd float %85, %88, !dbg !23
  %90 = and i32 %8, 7, !dbg !28
  %91 = icmp eq i32 %90, 0, !dbg !28
  %92 = and i1 %75, %91, !dbg !28
  %93 = bitcast float %89 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %93, i1 %92) #5, !dbg !28
  %94 = getelementptr i8, ptr addrspace(3) %76, i32 1024, !dbg !28
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %75) #5, !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = fadd float %96, %98, !dbg !23
  %100 = bitcast float %99 to i32, !dbg !28
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !28
  %102 = bitcast i32 %101 to float, !dbg !28
  %103 = fadd float %99, %102, !dbg !23
  %104 = bitcast float %103 to i32, !dbg !28
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !28
  %106 = bitcast i32 %105 to float, !dbg !28
  %107 = fadd float %103, %106, !dbg !23
  %108 = bitcast float %107 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %108, i1 %92) #5, !dbg !28
  %109 = getelementptr i8, ptr addrspace(3) %76, i32 2048, !dbg !28
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %75) #5, !dbg !28
  %111 = bitcast i32 %110 to float, !dbg !28
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = fadd float %111, %113, !dbg !23
  %115 = bitcast float %114 to i32, !dbg !28
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = fadd float %114, %117, !dbg !23
  %119 = bitcast float %118 to i32, !dbg !28
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = fadd float %118, %121, !dbg !23
  %123 = bitcast float %122 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %123, i1 %92) #5, !dbg !28
  %124 = getelementptr i8, ptr addrspace(3) %76, i32 3072, !dbg !28
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %75) #5, !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !28
  %128 = bitcast i32 %127 to float, !dbg !28
  %129 = fadd float %126, %128, !dbg !23
  %130 = bitcast float %129 to i32, !dbg !28
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !28
  %132 = bitcast i32 %131 to float, !dbg !28
  %133 = fadd float %129, %132, !dbg !23
  %134 = bitcast float %133 to i32, !dbg !28
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = fadd float %133, %136, !dbg !23
  %138 = bitcast float %137 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %138, i1 %92) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51, !dbg !28
  %140 = load float, ptr addrspace(3) %139, align 16, !dbg !28
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !28
  %142 = load float, ptr addrspace(3) %141, align 16, !dbg !28
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !28
  %144 = load float, ptr addrspace(3) %143, align 16, !dbg !28
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !28
  %146 = load float, ptr addrspace(3) %145, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !29
  %148 = bitcast float %140 to i32, !dbg !29
  %149 = bitcast float %142 to i32, !dbg !29
  %150 = bitcast float %144 to i32, !dbg !29
  %151 = bitcast float %146 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %147, i32 %148, i32 %149, i32 %150, i32 %151, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !29
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 1.600000e+01) #5, !dbg !29
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 1.600000e+01) #5, !dbg !29
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 1.600000e+01) #5, !dbg !29
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 1.600000e+01) #5, !dbg !29
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 1.600000e+01) #5, !dbg !29
  %159 = fsub float %33, %155, !dbg !30
  %160 = fsub float %34, %156, !dbg !30
  %161 = fsub float %35, %157, !dbg !30
  %162 = fsub float %36, %158, !dbg !30
  %163 = fsub float %42, %155, !dbg !30
  %164 = fsub float %43, %156, !dbg !30
  %165 = fsub float %44, %157, !dbg !30
  %166 = fsub float %45, %158, !dbg !30
  %167 = fmul float %159, %159, !dbg !31
  %168 = fmul float %160, %160, !dbg !31
  %169 = fmul float %161, %161, !dbg !31
  %170 = fmul float %162, %162, !dbg !31
  %171 = fmul float %163, %163, !dbg !31
  %172 = fmul float %164, %164, !dbg !31
  %173 = fmul float %165, %165, !dbg !31
  %174 = fmul float %166, %166, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %175 = fadd float %167, %171, !dbg !34
  %176 = fadd float %168, %172, !dbg !34
  %177 = fadd float %169, %173, !dbg !34
  %178 = fadd float %170, %174, !dbg !34
  %179 = bitcast float %175 to i32, !dbg !32
  %180 = select i1 %14, i32 %179, i32 0, !dbg !34
  %181 = insertelement <1 x i32> poison, i32 %180, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %181, i1 true) #5, !dbg !32
  %182 = bitcast float %176 to i32, !dbg !32
  %183 = select i1 %14, i32 %182, i32 0, !dbg !34
  %184 = insertelement <1 x i32> poison, i32 %183, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %184, i1 true) #5, !dbg !32
  %185 = bitcast float %177 to i32, !dbg !32
  %186 = select i1 %14, i32 %185, i32 0, !dbg !34
  %187 = insertelement <1 x i32> poison, i32 %186, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %187, i1 true) #5, !dbg !32
  %188 = bitcast float %178 to i32, !dbg !32
  %189 = select i1 %14, i32 %188, i32 0, !dbg !34
  %190 = insertelement <1 x i32> poison, i32 %189, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %190, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %191 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %76, i1 %75) #5, !dbg !32
  %192 = bitcast i32 %191 to float, !dbg !32
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !32
  %194 = bitcast i32 %193 to float, !dbg !32
  %195 = fadd float %192, %194, !dbg !34
  %196 = bitcast float %195 to i32, !dbg !32
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !32
  %198 = bitcast i32 %197 to float, !dbg !32
  %199 = fadd float %195, %198, !dbg !34
  %200 = bitcast float %199 to i32, !dbg !32
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !32
  %202 = bitcast i32 %201 to float, !dbg !32
  %203 = fadd float %199, %202, !dbg !34
  %204 = bitcast float %203 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %204, i1 %92) #5, !dbg !32
  %205 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %75) #5, !dbg !32
  %206 = bitcast i32 %205 to float, !dbg !32
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !32
  %208 = bitcast i32 %207 to float, !dbg !32
  %209 = fadd float %206, %208, !dbg !34
  %210 = bitcast float %209 to i32, !dbg !32
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !32
  %212 = bitcast i32 %211 to float, !dbg !32
  %213 = fadd float %209, %212, !dbg !34
  %214 = bitcast float %213 to i32, !dbg !32
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !32
  %216 = bitcast i32 %215 to float, !dbg !32
  %217 = fadd float %213, %216, !dbg !34
  %218 = bitcast float %217 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %218, i1 %92) #5, !dbg !32
  %219 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %75) #5, !dbg !32
  %220 = bitcast i32 %219 to float, !dbg !32
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !32
  %222 = bitcast i32 %221 to float, !dbg !32
  %223 = fadd float %220, %222, !dbg !34
  %224 = bitcast float %223 to i32, !dbg !32
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !32
  %226 = bitcast i32 %225 to float, !dbg !32
  %227 = fadd float %223, %226, !dbg !34
  %228 = bitcast float %227 to i32, !dbg !32
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !32
  %230 = bitcast i32 %229 to float, !dbg !32
  %231 = fadd float %227, %230, !dbg !34
  %232 = bitcast float %231 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %232, i1 %92) #5, !dbg !32
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %75) #5, !dbg !32
  %234 = bitcast i32 %233 to float, !dbg !32
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 4, i32 31), !dbg !32
  %236 = bitcast i32 %235 to float, !dbg !32
  %237 = fadd float %234, %236, !dbg !34
  %238 = bitcast float %237 to i32, !dbg !32
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !32
  %240 = bitcast i32 %239 to float, !dbg !32
  %241 = fadd float %237, %240, !dbg !34
  %242 = bitcast float %241 to i32, !dbg !32
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !32
  %244 = bitcast i32 %243 to float, !dbg !32
  %245 = fadd float %241, %244, !dbg !34
  %246 = bitcast float %245 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %246, i1 %92) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %247 = load i32, ptr addrspace(3) %139, align 16, !dbg !32
  %248 = load i32, ptr addrspace(3) %141, align 16, !dbg !32
  %249 = load i32, ptr addrspace(3) %143, align 16, !dbg !32
  %250 = load i32, ptr addrspace(3) %145, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %147, i32 %247, i32 %248, i32 %249, i32 %250, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %251 = load float, ptr addrspace(3) %152, align 4, !dbg !35
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float 1.600000e+01) #5, !dbg !36
  %253 = fadd float %252, 0x3EE4F8B580000000, !dbg !37
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %254, 0, !dbg !35
  br i1 %.not.i, label %257, label %255, !dbg !35

255:                                              ; preds = %5
  %256 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %253), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

257:                                              ; preds = %5
  %258 = tail call float @llvm.nvvm.rsqrt.approx.f(float %253), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %255, %257
  %.0.i = phi float [ %256, %255 ], [ %258, %257 ], !dbg !35
  %259 = or disjoint i32 %7, %12, !dbg !13
  %260 = icmp slt i32 %259, 1024, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %261 = sext i32 %259 to i64, !dbg !39
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !39
  %263 = and i32 %8, 128, !dbg !40
  %264 = icmp eq i32 %263, 0, !dbg !40
  %265 = bitcast float %.0.i to i32, !dbg !40
  %266 = and i1 %264, %260, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %262, i1 %266) #5, !dbg !40
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !41
  %268 = bitcast float %154 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %268, ptr addrspace(1) %267, i1 %266) #5, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c35kv2sk2oppy7p5hwwypouuztvuwladtncutc4yf6mianxyzgyl.py", directory: "inductor_cache/35")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_4", linkageName: "triton_per_fused__native_batch_norm_legit_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 45, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 60, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 73, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 19, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 4, scope: !7)
!39 = !DILocation(line: 51, column: 28, scope: !7)
!40 = !DILocation(line: 51, column: 40, scope: !7)
!41 = !DILocation(line: 52, column: 25, scope: !7)
!42 = !DILocation(line: 52, column: 37, scope: !7)
!43 = !DILocation(line: 52, column: 4, scope: !7)
