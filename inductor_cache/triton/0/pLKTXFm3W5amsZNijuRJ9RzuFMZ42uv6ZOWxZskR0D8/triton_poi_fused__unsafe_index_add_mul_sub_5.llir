; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %19 = shl i32 %18, 1, !dbg !16
  %20 = or disjoint i32 %19, 1, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %21 = sdiv i32 %.frozen, 64, !dbg !18
  %.frozen1 = freeze i32 %20, !dbg !18
  %22 = sdiv i32 %.frozen1, 64, !dbg !18
  %23 = mul i32 %21, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %23, !dbg !19
  %24 = mul i32 %22, 64, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !19
  %.frozen3 = freeze i32 %16, !dbg !20
  %25 = sdiv i32 %.frozen3, 128, !dbg !20
  %26 = mul i32 %25, 128, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %26, !dbg !21
  %27 = sext i32 %21 to i64, !dbg !22
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %22 to i64, !dbg !22
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !23
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !23
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !23
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !23
  %39 = sext i32 %.decomposed to i64, !dbg !24
  %40 = getelementptr i64, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = sext i32 %.decomposed2 to i64, !dbg !24
  %42 = getelementptr i64, ptr addrspace(1) %1, i64 %41, !dbg !24
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !25
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !25
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !25
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !25
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %51 = getelementptr i64, ptr addrspace(1) %3, i64 %39, !dbg !26
  %52 = getelementptr i64, ptr addrspace(1) %3, i64 %41, !dbg !26
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !29
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !29
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !29
  %71 = getelementptr i64, ptr addrspace(1) %5, i64 %27, !dbg !30
  %72 = getelementptr i64, ptr addrspace(1) %5, i64 %29, !dbg !30
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !31
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !31
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !31
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !31
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !31
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !31
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !31
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !33
  %92 = bitcast i32 %91 to float, !dbg !33
  %93 = add i64 %34, 5, !dbg !34
  %94 = add i64 %38, 5, !dbg !34
  %95 = icmp slt i64 %34, 0, !dbg !35
  %96 = icmp slt i64 %38, 0, !dbg !35
  %97 = select i1 %95, i64 %93, i64 %34, !dbg !36
  %98 = select i1 %96, i64 %94, i64 %38, !dbg !36
  %99 = icmp slt i64 %46, 0, !dbg !37
  %100 = icmp slt i64 %50, 0, !dbg !37
  %101 = shl i64 %46, 7, !dbg !38
  %102 = add i64 %101, 640, !dbg !38
  %103 = select i1 %99, i64 %102, i64 %101, !dbg !38
  %104 = shl i64 %50, 7, !dbg !38
  %105 = add i64 %104, 640, !dbg !38
  %106 = select i1 %100, i64 %105, i64 %104, !dbg !38
  %107 = sext i32 %.decomposed4 to i64, !dbg !39
  %108 = mul i64 %97, 640, !dbg !40
  %109 = mul i64 %98, 640, !dbg !40
  %110 = mul i32 %25, 3200, !dbg !41
  %111 = sext i32 %110 to i64, !dbg !42
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !43
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %107, !dbg !43
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %108, !dbg !43
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %111, !dbg !43
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !43
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %107, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %109, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %111, !dbg !43
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %17) #1, !dbg !44
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !44
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !44
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !44
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !44
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %17) #1, !dbg !44
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !44
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !44
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !44
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !44
  %130 = icmp slt i64 %56, 0, !dbg !45
  %131 = icmp slt i64 %60, 0, !dbg !45
  %132 = shl i64 %56, 7, !dbg !46
  %133 = add i64 %132, 640, !dbg !46
  %134 = select i1 %130, i64 %133, i64 %132, !dbg !46
  %135 = shl i64 %60, 7, !dbg !46
  %136 = add i64 %135, 640, !dbg !46
  %137 = select i1 %131, i64 %136, i64 %135, !dbg !46
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !47
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %107, !dbg !47
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %108, !dbg !47
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %111, !dbg !47
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !47
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %107, !dbg !47
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %109, !dbg !47
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %111, !dbg !47
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %17) #1, !dbg !48
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !48
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !48
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !48
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !48
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %17) #1, !dbg !48
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !48
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !48
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !48
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !48
  %156 = add i64 %76, 5, !dbg !49
  %157 = add i64 %80, 5, !dbg !49
  %158 = icmp slt i64 %76, 0, !dbg !50
  %159 = icmp slt i64 %80, 0, !dbg !50
  %160 = select i1 %158, i64 %156, i64 %76, !dbg !51
  %161 = select i1 %159, i64 %157, i64 %80, !dbg !51
  %162 = mul i64 %160, 640, !dbg !52
  %163 = mul i64 %161, 640, !dbg !52
  %164 = getelementptr float, ptr addrspace(1) %113, i64 %162, !dbg !53
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %111, !dbg !53
  %166 = getelementptr float, ptr addrspace(1) %117, i64 %163, !dbg !53
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %111, !dbg !53
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %17) #1, !dbg !54
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !54
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !54
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !54
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !54
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %17) #1, !dbg !54
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !54
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !54
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !54
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !54
  %178 = getelementptr float, ptr addrspace(1) %139, i64 %162, !dbg !55
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %111, !dbg !55
  %180 = getelementptr float, ptr addrspace(1) %143, i64 %163, !dbg !55
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %111, !dbg !55
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %17) #1, !dbg !56
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !56
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !56
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !56
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !56
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %17) #1, !dbg !56
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !56
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !56
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !56
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !56
  %192 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !54
  %193 = insertelement <2 x i32> %192, i32 %121, i64 1, !dbg !54
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !54
  %195 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !56
  %196 = insertelement <2 x i32> %195, i32 %147, i64 1, !dbg !56
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !56
  %198 = fsub <2 x float> %197, %194, !dbg !57
  %199 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !58
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !58
  %201 = shufflevector <2 x float> %200, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %202 = fmul <2 x float> %198, %201, !dbg !58
  %203 = fadd <2 x float> %202, %194, !dbg !59
  %204 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !54
  %205 = insertelement <2 x i32> %204, i32 %122, i64 1, !dbg !54
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !54
  %207 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !56
  %208 = insertelement <2 x i32> %207, i32 %148, i64 1, !dbg !56
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !56
  %210 = fsub <2 x float> %209, %206, !dbg !57
  %211 = fmul <2 x float> %210, %201, !dbg !58
  %212 = fadd <2 x float> %211, %206, !dbg !59
  %213 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !54
  %214 = insertelement <2 x i32> %213, i32 %123, i64 1, !dbg !54
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !54
  %216 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !56
  %217 = insertelement <2 x i32> %216, i32 %149, i64 1, !dbg !56
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !56
  %219 = fsub <2 x float> %218, %215, !dbg !57
  %220 = fmul <2 x float> %219, %201, !dbg !58
  %221 = fadd <2 x float> %220, %215, !dbg !59
  %222 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !54
  %223 = insertelement <2 x i32> %222, i32 %124, i64 1, !dbg !54
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !54
  %225 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !56
  %226 = insertelement <2 x i32> %225, i32 %150, i64 1, !dbg !56
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !56
  %228 = fsub <2 x float> %227, %224, !dbg !57
  %229 = fmul <2 x float> %228, %201, !dbg !58
  %230 = fadd <2 x float> %229, %224, !dbg !59
  %231 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !54
  %232 = insertelement <2 x i32> %231, i32 %126, i64 1, !dbg !54
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !54
  %234 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !56
  %235 = insertelement <2 x i32> %234, i32 %152, i64 1, !dbg !56
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !56
  %237 = fsub <2 x float> %236, %233, !dbg !57
  %238 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !58
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !58
  %240 = shufflevector <2 x float> %239, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %241 = fmul <2 x float> %237, %240, !dbg !58
  %242 = fadd <2 x float> %241, %233, !dbg !59
  %243 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !54
  %244 = insertelement <2 x i32> %243, i32 %127, i64 1, !dbg !54
  %245 = bitcast <2 x i32> %244 to <2 x float>, !dbg !54
  %246 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !56
  %247 = insertelement <2 x i32> %246, i32 %153, i64 1, !dbg !56
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !56
  %249 = fsub <2 x float> %248, %245, !dbg !57
  %250 = fmul <2 x float> %249, %240, !dbg !58
  %251 = fadd <2 x float> %250, %245, !dbg !59
  %252 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !54
  %253 = insertelement <2 x i32> %252, i32 %128, i64 1, !dbg !54
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !54
  %255 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !56
  %256 = insertelement <2 x i32> %255, i32 %154, i64 1, !dbg !56
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !56
  %258 = fsub <2 x float> %257, %254, !dbg !57
  %259 = fmul <2 x float> %258, %240, !dbg !58
  %260 = fadd <2 x float> %259, %254, !dbg !59
  %261 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !54
  %262 = insertelement <2 x i32> %261, i32 %129, i64 1, !dbg !54
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !54
  %264 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !56
  %265 = insertelement <2 x i32> %264, i32 %155, i64 1, !dbg !56
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !56
  %267 = fsub <2 x float> %266, %263, !dbg !57
  %268 = fmul <2 x float> %267, %240, !dbg !58
  %269 = fadd <2 x float> %268, %263, !dbg !59
  %270 = extractelement <2 x float> %203, i64 0, !dbg !60
  %271 = extractelement <2 x float> %203, i64 1, !dbg !61
  %272 = fsub float %270, %271, !dbg !60
  %273 = extractelement <2 x float> %212, i64 0, !dbg !60
  %274 = extractelement <2 x float> %212, i64 1, !dbg !61
  %275 = fsub float %273, %274, !dbg !60
  %276 = extractelement <2 x float> %221, i64 0, !dbg !60
  %277 = extractelement <2 x float> %221, i64 1, !dbg !61
  %278 = fsub float %276, %277, !dbg !60
  %279 = extractelement <2 x float> %230, i64 0, !dbg !60
  %280 = extractelement <2 x float> %230, i64 1, !dbg !61
  %281 = fsub float %279, %280, !dbg !60
  %282 = extractelement <2 x float> %242, i64 0, !dbg !60
  %283 = extractelement <2 x float> %242, i64 1, !dbg !61
  %284 = fsub float %282, %283, !dbg !60
  %285 = extractelement <2 x float> %251, i64 0, !dbg !60
  %286 = extractelement <2 x float> %251, i64 1, !dbg !61
  %287 = fsub float %285, %286, !dbg !60
  %288 = extractelement <2 x float> %260, i64 0, !dbg !60
  %289 = extractelement <2 x float> %260, i64 1, !dbg !61
  %290 = fsub float %288, %289, !dbg !60
  %291 = extractelement <2 x float> %269, i64 0, !dbg !60
  %292 = extractelement <2 x float> %269, i64 1, !dbg !61
  %293 = fsub float %291, %292, !dbg !60
  %294 = fmul float %272, %87, !dbg !62
  %295 = fmul float %275, %87, !dbg !62
  %296 = fmul float %278, %87, !dbg !62
  %297 = fmul float %281, %87, !dbg !62
  %298 = fmul float %284, %92, !dbg !62
  %299 = fmul float %287, %92, !dbg !62
  %300 = fmul float %290, %92, !dbg !62
  %301 = fmul float %293, %92, !dbg !62
  %302 = fadd float %271, %294, !dbg !61
  %303 = fadd float %274, %295, !dbg !61
  %304 = fadd float %277, %296, !dbg !61
  %305 = fadd float %280, %297, !dbg !61
  %306 = fadd float %283, %298, !dbg !61
  %307 = fadd float %286, %299, !dbg !61
  %308 = fadd float %289, %300, !dbg !61
  %309 = fadd float %292, %301, !dbg !61
  %310 = shl i32 %18, 8, !dbg !63
  %311 = shl i32 %20, 7, !dbg !63
  %312 = shl i32 %25, 19, !dbg !64
  %313 = add i32 %312, %.decomposed4, !dbg !65
  %314 = add i32 %313, %310, !dbg !66
  %315 = add i32 %313, %311, !dbg !66
  %316 = sext i32 %314 to i64, !dbg !67
  %317 = getelementptr float, ptr addrspace(1) %7, i64 %316, !dbg !67
  %318 = sext i32 %315 to i64, !dbg !67
  %319 = getelementptr float, ptr addrspace(1) %7, i64 %318, !dbg !67
  %320 = bitcast float %302 to i32, !dbg !68
  %321 = bitcast float %303 to i32, !dbg !68
  %322 = bitcast float %304 to i32, !dbg !68
  %323 = bitcast float %305 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %321, i32 %322, i32 %323, ptr addrspace(1) %317, i1 %17) #1, !dbg !68
  %324 = bitcast float %306 to i32, !dbg !68
  %325 = bitcast float %307 to i32, !dbg !68
  %326 = bitcast float %308 to i32, !dbg !68
  %327 = bitcast float %309 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %324, i32 %325, i32 %326, i32 %327, ptr addrspace(1) %319, i1 %17) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmn6coy37qzpcg4bfjezdd44ithvz7bliibnw6zzzd5unnduwe3i.py", directory: "inductor_cache/mn")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_5", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 45, column: 18, scope: !7)
!38 = !DILocation(line: 47, column: 39, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 47, column: 50, scope: !7)
!41 = !DILocation(line: 47, column: 62, scope: !7)
!42 = !DILocation(line: 47, column: 57, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !7)
!44 = !DILocation(line: 47, column: 67, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 40, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 69, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 35, scope: !7)
!52 = !DILocation(line: 58, column: 51, scope: !7)
!53 = !DILocation(line: 58, column: 31, scope: !7)
!54 = !DILocation(line: 58, column: 69, scope: !7)
!55 = !DILocation(line: 59, column: 31, scope: !7)
!56 = !DILocation(line: 59, column: 70, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 66, column: 34, scope: !7)
!64 = !DILocation(line: 66, column: 46, scope: !7)
!65 = !DILocation(line: 66, column: 30, scope: !7)
!66 = !DILocation(line: 66, column: 39, scope: !7)
!67 = !DILocation(line: 66, column: 25, scope: !7)
!68 = !DILocation(line: 66, column: 58, scope: !7)
!69 = !DILocation(line: 66, column: 4, scope: !7)
