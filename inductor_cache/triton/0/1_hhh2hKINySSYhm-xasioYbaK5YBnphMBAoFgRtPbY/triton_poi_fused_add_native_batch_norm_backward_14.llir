; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_batch_norm_backward_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 160, !dbg !14
  %19 = srem i32 %17, 160, !dbg !14
  %20 = sext i32 %16 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !15
  %22 = sext i32 %17 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %29 = bitcast i32 %25 to float, !dbg !16
  %30 = bitcast i32 %26 to float, !dbg !16
  %31 = bitcast i32 %27 to float, !dbg !16
  %32 = bitcast i32 %28 to float, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %38 = bitcast i32 %34 to float, !dbg !16
  %39 = bitcast i32 %35 to float, !dbg !16
  %40 = bitcast i32 %36 to float, !dbg !16
  %41 = bitcast i32 %37 to float, !dbg !16
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !17
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !18
  %49 = bitcast i32 %45 to float, !dbg !18
  %50 = bitcast i32 %46 to float, !dbg !18
  %51 = bitcast i32 %47 to float, !dbg !18
  %52 = bitcast i32 %48 to float, !dbg !18
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !18
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !18
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !18
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !18
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !18
  %58 = bitcast i32 %54 to float, !dbg !18
  %59 = bitcast i32 %55 to float, !dbg !18
  %60 = bitcast i32 %56 to float, !dbg !18
  %61 = bitcast i32 %57 to float, !dbg !18
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !19
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !19
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !20
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !20
  %69 = bitcast i32 %65 to float, !dbg !20
  %70 = bitcast i32 %66 to float, !dbg !20
  %71 = bitcast i32 %67 to float, !dbg !20
  %72 = bitcast i32 %68 to float, !dbg !20
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !20
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !20
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !20
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !20
  %78 = bitcast i32 %74 to float, !dbg !20
  %79 = bitcast i32 %75 to float, !dbg !20
  %80 = bitcast i32 %76 to float, !dbg !20
  %81 = bitcast i32 %77 to float, !dbg !20
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !22
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !22
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !22
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !22
  %89 = bitcast i32 %85 to float, !dbg !22
  %90 = bitcast i32 %86 to float, !dbg !22
  %91 = bitcast i32 %87 to float, !dbg !22
  %92 = bitcast i32 %88 to float, !dbg !22
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !22
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !22
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !22
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !22
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !22
  %98 = bitcast i32 %94 to float, !dbg !22
  %99 = bitcast i32 %95 to float, !dbg !22
  %100 = bitcast i32 %96 to float, !dbg !22
  %101 = bitcast i32 %97 to float, !dbg !22
  %102 = sext i32 %18 to i64, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !23
  %104 = sext i32 %19 to i64, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %104, !dbg !23
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !24
  %111 = bitcast i32 %107 to float, !dbg !24
  %112 = bitcast i32 %108 to float, !dbg !24
  %113 = bitcast i32 %109 to float, !dbg !24
  %114 = bitcast i32 %110 to float, !dbg !24
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !24
  %120 = bitcast i32 %116 to float, !dbg !24
  %121 = bitcast i32 %117 to float, !dbg !24
  %122 = bitcast i32 %118 to float, !dbg !24
  %123 = bitcast i32 %119 to float, !dbg !24
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !25
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %104, !dbg !25
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !26
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !26
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !26
  %131 = bitcast i32 %127 to float, !dbg !26
  %132 = bitcast i32 %128 to float, !dbg !26
  %133 = bitcast i32 %129 to float, !dbg !26
  %134 = bitcast i32 %130 to float, !dbg !26
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !26
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !26
  %140 = bitcast i32 %136 to float, !dbg !26
  %141 = bitcast i32 %137 to float, !dbg !26
  %142 = bitcast i32 %138 to float, !dbg !26
  %143 = bitcast i32 %139 to float, !dbg !26
  %144 = getelementptr float, ptr addrspace(1) %6, i64 %102, !dbg !27
  %145 = getelementptr float, ptr addrspace(1) %6, i64 %104, !dbg !27
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !28
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !28
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !28
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !28
  %151 = bitcast i32 %147 to float, !dbg !28
  %152 = bitcast i32 %148 to float, !dbg !28
  %153 = bitcast i32 %149 to float, !dbg !28
  %154 = bitcast i32 %150 to float, !dbg !28
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !28
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !28
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !28
  %160 = bitcast i32 %156 to float, !dbg !28
  %161 = bitcast i32 %157 to float, !dbg !28
  %162 = bitcast i32 %158 to float, !dbg !28
  %163 = bitcast i32 %159 to float, !dbg !28
  %164 = fadd float %29, %49, !dbg !29
  %165 = fadd float %30, %50, !dbg !29
  %166 = fadd float %31, %51, !dbg !29
  %167 = fadd float %32, %52, !dbg !29
  %168 = fadd float %38, %58, !dbg !29
  %169 = fadd float %39, %59, !dbg !29
  %170 = fadd float %40, %60, !dbg !29
  %171 = fadd float %41, %61, !dbg !29
  %172 = fadd float %164, %69, !dbg !30
  %173 = fadd float %165, %70, !dbg !30
  %174 = fadd float %166, %71, !dbg !30
  %175 = fadd float %167, %72, !dbg !30
  %176 = fadd float %168, %78, !dbg !30
  %177 = fadd float %169, %79, !dbg !30
  %178 = fadd float %170, %80, !dbg !30
  %179 = fadd float %171, %81, !dbg !30
  %180 = fadd float %172, %89, !dbg !31
  %181 = fadd float %173, %90, !dbg !31
  %182 = fadd float %174, %91, !dbg !31
  %183 = fadd float %175, %92, !dbg !31
  %184 = fadd float %176, %98, !dbg !31
  %185 = fadd float %177, %99, !dbg !31
  %186 = fadd float %178, %100, !dbg !31
  %187 = fadd float %179, %101, !dbg !31
  %188 = fsub float %180, %111, !dbg !32
  %189 = fsub float %181, %112, !dbg !32
  %190 = fsub float %182, %113, !dbg !32
  %191 = fsub float %183, %114, !dbg !32
  %192 = fsub float %184, %120, !dbg !32
  %193 = fsub float %185, %121, !dbg !32
  %194 = fsub float %186, %122, !dbg !32
  %195 = fsub float %187, %123, !dbg !32
  %196 = fsub float %172, %131, !dbg !33
  %197 = fsub float %173, %132, !dbg !33
  %198 = fsub float %174, %133, !dbg !33
  %199 = fsub float %175, %134, !dbg !33
  %200 = fsub float %176, %140, !dbg !33
  %201 = fsub float %177, %141, !dbg !33
  %202 = fsub float %178, %142, !dbg !33
  %203 = fsub float %179, %143, !dbg !33
  %204 = fsub float %164, %151, !dbg !34
  %205 = fsub float %165, %152, !dbg !34
  %206 = fsub float %166, %153, !dbg !34
  %207 = fsub float %167, %154, !dbg !34
  %208 = fsub float %168, %160, !dbg !34
  %209 = fsub float %169, %161, !dbg !34
  %210 = fsub float %170, %162, !dbg !34
  %211 = fsub float %171, %163, !dbg !34
  %212 = bitcast float %188 to i32, !dbg !35
  %213 = bitcast float %189 to i32, !dbg !35
  %214 = bitcast float %190 to i32, !dbg !35
  %215 = bitcast float %191 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %213, i32 %214, i32 %215, ptr addrspace(1) %82, i1 true) #1, !dbg !35
  %216 = bitcast float %192 to i32, !dbg !35
  %217 = bitcast float %193 to i32, !dbg !35
  %218 = bitcast float %194 to i32, !dbg !35
  %219 = bitcast float %195 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %216, i32 %217, i32 %218, i32 %219, ptr addrspace(1) %83, i1 true) #1, !dbg !35
  %220 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !36
  %221 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !36
  %222 = bitcast float %196 to i32, !dbg !37
  %223 = bitcast float %197 to i32, !dbg !37
  %224 = bitcast float %198 to i32, !dbg !37
  %225 = bitcast float %199 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %220, i1 true) #1, !dbg !37
  %226 = bitcast float %200 to i32, !dbg !37
  %227 = bitcast float %201 to i32, !dbg !37
  %228 = bitcast float %202 to i32, !dbg !37
  %229 = bitcast float %203 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %221, i1 true) #1, !dbg !37
  %230 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !38
  %231 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !38
  %232 = bitcast float %204 to i32, !dbg !39
  %233 = bitcast float %205 to i32, !dbg !39
  %234 = bitcast float %206 to i32, !dbg !39
  %235 = bitcast float %207 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %233, i32 %234, i32 %235, ptr addrspace(1) %230, i1 true) #1, !dbg !39
  %236 = bitcast float %208 to i32, !dbg !39
  %237 = bitcast float %209 to i32, !dbg !39
  %238 = bitcast float %210 to i32, !dbg !39
  %239 = bitcast float %211 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %236, i32 %237, i32 %238, i32 %239, ptr addrspace(1) %231, i1 true) #1, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf6xmwn5eifvu7t635zntkda353cap3jnphdt5lbhehd5ckvikrn.py", directory: "inductor_cache/f6")
!4 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_batch_norm_backward_14", linkageName: "triton_poi_fused_add_native_batch_norm_backward_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 34, scope: !7)
!22 = !DILocation(line: 29, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 19, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 39, column: 39, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 37, scope: !7)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 37, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
