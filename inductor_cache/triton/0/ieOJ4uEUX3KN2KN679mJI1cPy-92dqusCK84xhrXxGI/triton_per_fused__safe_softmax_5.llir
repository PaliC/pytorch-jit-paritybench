; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__safe_softmax_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = icmp slt i32 %5, 272, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = icmp samesign ult i32 %8, 17, !dbg !13
  %.frozen = freeze i32 %5, !dbg !14
  %10 = sdiv i32 %.frozen, 68, !dbg !14
  %11 = mul i32 %10, 68, !dbg !15
  %.decomposed = sub i32 %.frozen, %11, !dbg !15
  %12 = mul i32 %5, 17, !dbg !16
  %13 = add i32 %12, %8, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = and i1 %9, %6, !dbg !19
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %16, i32 0, i1 %16) #2, !dbg !20
  %18 = bitcast i32 %17 to float, !dbg !20
  %19 = select i1 %16, float %18, float 0xFFF0000000000000, !dbg !21
  %20 = bitcast float %19 to i32, !dbg !22
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 16, i32 31), !dbg !22
  %22 = bitcast i32 %21 to float, !dbg !22
  %23 = fcmp ogt float %19, %22, !dbg !26
  %24 = fcmp uno float %19, 0.000000e+00, !dbg !28
  %25 = or i1 %23, %24, !dbg !29
  %26 = select i1 %25, float %19, float %22, !dbg !30
  %27 = bitcast float %26 to i32, !dbg !22
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 8, i32 31), !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = fcmp ogt float %26, %29, !dbg !26
  %31 = fcmp uno float %26, 0.000000e+00, !dbg !28
  %32 = or i1 %30, %31, !dbg !29
  %33 = select i1 %32, float %26, float %29, !dbg !30
  %34 = bitcast float %33 to i32, !dbg !22
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = fcmp ogt float %33, %36, !dbg !26
  %38 = fcmp uno float %33, 0.000000e+00, !dbg !28
  %39 = or i1 %37, %38, !dbg !29
  %40 = select i1 %39, float %33, float %36, !dbg !30
  %41 = bitcast float %40 to i32, !dbg !22
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = fcmp ogt float %40, %43, !dbg !26
  %45 = fcmp uno float %40, 0.000000e+00, !dbg !28
  %46 = or i1 %44, %45, !dbg !29
  %47 = select i1 %46, float %40, float %43, !dbg !30
  %48 = bitcast float %47 to i32, !dbg !22
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = fcmp ogt float %47, %50, !dbg !26
  %52 = fcmp uno float %47, 0.000000e+00, !dbg !28
  %53 = or i1 %51, %52, !dbg !29
  %54 = select i1 %53, float %47, float %50, !dbg !30
  %55 = fsub float %18, %54, !dbg !31
  %56 = fmul float %55, 0x3FF7154760000000, !dbg !32
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #2, !dbg !32
  %58 = select i1 %16, float %57, float 0.000000e+00, !dbg !33
  %59 = bitcast float %58 to i32, !dbg !34
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = fadd float %58, %61, !dbg !38
  %63 = bitcast float %62 to i32, !dbg !34
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = fadd float %62, %65, !dbg !38
  %67 = bitcast float %66 to i32, !dbg !34
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = fadd float %66, %69, !dbg !38
  %71 = bitcast float %70 to i32, !dbg !34
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = fadd float %70, %73, !dbg !38
  %75 = bitcast float %74 to i32, !dbg !34
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = fadd float %74, %77, !dbg !38
  %79 = fcmp une float %18, 0xFFF0000000000000, !dbg !40
  %narrow = select i1 %16, i1 %79, i1 false, !dbg !41
  %80 = zext i1 %narrow to i32, !dbg !41
  %81 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %80, i32 -1), !dbg !42
  %82 = icmp eq i32 %81, 0, !dbg !44
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %78) #2, !dbg !45
  %84 = mul nsw i32 %.decomposed, 17, !dbg !46
  %85 = add nsw i32 %84, %8, !dbg !47
  %86 = mul i32 %10, 1184, !dbg !48
  %87 = add i32 %85, %86, !dbg !49
  %88 = sext i32 %87 to i64, !dbg !50
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !50
  %90 = and i32 %7, 32, !dbg !51
  %91 = icmp eq i32 %90, 0, !dbg !51
  %92 = bitcast float %83 to i32, !dbg !51
  %93 = select i1 %82, i32 0, i32 %92, !dbg !52
  %94 = and i1 %91, %16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %89, i1 %94) #2, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq4vrj3ncg5dgubzqtgywb7vuticfunezd2l7csir3u5saygcfzr.py", directory: "inductor_cache/q4")
!4 = !{ptr @triton_per_fused__safe_softmax_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__safe_softmax_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__safe_softmax_5", linkageName: "triton_per_fused__safe_softmax_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 38, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 51, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 131, column: 29, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 36, column: 37, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 120, column: 21, scope: !27, inlinedAt: !25)
!29 = !DILocation(line: 120, column: 16, scope: !27, inlinedAt: !25)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !25)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 23, scope: !7)
!33 = !DILocation(line: 40, column: 41, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 41, column: 25, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 43, scope: !7)
!42 = !DILocation(line: 232, column: 29, scope: !23, inlinedAt: !43)
!43 = !DILocation(line: 49, column: 38, scope: !7)
!44 = !DILocation(line: 50, column: 21, scope: !7)
!45 = !DILocation(line: 51, column: 19, scope: !7)
!46 = !DILocation(line: 54, column: 33, scope: !7)
!47 = !DILocation(line: 54, column: 30, scope: !7)
!48 = !DILocation(line: 54, column: 43, scope: !7)
!49 = !DILocation(line: 54, column: 38, scope: !7)
!50 = !DILocation(line: 54, column: 25, scope: !7)
!51 = !DILocation(line: 54, column: 55, scope: !7)
!52 = !DILocation(line: 53, column: 35, scope: !7)
!53 = !DILocation(line: 54, column: 4, scope: !7)
