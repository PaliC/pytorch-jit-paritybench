; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_layer_norm_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 252, !dbg !11
  %16 = shl i32 %10, 8, !dbg !12
  %17 = or disjoint i32 %16, %15, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = zext nneg i32 %15 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !21
  %36 = icmp eq i32 %12, 0, !dbg !22
  %37 = and i32 %13, 1, !dbg !22
  %38 = getelementptr float, ptr addrspace(3) @global_smem, i32 %37, !dbg !22
  %39 = icmp slt i32 %11, 2, !dbg !22
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !22
  %41 = and i32 %11, 1, !dbg !22
  %42 = icmp eq i32 %41, 0, !dbg !22
  %43 = and i1 %39, %42, !dbg !22
  %44 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !15
  %45 = insertelement <4 x i32> %44, i32 %23, i64 1, !dbg !15
  %46 = insertelement <4 x i32> %45, i32 %22, i64 2, !dbg !15
  %47 = insertelement <4 x i32> %46, i32 %21, i64 3, !dbg !15
  %48 = bitcast <4 x i32> %47 to <4 x float>, !dbg !15
  %49 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !17
  %50 = insertelement <4 x i32> %49, i32 %30, i64 1, !dbg !17
  %51 = insertelement <4 x i32> %50, i32 %29, i64 2, !dbg !17
  %52 = insertelement <4 x i32> %51, i32 %28, i64 3, !dbg !17
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !17
  %54 = fadd <4 x float> %48, %53, !dbg !26
  %55 = extractelement <4 x float> %54, i64 2, !dbg !27
  %56 = extractelement <4 x float> %54, i64 3, !dbg !27
  %57 = fadd float %56, %55, !dbg !27
  %58 = extractelement <4 x float> %54, i64 1, !dbg !27
  %59 = fadd float %58, %57, !dbg !27
  %60 = extractelement <4 x float> %54, i64 0, !dbg !27
  %61 = fadd float %60, %59, !dbg !27
  %62 = bitcast float %61 to i32, !dbg !22
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = fadd float %61, %64, !dbg !27
  %66 = bitcast float %65 to i32, !dbg !22
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = fadd float %65, %68, !dbg !27
  %70 = bitcast float %69 to i32, !dbg !22
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = fadd float %69, %72, !dbg !27
  %74 = bitcast float %73 to i32, !dbg !22
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = fadd float %73, %76, !dbg !27
  %78 = bitcast float %77 to i32, !dbg !22
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = fadd float %77, %80, !dbg !27
  %82 = bitcast float %81 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %82, i1 %36) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %40, i1 %39) #5, !dbg !22
  %84 = bitcast i32 %83 to float, !dbg !22
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !22
  %86 = bitcast i32 %85 to float, !dbg !22
  %87 = fadd float %84, %86, !dbg !27
  %88 = bitcast float %87 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %88, i1 %43) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %89 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %90 = fadd float %89, 0.000000e+00, !dbg !29
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 2.560000e+02) #5, !dbg !33
  %92 = insertelement <4 x float> poison, float %91, i64 0, !dbg !34
  %93 = shufflevector <4 x float> %92, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !34
  %94 = fsub <4 x float> %54, %93, !dbg !34
  %95 = fmul <4 x float> %94, %94, !dbg !35
  %96 = fmul <4 x float> %94, %94, !dbg !35
  %97 = fmul <4 x float> %94, %94, !dbg !35
  %98 = fmul <4 x float> %94, %94, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %shift = shufflevector <4 x float> %95, <4 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !38
  %99 = fadd <4 x float> %shift, %96, !dbg !38
  %shift1 = shufflevector <4 x float> %99, <4 x float> poison, <4 x i32> <i32 poison, i32 2, i32 poison, i32 poison>, !dbg !38
  %100 = fadd <4 x float> %97, %shift1, !dbg !38
  %shift2 = shufflevector <4 x float> %100, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !38
  %101 = fadd <4 x float> %98, %shift2, !dbg !38
  %102 = extractelement <4 x float> %101, i64 0, !dbg !38
  %103 = bitcast float %102 to i32, !dbg !36
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 16, i32 31), !dbg !36
  %105 = bitcast i32 %104 to float, !dbg !36
  %106 = fadd float %102, %105, !dbg !38
  %107 = bitcast float %106 to i32, !dbg !36
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !36
  %109 = bitcast i32 %108 to float, !dbg !36
  %110 = fadd float %106, %109, !dbg !38
  %111 = bitcast float %110 to i32, !dbg !36
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !36
  %113 = bitcast i32 %112 to float, !dbg !36
  %114 = fadd float %110, %113, !dbg !38
  %115 = bitcast float %114 to i32, !dbg !36
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !36
  %117 = bitcast i32 %116 to float, !dbg !36
  %118 = fadd float %114, %117, !dbg !38
  %119 = bitcast float %118 to i32, !dbg !36
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !36
  %121 = bitcast i32 %120 to float, !dbg !36
  %122 = fadd float %118, %121, !dbg !38
  %123 = bitcast float %122 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %123, i1 %36) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %124 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %40, i1 %39) #5, !dbg !36
  %125 = bitcast i32 %124 to float, !dbg !36
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !36
  %127 = bitcast i32 %126 to float, !dbg !36
  %128 = fadd float %125, %127, !dbg !38
  %129 = bitcast float %128 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %129, i1 %43) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %130 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %131 = fadd float %130, 0.000000e+00, !dbg !39
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 2.560000e+02) #5, !dbg !41
  %133 = fadd float %132, 0x3EE4F8B580000000, !dbg !42
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %134, 0, !dbg !43
  br i1 %.not.i, label %137, label %135, !dbg !43

135:                                              ; preds = %9
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

137:                                              ; preds = %9
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %135, %137
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], !dbg !43
  %139 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %140 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %141 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %142 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %143 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %144 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %145 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %146 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %147 = insertelement <4 x float> poison, float %.0.i, i64 0, !dbg !44
  %148 = shufflevector <4 x float> %147, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !44
  %149 = fmul <4 x float> %94, %148, !dbg !44
  %150 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !21
  %151 = insertelement <4 x i32> %150, i32 %140, i64 1, !dbg !21
  %152 = insertelement <4 x i32> %151, i32 %141, i64 2, !dbg !21
  %153 = insertelement <4 x i32> %152, i32 %142, i64 3, !dbg !21
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !21
  %155 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !19
  %156 = insertelement <4 x i32> %155, i32 %144, i64 1, !dbg !19
  %157 = insertelement <4 x i32> %156, i32 %145, i64 2, !dbg !19
  %158 = insertelement <4 x i32> %157, i32 %146, i64 3, !dbg !19
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !19
  %160 = fmul <4 x float> %149, %159, !dbg !45
  %161 = fadd <4 x float> %160, %154, !dbg !46
  %162 = fcmp olt <4 x float> %161, zeroinitializer, !dbg !47
  %163 = extractelement <4 x i1> %162, i64 3, !dbg !49
  %164 = extractelement <4 x i1> %162, i64 2, !dbg !49
  %165 = extractelement <4 x i1> %162, i64 1, !dbg !49
  %166 = extractelement <4 x i1> %162, i64 0, !dbg !49
  %167 = bitcast float %56 to i32, !dbg !50
  %168 = bitcast float %55 to i32, !dbg !50
  %169 = bitcast float %58 to i32, !dbg !50
  %170 = bitcast float %60 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %19, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %171 = sext i32 %10 to i64, !dbg !52
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !52
  %urem = and i32 %11, 63, !dbg !53
  %173 = icmp eq i32 %urem, 0, !dbg !53
  %174 = bitcast float %.0.i to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %172, i1 %173) #5, !dbg !53
  %175 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !54
  %bc = bitcast <4 x float> %161 to <4 x i32>, !dbg !55
  %176 = extractelement <4 x i32> %bc, i64 3, !dbg !55
  %177 = select i1 %163, i32 0, i32 %176, !dbg !49
  %bc3 = bitcast <4 x float> %161 to <4 x i32>, !dbg !55
  %178 = extractelement <4 x i32> %bc3, i64 2, !dbg !55
  %179 = select i1 %164, i32 0, i32 %178, !dbg !49
  %bc4 = bitcast <4 x float> %161 to <4 x i32>, !dbg !55
  %180 = extractelement <4 x i32> %bc4, i64 1, !dbg !55
  %181 = select i1 %165, i32 0, i32 %180, !dbg !49
  %bc5 = bitcast <4 x float> %161 to <4 x i32>, !dbg !55
  %182 = extractelement <4 x i32> %bc5, i64 0, !dbg !55
  %183 = select i1 %166, i32 0, i32 %182, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %179, i32 %181, i32 %183, ptr addrspace(1) %175, i1 true) #5, !dbg !55
  %184 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !56
  %185 = bitcast float %91 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %184, i1 %173) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cff43c5igon2rezikmtqxlgulhitd3cmossfb2b754b6lfxni3j4.py", directory: "inductor_cache/ff")
!4 = !{ptr @triton_per_fused_convolution_native_layer_norm_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_layer_norm_relu_11, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_layer_norm_relu_11", linkageName: "triton_per_fused_convolution_native_layer_norm_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 31, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 31, scope: !7)
!21 = !DILocation(line: 35, column: 36, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 39, column: 57, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !25)
!28 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!29 = !DILocation(line: 73, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 39, column: 44, scope: !7)
!33 = !DILocation(line: 42, column: 19, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !37)
!37 = !DILocation(line: 46, column: 59, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !30, inlinedAt: !40)
!40 = !DILocation(line: 46, column: 45, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 28, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !48)
!48 = !DILocation(line: 57, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !48)
!50 = !DILocation(line: 58, column: 48, scope: !7)
!51 = !DILocation(line: 59, column: 4, scope: !7)
!52 = !DILocation(line: 60, column: 28, scope: !7)
!53 = !DILocation(line: 60, column: 40, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 46, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
