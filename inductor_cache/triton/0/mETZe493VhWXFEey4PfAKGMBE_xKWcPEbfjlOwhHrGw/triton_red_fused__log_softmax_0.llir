; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__log_softmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr3 = freeze i32 %5, !dbg !11
  %6 = icmp slt i32 %.fr3, 16, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = mul i32 %.fr3, 8032, !dbg !13
  %11 = add i32 %9, %10, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  br i1 %6, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %4
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %15 = or disjoint i32 %9, 2048, !dbg !17
  %16 = add i32 %15, %10, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %20 = or disjoint i32 %9, 4096, !dbg !17
  %21 = add i32 %20, %10, !dbg !14
  %22 = sext i32 %21 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %25 = or disjoint i32 %9, 6144, !dbg !17
  %26 = add i32 %25, %10, !dbg !14
  %27 = sext i32 %26 to i64, !dbg !15
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !15
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  br label %.split2.us, !dbg !12

.split.preheader:                                 ; preds = %4
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %35 = or disjoint i32 %9, 2048, !dbg !17
  %36 = add i32 %35, %10, !dbg !14
  %37 = sext i32 %36 to i64, !dbg !15
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !15
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %44 = or disjoint i32 %9, 4096, !dbg !17
  %45 = add i32 %44, %10, !dbg !14
  %46 = sext i32 %45 to i64, !dbg !15
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !15
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16
  %53 = or disjoint i32 %9, 6144, !dbg !17
  %54 = icmp samesign ult i32 %53, 8032, !dbg !18
  %55 = add i32 %53, %10, !dbg !14
  %56 = sext i32 %55 to i64, !dbg !15
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !15
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #3, !dbg !16
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !16
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !16
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !16
  %63 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !16
  %64 = insertelement <4 x i32> %63, i32 %33, i64 1, !dbg !16
  %65 = insertelement <4 x i32> %64, i32 %34, i64 2, !dbg !16
  %66 = insertelement <4 x i32> %65, i32 %31, i64 3, !dbg !16
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !16
  %68 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !16
  %69 = insertelement <4 x i32> %68, i32 %42, i64 1, !dbg !16
  %70 = insertelement <4 x i32> %69, i32 %43, i64 2, !dbg !16
  %71 = insertelement <4 x i32> %70, i32 %40, i64 3, !dbg !16
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !16
  %73 = fcmp ogt <4 x float> %67, %72, !dbg !19
  %74 = fcmp uno <4 x float> %67, zeroinitializer, !dbg !23
  %75 = or <4 x i1> %74, %73, !dbg !24
  %.v = select <4 x i1> %75, <4 x i32> %66, <4 x i32> %71, !dbg !25
  %76 = bitcast <4 x i32> %.v to <4 x float>, !dbg !25
  %77 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !16
  %78 = insertelement <4 x i32> %77, i32 %51, i64 1, !dbg !16
  %79 = insertelement <4 x i32> %78, i32 %52, i64 2, !dbg !16
  %80 = insertelement <4 x i32> %79, i32 %49, i64 3, !dbg !16
  %81 = bitcast <4 x i32> %80 to <4 x float>, !dbg !16
  %82 = fcmp ogt <4 x float> %76, %81, !dbg !19
  %83 = fcmp uno <4 x float> %76, zeroinitializer, !dbg !23
  %84 = or <4 x i1> %83, %82, !dbg !24
  %.v6 = select <4 x i1> %84, <4 x i32> %.v, <4 x i32> %80, !dbg !25
  %85 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !25
  %86 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !16
  %87 = insertelement <4 x i32> %86, i32 %61, i64 1, !dbg !16
  %88 = insertelement <4 x i32> %87, i32 %62, i64 2, !dbg !16
  %89 = insertelement <4 x i32> %88, i32 %59, i64 3, !dbg !16
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !16
  %91 = fcmp ogt <4 x float> %85, %90, !dbg !19
  %92 = fcmp uno <4 x float> %85, zeroinitializer, !dbg !23
  %93 = or <4 x i1> %92, %91, !dbg !24
  %.v7 = select <4 x i1> %93, <4 x i32> %.v6, <4 x i32> %89, !dbg !25
  %94 = insertelement <4 x i1> poison, i1 %54, i64 0, !dbg !26
  %95 = shufflevector <4 x i1> %94, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !26
  %.v8 = select <4 x i1> %95, <4 x i32> %.v7, <4 x i32> %.v6, !dbg !26
  %96 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !26
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.us.preheader, %.split.preheader
  %97 = phi <4 x float> [ %96, %.split.preheader ], [ splat (float 0xFFF0000000000000), %.split.us.preheader ], !dbg !12
  %98 = lshr i32 %7, 5, !dbg !12
  %99 = and i32 %7, 31, !dbg !12
  %100 = extractelement <4 x float> %97, i64 0, !dbg !27
  %101 = extractelement <4 x float> %97, i64 3, !dbg !27
  %102 = fcmp ogt float %101, %100, !dbg !27
  %103 = fcmp uno float %101, 0.000000e+00, !dbg !30
  %104 = or i1 %102, %103, !dbg !31
  %105 = select i1 %104, float %101, float %100, !dbg !32
  %106 = extractelement <4 x float> %97, i64 1, !dbg !27
  %107 = fcmp ogt float %105, %106, !dbg !27
  %108 = fcmp uno float %105, 0.000000e+00, !dbg !30
  %109 = or i1 %107, %108, !dbg !31
  %110 = select i1 %109, float %105, float %106, !dbg !32
  %111 = extractelement <4 x float> %97, i64 2, !dbg !27
  %112 = fcmp ogt float %110, %111, !dbg !27
  %113 = fcmp uno float %110, 0.000000e+00, !dbg !30
  %114 = or i1 %112, %113, !dbg !31
  %115 = select i1 %114, float %110, float %111, !dbg !32
  %116 = bitcast float %115 to i32, !dbg !33
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !33
  %118 = bitcast i32 %117 to float, !dbg !33
  %119 = fcmp ogt float %115, %118, !dbg !27
  %120 = fcmp uno float %115, 0.000000e+00, !dbg !30
  %121 = or i1 %120, %119, !dbg !31
  %122 = select i1 %121, float %115, float %118, !dbg !32
  %123 = bitcast float %122 to i32, !dbg !33
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !33
  %125 = bitcast i32 %124 to float, !dbg !33
  %126 = fcmp ogt float %122, %125, !dbg !27
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !30
  %128 = or i1 %126, %127, !dbg !31
  %129 = select i1 %128, float %122, float %125, !dbg !32
  %130 = bitcast float %129 to i32, !dbg !33
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !33
  %132 = bitcast i32 %131 to float, !dbg !33
  %133 = fcmp ogt float %129, %132, !dbg !27
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !30
  %135 = or i1 %133, %134, !dbg !31
  %136 = select i1 %135, float %129, float %132, !dbg !32
  %137 = bitcast float %136 to i32, !dbg !33
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !33
  %139 = bitcast i32 %138 to float, !dbg !33
  %140 = fcmp ogt float %136, %139, !dbg !27
  %141 = fcmp uno float %136, 0.000000e+00, !dbg !30
  %142 = or i1 %140, %141, !dbg !31
  %143 = select i1 %142, float %136, float %139, !dbg !32
  %144 = bitcast float %143 to i32, !dbg !33
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !33
  %146 = bitcast i32 %145 to float, !dbg !33
  %147 = fcmp ogt float %143, %146, !dbg !27
  %148 = fcmp uno float %143, 0.000000e+00, !dbg !30
  %149 = or i1 %147, %148, !dbg !31
  %150 = icmp eq i32 %99, 0, !dbg !33
  %151 = and i32 %98, 15, !dbg !33
  %152 = zext nneg i32 %151 to i64, !dbg !33
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i64 %152, !dbg !33
  %154 = select i1 %149, i32 %144, i32 %145, !dbg !32
  %155 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %155, i1 %150) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %156 = icmp slt i32 %7, 16, !dbg !33
  %157 = sext i32 %7 to i64, !dbg !33
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i64 %157, !dbg !33
  %159 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %158, i1 %156) #3, !dbg !33
  %160 = bitcast i32 %159 to float, !dbg !33
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !33
  %162 = bitcast i32 %161 to float, !dbg !33
  %163 = fcmp ogt float %160, %162, !dbg !27
  %164 = fcmp uno float %160, 0.000000e+00, !dbg !30
  %165 = or i1 %164, %163, !dbg !31
  %166 = select i1 %165, float %160, float %162, !dbg !32
  %167 = bitcast float %166 to i32, !dbg !33
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !33
  %169 = bitcast i32 %168 to float, !dbg !33
  %170 = fcmp ogt float %166, %169, !dbg !27
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !30
  %172 = or i1 %170, %171, !dbg !31
  %173 = select i1 %172, float %166, float %169, !dbg !32
  %174 = bitcast float %173 to i32, !dbg !33
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !33
  %176 = bitcast i32 %175 to float, !dbg !33
  %177 = fcmp ogt float %173, %176, !dbg !27
  %178 = fcmp uno float %173, 0.000000e+00, !dbg !30
  %179 = or i1 %177, %178, !dbg !31
  %180 = select i1 %179, float %173, float %176, !dbg !32
  %181 = bitcast float %180 to i32, !dbg !33
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !33
  %183 = bitcast i32 %182 to float, !dbg !33
  %184 = fcmp ogt float %180, %183, !dbg !27
  %185 = fcmp uno float %180, 0.000000e+00, !dbg !30
  %186 = or i1 %184, %185, !dbg !31
  %187 = and i32 %7, 15, !dbg !33
  %188 = icmp eq i32 %187, 0, !dbg !33
  %189 = and i1 %156, %188, !dbg !33
  %190 = select i1 %186, i32 %181, i32 %182, !dbg !32
  %191 = insertelement <1 x i32> poison, i32 %190, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %191, i1 %189) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %192 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %193 = sext i32 %.fr3 to i64, !dbg !34
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !34
  %urem = and i32 %7, 511, !dbg !35
  %195 = icmp eq i32 %urem, 0, !dbg !35
  %196 = and i1 %195, %6, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %194, i1 %196) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbe2wf7zw4r52qzaxcmhri6uwqcfja7uyfpeill4qibufrn7pva7.py", directory: "inductor_cache/be")
!4 = !{ptr @triton_red_fused__log_softmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__log_softmax_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__log_softmax_0", linkageName: "triton_red_fused__log_softmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 30, column: 25, scope: !7)
!19 = !DILocation(line: 118, column: 15, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 34, column: 45, scope: !7)
!23 = !DILocation(line: 120, column: 21, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 120, column: 16, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 35, column: 46, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !29)
!28 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !29)
!33 = !DILocation(line: 131, column: 29, scope: !20, inlinedAt: !29)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
