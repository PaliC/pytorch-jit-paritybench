; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 7, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 127, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !13
  %20 = icmp slt i32 %19, 1024, !dbg !14
  %21 = sdiv i32 %19, 64, !dbg !15
  %22 = srem i32 %21, 4, !dbg !16
  %.frozen = freeze i32 %19, !dbg !17
  %23 = sdiv i32 %.frozen, 8, !dbg !17
  %24 = mul i32 %23, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = srem i32 %23, 8, !dbg !19
  %26 = sext i32 %19 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %20) #3, !dbg !21
  %29 = sext i32 %22 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !27
  %36 = bitcast i32 %35 to float, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #3, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #3, !dbg !31
  %.lhs.trunc = trunc nsw i32 %25 to i8, !dbg !32
  %41 = sdiv i8 %.lhs.trunc, 2, !dbg !32
  %.sext = sext i8 %41 to i32, !dbg !32
  %42 = shl nsw i32 %.sext, 3, !dbg !33
  %43 = mul i8 %41, 2, !dbg !34
  %.decomposed8 = sub i8 %.lhs.trunc, %43, !dbg !34
  %.sext7 = sext i8 %.decomposed8 to i32, !dbg !34
  %44 = shl nsw i32 %.sext7, 5, !dbg !35
  %45 = shl nsw i32 %21, 6, !dbg !36
  %46 = add i32 %45, %.decomposed, !dbg !37
  %47 = add i32 %46, %42, !dbg !38
  %48 = add i32 %47, %44, !dbg !39
  %49 = sext i32 %48 to i64, !dbg !40
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %49, !dbg !40
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %20) #3, !dbg !41
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !42
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #3, !dbg !43
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !44
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %20) #3, !dbg !45
  %56 = bitcast i32 %55 to float, !dbg !45
  %57 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !46
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %20) #3, !dbg !47
  %59 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !48
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #3, !dbg !49
  %61 = fadd float %36, 0x3EE4F8B580000000, !dbg !50
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i = icmp eq i32 %62, 0, !dbg !51
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i = icmp eq i32 %63, 0, !dbg !51
  br i1 %.not.i, label %69, label %64, !dbg !51

64:                                               ; preds = %14
  br i1 %.not1.i, label %67, label %65, !dbg !51

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

69:                                               ; preds = %14
  br i1 %.not1.i, label %72, label %70, !dbg !51

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !51
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !52
  %75 = fadd float %56, 0x3EE4F8B580000000, !dbg !53
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %76, 0, !dbg !54
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !54
  br i1 %.not.i1, label %83, label %78, !dbg !54

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !54

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !54

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !54
  %88 = bitcast i32 %51 to float, !dbg !41
  %89 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !25
  %90 = insertelement <2 x i32> %89, i32 %53, i64 1, !dbg !25
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !25
  %92 = bitcast i32 %28 to float, !dbg !21
  %93 = bitcast i32 %31 to float, !dbg !23
  %94 = fadd float %92, %93, !dbg !55
  %95 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !29
  %96 = insertelement <2 x i32> %95, i32 %58, i64 1, !dbg !29
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !29
  %98 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !31
  %99 = insertelement <2 x i32> %98, i32 %60, i64 1, !dbg !31
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !31
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !56
  %102 = insertelement <2 x float> poison, float %94, i64 0, !dbg !57
  %103 = insertelement <2 x float> %102, float %88, i64 1, !dbg !57
  %104 = fsub <2 x float> %103, %91, !dbg !57
  %105 = insertelement <2 x float> poison, float %74, i64 0, !dbg !58
  %106 = insertelement <2 x float> %105, float %101, i64 1, !dbg !58
  %107 = fmul <2 x float> %104, %106, !dbg !58
  %108 = fmul <2 x float> %107, %97, !dbg !59
  %109 = fadd <2 x float> %108, %100, !dbg !60
  %shift = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !61
  %110 = fadd <2 x float> %109, %shift, !dbg !61
  %111 = extractelement <2 x float> %110, i64 0, !dbg !61
  %112 = fcmp olt float %111, 0.000000e+00, !dbg !62
  %113 = select i1 %112, float 0.000000e+00, float %111, !dbg !66
  %114 = fcmp ole float %113, 0.000000e+00, !dbg !67
  %115 = bitcast float %94 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %27, i1 %20) #3, !dbg !68
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !69
  %117 = bitcast float %113 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %116, i1 %20) #3, !dbg !70
  %118 = getelementptr i1, ptr addrspace(1) %12, i64 %26, !dbg !71
  %119 = zext i1 %114 to i8, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %119, ptr addrspace(1) %118, i1 %20) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py", directory: "inductor_cache/rk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 26, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 45, scope: !7)
!33 = !DILocation(line: 35, column: 39, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 35, column: 55, scope: !7)
!36 = !DILocation(line: 35, column: 69, scope: !7)
!37 = !DILocation(line: 35, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 50, scope: !7)
!39 = !DILocation(line: 35, column: 66, scope: !7)
!40 = !DILocation(line: 35, column: 31, scope: !7)
!41 = !DILocation(line: 35, column: 74, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 36, scope: !7)
!44 = !DILocation(line: 37, column: 31, scope: !7)
!45 = !DILocation(line: 37, column: 36, scope: !7)
!46 = !DILocation(line: 38, column: 31, scope: !7)
!47 = !DILocation(line: 38, column: 36, scope: !7)
!48 = !DILocation(line: 39, column: 31, scope: !7)
!49 = !DILocation(line: 39, column: 36, scope: !7)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 44, column: 26, scope: !7)
!52 = !DILocation(line: 46, column: 19, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 27, scope: !7)
!55 = !DILocation(line: 40, column: 18, scope: !7)
!56 = !DILocation(line: 55, column: 19, scope: !7)
!57 = !DILocation(line: 41, column: 18, scope: !7)
!58 = !DILocation(line: 49, column: 19, scope: !7)
!59 = !DILocation(line: 50, column: 20, scope: !7)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 62, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 64, column: 21, scope: !7)
!68 = !DILocation(line: 65, column: 39, scope: !7)
!69 = !DILocation(line: 66, column: 28, scope: !7)
!70 = !DILocation(line: 66, column: 40, scope: !7)
!71 = !DILocation(line: 67, column: 25, scope: !7)
!72 = !DILocation(line: 67, column: 37, scope: !7)
!73 = !DILocation(line: 67, column: 4, scope: !7)
