; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_min_mul_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 15, !dbg !10
  %6 = icmp samesign ult i32 %5, 12, !dbg !11
  %7 = and i32 %4, 3, !dbg !12
  %8 = shl nuw nsw i32 %5, 2, !dbg !13
  %9 = and i32 %8, 48, !dbg !13
  %10 = or disjoint i32 %9, %7, !dbg !14
  %11 = zext nneg i32 %10 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 %6, i32 0, i1 %6) #2, !dbg !16
  %14 = or disjoint i32 %10, 4, !dbg !17
  %15 = zext nneg i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %6, i32 0, i1 %6) #2, !dbg !19
  %18 = or disjoint i32 %10, 8, !dbg !20
  %19 = zext nneg i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %6, i32 0, i1 %6) #2, !dbg !22
  %22 = or disjoint i32 %7, %8, !dbg !23
  %23 = or i32 %22, 12, !dbg !23
  %24 = zext nneg i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %6, i32 0, i1 %6) #2, !dbg !25
  %27 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !16
  %28 = insertelement <2 x i32> %27, i32 %21, i64 1, !dbg !16
  %29 = bitcast <2 x i32> %28 to <2 x float>, !dbg !16
  %30 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !19
  %31 = insertelement <2 x i32> %30, i32 %26, i64 1, !dbg !19
  %32 = bitcast <2 x i32> %31 to <2 x float>, !dbg !19
  %33 = fcmp ogt <2 x float> %29, %32, !dbg !26
  %34 = fcmp uno <2 x float> %29, zeroinitializer, !dbg !30
  %35 = or <2 x i1> %34, %33, !dbg !31
  %.v = select <2 x i1> %35, <2 x i32> %28, <2 x i32> %31, !dbg !32
  %36 = bitcast <2 x i32> %.v to <2 x float>, !dbg !32
  %37 = fcmp olt <2 x float> %29, %32, !dbg !33
  %38 = or <2 x i1> %34, %37, !dbg !35
  %.v1 = select <2 x i1> %38, <2 x i32> %28, <2 x i32> %31, !dbg !36
  %39 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !36
  %40 = fsub <2 x float> %36, %39, !dbg !37
  %shift = shufflevector <2 x float> %40, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %41 = fmul <2 x float> %40, %shift, !dbg !38
  %42 = extractelement <2 x float> %41, i64 0, !dbg !38
  %43 = select i1 %6, float %42, float 0x7FF0000000000000, !dbg !39
  %44 = bitcast float %43 to i32, !dbg !40
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !40
  %46 = bitcast i32 %45 to float, !dbg !40
  %47 = fcmp olt float %43, %46, !dbg !42
  %48 = fcmp uno float %43, 0.000000e+00, !dbg !44
  %49 = or i1 %47, %48, !dbg !45
  %50 = select i1 %49, float %43, float %46, !dbg !46
  %51 = bitcast float %50 to i32, !dbg !40
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !40
  %53 = bitcast i32 %52 to float, !dbg !40
  %54 = fcmp olt float %50, %53, !dbg !42
  %55 = fcmp uno float %50, 0.000000e+00, !dbg !44
  %56 = or i1 %54, %55, !dbg !45
  %57 = select i1 %56, float %50, float %53, !dbg !46
  %58 = bitcast float %57 to i32, !dbg !40
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !40
  %60 = bitcast i32 %59 to float, !dbg !40
  %61 = fcmp olt float %57, %60, !dbg !42
  %62 = fcmp uno float %57, 0.000000e+00, !dbg !44
  %63 = or i1 %61, %62, !dbg !45
  %64 = select i1 %63, float %57, float %60, !dbg !46
  %65 = bitcast float %64 to i32, !dbg !40
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = fcmp olt float %64, %67, !dbg !42
  %69 = fcmp uno float %64, 0.000000e+00, !dbg !44
  %70 = or i1 %68, %69, !dbg !45
  %71 = and i32 %4, 63, !dbg !47
  %72 = icmp eq i32 %71, 0, !dbg !47
  %73 = select i1 %70, i32 %65, i32 %66, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %1, i1 %72) #2, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctqofpgot63hd423cqcmc6xi6dey7kvzymuew6gb5l6eoupkgn4k.py", directory: "inductor_cache/tq")
!4 = !{ptr @triton_per_fused_min_mul_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_min_mul_sub_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_min_mul_sub_3", linkageName: "triton_per_fused_min_mul_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 29, column: 19, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 34, column: 40, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 48, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 35, column: 40, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 110, column: 15, scope: !27, inlinedAt: !34)
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 112, column: 16, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 113, column: 29, scope: !27, inlinedAt: !34)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 35, scope: !7)
!40 = !DILocation(line: 126, column: 29, scope: !27, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 39, scope: !7)
!42 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!44 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 45, column: 68, scope: !7)
!48 = !DILocation(line: 45, column: 4, scope: !7)
