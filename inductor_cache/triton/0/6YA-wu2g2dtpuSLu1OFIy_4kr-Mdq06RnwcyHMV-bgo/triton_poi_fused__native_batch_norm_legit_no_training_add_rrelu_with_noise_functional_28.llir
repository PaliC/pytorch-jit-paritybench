; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %15 = and i32 %14, 3, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %17, 8, !dbg !13
  %20 = or disjoint i32 %17, 12, !dbg !13
  %21 = or disjoint i32 %12, 4, !dbg !13
  %22 = or disjoint i32 %12, 8, !dbg !13
  %23 = or disjoint i32 %12, 12, !dbg !13
  %24 = icmp slt i32 %17, 64, !dbg !14
  %25 = icmp slt i32 %18, 64, !dbg !14
  %26 = icmp slt i32 %19, 64, !dbg !14
  %27 = icmp slt i32 %20, 64, !dbg !14
  %28 = icmp slt i32 %12, 64, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 8, !dbg !16
  %31 = and i32 %16, 252, !dbg !17
  %32 = and i32 %13, 255, !dbg !17
  %33 = or disjoint i32 %30, %31, !dbg !18
  %34 = or disjoint i32 %30, %32, !dbg !18
  %35 = icmp slt i32 %33, 1024, !dbg !19
  %36 = icmp slt i32 %34, 1024, !dbg !19
  %37 = srem i32 %21, 16, !dbg !20
  %38 = srem i32 %22, 16, !dbg !20
  %39 = srem i32 %23, 16, !dbg !20
  %40 = shl i32 %17, 10, !dbg !21
  %41 = shl i32 %18, 10, !dbg !21
  %42 = shl i32 %19, 10, !dbg !21
  %43 = shl i32 %20, 10, !dbg !21
  %44 = add i32 %33, %40, !dbg !22
  %45 = add i32 %33, %41, !dbg !22
  %46 = add i32 %33, %42, !dbg !22
  %47 = add i32 %33, %43, !dbg !22
  %48 = sext i32 %44 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %45 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %46 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %47 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = and i1 %24, %35, !dbg !24
  %57 = and i1 %25, %35, !dbg !24
  %58 = and i1 %26, %35, !dbg !24
  %59 = and i1 %27, %35, !dbg !24
  %60 = and i1 %28, %36, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %56) #4, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !25
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %57) #4, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %58) #4, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !25
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %59) #4, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !25
  %81 = shl i32 %13, 6, !dbg !25
  %82 = and i32 %81, 4032, !dbg !25
  %83 = or disjoint i32 %15, %82, !dbg !25
  %84 = shl i32 %13, 4, !dbg !25
  %85 = and i32 %84, 4080, !dbg !25
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !25
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %83, !dbg !25
  %88 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !25
  %89 = or disjoint i32 %83, 16, !dbg !25
  %90 = or disjoint i32 %82, 16, !dbg !25
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !25
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %89, !dbg !25
  %93 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !25
  %94 = or disjoint i32 %83, 32, !dbg !25
  %95 = or disjoint i32 %82, 32, !dbg !25
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !25
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %94, !dbg !25
  %98 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !25
  %99 = or disjoint i32 %83, 48, !dbg !25
  %100 = or disjoint i32 %82, 48, !dbg !25
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !25
  %102 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %99, !dbg !25
  %103 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #4, !dbg !25
  %104 = or disjoint i32 %83, 4, !dbg !25
  %105 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %104, !dbg !25
  %106 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !25
  %107 = or disjoint i32 %83, 20, !dbg !25
  %108 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %107, !dbg !25
  %109 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #4, !dbg !25
  %110 = or disjoint i32 %83, 36, !dbg !25
  %111 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %110, !dbg !25
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #4, !dbg !25
  %113 = or disjoint i32 %83, 52, !dbg !25
  %114 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %113, !dbg !25
  %115 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !25
  %116 = or disjoint i32 %83, 8, !dbg !25
  %117 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %116, !dbg !25
  %118 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #4, !dbg !25
  %119 = or disjoint i32 %83, 24, !dbg !25
  %120 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %119, !dbg !25
  %121 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !25
  %122 = or disjoint i32 %83, 40, !dbg !25
  %123 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %122, !dbg !25
  %124 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !25
  %125 = or disjoint i32 %83, 56, !dbg !25
  %126 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %125, !dbg !25
  %127 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #4, !dbg !25
  %128 = or disjoint i32 %83, 12, !dbg !25
  %129 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %128, !dbg !25
  %130 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #4, !dbg !25
  %131 = or disjoint i32 %83, 28, !dbg !25
  %132 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %131, !dbg !25
  %133 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !25
  %134 = or disjoint i32 %83, 44, !dbg !25
  %135 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %134, !dbg !25
  %136 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #4, !dbg !25
  %137 = or disjoint i32 %83, 60, !dbg !25
  %138 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %137, !dbg !25
  %139 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !25
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %85, !dbg !25
  %142 = load <4 x float>, ptr addrspace(3) %141, align 16, !dbg !25
  %143 = getelementptr inbounds i8, ptr addrspace(3) %141, i32 16, !dbg !25
  %144 = load <4 x float>, ptr addrspace(3) %143, align 16, !dbg !25
  %145 = getelementptr inbounds i8, ptr addrspace(3) %141, i32 32, !dbg !25
  %146 = load <4 x float>, ptr addrspace(3) %145, align 16, !dbg !25
  %147 = getelementptr inbounds i8, ptr addrspace(3) %141, i32 48, !dbg !25
  %148 = load <4 x float>, ptr addrspace(3) %147, align 16, !dbg !25
  %149 = shl i32 %34, 4, !dbg !26
  %150 = shl i32 %11, 14, !dbg !27
  %151 = add i32 %149, %150, !dbg !28
  %152 = add i32 %151, %37, !dbg !28
  %153 = add i32 %151, %38, !dbg !28
  %154 = add i32 %151, %39, !dbg !28
  %155 = sext i32 %151 to i64, !dbg !29
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !29
  %157 = sext i32 %152 to i64, !dbg !29
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !29
  %159 = sext i32 %153 to i64, !dbg !29
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !29
  %161 = sext i32 %154 to i64, !dbg !29
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !29
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %60) #4, !dbg !30
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %60) #4, !dbg !30
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %160, i1 %60) #4, !dbg !30
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %60) #4, !dbg !30
  %167 = sext i32 %37 to i64, !dbg !31
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !31
  %169 = sext i32 %38 to i64, !dbg !31
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !31
  %171 = sext i32 %39 to i64, !dbg !31
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !31
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2, i1 %28) #4, !dbg !32
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %28) #4, !dbg !32
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %28) #4, !dbg !32
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %28) #4, !dbg !32
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %167, !dbg !33
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %169, !dbg !33
  %179 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !33
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %3, i1 %28) #4, !dbg !34
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !34
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !34
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !34
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !34
  %185 = bitcast i32 %181 to float, !dbg !34
  %186 = bitcast i32 %182 to float, !dbg !34
  %187 = bitcast i32 %183 to float, !dbg !34
  %188 = bitcast i32 %184 to float, !dbg !34
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %28) #4, !dbg !34
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !34
  %194 = bitcast i32 %190 to float, !dbg !34
  %195 = bitcast i32 %191 to float, !dbg !34
  %196 = bitcast i32 %192 to float, !dbg !34
  %197 = bitcast i32 %193 to float, !dbg !34
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %28) #4, !dbg !34
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !34
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !34
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !34
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !34
  %203 = bitcast i32 %199 to float, !dbg !34
  %204 = bitcast i32 %200 to float, !dbg !34
  %205 = bitcast i32 %201 to float, !dbg !34
  %206 = bitcast i32 %202 to float, !dbg !34
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %28) #4, !dbg !34
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !34
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !34
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !34
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !34
  %212 = bitcast i32 %208 to float, !dbg !34
  %213 = bitcast i32 %209 to float, !dbg !34
  %214 = bitcast i32 %210 to float, !dbg !34
  %215 = bitcast i32 %211 to float, !dbg !34
  %216 = getelementptr float, ptr addrspace(1) %4, i64 %167, !dbg !35
  %217 = getelementptr float, ptr addrspace(1) %4, i64 %169, !dbg !35
  %218 = getelementptr float, ptr addrspace(1) %4, i64 %171, !dbg !35
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %4, i1 %28) #4, !dbg !36
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %28) #4, !dbg !36
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %28) #4, !dbg !36
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %28) #4, !dbg !36
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !37
  %224 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !37
  %225 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !37
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %5, i1 %28) #4, !dbg !38
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %223, i1 %28) #4, !dbg !38
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %224, i1 %28) #4, !dbg !38
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %225, i1 %28) #4, !dbg !38
  %230 = fadd float %185, 0x3EE4F8B580000000, !dbg !39
  %231 = fadd float %186, 0x3EE4F8B580000000, !dbg !39
  %232 = fadd float %187, 0x3EE4F8B580000000, !dbg !39
  %233 = fadd float %188, 0x3EE4F8B580000000, !dbg !39
  %234 = fadd float %194, 0x3EE4F8B580000000, !dbg !39
  %235 = fadd float %195, 0x3EE4F8B580000000, !dbg !39
  %236 = fadd float %196, 0x3EE4F8B580000000, !dbg !39
  %237 = fadd float %197, 0x3EE4F8B580000000, !dbg !39
  %238 = fadd float %203, 0x3EE4F8B580000000, !dbg !39
  %239 = fadd float %204, 0x3EE4F8B580000000, !dbg !39
  %240 = fadd float %205, 0x3EE4F8B580000000, !dbg !39
  %241 = fadd float %206, 0x3EE4F8B580000000, !dbg !39
  %242 = fadd float %212, 0x3EE4F8B580000000, !dbg !39
  %243 = fadd float %213, 0x3EE4F8B580000000, !dbg !39
  %244 = fadd float %214, 0x3EE4F8B580000000, !dbg !39
  %245 = fadd float %215, 0x3EE4F8B580000000, !dbg !39
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %246, 0, !dbg !40
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i = icmp eq i32 %247, 0, !dbg !40
  br i1 %.not.i, label %253, label %248, !dbg !40

248:                                              ; preds = %10
  br i1 %.not1.i, label %251, label %249, !dbg !40

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

253:                                              ; preds = %10
  br i1 %.not1.i, label %256, label %254, !dbg !40

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %249, %251, %254, %256
  %.0.i = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !40
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i51 = icmp eq i32 %258, 0, !dbg !40
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i54 = icmp eq i32 %259, 0, !dbg !40
  br i1 %.not.i51, label %265, label %260, !dbg !40

260:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i54, label %263, label %261, !dbg !40

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #4, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #4, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

265:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i54, label %268, label %266, !dbg !40

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #4, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #4, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

__nv_sqrtf.exit55:                                ; preds = %261, %263, %266, %268
  %.0.i53 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !40
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i56 = icmp eq i32 %270, 0, !dbg !40
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i59 = icmp eq i32 %271, 0, !dbg !40
  br i1 %.not.i56, label %277, label %272, !dbg !40

272:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %275, label %273, !dbg !40

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #4, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #4, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

277:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %280, label %278, !dbg !40

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #4, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #4, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

__nv_sqrtf.exit60:                                ; preds = %273, %275, %278, %280
  %.0.i58 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !40
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i61 = icmp eq i32 %282, 0, !dbg !40
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i64 = icmp eq i32 %283, 0, !dbg !40
  br i1 %.not.i61, label %289, label %284, !dbg !40

284:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %287, label %285, !dbg !40

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #4, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #4, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

289:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %292, label %290, !dbg !40

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #4, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #4, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

__nv_sqrtf.exit65:                                ; preds = %285, %287, %290, %292
  %.0.i63 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !40
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i66 = icmp eq i32 %294, 0, !dbg !40
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i69 = icmp eq i32 %295, 0, !dbg !40
  br i1 %.not.i66, label %301, label %296, !dbg !40

296:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %299, label %297, !dbg !40

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #4, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #4, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

301:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %304, label %302, !dbg !40

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #4, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #4, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

__nv_sqrtf.exit70:                                ; preds = %297, %299, %302, %304
  %.0.i68 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !40
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i71 = icmp eq i32 %306, 0, !dbg !40
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i74 = icmp eq i32 %307, 0, !dbg !40
  br i1 %.not.i71, label %313, label %308, !dbg !40

308:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %311, label %309, !dbg !40

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #4, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #4, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

313:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %316, label %314, !dbg !40

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #4, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #4, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

__nv_sqrtf.exit75:                                ; preds = %309, %311, %314, %316
  %.0.i73 = phi float [ %310, %309 ], [ %312, %311 ], [ %315, %314 ], [ %317, %316 ], !dbg !40
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i76 = icmp eq i32 %318, 0, !dbg !40
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i79 = icmp eq i32 %319, 0, !dbg !40
  br i1 %.not.i76, label %325, label %320, !dbg !40

320:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %323, label %321, !dbg !40

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %236) #4, !dbg !40
  br label %__nv_sqrtf.exit80, !dbg !40

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %236) #4, !dbg !40
  br label %__nv_sqrtf.exit80, !dbg !40

325:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %328, label %326, !dbg !40

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.f(float %236) #4, !dbg !40
  br label %__nv_sqrtf.exit80, !dbg !40

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.f(float %236) #4, !dbg !40
  br label %__nv_sqrtf.exit80, !dbg !40

__nv_sqrtf.exit80:                                ; preds = %321, %323, %326, %328
  %.0.i78 = phi float [ %322, %321 ], [ %324, %323 ], [ %327, %326 ], [ %329, %328 ], !dbg !40
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i81 = icmp eq i32 %330, 0, !dbg !40
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i84 = icmp eq i32 %331, 0, !dbg !40
  br i1 %.not.i81, label %337, label %332, !dbg !40

332:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %335, label %333, !dbg !40

333:                                              ; preds = %332
  %334 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %237) #4, !dbg !40
  br label %__nv_sqrtf.exit85, !dbg !40

335:                                              ; preds = %332
  %336 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %237) #4, !dbg !40
  br label %__nv_sqrtf.exit85, !dbg !40

337:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %340, label %338, !dbg !40

338:                                              ; preds = %337
  %339 = tail call float @llvm.nvvm.sqrt.rn.f(float %237) #4, !dbg !40
  br label %__nv_sqrtf.exit85, !dbg !40

340:                                              ; preds = %337
  %341 = tail call float @llvm.nvvm.sqrt.approx.f(float %237) #4, !dbg !40
  br label %__nv_sqrtf.exit85, !dbg !40

__nv_sqrtf.exit85:                                ; preds = %333, %335, %338, %340
  %.0.i83 = phi float [ %334, %333 ], [ %336, %335 ], [ %339, %338 ], [ %341, %340 ], !dbg !40
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i86 = icmp eq i32 %342, 0, !dbg !40
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i89 = icmp eq i32 %343, 0, !dbg !40
  br i1 %.not.i86, label %349, label %344, !dbg !40

344:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %347, label %345, !dbg !40

345:                                              ; preds = %344
  %346 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %238) #4, !dbg !40
  br label %__nv_sqrtf.exit90, !dbg !40

347:                                              ; preds = %344
  %348 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %238) #4, !dbg !40
  br label %__nv_sqrtf.exit90, !dbg !40

349:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %352, label %350, !dbg !40

350:                                              ; preds = %349
  %351 = tail call float @llvm.nvvm.sqrt.rn.f(float %238) #4, !dbg !40
  br label %__nv_sqrtf.exit90, !dbg !40

352:                                              ; preds = %349
  %353 = tail call float @llvm.nvvm.sqrt.approx.f(float %238) #4, !dbg !40
  br label %__nv_sqrtf.exit90, !dbg !40

__nv_sqrtf.exit90:                                ; preds = %345, %347, %350, %352
  %.0.i88 = phi float [ %346, %345 ], [ %348, %347 ], [ %351, %350 ], [ %353, %352 ], !dbg !40
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i91 = icmp eq i32 %354, 0, !dbg !40
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i94 = icmp eq i32 %355, 0, !dbg !40
  br i1 %.not.i91, label %361, label %356, !dbg !40

356:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %359, label %357, !dbg !40

357:                                              ; preds = %356
  %358 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %239) #4, !dbg !40
  br label %__nv_sqrtf.exit95, !dbg !40

359:                                              ; preds = %356
  %360 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %239) #4, !dbg !40
  br label %__nv_sqrtf.exit95, !dbg !40

361:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %364, label %362, !dbg !40

362:                                              ; preds = %361
  %363 = tail call float @llvm.nvvm.sqrt.rn.f(float %239) #4, !dbg !40
  br label %__nv_sqrtf.exit95, !dbg !40

364:                                              ; preds = %361
  %365 = tail call float @llvm.nvvm.sqrt.approx.f(float %239) #4, !dbg !40
  br label %__nv_sqrtf.exit95, !dbg !40

__nv_sqrtf.exit95:                                ; preds = %357, %359, %362, %364
  %.0.i93 = phi float [ %358, %357 ], [ %360, %359 ], [ %363, %362 ], [ %365, %364 ], !dbg !40
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i96 = icmp eq i32 %366, 0, !dbg !40
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i99 = icmp eq i32 %367, 0, !dbg !40
  br i1 %.not.i96, label %373, label %368, !dbg !40

368:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %371, label %369, !dbg !40

369:                                              ; preds = %368
  %370 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #4, !dbg !40
  br label %__nv_sqrtf.exit100, !dbg !40

371:                                              ; preds = %368
  %372 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #4, !dbg !40
  br label %__nv_sqrtf.exit100, !dbg !40

373:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %376, label %374, !dbg !40

374:                                              ; preds = %373
  %375 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #4, !dbg !40
  br label %__nv_sqrtf.exit100, !dbg !40

376:                                              ; preds = %373
  %377 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #4, !dbg !40
  br label %__nv_sqrtf.exit100, !dbg !40

__nv_sqrtf.exit100:                               ; preds = %369, %371, %374, %376
  %.0.i98 = phi float [ %370, %369 ], [ %372, %371 ], [ %375, %374 ], [ %377, %376 ], !dbg !40
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i101 = icmp eq i32 %378, 0, !dbg !40
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i104 = icmp eq i32 %379, 0, !dbg !40
  br i1 %.not.i101, label %385, label %380, !dbg !40

380:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %383, label %381, !dbg !40

381:                                              ; preds = %380
  %382 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %241) #4, !dbg !40
  br label %__nv_sqrtf.exit105, !dbg !40

383:                                              ; preds = %380
  %384 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %241) #4, !dbg !40
  br label %__nv_sqrtf.exit105, !dbg !40

385:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %388, label %386, !dbg !40

386:                                              ; preds = %385
  %387 = tail call float @llvm.nvvm.sqrt.rn.f(float %241) #4, !dbg !40
  br label %__nv_sqrtf.exit105, !dbg !40

388:                                              ; preds = %385
  %389 = tail call float @llvm.nvvm.sqrt.approx.f(float %241) #4, !dbg !40
  br label %__nv_sqrtf.exit105, !dbg !40

__nv_sqrtf.exit105:                               ; preds = %381, %383, %386, %388
  %.0.i103 = phi float [ %382, %381 ], [ %384, %383 ], [ %387, %386 ], [ %389, %388 ], !dbg !40
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i106 = icmp eq i32 %390, 0, !dbg !40
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i109 = icmp eq i32 %391, 0, !dbg !40
  br i1 %.not.i106, label %397, label %392, !dbg !40

392:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %395, label %393, !dbg !40

393:                                              ; preds = %392
  %394 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %242) #4, !dbg !40
  br label %__nv_sqrtf.exit110, !dbg !40

395:                                              ; preds = %392
  %396 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %242) #4, !dbg !40
  br label %__nv_sqrtf.exit110, !dbg !40

397:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %400, label %398, !dbg !40

398:                                              ; preds = %397
  %399 = tail call float @llvm.nvvm.sqrt.rn.f(float %242) #4, !dbg !40
  br label %__nv_sqrtf.exit110, !dbg !40

400:                                              ; preds = %397
  %401 = tail call float @llvm.nvvm.sqrt.approx.f(float %242) #4, !dbg !40
  br label %__nv_sqrtf.exit110, !dbg !40

__nv_sqrtf.exit110:                               ; preds = %393, %395, %398, %400
  %.0.i108 = phi float [ %394, %393 ], [ %396, %395 ], [ %399, %398 ], [ %401, %400 ], !dbg !40
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i111 = icmp eq i32 %402, 0, !dbg !40
  %403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i114 = icmp eq i32 %403, 0, !dbg !40
  br i1 %.not.i111, label %409, label %404, !dbg !40

404:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %407, label %405, !dbg !40

405:                                              ; preds = %404
  %406 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %243) #4, !dbg !40
  br label %__nv_sqrtf.exit115, !dbg !40

407:                                              ; preds = %404
  %408 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %243) #4, !dbg !40
  br label %__nv_sqrtf.exit115, !dbg !40

409:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %412, label %410, !dbg !40

410:                                              ; preds = %409
  %411 = tail call float @llvm.nvvm.sqrt.rn.f(float %243) #4, !dbg !40
  br label %__nv_sqrtf.exit115, !dbg !40

412:                                              ; preds = %409
  %413 = tail call float @llvm.nvvm.sqrt.approx.f(float %243) #4, !dbg !40
  br label %__nv_sqrtf.exit115, !dbg !40

__nv_sqrtf.exit115:                               ; preds = %405, %407, %410, %412
  %.0.i113 = phi float [ %406, %405 ], [ %408, %407 ], [ %411, %410 ], [ %413, %412 ], !dbg !40
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i116 = icmp eq i32 %414, 0, !dbg !40
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i119 = icmp eq i32 %415, 0, !dbg !40
  br i1 %.not.i116, label %421, label %416, !dbg !40

416:                                              ; preds = %__nv_sqrtf.exit115
  br i1 %.not1.i119, label %419, label %417, !dbg !40

417:                                              ; preds = %416
  %418 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %244) #4, !dbg !40
  br label %__nv_sqrtf.exit120, !dbg !40

419:                                              ; preds = %416
  %420 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %244) #4, !dbg !40
  br label %__nv_sqrtf.exit120, !dbg !40

421:                                              ; preds = %__nv_sqrtf.exit115
  br i1 %.not1.i119, label %424, label %422, !dbg !40

422:                                              ; preds = %421
  %423 = tail call float @llvm.nvvm.sqrt.rn.f(float %244) #4, !dbg !40
  br label %__nv_sqrtf.exit120, !dbg !40

424:                                              ; preds = %421
  %425 = tail call float @llvm.nvvm.sqrt.approx.f(float %244) #4, !dbg !40
  br label %__nv_sqrtf.exit120, !dbg !40

__nv_sqrtf.exit120:                               ; preds = %417, %419, %422, %424
  %.0.i118 = phi float [ %418, %417 ], [ %420, %419 ], [ %423, %422 ], [ %425, %424 ], !dbg !40
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i121 = icmp eq i32 %426, 0, !dbg !40
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i124 = icmp eq i32 %427, 0, !dbg !40
  br i1 %.not.i121, label %433, label %428, !dbg !40

428:                                              ; preds = %__nv_sqrtf.exit120
  br i1 %.not1.i124, label %431, label %429, !dbg !40

429:                                              ; preds = %428
  %430 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %245) #4, !dbg !40
  br label %__nv_sqrtf.exit125, !dbg !40

431:                                              ; preds = %428
  %432 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %245) #4, !dbg !40
  br label %__nv_sqrtf.exit125, !dbg !40

433:                                              ; preds = %__nv_sqrtf.exit120
  br i1 %.not1.i124, label %436, label %434, !dbg !40

434:                                              ; preds = %433
  %435 = tail call float @llvm.nvvm.sqrt.rn.f(float %245) #4, !dbg !40
  br label %__nv_sqrtf.exit125, !dbg !40

436:                                              ; preds = %433
  %437 = tail call float @llvm.nvvm.sqrt.approx.f(float %245) #4, !dbg !40
  br label %__nv_sqrtf.exit125, !dbg !40

__nv_sqrtf.exit125:                               ; preds = %429, %431, %434, %436
  %.0.i123 = phi float [ %430, %429 ], [ %432, %431 ], [ %435, %434 ], [ %437, %436 ], !dbg !40
  %438 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !30
  %439 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !32
  %440 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !30
  %441 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !32
  %442 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !30
  %443 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !32
  %444 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !30
  %445 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !32
  %446 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !30
  %447 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !32
  %448 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !30
  %449 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !32
  %450 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !30
  %451 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !32
  %452 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !30
  %453 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !32
  %454 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !30
  %455 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !32
  %456 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !30
  %457 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !32
  %458 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !30
  %459 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !32
  %460 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !30
  %461 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !32
  %462 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !30
  %463 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !32
  %464 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !30
  %465 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !32
  %466 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !30
  %467 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !32
  %468 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !30
  %469 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !32
  %470 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !38
  %471 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !38
  %472 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !38
  %473 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !38
  %474 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !38
  %475 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !38
  %476 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !38
  %477 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !38
  %478 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !38
  %479 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !38
  %480 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !38
  %481 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !38
  %482 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !38
  %483 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !38
  %484 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !38
  %485 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !38
  %486 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !36
  %487 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !36
  %488 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !36
  %489 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !36
  %490 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !36
  %491 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !36
  %492 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !36
  %493 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !36
  %494 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !36
  %495 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !36
  %496 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !36
  %497 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !36
  %498 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !36
  %499 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !36
  %500 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !36
  %501 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !36
  %502 = and i32 %16, 12, !dbg !12
  %503 = or disjoint i32 %12, %502, !dbg !13
  %.frozen = freeze i32 %503, !dbg !41
  %504 = sdiv i32 %.frozen, 16, !dbg !41
  %505 = mul i32 %504, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %505, !dbg !20
  %506 = lshr i32 %13, 2, !dbg !17
  %507 = and i32 %506, 63, !dbg !17
  %508 = or disjoint i32 %507, %30, !dbg !18
  %509 = or disjoint i32 %508, 192, !dbg !18
  %510 = shl i32 %509, 4, !dbg !26
  %511 = shl i32 %504, 14, !dbg !27
  %512 = add i32 %511, %.decomposed, !dbg !42
  %513 = add i32 %512, %510, !dbg !28
  %514 = or disjoint i32 %508, 128, !dbg !18
  %515 = shl i32 %514, 4, !dbg !26
  %516 = add i32 %512, %515, !dbg !28
  %517 = or disjoint i32 %508, 64, !dbg !18
  %518 = shl i32 %517, 4, !dbg !26
  %519 = add i32 %512, %518, !dbg !28
  %520 = shl i32 %508, 4, !dbg !26
  %521 = add i32 %512, %520, !dbg !28
  %522 = icmp slt i32 %509, 1024, !dbg !19
  %523 = icmp slt i32 %503, 64, !dbg !14
  %524 = and i1 %523, %522, !dbg !24
  %525 = icmp slt i32 %514, 1024, !dbg !19
  %526 = and i1 %523, %525, !dbg !24
  %527 = icmp slt i32 %517, 1024, !dbg !19
  %528 = and i1 %523, %527, !dbg !24
  %529 = icmp slt i32 %508, 1024, !dbg !19
  %530 = and i1 %523, %529, !dbg !24
  %531 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %532 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #4, !dbg !43
  %533 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #4, !dbg !43
  %534 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #4, !dbg !43
  %535 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #4, !dbg !43
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #4, !dbg !43
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i78) #4, !dbg !43
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i83) #4, !dbg !43
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i88) #4, !dbg !43
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i93) #4, !dbg !43
  %541 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i98) #4, !dbg !43
  %542 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i103) #4, !dbg !43
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i108) #4, !dbg !43
  %544 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i113) #4, !dbg !43
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i118) #4, !dbg !43
  %546 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i123) #4, !dbg !43
  %547 = getelementptr i1, ptr addrspace(1) %6, i64 %155, !dbg !44
  %548 = insertelement <4 x i32> poison, i32 %468, i64 0, !dbg !30
  %549 = insertelement <4 x i32> %548, i32 %466, i64 1, !dbg !30
  %550 = insertelement <4 x i32> %549, i32 %464, i64 2, !dbg !30
  %551 = insertelement <4 x i32> %550, i32 %462, i64 3, !dbg !30
  %552 = bitcast <4 x i32> %551 to <4 x float>, !dbg !30
  %553 = insertelement <4 x i32> poison, i32 %469, i64 0, !dbg !32
  %554 = insertelement <4 x i32> %553, i32 %467, i64 1, !dbg !32
  %555 = insertelement <4 x i32> %554, i32 %465, i64 2, !dbg !32
  %556 = insertelement <4 x i32> %555, i32 %463, i64 3, !dbg !32
  %557 = bitcast <4 x i32> %556 to <4 x float>, !dbg !32
  %558 = fsub <4 x float> %552, %557, !dbg !45
  %559 = insertelement <4 x i32> poison, i32 %485, i64 0, !dbg !38
  %560 = insertelement <4 x i32> %559, i32 %484, i64 1, !dbg !38
  %561 = insertelement <4 x i32> %560, i32 %483, i64 2, !dbg !38
  %562 = insertelement <4 x i32> %561, i32 %482, i64 3, !dbg !38
  %563 = bitcast <4 x i32> %562 to <4 x float>, !dbg !38
  %564 = insertelement <4 x i32> poison, i32 %501, i64 0, !dbg !36
  %565 = insertelement <4 x i32> %564, i32 %500, i64 1, !dbg !36
  %566 = insertelement <4 x i32> %565, i32 %499, i64 2, !dbg !36
  %567 = insertelement <4 x i32> %566, i32 %498, i64 3, !dbg !36
  %568 = bitcast <4 x i32> %567 to <4 x float>, !dbg !36
  %569 = insertelement <4 x float> poison, float %531, i64 0, !dbg !46
  %570 = insertelement <4 x float> %569, float %532, i64 1, !dbg !46
  %571 = insertelement <4 x float> %570, float %533, i64 2, !dbg !46
  %572 = insertelement <4 x float> %571, float %534, i64 3, !dbg !46
  %573 = fmul <4 x float> %558, %572, !dbg !46
  %574 = fmul <4 x float> %573, %568, !dbg !47
  %575 = fadd <4 x float> %574, %563, !dbg !48
  %576 = fadd <4 x float> %142, %575, !dbg !49
  %577 = fcmp ogt <4 x float> %576, zeroinitializer, !dbg !50
  %578 = extractelement <4 x float> %576, i64 0, !dbg !51
  %579 = fmul float %578, 0x3FCD555560000000, !dbg !52
  %580 = extractelement <4 x float> %576, i64 1, !dbg !51
  %581 = fmul float %580, 0x3FCD555560000000, !dbg !52
  %582 = extractelement <4 x float> %576, i64 2, !dbg !51
  %583 = fmul float %582, 0x3FCD555560000000, !dbg !52
  %584 = extractelement <4 x float> %576, i64 3, !dbg !51
  %585 = fmul float %584, 0x3FCD555560000000, !dbg !52
  %586 = extractelement <4 x i1> %577, i64 0, !dbg !51
  %587 = select i1 %586, float %578, float %579, !dbg !51
  %588 = extractelement <4 x i1> %577, i64 1, !dbg !51
  %589 = select i1 %588, float %580, float %581, !dbg !51
  %590 = extractelement <4 x i1> %577, i64 2, !dbg !51
  %591 = select i1 %590, float %582, float %583, !dbg !51
  %592 = extractelement <4 x i1> %577, i64 3, !dbg !51
  %593 = select i1 %592, float %584, float %585, !dbg !51
  %594 = insertelement <4 x i32> poison, i32 %460, i64 0, !dbg !30
  %595 = insertelement <4 x i32> %594, i32 %458, i64 1, !dbg !30
  %596 = insertelement <4 x i32> %595, i32 %456, i64 2, !dbg !30
  %597 = insertelement <4 x i32> %596, i32 %454, i64 3, !dbg !30
  %598 = bitcast <4 x i32> %597 to <4 x float>, !dbg !30
  %599 = insertelement <4 x i32> poison, i32 %461, i64 0, !dbg !32
  %600 = insertelement <4 x i32> %599, i32 %459, i64 1, !dbg !32
  %601 = insertelement <4 x i32> %600, i32 %457, i64 2, !dbg !32
  %602 = insertelement <4 x i32> %601, i32 %455, i64 3, !dbg !32
  %603 = bitcast <4 x i32> %602 to <4 x float>, !dbg !32
  %604 = fsub <4 x float> %598, %603, !dbg !45
  %605 = insertelement <4 x i32> poison, i32 %481, i64 0, !dbg !38
  %606 = insertelement <4 x i32> %605, i32 %480, i64 1, !dbg !38
  %607 = insertelement <4 x i32> %606, i32 %479, i64 2, !dbg !38
  %608 = insertelement <4 x i32> %607, i32 %478, i64 3, !dbg !38
  %609 = bitcast <4 x i32> %608 to <4 x float>, !dbg !38
  %610 = insertelement <4 x i32> poison, i32 %497, i64 0, !dbg !36
  %611 = insertelement <4 x i32> %610, i32 %496, i64 1, !dbg !36
  %612 = insertelement <4 x i32> %611, i32 %495, i64 2, !dbg !36
  %613 = insertelement <4 x i32> %612, i32 %494, i64 3, !dbg !36
  %614 = bitcast <4 x i32> %613 to <4 x float>, !dbg !36
  %615 = insertelement <4 x float> poison, float %535, i64 0, !dbg !46
  %616 = insertelement <4 x float> %615, float %536, i64 1, !dbg !46
  %617 = insertelement <4 x float> %616, float %537, i64 2, !dbg !46
  %618 = insertelement <4 x float> %617, float %538, i64 3, !dbg !46
  %619 = fmul <4 x float> %604, %618, !dbg !46
  %620 = fmul <4 x float> %619, %614, !dbg !47
  %621 = fadd <4 x float> %620, %609, !dbg !48
  %622 = fadd <4 x float> %144, %621, !dbg !49
  %623 = fcmp ogt <4 x float> %622, zeroinitializer, !dbg !50
  %624 = extractelement <4 x float> %622, i64 0, !dbg !51
  %625 = fmul float %624, 0x3FCD555560000000, !dbg !52
  %626 = extractelement <4 x float> %622, i64 1, !dbg !51
  %627 = fmul float %626, 0x3FCD555560000000, !dbg !52
  %628 = extractelement <4 x float> %622, i64 2, !dbg !51
  %629 = fmul float %628, 0x3FCD555560000000, !dbg !52
  %630 = extractelement <4 x float> %622, i64 3, !dbg !51
  %631 = fmul float %630, 0x3FCD555560000000, !dbg !52
  %632 = extractelement <4 x i1> %623, i64 0, !dbg !51
  %633 = select i1 %632, float %624, float %625, !dbg !51
  %634 = extractelement <4 x i1> %623, i64 1, !dbg !51
  %635 = select i1 %634, float %626, float %627, !dbg !51
  %636 = extractelement <4 x i1> %623, i64 2, !dbg !51
  %637 = select i1 %636, float %628, float %629, !dbg !51
  %638 = extractelement <4 x i1> %623, i64 3, !dbg !51
  %639 = select i1 %638, float %630, float %631, !dbg !51
  %640 = insertelement <4 x i32> poison, i32 %452, i64 0, !dbg !30
  %641 = insertelement <4 x i32> %640, i32 %450, i64 1, !dbg !30
  %642 = insertelement <4 x i32> %641, i32 %448, i64 2, !dbg !30
  %643 = insertelement <4 x i32> %642, i32 %446, i64 3, !dbg !30
  %644 = bitcast <4 x i32> %643 to <4 x float>, !dbg !30
  %645 = insertelement <4 x i32> poison, i32 %453, i64 0, !dbg !32
  %646 = insertelement <4 x i32> %645, i32 %451, i64 1, !dbg !32
  %647 = insertelement <4 x i32> %646, i32 %449, i64 2, !dbg !32
  %648 = insertelement <4 x i32> %647, i32 %447, i64 3, !dbg !32
  %649 = bitcast <4 x i32> %648 to <4 x float>, !dbg !32
  %650 = fsub <4 x float> %644, %649, !dbg !45
  %651 = insertelement <4 x i32> poison, i32 %477, i64 0, !dbg !38
  %652 = insertelement <4 x i32> %651, i32 %476, i64 1, !dbg !38
  %653 = insertelement <4 x i32> %652, i32 %475, i64 2, !dbg !38
  %654 = insertelement <4 x i32> %653, i32 %474, i64 3, !dbg !38
  %655 = bitcast <4 x i32> %654 to <4 x float>, !dbg !38
  %656 = insertelement <4 x i32> poison, i32 %493, i64 0, !dbg !36
  %657 = insertelement <4 x i32> %656, i32 %492, i64 1, !dbg !36
  %658 = insertelement <4 x i32> %657, i32 %491, i64 2, !dbg !36
  %659 = insertelement <4 x i32> %658, i32 %490, i64 3, !dbg !36
  %660 = bitcast <4 x i32> %659 to <4 x float>, !dbg !36
  %661 = insertelement <4 x float> poison, float %539, i64 0, !dbg !46
  %662 = insertelement <4 x float> %661, float %540, i64 1, !dbg !46
  %663 = insertelement <4 x float> %662, float %541, i64 2, !dbg !46
  %664 = insertelement <4 x float> %663, float %542, i64 3, !dbg !46
  %665 = fmul <4 x float> %650, %664, !dbg !46
  %666 = fmul <4 x float> %665, %660, !dbg !47
  %667 = fadd <4 x float> %666, %655, !dbg !48
  %668 = fadd <4 x float> %146, %667, !dbg !49
  %669 = fcmp ogt <4 x float> %668, zeroinitializer, !dbg !50
  %670 = extractelement <4 x float> %668, i64 0, !dbg !51
  %671 = fmul float %670, 0x3FCD555560000000, !dbg !52
  %672 = extractelement <4 x float> %668, i64 1, !dbg !51
  %673 = fmul float %672, 0x3FCD555560000000, !dbg !52
  %674 = extractelement <4 x float> %668, i64 2, !dbg !51
  %675 = fmul float %674, 0x3FCD555560000000, !dbg !52
  %676 = extractelement <4 x float> %668, i64 3, !dbg !51
  %677 = fmul float %676, 0x3FCD555560000000, !dbg !52
  %678 = extractelement <4 x i1> %669, i64 0, !dbg !51
  %679 = select i1 %678, float %670, float %671, !dbg !51
  %680 = extractelement <4 x i1> %669, i64 1, !dbg !51
  %681 = select i1 %680, float %672, float %673, !dbg !51
  %682 = extractelement <4 x i1> %669, i64 2, !dbg !51
  %683 = select i1 %682, float %674, float %675, !dbg !51
  %684 = extractelement <4 x i1> %669, i64 3, !dbg !51
  %685 = select i1 %684, float %676, float %677, !dbg !51
  %686 = insertelement <4 x i32> poison, i32 %444, i64 0, !dbg !30
  %687 = insertelement <4 x i32> %686, i32 %442, i64 1, !dbg !30
  %688 = insertelement <4 x i32> %687, i32 %440, i64 2, !dbg !30
  %689 = insertelement <4 x i32> %688, i32 %438, i64 3, !dbg !30
  %690 = bitcast <4 x i32> %689 to <4 x float>, !dbg !30
  %691 = insertelement <4 x i32> poison, i32 %445, i64 0, !dbg !32
  %692 = insertelement <4 x i32> %691, i32 %443, i64 1, !dbg !32
  %693 = insertelement <4 x i32> %692, i32 %441, i64 2, !dbg !32
  %694 = insertelement <4 x i32> %693, i32 %439, i64 3, !dbg !32
  %695 = bitcast <4 x i32> %694 to <4 x float>, !dbg !32
  %696 = fsub <4 x float> %690, %695, !dbg !45
  %697 = insertelement <4 x i32> poison, i32 %473, i64 0, !dbg !38
  %698 = insertelement <4 x i32> %697, i32 %472, i64 1, !dbg !38
  %699 = insertelement <4 x i32> %698, i32 %471, i64 2, !dbg !38
  %700 = insertelement <4 x i32> %699, i32 %470, i64 3, !dbg !38
  %701 = bitcast <4 x i32> %700 to <4 x float>, !dbg !38
  %702 = insertelement <4 x i32> poison, i32 %489, i64 0, !dbg !36
  %703 = insertelement <4 x i32> %702, i32 %488, i64 1, !dbg !36
  %704 = insertelement <4 x i32> %703, i32 %487, i64 2, !dbg !36
  %705 = insertelement <4 x i32> %704, i32 %486, i64 3, !dbg !36
  %706 = bitcast <4 x i32> %705 to <4 x float>, !dbg !36
  %707 = insertelement <4 x float> poison, float %543, i64 0, !dbg !46
  %708 = insertelement <4 x float> %707, float %544, i64 1, !dbg !46
  %709 = insertelement <4 x float> %708, float %545, i64 2, !dbg !46
  %710 = insertelement <4 x float> %709, float %546, i64 3, !dbg !46
  %711 = fmul <4 x float> %696, %710, !dbg !46
  %712 = fmul <4 x float> %711, %706, !dbg !47
  %713 = fadd <4 x float> %712, %701, !dbg !48
  %714 = fadd <4 x float> %148, %713, !dbg !49
  %715 = fcmp ogt <4 x float> %714, zeroinitializer, !dbg !50
  %716 = extractelement <4 x float> %714, i64 0, !dbg !51
  %717 = fmul float %716, 0x3FCD555560000000, !dbg !52
  %718 = extractelement <4 x float> %714, i64 1, !dbg !51
  %719 = fmul float %718, 0x3FCD555560000000, !dbg !52
  %720 = extractelement <4 x float> %714, i64 2, !dbg !51
  %721 = fmul float %720, 0x3FCD555560000000, !dbg !52
  %722 = extractelement <4 x float> %714, i64 3, !dbg !51
  %723 = fmul float %722, 0x3FCD555560000000, !dbg !52
  %724 = extractelement <4 x i1> %715, i64 0, !dbg !51
  %725 = select i1 %724, float %716, float %717, !dbg !51
  %726 = extractelement <4 x i1> %715, i64 1, !dbg !51
  %727 = select i1 %726, float %718, float %719, !dbg !51
  %728 = extractelement <4 x i1> %715, i64 2, !dbg !51
  %729 = select i1 %728, float %720, float %721, !dbg !51
  %730 = extractelement <4 x i1> %715, i64 3, !dbg !51
  %731 = select i1 %730, float %722, float %723, !dbg !51
  %732 = zext <4 x i1> %577 to <4 x i8>, !dbg !53
  %733 = bitcast <4 x i8> %732 to i32, !dbg !53
  %734 = zext <4 x i1> %623 to <4 x i8>, !dbg !53
  %735 = bitcast <4 x i8> %734 to i32, !dbg !53
  %736 = zext <4 x i1> %669 to <4 x i8>, !dbg !53
  %737 = bitcast <4 x i8> %736 to i32, !dbg !53
  %738 = zext <4 x i1> %715 to <4 x i8>, !dbg !53
  %739 = bitcast <4 x i8> %738 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %733, i32 %735, i32 %737, i32 %739, ptr addrspace(1) %547, i1 %60) #4, !dbg !53
  %740 = sext i32 %521 to i64, !dbg !54
  %741 = getelementptr float, ptr addrspace(1) %7, i64 %740, !dbg !54
  %742 = sext i32 %519 to i64, !dbg !54
  %743 = getelementptr float, ptr addrspace(1) %7, i64 %742, !dbg !54
  %744 = sext i32 %516 to i64, !dbg !54
  %745 = getelementptr float, ptr addrspace(1) %7, i64 %744, !dbg !54
  %746 = sext i32 %513 to i64, !dbg !54
  %747 = getelementptr float, ptr addrspace(1) %7, i64 %746, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %748 = and i32 %16, 1020, !dbg !55
  %749 = bitcast float %587 to i32, !dbg !55
  %750 = bitcast float %589 to i32, !dbg !55
  %751 = bitcast float %591 to i32, !dbg !55
  %752 = bitcast float %593 to i32, !dbg !55
  %753 = bitcast float %633 to i32, !dbg !55
  %754 = bitcast float %635 to i32, !dbg !55
  %755 = bitcast float %637 to i32, !dbg !55
  %756 = bitcast float %639 to i32, !dbg !55
  %757 = bitcast float %679 to i32, !dbg !55
  %758 = bitcast float %681 to i32, !dbg !55
  %759 = bitcast float %683 to i32, !dbg !55
  %760 = bitcast float %685 to i32, !dbg !55
  %761 = bitcast float %725 to i32, !dbg !55
  %762 = bitcast float %727 to i32, !dbg !55
  %763 = bitcast float %729 to i32, !dbg !55
  %764 = bitcast float %731 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %141, i32 %749, i32 %750, i32 %751, i32 %752, i1 true) #4, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %143, i32 %753, i32 %754, i32 %755, i32 %756, i1 true) #4, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %145, i32 %757, i32 %758, i32 %759, i32 %760, i1 true) #4, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %147, i32 %761, i32 %762, i32 %763, i32 %764, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %765 = and i32 %16, 1008, !dbg !55
  %766 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %765, !dbg !55
  %767 = getelementptr inbounds float, ptr addrspace(3) %766, i32 %748, !dbg !55
  %768 = or disjoint i32 %748, 1024, !dbg !55
  %769 = and i32 %768, 2032, !dbg !55
  %770 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %769, !dbg !55
  %771 = getelementptr inbounds float, ptr addrspace(3) %770, i32 %768, !dbg !55
  %772 = load <4 x i32>, ptr addrspace(3) %771, align 16, !dbg !55
  %773 = or disjoint i32 %748, 2048, !dbg !55
  %774 = and i32 %773, 3056, !dbg !55
  %775 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %774, !dbg !55
  %776 = getelementptr inbounds float, ptr addrspace(3) %775, i32 %773, !dbg !55
  %777 = load <4 x i32>, ptr addrspace(3) %776, align 16, !dbg !55
  %778 = or disjoint i32 %748, 3072, !dbg !55
  %779 = and i32 %778, 4080, !dbg !55
  %780 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %779, !dbg !55
  %781 = getelementptr inbounds float, ptr addrspace(3) %780, i32 %778, !dbg !55
  %782 = load <4 x i32>, ptr addrspace(3) %781, align 16, !dbg !55
  %.extract = load i32, ptr addrspace(3) %767, align 16, !dbg !55
  %783 = getelementptr inbounds i8, ptr addrspace(3) %767, i32 4, !dbg !55
  %.extract36 = load i32, ptr addrspace(3) %783, align 4, !dbg !55
  %784 = getelementptr inbounds i8, ptr addrspace(3) %767, i32 8, !dbg !55
  %.extract37 = load i32, ptr addrspace(3) %784, align 8, !dbg !55
  %785 = getelementptr inbounds i8, ptr addrspace(3) %767, i32 12, !dbg !55
  %.extract38 = load i32, ptr addrspace(3) %785, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %741, i1 %530) #4, !dbg !55
  %.extract39 = extractelement <4 x i32> %772, i64 0, !dbg !55
  %.extract40 = extractelement <4 x i32> %772, i64 1, !dbg !55
  %.extract41 = extractelement <4 x i32> %772, i64 2, !dbg !55
  %.extract42 = extractelement <4 x i32> %772, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %743, i1 %528) #4, !dbg !55
  %.extract43 = extractelement <4 x i32> %777, i64 0, !dbg !55
  %.extract44 = extractelement <4 x i32> %777, i64 1, !dbg !55
  %.extract45 = extractelement <4 x i32> %777, i64 2, !dbg !55
  %.extract46 = extractelement <4 x i32> %777, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %745, i1 %526) #4, !dbg !55
  %.extract47 = extractelement <4 x i32> %782, i64 0, !dbg !55
  %.extract48 = extractelement <4 x i32> %782, i64 1, !dbg !55
  %.extract49 = extractelement <4 x i32> %782, i64 2, !dbg !55
  %.extract50 = extractelement <4 x i32> %782, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract47, i32 %.extract48, i32 %.extract49, i32 %.extract50, ptr addrspace(1) %747, i1 %524) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfzqgjunbhmfgdemy2glwwzqcvvwx2zhzpz67cd5cd3cig4h2vci.py", directory: "inductor_cache/fz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 53, scope: !7)
!25 = !DILocation(line: 32, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 38, scope: !7)
!27 = !DILocation(line: 33, column: 49, scope: !7)
!28 = !DILocation(line: 33, column: 43, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 26, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 33, column: 35, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 55, column: 25, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 19, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 19, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 56, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 56, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
