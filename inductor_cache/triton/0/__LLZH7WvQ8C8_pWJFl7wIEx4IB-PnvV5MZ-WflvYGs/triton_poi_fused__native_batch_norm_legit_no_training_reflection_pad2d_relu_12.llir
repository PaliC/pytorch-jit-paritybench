; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %18 = sdiv i32 %.frozen, 512, !dbg !14
  %19 = mul i32 %18, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = srem i32 %14, 512, !dbg !15
  %21 = srem i32 %15, 512, !dbg !15
  %22 = srem i32 %16, 512, !dbg !15
  %23 = sdiv i32 %17, 512, !dbg !14
  %24 = srem i32 %18, 10, !dbg !16
  %25 = srem i32 %23, 10, !dbg !16
  %26 = sdiv i32 %13, 5120, !dbg !17
  %27 = sdiv i32 %17, 5120, !dbg !17
  %28 = srem i32 %26, 10, !dbg !18
  %29 = srem i32 %27, 10, !dbg !18
  %30 = sdiv i32 %13, 51200, !dbg !19
  %31 = sdiv i32 %17, 51200, !dbg !19
  %32 = add nsw i32 %28, -1, !dbg !20
  %33 = add nsw i32 %29, -1, !dbg !20
  %34 = tail call i32 @llvm.abs.i32(i32 %32, i1 true), !dbg !21
  %35 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !21
  %36 = add nsw i32 %34, -7, !dbg !22
  %37 = add nsw i32 %35, -7, !dbg !22
  %38 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !23
  %39 = tail call i32 @llvm.abs.i32(i32 %37, i1 true), !dbg !23
  %40 = mul nsw i32 %38, -4096, !dbg !24
  %41 = mul nsw i32 %39, -4096, !dbg !24
  %42 = add nsw i32 %24, -1, !dbg !25
  %43 = add nsw i32 %25, -1, !dbg !25
  %44 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !26
  %45 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !26
  %46 = add nsw i32 %44, -7, !dbg !27
  %47 = add nsw i32 %45, -7, !dbg !27
  %48 = tail call i32 @llvm.abs.i32(i32 %46, i1 true), !dbg !28
  %49 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !28
  %50 = mul nsw i32 %48, -512, !dbg !29
  %51 = mul nsw i32 %49, -512, !dbg !29
  %52 = shl nsw i32 %30, 15, !dbg !30
  %53 = shl nsw i32 %31, 15, !dbg !30
  %54 = or disjoint i32 %52, 32256, !dbg !31
  %55 = add nsw i32 %54, %.decomposed, !dbg !32
  %56 = add i32 %55, %40, !dbg !33
  %57 = add i32 %56, %50, !dbg !34
  %58 = add nsw i32 %54, %20, !dbg !32
  %59 = add i32 %58, %40, !dbg !33
  %60 = add i32 %59, %50, !dbg !34
  %61 = add nsw i32 %54, %21, !dbg !32
  %62 = add i32 %61, %40, !dbg !33
  %63 = add i32 %62, %50, !dbg !34
  %64 = add nsw i32 %54, %22, !dbg !32
  %65 = add i32 %64, %40, !dbg !33
  %66 = add i32 %65, %50, !dbg !34
  %67 = or disjoint i32 %53, 32256, !dbg !31
  %68 = add nsw i32 %67, %.decomposed, !dbg !32
  %69 = add i32 %68, %41, !dbg !33
  %70 = add i32 %69, %51, !dbg !34
  %71 = add nsw i32 %67, %20, !dbg !32
  %72 = add i32 %71, %41, !dbg !33
  %73 = add i32 %72, %51, !dbg !34
  %74 = add nsw i32 %67, %21, !dbg !32
  %75 = add i32 %74, %41, !dbg !33
  %76 = add i32 %75, %51, !dbg !34
  %77 = add nsw i32 %67, %22, !dbg !32
  %78 = add i32 %77, %41, !dbg !33
  %79 = add i32 %78, %51, !dbg !34
  %80 = sext i32 %57 to i64, !dbg !35
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !35
  %82 = sext i32 %60 to i64, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !35
  %84 = sext i32 %63 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !35
  %86 = sext i32 %66 to i64, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !35
  %88 = sext i32 %70 to i64, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !35
  %90 = sext i32 %73 to i64, !dbg !35
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !35
  %92 = sext i32 %76 to i64, !dbg !35
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !35
  %94 = sext i32 %79 to i64, !dbg !35
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !36
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !36
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !36
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !36
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !36
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !36
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !36
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !36
  %104 = sext i32 %.decomposed to i64, !dbg !37
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !37
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !38
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !39
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !40
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !40
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !40
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !40
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !40
  %114 = bitcast i32 %110 to float, !dbg !40
  %115 = bitcast i32 %111 to float, !dbg !40
  %116 = bitcast i32 %112 to float, !dbg !40
  %117 = bitcast i32 %113 to float, !dbg !40
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !40
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !40
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !40
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !40
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !40
  %123 = bitcast i32 %119 to float, !dbg !40
  %124 = bitcast i32 %120 to float, !dbg !40
  %125 = bitcast i32 %121 to float, !dbg !40
  %126 = bitcast i32 %122 to float, !dbg !40
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !41
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !42
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !42
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %104, !dbg !43
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !44
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !44
  %133 = fadd float %114, 0x3EE4F8B580000000, !dbg !45
  %134 = fadd float %115, 0x3EE4F8B580000000, !dbg !45
  %135 = fadd float %116, 0x3EE4F8B580000000, !dbg !45
  %136 = fadd float %117, 0x3EE4F8B580000000, !dbg !45
  %137 = fadd float %123, 0x3EE4F8B580000000, !dbg !45
  %138 = fadd float %124, 0x3EE4F8B580000000, !dbg !45
  %139 = fadd float %125, 0x3EE4F8B580000000, !dbg !45
  %140 = fadd float %126, 0x3EE4F8B580000000, !dbg !45
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %141, 0, !dbg !46
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %142, 0, !dbg !46
  br i1 %.not.i, label %148, label %143, !dbg !46

143:                                              ; preds = %7
  br i1 %.not1.i, label %146, label %144, !dbg !46

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

148:                                              ; preds = %7
  br i1 %.not1.i, label %151, label %149, !dbg !46

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %144, %146, %149, %151
  %.0.i = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !46
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %153, 0, !dbg !46
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %154, 0, !dbg !46
  br i1 %.not.i1, label %160, label %155, !dbg !46

155:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %158, label %156, !dbg !46

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

160:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %163, label %161, !dbg !46

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %156, %158, %161, %163
  %.0.i3 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !46
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %165, 0, !dbg !46
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %166, 0, !dbg !46
  br i1 %.not.i6, label %172, label %167, !dbg !46

167:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %170, label %168, !dbg !46

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

172:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %175, label %173, !dbg !46

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %168, %170, %173, %175
  %.0.i8 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !46
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %177, 0, !dbg !46
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %178, 0, !dbg !46
  br i1 %.not.i11, label %184, label %179, !dbg !46

179:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %182, label %180, !dbg !46

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

184:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %187, label %185, !dbg !46

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %180, %182, %185, %187
  %.0.i13 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !46
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i16 = icmp eq i32 %189, 0, !dbg !46
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i19 = icmp eq i32 %190, 0, !dbg !46
  br i1 %.not.i16, label %196, label %191, !dbg !46

191:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %194, label %192, !dbg !46

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

196:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %199, label %197, !dbg !46

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

__nv_sqrtf.exit20:                                ; preds = %192, %194, %197, %199
  %.0.i18 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !46
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i21 = icmp eq i32 %201, 0, !dbg !46
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i24 = icmp eq i32 %202, 0, !dbg !46
  br i1 %.not.i21, label %208, label %203, !dbg !46

203:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %206, label %204, !dbg !46

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

208:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %211, label %209, !dbg !46

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

__nv_sqrtf.exit25:                                ; preds = %204, %206, %209, %211
  %.0.i23 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !46
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i26 = icmp eq i32 %213, 0, !dbg !46
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i29 = icmp eq i32 %214, 0, !dbg !46
  br i1 %.not.i26, label %220, label %215, !dbg !46

215:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %218, label %216, !dbg !46

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

220:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %223, label %221, !dbg !46

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

__nv_sqrtf.exit30:                                ; preds = %216, %218, %221, %223
  %.0.i28 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !46
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i31 = icmp eq i32 %225, 0, !dbg !46
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i34 = icmp eq i32 %226, 0, !dbg !46
  br i1 %.not.i31, label %232, label %227, !dbg !46

227:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %230, label %228, !dbg !46

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

232:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %235, label %233, !dbg !46

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

__nv_sqrtf.exit35:                                ; preds = %228, %230, %233, %235
  %.0.i33 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !46
  %237 = insertelement <8 x i32> poison, i32 %103, i64 0, !dbg !36
  %238 = insertelement <8 x i32> %237, i32 %102, i64 1, !dbg !36
  %239 = insertelement <8 x i32> %238, i32 %101, i64 2, !dbg !36
  %240 = insertelement <8 x i32> %239, i32 %100, i64 3, !dbg !36
  %241 = insertelement <8 x i32> %240, i32 %99, i64 4, !dbg !36
  %242 = insertelement <8 x i32> %241, i32 %98, i64 5, !dbg !36
  %243 = insertelement <8 x i32> %242, i32 %97, i64 6, !dbg !36
  %244 = insertelement <8 x i32> %243, i32 %96, i64 7, !dbg !36
  %245 = bitcast <8 x i32> %244 to <8 x float>, !dbg !36
  %246 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !38
  %247 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !38
  %248 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !38
  %249 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !38
  %250 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %251 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %252 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %253 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %254 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !44
  %255 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !44
  %256 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !44
  %257 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !44
  %258 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !44
  %259 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !44
  %260 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !44
  %261 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !44
  %262 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !42
  %263 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !42
  %264 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !42
  %265 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !42
  %266 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !42
  %267 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !42
  %268 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !42
  %269 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !42
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !47
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !47
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !47
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !47
  %278 = insertelement <8 x i32> poison, i32 %246, i64 0, !dbg !38
  %279 = insertelement <8 x i32> %278, i32 %247, i64 1, !dbg !38
  %280 = insertelement <8 x i32> %279, i32 %248, i64 2, !dbg !38
  %281 = insertelement <8 x i32> %280, i32 %249, i64 3, !dbg !38
  %282 = insertelement <8 x i32> %281, i32 %250, i64 4, !dbg !38
  %283 = insertelement <8 x i32> %282, i32 %251, i64 5, !dbg !38
  %284 = insertelement <8 x i32> %283, i32 %252, i64 6, !dbg !38
  %285 = insertelement <8 x i32> %284, i32 %253, i64 7, !dbg !38
  %286 = bitcast <8 x i32> %285 to <8 x float>, !dbg !38
  %287 = fsub <8 x float> %245, %286, !dbg !48
  %288 = insertelement <8 x i32> poison, i32 %254, i64 0, !dbg !44
  %289 = insertelement <8 x i32> %288, i32 %255, i64 1, !dbg !44
  %290 = insertelement <8 x i32> %289, i32 %256, i64 2, !dbg !44
  %291 = insertelement <8 x i32> %290, i32 %257, i64 3, !dbg !44
  %292 = insertelement <8 x i32> %291, i32 %258, i64 4, !dbg !44
  %293 = insertelement <8 x i32> %292, i32 %259, i64 5, !dbg !44
  %294 = insertelement <8 x i32> %293, i32 %260, i64 6, !dbg !44
  %295 = insertelement <8 x i32> %294, i32 %261, i64 7, !dbg !44
  %296 = bitcast <8 x i32> %295 to <8 x float>, !dbg !44
  %297 = insertelement <8 x i32> poison, i32 %262, i64 0, !dbg !42
  %298 = insertelement <8 x i32> %297, i32 %263, i64 1, !dbg !42
  %299 = insertelement <8 x i32> %298, i32 %264, i64 2, !dbg !42
  %300 = insertelement <8 x i32> %299, i32 %265, i64 3, !dbg !42
  %301 = insertelement <8 x i32> %300, i32 %266, i64 4, !dbg !42
  %302 = insertelement <8 x i32> %301, i32 %267, i64 5, !dbg !42
  %303 = insertelement <8 x i32> %302, i32 %268, i64 6, !dbg !42
  %304 = insertelement <8 x i32> %303, i32 %269, i64 7, !dbg !42
  %305 = bitcast <8 x i32> %304 to <8 x float>, !dbg !42
  %306 = insertelement <8 x float> poison, float %277, i64 0, !dbg !49
  %307 = insertelement <8 x float> %306, float %276, i64 1, !dbg !49
  %308 = insertelement <8 x float> %307, float %275, i64 2, !dbg !49
  %309 = insertelement <8 x float> %308, float %274, i64 3, !dbg !49
  %310 = insertelement <8 x float> %309, float %273, i64 4, !dbg !49
  %311 = insertelement <8 x float> %310, float %272, i64 5, !dbg !49
  %312 = insertelement <8 x float> %311, float %271, i64 6, !dbg !49
  %313 = insertelement <8 x float> %312, float %270, i64 7, !dbg !49
  %314 = fmul <8 x float> %287, %313, !dbg !49
  %315 = fmul <8 x float> %314, %305, !dbg !50
  %316 = fadd <8 x float> %315, %296, !dbg !51
  %317 = fcmp olt <8 x float> %316, zeroinitializer, !dbg !52
  %318 = extractelement <8 x i1> %317, i64 7, !dbg !56
  %319 = extractelement <8 x i1> %317, i64 6, !dbg !56
  %320 = extractelement <8 x i1> %317, i64 5, !dbg !56
  %321 = extractelement <8 x i1> %317, i64 4, !dbg !56
  %322 = extractelement <8 x i1> %317, i64 3, !dbg !56
  %323 = extractelement <8 x i1> %317, i64 2, !dbg !56
  %324 = extractelement <8 x i1> %317, i64 1, !dbg !56
  %325 = extractelement <8 x i1> %317, i64 0, !dbg !56
  %326 = sext i32 %13 to i64, !dbg !57
  %327 = getelementptr float, ptr addrspace(1) %5, i64 %326, !dbg !57
  %328 = sext i32 %17 to i64, !dbg !57
  %329 = getelementptr float, ptr addrspace(1) %5, i64 %328, !dbg !57
  %bc = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %330 = extractelement <8 x i32> %bc, i64 7, !dbg !58
  %331 = select i1 %318, i32 0, i32 %330, !dbg !56
  %bc36 = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %332 = extractelement <8 x i32> %bc36, i64 6, !dbg !58
  %333 = select i1 %319, i32 0, i32 %332, !dbg !56
  %bc37 = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %334 = extractelement <8 x i32> %bc37, i64 5, !dbg !58
  %335 = select i1 %320, i32 0, i32 %334, !dbg !56
  %bc38 = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %336 = extractelement <8 x i32> %bc38, i64 4, !dbg !58
  %337 = select i1 %321, i32 0, i32 %336, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %333, i32 %335, i32 %337, ptr addrspace(1) %327, i1 true) #3, !dbg !58
  %bc39 = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %338 = extractelement <8 x i32> %bc39, i64 3, !dbg !58
  %339 = select i1 %322, i32 0, i32 %338, !dbg !56
  %bc40 = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %340 = extractelement <8 x i32> %bc40, i64 2, !dbg !58
  %341 = select i1 %323, i32 0, i32 %340, !dbg !56
  %bc41 = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %342 = extractelement <8 x i32> %bc41, i64 1, !dbg !58
  %343 = select i1 %324, i32 0, i32 %342, !dbg !56
  %bc42 = bitcast <8 x float> %316 to <8 x i32>, !dbg !58
  %344 = extractelement <8 x i32> %bc42, i64 0, !dbg !58
  %345 = select i1 %325, i32 0, i32 %344, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %341, i32 %343, i32 %345, ptr addrspace(1) %329, i1 true) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3owymliz55e6afkrdojg24acldo56betwtbfsspdnxhasm2hgmt.py", directory: "inductor_cache/3o")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 90, scope: !7)
!21 = !DILocation(line: 29, column: 83, scope: !7)
!22 = !DILocation(line: 29, column: 71, scope: !7)
!23 = !DILocation(line: 29, column: 64, scope: !7)
!24 = !DILocation(line: 29, column: 52, scope: !7)
!25 = !DILocation(line: 29, column: 144, scope: !7)
!26 = !DILocation(line: 29, column: 137, scope: !7)
!27 = !DILocation(line: 29, column: 125, scope: !7)
!28 = !DILocation(line: 29, column: 118, scope: !7)
!29 = !DILocation(line: 29, column: 106, scope: !7)
!30 = !DILocation(line: 29, column: 158, scope: !7)
!31 = !DILocation(line: 29, column: 38, scope: !7)
!32 = !DILocation(line: 29, column: 44, scope: !7)
!33 = !DILocation(line: 29, column: 99, scope: !7)
!34 = !DILocation(line: 29, column: 152, scope: !7)
!35 = !DILocation(line: 29, column: 30, scope: !7)
!36 = !DILocation(line: 29, column: 163, scope: !7)
!37 = !DILocation(line: 30, column: 30, scope: !7)
!38 = !DILocation(line: 30, column: 35, scope: !7)
!39 = !DILocation(line: 31, column: 30, scope: !7)
!40 = !DILocation(line: 31, column: 35, scope: !7)
!41 = !DILocation(line: 32, column: 31, scope: !7)
!42 = !DILocation(line: 32, column: 36, scope: !7)
!43 = !DILocation(line: 33, column: 31, scope: !7)
!44 = !DILocation(line: 33, column: 36, scope: !7)
!45 = !DILocation(line: 36, column: 18, scope: !7)
!46 = !DILocation(line: 37, column: 26, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 34, column: 18, scope: !7)
!49 = !DILocation(line: 42, column: 19, scope: !7)
!50 = !DILocation(line: 43, column: 20, scope: !7)
!51 = !DILocation(line: 44, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 46, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 47, column: 25, scope: !7)
!58 = !DILocation(line: 47, column: 37, scope: !7)
!59 = !DILocation(line: 47, column: 4, scope: !7)
