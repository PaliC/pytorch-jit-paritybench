; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 124, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 256, !dbg !14
  %15 = icmp slt i32 %13, 256, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 2, !dbg !16
  %18 = lshr i32 %8, 5, !dbg !17
  %19 = and i32 %18, 3, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = icmp slt i32 %20, 4, !dbg !19
  %22 = icmp slt i32 %17, 4, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %23 = sdiv i32 %.frozen, 64, !dbg !20
  %24 = mul i32 %23, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %24, !dbg !21
  %25 = shl i32 %20, 6, !dbg !22
  %26 = add i32 %25, %.decomposed, !dbg !23
  %27 = shl i32 %23, 8, !dbg !24
  %28 = add i32 %26, %27, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !26
  %31 = and i1 %14, %21, !dbg !27
  %32 = and i1 %22, %15, !dbg !27
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #2, !dbg !28
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !28
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !28
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !28
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !28
  %38 = shl i32 %8, 4, !dbg !28
  %39 = and i32 %38, 496, !dbg !28
  %40 = or disjoint i32 %39, %19, !dbg !28
  %41 = and i32 %9, 508, !dbg !28
  %42 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %39, !dbg !28
  %43 = getelementptr float, ptr addrspace(3) %42, i32 %40, !dbg !28
  %44 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #2, !dbg !28
  %45 = or disjoint i32 %40, 4, !dbg !28
  %46 = lshr i32 %45, 2, !dbg !28
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i32 %46, !dbg !28
  %48 = getelementptr float, ptr addrspace(3) %47, i32 %45, !dbg !28
  %49 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #2, !dbg !28
  %50 = or disjoint i32 %40, 8, !dbg !28
  %51 = lshr i32 %50, 2, !dbg !28
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51, !dbg !28
  %53 = getelementptr float, ptr addrspace(3) %52, i32 %50, !dbg !28
  %54 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #2, !dbg !28
  %55 = or disjoint i32 %40, 12, !dbg !28
  %56 = lshr i32 %55, 2, !dbg !28
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !28
  %58 = getelementptr float, ptr addrspace(3) %57, i32 %55, !dbg !28
  %59 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %60 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %41, !dbg !28
  %61 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %41, !dbg !28
  %62 = load float, ptr addrspace(3) %61, align 4, !dbg !28
  %63 = or disjoint i32 %41, 1, !dbg !28
  %64 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %63, !dbg !28
  %65 = load float, ptr addrspace(3) %64, align 4, !dbg !28
  %66 = or disjoint i32 %41, 2, !dbg !28
  %67 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %66, !dbg !28
  %68 = load float, ptr addrspace(3) %67, align 4, !dbg !28
  %69 = or disjoint i32 %41, 3, !dbg !28
  %70 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %69, !dbg !28
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !28
  %72 = add i32 %13, %16, !dbg !29
  %73 = shl i32 %72, 2, !dbg !29
  %74 = sext i32 %73 to i64, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !30
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %32) #2, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !31
  %81 = bitcast i32 %77 to float, !dbg !31
  %82 = bitcast i32 %78 to float, !dbg !31
  %83 = bitcast i32 %79 to float, !dbg !31
  %84 = bitcast i32 %80 to float, !dbg !31
  %85 = sext i32 %17 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !32
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %22) #2, !dbg !33
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !33
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !33
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !33
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !33
  %92 = bitcast i32 %88 to float, !dbg !33
  %93 = bitcast i32 %89 to float, !dbg !33
  %94 = bitcast i32 %90 to float, !dbg !33
  %95 = bitcast i32 %91 to float, !dbg !33
  %96 = fadd float %81, %92, !dbg !34
  %97 = fadd float %82, %93, !dbg !34
  %98 = fadd float %83, %94, !dbg !34
  %99 = fadd float %84, %95, !dbg !34
  %100 = fadd float %62, %96, !dbg !35
  %101 = fadd float %65, %97, !dbg !35
  %102 = fadd float %68, %98, !dbg !35
  %103 = fadd float %71, %99, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %104 = bitcast float %100 to i32, !dbg !37
  %105 = bitcast float %101 to i32, !dbg !37
  %106 = bitcast float %102 to i32, !dbg !37
  %107 = bitcast float %103 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %104, i32 %105, i32 %106, i32 %107, ptr addrspace(1) %75, i1 %32) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py", directory: "inductor_cache/fg")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 34, scope: !7)
!31 = !DILocation(line: 33, column: 46, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
!37 = !DILocation(line: 38, column: 46, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
