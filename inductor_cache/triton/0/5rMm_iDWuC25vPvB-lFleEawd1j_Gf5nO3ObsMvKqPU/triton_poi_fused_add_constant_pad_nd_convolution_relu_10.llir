; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 36, !dbg !14
  %12 = mul i32 %11, 36, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = sext i32 %10 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !17
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !17
  %20 = sext i32 %.decomposed to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = icmp slt i32 %.decomposed, 32, !dbg !20
  %28 = shl nsw i32 %11, 5, !dbg !21
  %29 = add nsw i32 %28, %.decomposed, !dbg !22
  %30 = sext i32 %29 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !23
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !24
  %37 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !17
  %38 = insertelement <4 x i32> %37, i32 %18, i64 1, !dbg !17
  %39 = insertelement <4 x i32> %38, i32 %17, i64 2, !dbg !17
  %40 = insertelement <4 x i32> %39, i32 %16, i64 3, !dbg !17
  %41 = bitcast <4 x i32> %40 to <4 x float>, !dbg !17
  %42 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !19
  %43 = insertelement <4 x i32> %42, i32 %25, i64 1, !dbg !19
  %44 = insertelement <4 x i32> %43, i32 %24, i64 2, !dbg !19
  %45 = insertelement <4 x i32> %44, i32 %23, i64 3, !dbg !19
  %46 = bitcast <4 x i32> %45 to <4 x float>, !dbg !19
  %47 = fadd <4 x float> %41, %46, !dbg !25
  %48 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !24
  %49 = insertelement <4 x i32> %48, i32 %35, i64 1, !dbg !24
  %50 = insertelement <4 x i32> %49, i32 %34, i64 2, !dbg !24
  %51 = insertelement <4 x i32> %50, i32 %33, i64 3, !dbg !24
  %52 = bitcast <4 x i32> %51 to <4 x float>, !dbg !24
  %53 = fadd <4 x float> %47, %52, !dbg !26
  %54 = fcmp olt <4 x float> %53, zeroinitializer, !dbg !27
  %55 = extractelement <4 x i1> %54, i64 3, !dbg !31
  %56 = extractelement <4 x i1> %54, i64 2, !dbg !31
  %57 = extractelement <4 x i1> %54, i64 1, !dbg !31
  %58 = extractelement <4 x i1> %54, i64 0, !dbg !31
  %bc = bitcast <4 x float> %53 to <4 x i32>, !dbg !32
  %59 = extractelement <4 x i32> %bc, i64 3, !dbg !32
  %60 = select i1 %55, i32 0, i32 %59, !dbg !31
  %bc1 = bitcast <4 x float> %53 to <4 x i32>, !dbg !32
  %61 = extractelement <4 x i32> %bc1, i64 2, !dbg !32
  %62 = select i1 %56, i32 0, i32 %61, !dbg !31
  %bc2 = bitcast <4 x float> %53 to <4 x i32>, !dbg !32
  %63 = extractelement <4 x i32> %bc2, i64 1, !dbg !32
  %64 = select i1 %57, i32 0, i32 %63, !dbg !31
  %bc3 = bitcast <4 x float> %53 to <4 x i32>, !dbg !32
  %65 = extractelement <4 x i32> %bc3, i64 0, !dbg !32
  %66 = select i1 %58, i32 0, i32 %65, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %60, i32 %62, i32 %64, i32 %66, ptr addrspace(1) %14, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxsmz67xush4k4t4ftmucra2nzidryywcivdkhiogy3mi477u7mz.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_relu_10", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 29, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 39, scope: !7)
!33 = !DILocation(line: 37, column: 4, scope: !7)
