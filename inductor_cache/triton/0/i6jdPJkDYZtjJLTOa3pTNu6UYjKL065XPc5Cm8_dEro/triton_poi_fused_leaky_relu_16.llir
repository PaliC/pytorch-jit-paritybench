; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = or disjoint i32 %14, 128, !dbg !13
  %17 = or disjoint i32 %14, 192, !dbg !13
  %18 = icmp slt i32 %14, 256, !dbg !14
  %19 = icmp slt i32 %15, 256, !dbg !14
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 4, !dbg !16
  %24 = or disjoint i32 %23, %13, !dbg !17
  %25 = icmp slt i32 %24, 128, !dbg !18
  %26 = sdiv i32 %14, 64, !dbg !19
  %27 = sdiv i32 %15, 64, !dbg !19
  %28 = sdiv i32 %16, 64, !dbg !19
  %29 = sdiv i32 %17, 64, !dbg !19
  %30 = shl i32 %14, 7, !dbg !20
  %31 = shl i32 %15, 7, !dbg !20
  %32 = shl i32 %16, 7, !dbg !20
  %33 = shl i32 %17, 7, !dbg !20
  %34 = add i32 %24, %30, !dbg !21
  %35 = add i32 %24, %31, !dbg !21
  %36 = add i32 %24, %32, !dbg !21
  %37 = add i32 %24, %33, !dbg !21
  %38 = sext i32 %34 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = sext i32 %35 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %36 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %37 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = and i1 %18, %25, !dbg !23
  %47 = and i1 %19, %25, !dbg !23
  %48 = and i1 %20, %25, !dbg !23
  %49 = and i1 %21, %25, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %46) #4, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %47) #4, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %48) #4, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %49) #4, !dbg !24
  %54 = shl i32 %26, 7, !dbg !25
  %55 = shl i32 %27, 7, !dbg !25
  %56 = shl i32 %28, 7, !dbg !25
  %57 = shl i32 %29, 7, !dbg !25
  %58 = add i32 %54, %24, !dbg !26
  %59 = add i32 %24, %55, !dbg !26
  %60 = add i32 %24, %56, !dbg !26
  %61 = add i32 %24, %57, !dbg !26
  %62 = sext i32 %58 to i64, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !27
  %64 = sext i32 %59 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !27
  %66 = sext i32 %60 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !27
  %68 = sext i32 %61 to i64, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %46) #4, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %47) #4, !dbg !28
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %48) #4, !dbg !28
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %49) #4, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !29
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %46) #4, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = bitcast i32 %79 to float, !dbg !30
  %84 = bitcast i32 %80 to float, !dbg !30
  %85 = bitcast i32 %81 to float, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %47) #4, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !30
  %92 = bitcast i32 %88 to float, !dbg !30
  %93 = bitcast i32 %89 to float, !dbg !30
  %94 = bitcast i32 %90 to float, !dbg !30
  %95 = bitcast i32 %91 to float, !dbg !30
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %48) #4, !dbg !30
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !30
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !30
  %101 = bitcast i32 %97 to float, !dbg !30
  %102 = bitcast i32 %98 to float, !dbg !30
  %103 = bitcast i32 %99 to float, !dbg !30
  %104 = bitcast i32 %100 to float, !dbg !30
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %49) #4, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !30
  %110 = bitcast i32 %106 to float, !dbg !30
  %111 = bitcast i32 %107 to float, !dbg !30
  %112 = bitcast i32 %108 to float, !dbg !30
  %113 = bitcast i32 %109 to float, !dbg !30
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 6.400000e+01) #4, !dbg !31
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 6.400000e+01) #4, !dbg !31
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 6.400000e+01) #4, !dbg !31
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 6.400000e+01) #4, !dbg !31
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 6.400000e+01) #4, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 6.400000e+01) #4, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 6.400000e+01) #4, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 6.400000e+01) #4, !dbg !31
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 6.400000e+01) #4, !dbg !31
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 6.400000e+01) #4, !dbg !31
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 6.400000e+01) #4, !dbg !31
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 6.400000e+01) #4, !dbg !31
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 6.400000e+01) #4, !dbg !31
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 6.400000e+01) #4, !dbg !31
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 6.400000e+01) #4, !dbg !31
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 6.400000e+01) #4, !dbg !31
  %130 = fadd float %114, 0x3EE4F8B580000000, !dbg !32
  %131 = fadd float %115, 0x3EE4F8B580000000, !dbg !32
  %132 = fadd float %116, 0x3EE4F8B580000000, !dbg !32
  %133 = fadd float %117, 0x3EE4F8B580000000, !dbg !32
  %134 = fadd float %118, 0x3EE4F8B580000000, !dbg !32
  %135 = fadd float %119, 0x3EE4F8B580000000, !dbg !32
  %136 = fadd float %120, 0x3EE4F8B580000000, !dbg !32
  %137 = fadd float %121, 0x3EE4F8B580000000, !dbg !32
  %138 = fadd float %122, 0x3EE4F8B580000000, !dbg !32
  %139 = fadd float %123, 0x3EE4F8B580000000, !dbg !32
  %140 = fadd float %124, 0x3EE4F8B580000000, !dbg !32
  %141 = fadd float %125, 0x3EE4F8B580000000, !dbg !32
  %142 = fadd float %126, 0x3EE4F8B580000000, !dbg !32
  %143 = fadd float %127, 0x3EE4F8B580000000, !dbg !32
  %144 = fadd float %128, 0x3EE4F8B580000000, !dbg !32
  %145 = fadd float %129, 0x3EE4F8B580000000, !dbg !32
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %146, 0, !dbg !33
  br i1 %.not.i, label %149, label %147, !dbg !33

147:                                              ; preds = %6
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

149:                                              ; preds = %6
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %147, %149
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], !dbg !33
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i33 = icmp eq i32 %151, 0, !dbg !33
  br i1 %.not.i33, label %154, label %152, !dbg !33

152:                                              ; preds = %__nv_rsqrtf.exit
  %153 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !33
  br label %__nv_rsqrtf.exit35, !dbg !33

154:                                              ; preds = %__nv_rsqrtf.exit
  %155 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !33
  br label %__nv_rsqrtf.exit35, !dbg !33

__nv_rsqrtf.exit35:                               ; preds = %152, %154
  %.0.i34 = phi float [ %153, %152 ], [ %155, %154 ], !dbg !33
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i36 = icmp eq i32 %156, 0, !dbg !33
  br i1 %.not.i36, label %159, label %157, !dbg !33

157:                                              ; preds = %__nv_rsqrtf.exit35
  %158 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !33
  br label %__nv_rsqrtf.exit38, !dbg !33

159:                                              ; preds = %__nv_rsqrtf.exit35
  %160 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !33
  br label %__nv_rsqrtf.exit38, !dbg !33

__nv_rsqrtf.exit38:                               ; preds = %157, %159
  %.0.i37 = phi float [ %158, %157 ], [ %160, %159 ], !dbg !33
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i39 = icmp eq i32 %161, 0, !dbg !33
  br i1 %.not.i39, label %164, label %162, !dbg !33

162:                                              ; preds = %__nv_rsqrtf.exit38
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !33
  br label %__nv_rsqrtf.exit41, !dbg !33

164:                                              ; preds = %__nv_rsqrtf.exit38
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !33
  br label %__nv_rsqrtf.exit41, !dbg !33

__nv_rsqrtf.exit41:                               ; preds = %162, %164
  %.0.i40 = phi float [ %163, %162 ], [ %165, %164 ], !dbg !33
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i42 = icmp eq i32 %166, 0, !dbg !33
  br i1 %.not.i42, label %169, label %167, !dbg !33

167:                                              ; preds = %__nv_rsqrtf.exit41
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !33
  br label %__nv_rsqrtf.exit44, !dbg !33

169:                                              ; preds = %__nv_rsqrtf.exit41
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !33
  br label %__nv_rsqrtf.exit44, !dbg !33

__nv_rsqrtf.exit44:                               ; preds = %167, %169
  %.0.i43 = phi float [ %168, %167 ], [ %170, %169 ], !dbg !33
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i45 = icmp eq i32 %171, 0, !dbg !33
  br i1 %.not.i45, label %174, label %172, !dbg !33

172:                                              ; preds = %__nv_rsqrtf.exit44
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !33
  br label %__nv_rsqrtf.exit47, !dbg !33

174:                                              ; preds = %__nv_rsqrtf.exit44
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !33
  br label %__nv_rsqrtf.exit47, !dbg !33

__nv_rsqrtf.exit47:                               ; preds = %172, %174
  %.0.i46 = phi float [ %173, %172 ], [ %175, %174 ], !dbg !33
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i48 = icmp eq i32 %176, 0, !dbg !33
  br i1 %.not.i48, label %179, label %177, !dbg !33

177:                                              ; preds = %__nv_rsqrtf.exit47
  %178 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !33
  br label %__nv_rsqrtf.exit50, !dbg !33

179:                                              ; preds = %__nv_rsqrtf.exit47
  %180 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !33
  br label %__nv_rsqrtf.exit50, !dbg !33

__nv_rsqrtf.exit50:                               ; preds = %177, %179
  %.0.i49 = phi float [ %178, %177 ], [ %180, %179 ], !dbg !33
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i51 = icmp eq i32 %181, 0, !dbg !33
  br i1 %.not.i51, label %184, label %182, !dbg !33

182:                                              ; preds = %__nv_rsqrtf.exit50
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !33
  br label %__nv_rsqrtf.exit53, !dbg !33

184:                                              ; preds = %__nv_rsqrtf.exit50
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !33
  br label %__nv_rsqrtf.exit53, !dbg !33

__nv_rsqrtf.exit53:                               ; preds = %182, %184
  %.0.i52 = phi float [ %183, %182 ], [ %185, %184 ], !dbg !33
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i54 = icmp eq i32 %186, 0, !dbg !33
  br i1 %.not.i54, label %189, label %187, !dbg !33

187:                                              ; preds = %__nv_rsqrtf.exit53
  %188 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !33
  br label %__nv_rsqrtf.exit56, !dbg !33

189:                                              ; preds = %__nv_rsqrtf.exit53
  %190 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !33
  br label %__nv_rsqrtf.exit56, !dbg !33

__nv_rsqrtf.exit56:                               ; preds = %187, %189
  %.0.i55 = phi float [ %188, %187 ], [ %190, %189 ], !dbg !33
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i57 = icmp eq i32 %191, 0, !dbg !33
  br i1 %.not.i57, label %194, label %192, !dbg !33

192:                                              ; preds = %__nv_rsqrtf.exit56
  %193 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !33
  br label %__nv_rsqrtf.exit59, !dbg !33

194:                                              ; preds = %__nv_rsqrtf.exit56
  %195 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !33
  br label %__nv_rsqrtf.exit59, !dbg !33

__nv_rsqrtf.exit59:                               ; preds = %192, %194
  %.0.i58 = phi float [ %193, %192 ], [ %195, %194 ], !dbg !33
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i60 = icmp eq i32 %196, 0, !dbg !33
  br i1 %.not.i60, label %199, label %197, !dbg !33

197:                                              ; preds = %__nv_rsqrtf.exit59
  %198 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !33
  br label %__nv_rsqrtf.exit62, !dbg !33

199:                                              ; preds = %__nv_rsqrtf.exit59
  %200 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !33
  br label %__nv_rsqrtf.exit62, !dbg !33

__nv_rsqrtf.exit62:                               ; preds = %197, %199
  %.0.i61 = phi float [ %198, %197 ], [ %200, %199 ], !dbg !33
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i63 = icmp eq i32 %201, 0, !dbg !33
  br i1 %.not.i63, label %204, label %202, !dbg !33

202:                                              ; preds = %__nv_rsqrtf.exit62
  %203 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !33
  br label %__nv_rsqrtf.exit65, !dbg !33

204:                                              ; preds = %__nv_rsqrtf.exit62
  %205 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !33
  br label %__nv_rsqrtf.exit65, !dbg !33

__nv_rsqrtf.exit65:                               ; preds = %202, %204
  %.0.i64 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !33
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i66 = icmp eq i32 %206, 0, !dbg !33
  br i1 %.not.i66, label %209, label %207, !dbg !33

207:                                              ; preds = %__nv_rsqrtf.exit65
  %208 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !33
  br label %__nv_rsqrtf.exit68, !dbg !33

209:                                              ; preds = %__nv_rsqrtf.exit65
  %210 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !33
  br label %__nv_rsqrtf.exit68, !dbg !33

__nv_rsqrtf.exit68:                               ; preds = %207, %209
  %.0.i67 = phi float [ %208, %207 ], [ %210, %209 ], !dbg !33
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i69 = icmp eq i32 %211, 0, !dbg !33
  br i1 %.not.i69, label %214, label %212, !dbg !33

212:                                              ; preds = %__nv_rsqrtf.exit68
  %213 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %143), !dbg !33
  br label %__nv_rsqrtf.exit71, !dbg !33

214:                                              ; preds = %__nv_rsqrtf.exit68
  %215 = tail call float @llvm.nvvm.rsqrt.approx.f(float %143), !dbg !33
  br label %__nv_rsqrtf.exit71, !dbg !33

__nv_rsqrtf.exit71:                               ; preds = %212, %214
  %.0.i70 = phi float [ %213, %212 ], [ %215, %214 ], !dbg !33
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i72 = icmp eq i32 %216, 0, !dbg !33
  br i1 %.not.i72, label %219, label %217, !dbg !33

217:                                              ; preds = %__nv_rsqrtf.exit71
  %218 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit74, !dbg !33

219:                                              ; preds = %__nv_rsqrtf.exit71
  %220 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit74, !dbg !33

__nv_rsqrtf.exit74:                               ; preds = %217, %219
  %.0.i73 = phi float [ %218, %217 ], [ %220, %219 ], !dbg !33
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i75 = icmp eq i32 %221, 0, !dbg !33
  br i1 %.not.i75, label %224, label %222, !dbg !33

222:                                              ; preds = %__nv_rsqrtf.exit74
  %223 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !33
  br label %__nv_rsqrtf.exit77, !dbg !33

224:                                              ; preds = %__nv_rsqrtf.exit74
  %225 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !33
  br label %__nv_rsqrtf.exit77, !dbg !33

__nv_rsqrtf.exit77:                               ; preds = %222, %224
  %.0.i76 = phi float [ %223, %222 ], [ %225, %224 ], !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %227 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !28
  %228 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %229 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !28
  %230 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %231 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !28
  %232 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %233 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !28
  %234 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %235 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !28
  %236 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %237 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !28
  %238 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %239 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !28
  %240 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %241 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !28
  %242 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %243 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %244 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %245 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %246 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %247 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %248 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %249 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %250 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %251 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %252 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %253 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %254 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %255 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %256 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %257 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %.lobit12 = lshr i32 %9, 6, !dbg !34
  %258 = and i32 %.lobit12, 3, !dbg !34
  %259 = or disjoint i32 %258, %23, !dbg !17
  %260 = or disjoint i32 %259, 12, !dbg !17
  %261 = icmp slt i32 %260, 128, !dbg !18
  %262 = and i32 %12, 252, !dbg !12
  %263 = or disjoint i32 %8, %262, !dbg !13
  %264 = icmp slt i32 %263, 256, !dbg !14
  %265 = and i1 %264, %261, !dbg !23
  %266 = or disjoint i32 %259, 8, !dbg !17
  %267 = icmp slt i32 %266, 128, !dbg !18
  %268 = and i1 %264, %267, !dbg !23
  %269 = or disjoint i32 %259, 4, !dbg !17
  %270 = icmp slt i32 %269, 128, !dbg !18
  %271 = and i1 %264, %270, !dbg !23
  %272 = icmp slt i32 %259, 128, !dbg !18
  %273 = and i1 %264, %272, !dbg !23
  %.frozen = freeze i32 %263, !dbg !19
  %274 = sdiv i32 %.frozen, 64, !dbg !19
  %275 = mul i32 %274, 64, !dbg !35
  %.decomposed = sub i32 %.frozen, %275, !dbg !35
  %276 = insertelement <16 x i32> poison, i32 %226, i64 0, !dbg !24
  %277 = insertelement <16 x i32> %276, i32 %228, i64 1, !dbg !24
  %278 = insertelement <16 x i32> %277, i32 %230, i64 2, !dbg !24
  %279 = insertelement <16 x i32> %278, i32 %232, i64 3, !dbg !24
  %280 = insertelement <16 x i32> %279, i32 %234, i64 4, !dbg !24
  %281 = insertelement <16 x i32> %280, i32 %236, i64 5, !dbg !24
  %282 = insertelement <16 x i32> %281, i32 %238, i64 6, !dbg !24
  %283 = insertelement <16 x i32> %282, i32 %240, i64 7, !dbg !24
  %284 = insertelement <16 x i32> %283, i32 %242, i64 8, !dbg !24
  %285 = insertelement <16 x i32> %284, i32 %244, i64 9, !dbg !24
  %286 = insertelement <16 x i32> %285, i32 %246, i64 10, !dbg !24
  %287 = insertelement <16 x i32> %286, i32 %248, i64 11, !dbg !24
  %288 = insertelement <16 x i32> %287, i32 %250, i64 12, !dbg !24
  %289 = insertelement <16 x i32> %288, i32 %252, i64 13, !dbg !24
  %290 = insertelement <16 x i32> %289, i32 %254, i64 14, !dbg !24
  %291 = insertelement <16 x i32> %290, i32 %256, i64 15, !dbg !24
  %292 = bitcast <16 x i32> %291 to <16 x float>, !dbg !24
  %293 = insertelement <16 x i32> poison, i32 %227, i64 0, !dbg !28
  %294 = insertelement <16 x i32> %293, i32 %229, i64 1, !dbg !28
  %295 = insertelement <16 x i32> %294, i32 %231, i64 2, !dbg !28
  %296 = insertelement <16 x i32> %295, i32 %233, i64 3, !dbg !28
  %297 = insertelement <16 x i32> %296, i32 %235, i64 4, !dbg !28
  %298 = insertelement <16 x i32> %297, i32 %237, i64 5, !dbg !28
  %299 = insertelement <16 x i32> %298, i32 %239, i64 6, !dbg !28
  %300 = insertelement <16 x i32> %299, i32 %241, i64 7, !dbg !28
  %301 = insertelement <16 x i32> %300, i32 %243, i64 8, !dbg !28
  %302 = insertelement <16 x i32> %301, i32 %245, i64 9, !dbg !28
  %303 = insertelement <16 x i32> %302, i32 %247, i64 10, !dbg !28
  %304 = insertelement <16 x i32> %303, i32 %249, i64 11, !dbg !28
  %305 = insertelement <16 x i32> %304, i32 %251, i64 12, !dbg !28
  %306 = insertelement <16 x i32> %305, i32 %253, i64 13, !dbg !28
  %307 = insertelement <16 x i32> %306, i32 %255, i64 14, !dbg !28
  %308 = insertelement <16 x i32> %307, i32 %257, i64 15, !dbg !28
  %309 = bitcast <16 x i32> %308 to <16 x float>, !dbg !28
  %310 = fsub <16 x float> %292, %309, !dbg !36
  %311 = insertelement <16 x float> poison, float %.0.i76, i64 0, !dbg !37
  %312 = insertelement <16 x float> %311, float %.0.i73, i64 1, !dbg !37
  %313 = insertelement <16 x float> %312, float %.0.i70, i64 2, !dbg !37
  %314 = insertelement <16 x float> %313, float %.0.i67, i64 3, !dbg !37
  %315 = insertelement <16 x float> %314, float %.0.i64, i64 4, !dbg !37
  %316 = insertelement <16 x float> %315, float %.0.i61, i64 5, !dbg !37
  %317 = insertelement <16 x float> %316, float %.0.i58, i64 6, !dbg !37
  %318 = insertelement <16 x float> %317, float %.0.i55, i64 7, !dbg !37
  %319 = insertelement <16 x float> %318, float %.0.i52, i64 8, !dbg !37
  %320 = insertelement <16 x float> %319, float %.0.i49, i64 9, !dbg !37
  %321 = insertelement <16 x float> %320, float %.0.i46, i64 10, !dbg !37
  %322 = insertelement <16 x float> %321, float %.0.i43, i64 11, !dbg !37
  %323 = insertelement <16 x float> %322, float %.0.i40, i64 12, !dbg !37
  %324 = insertelement <16 x float> %323, float %.0.i37, i64 13, !dbg !37
  %325 = insertelement <16 x float> %324, float %.0.i34, i64 14, !dbg !37
  %326 = insertelement <16 x float> %325, float %.0.i, i64 15, !dbg !37
  %327 = fmul <16 x float> %310, %326, !dbg !37
  %328 = fcmp ogt <16 x float> %327, zeroinitializer, !dbg !38
  %329 = extractelement <16 x float> %327, i64 15, !dbg !39
  %330 = fmul float %329, 0x3FB99999A0000000, !dbg !40
  %331 = extractelement <16 x float> %327, i64 14, !dbg !39
  %332 = fmul float %331, 0x3FB99999A0000000, !dbg !40
  %333 = extractelement <16 x float> %327, i64 13, !dbg !39
  %334 = fmul float %333, 0x3FB99999A0000000, !dbg !40
  %335 = extractelement <16 x float> %327, i64 12, !dbg !39
  %336 = fmul float %335, 0x3FB99999A0000000, !dbg !40
  %337 = extractelement <16 x float> %327, i64 11, !dbg !39
  %338 = fmul float %337, 0x3FB99999A0000000, !dbg !40
  %339 = extractelement <16 x float> %327, i64 10, !dbg !39
  %340 = fmul float %339, 0x3FB99999A0000000, !dbg !40
  %341 = extractelement <16 x float> %327, i64 9, !dbg !39
  %342 = fmul float %341, 0x3FB99999A0000000, !dbg !40
  %343 = extractelement <16 x float> %327, i64 8, !dbg !39
  %344 = fmul float %343, 0x3FB99999A0000000, !dbg !40
  %345 = extractelement <16 x float> %327, i64 7, !dbg !39
  %346 = fmul float %345, 0x3FB99999A0000000, !dbg !40
  %347 = extractelement <16 x float> %327, i64 6, !dbg !39
  %348 = fmul float %347, 0x3FB99999A0000000, !dbg !40
  %349 = extractelement <16 x float> %327, i64 5, !dbg !39
  %350 = fmul float %349, 0x3FB99999A0000000, !dbg !40
  %351 = extractelement <16 x float> %327, i64 4, !dbg !39
  %352 = fmul float %351, 0x3FB99999A0000000, !dbg !40
  %353 = extractelement <16 x float> %327, i64 3, !dbg !39
  %354 = fmul float %353, 0x3FB99999A0000000, !dbg !40
  %355 = extractelement <16 x float> %327, i64 2, !dbg !39
  %356 = fmul float %355, 0x3FB99999A0000000, !dbg !40
  %357 = extractelement <16 x float> %327, i64 1, !dbg !39
  %358 = fmul float %357, 0x3FB99999A0000000, !dbg !40
  %359 = extractelement <16 x float> %327, i64 0, !dbg !39
  %360 = fmul float %359, 0x3FB99999A0000000, !dbg !40
  %361 = extractelement <16 x i1> %328, i64 15, !dbg !39
  %362 = select i1 %361, float %329, float %330, !dbg !39
  %363 = extractelement <16 x i1> %328, i64 14, !dbg !39
  %364 = select i1 %363, float %331, float %332, !dbg !39
  %365 = extractelement <16 x i1> %328, i64 13, !dbg !39
  %366 = select i1 %365, float %333, float %334, !dbg !39
  %367 = extractelement <16 x i1> %328, i64 12, !dbg !39
  %368 = select i1 %367, float %335, float %336, !dbg !39
  %369 = extractelement <16 x i1> %328, i64 11, !dbg !39
  %370 = select i1 %369, float %337, float %338, !dbg !39
  %371 = extractelement <16 x i1> %328, i64 10, !dbg !39
  %372 = select i1 %371, float %339, float %340, !dbg !39
  %373 = extractelement <16 x i1> %328, i64 9, !dbg !39
  %374 = select i1 %373, float %341, float %342, !dbg !39
  %375 = extractelement <16 x i1> %328, i64 8, !dbg !39
  %376 = select i1 %375, float %343, float %344, !dbg !39
  %377 = extractelement <16 x i1> %328, i64 7, !dbg !39
  %378 = select i1 %377, float %345, float %346, !dbg !39
  %379 = extractelement <16 x i1> %328, i64 6, !dbg !39
  %380 = select i1 %379, float %347, float %348, !dbg !39
  %381 = extractelement <16 x i1> %328, i64 5, !dbg !39
  %382 = select i1 %381, float %349, float %350, !dbg !39
  %383 = extractelement <16 x i1> %328, i64 4, !dbg !39
  %384 = select i1 %383, float %351, float %352, !dbg !39
  %385 = extractelement <16 x i1> %328, i64 3, !dbg !39
  %386 = select i1 %385, float %353, float %354, !dbg !39
  %387 = extractelement <16 x i1> %328, i64 2, !dbg !39
  %388 = select i1 %387, float %355, float %356, !dbg !39
  %389 = extractelement <16 x i1> %328, i64 1, !dbg !39
  %390 = select i1 %389, float %357, float %358, !dbg !39
  %391 = extractelement <16 x i1> %328, i64 0, !dbg !39
  %392 = select i1 %391, float %359, float %360, !dbg !39
  %393 = shl i32 %259, 6, !dbg !41
  %394 = shl i32 %269, 6, !dbg !41
  %395 = shl i32 %266, 6, !dbg !41
  %396 = shl i32 %260, 6, !dbg !41
  %397 = shl i32 %274, 13, !dbg !42
  %398 = add i32 %397, %.decomposed, !dbg !43
  %399 = add i32 %398, %393, !dbg !44
  %400 = add i32 %398, %394, !dbg !44
  %401 = add i32 %398, %395, !dbg !44
  %402 = add i32 %398, %396, !dbg !44
  %403 = sext i32 %399 to i64, !dbg !45
  %404 = getelementptr float, ptr addrspace(1) %3, i64 %403, !dbg !45
  %405 = sext i32 %400 to i64, !dbg !45
  %406 = getelementptr float, ptr addrspace(1) %3, i64 %405, !dbg !45
  %407 = sext i32 %401 to i64, !dbg !45
  %408 = getelementptr float, ptr addrspace(1) %3, i64 %407, !dbg !45
  %409 = sext i32 %402 to i64, !dbg !45
  %410 = getelementptr float, ptr addrspace(1) %3, i64 %409, !dbg !45
  %411 = shl i32 %9, 10, !dbg !46
  %412 = and i32 %411, 3072, !dbg !46
  %413 = or disjoint i32 %412, %11, !dbg !46
  %414 = and i32 %12, 1020, !dbg !46
  %415 = lshr exact i32 %412, 4, !dbg !46
  %416 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %415, !dbg !46
  %417 = getelementptr float, ptr addrspace(3) %416, i32 %413, !dbg !46
  %418 = bitcast float %362 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 true) #4, !dbg !46
  %419 = or disjoint i32 %413, 256, !dbg !46
  %420 = lshr i32 %419, 6, !dbg !46
  %421 = getelementptr float, ptr addrspace(3) @global_smem, i32 %420, !dbg !46
  %422 = getelementptr float, ptr addrspace(3) %421, i32 %419, !dbg !46
  %423 = bitcast float %364 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !46
  %424 = or disjoint i32 %413, 512, !dbg !46
  %425 = lshr i32 %424, 6, !dbg !46
  %426 = getelementptr float, ptr addrspace(3) @global_smem, i32 %425, !dbg !46
  %427 = getelementptr float, ptr addrspace(3) %426, i32 %424, !dbg !46
  %428 = bitcast float %366 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %428, i1 true) #4, !dbg !46
  %429 = or disjoint i32 %413, 768, !dbg !46
  %430 = lshr i32 %429, 6, !dbg !46
  %431 = getelementptr float, ptr addrspace(3) @global_smem, i32 %430, !dbg !46
  %432 = getelementptr float, ptr addrspace(3) %431, i32 %429, !dbg !46
  %433 = bitcast float %368 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #4, !dbg !46
  %434 = or disjoint i32 %413, 64, !dbg !46
  %435 = getelementptr float, ptr addrspace(3) %416, i32 %434, !dbg !46
  %436 = bitcast float %370 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #4, !dbg !46
  %437 = or disjoint i32 %413, 320, !dbg !46
  %438 = lshr i32 %437, 6, !dbg !46
  %439 = and i32 %438, 52, !dbg !46
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %439, !dbg !46
  %441 = getelementptr float, ptr addrspace(3) %440, i32 %437, !dbg !46
  %442 = bitcast float %372 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #4, !dbg !46
  %443 = or disjoint i32 %413, 576, !dbg !46
  %444 = lshr i32 %443, 6, !dbg !46
  %445 = and i32 %444, 56, !dbg !46
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %445, !dbg !46
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %443, !dbg !46
  %448 = bitcast float %374 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #4, !dbg !46
  %449 = or disjoint i32 %413, 832, !dbg !46
  %450 = lshr i32 %449, 6, !dbg !46
  %451 = and i32 %450, 60, !dbg !46
  %452 = getelementptr float, ptr addrspace(3) @global_smem, i32 %451, !dbg !46
  %453 = getelementptr float, ptr addrspace(3) %452, i32 %449, !dbg !46
  %454 = bitcast float %376 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %454, i1 true) #4, !dbg !46
  %455 = or disjoint i32 %413, 128, !dbg !46
  %456 = getelementptr float, ptr addrspace(3) %416, i32 %455, !dbg !46
  %457 = bitcast float %378 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %457, i1 true) #4, !dbg !46
  %458 = or disjoint i32 %413, 384, !dbg !46
  %459 = lshr i32 %458, 6, !dbg !46
  %460 = and i32 %459, 52, !dbg !46
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !46
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %458, !dbg !46
  %463 = bitcast float %380 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %463, i1 true) #4, !dbg !46
  %464 = or disjoint i32 %413, 640, !dbg !46
  %465 = lshr i32 %464, 6, !dbg !46
  %466 = and i32 %465, 56, !dbg !46
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %466, !dbg !46
  %468 = getelementptr float, ptr addrspace(3) %467, i32 %464, !dbg !46
  %469 = bitcast float %382 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %469, i1 true) #4, !dbg !46
  %470 = or disjoint i32 %413, 896, !dbg !46
  %471 = lshr i32 %470, 6, !dbg !46
  %472 = and i32 %471, 60, !dbg !46
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i32 %472, !dbg !46
  %474 = getelementptr float, ptr addrspace(3) %473, i32 %470, !dbg !46
  %475 = bitcast float %384 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %475, i1 true) #4, !dbg !46
  %476 = or disjoint i32 %413, 192, !dbg !46
  %477 = getelementptr float, ptr addrspace(3) %416, i32 %476, !dbg !46
  %478 = bitcast float %386 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !46
  %479 = or disjoint i32 %413, 448, !dbg !46
  %480 = lshr i32 %479, 6, !dbg !46
  %481 = and i32 %480, 52, !dbg !46
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481, !dbg !46
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %479, !dbg !46
  %484 = bitcast float %388 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %484, i1 true) #4, !dbg !46
  %485 = or disjoint i32 %413, 704, !dbg !46
  %486 = lshr i32 %485, 6, !dbg !46
  %487 = and i32 %486, 56, !dbg !46
  %488 = getelementptr float, ptr addrspace(3) @global_smem, i32 %487, !dbg !46
  %489 = getelementptr float, ptr addrspace(3) %488, i32 %485, !dbg !46
  %490 = bitcast float %390 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %489, <1 x i32> %490, i1 true) #4, !dbg !46
  %491 = or disjoint i32 %413, 960, !dbg !46
  %492 = lshr i32 %491, 6, !dbg !46
  %493 = and i32 %492, 60, !dbg !46
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493, !dbg !46
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %491, !dbg !46
  %496 = bitcast float %392 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %496, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %497 = lshr i32 %12, 6, !dbg !46
  %498 = and i32 %497, 12, !dbg !46
  %499 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %498, !dbg !46
  %500 = getelementptr inbounds float, ptr addrspace(3) %499, i32 %414, !dbg !46
  %501 = or disjoint i32 %414, 1024, !dbg !46
  %502 = lshr i32 %501, 6, !dbg !46
  %503 = and i32 %502, 28, !dbg !46
  %504 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %503, !dbg !46
  %505 = getelementptr inbounds float, ptr addrspace(3) %504, i32 %501, !dbg !46
  %506 = load <4 x i32>, ptr addrspace(3) %505, align 16, !dbg !46
  %507 = or disjoint i32 %414, 2048, !dbg !46
  %508 = lshr i32 %507, 6, !dbg !46
  %509 = and i32 %508, 44, !dbg !46
  %510 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %509, !dbg !46
  %511 = getelementptr inbounds float, ptr addrspace(3) %510, i32 %507, !dbg !46
  %512 = load <4 x i32>, ptr addrspace(3) %511, align 16, !dbg !46
  %513 = or disjoint i32 %414, 3072, !dbg !46
  %514 = lshr i32 %513, 6, !dbg !46
  %515 = and i32 %514, 60, !dbg !46
  %516 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %515, !dbg !46
  %517 = getelementptr inbounds float, ptr addrspace(3) %516, i32 %513, !dbg !46
  %518 = load <4 x i32>, ptr addrspace(3) %517, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %500, align 16, !dbg !46
  %519 = getelementptr inbounds i8, ptr addrspace(3) %500, i32 4, !dbg !46
  %.extract18 = load i32, ptr addrspace(3) %519, align 4, !dbg !46
  %520 = getelementptr inbounds i8, ptr addrspace(3) %500, i32 8, !dbg !46
  %.extract19 = load i32, ptr addrspace(3) %520, align 8, !dbg !46
  %521 = getelementptr inbounds i8, ptr addrspace(3) %500, i32 12, !dbg !46
  %.extract20 = load i32, ptr addrspace(3) %521, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %404, i1 %273) #4, !dbg !46
  %.extract21 = extractelement <4 x i32> %506, i64 0, !dbg !46
  %.extract22 = extractelement <4 x i32> %506, i64 1, !dbg !46
  %.extract23 = extractelement <4 x i32> %506, i64 2, !dbg !46
  %.extract24 = extractelement <4 x i32> %506, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %406, i1 %271) #4, !dbg !46
  %.extract25 = extractelement <4 x i32> %512, i64 0, !dbg !46
  %.extract26 = extractelement <4 x i32> %512, i64 1, !dbg !46
  %.extract27 = extractelement <4 x i32> %512, i64 2, !dbg !46
  %.extract28 = extractelement <4 x i32> %512, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %408, i1 %268) #4, !dbg !46
  %.extract29 = extractelement <4 x i32> %518, i64 0, !dbg !46
  %.extract30 = extractelement <4 x i32> %518, i64 1, !dbg !46
  %.extract31 = extractelement <4 x i32> %518, i64 2, !dbg !46
  %.extract32 = extractelement <4 x i32> %518, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %410, i1 %265) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqrxbn4xxha4twhnxcpiypq3pnhagv3odimmpfdk5txco6gqif5b.py", directory: "inductor_cache/qr")
!4 = !{ptr @triton_poi_fused_leaky_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_16", linkageName: "triton_poi_fused_leaky_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !DILocation(line: 26, column: 44, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 34, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 33, scope: !7)
!42 = !DILocation(line: 47, column: 43, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !7)
!44 = !DILocation(line: 47, column: 38, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 55, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
