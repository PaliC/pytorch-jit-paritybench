#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<1024xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<-128> : tensor<1024xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %4, %cst_0 : tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_0 : tensor<1024xi32, #blocked> loc(#loc7)
    %7 = arith.extsi %5 : tensor<1024xi32, #blocked> to tensor<1024xi64, #blocked> loc(#loc8)
    %8 = arith.cmpi slt, %7, %cst_1 : tensor<1024xi64, #blocked> loc(#loc8)
    %9 = arith.muli %6, %cst_2 : tensor<1024xi32, #blocked> loc(#loc9)
    %10 = arith.addi %9, %5 : tensor<1024xi32, #blocked> loc(#loc10)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %10 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc11)
    %13 = tt.load %12, %8, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    %15 = tt.addptr %14, %5 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc13)
    %16 = tt.load %15, %8, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17 = arith.addf %13, %16 : tensor<1024xf32, #blocked> loc(#loc15)
    %18 = arith.cmpf ogt, %cst, %17 : tensor<1024xf32, #blocked> loc(#loc34)
    %19 = arith.select %18, %cst, %17 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc35)
    %20 = arith.cmpi sge, %7, %cst_1 : tensor<1024xi64, #blocked> loc(#loc19)
    %21 = arith.addi %5, %cst_3 : tensor<1024xi32, #blocked> loc(#loc20)
    %22 = arith.addi %9, %21 : tensor<1024xi32, #blocked> loc(#loc21)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = tt.addptr %23, %22 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc22)
    %25 = tt.load %24, %20, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc23)
    %26 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc24)
    %27 = tt.addptr %26, %21 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc24)
    %28 = tt.load %27, %20, %cst evictionPolicy = evict_last : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc25)
    %29 = arith.addf %25, %28 : tensor<1024xf32, #blocked> loc(#loc26)
    %30 = arith.cmpf ogt, %cst, %29 : tensor<1024xf32, #blocked> loc(#loc36)
    %31 = arith.select %30, %cst, %29 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc37)
    %32 = arith.select %20, %31, %cst : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc28)
    %33 = arith.select %8, %19, %32 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc38)
    %34 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc31)
    %35 = tt.addptr %34, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc31)
    tt.store %35, %33 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc32)
    tt.return loc(#loc33)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":21:28)
#loc3 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":21:33)
#loc4 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":22:36)
#loc5 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":22:23)
#loc6 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":24:19)
#loc7 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":25:19)
#loc8 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":31:18)
#loc9 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":32:34)
#loc10 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":32:40)
#loc11 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":32:30)
#loc12 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":32:46)
#loc13 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":33:30)
#loc14 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":33:35)
#loc15 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":34:18)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc17 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":36:40)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc19 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":39:20)
#loc20 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":42:50)
#loc21 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":42:41)
#loc22 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":42:31)
#loc23 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":42:56)
#loc24 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":43:31)
#loc25 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":43:45)
#loc26 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":44:20)
#loc27 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":46:42)
#loc28 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":48:35)
#loc29 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":49:34)
#loc30 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":38:33)
#loc31 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":50:25)
#loc32 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":50:37)
#loc33 = loc("inductor_cache/tw/ctwt66ss2b3xeh22qff7ecsqr67x5itiwsucwhutd6uvwnmuby3q.py":50:4)
#loc34 = loc(callsite(#loc16 at #loc17))
#loc35 = loc(callsite(#loc18 at #loc17))
#loc36 = loc(callsite(#loc16 at #loc27))
#loc37 = loc(callsite(#loc18 at #loc27))
#loc38 = loc(fused[#loc29, #loc30])
