; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %12 = sdiv i32 %.frozen, 256, !dbg !14
  %13 = mul i32 %12, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = icmp slt i32 %.decomposed, 128, !dbg !16
  %15 = shl nsw i32 %12, 7, !dbg !17
  %16 = add nsw i32 %15, %.decomposed, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #1, !dbg !20
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !20
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !20
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !20
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !20
  %24 = bitcast i32 %20 to float, !dbg !20
  %25 = bitcast i32 %21 to float, !dbg !20
  %26 = bitcast i32 %22 to float, !dbg !20
  %27 = bitcast i32 %23 to float, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #1, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = fsub float 0.000000e+00, %34, !dbg !23
  %39 = fsub float 0.000000e+00, %35, !dbg !23
  %40 = fsub float 0.000000e+00, %36, !dbg !23
  %41 = fsub float 0.000000e+00, %37, !dbg !23
  %42 = fmul float %38, 0x3FF7154760000000, !dbg !27
  %43 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %42) #1, !dbg !27
  %44 = fmul float %39, 0x3FF7154760000000, !dbg !27
  %45 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %44) #1, !dbg !27
  %46 = fmul float %40, 0x3FF7154760000000, !dbg !27
  %47 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %46) #1, !dbg !27
  %48 = fmul float %41, 0x3FF7154760000000, !dbg !27
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #1, !dbg !27
  %50 = fadd float %43, 1.000000e+00, !dbg !28
  %51 = fadd float %45, 1.000000e+00, !dbg !28
  %52 = fadd float %47, 1.000000e+00, !dbg !28
  %53 = fadd float %49, 1.000000e+00, !dbg !28
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %50) #1, !dbg !29
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %51) #1, !dbg !29
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %52) #1, !dbg !29
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %53) #1, !dbg !29
  %58 = fmul float %54, %34, !dbg !30
  %59 = fmul float %55, %35, !dbg !30
  %60 = fmul float %56, %36, !dbg !30
  %61 = fmul float %57, %37, !dbg !30
  %62 = fadd float %58, %24, !dbg !31
  %63 = fadd float %59, %25, !dbg !31
  %64 = fadd float %60, %26, !dbg !31
  %65 = fadd float %61, %27, !dbg !31
  %66 = icmp sgt i32 %.decomposed, 127, !dbg !32
  %67 = sext i32 %16 to i64, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !33
  %69 = getelementptr i8, ptr addrspace(1) %68, i64 -512, !dbg !33
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !34
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %75 = bitcast i32 %71 to float, !dbg !34
  %76 = bitcast i32 %72 to float, !dbg !34
  %77 = bitcast i32 %73 to float, !dbg !34
  %78 = bitcast i32 %74 to float, !dbg !34
  %79 = fsub float 0.000000e+00, %75, !dbg !35
  %80 = fsub float 0.000000e+00, %76, !dbg !35
  %81 = fsub float 0.000000e+00, %77, !dbg !35
  %82 = fsub float 0.000000e+00, %78, !dbg !35
  %83 = fmul float %79, 0x3FF7154760000000, !dbg !37
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !37
  %85 = fmul float %80, 0x3FF7154760000000, !dbg !37
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !37
  %87 = fmul float %81, 0x3FF7154760000000, !dbg !37
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #1, !dbg !37
  %89 = fmul float %82, 0x3FF7154760000000, !dbg !37
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !37
  %91 = fadd float %84, 1.000000e+00, !dbg !38
  %92 = fadd float %86, 1.000000e+00, !dbg !38
  %93 = fadd float %88, 1.000000e+00, !dbg !38
  %94 = fadd float %90, 1.000000e+00, !dbg !38
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !39
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !39
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !39
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !39
  %99 = fmul float %95, %75, !dbg !40
  %100 = fmul float %96, %76, !dbg !40
  %101 = fmul float %97, %77, !dbg !40
  %102 = fmul float %98, %78, !dbg !40
  %103 = select i1 %14, float %62, float %99, !dbg !41
  %104 = select i1 %14, float %63, float %100, !dbg !41
  %105 = select i1 %14, float %64, float %101, !dbg !41
  %106 = select i1 %14, float %65, float %102, !dbg !41
  %107 = sext i32 %11 to i64, !dbg !42
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !42
  %109 = bitcast float %103 to i32, !dbg !43
  %110 = bitcast float %104 to i32, !dbg !43
  %111 = bitcast float %105 to i32, !dbg !43
  %112 = bitcast float %106 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %109, i32 %110, i32 %111, i32 %112, ptr addrspace(1) %108, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chii4hjoygf7e4j626bj5t6cdfxxefkuqftvz3knxjeuineho6vp.py", directory: "inductor_cache/hi")
!4 = !{ptr @triton_poi_fused_cat_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_23", linkageName: "triton_poi_fused_cat_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 34, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 56, scope: !7)
!35 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !36)
!36 = !DILocation(line: 43, column: 23, scope: !7)
!37 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !36)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 48, column: 25, scope: !7)
!43 = !DILocation(line: 48, column: 37, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
