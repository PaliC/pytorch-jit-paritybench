; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_gelu_linalg_vector_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 64, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.frozen = freeze i32 %5, !dbg !13
  %8 = sdiv i32 %.frozen, 16, !dbg !13
  %9 = mul i32 %8, 16, !dbg !14
  %.decomposed = sub i32 %.frozen, %9, !dbg !14
  %10 = shl i32 %7, 4, !dbg !15
  %11 = and i32 %10, 240, !dbg !15
  %12 = add nsw i32 %.decomposed, %11, !dbg !16
  %13 = shl i32 %8, 8, !dbg !17
  %14 = add i32 %12, %13, !dbg !18
  %15 = sext i32 %14 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !19
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %6, i32 0, i1 %6) #5, !dbg !20
  %18 = bitcast i32 %17 to float, !dbg !20
  %19 = fmul float %18, 5.000000e-01, !dbg !21
  %20 = fmul float %18, 0x3FE6A09E60000000, !dbg !22
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not.i1 = icmp eq i32 %21, 0, !dbg !23
  %22 = tail call float @llvm.nvvm.fabs.ftz.f(float %20) #5, !dbg !23
  %23 = tail call float @llvm.nvvm.fabs.f(float %20) #5, !dbg !23
  %.0.i2 = select i1 %.not.i1, float %23, float %22, !dbg !23
  %24 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !23
  br i1 %24, label %__nv_fabsf.exit1.i, label %26, !dbg !23

__nv_fabsf.exit1.i:                               ; preds = %4
  %25 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not1.i4 = icmp eq i32 %25, 0, !dbg !23
  %.01.i = select i1 %.not1.i4, float %23, float %22, !dbg !23
  br label %__internal_fmad.exit.i, !dbg !23

26:                                               ; preds = %4
  %27 = fmul float %20, %20, !dbg !23
  br label %__internal_fmad.exit.i, !dbg !23

__internal_fmad.exit.i:                           ; preds = %26, %__nv_fabsf.exit1.i
  %28 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %26 ], !dbg !23
  %29 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %26 ], !dbg !23
  %30 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %26 ], !dbg !23
  %31 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %26 ], !dbg !23
  %32 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %26 ], !dbg !23
  %33 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %26 ], !dbg !23
  %34 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %26 ], !dbg !23
  %35 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %27, %26 ], !dbg !23
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not2.i3 = icmp eq i32 %36, 0, !dbg !23
  %37 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %34, float %35, float %33) #5, !dbg !23
  %38 = tail call float @llvm.nvvm.fma.rn.f(float %34, float %35, float %33) #5, !dbg !23
  %.02.i = select i1 %.not2.i3, float %38, float %37, !dbg !23
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not3.i = icmp eq i32 %39, 0, !dbg !23
  %40 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %35, float %32) #5, !dbg !23
  %41 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %35, float %32) #5, !dbg !23
  %.03.i = select i1 %.not3.i, float %41, float %40, !dbg !23
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not4.i = icmp eq i32 %42, 0, !dbg !23
  %43 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %35, float %31) #5, !dbg !23
  %44 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %35, float %31) #5, !dbg !23
  %.04.i = select i1 %.not4.i, float %44, float %43, !dbg !23
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not5.i = icmp eq i32 %45, 0, !dbg !23
  %46 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %35, float %30) #5, !dbg !23
  %47 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %35, float %30) #5, !dbg !23
  %.05.i = select i1 %.not5.i, float %47, float %46, !dbg !23
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not6.i = icmp eq i32 %48, 0, !dbg !23
  %49 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %35, float %29) #5, !dbg !23
  %50 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %35, float %29) #5, !dbg !23
  %.06.i = select i1 %.not6.i, float %50, float %49, !dbg !23
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not7.i = icmp eq i32 %51, 0, !dbg !23
  %52 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %35, float %28) #5, !dbg !23
  %53 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %35, float %28) #5, !dbg !23
  %.07.i = select i1 %.not7.i, float %53, float %52, !dbg !23
  %54 = fneg float %35, !dbg !23
  %55 = select i1 %24, float %54, float %20, !dbg !23
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not8.i = icmp eq i32 %56, 0, !dbg !23
  %57 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %55, float %55) #5, !dbg !23
  %58 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %55, float %55) #5, !dbg !23
  %.08.i = select i1 %.not8.i, float %58, float %57, !dbg !23
  br i1 %24, label %59, label %__nv_erff.exit, !dbg !23

59:                                               ; preds = %__internal_fmad.exit.i
  %60 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #5, !dbg !23
  %61 = fsub float 1.000000e+00, %60, !dbg !23
  %62 = bitcast float %61 to i32, !dbg !23
  %63 = bitcast float %20 to i32, !dbg !23
  %64 = and i32 %63, -2147483648, !dbg !23
  %65 = or i32 %64, %62, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  br label %__nv_erff.exit, !dbg !23

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %59
  %r.0.i = phi float [ %66, %59 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !23
  %67 = fadd float %r.0.i, 1.000000e+00, !dbg !24
  %68 = fmul float %19, %67, !dbg !25
  %69 = fmul float %68, %68, !dbg !26
  %70 = select i1 %6, float %69, float 0.000000e+00, !dbg !27
  %71 = bitcast float %70 to i32, !dbg !28
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = fadd float %70, %73, !dbg !32
  %75 = bitcast float %74 to i32, !dbg !28
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fadd float %74, %77, !dbg !32
  %79 = bitcast float %78 to i32, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %78, %81, !dbg !32
  %83 = bitcast float %82 to i32, !dbg !28
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = fadd float %82, %85, !dbg !32
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i = icmp eq i32 %87, 0, !dbg !34
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !34
  %.not1.i = icmp eq i32 %88, 0, !dbg !34
  br i1 %.not.i, label %94, label %89, !dbg !34

89:                                               ; preds = %__nv_erff.exit
  br i1 %.not1.i, label %92, label %90, !dbg !34

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #5, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #5, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

94:                                               ; preds = %__nv_erff.exit
  br i1 %.not1.i, label %97, label %95, !dbg !34

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #5, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #5, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %99 = sext i32 %5 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !36
  %101 = and i32 %7, 63, !dbg !37
  %102 = icmp eq i32 %101, 0, !dbg !37
  %103 = bitcast float %.0.i to i32, !dbg !37
  %104 = and i1 %102, %6, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %100, i1 %104) #5, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmk7rwlkwy2ukinbkuo76hxzppq4vh7hi3zrg5hv2wo5ozgal4eu.py", directory: "inductor_cache/mk")
!4 = !{ptr @triton_per_fused_gelu_linalg_vector_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_gelu_linalg_vector_norm_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_gelu_linalg_vector_norm_2", linkageName: "triton_per_fused_gelu_linalg_vector_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 38, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 25, scope: !7)
!24 = !DILocation(line: 40, column: 18, scope: !7)
!25 = !DILocation(line: 41, column: 18, scope: !7)
!26 = !DILocation(line: 42, column: 18, scope: !7)
!27 = !DILocation(line: 44, column: 35, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 45, column: 26, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 46, column: 27, scope: !7)
!35 = !DILocation(line: 47, column: 4, scope: !7)
!36 = !DILocation(line: 48, column: 28, scope: !7)
!37 = !DILocation(line: 48, column: 40, scope: !7)
!38 = !DILocation(line: 48, column: 4, scope: !7)
