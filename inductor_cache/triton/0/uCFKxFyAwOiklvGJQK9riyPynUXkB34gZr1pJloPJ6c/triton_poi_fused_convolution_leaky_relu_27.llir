; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 6, !dbg !16
  %20 = shl i32 %9, 4, !dbg !17
  %21 = and i32 %20, 48, !dbg !17
  %22 = lshr i32 %9, 4, !dbg !17
  %23 = and i32 %22, 15, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %24, 4, !dbg !18
  %26 = or disjoint i32 %24, 8, !dbg !18
  %27 = or disjoint i32 %24, 12, !dbg !18
  %28 = or disjoint i32 %19, %23, !dbg !18
  %29 = or disjoint i32 %28, 16, !dbg !18
  %30 = or disjoint i32 %28, 32, !dbg !18
  %31 = or disjoint i32 %28, 48, !dbg !18
  %32 = icmp slt i32 %24, 512, !dbg !19
  %33 = icmp slt i32 %28, 512, !dbg !19
  %34 = icmp slt i32 %29, 512, !dbg !19
  %35 = icmp slt i32 %30, 512, !dbg !19
  %36 = icmp slt i32 %31, 512, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %37 = sdiv i32 %.frozen, 64, !dbg !20
  %38 = mul i32 %37, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %38, !dbg !21
  %39 = shl i32 %14, 9, !dbg !22
  %40 = add i32 %24, %39, !dbg !23
  %41 = add i32 %39, %25, !dbg !23
  %42 = add i32 %39, %26, !dbg !23
  %43 = add i32 %39, %27, !dbg !23
  %44 = sext i32 %40 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %41 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %42 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %43 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = and i1 %16, %32, !dbg !25
  %53 = and i1 %17, %33, !dbg !25
  %54 = and i1 %34, %17, !dbg !25
  %55 = and i1 %35, %17, !dbg !25
  %56 = and i1 %36, %17, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %52) #2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %52) #2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %52) #2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %77 = sext i32 %24 to i64, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !27
  %79 = sext i32 %25 to i64, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !27
  %81 = sext i32 %26 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !27
  %83 = sext i32 %27 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !27
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %32) #2, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !28
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %32) #2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %32) #2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !28
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %32) #2, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !28
  %105 = getelementptr i1, ptr addrspace(1) %2, i64 %44, !dbg !29
  %106 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !26
  %107 = insertelement <4 x i32> %106, i32 %59, i64 1, !dbg !26
  %108 = insertelement <4 x i32> %107, i32 %60, i64 2, !dbg !26
  %109 = insertelement <4 x i32> %108, i32 %61, i64 3, !dbg !26
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !26
  %111 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !28
  %112 = insertelement <4 x i32> %111, i32 %87, i64 1, !dbg !28
  %113 = insertelement <4 x i32> %112, i32 %88, i64 2, !dbg !28
  %114 = insertelement <4 x i32> %113, i32 %89, i64 3, !dbg !28
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !28
  %116 = fadd <4 x float> %110, %115, !dbg !30
  %117 = fcmp ogt <4 x float> %116, zeroinitializer, !dbg !31
  %118 = extractelement <4 x float> %116, i64 0, !dbg !32
  %119 = fmul float %118, 0x3FC99999A0000000, !dbg !33
  %120 = extractelement <4 x float> %116, i64 1, !dbg !32
  %121 = fmul float %120, 0x3FC99999A0000000, !dbg !33
  %122 = extractelement <4 x float> %116, i64 2, !dbg !32
  %123 = fmul float %122, 0x3FC99999A0000000, !dbg !33
  %124 = extractelement <4 x float> %116, i64 3, !dbg !32
  %125 = fmul float %124, 0x3FC99999A0000000, !dbg !33
  %126 = extractelement <4 x i1> %117, i64 0, !dbg !32
  %127 = select i1 %126, float %118, float %119, !dbg !32
  %128 = extractelement <4 x i1> %117, i64 1, !dbg !32
  %129 = select i1 %128, float %120, float %121, !dbg !32
  %130 = extractelement <4 x i1> %117, i64 2, !dbg !32
  %131 = select i1 %130, float %122, float %123, !dbg !32
  %132 = extractelement <4 x i1> %117, i64 3, !dbg !32
  %133 = select i1 %132, float %124, float %125, !dbg !32
  %134 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !26
  %135 = insertelement <4 x i32> %134, i32 %64, i64 1, !dbg !26
  %136 = insertelement <4 x i32> %135, i32 %65, i64 2, !dbg !26
  %137 = insertelement <4 x i32> %136, i32 %66, i64 3, !dbg !26
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !26
  %139 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !28
  %140 = insertelement <4 x i32> %139, i32 %92, i64 1, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %93, i64 2, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %94, i64 3, !dbg !28
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !28
  %144 = fadd <4 x float> %138, %143, !dbg !30
  %145 = fcmp ogt <4 x float> %144, zeroinitializer, !dbg !31
  %146 = extractelement <4 x float> %144, i64 0, !dbg !32
  %147 = fmul float %146, 0x3FC99999A0000000, !dbg !33
  %148 = extractelement <4 x float> %144, i64 1, !dbg !32
  %149 = fmul float %148, 0x3FC99999A0000000, !dbg !33
  %150 = extractelement <4 x float> %144, i64 2, !dbg !32
  %151 = fmul float %150, 0x3FC99999A0000000, !dbg !33
  %152 = extractelement <4 x float> %144, i64 3, !dbg !32
  %153 = fmul float %152, 0x3FC99999A0000000, !dbg !33
  %154 = extractelement <4 x i1> %145, i64 0, !dbg !32
  %155 = select i1 %154, float %146, float %147, !dbg !32
  %156 = extractelement <4 x i1> %145, i64 1, !dbg !32
  %157 = select i1 %156, float %148, float %149, !dbg !32
  %158 = extractelement <4 x i1> %145, i64 2, !dbg !32
  %159 = select i1 %158, float %150, float %151, !dbg !32
  %160 = extractelement <4 x i1> %145, i64 3, !dbg !32
  %161 = select i1 %160, float %152, float %153, !dbg !32
  %162 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !26
  %163 = insertelement <4 x i32> %162, i32 %69, i64 1, !dbg !26
  %164 = insertelement <4 x i32> %163, i32 %70, i64 2, !dbg !26
  %165 = insertelement <4 x i32> %164, i32 %71, i64 3, !dbg !26
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !26
  %167 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !28
  %168 = insertelement <4 x i32> %167, i32 %97, i64 1, !dbg !28
  %169 = insertelement <4 x i32> %168, i32 %98, i64 2, !dbg !28
  %170 = insertelement <4 x i32> %169, i32 %99, i64 3, !dbg !28
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !28
  %172 = fadd <4 x float> %166, %171, !dbg !30
  %173 = fcmp ogt <4 x float> %172, zeroinitializer, !dbg !31
  %174 = extractelement <4 x float> %172, i64 0, !dbg !32
  %175 = fmul float %174, 0x3FC99999A0000000, !dbg !33
  %176 = extractelement <4 x float> %172, i64 1, !dbg !32
  %177 = fmul float %176, 0x3FC99999A0000000, !dbg !33
  %178 = extractelement <4 x float> %172, i64 2, !dbg !32
  %179 = fmul float %178, 0x3FC99999A0000000, !dbg !33
  %180 = extractelement <4 x float> %172, i64 3, !dbg !32
  %181 = fmul float %180, 0x3FC99999A0000000, !dbg !33
  %182 = extractelement <4 x i1> %173, i64 0, !dbg !32
  %183 = select i1 %182, float %174, float %175, !dbg !32
  %184 = extractelement <4 x i1> %173, i64 1, !dbg !32
  %185 = select i1 %184, float %176, float %177, !dbg !32
  %186 = extractelement <4 x i1> %173, i64 2, !dbg !32
  %187 = select i1 %186, float %178, float %179, !dbg !32
  %188 = extractelement <4 x i1> %173, i64 3, !dbg !32
  %189 = select i1 %188, float %180, float %181, !dbg !32
  %190 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !26
  %191 = insertelement <4 x i32> %190, i32 %74, i64 1, !dbg !26
  %192 = insertelement <4 x i32> %191, i32 %75, i64 2, !dbg !26
  %193 = insertelement <4 x i32> %192, i32 %76, i64 3, !dbg !26
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !26
  %195 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !28
  %196 = insertelement <4 x i32> %195, i32 %102, i64 1, !dbg !28
  %197 = insertelement <4 x i32> %196, i32 %103, i64 2, !dbg !28
  %198 = insertelement <4 x i32> %197, i32 %104, i64 3, !dbg !28
  %199 = bitcast <4 x i32> %198 to <4 x float>, !dbg !28
  %200 = fadd <4 x float> %194, %199, !dbg !30
  %201 = fcmp ogt <4 x float> %200, zeroinitializer, !dbg !31
  %202 = extractelement <4 x float> %200, i64 0, !dbg !32
  %203 = fmul float %202, 0x3FC99999A0000000, !dbg !33
  %204 = extractelement <4 x float> %200, i64 1, !dbg !32
  %205 = fmul float %204, 0x3FC99999A0000000, !dbg !33
  %206 = extractelement <4 x float> %200, i64 2, !dbg !32
  %207 = fmul float %206, 0x3FC99999A0000000, !dbg !33
  %208 = extractelement <4 x float> %200, i64 3, !dbg !32
  %209 = fmul float %208, 0x3FC99999A0000000, !dbg !33
  %210 = extractelement <4 x i1> %201, i64 0, !dbg !32
  %211 = select i1 %210, float %202, float %203, !dbg !32
  %212 = extractelement <4 x i1> %201, i64 1, !dbg !32
  %213 = select i1 %212, float %204, float %205, !dbg !32
  %214 = extractelement <4 x i1> %201, i64 2, !dbg !32
  %215 = select i1 %214, float %206, float %207, !dbg !32
  %216 = extractelement <4 x i1> %201, i64 3, !dbg !32
  %217 = select i1 %216, float %208, float %209, !dbg !32
  %218 = zext <4 x i1> %117 to <4 x i8>, !dbg !34
  %219 = bitcast <4 x i8> %218 to i32, !dbg !34
  %220 = zext <4 x i1> %145 to <4 x i8>, !dbg !34
  %221 = bitcast <4 x i8> %220 to i32, !dbg !34
  %222 = zext <4 x i1> %173 to <4 x i8>, !dbg !34
  %223 = bitcast <4 x i8> %222 to i32, !dbg !34
  %224 = zext <4 x i1> %201 to <4 x i8>, !dbg !34
  %225 = bitcast <4 x i8> %224 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %221, i32 %223, i32 %225, ptr addrspace(1) %105, i1 %52) #2, !dbg !34
  %226 = shl i32 %28, 6, !dbg !35
  %227 = shl i32 %29, 6, !dbg !35
  %228 = shl i32 %30, 6, !dbg !35
  %229 = shl i32 %31, 6, !dbg !35
  %230 = shl i32 %37, 15, !dbg !36
  %231 = add i32 %230, %.decomposed, !dbg !37
  %232 = add i32 %231, %226, !dbg !38
  %233 = add i32 %231, %227, !dbg !38
  %234 = add i32 %231, %228, !dbg !38
  %235 = add i32 %231, %229, !dbg !38
  %236 = sext i32 %232 to i64, !dbg !39
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %236, !dbg !39
  %238 = sext i32 %233 to i64, !dbg !39
  %239 = getelementptr float, ptr addrspace(1) %3, i64 %238, !dbg !39
  %240 = sext i32 %234 to i64, !dbg !39
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %240, !dbg !39
  %242 = sext i32 %235 to i64, !dbg !39
  %243 = getelementptr float, ptr addrspace(1) %3, i64 %242, !dbg !39
  %244 = shl i32 %9, 10, !dbg !40
  %245 = and i32 %244, 3072, !dbg !40
  %246 = or disjoint i32 %245, %11, !dbg !40
  %247 = and i32 %12, 1020, !dbg !40
  %248 = lshr exact i32 %245, 2, !dbg !40
  %249 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %248, !dbg !40
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %246, !dbg !40
  %251 = bitcast float %127 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !40
  %252 = or disjoint i32 %246, 64, !dbg !40
  %253 = lshr i32 %252, 4, !dbg !40
  %254 = and i32 %253, 196, !dbg !40
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !40
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %252, !dbg !40
  %257 = bitcast float %129 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #2, !dbg !40
  %258 = or disjoint i32 %246, 128, !dbg !40
  %259 = lshr i32 %258, 4, !dbg !40
  %260 = and i32 %259, 200, !dbg !40
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %260, !dbg !40
  %262 = getelementptr float, ptr addrspace(3) %261, i32 %258, !dbg !40
  %263 = bitcast float %131 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #2, !dbg !40
  %264 = or disjoint i32 %246, 192, !dbg !40
  %265 = lshr i32 %264, 4, !dbg !40
  %266 = and i32 %265, 204, !dbg !40
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !40
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %264, !dbg !40
  %269 = bitcast float %133 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !40
  %270 = or disjoint i32 %246, 256, !dbg !40
  %271 = lshr i32 %270, 4, !dbg !40
  %272 = and i32 %271, 208, !dbg !40
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !40
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %270, !dbg !40
  %275 = bitcast float %155 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !40
  %276 = or disjoint i32 %246, 320, !dbg !40
  %277 = lshr i32 %276, 4, !dbg !40
  %278 = and i32 %277, 212, !dbg !40
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !40
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !40
  %281 = bitcast float %157 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #2, !dbg !40
  %282 = or disjoint i32 %246, 384, !dbg !40
  %283 = lshr i32 %282, 4, !dbg !40
  %284 = and i32 %283, 216, !dbg !40
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !40
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !40
  %287 = bitcast float %159 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !40
  %288 = or disjoint i32 %246, 448, !dbg !40
  %289 = lshr i32 %288, 4, !dbg !40
  %290 = and i32 %289, 220, !dbg !40
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !40
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !40
  %293 = bitcast float %161 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !40
  %294 = or disjoint i32 %246, 512, !dbg !40
  %295 = lshr i32 %294, 4, !dbg !40
  %296 = and i32 %295, 224, !dbg !40
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !40
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %294, !dbg !40
  %299 = bitcast float %183 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #2, !dbg !40
  %300 = or disjoint i32 %246, 576, !dbg !40
  %301 = lshr i32 %300, 4, !dbg !40
  %302 = and i32 %301, 228, !dbg !40
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !40
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %300, !dbg !40
  %305 = bitcast float %185 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !40
  %306 = or disjoint i32 %246, 640, !dbg !40
  %307 = lshr i32 %306, 4, !dbg !40
  %308 = and i32 %307, 232, !dbg !40
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !40
  %310 = getelementptr float, ptr addrspace(3) %309, i32 %306, !dbg !40
  %311 = bitcast float %187 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #2, !dbg !40
  %312 = or disjoint i32 %246, 704, !dbg !40
  %313 = lshr i32 %312, 4, !dbg !40
  %314 = and i32 %313, 236, !dbg !40
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !40
  %316 = getelementptr float, ptr addrspace(3) %315, i32 %312, !dbg !40
  %317 = bitcast float %189 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #2, !dbg !40
  %318 = or disjoint i32 %246, 768, !dbg !40
  %319 = lshr i32 %318, 4, !dbg !40
  %320 = and i32 %319, 240, !dbg !40
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !40
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %318, !dbg !40
  %323 = bitcast float %211 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #2, !dbg !40
  %324 = or disjoint i32 %246, 832, !dbg !40
  %325 = lshr i32 %324, 4, !dbg !40
  %326 = and i32 %325, 244, !dbg !40
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i32 %326, !dbg !40
  %328 = getelementptr float, ptr addrspace(3) %327, i32 %324, !dbg !40
  %329 = bitcast float %213 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %329, i1 true) #2, !dbg !40
  %330 = or disjoint i32 %246, 896, !dbg !40
  %331 = lshr i32 %330, 4, !dbg !40
  %332 = and i32 %331, 248, !dbg !40
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !40
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %330, !dbg !40
  %335 = bitcast float %215 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #2, !dbg !40
  %336 = or disjoint i32 %246, 960, !dbg !40
  %337 = lshr i32 %336, 4, !dbg !40
  %338 = and i32 %337, 252, !dbg !40
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !40
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %336, !dbg !40
  %341 = bitcast float %217 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %342 = lshr i32 %12, 4, !dbg !40
  %343 = and i32 %342, 60, !dbg !40
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !40
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %247, !dbg !40
  %346 = or disjoint i32 %247, 1024, !dbg !40
  %347 = lshr i32 %346, 4, !dbg !40
  %348 = and i32 %347, 124, !dbg !40
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !40
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %346, !dbg !40
  %351 = load <4 x i32>, ptr addrspace(3) %350, align 16, !dbg !40
  %352 = or disjoint i32 %247, 2048, !dbg !40
  %353 = lshr i32 %352, 4, !dbg !40
  %354 = and i32 %353, 188, !dbg !40
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !40
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %352, !dbg !40
  %357 = load <4 x i32>, ptr addrspace(3) %356, align 16, !dbg !40
  %358 = or disjoint i32 %247, 3072, !dbg !40
  %359 = lshr i32 %358, 4, !dbg !40
  %360 = and i32 %359, 252, !dbg !40
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %360, !dbg !40
  %362 = getelementptr inbounds float, ptr addrspace(3) %361, i32 %358, !dbg !40
  %363 = load <4 x i32>, ptr addrspace(3) %362, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %345, align 16, !dbg !40
  %364 = getelementptr inbounds i8, ptr addrspace(3) %345, i32 4, !dbg !40
  %.extract18 = load i32, ptr addrspace(3) %364, align 4, !dbg !40
  %365 = getelementptr inbounds i8, ptr addrspace(3) %345, i32 8, !dbg !40
  %.extract19 = load i32, ptr addrspace(3) %365, align 8, !dbg !40
  %366 = getelementptr inbounds i8, ptr addrspace(3) %345, i32 12, !dbg !40
  %.extract20 = load i32, ptr addrspace(3) %366, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %237, i1 %53) #2, !dbg !40
  %.extract21 = extractelement <4 x i32> %351, i64 0, !dbg !40
  %.extract22 = extractelement <4 x i32> %351, i64 1, !dbg !40
  %.extract23 = extractelement <4 x i32> %351, i64 2, !dbg !40
  %.extract24 = extractelement <4 x i32> %351, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %239, i1 %54) #2, !dbg !40
  %.extract25 = extractelement <4 x i32> %357, i64 0, !dbg !40
  %.extract26 = extractelement <4 x i32> %357, i64 1, !dbg !40
  %.extract27 = extractelement <4 x i32> %357, i64 2, !dbg !40
  %.extract28 = extractelement <4 x i32> %357, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %241, i1 %55) #2, !dbg !40
  %.extract29 = extractelement <4 x i32> %363, i64 0, !dbg !40
  %.extract30 = extractelement <4 x i32> %363, i64 1, !dbg !40
  %.extract31 = extractelement <4 x i32> %363, i64 2, !dbg !40
  %.extract32 = extractelement <4 x i32> %363, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %243, i1 %56) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csnv7xak3ajfacpz54ybn5r32qvqs6r5t2oxgx6z5nmxl4luk2i7.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_27", linkageName: "triton_poi_fused_convolution_leaky_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 33, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 38, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
