; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = srem i32 %15, 256, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %22 = sext i32 %16 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !23
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !24
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !24
  %33 = bitcast i32 %29 to float, !dbg !24
  %34 = bitcast i32 %30 to float, !dbg !24
  %35 = bitcast i32 %31 to float, !dbg !24
  %36 = bitcast i32 %32 to float, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %41 = fadd float %33, 0x3F50624DE0000000, !dbg !29
  %42 = fadd float %34, 0x3F50624DE0000000, !dbg !29
  %43 = fadd float %35, 0x3F50624DE0000000, !dbg !29
  %44 = fadd float %36, 0x3F50624DE0000000, !dbg !29
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %45, 0, !dbg !30
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %46, 0, !dbg !30
  br i1 %.not.i, label %52, label %47, !dbg !30

47:                                               ; preds = %9
  br i1 %.not1.i, label %50, label %48, !dbg !30

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

52:                                               ; preds = %9
  br i1 %.not1.i, label %55, label %53, !dbg !30

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %48, %50, %53, %55
  %.0.i = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !30
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %57, 0, !dbg !30
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %58, 0, !dbg !30
  br i1 %.not.i1, label %64, label %59, !dbg !30

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !30

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !30

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %60, %62, %65, %67
  %.0.i3 = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !30
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %69, 0, !dbg !30
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %70, 0, !dbg !30
  br i1 %.not.i6, label %76, label %71, !dbg !30

71:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %74, label %72, !dbg !30

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

76:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %79, label %77, !dbg !30

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %72, %74, %77, %79
  %.0.i8 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %81, 0, !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %82, 0, !dbg !30
  br i1 %.not.i11, label %88, label %83, !dbg !30

83:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %86, label %84, !dbg !30

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

88:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %91, label %89, !dbg !30

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %84, %86, %89, %91
  %.0.i13 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %94 = bitcast i32 %93 to float, !dbg !18
  %95 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %96 = bitcast i32 %95 to float, !dbg !20
  %97 = fadd float %94, %96, !dbg !31
  %98 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %99 = bitcast i32 %98 to float, !dbg !16
  %100 = fadd float %97, %99, !dbg !32
  %101 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %102 = bitcast i32 %101 to float, !dbg !22
  %103 = fsub float %100, %102, !dbg !33
  %104 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %105 = bitcast i32 %104 to float, !dbg !18
  %106 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %107 = bitcast i32 %106 to float, !dbg !20
  %108 = fadd float %105, %107, !dbg !31
  %109 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %110 = bitcast i32 %109 to float, !dbg !16
  %111 = fadd float %108, %110, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %113 = bitcast i32 %112 to float, !dbg !22
  %114 = fsub float %111, %113, !dbg !33
  %115 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %116 = bitcast i32 %115 to float, !dbg !18
  %117 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %118 = bitcast i32 %117 to float, !dbg !20
  %119 = fadd float %116, %118, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %121 = bitcast i32 %120 to float, !dbg !16
  %122 = fadd float %119, %121, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %124 = bitcast i32 %123 to float, !dbg !22
  %125 = fsub float %122, %124, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %127 = bitcast i32 %126 to float, !dbg !18
  %128 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %129 = bitcast i32 %128 to float, !dbg !20
  %130 = fadd float %127, %129, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %132 = bitcast i32 %131 to float, !dbg !16
  %133 = fadd float %130, %132, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %135 = bitcast i32 %134 to float, !dbg !22
  %136 = fsub float %133, %135, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %144 = bitcast i32 %143 to float, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %146 = bitcast i32 %145 to float, !dbg !26
  %147 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %148 = bitcast i32 %147 to float, !dbg !26
  %149 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %150 = bitcast i32 %149 to float, !dbg !26
  %151 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %152 = bitcast i32 %151 to float, !dbg !26
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !34
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !34
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !34
  %157 = fmul float %136, %153, !dbg !35
  %158 = fmul float %125, %154, !dbg !35
  %159 = fmul float %114, %155, !dbg !35
  %160 = fmul float %103, %156, !dbg !35
  %161 = fmul float %157, %152, !dbg !36
  %162 = fmul float %158, %150, !dbg !36
  %163 = fmul float %159, %148, !dbg !36
  %164 = fmul float %160, %146, !dbg !36
  %165 = fadd float %161, %144, !dbg !37
  %166 = fadd float %162, %142, !dbg !37
  %167 = fadd float %163, %140, !dbg !37
  %168 = fadd float %164, %138, !dbg !37
  %169 = bitcast float %133 to i32, !dbg !38
  %170 = bitcast float %122 to i32, !dbg !38
  %171 = bitcast float %111 to i32, !dbg !38
  %172 = bitcast float %100 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %169, i32 %170, i32 %171, i32 %172, ptr addrspace(1) %20, i1 true) #3, !dbg !38
  %173 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !39
  %174 = bitcast float %165 to i32, !dbg !40
  %175 = bitcast float %166 to i32, !dbg !40
  %176 = bitcast float %167 to i32, !dbg !40
  %177 = bitcast float %168 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %174, i32 %175, i32 %176, i32 %177, ptr addrspace(1) %173, i1 true) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csqam4uzyoptttul6wgyykqwwvvk4atzztsy5l77ptvljhiihd3t.py", directory: "inductor_cache/sq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 27, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 39, scope: !7)
!39 = !DILocation(line: 47, column: 25, scope: !7)
!40 = !DILocation(line: 47, column: 37, scope: !7)
!41 = !DILocation(line: 47, column: 4, scope: !7)
