; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 16, !dbg !14
  %19 = mul i32 %18, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %21 = insertelement <2 x i32> %20, i32 %17, i64 1, !dbg !16
  %22 = srem <2 x i32> %21, splat (i32 16), !dbg !16
  %23 = sdiv i32 %16, 256, !dbg !17
  %24 = srem i32 %23, 64, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %40 = extractelement <2 x i32> %22, i64 0, !dbg !27
  %41 = icmp sgt i32 %40, 0, !dbg !28
  %42 = shl nsw i32 %.decomposed, 1, !dbg !29
  %43 = extractelement <2 x i32> %22, i64 1, !dbg !27
  %44 = shl nsw i32 %43, 1, !dbg !29
  %45 = icmp sgt i32 %.decomposed, 0, !dbg !30
  %46 = icmp sgt i32 %43, 0, !dbg !30
  %47 = and i1 %45, %41, !dbg !31
  %48 = and i1 %46, %41, !dbg !31
  %49 = shl i32 %18, 6, !dbg !32
  %50 = add i32 %49, %42, !dbg !33
  %51 = add i32 %50, -33, !dbg !34
  %52 = add i32 %49, %44, !dbg !33
  %53 = add i32 %52, -33, !dbg !34
  %54 = sext i32 %51 to i64, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !35
  %56 = sext i32 %53 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %47, i32 -8388608, i1 %47) #3, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %48, i32 -8388608, i1 %48) #3, !dbg !36
  %60 = icmp sgt i32 %.decomposed, -1, !dbg !37
  %61 = icmp sgt i32 %43, -1, !dbg !37
  %62 = and i1 %60, %41, !dbg !38
  %63 = and i1 %61, %41, !dbg !38
  %64 = add i32 %50, -32, !dbg !39
  %65 = add i32 %52, -32, !dbg !39
  %66 = sext i32 %64 to i64, !dbg !40
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !40
  %68 = sext i32 %65 to i64, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %62, i32 -8388608, i1 %62) #3, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %63, i32 -8388608, i1 %63) #3, !dbg !41
  %72 = add i32 %50, -31, !dbg !42
  %73 = add i32 %52, -31, !dbg !42
  %74 = sext i32 %72 to i64, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !43
  %76 = sext i32 %73 to i64, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !43
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %62, i32 -8388608, i1 %62) #3, !dbg !44
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %63, i32 -8388608, i1 %63) #3, !dbg !44
  %80 = icmp sgt i32 %40, -1, !dbg !45
  %81 = and i1 %45, %80, !dbg !46
  %82 = and i1 %46, %80, !dbg !46
  %83 = add i32 %50, -1, !dbg !47
  %84 = sext i32 %83 to i64, !dbg !48
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !48
  %86 = sext i32 %52 to i64, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !48
  %88 = getelementptr i8, ptr addrspace(1) %87, i64 -4, !dbg !48
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %81, i32 -8388608, i1 %81) #3, !dbg !49
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %82, i32 -8388608, i1 %82) #3, !dbg !49
  %91 = or i32 %40, %.decomposed, !dbg !27
  %92 = icmp sgt i32 %91, -1, !dbg !27
  %93 = or i32 %40, %43, !dbg !27
  %94 = icmp sgt i32 %93, -1, !dbg !27
  %95 = sext i32 %50 to i64, !dbg !50
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !50
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %92, i32 -8388608, i1 %92) #3, !dbg !51
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %94, i32 -8388608, i1 %94) #3, !dbg !51
  %99 = or disjoint i32 %50, 1, !dbg !52
  %100 = or disjoint i32 %52, 1, !dbg !52
  %101 = sext i32 %99 to i64, !dbg !53
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !53
  %103 = sext i32 %100 to i64, !dbg !53
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !53
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %92, i32 -8388608, i1 %92) #3, !dbg !54
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %94, i32 -8388608, i1 %94) #3, !dbg !54
  %107 = add i32 %50, 31, !dbg !55
  %108 = add i32 %52, 31, !dbg !55
  %109 = sext i32 %107 to i64, !dbg !56
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !56
  %111 = sext i32 %108 to i64, !dbg !56
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !56
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %81, i32 -8388608, i1 %81) #3, !dbg !57
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %82, i32 -8388608, i1 %82) #3, !dbg !57
  %115 = add i32 %50, 32, !dbg !58
  %116 = add i32 %52, 32, !dbg !58
  %117 = sext i32 %115 to i64, !dbg !59
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !59
  %119 = sext i32 %116 to i64, !dbg !59
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !59
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %92, i32 -8388608, i1 %92) #3, !dbg !60
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %94, i32 -8388608, i1 %94) #3, !dbg !60
  %123 = add i32 %50, 33, !dbg !61
  %124 = add i32 %52, 33, !dbg !61
  %125 = sext i32 %123 to i64, !dbg !62
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !62
  %127 = sext i32 %124 to i64, !dbg !62
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !62
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %92, i32 -8388608, i1 %92) #3, !dbg !63
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %94, i32 -8388608, i1 %94) #3, !dbg !63
  %131 = fadd float %31, 0x3EE4F8B580000000, !dbg !64
  %132 = fadd float %33, 0x3EE4F8B580000000, !dbg !64
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %133, 0, !dbg !65
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %134, 0, !dbg !65
  br i1 %.not.i, label %140, label %135, !dbg !65

135:                                              ; preds = %10
  br i1 %.not1.i, label %138, label %136, !dbg !65

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

140:                                              ; preds = %10
  br i1 %.not1.i, label %143, label %141, !dbg !65

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !65
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %145, 0, !dbg !65
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %146, 0, !dbg !65
  br i1 %.not.i1, label %152, label %147, !dbg !65

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !65

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %155, label %153, !dbg !65

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %148, %150, %153, %155
  %.0.i3 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !65
  %157 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !41
  %158 = insertelement <2 x i32> %157, i32 %71, i64 1, !dbg !41
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !41
  %160 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !36
  %161 = insertelement <2 x i32> %160, i32 %59, i64 1, !dbg !36
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !36
  %163 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !44
  %164 = insertelement <2 x i32> %163, i32 %79, i64 1, !dbg !44
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !44
  %166 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !49
  %167 = insertelement <2 x i32> %166, i32 %90, i64 1, !dbg !49
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !49
  %169 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !51
  %170 = insertelement <2 x i32> %169, i32 %98, i64 1, !dbg !51
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !51
  %172 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !54
  %173 = insertelement <2 x i32> %172, i32 %106, i64 1, !dbg !54
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !54
  %175 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !57
  %176 = insertelement <2 x i32> %175, i32 %114, i64 1, !dbg !57
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !57
  %178 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !60
  %179 = insertelement <2 x i32> %178, i32 %122, i64 1, !dbg !60
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !60
  %181 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !63
  %182 = insertelement <2 x i32> %181, i32 %130, i64 1, !dbg !63
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !63
  %184 = bitcast i32 %130 to float, !dbg !66
  %185 = fcmp uno float %184, 0.000000e+00, !dbg !66
  %186 = bitcast i32 %28 to float, !dbg !20
  %187 = fcmp uno <2 x float> %171, zeroinitializer, !dbg !70
  %188 = bitcast i32 %129 to float, !dbg !66
  %189 = fcmp uno float %188, 0.000000e+00, !dbg !66
  %190 = bitcast i32 %27 to float, !dbg !20
  %191 = fcmp ogt <2 x float> %159, %162, !dbg !72
  %192 = fcmp uno <2 x float> %159, zeroinitializer, !dbg !74
  %193 = or <2 x i1> %191, %192, !dbg !75
  %.v = select <2 x i1> %193, <2 x i32> %158, <2 x i32> %161, !dbg !76
  %194 = bitcast <2 x i32> %.v to <2 x float>, !dbg !76
  %195 = fcmp olt <2 x float> %194, %165, !dbg !77
  %196 = fcmp uno <2 x float> %165, zeroinitializer, !dbg !79
  %197 = or <2 x i1> %196, %195, !dbg !80
  %.v6 = select <2 x i1> %197, <2 x i32> %164, <2 x i32> %.v, !dbg !81
  %198 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !81
  %199 = fcmp olt <2 x float> %198, %168, !dbg !82
  %200 = fcmp uno <2 x float> %168, zeroinitializer, !dbg !84
  %201 = or <2 x i1> %200, %199, !dbg !85
  %.v7 = select <2 x i1> %201, <2 x i32> %167, <2 x i32> %.v6, !dbg !86
  %202 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !86
  %203 = fcmp olt <2 x float> %202, %171, !dbg !87
  %204 = or <2 x i1> %187, %203, !dbg !88
  %.v8 = select <2 x i1> %204, <2 x i32> %170, <2 x i32> %.v7, !dbg !89
  %205 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !89
  %206 = fcmp olt <2 x float> %205, %174, !dbg !90
  %207 = fcmp uno <2 x float> %174, zeroinitializer, !dbg !92
  %208 = or <2 x i1> %207, %206, !dbg !93
  %.v9 = select <2 x i1> %208, <2 x i32> %173, <2 x i32> %.v8, !dbg !94
  %209 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !94
  %210 = fcmp olt <2 x float> %209, %177, !dbg !95
  %211 = fcmp uno <2 x float> %177, zeroinitializer, !dbg !97
  %212 = or <2 x i1> %211, %210, !dbg !98
  %.v10 = select <2 x i1> %212, <2 x i32> %176, <2 x i32> %.v9, !dbg !99
  %213 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !99
  %214 = fcmp olt <2 x float> %213, %180, !dbg !100
  %215 = fcmp uno <2 x float> %180, zeroinitializer, !dbg !102
  %216 = or <2 x i1> %215, %214, !dbg !103
  %.v11 = select <2 x i1> %216, <2 x i32> %179, <2 x i32> %.v10, !dbg !104
  %217 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !104
  %218 = fcmp olt <2 x float> %217, %183, !dbg !105
  %219 = extractelement <2 x i1> %218, i64 1, !dbg !106
  %220 = or i1 %185, %219, !dbg !106
  %221 = extractelement <2 x float> %217, i64 1, !dbg !107
  %222 = select i1 %220, float %184, float %221, !dbg !107
  %223 = fsub float %222, %186, !dbg !108
  %224 = extractelement <2 x i1> %218, i64 0, !dbg !106
  %225 = or i1 %189, %224, !dbg !106
  %226 = extractelement <2 x float> %217, i64 0, !dbg !107
  %227 = select i1 %225, float %188, float %226, !dbg !107
  %228 = fsub float %227, %190, !dbg !108
  %229 = zext <2 x i1> %191 to <2 x i8>, !dbg !109
  %230 = select <2 x i1> %195, <2 x i8> splat (i8 2), <2 x i8> %229, !dbg !110
  %231 = select <2 x i1> %199, <2 x i8> splat (i8 3), <2 x i8> %230, !dbg !111
  %232 = select <2 x i1> %203, <2 x i8> splat (i8 4), <2 x i8> %231, !dbg !112
  %233 = select <2 x i1> %206, <2 x i8> splat (i8 5), <2 x i8> %232, !dbg !113
  %234 = select <2 x i1> %210, <2 x i8> splat (i8 6), <2 x i8> %233, !dbg !114
  %235 = select <2 x i1> %214, <2 x i8> splat (i8 7), <2 x i8> %234, !dbg !115
  %236 = select <2 x i1> %218, <2 x i8> splat (i8 8), <2 x i8> %235, !dbg !116
  %237 = bitcast i32 %39 to float, !dbg !26
  %238 = bitcast i32 %38 to float, !dbg !26
  %239 = bitcast i32 %36 to float, !dbg !24
  %240 = bitcast i32 %35 to float, !dbg !24
  %.frozen12 = freeze i32 %16, !dbg !117
  %241 = sdiv i32 %.frozen12, 16384, !dbg !117
  %242 = mul i32 %241, 16384, !dbg !118
  %.decomposed13 = sub i32 %.frozen12, %242, !dbg !118
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !119
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !119
  %245 = fmul float %228, %243, !dbg !120
  %246 = fmul float %223, %244, !dbg !120
  %247 = fmul float %245, %240, !dbg !121
  %248 = fmul float %246, %239, !dbg !121
  %249 = fadd float %247, %238, !dbg !122
  %250 = fadd float %248, %237, !dbg !122
  %251 = fcmp olt float %249, 0.000000e+00, !dbg !123
  %252 = fcmp olt float %250, 0.000000e+00, !dbg !123
  %253 = select i1 %251, float 0.000000e+00, float %249, !dbg !125
  %254 = select i1 %252, float 0.000000e+00, float %250, !dbg !125
  %255 = mul i32 %241, 19456, !dbg !126
  %256 = add i32 %255, %.decomposed13, !dbg !127
  %257 = sext i32 %256 to i64, !dbg !128
  %258 = getelementptr float, ptr addrspace(1) %5, i64 %257, !dbg !128
  %259 = bitcast float %227 to i32, !dbg !129
  %260 = bitcast float %222 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %259, i32 %260, ptr addrspace(1) %258, i1 true) #3, !dbg !129
  %261 = sext i32 %16 to i64, !dbg !130
  %262 = getelementptr i8, ptr addrspace(1) %6, i64 %261, !dbg !130
  %263 = bitcast <2 x i8> %236 to i16, !dbg !131
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %263, ptr addrspace(1) %262, i1 true) #3, !dbg !131
  %264 = getelementptr float, ptr addrspace(1) %7, i64 %261, !dbg !132
  %265 = bitcast float %253 to i32, !dbg !133
  %266 = bitcast float %254 to i32, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %265, i32 %266, ptr addrspace(1) %264, i1 true) #3, !dbg !133
  %267 = getelementptr float, ptr addrspace(1) %8, i64 %261, !dbg !134
  %268 = bitcast float %228 to i32, !dbg !135
  %269 = bitcast float %223 to i32, !dbg !135
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %268, i32 %269, ptr addrspace(1) %267, i1 true) #3, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr6dhvqdofz5ckjxqx64m7zxdldqqmgduo7tpl77o5ufbdidf6qc.py", directory: "inductor_cache/r6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 28, scope: !7)
!19 = !DILocation(line: 31, column: 31, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 68, column: 20, scope: !7)
!28 = !DILocation(line: 37, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 45, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 49, scope: !7)
!33 = !DILocation(line: 46, column: 39, scope: !7)
!34 = !DILocation(line: 46, column: 46, scope: !7)
!35 = !DILocation(line: 46, column: 31, scope: !7)
!36 = !DILocation(line: 46, column: 54, scope: !7)
!37 = !DILocation(line: 48, column: 21, scope: !7)
!38 = !DILocation(line: 51, column: 19, scope: !7)
!39 = !DILocation(line: 52, column: 46, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 54, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 54, scope: !7)
!45 = !DILocation(line: 62, column: 21, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 45, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 53, scope: !7)
!50 = !DILocation(line: 69, column: 31, scope: !7)
!51 = !DILocation(line: 69, column: 46, scope: !7)
!52 = !DILocation(line: 72, column: 42, scope: !7)
!53 = !DILocation(line: 72, column: 31, scope: !7)
!54 = !DILocation(line: 72, column: 50, scope: !7)
!55 = !DILocation(line: 79, column: 43, scope: !7)
!56 = !DILocation(line: 79, column: 31, scope: !7)
!57 = !DILocation(line: 79, column: 51, scope: !7)
!58 = !DILocation(line: 82, column: 43, scope: !7)
!59 = !DILocation(line: 82, column: 31, scope: !7)
!60 = !DILocation(line: 82, column: 51, scope: !7)
!61 = !DILocation(line: 85, column: 43, scope: !7)
!62 = !DILocation(line: 85, column: 31, scope: !7)
!63 = !DILocation(line: 85, column: 51, scope: !7)
!64 = !DILocation(line: 114, column: 20, scope: !7)
!65 = !DILocation(line: 115, column: 27, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 86, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !71)
!71 = !DILocation(line: 70, column: 42, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !73)
!73 = !DILocation(line: 53, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !78)
!78 = !DILocation(line: 60, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !83)
!83 = !DILocation(line: 67, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !71)
!88 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !71)
!89 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !71)
!90 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !91)
!91 = !DILocation(line: 73, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !96)
!96 = !DILocation(line: 80, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !101)
!101 = !DILocation(line: 83, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!106 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!107 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!108 = !DILocation(line: 112, column: 20, scope: !7)
!109 = !DILocation(line: 90, column: 35, scope: !7)
!110 = !DILocation(line: 93, column: 35, scope: !7)
!111 = !DILocation(line: 96, column: 35, scope: !7)
!112 = !DILocation(line: 99, column: 35, scope: !7)
!113 = !DILocation(line: 102, column: 35, scope: !7)
!114 = !DILocation(line: 105, column: 35, scope: !7)
!115 = !DILocation(line: 108, column: 35, scope: !7)
!116 = !DILocation(line: 111, column: 35, scope: !7)
!117 = !DILocation(line: 27, column: 19, scope: !7)
!118 = !DILocation(line: 28, column: 19, scope: !7)
!119 = !DILocation(line: 117, column: 20, scope: !7)
!120 = !DILocation(line: 120, column: 20, scope: !7)
!121 = !DILocation(line: 121, column: 20, scope: !7)
!122 = !DILocation(line: 122, column: 20, scope: !7)
!123 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !124)
!124 = !DILocation(line: 124, column: 42, scope: !7)
!125 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !124)
!126 = !DILocation(line: 125, column: 36, scope: !7)
!127 = !DILocation(line: 125, column: 30, scope: !7)
!128 = !DILocation(line: 125, column: 25, scope: !7)
!129 = !DILocation(line: 125, column: 48, scope: !7)
!130 = !DILocation(line: 126, column: 25, scope: !7)
!131 = !DILocation(line: 126, column: 37, scope: !7)
!132 = !DILocation(line: 127, column: 25, scope: !7)
!133 = !DILocation(line: 127, column: 37, scope: !7)
!134 = !DILocation(line: 128, column: 25, scope: !7)
!135 = !DILocation(line: 128, column: 37, scope: !7)
!136 = !DILocation(line: 128, column: 4, scope: !7)
