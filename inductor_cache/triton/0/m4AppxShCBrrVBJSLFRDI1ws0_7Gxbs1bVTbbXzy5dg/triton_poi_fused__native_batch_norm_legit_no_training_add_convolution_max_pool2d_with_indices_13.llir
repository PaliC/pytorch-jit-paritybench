; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %14 = shl i32 %13, 10, !dbg !12
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %16 = shl i32 %15, 3, !dbg !13
  %17 = and i32 %16, 1016, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %14, %17, !dbg !14
  %20 = or disjoint i32 %14, %18, !dbg !14
  %21 = icmp slt i32 %19, 728, !dbg !15
  %22 = sdiv i32 %12, 16, !dbg !16
  %23 = mul i32 %12, 728, !dbg !17
  %24 = add i32 %19, %23, !dbg !18
  %25 = add i32 %20, %23, !dbg !18
  %26 = sext i32 %24 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = sext i32 %25 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %21) #4, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %21) #4, !dbg !20
  %32 = sext i32 %19 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !21
  %34 = sext i32 %20 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %21) #4, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %21) #4, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %21) #4, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %21) #4, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %21) #4, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = bitcast i32 %48 to float, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #4, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !27
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %21) #4, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %21) #4, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !29
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %21) #4, !dbg !30
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %21) #4, !dbg !30
  %70 = add i32 %24, -12376, !dbg !31
  %71 = add i32 %25, -12376, !dbg !31
  %72 = sext i32 %70 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !32
  %74 = sext i32 %71 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !32
  %76 = add i32 %24, -11648, !dbg !33
  %77 = add i32 %25, -11648, !dbg !33
  %78 = sext i32 %76 to i64, !dbg !34
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !34
  %80 = sext i32 %77 to i64, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !34
  %82 = add i32 %24, -10920, !dbg !35
  %83 = add i32 %25, -10920, !dbg !35
  %84 = sext i32 %82 to i64, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !36
  %86 = sext i32 %83 to i64, !dbg !36
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !36
  %88 = add i32 %24, -728, !dbg !37
  %89 = add i32 %25, -728, !dbg !37
  %90 = sext i32 %88 to i64, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !38
  %92 = sext i32 %89 to i64, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !38
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !39
  %96 = add i32 %24, 728, !dbg !40
  %97 = add i32 %25, 728, !dbg !40
  %98 = sext i32 %96 to i64, !dbg !41
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !41
  %100 = sext i32 %97 to i64, !dbg !41
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !41
  %102 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !42
  %103 = insertelement <2 x i32> %102, i32 %12, i64 1, !dbg !42
  %104 = srem <2 x i32> %103, splat (i32 16), !dbg !42
  %105 = extractelement <2 x i32> %104, i64 0, !dbg !43
  %106 = icmp sgt i32 %105, 0, !dbg !44
  %107 = extractelement <2 x i32> %104, i64 1, !dbg !43
  %108 = icmp sgt i32 %107, 0, !dbg !45
  %109 = and i1 %108, %106, !dbg !46
  %110 = and i1 %109, %21, !dbg !47
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110) #4, !dbg !48
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110) #4, !dbg !48
  %113 = icmp sgt i32 %107, -1, !dbg !49
  %114 = and i1 %113, %106, !dbg !50
  %115 = and i1 %114, %21, !dbg !51
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #4, !dbg !52
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #4, !dbg !52
  %118 = add nsw <2 x i32> %104, splat (i32 1), !dbg !53
  %119 = extractelement <2 x i32> %118, i64 1, !dbg !54
  %120 = icmp ult i32 %119, 16, !dbg !55
  %121 = and i1 %106, %120, !dbg !56
  %122 = and i1 %121, %21, !dbg !57
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #4, !dbg !58
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #4, !dbg !58
  %125 = icmp sgt i32 %105, -1, !dbg !59
  %126 = and i1 %108, %125, !dbg !60
  %127 = and i1 %126, %21, !dbg !61
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127) #4, !dbg !62
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127) #4, !dbg !62
  %130 = or i32 %105, %107, !dbg !43
  %131 = icmp sgt i32 %130, -1, !dbg !43
  %132 = and i1 %131, %21, !dbg !63
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132) #4, !dbg !64
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132) #4, !dbg !64
  %135 = and i1 %125, %120, !dbg !65
  %136 = and i1 %135, %21, !dbg !66
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #4, !dbg !67
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #4, !dbg !67
  %139 = extractelement <2 x i32> %118, i64 0, !dbg !54
  %140 = icmp ult i32 %139, 16, !dbg !53
  %141 = and i1 %108, %140, !dbg !68
  %142 = add i32 %24, 10920, !dbg !69
  %143 = add i32 %25, 10920, !dbg !69
  %144 = sext i32 %142 to i64, !dbg !70
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !70
  %146 = sext i32 %143 to i64, !dbg !70
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !70
  %148 = and i1 %21, %141, !dbg !71
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %148, i32 -8388608, i1 %148, i32 -8388608, i1 %148, i32 -8388608, i1 %148, i32 -8388608, i1 %148) #4, !dbg !72
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %148, i32 -8388608, i1 %148, i32 -8388608, i1 %148, i32 -8388608, i1 %148, i32 -8388608, i1 %148) #4, !dbg !72
  %151 = and i1 %113, %140, !dbg !73
  %152 = add i32 %24, 11648, !dbg !74
  %153 = add i32 %25, 11648, !dbg !74
  %154 = sext i32 %152 to i64, !dbg !75
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !75
  %156 = sext i32 %153 to i64, !dbg !75
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !75
  %158 = and i1 %21, %151, !dbg !76
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %155, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158) #4, !dbg !77
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158) #4, !dbg !77
  %161 = or i32 %139, %119, !dbg !54
  %162 = icmp ult i32 %161, 16, !dbg !54
  %163 = add i32 %24, 12376, !dbg !78
  %164 = add i32 %25, 12376, !dbg !78
  %165 = sext i32 %163 to i64, !dbg !79
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !79
  %167 = sext i32 %164 to i64, !dbg !79
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !79
  %169 = and i1 %21, %162, !dbg !80
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 %169, i32 -8388608, i1 %169, i32 -8388608, i1 %169, i32 -8388608, i1 %169, i32 -8388608, i1 %169) #4, !dbg !81
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %168, i1 %169, i32 -8388608, i1 %169, i32 -8388608, i1 %169, i32 -8388608, i1 %169, i32 -8388608, i1 %169) #4, !dbg !81
  %172 = fadd float %49, 0x3EE4F8B580000000, !dbg !82
  %173 = fadd float %50, 0x3EE4F8B580000000, !dbg !82
  %174 = fadd float %51, 0x3EE4F8B580000000, !dbg !82
  %175 = fadd float %52, 0x3EE4F8B580000000, !dbg !82
  %176 = fadd float %58, 0x3EE4F8B580000000, !dbg !82
  %177 = fadd float %59, 0x3EE4F8B580000000, !dbg !82
  %178 = fadd float %60, 0x3EE4F8B580000000, !dbg !82
  %179 = fadd float %61, 0x3EE4F8B580000000, !dbg !82
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i = icmp eq i32 %180, 0, !dbg !83
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i = icmp eq i32 %181, 0, !dbg !83
  br i1 %.not.i, label %187, label %182, !dbg !83

182:                                              ; preds = %11
  br i1 %.not1.i, label %185, label %183, !dbg !83

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #4, !dbg !83
  br label %__nv_sqrtf.exit, !dbg !83

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #4, !dbg !83
  br label %__nv_sqrtf.exit, !dbg !83

187:                                              ; preds = %11
  br i1 %.not1.i, label %190, label %188, !dbg !83

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #4, !dbg !83
  br label %__nv_sqrtf.exit, !dbg !83

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #4, !dbg !83
  br label %__nv_sqrtf.exit, !dbg !83

__nv_sqrtf.exit:                                  ; preds = %183, %185, %188, %190
  %.0.i = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !83
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i1 = icmp eq i32 %192, 0, !dbg !83
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i4 = icmp eq i32 %193, 0, !dbg !83
  br i1 %.not.i1, label %199, label %194, !dbg !83

194:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %197, label %195, !dbg !83

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !83
  br label %__nv_sqrtf.exit5, !dbg !83

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !83
  br label %__nv_sqrtf.exit5, !dbg !83

199:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %202, label %200, !dbg !83

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !83
  br label %__nv_sqrtf.exit5, !dbg !83

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !83
  br label %__nv_sqrtf.exit5, !dbg !83

__nv_sqrtf.exit5:                                 ; preds = %195, %197, %200, %202
  %.0.i3 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !83
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i6 = icmp eq i32 %204, 0, !dbg !83
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i9 = icmp eq i32 %205, 0, !dbg !83
  br i1 %.not.i6, label %211, label %206, !dbg !83

206:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %209, label %207, !dbg !83

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !83
  br label %__nv_sqrtf.exit10, !dbg !83

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !83
  br label %__nv_sqrtf.exit10, !dbg !83

211:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %214, label %212, !dbg !83

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !83
  br label %__nv_sqrtf.exit10, !dbg !83

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !83
  br label %__nv_sqrtf.exit10, !dbg !83

__nv_sqrtf.exit10:                                ; preds = %207, %209, %212, %214
  %.0.i8 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !83
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i11 = icmp eq i32 %216, 0, !dbg !83
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i14 = icmp eq i32 %217, 0, !dbg !83
  br i1 %.not.i11, label %223, label %218, !dbg !83

218:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %221, label %219, !dbg !83

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !83
  br label %__nv_sqrtf.exit15, !dbg !83

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !83
  br label %__nv_sqrtf.exit15, !dbg !83

223:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %226, label %224, !dbg !83

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !83
  br label %__nv_sqrtf.exit15, !dbg !83

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !83
  br label %__nv_sqrtf.exit15, !dbg !83

__nv_sqrtf.exit15:                                ; preds = %219, %221, %224, %226
  %.0.i13 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !83
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i16 = icmp eq i32 %228, 0, !dbg !83
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i19 = icmp eq i32 %229, 0, !dbg !83
  br i1 %.not.i16, label %235, label %230, !dbg !83

230:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %233, label %231, !dbg !83

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #4, !dbg !83
  br label %__nv_sqrtf.exit20, !dbg !83

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #4, !dbg !83
  br label %__nv_sqrtf.exit20, !dbg !83

235:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %238, label %236, !dbg !83

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #4, !dbg !83
  br label %__nv_sqrtf.exit20, !dbg !83

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #4, !dbg !83
  br label %__nv_sqrtf.exit20, !dbg !83

__nv_sqrtf.exit20:                                ; preds = %231, %233, %236, %238
  %.0.i18 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !83
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i21 = icmp eq i32 %240, 0, !dbg !83
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i24 = icmp eq i32 %241, 0, !dbg !83
  br i1 %.not.i21, label %247, label %242, !dbg !83

242:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %245, label %243, !dbg !83

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #4, !dbg !83
  br label %__nv_sqrtf.exit25, !dbg !83

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #4, !dbg !83
  br label %__nv_sqrtf.exit25, !dbg !83

247:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %250, label %248, !dbg !83

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #4, !dbg !83
  br label %__nv_sqrtf.exit25, !dbg !83

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #4, !dbg !83
  br label %__nv_sqrtf.exit25, !dbg !83

__nv_sqrtf.exit25:                                ; preds = %243, %245, %248, %250
  %.0.i23 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !83
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i26 = icmp eq i32 %252, 0, !dbg !83
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i29 = icmp eq i32 %253, 0, !dbg !83
  br i1 %.not.i26, label %259, label %254, !dbg !83

254:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %257, label %255, !dbg !83

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #4, !dbg !83
  br label %__nv_sqrtf.exit30, !dbg !83

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #4, !dbg !83
  br label %__nv_sqrtf.exit30, !dbg !83

259:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %262, label %260, !dbg !83

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #4, !dbg !83
  br label %__nv_sqrtf.exit30, !dbg !83

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #4, !dbg !83
  br label %__nv_sqrtf.exit30, !dbg !83

__nv_sqrtf.exit30:                                ; preds = %255, %257, %260, %262
  %.0.i28 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !83
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i31 = icmp eq i32 %264, 0, !dbg !83
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !83
  %.not1.i34 = icmp eq i32 %265, 0, !dbg !83
  br i1 %.not.i31, label %271, label %266, !dbg !83

266:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %269, label %267, !dbg !83

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !83
  br label %__nv_sqrtf.exit35, !dbg !83

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !83
  br label %__nv_sqrtf.exit35, !dbg !83

271:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %274, label %272, !dbg !83

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !83
  br label %__nv_sqrtf.exit35, !dbg !83

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !83
  br label %__nv_sqrtf.exit35, !dbg !83

__nv_sqrtf.exit35:                                ; preds = %267, %269, %272, %274
  %.0.i33 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !83
  %276 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %277 = bitcast i32 %276 to float, !dbg !20
  %278 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %279 = bitcast i32 %278 to float, !dbg !22
  %280 = fadd float %277, %279, !dbg !84
  %281 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %282 = bitcast i32 %281 to float, !dbg !24
  %283 = fsub float %280, %282, !dbg !85
  %284 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %285 = bitcast i32 %284 to float, !dbg !20
  %286 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %287 = bitcast i32 %286 to float, !dbg !22
  %288 = fadd float %285, %287, !dbg !84
  %289 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %290 = bitcast i32 %289 to float, !dbg !24
  %291 = fsub float %288, %290, !dbg !85
  %292 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %293 = bitcast i32 %292 to float, !dbg !20
  %294 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %295 = bitcast i32 %294 to float, !dbg !22
  %296 = fadd float %293, %295, !dbg !84
  %297 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %298 = bitcast i32 %297 to float, !dbg !24
  %299 = fsub float %296, %298, !dbg !85
  %300 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %301 = bitcast i32 %300 to float, !dbg !20
  %302 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %303 = bitcast i32 %302 to float, !dbg !22
  %304 = fadd float %301, %303, !dbg !84
  %305 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %306 = bitcast i32 %305 to float, !dbg !24
  %307 = fsub float %304, %306, !dbg !85
  %308 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %309 = bitcast i32 %308 to float, !dbg !20
  %310 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %311 = bitcast i32 %310 to float, !dbg !22
  %312 = fadd float %309, %311, !dbg !84
  %313 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %314 = bitcast i32 %313 to float, !dbg !24
  %315 = fsub float %312, %314, !dbg !85
  %316 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %317 = bitcast i32 %316 to float, !dbg !20
  %318 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %319 = bitcast i32 %318 to float, !dbg !22
  %320 = fadd float %317, %319, !dbg !84
  %321 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %322 = bitcast i32 %321 to float, !dbg !24
  %323 = fsub float %320, %322, !dbg !85
  %324 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %325 = bitcast i32 %324 to float, !dbg !20
  %326 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %327 = bitcast i32 %326 to float, !dbg !22
  %328 = fadd float %325, %327, !dbg !84
  %329 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %330 = bitcast i32 %329 to float, !dbg !24
  %331 = fsub float %328, %330, !dbg !85
  %332 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %333 = bitcast i32 %332 to float, !dbg !20
  %334 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %335 = bitcast i32 %334 to float, !dbg !22
  %336 = fadd float %333, %335, !dbg !84
  %337 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %338 = bitcast i32 %337 to float, !dbg !24
  %339 = fsub float %336, %338, !dbg !85
  %340 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !52
  %341 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !48
  %342 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !58
  %343 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !62
  %344 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !64
  %345 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !67
  %346 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !72
  %347 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !77
  %348 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !81
  %349 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !52
  %350 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !48
  %351 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !58
  %352 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !62
  %353 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !64
  %354 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !67
  %355 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !72
  %356 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !77
  %357 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !81
  %358 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !52
  %359 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !48
  %360 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !58
  %361 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !62
  %362 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !64
  %363 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !67
  %364 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !72
  %365 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !77
  %366 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !81
  %367 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !52
  %368 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !48
  %369 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !58
  %370 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !62
  %371 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !64
  %372 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !67
  %373 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !72
  %374 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !77
  %375 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !81
  %376 = insertelement <4 x i32> poison, i32 %367, i64 0, !dbg !52
  %377 = insertelement <4 x i32> %376, i32 %358, i64 1, !dbg !52
  %378 = insertelement <4 x i32> %377, i32 %349, i64 2, !dbg !52
  %379 = insertelement <4 x i32> %378, i32 %340, i64 3, !dbg !52
  %380 = bitcast <4 x i32> %379 to <4 x float>, !dbg !52
  %381 = insertelement <4 x i32> poison, i32 %368, i64 0, !dbg !48
  %382 = insertelement <4 x i32> %381, i32 %359, i64 1, !dbg !48
  %383 = insertelement <4 x i32> %382, i32 %350, i64 2, !dbg !48
  %384 = insertelement <4 x i32> %383, i32 %341, i64 3, !dbg !48
  %385 = bitcast <4 x i32> %384 to <4 x float>, !dbg !48
  %386 = fcmp ogt <4 x float> %380, %385, !dbg !86
  %387 = insertelement <4 x i32> poison, i32 %370, i64 0, !dbg !62
  %388 = insertelement <4 x i32> %387, i32 %361, i64 1, !dbg !62
  %389 = insertelement <4 x i32> %388, i32 %352, i64 2, !dbg !62
  %390 = insertelement <4 x i32> %389, i32 %343, i64 3, !dbg !62
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !62
  %392 = fcmp uno <4 x float> %380, zeroinitializer, !dbg !90
  %393 = or <4 x i1> %386, %392, !dbg !91
  %.v = select <4 x i1> %393, <4 x i32> %379, <4 x i32> %384, !dbg !92
  %394 = bitcast <4 x i32> %.v to <4 x float>, !dbg !92
  %395 = insertelement <4 x i32> poison, i32 %369, i64 0, !dbg !58
  %396 = insertelement <4 x i32> %395, i32 %360, i64 1, !dbg !58
  %397 = insertelement <4 x i32> %396, i32 %351, i64 2, !dbg !58
  %398 = insertelement <4 x i32> %397, i32 %342, i64 3, !dbg !58
  %399 = bitcast <4 x i32> %398 to <4 x float>, !dbg !58
  %400 = fcmp olt <4 x float> %394, %399, !dbg !93
  %401 = fcmp uno <4 x float> %399, zeroinitializer, !dbg !95
  %402 = or <4 x i1> %401, %400, !dbg !96
  %.v36 = select <4 x i1> %402, <4 x i32> %398, <4 x i32> %.v, !dbg !97
  %403 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !97
  %404 = fcmp olt <4 x float> %403, %391, !dbg !98
  %405 = insertelement <4 x i32> poison, i32 %371, i64 0, !dbg !64
  %406 = insertelement <4 x i32> %405, i32 %362, i64 1, !dbg !64
  %407 = insertelement <4 x i32> %406, i32 %353, i64 2, !dbg !64
  %408 = insertelement <4 x i32> %407, i32 %344, i64 3, !dbg !64
  %409 = bitcast <4 x i32> %408 to <4 x float>, !dbg !64
  %410 = fcmp uno <4 x float> %391, zeroinitializer, !dbg !100
  %411 = or <4 x i1> %410, %404, !dbg !101
  %.v37 = select <4 x i1> %411, <4 x i32> %390, <4 x i32> %.v36, !dbg !102
  %412 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !102
  %413 = fcmp olt <4 x float> %412, %409, !dbg !103
  %414 = fcmp uno <4 x float> %409, zeroinitializer, !dbg !105
  %415 = or <4 x i1> %414, %413, !dbg !106
  %.v38 = select <4 x i1> %415, <4 x i32> %408, <4 x i32> %.v37, !dbg !107
  %416 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !107
  %417 = insertelement <4 x i32> poison, i32 %372, i64 0, !dbg !67
  %418 = insertelement <4 x i32> %417, i32 %363, i64 1, !dbg !67
  %419 = insertelement <4 x i32> %418, i32 %354, i64 2, !dbg !67
  %420 = insertelement <4 x i32> %419, i32 %345, i64 3, !dbg !67
  %421 = bitcast <4 x i32> %420 to <4 x float>, !dbg !67
  %422 = fcmp olt <4 x float> %416, %421, !dbg !108
  %423 = fcmp uno <4 x float> %421, zeroinitializer, !dbg !110
  %424 = or <4 x i1> %423, %422, !dbg !111
  %.v39 = select <4 x i1> %424, <4 x i32> %420, <4 x i32> %.v38, !dbg !112
  %425 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !112
  %426 = insertelement <4 x i32> poison, i32 %373, i64 0, !dbg !72
  %427 = insertelement <4 x i32> %426, i32 %364, i64 1, !dbg !72
  %428 = insertelement <4 x i32> %427, i32 %355, i64 2, !dbg !72
  %429 = insertelement <4 x i32> %428, i32 %346, i64 3, !dbg !72
  %430 = bitcast <4 x i32> %429 to <4 x float>, !dbg !72
  %431 = fcmp olt <4 x float> %425, %430, !dbg !113
  %432 = fcmp uno <4 x float> %430, zeroinitializer, !dbg !115
  %433 = or <4 x i1> %432, %431, !dbg !116
  %.v40 = select <4 x i1> %433, <4 x i32> %429, <4 x i32> %.v39, !dbg !117
  %434 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !117
  %435 = insertelement <4 x i32> poison, i32 %374, i64 0, !dbg !77
  %436 = insertelement <4 x i32> %435, i32 %365, i64 1, !dbg !77
  %437 = insertelement <4 x i32> %436, i32 %356, i64 2, !dbg !77
  %438 = insertelement <4 x i32> %437, i32 %347, i64 3, !dbg !77
  %439 = bitcast <4 x i32> %438 to <4 x float>, !dbg !77
  %440 = fcmp olt <4 x float> %434, %439, !dbg !118
  %441 = fcmp uno <4 x float> %439, zeroinitializer, !dbg !120
  %442 = or <4 x i1> %441, %440, !dbg !121
  %.v41 = select <4 x i1> %442, <4 x i32> %438, <4 x i32> %.v40, !dbg !122
  %443 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !122
  %444 = insertelement <4 x i32> poison, i32 %375, i64 0, !dbg !81
  %445 = insertelement <4 x i32> %444, i32 %366, i64 1, !dbg !81
  %446 = insertelement <4 x i32> %445, i32 %357, i64 2, !dbg !81
  %447 = insertelement <4 x i32> %446, i32 %348, i64 3, !dbg !81
  %448 = bitcast <4 x i32> %447 to <4 x float>, !dbg !81
  %449 = fcmp olt <4 x float> %443, %448, !dbg !123
  %450 = zext <4 x i1> %386 to <4 x i8>, !dbg !125
  %451 = select <4 x i1> %400, <4 x i8> splat (i8 2), <4 x i8> %450, !dbg !126
  %452 = select <4 x i1> %404, <4 x i8> splat (i8 3), <4 x i8> %451, !dbg !127
  %453 = select <4 x i1> %413, <4 x i8> splat (i8 4), <4 x i8> %452, !dbg !128
  %454 = select <4 x i1> %422, <4 x i8> splat (i8 5), <4 x i8> %453, !dbg !129
  %455 = select <4 x i1> %431, <4 x i8> splat (i8 6), <4 x i8> %454, !dbg !130
  %456 = select <4 x i1> %440, <4 x i8> splat (i8 7), <4 x i8> %455, !dbg !131
  %457 = select <4 x i1> %449, <4 x i8> splat (i8 8), <4 x i8> %456, !dbg !132
  %458 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !52
  %459 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !48
  %460 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !58
  %461 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !62
  %462 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !64
  %463 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !67
  %464 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !72
  %465 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !77
  %466 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !81
  %467 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !52
  %468 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !48
  %469 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !58
  %470 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !62
  %471 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !64
  %472 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !67
  %473 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !72
  %474 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !77
  %475 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !81
  %476 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !52
  %477 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !48
  %478 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !58
  %479 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !62
  %480 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !64
  %481 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !67
  %482 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !72
  %483 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !77
  %484 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !81
  %485 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !52
  %486 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !48
  %487 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !58
  %488 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !62
  %489 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !64
  %490 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !67
  %491 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !72
  %492 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !77
  %493 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !81
  %494 = insertelement <4 x i32> poison, i32 %485, i64 0, !dbg !52
  %495 = insertelement <4 x i32> %494, i32 %476, i64 1, !dbg !52
  %496 = insertelement <4 x i32> %495, i32 %467, i64 2, !dbg !52
  %497 = insertelement <4 x i32> %496, i32 %458, i64 3, !dbg !52
  %498 = bitcast <4 x i32> %497 to <4 x float>, !dbg !52
  %499 = insertelement <4 x i32> poison, i32 %486, i64 0, !dbg !48
  %500 = insertelement <4 x i32> %499, i32 %477, i64 1, !dbg !48
  %501 = insertelement <4 x i32> %500, i32 %468, i64 2, !dbg !48
  %502 = insertelement <4 x i32> %501, i32 %459, i64 3, !dbg !48
  %503 = bitcast <4 x i32> %502 to <4 x float>, !dbg !48
  %504 = fcmp ogt <4 x float> %498, %503, !dbg !86
  %505 = insertelement <4 x i32> poison, i32 %488, i64 0, !dbg !62
  %506 = insertelement <4 x i32> %505, i32 %479, i64 1, !dbg !62
  %507 = insertelement <4 x i32> %506, i32 %470, i64 2, !dbg !62
  %508 = insertelement <4 x i32> %507, i32 %461, i64 3, !dbg !62
  %509 = bitcast <4 x i32> %508 to <4 x float>, !dbg !62
  %510 = fcmp uno <4 x float> %498, zeroinitializer, !dbg !90
  %511 = or <4 x i1> %504, %510, !dbg !91
  %.v42 = select <4 x i1> %511, <4 x i32> %497, <4 x i32> %502, !dbg !92
  %512 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !92
  %513 = insertelement <4 x i32> poison, i32 %487, i64 0, !dbg !58
  %514 = insertelement <4 x i32> %513, i32 %478, i64 1, !dbg !58
  %515 = insertelement <4 x i32> %514, i32 %469, i64 2, !dbg !58
  %516 = insertelement <4 x i32> %515, i32 %460, i64 3, !dbg !58
  %517 = bitcast <4 x i32> %516 to <4 x float>, !dbg !58
  %518 = fcmp olt <4 x float> %512, %517, !dbg !93
  %519 = fcmp uno <4 x float> %517, zeroinitializer, !dbg !95
  %520 = or <4 x i1> %519, %518, !dbg !96
  %.v43 = select <4 x i1> %520, <4 x i32> %516, <4 x i32> %.v42, !dbg !97
  %521 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !97
  %522 = fcmp olt <4 x float> %521, %509, !dbg !98
  %523 = insertelement <4 x i32> poison, i32 %489, i64 0, !dbg !64
  %524 = insertelement <4 x i32> %523, i32 %480, i64 1, !dbg !64
  %525 = insertelement <4 x i32> %524, i32 %471, i64 2, !dbg !64
  %526 = insertelement <4 x i32> %525, i32 %462, i64 3, !dbg !64
  %527 = bitcast <4 x i32> %526 to <4 x float>, !dbg !64
  %528 = fcmp uno <4 x float> %509, zeroinitializer, !dbg !100
  %529 = or <4 x i1> %528, %522, !dbg !101
  %.v44 = select <4 x i1> %529, <4 x i32> %508, <4 x i32> %.v43, !dbg !102
  %530 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !102
  %531 = fcmp olt <4 x float> %530, %527, !dbg !103
  %532 = fcmp uno <4 x float> %527, zeroinitializer, !dbg !105
  %533 = or <4 x i1> %532, %531, !dbg !106
  %.v45 = select <4 x i1> %533, <4 x i32> %526, <4 x i32> %.v44, !dbg !107
  %534 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !107
  %535 = insertelement <4 x i32> poison, i32 %490, i64 0, !dbg !67
  %536 = insertelement <4 x i32> %535, i32 %481, i64 1, !dbg !67
  %537 = insertelement <4 x i32> %536, i32 %472, i64 2, !dbg !67
  %538 = insertelement <4 x i32> %537, i32 %463, i64 3, !dbg !67
  %539 = bitcast <4 x i32> %538 to <4 x float>, !dbg !67
  %540 = fcmp olt <4 x float> %534, %539, !dbg !108
  %541 = fcmp uno <4 x float> %539, zeroinitializer, !dbg !110
  %542 = or <4 x i1> %541, %540, !dbg !111
  %.v46 = select <4 x i1> %542, <4 x i32> %538, <4 x i32> %.v45, !dbg !112
  %543 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !112
  %544 = insertelement <4 x i32> poison, i32 %491, i64 0, !dbg !72
  %545 = insertelement <4 x i32> %544, i32 %482, i64 1, !dbg !72
  %546 = insertelement <4 x i32> %545, i32 %473, i64 2, !dbg !72
  %547 = insertelement <4 x i32> %546, i32 %464, i64 3, !dbg !72
  %548 = bitcast <4 x i32> %547 to <4 x float>, !dbg !72
  %549 = fcmp olt <4 x float> %543, %548, !dbg !113
  %550 = fcmp uno <4 x float> %548, zeroinitializer, !dbg !115
  %551 = or <4 x i1> %550, %549, !dbg !116
  %.v47 = select <4 x i1> %551, <4 x i32> %547, <4 x i32> %.v46, !dbg !117
  %552 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !117
  %553 = insertelement <4 x i32> poison, i32 %492, i64 0, !dbg !77
  %554 = insertelement <4 x i32> %553, i32 %483, i64 1, !dbg !77
  %555 = insertelement <4 x i32> %554, i32 %474, i64 2, !dbg !77
  %556 = insertelement <4 x i32> %555, i32 %465, i64 3, !dbg !77
  %557 = bitcast <4 x i32> %556 to <4 x float>, !dbg !77
  %558 = fcmp olt <4 x float> %552, %557, !dbg !118
  %559 = fcmp uno <4 x float> %557, zeroinitializer, !dbg !120
  %560 = or <4 x i1> %559, %558, !dbg !121
  %.v48 = select <4 x i1> %560, <4 x i32> %556, <4 x i32> %.v47, !dbg !122
  %561 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !122
  %562 = insertelement <4 x i32> poison, i32 %493, i64 0, !dbg !81
  %563 = insertelement <4 x i32> %562, i32 %484, i64 1, !dbg !81
  %564 = insertelement <4 x i32> %563, i32 %475, i64 2, !dbg !81
  %565 = insertelement <4 x i32> %564, i32 %466, i64 3, !dbg !81
  %566 = bitcast <4 x i32> %565 to <4 x float>, !dbg !81
  %567 = fcmp olt <4 x float> %561, %566, !dbg !123
  %568 = zext <4 x i1> %504 to <4 x i8>, !dbg !125
  %569 = select <4 x i1> %518, <4 x i8> splat (i8 2), <4 x i8> %568, !dbg !126
  %570 = select <4 x i1> %522, <4 x i8> splat (i8 3), <4 x i8> %569, !dbg !127
  %571 = select <4 x i1> %531, <4 x i8> splat (i8 4), <4 x i8> %570, !dbg !128
  %572 = select <4 x i1> %540, <4 x i8> splat (i8 5), <4 x i8> %571, !dbg !129
  %573 = select <4 x i1> %549, <4 x i8> splat (i8 6), <4 x i8> %572, !dbg !130
  %574 = select <4 x i1> %558, <4 x i8> splat (i8 7), <4 x i8> %573, !dbg !131
  %575 = select <4 x i1> %567, <4 x i8> splat (i8 8), <4 x i8> %574, !dbg !132
  %576 = bitcast i32 %348 to float, !dbg !133
  %577 = fcmp uno float %576, 0.000000e+00, !dbg !133
  %578 = extractelement <4 x i1> %449, i64 3, !dbg !134
  %579 = or i1 %577, %578, !dbg !134
  %580 = extractelement <4 x float> %443, i64 3, !dbg !135
  %581 = select i1 %579, float %576, float %580, !dbg !135
  %582 = bitcast i32 %357 to float, !dbg !133
  %583 = fcmp uno float %582, 0.000000e+00, !dbg !133
  %584 = extractelement <4 x i1> %449, i64 2, !dbg !134
  %585 = or i1 %583, %584, !dbg !134
  %586 = extractelement <4 x float> %443, i64 2, !dbg !135
  %587 = select i1 %585, float %582, float %586, !dbg !135
  %588 = bitcast i32 %366 to float, !dbg !133
  %589 = fcmp uno float %588, 0.000000e+00, !dbg !133
  %590 = extractelement <4 x i1> %449, i64 1, !dbg !134
  %591 = or i1 %589, %590, !dbg !134
  %592 = extractelement <4 x float> %443, i64 1, !dbg !135
  %593 = select i1 %591, float %588, float %592, !dbg !135
  %594 = bitcast i32 %375 to float, !dbg !133
  %595 = fcmp uno float %594, 0.000000e+00, !dbg !133
  %596 = extractelement <4 x i1> %449, i64 0, !dbg !134
  %597 = or i1 %595, %596, !dbg !134
  %598 = extractelement <4 x float> %443, i64 0, !dbg !135
  %599 = select i1 %597, float %594, float %598, !dbg !135
  %600 = bitcast i32 %466 to float, !dbg !133
  %601 = fcmp uno float %600, 0.000000e+00, !dbg !133
  %602 = extractelement <4 x i1> %567, i64 3, !dbg !134
  %603 = or i1 %601, %602, !dbg !134
  %604 = extractelement <4 x float> %561, i64 3, !dbg !135
  %605 = select i1 %603, float %600, float %604, !dbg !135
  %606 = bitcast i32 %475 to float, !dbg !133
  %607 = fcmp uno float %606, 0.000000e+00, !dbg !133
  %608 = extractelement <4 x i1> %567, i64 2, !dbg !134
  %609 = or i1 %607, %608, !dbg !134
  %610 = extractelement <4 x float> %561, i64 2, !dbg !135
  %611 = select i1 %609, float %606, float %610, !dbg !135
  %612 = bitcast i32 %484 to float, !dbg !133
  %613 = fcmp uno float %612, 0.000000e+00, !dbg !133
  %614 = extractelement <4 x i1> %567, i64 1, !dbg !134
  %615 = or i1 %613, %614, !dbg !134
  %616 = extractelement <4 x float> %561, i64 1, !dbg !135
  %617 = select i1 %615, float %612, float %616, !dbg !135
  %618 = bitcast i32 %493 to float, !dbg !133
  %619 = fcmp uno float %618, 0.000000e+00, !dbg !133
  %620 = extractelement <4 x i1> %567, i64 0, !dbg !134
  %621 = or i1 %619, %620, !dbg !134
  %622 = extractelement <4 x float> %561, i64 0, !dbg !135
  %623 = select i1 %621, float %618, float %622, !dbg !135
  %624 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !30
  %625 = bitcast i32 %624 to float, !dbg !30
  %626 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !30
  %627 = bitcast i32 %626 to float, !dbg !30
  %628 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !30
  %629 = bitcast i32 %628 to float, !dbg !30
  %630 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !30
  %631 = bitcast i32 %630 to float, !dbg !30
  %632 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !30
  %633 = bitcast i32 %632 to float, !dbg !30
  %634 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !30
  %635 = bitcast i32 %634 to float, !dbg !30
  %636 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !30
  %637 = bitcast i32 %636 to float, !dbg !30
  %638 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !30
  %639 = bitcast i32 %638 to float, !dbg !30
  %640 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %641 = bitcast i32 %640 to float, !dbg !28
  %642 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %643 = bitcast i32 %642 to float, !dbg !28
  %644 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %645 = bitcast i32 %644 to float, !dbg !28
  %646 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %647 = bitcast i32 %646 to float, !dbg !28
  %648 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !28
  %649 = bitcast i32 %648 to float, !dbg !28
  %650 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !28
  %651 = bitcast i32 %650 to float, !dbg !28
  %652 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !28
  %653 = bitcast i32 %652 to float, !dbg !28
  %654 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !28
  %655 = bitcast i32 %654 to float, !dbg !28
  %656 = shl i32 %15, 2, !dbg !13
  %657 = and i32 %656, 508, !dbg !13
  %658 = or disjoint i32 %657, 512, !dbg !13
  %659 = or disjoint i32 %14, %658, !dbg !14
  %660 = add i32 %659, %23, !dbg !18
  %661 = sext i32 %660 to i64, !dbg !19
  %662 = getelementptr float, ptr addrspace(1) %0, i64 %661, !dbg !19
  %663 = or disjoint i32 %14, %657, !dbg !14
  %664 = add i32 %663, %23, !dbg !18
  %665 = sext i32 %664 to i64, !dbg !19
  %666 = getelementptr float, ptr addrspace(1) %0, i64 %665, !dbg !19
  %.frozen = freeze i32 %12, !dbg !136
  %667 = sdiv i32 %.frozen, 256, !dbg !136
  %668 = mul i32 %667, 256, !dbg !137
  %.decomposed = sub i32 %.frozen, %668, !dbg !137
  %669 = and i32 %15, 127, !dbg !13
  %670 = or disjoint i32 %669, 896, !dbg !13
  %671 = or disjoint i32 %14, %670, !dbg !14
  %672 = icmp slt i32 %671, 728, !dbg !15
  %673 = or disjoint i32 %669, 768, !dbg !13
  %674 = or disjoint i32 %14, %673, !dbg !14
  %675 = icmp slt i32 %674, 728, !dbg !15
  %676 = or disjoint i32 %669, 640, !dbg !13
  %677 = or disjoint i32 %14, %676, !dbg !14
  %678 = icmp slt i32 %677, 728, !dbg !15
  %679 = or disjoint i32 %669, 512, !dbg !13
  %680 = or disjoint i32 %14, %679, !dbg !14
  %681 = icmp slt i32 %680, 728, !dbg !15
  %682 = or disjoint i32 %669, 384, !dbg !13
  %683 = or disjoint i32 %14, %682, !dbg !14
  %684 = icmp slt i32 %683, 728, !dbg !15
  %685 = or disjoint i32 %669, 256, !dbg !13
  %686 = or disjoint i32 %14, %685, !dbg !14
  %687 = icmp slt i32 %686, 728, !dbg !15
  %688 = or disjoint i32 %669, 128, !dbg !13
  %689 = or disjoint i32 %14, %688, !dbg !14
  %690 = icmp slt i32 %689, 728, !dbg !15
  %691 = or disjoint i32 %14, %669, !dbg !14
  %692 = icmp slt i32 %691, 728, !dbg !15
  %693 = icmp slt i32 %659, 728, !dbg !15
  %694 = icmp slt i32 %663, 728, !dbg !15
  %695 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !138
  %696 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !138
  %697 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !138
  %698 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !138
  %699 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !138
  %700 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !138
  %701 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !138
  %702 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !138
  %703 = fmul float %339, %695, !dbg !139
  %704 = fmul float %331, %696, !dbg !139
  %705 = fmul float %323, %697, !dbg !139
  %706 = fmul float %315, %698, !dbg !139
  %707 = fmul float %307, %699, !dbg !139
  %708 = fmul float %299, %700, !dbg !139
  %709 = fmul float %291, %701, !dbg !139
  %710 = fmul float %283, %702, !dbg !139
  %711 = fmul float %703, %655, !dbg !140
  %712 = fmul float %704, %653, !dbg !140
  %713 = fmul float %705, %651, !dbg !140
  %714 = fmul float %706, %649, !dbg !140
  %715 = fmul float %707, %647, !dbg !140
  %716 = fmul float %708, %645, !dbg !140
  %717 = fmul float %709, %643, !dbg !140
  %718 = fmul float %710, %641, !dbg !140
  %719 = fadd float %711, %639, !dbg !141
  %720 = fadd float %712, %637, !dbg !141
  %721 = fadd float %713, %635, !dbg !141
  %722 = fadd float %714, %633, !dbg !141
  %723 = fadd float %715, %631, !dbg !141
  %724 = fadd float %716, %629, !dbg !141
  %725 = fadd float %717, %627, !dbg !141
  %726 = fadd float %718, %625, !dbg !141
  %727 = fadd float %623, %719, !dbg !142
  %728 = fadd float %617, %720, !dbg !142
  %729 = fadd float %611, %721, !dbg !142
  %730 = fadd float %605, %722, !dbg !142
  %731 = fadd float %599, %723, !dbg !142
  %732 = fadd float %593, %724, !dbg !142
  %733 = fadd float %587, %725, !dbg !142
  %734 = fadd float %581, %726, !dbg !142
  %735 = getelementptr i8, ptr addrspace(1) %7, i64 %26, !dbg !143
  %736 = bitcast <4 x i8> %575 to i32, !dbg !144
  %737 = bitcast <4 x i8> %457 to i32, !dbg !144
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %736, i32 %737, ptr addrspace(1) %735, i1 %21) #4, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %738 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !146
  %739 = bitcast float %336 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %738, <1 x i32> %739, i1 true) #4, !dbg !146
  %740 = or disjoint i32 %17, 1, !dbg !146
  %741 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %740, !dbg !146
  %742 = bitcast float %328 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %741, <1 x i32> %742, i1 true) #4, !dbg !146
  %743 = or disjoint i32 %17, 2, !dbg !146
  %744 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %743, !dbg !146
  %745 = bitcast float %320 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %744, <1 x i32> %745, i1 true) #4, !dbg !146
  %746 = or disjoint i32 %17, 3, !dbg !146
  %747 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %746, !dbg !146
  %748 = bitcast float %312 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %747, <1 x i32> %748, i1 true) #4, !dbg !146
  %749 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !146
  %750 = bitcast float %304 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %749, <1 x i32> %750, i1 true) #4, !dbg !146
  %751 = or disjoint i32 %17, 5, !dbg !146
  %752 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %751, !dbg !146
  %753 = bitcast float %296 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %752, <1 x i32> %753, i1 true) #4, !dbg !146
  %754 = or disjoint i32 %17, 6, !dbg !146
  %755 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %754, !dbg !146
  %756 = bitcast float %288 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %755, <1 x i32> %756, i1 true) #4, !dbg !146
  %757 = or disjoint i32 %17, 7, !dbg !146
  %758 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %757, !dbg !146
  %759 = bitcast float %280 to <1 x i32>, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %758, <1 x i32> %759, i1 true) #4, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %760 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %657, !dbg !146
  %761 = load i32, ptr addrspace(3) %760, align 16, !dbg !146
  %762 = or disjoint i32 %657, 1, !dbg !146
  %763 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %762, !dbg !146
  %764 = load i32, ptr addrspace(3) %763, align 4, !dbg !146
  %765 = or disjoint i32 %657, 2, !dbg !146
  %766 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %765, !dbg !146
  %767 = load i32, ptr addrspace(3) %766, align 8, !dbg !146
  %768 = or disjoint i32 %657, 3, !dbg !146
  %769 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %768, !dbg !146
  %770 = load i32, ptr addrspace(3) %769, align 4, !dbg !146
  %771 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %658, !dbg !146
  %772 = load i32, ptr addrspace(3) %771, align 16, !dbg !146
  %773 = or disjoint i32 %657, 513, !dbg !146
  %774 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %773, !dbg !146
  %775 = load i32, ptr addrspace(3) %774, align 4, !dbg !146
  %776 = or disjoint i32 %657, 514, !dbg !146
  %777 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %776, !dbg !146
  %778 = load i32, ptr addrspace(3) %777, align 8, !dbg !146
  %779 = or disjoint i32 %657, 515, !dbg !146
  %780 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %779, !dbg !146
  %781 = load i32, ptr addrspace(3) %780, align 4, !dbg !146
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %761, i32 %764, i32 %767, i32 %770, ptr addrspace(1) %666, i1 %694) #4, !dbg !146
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %772, i32 %775, i32 %778, i32 %781, ptr addrspace(1) %662, i1 %693) #4, !dbg !146
  %782 = shl i32 %691, 8, !dbg !147
  %783 = shl i32 %689, 8, !dbg !147
  %784 = shl i32 %686, 8, !dbg !147
  %785 = shl i32 %683, 8, !dbg !147
  %786 = shl i32 %680, 8, !dbg !147
  %787 = shl i32 %677, 8, !dbg !147
  %788 = shl i32 %674, 8, !dbg !147
  %789 = shl i32 %671, 8, !dbg !147
  %790 = mul i32 %667, 186368, !dbg !148
  %791 = add i32 %790, %.decomposed, !dbg !149
  %792 = add i32 %791, %782, !dbg !150
  %793 = add i32 %791, %783, !dbg !150
  %794 = add i32 %791, %784, !dbg !150
  %795 = add i32 %791, %785, !dbg !150
  %796 = add i32 %791, %786, !dbg !150
  %797 = add i32 %791, %787, !dbg !150
  %798 = add i32 %791, %788, !dbg !150
  %799 = add i32 %791, %789, !dbg !150
  %800 = sext i32 %792 to i64, !dbg !151
  %801 = getelementptr float, ptr addrspace(1) %8, i64 %800, !dbg !151
  %802 = sext i32 %793 to i64, !dbg !151
  %803 = getelementptr float, ptr addrspace(1) %8, i64 %802, !dbg !151
  %804 = sext i32 %794 to i64, !dbg !151
  %805 = getelementptr float, ptr addrspace(1) %8, i64 %804, !dbg !151
  %806 = sext i32 %795 to i64, !dbg !151
  %807 = getelementptr float, ptr addrspace(1) %8, i64 %806, !dbg !151
  %808 = sext i32 %796 to i64, !dbg !151
  %809 = getelementptr float, ptr addrspace(1) %8, i64 %808, !dbg !151
  %810 = sext i32 %797 to i64, !dbg !151
  %811 = getelementptr float, ptr addrspace(1) %8, i64 %810, !dbg !151
  %812 = sext i32 %798 to i64, !dbg !151
  %813 = getelementptr float, ptr addrspace(1) %8, i64 %812, !dbg !151
  %814 = sext i32 %799 to i64, !dbg !151
  %815 = getelementptr float, ptr addrspace(1) %8, i64 %814, !dbg !151
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %816 = bitcast float %727 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %738, <1 x i32> %816, i1 true) #4, !dbg !152
  %817 = bitcast float %728 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %741, <1 x i32> %817, i1 true) #4, !dbg !152
  %818 = bitcast float %729 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %744, <1 x i32> %818, i1 true) #4, !dbg !152
  %819 = bitcast float %730 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %747, <1 x i32> %819, i1 true) #4, !dbg !152
  %820 = bitcast float %731 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %749, <1 x i32> %820, i1 true) #4, !dbg !152
  %821 = bitcast float %732 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %752, <1 x i32> %821, i1 true) #4, !dbg !152
  %822 = bitcast float %733 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %755, <1 x i32> %822, i1 true) #4, !dbg !152
  %823 = bitcast float %734 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %758, <1 x i32> %823, i1 true) #4, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %824 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %669, !dbg !152
  %825 = load i32, ptr addrspace(3) %824, align 4, !dbg !152
  %826 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %688, !dbg !152
  %827 = load i32, ptr addrspace(3) %826, align 4, !dbg !152
  %828 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %685, !dbg !152
  %829 = load i32, ptr addrspace(3) %828, align 4, !dbg !152
  %830 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %682, !dbg !152
  %831 = load i32, ptr addrspace(3) %830, align 4, !dbg !152
  %832 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %679, !dbg !152
  %833 = load i32, ptr addrspace(3) %832, align 4, !dbg !152
  %834 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %676, !dbg !152
  %835 = load i32, ptr addrspace(3) %834, align 4, !dbg !152
  %836 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %673, !dbg !152
  %837 = load i32, ptr addrspace(3) %836, align 4, !dbg !152
  %838 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %670, !dbg !152
  %839 = load i32, ptr addrspace(3) %838, align 4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %825, ptr addrspace(1) %801, i1 %692) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %827, ptr addrspace(1) %803, i1 %690) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %829, ptr addrspace(1) %805, i1 %687) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %831, ptr addrspace(1) %807, i1 %684) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %833, ptr addrspace(1) %809, i1 %681) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %835, ptr addrspace(1) %811, i1 %678) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %837, ptr addrspace(1) %813, i1 %675) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %839, ptr addrspace(1) %815, i1 %672) #4, !dbg !152
  ret void, !dbg !153
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ktk7o3iszzameqeugdr3imivwcvh4sg3ao45lshs54pswdywpt.py", directory: "inductor_cache/2k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 40, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 51, column: 47, scope: !7)
!32 = !DILocation(line: 51, column: 31, scope: !7)
!33 = !DILocation(line: 57, column: 47, scope: !7)
!34 = !DILocation(line: 57, column: 31, scope: !7)
!35 = !DILocation(line: 64, column: 47, scope: !7)
!36 = !DILocation(line: 64, column: 31, scope: !7)
!37 = !DILocation(line: 71, column: 45, scope: !7)
!38 = !DILocation(line: 71, column: 31, scope: !7)
!39 = !DILocation(line: 74, column: 31, scope: !7)
!40 = !DILocation(line: 77, column: 42, scope: !7)
!41 = !DILocation(line: 77, column: 31, scope: !7)
!42 = !DILocation(line: 28, column: 27, scope: !7)
!43 = !DILocation(line: 73, column: 20, scope: !7)
!44 = !DILocation(line: 42, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 19, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 64, scope: !7)
!48 = !DILocation(line: 51, column: 56, scope: !7)
!49 = !DILocation(line: 53, column: 21, scope: !7)
!50 = !DILocation(line: 56, column: 19, scope: !7)
!51 = !DILocation(line: 57, column: 64, scope: !7)
!52 = !DILocation(line: 57, column: 56, scope: !7)
!53 = !DILocation(line: 82, column: 20, scope: !7)
!54 = !DILocation(line: 89, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 19, scope: !7)
!57 = !DILocation(line: 64, column: 64, scope: !7)
!58 = !DILocation(line: 64, column: 56, scope: !7)
!59 = !DILocation(line: 67, column: 21, scope: !7)
!60 = !DILocation(line: 70, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 62, scope: !7)
!62 = !DILocation(line: 71, column: 54, scope: !7)
!63 = !DILocation(line: 74, column: 53, scope: !7)
!64 = !DILocation(line: 74, column: 45, scope: !7)
!65 = !DILocation(line: 76, column: 20, scope: !7)
!66 = !DILocation(line: 77, column: 59, scope: !7)
!67 = !DILocation(line: 77, column: 51, scope: !7)
!68 = !DILocation(line: 83, column: 20, scope: !7)
!69 = !DILocation(line: 84, column: 44, scope: !7)
!70 = !DILocation(line: 84, column: 31, scope: !7)
!71 = !DILocation(line: 84, column: 61, scope: !7)
!72 = !DILocation(line: 84, column: 53, scope: !7)
!73 = !DILocation(line: 86, column: 20, scope: !7)
!74 = !DILocation(line: 87, column: 44, scope: !7)
!75 = !DILocation(line: 87, column: 31, scope: !7)
!76 = !DILocation(line: 87, column: 61, scope: !7)
!77 = !DILocation(line: 87, column: 53, scope: !7)
!78 = !DILocation(line: 90, column: 44, scope: !7)
!79 = !DILocation(line: 90, column: 31, scope: !7)
!80 = !DILocation(line: 90, column: 61, scope: !7)
!81 = !DILocation(line: 90, column: 53, scope: !7)
!82 = !DILocation(line: 120, column: 20, scope: !7)
!83 = !DILocation(line: 121, column: 27, scope: !7)
!84 = !DILocation(line: 117, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 20, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 58, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !94)
!94 = !DILocation(line: 65, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !99)
!99 = !DILocation(line: 72, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !104)
!104 = !DILocation(line: 75, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !109)
!109 = !DILocation(line: 78, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !114)
!114 = !DILocation(line: 85, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !119)
!119 = !DILocation(line: 88, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !124)
!124 = !DILocation(line: 91, column: 42, scope: !7)
!125 = !DILocation(line: 95, column: 35, scope: !7)
!126 = !DILocation(line: 98, column: 35, scope: !7)
!127 = !DILocation(line: 101, column: 35, scope: !7)
!128 = !DILocation(line: 104, column: 35, scope: !7)
!129 = !DILocation(line: 107, column: 35, scope: !7)
!130 = !DILocation(line: 110, column: 35, scope: !7)
!131 = !DILocation(line: 113, column: 35, scope: !7)
!132 = !DILocation(line: 116, column: 35, scope: !7)
!133 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !124)
!134 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !124)
!135 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !124)
!136 = !DILocation(line: 32, column: 19, scope: !7)
!137 = !DILocation(line: 33, column: 19, scope: !7)
!138 = !DILocation(line: 123, column: 20, scope: !7)
!139 = !DILocation(line: 126, column: 20, scope: !7)
!140 = !DILocation(line: 127, column: 20, scope: !7)
!141 = !DILocation(line: 128, column: 20, scope: !7)
!142 = !DILocation(line: 129, column: 20, scope: !7)
!143 = !DILocation(line: 130, column: 25, scope: !7)
!144 = !DILocation(line: 130, column: 46, scope: !7)
!145 = !DILocation(line: 131, column: 4, scope: !7)
!146 = !DILocation(line: 132, column: 49, scope: !7)
!147 = !DILocation(line: 133, column: 34, scope: !7)
!148 = !DILocation(line: 133, column: 46, scope: !7)
!149 = !DILocation(line: 133, column: 30, scope: !7)
!150 = !DILocation(line: 133, column: 39, scope: !7)
!151 = !DILocation(line: 133, column: 25, scope: !7)
!152 = !DILocation(line: 133, column: 58, scope: !7)
!153 = !DILocation(line: 133, column: 4, scope: !7)
