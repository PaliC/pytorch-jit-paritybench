; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = and i32 %8, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 2, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 124, !dbg !12
  %15 = and i32 %8, 127, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %16, 64, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = or disjoint i32 %7, %15, !dbg !13
  %20 = icmp slt i32 %16, 128, !dbg !14
  %21 = icmp slt i32 %17, 128, !dbg !14
  %22 = icmp slt i32 %18, 128, !dbg !14
  %23 = icmp slt i32 %19, 128, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 3, !dbg !16
  %.lobit23 = lshr i32 %8, 5, !dbg !17
  %26 = and i32 %.lobit23, 3, !dbg !17
  %27 = or disjoint i32 %25, %12, !dbg !18
  %28 = or disjoint i32 %25, %26, !dbg !18
  %29 = or disjoint i32 %28, 4, !dbg !18
  %30 = icmp slt i32 %27, 576, !dbg !19
  %31 = icmp slt i32 %28, 576, !dbg !19
  %32 = icmp slt i32 %29, 576, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %33 = sdiv i32 %.frozen, 32, !dbg !20
  %34 = mul i32 %33, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %35 = srem i32 %19, 32, !dbg !21
  %36 = mul i32 %16, 576, !dbg !22
  %37 = mul i32 %17, 576, !dbg !22
  %38 = add i32 %27, %36, !dbg !23
  %39 = add i32 %27, %37, !dbg !23
  %40 = sext i32 %38 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %39 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = and i1 %20, %30, !dbg !25
  %45 = and i1 %21, %30, !dbg !25
  %46 = and i1 %22, %31, !dbg !25
  %47 = and i1 %32, %22, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %44) #2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %45) #2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = shl nuw nsw i32 %11, 9, !dbg !26
  %59 = or disjoint i32 %58, %10, !dbg !26
  %60 = and i32 %13, 508, !dbg !26
  %.idx = shl nuw nsw i32 %11, 6, !dbg !26
  %61 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !26
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %59, !dbg !26
  %63 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !26
  %64 = or disjoint i32 %59, 128, !dbg !26
  %65 = lshr i32 %64, 5, !dbg !26
  %66 = and i32 %65, 20, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !26
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %64, !dbg !26
  %69 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !26
  %70 = or disjoint i32 %59, 256, !dbg !26
  %71 = lshr i32 %70, 5, !dbg !26
  %72 = and i32 %71, 24, !dbg !26
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !26
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %70, !dbg !26
  %75 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !26
  %76 = or disjoint i32 %59, 384, !dbg !26
  %77 = lshr i32 %76, 5, !dbg !26
  %78 = and i32 %77, 28, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %76, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !26
  %82 = or disjoint i32 %59, 64, !dbg !26
  %83 = getelementptr float, ptr addrspace(3) %61, i32 %82, !dbg !26
  %84 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !26
  %85 = or disjoint i32 %59, 192, !dbg !26
  %86 = lshr i32 %85, 5, !dbg !26
  %87 = and i32 %86, 20, !dbg !26
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !26
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %85, !dbg !26
  %90 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !26
  %91 = or disjoint i32 %59, 320, !dbg !26
  %92 = lshr i32 %91, 5, !dbg !26
  %93 = and i32 %92, 24, !dbg !26
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !26
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %91, !dbg !26
  %96 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !26
  %97 = or disjoint i32 %59, 448, !dbg !26
  %98 = lshr i32 %97, 5, !dbg !26
  %99 = and i32 %98, 28, !dbg !26
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !26
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %97, !dbg !26
  %102 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %103 = lshr i32 %13, 5, !dbg !26
  %104 = and i32 %103, 12, !dbg !26
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !26
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %60, !dbg !26
  %107 = load float, ptr addrspace(3) %106, align 16, !dbg !26
  %108 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 4, !dbg !26
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !26
  %110 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 8, !dbg !26
  %111 = load float, ptr addrspace(3) %110, align 8, !dbg !26
  %112 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 12, !dbg !26
  %113 = load float, ptr addrspace(3) %112, align 4, !dbg !26
  %114 = or disjoint i32 %60, 512, !dbg !26
  %115 = lshr i32 %114, 5, !dbg !26
  %116 = and i32 %115, 28, !dbg !26
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !26
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %114, !dbg !26
  %119 = load float, ptr addrspace(3) %118, align 16, !dbg !26
  %120 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 4, !dbg !26
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !26
  %122 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 8, !dbg !26
  %123 = load float, ptr addrspace(3) %122, align 8, !dbg !26
  %124 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 12, !dbg !26
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !26
  %126 = sext i32 %35 to i64, !dbg !27
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %23) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !29
  %130 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !29
  %132 = load float, ptr addrspace(3) %131, align 16, !dbg !29
  %133 = getelementptr inbounds i8, ptr addrspace(3) %131, i32 4, !dbg !29
  %134 = load float, ptr addrspace(3) %133, align 4, !dbg !29
  %135 = getelementptr inbounds i8, ptr addrspace(3) %131, i32 8, !dbg !29
  %136 = load float, ptr addrspace(3) %135, align 8, !dbg !29
  %137 = getelementptr inbounds i8, ptr addrspace(3) %131, i32 12, !dbg !29
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !29
  %139 = fadd float %107, %132, !dbg !29
  %140 = fadd float %109, %134, !dbg !29
  %141 = fadd float %111, %136, !dbg !29
  %142 = fadd float %113, %138, !dbg !29
  %143 = fadd float %119, %132, !dbg !29
  %144 = fadd float %121, %134, !dbg !29
  %145 = fadd float %123, %136, !dbg !29
  %146 = fadd float %125, %138, !dbg !29
  %147 = shl i32 %28, 5, !dbg !30
  %148 = shl i32 %29, 5, !dbg !30
  %149 = mul i32 %33, 18432, !dbg !31
  %150 = add i32 %149, %.decomposed, !dbg !32
  %151 = add i32 %150, %147, !dbg !33
  %152 = add i32 %150, %148, !dbg !33
  %153 = sext i32 %151 to i64, !dbg !34
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !34
  %155 = sext i32 %152 to i64, !dbg !34
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !34
  %157 = bitcast float %139 to i32, !dbg !35
  %158 = bitcast float %140 to i32, !dbg !35
  %159 = bitcast float %141 to i32, !dbg !35
  %160 = bitcast float %142 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %158, i32 %159, i32 %160, ptr addrspace(1) %154, i1 %46) #2, !dbg !35
  %161 = bitcast float %143 to i32, !dbg !35
  %162 = bitcast float %144 to i32, !dbg !35
  %163 = bitcast float %145 to i32, !dbg !35
  %164 = bitcast float %146 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %161, i32 %162, i32 %163, i32 %164, ptr addrspace(1) %156, i1 %47) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpzrn4m5hgkv7qrqfldtmffoiftvvqj6xuuzdaudvdl3yss5n6nu.py", directory: "inductor_cache/pz")
!4 = !{ptr @triton_poi_fused_convolution_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_5", linkageName: "triton_poi_fused_convolution_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 33, scope: !7)
!31 = !DILocation(line: 35, column: 44, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 38, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 55, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
