; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp31 < 13\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp22 < 32\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp13 < 7\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp5 < 24\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 8, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 1, !dbg !14
  %12 = and i32 %11, 254, !dbg !14
  %13 = or disjoint i32 %9, %12, !dbg !15
  %14 = icmp slt i32 %13, 256, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %15 = sdiv i32 %.frozen, 4, !dbg !17
  %16 = srem i32 %15, 4, !dbg !18
  %17 = sdiv i32 %13, 16, !dbg !19
  %18 = shl nsw i32 %17, 4, !dbg !20
  %19 = add i32 %18, %16, !dbg !21
  %20 = add i32 %19, 12, !dbg !22
  %21 = sext i32 %20 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !23
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %14) #3, !dbg !24
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %14) #3, !dbg !24
  %25 = add i32 %19, 8, !dbg !25
  %26 = sext i32 %25 to i64, !dbg !26
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !26
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #3, !dbg !27
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #3, !dbg !27
  %30 = add i32 %19, 4, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !30
  %35 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !30
  %36 = insertelement <2 x i32> %35, i32 %33, i64 1, !dbg !30
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !30
  %38 = sext i32 %19 to i64, !dbg !31
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %14) #3, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %14) #3, !dbg !32
  %42 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !32
  %43 = insertelement <2 x i32> %42, i32 %41, i64 1, !dbg !32
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !32
  %45 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !24
  %46 = insertelement <2 x i32> %45, i32 %24, i64 1, !dbg !24
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !24
  %48 = fptosi <2 x float> %47 to <2 x i64>, !dbg !33
  %49 = add <2 x i64> %48, splat (i64 24), !dbg !34
  %50 = icmp slt <2 x i64> %48, zeroinitializer, !dbg !35
  %51 = select <2 x i1> %50, <2 x i64> %49, <2 x i64> %48, !dbg !36
  %52 = icmp ugt <2 x i64> %51, splat (i64 23), !dbg !37
  %shift = shufflevector <2 x i1> %52, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %53 = or <2 x i1> %52, %shift, !dbg !38
  %.not13 = extractelement <2 x i1> %53, i64 0, !dbg !38
  %54 = and i1 %14, %.not13, !dbg !38
  br i1 %54, label %55, label %56, !dbg !38

55:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 37, ptr nonnull @assertFunc_0, i64 1), !dbg !38
  unreachable, !dbg !38

56:                                               ; preds = %7
  %57 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !27
  %58 = insertelement <2 x i32> %57, i32 %29, i64 1, !dbg !27
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !27
  %60 = or disjoint i32 %13, 1, !dbg !15
  %61 = srem i32 %60, 4, !dbg !39
  %62 = mul i32 %15, 4, !dbg !39
  %.decomposed = sub i32 %.frozen, %62, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %63 = sext i32 %.decomposed to i64, !dbg !40
  %64 = sext i32 %61 to i64, !dbg !40
  %65 = extractelement <2 x i64> %51, i64 0, !dbg !41
  %.idx = shl i64 %65, 4, !dbg !41
  %66 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %63, !dbg !41
  %68 = extractelement <2 x i64> %51, i64 1, !dbg !41
  %.idx4 = shl i64 %68, 4, !dbg !41
  %69 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx4, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %64, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %14) #3, !dbg !42
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %14) #3, !dbg !42
  %73 = fptosi <2 x float> %59 to <2 x i64>, !dbg !43
  %74 = add <2 x i64> %73, splat (i64 7), !dbg !44
  %75 = icmp slt <2 x i64> %73, zeroinitializer, !dbg !45
  %76 = select <2 x i1> %75, <2 x i64> %74, <2 x i64> %73, !dbg !46
  %77 = icmp ugt <2 x i64> %76, splat (i64 6), !dbg !47
  %shift20 = shufflevector <2 x i1> %77, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %78 = or <2 x i1> %77, %shift20, !dbg !48
  %.not57 = extractelement <2 x i1> %78, i64 0, !dbg !48
  %79 = and i1 %14, %.not57, !dbg !48
  br i1 %79, label %80, label %81, !dbg !48

80:                                               ; preds = %56
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 44, ptr nonnull @assertFunc_1, i64 1), !dbg !48
  unreachable, !dbg !48

81:                                               ; preds = %56
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %82 = extractelement <2 x i64> %76, i64 0, !dbg !49
  %.idx8 = shl i64 %82, 4, !dbg !49
  %83 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx8, !dbg !49
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %63, !dbg !49
  %85 = extractelement <2 x i64> %76, i64 1, !dbg !49
  %.idx9 = shl i64 %85, 4, !dbg !49
  %86 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx9, !dbg !49
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %64, !dbg !49
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %14) #3, !dbg !50
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %14) #3, !dbg !50
  %90 = fptosi <2 x float> %37 to <2 x i64>, !dbg !51
  %91 = lshr <2 x i64> %90, splat (i64 58), !dbg !52
  %92 = and <2 x i64> %91, splat (i64 32), !dbg !52
  %93 = add <2 x i64> %92, %90, !dbg !52
  %94 = extractelement <2 x i64> %93, i64 0, !dbg !53
  %95 = extractelement <2 x i64> %93, i64 1, !dbg !53
  %96 = or i64 %94, %95, !dbg !53
  %.not1012 = icmp ugt i64 %96, 31, !dbg !53
  %97 = and i1 %14, %.not1012, !dbg !53
  br i1 %97, label %98, label %99, !dbg !53

98:                                               ; preds = %81
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 52, ptr nonnull @assertFunc_2, i64 1), !dbg !53
  unreachable, !dbg !53

99:                                               ; preds = %81
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx13 = shl i64 %95, 4, !dbg !54
  %100 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx13, !dbg !54
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %63, !dbg !54
  %.idx14 = shl i64 %94, 4, !dbg !54
  %102 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx14, !dbg !54
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %64, !dbg !54
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %14) #3, !dbg !55
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %14) #3, !dbg !55
  %106 = fptosi <2 x float> %44 to <2 x i64>, !dbg !56
  %107 = add <2 x i64> %106, splat (i64 13), !dbg !57
  %108 = icmp slt <2 x i64> %106, zeroinitializer, !dbg !58
  %109 = select <2 x i1> %108, <2 x i64> %107, <2 x i64> %106, !dbg !59
  %110 = icmp ugt <2 x i64> %109, splat (i64 12), !dbg !60
  %shift21 = shufflevector <2 x i1> %110, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !61
  %111 = or <2 x i1> %110, %shift21, !dbg !61
  %.not1517 = extractelement <2 x i1> %111, i64 0, !dbg !61
  %112 = and i1 %14, %.not1517, !dbg !61
  br i1 %112, label %113, label %114, !dbg !61

113:                                              ; preds = %99
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 60, ptr nonnull @assertFunc_3, i64 1), !dbg !61
  unreachable, !dbg !61

114:                                              ; preds = %99
  %115 = bitcast i32 %72 to float, !dbg !42
  %116 = bitcast i32 %89 to float, !dbg !50
  %117 = fadd float %115, %116, !dbg !62
  %118 = bitcast i32 %105 to float, !dbg !55
  %119 = fadd float %117, %118, !dbg !63
  %120 = bitcast i32 %71 to float, !dbg !42
  %121 = bitcast i32 %88 to float, !dbg !50
  %122 = fadd float %120, %121, !dbg !62
  %123 = bitcast i32 %104 to float, !dbg !55
  %124 = fadd float %122, %123, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %125 = extractelement <2 x i64> %109, i64 0, !dbg !64
  %.idx18 = shl i64 %125, 4, !dbg !64
  %126 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx18, !dbg !64
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %63, !dbg !64
  %128 = extractelement <2 x i64> %109, i64 1, !dbg !64
  %.idx19 = shl i64 %128, 4, !dbg !64
  %129 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx19, !dbg !64
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %64, !dbg !64
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %14) #3, !dbg !65
  %132 = bitcast i32 %131 to float, !dbg !65
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %14) #3, !dbg !65
  %134 = bitcast i32 %133 to float, !dbg !65
  %135 = fadd float %124, %132, !dbg !66
  %136 = fadd float %119, %134, !dbg !66
  %137 = fadd float %135, 0.000000e+00, !dbg !67
  %138 = fadd float %136, 0.000000e+00, !dbg !67
  %139 = sext i32 %13 to i64, !dbg !68
  %140 = getelementptr float, ptr addrspace(1) %5, i64 %139, !dbg !68
  %141 = bitcast float %137 to i32, !dbg !69
  %142 = bitcast float %138 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %141, i32 %142, ptr addrspace(1) %140, i1 %14) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py", directory: "inductor_cache/bs")
!4 = !{ptr @triton_poi_fused_add_embedding_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_0", linkageName: "triton_poi_fused_add_embedding_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 21, scope: !11)
!18 = !DILocation(line: 24, column: 26, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 43, scope: !11)
!21 = !DILocation(line: 28, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 40, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 48, scope: !11)
!25 = !DILocation(line: 29, column: 39, scope: !11)
!26 = !DILocation(line: 29, column: 30, scope: !11)
!27 = !DILocation(line: 29, column: 47, scope: !11)
!28 = !DILocation(line: 30, column: 40, scope: !11)
!29 = !DILocation(line: 30, column: 31, scope: !11)
!30 = !DILocation(line: 30, column: 48, scope: !11)
!31 = !DILocation(line: 31, column: 31, scope: !11)
!32 = !DILocation(line: 31, column: 44, scope: !11)
!33 = !DILocation(line: 32, column: 19, scope: !11)
!34 = !DILocation(line: 34, column: 18, scope: !11)
!35 = !DILocation(line: 35, column: 18, scope: !11)
!36 = !DILocation(line: 36, column: 32, scope: !11)
!37 = !DILocation(line: 37, column: 37, scope: !11)
!38 = !DILocation(line: 37, column: 61, scope: !11)
!39 = !DILocation(line: 26, column: 19, scope: !11)
!40 = !DILocation(line: 38, column: 35, scope: !11)
!41 = !DILocation(line: 38, column: 30, scope: !11)
!42 = !DILocation(line: 38, column: 44, scope: !11)
!43 = !DILocation(line: 39, column: 19, scope: !11)
!44 = !DILocation(line: 41, column: 19, scope: !11)
!45 = !DILocation(line: 42, column: 19, scope: !11)
!46 = !DILocation(line: 43, column: 35, scope: !11)
!47 = !DILocation(line: 44, column: 38, scope: !11)
!48 = !DILocation(line: 44, column: 62, scope: !11)
!49 = !DILocation(line: 45, column: 31, scope: !11)
!50 = !DILocation(line: 45, column: 46, scope: !11)
!51 = !DILocation(line: 47, column: 21, scope: !11)
!52 = !DILocation(line: 51, column: 35, scope: !11)
!53 = !DILocation(line: 52, column: 63, scope: !11)
!54 = !DILocation(line: 53, column: 31, scope: !11)
!55 = !DILocation(line: 53, column: 46, scope: !11)
!56 = !DILocation(line: 55, column: 21, scope: !11)
!57 = !DILocation(line: 57, column: 20, scope: !11)
!58 = !DILocation(line: 58, column: 20, scope: !11)
!59 = !DILocation(line: 59, column: 35, scope: !11)
!60 = !DILocation(line: 60, column: 38, scope: !11)
!61 = !DILocation(line: 60, column: 63, scope: !11)
!62 = !DILocation(line: 46, column: 19, scope: !11)
!63 = !DILocation(line: 54, column: 20, scope: !11)
!64 = !DILocation(line: 61, column: 31, scope: !11)
!65 = !DILocation(line: 61, column: 46, scope: !11)
!66 = !DILocation(line: 62, column: 20, scope: !11)
!67 = !DILocation(line: 64, column: 20, scope: !11)
!68 = !DILocation(line: 65, column: 25, scope: !11)
!69 = !DILocation(line: 65, column: 37, scope: !11)
!70 = !DILocation(line: 65, column: 4, scope: !11)
