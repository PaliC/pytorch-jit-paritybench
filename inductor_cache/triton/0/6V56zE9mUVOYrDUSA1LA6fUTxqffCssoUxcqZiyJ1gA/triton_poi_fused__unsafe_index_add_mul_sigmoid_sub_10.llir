; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %16 = shl i32 %15, 4, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 12, !dbg !12
  %.lobit1 = lshr i32 %17, 6, !dbg !12
  %20 = and i32 %.lobit1, 3, !dbg !12
  %21 = or disjoint i32 %16, 1, !dbg !13
  %22 = or disjoint i32 %16, 2, !dbg !13
  %23 = or disjoint i32 %16, 3, !dbg !13
  %24 = or disjoint i32 %16, 4, !dbg !13
  %25 = or disjoint i32 %16, 5, !dbg !13
  %26 = or disjoint i32 %16, 6, !dbg !13
  %27 = or disjoint i32 %16, 7, !dbg !13
  %28 = or disjoint i32 %16, 8, !dbg !13
  %29 = or disjoint i32 %16, 9, !dbg !13
  %30 = or disjoint i32 %16, 10, !dbg !13
  %31 = or disjoint i32 %16, 11, !dbg !13
  %32 = or disjoint i32 %16, 12, !dbg !13
  %33 = or disjoint i32 %16, 13, !dbg !13
  %34 = or disjoint i32 %16, 14, !dbg !13
  %35 = or disjoint i32 %16, 15, !dbg !13
  %36 = or disjoint i32 %16, %19, !dbg !13
  %37 = or disjoint i32 %16, %20, !dbg !13
  %38 = or disjoint i32 %37, 4, !dbg !13
  %39 = or disjoint i32 %37, 8, !dbg !13
  %40 = or disjoint i32 %37, 12, !dbg !13
  %41 = icmp slt i32 %36, 512, !dbg !14
  %42 = icmp slt i32 %37, 512, !dbg !14
  %43 = icmp slt i32 %38, 512, !dbg !14
  %44 = icmp slt i32 %39, 512, !dbg !14
  %45 = icmp slt i32 %40, 512, !dbg !14
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %47 = shl i32 %46, 8, !dbg !16
  %48 = and i32 %17, 255, !dbg !17
  %49 = lshr i32 %17, 2, !dbg !17
  %50 = and i32 %49, 63, !dbg !17
  %51 = or disjoint i32 %50, 64, !dbg !17
  %52 = or disjoint i32 %50, 128, !dbg !17
  %53 = or disjoint i32 %50, 192, !dbg !17
  %54 = and i32 %18, 252, !dbg !17
  %55 = or disjoint i32 %47, %48, !dbg !18
  %56 = or disjoint i32 %47, %50, !dbg !18
  %57 = or disjoint i32 %47, %51, !dbg !18
  %58 = or disjoint i32 %47, %52, !dbg !18
  %59 = or disjoint i32 %47, %53, !dbg !18
  %60 = or disjoint i32 %47, %54, !dbg !18
  %61 = icmp slt i32 %55, 256, !dbg !19
  %62 = icmp slt i32 %56, 256, !dbg !19
  %63 = icmp slt i32 %57, 256, !dbg !19
  %64 = icmp slt i32 %58, 256, !dbg !19
  %65 = icmp slt i32 %59, 256, !dbg !19
  %66 = icmp slt i32 %60, 256, !dbg !19
  %.frozen = freeze i32 %55, !dbg !20
  %67 = sdiv i32 %.frozen, 16, !dbg !20
  %68 = mul i32 %67, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %68, !dbg !21
  %.frozen8 = freeze i32 %16, !dbg !22
  %69 = sdiv i32 %.frozen8, 128, !dbg !22
  %70 = mul i32 %69, 128, !dbg !23
  %.decomposed9 = sub i32 %.frozen8, %70, !dbg !23
  %.frozen10 = freeze i32 %21, !dbg !22
  %71 = sdiv i32 %.frozen10, 128, !dbg !22
  %72 = mul i32 %71, 128, !dbg !23
  %.decomposed11 = sub i32 %.frozen10, %72, !dbg !23
  %.frozen12 = freeze i32 %22, !dbg !22
  %73 = sdiv i32 %.frozen12, 128, !dbg !22
  %74 = mul i32 %73, 128, !dbg !23
  %.decomposed13 = sub i32 %.frozen12, %74, !dbg !23
  %.frozen14 = freeze i32 %23, !dbg !22
  %75 = sdiv i32 %.frozen14, 128, !dbg !22
  %76 = mul i32 %75, 128, !dbg !23
  %.decomposed15 = sub i32 %.frozen14, %76, !dbg !23
  %.frozen16 = freeze i32 %24, !dbg !22
  %77 = sdiv i32 %.frozen16, 128, !dbg !22
  %78 = mul i32 %77, 128, !dbg !23
  %.decomposed17 = sub i32 %.frozen16, %78, !dbg !23
  %.frozen18 = freeze i32 %25, !dbg !22
  %79 = sdiv i32 %.frozen18, 128, !dbg !22
  %80 = mul i32 %79, 128, !dbg !23
  %.decomposed19 = sub i32 %.frozen18, %80, !dbg !23
  %.frozen20 = freeze i32 %26, !dbg !22
  %81 = sdiv i32 %.frozen20, 128, !dbg !22
  %82 = mul i32 %81, 128, !dbg !23
  %.decomposed21 = sub i32 %.frozen20, %82, !dbg !23
  %.frozen22 = freeze i32 %27, !dbg !22
  %83 = sdiv i32 %.frozen22, 128, !dbg !22
  %84 = mul i32 %83, 128, !dbg !23
  %.decomposed23 = sub i32 %.frozen22, %84, !dbg !23
  %.frozen24 = freeze i32 %28, !dbg !22
  %85 = sdiv i32 %.frozen24, 128, !dbg !22
  %86 = mul i32 %85, 128, !dbg !23
  %.decomposed25 = sub i32 %.frozen24, %86, !dbg !23
  %.frozen26 = freeze i32 %29, !dbg !22
  %87 = sdiv i32 %.frozen26, 128, !dbg !22
  %88 = mul i32 %87, 128, !dbg !23
  %.decomposed27 = sub i32 %.frozen26, %88, !dbg !23
  %.frozen28 = freeze i32 %30, !dbg !22
  %89 = sdiv i32 %.frozen28, 128, !dbg !22
  %90 = mul i32 %89, 128, !dbg !23
  %.decomposed29 = sub i32 %.frozen28, %90, !dbg !23
  %.frozen30 = freeze i32 %31, !dbg !22
  %91 = sdiv i32 %.frozen30, 128, !dbg !22
  %92 = mul i32 %91, 128, !dbg !23
  %.decomposed31 = sub i32 %.frozen30, %92, !dbg !23
  %.frozen32 = freeze i32 %32, !dbg !22
  %93 = sdiv i32 %.frozen32, 128, !dbg !22
  %94 = mul i32 %93, 128, !dbg !23
  %.decomposed33 = sub i32 %.frozen32, %94, !dbg !23
  %.frozen34 = freeze i32 %33, !dbg !22
  %95 = sdiv i32 %.frozen34, 128, !dbg !22
  %96 = mul i32 %95, 128, !dbg !23
  %.decomposed35 = sub i32 %.frozen34, %96, !dbg !23
  %.frozen36 = freeze i32 %34, !dbg !22
  %97 = sdiv i32 %.frozen36, 128, !dbg !22
  %98 = mul i32 %97, 128, !dbg !23
  %.decomposed37 = sub i32 %.frozen36, %98, !dbg !23
  %.frozen38 = freeze i32 %35, !dbg !22
  %99 = sdiv i32 %.frozen38, 128, !dbg !22
  %100 = mul i32 %99, 128, !dbg !23
  %.decomposed39 = sub i32 %.frozen38, %100, !dbg !23
  %.frozen40 = freeze i32 %36, !dbg !22
  %101 = sdiv i32 %.frozen40, 128, !dbg !22
  %102 = mul i32 %101, 128, !dbg !23
  %.decomposed41 = sub i32 %.frozen40, %102, !dbg !23
  %103 = sext i32 %67 to i64, !dbg !24
  %104 = getelementptr i64, ptr addrspace(1) %0, i64 %103, !dbg !24
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %104, i1 %61) #2, !dbg !25
  %106 = sext i32 %.decomposed to i64, !dbg !26
  %107 = getelementptr i64, ptr addrspace(1) %1, i64 %106, !dbg !26
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %107, i1 %61) #2, !dbg !27
  %109 = getelementptr i64, ptr addrspace(1) %3, i64 %106, !dbg !28
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 %61) #2, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %61) #2, !dbg !31
  %113 = getelementptr i64, ptr addrspace(1) %5, i64 %103, !dbg !32
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %113, i1 %61) #2, !dbg !33
  %115 = getelementptr float, ptr addrspace(1) %6, i64 %103, !dbg !34
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %61) #2, !dbg !35
  %117 = lshr i64 %105, 61, !dbg !36
  %118 = and i64 %117, 4, !dbg !36
  %119 = add i64 %118, %105, !dbg !36
  %120 = lshr i64 %108, 61, !dbg !37
  %121 = and i64 %120, 4, !dbg !37
  %122 = add i64 %121, %108, !dbg !37
  %123 = shl i64 %122, 7, !dbg !38
  %124 = sext i32 %.decomposed9 to i64, !dbg !39
  %125 = sext i32 %.decomposed11 to i64, !dbg !39
  %126 = sext i32 %.decomposed13 to i64, !dbg !39
  %127 = sext i32 %.decomposed15 to i64, !dbg !39
  %128 = sext i32 %.decomposed17 to i64, !dbg !39
  %129 = sext i32 %.decomposed19 to i64, !dbg !39
  %130 = sext i32 %.decomposed21 to i64, !dbg !39
  %131 = sext i32 %.decomposed23 to i64, !dbg !39
  %132 = sext i32 %.decomposed25 to i64, !dbg !39
  %133 = sext i32 %.decomposed27 to i64, !dbg !39
  %134 = sext i32 %.decomposed29 to i64, !dbg !39
  %135 = sext i32 %.decomposed31 to i64, !dbg !39
  %136 = sext i32 %.decomposed33 to i64, !dbg !39
  %137 = sext i32 %.decomposed35 to i64, !dbg !39
  %138 = sext i32 %.decomposed37 to i64, !dbg !39
  %139 = sext i32 %.decomposed39 to i64, !dbg !39
  %140 = add i64 %123, %124, !dbg !39
  %141 = add i64 %123, %125, !dbg !39
  %142 = add i64 %123, %126, !dbg !39
  %143 = add i64 %123, %127, !dbg !39
  %144 = add i64 %123, %128, !dbg !39
  %145 = add i64 %123, %129, !dbg !39
  %146 = add i64 %123, %130, !dbg !39
  %147 = add i64 %123, %131, !dbg !39
  %148 = add i64 %123, %132, !dbg !39
  %149 = add i64 %123, %133, !dbg !39
  %150 = add i64 %123, %134, !dbg !39
  %151 = add i64 %123, %135, !dbg !39
  %152 = add i64 %123, %136, !dbg !39
  %153 = add i64 %123, %137, !dbg !39
  %154 = add i64 %123, %138, !dbg !39
  %155 = add i64 %123, %139, !dbg !39
  %156 = shl i64 %119, 9, !dbg !40
  %157 = shl i32 %69, 11, !dbg !41
  %158 = shl i32 %71, 11, !dbg !41
  %159 = shl i32 %73, 11, !dbg !41
  %160 = shl i32 %75, 11, !dbg !41
  %161 = shl i32 %77, 11, !dbg !41
  %162 = shl i32 %79, 11, !dbg !41
  %163 = shl i32 %81, 11, !dbg !41
  %164 = shl i32 %83, 11, !dbg !41
  %165 = shl i32 %85, 11, !dbg !41
  %166 = shl i32 %87, 11, !dbg !41
  %167 = shl i32 %89, 11, !dbg !41
  %168 = shl i32 %91, 11, !dbg !41
  %169 = shl i32 %93, 11, !dbg !41
  %170 = shl i32 %95, 11, !dbg !41
  %171 = shl i32 %97, 11, !dbg !41
  %172 = shl i32 %99, 11, !dbg !41
  %173 = sext i32 %157 to i64, !dbg !42
  %174 = sext i32 %158 to i64, !dbg !42
  %175 = sext i32 %159 to i64, !dbg !42
  %176 = sext i32 %160 to i64, !dbg !42
  %177 = sext i32 %161 to i64, !dbg !42
  %178 = sext i32 %162 to i64, !dbg !42
  %179 = sext i32 %163 to i64, !dbg !42
  %180 = sext i32 %164 to i64, !dbg !42
  %181 = sext i32 %165 to i64, !dbg !42
  %182 = sext i32 %166 to i64, !dbg !42
  %183 = sext i32 %167 to i64, !dbg !42
  %184 = sext i32 %168 to i64, !dbg !42
  %185 = sext i32 %169 to i64, !dbg !42
  %186 = sext i32 %170 to i64, !dbg !42
  %187 = sext i32 %171 to i64, !dbg !42
  %188 = sext i32 %172 to i64, !dbg !42
  %189 = add i64 %156, %173, !dbg !43
  %190 = add i64 %189, %140, !dbg !42
  %191 = add i64 %156, %174, !dbg !43
  %192 = add i64 %191, %141, !dbg !42
  %193 = add i64 %156, %175, !dbg !43
  %194 = add i64 %193, %142, !dbg !42
  %195 = add i64 %156, %176, !dbg !43
  %196 = add i64 %195, %143, !dbg !42
  %197 = add i64 %156, %177, !dbg !43
  %198 = add i64 %197, %144, !dbg !42
  %199 = add i64 %156, %178, !dbg !43
  %200 = add i64 %199, %145, !dbg !42
  %201 = add i64 %156, %179, !dbg !43
  %202 = add i64 %201, %146, !dbg !42
  %203 = add i64 %156, %180, !dbg !43
  %204 = add i64 %203, %147, !dbg !42
  %205 = add i64 %156, %181, !dbg !43
  %206 = add i64 %205, %148, !dbg !42
  %207 = add i64 %156, %182, !dbg !43
  %208 = add i64 %207, %149, !dbg !42
  %209 = add i64 %156, %183, !dbg !43
  %210 = add i64 %209, %150, !dbg !42
  %211 = add i64 %156, %184, !dbg !43
  %212 = add i64 %211, %151, !dbg !42
  %213 = add i64 %156, %185, !dbg !43
  %214 = add i64 %213, %152, !dbg !42
  %215 = add i64 %156, %186, !dbg !43
  %216 = add i64 %215, %153, !dbg !42
  %217 = add i64 %156, %187, !dbg !43
  %218 = add i64 %217, %154, !dbg !42
  %219 = add i64 %156, %188, !dbg !43
  %220 = add i64 %219, %155, !dbg !42
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !44
  %222 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !44
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !44
  %224 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !44
  %225 = getelementptr float, ptr addrspace(1) %2, i64 %198, !dbg !44
  %226 = getelementptr float, ptr addrspace(1) %2, i64 %200, !dbg !44
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !44
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !44
  %229 = getelementptr float, ptr addrspace(1) %2, i64 %206, !dbg !44
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %208, !dbg !44
  %231 = getelementptr float, ptr addrspace(1) %2, i64 %210, !dbg !44
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %212, !dbg !44
  %233 = getelementptr float, ptr addrspace(1) %2, i64 %214, !dbg !44
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %216, !dbg !44
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !44
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !44
  %237 = and i1 %41, %62, !dbg !45
  %238 = and i1 %41, %63, !dbg !45
  %239 = and i1 %41, %64, !dbg !45
  %240 = and i1 %41, %65, !dbg !45
  %241 = and i1 %42, %66, !dbg !45
  %242 = and i1 %43, %66, !dbg !45
  %243 = and i1 %44, %66, !dbg !45
  %244 = and i1 %45, %66, !dbg !45
  %245 = ptrtoint ptr addrspace(1) %221 to i64, !dbg !46
  %246 = ptrtoint ptr addrspace(1) %222 to i64, !dbg !46
  %247 = ptrtoint ptr addrspace(1) %223 to i64, !dbg !46
  %248 = ptrtoint ptr addrspace(1) %224 to i64, !dbg !46
  %249 = ptrtoint ptr addrspace(1) %225 to i64, !dbg !46
  %250 = ptrtoint ptr addrspace(1) %226 to i64, !dbg !46
  %251 = ptrtoint ptr addrspace(1) %227 to i64, !dbg !46
  %252 = ptrtoint ptr addrspace(1) %228 to i64, !dbg !46
  %253 = ptrtoint ptr addrspace(1) %229 to i64, !dbg !46
  %254 = ptrtoint ptr addrspace(1) %230 to i64, !dbg !46
  %255 = ptrtoint ptr addrspace(1) %231 to i64, !dbg !46
  %256 = ptrtoint ptr addrspace(1) %232 to i64, !dbg !46
  %257 = ptrtoint ptr addrspace(1) %233 to i64, !dbg !46
  %258 = ptrtoint ptr addrspace(1) %234 to i64, !dbg !46
  %259 = ptrtoint ptr addrspace(1) %235 to i64, !dbg !46
  %260 = ptrtoint ptr addrspace(1) %236 to i64, !dbg !46
  %261 = shl i32 %17, 4, !dbg !46
  %262 = and i32 %261, 4080, !dbg !46
  %263 = and i32 %18, 1020, !dbg !46
  %264 = lshr exact i32 %262, 2, !dbg !46
  %265 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %264, !dbg !46
  %266 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %262, !dbg !46
  %267 = insertelement <1 x i64> poison, i64 %245, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %267, i1 true) #2, !dbg !46
  %268 = or disjoint i32 %262, 1, !dbg !46
  %269 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %268, !dbg !46
  %270 = insertelement <1 x i64> poison, i64 %246, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %270, i1 true) #2, !dbg !46
  %271 = or disjoint i32 %262, 2, !dbg !46
  %272 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %271, !dbg !46
  %273 = insertelement <1 x i64> poison, i64 %247, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %273, i1 true) #2, !dbg !46
  %274 = or disjoint i32 %262, 3, !dbg !46
  %275 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %274, !dbg !46
  %276 = insertelement <1 x i64> poison, i64 %248, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %276, i1 true) #2, !dbg !46
  %277 = or disjoint i32 %262, 4, !dbg !46
  %278 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %277, !dbg !46
  %279 = insertelement <1 x i64> poison, i64 %249, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %279, i1 true) #2, !dbg !46
  %280 = or disjoint i32 %262, 5, !dbg !46
  %281 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %280, !dbg !46
  %282 = insertelement <1 x i64> poison, i64 %250, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %282, i1 true) #2, !dbg !46
  %283 = or disjoint i32 %262, 6, !dbg !46
  %284 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %283, !dbg !46
  %285 = insertelement <1 x i64> poison, i64 %251, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %285, i1 true) #2, !dbg !46
  %286 = or disjoint i32 %262, 7, !dbg !46
  %287 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %286, !dbg !46
  %288 = insertelement <1 x i64> poison, i64 %252, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %288, i1 true) #2, !dbg !46
  %289 = or disjoint i32 %262, 8, !dbg !46
  %290 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %289, !dbg !46
  %291 = insertelement <1 x i64> poison, i64 %253, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %291, i1 true) #2, !dbg !46
  %292 = or disjoint i32 %262, 9, !dbg !46
  %293 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %292, !dbg !46
  %294 = insertelement <1 x i64> poison, i64 %254, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %294, i1 true) #2, !dbg !46
  %295 = or disjoint i32 %262, 10, !dbg !46
  %296 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %295, !dbg !46
  %297 = insertelement <1 x i64> poison, i64 %255, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %297, i1 true) #2, !dbg !46
  %298 = or disjoint i32 %262, 11, !dbg !46
  %299 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %298, !dbg !46
  %300 = insertelement <1 x i64> poison, i64 %256, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %300, i1 true) #2, !dbg !46
  %301 = or disjoint i32 %262, 12, !dbg !46
  %302 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %301, !dbg !46
  %303 = insertelement <1 x i64> poison, i64 %257, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %303, i1 true) #2, !dbg !46
  %304 = or disjoint i32 %262, 13, !dbg !46
  %305 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %304, !dbg !46
  %306 = insertelement <1 x i64> poison, i64 %258, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %306, i1 true) #2, !dbg !46
  %307 = or disjoint i32 %262, 14, !dbg !46
  %308 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %307, !dbg !46
  %309 = insertelement <1 x i64> poison, i64 %259, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %309, i1 true) #2, !dbg !46
  %310 = or disjoint i32 %262, 15, !dbg !46
  %311 = getelementptr inbounds i64, ptr addrspace(3) %265, i32 %310, !dbg !46
  %312 = insertelement <1 x i64> poison, i64 %260, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %312, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %313 = and i32 %17, 252, !dbg !46
  %314 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %313, !dbg !46
  %315 = getelementptr inbounds i64, ptr addrspace(3) %314, i32 %263, !dbg !46
  %316 = load i64, ptr addrspace(3) %315, align 16, !dbg !46
  %317 = or disjoint i32 %263, 1024, !dbg !46
  %318 = lshr exact i32 %317, 2, !dbg !46
  %319 = and i32 %318, 508, !dbg !46
  %320 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %319, !dbg !46
  %321 = getelementptr inbounds i64, ptr addrspace(3) %320, i32 %317, !dbg !46
  %322 = load i64, ptr addrspace(3) %321, align 16, !dbg !46
  %323 = or disjoint i32 %263, 2048, !dbg !46
  %324 = lshr exact i32 %323, 2, !dbg !46
  %325 = and i32 %324, 764, !dbg !46
  %326 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %325, !dbg !46
  %327 = getelementptr inbounds i64, ptr addrspace(3) %326, i32 %323, !dbg !46
  %328 = load i64, ptr addrspace(3) %327, align 16, !dbg !46
  %329 = or disjoint i32 %263, 3072, !dbg !46
  %330 = lshr exact i32 %329, 2, !dbg !46
  %331 = and i32 %330, 1020, !dbg !46
  %332 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %331, !dbg !46
  %333 = getelementptr inbounds i64, ptr addrspace(3) %332, i32 %329, !dbg !46
  %334 = load i64, ptr addrspace(3) %333, align 16, !dbg !46
  %335 = inttoptr i64 %316 to ptr addrspace(1), !dbg !46
  %336 = inttoptr i64 %322 to ptr addrspace(1), !dbg !46
  %337 = inttoptr i64 %328 to ptr addrspace(1), !dbg !46
  %338 = inttoptr i64 %334 to ptr addrspace(1), !dbg !46
  %339 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %335, i1 %237) #2, !dbg !46
  %340 = extractvalue { i32, i32, i32, i32 } %339, 0, !dbg !46
  %341 = extractvalue { i32, i32, i32, i32 } %339, 1, !dbg !46
  %342 = extractvalue { i32, i32, i32, i32 } %339, 2, !dbg !46
  %343 = extractvalue { i32, i32, i32, i32 } %339, 3, !dbg !46
  %344 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %336, i1 %238) #2, !dbg !46
  %345 = extractvalue { i32, i32, i32, i32 } %344, 0, !dbg !46
  %346 = extractvalue { i32, i32, i32, i32 } %344, 1, !dbg !46
  %347 = extractvalue { i32, i32, i32, i32 } %344, 2, !dbg !46
  %348 = extractvalue { i32, i32, i32, i32 } %344, 3, !dbg !46
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %337, i1 %239) #2, !dbg !46
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !46
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !46
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !46
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !46
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %338, i1 %240) #2, !dbg !46
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !46
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !46
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !46
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !46
  %359 = lshr i64 %110, 61, !dbg !47
  %360 = and i64 %359, 4, !dbg !47
  %361 = add i64 %360, %110, !dbg !47
  %362 = shl i64 %361, 7, !dbg !48
  %363 = add i64 %362, %124, !dbg !49
  %364 = add i64 %362, %125, !dbg !49
  %365 = add i64 %362, %126, !dbg !49
  %366 = add i64 %362, %127, !dbg !49
  %367 = add i64 %362, %128, !dbg !49
  %368 = add i64 %362, %129, !dbg !49
  %369 = add i64 %362, %130, !dbg !49
  %370 = add i64 %362, %131, !dbg !49
  %371 = add i64 %362, %132, !dbg !49
  %372 = add i64 %362, %133, !dbg !49
  %373 = add i64 %362, %134, !dbg !49
  %374 = add i64 %362, %135, !dbg !49
  %375 = add i64 %362, %136, !dbg !49
  %376 = add i64 %362, %137, !dbg !49
  %377 = add i64 %362, %138, !dbg !49
  %378 = add i64 %362, %139, !dbg !49
  %379 = add i64 %189, %363, !dbg !50
  %380 = add i64 %191, %364, !dbg !50
  %381 = add i64 %193, %365, !dbg !50
  %382 = add i64 %195, %366, !dbg !50
  %383 = add i64 %197, %367, !dbg !50
  %384 = add i64 %199, %368, !dbg !50
  %385 = add i64 %201, %369, !dbg !50
  %386 = add i64 %203, %370, !dbg !50
  %387 = add i64 %205, %371, !dbg !50
  %388 = add i64 %207, %372, !dbg !50
  %389 = add i64 %209, %373, !dbg !50
  %390 = add i64 %211, %374, !dbg !50
  %391 = add i64 %213, %375, !dbg !50
  %392 = add i64 %215, %376, !dbg !50
  %393 = add i64 %217, %377, !dbg !50
  %394 = add i64 %219, %378, !dbg !50
  %395 = getelementptr float, ptr addrspace(1) %2, i64 %379, !dbg !51
  %396 = getelementptr float, ptr addrspace(1) %2, i64 %380, !dbg !51
  %397 = getelementptr float, ptr addrspace(1) %2, i64 %381, !dbg !51
  %398 = getelementptr float, ptr addrspace(1) %2, i64 %382, !dbg !51
  %399 = getelementptr float, ptr addrspace(1) %2, i64 %383, !dbg !51
  %400 = getelementptr float, ptr addrspace(1) %2, i64 %384, !dbg !51
  %401 = getelementptr float, ptr addrspace(1) %2, i64 %385, !dbg !51
  %402 = getelementptr float, ptr addrspace(1) %2, i64 %386, !dbg !51
  %403 = getelementptr float, ptr addrspace(1) %2, i64 %387, !dbg !51
  %404 = getelementptr float, ptr addrspace(1) %2, i64 %388, !dbg !51
  %405 = getelementptr float, ptr addrspace(1) %2, i64 %389, !dbg !51
  %406 = getelementptr float, ptr addrspace(1) %2, i64 %390, !dbg !51
  %407 = getelementptr float, ptr addrspace(1) %2, i64 %391, !dbg !51
  %408 = getelementptr float, ptr addrspace(1) %2, i64 %392, !dbg !51
  %409 = getelementptr float, ptr addrspace(1) %2, i64 %393, !dbg !51
  %410 = getelementptr float, ptr addrspace(1) %2, i64 %394, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %411 = ptrtoint ptr addrspace(1) %395 to i64, !dbg !52
  %412 = ptrtoint ptr addrspace(1) %396 to i64, !dbg !52
  %413 = ptrtoint ptr addrspace(1) %397 to i64, !dbg !52
  %414 = ptrtoint ptr addrspace(1) %398 to i64, !dbg !52
  %415 = ptrtoint ptr addrspace(1) %399 to i64, !dbg !52
  %416 = ptrtoint ptr addrspace(1) %400 to i64, !dbg !52
  %417 = ptrtoint ptr addrspace(1) %401 to i64, !dbg !52
  %418 = ptrtoint ptr addrspace(1) %402 to i64, !dbg !52
  %419 = ptrtoint ptr addrspace(1) %403 to i64, !dbg !52
  %420 = ptrtoint ptr addrspace(1) %404 to i64, !dbg !52
  %421 = ptrtoint ptr addrspace(1) %405 to i64, !dbg !52
  %422 = ptrtoint ptr addrspace(1) %406 to i64, !dbg !52
  %423 = ptrtoint ptr addrspace(1) %407 to i64, !dbg !52
  %424 = ptrtoint ptr addrspace(1) %408 to i64, !dbg !52
  %425 = ptrtoint ptr addrspace(1) %409 to i64, !dbg !52
  %426 = ptrtoint ptr addrspace(1) %410 to i64, !dbg !52
  %427 = insertelement <1 x i64> poison, i64 %411, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %427, i1 true) #2, !dbg !52
  %428 = insertelement <1 x i64> poison, i64 %412, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %428, i1 true) #2, !dbg !52
  %429 = insertelement <1 x i64> poison, i64 %413, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %429, i1 true) #2, !dbg !52
  %430 = insertelement <1 x i64> poison, i64 %414, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %430, i1 true) #2, !dbg !52
  %431 = insertelement <1 x i64> poison, i64 %415, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %431, i1 true) #2, !dbg !52
  %432 = insertelement <1 x i64> poison, i64 %416, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %432, i1 true) #2, !dbg !52
  %433 = insertelement <1 x i64> poison, i64 %417, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %433, i1 true) #2, !dbg !52
  %434 = insertelement <1 x i64> poison, i64 %418, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %434, i1 true) #2, !dbg !52
  %435 = insertelement <1 x i64> poison, i64 %419, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %435, i1 true) #2, !dbg !52
  %436 = insertelement <1 x i64> poison, i64 %420, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %436, i1 true) #2, !dbg !52
  %437 = insertelement <1 x i64> poison, i64 %421, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %437, i1 true) #2, !dbg !52
  %438 = insertelement <1 x i64> poison, i64 %422, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %438, i1 true) #2, !dbg !52
  %439 = insertelement <1 x i64> poison, i64 %423, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %439, i1 true) #2, !dbg !52
  %440 = insertelement <1 x i64> poison, i64 %424, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %440, i1 true) #2, !dbg !52
  %441 = insertelement <1 x i64> poison, i64 %425, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %441, i1 true) #2, !dbg !52
  %442 = insertelement <1 x i64> poison, i64 %426, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %442, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %443 = load i64, ptr addrspace(3) %315, align 16, !dbg !52
  %444 = load i64, ptr addrspace(3) %321, align 16, !dbg !52
  %445 = load i64, ptr addrspace(3) %327, align 16, !dbg !52
  %446 = load i64, ptr addrspace(3) %333, align 16, !dbg !52
  %447 = inttoptr i64 %443 to ptr addrspace(1), !dbg !52
  %448 = inttoptr i64 %444 to ptr addrspace(1), !dbg !52
  %449 = inttoptr i64 %445 to ptr addrspace(1), !dbg !52
  %450 = inttoptr i64 %446 to ptr addrspace(1), !dbg !52
  %451 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %447, i1 %237) #2, !dbg !52
  %452 = extractvalue { i32, i32, i32, i32 } %451, 0, !dbg !52
  %453 = extractvalue { i32, i32, i32, i32 } %451, 1, !dbg !52
  %454 = extractvalue { i32, i32, i32, i32 } %451, 2, !dbg !52
  %455 = extractvalue { i32, i32, i32, i32 } %451, 3, !dbg !52
  %456 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %448, i1 %238) #2, !dbg !52
  %457 = extractvalue { i32, i32, i32, i32 } %456, 0, !dbg !52
  %458 = extractvalue { i32, i32, i32, i32 } %456, 1, !dbg !52
  %459 = extractvalue { i32, i32, i32, i32 } %456, 2, !dbg !52
  %460 = extractvalue { i32, i32, i32, i32 } %456, 3, !dbg !52
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %449, i1 %239) #2, !dbg !52
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !52
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !52
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !52
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !52
  %466 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %450, i1 %240) #2, !dbg !52
  %467 = extractvalue { i32, i32, i32, i32 } %466, 0, !dbg !52
  %468 = extractvalue { i32, i32, i32, i32 } %466, 1, !dbg !52
  %469 = extractvalue { i32, i32, i32, i32 } %466, 2, !dbg !52
  %470 = extractvalue { i32, i32, i32, i32 } %466, 3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx = shl nuw nsw i32 %48, 3, !dbg !53
  %471 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !53
  %472 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 true) #2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx4 = shl nuw nsw i32 %50, 3, !dbg !53
  %473 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !53
  %474 = load float, ptr addrspace(3) %473, align 8, !dbg !53
  %.idx5 = shl nuw nsw i32 %51, 3, !dbg !53
  %475 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !53
  %476 = load float, ptr addrspace(3) %475, align 8, !dbg !53
  %.idx6 = shl nuw nsw i32 %52, 3, !dbg !53
  %477 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !53
  %478 = load float, ptr addrspace(3) %477, align 8, !dbg !53
  %.idx7 = shl nuw nsw i32 %53, 3, !dbg !53
  %479 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !53
  %480 = load float, ptr addrspace(3) %479, align 8, !dbg !53
  %481 = lshr i64 %114, 61, !dbg !54
  %482 = and i64 %481, 4, !dbg !54
  %483 = add i64 %482, %114, !dbg !54
  %484 = shl i64 %483, 9, !dbg !55
  %485 = add i64 %140, %173, !dbg !56
  %486 = add i64 %485, %484, !dbg !57
  %487 = add i64 %141, %174, !dbg !56
  %488 = add i64 %487, %484, !dbg !57
  %489 = add i64 %142, %175, !dbg !56
  %490 = add i64 %489, %484, !dbg !57
  %491 = add i64 %143, %176, !dbg !56
  %492 = add i64 %491, %484, !dbg !57
  %493 = add i64 %144, %177, !dbg !56
  %494 = add i64 %493, %484, !dbg !57
  %495 = add i64 %145, %178, !dbg !56
  %496 = add i64 %495, %484, !dbg !57
  %497 = add i64 %146, %179, !dbg !56
  %498 = add i64 %497, %484, !dbg !57
  %499 = add i64 %147, %180, !dbg !56
  %500 = add i64 %499, %484, !dbg !57
  %501 = add i64 %148, %181, !dbg !56
  %502 = add i64 %501, %484, !dbg !57
  %503 = add i64 %149, %182, !dbg !56
  %504 = add i64 %503, %484, !dbg !57
  %505 = add i64 %150, %183, !dbg !56
  %506 = add i64 %505, %484, !dbg !57
  %507 = add i64 %151, %184, !dbg !56
  %508 = add i64 %507, %484, !dbg !57
  %509 = add i64 %152, %185, !dbg !56
  %510 = add i64 %509, %484, !dbg !57
  %511 = add i64 %153, %186, !dbg !56
  %512 = add i64 %511, %484, !dbg !57
  %513 = add i64 %154, %187, !dbg !56
  %514 = add i64 %513, %484, !dbg !57
  %515 = add i64 %155, %188, !dbg !56
  %516 = add i64 %515, %484, !dbg !57
  %517 = getelementptr float, ptr addrspace(1) %2, i64 %486, !dbg !58
  %518 = getelementptr float, ptr addrspace(1) %2, i64 %488, !dbg !58
  %519 = getelementptr float, ptr addrspace(1) %2, i64 %490, !dbg !58
  %520 = getelementptr float, ptr addrspace(1) %2, i64 %492, !dbg !58
  %521 = getelementptr float, ptr addrspace(1) %2, i64 %494, !dbg !58
  %522 = getelementptr float, ptr addrspace(1) %2, i64 %496, !dbg !58
  %523 = getelementptr float, ptr addrspace(1) %2, i64 %498, !dbg !58
  %524 = getelementptr float, ptr addrspace(1) %2, i64 %500, !dbg !58
  %525 = getelementptr float, ptr addrspace(1) %2, i64 %502, !dbg !58
  %526 = getelementptr float, ptr addrspace(1) %2, i64 %504, !dbg !58
  %527 = getelementptr float, ptr addrspace(1) %2, i64 %506, !dbg !58
  %528 = getelementptr float, ptr addrspace(1) %2, i64 %508, !dbg !58
  %529 = getelementptr float, ptr addrspace(1) %2, i64 %510, !dbg !58
  %530 = getelementptr float, ptr addrspace(1) %2, i64 %512, !dbg !58
  %531 = getelementptr float, ptr addrspace(1) %2, i64 %514, !dbg !58
  %532 = getelementptr float, ptr addrspace(1) %2, i64 %516, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %533 = ptrtoint ptr addrspace(1) %517 to i64, !dbg !59
  %534 = ptrtoint ptr addrspace(1) %518 to i64, !dbg !59
  %535 = ptrtoint ptr addrspace(1) %519 to i64, !dbg !59
  %536 = ptrtoint ptr addrspace(1) %520 to i64, !dbg !59
  %537 = ptrtoint ptr addrspace(1) %521 to i64, !dbg !59
  %538 = ptrtoint ptr addrspace(1) %522 to i64, !dbg !59
  %539 = ptrtoint ptr addrspace(1) %523 to i64, !dbg !59
  %540 = ptrtoint ptr addrspace(1) %524 to i64, !dbg !59
  %541 = ptrtoint ptr addrspace(1) %525 to i64, !dbg !59
  %542 = ptrtoint ptr addrspace(1) %526 to i64, !dbg !59
  %543 = ptrtoint ptr addrspace(1) %527 to i64, !dbg !59
  %544 = ptrtoint ptr addrspace(1) %528 to i64, !dbg !59
  %545 = ptrtoint ptr addrspace(1) %529 to i64, !dbg !59
  %546 = ptrtoint ptr addrspace(1) %530 to i64, !dbg !59
  %547 = ptrtoint ptr addrspace(1) %531 to i64, !dbg !59
  %548 = ptrtoint ptr addrspace(1) %532 to i64, !dbg !59
  %549 = insertelement <1 x i64> poison, i64 %533, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %549, i1 true) #2, !dbg !59
  %550 = insertelement <1 x i64> poison, i64 %534, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %550, i1 true) #2, !dbg !59
  %551 = insertelement <1 x i64> poison, i64 %535, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %551, i1 true) #2, !dbg !59
  %552 = insertelement <1 x i64> poison, i64 %536, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %552, i1 true) #2, !dbg !59
  %553 = insertelement <1 x i64> poison, i64 %537, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %553, i1 true) #2, !dbg !59
  %554 = insertelement <1 x i64> poison, i64 %538, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %554, i1 true) #2, !dbg !59
  %555 = insertelement <1 x i64> poison, i64 %539, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %555, i1 true) #2, !dbg !59
  %556 = insertelement <1 x i64> poison, i64 %540, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %556, i1 true) #2, !dbg !59
  %557 = insertelement <1 x i64> poison, i64 %541, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %557, i1 true) #2, !dbg !59
  %558 = insertelement <1 x i64> poison, i64 %542, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %558, i1 true) #2, !dbg !59
  %559 = insertelement <1 x i64> poison, i64 %543, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %559, i1 true) #2, !dbg !59
  %560 = insertelement <1 x i64> poison, i64 %544, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %560, i1 true) #2, !dbg !59
  %561 = insertelement <1 x i64> poison, i64 %545, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %561, i1 true) #2, !dbg !59
  %562 = insertelement <1 x i64> poison, i64 %546, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %562, i1 true) #2, !dbg !59
  %563 = insertelement <1 x i64> poison, i64 %547, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %563, i1 true) #2, !dbg !59
  %564 = insertelement <1 x i64> poison, i64 %548, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %564, i1 true) #2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %565 = load i64, ptr addrspace(3) %315, align 16, !dbg !59
  %566 = load i64, ptr addrspace(3) %321, align 16, !dbg !59
  %567 = load i64, ptr addrspace(3) %327, align 16, !dbg !59
  %568 = load i64, ptr addrspace(3) %333, align 16, !dbg !59
  %569 = inttoptr i64 %565 to ptr addrspace(1), !dbg !59
  %570 = inttoptr i64 %566 to ptr addrspace(1), !dbg !59
  %571 = inttoptr i64 %567 to ptr addrspace(1), !dbg !59
  %572 = inttoptr i64 %568 to ptr addrspace(1), !dbg !59
  %573 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %569, i1 %237) #2, !dbg !59
  %574 = extractvalue { i32, i32, i32, i32 } %573, 0, !dbg !59
  %575 = extractvalue { i32, i32, i32, i32 } %573, 1, !dbg !59
  %576 = extractvalue { i32, i32, i32, i32 } %573, 2, !dbg !59
  %577 = extractvalue { i32, i32, i32, i32 } %573, 3, !dbg !59
  %578 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %570, i1 %238) #2, !dbg !59
  %579 = extractvalue { i32, i32, i32, i32 } %578, 0, !dbg !59
  %580 = extractvalue { i32, i32, i32, i32 } %578, 1, !dbg !59
  %581 = extractvalue { i32, i32, i32, i32 } %578, 2, !dbg !59
  %582 = extractvalue { i32, i32, i32, i32 } %578, 3, !dbg !59
  %583 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %571, i1 %239) #2, !dbg !59
  %584 = extractvalue { i32, i32, i32, i32 } %583, 0, !dbg !59
  %585 = extractvalue { i32, i32, i32, i32 } %583, 1, !dbg !59
  %586 = extractvalue { i32, i32, i32, i32 } %583, 2, !dbg !59
  %587 = extractvalue { i32, i32, i32, i32 } %583, 3, !dbg !59
  %588 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %572, i1 %240) #2, !dbg !59
  %589 = extractvalue { i32, i32, i32, i32 } %588, 0, !dbg !59
  %590 = extractvalue { i32, i32, i32, i32 } %588, 1, !dbg !59
  %591 = extractvalue { i32, i32, i32, i32 } %588, 2, !dbg !59
  %592 = extractvalue { i32, i32, i32, i32 } %588, 3, !dbg !59
  %593 = add i64 %363, %173, !dbg !60
  %594 = add i64 %593, %484, !dbg !61
  %595 = add i64 %364, %174, !dbg !60
  %596 = add i64 %595, %484, !dbg !61
  %597 = add i64 %365, %175, !dbg !60
  %598 = add i64 %597, %484, !dbg !61
  %599 = add i64 %366, %176, !dbg !60
  %600 = add i64 %599, %484, !dbg !61
  %601 = add i64 %367, %177, !dbg !60
  %602 = add i64 %601, %484, !dbg !61
  %603 = add i64 %368, %178, !dbg !60
  %604 = add i64 %603, %484, !dbg !61
  %605 = add i64 %369, %179, !dbg !60
  %606 = add i64 %605, %484, !dbg !61
  %607 = add i64 %370, %180, !dbg !60
  %608 = add i64 %607, %484, !dbg !61
  %609 = add i64 %371, %181, !dbg !60
  %610 = add i64 %609, %484, !dbg !61
  %611 = add i64 %372, %182, !dbg !60
  %612 = add i64 %611, %484, !dbg !61
  %613 = add i64 %373, %183, !dbg !60
  %614 = add i64 %613, %484, !dbg !61
  %615 = add i64 %374, %184, !dbg !60
  %616 = add i64 %615, %484, !dbg !61
  %617 = add i64 %375, %185, !dbg !60
  %618 = add i64 %617, %484, !dbg !61
  %619 = add i64 %376, %186, !dbg !60
  %620 = add i64 %619, %484, !dbg !61
  %621 = add i64 %377, %187, !dbg !60
  %622 = add i64 %621, %484, !dbg !61
  %623 = add i64 %378, %188, !dbg !60
  %624 = add i64 %623, %484, !dbg !61
  %625 = getelementptr float, ptr addrspace(1) %2, i64 %594, !dbg !62
  %626 = getelementptr float, ptr addrspace(1) %2, i64 %596, !dbg !62
  %627 = getelementptr float, ptr addrspace(1) %2, i64 %598, !dbg !62
  %628 = getelementptr float, ptr addrspace(1) %2, i64 %600, !dbg !62
  %629 = getelementptr float, ptr addrspace(1) %2, i64 %602, !dbg !62
  %630 = getelementptr float, ptr addrspace(1) %2, i64 %604, !dbg !62
  %631 = getelementptr float, ptr addrspace(1) %2, i64 %606, !dbg !62
  %632 = getelementptr float, ptr addrspace(1) %2, i64 %608, !dbg !62
  %633 = getelementptr float, ptr addrspace(1) %2, i64 %610, !dbg !62
  %634 = getelementptr float, ptr addrspace(1) %2, i64 %612, !dbg !62
  %635 = getelementptr float, ptr addrspace(1) %2, i64 %614, !dbg !62
  %636 = getelementptr float, ptr addrspace(1) %2, i64 %616, !dbg !62
  %637 = getelementptr float, ptr addrspace(1) %2, i64 %618, !dbg !62
  %638 = getelementptr float, ptr addrspace(1) %2, i64 %620, !dbg !62
  %639 = getelementptr float, ptr addrspace(1) %2, i64 %622, !dbg !62
  %640 = getelementptr float, ptr addrspace(1) %2, i64 %624, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %641 = ptrtoint ptr addrspace(1) %625 to i64, !dbg !63
  %642 = ptrtoint ptr addrspace(1) %626 to i64, !dbg !63
  %643 = ptrtoint ptr addrspace(1) %627 to i64, !dbg !63
  %644 = ptrtoint ptr addrspace(1) %628 to i64, !dbg !63
  %645 = ptrtoint ptr addrspace(1) %629 to i64, !dbg !63
  %646 = ptrtoint ptr addrspace(1) %630 to i64, !dbg !63
  %647 = ptrtoint ptr addrspace(1) %631 to i64, !dbg !63
  %648 = ptrtoint ptr addrspace(1) %632 to i64, !dbg !63
  %649 = ptrtoint ptr addrspace(1) %633 to i64, !dbg !63
  %650 = ptrtoint ptr addrspace(1) %634 to i64, !dbg !63
  %651 = ptrtoint ptr addrspace(1) %635 to i64, !dbg !63
  %652 = ptrtoint ptr addrspace(1) %636 to i64, !dbg !63
  %653 = ptrtoint ptr addrspace(1) %637 to i64, !dbg !63
  %654 = ptrtoint ptr addrspace(1) %638 to i64, !dbg !63
  %655 = ptrtoint ptr addrspace(1) %639 to i64, !dbg !63
  %656 = ptrtoint ptr addrspace(1) %640 to i64, !dbg !63
  %657 = insertelement <1 x i64> poison, i64 %641, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %657, i1 true) #2, !dbg !63
  %658 = insertelement <1 x i64> poison, i64 %642, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %658, i1 true) #2, !dbg !63
  %659 = insertelement <1 x i64> poison, i64 %643, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %659, i1 true) #2, !dbg !63
  %660 = insertelement <1 x i64> poison, i64 %644, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %660, i1 true) #2, !dbg !63
  %661 = insertelement <1 x i64> poison, i64 %645, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %661, i1 true) #2, !dbg !63
  %662 = insertelement <1 x i64> poison, i64 %646, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %662, i1 true) #2, !dbg !63
  %663 = insertelement <1 x i64> poison, i64 %647, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %663, i1 true) #2, !dbg !63
  %664 = insertelement <1 x i64> poison, i64 %648, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %664, i1 true) #2, !dbg !63
  %665 = insertelement <1 x i64> poison, i64 %649, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %665, i1 true) #2, !dbg !63
  %666 = insertelement <1 x i64> poison, i64 %650, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %666, i1 true) #2, !dbg !63
  %667 = insertelement <1 x i64> poison, i64 %651, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %667, i1 true) #2, !dbg !63
  %668 = insertelement <1 x i64> poison, i64 %652, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %668, i1 true) #2, !dbg !63
  %669 = insertelement <1 x i64> poison, i64 %653, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %669, i1 true) #2, !dbg !63
  %670 = insertelement <1 x i64> poison, i64 %654, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %670, i1 true) #2, !dbg !63
  %671 = insertelement <1 x i64> poison, i64 %655, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %671, i1 true) #2, !dbg !63
  %672 = insertelement <1 x i64> poison, i64 %656, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %672, i1 true) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %673 = load i64, ptr addrspace(3) %315, align 16, !dbg !63
  %674 = load i64, ptr addrspace(3) %321, align 16, !dbg !63
  %675 = load i64, ptr addrspace(3) %327, align 16, !dbg !63
  %676 = load i64, ptr addrspace(3) %333, align 16, !dbg !63
  %677 = inttoptr i64 %673 to ptr addrspace(1), !dbg !63
  %678 = inttoptr i64 %674 to ptr addrspace(1), !dbg !63
  %679 = inttoptr i64 %675 to ptr addrspace(1), !dbg !63
  %680 = inttoptr i64 %676 to ptr addrspace(1), !dbg !63
  %681 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %677, i1 %237) #2, !dbg !63
  %682 = extractvalue { i32, i32, i32, i32 } %681, 0, !dbg !63
  %683 = extractvalue { i32, i32, i32, i32 } %681, 1, !dbg !63
  %684 = extractvalue { i32, i32, i32, i32 } %681, 2, !dbg !63
  %685 = extractvalue { i32, i32, i32, i32 } %681, 3, !dbg !63
  %686 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %678, i1 %238) #2, !dbg !63
  %687 = extractvalue { i32, i32, i32, i32 } %686, 0, !dbg !63
  %688 = extractvalue { i32, i32, i32, i32 } %686, 1, !dbg !63
  %689 = extractvalue { i32, i32, i32, i32 } %686, 2, !dbg !63
  %690 = extractvalue { i32, i32, i32, i32 } %686, 3, !dbg !63
  %691 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %679, i1 %239) #2, !dbg !63
  %692 = extractvalue { i32, i32, i32, i32 } %691, 0, !dbg !63
  %693 = extractvalue { i32, i32, i32, i32 } %691, 1, !dbg !63
  %694 = extractvalue { i32, i32, i32, i32 } %691, 2, !dbg !63
  %695 = extractvalue { i32, i32, i32, i32 } %691, 3, !dbg !63
  %696 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %680, i1 %240) #2, !dbg !63
  %697 = extractvalue { i32, i32, i32, i32 } %696, 0, !dbg !63
  %698 = extractvalue { i32, i32, i32, i32 } %696, 1, !dbg !63
  %699 = extractvalue { i32, i32, i32, i32 } %696, 2, !dbg !63
  %700 = extractvalue { i32, i32, i32, i32 } %696, 3, !dbg !63
  %701 = insertelement <2 x i32> poison, i32 %574, i64 0, !dbg !59
  %702 = insertelement <2 x i32> %701, i32 %340, i64 1, !dbg !59
  %703 = bitcast <2 x i32> %702 to <2 x float>, !dbg !59
  %704 = insertelement <2 x i32> poison, i32 %682, i64 0, !dbg !63
  %705 = insertelement <2 x i32> %704, i32 %452, i64 1, !dbg !63
  %706 = bitcast <2 x i32> %705 to <2 x float>, !dbg !63
  %707 = fsub <2 x float> %706, %703, !dbg !64
  %708 = insertelement <2 x float> poison, float %474, i64 0, !dbg !65
  %709 = shufflevector <2 x float> %708, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %710 = fmul <2 x float> %709, %707, !dbg !65
  %711 = fadd <2 x float> %710, %703, !dbg !66
  %712 = insertelement <2 x i32> poison, i32 %575, i64 0, !dbg !59
  %713 = insertelement <2 x i32> %712, i32 %341, i64 1, !dbg !59
  %714 = bitcast <2 x i32> %713 to <2 x float>, !dbg !59
  %715 = insertelement <2 x i32> poison, i32 %683, i64 0, !dbg !63
  %716 = insertelement <2 x i32> %715, i32 %453, i64 1, !dbg !63
  %717 = bitcast <2 x i32> %716 to <2 x float>, !dbg !63
  %718 = fsub <2 x float> %717, %714, !dbg !64
  %719 = fmul <2 x float> %709, %718, !dbg !65
  %720 = fadd <2 x float> %719, %714, !dbg !66
  %721 = insertelement <2 x i32> poison, i32 %576, i64 0, !dbg !59
  %722 = insertelement <2 x i32> %721, i32 %342, i64 1, !dbg !59
  %723 = bitcast <2 x i32> %722 to <2 x float>, !dbg !59
  %724 = insertelement <2 x i32> poison, i32 %684, i64 0, !dbg !63
  %725 = insertelement <2 x i32> %724, i32 %454, i64 1, !dbg !63
  %726 = bitcast <2 x i32> %725 to <2 x float>, !dbg !63
  %727 = fsub <2 x float> %726, %723, !dbg !64
  %728 = fmul <2 x float> %709, %727, !dbg !65
  %729 = fadd <2 x float> %728, %723, !dbg !66
  %730 = insertelement <2 x i32> poison, i32 %577, i64 0, !dbg !59
  %731 = insertelement <2 x i32> %730, i32 %343, i64 1, !dbg !59
  %732 = bitcast <2 x i32> %731 to <2 x float>, !dbg !59
  %733 = insertelement <2 x i32> poison, i32 %685, i64 0, !dbg !63
  %734 = insertelement <2 x i32> %733, i32 %455, i64 1, !dbg !63
  %735 = bitcast <2 x i32> %734 to <2 x float>, !dbg !63
  %736 = fsub <2 x float> %735, %732, !dbg !64
  %737 = fmul <2 x float> %709, %736, !dbg !65
  %738 = fadd <2 x float> %737, %732, !dbg !66
  %739 = insertelement <2 x i32> poison, i32 %579, i64 0, !dbg !59
  %740 = insertelement <2 x i32> %739, i32 %345, i64 1, !dbg !59
  %741 = bitcast <2 x i32> %740 to <2 x float>, !dbg !59
  %742 = insertelement <2 x i32> poison, i32 %687, i64 0, !dbg !63
  %743 = insertelement <2 x i32> %742, i32 %457, i64 1, !dbg !63
  %744 = bitcast <2 x i32> %743 to <2 x float>, !dbg !63
  %745 = fsub <2 x float> %744, %741, !dbg !64
  %746 = insertelement <2 x float> poison, float %476, i64 0, !dbg !65
  %747 = shufflevector <2 x float> %746, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %748 = fmul <2 x float> %747, %745, !dbg !65
  %749 = fadd <2 x float> %748, %741, !dbg !66
  %750 = insertelement <2 x i32> poison, i32 %580, i64 0, !dbg !59
  %751 = insertelement <2 x i32> %750, i32 %346, i64 1, !dbg !59
  %752 = bitcast <2 x i32> %751 to <2 x float>, !dbg !59
  %753 = insertelement <2 x i32> poison, i32 %688, i64 0, !dbg !63
  %754 = insertelement <2 x i32> %753, i32 %458, i64 1, !dbg !63
  %755 = bitcast <2 x i32> %754 to <2 x float>, !dbg !63
  %756 = fsub <2 x float> %755, %752, !dbg !64
  %757 = fmul <2 x float> %747, %756, !dbg !65
  %758 = fadd <2 x float> %757, %752, !dbg !66
  %759 = insertelement <2 x i32> poison, i32 %581, i64 0, !dbg !59
  %760 = insertelement <2 x i32> %759, i32 %347, i64 1, !dbg !59
  %761 = bitcast <2 x i32> %760 to <2 x float>, !dbg !59
  %762 = insertelement <2 x i32> poison, i32 %689, i64 0, !dbg !63
  %763 = insertelement <2 x i32> %762, i32 %459, i64 1, !dbg !63
  %764 = bitcast <2 x i32> %763 to <2 x float>, !dbg !63
  %765 = fsub <2 x float> %764, %761, !dbg !64
  %766 = fmul <2 x float> %747, %765, !dbg !65
  %767 = fadd <2 x float> %766, %761, !dbg !66
  %768 = insertelement <2 x i32> poison, i32 %582, i64 0, !dbg !59
  %769 = insertelement <2 x i32> %768, i32 %348, i64 1, !dbg !59
  %770 = bitcast <2 x i32> %769 to <2 x float>, !dbg !59
  %771 = insertelement <2 x i32> poison, i32 %690, i64 0, !dbg !63
  %772 = insertelement <2 x i32> %771, i32 %460, i64 1, !dbg !63
  %773 = bitcast <2 x i32> %772 to <2 x float>, !dbg !63
  %774 = fsub <2 x float> %773, %770, !dbg !64
  %775 = fmul <2 x float> %747, %774, !dbg !65
  %776 = fadd <2 x float> %775, %770, !dbg !66
  %777 = insertelement <2 x i32> poison, i32 %584, i64 0, !dbg !59
  %778 = insertelement <2 x i32> %777, i32 %350, i64 1, !dbg !59
  %779 = bitcast <2 x i32> %778 to <2 x float>, !dbg !59
  %780 = insertelement <2 x i32> poison, i32 %692, i64 0, !dbg !63
  %781 = insertelement <2 x i32> %780, i32 %462, i64 1, !dbg !63
  %782 = bitcast <2 x i32> %781 to <2 x float>, !dbg !63
  %783 = fsub <2 x float> %782, %779, !dbg !64
  %784 = insertelement <2 x float> poison, float %478, i64 0, !dbg !65
  %785 = shufflevector <2 x float> %784, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %786 = fmul <2 x float> %785, %783, !dbg !65
  %787 = fadd <2 x float> %786, %779, !dbg !66
  %788 = insertelement <2 x i32> poison, i32 %585, i64 0, !dbg !59
  %789 = insertelement <2 x i32> %788, i32 %351, i64 1, !dbg !59
  %790 = bitcast <2 x i32> %789 to <2 x float>, !dbg !59
  %791 = insertelement <2 x i32> poison, i32 %693, i64 0, !dbg !63
  %792 = insertelement <2 x i32> %791, i32 %463, i64 1, !dbg !63
  %793 = bitcast <2 x i32> %792 to <2 x float>, !dbg !63
  %794 = fsub <2 x float> %793, %790, !dbg !64
  %795 = fmul <2 x float> %785, %794, !dbg !65
  %796 = fadd <2 x float> %795, %790, !dbg !66
  %797 = insertelement <2 x i32> poison, i32 %586, i64 0, !dbg !59
  %798 = insertelement <2 x i32> %797, i32 %352, i64 1, !dbg !59
  %799 = bitcast <2 x i32> %798 to <2 x float>, !dbg !59
  %800 = insertelement <2 x i32> poison, i32 %694, i64 0, !dbg !63
  %801 = insertelement <2 x i32> %800, i32 %464, i64 1, !dbg !63
  %802 = bitcast <2 x i32> %801 to <2 x float>, !dbg !63
  %803 = fsub <2 x float> %802, %799, !dbg !64
  %804 = fmul <2 x float> %785, %803, !dbg !65
  %805 = fadd <2 x float> %804, %799, !dbg !66
  %806 = insertelement <2 x i32> poison, i32 %587, i64 0, !dbg !59
  %807 = insertelement <2 x i32> %806, i32 %353, i64 1, !dbg !59
  %808 = bitcast <2 x i32> %807 to <2 x float>, !dbg !59
  %809 = insertelement <2 x i32> poison, i32 %695, i64 0, !dbg !63
  %810 = insertelement <2 x i32> %809, i32 %465, i64 1, !dbg !63
  %811 = bitcast <2 x i32> %810 to <2 x float>, !dbg !63
  %812 = fsub <2 x float> %811, %808, !dbg !64
  %813 = fmul <2 x float> %785, %812, !dbg !65
  %814 = fadd <2 x float> %813, %808, !dbg !66
  %815 = insertelement <2 x i32> poison, i32 %589, i64 0, !dbg !59
  %816 = insertelement <2 x i32> %815, i32 %355, i64 1, !dbg !59
  %817 = bitcast <2 x i32> %816 to <2 x float>, !dbg !59
  %818 = insertelement <2 x i32> poison, i32 %697, i64 0, !dbg !63
  %819 = insertelement <2 x i32> %818, i32 %467, i64 1, !dbg !63
  %820 = bitcast <2 x i32> %819 to <2 x float>, !dbg !63
  %821 = fsub <2 x float> %820, %817, !dbg !64
  %822 = insertelement <2 x float> poison, float %480, i64 0, !dbg !65
  %823 = shufflevector <2 x float> %822, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %824 = fmul <2 x float> %823, %821, !dbg !65
  %825 = fadd <2 x float> %824, %817, !dbg !66
  %826 = insertelement <2 x i32> poison, i32 %590, i64 0, !dbg !59
  %827 = insertelement <2 x i32> %826, i32 %356, i64 1, !dbg !59
  %828 = bitcast <2 x i32> %827 to <2 x float>, !dbg !59
  %829 = insertelement <2 x i32> poison, i32 %698, i64 0, !dbg !63
  %830 = insertelement <2 x i32> %829, i32 %468, i64 1, !dbg !63
  %831 = bitcast <2 x i32> %830 to <2 x float>, !dbg !63
  %832 = fsub <2 x float> %831, %828, !dbg !64
  %833 = fmul <2 x float> %823, %832, !dbg !65
  %834 = fadd <2 x float> %833, %828, !dbg !66
  %835 = insertelement <2 x i32> poison, i32 %591, i64 0, !dbg !59
  %836 = insertelement <2 x i32> %835, i32 %357, i64 1, !dbg !59
  %837 = bitcast <2 x i32> %836 to <2 x float>, !dbg !59
  %838 = insertelement <2 x i32> poison, i32 %699, i64 0, !dbg !63
  %839 = insertelement <2 x i32> %838, i32 %469, i64 1, !dbg !63
  %840 = bitcast <2 x i32> %839 to <2 x float>, !dbg !63
  %841 = fsub <2 x float> %840, %837, !dbg !64
  %842 = fmul <2 x float> %823, %841, !dbg !65
  %843 = fadd <2 x float> %842, %837, !dbg !66
  %844 = insertelement <2 x i32> poison, i32 %592, i64 0, !dbg !59
  %845 = insertelement <2 x i32> %844, i32 %358, i64 1, !dbg !59
  %846 = bitcast <2 x i32> %845 to <2 x float>, !dbg !59
  %847 = insertelement <2 x i32> poison, i32 %700, i64 0, !dbg !63
  %848 = insertelement <2 x i32> %847, i32 %470, i64 1, !dbg !63
  %849 = bitcast <2 x i32> %848 to <2 x float>, !dbg !63
  %850 = fsub <2 x float> %849, %846, !dbg !64
  %851 = fmul <2 x float> %823, %850, !dbg !65
  %852 = fadd <2 x float> %851, %846, !dbg !66
  %853 = extractelement <2 x float> %711, i64 0, !dbg !67
  %854 = extractelement <2 x float> %711, i64 1, !dbg !68
  %855 = fsub float %853, %854, !dbg !67
  %856 = extractelement <2 x float> %720, i64 0, !dbg !67
  %857 = extractelement <2 x float> %720, i64 1, !dbg !68
  %858 = fsub float %856, %857, !dbg !67
  %859 = extractelement <2 x float> %729, i64 0, !dbg !67
  %860 = extractelement <2 x float> %729, i64 1, !dbg !68
  %861 = fsub float %859, %860, !dbg !67
  %862 = extractelement <2 x float> %738, i64 0, !dbg !67
  %863 = extractelement <2 x float> %738, i64 1, !dbg !68
  %864 = fsub float %862, %863, !dbg !67
  %865 = extractelement <2 x float> %749, i64 0, !dbg !67
  %866 = extractelement <2 x float> %749, i64 1, !dbg !68
  %867 = fsub float %865, %866, !dbg !67
  %868 = extractelement <2 x float> %758, i64 0, !dbg !67
  %869 = extractelement <2 x float> %758, i64 1, !dbg !68
  %870 = fsub float %868, %869, !dbg !67
  %871 = extractelement <2 x float> %767, i64 0, !dbg !67
  %872 = extractelement <2 x float> %767, i64 1, !dbg !68
  %873 = fsub float %871, %872, !dbg !67
  %874 = extractelement <2 x float> %776, i64 0, !dbg !67
  %875 = extractelement <2 x float> %776, i64 1, !dbg !68
  %876 = fsub float %874, %875, !dbg !67
  %877 = extractelement <2 x float> %787, i64 0, !dbg !67
  %878 = extractelement <2 x float> %787, i64 1, !dbg !68
  %879 = fsub float %877, %878, !dbg !67
  %880 = extractelement <2 x float> %796, i64 0, !dbg !67
  %881 = extractelement <2 x float> %796, i64 1, !dbg !68
  %882 = fsub float %880, %881, !dbg !67
  %883 = extractelement <2 x float> %805, i64 0, !dbg !67
  %884 = extractelement <2 x float> %805, i64 1, !dbg !68
  %885 = fsub float %883, %884, !dbg !67
  %886 = extractelement <2 x float> %814, i64 0, !dbg !67
  %887 = extractelement <2 x float> %814, i64 1, !dbg !68
  %888 = fsub float %886, %887, !dbg !67
  %889 = extractelement <2 x float> %825, i64 0, !dbg !67
  %890 = extractelement <2 x float> %825, i64 1, !dbg !68
  %891 = fsub float %889, %890, !dbg !67
  %892 = extractelement <2 x float> %834, i64 0, !dbg !67
  %893 = extractelement <2 x float> %834, i64 1, !dbg !68
  %894 = fsub float %892, %893, !dbg !67
  %895 = extractelement <2 x float> %843, i64 0, !dbg !67
  %896 = extractelement <2 x float> %843, i64 1, !dbg !68
  %897 = fsub float %895, %896, !dbg !67
  %898 = extractelement <2 x float> %852, i64 0, !dbg !67
  %899 = extractelement <2 x float> %852, i64 1, !dbg !68
  %900 = fsub float %898, %899, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %901 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %901, i1 true) #2, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %902 = load float, ptr addrspace(3) %473, align 8, !dbg !69
  %903 = load float, ptr addrspace(3) %475, align 8, !dbg !69
  %904 = load float, ptr addrspace(3) %477, align 8, !dbg !69
  %905 = load float, ptr addrspace(3) %479, align 8, !dbg !69
  %906 = fmul float %855, %902, !dbg !69
  %907 = fmul float %858, %902, !dbg !69
  %908 = fmul float %861, %902, !dbg !69
  %909 = fmul float %864, %902, !dbg !69
  %910 = fmul float %867, %903, !dbg !69
  %911 = fmul float %870, %903, !dbg !69
  %912 = fmul float %873, %903, !dbg !69
  %913 = fmul float %876, %903, !dbg !69
  %914 = fmul float %879, %904, !dbg !69
  %915 = fmul float %882, %904, !dbg !69
  %916 = fmul float %885, %904, !dbg !69
  %917 = fmul float %888, %904, !dbg !69
  %918 = fmul float %891, %905, !dbg !69
  %919 = fmul float %894, %905, !dbg !69
  %920 = fmul float %897, %905, !dbg !69
  %921 = fmul float %900, %905, !dbg !69
  %922 = fadd float %854, %906, !dbg !68
  %923 = fadd float %857, %907, !dbg !68
  %924 = fadd float %860, %908, !dbg !68
  %925 = fadd float %863, %909, !dbg !68
  %926 = fadd float %866, %910, !dbg !68
  %927 = fadd float %869, %911, !dbg !68
  %928 = fadd float %872, %912, !dbg !68
  %929 = fadd float %875, %913, !dbg !68
  %930 = fadd float %878, %914, !dbg !68
  %931 = fadd float %881, %915, !dbg !68
  %932 = fadd float %884, %916, !dbg !68
  %933 = fadd float %887, %917, !dbg !68
  %934 = fadd float %890, %918, !dbg !68
  %935 = fadd float %893, %919, !dbg !68
  %936 = fadd float %896, %920, !dbg !68
  %937 = fadd float %899, %921, !dbg !68
  %938 = fsub float 0.000000e+00, %922, !dbg !70
  %939 = fsub float 0.000000e+00, %923, !dbg !70
  %940 = fsub float 0.000000e+00, %924, !dbg !70
  %941 = fsub float 0.000000e+00, %925, !dbg !70
  %942 = fsub float 0.000000e+00, %926, !dbg !70
  %943 = fsub float 0.000000e+00, %927, !dbg !70
  %944 = fsub float 0.000000e+00, %928, !dbg !70
  %945 = fsub float 0.000000e+00, %929, !dbg !70
  %946 = fsub float 0.000000e+00, %930, !dbg !70
  %947 = fsub float 0.000000e+00, %931, !dbg !70
  %948 = fsub float 0.000000e+00, %932, !dbg !70
  %949 = fsub float 0.000000e+00, %933, !dbg !70
  %950 = fsub float 0.000000e+00, %934, !dbg !70
  %951 = fsub float 0.000000e+00, %935, !dbg !70
  %952 = fsub float 0.000000e+00, %936, !dbg !70
  %953 = fsub float 0.000000e+00, %937, !dbg !70
  %954 = fmul float %938, 0x3FF7154760000000, !dbg !74
  %955 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %954) #2, !dbg !74
  %956 = fmul float %939, 0x3FF7154760000000, !dbg !74
  %957 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %956) #2, !dbg !74
  %958 = fmul float %940, 0x3FF7154760000000, !dbg !74
  %959 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %958) #2, !dbg !74
  %960 = fmul float %941, 0x3FF7154760000000, !dbg !74
  %961 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %960) #2, !dbg !74
  %962 = fmul float %942, 0x3FF7154760000000, !dbg !74
  %963 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %962) #2, !dbg !74
  %964 = fmul float %943, 0x3FF7154760000000, !dbg !74
  %965 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %964) #2, !dbg !74
  %966 = fmul float %944, 0x3FF7154760000000, !dbg !74
  %967 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %966) #2, !dbg !74
  %968 = fmul float %945, 0x3FF7154760000000, !dbg !74
  %969 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %968) #2, !dbg !74
  %970 = fmul float %946, 0x3FF7154760000000, !dbg !74
  %971 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %970) #2, !dbg !74
  %972 = fmul float %947, 0x3FF7154760000000, !dbg !74
  %973 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %972) #2, !dbg !74
  %974 = fmul float %948, 0x3FF7154760000000, !dbg !74
  %975 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %974) #2, !dbg !74
  %976 = fmul float %949, 0x3FF7154760000000, !dbg !74
  %977 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %976) #2, !dbg !74
  %978 = fmul float %950, 0x3FF7154760000000, !dbg !74
  %979 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %978) #2, !dbg !74
  %980 = fmul float %951, 0x3FF7154760000000, !dbg !74
  %981 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %980) #2, !dbg !74
  %982 = fmul float %952, 0x3FF7154760000000, !dbg !74
  %983 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %982) #2, !dbg !74
  %984 = fmul float %953, 0x3FF7154760000000, !dbg !74
  %985 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %984) #2, !dbg !74
  %986 = fadd float %955, 1.000000e+00, !dbg !75
  %987 = fadd float %957, 1.000000e+00, !dbg !75
  %988 = fadd float %959, 1.000000e+00, !dbg !75
  %989 = fadd float %961, 1.000000e+00, !dbg !75
  %990 = fadd float %963, 1.000000e+00, !dbg !75
  %991 = fadd float %965, 1.000000e+00, !dbg !75
  %992 = fadd float %967, 1.000000e+00, !dbg !75
  %993 = fadd float %969, 1.000000e+00, !dbg !75
  %994 = fadd float %971, 1.000000e+00, !dbg !75
  %995 = fadd float %973, 1.000000e+00, !dbg !75
  %996 = fadd float %975, 1.000000e+00, !dbg !75
  %997 = fadd float %977, 1.000000e+00, !dbg !75
  %998 = fadd float %979, 1.000000e+00, !dbg !75
  %999 = fadd float %981, 1.000000e+00, !dbg !75
  %1000 = fadd float %983, 1.000000e+00, !dbg !75
  %1001 = fadd float %985, 1.000000e+00, !dbg !75
  %1002 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %986) #2, !dbg !76
  %1003 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %987) #2, !dbg !76
  %1004 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %988) #2, !dbg !76
  %1005 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %989) #2, !dbg !76
  %1006 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %990) #2, !dbg !76
  %1007 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %991) #2, !dbg !76
  %1008 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %992) #2, !dbg !76
  %1009 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %993) #2, !dbg !76
  %1010 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %994) #2, !dbg !76
  %1011 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %995) #2, !dbg !76
  %1012 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %996) #2, !dbg !76
  %1013 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %997) #2, !dbg !76
  %1014 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %998) #2, !dbg !76
  %1015 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %999) #2, !dbg !76
  %1016 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1000) #2, !dbg !76
  %1017 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1001) #2, !dbg !76
  %1018 = getelementptr float, ptr addrspace(1) %7, i64 %190, !dbg !77
  %1019 = getelementptr float, ptr addrspace(1) %7, i64 %192, !dbg !77
  %1020 = getelementptr float, ptr addrspace(1) %7, i64 %194, !dbg !77
  %1021 = getelementptr float, ptr addrspace(1) %7, i64 %196, !dbg !77
  %1022 = getelementptr float, ptr addrspace(1) %7, i64 %198, !dbg !77
  %1023 = getelementptr float, ptr addrspace(1) %7, i64 %200, !dbg !77
  %1024 = getelementptr float, ptr addrspace(1) %7, i64 %202, !dbg !77
  %1025 = getelementptr float, ptr addrspace(1) %7, i64 %204, !dbg !77
  %1026 = getelementptr float, ptr addrspace(1) %7, i64 %206, !dbg !77
  %1027 = getelementptr float, ptr addrspace(1) %7, i64 %208, !dbg !77
  %1028 = getelementptr float, ptr addrspace(1) %7, i64 %210, !dbg !77
  %1029 = getelementptr float, ptr addrspace(1) %7, i64 %212, !dbg !77
  %1030 = getelementptr float, ptr addrspace(1) %7, i64 %214, !dbg !77
  %1031 = getelementptr float, ptr addrspace(1) %7, i64 %216, !dbg !77
  %1032 = getelementptr float, ptr addrspace(1) %7, i64 %218, !dbg !77
  %1033 = getelementptr float, ptr addrspace(1) %7, i64 %220, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1034 = ptrtoint ptr addrspace(1) %1018 to i64, !dbg !78
  %1035 = ptrtoint ptr addrspace(1) %1019 to i64, !dbg !78
  %1036 = ptrtoint ptr addrspace(1) %1020 to i64, !dbg !78
  %1037 = ptrtoint ptr addrspace(1) %1021 to i64, !dbg !78
  %1038 = ptrtoint ptr addrspace(1) %1022 to i64, !dbg !78
  %1039 = ptrtoint ptr addrspace(1) %1023 to i64, !dbg !78
  %1040 = ptrtoint ptr addrspace(1) %1024 to i64, !dbg !78
  %1041 = ptrtoint ptr addrspace(1) %1025 to i64, !dbg !78
  %1042 = ptrtoint ptr addrspace(1) %1026 to i64, !dbg !78
  %1043 = ptrtoint ptr addrspace(1) %1027 to i64, !dbg !78
  %1044 = ptrtoint ptr addrspace(1) %1028 to i64, !dbg !78
  %1045 = ptrtoint ptr addrspace(1) %1029 to i64, !dbg !78
  %1046 = ptrtoint ptr addrspace(1) %1030 to i64, !dbg !78
  %1047 = ptrtoint ptr addrspace(1) %1031 to i64, !dbg !78
  %1048 = ptrtoint ptr addrspace(1) %1032 to i64, !dbg !78
  %1049 = ptrtoint ptr addrspace(1) %1033 to i64, !dbg !78
  %1050 = insertelement <1 x i64> poison, i64 %1034, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %1050, i1 true) #2, !dbg !78
  %1051 = insertelement <1 x i64> poison, i64 %1035, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %1051, i1 true) #2, !dbg !78
  %1052 = insertelement <1 x i64> poison, i64 %1036, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %1052, i1 true) #2, !dbg !78
  %1053 = insertelement <1 x i64> poison, i64 %1037, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %1053, i1 true) #2, !dbg !78
  %1054 = insertelement <1 x i64> poison, i64 %1038, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %1054, i1 true) #2, !dbg !78
  %1055 = insertelement <1 x i64> poison, i64 %1039, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %1055, i1 true) #2, !dbg !78
  %1056 = insertelement <1 x i64> poison, i64 %1040, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %1056, i1 true) #2, !dbg !78
  %1057 = insertelement <1 x i64> poison, i64 %1041, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %1057, i1 true) #2, !dbg !78
  %1058 = insertelement <1 x i64> poison, i64 %1042, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %1058, i1 true) #2, !dbg !78
  %1059 = insertelement <1 x i64> poison, i64 %1043, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %1059, i1 true) #2, !dbg !78
  %1060 = insertelement <1 x i64> poison, i64 %1044, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %1060, i1 true) #2, !dbg !78
  %1061 = insertelement <1 x i64> poison, i64 %1045, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %1061, i1 true) #2, !dbg !78
  %1062 = insertelement <1 x i64> poison, i64 %1046, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %1062, i1 true) #2, !dbg !78
  %1063 = insertelement <1 x i64> poison, i64 %1047, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %1063, i1 true) #2, !dbg !78
  %1064 = insertelement <1 x i64> poison, i64 %1048, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %1064, i1 true) #2, !dbg !78
  %1065 = insertelement <1 x i64> poison, i64 %1049, i64 0, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %1065, i1 true) #2, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1066 = load i64, ptr addrspace(3) %315, align 16, !dbg !78
  %1067 = load i64, ptr addrspace(3) %321, align 16, !dbg !78
  %1068 = load i64, ptr addrspace(3) %327, align 16, !dbg !78
  %1069 = load i64, ptr addrspace(3) %333, align 16, !dbg !78
  %1070 = inttoptr i64 %1066 to ptr addrspace(1), !dbg !78
  %1071 = inttoptr i64 %1067 to ptr addrspace(1), !dbg !78
  %1072 = inttoptr i64 %1068 to ptr addrspace(1), !dbg !78
  %1073 = inttoptr i64 %1069 to ptr addrspace(1), !dbg !78
  %1074 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1070, i1 %237) #2, !dbg !78
  %1075 = extractvalue { i32, i32, i32, i32 } %1074, 0, !dbg !78
  %1076 = extractvalue { i32, i32, i32, i32 } %1074, 1, !dbg !78
  %1077 = extractvalue { i32, i32, i32, i32 } %1074, 2, !dbg !78
  %1078 = extractvalue { i32, i32, i32, i32 } %1074, 3, !dbg !78
  %1079 = bitcast i32 %1076 to float, !dbg !78
  %1080 = bitcast i32 %1077 to float, !dbg !78
  %1081 = bitcast i32 %1078 to float, !dbg !78
  %1082 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1071, i1 %238) #2, !dbg !78
  %1083 = extractvalue { i32, i32, i32, i32 } %1082, 0, !dbg !78
  %1084 = extractvalue { i32, i32, i32, i32 } %1082, 1, !dbg !78
  %1085 = extractvalue { i32, i32, i32, i32 } %1082, 2, !dbg !78
  %1086 = extractvalue { i32, i32, i32, i32 } %1082, 3, !dbg !78
  %1087 = bitcast i32 %1083 to float, !dbg !78
  %1088 = bitcast i32 %1084 to float, !dbg !78
  %1089 = bitcast i32 %1085 to float, !dbg !78
  %1090 = bitcast i32 %1086 to float, !dbg !78
  %1091 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1072, i1 %239) #2, !dbg !78
  %1092 = extractvalue { i32, i32, i32, i32 } %1091, 0, !dbg !78
  %1093 = extractvalue { i32, i32, i32, i32 } %1091, 1, !dbg !78
  %1094 = extractvalue { i32, i32, i32, i32 } %1091, 2, !dbg !78
  %1095 = extractvalue { i32, i32, i32, i32 } %1091, 3, !dbg !78
  %1096 = bitcast i32 %1092 to float, !dbg !78
  %1097 = bitcast i32 %1093 to float, !dbg !78
  %1098 = bitcast i32 %1094 to float, !dbg !78
  %1099 = bitcast i32 %1095 to float, !dbg !78
  %1100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1073, i1 %240) #2, !dbg !78
  %1101 = extractvalue { i32, i32, i32, i32 } %1100, 0, !dbg !78
  %1102 = extractvalue { i32, i32, i32, i32 } %1100, 1, !dbg !78
  %1103 = extractvalue { i32, i32, i32, i32 } %1100, 2, !dbg !78
  %1104 = extractvalue { i32, i32, i32, i32 } %1100, 3, !dbg !78
  %1105 = bitcast i32 %1101 to float, !dbg !78
  %1106 = bitcast i32 %1102 to float, !dbg !78
  %1107 = bitcast i32 %1103 to float, !dbg !78
  %1108 = bitcast i32 %1104 to float, !dbg !78
  %1109 = getelementptr float, ptr addrspace(1) %8, i64 %190, !dbg !79
  %1110 = getelementptr float, ptr addrspace(1) %8, i64 %192, !dbg !79
  %1111 = getelementptr float, ptr addrspace(1) %8, i64 %194, !dbg !79
  %1112 = getelementptr float, ptr addrspace(1) %8, i64 %196, !dbg !79
  %1113 = getelementptr float, ptr addrspace(1) %8, i64 %198, !dbg !79
  %1114 = getelementptr float, ptr addrspace(1) %8, i64 %200, !dbg !79
  %1115 = getelementptr float, ptr addrspace(1) %8, i64 %202, !dbg !79
  %1116 = getelementptr float, ptr addrspace(1) %8, i64 %204, !dbg !79
  %1117 = getelementptr float, ptr addrspace(1) %8, i64 %206, !dbg !79
  %1118 = getelementptr float, ptr addrspace(1) %8, i64 %208, !dbg !79
  %1119 = getelementptr float, ptr addrspace(1) %8, i64 %210, !dbg !79
  %1120 = getelementptr float, ptr addrspace(1) %8, i64 %212, !dbg !79
  %1121 = getelementptr float, ptr addrspace(1) %8, i64 %214, !dbg !79
  %1122 = getelementptr float, ptr addrspace(1) %8, i64 %216, !dbg !79
  %1123 = getelementptr float, ptr addrspace(1) %8, i64 %218, !dbg !79
  %1124 = getelementptr float, ptr addrspace(1) %8, i64 %220, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1125 = ptrtoint ptr addrspace(1) %1109 to i64, !dbg !80
  %1126 = ptrtoint ptr addrspace(1) %1110 to i64, !dbg !80
  %1127 = ptrtoint ptr addrspace(1) %1111 to i64, !dbg !80
  %1128 = ptrtoint ptr addrspace(1) %1112 to i64, !dbg !80
  %1129 = ptrtoint ptr addrspace(1) %1113 to i64, !dbg !80
  %1130 = ptrtoint ptr addrspace(1) %1114 to i64, !dbg !80
  %1131 = ptrtoint ptr addrspace(1) %1115 to i64, !dbg !80
  %1132 = ptrtoint ptr addrspace(1) %1116 to i64, !dbg !80
  %1133 = ptrtoint ptr addrspace(1) %1117 to i64, !dbg !80
  %1134 = ptrtoint ptr addrspace(1) %1118 to i64, !dbg !80
  %1135 = ptrtoint ptr addrspace(1) %1119 to i64, !dbg !80
  %1136 = ptrtoint ptr addrspace(1) %1120 to i64, !dbg !80
  %1137 = ptrtoint ptr addrspace(1) %1121 to i64, !dbg !80
  %1138 = ptrtoint ptr addrspace(1) %1122 to i64, !dbg !80
  %1139 = ptrtoint ptr addrspace(1) %1123 to i64, !dbg !80
  %1140 = ptrtoint ptr addrspace(1) %1124 to i64, !dbg !80
  %1141 = insertelement <1 x i64> poison, i64 %1125, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %1141, i1 true) #2, !dbg !80
  %1142 = insertelement <1 x i64> poison, i64 %1126, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %1142, i1 true) #2, !dbg !80
  %1143 = insertelement <1 x i64> poison, i64 %1127, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %1143, i1 true) #2, !dbg !80
  %1144 = insertelement <1 x i64> poison, i64 %1128, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %1144, i1 true) #2, !dbg !80
  %1145 = insertelement <1 x i64> poison, i64 %1129, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %1145, i1 true) #2, !dbg !80
  %1146 = insertelement <1 x i64> poison, i64 %1130, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %1146, i1 true) #2, !dbg !80
  %1147 = insertelement <1 x i64> poison, i64 %1131, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %1147, i1 true) #2, !dbg !80
  %1148 = insertelement <1 x i64> poison, i64 %1132, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %1148, i1 true) #2, !dbg !80
  %1149 = insertelement <1 x i64> poison, i64 %1133, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %1149, i1 true) #2, !dbg !80
  %1150 = insertelement <1 x i64> poison, i64 %1134, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %1150, i1 true) #2, !dbg !80
  %1151 = insertelement <1 x i64> poison, i64 %1135, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %1151, i1 true) #2, !dbg !80
  %1152 = insertelement <1 x i64> poison, i64 %1136, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %1152, i1 true) #2, !dbg !80
  %1153 = insertelement <1 x i64> poison, i64 %1137, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %1153, i1 true) #2, !dbg !80
  %1154 = insertelement <1 x i64> poison, i64 %1138, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %1154, i1 true) #2, !dbg !80
  %1155 = insertelement <1 x i64> poison, i64 %1139, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %1155, i1 true) #2, !dbg !80
  %1156 = insertelement <1 x i64> poison, i64 %1140, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %1156, i1 true) #2, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1157 = load i64, ptr addrspace(3) %315, align 16, !dbg !80
  %1158 = load i64, ptr addrspace(3) %321, align 16, !dbg !80
  %1159 = load i64, ptr addrspace(3) %327, align 16, !dbg !80
  %1160 = load i64, ptr addrspace(3) %333, align 16, !dbg !80
  %1161 = inttoptr i64 %1157 to ptr addrspace(1), !dbg !80
  %1162 = inttoptr i64 %1158 to ptr addrspace(1), !dbg !80
  %1163 = inttoptr i64 %1159 to ptr addrspace(1), !dbg !80
  %1164 = inttoptr i64 %1160 to ptr addrspace(1), !dbg !80
  %1165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1161, i1 %237) #2, !dbg !80
  %1166 = extractvalue { i32, i32, i32, i32 } %1165, 0, !dbg !80
  %1167 = extractvalue { i32, i32, i32, i32 } %1165, 1, !dbg !80
  %1168 = extractvalue { i32, i32, i32, i32 } %1165, 2, !dbg !80
  %1169 = extractvalue { i32, i32, i32, i32 } %1165, 3, !dbg !80
  %1170 = bitcast i32 %1166 to float, !dbg !80
  %1171 = bitcast i32 %1167 to float, !dbg !80
  %1172 = bitcast i32 %1168 to float, !dbg !80
  %1173 = bitcast i32 %1169 to float, !dbg !80
  %1174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1162, i1 %238) #2, !dbg !80
  %1175 = extractvalue { i32, i32, i32, i32 } %1174, 0, !dbg !80
  %1176 = extractvalue { i32, i32, i32, i32 } %1174, 1, !dbg !80
  %1177 = extractvalue { i32, i32, i32, i32 } %1174, 2, !dbg !80
  %1178 = extractvalue { i32, i32, i32, i32 } %1174, 3, !dbg !80
  %1179 = bitcast i32 %1175 to float, !dbg !80
  %1180 = bitcast i32 %1176 to float, !dbg !80
  %1181 = bitcast i32 %1177 to float, !dbg !80
  %1182 = bitcast i32 %1178 to float, !dbg !80
  %1183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1163, i1 %239) #2, !dbg !80
  %1184 = extractvalue { i32, i32, i32, i32 } %1183, 0, !dbg !80
  %1185 = extractvalue { i32, i32, i32, i32 } %1183, 1, !dbg !80
  %1186 = extractvalue { i32, i32, i32, i32 } %1183, 2, !dbg !80
  %1187 = extractvalue { i32, i32, i32, i32 } %1183, 3, !dbg !80
  %1188 = bitcast i32 %1184 to float, !dbg !80
  %1189 = bitcast i32 %1185 to float, !dbg !80
  %1190 = bitcast i32 %1186 to float, !dbg !80
  %1191 = bitcast i32 %1187 to float, !dbg !80
  %1192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1164, i1 %240) #2, !dbg !80
  %1193 = extractvalue { i32, i32, i32, i32 } %1192, 0, !dbg !80
  %1194 = extractvalue { i32, i32, i32, i32 } %1192, 1, !dbg !80
  %1195 = extractvalue { i32, i32, i32, i32 } %1192, 2, !dbg !80
  %1196 = extractvalue { i32, i32, i32, i32 } %1192, 3, !dbg !80
  %1197 = bitcast i32 %1193 to float, !dbg !80
  %1198 = bitcast i32 %1194 to float, !dbg !80
  %1199 = bitcast i32 %1195 to float, !dbg !80
  %1200 = bitcast i32 %1196 to float, !dbg !80
  %1201 = fsub float 0.000000e+00, %1170, !dbg !81
  %1202 = fsub float 0.000000e+00, %1171, !dbg !81
  %1203 = fsub float 0.000000e+00, %1172, !dbg !81
  %1204 = fsub float 0.000000e+00, %1173, !dbg !81
  %1205 = fsub float 0.000000e+00, %1179, !dbg !81
  %1206 = fsub float 0.000000e+00, %1180, !dbg !81
  %1207 = fsub float 0.000000e+00, %1181, !dbg !81
  %1208 = fsub float 0.000000e+00, %1182, !dbg !81
  %1209 = fsub float 0.000000e+00, %1188, !dbg !81
  %1210 = fsub float 0.000000e+00, %1189, !dbg !81
  %1211 = fsub float 0.000000e+00, %1190, !dbg !81
  %1212 = fsub float 0.000000e+00, %1191, !dbg !81
  %1213 = fsub float 0.000000e+00, %1197, !dbg !81
  %1214 = fsub float 0.000000e+00, %1198, !dbg !81
  %1215 = fsub float 0.000000e+00, %1199, !dbg !81
  %1216 = fsub float 0.000000e+00, %1200, !dbg !81
  %1217 = fmul float %1201, 0x3FF7154760000000, !dbg !83
  %1218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1217) #2, !dbg !83
  %1219 = fmul float %1202, 0x3FF7154760000000, !dbg !83
  %1220 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1219) #2, !dbg !83
  %1221 = fmul float %1203, 0x3FF7154760000000, !dbg !83
  %1222 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1221) #2, !dbg !83
  %1223 = fmul float %1204, 0x3FF7154760000000, !dbg !83
  %1224 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1223) #2, !dbg !83
  %1225 = fmul float %1205, 0x3FF7154760000000, !dbg !83
  %1226 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1225) #2, !dbg !83
  %1227 = fmul float %1206, 0x3FF7154760000000, !dbg !83
  %1228 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1227) #2, !dbg !83
  %1229 = fmul float %1207, 0x3FF7154760000000, !dbg !83
  %1230 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1229) #2, !dbg !83
  %1231 = fmul float %1208, 0x3FF7154760000000, !dbg !83
  %1232 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1231) #2, !dbg !83
  %1233 = fmul float %1209, 0x3FF7154760000000, !dbg !83
  %1234 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1233) #2, !dbg !83
  %1235 = fmul float %1210, 0x3FF7154760000000, !dbg !83
  %1236 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1235) #2, !dbg !83
  %1237 = fmul float %1211, 0x3FF7154760000000, !dbg !83
  %1238 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1237) #2, !dbg !83
  %1239 = fmul float %1212, 0x3FF7154760000000, !dbg !83
  %1240 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1239) #2, !dbg !83
  %1241 = fmul float %1213, 0x3FF7154760000000, !dbg !83
  %1242 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1241) #2, !dbg !83
  %1243 = fmul float %1214, 0x3FF7154760000000, !dbg !83
  %1244 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1243) #2, !dbg !83
  %1245 = fmul float %1215, 0x3FF7154760000000, !dbg !83
  %1246 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1245) #2, !dbg !83
  %1247 = fmul float %1216, 0x3FF7154760000000, !dbg !83
  %1248 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1247) #2, !dbg !83
  %1249 = fadd float %1218, 1.000000e+00, !dbg !84
  %1250 = fadd float %1220, 1.000000e+00, !dbg !84
  %1251 = fadd float %1222, 1.000000e+00, !dbg !84
  %1252 = fadd float %1224, 1.000000e+00, !dbg !84
  %1253 = fadd float %1226, 1.000000e+00, !dbg !84
  %1254 = fadd float %1228, 1.000000e+00, !dbg !84
  %1255 = fadd float %1230, 1.000000e+00, !dbg !84
  %1256 = fadd float %1232, 1.000000e+00, !dbg !84
  %1257 = fadd float %1234, 1.000000e+00, !dbg !84
  %1258 = fadd float %1236, 1.000000e+00, !dbg !84
  %1259 = fadd float %1238, 1.000000e+00, !dbg !84
  %1260 = fadd float %1240, 1.000000e+00, !dbg !84
  %1261 = fadd float %1242, 1.000000e+00, !dbg !84
  %1262 = fadd float %1244, 1.000000e+00, !dbg !84
  %1263 = fadd float %1246, 1.000000e+00, !dbg !84
  %1264 = fadd float %1248, 1.000000e+00, !dbg !84
  %1265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1249) #2, !dbg !85
  %1266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1250) #2, !dbg !85
  %1267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1251) #2, !dbg !85
  %1268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1252) #2, !dbg !85
  %1269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1253) #2, !dbg !85
  %1270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1254) #2, !dbg !85
  %1271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1255) #2, !dbg !85
  %1272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1256) #2, !dbg !85
  %1273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1257) #2, !dbg !85
  %1274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1258) #2, !dbg !85
  %1275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1259) #2, !dbg !85
  %1276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1260) #2, !dbg !85
  %1277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1261) #2, !dbg !85
  %1278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1262) #2, !dbg !85
  %1279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1263) #2, !dbg !85
  %1280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1264) #2, !dbg !85
  %1281 = fmul float %1266, %1079, !dbg !86
  %1282 = fmul float %1267, %1080, !dbg !86
  %1283 = fmul float %1268, %1081, !dbg !86
  %1284 = fmul float %1269, %1087, !dbg !86
  %1285 = fmul float %1270, %1088, !dbg !86
  %1286 = fmul float %1271, %1089, !dbg !86
  %1287 = fmul float %1272, %1090, !dbg !86
  %1288 = fmul float %1273, %1096, !dbg !86
  %1289 = fmul float %1274, %1097, !dbg !86
  %1290 = fmul float %1275, %1098, !dbg !86
  %1291 = fmul float %1276, %1099, !dbg !86
  %1292 = fmul float %1277, %1105, !dbg !86
  %1293 = fmul float %1278, %1106, !dbg !86
  %1294 = fmul float %1279, %1107, !dbg !86
  %1295 = fmul float %1280, %1108, !dbg !86
  %1296 = getelementptr float, ptr addrspace(1) %7, i64 %379, !dbg !87
  %1297 = getelementptr float, ptr addrspace(1) %7, i64 %380, !dbg !87
  %1298 = getelementptr float, ptr addrspace(1) %7, i64 %381, !dbg !87
  %1299 = getelementptr float, ptr addrspace(1) %7, i64 %382, !dbg !87
  %1300 = getelementptr float, ptr addrspace(1) %7, i64 %383, !dbg !87
  %1301 = getelementptr float, ptr addrspace(1) %7, i64 %384, !dbg !87
  %1302 = getelementptr float, ptr addrspace(1) %7, i64 %385, !dbg !87
  %1303 = getelementptr float, ptr addrspace(1) %7, i64 %386, !dbg !87
  %1304 = getelementptr float, ptr addrspace(1) %7, i64 %387, !dbg !87
  %1305 = getelementptr float, ptr addrspace(1) %7, i64 %388, !dbg !87
  %1306 = getelementptr float, ptr addrspace(1) %7, i64 %389, !dbg !87
  %1307 = getelementptr float, ptr addrspace(1) %7, i64 %390, !dbg !87
  %1308 = getelementptr float, ptr addrspace(1) %7, i64 %391, !dbg !87
  %1309 = getelementptr float, ptr addrspace(1) %7, i64 %392, !dbg !87
  %1310 = getelementptr float, ptr addrspace(1) %7, i64 %393, !dbg !87
  %1311 = getelementptr float, ptr addrspace(1) %7, i64 %394, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1312 = ptrtoint ptr addrspace(1) %1296 to i64, !dbg !88
  %1313 = ptrtoint ptr addrspace(1) %1297 to i64, !dbg !88
  %1314 = ptrtoint ptr addrspace(1) %1298 to i64, !dbg !88
  %1315 = ptrtoint ptr addrspace(1) %1299 to i64, !dbg !88
  %1316 = ptrtoint ptr addrspace(1) %1300 to i64, !dbg !88
  %1317 = ptrtoint ptr addrspace(1) %1301 to i64, !dbg !88
  %1318 = ptrtoint ptr addrspace(1) %1302 to i64, !dbg !88
  %1319 = ptrtoint ptr addrspace(1) %1303 to i64, !dbg !88
  %1320 = ptrtoint ptr addrspace(1) %1304 to i64, !dbg !88
  %1321 = ptrtoint ptr addrspace(1) %1305 to i64, !dbg !88
  %1322 = ptrtoint ptr addrspace(1) %1306 to i64, !dbg !88
  %1323 = ptrtoint ptr addrspace(1) %1307 to i64, !dbg !88
  %1324 = ptrtoint ptr addrspace(1) %1308 to i64, !dbg !88
  %1325 = ptrtoint ptr addrspace(1) %1309 to i64, !dbg !88
  %1326 = ptrtoint ptr addrspace(1) %1310 to i64, !dbg !88
  %1327 = ptrtoint ptr addrspace(1) %1311 to i64, !dbg !88
  %1328 = insertelement <1 x i64> poison, i64 %1312, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %1328, i1 true) #2, !dbg !88
  %1329 = insertelement <1 x i64> poison, i64 %1313, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %1329, i1 true) #2, !dbg !88
  %1330 = insertelement <1 x i64> poison, i64 %1314, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %1330, i1 true) #2, !dbg !88
  %1331 = insertelement <1 x i64> poison, i64 %1315, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %1331, i1 true) #2, !dbg !88
  %1332 = insertelement <1 x i64> poison, i64 %1316, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %1332, i1 true) #2, !dbg !88
  %1333 = insertelement <1 x i64> poison, i64 %1317, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %1333, i1 true) #2, !dbg !88
  %1334 = insertelement <1 x i64> poison, i64 %1318, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %1334, i1 true) #2, !dbg !88
  %1335 = insertelement <1 x i64> poison, i64 %1319, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %1335, i1 true) #2, !dbg !88
  %1336 = insertelement <1 x i64> poison, i64 %1320, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %1336, i1 true) #2, !dbg !88
  %1337 = insertelement <1 x i64> poison, i64 %1321, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %1337, i1 true) #2, !dbg !88
  %1338 = insertelement <1 x i64> poison, i64 %1322, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %1338, i1 true) #2, !dbg !88
  %1339 = insertelement <1 x i64> poison, i64 %1323, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %1339, i1 true) #2, !dbg !88
  %1340 = insertelement <1 x i64> poison, i64 %1324, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %1340, i1 true) #2, !dbg !88
  %1341 = insertelement <1 x i64> poison, i64 %1325, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %1341, i1 true) #2, !dbg !88
  %1342 = insertelement <1 x i64> poison, i64 %1326, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %1342, i1 true) #2, !dbg !88
  %1343 = insertelement <1 x i64> poison, i64 %1327, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %1343, i1 true) #2, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1344 = load i64, ptr addrspace(3) %315, align 16, !dbg !88
  %1345 = load i64, ptr addrspace(3) %321, align 16, !dbg !88
  %1346 = load i64, ptr addrspace(3) %327, align 16, !dbg !88
  %1347 = load i64, ptr addrspace(3) %333, align 16, !dbg !88
  %1348 = inttoptr i64 %1344 to ptr addrspace(1), !dbg !88
  %1349 = inttoptr i64 %1345 to ptr addrspace(1), !dbg !88
  %1350 = inttoptr i64 %1346 to ptr addrspace(1), !dbg !88
  %1351 = inttoptr i64 %1347 to ptr addrspace(1), !dbg !88
  %1352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1348, i1 %237) #2, !dbg !88
  %1353 = extractvalue { i32, i32, i32, i32 } %1352, 0, !dbg !88
  %1354 = extractvalue { i32, i32, i32, i32 } %1352, 1, !dbg !88
  %1355 = extractvalue { i32, i32, i32, i32 } %1352, 2, !dbg !88
  %1356 = extractvalue { i32, i32, i32, i32 } %1352, 3, !dbg !88
  %1357 = bitcast i32 %1354 to float, !dbg !88
  %1358 = bitcast i32 %1355 to float, !dbg !88
  %1359 = bitcast i32 %1356 to float, !dbg !88
  %1360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1349, i1 %238) #2, !dbg !88
  %1361 = extractvalue { i32, i32, i32, i32 } %1360, 0, !dbg !88
  %1362 = extractvalue { i32, i32, i32, i32 } %1360, 1, !dbg !88
  %1363 = extractvalue { i32, i32, i32, i32 } %1360, 2, !dbg !88
  %1364 = extractvalue { i32, i32, i32, i32 } %1360, 3, !dbg !88
  %1365 = bitcast i32 %1361 to float, !dbg !88
  %1366 = bitcast i32 %1362 to float, !dbg !88
  %1367 = bitcast i32 %1363 to float, !dbg !88
  %1368 = bitcast i32 %1364 to float, !dbg !88
  %1369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1350, i1 %239) #2, !dbg !88
  %1370 = extractvalue { i32, i32, i32, i32 } %1369, 0, !dbg !88
  %1371 = extractvalue { i32, i32, i32, i32 } %1369, 1, !dbg !88
  %1372 = extractvalue { i32, i32, i32, i32 } %1369, 2, !dbg !88
  %1373 = extractvalue { i32, i32, i32, i32 } %1369, 3, !dbg !88
  %1374 = bitcast i32 %1370 to float, !dbg !88
  %1375 = bitcast i32 %1371 to float, !dbg !88
  %1376 = bitcast i32 %1372 to float, !dbg !88
  %1377 = bitcast i32 %1373 to float, !dbg !88
  %1378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1351, i1 %240) #2, !dbg !88
  %1379 = extractvalue { i32, i32, i32, i32 } %1378, 0, !dbg !88
  %1380 = extractvalue { i32, i32, i32, i32 } %1378, 1, !dbg !88
  %1381 = extractvalue { i32, i32, i32, i32 } %1378, 2, !dbg !88
  %1382 = extractvalue { i32, i32, i32, i32 } %1378, 3, !dbg !88
  %1383 = bitcast i32 %1379 to float, !dbg !88
  %1384 = bitcast i32 %1380 to float, !dbg !88
  %1385 = bitcast i32 %1381 to float, !dbg !88
  %1386 = bitcast i32 %1382 to float, !dbg !88
  %1387 = getelementptr float, ptr addrspace(1) %8, i64 %379, !dbg !89
  %1388 = getelementptr float, ptr addrspace(1) %8, i64 %380, !dbg !89
  %1389 = getelementptr float, ptr addrspace(1) %8, i64 %381, !dbg !89
  %1390 = getelementptr float, ptr addrspace(1) %8, i64 %382, !dbg !89
  %1391 = getelementptr float, ptr addrspace(1) %8, i64 %383, !dbg !89
  %1392 = getelementptr float, ptr addrspace(1) %8, i64 %384, !dbg !89
  %1393 = getelementptr float, ptr addrspace(1) %8, i64 %385, !dbg !89
  %1394 = getelementptr float, ptr addrspace(1) %8, i64 %386, !dbg !89
  %1395 = getelementptr float, ptr addrspace(1) %8, i64 %387, !dbg !89
  %1396 = getelementptr float, ptr addrspace(1) %8, i64 %388, !dbg !89
  %1397 = getelementptr float, ptr addrspace(1) %8, i64 %389, !dbg !89
  %1398 = getelementptr float, ptr addrspace(1) %8, i64 %390, !dbg !89
  %1399 = getelementptr float, ptr addrspace(1) %8, i64 %391, !dbg !89
  %1400 = getelementptr float, ptr addrspace(1) %8, i64 %392, !dbg !89
  %1401 = getelementptr float, ptr addrspace(1) %8, i64 %393, !dbg !89
  %1402 = getelementptr float, ptr addrspace(1) %8, i64 %394, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %1403 = ptrtoint ptr addrspace(1) %1387 to i64, !dbg !90
  %1404 = ptrtoint ptr addrspace(1) %1388 to i64, !dbg !90
  %1405 = ptrtoint ptr addrspace(1) %1389 to i64, !dbg !90
  %1406 = ptrtoint ptr addrspace(1) %1390 to i64, !dbg !90
  %1407 = ptrtoint ptr addrspace(1) %1391 to i64, !dbg !90
  %1408 = ptrtoint ptr addrspace(1) %1392 to i64, !dbg !90
  %1409 = ptrtoint ptr addrspace(1) %1393 to i64, !dbg !90
  %1410 = ptrtoint ptr addrspace(1) %1394 to i64, !dbg !90
  %1411 = ptrtoint ptr addrspace(1) %1395 to i64, !dbg !90
  %1412 = ptrtoint ptr addrspace(1) %1396 to i64, !dbg !90
  %1413 = ptrtoint ptr addrspace(1) %1397 to i64, !dbg !90
  %1414 = ptrtoint ptr addrspace(1) %1398 to i64, !dbg !90
  %1415 = ptrtoint ptr addrspace(1) %1399 to i64, !dbg !90
  %1416 = ptrtoint ptr addrspace(1) %1400 to i64, !dbg !90
  %1417 = ptrtoint ptr addrspace(1) %1401 to i64, !dbg !90
  %1418 = ptrtoint ptr addrspace(1) %1402 to i64, !dbg !90
  %1419 = insertelement <1 x i64> poison, i64 %1403, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %1419, i1 true) #2, !dbg !90
  %1420 = insertelement <1 x i64> poison, i64 %1404, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %1420, i1 true) #2, !dbg !90
  %1421 = insertelement <1 x i64> poison, i64 %1405, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %1421, i1 true) #2, !dbg !90
  %1422 = insertelement <1 x i64> poison, i64 %1406, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %1422, i1 true) #2, !dbg !90
  %1423 = insertelement <1 x i64> poison, i64 %1407, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %1423, i1 true) #2, !dbg !90
  %1424 = insertelement <1 x i64> poison, i64 %1408, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %1424, i1 true) #2, !dbg !90
  %1425 = insertelement <1 x i64> poison, i64 %1409, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %1425, i1 true) #2, !dbg !90
  %1426 = insertelement <1 x i64> poison, i64 %1410, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %1426, i1 true) #2, !dbg !90
  %1427 = insertelement <1 x i64> poison, i64 %1411, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %1427, i1 true) #2, !dbg !90
  %1428 = insertelement <1 x i64> poison, i64 %1412, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %1428, i1 true) #2, !dbg !90
  %1429 = insertelement <1 x i64> poison, i64 %1413, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %1429, i1 true) #2, !dbg !90
  %1430 = insertelement <1 x i64> poison, i64 %1414, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %1430, i1 true) #2, !dbg !90
  %1431 = insertelement <1 x i64> poison, i64 %1415, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %1431, i1 true) #2, !dbg !90
  %1432 = insertelement <1 x i64> poison, i64 %1416, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %1432, i1 true) #2, !dbg !90
  %1433 = insertelement <1 x i64> poison, i64 %1417, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %1433, i1 true) #2, !dbg !90
  %1434 = insertelement <1 x i64> poison, i64 %1418, i64 0, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %1434, i1 true) #2, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %1435 = load i64, ptr addrspace(3) %315, align 16, !dbg !90
  %1436 = load i64, ptr addrspace(3) %321, align 16, !dbg !90
  %1437 = load i64, ptr addrspace(3) %327, align 16, !dbg !90
  %1438 = load i64, ptr addrspace(3) %333, align 16, !dbg !90
  %1439 = inttoptr i64 %1435 to ptr addrspace(1), !dbg !90
  %1440 = inttoptr i64 %1436 to ptr addrspace(1), !dbg !90
  %1441 = inttoptr i64 %1437 to ptr addrspace(1), !dbg !90
  %1442 = inttoptr i64 %1438 to ptr addrspace(1), !dbg !90
  %1443 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1439, i1 %237) #2, !dbg !90
  %1444 = extractvalue { i32, i32, i32, i32 } %1443, 0, !dbg !90
  %1445 = extractvalue { i32, i32, i32, i32 } %1443, 1, !dbg !90
  %1446 = extractvalue { i32, i32, i32, i32 } %1443, 2, !dbg !90
  %1447 = extractvalue { i32, i32, i32, i32 } %1443, 3, !dbg !90
  %1448 = bitcast i32 %1444 to float, !dbg !90
  %1449 = bitcast i32 %1445 to float, !dbg !90
  %1450 = bitcast i32 %1446 to float, !dbg !90
  %1451 = bitcast i32 %1447 to float, !dbg !90
  %1452 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1440, i1 %238) #2, !dbg !90
  %1453 = extractvalue { i32, i32, i32, i32 } %1452, 0, !dbg !90
  %1454 = extractvalue { i32, i32, i32, i32 } %1452, 1, !dbg !90
  %1455 = extractvalue { i32, i32, i32, i32 } %1452, 2, !dbg !90
  %1456 = extractvalue { i32, i32, i32, i32 } %1452, 3, !dbg !90
  %1457 = bitcast i32 %1453 to float, !dbg !90
  %1458 = bitcast i32 %1454 to float, !dbg !90
  %1459 = bitcast i32 %1455 to float, !dbg !90
  %1460 = bitcast i32 %1456 to float, !dbg !90
  %1461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1441, i1 %239) #2, !dbg !90
  %1462 = extractvalue { i32, i32, i32, i32 } %1461, 0, !dbg !90
  %1463 = extractvalue { i32, i32, i32, i32 } %1461, 1, !dbg !90
  %1464 = extractvalue { i32, i32, i32, i32 } %1461, 2, !dbg !90
  %1465 = extractvalue { i32, i32, i32, i32 } %1461, 3, !dbg !90
  %1466 = bitcast i32 %1462 to float, !dbg !90
  %1467 = bitcast i32 %1463 to float, !dbg !90
  %1468 = bitcast i32 %1464 to float, !dbg !90
  %1469 = bitcast i32 %1465 to float, !dbg !90
  %1470 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1442, i1 %240) #2, !dbg !90
  %1471 = extractvalue { i32, i32, i32, i32 } %1470, 0, !dbg !90
  %1472 = extractvalue { i32, i32, i32, i32 } %1470, 1, !dbg !90
  %1473 = extractvalue { i32, i32, i32, i32 } %1470, 2, !dbg !90
  %1474 = extractvalue { i32, i32, i32, i32 } %1470, 3, !dbg !90
  %1475 = bitcast i32 %1471 to float, !dbg !90
  %1476 = bitcast i32 %1472 to float, !dbg !90
  %1477 = bitcast i32 %1473 to float, !dbg !90
  %1478 = bitcast i32 %1474 to float, !dbg !90
  %1479 = fsub float 0.000000e+00, %1448, !dbg !91
  %1480 = fsub float 0.000000e+00, %1449, !dbg !91
  %1481 = fsub float 0.000000e+00, %1450, !dbg !91
  %1482 = fsub float 0.000000e+00, %1451, !dbg !91
  %1483 = fsub float 0.000000e+00, %1457, !dbg !91
  %1484 = fsub float 0.000000e+00, %1458, !dbg !91
  %1485 = fsub float 0.000000e+00, %1459, !dbg !91
  %1486 = fsub float 0.000000e+00, %1460, !dbg !91
  %1487 = fsub float 0.000000e+00, %1466, !dbg !91
  %1488 = fsub float 0.000000e+00, %1467, !dbg !91
  %1489 = fsub float 0.000000e+00, %1468, !dbg !91
  %1490 = fsub float 0.000000e+00, %1469, !dbg !91
  %1491 = fsub float 0.000000e+00, %1475, !dbg !91
  %1492 = fsub float 0.000000e+00, %1476, !dbg !91
  %1493 = fsub float 0.000000e+00, %1477, !dbg !91
  %1494 = fsub float 0.000000e+00, %1478, !dbg !91
  %1495 = fmul float %1479, 0x3FF7154760000000, !dbg !93
  %1496 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1495) #2, !dbg !93
  %1497 = fmul float %1480, 0x3FF7154760000000, !dbg !93
  %1498 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1497) #2, !dbg !93
  %1499 = fmul float %1481, 0x3FF7154760000000, !dbg !93
  %1500 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1499) #2, !dbg !93
  %1501 = fmul float %1482, 0x3FF7154760000000, !dbg !93
  %1502 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1501) #2, !dbg !93
  %1503 = fmul float %1483, 0x3FF7154760000000, !dbg !93
  %1504 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1503) #2, !dbg !93
  %1505 = fmul float %1484, 0x3FF7154760000000, !dbg !93
  %1506 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1505) #2, !dbg !93
  %1507 = fmul float %1485, 0x3FF7154760000000, !dbg !93
  %1508 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1507) #2, !dbg !93
  %1509 = fmul float %1486, 0x3FF7154760000000, !dbg !93
  %1510 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1509) #2, !dbg !93
  %1511 = fmul float %1487, 0x3FF7154760000000, !dbg !93
  %1512 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1511) #2, !dbg !93
  %1513 = fmul float %1488, 0x3FF7154760000000, !dbg !93
  %1514 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1513) #2, !dbg !93
  %1515 = fmul float %1489, 0x3FF7154760000000, !dbg !93
  %1516 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1515) #2, !dbg !93
  %1517 = fmul float %1490, 0x3FF7154760000000, !dbg !93
  %1518 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1517) #2, !dbg !93
  %1519 = fmul float %1491, 0x3FF7154760000000, !dbg !93
  %1520 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1519) #2, !dbg !93
  %1521 = fmul float %1492, 0x3FF7154760000000, !dbg !93
  %1522 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1521) #2, !dbg !93
  %1523 = fmul float %1493, 0x3FF7154760000000, !dbg !93
  %1524 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1523) #2, !dbg !93
  %1525 = fmul float %1494, 0x3FF7154760000000, !dbg !93
  %1526 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1525) #2, !dbg !93
  %1527 = fadd float %1496, 1.000000e+00, !dbg !94
  %1528 = fadd float %1498, 1.000000e+00, !dbg !94
  %1529 = fadd float %1500, 1.000000e+00, !dbg !94
  %1530 = fadd float %1502, 1.000000e+00, !dbg !94
  %1531 = fadd float %1504, 1.000000e+00, !dbg !94
  %1532 = fadd float %1506, 1.000000e+00, !dbg !94
  %1533 = fadd float %1508, 1.000000e+00, !dbg !94
  %1534 = fadd float %1510, 1.000000e+00, !dbg !94
  %1535 = fadd float %1512, 1.000000e+00, !dbg !94
  %1536 = fadd float %1514, 1.000000e+00, !dbg !94
  %1537 = fadd float %1516, 1.000000e+00, !dbg !94
  %1538 = fadd float %1518, 1.000000e+00, !dbg !94
  %1539 = fadd float %1520, 1.000000e+00, !dbg !94
  %1540 = fadd float %1522, 1.000000e+00, !dbg !94
  %1541 = fadd float %1524, 1.000000e+00, !dbg !94
  %1542 = fadd float %1526, 1.000000e+00, !dbg !94
  %1543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1527) #2, !dbg !95
  %1544 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1528) #2, !dbg !95
  %1545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1529) #2, !dbg !95
  %1546 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1530) #2, !dbg !95
  %1547 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1531) #2, !dbg !95
  %1548 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1532) #2, !dbg !95
  %1549 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1533) #2, !dbg !95
  %1550 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1534) #2, !dbg !95
  %1551 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1535) #2, !dbg !95
  %1552 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1536) #2, !dbg !95
  %1553 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1537) #2, !dbg !95
  %1554 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1538) #2, !dbg !95
  %1555 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1539) #2, !dbg !95
  %1556 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1540) #2, !dbg !95
  %1557 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1541) #2, !dbg !95
  %1558 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1542) #2, !dbg !95
  %1559 = fmul float %1544, %1357, !dbg !96
  %1560 = fmul float %1545, %1358, !dbg !96
  %1561 = fmul float %1546, %1359, !dbg !96
  %1562 = fmul float %1547, %1365, !dbg !96
  %1563 = fmul float %1548, %1366, !dbg !96
  %1564 = fmul float %1549, %1367, !dbg !96
  %1565 = fmul float %1550, %1368, !dbg !96
  %1566 = fmul float %1551, %1374, !dbg !96
  %1567 = fmul float %1552, %1375, !dbg !96
  %1568 = fmul float %1553, %1376, !dbg !96
  %1569 = fmul float %1554, %1377, !dbg !96
  %1570 = fmul float %1555, %1383, !dbg !96
  %1571 = fmul float %1556, %1384, !dbg !96
  %1572 = fmul float %1557, %1385, !dbg !96
  %1573 = fmul float %1558, %1386, !dbg !96
  %1574 = fsub float %1559, %1281, !dbg !97
  %1575 = fsub float %1560, %1282, !dbg !97
  %1576 = fsub float %1561, %1283, !dbg !97
  %1577 = fsub float %1562, %1284, !dbg !97
  %1578 = fsub float %1563, %1285, !dbg !97
  %1579 = fsub float %1564, %1286, !dbg !97
  %1580 = fsub float %1565, %1287, !dbg !97
  %1581 = fsub float %1566, %1288, !dbg !97
  %1582 = fsub float %1567, %1289, !dbg !97
  %1583 = fsub float %1568, %1290, !dbg !97
  %1584 = fsub float %1569, %1291, !dbg !97
  %1585 = fsub float %1570, %1292, !dbg !97
  %1586 = fsub float %1571, %1293, !dbg !97
  %1587 = fsub float %1572, %1294, !dbg !97
  %1588 = fsub float %1573, %1295, !dbg !97
  %1589 = fmul float %474, %1574, !dbg !98
  %1590 = fmul float %474, %1575, !dbg !98
  %1591 = fmul float %474, %1576, !dbg !98
  %1592 = fmul float %476, %1577, !dbg !98
  %1593 = fmul float %476, %1578, !dbg !98
  %1594 = fmul float %476, %1579, !dbg !98
  %1595 = fmul float %476, %1580, !dbg !98
  %1596 = fmul float %478, %1581, !dbg !98
  %1597 = fmul float %478, %1582, !dbg !98
  %1598 = fmul float %478, %1583, !dbg !98
  %1599 = fmul float %478, %1584, !dbg !98
  %1600 = fmul float %480, %1585, !dbg !98
  %1601 = fmul float %480, %1586, !dbg !98
  %1602 = fmul float %480, %1587, !dbg !98
  %1603 = fmul float %480, %1588, !dbg !98
  %1604 = fadd float %1281, %1589, !dbg !99
  %1605 = fadd float %1282, %1590, !dbg !99
  %1606 = fadd float %1283, %1591, !dbg !99
  %1607 = fadd float %1284, %1592, !dbg !99
  %1608 = fadd float %1285, %1593, !dbg !99
  %1609 = fadd float %1286, %1594, !dbg !99
  %1610 = fadd float %1287, %1595, !dbg !99
  %1611 = fadd float %1288, %1596, !dbg !99
  %1612 = fadd float %1289, %1597, !dbg !99
  %1613 = fadd float %1290, %1598, !dbg !99
  %1614 = fadd float %1291, %1599, !dbg !99
  %1615 = fadd float %1292, %1600, !dbg !99
  %1616 = fadd float %1293, %1601, !dbg !99
  %1617 = fadd float %1294, %1602, !dbg !99
  %1618 = fadd float %1295, %1603, !dbg !99
  %1619 = getelementptr float, ptr addrspace(1) %7, i64 %486, !dbg !100
  %1620 = getelementptr float, ptr addrspace(1) %7, i64 %488, !dbg !100
  %1621 = getelementptr float, ptr addrspace(1) %7, i64 %490, !dbg !100
  %1622 = getelementptr float, ptr addrspace(1) %7, i64 %492, !dbg !100
  %1623 = getelementptr float, ptr addrspace(1) %7, i64 %494, !dbg !100
  %1624 = getelementptr float, ptr addrspace(1) %7, i64 %496, !dbg !100
  %1625 = getelementptr float, ptr addrspace(1) %7, i64 %498, !dbg !100
  %1626 = getelementptr float, ptr addrspace(1) %7, i64 %500, !dbg !100
  %1627 = getelementptr float, ptr addrspace(1) %7, i64 %502, !dbg !100
  %1628 = getelementptr float, ptr addrspace(1) %7, i64 %504, !dbg !100
  %1629 = getelementptr float, ptr addrspace(1) %7, i64 %506, !dbg !100
  %1630 = getelementptr float, ptr addrspace(1) %7, i64 %508, !dbg !100
  %1631 = getelementptr float, ptr addrspace(1) %7, i64 %510, !dbg !100
  %1632 = getelementptr float, ptr addrspace(1) %7, i64 %512, !dbg !100
  %1633 = getelementptr float, ptr addrspace(1) %7, i64 %514, !dbg !100
  %1634 = getelementptr float, ptr addrspace(1) %7, i64 %516, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %1635 = ptrtoint ptr addrspace(1) %1619 to i64, !dbg !101
  %1636 = ptrtoint ptr addrspace(1) %1620 to i64, !dbg !101
  %1637 = ptrtoint ptr addrspace(1) %1621 to i64, !dbg !101
  %1638 = ptrtoint ptr addrspace(1) %1622 to i64, !dbg !101
  %1639 = ptrtoint ptr addrspace(1) %1623 to i64, !dbg !101
  %1640 = ptrtoint ptr addrspace(1) %1624 to i64, !dbg !101
  %1641 = ptrtoint ptr addrspace(1) %1625 to i64, !dbg !101
  %1642 = ptrtoint ptr addrspace(1) %1626 to i64, !dbg !101
  %1643 = ptrtoint ptr addrspace(1) %1627 to i64, !dbg !101
  %1644 = ptrtoint ptr addrspace(1) %1628 to i64, !dbg !101
  %1645 = ptrtoint ptr addrspace(1) %1629 to i64, !dbg !101
  %1646 = ptrtoint ptr addrspace(1) %1630 to i64, !dbg !101
  %1647 = ptrtoint ptr addrspace(1) %1631 to i64, !dbg !101
  %1648 = ptrtoint ptr addrspace(1) %1632 to i64, !dbg !101
  %1649 = ptrtoint ptr addrspace(1) %1633 to i64, !dbg !101
  %1650 = ptrtoint ptr addrspace(1) %1634 to i64, !dbg !101
  %1651 = insertelement <1 x i64> poison, i64 %1635, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %1651, i1 true) #2, !dbg !101
  %1652 = insertelement <1 x i64> poison, i64 %1636, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %1652, i1 true) #2, !dbg !101
  %1653 = insertelement <1 x i64> poison, i64 %1637, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %1653, i1 true) #2, !dbg !101
  %1654 = insertelement <1 x i64> poison, i64 %1638, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %1654, i1 true) #2, !dbg !101
  %1655 = insertelement <1 x i64> poison, i64 %1639, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %1655, i1 true) #2, !dbg !101
  %1656 = insertelement <1 x i64> poison, i64 %1640, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %1656, i1 true) #2, !dbg !101
  %1657 = insertelement <1 x i64> poison, i64 %1641, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %1657, i1 true) #2, !dbg !101
  %1658 = insertelement <1 x i64> poison, i64 %1642, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %1658, i1 true) #2, !dbg !101
  %1659 = insertelement <1 x i64> poison, i64 %1643, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %1659, i1 true) #2, !dbg !101
  %1660 = insertelement <1 x i64> poison, i64 %1644, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %1660, i1 true) #2, !dbg !101
  %1661 = insertelement <1 x i64> poison, i64 %1645, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %1661, i1 true) #2, !dbg !101
  %1662 = insertelement <1 x i64> poison, i64 %1646, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %1662, i1 true) #2, !dbg !101
  %1663 = insertelement <1 x i64> poison, i64 %1647, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %1663, i1 true) #2, !dbg !101
  %1664 = insertelement <1 x i64> poison, i64 %1648, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %1664, i1 true) #2, !dbg !101
  %1665 = insertelement <1 x i64> poison, i64 %1649, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %1665, i1 true) #2, !dbg !101
  %1666 = insertelement <1 x i64> poison, i64 %1650, i64 0, !dbg !101
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %1666, i1 true) #2, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %1667 = load i64, ptr addrspace(3) %315, align 16, !dbg !101
  %1668 = load i64, ptr addrspace(3) %321, align 16, !dbg !101
  %1669 = load i64, ptr addrspace(3) %327, align 16, !dbg !101
  %1670 = load i64, ptr addrspace(3) %333, align 16, !dbg !101
  %1671 = inttoptr i64 %1667 to ptr addrspace(1), !dbg !101
  %1672 = inttoptr i64 %1668 to ptr addrspace(1), !dbg !101
  %1673 = inttoptr i64 %1669 to ptr addrspace(1), !dbg !101
  %1674 = inttoptr i64 %1670 to ptr addrspace(1), !dbg !101
  %1675 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1671, i1 %237) #2, !dbg !101
  %1676 = extractvalue { i32, i32, i32, i32 } %1675, 0, !dbg !101
  %1677 = extractvalue { i32, i32, i32, i32 } %1675, 1, !dbg !101
  %1678 = extractvalue { i32, i32, i32, i32 } %1675, 2, !dbg !101
  %1679 = extractvalue { i32, i32, i32, i32 } %1675, 3, !dbg !101
  %1680 = bitcast i32 %1677 to float, !dbg !101
  %1681 = bitcast i32 %1678 to float, !dbg !101
  %1682 = bitcast i32 %1679 to float, !dbg !101
  %1683 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1672, i1 %238) #2, !dbg !101
  %1684 = extractvalue { i32, i32, i32, i32 } %1683, 0, !dbg !101
  %1685 = extractvalue { i32, i32, i32, i32 } %1683, 1, !dbg !101
  %1686 = extractvalue { i32, i32, i32, i32 } %1683, 2, !dbg !101
  %1687 = extractvalue { i32, i32, i32, i32 } %1683, 3, !dbg !101
  %1688 = bitcast i32 %1684 to float, !dbg !101
  %1689 = bitcast i32 %1685 to float, !dbg !101
  %1690 = bitcast i32 %1686 to float, !dbg !101
  %1691 = bitcast i32 %1687 to float, !dbg !101
  %1692 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1673, i1 %239) #2, !dbg !101
  %1693 = extractvalue { i32, i32, i32, i32 } %1692, 0, !dbg !101
  %1694 = extractvalue { i32, i32, i32, i32 } %1692, 1, !dbg !101
  %1695 = extractvalue { i32, i32, i32, i32 } %1692, 2, !dbg !101
  %1696 = extractvalue { i32, i32, i32, i32 } %1692, 3, !dbg !101
  %1697 = bitcast i32 %1693 to float, !dbg !101
  %1698 = bitcast i32 %1694 to float, !dbg !101
  %1699 = bitcast i32 %1695 to float, !dbg !101
  %1700 = bitcast i32 %1696 to float, !dbg !101
  %1701 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1674, i1 %240) #2, !dbg !101
  %1702 = extractvalue { i32, i32, i32, i32 } %1701, 0, !dbg !101
  %1703 = extractvalue { i32, i32, i32, i32 } %1701, 1, !dbg !101
  %1704 = extractvalue { i32, i32, i32, i32 } %1701, 2, !dbg !101
  %1705 = extractvalue { i32, i32, i32, i32 } %1701, 3, !dbg !101
  %1706 = bitcast i32 %1702 to float, !dbg !101
  %1707 = bitcast i32 %1703 to float, !dbg !101
  %1708 = bitcast i32 %1704 to float, !dbg !101
  %1709 = bitcast i32 %1705 to float, !dbg !101
  %1710 = getelementptr float, ptr addrspace(1) %8, i64 %486, !dbg !102
  %1711 = getelementptr float, ptr addrspace(1) %8, i64 %488, !dbg !102
  %1712 = getelementptr float, ptr addrspace(1) %8, i64 %490, !dbg !102
  %1713 = getelementptr float, ptr addrspace(1) %8, i64 %492, !dbg !102
  %1714 = getelementptr float, ptr addrspace(1) %8, i64 %494, !dbg !102
  %1715 = getelementptr float, ptr addrspace(1) %8, i64 %496, !dbg !102
  %1716 = getelementptr float, ptr addrspace(1) %8, i64 %498, !dbg !102
  %1717 = getelementptr float, ptr addrspace(1) %8, i64 %500, !dbg !102
  %1718 = getelementptr float, ptr addrspace(1) %8, i64 %502, !dbg !102
  %1719 = getelementptr float, ptr addrspace(1) %8, i64 %504, !dbg !102
  %1720 = getelementptr float, ptr addrspace(1) %8, i64 %506, !dbg !102
  %1721 = getelementptr float, ptr addrspace(1) %8, i64 %508, !dbg !102
  %1722 = getelementptr float, ptr addrspace(1) %8, i64 %510, !dbg !102
  %1723 = getelementptr float, ptr addrspace(1) %8, i64 %512, !dbg !102
  %1724 = getelementptr float, ptr addrspace(1) %8, i64 %514, !dbg !102
  %1725 = getelementptr float, ptr addrspace(1) %8, i64 %516, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1726 = ptrtoint ptr addrspace(1) %1710 to i64, !dbg !103
  %1727 = ptrtoint ptr addrspace(1) %1711 to i64, !dbg !103
  %1728 = ptrtoint ptr addrspace(1) %1712 to i64, !dbg !103
  %1729 = ptrtoint ptr addrspace(1) %1713 to i64, !dbg !103
  %1730 = ptrtoint ptr addrspace(1) %1714 to i64, !dbg !103
  %1731 = ptrtoint ptr addrspace(1) %1715 to i64, !dbg !103
  %1732 = ptrtoint ptr addrspace(1) %1716 to i64, !dbg !103
  %1733 = ptrtoint ptr addrspace(1) %1717 to i64, !dbg !103
  %1734 = ptrtoint ptr addrspace(1) %1718 to i64, !dbg !103
  %1735 = ptrtoint ptr addrspace(1) %1719 to i64, !dbg !103
  %1736 = ptrtoint ptr addrspace(1) %1720 to i64, !dbg !103
  %1737 = ptrtoint ptr addrspace(1) %1721 to i64, !dbg !103
  %1738 = ptrtoint ptr addrspace(1) %1722 to i64, !dbg !103
  %1739 = ptrtoint ptr addrspace(1) %1723 to i64, !dbg !103
  %1740 = ptrtoint ptr addrspace(1) %1724 to i64, !dbg !103
  %1741 = ptrtoint ptr addrspace(1) %1725 to i64, !dbg !103
  %1742 = insertelement <1 x i64> poison, i64 %1726, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %1742, i1 true) #2, !dbg !103
  %1743 = insertelement <1 x i64> poison, i64 %1727, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %1743, i1 true) #2, !dbg !103
  %1744 = insertelement <1 x i64> poison, i64 %1728, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %1744, i1 true) #2, !dbg !103
  %1745 = insertelement <1 x i64> poison, i64 %1729, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %1745, i1 true) #2, !dbg !103
  %1746 = insertelement <1 x i64> poison, i64 %1730, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %1746, i1 true) #2, !dbg !103
  %1747 = insertelement <1 x i64> poison, i64 %1731, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %1747, i1 true) #2, !dbg !103
  %1748 = insertelement <1 x i64> poison, i64 %1732, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %1748, i1 true) #2, !dbg !103
  %1749 = insertelement <1 x i64> poison, i64 %1733, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %1749, i1 true) #2, !dbg !103
  %1750 = insertelement <1 x i64> poison, i64 %1734, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %1750, i1 true) #2, !dbg !103
  %1751 = insertelement <1 x i64> poison, i64 %1735, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %1751, i1 true) #2, !dbg !103
  %1752 = insertelement <1 x i64> poison, i64 %1736, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %1752, i1 true) #2, !dbg !103
  %1753 = insertelement <1 x i64> poison, i64 %1737, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %1753, i1 true) #2, !dbg !103
  %1754 = insertelement <1 x i64> poison, i64 %1738, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %1754, i1 true) #2, !dbg !103
  %1755 = insertelement <1 x i64> poison, i64 %1739, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %1755, i1 true) #2, !dbg !103
  %1756 = insertelement <1 x i64> poison, i64 %1740, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %1756, i1 true) #2, !dbg !103
  %1757 = insertelement <1 x i64> poison, i64 %1741, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %1757, i1 true) #2, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1758 = load i64, ptr addrspace(3) %315, align 16, !dbg !103
  %1759 = load i64, ptr addrspace(3) %321, align 16, !dbg !103
  %1760 = load i64, ptr addrspace(3) %327, align 16, !dbg !103
  %1761 = load i64, ptr addrspace(3) %333, align 16, !dbg !103
  %1762 = inttoptr i64 %1758 to ptr addrspace(1), !dbg !103
  %1763 = inttoptr i64 %1759 to ptr addrspace(1), !dbg !103
  %1764 = inttoptr i64 %1760 to ptr addrspace(1), !dbg !103
  %1765 = inttoptr i64 %1761 to ptr addrspace(1), !dbg !103
  %1766 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1762, i1 %237) #2, !dbg !103
  %1767 = extractvalue { i32, i32, i32, i32 } %1766, 0, !dbg !103
  %1768 = extractvalue { i32, i32, i32, i32 } %1766, 1, !dbg !103
  %1769 = extractvalue { i32, i32, i32, i32 } %1766, 2, !dbg !103
  %1770 = extractvalue { i32, i32, i32, i32 } %1766, 3, !dbg !103
  %1771 = bitcast i32 %1767 to float, !dbg !103
  %1772 = bitcast i32 %1768 to float, !dbg !103
  %1773 = bitcast i32 %1769 to float, !dbg !103
  %1774 = bitcast i32 %1770 to float, !dbg !103
  %1775 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1763, i1 %238) #2, !dbg !103
  %1776 = extractvalue { i32, i32, i32, i32 } %1775, 0, !dbg !103
  %1777 = extractvalue { i32, i32, i32, i32 } %1775, 1, !dbg !103
  %1778 = extractvalue { i32, i32, i32, i32 } %1775, 2, !dbg !103
  %1779 = extractvalue { i32, i32, i32, i32 } %1775, 3, !dbg !103
  %1780 = bitcast i32 %1776 to float, !dbg !103
  %1781 = bitcast i32 %1777 to float, !dbg !103
  %1782 = bitcast i32 %1778 to float, !dbg !103
  %1783 = bitcast i32 %1779 to float, !dbg !103
  %1784 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1764, i1 %239) #2, !dbg !103
  %1785 = extractvalue { i32, i32, i32, i32 } %1784, 0, !dbg !103
  %1786 = extractvalue { i32, i32, i32, i32 } %1784, 1, !dbg !103
  %1787 = extractvalue { i32, i32, i32, i32 } %1784, 2, !dbg !103
  %1788 = extractvalue { i32, i32, i32, i32 } %1784, 3, !dbg !103
  %1789 = bitcast i32 %1785 to float, !dbg !103
  %1790 = bitcast i32 %1786 to float, !dbg !103
  %1791 = bitcast i32 %1787 to float, !dbg !103
  %1792 = bitcast i32 %1788 to float, !dbg !103
  %1793 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1765, i1 %240) #2, !dbg !103
  %1794 = extractvalue { i32, i32, i32, i32 } %1793, 0, !dbg !103
  %1795 = extractvalue { i32, i32, i32, i32 } %1793, 1, !dbg !103
  %1796 = extractvalue { i32, i32, i32, i32 } %1793, 2, !dbg !103
  %1797 = extractvalue { i32, i32, i32, i32 } %1793, 3, !dbg !103
  %1798 = bitcast i32 %1794 to float, !dbg !103
  %1799 = bitcast i32 %1795 to float, !dbg !103
  %1800 = bitcast i32 %1796 to float, !dbg !103
  %1801 = bitcast i32 %1797 to float, !dbg !103
  %1802 = fsub float 0.000000e+00, %1771, !dbg !104
  %1803 = fsub float 0.000000e+00, %1772, !dbg !104
  %1804 = fsub float 0.000000e+00, %1773, !dbg !104
  %1805 = fsub float 0.000000e+00, %1774, !dbg !104
  %1806 = fsub float 0.000000e+00, %1780, !dbg !104
  %1807 = fsub float 0.000000e+00, %1781, !dbg !104
  %1808 = fsub float 0.000000e+00, %1782, !dbg !104
  %1809 = fsub float 0.000000e+00, %1783, !dbg !104
  %1810 = fsub float 0.000000e+00, %1789, !dbg !104
  %1811 = fsub float 0.000000e+00, %1790, !dbg !104
  %1812 = fsub float 0.000000e+00, %1791, !dbg !104
  %1813 = fsub float 0.000000e+00, %1792, !dbg !104
  %1814 = fsub float 0.000000e+00, %1798, !dbg !104
  %1815 = fsub float 0.000000e+00, %1799, !dbg !104
  %1816 = fsub float 0.000000e+00, %1800, !dbg !104
  %1817 = fsub float 0.000000e+00, %1801, !dbg !104
  %1818 = fmul float %1802, 0x3FF7154760000000, !dbg !106
  %1819 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1818) #2, !dbg !106
  %1820 = fmul float %1803, 0x3FF7154760000000, !dbg !106
  %1821 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1820) #2, !dbg !106
  %1822 = fmul float %1804, 0x3FF7154760000000, !dbg !106
  %1823 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1822) #2, !dbg !106
  %1824 = fmul float %1805, 0x3FF7154760000000, !dbg !106
  %1825 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1824) #2, !dbg !106
  %1826 = fmul float %1806, 0x3FF7154760000000, !dbg !106
  %1827 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1826) #2, !dbg !106
  %1828 = fmul float %1807, 0x3FF7154760000000, !dbg !106
  %1829 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1828) #2, !dbg !106
  %1830 = fmul float %1808, 0x3FF7154760000000, !dbg !106
  %1831 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1830) #2, !dbg !106
  %1832 = fmul float %1809, 0x3FF7154760000000, !dbg !106
  %1833 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1832) #2, !dbg !106
  %1834 = fmul float %1810, 0x3FF7154760000000, !dbg !106
  %1835 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1834) #2, !dbg !106
  %1836 = fmul float %1811, 0x3FF7154760000000, !dbg !106
  %1837 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1836) #2, !dbg !106
  %1838 = fmul float %1812, 0x3FF7154760000000, !dbg !106
  %1839 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1838) #2, !dbg !106
  %1840 = fmul float %1813, 0x3FF7154760000000, !dbg !106
  %1841 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1840) #2, !dbg !106
  %1842 = fmul float %1814, 0x3FF7154760000000, !dbg !106
  %1843 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1842) #2, !dbg !106
  %1844 = fmul float %1815, 0x3FF7154760000000, !dbg !106
  %1845 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1844) #2, !dbg !106
  %1846 = fmul float %1816, 0x3FF7154760000000, !dbg !106
  %1847 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1846) #2, !dbg !106
  %1848 = fmul float %1817, 0x3FF7154760000000, !dbg !106
  %1849 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %1848) #2, !dbg !106
  %1850 = fadd float %1819, 1.000000e+00, !dbg !107
  %1851 = fadd float %1821, 1.000000e+00, !dbg !107
  %1852 = fadd float %1823, 1.000000e+00, !dbg !107
  %1853 = fadd float %1825, 1.000000e+00, !dbg !107
  %1854 = fadd float %1827, 1.000000e+00, !dbg !107
  %1855 = fadd float %1829, 1.000000e+00, !dbg !107
  %1856 = fadd float %1831, 1.000000e+00, !dbg !107
  %1857 = fadd float %1833, 1.000000e+00, !dbg !107
  %1858 = fadd float %1835, 1.000000e+00, !dbg !107
  %1859 = fadd float %1837, 1.000000e+00, !dbg !107
  %1860 = fadd float %1839, 1.000000e+00, !dbg !107
  %1861 = fadd float %1841, 1.000000e+00, !dbg !107
  %1862 = fadd float %1843, 1.000000e+00, !dbg !107
  %1863 = fadd float %1845, 1.000000e+00, !dbg !107
  %1864 = fadd float %1847, 1.000000e+00, !dbg !107
  %1865 = fadd float %1849, 1.000000e+00, !dbg !107
  %1866 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1850) #2, !dbg !108
  %1867 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1851) #2, !dbg !108
  %1868 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1852) #2, !dbg !108
  %1869 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1853) #2, !dbg !108
  %1870 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1854) #2, !dbg !108
  %1871 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1855) #2, !dbg !108
  %1872 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1856) #2, !dbg !108
  %1873 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1857) #2, !dbg !108
  %1874 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1858) #2, !dbg !108
  %1875 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1859) #2, !dbg !108
  %1876 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1860) #2, !dbg !108
  %1877 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1861) #2, !dbg !108
  %1878 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1862) #2, !dbg !108
  %1879 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1863) #2, !dbg !108
  %1880 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1864) #2, !dbg !108
  %1881 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1865) #2, !dbg !108
  %1882 = fmul float %1867, %1680, !dbg !109
  %1883 = fmul float %1868, %1681, !dbg !109
  %1884 = fmul float %1869, %1682, !dbg !109
  %1885 = fmul float %1870, %1688, !dbg !109
  %1886 = fmul float %1871, %1689, !dbg !109
  %1887 = fmul float %1872, %1690, !dbg !109
  %1888 = fmul float %1873, %1691, !dbg !109
  %1889 = fmul float %1874, %1697, !dbg !109
  %1890 = fmul float %1875, %1698, !dbg !109
  %1891 = fmul float %1876, %1699, !dbg !109
  %1892 = fmul float %1877, %1700, !dbg !109
  %1893 = fmul float %1878, %1706, !dbg !109
  %1894 = fmul float %1879, %1707, !dbg !109
  %1895 = fmul float %1880, %1708, !dbg !109
  %1896 = fmul float %1881, %1709, !dbg !109
  %1897 = getelementptr float, ptr addrspace(1) %7, i64 %594, !dbg !110
  %1898 = getelementptr float, ptr addrspace(1) %7, i64 %596, !dbg !110
  %1899 = getelementptr float, ptr addrspace(1) %7, i64 %598, !dbg !110
  %1900 = getelementptr float, ptr addrspace(1) %7, i64 %600, !dbg !110
  %1901 = getelementptr float, ptr addrspace(1) %7, i64 %602, !dbg !110
  %1902 = getelementptr float, ptr addrspace(1) %7, i64 %604, !dbg !110
  %1903 = getelementptr float, ptr addrspace(1) %7, i64 %606, !dbg !110
  %1904 = getelementptr float, ptr addrspace(1) %7, i64 %608, !dbg !110
  %1905 = getelementptr float, ptr addrspace(1) %7, i64 %610, !dbg !110
  %1906 = getelementptr float, ptr addrspace(1) %7, i64 %612, !dbg !110
  %1907 = getelementptr float, ptr addrspace(1) %7, i64 %614, !dbg !110
  %1908 = getelementptr float, ptr addrspace(1) %7, i64 %616, !dbg !110
  %1909 = getelementptr float, ptr addrspace(1) %7, i64 %618, !dbg !110
  %1910 = getelementptr float, ptr addrspace(1) %7, i64 %620, !dbg !110
  %1911 = getelementptr float, ptr addrspace(1) %7, i64 %622, !dbg !110
  %1912 = getelementptr float, ptr addrspace(1) %7, i64 %624, !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %1913 = ptrtoint ptr addrspace(1) %1897 to i64, !dbg !111
  %1914 = ptrtoint ptr addrspace(1) %1898 to i64, !dbg !111
  %1915 = ptrtoint ptr addrspace(1) %1899 to i64, !dbg !111
  %1916 = ptrtoint ptr addrspace(1) %1900 to i64, !dbg !111
  %1917 = ptrtoint ptr addrspace(1) %1901 to i64, !dbg !111
  %1918 = ptrtoint ptr addrspace(1) %1902 to i64, !dbg !111
  %1919 = ptrtoint ptr addrspace(1) %1903 to i64, !dbg !111
  %1920 = ptrtoint ptr addrspace(1) %1904 to i64, !dbg !111
  %1921 = ptrtoint ptr addrspace(1) %1905 to i64, !dbg !111
  %1922 = ptrtoint ptr addrspace(1) %1906 to i64, !dbg !111
  %1923 = ptrtoint ptr addrspace(1) %1907 to i64, !dbg !111
  %1924 = ptrtoint ptr addrspace(1) %1908 to i64, !dbg !111
  %1925 = ptrtoint ptr addrspace(1) %1909 to i64, !dbg !111
  %1926 = ptrtoint ptr addrspace(1) %1910 to i64, !dbg !111
  %1927 = ptrtoint ptr addrspace(1) %1911 to i64, !dbg !111
  %1928 = ptrtoint ptr addrspace(1) %1912 to i64, !dbg !111
  %1929 = insertelement <1 x i64> poison, i64 %1913, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %1929, i1 true) #2, !dbg !111
  %1930 = insertelement <1 x i64> poison, i64 %1914, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %1930, i1 true) #2, !dbg !111
  %1931 = insertelement <1 x i64> poison, i64 %1915, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %1931, i1 true) #2, !dbg !111
  %1932 = insertelement <1 x i64> poison, i64 %1916, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %1932, i1 true) #2, !dbg !111
  %1933 = insertelement <1 x i64> poison, i64 %1917, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %1933, i1 true) #2, !dbg !111
  %1934 = insertelement <1 x i64> poison, i64 %1918, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %1934, i1 true) #2, !dbg !111
  %1935 = insertelement <1 x i64> poison, i64 %1919, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %1935, i1 true) #2, !dbg !111
  %1936 = insertelement <1 x i64> poison, i64 %1920, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %1936, i1 true) #2, !dbg !111
  %1937 = insertelement <1 x i64> poison, i64 %1921, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %1937, i1 true) #2, !dbg !111
  %1938 = insertelement <1 x i64> poison, i64 %1922, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %1938, i1 true) #2, !dbg !111
  %1939 = insertelement <1 x i64> poison, i64 %1923, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %1939, i1 true) #2, !dbg !111
  %1940 = insertelement <1 x i64> poison, i64 %1924, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %1940, i1 true) #2, !dbg !111
  %1941 = insertelement <1 x i64> poison, i64 %1925, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %1941, i1 true) #2, !dbg !111
  %1942 = insertelement <1 x i64> poison, i64 %1926, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %1942, i1 true) #2, !dbg !111
  %1943 = insertelement <1 x i64> poison, i64 %1927, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %1943, i1 true) #2, !dbg !111
  %1944 = insertelement <1 x i64> poison, i64 %1928, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %1944, i1 true) #2, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %1945 = load i64, ptr addrspace(3) %315, align 16, !dbg !111
  %1946 = load i64, ptr addrspace(3) %321, align 16, !dbg !111
  %1947 = load i64, ptr addrspace(3) %327, align 16, !dbg !111
  %1948 = load i64, ptr addrspace(3) %333, align 16, !dbg !111
  %1949 = inttoptr i64 %1945 to ptr addrspace(1), !dbg !111
  %1950 = inttoptr i64 %1946 to ptr addrspace(1), !dbg !111
  %1951 = inttoptr i64 %1947 to ptr addrspace(1), !dbg !111
  %1952 = inttoptr i64 %1948 to ptr addrspace(1), !dbg !111
  %1953 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1949, i1 %237) #2, !dbg !111
  %1954 = extractvalue { i32, i32, i32, i32 } %1953, 0, !dbg !111
  %1955 = extractvalue { i32, i32, i32, i32 } %1953, 1, !dbg !111
  %1956 = extractvalue { i32, i32, i32, i32 } %1953, 2, !dbg !111
  %1957 = extractvalue { i32, i32, i32, i32 } %1953, 3, !dbg !111
  %1958 = bitcast i32 %1955 to float, !dbg !111
  %1959 = bitcast i32 %1956 to float, !dbg !111
  %1960 = bitcast i32 %1957 to float, !dbg !111
  %1961 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1950, i1 %238) #2, !dbg !111
  %1962 = extractvalue { i32, i32, i32, i32 } %1961, 0, !dbg !111
  %1963 = extractvalue { i32, i32, i32, i32 } %1961, 1, !dbg !111
  %1964 = extractvalue { i32, i32, i32, i32 } %1961, 2, !dbg !111
  %1965 = extractvalue { i32, i32, i32, i32 } %1961, 3, !dbg !111
  %1966 = bitcast i32 %1962 to float, !dbg !111
  %1967 = bitcast i32 %1963 to float, !dbg !111
  %1968 = bitcast i32 %1964 to float, !dbg !111
  %1969 = bitcast i32 %1965 to float, !dbg !111
  %1970 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1951, i1 %239) #2, !dbg !111
  %1971 = extractvalue { i32, i32, i32, i32 } %1970, 0, !dbg !111
  %1972 = extractvalue { i32, i32, i32, i32 } %1970, 1, !dbg !111
  %1973 = extractvalue { i32, i32, i32, i32 } %1970, 2, !dbg !111
  %1974 = extractvalue { i32, i32, i32, i32 } %1970, 3, !dbg !111
  %1975 = bitcast i32 %1971 to float, !dbg !111
  %1976 = bitcast i32 %1972 to float, !dbg !111
  %1977 = bitcast i32 %1973 to float, !dbg !111
  %1978 = bitcast i32 %1974 to float, !dbg !111
  %1979 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1952, i1 %240) #2, !dbg !111
  %1980 = extractvalue { i32, i32, i32, i32 } %1979, 0, !dbg !111
  %1981 = extractvalue { i32, i32, i32, i32 } %1979, 1, !dbg !111
  %1982 = extractvalue { i32, i32, i32, i32 } %1979, 2, !dbg !111
  %1983 = extractvalue { i32, i32, i32, i32 } %1979, 3, !dbg !111
  %1984 = bitcast i32 %1980 to float, !dbg !111
  %1985 = bitcast i32 %1981 to float, !dbg !111
  %1986 = bitcast i32 %1982 to float, !dbg !111
  %1987 = bitcast i32 %1983 to float, !dbg !111
  %1988 = getelementptr float, ptr addrspace(1) %8, i64 %594, !dbg !112
  %1989 = getelementptr float, ptr addrspace(1) %8, i64 %596, !dbg !112
  %1990 = getelementptr float, ptr addrspace(1) %8, i64 %598, !dbg !112
  %1991 = getelementptr float, ptr addrspace(1) %8, i64 %600, !dbg !112
  %1992 = getelementptr float, ptr addrspace(1) %8, i64 %602, !dbg !112
  %1993 = getelementptr float, ptr addrspace(1) %8, i64 %604, !dbg !112
  %1994 = getelementptr float, ptr addrspace(1) %8, i64 %606, !dbg !112
  %1995 = getelementptr float, ptr addrspace(1) %8, i64 %608, !dbg !112
  %1996 = getelementptr float, ptr addrspace(1) %8, i64 %610, !dbg !112
  %1997 = getelementptr float, ptr addrspace(1) %8, i64 %612, !dbg !112
  %1998 = getelementptr float, ptr addrspace(1) %8, i64 %614, !dbg !112
  %1999 = getelementptr float, ptr addrspace(1) %8, i64 %616, !dbg !112
  %2000 = getelementptr float, ptr addrspace(1) %8, i64 %618, !dbg !112
  %2001 = getelementptr float, ptr addrspace(1) %8, i64 %620, !dbg !112
  %2002 = getelementptr float, ptr addrspace(1) %8, i64 %622, !dbg !112
  %2003 = getelementptr float, ptr addrspace(1) %8, i64 %624, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !113
  %2004 = ptrtoint ptr addrspace(1) %1988 to i64, !dbg !113
  %2005 = ptrtoint ptr addrspace(1) %1989 to i64, !dbg !113
  %2006 = ptrtoint ptr addrspace(1) %1990 to i64, !dbg !113
  %2007 = ptrtoint ptr addrspace(1) %1991 to i64, !dbg !113
  %2008 = ptrtoint ptr addrspace(1) %1992 to i64, !dbg !113
  %2009 = ptrtoint ptr addrspace(1) %1993 to i64, !dbg !113
  %2010 = ptrtoint ptr addrspace(1) %1994 to i64, !dbg !113
  %2011 = ptrtoint ptr addrspace(1) %1995 to i64, !dbg !113
  %2012 = ptrtoint ptr addrspace(1) %1996 to i64, !dbg !113
  %2013 = ptrtoint ptr addrspace(1) %1997 to i64, !dbg !113
  %2014 = ptrtoint ptr addrspace(1) %1998 to i64, !dbg !113
  %2015 = ptrtoint ptr addrspace(1) %1999 to i64, !dbg !113
  %2016 = ptrtoint ptr addrspace(1) %2000 to i64, !dbg !113
  %2017 = ptrtoint ptr addrspace(1) %2001 to i64, !dbg !113
  %2018 = ptrtoint ptr addrspace(1) %2002 to i64, !dbg !113
  %2019 = ptrtoint ptr addrspace(1) %2003 to i64, !dbg !113
  %2020 = insertelement <1 x i64> poison, i64 %2004, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %266, <1 x i64> %2020, i1 true) #2, !dbg !113
  %2021 = insertelement <1 x i64> poison, i64 %2005, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %269, <1 x i64> %2021, i1 true) #2, !dbg !113
  %2022 = insertelement <1 x i64> poison, i64 %2006, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %272, <1 x i64> %2022, i1 true) #2, !dbg !113
  %2023 = insertelement <1 x i64> poison, i64 %2007, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %275, <1 x i64> %2023, i1 true) #2, !dbg !113
  %2024 = insertelement <1 x i64> poison, i64 %2008, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %278, <1 x i64> %2024, i1 true) #2, !dbg !113
  %2025 = insertelement <1 x i64> poison, i64 %2009, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %281, <1 x i64> %2025, i1 true) #2, !dbg !113
  %2026 = insertelement <1 x i64> poison, i64 %2010, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %284, <1 x i64> %2026, i1 true) #2, !dbg !113
  %2027 = insertelement <1 x i64> poison, i64 %2011, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %287, <1 x i64> %2027, i1 true) #2, !dbg !113
  %2028 = insertelement <1 x i64> poison, i64 %2012, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %290, <1 x i64> %2028, i1 true) #2, !dbg !113
  %2029 = insertelement <1 x i64> poison, i64 %2013, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %293, <1 x i64> %2029, i1 true) #2, !dbg !113
  %2030 = insertelement <1 x i64> poison, i64 %2014, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %296, <1 x i64> %2030, i1 true) #2, !dbg !113
  %2031 = insertelement <1 x i64> poison, i64 %2015, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %299, <1 x i64> %2031, i1 true) #2, !dbg !113
  %2032 = insertelement <1 x i64> poison, i64 %2016, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %302, <1 x i64> %2032, i1 true) #2, !dbg !113
  %2033 = insertelement <1 x i64> poison, i64 %2017, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %305, <1 x i64> %2033, i1 true) #2, !dbg !113
  %2034 = insertelement <1 x i64> poison, i64 %2018, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %308, <1 x i64> %2034, i1 true) #2, !dbg !113
  %2035 = insertelement <1 x i64> poison, i64 %2019, i64 0, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %311, <1 x i64> %2035, i1 true) #2, !dbg !113
  tail call void @llvm.nvvm.barrier0(), !dbg !113
  %2036 = load i64, ptr addrspace(3) %315, align 16, !dbg !113
  %2037 = load i64, ptr addrspace(3) %321, align 16, !dbg !113
  %2038 = load i64, ptr addrspace(3) %327, align 16, !dbg !113
  %2039 = load i64, ptr addrspace(3) %333, align 16, !dbg !113
  %2040 = inttoptr i64 %2036 to ptr addrspace(1), !dbg !113
  %2041 = inttoptr i64 %2037 to ptr addrspace(1), !dbg !113
  %2042 = inttoptr i64 %2038 to ptr addrspace(1), !dbg !113
  %2043 = inttoptr i64 %2039 to ptr addrspace(1), !dbg !113
  %2044 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2040, i1 %237) #2, !dbg !113
  %2045 = extractvalue { i32, i32, i32, i32 } %2044, 0, !dbg !113
  %2046 = extractvalue { i32, i32, i32, i32 } %2044, 1, !dbg !113
  %2047 = extractvalue { i32, i32, i32, i32 } %2044, 2, !dbg !113
  %2048 = extractvalue { i32, i32, i32, i32 } %2044, 3, !dbg !113
  %2049 = bitcast i32 %2045 to float, !dbg !113
  %2050 = bitcast i32 %2046 to float, !dbg !113
  %2051 = bitcast i32 %2047 to float, !dbg !113
  %2052 = bitcast i32 %2048 to float, !dbg !113
  %2053 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2041, i1 %238) #2, !dbg !113
  %2054 = extractvalue { i32, i32, i32, i32 } %2053, 0, !dbg !113
  %2055 = extractvalue { i32, i32, i32, i32 } %2053, 1, !dbg !113
  %2056 = extractvalue { i32, i32, i32, i32 } %2053, 2, !dbg !113
  %2057 = extractvalue { i32, i32, i32, i32 } %2053, 3, !dbg !113
  %2058 = bitcast i32 %2054 to float, !dbg !113
  %2059 = bitcast i32 %2055 to float, !dbg !113
  %2060 = bitcast i32 %2056 to float, !dbg !113
  %2061 = bitcast i32 %2057 to float, !dbg !113
  %2062 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2042, i1 %239) #2, !dbg !113
  %2063 = extractvalue { i32, i32, i32, i32 } %2062, 0, !dbg !113
  %2064 = extractvalue { i32, i32, i32, i32 } %2062, 1, !dbg !113
  %2065 = extractvalue { i32, i32, i32, i32 } %2062, 2, !dbg !113
  %2066 = extractvalue { i32, i32, i32, i32 } %2062, 3, !dbg !113
  %2067 = bitcast i32 %2063 to float, !dbg !113
  %2068 = bitcast i32 %2064 to float, !dbg !113
  %2069 = bitcast i32 %2065 to float, !dbg !113
  %2070 = bitcast i32 %2066 to float, !dbg !113
  %2071 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2043, i1 %240) #2, !dbg !113
  %2072 = extractvalue { i32, i32, i32, i32 } %2071, 0, !dbg !113
  %2073 = extractvalue { i32, i32, i32, i32 } %2071, 1, !dbg !113
  %2074 = extractvalue { i32, i32, i32, i32 } %2071, 2, !dbg !113
  %2075 = extractvalue { i32, i32, i32, i32 } %2071, 3, !dbg !113
  %2076 = bitcast i32 %2072 to float, !dbg !113
  %2077 = bitcast i32 %2073 to float, !dbg !113
  %2078 = bitcast i32 %2074 to float, !dbg !113
  %2079 = bitcast i32 %2075 to float, !dbg !113
  %2080 = fsub float 0.000000e+00, %2049, !dbg !114
  %2081 = fsub float 0.000000e+00, %2050, !dbg !114
  %2082 = fsub float 0.000000e+00, %2051, !dbg !114
  %2083 = fsub float 0.000000e+00, %2052, !dbg !114
  %2084 = fsub float 0.000000e+00, %2058, !dbg !114
  %2085 = fsub float 0.000000e+00, %2059, !dbg !114
  %2086 = fsub float 0.000000e+00, %2060, !dbg !114
  %2087 = fsub float 0.000000e+00, %2061, !dbg !114
  %2088 = fsub float 0.000000e+00, %2067, !dbg !114
  %2089 = fsub float 0.000000e+00, %2068, !dbg !114
  %2090 = fsub float 0.000000e+00, %2069, !dbg !114
  %2091 = fsub float 0.000000e+00, %2070, !dbg !114
  %2092 = fsub float 0.000000e+00, %2076, !dbg !114
  %2093 = fsub float 0.000000e+00, %2077, !dbg !114
  %2094 = fsub float 0.000000e+00, %2078, !dbg !114
  %2095 = fsub float 0.000000e+00, %2079, !dbg !114
  %2096 = fmul float %2080, 0x3FF7154760000000, !dbg !116
  %2097 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2096) #2, !dbg !116
  %2098 = fmul float %2081, 0x3FF7154760000000, !dbg !116
  %2099 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2098) #2, !dbg !116
  %2100 = fmul float %2082, 0x3FF7154760000000, !dbg !116
  %2101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2100) #2, !dbg !116
  %2102 = fmul float %2083, 0x3FF7154760000000, !dbg !116
  %2103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2102) #2, !dbg !116
  %2104 = fmul float %2084, 0x3FF7154760000000, !dbg !116
  %2105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2104) #2, !dbg !116
  %2106 = fmul float %2085, 0x3FF7154760000000, !dbg !116
  %2107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2106) #2, !dbg !116
  %2108 = fmul float %2086, 0x3FF7154760000000, !dbg !116
  %2109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2108) #2, !dbg !116
  %2110 = fmul float %2087, 0x3FF7154760000000, !dbg !116
  %2111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2110) #2, !dbg !116
  %2112 = fmul float %2088, 0x3FF7154760000000, !dbg !116
  %2113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2112) #2, !dbg !116
  %2114 = fmul float %2089, 0x3FF7154760000000, !dbg !116
  %2115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2114) #2, !dbg !116
  %2116 = fmul float %2090, 0x3FF7154760000000, !dbg !116
  %2117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2116) #2, !dbg !116
  %2118 = fmul float %2091, 0x3FF7154760000000, !dbg !116
  %2119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2118) #2, !dbg !116
  %2120 = fmul float %2092, 0x3FF7154760000000, !dbg !116
  %2121 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2120) #2, !dbg !116
  %2122 = fmul float %2093, 0x3FF7154760000000, !dbg !116
  %2123 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2122) #2, !dbg !116
  %2124 = fmul float %2094, 0x3FF7154760000000, !dbg !116
  %2125 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2124) #2, !dbg !116
  %2126 = fmul float %2095, 0x3FF7154760000000, !dbg !116
  %2127 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %2126) #2, !dbg !116
  %2128 = fadd float %2097, 1.000000e+00, !dbg !117
  %2129 = fadd float %2099, 1.000000e+00, !dbg !117
  %2130 = fadd float %2101, 1.000000e+00, !dbg !117
  %2131 = fadd float %2103, 1.000000e+00, !dbg !117
  %2132 = fadd float %2105, 1.000000e+00, !dbg !117
  %2133 = fadd float %2107, 1.000000e+00, !dbg !117
  %2134 = fadd float %2109, 1.000000e+00, !dbg !117
  %2135 = fadd float %2111, 1.000000e+00, !dbg !117
  %2136 = fadd float %2113, 1.000000e+00, !dbg !117
  %2137 = fadd float %2115, 1.000000e+00, !dbg !117
  %2138 = fadd float %2117, 1.000000e+00, !dbg !117
  %2139 = fadd float %2119, 1.000000e+00, !dbg !117
  %2140 = fadd float %2121, 1.000000e+00, !dbg !117
  %2141 = fadd float %2123, 1.000000e+00, !dbg !117
  %2142 = fadd float %2125, 1.000000e+00, !dbg !117
  %2143 = fadd float %2127, 1.000000e+00, !dbg !117
  %2144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2128) #2, !dbg !118
  %2145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2129) #2, !dbg !118
  %2146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2130) #2, !dbg !118
  %2147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2131) #2, !dbg !118
  %2148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2132) #2, !dbg !118
  %2149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2133) #2, !dbg !118
  %2150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2134) #2, !dbg !118
  %2151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2135) #2, !dbg !118
  %2152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2136) #2, !dbg !118
  %2153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2137) #2, !dbg !118
  %2154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2138) #2, !dbg !118
  %2155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2139) #2, !dbg !118
  %2156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2140) #2, !dbg !118
  %2157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2141) #2, !dbg !118
  %2158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2142) #2, !dbg !118
  %2159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %2143) #2, !dbg !118
  %2160 = fmul float %2145, %1958, !dbg !119
  %2161 = fmul float %2146, %1959, !dbg !119
  %2162 = fmul float %2147, %1960, !dbg !119
  %2163 = fmul float %2148, %1966, !dbg !119
  %2164 = fmul float %2149, %1967, !dbg !119
  %2165 = fmul float %2150, %1968, !dbg !119
  %2166 = fmul float %2151, %1969, !dbg !119
  %2167 = fmul float %2152, %1975, !dbg !119
  %2168 = fmul float %2153, %1976, !dbg !119
  %2169 = fmul float %2154, %1977, !dbg !119
  %2170 = fmul float %2155, %1978, !dbg !119
  %2171 = fmul float %2156, %1984, !dbg !119
  %2172 = fmul float %2157, %1985, !dbg !119
  %2173 = fmul float %2158, %1986, !dbg !119
  %2174 = fmul float %2159, %1987, !dbg !119
  %2175 = fsub float %2160, %1882, !dbg !120
  %2176 = fsub float %2161, %1883, !dbg !120
  %2177 = fsub float %2162, %1884, !dbg !120
  %2178 = fsub float %2163, %1885, !dbg !120
  %2179 = fsub float %2164, %1886, !dbg !120
  %2180 = fsub float %2165, %1887, !dbg !120
  %2181 = fsub float %2166, %1888, !dbg !120
  %2182 = fsub float %2167, %1889, !dbg !120
  %2183 = fsub float %2168, %1890, !dbg !120
  %2184 = fsub float %2169, %1891, !dbg !120
  %2185 = fsub float %2170, %1892, !dbg !120
  %2186 = fsub float %2171, %1893, !dbg !120
  %2187 = fsub float %2172, %1894, !dbg !120
  %2188 = fsub float %2173, %1895, !dbg !120
  %2189 = fsub float %2174, %1896, !dbg !120
  %2190 = fmul float %474, %2175, !dbg !121
  %2191 = fmul float %474, %2176, !dbg !121
  %2192 = fmul float %474, %2177, !dbg !121
  %2193 = fmul float %476, %2178, !dbg !121
  %2194 = fmul float %476, %2179, !dbg !121
  %2195 = fmul float %476, %2180, !dbg !121
  %2196 = fmul float %476, %2181, !dbg !121
  %2197 = fmul float %478, %2182, !dbg !121
  %2198 = fmul float %478, %2183, !dbg !121
  %2199 = fmul float %478, %2184, !dbg !121
  %2200 = fmul float %478, %2185, !dbg !121
  %2201 = fmul float %480, %2186, !dbg !121
  %2202 = fmul float %480, %2187, !dbg !121
  %2203 = fmul float %480, %2188, !dbg !121
  %2204 = fmul float %480, %2189, !dbg !121
  %2205 = insertelement <2 x i32> poison, i32 %1676, i64 0, !dbg !101
  %2206 = insertelement <2 x i32> %2205, i32 %1075, i64 1, !dbg !101
  %2207 = bitcast <2 x i32> %2206 to <2 x float>, !dbg !101
  %2208 = insertelement <2 x float> poison, float %1866, i64 0, !dbg !109
  %2209 = insertelement <2 x float> %2208, float %1265, i64 1, !dbg !109
  %2210 = fmul <2 x float> %2209, %2207, !dbg !109
  %2211 = insertelement <2 x i32> poison, i32 %1954, i64 0, !dbg !111
  %2212 = insertelement <2 x i32> %2211, i32 %1353, i64 1, !dbg !111
  %2213 = bitcast <2 x i32> %2212 to <2 x float>, !dbg !111
  %2214 = insertelement <2 x float> poison, float %2144, i64 0, !dbg !119
  %2215 = insertelement <2 x float> %2214, float %1543, i64 1, !dbg !119
  %2216 = fmul <2 x float> %2215, %2213, !dbg !119
  %2217 = fsub <2 x float> %2216, %2210, !dbg !120
  %2218 = fmul <2 x float> %709, %2217, !dbg !121
  %2219 = fadd <2 x float> %2210, %2218, !dbg !122
  %2220 = fadd float %1882, %2190, !dbg !122
  %2221 = fadd float %1883, %2191, !dbg !122
  %2222 = fadd float %1884, %2192, !dbg !122
  %2223 = fadd float %1885, %2193, !dbg !122
  %2224 = fadd float %1886, %2194, !dbg !122
  %2225 = fadd float %1887, %2195, !dbg !122
  %2226 = fadd float %1888, %2196, !dbg !122
  %2227 = fadd float %1889, %2197, !dbg !122
  %2228 = fadd float %1890, %2198, !dbg !122
  %2229 = fadd float %1891, %2199, !dbg !122
  %2230 = fadd float %1892, %2200, !dbg !122
  %2231 = fadd float %1893, %2201, !dbg !122
  %2232 = fadd float %1894, %2202, !dbg !122
  %2233 = fadd float %1895, %2203, !dbg !122
  %2234 = fadd float %1896, %2204, !dbg !122
  %2235 = extractelement <2 x float> %2219, i64 0, !dbg !123
  %2236 = extractelement <2 x float> %2219, i64 1, !dbg !124
  %2237 = fsub float %2235, %2236, !dbg !123
  %2238 = fsub float %2220, %1604, !dbg !123
  %2239 = fsub float %2221, %1605, !dbg !123
  %2240 = fsub float %2222, %1606, !dbg !123
  %2241 = fsub float %2223, %1607, !dbg !123
  %2242 = fsub float %2224, %1608, !dbg !123
  %2243 = fsub float %2225, %1609, !dbg !123
  %2244 = fsub float %2226, %1610, !dbg !123
  %2245 = fsub float %2227, %1611, !dbg !123
  %2246 = fsub float %2228, %1612, !dbg !123
  %2247 = fsub float %2229, %1613, !dbg !123
  %2248 = fsub float %2230, %1614, !dbg !123
  %2249 = fsub float %2231, %1615, !dbg !123
  %2250 = fsub float %2232, %1616, !dbg !123
  %2251 = fsub float %2233, %1617, !dbg !123
  %2252 = fsub float %2234, %1618, !dbg !123
  %2253 = shl i32 %56, 7, !dbg !125
  %2254 = shl i32 %57, 7, !dbg !125
  %2255 = shl i32 %58, 7, !dbg !125
  %2256 = shl i32 %59, 7, !dbg !125
  %2257 = shl i32 %101, 15, !dbg !126
  %2258 = add i32 %2257, %.decomposed41, !dbg !127
  %2259 = add i32 %2258, %2253, !dbg !128
  %2260 = add i32 %2258, %2254, !dbg !128
  %2261 = add i32 %2258, %2255, !dbg !128
  %2262 = add i32 %2258, %2256, !dbg !128
  %2263 = sext i32 %2259 to i64, !dbg !129
  %2264 = getelementptr float, ptr addrspace(1) %9, i64 %2263, !dbg !129
  %2265 = sext i32 %2260 to i64, !dbg !129
  %2266 = getelementptr float, ptr addrspace(1) %9, i64 %2265, !dbg !129
  %2267 = sext i32 %2261 to i64, !dbg !129
  %2268 = getelementptr float, ptr addrspace(1) %9, i64 %2267, !dbg !129
  %2269 = sext i32 %2262 to i64, !dbg !129
  %2270 = getelementptr float, ptr addrspace(1) %9, i64 %2269, !dbg !129
  %2271 = bitcast float %1002 to i32, !dbg !130
  %2272 = bitcast float %1003 to i32, !dbg !130
  %2273 = bitcast float %1004 to i32, !dbg !130
  %2274 = bitcast float %1005 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2271, i32 %2272, i32 %2273, i32 %2274, ptr addrspace(1) %2264, i1 %237) #2, !dbg !130
  %2275 = bitcast float %1006 to i32, !dbg !130
  %2276 = bitcast float %1007 to i32, !dbg !130
  %2277 = bitcast float %1008 to i32, !dbg !130
  %2278 = bitcast float %1009 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2275, i32 %2276, i32 %2277, i32 %2278, ptr addrspace(1) %2266, i1 %238) #2, !dbg !130
  %2279 = bitcast float %1010 to i32, !dbg !130
  %2280 = bitcast float %1011 to i32, !dbg !130
  %2281 = bitcast float %1012 to i32, !dbg !130
  %2282 = bitcast float %1013 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2279, i32 %2280, i32 %2281, i32 %2282, ptr addrspace(1) %2268, i1 %239) #2, !dbg !130
  %2283 = bitcast float %1014 to i32, !dbg !130
  %2284 = bitcast float %1015 to i32, !dbg !130
  %2285 = bitcast float %1016 to i32, !dbg !130
  %2286 = bitcast float %1017 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2283, i32 %2284, i32 %2285, i32 %2286, ptr addrspace(1) %2270, i1 %240) #2, !dbg !130
  %2287 = shl i32 %37, 8, !dbg !131
  %2288 = shl i32 %38, 8, !dbg !131
  %2289 = shl i32 %39, 8, !dbg !131
  %2290 = shl i32 %40, 8, !dbg !131
  %2291 = add i32 %60, %2287, !dbg !132
  %2292 = add i32 %60, %2288, !dbg !132
  %2293 = add i32 %60, %2289, !dbg !132
  %2294 = add i32 %60, %2290, !dbg !132
  %2295 = sext i32 %2291 to i64, !dbg !133
  %2296 = getelementptr float, ptr addrspace(1) %10, i64 %2295, !dbg !133
  %2297 = sext i32 %2292 to i64, !dbg !133
  %2298 = getelementptr float, ptr addrspace(1) %10, i64 %2297, !dbg !133
  %2299 = sext i32 %2293 to i64, !dbg !133
  %2300 = getelementptr float, ptr addrspace(1) %10, i64 %2299, !dbg !133
  %2301 = sext i32 %2294 to i64, !dbg !133
  %2302 = getelementptr float, ptr addrspace(1) %10, i64 %2301, !dbg !133
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %2303 = shl i32 %17, 10, !dbg !124
  %2304 = and i32 %2303, 3072, !dbg !124
  %2305 = or disjoint i32 %2304, %50, !dbg !124
  %2306 = lshr exact i32 %2304, 6, !dbg !124
  %2307 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %2306, !dbg !124
  %2308 = getelementptr float, ptr addrspace(3) %2307, i32 %2305, !dbg !124
  %2309 = bitcast float %2236 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2308, <1 x i32> %2309, i1 true) #2, !dbg !124
  %2310 = or disjoint i32 %2305, 256, !dbg !124
  %2311 = lshr i32 %2310, 8, !dbg !124
  %2312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2311, !dbg !124
  %2313 = getelementptr float, ptr addrspace(3) %2312, i32 %2310, !dbg !124
  %2314 = bitcast float %1604 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2313, <1 x i32> %2314, i1 true) #2, !dbg !124
  %2315 = or disjoint i32 %2305, 512, !dbg !124
  %2316 = lshr i32 %2315, 8, !dbg !124
  %2317 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2316, !dbg !124
  %2318 = getelementptr float, ptr addrspace(3) %2317, i32 %2315, !dbg !124
  %2319 = bitcast float %1605 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2318, <1 x i32> %2319, i1 true) #2, !dbg !124
  %2320 = or disjoint i32 %2305, 768, !dbg !124
  %2321 = lshr i32 %2320, 8, !dbg !124
  %2322 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2321, !dbg !124
  %2323 = getelementptr float, ptr addrspace(3) %2322, i32 %2320, !dbg !124
  %2324 = bitcast float %1606 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2323, <1 x i32> %2324, i1 true) #2, !dbg !124
  %2325 = or disjoint i32 %2305, 64, !dbg !124
  %2326 = getelementptr float, ptr addrspace(3) %2307, i32 %2325, !dbg !124
  %2327 = bitcast float %1607 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2326, <1 x i32> %2327, i1 true) #2, !dbg !124
  %2328 = or disjoint i32 %2305, 320, !dbg !124
  %2329 = lshr i32 %2328, 8, !dbg !124
  %2330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2329, !dbg !124
  %2331 = getelementptr float, ptr addrspace(3) %2330, i32 %2328, !dbg !124
  %2332 = bitcast float %1608 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2331, <1 x i32> %2332, i1 true) #2, !dbg !124
  %2333 = or disjoint i32 %2305, 576, !dbg !124
  %2334 = lshr i32 %2333, 8, !dbg !124
  %2335 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2334, !dbg !124
  %2336 = getelementptr float, ptr addrspace(3) %2335, i32 %2333, !dbg !124
  %2337 = bitcast float %1609 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2336, <1 x i32> %2337, i1 true) #2, !dbg !124
  %2338 = or disjoint i32 %2305, 832, !dbg !124
  %2339 = lshr i32 %2338, 8, !dbg !124
  %2340 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2339, !dbg !124
  %2341 = getelementptr float, ptr addrspace(3) %2340, i32 %2338, !dbg !124
  %2342 = bitcast float %1610 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2341, <1 x i32> %2342, i1 true) #2, !dbg !124
  %2343 = or disjoint i32 %2305, 128, !dbg !124
  %2344 = getelementptr float, ptr addrspace(3) %2307, i32 %2343, !dbg !124
  %2345 = bitcast float %1611 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2344, <1 x i32> %2345, i1 true) #2, !dbg !124
  %2346 = or disjoint i32 %2305, 384, !dbg !124
  %2347 = lshr i32 %2346, 8, !dbg !124
  %2348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2347, !dbg !124
  %2349 = getelementptr float, ptr addrspace(3) %2348, i32 %2346, !dbg !124
  %2350 = bitcast float %1612 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2349, <1 x i32> %2350, i1 true) #2, !dbg !124
  %2351 = or disjoint i32 %2305, 640, !dbg !124
  %2352 = lshr i32 %2351, 8, !dbg !124
  %2353 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2352, !dbg !124
  %2354 = getelementptr float, ptr addrspace(3) %2353, i32 %2351, !dbg !124
  %2355 = bitcast float %1613 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2354, <1 x i32> %2355, i1 true) #2, !dbg !124
  %2356 = or disjoint i32 %2305, 896, !dbg !124
  %2357 = lshr i32 %2356, 8, !dbg !124
  %2358 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2357, !dbg !124
  %2359 = getelementptr float, ptr addrspace(3) %2358, i32 %2356, !dbg !124
  %2360 = bitcast float %1614 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2359, <1 x i32> %2360, i1 true) #2, !dbg !124
  %2361 = or disjoint i32 %2305, 192, !dbg !124
  %2362 = getelementptr float, ptr addrspace(3) %2307, i32 %2361, !dbg !124
  %2363 = bitcast float %1615 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2362, <1 x i32> %2363, i1 true) #2, !dbg !124
  %2364 = or disjoint i32 %2305, 448, !dbg !124
  %2365 = lshr i32 %2364, 8, !dbg !124
  %2366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2365, !dbg !124
  %2367 = getelementptr float, ptr addrspace(3) %2366, i32 %2364, !dbg !124
  %2368 = bitcast float %1616 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2367, <1 x i32> %2368, i1 true) #2, !dbg !124
  %2369 = or disjoint i32 %2305, 704, !dbg !124
  %2370 = lshr i32 %2369, 8, !dbg !124
  %2371 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2370, !dbg !124
  %2372 = getelementptr float, ptr addrspace(3) %2371, i32 %2369, !dbg !124
  %2373 = bitcast float %1617 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2372, <1 x i32> %2373, i1 true) #2, !dbg !124
  %2374 = or disjoint i32 %2305, 960, !dbg !124
  %2375 = lshr i32 %2374, 8, !dbg !124
  %2376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2375, !dbg !124
  %2377 = getelementptr float, ptr addrspace(3) %2376, i32 %2374, !dbg !124
  %2378 = bitcast float %1618 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2377, <1 x i32> %2378, i1 true) #2, !dbg !124
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %2379 = lshr i32 %263, 8, !dbg !124
  %2380 = or disjoint i32 %2379, %263, !dbg !124
  %2381 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2380, !dbg !124
  %2382 = load i32, ptr addrspace(3) %2381, align 4, !dbg !124
  %2383 = or disjoint i32 %263, 1, !dbg !124
  %2384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2379, !dbg !124
  %2385 = getelementptr inbounds float, ptr addrspace(3) %2384, i32 %2383, !dbg !124
  %2386 = load i32, ptr addrspace(3) %2385, align 4, !dbg !124
  %2387 = or disjoint i32 %263, 2, !dbg !124
  %2388 = getelementptr inbounds float, ptr addrspace(3) %2384, i32 %2387, !dbg !124
  %2389 = load i32, ptr addrspace(3) %2388, align 4, !dbg !124
  %2390 = or disjoint i32 %263, 3, !dbg !124
  %2391 = getelementptr inbounds float, ptr addrspace(3) %2384, i32 %2390, !dbg !124
  %2392 = load i32, ptr addrspace(3) %2391, align 4, !dbg !124
  %2393 = lshr i32 %317, 8, !dbg !124
  %2394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2393, !dbg !124
  %2395 = getelementptr inbounds float, ptr addrspace(3) %2394, i32 %317, !dbg !124
  %2396 = load i32, ptr addrspace(3) %2395, align 4, !dbg !124
  %2397 = or disjoint i32 %263, 1025, !dbg !124
  %2398 = lshr i32 %2397, 8, !dbg !124
  %2399 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2398, !dbg !124
  %2400 = getelementptr inbounds float, ptr addrspace(3) %2399, i32 %2397, !dbg !124
  %2401 = load i32, ptr addrspace(3) %2400, align 4, !dbg !124
  %2402 = or disjoint i32 %263, 1026, !dbg !124
  %2403 = lshr i32 %2402, 8, !dbg !124
  %2404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2403, !dbg !124
  %2405 = getelementptr inbounds float, ptr addrspace(3) %2404, i32 %2402, !dbg !124
  %2406 = load i32, ptr addrspace(3) %2405, align 4, !dbg !124
  %2407 = or disjoint i32 %263, 1027, !dbg !124
  %2408 = lshr i32 %2407, 8, !dbg !124
  %2409 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2408, !dbg !124
  %2410 = getelementptr inbounds float, ptr addrspace(3) %2409, i32 %2407, !dbg !124
  %2411 = load i32, ptr addrspace(3) %2410, align 4, !dbg !124
  %2412 = lshr i32 %323, 8, !dbg !124
  %2413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2412, !dbg !124
  %2414 = getelementptr inbounds float, ptr addrspace(3) %2413, i32 %323, !dbg !124
  %2415 = load i32, ptr addrspace(3) %2414, align 4, !dbg !124
  %2416 = or disjoint i32 %263, 2049, !dbg !124
  %2417 = lshr i32 %2416, 8, !dbg !124
  %2418 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2417, !dbg !124
  %2419 = getelementptr inbounds float, ptr addrspace(3) %2418, i32 %2416, !dbg !124
  %2420 = load i32, ptr addrspace(3) %2419, align 4, !dbg !124
  %2421 = or disjoint i32 %263, 2050, !dbg !124
  %2422 = lshr i32 %2421, 8, !dbg !124
  %2423 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2422, !dbg !124
  %2424 = getelementptr inbounds float, ptr addrspace(3) %2423, i32 %2421, !dbg !124
  %2425 = load i32, ptr addrspace(3) %2424, align 4, !dbg !124
  %2426 = or disjoint i32 %263, 2051, !dbg !124
  %2427 = lshr i32 %2426, 8, !dbg !124
  %2428 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2427, !dbg !124
  %2429 = getelementptr inbounds float, ptr addrspace(3) %2428, i32 %2426, !dbg !124
  %2430 = load i32, ptr addrspace(3) %2429, align 4, !dbg !124
  %2431 = lshr i32 %329, 8, !dbg !124
  %2432 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2431, !dbg !124
  %2433 = getelementptr inbounds float, ptr addrspace(3) %2432, i32 %329, !dbg !124
  %2434 = load i32, ptr addrspace(3) %2433, align 4, !dbg !124
  %2435 = or disjoint i32 %263, 3073, !dbg !124
  %2436 = lshr i32 %2435, 8, !dbg !124
  %2437 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2436, !dbg !124
  %2438 = getelementptr inbounds float, ptr addrspace(3) %2437, i32 %2435, !dbg !124
  %2439 = load i32, ptr addrspace(3) %2438, align 4, !dbg !124
  %2440 = or disjoint i32 %263, 3074, !dbg !124
  %2441 = lshr i32 %2440, 8, !dbg !124
  %2442 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2441, !dbg !124
  %2443 = getelementptr inbounds float, ptr addrspace(3) %2442, i32 %2440, !dbg !124
  %2444 = load i32, ptr addrspace(3) %2443, align 4, !dbg !124
  %2445 = or disjoint i32 %263, 3075, !dbg !124
  %2446 = lshr i32 %2445, 8, !dbg !124
  %2447 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %2446, !dbg !124
  %2448 = getelementptr inbounds float, ptr addrspace(3) %2447, i32 %2445, !dbg !124
  %2449 = load i32, ptr addrspace(3) %2448, align 4, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2382, i32 %2386, i32 %2389, i32 %2392, ptr addrspace(1) %2296, i1 %241) #2, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2396, i32 %2401, i32 %2406, i32 %2411, ptr addrspace(1) %2298, i1 %242) #2, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2415, i32 %2420, i32 %2425, i32 %2430, ptr addrspace(1) %2300, i1 %243) #2, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2434, i32 %2439, i32 %2444, i32 %2449, ptr addrspace(1) %2302, i1 %244) #2, !dbg !124
  %2450 = getelementptr float, ptr addrspace(1) %11, i64 %2295, !dbg !134
  %2451 = getelementptr float, ptr addrspace(1) %11, i64 %2297, !dbg !134
  %2452 = getelementptr float, ptr addrspace(1) %11, i64 %2299, !dbg !134
  %2453 = getelementptr float, ptr addrspace(1) %11, i64 %2301, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %2454 = bitcast float %2237 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2308, <1 x i32> %2454, i1 true) #2, !dbg !135
  %2455 = bitcast float %2238 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2313, <1 x i32> %2455, i1 true) #2, !dbg !135
  %2456 = bitcast float %2239 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2318, <1 x i32> %2456, i1 true) #2, !dbg !135
  %2457 = bitcast float %2240 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2323, <1 x i32> %2457, i1 true) #2, !dbg !135
  %2458 = bitcast float %2241 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2326, <1 x i32> %2458, i1 true) #2, !dbg !135
  %2459 = bitcast float %2242 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2331, <1 x i32> %2459, i1 true) #2, !dbg !135
  %2460 = bitcast float %2243 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2336, <1 x i32> %2460, i1 true) #2, !dbg !135
  %2461 = bitcast float %2244 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2341, <1 x i32> %2461, i1 true) #2, !dbg !135
  %2462 = bitcast float %2245 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2344, <1 x i32> %2462, i1 true) #2, !dbg !135
  %2463 = bitcast float %2246 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2349, <1 x i32> %2463, i1 true) #2, !dbg !135
  %2464 = bitcast float %2247 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2354, <1 x i32> %2464, i1 true) #2, !dbg !135
  %2465 = bitcast float %2248 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2359, <1 x i32> %2465, i1 true) #2, !dbg !135
  %2466 = bitcast float %2249 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2362, <1 x i32> %2466, i1 true) #2, !dbg !135
  %2467 = bitcast float %2250 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2367, <1 x i32> %2467, i1 true) #2, !dbg !135
  %2468 = bitcast float %2251 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2372, <1 x i32> %2468, i1 true) #2, !dbg !135
  %2469 = bitcast float %2252 to <1 x i32>, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2377, <1 x i32> %2469, i1 true) #2, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %2470 = load i32, ptr addrspace(3) %2381, align 4, !dbg !135
  %2471 = load i32, ptr addrspace(3) %2385, align 4, !dbg !135
  %2472 = load i32, ptr addrspace(3) %2388, align 4, !dbg !135
  %2473 = load i32, ptr addrspace(3) %2391, align 4, !dbg !135
  %2474 = load i32, ptr addrspace(3) %2395, align 4, !dbg !135
  %2475 = load i32, ptr addrspace(3) %2400, align 4, !dbg !135
  %2476 = load i32, ptr addrspace(3) %2405, align 4, !dbg !135
  %2477 = load i32, ptr addrspace(3) %2410, align 4, !dbg !135
  %2478 = load i32, ptr addrspace(3) %2414, align 4, !dbg !135
  %2479 = load i32, ptr addrspace(3) %2419, align 4, !dbg !135
  %2480 = load i32, ptr addrspace(3) %2424, align 4, !dbg !135
  %2481 = load i32, ptr addrspace(3) %2429, align 4, !dbg !135
  %2482 = load i32, ptr addrspace(3) %2433, align 4, !dbg !135
  %2483 = load i32, ptr addrspace(3) %2438, align 4, !dbg !135
  %2484 = load i32, ptr addrspace(3) %2443, align 4, !dbg !135
  %2485 = load i32, ptr addrspace(3) %2448, align 4, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2470, i32 %2471, i32 %2472, i32 %2473, ptr addrspace(1) %2450, i1 %241) #2, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2474, i32 %2475, i32 %2476, i32 %2477, ptr addrspace(1) %2451, i1 %242) #2, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2478, i32 %2479, i32 %2480, i32 %2481, ptr addrspace(1) %2452, i1 %243) #2, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2482, i32 %2483, i32 %2484, i32 %2485, ptr addrspace(1) %2453, i1 %244) #2, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py", directory: "inductor_cache/47")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10", linkageName: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 46, column: 32, scope: !7)
!38 = !DILocation(line: 47, column: 39, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 47, column: 50, scope: !7)
!41 = !DILocation(line: 47, column: 62, scope: !7)
!42 = !DILocation(line: 47, column: 57, scope: !7)
!43 = !DILocation(line: 47, column: 46, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !7)
!45 = !DILocation(line: 47, column: 75, scope: !7)
!46 = !DILocation(line: 47, column: 67, scope: !7)
!47 = !DILocation(line: 50, column: 35, scope: !7)
!48 = !DILocation(line: 51, column: 40, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 51, column: 59, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 69, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 35, scope: !7)
!55 = !DILocation(line: 58, column: 51, scope: !7)
!56 = !DILocation(line: 58, column: 47, scope: !7)
!57 = !DILocation(line: 58, column: 59, scope: !7)
!58 = !DILocation(line: 58, column: 31, scope: !7)
!59 = !DILocation(line: 58, column: 69, scope: !7)
!60 = !DILocation(line: 59, column: 48, scope: !7)
!61 = !DILocation(line: 59, column: 60, scope: !7)
!62 = !DILocation(line: 59, column: 31, scope: !7)
!63 = !DILocation(line: 59, column: 70, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 61, column: 20, scope: !7)
!66 = !DILocation(line: 62, column: 20, scope: !7)
!67 = !DILocation(line: 63, column: 20, scope: !7)
!68 = !DILocation(line: 65, column: 20, scope: !7)
!69 = !DILocation(line: 64, column: 20, scope: !7)
!70 = !DILocation(line: 47, column: 30, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!73 = !DILocation(line: 66, column: 23, scope: !7)
!74 = !DILocation(line: 47, column: 29, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 47, column: 20, scope: !71, inlinedAt: !73)
!76 = !DILocation(line: 47, column: 16, scope: !71, inlinedAt: !73)
!77 = !DILocation(line: 67, column: 31, scope: !7)
!78 = !DILocation(line: 67, column: 68, scope: !7)
!79 = !DILocation(line: 68, column: 31, scope: !7)
!80 = !DILocation(line: 68, column: 68, scope: !7)
!81 = !DILocation(line: 47, column: 30, scope: !71, inlinedAt: !82)
!82 = !DILocation(line: 69, column: 23, scope: !7)
!83 = !DILocation(line: 47, column: 29, scope: !71, inlinedAt: !82)
!84 = !DILocation(line: 47, column: 20, scope: !71, inlinedAt: !82)
!85 = !DILocation(line: 47, column: 16, scope: !71, inlinedAt: !82)
!86 = !DILocation(line: 70, column: 20, scope: !7)
!87 = !DILocation(line: 71, column: 31, scope: !7)
!88 = !DILocation(line: 71, column: 69, scope: !7)
!89 = !DILocation(line: 72, column: 31, scope: !7)
!90 = !DILocation(line: 72, column: 69, scope: !7)
!91 = !DILocation(line: 47, column: 30, scope: !71, inlinedAt: !92)
!92 = !DILocation(line: 73, column: 23, scope: !7)
!93 = !DILocation(line: 47, column: 29, scope: !71, inlinedAt: !92)
!94 = !DILocation(line: 47, column: 20, scope: !71, inlinedAt: !92)
!95 = !DILocation(line: 47, column: 16, scope: !71, inlinedAt: !92)
!96 = !DILocation(line: 74, column: 20, scope: !7)
!97 = !DILocation(line: 75, column: 20, scope: !7)
!98 = !DILocation(line: 76, column: 20, scope: !7)
!99 = !DILocation(line: 77, column: 20, scope: !7)
!100 = !DILocation(line: 78, column: 31, scope: !7)
!101 = !DILocation(line: 78, column: 69, scope: !7)
!102 = !DILocation(line: 79, column: 31, scope: !7)
!103 = !DILocation(line: 79, column: 69, scope: !7)
!104 = !DILocation(line: 47, column: 30, scope: !71, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 23, scope: !7)
!106 = !DILocation(line: 47, column: 29, scope: !71, inlinedAt: !105)
!107 = !DILocation(line: 47, column: 20, scope: !71, inlinedAt: !105)
!108 = !DILocation(line: 47, column: 16, scope: !71, inlinedAt: !105)
!109 = !DILocation(line: 81, column: 20, scope: !7)
!110 = !DILocation(line: 82, column: 31, scope: !7)
!111 = !DILocation(line: 82, column: 70, scope: !7)
!112 = !DILocation(line: 83, column: 31, scope: !7)
!113 = !DILocation(line: 83, column: 70, scope: !7)
!114 = !DILocation(line: 47, column: 30, scope: !71, inlinedAt: !115)
!115 = !DILocation(line: 84, column: 23, scope: !7)
!116 = !DILocation(line: 47, column: 29, scope: !71, inlinedAt: !115)
!117 = !DILocation(line: 47, column: 20, scope: !71, inlinedAt: !115)
!118 = !DILocation(line: 47, column: 16, scope: !71, inlinedAt: !115)
!119 = !DILocation(line: 85, column: 20, scope: !7)
!120 = !DILocation(line: 86, column: 20, scope: !7)
!121 = !DILocation(line: 87, column: 20, scope: !7)
!122 = !DILocation(line: 88, column: 20, scope: !7)
!123 = !DILocation(line: 89, column: 20, scope: !7)
!124 = !DILocation(line: 91, column: 46, scope: !7)
!125 = !DILocation(line: 90, column: 34, scope: !7)
!126 = !DILocation(line: 90, column: 45, scope: !7)
!127 = !DILocation(line: 90, column: 30, scope: !7)
!128 = !DILocation(line: 90, column: 39, scope: !7)
!129 = !DILocation(line: 90, column: 25, scope: !7)
!130 = !DILocation(line: 90, column: 57, scope: !7)
!131 = !DILocation(line: 91, column: 34, scope: !7)
!132 = !DILocation(line: 91, column: 30, scope: !7)
!133 = !DILocation(line: 91, column: 25, scope: !7)
!134 = !DILocation(line: 92, column: 25, scope: !7)
!135 = !DILocation(line: 92, column: 46, scope: !7)
!136 = !DILocation(line: 92, column: 4, scope: !7)
