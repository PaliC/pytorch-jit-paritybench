; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 63, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 64, !dbg !14
  %15 = icmp slt i32 %13, 64, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen, 16, !dbg !15
  %17 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = lshr i32 %7, 1, !dbg !17
  %19 = and i32 %18, 16, !dbg !17
  %20 = add nsw i32 %.decomposed, %19, !dbg !18
  %21 = shl i32 %16, 5, !dbg !19
  %22 = add i32 %20, %21, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !22
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !22
  %28 = and i32 %10, 1, !dbg !23
  %29 = shl nuw nsw i32 %9, 1, !dbg !23
  %30 = or disjoint i32 %29, %28, !dbg !23
  %31 = getelementptr float, ptr addrspace(3) @global_smem, i32 %30, !dbg !23
  %32 = select i1 %14, i32 %26, i32 -8388608, !dbg !27
  %33 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %33, i1 true) #3, !dbg !23
  %34 = or disjoint i32 %29, 2, !dbg !23
  %35 = or disjoint i32 %34, %28, !dbg !23
  %36 = getelementptr float, ptr addrspace(3) @global_smem, i32 %35, !dbg !23
  %37 = select i1 %14, i32 %27, i32 -8388608, !dbg !27
  %38 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %38, i1 true) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %39 = icmp slt i32 %7, 128, !dbg !23
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !23
  %41 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %40, i1 %39) #3, !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 1, i32 31), !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = fcmp ogt float %42, %44, !dbg !28
  %46 = fcmp uno float %42, 0.000000e+00, !dbg !30
  %47 = or i1 %46, %45, !dbg !31
  %48 = and i32 %7, 1, !dbg !23
  %49 = icmp eq i32 %48, 0, !dbg !23
  %50 = and i1 %39, %49, !dbg !23
  %51 = select i1 %47, i32 %41, i32 %43, !dbg !32
  %52 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %52, i1 %50) #3, !dbg !23
  %53 = getelementptr i8, ptr addrspace(3) %40, i32 256, !dbg !23
  %54 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %39) #3, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = fcmp ogt float %55, %57, !dbg !28
  %59 = fcmp uno float %55, 0.000000e+00, !dbg !30
  %60 = or i1 %59, %58, !dbg !31
  %61 = select i1 %60, i32 %54, i32 %56, !dbg !32
  %62 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %62, i1 %50) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %29, !dbg !23
  %64 = load i32, ptr addrspace(3) %63, align 16, !dbg !23
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %34, !dbg !23
  %66 = load i32, ptr addrspace(3) %65, align 8, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !33
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %67, i32 %64, i32 %66, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !33
  %69 = load i32, ptr addrspace(3) %68, align 4, !dbg !33
  %70 = sext i32 %13 to i64, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %69, ptr addrspace(1) %71, i1 %15) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cez3sibrq2gszt4blxdjfxtncivhakdhuqso72syfxxysbygcnyb.py", directory: "inductor_cache/ez")
!4 = !{ptr @triton_per_fused_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_5", linkageName: "triton_per_fused_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 38, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 46, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 36, column: 37, scope: !7)
!27 = !DILocation(line: 35, column: 33, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !26)
!29 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!30 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !26)
!31 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !26)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !26)
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
