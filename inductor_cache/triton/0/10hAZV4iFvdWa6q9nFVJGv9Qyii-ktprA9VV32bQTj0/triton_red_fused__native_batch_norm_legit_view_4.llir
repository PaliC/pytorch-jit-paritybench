; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_view_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %5 = icmp slt i32 %4, 12, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 31, !dbg !12
  %8 = shl i32 %6, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = shl i32 %4, 12, !dbg !13
  %11 = or disjoint i32 %10, %9
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5) #5, !dbg !15
  %15 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !15
  %18 = bitcast i32 %17 to float, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !15
  %20 = bitcast i32 %19 to float, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !15
  %22 = bitcast i32 %21 to float, !dbg !15
  %23 = select i1 %5, float %22, float 0.000000e+00, !dbg !16
  %24 = select i1 %5, float %20, float 0.000000e+00, !dbg !16
  %25 = select i1 %5, float %18, float 0.000000e+00, !dbg !16
  %26 = select i1 %5, float %16, float 0.000000e+00, !dbg !16
  %27 = or disjoint i32 %11, 2048, !dbg !17
  %28 = sext i32 %27 to i64, !dbg !14
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !14
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5) #5, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !15
  %32 = bitcast i32 %31 to float, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !15
  %34 = bitcast i32 %33 to float, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !15
  %36 = bitcast i32 %35 to float, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !15
  %38 = bitcast i32 %37 to float, !dbg !15
  %39 = fsub float %38, %23, !dbg !18
  %40 = fsub float %36, %24, !dbg !18
  %41 = fsub float %34, %25, !dbg !18
  %42 = fsub float %32, %26, !dbg !18
  %43 = select i1 %5, float 2.000000e+00, float 1.000000e+00, !dbg !22
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %43) #5, !dbg !23
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %43) #5, !dbg !23
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %43) #5, !dbg !23
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %43) #5, !dbg !23
  %48 = fadd float %23, %44, !dbg !24
  %49 = fsub float %38, %48, !dbg !25
  %50 = fmul float %39, %49, !dbg !26
  %51 = fadd float %50, 0.000000e+00, !dbg !27
  %52 = fadd float %24, %45, !dbg !24
  %53 = fsub float %36, %52, !dbg !25
  %54 = fmul float %40, %53, !dbg !26
  %55 = fadd float %54, 0.000000e+00, !dbg !27
  %56 = fadd float %25, %46, !dbg !24
  %57 = fsub float %34, %56, !dbg !25
  %58 = fmul float %41, %57, !dbg !26
  %59 = fadd float %58, 0.000000e+00, !dbg !27
  %60 = fadd float %26, %47, !dbg !24
  %61 = fsub float %32, %60, !dbg !25
  %62 = fmul float %42, %61, !dbg !26
  %63 = fadd float %62, 0.000000e+00, !dbg !27
  %64 = select i1 %5, float %48, float 0.000000e+00, !dbg !16
  %65 = select i1 %5, float %52, float 0.000000e+00, !dbg !16
  %66 = select i1 %5, float %56, float 0.000000e+00, !dbg !16
  %67 = select i1 %5, float %60, float 0.000000e+00, !dbg !16
  %68 = select i1 %5, float %59, float 0.000000e+00, !dbg !28
  %69 = select i1 %5, float %63, float 0.000000e+00, !dbg !28
  %70 = select i1 %5, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %71 = select i1 %5, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %72 = select i1 %5, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %73 = select i1 %5, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %74 = lshr i32 %6, 5, !dbg !12
  %75 = fsub float %65, %64, !dbg !29
  %76 = select i1 %5, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %77 = fcmp oeq float %76, 0.000000e+00, !dbg !33
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %76) #5, !dbg !34
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !35
  %80 = fmul float %75, %79, !dbg !36
  %81 = fadd float %64, %80, !dbg !37
  %82 = fadd float %51, %55, !dbg !38
  %83 = select i1 %5, float %82, float 0.000000e+00, !dbg !38
  %84 = fmul float %75, %75, !dbg !39
  %85 = fmul float %84, %70, !dbg !40
  %86 = fmul float %85, %79, !dbg !41
  %87 = fadd float %83, %86, !dbg !42
  %88 = fsub float %66, %81, !dbg !29
  %89 = select i1 %5, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %90 = fcmp oeq float %89, 0.000000e+00, !dbg !33
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %89) #5, !dbg !34
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !35
  %93 = fmul float %92, %88, !dbg !36
  %94 = fadd float %81, %93, !dbg !37
  %95 = fadd float %68, %87, !dbg !38
  %96 = fmul float %88, %88, !dbg !39
  %97 = fmul float %76, %96, !dbg !40
  %98 = fmul float %92, %97, !dbg !41
  %99 = fadd float %95, %98, !dbg !42
  %100 = fsub float %67, %94, !dbg !29
  %101 = select i1 %5, float 8.000000e+00, float 0.000000e+00, !dbg !32
  %102 = fcmp oeq float %101, 0.000000e+00, !dbg !33
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %101) #5, !dbg !34
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !35
  %105 = fmul float %104, %100, !dbg !36
  %106 = fadd float %94, %105, !dbg !37
  %107 = fadd float %69, %99, !dbg !38
  %108 = fmul float %100, %100, !dbg !39
  %109 = fmul float %89, %108, !dbg !40
  %110 = fmul float %104, %109, !dbg !41
  %111 = fadd float %107, %110, !dbg !42
  %112 = bitcast float %106 to i32, !dbg !43
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !43
  %114 = bitcast i32 %113 to float, !dbg !43
  %115 = bitcast float %111 to i32, !dbg !43
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = bitcast float %101 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = fsub float %114, %106, !dbg !29
  %122 = fadd float %101, %120, !dbg !32
  %123 = fcmp oeq float %122, 0.000000e+00, !dbg !33
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %122) #5, !dbg !34
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !35
  %126 = fmul float %125, %121, !dbg !36
  %127 = fadd float %106, %126, !dbg !37
  %128 = fadd float %111, %117, !dbg !38
  %129 = fmul float %121, %121, !dbg !39
  %130 = fmul float %101, %129, !dbg !40
  %131 = fmul float %125, %130, !dbg !41
  %132 = fadd float %128, %131, !dbg !42
  %133 = bitcast float %127 to i32, !dbg !43
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !43
  %135 = bitcast i32 %134 to float, !dbg !43
  %136 = bitcast float %132 to i32, !dbg !43
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !43
  %138 = bitcast i32 %137 to float, !dbg !43
  %139 = bitcast float %122 to i32, !dbg !43
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = fsub float %135, %127, !dbg !29
  %143 = fadd float %122, %141, !dbg !32
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !33
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %143) #5, !dbg !34
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !35
  %147 = fmul float %142, %146, !dbg !36
  %148 = fadd float %127, %147, !dbg !37
  %149 = fadd float %132, %138, !dbg !38
  %150 = fmul float %142, %142, !dbg !39
  %151 = fmul float %122, %150, !dbg !40
  %152 = fmul float %146, %151, !dbg !41
  %153 = fadd float %149, %152, !dbg !42
  %154 = bitcast float %148 to i32, !dbg !43
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !43
  %156 = bitcast i32 %155 to float, !dbg !43
  %157 = bitcast float %153 to i32, !dbg !43
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 4, i32 31), !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = bitcast float %143 to i32, !dbg !43
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = fsub float %156, %148, !dbg !29
  %164 = fadd float %143, %162, !dbg !32
  %165 = fcmp oeq float %164, 0.000000e+00, !dbg !33
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %164) #5, !dbg !34
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !35
  %168 = fmul float %163, %167, !dbg !36
  %169 = fadd float %148, %168, !dbg !37
  %170 = fadd float %153, %159, !dbg !38
  %171 = fmul float %163, %163, !dbg !39
  %172 = fmul float %143, %171, !dbg !40
  %173 = fmul float %167, %172, !dbg !41
  %174 = fadd float %170, %173, !dbg !42
  %175 = bitcast float %169 to i32, !dbg !43
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !43
  %177 = bitcast i32 %176 to float, !dbg !43
  %178 = bitcast float %174 to i32, !dbg !43
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = bitcast float %164 to i32, !dbg !43
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !43
  %183 = bitcast i32 %182 to float, !dbg !43
  %184 = fsub float %177, %169, !dbg !29
  %185 = fadd float %164, %183, !dbg !32
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !33
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %185) #5, !dbg !34
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !35
  %189 = fmul float %184, %188, !dbg !36
  %190 = fadd float %169, %189, !dbg !37
  %191 = fadd float %174, %180, !dbg !38
  %192 = fmul float %184, %184, !dbg !39
  %193 = fmul float %164, %192, !dbg !40
  %194 = fmul float %188, %193, !dbg !41
  %195 = fadd float %191, %194, !dbg !42
  %196 = bitcast float %190 to i32, !dbg !43
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !43
  %198 = bitcast i32 %197 to float, !dbg !43
  %199 = bitcast float %195 to i32, !dbg !43
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !43
  %201 = bitcast i32 %200 to float, !dbg !43
  %202 = bitcast float %185 to i32, !dbg !43
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !43
  %204 = bitcast i32 %203 to float, !dbg !43
  %205 = fsub float %198, %190, !dbg !29
  %206 = fadd float %185, %204, !dbg !32
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !33
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %206) #5, !dbg !34
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !35
  %210 = fmul float %205, %209, !dbg !36
  %211 = fadd float %190, %210, !dbg !37
  %212 = fadd float %195, %201, !dbg !38
  %213 = fmul float %205, %205, !dbg !39
  %214 = fmul float %185, %213, !dbg !40
  %215 = fmul float %209, %214, !dbg !41
  %216 = fadd float %212, %215, !dbg !42
  %217 = icmp eq i32 %7, 0, !dbg !43
  %218 = and i32 %74, 15, !dbg !43
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !43
  %220 = bitcast float %211 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 %217) #5, !dbg !43
  %221 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %218, !dbg !43
  %222 = bitcast float %216 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 %217) #5, !dbg !43
  %223 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %218, !dbg !43
  %224 = bitcast float %206 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 %217) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %225 = icmp slt i32 %6, 16, !dbg !43
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !43
  %227 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %226, i1 %225) #5, !dbg !43
  %228 = bitcast i32 %227 to float, !dbg !43
  %229 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %6, !dbg !43
  %230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %229, i1 %225) #5, !dbg !43
  %231 = bitcast i32 %230 to float, !dbg !43
  %232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %6, !dbg !43
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %232, i1 %225) #5, !dbg !43
  %234 = bitcast i32 %233 to float, !dbg !43
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !43
  %236 = bitcast i32 %235 to float, !dbg !43
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !43
  %238 = bitcast i32 %237 to float, !dbg !43
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !43
  %240 = bitcast i32 %239 to float, !dbg !43
  %241 = fsub float %236, %228, !dbg !29
  %242 = fadd float %234, %240, !dbg !32
  %243 = fcmp oeq float %242, 0.000000e+00, !dbg !33
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %242) #5, !dbg !34
  %245 = select i1 %243, float 0.000000e+00, float %244, !dbg !35
  %246 = fmul float %241, %245, !dbg !36
  %247 = fadd float %246, %228, !dbg !37
  %248 = fadd float %231, %238, !dbg !38
  %249 = fmul float %241, %241, !dbg !39
  %250 = fmul float %249, %234, !dbg !40
  %251 = fmul float %250, %245, !dbg !41
  %252 = fadd float %248, %251, !dbg !42
  %253 = bitcast float %247 to i32, !dbg !43
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !43
  %255 = bitcast i32 %254 to float, !dbg !43
  %256 = bitcast float %252 to i32, !dbg !43
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !43
  %258 = bitcast i32 %257 to float, !dbg !43
  %259 = bitcast float %242 to i32, !dbg !43
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !43
  %261 = bitcast i32 %260 to float, !dbg !43
  %262 = fsub float %255, %247, !dbg !29
  %263 = fadd float %242, %261, !dbg !32
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !33
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %263) #5, !dbg !34
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !35
  %267 = fmul float %262, %266, !dbg !36
  %268 = fadd float %247, %267, !dbg !37
  %269 = fadd float %252, %258, !dbg !38
  %270 = fmul float %262, %262, !dbg !39
  %271 = fmul float %242, %270, !dbg !40
  %272 = fmul float %266, %271, !dbg !41
  %273 = fadd float %269, %272, !dbg !42
  %274 = bitcast float %268 to i32, !dbg !43
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !43
  %276 = bitcast i32 %275 to float, !dbg !43
  %277 = bitcast float %273 to i32, !dbg !43
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !43
  %279 = bitcast i32 %278 to float, !dbg !43
  %280 = bitcast float %263 to i32, !dbg !43
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !43
  %282 = bitcast i32 %281 to float, !dbg !43
  %283 = fsub float %276, %268, !dbg !29
  %284 = fadd float %263, %282, !dbg !32
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !33
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %284) #5, !dbg !34
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !35
  %288 = fmul float %283, %287, !dbg !36
  %289 = fadd float %268, %288, !dbg !37
  %290 = fadd float %273, %279, !dbg !38
  %291 = fmul float %283, %283, !dbg !39
  %292 = fmul float %263, %291, !dbg !40
  %293 = fmul float %287, %292, !dbg !41
  %294 = fadd float %290, %293, !dbg !42
  %295 = bitcast float %289 to i32, !dbg !43
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !43
  %297 = bitcast i32 %296 to float, !dbg !43
  %298 = bitcast float %294 to i32, !dbg !43
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !43
  %300 = bitcast i32 %299 to float, !dbg !43
  %301 = bitcast float %284 to i32, !dbg !43
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !43
  %303 = bitcast i32 %302 to float, !dbg !43
  %304 = fsub float %297, %289, !dbg !29
  %305 = fadd float %284, %303, !dbg !32
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !33
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %305) #5, !dbg !34
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !35
  %309 = fmul float %304, %308, !dbg !36
  %310 = fadd float %289, %309, !dbg !37
  %311 = fadd float %294, %300, !dbg !38
  %312 = fmul float %304, %304, !dbg !39
  %313 = fmul float %284, %312, !dbg !40
  %314 = fmul float %308, %313, !dbg !41
  %315 = fadd float %311, %314, !dbg !42
  %316 = and i32 %6, 15, !dbg !43
  %317 = icmp eq i32 %316, 0, !dbg !43
  %318 = and i1 %225, %317, !dbg !43
  %319 = bitcast float %310 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %319, i1 %318) #5, !dbg !43
  %320 = bitcast float %315 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %320, i1 %318) #5, !dbg !43
  %321 = bitcast float %305 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %321, i1 %318) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %322 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %323 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !43
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %323, float 4.096000e+03) #5, !dbg !44
  %325 = fadd float %324, 0.000000e+00, !dbg !45
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i19 = icmp eq i32 %329, 0, !dbg !46
  br i1 %.not.i19, label %332, label %330, !dbg !46

330:                                              ; preds = %__nv_rsqrtf.exit
  %331 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %325), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

332:                                              ; preds = %__nv_rsqrtf.exit
  %333 = tail call float @llvm.nvvm.rsqrt.approx.f(float %325), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

__nv_rsqrtf.exit21:                               ; preds = %330, %332
  %.0.i20 = phi float [ %331, %330 ], [ %333, %332 ], !dbg !46
  %.frozen = freeze i32 %4, !dbg !47
  %334 = sdiv i32 %.frozen, 3, !dbg !47
  %335 = mul i32 %334, 3, !dbg !48
  %.decomposed = sub i32 %.frozen, %335, !dbg !48
  %336 = and i32 %6, 511, !dbg !12
  %337 = or disjoint i32 %336, 1536, !dbg !12
  %338 = or disjoint i32 %336, 512, !dbg !12
  %339 = or disjoint i32 %336, 1024, !dbg !12
  %340 = mul i32 %334, 12288, !dbg !49
  %341 = add i32 %340, %.decomposed
  %.idx = shl nuw nsw i32 %9, 3
  %342 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %343 = shl nuw nsw i32 %9, 1
  %344 = or disjoint i32 %343, 2
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344
  %346 = or disjoint i32 %343, 4
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346
  %348 = or disjoint i32 %343, 6
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348
  %.idx2 = shl nuw nsw i32 %336, 3
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %338, 3
  %351 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %339, 3
  %352 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %.idx5 = shl nuw nsw i32 %337, 3
  %353 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5) #5, !dbg !50
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !50
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !50
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !50
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !50
  %359 = bitcast i32 %355 to float, !dbg !50
  %360 = bitcast i32 %356 to float, !dbg !50
  %361 = bitcast i32 %357 to float, !dbg !50
  %362 = bitcast i32 %358 to float, !dbg !50
  %363 = fsub float %359, %322, !dbg !51
  %364 = fsub float %360, %322, !dbg !51
  %365 = fsub float %361, %322, !dbg !51
  %366 = fsub float %362, %322, !dbg !51
  %367 = fmul float %.0.i20, %363, !dbg !52
  %368 = fmul float %.0.i20, %364, !dbg !52
  %369 = fmul float %.0.i20, %365, !dbg !52
  %370 = fmul float %.0.i20, %366, !dbg !52
  %371 = mul nuw nsw i32 %336, 3, !dbg !53
  %372 = mul nuw nsw i32 %338, 3, !dbg !53
  %373 = mul nuw nsw i32 %339, 3, !dbg !53
  %374 = mul nuw nsw i32 %337, 3, !dbg !53
  %375 = add i32 %341, %371, !dbg !54
  %376 = add i32 %341, %372, !dbg !54
  %377 = add i32 %341, %373, !dbg !54
  %378 = add i32 %341, %374, !dbg !54
  %379 = sext i32 %375 to i64, !dbg !55
  %380 = getelementptr float, ptr addrspace(1) %1, i64 %379, !dbg !55
  %381 = sext i32 %376 to i64, !dbg !55
  %382 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !55
  %383 = sext i32 %377 to i64, !dbg !55
  %384 = getelementptr float, ptr addrspace(1) %1, i64 %383, !dbg !55
  %385 = sext i32 %378 to i64, !dbg !55
  %386 = getelementptr float, ptr addrspace(1) %1, i64 %385, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %387 = bitcast float %367 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %387, i1 true) #5, !dbg !56
  %388 = bitcast float %368 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %388, i1 true) #5, !dbg !56
  %389 = bitcast float %369 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %389, i1 true) #5, !dbg !56
  %390 = bitcast float %370 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %390, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %391 = load i32, ptr addrspace(3) %350, align 8, !dbg !56
  %392 = load i32, ptr addrspace(3) %351, align 8, !dbg !56
  %393 = load i32, ptr addrspace(3) %352, align 8, !dbg !56
  %394 = load i32, ptr addrspace(3) %353, align 8, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %391, ptr addrspace(1) %380, i1 %5) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %382, i1 %5) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %393, ptr addrspace(1) %384, i1 %5) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %386, i1 %5) #5, !dbg !56
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5, i32 0, i1 %5) #5, !dbg !50
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !50
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !50
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !50
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !50
  %400 = bitcast i32 %396 to float, !dbg !50
  %401 = bitcast i32 %397 to float, !dbg !50
  %402 = bitcast i32 %398 to float, !dbg !50
  %403 = bitcast i32 %399 to float, !dbg !50
  %404 = fsub float %400, %322, !dbg !51
  %405 = fsub float %401, %322, !dbg !51
  %406 = fsub float %402, %322, !dbg !51
  %407 = fsub float %403, %322, !dbg !51
  %408 = fmul float %.0.i20, %404, !dbg !52
  %409 = fmul float %.0.i20, %405, !dbg !52
  %410 = fmul float %.0.i20, %406, !dbg !52
  %411 = fmul float %.0.i20, %407, !dbg !52
  %412 = mul nuw nsw i32 %336, 3, !dbg !53
  %narrow = or disjoint i32 %412, 6144, !dbg !53
  %413 = mul nuw nsw i32 %336, 3, !dbg !53
  %narrow35 = add nuw nsw i32 %413, 7680, !dbg !53
  %414 = mul nuw nsw i32 %336, 3, !dbg !53
  %narrow36 = add nuw nsw i32 %414, 9216, !dbg !53
  %415 = mul nuw nsw i32 %336, 3, !dbg !53
  %narrow37 = add nuw nsw i32 %415, 10752, !dbg !53
  %416 = add i32 %341, %narrow, !dbg !54
  %417 = add i32 %341, %narrow35, !dbg !54
  %418 = add i32 %341, %narrow36, !dbg !54
  %419 = add i32 %341, %narrow37, !dbg !54
  %420 = sext i32 %416 to i64, !dbg !55
  %421 = getelementptr float, ptr addrspace(1) %1, i64 %420, !dbg !55
  %422 = sext i32 %417 to i64, !dbg !55
  %423 = getelementptr float, ptr addrspace(1) %1, i64 %422, !dbg !55
  %424 = sext i32 %418 to i64, !dbg !55
  %425 = getelementptr float, ptr addrspace(1) %1, i64 %424, !dbg !55
  %426 = sext i32 %419 to i64, !dbg !55
  %427 = getelementptr float, ptr addrspace(1) %1, i64 %426, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %428 = bitcast float %408 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %428, i1 true) #5, !dbg !56
  %429 = bitcast float %409 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %429, i1 true) #5, !dbg !56
  %430 = bitcast float %410 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %430, i1 true) #5, !dbg !56
  %431 = bitcast float %411 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %431, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %432 = load i32, ptr addrspace(3) %350, align 8, !dbg !56
  %433 = load i32, ptr addrspace(3) %351, align 8, !dbg !56
  %434 = load i32, ptr addrspace(3) %352, align 8, !dbg !56
  %435 = load i32, ptr addrspace(3) %353, align 8, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %421, i1 %5) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %433, ptr addrspace(1) %423, i1 %5) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %434, ptr addrspace(1) %425, i1 %5) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %435, ptr addrspace(1) %427, i1 %5) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_view_4", linkageName: "triton_red_fused__native_batch_norm_legit_view_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 49, scope: !7)
!16 = !DILocation(line: 39, column: 60, scope: !7)
!17 = !DILocation(line: 34, column: 39, scope: !7)
!18 = !DILocation(line: 183, column: 24, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 37, column: 51, scope: !7)
!22 = !DILocation(line: 41, column: 64, scope: !7)
!23 = !DILocation(line: 185, column: 34, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 185, column: 26, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 186, column: 39, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 186, column: 31, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 186, column: 22, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 192, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 43, column: 41, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !30, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !30, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 15, scope: !30, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 30, scope: !30, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 38, scope: !30, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 49, scope: !30, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 22, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !31)
!44 = !DILocation(line: 57, column: 22, scope: !7)
!45 = !DILocation(line: 59, column: 23, scope: !7)
!46 = !DILocation(line: 60, column: 32, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 62, column: 47, scope: !7)
!50 = !DILocation(line: 54, column: 49, scope: !7)
!51 = !DILocation(line: 55, column: 22, scope: !7)
!52 = !DILocation(line: 61, column: 23, scope: !7)
!53 = !DILocation(line: 62, column: 36, scope: !7)
!54 = !DILocation(line: 62, column: 41, scope: !7)
!55 = !DILocation(line: 62, column: 29, scope: !7)
!56 = !DILocation(line: 62, column: 59, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
