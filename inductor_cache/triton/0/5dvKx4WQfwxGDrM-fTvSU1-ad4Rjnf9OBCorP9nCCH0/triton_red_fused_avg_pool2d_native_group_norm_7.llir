; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %.lobit2 = lshr i32 %10, 7, !dbg !12
  %12 = and i32 %.lobit2, 3, !dbg !12
  %13 = or disjoint i32 %9, %11, !dbg !13
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = icmp slt i32 %13, 128, !dbg !14
  %17 = icmp slt i32 %14, 128, !dbg !14
  %18 = icmp slt i32 %15, 128, !dbg !14
  %19 = lshr i32 %10, 3, !dbg !15
  %20 = and i32 %19, 63, !dbg !15
  %21 = or disjoint i32 %20, 64, !dbg !15
  %22 = or disjoint i32 %20, 128, !dbg !15
  %23 = or disjoint i32 %20, 192, !dbg !15
  %24 = or disjoint i32 %20, 256, !dbg !15
  %25 = or disjoint i32 %20, 320, !dbg !15
  %26 = or disjoint i32 %20, 384, !dbg !15
  %27 = or disjoint i32 %20, 448, !dbg !15
  %28 = shl i32 %10, 2, !dbg !15
  %29 = and i32 %28, 508, !dbg !15
  %30 = shl i32 %13, 12, !dbg !16
  %31 = shl i32 %14, 10, !dbg !17
  %32 = shl i32 %15, 10, !dbg !17
  %33 = shl nuw nsw i32 %19, 1
  %34 = and i32 %33, 30
  %35 = or disjoint i32 %30, %34
  %36 = shl i32 %10, 9
  %37 = and i32 %36, 3584
  %38 = or disjoint i32 %37, %20
  %39 = and i32 %28, 2044
  %40 = lshr exact i32 %37, 5
  %41 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %40
  %42 = getelementptr float, ptr addrspace(3) %41, i32 %38
  %43 = or disjoint i32 %38, 64
  %44 = getelementptr float, ptr addrspace(3) %41, i32 %43
  %45 = or disjoint i32 %38, 128
  %46 = getelementptr float, ptr addrspace(3) %41, i32 %45
  %47 = or disjoint i32 %38, 192
  %48 = getelementptr float, ptr addrspace(3) %41, i32 %47
  %49 = or disjoint i32 %38, 256
  %50 = getelementptr float, ptr addrspace(3) %41, i32 %49
  %51 = or disjoint i32 %38, 320
  %52 = getelementptr float, ptr addrspace(3) %41, i32 %51
  %53 = or disjoint i32 %38, 384
  %54 = getelementptr float, ptr addrspace(3) %41, i32 %53
  %55 = or disjoint i32 %38, 448
  %56 = getelementptr float, ptr addrspace(3) %41, i32 %55
  %57 = lshr i32 %28, 7
  %58 = and i32 %57, 12
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %39
  %61 = or disjoint i32 %39, 2048
  %62 = lshr i32 %61, 7
  %63 = and i32 %62, 28
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63
  %65 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %61
  %66 = zext nneg i32 %29 to i64, !dbg !18
  %67 = sext i32 %31 to i64, !dbg !18
  %68 = sext i32 %32 to i64, !dbg !18
  %69 = zext nneg i32 %20 to i64, !dbg !18
  %70 = zext nneg i32 %34 to i64, !dbg !18
  %71 = sext i32 %30 to i64, !dbg !18
  %72 = zext nneg i32 %21 to i64, !dbg !18
  %73 = sext i32 %35 to i64, !dbg !18
  %74 = zext nneg i32 %22 to i64, !dbg !18
  %75 = zext nneg i32 %23 to i64, !dbg !18
  %76 = zext nneg i32 %24 to i64, !dbg !18
  %77 = zext nneg i32 %25 to i64, !dbg !18
  %78 = zext nneg i32 %26 to i64, !dbg !18
  %79 = zext nneg i32 %27 to i64, !dbg !18
  %invariant.op = or disjoint i64 %70, %71, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !18
  %invariant.gep127 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !18
  %80 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 4
  %81 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 8
  %82 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 12
  %83 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !19
  %84 = shufflevector <8 x i1> %83, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !19
  br label %85, !dbg !18

85:                                               ; preds = %7, %._crit_edge
  %86 = phi i1 [ true, %7 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %7 ], [ 512, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %364, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %365, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %366, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %367, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %7 ], [ %368, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %7 ], [ %369, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %7 ], [ %370, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %7 ], [ %371, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %7 ], [ %356, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %7 ], [ %357, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %7 ], [ %358, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %7 ], [ %359, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %7 ], [ %360, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %7 ], [ %361, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %7 ], [ %362, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %7 ], [ %363, %._crit_edge ]
  %103 = phi <8 x float> [ zeroinitializer, %7 ], [ %355, %._crit_edge ]
  %104 = or disjoint i64 %indvars.iv, %69, !dbg !20
  %105 = or disjoint i64 %indvars.iv, %72, !dbg !20
  %106 = or disjoint i64 %indvars.iv, %74, !dbg !20
  %107 = or disjoint i64 %indvars.iv, %75, !dbg !20
  %108 = or disjoint i64 %indvars.iv, %76, !dbg !20
  %109 = or disjoint i64 %indvars.iv, %77, !dbg !20
  %110 = or disjoint i64 %indvars.iv, %78, !dbg !20
  %111 = or disjoint i64 %indvars.iv, %79, !dbg !20
  %112 = or disjoint i64 %indvars.iv, %66, !dbg !20
  %113 = shl nuw nsw i64 %104, 2, !dbg !21
  %114 = and i64 %113, 2240, !dbg !21
  %115 = shl nuw nsw i64 %105, 2, !dbg !21
  %116 = and i64 %115, 2496, !dbg !21
  %117 = shl nuw nsw i64 %106, 2, !dbg !21
  %118 = and i64 %117, 2752, !dbg !21
  %119 = shl nuw nsw i64 %107, 2, !dbg !21
  %120 = and i64 %119, 3008, !dbg !21
  %121 = shl nuw nsw i64 %108, 2, !dbg !21
  %122 = and i64 %121, 3264, !dbg !21
  %123 = shl nuw nsw i64 %109, 2, !dbg !21
  %124 = and i64 %123, 3520, !dbg !21
  %125 = shl nuw nsw i64 %110, 2, !dbg !21
  %126 = and i64 %125, 3776, !dbg !21
  %127 = shl nuw nsw i64 %111, 2, !dbg !21
  %128 = and i64 %127, 4032, !dbg !21
  %.reass = or disjoint i64 %114, %invariant.op
  %129 = or disjoint i64 %116, %73, !dbg !22
  %130 = or disjoint i64 %118, %73, !dbg !22
  %131 = or disjoint i64 %120, %73, !dbg !22
  %132 = or disjoint i64 %122, %73, !dbg !22
  %133 = or disjoint i64 %124, %73, !dbg !22
  %134 = or disjoint i64 %126, %73, !dbg !22
  %135 = or disjoint i64 %128, %73, !dbg !22
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %.reass, !dbg !23
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !23
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !23
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !23
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !23
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !23
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !23
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !23
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %152 = or disjoint i64 %.reass, 1, !dbg !25
  %153 = or disjoint i64 %129, 1, !dbg !25
  %154 = or disjoint i64 %130, 1, !dbg !25
  %155 = or disjoint i64 %131, 1, !dbg !25
  %156 = or disjoint i64 %132, 1, !dbg !25
  %157 = or disjoint i64 %133, 1, !dbg !25
  %158 = or disjoint i64 %134, 1, !dbg !25
  %159 = or disjoint i64 %135, 1, !dbg !25
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !26
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !26
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !26
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !26
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !26
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !26
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !26
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !26
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %176 = or disjoint i64 %.reass, 32, !dbg !28
  %177 = or disjoint i64 %129, 32, !dbg !28
  %178 = or disjoint i64 %130, 32, !dbg !28
  %179 = or disjoint i64 %131, 32, !dbg !28
  %180 = or disjoint i64 %132, 32, !dbg !28
  %181 = or disjoint i64 %133, 32, !dbg !28
  %182 = or disjoint i64 %134, 32, !dbg !28
  %183 = or disjoint i64 %135, 32, !dbg !28
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !29
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !29
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !29
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !29
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !29
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !29
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !29
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !29
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %200 = or disjoint i64 %.reass, 33, !dbg !31
  %201 = or disjoint i64 %129, 33, !dbg !31
  %202 = or disjoint i64 %130, 33, !dbg !31
  %203 = or disjoint i64 %131, 33, !dbg !31
  %204 = or disjoint i64 %132, 33, !dbg !31
  %205 = or disjoint i64 %133, 33, !dbg !31
  %206 = or disjoint i64 %134, 33, !dbg !31
  %207 = or disjoint i64 %135, 33, !dbg !31
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !32
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !32
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !32
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !32
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !32
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !32
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !32
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !32
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %16, i32 0, i1 %16) #5, !dbg !33
  %224 = insertelement <8 x i32> poison, i32 %144, i64 0, !dbg !24
  %225 = insertelement <8 x i32> %224, i32 %145, i64 1, !dbg !24
  %226 = insertelement <8 x i32> %225, i32 %146, i64 2, !dbg !24
  %227 = insertelement <8 x i32> %226, i32 %147, i64 3, !dbg !24
  %228 = insertelement <8 x i32> %227, i32 %148, i64 4, !dbg !24
  %229 = insertelement <8 x i32> %228, i32 %149, i64 5, !dbg !24
  %230 = insertelement <8 x i32> %229, i32 %150, i64 6, !dbg !24
  %231 = insertelement <8 x i32> %230, i32 %151, i64 7, !dbg !24
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !24
  %233 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !27
  %234 = insertelement <8 x i32> %233, i32 %169, i64 1, !dbg !27
  %235 = insertelement <8 x i32> %234, i32 %170, i64 2, !dbg !27
  %236 = insertelement <8 x i32> %235, i32 %171, i64 3, !dbg !27
  %237 = insertelement <8 x i32> %236, i32 %172, i64 4, !dbg !27
  %238 = insertelement <8 x i32> %237, i32 %173, i64 5, !dbg !27
  %239 = insertelement <8 x i32> %238, i32 %174, i64 6, !dbg !27
  %240 = insertelement <8 x i32> %239, i32 %175, i64 7, !dbg !27
  %241 = bitcast <8 x i32> %240 to <8 x float>, !dbg !27
  %242 = insertelement <8 x i32> poison, i32 %192, i64 0, !dbg !30
  %243 = insertelement <8 x i32> %242, i32 %193, i64 1, !dbg !30
  %244 = insertelement <8 x i32> %243, i32 %194, i64 2, !dbg !30
  %245 = insertelement <8 x i32> %244, i32 %195, i64 3, !dbg !30
  %246 = insertelement <8 x i32> %245, i32 %196, i64 4, !dbg !30
  %247 = insertelement <8 x i32> %246, i32 %197, i64 5, !dbg !30
  %248 = insertelement <8 x i32> %247, i32 %198, i64 6, !dbg !30
  %249 = insertelement <8 x i32> %248, i32 %199, i64 7, !dbg !30
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !30
  %251 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !33
  %252 = insertelement <8 x i32> %251, i32 %217, i64 1, !dbg !33
  %253 = insertelement <8 x i32> %252, i32 %218, i64 2, !dbg !33
  %254 = insertelement <8 x i32> %253, i32 %219, i64 3, !dbg !33
  %255 = insertelement <8 x i32> %254, i32 %220, i64 4, !dbg !33
  %256 = insertelement <8 x i32> %255, i32 %221, i64 5, !dbg !33
  %257 = insertelement <8 x i32> %256, i32 %222, i64 6, !dbg !33
  %258 = insertelement <8 x i32> %257, i32 %223, i64 7, !dbg !33
  %259 = bitcast <8 x i32> %258 to <8 x float>, !dbg !33
  %260 = fadd <8 x float> %232, %241, !dbg !34
  %261 = fadd <8 x float> %260, %250, !dbg !35
  %262 = fadd <8 x float> %261, %259, !dbg !36
  %263 = fmul <8 x float> %262, splat (float 2.500000e-01), !dbg !37
  br i1 %86, label %._crit_edge, label %264, !dbg !38

264:                                              ; preds = %85
  %265 = fsub <8 x float> %263, %103, !dbg !42
  %266 = extractelement <8 x float> %265, i64 0, !dbg !42
  %267 = fsub <8 x float> %263, %103, !dbg !42
  %268 = extractelement <8 x float> %267, i64 1, !dbg !42
  %269 = fsub <8 x float> %263, %103, !dbg !42
  %270 = extractelement <8 x float> %269, i64 2, !dbg !42
  %271 = fsub <8 x float> %263, %103, !dbg !42
  %272 = extractelement <8 x float> %271, i64 3, !dbg !42
  %273 = fsub <8 x float> %263, %103, !dbg !42
  %274 = extractelement <8 x float> %273, i64 4, !dbg !42
  %275 = fsub <8 x float> %263, %103, !dbg !42
  %276 = extractelement <8 x float> %275, i64 5, !dbg !42
  %277 = fsub <8 x float> %263, %103, !dbg !42
  %278 = extractelement <8 x float> %277, i64 6, !dbg !42
  %279 = fsub <8 x float> %263, %103, !dbg !42
  %280 = extractelement <8 x float> %279, i64 7, !dbg !42
  %281 = fadd float %87, 1.000000e+00, !dbg !43
  %282 = fadd float %88, 1.000000e+00, !dbg !43
  %283 = fadd float %89, 1.000000e+00, !dbg !43
  %284 = fadd float %90, 1.000000e+00, !dbg !43
  %285 = fadd float %91, 1.000000e+00, !dbg !43
  %286 = fadd float %92, 1.000000e+00, !dbg !43
  %287 = fadd float %93, 1.000000e+00, !dbg !43
  %288 = fadd float %94, 1.000000e+00, !dbg !43
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %281) #5, !dbg !44
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %282) #5, !dbg !44
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %283) #5, !dbg !44
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %284) #5, !dbg !44
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %285) #5, !dbg !44
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %286) #5, !dbg !44
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %287) #5, !dbg !44
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %288) #5, !dbg !44
  %297 = insertelement <8 x float> poison, float %289, i64 0, !dbg !45
  %298 = insertelement <8 x float> %297, float %290, i64 1, !dbg !45
  %299 = insertelement <8 x float> %298, float %291, i64 2, !dbg !45
  %300 = insertelement <8 x float> %299, float %292, i64 3, !dbg !45
  %301 = insertelement <8 x float> %300, float %293, i64 4, !dbg !45
  %302 = insertelement <8 x float> %301, float %294, i64 5, !dbg !45
  %303 = insertelement <8 x float> %302, float %295, i64 6, !dbg !45
  %304 = insertelement <8 x float> %303, float %296, i64 7, !dbg !45
  %305 = fadd <8 x float> %103, %304, !dbg !45
  %306 = fsub <8 x float> %263, %305, !dbg !46
  %307 = fsub <8 x float> %263, %305, !dbg !46
  %308 = fsub <8 x float> %263, %305, !dbg !46
  %309 = fsub <8 x float> %263, %305, !dbg !46
  %310 = fsub <8 x float> %263, %305, !dbg !46
  %311 = fsub <8 x float> %263, %305, !dbg !46
  %312 = fsub <8 x float> %263, %305, !dbg !46
  %313 = fsub <8 x float> %263, %305, !dbg !46
  %314 = fmul <8 x float> %265, %306, !dbg !47
  %315 = extractelement <8 x float> %314, i64 0, !dbg !47
  %316 = fmul <8 x float> %267, %307, !dbg !47
  %317 = extractelement <8 x float> %316, i64 1, !dbg !47
  %318 = fmul <8 x float> %269, %308, !dbg !47
  %319 = extractelement <8 x float> %318, i64 2, !dbg !47
  %320 = fmul <8 x float> %271, %309, !dbg !47
  %321 = extractelement <8 x float> %320, i64 3, !dbg !47
  %322 = fmul <8 x float> %273, %310, !dbg !47
  %323 = extractelement <8 x float> %322, i64 4, !dbg !47
  %324 = fmul <8 x float> %275, %311, !dbg !47
  %325 = extractelement <8 x float> %324, i64 5, !dbg !47
  %326 = fmul <8 x float> %277, %312, !dbg !47
  %327 = extractelement <8 x float> %326, i64 6, !dbg !47
  %328 = fmul <8 x float> %279, %313, !dbg !47
  %329 = extractelement <8 x float> %328, i64 7, !dbg !47
  %330 = fadd float %95, %315, !dbg !48
  %331 = fadd float %96, %317, !dbg !48
  %332 = fadd float %97, %319, !dbg !48
  %333 = fadd float %98, %321, !dbg !48
  %334 = fadd float %99, %323, !dbg !48
  %335 = fadd float %100, %325, !dbg !48
  %336 = fadd float %101, %327, !dbg !48
  %337 = fadd float %102, %329, !dbg !48
  br label %._crit_edge, !dbg !38

._crit_edge:                                      ; preds = %85, %264
  %338 = phi float [ %330, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %339 = phi float [ %331, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %340 = phi float [ %332, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %341 = phi float [ %333, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %342 = phi float [ %334, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %343 = phi float [ %335, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %344 = phi float [ %336, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %345 = phi float [ %337, %264 ], [ 0.000000e+00, %85 ], !dbg !41
  %346 = phi float [ %281, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %347 = phi float [ %282, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %348 = phi float [ %283, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %349 = phi float [ %284, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %350 = phi float [ %285, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %351 = phi float [ %286, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %352 = phi float [ %287, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %353 = phi float [ %288, %264 ], [ 1.000000e+00, %85 ], !dbg !41
  %354 = phi <8 x float> [ %305, %264 ], [ %263, %85 ]
  %355 = select <8 x i1> %84, <8 x float> %354, <8 x float> %103, !dbg !19
  %356 = select i1 %16, float %338, float %95, !dbg !49
  %357 = select i1 %16, float %339, float %96, !dbg !49
  %358 = select i1 %16, float %340, float %97, !dbg !49
  %359 = select i1 %16, float %341, float %98, !dbg !49
  %360 = select i1 %16, float %342, float %99, !dbg !49
  %361 = select i1 %16, float %343, float %100, !dbg !49
  %362 = select i1 %16, float %344, float %101, !dbg !49
  %363 = select i1 %16, float %345, float %102, !dbg !49
  %364 = select i1 %16, float %346, float %87, !dbg !50
  %365 = select i1 %16, float %347, float %88, !dbg !50
  %366 = select i1 %16, float %348, float %89, !dbg !50
  %367 = select i1 %16, float %349, float %90, !dbg !50
  %368 = select i1 %16, float %350, float %91, !dbg !50
  %369 = select i1 %16, float %351, float %92, !dbg !50
  %370 = select i1 %16, float %352, float %93, !dbg !50
  %371 = select i1 %16, float %353, float %94, !dbg !50
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %112, !dbg !51
  %gep128 = getelementptr float, ptr addrspace(1) %invariant.gep127, i64 %112, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %372 = extractelement <8 x float> %263, i64 0, !dbg !52
  %373 = bitcast float %372 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %373, i1 true) #5, !dbg !52
  %374 = extractelement <8 x float> %263, i64 1, !dbg !52
  %375 = bitcast float %374 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %375, i1 true) #5, !dbg !52
  %376 = extractelement <8 x float> %263, i64 2, !dbg !52
  %377 = bitcast float %376 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %377, i1 true) #5, !dbg !52
  %378 = extractelement <8 x float> %263, i64 3, !dbg !52
  %379 = bitcast float %378 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %379, i1 true) #5, !dbg !52
  %380 = extractelement <8 x float> %263, i64 4, !dbg !52
  %381 = bitcast float %380 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %381, i1 true) #5, !dbg !52
  %382 = extractelement <8 x float> %263, i64 5, !dbg !52
  %383 = bitcast float %382 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %383, i1 true) #5, !dbg !52
  %384 = extractelement <8 x float> %263, i64 6, !dbg !52
  %385 = bitcast float %384 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %385, i1 true) #5, !dbg !52
  %386 = extractelement <8 x float> %263, i64 7, !dbg !52
  %387 = bitcast float %386 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %387, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %388 = load <4 x i32>, ptr addrspace(3) %65, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %60, align 16, !dbg !52
  %.extract26 = load i32, ptr addrspace(3) %80, align 4, !dbg !52
  %.extract27 = load i32, ptr addrspace(3) %81, align 8, !dbg !52
  %.extract28 = load i32, ptr addrspace(3) %82, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %gep, i1 %17) #5, !dbg !52
  %.extract29 = extractelement <4 x i32> %388, i64 0, !dbg !52
  %.extract30 = extractelement <4 x i32> %388, i64 1, !dbg !52
  %.extract31 = extractelement <4 x i32> %388, i64 2, !dbg !52
  %.extract32 = extractelement <4 x i32> %388, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %gep128, i1 %18) #5, !dbg !52
  br i1 %86, label %85, label %389, !dbg !18

389:                                              ; preds = %._crit_edge
  %390 = lshr i32 %10, 5, !dbg !12
  %391 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %392 = extractelement <8 x float> %355, i64 0, !dbg !55
  %393 = extractelement <8 x float> %355, i64 1, !dbg !55
  %394 = fsub float %393, %392, !dbg !55
  %395 = fadd float %364, %365, !dbg !57
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !58
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float %395) #5, !dbg !59
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !60
  %399 = fmul float %394, %398, !dbg !61
  %400 = fadd float %392, %399, !dbg !62
  %401 = fadd float %356, %357, !dbg !63
  %402 = fmul float %394, %394, !dbg !64
  %403 = fmul float %402, %364, !dbg !65
  %404 = fmul float %403, %398, !dbg !66
  %405 = fadd float %401, %404, !dbg !67
  %406 = extractelement <8 x float> %355, i64 2, !dbg !55
  %407 = fsub float %406, %400, !dbg !55
  %408 = fadd float %366, %395, !dbg !57
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !58
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %408) #5, !dbg !59
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !60
  %412 = fmul float %411, %407, !dbg !61
  %413 = fadd float %400, %412, !dbg !62
  %414 = fadd float %358, %405, !dbg !63
  %415 = fmul float %407, %407, !dbg !64
  %416 = fmul float %395, %415, !dbg !65
  %417 = fmul float %411, %416, !dbg !66
  %418 = fadd float %414, %417, !dbg !67
  %419 = extractelement <8 x float> %355, i64 3, !dbg !55
  %420 = fsub float %419, %413, !dbg !55
  %421 = fadd float %367, %408, !dbg !57
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !58
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %421) #5, !dbg !59
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !60
  %425 = fmul float %424, %420, !dbg !61
  %426 = fadd float %413, %425, !dbg !62
  %427 = fadd float %359, %418, !dbg !63
  %428 = fmul float %420, %420, !dbg !64
  %429 = fmul float %408, %428, !dbg !65
  %430 = fmul float %424, %429, !dbg !66
  %431 = fadd float %427, %430, !dbg !67
  %432 = extractelement <8 x float> %355, i64 4, !dbg !55
  %433 = fsub float %432, %426, !dbg !55
  %434 = fadd float %368, %421, !dbg !57
  %435 = fcmp oeq float %434, 0.000000e+00, !dbg !58
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %434) #5, !dbg !59
  %437 = select i1 %435, float 0.000000e+00, float %436, !dbg !60
  %438 = fmul float %437, %433, !dbg !61
  %439 = fadd float %426, %438, !dbg !62
  %440 = fadd float %360, %431, !dbg !63
  %441 = fmul float %433, %433, !dbg !64
  %442 = fmul float %421, %441, !dbg !65
  %443 = fmul float %437, %442, !dbg !66
  %444 = fadd float %440, %443, !dbg !67
  %445 = extractelement <8 x float> %355, i64 5, !dbg !55
  %446 = fsub float %445, %439, !dbg !55
  %447 = fadd float %369, %434, !dbg !57
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !58
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float %447) #5, !dbg !59
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !60
  %451 = fmul float %450, %446, !dbg !61
  %452 = fadd float %439, %451, !dbg !62
  %453 = fadd float %361, %444, !dbg !63
  %454 = fmul float %446, %446, !dbg !64
  %455 = fmul float %434, %454, !dbg !65
  %456 = fmul float %450, %455, !dbg !66
  %457 = fadd float %453, %456, !dbg !67
  %458 = extractelement <8 x float> %355, i64 6, !dbg !55
  %459 = fsub float %458, %452, !dbg !55
  %460 = fadd float %370, %447, !dbg !57
  %461 = fcmp oeq float %460, 0.000000e+00, !dbg !58
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %460) #5, !dbg !59
  %463 = select i1 %461, float 0.000000e+00, float %462, !dbg !60
  %464 = fmul float %463, %459, !dbg !61
  %465 = fadd float %452, %464, !dbg !62
  %466 = fadd float %362, %457, !dbg !63
  %467 = fmul float %459, %459, !dbg !64
  %468 = fmul float %447, %467, !dbg !65
  %469 = fmul float %463, %468, !dbg !66
  %470 = fadd float %466, %469, !dbg !67
  %471 = extractelement <8 x float> %355, i64 7, !dbg !55
  %472 = fsub float %471, %465, !dbg !55
  %473 = fadd float %371, %460, !dbg !57
  %474 = fcmp oeq float %473, 0.000000e+00, !dbg !58
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float %473) #5, !dbg !59
  %476 = select i1 %474, float 0.000000e+00, float %475, !dbg !60
  %477 = fmul float %476, %472, !dbg !61
  %478 = fadd float %465, %477, !dbg !62
  %479 = fadd float %363, %470, !dbg !63
  %480 = fmul float %472, %472, !dbg !64
  %481 = fmul float %460, %480, !dbg !65
  %482 = fmul float %476, %481, !dbg !66
  %483 = fadd float %479, %482, !dbg !67
  %484 = bitcast float %478 to i32, !dbg !53
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 16, i32 31), !dbg !53
  %486 = bitcast i32 %485 to float, !dbg !53
  %487 = bitcast float %483 to i32, !dbg !53
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 16, i32 31), !dbg !53
  %489 = bitcast i32 %488 to float, !dbg !53
  %490 = bitcast float %473 to i32, !dbg !53
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 16, i32 31), !dbg !53
  %492 = bitcast i32 %491 to float, !dbg !53
  %493 = fsub float %486, %478, !dbg !55
  %494 = fadd float %473, %492, !dbg !57
  %495 = fcmp oeq float %494, 0.000000e+00, !dbg !58
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %492, float %494) #5, !dbg !59
  %497 = select i1 %495, float 0.000000e+00, float %496, !dbg !60
  %498 = fmul float %497, %493, !dbg !61
  %499 = fadd float %478, %498, !dbg !62
  %500 = fadd float %483, %489, !dbg !63
  %501 = fmul float %493, %493, !dbg !64
  %502 = fmul float %473, %501, !dbg !65
  %503 = fmul float %497, %502, !dbg !66
  %504 = fadd float %500, %503, !dbg !67
  %505 = bitcast float %499 to i32, !dbg !53
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 8, i32 31), !dbg !53
  %507 = bitcast i32 %506 to float, !dbg !53
  %508 = bitcast float %504 to i32, !dbg !53
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 8, i32 31), !dbg !53
  %510 = bitcast i32 %509 to float, !dbg !53
  %511 = bitcast float %494 to i32, !dbg !53
  %512 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 8, i32 31), !dbg !53
  %513 = bitcast i32 %512 to float, !dbg !53
  %514 = fsub float %507, %499, !dbg !55
  %515 = fadd float %494, %513, !dbg !57
  %516 = fcmp oeq float %515, 0.000000e+00, !dbg !58
  %517 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %513, float %515) #5, !dbg !59
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !60
  %519 = fmul float %518, %514, !dbg !61
  %520 = fadd float %499, %519, !dbg !62
  %521 = fadd float %504, %510, !dbg !63
  %522 = fmul float %514, %514, !dbg !64
  %523 = fmul float %494, %522, !dbg !65
  %524 = fmul float %518, %523, !dbg !66
  %525 = fadd float %521, %524, !dbg !67
  %526 = lshr i32 %391, 3, !dbg !53
  %527 = icmp samesign ult i32 %391, 8, !dbg !53
  %528 = and i32 %390, 15, !dbg !53
  %529 = shl nuw nsw i32 %11, 4, !dbg !53
  %530 = or disjoint i32 %529, %528, !dbg !53
  %531 = getelementptr float, ptr addrspace(3) @global_smem, i32 %530, !dbg !53
  %532 = bitcast float %520 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %532, i1 %527) #5, !dbg !53
  %533 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %530, !dbg !53
  %534 = bitcast float %525 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %533, <1 x i32> %534, i1 %527) #5, !dbg !53
  %535 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %530, !dbg !53
  %536 = bitcast float %515 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %535, <1 x i32> %536, i1 %527) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %537 = icmp slt i32 %10, 128, !dbg !53
  %538 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !53
  %539 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %538, i1 %537) #5, !dbg !53
  %540 = bitcast i32 %539 to float, !dbg !53
  %541 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %10, !dbg !53
  %542 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %541, i1 %537) #5, !dbg !53
  %543 = bitcast i32 %542 to float, !dbg !53
  %544 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %10, !dbg !53
  %545 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %544, i1 %537) #5, !dbg !53
  %546 = bitcast i32 %545 to float, !dbg !53
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 8, i32 31), !dbg !53
  %548 = bitcast i32 %547 to float, !dbg !53
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 8, i32 31), !dbg !53
  %550 = bitcast i32 %549 to float, !dbg !53
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 8, i32 31), !dbg !53
  %552 = bitcast i32 %551 to float, !dbg !53
  %553 = fsub float %548, %540, !dbg !55
  %554 = fadd float %546, %552, !dbg !57
  %555 = fcmp oeq float %554, 0.000000e+00, !dbg !58
  %556 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %552, float %554) #5, !dbg !59
  %557 = select i1 %555, float 0.000000e+00, float %556, !dbg !60
  %558 = fmul float %553, %557, !dbg !61
  %559 = fadd float %558, %540, !dbg !62
  %560 = fadd float %543, %550, !dbg !63
  %561 = fmul float %553, %553, !dbg !64
  %562 = fmul float %561, %546, !dbg !65
  %563 = fmul float %562, %557, !dbg !66
  %564 = fadd float %560, %563, !dbg !67
  %565 = bitcast float %559 to i32, !dbg !53
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 4, i32 31), !dbg !53
  %567 = bitcast i32 %566 to float, !dbg !53
  %568 = bitcast float %564 to i32, !dbg !53
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 4, i32 31), !dbg !53
  %570 = bitcast i32 %569 to float, !dbg !53
  %571 = bitcast float %554 to i32, !dbg !53
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !53
  %573 = bitcast i32 %572 to float, !dbg !53
  %574 = fsub float %567, %559, !dbg !55
  %575 = fadd float %554, %573, !dbg !57
  %576 = fcmp oeq float %575, 0.000000e+00, !dbg !58
  %577 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %573, float %575) #5, !dbg !59
  %578 = select i1 %576, float 0.000000e+00, float %577, !dbg !60
  %579 = fmul float %574, %578, !dbg !61
  %580 = fadd float %559, %579, !dbg !62
  %581 = fadd float %564, %570, !dbg !63
  %582 = fmul float %574, %574, !dbg !64
  %583 = fmul float %554, %582, !dbg !65
  %584 = fmul float %578, %583, !dbg !66
  %585 = fadd float %581, %584, !dbg !67
  %586 = bitcast float %580 to i32, !dbg !53
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 2, i32 31), !dbg !53
  %588 = bitcast i32 %587 to float, !dbg !53
  %589 = bitcast float %585 to i32, !dbg !53
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 2, i32 31), !dbg !53
  %591 = bitcast i32 %590 to float, !dbg !53
  %592 = bitcast float %575 to i32, !dbg !53
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 2, i32 31), !dbg !53
  %594 = bitcast i32 %593 to float, !dbg !53
  %595 = fsub float %588, %580, !dbg !55
  %596 = fadd float %575, %594, !dbg !57
  %597 = fcmp oeq float %596, 0.000000e+00, !dbg !58
  %598 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %594, float %596) #5, !dbg !59
  %599 = select i1 %597, float 0.000000e+00, float %598, !dbg !60
  %600 = fmul float %595, %599, !dbg !61
  %601 = fadd float %580, %600, !dbg !62
  %602 = fadd float %585, %591, !dbg !63
  %603 = fmul float %595, %595, !dbg !64
  %604 = fmul float %575, %603, !dbg !65
  %605 = fmul float %599, %604, !dbg !66
  %606 = fadd float %602, %605, !dbg !67
  %607 = bitcast float %601 to i32, !dbg !53
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 1, i32 31), !dbg !53
  %609 = bitcast i32 %608 to float, !dbg !53
  %610 = bitcast float %606 to i32, !dbg !53
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 1, i32 31), !dbg !53
  %612 = bitcast i32 %611 to float, !dbg !53
  %613 = bitcast float %596 to i32, !dbg !53
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 1, i32 31), !dbg !53
  %615 = bitcast i32 %614 to float, !dbg !53
  %616 = fsub float %609, %601, !dbg !55
  %617 = fadd float %596, %615, !dbg !57
  %618 = fcmp oeq float %617, 0.000000e+00, !dbg !58
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %615, float %617) #5, !dbg !59
  %620 = select i1 %618, float 0.000000e+00, float %619, !dbg !60
  %621 = fmul float %616, %620, !dbg !61
  %622 = fadd float %601, %621, !dbg !62
  %623 = fadd float %606, %612, !dbg !63
  %624 = fmul float %616, %616, !dbg !64
  %625 = fmul float %596, %624, !dbg !65
  %626 = fmul float %620, %625, !dbg !66
  %627 = fadd float %623, %626, !dbg !67
  %628 = and i32 %10, 15, !dbg !53
  %629 = icmp eq i32 %628, 0, !dbg !53
  %630 = and i1 %537, %629, !dbg !53
  %631 = bitcast float %622 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %538, <1 x i32> %631, i1 %630) #5, !dbg !53
  %632 = bitcast float %627 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %632, i1 %630) #5, !dbg !53
  %633 = bitcast float %617 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %544, <1 x i32> %633, i1 %630) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %634 = getelementptr float, ptr addrspace(3) @global_smem, i32 %529, !dbg !53
  %635 = load i32, ptr addrspace(3) %634, align 16, !dbg !53
  %636 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %529, !dbg !53
  %637 = load float, ptr addrspace(3) %636, align 16, !dbg !53
  %638 = sext i32 %13 to i64, !dbg !68
  %639 = getelementptr float, ptr addrspace(1) %2, i64 %638, !dbg !68
  %640 = shl nuw nsw i32 %528, 2, !dbg !69
  %641 = or disjoint i32 %640, %526, !dbg !69
  %642 = icmp eq i32 %641, 0, !dbg !69
  %643 = and i1 %642, %16, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %635, ptr addrspace(1) %639, i1 %643) #5, !dbg !69
  %644 = getelementptr float, ptr addrspace(1) %3, i64 %638, !dbg !70
  %645 = bitcast float %637 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %645, ptr addrspace(1) %644, i1 %643) #5, !dbg !71
  %646 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %637, float 1.024000e+03) #5, !dbg !72
  %647 = fadd float %646, 0x3EE4F8B580000000, !dbg !73
  %648 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i = icmp eq i32 %648, 0, !dbg !74
  br i1 %.not.i, label %651, label %649, !dbg !74

649:                                              ; preds = %389
  %650 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %647), !dbg !74
  br label %__nv_rsqrtf.exit, !dbg !74

651:                                              ; preds = %389
  %652 = tail call float @llvm.nvvm.rsqrt.approx.f(float %647), !dbg !74
  br label %__nv_rsqrtf.exit, !dbg !74

__nv_rsqrtf.exit:                                 ; preds = %649, %651
  %.0.i = phi float [ %650, %649 ], [ %652, %651 ], !dbg !74
  %653 = getelementptr float, ptr addrspace(1) %4, i64 %638, !dbg !75
  %654 = bitcast float %.0.i to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %654, ptr addrspace(1) %653, i1 %643) #5, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3pylpwulyboeq5xoewxptx33nxuxxmsninhp4hwmv5qvauxh6a.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_7", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 54, scope: !7)
!17 = !DILocation(line: 52, column: 39, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 49, column: 62, scope: !7)
!20 = !DILocation(line: 31, column: 27, scope: !7)
!21 = !DILocation(line: 36, column: 44, scope: !7)
!22 = !DILocation(line: 36, column: 49, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 53, scope: !7)
!26 = !DILocation(line: 37, column: 34, scope: !7)
!27 = !DILocation(line: 37, column: 63, scope: !7)
!28 = !DILocation(line: 38, column: 54, scope: !7)
!29 = !DILocation(line: 38, column: 34, scope: !7)
!30 = !DILocation(line: 38, column: 64, scope: !7)
!31 = !DILocation(line: 39, column: 54, scope: !7)
!32 = !DILocation(line: 39, column: 34, scope: !7)
!33 = !DILocation(line: 39, column: 64, scope: !7)
!34 = !DILocation(line: 40, column: 22, scope: !7)
!35 = !DILocation(line: 41, column: 22, scope: !7)
!36 = !DILocation(line: 42, column: 22, scope: !7)
!37 = !DILocation(line: 44, column: 22, scope: !7)
!38 = !DILocation(line: 178, column: 7, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 54, scope: !7)
!42 = !DILocation(line: 183, column: 24, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 184, column: 30, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 185, column: 34, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 185, column: 26, scope: !39, inlinedAt: !41)
!46 = !DILocation(line: 186, column: 39, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 186, column: 31, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 186, column: 22, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 50, column: 58, scope: !7)
!50 = !DILocation(line: 51, column: 66, scope: !7)
!51 = !DILocation(line: 52, column: 29, scope: !7)
!52 = !DILocation(line: 52, column: 50, scope: !7)
!53 = !DILocation(line: 204, column: 46, scope: !39, inlinedAt: !54)
!54 = !DILocation(line: 54, column: 44, scope: !7)
!55 = !DILocation(line: 192, column: 21, scope: !56, inlinedAt: !54)
!56 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!57 = !DILocation(line: 193, column: 28, scope: !56, inlinedAt: !54)
!58 = !DILocation(line: 194, column: 39, scope: !56, inlinedAt: !54)
!59 = !DILocation(line: 194, column: 60, scope: !56, inlinedAt: !54)
!60 = !DILocation(line: 194, column: 49, scope: !56, inlinedAt: !54)
!61 = !DILocation(line: 196, column: 25, scope: !56, inlinedAt: !54)
!62 = !DILocation(line: 196, column: 17, scope: !56, inlinedAt: !54)
!63 = !DILocation(line: 197, column: 15, scope: !56, inlinedAt: !54)
!64 = !DILocation(line: 197, column: 30, scope: !56, inlinedAt: !54)
!65 = !DILocation(line: 197, column: 38, scope: !56, inlinedAt: !54)
!66 = !DILocation(line: 197, column: 49, scope: !56, inlinedAt: !54)
!67 = !DILocation(line: 197, column: 22, scope: !56, inlinedAt: !54)
!68 = !DILocation(line: 59, column: 25, scope: !7)
!69 = !DILocation(line: 59, column: 37, scope: !7)
!70 = !DILocation(line: 60, column: 25, scope: !7)
!71 = !DILocation(line: 60, column: 37, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 64, column: 20, scope: !7)
!74 = !DILocation(line: 65, column: 28, scope: !7)
!75 = !DILocation(line: 66, column: 25, scope: !7)
!76 = !DILocation(line: 66, column: 37, scope: !7)
!77 = !DILocation(line: 66, column: 4, scope: !7)
