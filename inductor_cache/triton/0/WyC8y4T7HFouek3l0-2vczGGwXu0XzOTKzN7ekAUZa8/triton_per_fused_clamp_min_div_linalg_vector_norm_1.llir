; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_clamp_min_div_linalg_vector_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %12 = shl i32 %6, 6, !dbg !13
  %13 = or disjoint i32 %12, %11, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = fmul float %17, %17, !dbg !17
  %19 = select i1 %7, float %18, float 0.000000e+00, !dbg !18
  %20 = bitcast float %19 to i32, !dbg !19
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 16, i32 31), !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = fadd float %19, %22, !dbg !23
  %24 = bitcast float %23 to i32, !dbg !19
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 8, i32 31), !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = fadd float %23, %26, !dbg !23
  %28 = bitcast float %27 to i32, !dbg !19
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = fadd float %27, %30, !dbg !23
  %32 = bitcast float %31 to i32, !dbg !19
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 2, i32 31), !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = fadd float %31, %34, !dbg !23
  %36 = bitcast float %35 to i32, !dbg !19
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = fadd float %35, %38, !dbg !23
  %40 = icmp eq i32 %9, 0, !dbg !19
  %41 = and i32 %10, 1, !dbg !19
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i32 %41, !dbg !19
  %43 = bitcast float %39 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 %40) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %44 = icmp slt i32 %8, 2, !dbg !19
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !19
  %46 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %44) #5, !dbg !19
  %47 = bitcast i32 %46 to float, !dbg !19
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !19
  %49 = bitcast i32 %48 to float, !dbg !19
  %50 = fadd float %47, %49, !dbg !23
  %51 = and i32 %8, 1, !dbg !19
  %52 = icmp eq i32 %51, 0, !dbg !19
  %53 = and i1 %44, %52, !dbg !19
  %54 = bitcast float %50 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %54, i1 %53) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %55 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %.not.i = icmp eq i32 %56, 0, !dbg !25
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %.not1.i = icmp eq i32 %57, 0, !dbg !25
  br i1 %.not.i, label %63, label %58, !dbg !25

58:                                               ; preds = %5
  br i1 %.not1.i, label %61, label %59, !dbg !25

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

63:                                               ; preds = %5
  br i1 %.not1.i, label %66, label %64, !dbg !25

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !25
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %.not.i1 = icmp eq i32 %68, 0, !dbg !25
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %.not1.i4 = icmp eq i32 %69, 0, !dbg !25
  br i1 %.not.i1, label %75, label %70, !dbg !25

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !25

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !25

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #5, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

__nv_sqrtf.exit5:                                 ; preds = %71, %73, %76, %78
  %.0.i3 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !25
  %80 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !26
  %81 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !30
  %82 = or i1 %80, %81, !dbg !31
  %83 = select i1 %82, float %.0.i3, float 0x3D71979980000000, !dbg !32
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %17, float %83) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %85 = sext i32 %6 to i64, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !35
  %87 = icmp eq i32 %11, 0, !dbg !36
  %88 = bitcast float %.0.i to i32, !dbg !36
  %89 = and i1 %87, %7, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %86, i1 %89) #5, !dbg !36
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !37
  %91 = bitcast float %84 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %90, i1 %7) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckr2i2wemaj667fn5dvjzn5pyej3bak4wxscbogctsahddtcb7xc.py", directory: "inductor_cache/kr")
!4 = !{ptr @triton_per_fused_clamp_min_div_linalg_vector_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_clamp_min_div_linalg_vector_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_clamp_min_div_linalg_vector_norm_1", linkageName: "triton_per_fused_clamp_min_div_linalg_vector_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 34, column: 33, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = !DILocation(line: 35, column: 24, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!25 = !DILocation(line: 36, column: 26, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
