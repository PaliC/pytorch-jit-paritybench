; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_2(ptr addrspace(1) %0, double %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = or disjoint i32 %13, 1, !dbg !18
  %24 = or disjoint i32 %13, 5, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %12) #1, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %12) #1, !dbg !20
  %32 = bitcast i32 %31 to float, !dbg !20
  %33 = or disjoint i32 %13, 2, !dbg !21
  %34 = or disjoint i32 %13, 6, !dbg !21
  %35 = sext i32 %33 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %34 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %12) #1, !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = or disjoint i32 %13, 3, !dbg !24
  %44 = or disjoint i32 %13, 7, !dbg !24
  %45 = sext i32 %43 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %44 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #1, !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = fptrunc double %1 to float, !dbg !27
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %53) #1, !dbg !28
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %22, float %53) #1, !dbg !28
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %53) #1, !dbg !29
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %53) #1, !dbg !29
  %58 = fcmp ogt float %54, %56, !dbg !30
  %59 = fcmp ogt float %55, %57, !dbg !30
  %60 = fcmp uno float %54, 0.000000e+00, !dbg !34
  %61 = fcmp uno float %55, 0.000000e+00, !dbg !34
  %62 = or i1 %60, %58, !dbg !35
  %63 = or i1 %61, %59, !dbg !35
  %64 = select i1 %62, float %54, float %56, !dbg !36
  %65 = select i1 %63, float %55, float %57, !dbg !36
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %53) #1, !dbg !37
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %53) #1, !dbg !37
  %68 = fcmp ogt float %64, %66, !dbg !38
  %69 = fcmp ogt float %65, %67, !dbg !38
  %70 = fcmp uno float %64, 0.000000e+00, !dbg !40
  %71 = fcmp uno float %65, 0.000000e+00, !dbg !40
  %72 = or i1 %68, %70, !dbg !41
  %73 = or i1 %69, %71, !dbg !41
  %74 = select i1 %72, float %64, float %66, !dbg !42
  %75 = select i1 %73, float %65, float %67, !dbg !42
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %53) #1, !dbg !43
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %53) #1, !dbg !43
  %78 = fcmp ogt float %74, %76, !dbg !44
  %79 = fcmp ogt float %75, %77, !dbg !44
  %80 = fcmp uno float %74, 0.000000e+00, !dbg !46
  %81 = fcmp uno float %75, 0.000000e+00, !dbg !46
  %82 = or i1 %78, %80, !dbg !47
  %83 = or i1 %79, %81, !dbg !47
  %84 = select i1 %82, float %74, float %76, !dbg !48
  %85 = select i1 %83, float %75, float %77, !dbg !48
  %86 = fsub float %54, %84, !dbg !49
  %87 = fsub float %55, %85, !dbg !49
  %88 = fmul float %86, 0x3FF7154760000000, !dbg !50
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #1, !dbg !50
  %90 = fmul float %87, 0x3FF7154760000000, !dbg !50
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #1, !dbg !50
  %92 = fsub float %56, %84, !dbg !51
  %93 = fsub float %57, %85, !dbg !51
  %94 = fmul float %92, 0x3FF7154760000000, !dbg !52
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #1, !dbg !52
  %96 = fmul float %93, 0x3FF7154760000000, !dbg !52
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #1, !dbg !52
  %98 = fadd float %89, %95, !dbg !53
  %99 = fadd float %91, %97, !dbg !53
  %100 = fsub float %66, %84, !dbg !54
  %101 = fsub float %67, %85, !dbg !54
  %102 = fmul float %100, 0x3FF7154760000000, !dbg !55
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #1, !dbg !55
  %104 = fmul float %101, 0x3FF7154760000000, !dbg !55
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #1, !dbg !55
  %106 = fadd float %98, %103, !dbg !56
  %107 = fadd float %99, %105, !dbg !56
  %108 = fsub float %76, %84, !dbg !57
  %109 = fsub float %77, %85, !dbg !57
  %110 = fmul float %108, 0x3FF7154760000000, !dbg !58
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #1, !dbg !58
  %112 = fmul float %109, 0x3FF7154760000000, !dbg !58
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #1, !dbg !58
  %114 = fadd float %106, %111, !dbg !59
  %115 = fadd float %107, %113, !dbg !59
  %116 = sext i32 %11 to i64, !dbg !60
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !60
  %118 = bitcast float %84 to i32, !dbg !61
  %119 = bitcast float %85 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 %12) #1, !dbg !61
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !62
  %121 = bitcast float %114 to i32, !dbg !63
  %122 = bitcast float %115 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 %12) #1, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cshimhc6jd4aps5p5ca4g2tp3jpfwjktzmuij3ijs4i6tk5micur.py", directory: "inductor_cache/sh")
!4 = !{ptr @triton_poi_fused__softmax_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_2", linkageName: "triton_poi_fused__softmax_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 34, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 41, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 19, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 33, column: 40, scope: !7)
!34 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 34, column: 18, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !39)
!39 = !DILocation(line: 35, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !39)
!43 = !DILocation(line: 36, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !45)
!45 = !DILocation(line: 37, column: 41, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !45)
!49 = !DILocation(line: 38, column: 19, scope: !7)
!50 = !DILocation(line: 39, column: 24, scope: !7)
!51 = !DILocation(line: 40, column: 19, scope: !7)
!52 = !DILocation(line: 41, column: 24, scope: !7)
!53 = !DILocation(line: 42, column: 20, scope: !7)
!54 = !DILocation(line: 43, column: 19, scope: !7)
!55 = !DILocation(line: 44, column: 24, scope: !7)
!56 = !DILocation(line: 45, column: 20, scope: !7)
!57 = !DILocation(line: 46, column: 20, scope: !7)
!58 = !DILocation(line: 47, column: 24, scope: !7)
!59 = !DILocation(line: 48, column: 20, scope: !7)
!60 = !DILocation(line: 49, column: 25, scope: !7)
!61 = !DILocation(line: 49, column: 37, scope: !7)
!62 = !DILocation(line: 50, column: 25, scope: !7)
!63 = !DILocation(line: 50, column: 37, scope: !7)
!64 = !DILocation(line: 50, column: 4, scope: !7)
