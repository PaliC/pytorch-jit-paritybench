; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 14, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 4, !dbg !16
  %23 = or disjoint i32 %22, %16, !dbg !17
  %24 = or disjoint i32 %22, %14, !dbg !17
  %25 = icmp slt i32 %23, 16, !dbg !18
  %26 = icmp slt i32 %24, 16, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %27 = sdiv i32 %.frozen, 4, !dbg !19
  %28 = mul i32 %27, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %17, 4, !dbg !21
  %30 = add i32 %23, %29, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %19, %25, !dbg !24
  %34 = and i1 %20, %26, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #2, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = bitcast i32 %36 to float, !dbg !25
  %39 = bitcast i32 %37 to float, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !26
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %33) #2, !dbg !27
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !27
  %44 = bitcast i32 %42 to float, !dbg !27
  %45 = bitcast i32 %43 to float, !dbg !27
  %46 = fmul float %38, %44, !dbg !28
  %47 = fmul float %39, %45, !dbg !28
  %48 = fmul float %38, %38, !dbg !29
  %49 = fmul float %39, %39, !dbg !29
  %50 = fmul float %44, %44, !dbg !30
  %51 = fmul float %45, %45, !dbg !30
  %52 = shl i32 %24, 2, !dbg !31
  %53 = add i32 %52, %.decomposed, !dbg !32
  %54 = shl i32 %27, 6, !dbg !33
  %55 = add i32 %53, %54, !dbg !34
  %56 = sext i32 %55 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !35
  %58 = shl i32 %12, 5, !dbg !36
  %59 = and i32 %58, 224, !dbg !36
  %60 = or disjoint i32 %59, %14, !dbg !36
  %61 = and i32 %15, 254, !dbg !36
  %62 = lshr exact i32 %59, 1, !dbg !36
  %63 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %62, !dbg !36
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %60, !dbg !36
  %65 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !36
  %66 = or disjoint i32 %60, 16, !dbg !36
  %67 = lshr i32 %66, 3, !dbg !36
  %68 = and i32 %67, 30, !dbg !36
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !36
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %66, !dbg !36
  %71 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %72 = lshr i32 %15, 3, !dbg !36
  %73 = and i32 %72, 30, !dbg !36
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !36
  %75 = getelementptr inbounds float, ptr addrspace(3) %74, i32 %61, !dbg !36
  %.extract = load i32, ptr addrspace(3) %75, align 8, !dbg !36
  %76 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 4, !dbg !36
  %.extract2 = load i32, ptr addrspace(3) %76, align 4, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %57, i1 %34) #2, !dbg !36
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %78 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %78, i1 true) #2, !dbg !38
  %79 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %79, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.extract4 = load i32, ptr addrspace(3) %75, align 8, !dbg !38
  %.extract5 = load i32, ptr addrspace(3) %76, align 4, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract4, i32 %.extract5, ptr addrspace(1) %77, i1 %34) #2, !dbg !38
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %81 = bitcast float %46 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %81, i1 true) #2, !dbg !40
  %82 = bitcast float %47 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %82, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %.extract7 = load i32, ptr addrspace(3) %75, align 8, !dbg !40
  %.extract8 = load i32, ptr addrspace(3) %76, align 4, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract7, i32 %.extract8, ptr addrspace(1) %80, i1 %34) #2, !dbg !40
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %84 = bitcast float %48 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %84, i1 true) #2, !dbg !42
  %85 = bitcast float %49 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %85, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %.extract10 = load i32, ptr addrspace(3) %75, align 8, !dbg !42
  %.extract11 = load i32, ptr addrspace(3) %76, align 4, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract10, i32 %.extract11, ptr addrspace(1) %83, i1 %34) #2, !dbg !42
  %86 = getelementptr float, ptr addrspace(1) %6, i64 %56, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %87 = bitcast float %50 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %87, i1 true) #2, !dbg !44
  %88 = bitcast float %51 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %88, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %.extract13 = load i32, ptr addrspace(3) %75, align 8, !dbg !44
  %.extract14 = load i32, ptr addrspace(3) %76, align 4, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %86, i1 %34) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused_convolution_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_mul_0", linkageName: "triton_poi_fused_convolution_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 40, scope: !7)
!34 = !DILocation(line: 37, column: 37, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 51, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 51, scope: !7)
!39 = !DILocation(line: 39, column: 25, scope: !7)
!40 = !DILocation(line: 39, column: 51, scope: !7)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 40, column: 51, scope: !7)
!43 = !DILocation(line: 41, column: 25, scope: !7)
!44 = !DILocation(line: 41, column: 51, scope: !7)
!45 = !DILocation(line: 41, column: 4, scope: !7)
