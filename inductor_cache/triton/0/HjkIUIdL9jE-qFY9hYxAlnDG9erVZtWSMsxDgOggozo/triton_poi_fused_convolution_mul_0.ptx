//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_poi_fused_convolution_mul_0 // -- Begin function triton_poi_fused_convolution_mul_0
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_poi_fused_convolution_mul_0
.visible .entry triton_poi_fused_convolution_mul_0(
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_mul_0_param_0,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_mul_0_param_1,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_mul_0_param_2,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_mul_0_param_3,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_mul_0_param_4,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_mul_0_param_5,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_mul_0_param_6,
	.param .u32 triton_poi_fused_convolution_mul_0_param_7,
	.param .u32 triton_poi_fused_convolution_mul_0_param_8
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<18>;
	.reg .b32 	%r<78>;
	.reg .f32 	%f<11>;
	.reg .b64 	%rd<17>;
	.loc	1 19 0                          // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:19:0

// %bb.0:
	ld.param.u64 	%rd8, [triton_poi_fused_convolution_mul_0_param_0];
	ld.param.u64 	%rd9, [triton_poi_fused_convolution_mul_0_param_1];
$L__tmp0:
	.loc	1 22 28                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:22:28
	// begin inline asm
	mov.u32 %r1, %ctaid.y;
	// end inline asm
	.loc	1 22 33                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:22:33
	shl.b32 	%r37, %r1, 4;
	ld.param.u64 	%rd10, [triton_poi_fused_convolution_mul_0_param_2];
	ld.param.u64 	%rd11, [triton_poi_fused_convolution_mul_0_param_3];
	.loc	1 23 44                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:23:44
	mov.u32 	%r38, %tid.x;
	ld.param.u64 	%rd12, [triton_poi_fused_convolution_mul_0_param_4];
	bfe.u32 	%r39, %r38, 3, 4;
	ld.param.u64 	%rd13, [triton_poi_fused_convolution_mul_0_param_5];
	shl.b32 	%r40, %r38, 1;
	ld.param.u64 	%rd14, [triton_poi_fused_convolution_mul_0_param_6];
	and.b32  	%r41, %r40, 14;
	.loc	1 23 23                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:23:23
	or.b32  	%r42, %r37, %r39;
	or.b32  	%r43, %r37, %r41;
	.loc	1 25 28                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:25:28
	// begin inline asm
	mov.u32 %r2, %ctaid.x;
	// end inline asm
	.loc	1 25 33                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:25:33
	shl.b32 	%r44, %r2, 4;
	.loc	1 26 23                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:26:23
	or.b32  	%r45, %r44, %r41;
	or.b32  	%r46, %r44, %r39;
	.loc	1 31 19                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:31:19
	shr.s32 	%r48, %r43, 31;
	shr.u32 	%r49, %r48, 30;
	add.s32 	%r50, %r43, %r49;
	.loc	1 30 19                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:30:19
	and.b32  	%r51, %r50, -4;
	sub.s32 	%r52, %r43, %r51;
	.loc	1 32 38                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:32:38
	shl.b32 	%r53, %r42, 4;
	.loc	1 32 35                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:32:35
	add.s32 	%r54, %r45, %r53;
	.loc	1 32 30                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:32:30
	mul.wide.s32 	%rd15, %r54, 4;
	add.s64 	%rd1, %rd8, %rd15;
	.loc	1 32 51                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:32:51
	max.s32 	%r55, %r42, %r45;
	setp.lt.s32 	%p2, %r55, 16;
	max.s32 	%r56, %r43, %r46;
	setp.lt.s32 	%p8, %r56, 16;
	.loc	1 32 43                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:32:43
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r10, 0x0;
	@%p2 ld.global.v2.b32 { %r8, %r10 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	%f1, %r8;
	mov.b32 	%f2, %r10;
	.loc	1 33 30                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:33:30
	add.s64 	%rd2, %rd9, %rd15;
	.loc	1 33 43                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:33:43
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r16, 0x0;
	@%p2 ld.global.v2.b32 { %r14, %r16 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f3, %r14;
	mov.b32 	%f4, %r16;
	.loc	1 34 18                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:34:18
	mul.f32 	%f5, %f1, %f3;
	mul.f32 	%f6, %f2, %f4;
	.loc	1 35 18                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:35:18
	mul.f32 	%f7, %f1, %f1;
	mul.f32 	%f8, %f2, %f2;
	.loc	1 36 18                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:36:18
	mul.f32 	%f9, %f3, %f3;
	mul.f32 	%f10, %f4, %f4;
	.loc	1 37 32                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:37:32
	shl.b32 	%r57, %r46, 2;
	.loc	1 37 30                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:37:30
	add.s32 	%r58, %r57, %r52;
	.loc	1 37 40                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:37:40
	shl.b32 	%r59, %r50, 4;
	and.b32  	%r60, %r59, -64;
	.loc	1 37 37                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:37:37
	add.s32 	%r61, %r58, %r60;
	.loc	1 37 25                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:37:25
	mul.wide.s32 	%rd16, %r61, 4;
	add.s64 	%rd3, %rd10, %rd16;
	.loc	1 37 51                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:37:51
	shl.b32 	%r62, %r38, 5;
	and.b32  	%r63, %r62, 224;
	or.b32  	%r64, %r63, %r39;
	shr.u32 	%r65, %r63, 1;
	mov.u32 	%r66, global_smem;
	add.s32 	%r67, %r66, %r65;
	shl.b32 	%r68, %r64, 2;
	add.s32 	%r7, %r67, %r68;
	mov.pred 	%p3, -1;
	// begin inline asm
	@%p3 st.shared.b32 [ %r7 + 0 ], %r8;
	// end inline asm
	or.b32  	%r69, %r63, 16;
	shr.u32 	%r70, %r69, 1;
	add.s32 	%r71, %r66, %r70;
	add.s32 	%r72, %r71, %r68;
	add.s32 	%r9, %r72, 64;
	// begin inline asm
	@%p3 st.shared.b32 [ %r9 + 0 ], %r10;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r73, %r38, 120;
	add.s32 	%r74, %r66, %r73;
	shl.b32 	%r75, %r38, 3;
	and.b32  	%r76, %r75, 1016;
	add.s32 	%r77, %r74, %r76;
	ld.shared.v2.u32 	{%r11, %r12}, [%r77];
	// begin inline asm
	@%p8 st.global.v2.b32 [ %rd3 + 0 ], { %r11, %r12 };
	// end inline asm
	.loc	1 38 25                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:38:25
	add.s64 	%rd4, %rd11, %rd16;
	.loc	1 38 51                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:38:51
	bar.sync 	0;
	// begin inline asm
	@%p3 st.shared.b32 [ %r7 + 0 ], %r14;
	// end inline asm
	// begin inline asm
	@%p3 st.shared.b32 [ %r9 + 0 ], %r16;
	// end inline asm
	bar.sync 	0;
	ld.shared.v2.u32 	{%r17, %r18}, [%r77];
	// begin inline asm
	@%p8 st.global.v2.b32 [ %rd4 + 0 ], { %r17, %r18 };
	// end inline asm
	.loc	1 39 25                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:39:25
	add.s64 	%rd5, %rd12, %rd16;
	.loc	1 39 51                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:39:51
	bar.sync 	0;
	mov.b32 	%r20, %f5;
	// begin inline asm
	@%p3 st.shared.b32 [ %r7 + 0 ], %r20;
	// end inline asm
	mov.b32 	%r22, %f6;
	// begin inline asm
	@%p3 st.shared.b32 [ %r9 + 0 ], %r22;
	// end inline asm
	bar.sync 	0;
	ld.shared.v2.u32 	{%r23, %r24}, [%r77];
	// begin inline asm
	@%p8 st.global.v2.b32 [ %rd5 + 0 ], { %r23, %r24 };
	// end inline asm
	.loc	1 40 25                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:40:25
	add.s64 	%rd6, %rd13, %rd16;
	.loc	1 40 51                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:40:51
	bar.sync 	0;
	mov.b32 	%r26, %f7;
	// begin inline asm
	@%p3 st.shared.b32 [ %r7 + 0 ], %r26;
	// end inline asm
	mov.b32 	%r28, %f8;
	// begin inline asm
	@%p3 st.shared.b32 [ %r9 + 0 ], %r28;
	// end inline asm
	bar.sync 	0;
	ld.shared.v2.u32 	{%r29, %r30}, [%r77];
	// begin inline asm
	@%p8 st.global.v2.b32 [ %rd6 + 0 ], { %r29, %r30 };
	// end inline asm
	.loc	1 41 25                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:41:25
	add.s64 	%rd7, %rd14, %rd16;
	.loc	1 41 51                         // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:41:51
	bar.sync 	0;
	mov.b32 	%r32, %f9;
	// begin inline asm
	@%p3 st.shared.b32 [ %r7 + 0 ], %r32;
	// end inline asm
	mov.b32 	%r34, %f10;
	// begin inline asm
	@%p3 st.shared.b32 [ %r9 + 0 ], %r34;
	// end inline asm
	bar.sync 	0;
	ld.shared.v2.u32 	{%r35, %r36}, [%r77];
	// begin inline asm
	@%p8 st.global.v2.b32 [ %rd7 + 0 ], { %r35, %r36 };
	// end inline asm
	.loc	1 41 4                          // ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py:41:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/k7/ck7puy6axkf25sf5rgwfawhaahf4bbuhv6cuakgjvb7qul3k5cl3.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 95                                 // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x58 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 107
.b8 55
.b8 112
.b8 117
.b8 121
.b8 54
.b8 97
.b8 120
.b8 107
.b8 102
.b8 50
.b8 53
.b8 115
.b8 102
.b8 53
.b8 114
.b8 103
.b8 119
.b8 102
.b8 97
.b8 119
.b8 104
.b8 97
.b8 97
.b8 104
.b8 102
.b8 52
.b8 98
.b8 98
.b8 117
.b8 104
.b8 118
.b8 54
.b8 99
.b8 117
.b8 97
.b8 107
.b8 103
.b8 106
.b8 118
.b8 98
.b8 55
.b8 113
.b8 117
.b8 108
.b8 51
.b8 107
.b8 53
.b8 99
.b8 108
.b8 51
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 107
.b8 55
.b8 0
	}
	.section	.debug_macinfo	{	}
