; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 30, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 16, !dbg !13
  %16 = icmp slt i32 %13, 152, !dbg !14
  %17 = icmp slt i32 %14, 152, !dbg !14
  %18 = icmp slt i32 %15, 152, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = lshr i32 %8, 4, !dbg !17
  %22 = and i32 %21, 7, !dbg !17
  %23 = shl i32 %8, 2, !dbg !17
  %24 = and i32 %23, 28, !dbg !17
  %25 = or disjoint i32 %20, %22, !dbg !18
  %26 = or disjoint i32 %25, 8, !dbg !18
  %27 = or disjoint i32 %25, 16, !dbg !18
  %28 = or disjoint i32 %25, 24, !dbg !18
  %29 = or disjoint i32 %20, %24, !dbg !18
  %30 = icmp slt i32 %25, 64, !dbg !19
  %31 = icmp slt i32 %26, 64, !dbg !19
  %32 = icmp slt i32 %27, 64, !dbg !19
  %33 = icmp slt i32 %28, 64, !dbg !19
  %34 = icmp slt i32 %29, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %35 = sdiv i32 %.frozen, 38, !dbg !20
  %36 = mul i32 %35, 38, !dbg !21
  %.decomposed = sub i32 %.frozen, %36, !dbg !21
  %37 = mul i32 %25, 38, !dbg !22
  %38 = mul i32 %26, 38, !dbg !22
  %39 = mul i32 %27, 38, !dbg !22
  %40 = mul i32 %28, 38, !dbg !22
  %41 = mul i32 %35, 2432, !dbg !23
  %42 = add i32 %41, %.decomposed, !dbg !24
  %43 = add i32 %42, %37, !dbg !25
  %44 = add i32 %42, %38, !dbg !25
  %45 = add i32 %42, %39, !dbg !25
  %46 = add i32 %42, %40, !dbg !25
  %47 = sext i32 %43 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %44 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %45 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = sext i32 %46 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = and i1 %16, %30, !dbg !27
  %56 = and i1 %31, %16, !dbg !27
  %57 = and i1 %32, %16, !dbg !27
  %58 = and i1 %33, %16, !dbg !27
  %59 = and i1 %17, %34, !dbg !27
  %60 = and i1 %18, %34, !dbg !27
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %55) #2, !dbg !28
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !28
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !28
  %64 = bitcast i32 %62 to float, !dbg !28
  %65 = bitcast i32 %63 to float, !dbg !28
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %56) #2, !dbg !28
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !28
  %69 = bitcast i32 %67 to float, !dbg !28
  %70 = bitcast i32 %68 to float, !dbg !28
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %57) #2, !dbg !28
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !28
  %74 = bitcast i32 %72 to float, !dbg !28
  %75 = bitcast i32 %73 to float, !dbg !28
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %58) #2, !dbg !28
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !28
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !28
  %79 = bitcast i32 %77 to float, !dbg !28
  %80 = bitcast i32 %78 to float, !dbg !28
  %81 = sext i32 %.decomposed to i64, !dbg !29
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !29
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %16) #2, !dbg !30
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !30
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !30
  %86 = bitcast i32 %84 to float, !dbg !30
  %87 = bitcast i32 %85 to float, !dbg !30
  %88 = fadd float %64, %86, !dbg !31
  %89 = fadd float %65, %87, !dbg !31
  %90 = fadd float %69, %86, !dbg !31
  %91 = fadd float %70, %87, !dbg !31
  %92 = fadd float %74, %86, !dbg !31
  %93 = fadd float %75, %87, !dbg !31
  %94 = fadd float %79, %86, !dbg !31
  %95 = fadd float %80, %87, !dbg !31
  %96 = shl i32 %14, 6, !dbg !32
  %97 = shl i32 %15, 6, !dbg !32
  %98 = add i32 %29, %96, !dbg !33
  %99 = add i32 %29, %97, !dbg !33
  %100 = sext i32 %98 to i64, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !34
  %102 = sext i32 %99 to i64, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !34
  %104 = shl i32 %8, 6, !dbg !35
  %105 = and i32 %104, 960, !dbg !35
  %106 = or disjoint i32 %105, %22, !dbg !35
  %107 = and i32 %23, 508, !dbg !35
  %108 = lshr exact i32 %105, 5, !dbg !35
  %109 = add nuw nsw i32 %108, %106, !dbg !35
  %110 = zext nneg i32 %109 to i64, !dbg !35
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !35
  %112 = bitcast float %88 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !35
  %113 = or disjoint i32 %106, 32, !dbg !35
  %114 = lshr i32 %113, 5, !dbg !35
  %115 = add nuw nsw i32 %114, %113, !dbg !35
  %116 = zext nneg i32 %115 to i64, !dbg !35
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %116, !dbg !35
  %118 = bitcast float %89 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !35
  %119 = or disjoint i32 %106, 8, !dbg !35
  %120 = add nuw nsw i32 %119, %108, !dbg !35
  %121 = zext nneg i32 %120 to i64, !dbg !35
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !35
  %123 = bitcast float %90 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !35
  %124 = or disjoint i32 %106, 40, !dbg !35
  %125 = lshr i32 %124, 5, !dbg !35
  %126 = add nuw nsw i32 %125, %124, !dbg !35
  %127 = zext nneg i32 %126 to i64, !dbg !35
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !35
  %129 = bitcast float %91 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !35
  %130 = or disjoint i32 %106, 16, !dbg !35
  %131 = add nuw nsw i32 %130, %108, !dbg !35
  %132 = zext nneg i32 %131 to i64, !dbg !35
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !35
  %134 = bitcast float %92 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !35
  %135 = or disjoint i32 %106, 48, !dbg !35
  %136 = lshr i32 %135, 5, !dbg !35
  %137 = add nuw nsw i32 %136, %135, !dbg !35
  %138 = zext nneg i32 %137 to i64, !dbg !35
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !35
  %140 = bitcast float %93 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !35
  %141 = or disjoint i32 %106, 24, !dbg !35
  %142 = add nuw nsw i32 %141, %108, !dbg !35
  %143 = zext nneg i32 %142 to i64, !dbg !35
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %143, !dbg !35
  %145 = bitcast float %94 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !35
  %146 = or disjoint i32 %106, 56, !dbg !35
  %147 = lshr i32 %146, 5, !dbg !35
  %148 = add nuw nsw i32 %147, %146, !dbg !35
  %149 = zext nneg i32 %148 to i64, !dbg !35
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !35
  %151 = bitcast float %95 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %152 = lshr i32 %107, 5, !dbg !35
  %153 = add nuw nsw i32 %152, %107, !dbg !35
  %154 = zext nneg i32 %153 to i64, !dbg !35
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !35
  %156 = load i32, ptr addrspace(3) %155, align 4, !dbg !35
  %157 = or disjoint i32 %107, 1, !dbg !35
  %158 = add nuw nsw i32 %157, %152, !dbg !35
  %159 = zext nneg i32 %158 to i64, !dbg !35
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !35
  %161 = load i32, ptr addrspace(3) %160, align 4, !dbg !35
  %162 = or disjoint i32 %107, 2, !dbg !35
  %163 = add nuw nsw i32 %162, %152, !dbg !35
  %164 = zext nneg i32 %163 to i64, !dbg !35
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !35
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !35
  %167 = or disjoint i32 %107, 3, !dbg !35
  %168 = add nuw nsw i32 %167, %152, !dbg !35
  %169 = zext nneg i32 %168 to i64, !dbg !35
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !35
  %171 = load i32, ptr addrspace(3) %170, align 4, !dbg !35
  %172 = or disjoint i32 %107, 512, !dbg !35
  %173 = lshr i32 %172, 5, !dbg !35
  %174 = add nuw nsw i32 %173, %172, !dbg !35
  %175 = zext nneg i32 %174 to i64, !dbg !35
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !35
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !35
  %178 = or disjoint i32 %107, 513, !dbg !35
  %179 = lshr i32 %178, 5, !dbg !35
  %180 = add nuw nsw i32 %179, %178, !dbg !35
  %181 = zext nneg i32 %180 to i64, !dbg !35
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %181, !dbg !35
  %183 = load i32, ptr addrspace(3) %182, align 4, !dbg !35
  %184 = or disjoint i32 %107, 514, !dbg !35
  %185 = lshr i32 %184, 5, !dbg !35
  %186 = add nuw nsw i32 %185, %184, !dbg !35
  %187 = zext nneg i32 %186 to i64, !dbg !35
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %187, !dbg !35
  %189 = load i32, ptr addrspace(3) %188, align 4, !dbg !35
  %190 = or disjoint i32 %107, 515, !dbg !35
  %191 = lshr i32 %190, 5, !dbg !35
  %192 = add nuw nsw i32 %191, %190, !dbg !35
  %193 = zext nneg i32 %192 to i64, !dbg !35
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %193, !dbg !35
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %161, i32 %166, i32 %171, ptr addrspace(1) %101, i1 %59) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %183, i32 %189, i32 %195, ptr addrspace(1) %103, i1 %60) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccluitnl5eonqbfpdnugbouju34owaucfc5gay45sqpkr2uwjry2.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_convolution_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_15", linkageName: "triton_poi_fused_convolution_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 33, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 44, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
