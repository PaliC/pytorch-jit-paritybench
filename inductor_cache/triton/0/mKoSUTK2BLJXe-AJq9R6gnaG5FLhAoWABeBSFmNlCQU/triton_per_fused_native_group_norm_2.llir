; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 1020, !dbg !11
  %13 = shl i32 %7, 10, !dbg !12
  %14 = or disjoint i32 %13, %12, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #5, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = bitcast i32 %21 to float, !dbg !15
  %26 = fadd float %22, %23, !dbg !16
  %27 = fadd float %26, %24, !dbg !16
  %28 = fadd float %27, %25, !dbg !16
  %29 = bitcast float %28 to i32, !dbg !21
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 16, i32 31), !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = fadd float %28, %31, !dbg !16
  %33 = bitcast float %32 to i32, !dbg !21
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 8, i32 31), !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = fadd float %32, %35, !dbg !16
  %37 = bitcast float %36 to i32, !dbg !21
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !21
  %39 = bitcast i32 %38 to float, !dbg !21
  %40 = fadd float %36, %39, !dbg !16
  %41 = bitcast float %40 to i32, !dbg !21
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = fadd float %40, %43, !dbg !16
  %45 = bitcast float %44 to i32, !dbg !21
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = fadd float %44, %47, !dbg !16
  %49 = icmp eq i32 %9, 0, !dbg !21
  %50 = and i32 %10, 7, !dbg !21
  %51 = zext nneg i32 %50 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !21
  %53 = bitcast float %48 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 %49) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %54 = icmp slt i32 %8, 8, !dbg !21
  %55 = sext i32 %8 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i64 %55, !dbg !21
  %57 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %56, i1 %54) #5, !dbg !21
  %58 = bitcast i32 %57 to float, !dbg !21
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !21
  %60 = bitcast i32 %59 to float, !dbg !21
  %61 = fadd float %58, %60, !dbg !16
  %62 = bitcast float %61 to i32, !dbg !21
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !21
  %64 = bitcast i32 %63 to float, !dbg !21
  %65 = fadd float %61, %64, !dbg !16
  %66 = bitcast float %65 to i32, !dbg !21
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !21
  %68 = bitcast i32 %67 to float, !dbg !21
  %69 = fadd float %65, %68, !dbg !16
  %70 = and i32 %8, 7, !dbg !21
  %71 = icmp eq i32 %70, 0, !dbg !21
  %72 = and i1 %54, %71, !dbg !21
  %73 = bitcast float %69 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %73, i1 %72) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %74 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %75 = fadd float %74, 0.000000e+00, !dbg !22
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.024000e+03) #5, !dbg !26
  %77 = fsub float %22, %76, !dbg !27
  %78 = fsub float %23, %76, !dbg !27
  %79 = fsub float %24, %76, !dbg !27
  %80 = fsub float %25, %76, !dbg !27
  %81 = fmul float %77, %77, !dbg !28
  %82 = fmul float %78, %78, !dbg !28
  %83 = fmul float %79, %79, !dbg !28
  %84 = fmul float %80, %80, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %85 = fadd float %81, %82, !dbg !31
  %86 = fadd float %83, %85, !dbg !31
  %87 = fadd float %84, %86, !dbg !31
  %88 = bitcast float %87 to i32, !dbg !29
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = fadd float %87, %90, !dbg !31
  %92 = bitcast float %91 to i32, !dbg !29
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !29
  %94 = bitcast i32 %93 to float, !dbg !29
  %95 = fadd float %91, %94, !dbg !31
  %96 = bitcast float %95 to i32, !dbg !29
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = fadd float %95, %98, !dbg !31
  %100 = bitcast float %99 to i32, !dbg !29
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !29
  %102 = bitcast i32 %101 to float, !dbg !29
  %103 = fadd float %99, %102, !dbg !31
  %104 = bitcast float %103 to i32, !dbg !29
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = fadd float %103, %106, !dbg !31
  %108 = bitcast float %107 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %108, i1 %49) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %56, i1 %54) #5, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = fadd float %110, %112, !dbg !31
  %114 = bitcast float %113 to i32, !dbg !29
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = fadd float %113, %116, !dbg !31
  %118 = bitcast float %117 to i32, !dbg !29
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fadd float %117, %120, !dbg !31
  %122 = bitcast float %121 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %122, i1 %72) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %123 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %124 = fadd float %123, 0.000000e+00, !dbg !32
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 1.024000e+03) #5, !dbg !34
  %126 = fadd float %125, 0x3EE4F8B580000000, !dbg !35
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %127, 0, !dbg !36
  br i1 %.not.i, label %130, label %128, !dbg !36

128:                                              ; preds = %6
  %129 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

130:                                              ; preds = %6
  %131 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %128, %130
  %.0.i = phi float [ %129, %128 ], [ %131, %130 ], !dbg !36
  %132 = sext i32 %7 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !37
  %urem = and i32 %8, 255, !dbg !38
  %134 = icmp eq i32 %urem, 0, !dbg !38
  %135 = bitcast float %.0.i to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %133, i1 %134) #5, !dbg !38
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !39
  %137 = bitcast float %76 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %136, i1 %134) #5, !dbg !40
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !41
  %139 = bitcast float %124 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %138, i1 %134) #5, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnuxuloaarbzyviabwxvffteptu2ytesqx45x2eujnwo7sanz7rb.py", directory: "inductor_cache/nu")
!4 = !{ptr @triton_per_fused_native_group_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_2", linkageName: "triton_per_fused_native_group_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 40, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 45, scope: !7)
!16 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 35, column: 57, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !20)
!22 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 35, column: 44, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 19, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !30)
!30 = !DILocation(line: 42, column: 59, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !30)
!32 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 42, column: 45, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 28, scope: !7)
!37 = !DILocation(line: 48, column: 25, scope: !7)
!38 = !DILocation(line: 48, column: 37, scope: !7)
!39 = !DILocation(line: 49, column: 25, scope: !7)
!40 = !DILocation(line: 49, column: 36, scope: !7)
!41 = !DILocation(line: 50, column: 25, scope: !7)
!42 = !DILocation(line: 50, column: 37, scope: !7)
!43 = !DILocation(line: 50, column: 4, scope: !7)
