; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = lshr i32 %12, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = and i32 %12, 31, !dbg !12
  %18 = and i32 %12, 15, !dbg !12
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = or disjoint i32 %11, %16, !dbg !13
  %21 = or disjoint i32 %11, %18, !dbg !13
  %22 = icmp slt i32 %19, 256, !dbg !14
  %23 = icmp slt i32 %20, 256, !dbg !14
  %24 = icmp slt i32 %21, 256, !dbg !14
  %25 = shl i32 %12, 2, !dbg !15
  %26 = and i32 %25, 252, !dbg !15
  %27 = sdiv i32 %21, 8, !dbg !16
  %28 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !17
  %29 = insertelement <2 x i32> %28, i32 %21, i64 1, !dbg !17
  %30 = srem <2 x i32> %29, splat (i32 8), !dbg !17
  %31 = sdiv i32 %21, 64, !dbg !18
  %32 = icmp samesign ult i32 %26, 192, !dbg !19
  %33 = mul i32 %19, 192, !dbg !20
  %34 = mul i32 %20, 192, !dbg !20
  %35 = add i32 %33, %26, !dbg !21
  %36 = add i32 %34, %26, !dbg !21
  %37 = sext i32 %35 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %36 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = and i1 %32, %22, !dbg !23
  %42 = and i1 %32, %23, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #5, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #5, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = zext nneg i32 %26 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = fadd float %48, %68, !dbg !27
  %73 = fadd float %49, %69, !dbg !27
  %74 = fadd float %50, %70, !dbg !27
  %75 = fadd float %51, %71, !dbg !27
  %76 = fadd float %57, %68, !dbg !27
  %77 = fadd float %58, %69, !dbg !27
  %78 = fadd float %59, %70, !dbg !27
  %79 = fadd float %60, %71, !dbg !27
  %80 = select i1 %41, float %72, float 0.000000e+00, !dbg !28
  %81 = select i1 %41, float %73, float 0.000000e+00, !dbg !28
  %82 = select i1 %41, float %74, float 0.000000e+00, !dbg !28
  %83 = select i1 %41, float %75, float 0.000000e+00, !dbg !28
  %84 = select i1 %42, float %76, float 0.000000e+00, !dbg !28
  %85 = select i1 %42, float %77, float 0.000000e+00, !dbg !28
  %86 = select i1 %42, float %78, float 0.000000e+00, !dbg !28
  %87 = select i1 %42, float %79, float 0.000000e+00, !dbg !28
  %88 = select i1 %41, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %89 = select i1 %42, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %90 = bitcast float %72 to i32, !dbg !30
  %91 = bitcast float %73 to i32, !dbg !30
  %92 = bitcast float %74 to i32, !dbg !30
  %93 = bitcast float %75 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %90, i32 %91, i32 %92, i32 %93, ptr addrspace(1) %38, i1 %41) #5, !dbg !30
  %94 = bitcast float %76 to i32, !dbg !30
  %95 = bitcast float %77 to i32, !dbg !30
  %96 = bitcast float %78 to i32, !dbg !30
  %97 = bitcast float %79 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %94, i32 %95, i32 %96, i32 %97, ptr addrspace(1) %40, i1 %42) #5, !dbg !30
  %98 = fsub float %81, %80, !dbg !31
  %99 = select i1 %41, float 2.000000e+00, float 0.000000e+00, !dbg !36
  %100 = fcmp oeq float %99, 0.000000e+00, !dbg !37
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %99) #5, !dbg !38
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !39
  %103 = fmul float %102, %98, !dbg !40
  %104 = fadd float %80, %103, !dbg !41
  %105 = fmul float %98, %98, !dbg !42
  %106 = fmul float %88, %105, !dbg !43
  %107 = fmul float %102, %106, !dbg !44
  %108 = fadd float %107, 0.000000e+00, !dbg !45
  %109 = fsub float %82, %104, !dbg !31
  %110 = select i1 %41, float 3.000000e+00, float 0.000000e+00, !dbg !36
  %111 = fcmp oeq float %110, 0.000000e+00, !dbg !37
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %110) #5, !dbg !38
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !39
  %114 = fmul float %113, %109, !dbg !40
  %115 = fadd float %104, %114, !dbg !41
  %116 = fmul float %109, %109, !dbg !42
  %117 = fmul float %99, %116, !dbg !43
  %118 = fmul float %113, %117, !dbg !44
  %119 = fadd float %108, %118, !dbg !45
  %120 = fsub float %83, %115, !dbg !31
  %121 = select i1 %41, float 4.000000e+00, float 0.000000e+00, !dbg !36
  %122 = fcmp oeq float %121, 0.000000e+00, !dbg !37
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %121) #5, !dbg !38
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !39
  %125 = fmul float %124, %120, !dbg !40
  %126 = fadd float %115, %125, !dbg !41
  %127 = fmul float %120, %120, !dbg !42
  %128 = fmul float %110, %127, !dbg !43
  %129 = fmul float %124, %128, !dbg !44
  %130 = fadd float %119, %129, !dbg !45
  %131 = fsub float %85, %84, !dbg !31
  %132 = select i1 %42, float 2.000000e+00, float 0.000000e+00, !dbg !36
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !37
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %132) #5, !dbg !38
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !39
  %136 = fmul float %131, %135, !dbg !40
  %137 = fadd float %84, %136, !dbg !41
  %138 = fmul float %131, %131, !dbg !42
  %139 = fmul float %89, %138, !dbg !43
  %140 = fmul float %139, %135, !dbg !44
  %141 = fadd float %140, 0.000000e+00, !dbg !45
  %142 = fsub float %86, %137, !dbg !31
  %143 = select i1 %42, float 3.000000e+00, float 0.000000e+00, !dbg !36
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !37
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %143) #5, !dbg !38
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !39
  %147 = fmul float %146, %142, !dbg !40
  %148 = fadd float %137, %147, !dbg !41
  %149 = fmul float %142, %142, !dbg !42
  %150 = fmul float %132, %149, !dbg !43
  %151 = fmul float %146, %150, !dbg !44
  %152 = fadd float %141, %151, !dbg !45
  %153 = fsub float %87, %148, !dbg !31
  %154 = select i1 %42, float 4.000000e+00, float 0.000000e+00, !dbg !36
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !37
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %154) #5, !dbg !38
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !39
  %158 = fmul float %157, %153, !dbg !40
  %159 = fadd float %148, %158, !dbg !41
  %160 = fmul float %153, %153, !dbg !42
  %161 = fmul float %143, %160, !dbg !43
  %162 = fmul float %157, %161, !dbg !44
  %163 = fadd float %152, %162, !dbg !45
  %164 = bitcast float %126 to i32, !dbg !46
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 16, i32 31), !dbg !46
  %166 = bitcast i32 %165 to float, !dbg !46
  %167 = bitcast float %130 to i32, !dbg !46
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !46
  %169 = bitcast i32 %168 to float, !dbg !46
  %170 = bitcast float %121 to i32, !dbg !46
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 16, i32 31), !dbg !46
  %172 = bitcast i32 %171 to float, !dbg !46
  %173 = fsub float %166, %126, !dbg !31
  %174 = fadd float %121, %172, !dbg !36
  %175 = fcmp oeq float %174, 0.000000e+00, !dbg !37
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %174) #5, !dbg !38
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !39
  %178 = fmul float %173, %177, !dbg !40
  %179 = fadd float %126, %178, !dbg !41
  %180 = fadd float %130, %169, !dbg !47
  %181 = fmul float %173, %173, !dbg !42
  %182 = fmul float %121, %181, !dbg !43
  %183 = fmul float %177, %182, !dbg !44
  %184 = fadd float %180, %183, !dbg !45
  %185 = bitcast float %179 to i32, !dbg !46
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 8, i32 31), !dbg !46
  %187 = bitcast i32 %186 to float, !dbg !46
  %188 = bitcast float %184 to i32, !dbg !46
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !46
  %190 = bitcast i32 %189 to float, !dbg !46
  %191 = bitcast float %174 to i32, !dbg !46
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !46
  %193 = bitcast i32 %192 to float, !dbg !46
  %194 = fsub float %187, %179, !dbg !31
  %195 = fadd float %174, %193, !dbg !36
  %196 = fcmp oeq float %195, 0.000000e+00, !dbg !37
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %195) #5, !dbg !38
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !39
  %199 = fmul float %194, %198, !dbg !40
  %200 = fadd float %179, %199, !dbg !41
  %201 = fadd float %184, %190, !dbg !47
  %202 = fmul float %194, %194, !dbg !42
  %203 = fmul float %174, %202, !dbg !43
  %204 = fmul float %198, %203, !dbg !44
  %205 = fadd float %201, %204, !dbg !45
  %206 = bitcast float %200 to i32, !dbg !46
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !46
  %208 = bitcast i32 %207 to float, !dbg !46
  %209 = bitcast float %205 to i32, !dbg !46
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 4, i32 31), !dbg !46
  %211 = bitcast i32 %210 to float, !dbg !46
  %212 = bitcast float %195 to i32, !dbg !46
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !46
  %214 = bitcast i32 %213 to float, !dbg !46
  %215 = fsub float %208, %200, !dbg !31
  %216 = fadd float %195, %214, !dbg !36
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !37
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %216) #5, !dbg !38
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !39
  %220 = fmul float %215, %219, !dbg !40
  %221 = fadd float %200, %220, !dbg !41
  %222 = fadd float %205, %211, !dbg !47
  %223 = fmul float %215, %215, !dbg !42
  %224 = fmul float %195, %223, !dbg !43
  %225 = fmul float %219, %224, !dbg !44
  %226 = fadd float %222, %225, !dbg !45
  %227 = bitcast float %221 to i32, !dbg !46
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !46
  %229 = bitcast i32 %228 to float, !dbg !46
  %230 = bitcast float %226 to i32, !dbg !46
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !46
  %232 = bitcast i32 %231 to float, !dbg !46
  %233 = bitcast float %216 to i32, !dbg !46
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !46
  %235 = bitcast i32 %234 to float, !dbg !46
  %236 = fsub float %229, %221, !dbg !31
  %237 = fadd float %216, %235, !dbg !36
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !37
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %237) #5, !dbg !38
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !39
  %241 = fmul float %236, %240, !dbg !40
  %242 = fadd float %221, %241, !dbg !41
  %243 = fadd float %226, %232, !dbg !47
  %244 = fmul float %236, %236, !dbg !42
  %245 = fmul float %216, %244, !dbg !43
  %246 = fmul float %240, %245, !dbg !44
  %247 = fadd float %243, %246, !dbg !45
  %248 = bitcast float %242 to i32, !dbg !46
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 1, i32 31), !dbg !46
  %250 = bitcast i32 %249 to float, !dbg !46
  %251 = bitcast float %247 to i32, !dbg !46
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !46
  %253 = bitcast i32 %252 to float, !dbg !46
  %254 = bitcast float %237 to i32, !dbg !46
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !46
  %256 = bitcast i32 %255 to float, !dbg !46
  %257 = fsub float %250, %242, !dbg !31
  %258 = fadd float %237, %256, !dbg !36
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !37
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %258) #5, !dbg !38
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !39
  %262 = fmul float %257, %261, !dbg !40
  %263 = fadd float %242, %262, !dbg !41
  %264 = fadd float %247, %253, !dbg !47
  %265 = fmul float %257, %257, !dbg !42
  %266 = fmul float %237, %265, !dbg !43
  %267 = fmul float %261, %266, !dbg !44
  %268 = fadd float %264, %267, !dbg !45
  %269 = bitcast float %159 to i32, !dbg !46
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 16, i32 31), !dbg !46
  %271 = bitcast i32 %270 to float, !dbg !46
  %272 = bitcast float %163 to i32, !dbg !46
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 16, i32 31), !dbg !46
  %274 = bitcast i32 %273 to float, !dbg !46
  %275 = bitcast float %154 to i32, !dbg !46
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 16, i32 31), !dbg !46
  %277 = bitcast i32 %276 to float, !dbg !46
  %278 = fsub float %271, %159, !dbg !31
  %279 = fadd float %154, %277, !dbg !36
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !37
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %279) #5, !dbg !38
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !39
  %283 = fmul float %278, %282, !dbg !40
  %284 = fadd float %159, %283, !dbg !41
  %285 = fadd float %163, %274, !dbg !47
  %286 = fmul float %278, %278, !dbg !42
  %287 = fmul float %154, %286, !dbg !43
  %288 = fmul float %287, %282, !dbg !44
  %289 = fadd float %285, %288, !dbg !45
  %290 = bitcast float %284 to i32, !dbg !46
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 8, i32 31), !dbg !46
  %292 = bitcast i32 %291 to float, !dbg !46
  %293 = bitcast float %289 to i32, !dbg !46
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 8, i32 31), !dbg !46
  %295 = bitcast i32 %294 to float, !dbg !46
  %296 = bitcast float %279 to i32, !dbg !46
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 8, i32 31), !dbg !46
  %298 = bitcast i32 %297 to float, !dbg !46
  %299 = fsub float %292, %284, !dbg !31
  %300 = fadd float %279, %298, !dbg !36
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !37
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %300) #5, !dbg !38
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !39
  %304 = fmul float %299, %303, !dbg !40
  %305 = fadd float %284, %304, !dbg !41
  %306 = fadd float %289, %295, !dbg !47
  %307 = fmul float %299, %299, !dbg !42
  %308 = fmul float %279, %307, !dbg !43
  %309 = fmul float %303, %308, !dbg !44
  %310 = fadd float %306, %309, !dbg !45
  %311 = bitcast float %305 to i32, !dbg !46
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 4, i32 31), !dbg !46
  %313 = bitcast i32 %312 to float, !dbg !46
  %314 = bitcast float %310 to i32, !dbg !46
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 4, i32 31), !dbg !46
  %316 = bitcast i32 %315 to float, !dbg !46
  %317 = bitcast float %300 to i32, !dbg !46
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 4, i32 31), !dbg !46
  %319 = bitcast i32 %318 to float, !dbg !46
  %320 = fsub float %313, %305, !dbg !31
  %321 = fadd float %300, %319, !dbg !36
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !37
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %321) #5, !dbg !38
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !39
  %325 = fmul float %320, %324, !dbg !40
  %326 = fadd float %305, %325, !dbg !41
  %327 = fadd float %310, %316, !dbg !47
  %328 = fmul float %320, %320, !dbg !42
  %329 = fmul float %300, %328, !dbg !43
  %330 = fmul float %324, %329, !dbg !44
  %331 = fadd float %327, %330, !dbg !45
  %332 = bitcast float %326 to i32, !dbg !46
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !46
  %334 = bitcast i32 %333 to float, !dbg !46
  %335 = bitcast float %331 to i32, !dbg !46
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !46
  %337 = bitcast i32 %336 to float, !dbg !46
  %338 = bitcast float %321 to i32, !dbg !46
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !46
  %340 = bitcast i32 %339 to float, !dbg !46
  %341 = fsub float %334, %326, !dbg !31
  %342 = fadd float %321, %340, !dbg !36
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !37
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %342) #5, !dbg !38
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !39
  %346 = fmul float %341, %345, !dbg !40
  %347 = fadd float %326, %346, !dbg !41
  %348 = fadd float %331, %337, !dbg !47
  %349 = fmul float %341, %341, !dbg !42
  %350 = fmul float %321, %349, !dbg !43
  %351 = fmul float %345, %350, !dbg !44
  %352 = fadd float %348, %351, !dbg !45
  %353 = bitcast float %347 to i32, !dbg !46
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 1, i32 31), !dbg !46
  %355 = bitcast i32 %354 to float, !dbg !46
  %356 = bitcast float %352 to i32, !dbg !46
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !46
  %358 = bitcast i32 %357 to float, !dbg !46
  %359 = bitcast float %342 to i32, !dbg !46
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !46
  %361 = bitcast i32 %360 to float, !dbg !46
  %362 = fsub float %355, %347, !dbg !31
  %363 = fadd float %342, %361, !dbg !36
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !37
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #5, !dbg !38
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !39
  %367 = fmul float %362, %366, !dbg !40
  %368 = fadd float %347, %367, !dbg !41
  %369 = fadd float %352, %358, !dbg !47
  %370 = fmul float %362, %362, !dbg !42
  %371 = fmul float %342, %370, !dbg !43
  %372 = fmul float %366, %371, !dbg !44
  %373 = fadd float %369, %372, !dbg !45
  %374 = icmp eq i32 %17, 0, !dbg !46
  %375 = and i32 %13, 1, !dbg !46
  %376 = shl nuw nsw i32 %15, 1, !dbg !46
  %377 = or disjoint i32 %376, %375, !dbg !46
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !46
  %379 = bitcast float %263 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 %374) #5, !dbg !46
  %380 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %377, !dbg !46
  %381 = bitcast float %268 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 %374) #5, !dbg !46
  %382 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %377, !dbg !46
  %383 = bitcast float %258 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %383, i1 %374) #5, !dbg !46
  %384 = shl nuw nsw i32 %16, 1, !dbg !46
  %385 = or disjoint i32 %384, %375, !dbg !46
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %385, !dbg !46
  %387 = bitcast float %368 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 %374) #5, !dbg !46
  %388 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %385, !dbg !46
  %389 = bitcast float %373 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 %374) #5, !dbg !46
  %390 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %385, !dbg !46
  %391 = bitcast float %363 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 %374) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %392 = icmp slt i32 %12, 32, !dbg !46
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !46
  %394 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %393, i1 %392) #5, !dbg !46
  %395 = bitcast i32 %394 to float, !dbg !46
  %396 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !46
  %397 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %396, i1 %392) #5, !dbg !46
  %398 = bitcast i32 %397 to float, !dbg !46
  %399 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %12, !dbg !46
  %400 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %399, i1 %392) #5, !dbg !46
  %401 = bitcast i32 %400 to float, !dbg !46
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 1, i32 31), !dbg !46
  %403 = bitcast i32 %402 to float, !dbg !46
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 1, i32 31), !dbg !46
  %405 = bitcast i32 %404 to float, !dbg !46
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !46
  %407 = bitcast i32 %406 to float, !dbg !46
  %408 = fsub float %403, %395, !dbg !31
  %409 = fadd float %401, %407, !dbg !36
  %410 = fcmp oeq float %409, 0.000000e+00, !dbg !37
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %407, float %409) #5, !dbg !38
  %412 = select i1 %410, float 0.000000e+00, float %411, !dbg !39
  %413 = fmul float %408, %412, !dbg !40
  %414 = fadd float %413, %395, !dbg !41
  %415 = fadd float %398, %405, !dbg !47
  %416 = fmul float %408, %408, !dbg !42
  %417 = fmul float %416, %401, !dbg !43
  %418 = fmul float %417, %412, !dbg !44
  %419 = fadd float %415, %418, !dbg !45
  %420 = and i32 %12, 1, !dbg !46
  %421 = icmp eq i32 %420, 0, !dbg !46
  %422 = and i1 %392, %421, !dbg !46
  %423 = bitcast float %414 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %423, i1 %422) #5, !dbg !46
  %424 = bitcast float %419 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %424, i1 %422) #5, !dbg !46
  %425 = bitcast float %409 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %425, i1 %422) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %426 = getelementptr float, ptr addrspace(3) @global_smem, i32 %376, !dbg !46
  %427 = load float, ptr addrspace(3) %426, align 8, !dbg !46
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !46
  %429 = load float, ptr addrspace(3) %428, align 8, !dbg !46
  %430 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %376, !dbg !46
  %431 = load float, ptr addrspace(3) %430, align 8, !dbg !46
  %432 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %384, !dbg !46
  %433 = load float, ptr addrspace(3) %432, align 8, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !48
  %435 = bitcast float %427 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #5, !dbg !48
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !48
  %437 = bitcast float %429 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %438 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !48
  %439 = load i32, ptr addrspace(3) %438, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %440 = bitcast float %431 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %440, i1 true) #5, !dbg !49
  %441 = bitcast float %433 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %441, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %442 = load float, ptr addrspace(3) %438, align 4, !dbg !49
  %443 = extractelement <2 x i32> %30, i64 1, !dbg !50
  %444 = shl nsw i32 %443, 3, !dbg !50
  %445 = extractelement <2 x i32> %30, i64 0, !dbg !51
  %446 = add nsw i32 %445, %444, !dbg !51
  %447 = shl nsw i32 %31, 6, !dbg !52
  %448 = add i32 %446, %447, !dbg !53
  %449 = sext i32 %448 to i64, !dbg !54
  %450 = getelementptr float, ptr addrspace(1) %4, i64 %449, !dbg !54
  %451 = lshr i32 %17, 4, !dbg !55
  %452 = shl nuw nsw i32 %13, 1, !dbg !55
  %453 = and i32 %452, 30, !dbg !55
  %454 = or disjoint i32 %453, %451, !dbg !55
  %455 = icmp eq i32 %454, 0, !dbg !55
  %456 = and i1 %455, %24, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %439, ptr addrspace(1) %450, i1 %456) #5, !dbg !55
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %442, float 1.920000e+02) #5, !dbg !56
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %431, float 1.920000e+02) #5, !dbg !56
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float 1.920000e+02) #5, !dbg !56
  %460 = fadd float %457, 0x3EB0C6F7A0000000, !dbg !57
  %461 = fadd float %458, 0x3EB0C6F7A0000000, !dbg !57
  %462 = fadd float %459, 0x3EB0C6F7A0000000, !dbg !57
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %463, 0, !dbg !49
  br i1 %.not.i, label %466, label %464, !dbg !49

464:                                              ; preds = %9
  %465 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %460), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

466:                                              ; preds = %9
  %467 = tail call float @llvm.nvvm.rsqrt.approx.f(float %460), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %464, %466
  %.0.i = phi float [ %465, %464 ], [ %467, %466 ], !dbg !49
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i10 = icmp eq i32 %471, 0, !dbg !49
  br i1 %.not.i10, label %474, label %472, !dbg !49

472:                                              ; preds = %__nv_rsqrtf.exit
  %473 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %461), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

474:                                              ; preds = %__nv_rsqrtf.exit
  %475 = tail call float @llvm.nvvm.rsqrt.approx.f(float %461), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

__nv_rsqrtf.exit12:                               ; preds = %472, %474
  %.0.i11 = phi float [ %473, %472 ], [ %475, %474 ], !dbg !49
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i22 = icmp eq i32 %479, 0, !dbg !49
  br i1 %.not.i22, label %482, label %480, !dbg !49

480:                                              ; preds = %__nv_rsqrtf.exit12
  %481 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %462), !dbg !49
  br label %__nv_rsqrtf.exit24, !dbg !49

482:                                              ; preds = %__nv_rsqrtf.exit12
  %483 = tail call float @llvm.nvvm.rsqrt.approx.f(float %462), !dbg !49
  br label %__nv_rsqrtf.exit24, !dbg !49

__nv_rsqrtf.exit24:                               ; preds = %480, %482
  %.0.i23 = phi float [ %481, %480 ], [ %483, %482 ], !dbg !49
  %484 = getelementptr float, ptr addrspace(1) %5, i64 %449, !dbg !58
  %485 = bitcast float %.0.i to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %485, ptr addrspace(1) %484, i1 %456) #5, !dbg !59
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #5, !dbg !60
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !60
  %488 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !60
  %489 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !60
  %490 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !60
  %491 = bitcast i32 %487 to float, !dbg !60
  %492 = bitcast i32 %488 to float, !dbg !60
  %493 = bitcast i32 %489 to float, !dbg !60
  %494 = bitcast i32 %490 to float, !dbg !60
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #5, !dbg !60
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !60
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !60
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !60
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !60
  %500 = bitcast i32 %496 to float, !dbg !60
  %501 = bitcast i32 %497 to float, !dbg !60
  %502 = bitcast i32 %498 to float, !dbg !60
  %503 = bitcast i32 %499 to float, !dbg !60
  %504 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !61
  %505 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %504, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !62
  %506 = extractvalue { i32, i32, i32, i32 } %505, 0, !dbg !62
  %507 = extractvalue { i32, i32, i32, i32 } %505, 1, !dbg !62
  %508 = extractvalue { i32, i32, i32, i32 } %505, 2, !dbg !62
  %509 = extractvalue { i32, i32, i32, i32 } %505, 3, !dbg !62
  %510 = bitcast i32 %506 to float, !dbg !62
  %511 = bitcast i32 %507 to float, !dbg !62
  %512 = bitcast i32 %508 to float, !dbg !62
  %513 = bitcast i32 %509 to float, !dbg !62
  %514 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !63
  %515 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %514, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !64
  %516 = extractvalue { i32, i32, i32, i32 } %515, 0, !dbg !64
  %517 = extractvalue { i32, i32, i32, i32 } %515, 1, !dbg !64
  %518 = extractvalue { i32, i32, i32, i32 } %515, 2, !dbg !64
  %519 = extractvalue { i32, i32, i32, i32 } %515, 3, !dbg !64
  %520 = bitcast i32 %516 to float, !dbg !64
  %521 = bitcast i32 %517 to float, !dbg !64
  %522 = bitcast i32 %518 to float, !dbg !64
  %523 = bitcast i32 %519 to float, !dbg !64
  %524 = fsub float %491, %427, !dbg !65
  %525 = fsub float %492, %427, !dbg !65
  %526 = fsub float %493, %427, !dbg !65
  %527 = fsub float %494, %427, !dbg !65
  %528 = fsub float %500, %429, !dbg !65
  %529 = fsub float %501, %429, !dbg !65
  %530 = fsub float %502, %429, !dbg !65
  %531 = fsub float %503, %429, !dbg !65
  %532 = fmul float %.0.i11, %524, !dbg !66
  %533 = fmul float %.0.i11, %525, !dbg !66
  %534 = fmul float %.0.i11, %526, !dbg !66
  %535 = fmul float %.0.i11, %527, !dbg !66
  %536 = fmul float %.0.i23, %528, !dbg !66
  %537 = fmul float %.0.i23, %529, !dbg !66
  %538 = fmul float %.0.i23, %530, !dbg !66
  %539 = fmul float %.0.i23, %531, !dbg !66
  %540 = fmul float %532, %510, !dbg !67
  %541 = fmul float %533, %511, !dbg !67
  %542 = fmul float %534, %512, !dbg !67
  %543 = fmul float %535, %513, !dbg !67
  %544 = fmul float %536, %510, !dbg !67
  %545 = fmul float %537, %511, !dbg !67
  %546 = fmul float %538, %512, !dbg !67
  %547 = fmul float %539, %513, !dbg !67
  %548 = fadd float %540, %520, !dbg !68
  %549 = fadd float %541, %521, !dbg !68
  %550 = fadd float %542, %522, !dbg !68
  %551 = fadd float %543, %523, !dbg !68
  %552 = fadd float %544, %520, !dbg !68
  %553 = fadd float %545, %521, !dbg !68
  %554 = fadd float %546, %522, !dbg !68
  %555 = fadd float %547, %523, !dbg !68
  %556 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !69
  %557 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !69
  %558 = bitcast float %548 to i32, !dbg !70
  %559 = bitcast float %549 to i32, !dbg !70
  %560 = bitcast float %550 to i32, !dbg !70
  %561 = bitcast float %551 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %558, i32 %559, i32 %560, i32 %561, ptr addrspace(1) %556, i1 %41) #5, !dbg !70
  %562 = bitcast float %552 to i32, !dbg !70
  %563 = bitcast float %553 to i32, !dbg !70
  %564 = bitcast float %554 to i32, !dbg !70
  %565 = bitcast float %555 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %562, i32 %563, i32 %564, i32 %565, ptr addrspace(1) %557, i1 %42) #5, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ngepos6tyhoegx4agldkkaxh3ozy7ih6x7xbladud4npqoheos.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_12", linkageName: "triton_red_fused_convolution_native_layer_norm_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 25, scope: !7)
!20 = !DILocation(line: 37, column: 47, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 60, scope: !7)
!24 = !DILocation(line: 37, column: 52, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 44, column: 60, scope: !7)
!29 = !DILocation(line: 46, column: 64, scope: !7)
!30 = !DILocation(line: 47, column: 52, scope: !7)
!31 = !DILocation(line: 192, column: 21, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 49, column: 41, scope: !7)
!36 = !DILocation(line: 193, column: 28, scope: !32, inlinedAt: !35)
!37 = !DILocation(line: 194, column: 39, scope: !32, inlinedAt: !35)
!38 = !DILocation(line: 194, column: 60, scope: !32, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 49, scope: !32, inlinedAt: !35)
!40 = !DILocation(line: 196, column: 25, scope: !32, inlinedAt: !35)
!41 = !DILocation(line: 196, column: 17, scope: !32, inlinedAt: !35)
!42 = !DILocation(line: 197, column: 30, scope: !32, inlinedAt: !35)
!43 = !DILocation(line: 197, column: 38, scope: !32, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 49, scope: !32, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 22, scope: !32, inlinedAt: !35)
!46 = !DILocation(line: 204, column: 46, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 197, column: 15, scope: !32, inlinedAt: !35)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 54, column: 32, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 40, scope: !7)
!53 = !DILocation(line: 54, column: 37, scope: !7)
!54 = !DILocation(line: 54, column: 25, scope: !7)
!55 = !DILocation(line: 54, column: 51, scope: !7)
!56 = !DILocation(line: 56, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 19, scope: !7)
!58 = !DILocation(line: 60, column: 25, scope: !7)
!59 = !DILocation(line: 60, column: 52, scope: !7)
!60 = !DILocation(line: 65, column: 53, scope: !7)
!61 = !DILocation(line: 66, column: 35, scope: !7)
!62 = !DILocation(line: 66, column: 40, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 68, column: 24, scope: !7)
!66 = !DILocation(line: 69, column: 24, scope: !7)
!67 = !DILocation(line: 70, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 29, scope: !7)
!70 = !DILocation(line: 72, column: 50, scope: !7)
!71 = !DILocation(line: 61, column: 4, scope: !7)
