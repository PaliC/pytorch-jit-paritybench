; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen, 104, !dbg !14
  %18 = mul i32 %17, 104, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %16, 104, !dbg !15
  %20 = srem i32 %17, 256, !dbg !16
  %21 = sdiv i32 %15, 26624, !dbg !17
  %22 = icmp slt i32 %.decomposed, 52, !dbg !18
  %23 = shl nsw i32 %.decomposed, 8, !dbg !19
  %24 = shl nsw i32 %19, 8, !dbg !19
  %25 = add nsw i32 %20, %23, !dbg !20
  %26 = add nsw i32 %20, %24, !dbg !20
  %27 = mul nsw i32 %21, 13312, !dbg !21
  %28 = add nsw i32 %25, %27, !dbg !22
  %29 = add nsw i32 %26, %27, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %36 = add nsw i32 %.decomposed, -52, !dbg !25
  %37 = icmp ult i32 %36, 26, !dbg !25
  %38 = mul nsw i32 %17, 26, !dbg !26
  %39 = add nsw i32 %38, %36, !dbg !27
  %40 = sext i32 %39 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !28
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !29
  %43 = sext i32 %36 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !30
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !33
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %50 = bitcast i32 %48 to float, !dbg !33
  %51 = bitcast i32 %49 to float, !dbg !33
  %52 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %53 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %54, 0, !dbg !35
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %55, 0, !dbg !35
  br i1 %.not.i, label %61, label %56, !dbg !35

56:                                               ; preds = %9
  br i1 %.not1.i, label %59, label %57, !dbg !35

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !35

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !35
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %66, 0, !dbg !35
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !35
  br i1 %.not.i1, label %73, label %68, !dbg !35

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !35

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !35

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !35
  %78 = extractvalue { i32, i32 } %42, 1, !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = extractvalue { i32, i32 } %45, 1, !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = fsub float %79, %81, !dbg !36
  %83 = extractvalue { i32, i32 } %42, 0, !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = extractvalue { i32, i32 } %45, 0, !dbg !31
  %86 = bitcast i32 %85 to float, !dbg !31
  %87 = fsub float %84, %86, !dbg !36
  %88 = icmp slt i32 %.decomposed, 78, !dbg !37
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %91 = fmul float %87, %89, !dbg !39
  %92 = fmul float %82, %90, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !40
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !41
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !41
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !41
  %97 = bitcast i32 %95 to float, !dbg !41
  %98 = bitcast i32 %96 to float, !dbg !41
  %99 = fmul float %91, %97, !dbg !42
  %100 = fmul float %92, %98, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !43
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %101, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !44
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !44
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !44
  %105 = bitcast i32 %103 to float, !dbg !44
  %106 = bitcast i32 %104 to float, !dbg !44
  %107 = fadd float %99, %105, !dbg !45
  %108 = fadd float %100, %106, !dbg !45
  %109 = fcmp olt float %107, 0.000000e+00, !dbg !46
  %110 = fcmp olt float %108, 0.000000e+00, !dbg !46
  %111 = select i1 %109, float 0.000000e+00, float %107, !dbg !50
  %112 = select i1 %110, float 0.000000e+00, float %108, !dbg !50
  %113 = icmp sgt i32 %.decomposed, 77, !dbg !51
  %114 = mul nsw i32 %21, 26624, !dbg !52
  %115 = add i32 %25, %114, !dbg !53
  %116 = add i32 %26, %114, !dbg !53
  %117 = sext i32 %115 to i64, !dbg !54
  %118 = getelementptr float, ptr addrspace(1) %6, i64 %117, !dbg !54
  %119 = sext i32 %116 to i64, !dbg !54
  %120 = getelementptr float, ptr addrspace(1) %6, i64 %119, !dbg !54
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %113, i32 0, i1 %113) #3, !dbg !55
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %113, i32 0, i1 %113) #3, !dbg !55
  %123 = sext i32 %15 to i64, !dbg !56
  %124 = getelementptr float, ptr addrspace(1) %7, i64 %123, !dbg !56
  %125 = bitcast float %111 to i32, !dbg !57
  %126 = select i1 %37, i32 %125, i32 0, !dbg !58
  %127 = select i1 %22, i32 %34, i32 %126, !dbg !59
  %128 = select i1 %88, i32 %127, i32 %121, !dbg !60
  %129 = bitcast float %112 to i32, !dbg !57
  %130 = select i1 %37, i32 %129, i32 0, !dbg !58
  %131 = select i1 %22, i32 %35, i32 %130, !dbg !59
  %132 = select i1 %88, i32 %131, i32 %122, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %132, ptr addrspace(1) %124, i1 true) #3, !dbg !57
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmkzznplpqxyp5bjd77usfauz5igvfwzf2xlezoxvq3kwwwamkj.py", directory: "inductor_cache/fm")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 18, scope: !7)
!19 = !DILocation(line: 40, column: 41, scope: !7)
!20 = !DILocation(line: 40, column: 36, scope: !7)
!21 = !DILocation(line: 40, column: 53, scope: !7)
!22 = !DILocation(line: 40, column: 47, scope: !7)
!23 = !DILocation(line: 40, column: 31, scope: !7)
!24 = !DILocation(line: 40, column: 58, scope: !7)
!25 = !DILocation(line: 44, column: 20, scope: !7)
!26 = !DILocation(line: 45, column: 34, scope: !7)
!27 = !DILocation(line: 45, column: 40, scope: !7)
!28 = !DILocation(line: 45, column: 31, scope: !7)
!29 = !DILocation(line: 45, column: 56, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 46, scope: !7)
!32 = !DILocation(line: 48, column: 31, scope: !7)
!33 = !DILocation(line: 48, column: 46, scope: !7)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 27, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 20, scope: !7)
!40 = !DILocation(line: 57, column: 31, scope: !7)
!41 = !DILocation(line: 57, column: 46, scope: !7)
!42 = !DILocation(line: 58, column: 20, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 46, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 62, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 68, column: 20, scope: !7)
!52 = !DILocation(line: 71, column: 69, scope: !7)
!53 = !DILocation(line: 71, column: 63, scope: !7)
!54 = !DILocation(line: 71, column: 31, scope: !7)
!55 = !DILocation(line: 71, column: 74, scope: !7)
!56 = !DILocation(line: 73, column: 25, scope: !7)
!57 = !DILocation(line: 73, column: 37, scope: !7)
!58 = !DILocation(line: 64, column: 35, scope: !7)
!59 = !DILocation(line: 65, column: 34, scope: !7)
!60 = !DILocation(line: 0, scope: !7)
!61 = !DILocation(line: 73, column: 4, scope: !7)
