; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 24, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = lshr i32 %12, 2, !dbg !16
  %20 = and i32 %19, 31, !dbg !16
  %21 = or disjoint i32 %18, %20, !dbg !17
  %22 = icmp slt i32 %21, 2025, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %23 = sdiv i32 %.frozen, 256, !dbg !19
  %24 = mul i32 %23, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = srem i32 %16, 256, !dbg !20
  %26 = shl i32 %21, 8, !dbg !21
  %27 = mul i32 %23, 518400, !dbg !22
  %28 = add i32 %27, %26, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %28, %25, !dbg !24
  %31 = sext i32 %29 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %22) #4, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !26
  %37 = sext i32 %.decomposed to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = sext i32 %25 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !28
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %50 = bitcast i32 %46 to float, !dbg !30
  %51 = bitcast i32 %47 to float, !dbg !30
  %52 = bitcast i32 %48 to float, !dbg !30
  %53 = bitcast i32 %49 to float, !dbg !30
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !30
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !30
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !30
  %59 = bitcast i32 %55 to float, !dbg !30
  %60 = bitcast i32 %56 to float, !dbg !30
  %61 = bitcast i32 %57 to float, !dbg !30
  %62 = bitcast i32 %58 to float, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !32
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !33
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #4, !dbg !34
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #4, !dbg !34
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %72 = fadd float %51, 0x3EE4F8B580000000, !dbg !35
  %73 = fadd float %52, 0x3EE4F8B580000000, !dbg !35
  %74 = fadd float %53, 0x3EE4F8B580000000, !dbg !35
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !35
  %76 = fadd float %60, 0x3EE4F8B580000000, !dbg !35
  %77 = fadd float %61, 0x3EE4F8B580000000, !dbg !35
  %78 = fadd float %62, 0x3EE4F8B580000000, !dbg !35
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %79, 0, !dbg !36
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %80, 0, !dbg !36
  br i1 %.not.i, label %86, label %81, !dbg !36

81:                                               ; preds = %9
  br i1 %.not1.i, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

86:                                               ; preds = %9
  br i1 %.not1.i, label %89, label %87, !dbg !36

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !36
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i18 = icmp eq i32 %91, 0, !dbg !36
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i21 = icmp eq i32 %92, 0, !dbg !36
  br i1 %.not.i18, label %98, label %93, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %101, label %99, !dbg !36

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

__nv_sqrtf.exit22:                                ; preds = %94, %96, %99, %101
  %.0.i20 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !36
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i23 = icmp eq i32 %103, 0, !dbg !36
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i26 = icmp eq i32 %104, 0, !dbg !36
  br i1 %.not.i23, label %110, label %105, !dbg !36

105:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %108, label %106, !dbg !36

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

110:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %113, label %111, !dbg !36

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

__nv_sqrtf.exit27:                                ; preds = %106, %108, %111, %113
  %.0.i25 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !36
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i28 = icmp eq i32 %115, 0, !dbg !36
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i31 = icmp eq i32 %116, 0, !dbg !36
  br i1 %.not.i28, label %122, label %117, !dbg !36

117:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %120, label %118, !dbg !36

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

122:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %125, label %123, !dbg !36

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

__nv_sqrtf.exit32:                                ; preds = %118, %120, %123, %125
  %.0.i30 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !36
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i33 = icmp eq i32 %127, 0, !dbg !36
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i36 = icmp eq i32 %128, 0, !dbg !36
  br i1 %.not.i33, label %134, label %129, !dbg !36

129:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %132, label %130, !dbg !36

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

134:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %137, label %135, !dbg !36

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

__nv_sqrtf.exit37:                                ; preds = %130, %132, %135, %137
  %.0.i35 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !36
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i38 = icmp eq i32 %139, 0, !dbg !36
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i41 = icmp eq i32 %140, 0, !dbg !36
  br i1 %.not.i38, label %146, label %141, !dbg !36

141:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %144, label %142, !dbg !36

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

146:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %149, label %147, !dbg !36

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

__nv_sqrtf.exit42:                                ; preds = %142, %144, %147, %149
  %.0.i40 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !36
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i43 = icmp eq i32 %151, 0, !dbg !36
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i46 = icmp eq i32 %152, 0, !dbg !36
  br i1 %.not.i43, label %158, label %153, !dbg !36

153:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %156, label %154, !dbg !36

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

158:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %161, label %159, !dbg !36

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

__nv_sqrtf.exit47:                                ; preds = %154, %156, %159, %161
  %.0.i45 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !36
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i48 = icmp eq i32 %163, 0, !dbg !36
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i51 = icmp eq i32 %164, 0, !dbg !36
  br i1 %.not.i48, label %170, label %165, !dbg !36

165:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %168, label %166, !dbg !36

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

170:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %173, label %171, !dbg !36

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

__nv_sqrtf.exit52:                                ; preds = %166, %168, %171, %173
  %.0.i50 = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !36
  %175 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %176 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %177 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %179 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %180 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %181 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %183 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %185 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %187 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %188 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %189 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %190 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %191 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %195 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !34
  %196 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !34
  %197 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !34
  %198 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !34
  %199 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !32
  %200 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !32
  %201 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !32
  %202 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !32
  %203 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !32
  %204 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !32
  %205 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !32
  %206 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !32
  %207 = lshr i32 %12, 3, !dbg !16
  %208 = and i32 %207, 15, !dbg !16
  %209 = or disjoint i32 %208, %18, !dbg !17
  %210 = or disjoint i32 %209, 16, !dbg !17
  %211 = icmp slt i32 %210, 2025, !dbg !18
  %212 = icmp slt i32 %209, 2025, !dbg !18
  %213 = shl i32 %12, 2, !dbg !12
  %214 = and i32 %213, 28, !dbg !12
  %215 = or disjoint i32 %11, %214, !dbg !13
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !37
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !37
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !37
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !37
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !37
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !37
  %224 = shl i32 %209, 10, !dbg !38
  %225 = shl i32 %210, 10, !dbg !38
  %226 = add i32 %224, %215, !dbg !39
  %227 = add i32 %225, %215, !dbg !39
  %228 = sext i32 %226 to i64, !dbg !40
  %229 = getelementptr float, ptr addrspace(1) %5, i64 %228, !dbg !40
  %230 = sext i32 %227 to i64, !dbg !40
  %231 = getelementptr float, ptr addrspace(1) %5, i64 %230, !dbg !40
  %232 = and i32 %13, 1016, !dbg !41
  %233 = and i32 %213, 480, !dbg !41
  %234 = and i32 %213, 508, !dbg !41
  %235 = lshr exact i32 %13, 2, !dbg !41
  %236 = and i32 %235, 248, !dbg !41
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !41
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %232, !dbg !41
  %239 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 16, !dbg !41
  %240 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %233, !dbg !41
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %234, !dbg !41
  %242 = or disjoint i32 %234, 512, !dbg !41
  %243 = lshr exact i32 %242, 2, !dbg !41
  %244 = and i32 %243, 248, !dbg !41
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !41
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %242, !dbg !41
  %247 = getelementptr inbounds i8, ptr addrspace(3) %241, i32 4, !dbg !41
  %248 = getelementptr inbounds i8, ptr addrspace(3) %241, i32 8, !dbg !41
  %249 = getelementptr inbounds i8, ptr addrspace(3) %241, i32 12, !dbg !41
  %250 = getelementptr i1, ptr addrspace(1) %6, i64 %31, !dbg !42
  %251 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !26
  %252 = insertelement <4 x i32> %251, i32 %187, i64 1, !dbg !26
  %253 = insertelement <4 x i32> %252, i32 %185, i64 2, !dbg !26
  %254 = insertelement <4 x i32> %253, i32 %183, i64 3, !dbg !26
  %255 = bitcast <4 x i32> %254 to <4 x float>, !dbg !26
  %256 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !28
  %257 = insertelement <4 x i32> %256, i32 %188, i64 1, !dbg !28
  %258 = insertelement <4 x i32> %257, i32 %186, i64 2, !dbg !28
  %259 = insertelement <4 x i32> %258, i32 %184, i64 3, !dbg !28
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !28
  %261 = fsub <4 x float> %255, %260, !dbg !43
  %262 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !34
  %263 = insertelement <4 x i32> %262, i32 %197, i64 1, !dbg !34
  %264 = insertelement <4 x i32> %263, i32 %196, i64 2, !dbg !34
  %265 = insertelement <4 x i32> %264, i32 %195, i64 3, !dbg !34
  %266 = bitcast <4 x i32> %265 to <4 x float>, !dbg !34
  %267 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !32
  %268 = insertelement <4 x i32> %267, i32 %205, i64 1, !dbg !32
  %269 = insertelement <4 x i32> %268, i32 %204, i64 2, !dbg !32
  %270 = insertelement <4 x i32> %269, i32 %203, i64 3, !dbg !32
  %271 = bitcast <4 x i32> %270 to <4 x float>, !dbg !32
  %272 = insertelement <4 x float> poison, float %216, i64 0, !dbg !44
  %273 = insertelement <4 x float> %272, float %217, i64 1, !dbg !44
  %274 = insertelement <4 x float> %273, float %218, i64 2, !dbg !44
  %275 = insertelement <4 x float> %274, float %219, i64 3, !dbg !44
  %276 = fmul <4 x float> %261, %275, !dbg !44
  %277 = fmul <4 x float> %276, %271, !dbg !45
  %278 = fadd <4 x float> %277, %266, !dbg !46
  %279 = fcmp olt <4 x float> %278, zeroinitializer, !dbg !47
  %280 = select <4 x i1> %279, <4 x float> zeroinitializer, <4 x float> %278, !dbg !51
  %281 = fcmp ole <4 x float> %280, zeroinitializer, !dbg !52
  %bc = bitcast <4 x float> %280 to <4 x i32>, !dbg !41
  %282 = extractelement <4 x i32> %bc, i64 0, !dbg !41
  %bc53 = bitcast <4 x float> %280 to <4 x i32>, !dbg !41
  %283 = extractelement <4 x i32> %bc53, i64 1, !dbg !41
  %bc54 = bitcast <4 x float> %280 to <4 x i32>, !dbg !41
  %284 = extractelement <4 x i32> %bc54, i64 2, !dbg !41
  %bc55 = bitcast <4 x float> %280 to <4 x i32>, !dbg !41
  %285 = extractelement <4 x i32> %bc55, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %238, i32 %282, i32 %283, i32 %284, i32 %285, i1 true) #4, !dbg !41
  %286 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !26
  %287 = insertelement <4 x i32> %286, i32 %179, i64 1, !dbg !26
  %288 = insertelement <4 x i32> %287, i32 %177, i64 2, !dbg !26
  %289 = insertelement <4 x i32> %288, i32 %175, i64 3, !dbg !26
  %290 = bitcast <4 x i32> %289 to <4 x float>, !dbg !26
  %291 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !28
  %292 = insertelement <4 x i32> %291, i32 %180, i64 1, !dbg !28
  %293 = insertelement <4 x i32> %292, i32 %178, i64 2, !dbg !28
  %294 = insertelement <4 x i32> %293, i32 %176, i64 3, !dbg !28
  %295 = bitcast <4 x i32> %294 to <4 x float>, !dbg !28
  %296 = fsub <4 x float> %290, %295, !dbg !43
  %297 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !34
  %298 = insertelement <4 x i32> %297, i32 %193, i64 1, !dbg !34
  %299 = insertelement <4 x i32> %298, i32 %192, i64 2, !dbg !34
  %300 = insertelement <4 x i32> %299, i32 %191, i64 3, !dbg !34
  %301 = bitcast <4 x i32> %300 to <4 x float>, !dbg !34
  %302 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !32
  %303 = insertelement <4 x i32> %302, i32 %201, i64 1, !dbg !32
  %304 = insertelement <4 x i32> %303, i32 %200, i64 2, !dbg !32
  %305 = insertelement <4 x i32> %304, i32 %199, i64 3, !dbg !32
  %306 = bitcast <4 x i32> %305 to <4 x float>, !dbg !32
  %307 = insertelement <4 x float> poison, float %220, i64 0, !dbg !44
  %308 = insertelement <4 x float> %307, float %221, i64 1, !dbg !44
  %309 = insertelement <4 x float> %308, float %222, i64 2, !dbg !44
  %310 = insertelement <4 x float> %309, float %223, i64 3, !dbg !44
  %311 = fmul <4 x float> %296, %310, !dbg !44
  %312 = fmul <4 x float> %311, %306, !dbg !45
  %313 = fadd <4 x float> %312, %301, !dbg !46
  %314 = fcmp olt <4 x float> %313, zeroinitializer, !dbg !47
  %315 = select <4 x i1> %314, <4 x float> zeroinitializer, <4 x float> %313, !dbg !51
  %316 = fcmp ole <4 x float> %315, zeroinitializer, !dbg !52
  %bc56 = bitcast <4 x float> %315 to <4 x i32>, !dbg !41
  %317 = extractelement <4 x i32> %bc56, i64 0, !dbg !41
  %bc57 = bitcast <4 x float> %315 to <4 x i32>, !dbg !41
  %318 = extractelement <4 x i32> %bc57, i64 1, !dbg !41
  %bc58 = bitcast <4 x float> %315 to <4 x i32>, !dbg !41
  %319 = extractelement <4 x i32> %bc58, i64 2, !dbg !41
  %bc59 = bitcast <4 x float> %315 to <4 x i32>, !dbg !41
  %320 = extractelement <4 x i32> %bc59, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %239, i32 %317, i32 %318, i32 %319, i32 %320, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %321 = load <4 x i32>, ptr addrspace(3) %246, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %241, align 16, !dbg !41
  %.extract11 = load i32, ptr addrspace(3) %247, align 4, !dbg !41
  %.extract12 = load i32, ptr addrspace(3) %248, align 8, !dbg !41
  %.extract13 = load i32, ptr addrspace(3) %249, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %229, i1 %212) #4, !dbg !41
  %.extract14 = extractelement <4 x i32> %321, i64 0, !dbg !41
  %.extract15 = extractelement <4 x i32> %321, i64 1, !dbg !41
  %.extract16 = extractelement <4 x i32> %321, i64 2, !dbg !41
  %.extract17 = extractelement <4 x i32> %321, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %231, i1 %211) #4, !dbg !41
  %322 = zext <4 x i1> %281 to <4 x i8>, !dbg !53
  %323 = bitcast <4 x i8> %322 to i32, !dbg !53
  %324 = zext <4 x i1> %316 to <4 x i8>, !dbg !53
  %325 = bitcast <4 x i8> %324 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %323, i32 %325, ptr addrspace(1) %250, i1 %22) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6v5stil34khknmhgq2nozbr4tu7hm25c7nc6eh7jdkgudatilqr.py", directory: "inductor_cache/6v")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 35, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 47, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 58, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
