; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %20 = sdiv i32 %.frozen, 448, !dbg !14
  %21 = mul i32 %20, 448, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %.frozen76 = freeze i32 %19, !dbg !14
  %22 = sdiv i32 %.frozen76, 448, !dbg !14
  %23 = mul i32 %22, 448, !dbg !15
  %.decomposed77 = sub i32 %.frozen76, %23, !dbg !15
  %24 = icmp slt i32 %.decomposed, 192, !dbg !16
  %25 = icmp slt i32 %.decomposed77, 192, !dbg !16
  %26 = mul nsw i32 %20, 192, !dbg !17
  %27 = mul nsw i32 %22, 192, !dbg !17
  %28 = add nsw i32 %26, %.decomposed, !dbg !18
  %29 = add nsw i32 %27, %.decomposed77, !dbg !18
  %30 = sext i32 %28 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %29 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !20
  %36 = sext i32 %.decomposed to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = sext i32 %.decomposed77 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = fadd float %49, 0x3F50624DE0000000, !dbg !25
  %63 = fadd float %50, 0x3F50624DE0000000, !dbg !25
  %64 = fadd float %51, 0x3F50624DE0000000, !dbg !25
  %65 = fadd float %52, 0x3F50624DE0000000, !dbg !25
  %66 = fadd float %58, 0x3F50624DE0000000, !dbg !25
  %67 = fadd float %59, 0x3F50624DE0000000, !dbg !25
  %68 = fadd float %60, 0x3F50624DE0000000, !dbg !25
  %69 = fadd float %61, 0x3F50624DE0000000, !dbg !25
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %70, 0, !dbg !26
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %71, 0, !dbg !26
  br i1 %.not.i, label %77, label %72, !dbg !26

72:                                               ; preds = %12
  br i1 %.not1.i, label %75, label %73, !dbg !26

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

77:                                               ; preds = %12
  br i1 %.not1.i, label %80, label %78, !dbg !26

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !26
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %82, 0, !dbg !26
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !26
  br i1 %.not.i1, label %89, label %84, !dbg !26

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !26

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !26

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !26
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %94, 0, !dbg !26
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %95, 0, !dbg !26
  br i1 %.not.i6, label %101, label %96, !dbg !26

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !26

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !26

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %97, %99, %102, %104
  %.0.i8 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !26
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %106, 0, !dbg !26
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !26
  br i1 %.not.i11, label %113, label %108, !dbg !26

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !26

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !26

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !26
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i16 = icmp eq i32 %118, 0, !dbg !26
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i19 = icmp eq i32 %119, 0, !dbg !26
  br i1 %.not.i16, label %125, label %120, !dbg !26

120:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %123, label %121, !dbg !26

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !26

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %121, %123, %126, %128
  %.0.i18 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !26
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i21 = icmp eq i32 %130, 0, !dbg !26
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i24 = icmp eq i32 %131, 0, !dbg !26
  br i1 %.not.i21, label %137, label %132, !dbg !26

132:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %135, label %133, !dbg !26

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !26

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

__nv_sqrtf.exit25:                                ; preds = %133, %135, %138, %140
  %.0.i23 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !26
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i26 = icmp eq i32 %142, 0, !dbg !26
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i29 = icmp eq i32 %143, 0, !dbg !26
  br i1 %.not.i26, label %149, label %144, !dbg !26

144:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %147, label %145, !dbg !26

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !26

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

__nv_sqrtf.exit30:                                ; preds = %145, %147, %150, %152
  %.0.i28 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !26
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i31 = icmp eq i32 %154, 0, !dbg !26
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i34 = icmp eq i32 %155, 0, !dbg !26
  br i1 %.not.i31, label %161, label %156, !dbg !26

156:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %159, label %157, !dbg !26

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !26

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

__nv_sqrtf.exit35:                                ; preds = %157, %159, %162, %164
  %.0.i33 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !26
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !27
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !27
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !27
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !27
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !27
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !27
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !28
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !28
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !29
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !29
  %178 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !30
  %179 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !30
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !31
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !31
  %182 = icmp sgt i32 %.decomposed, 191, !dbg !32
  %183 = icmp sgt i32 %.decomposed77, 191, !dbg !32
  %184 = shl nsw i32 %20, 8, !dbg !33
  %185 = shl nsw i32 %22, 8, !dbg !33
  %186 = add nsw i32 %.decomposed, -192, !dbg !34
  %187 = add nsw i32 %.decomposed77, -192, !dbg !34
  %188 = add nsw i32 %184, %186, !dbg !35
  %189 = add nsw i32 %185, %187, !dbg !35
  %190 = sext i32 %188 to i64, !dbg !36
  %191 = getelementptr float, ptr addrspace(1) %5, i64 %190, !dbg !36
  %192 = sext i32 %189 to i64, !dbg !36
  %193 = getelementptr float, ptr addrspace(1) %5, i64 %192, !dbg !36
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !37
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %193, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !37
  %196 = sext i32 %186 to i64, !dbg !38
  %197 = getelementptr float, ptr addrspace(1) %6, i64 %196, !dbg !38
  %198 = sext i32 %187 to i64, !dbg !38
  %199 = getelementptr float, ptr addrspace(1) %6, i64 %198, !dbg !38
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !39
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !39
  %202 = getelementptr float, ptr addrspace(1) %7, i64 %196, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %7, i64 %198, !dbg !40
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !41
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !41
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !41
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !41
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !41
  %209 = bitcast i32 %205 to float, !dbg !41
  %210 = bitcast i32 %206 to float, !dbg !41
  %211 = bitcast i32 %207 to float, !dbg !41
  %212 = bitcast i32 %208 to float, !dbg !41
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !41
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !41
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !41
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !41
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !41
  %218 = bitcast i32 %214 to float, !dbg !41
  %219 = bitcast i32 %215 to float, !dbg !41
  %220 = bitcast i32 %216 to float, !dbg !41
  %221 = bitcast i32 %217 to float, !dbg !41
  %222 = fadd float %209, 0x3F50624DE0000000, !dbg !42
  %223 = fadd float %210, 0x3F50624DE0000000, !dbg !42
  %224 = fadd float %211, 0x3F50624DE0000000, !dbg !42
  %225 = fadd float %212, 0x3F50624DE0000000, !dbg !42
  %226 = fadd float %218, 0x3F50624DE0000000, !dbg !42
  %227 = fadd float %219, 0x3F50624DE0000000, !dbg !42
  %228 = fadd float %220, 0x3F50624DE0000000, !dbg !42
  %229 = fadd float %221, 0x3F50624DE0000000, !dbg !42
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i36 = icmp eq i32 %230, 0, !dbg !43
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i39 = icmp eq i32 %231, 0, !dbg !43
  br i1 %.not.i36, label %237, label %232, !dbg !43

232:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %235, label %233, !dbg !43

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

237:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %240, label %238, !dbg !43

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

__nv_sqrtf.exit40:                                ; preds = %233, %235, %238, %240
  %.0.i38 = phi float [ %234, %233 ], [ %236, %235 ], [ %239, %238 ], [ %241, %240 ], !dbg !43
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i41 = icmp eq i32 %242, 0, !dbg !43
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i44 = icmp eq i32 %243, 0, !dbg !43
  br i1 %.not.i41, label %249, label %244, !dbg !43

244:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %247, label %245, !dbg !43

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

249:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %252, label %250, !dbg !43

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

__nv_sqrtf.exit45:                                ; preds = %245, %247, %250, %252
  %.0.i43 = phi float [ %246, %245 ], [ %248, %247 ], [ %251, %250 ], [ %253, %252 ], !dbg !43
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i46 = icmp eq i32 %254, 0, !dbg !43
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i49 = icmp eq i32 %255, 0, !dbg !43
  br i1 %.not.i46, label %261, label %256, !dbg !43

256:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %259, label %257, !dbg !43

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

261:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %264, label %262, !dbg !43

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

__nv_sqrtf.exit50:                                ; preds = %257, %259, %262, %264
  %.0.i48 = phi float [ %258, %257 ], [ %260, %259 ], [ %263, %262 ], [ %265, %264 ], !dbg !43
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i51 = icmp eq i32 %266, 0, !dbg !43
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i54 = icmp eq i32 %267, 0, !dbg !43
  br i1 %.not.i51, label %273, label %268, !dbg !43

268:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %271, label %269, !dbg !43

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

273:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %276, label %274, !dbg !43

274:                                              ; preds = %273
  %275 = tail call float @llvm.nvvm.sqrt.rn.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

276:                                              ; preds = %273
  %277 = tail call float @llvm.nvvm.sqrt.approx.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

__nv_sqrtf.exit55:                                ; preds = %269, %271, %274, %276
  %.0.i53 = phi float [ %270, %269 ], [ %272, %271 ], [ %275, %274 ], [ %277, %276 ], !dbg !43
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i56 = icmp eq i32 %278, 0, !dbg !43
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i59 = icmp eq i32 %279, 0, !dbg !43
  br i1 %.not.i56, label %285, label %280, !dbg !43

280:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %283, label %281, !dbg !43

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

285:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %288, label %286, !dbg !43

286:                                              ; preds = %285
  %287 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

288:                                              ; preds = %285
  %289 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

__nv_sqrtf.exit60:                                ; preds = %281, %283, %286, %288
  %.0.i58 = phi float [ %282, %281 ], [ %284, %283 ], [ %287, %286 ], [ %289, %288 ], !dbg !43
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i61 = icmp eq i32 %290, 0, !dbg !43
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i64 = icmp eq i32 %291, 0, !dbg !43
  br i1 %.not.i61, label %297, label %292, !dbg !43

292:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %295, label %293, !dbg !43

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

297:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %300, label %298, !dbg !43

298:                                              ; preds = %297
  %299 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

300:                                              ; preds = %297
  %301 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

__nv_sqrtf.exit65:                                ; preds = %293, %295, %298, %300
  %.0.i63 = phi float [ %294, %293 ], [ %296, %295 ], [ %299, %298 ], [ %301, %300 ], !dbg !43
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i66 = icmp eq i32 %302, 0, !dbg !43
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i69 = icmp eq i32 %303, 0, !dbg !43
  br i1 %.not.i66, label %309, label %304, !dbg !43

304:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %307, label %305, !dbg !43

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

309:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %312, label %310, !dbg !43

310:                                              ; preds = %309
  %311 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

312:                                              ; preds = %309
  %313 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

__nv_sqrtf.exit70:                                ; preds = %305, %307, %310, %312
  %.0.i68 = phi float [ %306, %305 ], [ %308, %307 ], [ %311, %310 ], [ %313, %312 ], !dbg !43
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i71 = icmp eq i32 %314, 0, !dbg !43
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i74 = icmp eq i32 %315, 0, !dbg !43
  br i1 %.not.i71, label %321, label %316, !dbg !43

316:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %319, label %317, !dbg !43

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

321:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %324, label %322, !dbg !43

322:                                              ; preds = %321
  %323 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

324:                                              ; preds = %321
  %325 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

__nv_sqrtf.exit75:                                ; preds = %317, %319, %322, %324
  %.0.i73 = phi float [ %318, %317 ], [ %320, %319 ], [ %323, %322 ], [ %325, %324 ], !dbg !43
  %326 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !37
  %327 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !39
  %328 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !37
  %329 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !39
  %330 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !37
  %331 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !39
  %332 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !37
  %333 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !39
  %334 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !37
  %335 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !39
  %336 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !37
  %337 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !39
  %338 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !37
  %339 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !39
  %340 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !37
  %341 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !39
  %342 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %343 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %344 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !29
  %345 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !31
  %346 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %347 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %348 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !29
  %349 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !31
  %350 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %351 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %352 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !29
  %353 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !31
  %354 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %355 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %356 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !29
  %357 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !31
  %358 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %359 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %360 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !29
  %361 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !31
  %362 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %363 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %364 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !29
  %365 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !31
  %366 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %367 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %368 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !29
  %369 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !31
  %370 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %371 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %372 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !29
  %373 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !31
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !44
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !44
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !44
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !44
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !44
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !44
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !44
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !44
  %382 = getelementptr float, ptr addrspace(1) %8, i64 %196, !dbg !45
  %383 = getelementptr float, ptr addrspace(1) %8, i64 %198, !dbg !45
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !46
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !46
  %386 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !46
  %387 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !46
  %388 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !46
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %383, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !46
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !46
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !46
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !46
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !46
  %394 = getelementptr float, ptr addrspace(1) %9, i64 %196, !dbg !47
  %395 = getelementptr float, ptr addrspace(1) %9, i64 %198, !dbg !47
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %394, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !48
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !48
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !48
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !48
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !48
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %395, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !48
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !48
  %403 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !48
  %404 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !48
  %405 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !48
  %406 = insertelement <16 x i32> poison, i32 %326, i64 0, !dbg !37
  %407 = insertelement <16 x i32> %406, i32 %328, i64 1, !dbg !37
  %408 = insertelement <16 x i32> %407, i32 %330, i64 2, !dbg !37
  %409 = insertelement <16 x i32> %408, i32 %332, i64 3, !dbg !37
  %410 = insertelement <16 x i32> %409, i32 %334, i64 4, !dbg !37
  %411 = insertelement <16 x i32> %410, i32 %336, i64 5, !dbg !37
  %412 = insertelement <16 x i32> %411, i32 %338, i64 6, !dbg !37
  %413 = insertelement <16 x i32> %412, i32 %340, i64 7, !dbg !37
  %414 = insertelement <16 x i32> %413, i32 %370, i64 8, !dbg !37
  %415 = insertelement <16 x i32> %414, i32 %366, i64 9, !dbg !37
  %416 = insertelement <16 x i32> %415, i32 %362, i64 10, !dbg !37
  %417 = insertelement <16 x i32> %416, i32 %358, i64 11, !dbg !37
  %418 = insertelement <16 x i32> %417, i32 %354, i64 12, !dbg !37
  %419 = insertelement <16 x i32> %418, i32 %350, i64 13, !dbg !37
  %420 = insertelement <16 x i32> %419, i32 %346, i64 14, !dbg !37
  %421 = insertelement <16 x i32> %420, i32 %342, i64 15, !dbg !37
  %422 = bitcast <16 x i32> %421 to <16 x float>, !dbg !37
  %423 = insertelement <16 x i32> poison, i32 %327, i64 0, !dbg !39
  %424 = insertelement <16 x i32> %423, i32 %329, i64 1, !dbg !39
  %425 = insertelement <16 x i32> %424, i32 %331, i64 2, !dbg !39
  %426 = insertelement <16 x i32> %425, i32 %333, i64 3, !dbg !39
  %427 = insertelement <16 x i32> %426, i32 %335, i64 4, !dbg !39
  %428 = insertelement <16 x i32> %427, i32 %337, i64 5, !dbg !39
  %429 = insertelement <16 x i32> %428, i32 %339, i64 6, !dbg !39
  %430 = insertelement <16 x i32> %429, i32 %341, i64 7, !dbg !39
  %431 = insertelement <16 x i32> %430, i32 %371, i64 8, !dbg !39
  %432 = insertelement <16 x i32> %431, i32 %367, i64 9, !dbg !39
  %433 = insertelement <16 x i32> %432, i32 %363, i64 10, !dbg !39
  %434 = insertelement <16 x i32> %433, i32 %359, i64 11, !dbg !39
  %435 = insertelement <16 x i32> %434, i32 %355, i64 12, !dbg !39
  %436 = insertelement <16 x i32> %435, i32 %351, i64 13, !dbg !39
  %437 = insertelement <16 x i32> %436, i32 %347, i64 14, !dbg !39
  %438 = insertelement <16 x i32> %437, i32 %343, i64 15, !dbg !39
  %439 = bitcast <16 x i32> %438 to <16 x float>, !dbg !39
  %440 = fsub <16 x float> %422, %439, !dbg !49
  %441 = insertelement <16 x float> poison, float %381, i64 0, !dbg !50
  %442 = insertelement <16 x float> %441, float %380, i64 1, !dbg !50
  %443 = insertelement <16 x float> %442, float %379, i64 2, !dbg !50
  %444 = insertelement <16 x float> %443, float %378, i64 3, !dbg !50
  %445 = insertelement <16 x float> %444, float %377, i64 4, !dbg !50
  %446 = insertelement <16 x float> %445, float %376, i64 5, !dbg !50
  %447 = insertelement <16 x float> %446, float %375, i64 6, !dbg !50
  %448 = insertelement <16 x float> %447, float %374, i64 7, !dbg !50
  %449 = insertelement <16 x float> %448, float %166, i64 8, !dbg !50
  %450 = insertelement <16 x float> %449, float %167, i64 9, !dbg !50
  %451 = insertelement <16 x float> %450, float %168, i64 10, !dbg !50
  %452 = insertelement <16 x float> %451, float %169, i64 11, !dbg !50
  %453 = insertelement <16 x float> %452, float %170, i64 12, !dbg !50
  %454 = insertelement <16 x float> %453, float %171, i64 13, !dbg !50
  %455 = insertelement <16 x float> %454, float %172, i64 14, !dbg !50
  %456 = insertelement <16 x float> %455, float %173, i64 15, !dbg !50
  %457 = fmul <16 x float> %440, %456, !dbg !50
  %458 = insertelement <16 x i32> poison, i32 %393, i64 0, !dbg !46
  %459 = insertelement <16 x i32> %458, i32 %392, i64 1, !dbg !46
  %460 = insertelement <16 x i32> %459, i32 %391, i64 2, !dbg !46
  %461 = insertelement <16 x i32> %460, i32 %390, i64 3, !dbg !46
  %462 = insertelement <16 x i32> %461, i32 %388, i64 4, !dbg !46
  %463 = insertelement <16 x i32> %462, i32 %387, i64 5, !dbg !46
  %464 = insertelement <16 x i32> %463, i32 %386, i64 6, !dbg !46
  %465 = insertelement <16 x i32> %464, i32 %385, i64 7, !dbg !46
  %466 = insertelement <16 x i32> %465, i32 %372, i64 8, !dbg !46
  %467 = insertelement <16 x i32> %466, i32 %368, i64 9, !dbg !46
  %468 = insertelement <16 x i32> %467, i32 %364, i64 10, !dbg !46
  %469 = insertelement <16 x i32> %468, i32 %360, i64 11, !dbg !46
  %470 = insertelement <16 x i32> %469, i32 %356, i64 12, !dbg !46
  %471 = insertelement <16 x i32> %470, i32 %352, i64 13, !dbg !46
  %472 = insertelement <16 x i32> %471, i32 %348, i64 14, !dbg !46
  %473 = insertelement <16 x i32> %472, i32 %344, i64 15, !dbg !46
  %474 = bitcast <16 x i32> %473 to <16 x float>, !dbg !46
  %475 = fmul <16 x float> %457, %474, !dbg !51
  %476 = insertelement <16 x i32> poison, i32 %405, i64 0, !dbg !48
  %477 = insertelement <16 x i32> %476, i32 %404, i64 1, !dbg !48
  %478 = insertelement <16 x i32> %477, i32 %403, i64 2, !dbg !48
  %479 = insertelement <16 x i32> %478, i32 %402, i64 3, !dbg !48
  %480 = insertelement <16 x i32> %479, i32 %400, i64 4, !dbg !48
  %481 = insertelement <16 x i32> %480, i32 %399, i64 5, !dbg !48
  %482 = insertelement <16 x i32> %481, i32 %398, i64 6, !dbg !48
  %483 = insertelement <16 x i32> %482, i32 %397, i64 7, !dbg !48
  %484 = insertelement <16 x i32> %483, i32 %373, i64 8, !dbg !48
  %485 = insertelement <16 x i32> %484, i32 %369, i64 9, !dbg !48
  %486 = insertelement <16 x i32> %485, i32 %365, i64 10, !dbg !48
  %487 = insertelement <16 x i32> %486, i32 %361, i64 11, !dbg !48
  %488 = insertelement <16 x i32> %487, i32 %357, i64 12, !dbg !48
  %489 = insertelement <16 x i32> %488, i32 %353, i64 13, !dbg !48
  %490 = insertelement <16 x i32> %489, i32 %349, i64 14, !dbg !48
  %491 = insertelement <16 x i32> %490, i32 %345, i64 15, !dbg !48
  %492 = bitcast <16 x i32> %491 to <16 x float>, !dbg !48
  %493 = fadd <16 x float> %475, %492, !dbg !52
  %494 = fcmp olt <16 x float> %493, zeroinitializer, !dbg !53
  %495 = extractelement <16 x i1> %494, i64 15, !dbg !57
  %496 = extractelement <16 x float> %493, i64 15, !dbg !57
  %497 = select i1 %495, float 0.000000e+00, float %496, !dbg !57
  %498 = extractelement <16 x i1> %494, i64 14, !dbg !57
  %499 = extractelement <16 x float> %493, i64 14, !dbg !57
  %500 = select i1 %498, float 0.000000e+00, float %499, !dbg !57
  %501 = extractelement <16 x i1> %494, i64 13, !dbg !57
  %502 = extractelement <16 x float> %493, i64 13, !dbg !57
  %503 = select i1 %501, float 0.000000e+00, float %502, !dbg !57
  %504 = extractelement <16 x i1> %494, i64 12, !dbg !57
  %505 = extractelement <16 x float> %493, i64 12, !dbg !57
  %506 = select i1 %504, float 0.000000e+00, float %505, !dbg !57
  %507 = extractelement <16 x i1> %494, i64 11, !dbg !57
  %508 = extractelement <16 x float> %493, i64 11, !dbg !57
  %509 = select i1 %507, float 0.000000e+00, float %508, !dbg !57
  %510 = extractelement <16 x i1> %494, i64 10, !dbg !57
  %511 = extractelement <16 x float> %493, i64 10, !dbg !57
  %512 = select i1 %510, float 0.000000e+00, float %511, !dbg !57
  %513 = extractelement <16 x i1> %494, i64 9, !dbg !57
  %514 = extractelement <16 x float> %493, i64 9, !dbg !57
  %515 = select i1 %513, float 0.000000e+00, float %514, !dbg !57
  %516 = extractelement <16 x i1> %494, i64 8, !dbg !57
  %517 = extractelement <16 x float> %493, i64 8, !dbg !57
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !57
  %519 = extractelement <16 x i1> %494, i64 7, !dbg !59
  %520 = extractelement <16 x float> %493, i64 7, !dbg !59
  %521 = select i1 %519, float 0.000000e+00, float %520, !dbg !59
  %522 = extractelement <16 x i1> %494, i64 6, !dbg !59
  %523 = extractelement <16 x float> %493, i64 6, !dbg !59
  %524 = select i1 %522, float 0.000000e+00, float %523, !dbg !59
  %525 = extractelement <16 x i1> %494, i64 5, !dbg !59
  %526 = extractelement <16 x float> %493, i64 5, !dbg !59
  %527 = select i1 %525, float 0.000000e+00, float %526, !dbg !59
  %528 = extractelement <16 x i1> %494, i64 4, !dbg !59
  %529 = extractelement <16 x float> %493, i64 4, !dbg !59
  %530 = select i1 %528, float 0.000000e+00, float %529, !dbg !59
  %531 = extractelement <16 x i1> %494, i64 3, !dbg !59
  %532 = extractelement <16 x float> %493, i64 3, !dbg !59
  %533 = select i1 %531, float 0.000000e+00, float %532, !dbg !59
  %534 = extractelement <16 x i1> %494, i64 2, !dbg !59
  %535 = extractelement <16 x float> %493, i64 2, !dbg !59
  %536 = select i1 %534, float 0.000000e+00, float %535, !dbg !59
  %537 = extractelement <16 x i1> %494, i64 1, !dbg !59
  %538 = extractelement <16 x float> %493, i64 1, !dbg !59
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !59
  %540 = extractelement <16 x i1> %494, i64 0, !dbg !59
  %541 = extractelement <16 x float> %493, i64 0, !dbg !59
  %542 = select i1 %540, float 0.000000e+00, float %541, !dbg !59
  %543 = select i1 %24, float %518, float %521, !dbg !60
  %544 = select i1 %24, float %515, float %524, !dbg !60
  %545 = select i1 %24, float %512, float %527, !dbg !60
  %546 = select i1 %24, float %509, float %530, !dbg !60
  %547 = select i1 %25, float %506, float %533, !dbg !60
  %548 = select i1 %25, float %503, float %536, !dbg !60
  %549 = select i1 %25, float %500, float %539, !dbg !60
  %550 = select i1 %25, float %497, float %542, !dbg !60
  %551 = sext i32 %18 to i64, !dbg !61
  %552 = getelementptr float, ptr addrspace(1) %10, i64 %551, !dbg !61
  %553 = sext i32 %19 to i64, !dbg !61
  %554 = getelementptr float, ptr addrspace(1) %10, i64 %553, !dbg !61
  %555 = bitcast float %543 to i32, !dbg !62
  %556 = bitcast float %544 to i32, !dbg !62
  %557 = bitcast float %545 to i32, !dbg !62
  %558 = bitcast float %546 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %555, i32 %556, i32 %557, i32 %558, ptr addrspace(1) %552, i1 true) #3, !dbg !62
  %559 = bitcast float %547 to i32, !dbg !62
  %560 = bitcast float %548 to i32, !dbg !62
  %561 = bitcast float %549 to i32, !dbg !62
  %562 = bitcast float %550 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %559, i32 %560, i32 %561, i32 %562, ptr addrspace(1) %554, i1 true) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfoq2yxbbzb7grctkaab4oqn2d72cqcxdzhyhcpkrymne77d7wcs.py", directory: "inductor_cache/fo")
!4 = !{ptr @triton_poi_fused_cat_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 52, column: 20, scope: !7)
!33 = !DILocation(line: 55, column: 35, scope: !7)
!34 = !DILocation(line: 55, column: 50, scope: !7)
!35 = !DILocation(line: 55, column: 41, scope: !7)
!36 = !DILocation(line: 55, column: 31, scope: !7)
!37 = !DILocation(line: 55, column: 56, scope: !7)
!38 = !DILocation(line: 56, column: 31, scope: !7)
!39 = !DILocation(line: 56, column: 45, scope: !7)
!40 = !DILocation(line: 58, column: 31, scope: !7)
!41 = !DILocation(line: 58, column: 45, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 61, column: 27, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 67, column: 31, scope: !7)
!46 = !DILocation(line: 67, column: 45, scope: !7)
!47 = !DILocation(line: 69, column: 31, scope: !7)
!48 = !DILocation(line: 69, column: 45, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 68, column: 20, scope: !7)
!52 = !DILocation(line: 70, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 72, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !58)
!58 = !DILocation(line: 49, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!60 = !DILocation(line: 0, scope: !7)
!61 = !DILocation(line: 76, column: 25, scope: !7)
!62 = !DILocation(line: 76, column: 37, scope: !7)
!63 = !DILocation(line: 76, column: 4, scope: !7)
