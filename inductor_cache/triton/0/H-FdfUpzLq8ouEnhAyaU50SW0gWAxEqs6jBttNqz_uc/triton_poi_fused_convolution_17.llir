; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = or disjoint i32 %11, 16, !dbg !12
  %16 = or disjoint i32 %11, 20, !dbg !12
  %17 = or disjoint i32 %11, 24, !dbg !12
  %18 = or disjoint i32 %11, 28, !dbg !12
  %19 = or disjoint i32 %11, 32, !dbg !12
  %20 = or disjoint i32 %11, 36, !dbg !12
  %21 = or disjoint i32 %11, 40, !dbg !12
  %22 = or disjoint i32 %11, 44, !dbg !12
  %23 = or disjoint i32 %11, 48, !dbg !12
  %24 = or disjoint i32 %11, 52, !dbg !12
  %25 = or disjoint i32 %11, 56, !dbg !12
  %26 = or disjoint i32 %11, 60, !dbg !12
  %27 = or disjoint i32 %7, %10, !dbg !13
  %28 = or disjoint i32 %7, %11, !dbg !13
  %29 = or disjoint i32 %7, %12, !dbg !13
  %30 = or disjoint i32 %7, %13, !dbg !13
  %31 = or disjoint i32 %7, %14, !dbg !13
  %32 = or disjoint i32 %7, %15, !dbg !13
  %33 = or disjoint i32 %7, %16, !dbg !13
  %34 = or disjoint i32 %7, %17, !dbg !13
  %35 = or disjoint i32 %7, %18, !dbg !13
  %36 = or disjoint i32 %7, %19, !dbg !13
  %37 = or disjoint i32 %7, %20, !dbg !13
  %38 = or disjoint i32 %7, %21, !dbg !13
  %39 = or disjoint i32 %7, %22, !dbg !13
  %40 = or disjoint i32 %7, %23, !dbg !13
  %41 = or disjoint i32 %7, %24, !dbg !13
  %42 = or disjoint i32 %7, %25, !dbg !13
  %43 = or disjoint i32 %7, %26, !dbg !13
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %45 = shl i32 %44, 6, !dbg !15
  %46 = lshr i32 %8, 4, !dbg !16
  %47 = and i32 %46, 15, !dbg !16
  %48 = and i32 %8, 63, !dbg !16
  %49 = or disjoint i32 %45, %47, !dbg !17
  %50 = or disjoint i32 %49, 16, !dbg !17
  %51 = or disjoint i32 %49, 32, !dbg !17
  %52 = or disjoint i32 %49, 48, !dbg !17
  %53 = or disjoint i32 %45, %48, !dbg !17
  %54 = icmp slt i32 %49, 225, !dbg !18
  %55 = icmp slt i32 %50, 225, !dbg !18
  %56 = icmp slt i32 %51, 225, !dbg !18
  %57 = icmp slt i32 %52, 225, !dbg !18
  %58 = icmp slt i32 %53, 225, !dbg !18
  %.frozen = freeze i32 %27, !dbg !19
  %59 = sdiv i32 %.frozen, 256, !dbg !19
  %60 = mul i32 %59, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %60, !dbg !20
  %61 = shl i32 %49, 8, !dbg !21
  %62 = shl i32 %50, 8, !dbg !21
  %63 = shl i32 %51, 8, !dbg !21
  %64 = shl i32 %52, 8, !dbg !21
  %65 = mul i32 %59, 57600, !dbg !22
  %66 = add i32 %65, %.decomposed, !dbg !23
  %67 = add i32 %66, %61, !dbg !24
  %68 = add i32 %66, %62, !dbg !24
  %69 = add i32 %66, %63, !dbg !24
  %70 = add i32 %66, %64, !dbg !24
  %71 = sext i32 %67 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = sext i32 %68 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = sext i32 %69 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = sext i32 %70 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %54) #2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = bitcast i32 %82 to float, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %55) #2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %56) #2, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %57) #2, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !26
  %111 = bitcast i32 %107 to float, !dbg !26
  %112 = bitcast i32 %108 to float, !dbg !26
  %113 = bitcast i32 %109 to float, !dbg !26
  %114 = bitcast i32 %110 to float, !dbg !26
  %115 = sext i32 %.decomposed to i64, !dbg !27
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !27
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 true) #2, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !28
  %122 = bitcast i32 %118 to float, !dbg !28
  %123 = bitcast i32 %119 to float, !dbg !28
  %124 = bitcast i32 %120 to float, !dbg !28
  %125 = bitcast i32 %121 to float, !dbg !28
  %126 = fadd float %84, %122, !dbg !29
  %127 = fadd float %85, %123, !dbg !29
  %128 = fadd float %86, %124, !dbg !29
  %129 = fadd float %87, %125, !dbg !29
  %130 = fadd float %93, %122, !dbg !29
  %131 = fadd float %94, %123, !dbg !29
  %132 = fadd float %95, %124, !dbg !29
  %133 = fadd float %96, %125, !dbg !29
  %134 = fadd float %102, %122, !dbg !29
  %135 = fadd float %103, %123, !dbg !29
  %136 = fadd float %104, %124, !dbg !29
  %137 = fadd float %105, %125, !dbg !29
  %138 = fadd float %111, %122, !dbg !29
  %139 = fadd float %112, %123, !dbg !29
  %140 = fadd float %113, %124, !dbg !29
  %141 = fadd float %114, %125, !dbg !29
  %142 = mul i32 %28, 225, !dbg !30
  %143 = mul i32 %29, 225, !dbg !30
  %144 = mul i32 %30, 225, !dbg !30
  %145 = mul i32 %31, 225, !dbg !30
  %146 = mul i32 %32, 225, !dbg !30
  %147 = mul i32 %33, 225, !dbg !30
  %148 = mul i32 %34, 225, !dbg !30
  %149 = mul i32 %35, 225, !dbg !30
  %150 = mul i32 %36, 225, !dbg !30
  %151 = mul i32 %37, 225, !dbg !30
  %152 = mul i32 %38, 225, !dbg !30
  %153 = mul i32 %39, 225, !dbg !30
  %154 = mul i32 %40, 225, !dbg !30
  %155 = mul i32 %41, 225, !dbg !30
  %156 = mul i32 %42, 225, !dbg !30
  %157 = mul i32 %43, 225, !dbg !30
  %158 = add i32 %53, %142, !dbg !31
  %159 = add i32 %53, %143, !dbg !31
  %160 = add i32 %53, %144, !dbg !31
  %161 = add i32 %53, %145, !dbg !31
  %162 = add i32 %53, %146, !dbg !31
  %163 = add i32 %53, %147, !dbg !31
  %164 = add i32 %53, %148, !dbg !31
  %165 = add i32 %53, %149, !dbg !31
  %166 = add i32 %53, %150, !dbg !31
  %167 = add i32 %53, %151, !dbg !31
  %168 = add i32 %53, %152, !dbg !31
  %169 = add i32 %53, %153, !dbg !31
  %170 = add i32 %53, %154, !dbg !31
  %171 = add i32 %53, %155, !dbg !31
  %172 = add i32 %53, %156, !dbg !31
  %173 = add i32 %53, %157, !dbg !31
  %174 = sext i32 %158 to i64, !dbg !32
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !32
  %176 = sext i32 %159 to i64, !dbg !32
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !32
  %178 = sext i32 %160 to i64, !dbg !32
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !32
  %180 = sext i32 %161 to i64, !dbg !32
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !32
  %182 = sext i32 %162 to i64, !dbg !32
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !32
  %184 = sext i32 %163 to i64, !dbg !32
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !32
  %186 = sext i32 %164 to i64, !dbg !32
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !32
  %188 = sext i32 %165 to i64, !dbg !32
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !32
  %190 = sext i32 %166 to i64, !dbg !32
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !32
  %192 = sext i32 %167 to i64, !dbg !32
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !32
  %194 = sext i32 %168 to i64, !dbg !32
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !32
  %196 = sext i32 %169 to i64, !dbg !32
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !32
  %198 = sext i32 %170 to i64, !dbg !32
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %198, !dbg !32
  %200 = sext i32 %171 to i64, !dbg !32
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %200, !dbg !32
  %202 = sext i32 %172 to i64, !dbg !32
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !32
  %204 = sext i32 %173 to i64, !dbg !32
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !32
  %206 = shl i32 %8, 8, !dbg !33
  %207 = and i32 %206, 3840, !dbg !33
  %208 = or disjoint i32 %207, %47, !dbg !33
  %209 = and i32 %8, 255, !dbg !33
  %210 = lshr exact i32 %207, 4, !dbg !33
  %211 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %210, !dbg !33
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %208, !dbg !33
  %213 = bitcast float %126 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !33
  %214 = or disjoint i32 %208, 64, !dbg !33
  %215 = lshr i32 %214, 6, !dbg !33
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !33
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !33
  %218 = bitcast float %127 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !33
  %219 = or disjoint i32 %208, 128, !dbg !33
  %220 = lshr i32 %219, 6, !dbg !33
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !33
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !33
  %223 = bitcast float %128 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !33
  %224 = or disjoint i32 %208, 192, !dbg !33
  %225 = lshr i32 %224, 6, !dbg !33
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !33
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %224, !dbg !33
  %228 = bitcast float %129 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !33
  %229 = or disjoint i32 %208, 16, !dbg !33
  %230 = getelementptr float, ptr addrspace(3) %211, i32 %229, !dbg !33
  %231 = bitcast float %130 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !33
  %232 = or disjoint i32 %208, 80, !dbg !33
  %233 = lshr i32 %232, 6, !dbg !33
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !33
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !33
  %236 = bitcast float %131 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !33
  %237 = or disjoint i32 %208, 144, !dbg !33
  %238 = lshr i32 %237, 6, !dbg !33
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !33
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !33
  %241 = bitcast float %132 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !33
  %242 = or disjoint i32 %208, 208, !dbg !33
  %243 = lshr i32 %242, 6, !dbg !33
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !33
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %242, !dbg !33
  %246 = bitcast float %133 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !33
  %247 = or disjoint i32 %208, 32, !dbg !33
  %248 = getelementptr float, ptr addrspace(3) %211, i32 %247, !dbg !33
  %249 = bitcast float %134 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !33
  %250 = or disjoint i32 %208, 96, !dbg !33
  %251 = lshr i32 %250, 6, !dbg !33
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !33
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %250, !dbg !33
  %254 = bitcast float %135 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !33
  %255 = or disjoint i32 %208, 160, !dbg !33
  %256 = lshr i32 %255, 6, !dbg !33
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !33
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %255, !dbg !33
  %259 = bitcast float %136 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !33
  %260 = or disjoint i32 %208, 224, !dbg !33
  %261 = lshr i32 %260, 6, !dbg !33
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !33
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !33
  %264 = bitcast float %137 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !33
  %265 = or disjoint i32 %208, 48, !dbg !33
  %266 = getelementptr float, ptr addrspace(3) %211, i32 %265, !dbg !33
  %267 = bitcast float %138 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !33
  %268 = or disjoint i32 %208, 112, !dbg !33
  %269 = lshr i32 %268, 6, !dbg !33
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !33
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !33
  %272 = bitcast float %139 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !33
  %273 = or disjoint i32 %208, 176, !dbg !33
  %274 = lshr i32 %273, 6, !dbg !33
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !33
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %273, !dbg !33
  %277 = bitcast float %140 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #2, !dbg !33
  %278 = or disjoint i32 %208, 240, !dbg !33
  %279 = lshr i32 %278, 6, !dbg !33
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !33
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !33
  %282 = bitcast float %141 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %283 = lshr i32 %209, 6, !dbg !33
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !33
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %209, !dbg !33
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !33
  %287 = or disjoint i32 %209, 256, !dbg !33
  %288 = lshr i32 %287, 6, !dbg !33
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !33
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !33
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !33
  %292 = or disjoint i32 %209, 512, !dbg !33
  %293 = lshr i32 %292, 6, !dbg !33
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !33
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !33
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !33
  %297 = or disjoint i32 %209, 768, !dbg !33
  %298 = lshr i32 %297, 6, !dbg !33
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !33
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !33
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !33
  %302 = or disjoint i32 %209, 1024, !dbg !33
  %303 = lshr i32 %302, 6, !dbg !33
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !33
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !33
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !33
  %307 = or disjoint i32 %209, 1280, !dbg !33
  %308 = lshr i32 %307, 6, !dbg !33
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !33
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !33
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !33
  %312 = or disjoint i32 %209, 1536, !dbg !33
  %313 = lshr i32 %312, 6, !dbg !33
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !33
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !33
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !33
  %317 = or disjoint i32 %209, 1792, !dbg !33
  %318 = lshr i32 %317, 6, !dbg !33
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !33
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !33
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !33
  %322 = or disjoint i32 %209, 2048, !dbg !33
  %323 = lshr i32 %322, 6, !dbg !33
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !33
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !33
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !33
  %327 = or disjoint i32 %209, 2304, !dbg !33
  %328 = lshr i32 %327, 6, !dbg !33
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !33
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !33
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !33
  %332 = or disjoint i32 %209, 2560, !dbg !33
  %333 = lshr i32 %332, 6, !dbg !33
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !33
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !33
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !33
  %337 = or disjoint i32 %209, 2816, !dbg !33
  %338 = lshr i32 %337, 6, !dbg !33
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !33
  %340 = getelementptr inbounds float, ptr addrspace(3) %339, i32 %337, !dbg !33
  %341 = load i32, ptr addrspace(3) %340, align 4, !dbg !33
  %342 = or disjoint i32 %209, 3072, !dbg !33
  %343 = lshr i32 %342, 6, !dbg !33
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !33
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %342, !dbg !33
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !33
  %347 = or disjoint i32 %209, 3328, !dbg !33
  %348 = lshr i32 %347, 6, !dbg !33
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !33
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %347, !dbg !33
  %351 = load i32, ptr addrspace(3) %350, align 4, !dbg !33
  %352 = or disjoint i32 %209, 3584, !dbg !33
  %353 = lshr i32 %352, 6, !dbg !33
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !33
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !33
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !33
  %357 = or disjoint i32 %209, 3840, !dbg !33
  %358 = lshr i32 %357, 6, !dbg !33
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !33
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %357, !dbg !33
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %175, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %177, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %296, ptr addrspace(1) %179, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %301, ptr addrspace(1) %181, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %306, ptr addrspace(1) %183, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %185, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %316, ptr addrspace(1) %187, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %321, ptr addrspace(1) %189, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %191, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %331, ptr addrspace(1) %193, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %195, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %341, ptr addrspace(1) %197, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %199, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %351, ptr addrspace(1) %201, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %203, i1 %58) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %205, i1 %58) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmhlmc52zyib5iy2h7jceimss3u6ptx7tbrr26x3xtts5aapym7.py", directory: "inductor_cache/fm")
!4 = !{ptr @triton_poi_fused_convolution_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_17", linkageName: "triton_poi_fused_convolution_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 45, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
