; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = and i32 %15, 12, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 32, !dbg !13
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 4, !dbg !16
  %23 = or disjoint i32 %22, %16, !dbg !17
  %24 = icmp slt i32 %23, 2048, !dbg !18
  %25 = shl i32 %17, 11, !dbg !19
  %26 = shl i32 %18, 11, !dbg !19
  %27 = add i32 %23, %25, !dbg !20
  %28 = add i32 %23, %26, !dbg !20
  %29 = sext i32 %27 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = and i1 %19, %24, !dbg !22
  %34 = and i1 %20, %24, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !23
  %37 = sext i32 %23 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #4, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !28
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %24) #4, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %24) #4, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !32
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %33) #4, !dbg !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %34) #4, !dbg !33
  %58 = fadd float %46, 0x3EE4F8B580000000, !dbg !34
  %59 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %60 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %61 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %62, 0, !dbg !35
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %63, 0, !dbg !35
  br i1 %.not.i, label %69, label %64, !dbg !35

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !35

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

69:                                               ; preds = %9
  br i1 %.not1.i, label %72, label %70, !dbg !35

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !35
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i17 = icmp eq i32 %74, 0, !dbg !35
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i20 = icmp eq i32 %75, 0, !dbg !35
  br i1 %.not.i17, label %81, label %76, !dbg !35

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %79, label %77, !dbg !35

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit21, !dbg !35

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit21, !dbg !35

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %84, label %82, !dbg !35

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit21, !dbg !35

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit21, !dbg !35

__nv_sqrtf.exit21:                                ; preds = %77, %79, %82, %84
  %.0.i19 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !35
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i22 = icmp eq i32 %86, 0, !dbg !35
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i25 = icmp eq i32 %87, 0, !dbg !35
  br i1 %.not.i22, label %93, label %88, !dbg !35

88:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %91, label %89, !dbg !35

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit26, !dbg !35

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit26, !dbg !35

93:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %96, label %94, !dbg !35

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit26, !dbg !35

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit26, !dbg !35

__nv_sqrtf.exit26:                                ; preds = %89, %91, %94, %96
  %.0.i24 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !35
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i27 = icmp eq i32 %98, 0, !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i30 = icmp eq i32 %99, 0, !dbg !35
  br i1 %.not.i27, label %105, label %100, !dbg !35

100:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %103, label %101, !dbg !35

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit31, !dbg !35

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit31, !dbg !35

105:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %108, label %106, !dbg !35

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit31, !dbg !35

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit31, !dbg !35

__nv_sqrtf.exit31:                                ; preds = %101, %103, %106, %108
  %.0.i29 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %112 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %115 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %117 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !31
  %134 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !29
  %135 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !29
  %137 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !29
  %138 = lshr i32 %12, 4, !dbg !36
  %139 = and i32 %138, 7, !dbg !36
  %140 = or disjoint i32 %139, %22, !dbg !17
  %141 = or disjoint i32 %140, 8, !dbg !17
  %142 = icmp slt i32 %141, 2048, !dbg !18
  %143 = and i32 %15, 60, !dbg !12
  %144 = or disjoint i32 %11, %143, !dbg !13
  %145 = icmp slt i32 %144, 64, !dbg !14
  %146 = and i1 %145, %142, !dbg !22
  %147 = icmp slt i32 %140, 2048, !dbg !18
  %148 = and i1 %145, %147, !dbg !22
  %.frozen = freeze i32 %144, !dbg !37
  %149 = sdiv i32 %.frozen, 16, !dbg !37
  %150 = mul i32 %149, 16, !dbg !38
  %.decomposed = sub i32 %.frozen, %150, !dbg !38
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !39
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !39
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !39
  %155 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !25
  %156 = insertelement <4 x i32> %155, i32 %113, i64 1, !dbg !25
  %157 = insertelement <4 x i32> %156, i32 %115, i64 2, !dbg !25
  %158 = insertelement <4 x i32> %157, i32 %117, i64 3, !dbg !25
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !25
  %160 = shufflevector <4 x float> %159, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %161 = insertelement <8 x i32> poison, i32 %110, i64 0, !dbg !23
  %162 = insertelement <8 x i32> %161, i32 %112, i64 1, !dbg !23
  %163 = insertelement <8 x i32> %162, i32 %114, i64 2, !dbg !23
  %164 = insertelement <8 x i32> %163, i32 %116, i64 3, !dbg !23
  %165 = insertelement <8 x i32> %164, i32 %118, i64 4, !dbg !23
  %166 = insertelement <8 x i32> %165, i32 %119, i64 5, !dbg !23
  %167 = insertelement <8 x i32> %166, i32 %120, i64 6, !dbg !23
  %168 = insertelement <8 x i32> %167, i32 %121, i64 7, !dbg !23
  %169 = bitcast <8 x i32> %168 to <8 x float>, !dbg !23
  %170 = fsub <8 x float> %169, %160, !dbg !40
  %171 = insertelement <8 x i32> poison, i32 %122, i64 0, !dbg !33
  %172 = insertelement <8 x i32> %171, i32 %123, i64 1, !dbg !33
  %173 = insertelement <8 x i32> %172, i32 %124, i64 2, !dbg !33
  %174 = insertelement <8 x i32> %173, i32 %125, i64 3, !dbg !33
  %175 = insertelement <8 x i32> %174, i32 %126, i64 4, !dbg !33
  %176 = insertelement <8 x i32> %175, i32 %127, i64 5, !dbg !33
  %177 = insertelement <8 x i32> %176, i32 %128, i64 6, !dbg !33
  %178 = insertelement <8 x i32> %177, i32 %129, i64 7, !dbg !33
  %179 = bitcast <8 x i32> %178 to <8 x float>, !dbg !33
  %180 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !31
  %181 = insertelement <4 x i32> %180, i32 %131, i64 1, !dbg !31
  %182 = insertelement <4 x i32> %181, i32 %132, i64 2, !dbg !31
  %183 = insertelement <4 x i32> %182, i32 %133, i64 3, !dbg !31
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !31
  %185 = shufflevector <4 x float> %184, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %186 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !29
  %187 = insertelement <4 x i32> %186, i32 %135, i64 1, !dbg !29
  %188 = insertelement <4 x i32> %187, i32 %136, i64 2, !dbg !29
  %189 = insertelement <4 x i32> %188, i32 %137, i64 3, !dbg !29
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !29
  %191 = shufflevector <4 x float> %190, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %192 = insertelement <8 x float> poison, float %154, i64 0, !dbg !41
  %193 = insertelement <8 x float> %192, float %153, i64 1, !dbg !41
  %194 = insertelement <8 x float> %193, float %152, i64 2, !dbg !41
  %195 = insertelement <8 x float> %194, float %151, i64 3, !dbg !41
  %196 = shufflevector <8 x float> %195, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %197 = fmul <8 x float> %170, %196, !dbg !41
  %198 = fmul <8 x float> %197, %191, !dbg !42
  %199 = fadd <8 x float> %198, %185, !dbg !43
  %200 = fadd <8 x float> %199, %179, !dbg !44
  %201 = fcmp olt <8 x float> %200, zeroinitializer, !dbg !45
  %202 = extractelement <8 x i1> %201, i64 7, !dbg !49
  %203 = extractelement <8 x float> %200, i64 7, !dbg !49
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !49
  %205 = extractelement <8 x i1> %201, i64 6, !dbg !49
  %206 = extractelement <8 x float> %200, i64 6, !dbg !49
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !49
  %208 = extractelement <8 x i1> %201, i64 5, !dbg !49
  %209 = extractelement <8 x float> %200, i64 5, !dbg !49
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !49
  %211 = extractelement <8 x i1> %201, i64 4, !dbg !49
  %212 = extractelement <8 x float> %200, i64 4, !dbg !49
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !49
  %214 = extractelement <8 x i1> %201, i64 3, !dbg !49
  %215 = extractelement <8 x float> %200, i64 3, !dbg !49
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !49
  %217 = extractelement <8 x i1> %201, i64 2, !dbg !49
  %218 = extractelement <8 x float> %200, i64 2, !dbg !49
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !49
  %220 = extractelement <8 x i1> %201, i64 1, !dbg !49
  %221 = extractelement <8 x float> %200, i64 1, !dbg !49
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !49
  %223 = extractelement <8 x i1> %201, i64 0, !dbg !49
  %224 = extractelement <8 x float> %200, i64 0, !dbg !49
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !49
  %226 = shl i32 %140, 4, !dbg !50
  %227 = shl i32 %141, 4, !dbg !50
  %228 = shl i32 %149, 15, !dbg !51
  %229 = add i32 %228, %.decomposed, !dbg !52
  %230 = add i32 %229, %226, !dbg !53
  %231 = add i32 %229, %227, !dbg !53
  %232 = sext i32 %230 to i64, !dbg !54
  %233 = getelementptr float, ptr addrspace(1) %6, i64 %232, !dbg !54
  %234 = sext i32 %231 to i64, !dbg !54
  %235 = getelementptr float, ptr addrspace(1) %6, i64 %234, !dbg !54
  %236 = shl i32 %12, 8, !dbg !55
  %237 = and i32 %236, 768, !dbg !55
  %238 = or disjoint i32 %237, %14, !dbg !55
  %239 = and i32 %15, 508, !dbg !55
  %240 = lshr exact i32 %237, 2, !dbg !55
  %241 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %240, !dbg !55
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %238, !dbg !55
  %243 = bitcast float %204 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !55
  %244 = or disjoint i32 %238, 64, !dbg !55
  %245 = lshr i32 %244, 4, !dbg !55
  %246 = and i32 %245, 52, !dbg !55
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !55
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %244, !dbg !55
  %249 = bitcast float %207 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !55
  %250 = or disjoint i32 %238, 128, !dbg !55
  %251 = lshr i32 %250, 4, !dbg !55
  %252 = and i32 %251, 56, !dbg !55
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !55
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !55
  %255 = bitcast float %210 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !55
  %256 = or disjoint i32 %238, 192, !dbg !55
  %257 = lshr i32 %256, 4, !dbg !55
  %258 = and i32 %257, 60, !dbg !55
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !55
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %256, !dbg !55
  %261 = bitcast float %213 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !55
  %262 = or disjoint i32 %238, 32, !dbg !55
  %263 = getelementptr float, ptr addrspace(3) %241, i32 %262, !dbg !55
  %264 = bitcast float %216 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !55
  %265 = or disjoint i32 %238, 96, !dbg !55
  %266 = lshr i32 %265, 4, !dbg !55
  %267 = and i32 %266, 52, !dbg !55
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !55
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %265, !dbg !55
  %270 = bitcast float %219 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !55
  %271 = or disjoint i32 %238, 160, !dbg !55
  %272 = lshr i32 %271, 4, !dbg !55
  %273 = and i32 %272, 56, !dbg !55
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !55
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %271, !dbg !55
  %276 = bitcast float %222 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !55
  %277 = or disjoint i32 %238, 224, !dbg !55
  %278 = lshr i32 %277, 4, !dbg !55
  %279 = and i32 %278, 60, !dbg !55
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !55
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %277, !dbg !55
  %282 = bitcast float %225 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %283 = lshr i32 %15, 4, !dbg !55
  %284 = and i32 %283, 28, !dbg !55
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !55
  %286 = getelementptr inbounds float, ptr addrspace(3) %285, i32 %239, !dbg !55
  %287 = or disjoint i32 %239, 512, !dbg !55
  %288 = lshr i32 %287, 4, !dbg !55
  %289 = and i32 %288, 60, !dbg !55
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !55
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %287, !dbg !55
  %292 = load <4 x i32>, ptr addrspace(3) %291, align 16, !dbg !55
  %.extract = load i32, ptr addrspace(3) %286, align 16, !dbg !55
  %293 = getelementptr inbounds i8, ptr addrspace(3) %286, i32 4, !dbg !55
  %.extract10 = load i32, ptr addrspace(3) %293, align 4, !dbg !55
  %294 = getelementptr inbounds i8, ptr addrspace(3) %286, i32 8, !dbg !55
  %.extract11 = load i32, ptr addrspace(3) %294, align 8, !dbg !55
  %295 = getelementptr inbounds i8, ptr addrspace(3) %286, i32 12, !dbg !55
  %.extract12 = load i32, ptr addrspace(3) %295, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %233, i1 %148) #4, !dbg !55
  %.extract13 = extractelement <4 x i32> %292, i64 0, !dbg !55
  %.extract14 = extractelement <4 x i32> %292, i64 1, !dbg !55
  %.extract15 = extractelement <4 x i32> %292, i64 2, !dbg !55
  %.extract16 = extractelement <4 x i32> %292, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %235, i1 %146) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm3oui2b5ywiwntv3ceqqglffe3vyu2owhdht7efrl3gmkxp5ev4.py", directory: "inductor_cache/m3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 46, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 26, column: 44, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 51, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 52, column: 33, scope: !7)
!51 = !DILocation(line: 52, column: 44, scope: !7)
!52 = !DILocation(line: 52, column: 30, scope: !7)
!53 = !DILocation(line: 52, column: 38, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 56, scope: !7)
!56 = !DILocation(line: 52, column: 4, scope: !7)
