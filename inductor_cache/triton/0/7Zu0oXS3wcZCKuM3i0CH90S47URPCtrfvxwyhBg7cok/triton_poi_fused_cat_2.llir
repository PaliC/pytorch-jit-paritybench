; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 1024, !dbg !14
  %18 = sdiv i32 %16, 16, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %19 = sdiv i32 %.frozen, 256, !dbg !16
  %20 = mul i32 %19, 256, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = shl nsw i32 %19, 6, !dbg !18
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !21
  %26 = insertelement <2 x i32> %25, i32 %18, i64 1, !dbg !21
  %27 = srem <2 x i32> %26, splat (i32 16), !dbg !21
  %28 = extractelement <2 x i32> %27, i64 1, !dbg !22
  %29 = icmp slt i32 %28, 4, !dbg !23
  %30 = and i1 %17, %29, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #1, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = sext i32 %28 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %30, i32 0, i1 %30) #1, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %30, i32 0, i1 %30) #1, !dbg !27
  %38 = and i32 %28, -4, !dbg !28
  %39 = icmp eq i32 %38, 4, !dbg !28
  %40 = insertelement <2 x i32> <i32 poison, i32 -4>, i32 %21, i64 0, !dbg !29
  %41 = add nsw <2 x i32> %40, %27, !dbg !29
  %42 = extractelement <2 x i32> %41, i64 1, !dbg !30
  %43 = shl nsw i32 %42, 4, !dbg !30
  %44 = extractelement <2 x i32> %41, i64 0, !dbg !31
  %45 = add nsw i32 %44, %43, !dbg !32
  %46 = sext i32 %45 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  %48 = and i1 %17, %39, !dbg !34
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !35
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !35
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !35
  %52 = sext i32 %42 to i64, !dbg !36
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !36
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48) #1, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48) #1, !dbg !37
  %56 = icmp eq i32 %38, 8, !dbg !38
  %57 = add nsw i32 %28, -8, !dbg !39
  %58 = shl nsw i32 %57, 4, !dbg !40
  %59 = add nsw i32 %44, %58, !dbg !41
  %60 = sext i32 %59 to i64, !dbg !42
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !42
  %62 = and i1 %17, %56, !dbg !43
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #1, !dbg !44
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !44
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !44
  %66 = sext i32 %57 to i64, !dbg !45
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !45
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %62, i32 0, i1 %62) #1, !dbg !46
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %62, i32 0, i1 %62) #1, !dbg !46
  %70 = icmp sgt i32 %28, 11, !dbg !22
  %71 = add nsw i32 %28, -12, !dbg !47
  %72 = shl nsw i32 %71, 4, !dbg !48
  %73 = add nsw i32 %44, %72, !dbg !31
  %74 = sext i32 %73 to i64, !dbg !49
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !49
  %76 = and i1 %17, %70, !dbg !50
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #1, !dbg !51
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !51
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !51
  %80 = sext i32 %71 to i64, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %80, !dbg !52
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %76, i32 0, i1 %76) #1, !dbg !53
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %76, i32 0, i1 %76) #1, !dbg !53
  %84 = insertelement <8 x i32> poison, i32 %79, i64 0, !dbg !51
  %85 = insertelement <8 x i32> %84, i32 %78, i64 1, !dbg !51
  %86 = insertelement <8 x i32> %85, i32 %65, i64 2, !dbg !51
  %87 = insertelement <8 x i32> %86, i32 %64, i64 3, !dbg !51
  %88 = insertelement <8 x i32> %87, i32 %51, i64 4, !dbg !51
  %89 = insertelement <8 x i32> %88, i32 %50, i64 5, !dbg !51
  %90 = insertelement <8 x i32> %89, i32 %33, i64 6, !dbg !51
  %91 = insertelement <8 x i32> %90, i32 %32, i64 7, !dbg !51
  %92 = bitcast <8 x i32> %91 to <8 x float>, !dbg !51
  %93 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !53
  %94 = insertelement <8 x i32> %93, i32 %82, i64 1, !dbg !53
  %95 = insertelement <8 x i32> %94, i32 %69, i64 2, !dbg !53
  %96 = insertelement <8 x i32> %95, i32 %68, i64 3, !dbg !53
  %97 = insertelement <8 x i32> %96, i32 %55, i64 4, !dbg !53
  %98 = insertelement <8 x i32> %97, i32 %54, i64 5, !dbg !53
  %99 = insertelement <8 x i32> %98, i32 %37, i64 6, !dbg !53
  %100 = insertelement <8 x i32> %99, i32 %36, i64 7, !dbg !53
  %101 = bitcast <8 x i32> %100 to <8 x float>, !dbg !53
  %102 = fadd <8 x float> %92, %101, !dbg !54
  %103 = fcmp olt <8 x float> %102, zeroinitializer, !dbg !55
  %104 = extractelement <8 x i1> %103, i64 7, !dbg !59
  %105 = extractelement <8 x float> %102, i64 7, !dbg !59
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !59
  %107 = extractelement <8 x i1> %103, i64 6, !dbg !59
  %108 = extractelement <8 x float> %102, i64 6, !dbg !59
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !59
  %110 = extractelement <8 x i1> %103, i64 5, !dbg !61
  %111 = extractelement <8 x float> %102, i64 5, !dbg !61
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !61
  %113 = extractelement <8 x i1> %103, i64 4, !dbg !61
  %114 = extractelement <8 x float> %102, i64 4, !dbg !61
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !61
  %116 = extractelement <8 x i1> %103, i64 3, !dbg !63
  %117 = extractelement <8 x float> %102, i64 3, !dbg !63
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !63
  %119 = extractelement <8 x i1> %103, i64 2, !dbg !63
  %120 = extractelement <8 x float> %102, i64 2, !dbg !63
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !63
  %122 = extractelement <8 x i1> %103, i64 1, !dbg !65
  %123 = extractelement <8 x float> %102, i64 1, !dbg !65
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !65
  %125 = extractelement <8 x i1> %103, i64 0, !dbg !65
  %126 = extractelement <8 x float> %102, i64 0, !dbg !65
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !65
  %128 = select i1 %70, float %124, float 0.000000e+00, !dbg !66
  %129 = select i1 %70, float %127, float 0.000000e+00, !dbg !66
  %130 = select i1 %56, float %118, float %128, !dbg !67
  %131 = select i1 %56, float %121, float %129, !dbg !67
  %132 = select i1 %39, float %112, float %130, !dbg !67
  %133 = select i1 %39, float %115, float %131, !dbg !67
  %134 = select i1 %29, float %106, float %132, !dbg !67
  %135 = select i1 %29, float %109, float %133, !dbg !67
  %136 = sext i32 %16 to i64, !dbg !68
  %137 = getelementptr float, ptr addrspace(1) %8, i64 %136, !dbg !68
  %138 = bitcast float %134 to i32, !dbg !69
  %139 = bitcast float %135 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %139, ptr addrspace(1) %137, i1 %17) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdjyufezpzhbzw4evec6oknlonbzhfq5h44agn7kzzfm4bxsulsn.py", directory: "inductor_cache/dj")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 62, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 43, column: 20, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 44, column: 40, scope: !7)
!31 = !DILocation(line: 65, column: 54, scope: !7)
!32 = !DILocation(line: 44, column: 53, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 69, scope: !7)
!35 = !DILocation(line: 44, column: 61, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 43, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 55, column: 47, scope: !7)
!40 = !DILocation(line: 55, column: 40, scope: !7)
!41 = !DILocation(line: 55, column: 53, scope: !7)
!42 = !DILocation(line: 55, column: 31, scope: !7)
!43 = !DILocation(line: 55, column: 69, scope: !7)
!44 = !DILocation(line: 55, column: 61, scope: !7)
!45 = !DILocation(line: 56, column: 31, scope: !7)
!46 = !DILocation(line: 56, column: 43, scope: !7)
!47 = !DILocation(line: 65, column: 48, scope: !7)
!48 = !DILocation(line: 65, column: 40, scope: !7)
!49 = !DILocation(line: 65, column: 31, scope: !7)
!50 = !DILocation(line: 65, column: 70, scope: !7)
!51 = !DILocation(line: 65, column: 62, scope: !7)
!52 = !DILocation(line: 66, column: 31, scope: !7)
!53 = !DILocation(line: 66, column: 44, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 69, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 37, column: 40, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !62)
!62 = !DILocation(line: 48, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !64)
!64 = !DILocation(line: 59, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!66 = !DILocation(line: 71, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 75, column: 25, scope: !7)
!69 = !DILocation(line: 75, column: 37, scope: !7)
!70 = !DILocation(line: 75, column: 4, scope: !7)
