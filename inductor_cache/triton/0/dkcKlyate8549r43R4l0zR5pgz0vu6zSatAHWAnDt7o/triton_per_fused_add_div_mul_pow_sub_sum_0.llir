; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_mul_pow_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = and i32 %4, 63, !dbg !10
  %8 = and i32 %4, 48, !dbg !11
  %9 = icmp ne i32 %8, 48, !dbg !11
  %.tr = trunc i32 %4 to i8, !dbg !12
  %.lhs.trunc = shl i8 %.tr, 2, !dbg !12
  %10 = udiv i8 %.lhs.trunc, 12, !dbg !13
  %11 = mul i8 %10, 12, !dbg !12
  %.decomposed = sub i8 %.lhs.trunc, %11, !dbg !12
  %.zext = zext nneg i8 %.decomposed to i32, !dbg !12
  %.zext2 = zext nneg i8 %10 to i32, !dbg !13
  %.lhs.trunc3 = trunc nuw nsw i32 %7 to i8, !dbg !14
  %12 = udiv i8 %.lhs.trunc3, 3, !dbg !15
  %13 = mul i8 %12, 3, !dbg !14
  %.decomposed20 = sub i8 %.lhs.trunc3, %13, !dbg !14
  %.zext4 = zext nneg i8 %.decomposed20 to i32, !dbg !14
  %14 = trunc nuw nsw i32 %7 to i8, !dbg !14
  %.lhs.trunc5 = or disjoint i8 %14, 64, !dbg !14
  %15 = udiv i8 %.lhs.trunc5, 3, !dbg !15
  %16 = mul i8 %15, 3, !dbg !14
  %.decomposed21 = sub i8 %.lhs.trunc5, %16, !dbg !14
  %.zext6 = zext nneg i8 %.decomposed21 to i32, !dbg !14
  %17 = trunc nuw nsw i32 %7 to i8, !dbg !14
  %.lhs.trunc7 = or disjoint i8 %17, -128, !dbg !14
  %18 = udiv i8 %.lhs.trunc7, 3, !dbg !15
  %19 = mul i8 %18, 3, !dbg !14
  %.decomposed22 = sub i8 %.lhs.trunc7, %19, !dbg !14
  %.zext8 = zext nneg i8 %.decomposed22 to i32, !dbg !14
  %20 = trunc i32 %4 to i8, !dbg !14
  %.lhs.trunc9 = or i8 %20, -64, !dbg !14
  %21 = udiv i8 %.lhs.trunc9, 3, !dbg !15
  %22 = mul i8 %21, 3, !dbg !14
  %.decomposed23 = sub i8 %.lhs.trunc9, %22, !dbg !14
  %.zext10 = zext nneg i8 %.decomposed23 to i32, !dbg !14
  %.zext18 = zext nneg i8 %21 to i32, !dbg !15
  %23 = add nuw nsw i32 %.zext, 4, !dbg !16
  %24 = shl nuw nsw i32 %.zext2, 4, !dbg !17
  %25 = add nuw nsw i32 %23, %24, !dbg !18
  %26 = zext nneg i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = or disjoint i32 %24, %.zext, !dbg !21
  %34 = zext nneg i32 %33 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = add nuw nsw i32 %.zext4, 1, !dbg !24
  %42 = add nuw nsw i32 %.zext6, 1, !dbg !24
  %43 = add nuw nsw i32 %.zext8, 1, !dbg !24
  %44 = add nuw nsw i32 %.zext10, 1, !dbg !24
  %45 = shl nuw nsw i8 %12, 2, !dbg !25
  %46 = zext nneg i8 %45 to i32, !dbg !25
  %47 = shl nuw i8 %15, 2, !dbg !25
  %48 = zext i8 %47 to i32, !dbg !25
  %49 = shl nuw i8 %18, 2, !dbg !25
  %50 = zext i8 %49 to i32, !dbg !25
  %51 = shl nuw nsw i32 %.zext18, 2, !dbg !25
  %52 = add nuw nsw i32 %41, %46, !dbg !26
  %53 = add nuw nsw i32 %42, %48, !dbg !26
  %54 = add nuw nsw i32 %43, %50, !dbg !26
  %55 = add nuw nsw i32 %44, %51, !dbg !26
  %56 = zext nneg i32 %52 to i64, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !27
  %58 = zext nneg i32 %53 to i64, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !27
  %60 = zext nneg i32 %54 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !27
  %62 = zext nneg i32 %55 to i64, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 true, i32 0, i1 true) #3, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 true, i32 0, i1 true) #3, !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 true, i32 0, i1 true) #3, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 false, i32 0, i1 false) #3, !dbg !28
  %69 = or disjoint i32 %46, %.zext4, !dbg !29
  %70 = or disjoint i32 %48, %.zext6, !dbg !29
  %71 = or disjoint i32 %50, %.zext8, !dbg !29
  %72 = or disjoint i32 %51, %.zext10, !dbg !29
  %73 = zext nneg i32 %69 to i64, !dbg !30
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !30
  %75 = zext nneg i32 %70 to i64, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !30
  %77 = zext nneg i32 %71 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !30
  %79 = zext nneg i32 %72 to i64, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 true, i32 0, i1 true) #3, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 true, i32 0, i1 true) #3, !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 true, i32 0, i1 true) #3, !dbg !31
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 false, i32 0, i1 false) #3, !dbg !31
  %86 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %87 = insertelement <2 x i32> %86, i32 %30, i64 1, !dbg !20
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !20
  %89 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !23
  %90 = insertelement <2 x i32> %89, i32 %38, i64 1, !dbg !23
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !23
  %92 = fsub <2 x float> %88, %91, !dbg !32
  %93 = fmul <2 x float> %92, %92, !dbg !33
  %94 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %95 = insertelement <2 x i32> %94, i32 %31, i64 1, !dbg !20
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !20
  %97 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %98 = insertelement <2 x i32> %97, i32 %39, i64 1, !dbg !23
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !23
  %100 = fsub <2 x float> %96, %99, !dbg !32
  %101 = fmul <2 x float> %100, %100, !dbg !33
  %shift = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %102 = fadd <2 x float> %93, %shift, !dbg !34
  %shift19 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %103 = fadd <2 x float> %shift19, %102, !dbg !34
  %104 = fadd <2 x float> %101, %103, !dbg !34
  %105 = extractelement <2 x float> %104, i64 0, !dbg !34
  %106 = select i1 %9, float %105, float 0.000000e+00, !dbg !34
  %107 = bitcast float %106 to i32, !dbg !39
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !39
  %109 = bitcast i32 %108 to float, !dbg !39
  %110 = fadd float %106, %109, !dbg !34
  %111 = bitcast float %110 to i32, !dbg !39
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !39
  %113 = bitcast i32 %112 to float, !dbg !39
  %114 = fadd float %110, %113, !dbg !34
  %115 = bitcast float %114 to i32, !dbg !39
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !39
  %117 = bitcast i32 %116 to float, !dbg !39
  %118 = fadd float %114, %117, !dbg !34
  %119 = bitcast float %118 to i32, !dbg !39
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !39
  %121 = bitcast i32 %120 to float, !dbg !39
  %122 = fadd float %118, %121, !dbg !34
  %123 = bitcast float %122 to i32, !dbg !39
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !39
  %125 = bitcast i32 %124 to float, !dbg !39
  %126 = fadd float %122, %125, !dbg !34
  %127 = icmp eq i32 %5, 0, !dbg !39
  %128 = and i32 %6, 1, !dbg !39
  %129 = zext nneg i32 %128 to i64, !dbg !39
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !39
  %131 = bitcast float %126 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 %127) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %132 = icmp slt i32 %4, 2, !dbg !39
  %133 = sext i32 %4 to i64, !dbg !39
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !39
  %135 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #3, !dbg !39
  %136 = bitcast i32 %135 to float, !dbg !39
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !39
  %138 = bitcast i32 %137 to float, !dbg !39
  %139 = fadd float %136, %138, !dbg !34
  %140 = and i32 %4, 1, !dbg !39
  %141 = icmp eq i32 %140, 0, !dbg !39
  %142 = and i1 %132, %141, !dbg !39
  %143 = bitcast float %139 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %143, i1 %142) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %144 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %145 = fsub float %66, %83, !dbg !40
  %146 = fmul float %145, %145, !dbg !41
  %147 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !28
  %148 = insertelement <2 x i32> %147, i32 %67, i64 1, !dbg !28
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !28
  %150 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !31
  %151 = insertelement <2 x i32> %150, i32 %84, i64 1, !dbg !31
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !31
  %153 = fsub <2 x float> %149, %152, !dbg !40
  %154 = fmul <2 x float> %153, %153, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %155 = extractelement <2 x float> %154, i64 0, !dbg !44
  %156 = fadd float %155, %146, !dbg !44
  %157 = extractelement <2 x float> %154, i64 1, !dbg !44
  %158 = fadd float %156, %157, !dbg !44
  %159 = bitcast float %158 to i32, !dbg !42
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !42
  %161 = bitcast i32 %160 to float, !dbg !42
  %162 = fadd float %158, %161, !dbg !44
  %163 = bitcast float %162 to i32, !dbg !42
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = fadd float %162, %165, !dbg !44
  %167 = bitcast float %166 to i32, !dbg !42
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = fadd float %166, %169, !dbg !44
  %171 = bitcast float %170 to i32, !dbg !42
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !42
  %173 = bitcast i32 %172 to float, !dbg !42
  %174 = fadd float %170, %173, !dbg !44
  %175 = bitcast float %174 to i32, !dbg !42
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !42
  %177 = bitcast i32 %176 to float, !dbg !42
  %178 = fadd float %174, %177, !dbg !44
  %179 = bitcast float %178 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %179, i1 %127) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %180 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #3, !dbg !42
  %181 = bitcast i32 %180 to float, !dbg !42
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !42
  %183 = bitcast i32 %182 to float, !dbg !42
  %184 = fadd float %181, %183, !dbg !44
  %185 = bitcast float %184 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %185, i1 %142) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %186 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %187 = fmul float %144, 0x3FB5555560000000, !dbg !45
  %188 = fmul float %186, 0x3FB5555560000000, !dbg !46
  %189 = fadd float %187, %188, !dbg !47
  %190 = fmul float %189, 2.000000e+00, !dbg !48
  %191 = fmul float %190, 2.500000e-01, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %192 = icmp eq i32 %7, 0, !dbg !51
  %193 = bitcast float %191 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %0, i1 %192) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr4vciir7373x5oqgqvwt7jscu4ioqd4w3uryi6rm2v3jstfpvgl.py", directory: "inductor_cache/r4")
!4 = !{ptr @triton_per_fused_add_div_mul_pow_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mul_pow_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mul_pow_sub_sum_0", linkageName: "triton_per_fused_add_div_mul_pow_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 29, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 32, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 42, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 34, scope: !7)
!25 = !DILocation(line: 35, column: 41, scope: !7)
!26 = !DILocation(line: 35, column: 39, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 46, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 42, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 41, column: 24, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 20, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !43)
!43 = !DILocation(line: 46, column: 26, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 4, scope: !7)
!51 = !DILocation(line: 56, column: 71, scope: !7)
!52 = !DILocation(line: 56, column: 4, scope: !7)
