; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %8, %10, !dbg !13
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %12, 1536, !dbg !14
  %15 = icmp slt i32 %13, 1536, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = icmp slt i32 %16, 9, !dbg !16
  %18 = sdiv i32 %12, 384, !dbg !17
  %19 = sdiv i32 %13, 384, !dbg !17
  %20 = mul i32 %12, 9, !dbg !18
  %21 = mul i32 %13, 9, !dbg !18
  %22 = add i32 %20, %16, !dbg !19
  %23 = add i32 %21, %16, !dbg !19
  %24 = sext i32 %22 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = and i1 %17, %14, !dbg !21
  %29 = and i1 %17, %15, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %28) #4, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %29) #4, !dbg !22
  %32 = mul nsw i32 %18, 9, !dbg !23
  %33 = mul nsw i32 %19, 9, !dbg !23
  %34 = add i32 %32, %16, !dbg !24
  %35 = add i32 %33, %16, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %28) #4, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %29) #4, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = fadd float %41, 0x3E112E0BE0000000, !dbg !27
  %45 = fadd float %43, 0x3E112E0BE0000000, !dbg !27
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %46, 0, !dbg !28
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i = icmp eq i32 %47, 0, !dbg !28
  br i1 %.not.i, label %53, label %48, !dbg !28

48:                                               ; preds = %6
  br i1 %.not1.i, label %51, label %49, !dbg !28

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

53:                                               ; preds = %6
  br i1 %.not1.i, label %56, label %54, !dbg !28

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !28
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i3 = icmp eq i32 %58, 0, !dbg !28
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i6 = icmp eq i32 %59, 0, !dbg !28
  br i1 %.not.i3, label %65, label %60, !dbg !28

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %63, label %61, !dbg !28

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %68, label %66, !dbg !28

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

__nv_sqrtf.exit7:                                 ; preds = %61, %63, %66, %68
  %.0.i5 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !28
  %70 = bitcast i32 %31 to float, !dbg !22
  %71 = bitcast i32 %30 to float, !dbg !22
  %72 = shl i32 %9, 1, !dbg !12
  %73 = and i32 %72, 254, !dbg !12
  %74 = or disjoint i32 %8, %73, !dbg !13
  %75 = icmp slt i32 %74, 1536, !dbg !14
  %76 = and i1 %17, %75, !dbg !21
  %.frozen = freeze i32 %74, !dbg !17
  %77 = sdiv i32 %.frozen, 384, !dbg !17
  %78 = mul i32 %77, 384, !dbg !29
  %.decomposed = sub i32 %.frozen, %78, !dbg !29
  %79 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !30
  %80 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !30
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %79) #4, !dbg !31
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %80) #4, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !32
  %85 = bitcast float %81 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %83, i1 %28) #4, !dbg !33
  %86 = bitcast float %82 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %84, i1 %29) #4, !dbg !33
  %87 = mul i32 %16, 384, !dbg !34
  %88 = add i32 %.decomposed, %87, !dbg !35
  %89 = mul i32 %77, 3456, !dbg !36
  %90 = add i32 %88, %89, !dbg !37
  %91 = sext i32 %90 to i64, !dbg !38
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !38
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !39
  %94 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #4, !dbg !39
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !39
  %96 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !39
  %.extract = load i32, ptr addrspace(3) %97, align 8, !dbg !39
  %98 = getelementptr inbounds i8, ptr addrspace(3) %97, i32 4, !dbg !39
  %.extract2 = load i32, ptr addrspace(3) %98, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %92, i1 %76) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdvuhjwd6e5fwikxsykcegooshh5i3w66grisz4a5ashtmni5j6e.py", directory: "inductor_cache/dv")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_25", linkageName: "triton_poi_fused_add_convolution_div_sqrt_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 37, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 33, column: 37, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 42, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 26, scope: !7)
!29 = !DILocation(line: 31, column: 19, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 25, scope: !7)
!33 = !DILocation(line: 40, column: 43, scope: !7)
!34 = !DILocation(line: 41, column: 34, scope: !7)
!35 = !DILocation(line: 41, column: 30, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 39, scope: !7)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 55, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
