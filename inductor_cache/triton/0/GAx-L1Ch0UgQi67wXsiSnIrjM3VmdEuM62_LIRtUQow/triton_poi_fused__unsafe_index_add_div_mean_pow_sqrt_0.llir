; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__unsafe_index_add_div_mean_pow_sqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 1024, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 8, !dbg !15
  %13 = srem i32 %12, 8, !dbg !16
  %14 = mul i32 %12, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = srem i32 %10, 8, !dbg !17
  %16 = sdiv i32 %9, 64, !dbg !18
  %17 = sdiv i32 %9, 256, !dbg !19
  %18 = sitofp i32 %13 to float, !dbg !20
  %19 = fmul float %18, 5.000000e-01, !dbg !21
  %20 = fptosi float %19 to i32, !dbg !22
  %21 = sitofp i32 %.decomposed to float, !dbg !23
  %22 = sitofp i32 %15 to float, !dbg !23
  %23 = fmul float %21, 5.000000e-01, !dbg !24
  %24 = fmul float %22, 5.000000e-01, !dbg !24
  %25 = fptosi float %23 to i32, !dbg !25
  %26 = fptosi float %24 to i32, !dbg !25
  %27 = shl i32 %20, 2, !dbg !26
  %28 = add i32 %27, %25, !dbg !27
  %29 = add i32 %27, %26, !dbg !27
  %30 = shl nsw i32 %16, 4, !dbg !28
  %31 = add i32 %28, %30, !dbg !29
  %32 = add i32 %29, %30, !dbg !29
  %33 = sext i32 %31 to i64, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !30
  %35 = sext i32 %32 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !30
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %11) #3, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %11) #3, !dbg !31
  %39 = shl nsw i32 %17, 6, !dbg !32
  %40 = add i32 %28, %39, !dbg !33
  %41 = add i32 %29, %39, !dbg !33
  %42 = sext i32 %40 to i64, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !34
  %44 = sext i32 %41 to i64, !dbg !34
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !34
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %11) #3, !dbg !35
  %47 = bitcast i32 %46 to float, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #3, !dbg !35
  %49 = bitcast i32 %48 to float, !dbg !35
  %50 = fmul float %47, %47, !dbg !36
  %51 = fmul float %49, %49, !dbg !36
  %52 = add i32 %27, %39, !dbg !37
  %53 = add i32 %52, 16, !dbg !38
  %54 = add i32 %53, %25, !dbg !39
  %55 = add i32 %53, %26, !dbg !39
  %56 = sext i32 %54 to i64, !dbg !40
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !40
  %58 = sext i32 %55 to i64, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !40
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #3, !dbg !41
  %61 = bitcast i32 %60 to float, !dbg !41
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %11) #3, !dbg !41
  %63 = bitcast i32 %62 to float, !dbg !41
  %64 = fmul float %61, %61, !dbg !42
  %65 = fmul float %63, %63, !dbg !42
  %66 = fadd float %50, %64, !dbg !43
  %67 = fadd float %51, %65, !dbg !43
  %68 = add i32 %52, 32, !dbg !44
  %69 = add i32 %68, %25, !dbg !45
  %70 = add i32 %68, %26, !dbg !45
  %71 = sext i32 %69 to i64, !dbg !46
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !46
  %73 = sext i32 %70 to i64, !dbg !46
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !46
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %11) #3, !dbg !47
  %76 = bitcast i32 %75 to float, !dbg !47
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %11) #3, !dbg !47
  %78 = bitcast i32 %77 to float, !dbg !47
  %79 = fmul float %76, %76, !dbg !48
  %80 = fmul float %78, %78, !dbg !48
  %81 = fadd float %66, %79, !dbg !49
  %82 = fadd float %67, %80, !dbg !49
  %83 = add i32 %52, 48, !dbg !50
  %84 = add i32 %83, %25, !dbg !51
  %85 = add i32 %83, %26, !dbg !51
  %86 = sext i32 %84 to i64, !dbg !52
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !52
  %88 = sext i32 %85 to i64, !dbg !52
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !52
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #3, !dbg !53
  %91 = bitcast i32 %90 to float, !dbg !53
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %11) #3, !dbg !53
  %93 = bitcast i32 %92 to float, !dbg !53
  %94 = fmul float %91, %91, !dbg !54
  %95 = fmul float %93, %93, !dbg !54
  %96 = fadd float %81, %94, !dbg !55
  %97 = fadd float %82, %95, !dbg !55
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #3, !dbg !56
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 4.000000e+00) #3, !dbg !56
  %100 = fadd float %98, 0x3E45798EE0000000, !dbg !57
  %101 = fadd float %99, 0x3E45798EE0000000, !dbg !57
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %102, 0, !dbg !58
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %103, 0, !dbg !58
  br i1 %.not.i, label %109, label %104, !dbg !58

104:                                              ; preds = %3
  br i1 %.not1.i, label %107, label %105, !dbg !58

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

109:                                              ; preds = %3
  br i1 %.not1.i, label %112, label %110, !dbg !58

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %105, %107, %110, %112
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !58
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i1 = icmp eq i32 %114, 0, !dbg !58
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i4 = icmp eq i32 %115, 0, !dbg !58
  br i1 %.not.i1, label %121, label %116, !dbg !58

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %119, label %117, !dbg !58

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %124, label %122, !dbg !58

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

__nv_sqrtf.exit5:                                 ; preds = %117, %119, %122, %124
  %.0.i3 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !58
  %126 = bitcast i32 %38 to float, !dbg !31
  %127 = bitcast i32 %37 to float, !dbg !31
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %.0.i) #3, !dbg !59
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %.0.i3) #3, !dbg !59
  %130 = sext i32 %9 to i64, !dbg !60
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !60
  %132 = bitcast float %128 to i32, !dbg !61
  %133 = bitcast float %129 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %133, ptr addrspace(1) %131, i1 %11) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqzqeonncgmnlyds72fjcgdw4rvimapsyt3gf4i2dcrrpyp2qqhs.py", directory: "inductor_cache/qz")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_div_mean_pow_sqrt_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_div_mean_pow_sqrt_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_div_mean_pow_sqrt_0", linkageName: "triton_poi_fused__unsafe_index_add_div_mean_pow_sqrt_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 18, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 38, column: 37, scope: !7)
!28 = !DILocation(line: 38, column: 49, scope: !7)
!29 = !DILocation(line: 38, column: 46, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 54, scope: !7)
!32 = !DILocation(line: 39, column: 50, scope: !7)
!33 = !DILocation(line: 39, column: 47, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 55, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 41, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 43, scope: !7)
!39 = !DILocation(line: 41, column: 52, scope: !7)
!40 = !DILocation(line: 41, column: 31, scope: !7)
!41 = !DILocation(line: 41, column: 60, scope: !7)
!42 = !DILocation(line: 42, column: 20, scope: !7)
!43 = !DILocation(line: 43, column: 20, scope: !7)
!44 = !DILocation(line: 44, column: 43, scope: !7)
!45 = !DILocation(line: 44, column: 52, scope: !7)
!46 = !DILocation(line: 44, column: 31, scope: !7)
!47 = !DILocation(line: 44, column: 60, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 43, scope: !7)
!51 = !DILocation(line: 47, column: 52, scope: !7)
!52 = !DILocation(line: 47, column: 31, scope: !7)
!53 = !DILocation(line: 47, column: 60, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 49, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 27, scope: !7)
!59 = !DILocation(line: 55, column: 19, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 37, scope: !7)
!62 = !DILocation(line: 56, column: 4, scope: !7)
