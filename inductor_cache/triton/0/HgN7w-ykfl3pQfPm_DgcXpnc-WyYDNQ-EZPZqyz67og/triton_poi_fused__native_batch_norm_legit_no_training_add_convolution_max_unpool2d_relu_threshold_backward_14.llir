; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp29 < 32768\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !11 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %13 = shl i32 %12, 8, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 1, !dbg !14
  %16 = and i32 %15, 254, !dbg !14
  %17 = or disjoint i32 %13, %16, !dbg !15
  %18 = sdiv i32 %17, 4, !dbg !16
  %19 = srem i32 %18, 512, !dbg !17
  %20 = sext i32 %17 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !19
  %23 = sext i32 %19 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !25
  %32 = bitcast i32 %31 to float, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !25
  %34 = bitcast i32 %33 to float, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !31
  %43 = getelementptr i64, ptr addrspace(1) %7, i64 %20, !dbg !32
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !33
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !33
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !33
  %47 = fadd float %32, 0x3EE4F8B580000000, !dbg !34
  %48 = fadd float %34, 0x3EE4F8B580000000, !dbg !34
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %49, 0, !dbg !35
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i = icmp eq i32 %50, 0, !dbg !35
  br i1 %.not.i, label %56, label %51, !dbg !35

51:                                               ; preds = %11
  br i1 %.not1.i, label %54, label %52, !dbg !35

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

56:                                               ; preds = %11
  br i1 %.not1.i, label %59, label %57, !dbg !35

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !35
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i1 = icmp eq i32 %61, 0, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !35
  br i1 %.not.i1, label %68, label %63, !dbg !35

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !35

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !35

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !35
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !36
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !36
  %75 = shl i32 %18, 4, !dbg !37
  %76 = sext i32 %75 to i64, !dbg !38
  %77 = add i64 %45, %76, !dbg !38
  %78 = add i64 %46, %76, !dbg !38
  %79 = lshr i64 %77, 48, !dbg !39
  %80 = and i64 %79, 32768, !dbg !39
  %81 = add i64 %80, %77, !dbg !39
  %82 = lshr i64 %78, 48, !dbg !39
  %83 = and i64 %82, 32768, !dbg !39
  %84 = add i64 %83, %78, !dbg !39
  %85 = or i64 %81, %84, !dbg !40
  %.not = icmp ult i64 %85, 32768, !dbg !40
  br i1 %.not, label %87, label %86, !dbg !40

86:                                               ; preds = %__nv_sqrtf.exit5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 56, ptr nonnull @assertFunc_0, i64 1), !dbg !40
  unreachable, !dbg !40

87:                                               ; preds = %__nv_sqrtf.exit5
  %88 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %89 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !21
  %90 = insertelement <2 x i32> %89, i32 %26, i64 1, !dbg !21
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !21
  %92 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %93 = insertelement <2 x i32> %92, i32 %29, i64 1, !dbg !23
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !23
  %95 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !27
  %96 = insertelement <2 x i32> %95, i32 %37, i64 1, !dbg !27
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !27
  %98 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !29
  %99 = insertelement <2 x i32> %98, i32 %40, i64 1, !dbg !29
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !29
  %101 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %102 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %103 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !19
  %104 = insertelement <2 x i32> %103, i32 %88, i64 1, !dbg !19
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !19
  %106 = fadd <2 x float> %105, %91, !dbg !41
  %107 = extractvalue { i32, i32 } %42, 0, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %bc = bitcast <2 x float> %106 to <2 x i32>, !dbg !42
  %108 = extractelement <2 x i32> %bc, i64 0, !dbg !42
  %bc6 = bitcast <2 x float> %106 to <2 x i32>, !dbg !42
  %109 = extractelement <2 x i32> %bc6, i64 1, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %109, ptr addrspace(1) %21, i1 true) #5, !dbg !42
  %110 = getelementptr float, ptr addrspace(1) %8, i64 %81, !dbg !43
  %111 = getelementptr float, ptr addrspace(1) %8, i64 %84, !dbg !43
  %112 = ptrtoint ptr addrspace(1) %110 to i64, !dbg !44
  %113 = ptrtoint ptr addrspace(1) %111 to i64, !dbg !44
  %114 = and i32 %14, 127, !dbg !44
  %115 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %115, i64 %112, i64 %113, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %116 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %114, !dbg !44
  %117 = load i64, ptr addrspace(3) %116, align 8, !dbg !44
  %118 = or disjoint i32 %114, 128, !dbg !44
  %119 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %118, !dbg !44
  %120 = load i64, ptr addrspace(3) %119, align 8, !dbg !44
  %121 = inttoptr i64 %117 to ptr addrspace(1), !dbg !44
  %122 = inttoptr i64 %120 to ptr addrspace(1), !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !44
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !44
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !44
  %126 = getelementptr i1, ptr addrspace(1) %9, i64 %20, !dbg !45
  %127 = fsub <2 x float> %106, %94, !dbg !46
  %128 = insertelement <2 x float> poison, float %73, i64 0, !dbg !47
  %129 = insertelement <2 x float> %128, float %74, i64 1, !dbg !47
  %130 = fmul <2 x float> %127, %129, !dbg !47
  %131 = fmul <2 x float> %130, %97, !dbg !48
  %132 = fadd <2 x float> %131, %100, !dbg !49
  %133 = fcmp olt <2 x float> %132, zeroinitializer, !dbg !50
  %134 = select <2 x i1> %133, <2 x float> zeroinitializer, <2 x float> %132, !dbg !54
  %135 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !31
  %136 = insertelement <2 x i32> %135, i32 %101, i64 1, !dbg !31
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !31
  %138 = fadd <2 x float> %134, %137, !dbg !55
  %139 = fcmp olt <2 x float> %138, zeroinitializer, !dbg !56
  %140 = select <2 x i1> %139, <2 x float> zeroinitializer, <2 x float> %138, !dbg !58
  %141 = fcmp ole <2 x float> %140, zeroinitializer, !dbg !59
  %bc7 = bitcast <2 x float> %140 to <2 x i32>, !dbg !44
  %142 = extractelement <2 x i32> %bc7, i64 0, !dbg !44
  %bc8 = bitcast <2 x float> %140 to <2 x i32>, !dbg !44
  %143 = extractelement <2 x i32> %bc8, i64 1, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %123, i32 %142, i32 %143, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %144 = load i32, ptr addrspace(3) %124, align 4, !dbg !44
  %145 = load i32, ptr addrspace(3) %125, align 4, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %121, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %122, i1 true) #5, !dbg !44
  %146 = zext <2 x i1> %141 to <2 x i8>, !dbg !60
  %147 = bitcast <2 x i8> %146 to i16, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %147, ptr addrspace(1) %126, i1 true) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py", directory: "inductor_cache/hu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 26, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 35, scope: !11)
!24 = !DILocation(line: 29, column: 30, scope: !11)
!25 = !DILocation(line: 29, column: 35, scope: !11)
!26 = !DILocation(line: 30, column: 31, scope: !11)
!27 = !DILocation(line: 30, column: 36, scope: !11)
!28 = !DILocation(line: 31, column: 31, scope: !11)
!29 = !DILocation(line: 31, column: 36, scope: !11)
!30 = !DILocation(line: 32, column: 31, scope: !11)
!31 = !DILocation(line: 32, column: 36, scope: !11)
!32 = !DILocation(line: 33, column: 31, scope: !11)
!33 = !DILocation(line: 33, column: 36, scope: !11)
!34 = !DILocation(line: 37, column: 18, scope: !11)
!35 = !DILocation(line: 38, column: 26, scope: !11)
!36 = !DILocation(line: 40, column: 19, scope: !11)
!37 = !DILocation(line: 50, column: 16, scope: !11)
!38 = !DILocation(line: 51, column: 20, scope: !11)
!39 = !DILocation(line: 55, column: 35, scope: !11)
!40 = !DILocation(line: 56, column: 53, scope: !11)
!41 = !DILocation(line: 34, column: 18, scope: !11)
!42 = !DILocation(line: 59, column: 39, scope: !11)
!43 = !DILocation(line: 60, column: 25, scope: !11)
!44 = !DILocation(line: 60, column: 67, scope: !11)
!45 = !DILocation(line: 61, column: 25, scope: !11)
!46 = !DILocation(line: 35, column: 18, scope: !11)
!47 = !DILocation(line: 43, column: 19, scope: !11)
!48 = !DILocation(line: 44, column: 20, scope: !11)
!49 = !DILocation(line: 45, column: 20, scope: !11)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 47, column: 42, scope: !11)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 48, column: 20, scope: !11)
!56 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !57)
!57 = !DILocation(line: 49, column: 42, scope: !11)
!58 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !57)
!59 = !DILocation(line: 58, column: 21, scope: !11)
!60 = !DILocation(line: 61, column: 37, scope: !11)
!61 = !DILocation(line: 61, column: 4, scope: !11)
