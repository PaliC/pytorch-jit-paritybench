; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 127, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = or disjoint i32 %12, 128, !dbg !15
  %14 = or disjoint i32 %12, 256, !dbg !15
  %15 = or disjoint i32 %12, 384, !dbg !15
  %16 = or disjoint i32 %12, 512, !dbg !15
  %17 = or disjoint i32 %12, 640, !dbg !15
  %18 = or disjoint i32 %12, 768, !dbg !15
  %19 = or disjoint i32 %12, 896, !dbg !15
  %20 = icmp slt i32 %12, 961, !dbg !16
  %21 = icmp slt i32 %13, 961, !dbg !16
  %22 = icmp slt i32 %14, 961, !dbg !16
  %23 = icmp slt i32 %15, 961, !dbg !16
  %24 = icmp slt i32 %16, 961, !dbg !16
  %25 = icmp slt i32 %17, 961, !dbg !16
  %26 = icmp slt i32 %18, 961, !dbg !16
  %27 = icmp slt i32 %19, 961, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %28 = sdiv i32 %.frozen, 64, !dbg !17
  %29 = mul i32 %28, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = shl i32 %12, 6, !dbg !19
  %31 = shl i32 %13, 6, !dbg !19
  %32 = shl i32 %14, 6, !dbg !19
  %33 = shl i32 %15, 6, !dbg !19
  %34 = shl i32 %16, 6, !dbg !19
  %35 = shl i32 %17, 6, !dbg !19
  %36 = shl i32 %18, 6, !dbg !19
  %37 = shl i32 %19, 6, !dbg !19
  %38 = mul i32 %28, 61504, !dbg !20
  %39 = add i32 %38, %.decomposed, !dbg !21
  %40 = add i32 %39, %30, !dbg !22
  %41 = add i32 %39, %31, !dbg !22
  %42 = add i32 %39, %32, !dbg !22
  %43 = add i32 %39, %33, !dbg !22
  %44 = add i32 %39, %34, !dbg !22
  %45 = add i32 %39, %35, !dbg !22
  %46 = add i32 %39, %36, !dbg !22
  %47 = add i32 %39, %37, !dbg !22
  %48 = sext i32 %40 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %41 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %42 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %43 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %44 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %45 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %46 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %47 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = and i1 %7, %20, !dbg !24
  %65 = and i1 %21, %7, !dbg !24
  %66 = and i1 %22, %7, !dbg !24
  %67 = and i1 %23, %7, !dbg !24
  %68 = and i1 %24, %7, !dbg !24
  %69 = and i1 %25, %7, !dbg !24
  %70 = and i1 %26, %7, !dbg !24
  %71 = and i1 %27, %7, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %64) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %65) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %66) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %67) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %68) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %69) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %70) #3, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %71) #3, !dbg !25
  %80 = mul i32 %28, 961, !dbg !26
  %81 = add i32 %12, %80, !dbg !27
  %82 = add i32 %80, %13, !dbg !27
  %83 = add i32 %80, %14, !dbg !27
  %84 = add i32 %80, %15, !dbg !27
  %85 = add i32 %80, %16, !dbg !27
  %86 = add i32 %80, %17, !dbg !27
  %87 = add i32 %80, %18, !dbg !27
  %88 = add i32 %80, %19, !dbg !27
  %89 = sext i32 %81 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !28
  %91 = sext i32 %82 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !28
  %93 = sext i32 %83 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !28
  %95 = sext i32 %84 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !28
  %97 = sext i32 %85 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !28
  %99 = sext i32 %86 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !28
  %101 = sext i32 %87 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !28
  %103 = sext i32 %88 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %64) #3, !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %65) #3, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %66) #3, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %67) #3, !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %68) #3, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %69) #3, !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %70) #3, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %71) #3, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fadd float %106, 0x3E112E0BE0000000, !dbg !30
  %122 = fadd float %108, 0x3E112E0BE0000000, !dbg !30
  %123 = fadd float %110, 0x3E112E0BE0000000, !dbg !30
  %124 = fadd float %112, 0x3E112E0BE0000000, !dbg !30
  %125 = fadd float %114, 0x3E112E0BE0000000, !dbg !30
  %126 = fadd float %116, 0x3E112E0BE0000000, !dbg !30
  %127 = fadd float %118, 0x3E112E0BE0000000, !dbg !30
  %128 = fadd float %120, 0x3E112E0BE0000000, !dbg !30
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %129, 0, !dbg !31
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %130, 0, !dbg !31
  br i1 %.not.i, label %136, label %131, !dbg !31

131:                                              ; preds = %5
  br i1 %.not1.i, label %134, label %132, !dbg !31

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

136:                                              ; preds = %5
  br i1 %.not1.i, label %139, label %137, !dbg !31

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %132, %134, %137, %139
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !31
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %141, 0, !dbg !31
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %142, 0, !dbg !31
  br i1 %.not.i1, label %148, label %143, !dbg !31

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %146, label %144, !dbg !31

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %151, label %149, !dbg !31

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %144, %146, %149, %151
  %.0.i3 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !31
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i6 = icmp eq i32 %153, 0, !dbg !31
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i9 = icmp eq i32 %154, 0, !dbg !31
  br i1 %.not.i6, label %160, label %155, !dbg !31

155:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %158, label %156, !dbg !31

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

160:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %163, label %161, !dbg !31

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %156, %158, %161, %163
  %.0.i8 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !31
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i11 = icmp eq i32 %165, 0, !dbg !31
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i14 = icmp eq i32 %166, 0, !dbg !31
  br i1 %.not.i11, label %172, label %167, !dbg !31

167:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %170, label %168, !dbg !31

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

172:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %175, label %173, !dbg !31

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %168, %170, %173, %175
  %.0.i13 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !31
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %177, 0, !dbg !31
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i19 = icmp eq i32 %178, 0, !dbg !31
  br i1 %.not.i16, label %184, label %179, !dbg !31

179:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %182, label %180, !dbg !31

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

184:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %187, label %185, !dbg !31

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %180, %182, %185, %187
  %.0.i18 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !31
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i21 = icmp eq i32 %189, 0, !dbg !31
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i24 = icmp eq i32 %190, 0, !dbg !31
  br i1 %.not.i21, label %196, label %191, !dbg !31

191:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %194, label %192, !dbg !31

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

196:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %199, label %197, !dbg !31

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %192, %194, %197, %199
  %.0.i23 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !31
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i26 = icmp eq i32 %201, 0, !dbg !31
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i29 = icmp eq i32 %202, 0, !dbg !31
  br i1 %.not.i26, label %208, label %203, !dbg !31

203:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %206, label %204, !dbg !31

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

208:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %211, label %209, !dbg !31

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %204, %206, %209, %211
  %.0.i28 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !31
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i31 = icmp eq i32 %213, 0, !dbg !31
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i34 = icmp eq i32 %214, 0, !dbg !31
  br i1 %.not.i31, label %220, label %215, !dbg !31

215:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %218, label %216, !dbg !31

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

220:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %223, label %221, !dbg !31

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %216, %218, %221, %223
  %.0.i33 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !31
  %225 = bitcast i32 %79 to float, !dbg !25
  %226 = bitcast i32 %78 to float, !dbg !25
  %227 = bitcast i32 %77 to float, !dbg !25
  %228 = bitcast i32 %76 to float, !dbg !25
  %229 = bitcast i32 %75 to float, !dbg !25
  %230 = bitcast i32 %74 to float, !dbg !25
  %231 = bitcast i32 %73 to float, !dbg !25
  %232 = bitcast i32 %72 to float, !dbg !25
  %233 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %234 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !32
  %235 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !32
  %236 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !32
  %237 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !32
  %238 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !32
  %239 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !32
  %240 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !32
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %233) #3, !dbg !33
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %234) #3, !dbg !33
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %235) #3, !dbg !33
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %236) #3, !dbg !33
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %237) #3, !dbg !33
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %238) #3, !dbg !33
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %239) #3, !dbg !33
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %240) #3, !dbg !33
  %249 = mul i32 %6, 961, !dbg !34
  %250 = add i32 %12, %249, !dbg !35
  %251 = add i32 %249, %13, !dbg !35
  %252 = add i32 %249, %14, !dbg !35
  %253 = add i32 %249, %15, !dbg !35
  %254 = add i32 %249, %16, !dbg !35
  %255 = add i32 %249, %17, !dbg !35
  %256 = add i32 %249, %18, !dbg !35
  %257 = add i32 %249, %19, !dbg !35
  %258 = sext i32 %250 to i64, !dbg !36
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %258, !dbg !36
  %260 = sext i32 %251 to i64, !dbg !36
  %261 = getelementptr float, ptr addrspace(1) %2, i64 %260, !dbg !36
  %262 = sext i32 %252 to i64, !dbg !36
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %262, !dbg !36
  %264 = sext i32 %253 to i64, !dbg !36
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !36
  %266 = sext i32 %254 to i64, !dbg !36
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %266, !dbg !36
  %268 = sext i32 %255 to i64, !dbg !36
  %269 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !36
  %270 = sext i32 %256 to i64, !dbg !36
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %270, !dbg !36
  %272 = sext i32 %257 to i64, !dbg !36
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %272, !dbg !36
  %274 = bitcast float %241 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %274, ptr addrspace(1) %259, i1 %64) #3, !dbg !37
  %275 = bitcast float %242 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %261, i1 %65) #3, !dbg !37
  %276 = bitcast float %243 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %276, ptr addrspace(1) %263, i1 %66) #3, !dbg !37
  %277 = bitcast float %244 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %277, ptr addrspace(1) %265, i1 %67) #3, !dbg !37
  %278 = bitcast float %245 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %278, ptr addrspace(1) %267, i1 %68) #3, !dbg !37
  %279 = bitcast float %246 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %279, ptr addrspace(1) %269, i1 %69) #3, !dbg !37
  %280 = bitcast float %247 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %280, ptr addrspace(1) %271, i1 %70) #3, !dbg !37
  %281 = bitcast float %248 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %281, ptr addrspace(1) %273, i1 %71) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4ebqrsq2ikwesrt4tjtb2k3y4xpbe7yogrspynmxwobged3he5.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_14", linkageName: "triton_poi_fused_add_div_sqrt_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 62, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 34, scope: !7)
!35 = !DILocation(line: 40, column: 30, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 45, scope: !7)
!38 = !DILocation(line: 40, column: 4, scope: !7)
