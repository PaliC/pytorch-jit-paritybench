; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/6q/c6qszd2mge33jf64hj7umy5sewju2cmy5xu4ij5zc5yjxg3iolgm.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp15 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_nll_loss_forward_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 2, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 3, !dbg !14
  %10 = or disjoint i32 %7, %9, !dbg !15
  %11 = icmp slt i32 %10, 4, !dbg !16
  %12 = shl i32 %10, 2, !dbg !17
  %13 = sext i32 %12 to i64, !dbg !18
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !18
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %11) #4, !dbg !19
  %16 = or disjoint i32 %12, 1, !dbg !20
  %17 = sext i32 %16 to i64, !dbg !21
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !21
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %11) #4, !dbg !22
  %20 = or disjoint i32 %12, 2, !dbg !23
  %21 = sext i32 %20 to i64, !dbg !24
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !24
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %11) #4, !dbg !25
  %24 = or disjoint i32 %12, 3, !dbg !26
  %25 = sext i32 %24 to i64, !dbg !27
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !27
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #4, !dbg !28
  %28 = sext i32 %10 to i64, !dbg !29
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !29
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %11) #4, !dbg !30
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !31
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %11) #4, !dbg !32
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !33
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #4, !dbg !34
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !35
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #4, !dbg !36
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !37
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #4, !dbg !38
  %.not = icmp eq i64 %30, -100, !dbg !39
  %39 = select i1 %.not, i64 0, i64 %30, !dbg !40
  %40 = lshr i64 %39, 61, !dbg !41
  %41 = and i64 %40, 4, !dbg !41
  %42 = add i64 %41, %39, !dbg !41
  %43 = icmp ugt i64 %42, 3, !dbg !42
  %.not2 = and i1 %11, %43, !dbg !43
  br i1 %.not2, label %44, label %45, !dbg !43

44:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 45, ptr nonnull @assertFunc_0, i64 1), !dbg !43
  unreachable, !dbg !43

45:                                               ; preds = %5
  %46 = bitcast i32 %38 to float, !dbg !38
  %47 = bitcast i32 %36 to float, !dbg !36
  %48 = bitcast i32 %34 to float, !dbg !34
  %49 = bitcast i32 %32 to float, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !44
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %13, !dbg !44
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %11) #4, !dbg !45
  %53 = fmul float %49, 0x3FF7154760000000, !dbg !46
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #4, !dbg !46
  %55 = fmul float %48, 0x3FF7154760000000, !dbg !47
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #4, !dbg !47
  %57 = fadd float %54, %56, !dbg !48
  %58 = fmul float %47, 0x3FF7154760000000, !dbg !49
  %59 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %58) #4, !dbg !49
  %60 = fadd float %57, %59, !dbg !50
  %61 = fmul float %46, 0x3FF7154760000000, !dbg !51
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #4, !dbg !51
  %63 = fadd float %60, %62, !dbg !52
  %64 = fcmp olt float %63, 0x3810000000000000, !dbg !53
  %65 = fmul float %63, 0x4160000000000000, !dbg !53
  %.02.i = select i1 %64, float %65, float %63, !dbg !53
  %i.i.0.i = select i1 %64, float -2.300000e+01, float 0.000000e+00, !dbg !53
  %66 = bitcast float %.02.i to i32, !dbg !53
  %67 = add i32 %66, -1059760811, !dbg !53
  %68 = and i32 %67, -8388608, !dbg !53
  %69 = sub i32 %66, %68, !dbg !53
  %70 = bitcast i32 %69 to float, !dbg !53
  %71 = sitofp i32 %68 to float, !dbg !53
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not.i = icmp eq i32 %72, 0, !dbg !53
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %71, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !53
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %71, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !53
  %.08.i = select i1 %.not.i, float %74, float %73, !dbg !53
  %75 = fadd float %70, -1.000000e+00, !dbg !53
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not1.i = icmp eq i32 %76, 0, !dbg !53
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %75, float 0x3FC2073EC0000000) #4, !dbg !53
  %78 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %75, float 0x3FC2073EC0000000) #4, !dbg !53
  %.010.i = select i1 %.not1.i, float %78, float %77, !dbg !53
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not2.i = icmp eq i32 %79, 0, !dbg !53
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %75, float 0xBFBF19B980000000) #4, !dbg !53
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %75, float 0xBFBF19B980000000) #4, !dbg !53
  %.011.i = select i1 %.not2.i, float %81, float %80, !dbg !53
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not3.i = icmp eq i32 %82, 0, !dbg !53
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %75, float 0x3FC1E52AA0000000) #4, !dbg !53
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %75, float 0x3FC1E52AA0000000) #4, !dbg !53
  %.012.i = select i1 %.not3.i, float %84, float %83, !dbg !53
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not4.i = icmp eq i32 %85, 0, !dbg !53
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %75, float 0xBFC55B1720000000) #4, !dbg !53
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %75, float 0xBFC55B1720000000) #4, !dbg !53
  %.09.i = select i1 %.not4.i, float %87, float %86, !dbg !53
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not5.i = icmp eq i32 %88, 0, !dbg !53
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %75, float 0x3FC99DA160000000) #4, !dbg !53
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %75, float 0x3FC99DA160000000) #4, !dbg !53
  %.05.i = select i1 %.not5.i, float %90, float %89, !dbg !53
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not6.i = icmp eq i32 %91, 0, !dbg !53
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %75, float 0xBFCFFFE440000000) #4, !dbg !53
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %75, float 0xBFCFFFE440000000) #4, !dbg !53
  %.01.i = select i1 %.not6.i, float %93, float %92, !dbg !53
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not7.i = icmp eq i32 %94, 0, !dbg !53
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %75, float 0x3FD5554F00000000) #4, !dbg !53
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %75, float 0x3FD5554F00000000) #4, !dbg !53
  %.0.i = select i1 %.not7.i, float %96, float %95, !dbg !53
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not8.i = icmp eq i32 %97, 0, !dbg !53
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %75, float -5.000000e-01) #4, !dbg !53
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %75, float -5.000000e-01) #4, !dbg !53
  %.07.i = select i1 %.not8.i, float %99, float %98, !dbg !53
  %100 = fmul float %75, %.07.i, !dbg !53
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not9.i = icmp eq i32 %101, 0, !dbg !53
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %100, float %75, float %75) #4, !dbg !53
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %100, float %75, float %75) #4, !dbg !53
  %.06.i = select i1 %.not9.i, float %103, float %102, !dbg !53
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not10.i = icmp eq i32 %104, 0, !dbg !53
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !53
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !53
  %.04.i = select i1 %.not10.i, float %106, float %105, !dbg !53
  %107 = icmp ugt i32 %66, 2139095039, !dbg !53
  br i1 %107, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !53

__nv_fmaf_rn.exit.i.i:                            ; preds = %45
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not11.i = icmp eq i32 %108, 0, !dbg !53
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !53
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !53
  %.03.i = select i1 %.not11.i, float %110, float %109, !dbg !53
  br label %__nv_logf.exit, !dbg !53

__nv_logf.exit:                                   ; preds = %45, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %45 ], !dbg !53
  %111 = bitcast i32 %52 to float, !dbg !45
  %112 = and i32 %8, 28, !dbg !14
  %113 = bitcast i32 %15 to float, !dbg !19
  %114 = bitcast i32 %19 to float, !dbg !22
  %115 = fadd float %113, %114, !dbg !54
  %116 = bitcast i32 %23 to float, !dbg !25
  %117 = fadd float %115, %116, !dbg !55
  %118 = bitcast i32 %27 to float, !dbg !28
  %119 = fadd float %117, %118, !dbg !56
  %120 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !53
  %r.i.1.i = select i1 %120, float 0xFFF0000000000000, float %r.i.0.i, !dbg !53
  %121 = fsub float %r.i.1.i, %111, !dbg !57
  %122 = fadd float %121, 0.000000e+00, !dbg !57
  %123 = select i1 %.not, float 0.000000e+00, float %122, !dbg !58
  %124 = fadd float %119, %123, !dbg !59
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !60
  %126 = icmp eq i32 %112, 0, !dbg !61
  %127 = bitcast float %124 to i32, !dbg !61
  %128 = and i1 %126, %11, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %125, i1 %128) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6qszd2mge33jf64hj7umy5sewju2cmy5xu4ij5zc5yjxg3iolgm.py", directory: "inductor_cache/6q")
!4 = !{ptr @triton_poi_fused_add_nll_loss_forward_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_nll_loss_forward_sum_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_nll_loss_forward_sum_4", linkageName: "triton_poi_fused_add_nll_loss_forward_sum_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 32, scope: !11)
!18 = !DILocation(line: 25, column: 30, scope: !11)
!19 = !DILocation(line: 25, column: 37, scope: !11)
!20 = !DILocation(line: 26, column: 34, scope: !11)
!21 = !DILocation(line: 26, column: 30, scope: !11)
!22 = !DILocation(line: 26, column: 41, scope: !11)
!23 = !DILocation(line: 27, column: 34, scope: !11)
!24 = !DILocation(line: 27, column: 30, scope: !11)
!25 = !DILocation(line: 27, column: 41, scope: !11)
!26 = !DILocation(line: 28, column: 34, scope: !11)
!27 = !DILocation(line: 28, column: 30, scope: !11)
!28 = !DILocation(line: 28, column: 41, scope: !11)
!29 = !DILocation(line: 29, column: 30, scope: !11)
!30 = !DILocation(line: 29, column: 35, scope: !11)
!31 = !DILocation(line: 30, column: 31, scope: !11)
!32 = !DILocation(line: 30, column: 38, scope: !11)
!33 = !DILocation(line: 31, column: 31, scope: !11)
!34 = !DILocation(line: 31, column: 42, scope: !11)
!35 = !DILocation(line: 32, column: 31, scope: !11)
!36 = !DILocation(line: 32, column: 42, scope: !11)
!37 = !DILocation(line: 33, column: 31, scope: !11)
!38 = !DILocation(line: 33, column: 42, scope: !11)
!39 = !DILocation(line: 38, column: 19, scope: !11)
!40 = !DILocation(line: 40, column: 33, scope: !11)
!41 = !DILocation(line: 44, column: 35, scope: !11)
!42 = !DILocation(line: 45, column: 38, scope: !11)
!43 = !DILocation(line: 45, column: 62, scope: !11)
!44 = !DILocation(line: 46, column: 31, scope: !11)
!45 = !DILocation(line: 46, column: 46, scope: !11)
!46 = !DILocation(line: 47, column: 24, scope: !11)
!47 = !DILocation(line: 48, column: 24, scope: !11)
!48 = !DILocation(line: 49, column: 20, scope: !11)
!49 = !DILocation(line: 50, column: 24, scope: !11)
!50 = !DILocation(line: 51, column: 20, scope: !11)
!51 = !DILocation(line: 52, column: 24, scope: !11)
!52 = !DILocation(line: 53, column: 20, scope: !11)
!53 = !DILocation(line: 54, column: 24, scope: !11)
!54 = !DILocation(line: 34, column: 18, scope: !11)
!55 = !DILocation(line: 35, column: 18, scope: !11)
!56 = !DILocation(line: 36, column: 18, scope: !11)
!57 = !DILocation(line: 56, column: 13, scope: !11)
!58 = !DILocation(line: 58, column: 34, scope: !11)
!59 = !DILocation(line: 59, column: 19, scope: !11)
!60 = !DILocation(line: 60, column: 25, scope: !11)
!61 = !DILocation(line: 60, column: 37, scope: !11)
!62 = !DILocation(line: 60, column: 4, scope: !11)
