; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 512, !dbg !14
  %18 = icmp slt i32 %16, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %.lobit4 = lshr i32 %11, 6, !dbg !17
  %21 = and i32 %.lobit4, 3, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %26 = icmp slt i32 %22, 49, !dbg !19
  %27 = icmp slt i32 %23, 49, !dbg !19
  %28 = icmp slt i32 %24, 49, !dbg !19
  %29 = icmp slt i32 %25, 49, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %30 = sdiv i32 %.frozen, 128, !dbg !20
  %31 = mul i32 %30, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %16, 128, !dbg !21
  %33 = shl i32 %22, 7, !dbg !22
  %34 = shl i32 %23, 7, !dbg !22
  %35 = shl i32 %24, 7, !dbg !22
  %36 = shl i32 %25, 7, !dbg !22
  %37 = mul i32 %30, 6272, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !24
  %39 = add i32 %38, %33, !dbg !25
  %40 = add i32 %38, %34, !dbg !25
  %41 = add i32 %38, %35, !dbg !25
  %42 = add i32 %38, %36, !dbg !25
  %43 = sext i32 %39 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %40 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %41 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %17, %26, !dbg !27
  %52 = and i1 %27, %17, !dbg !27
  %53 = and i1 %28, %17, !dbg !27
  %54 = and i1 %29, %17, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #4, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #4, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #4, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = and i32 %12, 1020, !dbg !28
  %76 = lshr i32 %12, 6, !dbg !28
  %77 = and i32 %76, 12, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !28
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %75, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %82 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 1040, !dbg !28
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %84 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 2080, !dbg !28
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %86 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 3120, !dbg !28
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %88 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %89 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %90 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %91 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %92 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %93 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %94 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %95 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %71, i32 %72, i32 %73, i32 %74, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %96 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %97 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %98 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %99 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  %100 = sext i32 %32 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #4, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #4, !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #4, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %18) #4, !dbg !36
  %110 = fadd float %105, 0x3EE4F8B580000000, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %111, 0, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %112, 0, !dbg !38
  br i1 %.not.i, label %118, label %113, !dbg !38

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !38

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

118:                                              ; preds = %8
  br i1 %.not1.i, label %121, label %119, !dbg !38

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !38
  %123 = or disjoint i32 %14, 768, !dbg !28
  %124 = or disjoint i32 %14, 512, !dbg !28
  %125 = or disjoint i32 %14, 256, !dbg !28
  %126 = and i32 %11, 15, !dbg !12
  %127 = or disjoint i32 %20, %126, !dbg !18
  %128 = icmp slt i32 %127, 49, !dbg !19
  %129 = lshr i32 %11, 4, !dbg !12
  %130 = and i32 %129, 15, !dbg !12
  %131 = or disjoint i32 %130, %10, !dbg !13
  %132 = or disjoint i32 %131, 240, !dbg !13
  %133 = icmp slt i32 %132, 512, !dbg !14
  %134 = and i1 %133, %128, !dbg !27
  %135 = or disjoint i32 %131, 224, !dbg !13
  %136 = icmp slt i32 %135, 512, !dbg !14
  %137 = and i1 %136, %128, !dbg !27
  %138 = or disjoint i32 %131, 208, !dbg !13
  %139 = icmp slt i32 %138, 512, !dbg !14
  %140 = and i1 %139, %128, !dbg !27
  %141 = or disjoint i32 %131, 192, !dbg !13
  %142 = icmp slt i32 %141, 512, !dbg !14
  %143 = and i1 %142, %128, !dbg !27
  %144 = or disjoint i32 %131, 176, !dbg !13
  %145 = icmp slt i32 %144, 512, !dbg !14
  %146 = and i1 %145, %128, !dbg !27
  %147 = or disjoint i32 %131, 160, !dbg !13
  %148 = icmp slt i32 %147, 512, !dbg !14
  %149 = and i1 %148, %128, !dbg !27
  %150 = or disjoint i32 %131, 144, !dbg !13
  %151 = icmp slt i32 %150, 512, !dbg !14
  %152 = and i1 %151, %128, !dbg !27
  %153 = or disjoint i32 %131, 128, !dbg !13
  %154 = icmp slt i32 %153, 512, !dbg !14
  %155 = and i1 %154, %128, !dbg !27
  %156 = or disjoint i32 %131, 112, !dbg !13
  %157 = icmp slt i32 %156, 512, !dbg !14
  %158 = and i1 %157, %128, !dbg !27
  %159 = or disjoint i32 %131, 96, !dbg !13
  %160 = icmp slt i32 %159, 512, !dbg !14
  %161 = and i1 %160, %128, !dbg !27
  %162 = or disjoint i32 %131, 80, !dbg !13
  %163 = icmp slt i32 %162, 512, !dbg !14
  %164 = and i1 %163, %128, !dbg !27
  %165 = or disjoint i32 %131, 64, !dbg !13
  %166 = icmp slt i32 %165, 512, !dbg !14
  %167 = and i1 %166, %128, !dbg !27
  %168 = or disjoint i32 %131, 48, !dbg !13
  %169 = icmp slt i32 %168, 512, !dbg !14
  %170 = and i1 %169, %128, !dbg !27
  %171 = or disjoint i32 %131, 32, !dbg !13
  %172 = icmp slt i32 %171, 512, !dbg !14
  %173 = and i1 %172, %128, !dbg !27
  %174 = or disjoint i32 %131, 16, !dbg !13
  %175 = icmp slt i32 %174, 512, !dbg !14
  %176 = and i1 %175, %128, !dbg !27
  %177 = icmp slt i32 %131, 512, !dbg !14
  %178 = and i1 %177, %128, !dbg !27
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %180 = insertelement <16 x float> poison, float %99, i64 0, !dbg !40
  %181 = insertelement <16 x float> %180, float %98, i64 1, !dbg !40
  %182 = insertelement <16 x float> %181, float %97, i64 2, !dbg !40
  %183 = insertelement <16 x float> %182, float %96, i64 3, !dbg !40
  %184 = insertelement <16 x float> %183, float %95, i64 4, !dbg !40
  %185 = insertelement <16 x float> %184, float %94, i64 5, !dbg !40
  %186 = insertelement <16 x float> %185, float %93, i64 6, !dbg !40
  %187 = insertelement <16 x float> %186, float %92, i64 7, !dbg !40
  %188 = insertelement <16 x float> %187, float %91, i64 8, !dbg !40
  %189 = insertelement <16 x float> %188, float %90, i64 9, !dbg !40
  %190 = insertelement <16 x float> %189, float %89, i64 10, !dbg !40
  %191 = insertelement <16 x float> %190, float %88, i64 11, !dbg !40
  %192 = insertelement <16 x float> %191, float %87, i64 12, !dbg !40
  %193 = insertelement <16 x float> %192, float %85, i64 13, !dbg !40
  %194 = insertelement <16 x float> %193, float %83, i64 14, !dbg !40
  %195 = insertelement <16 x float> %194, float %81, i64 15, !dbg !40
  %196 = insertelement <16 x i32> poison, i32 %102, i64 0, !dbg !40
  %197 = bitcast <16 x i32> %196 to <16 x float>, !dbg !40
  %198 = shufflevector <16 x float> %197, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %199 = fsub <16 x float> %195, %198, !dbg !40
  %200 = insertelement <16 x float> poison, float %179, i64 0, !dbg !41
  %201 = shufflevector <16 x float> %200, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %202 = fmul <16 x float> %199, %201, !dbg !41
  %203 = insertelement <16 x i32> poison, i32 %107, i64 0, !dbg !42
  %204 = bitcast <16 x i32> %203 to <16 x float>, !dbg !42
  %205 = shufflevector <16 x float> %204, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %206 = fmul <16 x float> %202, %205, !dbg !42
  %207 = insertelement <16 x i32> poison, i32 %109, i64 0, !dbg !43
  %208 = bitcast <16 x i32> %207 to <16 x float>, !dbg !43
  %209 = shufflevector <16 x float> %208, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %210 = fadd <16 x float> %206, %209, !dbg !43
  %211 = fcmp ole <16 x float> %210, zeroinitializer, !dbg !44
  %212 = select <16 x i1> %211, <16 x float> zeroinitializer, <16 x float> %210, !dbg !44
  %213 = fcmp olt <16 x float> %212, splat (float 6.000000e+00), !dbg !48
  %214 = extractelement <16 x float> %212, i64 15, !dbg !50
  %215 = fcmp uno float %214, 0.000000e+00, !dbg !51
  %216 = extractelement <16 x float> %212, i64 14, !dbg !50
  %217 = fcmp uno float %216, 0.000000e+00, !dbg !51
  %218 = extractelement <16 x float> %212, i64 13, !dbg !50
  %219 = fcmp uno float %218, 0.000000e+00, !dbg !51
  %220 = extractelement <16 x float> %212, i64 12, !dbg !50
  %221 = fcmp uno float %220, 0.000000e+00, !dbg !51
  %222 = extractelement <16 x float> %212, i64 11, !dbg !50
  %223 = fcmp uno float %222, 0.000000e+00, !dbg !51
  %224 = extractelement <16 x float> %212, i64 10, !dbg !50
  %225 = fcmp uno float %224, 0.000000e+00, !dbg !51
  %226 = extractelement <16 x float> %212, i64 9, !dbg !50
  %227 = fcmp uno float %226, 0.000000e+00, !dbg !51
  %228 = extractelement <16 x float> %212, i64 8, !dbg !50
  %229 = fcmp uno float %228, 0.000000e+00, !dbg !51
  %230 = extractelement <16 x float> %212, i64 7, !dbg !50
  %231 = fcmp uno float %230, 0.000000e+00, !dbg !51
  %232 = extractelement <16 x float> %212, i64 6, !dbg !50
  %233 = fcmp uno float %232, 0.000000e+00, !dbg !51
  %234 = extractelement <16 x float> %212, i64 5, !dbg !50
  %235 = fcmp uno float %234, 0.000000e+00, !dbg !51
  %236 = extractelement <16 x float> %212, i64 4, !dbg !50
  %237 = fcmp uno float %236, 0.000000e+00, !dbg !51
  %238 = extractelement <16 x float> %212, i64 3, !dbg !50
  %239 = fcmp uno float %238, 0.000000e+00, !dbg !51
  %240 = extractelement <16 x float> %212, i64 2, !dbg !50
  %241 = fcmp uno float %240, 0.000000e+00, !dbg !51
  %242 = extractelement <16 x float> %212, i64 1, !dbg !50
  %243 = fcmp uno float %242, 0.000000e+00, !dbg !51
  %244 = extractelement <16 x float> %212, i64 0, !dbg !50
  %245 = fcmp uno float %244, 0.000000e+00, !dbg !51
  %246 = extractelement <16 x i1> %213, i64 15, !dbg !52
  %247 = or i1 %246, %215, !dbg !52
  %248 = extractelement <16 x i1> %213, i64 14, !dbg !52
  %249 = or i1 %248, %217, !dbg !52
  %250 = extractelement <16 x i1> %213, i64 13, !dbg !52
  %251 = or i1 %250, %219, !dbg !52
  %252 = extractelement <16 x i1> %213, i64 12, !dbg !52
  %253 = or i1 %252, %221, !dbg !52
  %254 = extractelement <16 x i1> %213, i64 11, !dbg !52
  %255 = or i1 %254, %223, !dbg !52
  %256 = extractelement <16 x i1> %213, i64 10, !dbg !52
  %257 = or i1 %256, %225, !dbg !52
  %258 = extractelement <16 x i1> %213, i64 9, !dbg !52
  %259 = or i1 %258, %227, !dbg !52
  %260 = extractelement <16 x i1> %213, i64 8, !dbg !52
  %261 = or i1 %260, %229, !dbg !52
  %262 = extractelement <16 x i1> %213, i64 7, !dbg !52
  %263 = or i1 %262, %231, !dbg !52
  %264 = extractelement <16 x i1> %213, i64 6, !dbg !52
  %265 = or i1 %264, %233, !dbg !52
  %266 = extractelement <16 x i1> %213, i64 5, !dbg !52
  %267 = or i1 %266, %235, !dbg !52
  %268 = extractelement <16 x i1> %213, i64 4, !dbg !52
  %269 = or i1 %268, %237, !dbg !52
  %270 = extractelement <16 x i1> %213, i64 3, !dbg !52
  %271 = or i1 %270, %239, !dbg !52
  %272 = extractelement <16 x i1> %213, i64 2, !dbg !52
  %273 = or i1 %272, %241, !dbg !52
  %274 = extractelement <16 x i1> %213, i64 1, !dbg !52
  %275 = or i1 %274, %243, !dbg !52
  %276 = extractelement <16 x i1> %213, i64 0, !dbg !52
  %277 = or i1 %276, %245, !dbg !52
  %278 = mul i32 %131, 49, !dbg !53
  %279 = mul i32 %174, 49, !dbg !53
  %280 = mul i32 %171, 49, !dbg !53
  %281 = mul i32 %168, 49, !dbg !53
  %282 = mul i32 %165, 49, !dbg !53
  %283 = mul i32 %162, 49, !dbg !53
  %284 = mul i32 %159, 49, !dbg !53
  %285 = mul i32 %156, 49, !dbg !53
  %286 = mul i32 %153, 49, !dbg !53
  %287 = mul i32 %150, 49, !dbg !53
  %288 = mul i32 %147, 49, !dbg !53
  %289 = mul i32 %144, 49, !dbg !53
  %290 = mul i32 %141, 49, !dbg !53
  %291 = mul i32 %138, 49, !dbg !53
  %292 = mul i32 %135, 49, !dbg !53
  %293 = mul i32 %132, 49, !dbg !53
  %294 = add i32 %127, %278, !dbg !54
  %295 = add i32 %127, %279, !dbg !54
  %296 = add i32 %127, %280, !dbg !54
  %297 = add i32 %127, %281, !dbg !54
  %298 = add i32 %127, %282, !dbg !54
  %299 = add i32 %127, %283, !dbg !54
  %300 = add i32 %127, %284, !dbg !54
  %301 = add i32 %127, %285, !dbg !54
  %302 = add i32 %127, %286, !dbg !54
  %303 = add i32 %127, %287, !dbg !54
  %304 = add i32 %127, %288, !dbg !54
  %305 = add i32 %127, %289, !dbg !54
  %306 = add i32 %127, %290, !dbg !54
  %307 = add i32 %127, %291, !dbg !54
  %308 = add i32 %127, %292, !dbg !54
  %309 = add i32 %127, %293, !dbg !54
  %310 = sext i32 %294 to i64, !dbg !55
  %311 = getelementptr float, ptr addrspace(1) %5, i64 %310, !dbg !55
  %312 = sext i32 %295 to i64, !dbg !55
  %313 = getelementptr float, ptr addrspace(1) %5, i64 %312, !dbg !55
  %314 = sext i32 %296 to i64, !dbg !55
  %315 = getelementptr float, ptr addrspace(1) %5, i64 %314, !dbg !55
  %316 = sext i32 %297 to i64, !dbg !55
  %317 = getelementptr float, ptr addrspace(1) %5, i64 %316, !dbg !55
  %318 = sext i32 %298 to i64, !dbg !55
  %319 = getelementptr float, ptr addrspace(1) %5, i64 %318, !dbg !55
  %320 = sext i32 %299 to i64, !dbg !55
  %321 = getelementptr float, ptr addrspace(1) %5, i64 %320, !dbg !55
  %322 = sext i32 %300 to i64, !dbg !55
  %323 = getelementptr float, ptr addrspace(1) %5, i64 %322, !dbg !55
  %324 = sext i32 %301 to i64, !dbg !55
  %325 = getelementptr float, ptr addrspace(1) %5, i64 %324, !dbg !55
  %326 = sext i32 %302 to i64, !dbg !55
  %327 = getelementptr float, ptr addrspace(1) %5, i64 %326, !dbg !55
  %328 = sext i32 %303 to i64, !dbg !55
  %329 = getelementptr float, ptr addrspace(1) %5, i64 %328, !dbg !55
  %330 = sext i32 %304 to i64, !dbg !55
  %331 = getelementptr float, ptr addrspace(1) %5, i64 %330, !dbg !55
  %332 = sext i32 %305 to i64, !dbg !55
  %333 = getelementptr float, ptr addrspace(1) %5, i64 %332, !dbg !55
  %334 = sext i32 %306 to i64, !dbg !55
  %335 = getelementptr float, ptr addrspace(1) %5, i64 %334, !dbg !55
  %336 = sext i32 %307 to i64, !dbg !55
  %337 = getelementptr float, ptr addrspace(1) %5, i64 %336, !dbg !55
  %338 = sext i32 %308 to i64, !dbg !55
  %339 = getelementptr float, ptr addrspace(1) %5, i64 %338, !dbg !55
  %340 = sext i32 %309 to i64, !dbg !55
  %341 = getelementptr float, ptr addrspace(1) %5, i64 %340, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %342 = shl i32 %11, 4, !dbg !50
  %343 = and i32 %342, 4080, !dbg !50
  %344 = lshr exact i32 %343, 2, !dbg !50
  %345 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %344, !dbg !50
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %343, !dbg !50
  %347 = bitcast float %214 to i32, !dbg !50
  %348 = select i1 %247, i32 %347, i32 1086324736, !dbg !56
  %349 = insertelement <1 x i32> poison, i32 %348, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %349, i1 true) #4, !dbg !50
  %350 = or disjoint i32 %343, 1, !dbg !50
  %351 = getelementptr float, ptr addrspace(3) %345, i32 %350, !dbg !50
  %352 = bitcast float %216 to i32, !dbg !50
  %353 = select i1 %249, i32 %352, i32 1086324736, !dbg !56
  %354 = insertelement <1 x i32> poison, i32 %353, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %354, i1 true) #4, !dbg !50
  %355 = or disjoint i32 %343, 2, !dbg !50
  %356 = getelementptr float, ptr addrspace(3) %345, i32 %355, !dbg !50
  %357 = bitcast float %218 to i32, !dbg !50
  %358 = select i1 %251, i32 %357, i32 1086324736, !dbg !56
  %359 = insertelement <1 x i32> poison, i32 %358, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %359, i1 true) #4, !dbg !50
  %360 = or disjoint i32 %343, 3, !dbg !50
  %361 = getelementptr float, ptr addrspace(3) %345, i32 %360, !dbg !50
  %362 = bitcast float %220 to i32, !dbg !50
  %363 = select i1 %253, i32 %362, i32 1086324736, !dbg !56
  %364 = insertelement <1 x i32> poison, i32 %363, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %364, i1 true) #4, !dbg !50
  %365 = or disjoint i32 %343, 4, !dbg !50
  %366 = getelementptr float, ptr addrspace(3) %345, i32 %365, !dbg !50
  %367 = bitcast float %222 to i32, !dbg !50
  %368 = select i1 %255, i32 %367, i32 1086324736, !dbg !56
  %369 = insertelement <1 x i32> poison, i32 %368, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %369, i1 true) #4, !dbg !50
  %370 = or disjoint i32 %343, 5, !dbg !50
  %371 = getelementptr float, ptr addrspace(3) %345, i32 %370, !dbg !50
  %372 = bitcast float %224 to i32, !dbg !50
  %373 = select i1 %257, i32 %372, i32 1086324736, !dbg !56
  %374 = insertelement <1 x i32> poison, i32 %373, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %374, i1 true) #4, !dbg !50
  %375 = or disjoint i32 %343, 6, !dbg !50
  %376 = getelementptr float, ptr addrspace(3) %345, i32 %375, !dbg !50
  %377 = bitcast float %226 to i32, !dbg !50
  %378 = select i1 %259, i32 %377, i32 1086324736, !dbg !56
  %379 = insertelement <1 x i32> poison, i32 %378, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %379, i1 true) #4, !dbg !50
  %380 = or disjoint i32 %343, 7, !dbg !50
  %381 = getelementptr float, ptr addrspace(3) %345, i32 %380, !dbg !50
  %382 = bitcast float %228 to i32, !dbg !50
  %383 = select i1 %261, i32 %382, i32 1086324736, !dbg !56
  %384 = insertelement <1 x i32> poison, i32 %383, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %384, i1 true) #4, !dbg !50
  %385 = or disjoint i32 %343, 8, !dbg !50
  %386 = getelementptr float, ptr addrspace(3) %345, i32 %385, !dbg !50
  %387 = bitcast float %230 to i32, !dbg !50
  %388 = select i1 %263, i32 %387, i32 1086324736, !dbg !56
  %389 = insertelement <1 x i32> poison, i32 %388, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %389, i1 true) #4, !dbg !50
  %390 = or disjoint i32 %343, 9, !dbg !50
  %391 = getelementptr float, ptr addrspace(3) %345, i32 %390, !dbg !50
  %392 = bitcast float %232 to i32, !dbg !50
  %393 = select i1 %265, i32 %392, i32 1086324736, !dbg !56
  %394 = insertelement <1 x i32> poison, i32 %393, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %394, i1 true) #4, !dbg !50
  %395 = or disjoint i32 %343, 10, !dbg !50
  %396 = getelementptr float, ptr addrspace(3) %345, i32 %395, !dbg !50
  %397 = bitcast float %234 to i32, !dbg !50
  %398 = select i1 %267, i32 %397, i32 1086324736, !dbg !56
  %399 = insertelement <1 x i32> poison, i32 %398, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %399, i1 true) #4, !dbg !50
  %400 = or disjoint i32 %343, 11, !dbg !50
  %401 = getelementptr float, ptr addrspace(3) %345, i32 %400, !dbg !50
  %402 = bitcast float %236 to i32, !dbg !50
  %403 = select i1 %269, i32 %402, i32 1086324736, !dbg !56
  %404 = insertelement <1 x i32> poison, i32 %403, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %404, i1 true) #4, !dbg !50
  %405 = or disjoint i32 %343, 12, !dbg !50
  %406 = getelementptr float, ptr addrspace(3) %345, i32 %405, !dbg !50
  %407 = bitcast float %238 to i32, !dbg !50
  %408 = select i1 %271, i32 %407, i32 1086324736, !dbg !56
  %409 = insertelement <1 x i32> poison, i32 %408, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %409, i1 true) #4, !dbg !50
  %410 = or disjoint i32 %343, 13, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) %345, i32 %410, !dbg !50
  %412 = bitcast float %240 to i32, !dbg !50
  %413 = select i1 %273, i32 %412, i32 1086324736, !dbg !56
  %414 = insertelement <1 x i32> poison, i32 %413, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %414, i1 true) #4, !dbg !50
  %415 = or disjoint i32 %343, 14, !dbg !50
  %416 = getelementptr float, ptr addrspace(3) %345, i32 %415, !dbg !50
  %417 = bitcast float %242 to i32, !dbg !50
  %418 = select i1 %275, i32 %417, i32 1086324736, !dbg !56
  %419 = insertelement <1 x i32> poison, i32 %418, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %419, i1 true) #4, !dbg !50
  %420 = or disjoint i32 %343, 15, !dbg !50
  %421 = getelementptr float, ptr addrspace(3) %345, i32 %420, !dbg !50
  %422 = bitcast float %244 to i32, !dbg !50
  %423 = select i1 %277, i32 %422, i32 1086324736, !dbg !56
  %424 = insertelement <1 x i32> poison, i32 %423, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %424, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %425 = lshr i32 %14, 4, !dbg !50
  %426 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %425, !dbg !50
  %427 = getelementptr inbounds float, ptr addrspace(3) %426, i32 %14, !dbg !50
  %428 = load i32, ptr addrspace(3) %427, align 4, !dbg !50
  %429 = lshr i32 %125, 4, !dbg !50
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %429, !dbg !50
  %431 = getelementptr inbounds float, ptr addrspace(3) %430, i32 %125, !dbg !50
  %432 = load i32, ptr addrspace(3) %431, align 4, !dbg !50
  %433 = lshr i32 %124, 4, !dbg !50
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !50
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %124, !dbg !50
  %436 = load i32, ptr addrspace(3) %435, align 4, !dbg !50
  %437 = lshr i32 %123, 4, !dbg !50
  %438 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %437, !dbg !50
  %439 = getelementptr inbounds float, ptr addrspace(3) %438, i32 %123, !dbg !50
  %440 = load i32, ptr addrspace(3) %439, align 4, !dbg !50
  %441 = or disjoint i32 %14, 1024, !dbg !50
  %442 = lshr i32 %441, 4, !dbg !50
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %442, !dbg !50
  %444 = getelementptr inbounds float, ptr addrspace(3) %443, i32 %441, !dbg !50
  %445 = load i32, ptr addrspace(3) %444, align 4, !dbg !50
  %446 = or disjoint i32 %14, 1280, !dbg !50
  %447 = lshr i32 %446, 4, !dbg !50
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !50
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %446, !dbg !50
  %450 = load i32, ptr addrspace(3) %449, align 4, !dbg !50
  %451 = or disjoint i32 %14, 1536, !dbg !50
  %452 = lshr i32 %451, 4, !dbg !50
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !50
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %451, !dbg !50
  %455 = load i32, ptr addrspace(3) %454, align 4, !dbg !50
  %456 = or disjoint i32 %14, 1792, !dbg !50
  %457 = lshr i32 %456, 4, !dbg !50
  %458 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %457, !dbg !50
  %459 = getelementptr inbounds float, ptr addrspace(3) %458, i32 %456, !dbg !50
  %460 = load i32, ptr addrspace(3) %459, align 4, !dbg !50
  %461 = or disjoint i32 %14, 2048, !dbg !50
  %462 = lshr i32 %461, 4, !dbg !50
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %462, !dbg !50
  %464 = getelementptr inbounds float, ptr addrspace(3) %463, i32 %461, !dbg !50
  %465 = load i32, ptr addrspace(3) %464, align 4, !dbg !50
  %466 = or disjoint i32 %14, 2304, !dbg !50
  %467 = lshr i32 %466, 4, !dbg !50
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %467, !dbg !50
  %469 = getelementptr inbounds float, ptr addrspace(3) %468, i32 %466, !dbg !50
  %470 = load i32, ptr addrspace(3) %469, align 4, !dbg !50
  %471 = or disjoint i32 %14, 2560, !dbg !50
  %472 = lshr i32 %471, 4, !dbg !50
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %472, !dbg !50
  %474 = getelementptr inbounds float, ptr addrspace(3) %473, i32 %471, !dbg !50
  %475 = load i32, ptr addrspace(3) %474, align 4, !dbg !50
  %476 = or disjoint i32 %14, 2816, !dbg !50
  %477 = lshr i32 %476, 4, !dbg !50
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %477, !dbg !50
  %479 = getelementptr inbounds float, ptr addrspace(3) %478, i32 %476, !dbg !50
  %480 = load i32, ptr addrspace(3) %479, align 4, !dbg !50
  %481 = or disjoint i32 %14, 3072, !dbg !50
  %482 = lshr i32 %481, 4, !dbg !50
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %482, !dbg !50
  %484 = getelementptr inbounds float, ptr addrspace(3) %483, i32 %481, !dbg !50
  %485 = load i32, ptr addrspace(3) %484, align 4, !dbg !50
  %486 = or disjoint i32 %14, 3328, !dbg !50
  %487 = lshr i32 %486, 4, !dbg !50
  %488 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %487, !dbg !50
  %489 = getelementptr inbounds float, ptr addrspace(3) %488, i32 %486, !dbg !50
  %490 = load i32, ptr addrspace(3) %489, align 4, !dbg !50
  %491 = or disjoint i32 %14, 3584, !dbg !50
  %492 = lshr i32 %491, 4, !dbg !50
  %493 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %492, !dbg !50
  %494 = getelementptr inbounds float, ptr addrspace(3) %493, i32 %491, !dbg !50
  %495 = load i32, ptr addrspace(3) %494, align 4, !dbg !50
  %496 = or disjoint i32 %14, 3840, !dbg !50
  %497 = lshr i32 %496, 4, !dbg !50
  %498 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %497, !dbg !50
  %499 = getelementptr inbounds float, ptr addrspace(3) %498, i32 %496, !dbg !50
  %500 = load i32, ptr addrspace(3) %499, align 4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %311, i1 %178) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %313, i1 %176) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %315, i1 %173) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %440, ptr addrspace(1) %317, i1 %170) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %445, ptr addrspace(1) %319, i1 %167) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %450, ptr addrspace(1) %321, i1 %164) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %455, ptr addrspace(1) %323, i1 %161) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %325, i1 %158) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %327, i1 %155) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %470, ptr addrspace(1) %329, i1 %152) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %475, ptr addrspace(1) %331, i1 %149) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %480, ptr addrspace(1) %333, i1 %146) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %485, ptr addrspace(1) %335, i1 %143) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %490, ptr addrspace(1) %337, i1 %140) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %495, ptr addrspace(1) %339, i1 %137) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %500, ptr addrspace(1) %341, i1 %134) #4, !dbg !50
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfuhactnulw7lin2apvv3zcxfs5mboutnywdc65qd3hewboijk6a.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 52, column: 4, scope: !7)
