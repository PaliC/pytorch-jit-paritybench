; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 1024, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = shl i32 %13, 1, !dbg !12
  %17 = and i32 %16, 126, !dbg !12
  %18 = icmp samesign ult i32 %17, 96, !dbg !13
  %19 = mul i32 %11, 96, !dbg !14
  %20 = add i32 %19, %17, !dbg !15
  %21 = sext i32 %20 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = and i1 %18, %12, !dbg !17
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !18
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !20
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %31 = zext nneg i32 %17 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !26
  %40 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %26, i64 1, !dbg !18
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !18
  %43 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %44 = insertelement <2 x i32> %43, i32 %30, i64 1, !dbg !20
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !20
  %46 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !22
  %47 = insertelement <2 x i32> %46, i32 %35, i64 1, !dbg !22
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !22
  %49 = fadd <2 x float> %45, %48, !dbg !27
  %50 = fadd <2 x float> %49, %42, !dbg !28
  %51 = extractelement <2 x float> %50, i64 0, !dbg !29
  %52 = extractelement <2 x float> %50, i64 1, !dbg !29
  %53 = fadd float %51, %52, !dbg !29
  %54 = select i1 %23, float %53, float 0.000000e+00, !dbg !29
  %55 = bitcast float %54 to i32, !dbg !34
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = fadd float %54, %57, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !34
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = fadd float %58, %61, !dbg !29
  %63 = bitcast float %62 to i32, !dbg !34
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = fadd float %62, %65, !dbg !29
  %67 = bitcast float %66 to i32, !dbg !34
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = fadd float %66, %69, !dbg !29
  %71 = bitcast float %70 to i32, !dbg !34
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = fadd float %70, %73, !dbg !29
  %75 = icmp eq i32 %14, 0, !dbg !34
  %76 = and i32 %15, 1, !dbg !34
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !34
  %78 = bitcast float %74 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 %75) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %79 = icmp slt i32 %13, 2, !dbg !34
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %79) #5, !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !34
  %84 = bitcast i32 %83 to float, !dbg !34
  %85 = fadd float %82, %84, !dbg !29
  %86 = and i32 %13, 1, !dbg !34
  %87 = icmp eq i32 %86, 0, !dbg !34
  %88 = and i1 %79, %87, !dbg !34
  %89 = bitcast float %85 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %89, i1 %88) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %90 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 9.600000e+01) #5, !dbg !35
  %92 = fsub float %51, %91, !dbg !36
  %93 = fsub float %52, %91, !dbg !36
  %94 = fmul float %92, %92, !dbg !37
  %95 = fmul float %93, %93, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %96 = fadd float %94, %95, !dbg !40
  %97 = select i1 %23, float %96, float 0.000000e+00, !dbg !40
  %98 = bitcast float %97 to i32, !dbg !38
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !38
  %100 = bitcast i32 %99 to float, !dbg !38
  %101 = fadd float %97, %100, !dbg !40
  %102 = bitcast float %101 to i32, !dbg !38
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !38
  %104 = bitcast i32 %103 to float, !dbg !38
  %105 = fadd float %101, %104, !dbg !40
  %106 = bitcast float %105 to i32, !dbg !38
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !38
  %108 = bitcast i32 %107 to float, !dbg !38
  %109 = fadd float %105, %108, !dbg !40
  %110 = bitcast float %109 to i32, !dbg !38
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !38
  %112 = bitcast i32 %111 to float, !dbg !38
  %113 = fadd float %109, %112, !dbg !40
  %114 = bitcast float %113 to i32, !dbg !38
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !38
  %116 = bitcast i32 %115 to float, !dbg !38
  %117 = fadd float %113, %116, !dbg !40
  %118 = bitcast float %117 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %118, i1 %75) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %119 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %79) #5, !dbg !38
  %120 = bitcast i32 %119 to float, !dbg !38
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !38
  %122 = bitcast i32 %121 to float, !dbg !38
  %123 = fadd float %120, %122, !dbg !40
  %124 = bitcast float %123 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %124, i1 %88) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %125 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 9.600000e+01) #5, !dbg !41
  %127 = fadd float %126, 0x3EB0C6F7A0000000, !dbg !42
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %128, 0, !dbg !43
  br i1 %.not.i, label %131, label %129, !dbg !43

129:                                              ; preds = %10
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

131:                                              ; preds = %10
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %129, %131
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], !dbg !43
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i4 = icmp eq i32 %134, 0, !dbg !43
  br i1 %.not.i4, label %137, label %135, !dbg !43

135:                                              ; preds = %__nv_rsqrtf.exit
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !43
  br label %__nv_rsqrtf.exit6, !dbg !43

137:                                              ; preds = %__nv_rsqrtf.exit
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !43
  br label %__nv_rsqrtf.exit6, !dbg !43

__nv_rsqrtf.exit6:                                ; preds = %135, %137
  %.0.i5 = phi float [ %136, %135 ], [ %138, %137 ], !dbg !43
  %139 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %140 = bitcast i32 %139 to float, !dbg !26
  %141 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %142 = bitcast i32 %141 to float, !dbg !26
  %143 = extractvalue { i32, i32 } %37, 1, !dbg !24
  %144 = bitcast i32 %143 to float, !dbg !24
  %145 = extractvalue { i32, i32 } %37, 0, !dbg !24
  %146 = bitcast i32 %145 to float, !dbg !24
  %147 = fmul float %92, %.0.i5, !dbg !44
  %148 = fmul float %93, %.0.i5, !dbg !44
  %149 = fmul float %147, %146, !dbg !45
  %150 = fmul float %148, %144, !dbg !45
  %151 = fadd float %149, %142, !dbg !46
  %152 = fadd float %150, %140, !dbg !46
  %153 = fmul float %.0.i, 0x3F85555560000000, !dbg !47
  %154 = bitcast float %51 to i32, !dbg !48
  %155 = bitcast float %52 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %22, i1 %23) #5, !dbg !48
  %156 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !49
  %157 = bitcast float %147 to i32, !dbg !50
  %158 = bitcast float %148 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 %23) #5, !dbg !50
  %159 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !51
  %160 = bitcast float %151 to i32, !dbg !52
  %161 = bitcast float %152 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %159, i1 %23) #5, !dbg !52
  %162 = sext i32 %11 to i64, !dbg !53
  %163 = getelementptr float, ptr addrspace(1) %7, i64 %162, !dbg !53
  %urem = and i32 %13, 63, !dbg !54
  %164 = icmp eq i32 %urem, 0, !dbg !54
  %165 = bitcast float %153 to i32, !dbg !54
  %166 = and i1 %164, %12, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %163, i1 %166) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7dea26b4zzczuuaqlsgwhj7eloag26ymcuissvjp564xtccycgp.py", directory: "inductor_cache/7d")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 42, scope: !7)
!15 = !DILocation(line: 31, column: 39, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 55, scope: !7)
!18 = !DILocation(line: 31, column: 47, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 42, column: 26, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 50, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 28, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 47, scope: !7)
!49 = !DILocation(line: 63, column: 25, scope: !7)
!50 = !DILocation(line: 63, column: 45, scope: !7)
!51 = !DILocation(line: 64, column: 25, scope: !7)
!52 = !DILocation(line: 64, column: 45, scope: !7)
!53 = !DILocation(line: 65, column: 25, scope: !7)
!54 = !DILocation(line: 65, column: 37, scope: !7)
!55 = !DILocation(line: 65, column: 4, scope: !7)
