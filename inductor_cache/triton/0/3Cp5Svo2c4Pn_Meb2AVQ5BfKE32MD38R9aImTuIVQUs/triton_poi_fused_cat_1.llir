; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 4096, !dbg !14
  %16 = sdiv i32 %14, 4096, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 262144, !dbg !15
  %.frozen2 = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen2, 262144, !dbg !15
  %19 = mul i32 %17, 262144, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = mul i32 %18, 262144, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %20, !dbg !16
  %21 = shl nsw i32 %17, 18, !dbg !17
  %22 = shl nsw i32 %18, 18, !dbg !17
  %23 = add i32 %21, %srem.decomposed, !dbg !18
  %24 = add i32 %22, %srem1.decomposed, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = shl nsw i32 %17, 16, !dbg !20
  %30 = shl nsw i32 %18, 16, !dbg !20
  %31 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !21
  %32 = insertelement <2 x i32> %31, i32 %15, i64 1, !dbg !21
  %33 = srem <2 x i32> %32, <i32 4096, i32 64>, !dbg !21
  %34 = extractelement <2 x i32> %33, i64 1, !dbg !22
  %35 = icmp slt i32 %34, 16, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %41 = and i32 %34, -16, !dbg !25
  %42 = icmp eq i32 %41, 16, !dbg !25
  %43 = shl nsw i32 %34, 12, !dbg !26
  %44 = extractelement <2 x i32> %33, i64 0, !dbg !26
  %45 = add i32 %21, %44, !dbg !26
  %46 = add i32 %45, -65536, !dbg !27
  %47 = add i32 %46, %43, !dbg !28
  %48 = sext i32 %47 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !29
  %50 = icmp eq i32 %41, 32, !dbg !30
  %51 = add i32 %45, -131072, !dbg !31
  %52 = add i32 %51, %43, !dbg !32
  %53 = sext i32 %52 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !33
  %55 = icmp sgt i32 %34, 47, !dbg !22
  %56 = insertelement <2 x i32> <i32 poison, i32 -48>, i32 %29, i64 0, !dbg !34
  %57 = add nsw <2 x i32> %56, %33, !dbg !34
  %58 = extractelement <2 x i32> %57, i64 1, !dbg !35
  %59 = shl nsw i32 %58, 12, !dbg !35
  %60 = extractelement <2 x i32> %57, i64 0, !dbg !36
  %61 = add nsw i32 %60, %59, !dbg !36
  %62 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !21
  %63 = insertelement <2 x i32> %62, i32 %16, i64 1, !dbg !21
  %64 = srem <2 x i32> %63, <i32 4096, i32 64>, !dbg !21
  %65 = extractelement <2 x i32> %64, i64 1, !dbg !22
  %66 = icmp slt i32 %65, 16, !dbg !23
  %67 = and i32 %65, -16, !dbg !25
  %68 = icmp eq i32 %67, 16, !dbg !25
  %69 = shl nsw i32 %65, 12, !dbg !26
  %70 = extractelement <2 x i32> %64, i64 0, !dbg !26
  %71 = add i32 %22, %70, !dbg !26
  %72 = add i32 %71, -65536, !dbg !27
  %73 = add i32 %72, %69, !dbg !28
  %74 = sext i32 %73 to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !29
  %76 = icmp eq i32 %67, 32, !dbg !30
  %77 = add i32 %71, -131072, !dbg !31
  %78 = add i32 %77, %69, !dbg !32
  %79 = sext i32 %78 to i64, !dbg !33
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !33
  %81 = icmp sgt i32 %65, 47, !dbg !22
  %82 = insertelement <2 x i32> <i32 poison, i32 -48>, i32 %30, i64 0, !dbg !34
  %83 = add nsw <2 x i32> %82, %64, !dbg !34
  %84 = extractelement <2 x i32> %83, i64 1, !dbg !35
  %85 = shl nsw i32 %84, 12, !dbg !35
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !24
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #1, !dbg !37
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !37
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !37
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #1, !dbg !37
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !37
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !37
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !37
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !37
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #1, !dbg !38
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !38
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !38
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !38
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !38
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #1, !dbg !38
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %111 = extractelement <2 x i32> %83, i64 0, !dbg !36
  %112 = add nsw i32 %111, %85, !dbg !36
  %113 = sext i32 %61 to i64, !dbg !39
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !39
  %115 = sext i32 %112 to i64, !dbg !39
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !39
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !40
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !40
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !40
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !40
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !40
  %122 = bitcast i32 %118 to float, !dbg !40
  %123 = bitcast i32 %119 to float, !dbg !40
  %124 = bitcast i32 %120 to float, !dbg !40
  %125 = bitcast i32 %121 to float, !dbg !40
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #1, !dbg !40
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !40
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !40
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !40
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !40
  %131 = bitcast i32 %127 to float, !dbg !40
  %132 = bitcast i32 %128 to float, !dbg !40
  %133 = bitcast i32 %129 to float, !dbg !40
  %134 = bitcast i32 %130 to float, !dbg !40
  %135 = sext i32 %58 to i64, !dbg !41
  %136 = getelementptr float, ptr addrspace(1) %4, i64 %135, !dbg !41
  %137 = sext i32 %84 to i64, !dbg !41
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %137, !dbg !41
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %55, i32 0, i1 %55) #1, !dbg !42
  %140 = bitcast i32 %139 to float, !dbg !42
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %55, i32 0, i1 %55) #1, !dbg !42
  %142 = bitcast i32 %141 to float, !dbg !42
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %55, i32 0, i1 %55) #1, !dbg !42
  %144 = bitcast i32 %143 to float, !dbg !42
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %55, i32 0, i1 %55) #1, !dbg !42
  %146 = bitcast i32 %145 to float, !dbg !42
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %81, i32 0, i1 %81) #1, !dbg !42
  %148 = bitcast i32 %147 to float, !dbg !42
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %81, i32 0, i1 %81) #1, !dbg !42
  %150 = bitcast i32 %149 to float, !dbg !42
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %81, i32 0, i1 %81) #1, !dbg !42
  %152 = bitcast i32 %151 to float, !dbg !42
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %81, i32 0, i1 %81) #1, !dbg !42
  %154 = bitcast i32 %153 to float, !dbg !42
  %155 = fadd float %122, %140, !dbg !43
  %156 = fadd float %123, %142, !dbg !43
  %157 = fadd float %124, %144, !dbg !43
  %158 = fadd float %125, %146, !dbg !43
  %159 = fadd float %131, %148, !dbg !43
  %160 = fadd float %132, %150, !dbg !43
  %161 = fadd float %133, %152, !dbg !43
  %162 = fadd float %134, %154, !dbg !43
  %163 = sext i32 %13 to i64, !dbg !44
  %164 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !44
  %165 = sext i32 %14 to i64, !dbg !44
  %166 = getelementptr float, ptr addrspace(1) %5, i64 %165, !dbg !44
  %167 = bitcast float %155 to i32, !dbg !45
  %168 = select i1 %55, i32 %167, i32 0, !dbg !46
  %169 = select i1 %50, i32 %102, i32 %168, !dbg !47
  %170 = select i1 %42, i32 %92, i32 %169, !dbg !48
  %171 = select i1 %35, i32 %37, i32 %170, !dbg !49
  %172 = bitcast float %156 to i32, !dbg !45
  %173 = select i1 %55, i32 %172, i32 0, !dbg !46
  %174 = select i1 %50, i32 %103, i32 %173, !dbg !47
  %175 = select i1 %42, i32 %93, i32 %174, !dbg !48
  %176 = select i1 %35, i32 %38, i32 %175, !dbg !49
  %177 = bitcast float %157 to i32, !dbg !45
  %178 = select i1 %55, i32 %177, i32 0, !dbg !46
  %179 = select i1 %50, i32 %104, i32 %178, !dbg !47
  %180 = select i1 %42, i32 %94, i32 %179, !dbg !48
  %181 = select i1 %35, i32 %39, i32 %180, !dbg !49
  %182 = bitcast float %158 to i32, !dbg !45
  %183 = select i1 %55, i32 %182, i32 0, !dbg !46
  %184 = select i1 %50, i32 %105, i32 %183, !dbg !47
  %185 = select i1 %42, i32 %95, i32 %184, !dbg !48
  %186 = select i1 %35, i32 %40, i32 %185, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %176, i32 %181, i32 %186, ptr addrspace(1) %164, i1 true) #1, !dbg !45
  %187 = bitcast float %159 to i32, !dbg !45
  %188 = select i1 %81, i32 %187, i32 0, !dbg !46
  %189 = select i1 %76, i32 %107, i32 %188, !dbg !47
  %190 = select i1 %68, i32 %97, i32 %189, !dbg !48
  %191 = select i1 %66, i32 %87, i32 %190, !dbg !49
  %192 = bitcast float %160 to i32, !dbg !45
  %193 = select i1 %81, i32 %192, i32 0, !dbg !46
  %194 = select i1 %76, i32 %108, i32 %193, !dbg !47
  %195 = select i1 %68, i32 %98, i32 %194, !dbg !48
  %196 = select i1 %66, i32 %88, i32 %195, !dbg !49
  %197 = bitcast float %161 to i32, !dbg !45
  %198 = select i1 %81, i32 %197, i32 0, !dbg !46
  %199 = select i1 %76, i32 %109, i32 %198, !dbg !47
  %200 = select i1 %68, i32 %99, i32 %199, !dbg !48
  %201 = select i1 %66, i32 %89, i32 %200, !dbg !49
  %202 = bitcast float %162 to i32, !dbg !45
  %203 = select i1 %81, i32 %202, i32 0, !dbg !46
  %204 = select i1 %76, i32 %110, i32 %203, !dbg !47
  %205 = select i1 %68, i32 %100, i32 %204, !dbg !48
  %206 = select i1 %66, i32 %90, i32 %205, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %196, i32 %201, i32 %206, ptr addrspace(1) %166, i1 true) #1, !dbg !45
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw5qfprgtqh5cdptfzjudkxvakifcgkuapfmq4nhiiuwhimlezyj.py", directory: "inductor_cache/w5")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 47, column: 62, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 44, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 42, scope: !7)
!27 = !DILocation(line: 38, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 56, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 42, column: 20, scope: !7)
!31 = !DILocation(line: 43, column: 36, scope: !7)
!32 = !DILocation(line: 43, column: 56, scope: !7)
!33 = !DILocation(line: 43, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 42, scope: !7)
!36 = !DILocation(line: 47, column: 56, scope: !7)
!37 = !DILocation(line: 38, column: 68, scope: !7)
!38 = !DILocation(line: 43, column: 68, scope: !7)
!39 = !DILocation(line: 47, column: 31, scope: !7)
!40 = !DILocation(line: 47, column: 67, scope: !7)
!41 = !DILocation(line: 48, column: 31, scope: !7)
!42 = !DILocation(line: 48, column: 44, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 25, scope: !7)
!45 = !DILocation(line: 55, column: 37, scope: !7)
!46 = !DILocation(line: 51, column: 35, scope: !7)
!47 = !DILocation(line: 52, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 34, scope: !7)
!49 = !DILocation(line: 54, column: 33, scope: !7)
!50 = !DILocation(line: 55, column: 4, scope: !7)
