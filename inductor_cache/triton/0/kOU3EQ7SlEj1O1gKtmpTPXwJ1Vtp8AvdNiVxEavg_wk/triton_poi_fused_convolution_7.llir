; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = and i32 %8, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 2, !dbg !15
  %21 = lshr i32 %8, 6, !dbg !16
  %.lobit = and i32 %21, 1, !dbg !16
  %22 = or disjoint i32 %20, %.lobit, !dbg !17
  %23 = or disjoint i32 %22, 2, !dbg !17
  %24 = icmp slt i32 %22, 4, !dbg !18
  %25 = icmp slt i32 %23, 4, !dbg !18
  %26 = icmp slt i32 %20, 4, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %27 = sdiv i32 %.frozen, 256, !dbg !19
  %28 = mul i32 %27, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = srem i32 %16, 256, !dbg !20
  %30 = shl i32 %22, 8, !dbg !21
  %31 = shl i32 %23, 8, !dbg !21
  %32 = shl i32 %27, 10, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %25) #2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %50 = shl i32 %8, 4, !dbg !26
  %51 = and i32 %50, 1008, !dbg !26
  %52 = or disjoint i32 %51, %.lobit, !dbg !26
  %53 = and i32 %9, 508, !dbg !26
  %54 = lshr exact i32 %51, 2, !dbg !26
  %55 = add nuw nsw i32 %54, %52, !dbg !26
  %56 = zext nneg i32 %55 to i64, !dbg !26
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %56, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !26
  %59 = or disjoint i32 %52, 4, !dbg !26
  %60 = lshr i32 %59, 2, !dbg !26
  %61 = add nuw nsw i32 %60, %59, !dbg !26
  %62 = zext nneg i32 %61 to i64, !dbg !26
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %62, !dbg !26
  %64 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !26
  %65 = or disjoint i32 %52, 8, !dbg !26
  %66 = lshr i32 %65, 2, !dbg !26
  %67 = add nuw nsw i32 %66, %65, !dbg !26
  %68 = zext nneg i32 %67 to i64, !dbg !26
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %68, !dbg !26
  %70 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !26
  %71 = or disjoint i32 %52, 12, !dbg !26
  %72 = lshr i32 %71, 2, !dbg !26
  %73 = add nuw nsw i32 %72, %71, !dbg !26
  %74 = zext nneg i32 %73 to i64, !dbg !26
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !26
  %76 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !26
  %77 = or disjoint i32 %52, 2, !dbg !26
  %78 = add nuw nsw i32 %77, %54, !dbg !26
  %79 = zext nneg i32 %78 to i64, !dbg !26
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %79, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !26
  %82 = or disjoint i32 %52, 6, !dbg !26
  %83 = lshr i32 %82, 2, !dbg !26
  %84 = add nuw nsw i32 %83, %82, !dbg !26
  %85 = zext nneg i32 %84 to i64, !dbg !26
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !26
  %87 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !26
  %88 = or disjoint i32 %52, 10, !dbg !26
  %89 = lshr i32 %88, 2, !dbg !26
  %90 = add nuw nsw i32 %89, %88, !dbg !26
  %91 = zext nneg i32 %90 to i64, !dbg !26
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !26
  %93 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !26
  %94 = or disjoint i32 %52, 14, !dbg !26
  %95 = lshr i32 %94, 2, !dbg !26
  %96 = add nuw nsw i32 %95, %94, !dbg !26
  %97 = zext nneg i32 %96 to i64, !dbg !26
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !26
  %99 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %100 = lshr exact i32 %53, 2, !dbg !26
  %101 = add nuw nsw i32 %100, %53, !dbg !26
  %102 = zext nneg i32 %101 to i64, !dbg !26
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %102, !dbg !26
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !26
  %105 = or disjoint i32 %53, 1, !dbg !26
  %106 = add nuw nsw i32 %105, %100, !dbg !26
  %107 = zext nneg i32 %106 to i64, !dbg !26
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !26
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !26
  %110 = or disjoint i32 %53, 2, !dbg !26
  %111 = add nuw nsw i32 %110, %100, !dbg !26
  %112 = zext nneg i32 %111 to i64, !dbg !26
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !26
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !26
  %115 = or disjoint i32 %53, 3, !dbg !26
  %116 = add nuw nsw i32 %115, %100, !dbg !26
  %117 = zext nneg i32 %116 to i64, !dbg !26
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !26
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !26
  %120 = or disjoint i32 %53, 512, !dbg !26
  %121 = lshr exact i32 %120, 2, !dbg !26
  %122 = add nuw nsw i32 %121, %120, !dbg !26
  %123 = zext nneg i32 %122 to i64, !dbg !26
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !26
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !26
  %126 = or disjoint i32 %53, 513, !dbg !26
  %127 = lshr i32 %126, 2, !dbg !26
  %128 = add nuw nsw i32 %127, %126, !dbg !26
  %129 = zext nneg i32 %128 to i64, !dbg !26
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !26
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !26
  %132 = or disjoint i32 %53, 514, !dbg !26
  %133 = lshr i32 %132, 2, !dbg !26
  %134 = add nuw nsw i32 %133, %132, !dbg !26
  %135 = zext nneg i32 %134 to i64, !dbg !26
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !26
  %137 = load float, ptr addrspace(3) %136, align 4, !dbg !26
  %138 = or disjoint i32 %53, 515, !dbg !26
  %139 = lshr i32 %138, 2, !dbg !26
  %140 = add nuw nsw i32 %139, %138, !dbg !26
  %141 = zext nneg i32 %140 to i64, !dbg !26
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %141, !dbg !26
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !26
  %144 = sext i32 %29 to i64, !dbg !27
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !27
  %146 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %145, i1 true) #2, !dbg !28
  %147 = extractvalue { i32, i32 } %146, 0, !dbg !28
  %148 = extractvalue { i32, i32 } %146, 1, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %149 = shl nuw nsw i32 %12, 1, !dbg !29
  %150 = zext nneg i32 %149 to i64, !dbg !29
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !29
  %152 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !29
  %153 = or disjoint i32 %149, 2, !dbg !29
  %154 = zext nneg i32 %153 to i64, !dbg !29
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !29
  %156 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %157 = shl nuw nsw i32 %13, 1, !dbg !29
  %158 = zext nneg i32 %157 to i64, !dbg !29
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !29
  %160 = load float, ptr addrspace(3) %159, align 8, !dbg !29
  %161 = shl nuw nsw i32 %14, 1, !dbg !29
  %162 = zext nneg i32 %161 to i64, !dbg !29
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %162, !dbg !29
  %164 = load float, ptr addrspace(3) %163, align 8, !dbg !29
  %165 = fadd float %104, %160, !dbg !29
  %166 = fadd float %109, %160, !dbg !29
  %167 = fadd float %114, %160, !dbg !29
  %168 = fadd float %119, %160, !dbg !29
  %169 = fadd float %125, %164, !dbg !29
  %170 = fadd float %131, %164, !dbg !29
  %171 = fadd float %137, %164, !dbg !29
  %172 = fadd float %143, %164, !dbg !29
  %173 = add i32 %17, %19, !dbg !30
  %174 = shl i32 %173, 2, !dbg !30
  %175 = add i32 %18, %19, !dbg !30
  %176 = shl i32 %175, 2, !dbg !30
  %177 = sext i32 %174 to i64, !dbg !31
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !31
  %179 = sext i32 %176 to i64, !dbg !31
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !31
  %181 = bitcast float %165 to i32, !dbg !32
  %182 = bitcast float %166 to i32, !dbg !32
  %183 = bitcast float %167 to i32, !dbg !32
  %184 = bitcast float %168 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %178, i1 %26) #2, !dbg !32
  %185 = bitcast float %169 to i32, !dbg !32
  %186 = bitcast float %170 to i32, !dbg !32
  %187 = bitcast float %171 to i32, !dbg !32
  %188 = bitcast float %172 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %186, i32 %187, i32 %188, ptr addrspace(1) %180, i1 %26) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4j7wjdokle77znibl7yzu5mpcr4j5tv5dstshhaei74pfbfmro7.py", directory: "inductor_cache/4j")
!4 = !{ptr @triton_poi_fused_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_7", linkageName: "triton_poi_fused_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
