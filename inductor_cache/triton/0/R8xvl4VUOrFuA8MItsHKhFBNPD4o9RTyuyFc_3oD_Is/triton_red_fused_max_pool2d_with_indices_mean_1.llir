; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_pool2d_with_indices_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 15, !dbg !12
  %12 = lshr i32 %9, 5, !dbg !12
  %13 = and i32 %9, 256, !dbg !12
  %14 = lshr i32 %9, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = and i32 %12, 15, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %15, !dbg !13
  %19 = or disjoint i32 %18, 8, !dbg !13
  %20 = or disjoint i32 %8, %16, !dbg !13
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = lshr i32 %9, 4, !dbg !15
  %26 = and i32 %25, 15, !dbg !15
  %27 = shl i32 %9, 2, !dbg !15
  %28 = and i32 %27, 252, !dbg !15
  %29 = shl i32 %9, 3, !dbg !15
  %30 = and i32 %29, 248, !dbg !15
  %31 = icmp ne i32 %13, 0, !dbg !16
  %32 = shl nuw nsw i32 %26, 1, !dbg !17
  %33 = add nsw i32 %32, -1, !dbg !18
  %34 = icmp ne i32 %26, 0, !dbg !19
  %35 = and i1 %31, %34, !dbg !20
  %36 = add nuw nsw i32 %32, -33, !dbg !21
  %37 = lshr exact i32 %13, 2, !dbg !22
  %38 = or disjoint i32 %37, 128, !dbg !22
  %39 = or disjoint i32 %37, 256, !dbg !22
  %40 = or disjoint i32 %37, 384, !dbg !22
  %41 = or disjoint i32 %37, 512, !dbg !22
  %42 = or disjoint i32 %37, 640, !dbg !22
  %43 = or disjoint i32 %37, 768, !dbg !22
  %44 = or disjoint i32 %37, 896, !dbg !22
  %45 = add nsw i32 %36, %38, !dbg !23
  %46 = add nsw i32 %36, %39, !dbg !23
  %47 = add nsw i32 %36, %40, !dbg !23
  %48 = add nsw i32 %36, %41, !dbg !23
  %49 = add nsw i32 %36, %42, !dbg !23
  %50 = add nsw i32 %36, %43, !dbg !23
  %51 = add nsw i32 %36, %44, !dbg !23
  %52 = shl i32 %17, 10, !dbg !24
  %53 = or disjoint i32 %52, %37, !dbg !23
  %54 = add i32 %53, %36, !dbg !25
  %55 = or disjoint i32 %52, %45, !dbg !25
  %56 = or disjoint i32 %52, %46, !dbg !25
  %57 = or disjoint i32 %52, %47, !dbg !25
  %58 = or disjoint i32 %52, %48, !dbg !25
  %59 = or disjoint i32 %52, %49, !dbg !25
  %60 = or disjoint i32 %52, %50, !dbg !25
  %61 = or disjoint i32 %52, %51, !dbg !25
  %62 = sext i32 %54 to i64, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !26
  %64 = sext i32 %55 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !26
  %66 = sext i32 %56 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !26
  %68 = sext i32 %57 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !26
  %70 = sext i32 %58 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !26
  %72 = sext i32 %59 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !26
  %74 = sext i32 %60 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !26
  %76 = sext i32 %61 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !26
  %78 = and i1 %35, %21, !dbg !27
  %79 = and i1 %34, %21, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %78, i32 -8388608, i1 %78) #3, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %79, i32 -8388608, i1 %79) #3, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %79, i32 -8388608, i1 %79) #3, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %79, i32 -8388608, i1 %79) #3, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %79, i32 -8388608, i1 %79) #3, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %79, i32 -8388608, i1 %79) #3, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %79, i32 -8388608, i1 %79) #3, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %79, i32 -8388608, i1 %79) #3, !dbg !28
  %88 = or disjoint i32 %32, -32, !dbg !29
  %89 = add nsw i32 %88, %38, !dbg !30
  %90 = add nsw i32 %88, %39, !dbg !30
  %91 = add nsw i32 %88, %40, !dbg !30
  %92 = add nsw i32 %88, %41, !dbg !30
  %93 = add nsw i32 %88, %42, !dbg !30
  %94 = add nsw i32 %88, %43, !dbg !30
  %95 = add nsw i32 %88, %44, !dbg !30
  %96 = add i32 %53, %88, !dbg !31
  %97 = or disjoint i32 %52, %89, !dbg !31
  %98 = or disjoint i32 %52, %90, !dbg !31
  %99 = or disjoint i32 %52, %91, !dbg !31
  %100 = or disjoint i32 %52, %92, !dbg !31
  %101 = or disjoint i32 %52, %93, !dbg !31
  %102 = or disjoint i32 %52, %94, !dbg !31
  %103 = or disjoint i32 %52, %95, !dbg !31
  %104 = sext i32 %96 to i64, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !32
  %106 = sext i32 %97 to i64, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !32
  %108 = sext i32 %98 to i64, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !32
  %110 = sext i32 %99 to i64, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !32
  %112 = sext i32 %100 to i64, !dbg !32
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !32
  %114 = sext i32 %101 to i64, !dbg !32
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !32
  %116 = sext i32 %102 to i64, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !32
  %118 = sext i32 %103 to i64, !dbg !32
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !32
  %120 = and i1 %31, %21, !dbg !33
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %120, i32 -8388608, i1 %120) #3, !dbg !34
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %21, i32 -8388608, i1 %21) #3, !dbg !34
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %21, i32 -8388608, i1 %21) #3, !dbg !34
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %21, i32 -8388608, i1 %21) #3, !dbg !34
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %21, i32 -8388608, i1 %21) #3, !dbg !34
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %21, i32 -8388608, i1 %21) #3, !dbg !34
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %21, i32 -8388608, i1 %21) #3, !dbg !34
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %21, i32 -8388608, i1 %21) #3, !dbg !34
  %129 = or disjoint i32 %32, 1, !dbg !35
  %130 = or disjoint i32 %32, -31, !dbg !36
  %131 = add nsw i32 %130, %38, !dbg !37
  %132 = add nsw i32 %130, %39, !dbg !37
  %133 = add nsw i32 %130, %40, !dbg !37
  %134 = add nsw i32 %130, %41, !dbg !37
  %135 = add nsw i32 %130, %42, !dbg !37
  %136 = add nsw i32 %130, %43, !dbg !37
  %137 = add nsw i32 %130, %44, !dbg !37
  %138 = add i32 %53, %130, !dbg !38
  %139 = or disjoint i32 %52, %131, !dbg !38
  %140 = or disjoint i32 %52, %132, !dbg !38
  %141 = or disjoint i32 %52, %133, !dbg !38
  %142 = or disjoint i32 %52, %134, !dbg !38
  %143 = or disjoint i32 %52, %135, !dbg !38
  %144 = or disjoint i32 %52, %136, !dbg !38
  %145 = or disjoint i32 %52, %137, !dbg !38
  %146 = sext i32 %138 to i64, !dbg !39
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !39
  %148 = sext i32 %139 to i64, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !39
  %150 = sext i32 %140 to i64, !dbg !39
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !39
  %152 = sext i32 %141 to i64, !dbg !39
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !39
  %154 = sext i32 %142 to i64, !dbg !39
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !39
  %156 = sext i32 %143 to i64, !dbg !39
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !39
  %158 = sext i32 %144 to i64, !dbg !39
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !39
  %160 = sext i32 %145 to i64, !dbg !39
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !39
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %120, i32 -8388608, i1 %120) #3, !dbg !40
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %21, i32 -8388608, i1 %21) #3, !dbg !40
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %21, i32 -8388608, i1 %21) #3, !dbg !40
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %21, i32 -8388608, i1 %21) #3, !dbg !40
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %21, i32 -8388608, i1 %21) #3, !dbg !40
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %21, i32 -8388608, i1 %21) #3, !dbg !40
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %21, i32 -8388608, i1 %21) #3, !dbg !40
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %21, i32 -8388608, i1 %21) #3, !dbg !40
  %170 = add i32 %52, %33, !dbg !41
  %171 = add i32 %170, %37, !dbg !42
  %172 = add i32 %170, %38, !dbg !42
  %173 = add i32 %170, %39, !dbg !42
  %174 = add i32 %170, %40, !dbg !42
  %175 = add i32 %170, %41, !dbg !42
  %176 = add i32 %170, %42, !dbg !42
  %177 = add i32 %170, %43, !dbg !42
  %178 = add i32 %170, %44, !dbg !42
  %179 = sext i32 %171 to i64, !dbg !43
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !43
  %181 = sext i32 %172 to i64, !dbg !43
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !43
  %183 = sext i32 %173 to i64, !dbg !43
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !43
  %185 = sext i32 %174 to i64, !dbg !43
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !43
  %187 = sext i32 %175 to i64, !dbg !43
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !43
  %189 = sext i32 %176 to i64, !dbg !43
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !43
  %191 = sext i32 %177 to i64, !dbg !43
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !43
  %193 = sext i32 %178 to i64, !dbg !43
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !43
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %79, i32 -8388608, i1 %79) #3, !dbg !44
  %203 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !28
  %204 = insertelement <2 x i32> %203, i32 %81, i64 1, !dbg !28
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !28
  %206 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !34
  %207 = insertelement <2 x i32> %206, i32 %122, i64 1, !dbg !34
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !34
  %209 = fcmp ogt <2 x float> %208, %205, !dbg !45
  %210 = fcmp uno <2 x float> %208, zeroinitializer, !dbg !49
  %211 = or <2 x i1> %209, %210, !dbg !50
  %.v = select <2 x i1> %211, <2 x i32> %207, <2 x i32> %204, !dbg !51
  %212 = bitcast <2 x i32> %.v to <2 x float>, !dbg !51
  %213 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !40
  %214 = insertelement <2 x i32> %213, i32 %163, i64 1, !dbg !40
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !40
  %216 = fcmp olt <2 x float> %212, %215, !dbg !52
  %217 = fcmp uno <2 x float> %215, zeroinitializer, !dbg !54
  %218 = or <2 x i1> %216, %217, !dbg !55
  %.v23 = select <2 x i1> %218, <2 x i32> %214, <2 x i32> %.v, !dbg !56
  %219 = bitcast <2 x i32> %.v23 to <2 x float>, !dbg !56
  %220 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !44
  %221 = insertelement <2 x i32> %220, i32 %196, i64 1, !dbg !44
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !44
  %223 = fcmp olt <2 x float> %219, %222, !dbg !57
  %224 = fcmp uno <2 x float> %222, zeroinitializer, !dbg !59
  %225 = or <2 x i1> %223, %224, !dbg !60
  %.v24 = select <2 x i1> %225, <2 x i32> %221, <2 x i32> %.v23, !dbg !61
  %226 = bitcast <2 x i32> %.v24 to <2 x float>, !dbg !61
  %227 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !28
  %228 = insertelement <2 x i32> %227, i32 %83, i64 1, !dbg !28
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !28
  %230 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !34
  %231 = insertelement <2 x i32> %230, i32 %124, i64 1, !dbg !34
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !34
  %233 = fcmp ogt <2 x float> %232, %229, !dbg !45
  %234 = fcmp uno <2 x float> %232, zeroinitializer, !dbg !49
  %235 = or <2 x i1> %233, %234, !dbg !50
  %.v25 = select <2 x i1> %235, <2 x i32> %231, <2 x i32> %228, !dbg !51
  %236 = bitcast <2 x i32> %.v25 to <2 x float>, !dbg !51
  %237 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !40
  %238 = insertelement <2 x i32> %237, i32 %165, i64 1, !dbg !40
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !40
  %240 = fcmp olt <2 x float> %236, %239, !dbg !52
  %241 = fcmp uno <2 x float> %239, zeroinitializer, !dbg !54
  %242 = or <2 x i1> %240, %241, !dbg !55
  %.v26 = select <2 x i1> %242, <2 x i32> %238, <2 x i32> %.v25, !dbg !56
  %243 = bitcast <2 x i32> %.v26 to <2 x float>, !dbg !56
  %244 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !44
  %245 = insertelement <2 x i32> %244, i32 %198, i64 1, !dbg !44
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !44
  %247 = fcmp olt <2 x float> %243, %246, !dbg !57
  %248 = fcmp uno <2 x float> %246, zeroinitializer, !dbg !59
  %249 = or <2 x i1> %247, %248, !dbg !60
  %.v27 = select <2 x i1> %249, <2 x i32> %245, <2 x i32> %.v26, !dbg !61
  %250 = bitcast <2 x i32> %.v27 to <2 x float>, !dbg !61
  %251 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !28
  %252 = insertelement <2 x i32> %251, i32 %85, i64 1, !dbg !28
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !28
  %254 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !34
  %255 = insertelement <2 x i32> %254, i32 %126, i64 1, !dbg !34
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !34
  %257 = fcmp ogt <2 x float> %256, %253, !dbg !45
  %258 = fcmp uno <2 x float> %256, zeroinitializer, !dbg !49
  %259 = or <2 x i1> %257, %258, !dbg !50
  %.v28 = select <2 x i1> %259, <2 x i32> %255, <2 x i32> %252, !dbg !51
  %260 = bitcast <2 x i32> %.v28 to <2 x float>, !dbg !51
  %261 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !40
  %262 = insertelement <2 x i32> %261, i32 %167, i64 1, !dbg !40
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !40
  %264 = fcmp olt <2 x float> %260, %263, !dbg !52
  %265 = fcmp uno <2 x float> %263, zeroinitializer, !dbg !54
  %266 = or <2 x i1> %264, %265, !dbg !55
  %.v29 = select <2 x i1> %266, <2 x i32> %262, <2 x i32> %.v28, !dbg !56
  %267 = bitcast <2 x i32> %.v29 to <2 x float>, !dbg !56
  %268 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !44
  %269 = insertelement <2 x i32> %268, i32 %200, i64 1, !dbg !44
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !44
  %271 = fcmp olt <2 x float> %267, %270, !dbg !57
  %272 = fcmp uno <2 x float> %270, zeroinitializer, !dbg !59
  %273 = or <2 x i1> %271, %272, !dbg !60
  %.v30 = select <2 x i1> %273, <2 x i32> %269, <2 x i32> %.v29, !dbg !61
  %274 = bitcast <2 x i32> %.v30 to <2 x float>, !dbg !61
  %275 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !28
  %276 = insertelement <2 x i32> %275, i32 %87, i64 1, !dbg !28
  %277 = bitcast <2 x i32> %276 to <2 x float>, !dbg !28
  %278 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !34
  %279 = insertelement <2 x i32> %278, i32 %128, i64 1, !dbg !34
  %280 = bitcast <2 x i32> %279 to <2 x float>, !dbg !34
  %281 = fcmp ogt <2 x float> %280, %277, !dbg !45
  %282 = fcmp uno <2 x float> %280, zeroinitializer, !dbg !49
  %283 = or <2 x i1> %281, %282, !dbg !50
  %.v31 = select <2 x i1> %283, <2 x i32> %279, <2 x i32> %276, !dbg !51
  %284 = bitcast <2 x i32> %.v31 to <2 x float>, !dbg !51
  %285 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !40
  %286 = insertelement <2 x i32> %285, i32 %169, i64 1, !dbg !40
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !40
  %288 = fcmp olt <2 x float> %284, %287, !dbg !52
  %289 = fcmp uno <2 x float> %287, zeroinitializer, !dbg !54
  %290 = or <2 x i1> %288, %289, !dbg !55
  %.v32 = select <2 x i1> %290, <2 x i32> %286, <2 x i32> %.v31, !dbg !56
  %291 = bitcast <2 x i32> %.v32 to <2 x float>, !dbg !56
  %292 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !44
  %293 = insertelement <2 x i32> %292, i32 %202, i64 1, !dbg !44
  %294 = bitcast <2 x i32> %293 to <2 x float>, !dbg !44
  %295 = fcmp olt <2 x float> %291, %294, !dbg !57
  %296 = fcmp uno <2 x float> %294, zeroinitializer, !dbg !59
  %297 = or <2 x i1> %295, %296, !dbg !60
  %.v33 = select <2 x i1> %297, <2 x i32> %293, <2 x i32> %.v32, !dbg !61
  %298 = bitcast <2 x i32> %.v33 to <2 x float>, !dbg !61
  %299 = or disjoint i32 %52, %32, !dbg !62
  %300 = or disjoint i32 %299, %37, !dbg !63
  %301 = or disjoint i32 %299, %38, !dbg !63
  %302 = or disjoint i32 %299, %39, !dbg !63
  %303 = or disjoint i32 %299, %40, !dbg !63
  %304 = or disjoint i32 %299, %41, !dbg !63
  %305 = or disjoint i32 %299, %42, !dbg !63
  %306 = or disjoint i32 %299, %43, !dbg !63
  %307 = or disjoint i32 %299, %44, !dbg !63
  %308 = sext i32 %300 to i64, !dbg !64
  %309 = getelementptr float, ptr addrspace(1) %1, i64 %308, !dbg !64
  %310 = sext i32 %301 to i64, !dbg !64
  %311 = getelementptr float, ptr addrspace(1) %1, i64 %310, !dbg !64
  %312 = sext i32 %302 to i64, !dbg !64
  %313 = getelementptr float, ptr addrspace(1) %1, i64 %312, !dbg !64
  %314 = sext i32 %303 to i64, !dbg !64
  %315 = getelementptr float, ptr addrspace(1) %1, i64 %314, !dbg !64
  %316 = sext i32 %304 to i64, !dbg !64
  %317 = getelementptr float, ptr addrspace(1) %1, i64 %316, !dbg !64
  %318 = sext i32 %305 to i64, !dbg !64
  %319 = getelementptr float, ptr addrspace(1) %1, i64 %318, !dbg !64
  %320 = sext i32 %306 to i64, !dbg !64
  %321 = getelementptr float, ptr addrspace(1) %1, i64 %320, !dbg !64
  %322 = sext i32 %307 to i64, !dbg !64
  %323 = getelementptr float, ptr addrspace(1) %1, i64 %322, !dbg !64
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %317, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %319, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %321, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %21, i32 -8388608, i1 %21) #3, !dbg !65
  %332 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !65
  %333 = insertelement <2 x i32> %332, i32 %325, i64 1, !dbg !65
  %334 = bitcast <2 x i32> %333 to <2 x float>, !dbg !65
  %335 = fcmp olt <2 x float> %226, %334, !dbg !66
  %336 = fcmp uno <2 x float> %334, zeroinitializer, !dbg !68
  %337 = or <2 x i1> %335, %336, !dbg !69
  %338 = insertelement <2 x i32> poison, i32 %326, i64 0, !dbg !65
  %339 = insertelement <2 x i32> %338, i32 %327, i64 1, !dbg !65
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !65
  %341 = fcmp olt <2 x float> %250, %340, !dbg !66
  %342 = fcmp uno <2 x float> %340, zeroinitializer, !dbg !68
  %343 = or <2 x i1> %341, %342, !dbg !69
  %344 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !65
  %345 = insertelement <2 x i32> %344, i32 %329, i64 1, !dbg !65
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !65
  %347 = fcmp olt <2 x float> %274, %346, !dbg !66
  %348 = fcmp uno <2 x float> %346, zeroinitializer, !dbg !68
  %349 = or <2 x i1> %347, %348, !dbg !69
  %350 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !65
  %351 = insertelement <2 x i32> %350, i32 %331, i64 1, !dbg !65
  %352 = bitcast <2 x i32> %351 to <2 x float>, !dbg !65
  %353 = fcmp olt <2 x float> %298, %352, !dbg !66
  %354 = fcmp uno <2 x float> %352, zeroinitializer, !dbg !68
  %355 = or <2 x i1> %353, %354, !dbg !69
  %356 = or disjoint i32 %52, %129, !dbg !70
  %357 = or disjoint i32 %356, %37, !dbg !71
  %358 = or disjoint i32 %356, %38, !dbg !71
  %359 = or disjoint i32 %356, %39, !dbg !71
  %360 = or disjoint i32 %356, %40, !dbg !71
  %361 = or disjoint i32 %356, %41, !dbg !71
  %362 = or disjoint i32 %356, %42, !dbg !71
  %363 = or disjoint i32 %356, %43, !dbg !71
  %364 = or disjoint i32 %356, %44, !dbg !71
  %365 = sext i32 %357 to i64, !dbg !72
  %366 = getelementptr float, ptr addrspace(1) %1, i64 %365, !dbg !72
  %367 = sext i32 %358 to i64, !dbg !72
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !72
  %369 = sext i32 %359 to i64, !dbg !72
  %370 = getelementptr float, ptr addrspace(1) %1, i64 %369, !dbg !72
  %371 = sext i32 %360 to i64, !dbg !72
  %372 = getelementptr float, ptr addrspace(1) %1, i64 %371, !dbg !72
  %373 = sext i32 %361 to i64, !dbg !72
  %374 = getelementptr float, ptr addrspace(1) %1, i64 %373, !dbg !72
  %375 = sext i32 %362 to i64, !dbg !72
  %376 = getelementptr float, ptr addrspace(1) %1, i64 %375, !dbg !72
  %377 = sext i32 %363 to i64, !dbg !72
  %378 = getelementptr float, ptr addrspace(1) %1, i64 %377, !dbg !72
  %379 = sext i32 %364 to i64, !dbg !72
  %380 = getelementptr float, ptr addrspace(1) %1, i64 %379, !dbg !72
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %366, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %370, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %372, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %374, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %376, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %378, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %380, i1 %21, i32 -8388608, i1 %21) #3, !dbg !73
  %389 = add nuw nsw i32 %32, 31, !dbg !74
  %390 = or disjoint i32 %52, %389, !dbg !75
  %391 = or disjoint i32 %390, %37, !dbg !76
  %392 = or disjoint i32 %390, %38, !dbg !76
  %393 = or disjoint i32 %390, %39, !dbg !76
  %394 = or disjoint i32 %390, %40, !dbg !76
  %395 = or disjoint i32 %390, %41, !dbg !76
  %396 = or disjoint i32 %390, %42, !dbg !76
  %397 = or disjoint i32 %390, %43, !dbg !76
  %398 = or disjoint i32 %390, %44, !dbg !76
  %399 = sext i32 %391 to i64, !dbg !77
  %400 = getelementptr float, ptr addrspace(1) %1, i64 %399, !dbg !77
  %401 = sext i32 %392 to i64, !dbg !77
  %402 = getelementptr float, ptr addrspace(1) %1, i64 %401, !dbg !77
  %403 = sext i32 %393 to i64, !dbg !77
  %404 = getelementptr float, ptr addrspace(1) %1, i64 %403, !dbg !77
  %405 = sext i32 %394 to i64, !dbg !77
  %406 = getelementptr float, ptr addrspace(1) %1, i64 %405, !dbg !77
  %407 = sext i32 %395 to i64, !dbg !77
  %408 = getelementptr float, ptr addrspace(1) %1, i64 %407, !dbg !77
  %409 = sext i32 %396 to i64, !dbg !77
  %410 = getelementptr float, ptr addrspace(1) %1, i64 %409, !dbg !77
  %411 = sext i32 %397 to i64, !dbg !77
  %412 = getelementptr float, ptr addrspace(1) %1, i64 %411, !dbg !77
  %413 = sext i32 %398 to i64, !dbg !77
  %414 = getelementptr float, ptr addrspace(1) %1, i64 %413, !dbg !77
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %400, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %410, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %412, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %414, i1 %79, i32 -8388608, i1 %79) #3, !dbg !78
  %423 = or disjoint i32 %32, 32, !dbg !79
  %424 = or disjoint i32 %52, %423, !dbg !80
  %425 = or disjoint i32 %424, %37, !dbg !81
  %426 = or disjoint i32 %424, %38, !dbg !81
  %427 = or disjoint i32 %424, %39, !dbg !81
  %428 = or disjoint i32 %424, %40, !dbg !81
  %429 = or disjoint i32 %424, %41, !dbg !81
  %430 = or disjoint i32 %424, %42, !dbg !81
  %431 = or disjoint i32 %424, %43, !dbg !81
  %432 = or disjoint i32 %424, %44, !dbg !81
  %433 = sext i32 %425 to i64, !dbg !82
  %434 = getelementptr float, ptr addrspace(1) %1, i64 %433, !dbg !82
  %435 = sext i32 %426 to i64, !dbg !82
  %436 = getelementptr float, ptr addrspace(1) %1, i64 %435, !dbg !82
  %437 = sext i32 %427 to i64, !dbg !82
  %438 = getelementptr float, ptr addrspace(1) %1, i64 %437, !dbg !82
  %439 = sext i32 %428 to i64, !dbg !82
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %439, !dbg !82
  %441 = sext i32 %429 to i64, !dbg !82
  %442 = getelementptr float, ptr addrspace(1) %1, i64 %441, !dbg !82
  %443 = sext i32 %430 to i64, !dbg !82
  %444 = getelementptr float, ptr addrspace(1) %1, i64 %443, !dbg !82
  %445 = sext i32 %431 to i64, !dbg !82
  %446 = getelementptr float, ptr addrspace(1) %1, i64 %445, !dbg !82
  %447 = sext i32 %432 to i64, !dbg !82
  %448 = getelementptr float, ptr addrspace(1) %1, i64 %447, !dbg !82
  %449 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %434, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %436, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %453 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %442, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %444, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %455 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %446, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %448, i1 %21, i32 -8388608, i1 %21) #3, !dbg !83
  %457 = or disjoint i32 %32, 33, !dbg !84
  %458 = or disjoint i32 %52, %457, !dbg !85
  %459 = or disjoint i32 %458, %37, !dbg !86
  %460 = or disjoint i32 %458, %38, !dbg !86
  %461 = or disjoint i32 %458, %39, !dbg !86
  %462 = or disjoint i32 %458, %40, !dbg !86
  %463 = or disjoint i32 %458, %41, !dbg !86
  %464 = or disjoint i32 %458, %42, !dbg !86
  %465 = or disjoint i32 %458, %43, !dbg !86
  %466 = or disjoint i32 %458, %44, !dbg !86
  %467 = sext i32 %459 to i64, !dbg !87
  %468 = getelementptr float, ptr addrspace(1) %1, i64 %467, !dbg !87
  %469 = sext i32 %460 to i64, !dbg !87
  %470 = getelementptr float, ptr addrspace(1) %1, i64 %469, !dbg !87
  %471 = sext i32 %461 to i64, !dbg !87
  %472 = getelementptr float, ptr addrspace(1) %1, i64 %471, !dbg !87
  %473 = sext i32 %462 to i64, !dbg !87
  %474 = getelementptr float, ptr addrspace(1) %1, i64 %473, !dbg !87
  %475 = sext i32 %463 to i64, !dbg !87
  %476 = getelementptr float, ptr addrspace(1) %1, i64 %475, !dbg !87
  %477 = sext i32 %464 to i64, !dbg !87
  %478 = getelementptr float, ptr addrspace(1) %1, i64 %477, !dbg !87
  %479 = sext i32 %465 to i64, !dbg !87
  %480 = getelementptr float, ptr addrspace(1) %1, i64 %479, !dbg !87
  %481 = sext i32 %466 to i64, !dbg !87
  %482 = getelementptr float, ptr addrspace(1) %1, i64 %481, !dbg !87
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %470, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %474, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %476, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %488 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %489 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %480, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %482, i1 %21, i32 -8388608, i1 %21) #3, !dbg !88
  %491 = extractelement <2 x i1> %209, i64 0, !dbg !89
  %492 = zext i1 %491 to i8, !dbg !89
  %493 = extractelement <2 x i1> %209, i64 1, !dbg !89
  %494 = zext i1 %493 to i8, !dbg !89
  %495 = extractelement <2 x i1> %233, i64 0, !dbg !89
  %496 = zext i1 %495 to i8, !dbg !89
  %497 = extractelement <2 x i1> %233, i64 1, !dbg !89
  %498 = zext i1 %497 to i8, !dbg !89
  %499 = extractelement <2 x i1> %257, i64 0, !dbg !89
  %500 = zext i1 %499 to i8, !dbg !89
  %501 = extractelement <2 x i1> %257, i64 1, !dbg !89
  %502 = zext i1 %501 to i8, !dbg !89
  %503 = extractelement <2 x i1> %281, i64 0, !dbg !89
  %504 = zext i1 %503 to i8, !dbg !89
  %505 = extractelement <2 x i1> %281, i64 1, !dbg !89
  %506 = zext i1 %505 to i8, !dbg !89
  %507 = extractelement <2 x i1> %216, i64 0, !dbg !90
  %508 = select i1 %507, i8 2, i8 %492, !dbg !90
  %509 = extractelement <2 x i1> %216, i64 1, !dbg !90
  %510 = select i1 %509, i8 2, i8 %494, !dbg !90
  %511 = extractelement <2 x i1> %240, i64 0, !dbg !90
  %512 = select i1 %511, i8 2, i8 %496, !dbg !90
  %513 = extractelement <2 x i1> %240, i64 1, !dbg !90
  %514 = select i1 %513, i8 2, i8 %498, !dbg !90
  %515 = extractelement <2 x i1> %264, i64 0, !dbg !90
  %516 = select i1 %515, i8 2, i8 %500, !dbg !90
  %517 = extractelement <2 x i1> %264, i64 1, !dbg !90
  %518 = select i1 %517, i8 2, i8 %502, !dbg !90
  %519 = extractelement <2 x i1> %288, i64 0, !dbg !90
  %520 = select i1 %519, i8 2, i8 %504, !dbg !90
  %521 = extractelement <2 x i1> %288, i64 1, !dbg !90
  %522 = select i1 %521, i8 2, i8 %506, !dbg !90
  %523 = extractelement <2 x i1> %223, i64 0, !dbg !91
  %524 = select i1 %523, i8 3, i8 %508, !dbg !91
  %525 = extractelement <2 x i1> %223, i64 1, !dbg !91
  %526 = select i1 %525, i8 3, i8 %510, !dbg !91
  %527 = extractelement <2 x i1> %247, i64 0, !dbg !91
  %528 = select i1 %527, i8 3, i8 %512, !dbg !91
  %529 = extractelement <2 x i1> %247, i64 1, !dbg !91
  %530 = select i1 %529, i8 3, i8 %514, !dbg !91
  %531 = extractelement <2 x i1> %271, i64 0, !dbg !91
  %532 = select i1 %531, i8 3, i8 %516, !dbg !91
  %533 = extractelement <2 x i1> %271, i64 1, !dbg !91
  %534 = select i1 %533, i8 3, i8 %518, !dbg !91
  %535 = extractelement <2 x i1> %295, i64 0, !dbg !91
  %536 = select i1 %535, i8 3, i8 %520, !dbg !91
  %537 = extractelement <2 x i1> %295, i64 1, !dbg !91
  %538 = select i1 %537, i8 3, i8 %522, !dbg !91
  %539 = extractelement <2 x i1> %335, i64 0, !dbg !92
  %540 = select i1 %539, i8 4, i8 %524, !dbg !92
  %541 = extractelement <2 x i1> %335, i64 1, !dbg !92
  %542 = select i1 %541, i8 4, i8 %526, !dbg !92
  %543 = extractelement <2 x i1> %341, i64 0, !dbg !92
  %544 = select i1 %543, i8 4, i8 %528, !dbg !92
  %545 = extractelement <2 x i1> %341, i64 1, !dbg !92
  %546 = select i1 %545, i8 4, i8 %530, !dbg !92
  %547 = extractelement <2 x i1> %347, i64 0, !dbg !92
  %548 = select i1 %547, i8 4, i8 %532, !dbg !92
  %549 = extractelement <2 x i1> %347, i64 1, !dbg !92
  %550 = select i1 %549, i8 4, i8 %534, !dbg !92
  %551 = extractelement <2 x i1> %353, i64 0, !dbg !92
  %552 = select i1 %551, i8 4, i8 %536, !dbg !92
  %553 = extractelement <2 x i1> %353, i64 1, !dbg !92
  %554 = select i1 %553, i8 4, i8 %538, !dbg !92
  %.v34 = select <2 x i1> %337, <2 x i32> %333, <2 x i32> %.v24, !dbg !93
  %555 = bitcast <2 x i32> %.v34 to <2 x float>, !dbg !93
  %556 = insertelement <2 x i32> poison, i32 %381, i64 0, !dbg !73
  %557 = insertelement <2 x i32> %556, i32 %382, i64 1, !dbg !73
  %558 = bitcast <2 x i32> %557 to <2 x float>, !dbg !73
  %559 = fcmp olt <2 x float> %555, %558, !dbg !94
  %560 = fcmp uno <2 x float> %558, zeroinitializer, !dbg !96
  %561 = or <2 x i1> %559, %560, !dbg !97
  %.v35 = select <2 x i1> %561, <2 x i32> %557, <2 x i32> %.v34, !dbg !98
  %562 = bitcast <2 x i32> %.v35 to <2 x float>, !dbg !98
  %563 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !78
  %564 = insertelement <2 x i32> %563, i32 %416, i64 1, !dbg !78
  %565 = bitcast <2 x i32> %564 to <2 x float>, !dbg !78
  %566 = fcmp olt <2 x float> %562, %565, !dbg !99
  %567 = fcmp uno <2 x float> %565, zeroinitializer, !dbg !101
  %568 = or <2 x i1> %566, %567, !dbg !102
  %.v36 = select <2 x i1> %568, <2 x i32> %564, <2 x i32> %.v35, !dbg !103
  %569 = bitcast <2 x i32> %.v36 to <2 x float>, !dbg !103
  %570 = insertelement <2 x i32> poison, i32 %449, i64 0, !dbg !83
  %571 = insertelement <2 x i32> %570, i32 %450, i64 1, !dbg !83
  %572 = bitcast <2 x i32> %571 to <2 x float>, !dbg !83
  %573 = fcmp olt <2 x float> %569, %572, !dbg !104
  %574 = fcmp uno <2 x float> %572, zeroinitializer, !dbg !106
  %575 = or <2 x i1> %573, %574, !dbg !107
  %.v37 = select <2 x i1> %575, <2 x i32> %571, <2 x i32> %.v36, !dbg !108
  %576 = bitcast <2 x i32> %.v37 to <2 x float>, !dbg !108
  %577 = insertelement <2 x i32> poison, i32 %483, i64 0, !dbg !88
  %578 = insertelement <2 x i32> %577, i32 %484, i64 1, !dbg !88
  %579 = bitcast <2 x i32> %578 to <2 x float>, !dbg !88
  %580 = fcmp olt <2 x float> %576, %579, !dbg !109
  %581 = fcmp uno <2 x float> %579, zeroinitializer, !dbg !111
  %582 = or <2 x i1> %580, %581, !dbg !112
  %.v38 = select <2 x i1> %582, <2 x i32> %578, <2 x i32> %.v37, !dbg !113
  %583 = bitcast <2 x i32> %.v38 to <2 x float>, !dbg !113
  %584 = extractelement <2 x i1> %559, i64 0, !dbg !114
  %585 = select i1 %584, i8 5, i8 %540, !dbg !114
  %586 = extractelement <2 x i1> %559, i64 1, !dbg !114
  %587 = select i1 %586, i8 5, i8 %542, !dbg !114
  %588 = extractelement <2 x i1> %566, i64 0, !dbg !115
  %589 = select i1 %588, i8 6, i8 %585, !dbg !115
  %590 = extractelement <2 x i1> %566, i64 1, !dbg !115
  %591 = select i1 %590, i8 6, i8 %587, !dbg !115
  %592 = extractelement <2 x i1> %573, i64 0, !dbg !116
  %593 = select i1 %592, i8 7, i8 %589, !dbg !116
  %594 = extractelement <2 x i1> %573, i64 1, !dbg !116
  %595 = select i1 %594, i8 7, i8 %591, !dbg !116
  %596 = extractelement <2 x i1> %580, i64 0, !dbg !117
  %597 = select i1 %596, i8 8, i8 %593, !dbg !117
  %598 = extractelement <2 x i1> %580, i64 1, !dbg !117
  %599 = select i1 %598, i8 8, i8 %595, !dbg !117
  %600 = fadd <2 x float> %583, zeroinitializer, !dbg !118
  %.v39 = select <2 x i1> %343, <2 x i32> %339, <2 x i32> %.v27, !dbg !93
  %601 = bitcast <2 x i32> %.v39 to <2 x float>, !dbg !93
  %602 = insertelement <2 x i32> poison, i32 %383, i64 0, !dbg !73
  %603 = insertelement <2 x i32> %602, i32 %384, i64 1, !dbg !73
  %604 = bitcast <2 x i32> %603 to <2 x float>, !dbg !73
  %605 = fcmp olt <2 x float> %601, %604, !dbg !94
  %606 = fcmp uno <2 x float> %604, zeroinitializer, !dbg !96
  %607 = or <2 x i1> %605, %606, !dbg !97
  %.v40 = select <2 x i1> %607, <2 x i32> %603, <2 x i32> %.v39, !dbg !98
  %608 = bitcast <2 x i32> %.v40 to <2 x float>, !dbg !98
  %609 = insertelement <2 x i32> poison, i32 %417, i64 0, !dbg !78
  %610 = insertelement <2 x i32> %609, i32 %418, i64 1, !dbg !78
  %611 = bitcast <2 x i32> %610 to <2 x float>, !dbg !78
  %612 = fcmp olt <2 x float> %608, %611, !dbg !99
  %613 = fcmp uno <2 x float> %611, zeroinitializer, !dbg !101
  %614 = or <2 x i1> %612, %613, !dbg !102
  %.v41 = select <2 x i1> %614, <2 x i32> %610, <2 x i32> %.v40, !dbg !103
  %615 = bitcast <2 x i32> %.v41 to <2 x float>, !dbg !103
  %616 = insertelement <2 x i32> poison, i32 %451, i64 0, !dbg !83
  %617 = insertelement <2 x i32> %616, i32 %452, i64 1, !dbg !83
  %618 = bitcast <2 x i32> %617 to <2 x float>, !dbg !83
  %619 = fcmp olt <2 x float> %615, %618, !dbg !104
  %620 = fcmp uno <2 x float> %618, zeroinitializer, !dbg !106
  %621 = or <2 x i1> %619, %620, !dbg !107
  %.v42 = select <2 x i1> %621, <2 x i32> %617, <2 x i32> %.v41, !dbg !108
  %622 = bitcast <2 x i32> %.v42 to <2 x float>, !dbg !108
  %623 = insertelement <2 x i32> poison, i32 %485, i64 0, !dbg !88
  %624 = insertelement <2 x i32> %623, i32 %486, i64 1, !dbg !88
  %625 = bitcast <2 x i32> %624 to <2 x float>, !dbg !88
  %626 = fcmp olt <2 x float> %622, %625, !dbg !109
  %627 = fcmp uno <2 x float> %625, zeroinitializer, !dbg !111
  %628 = or <2 x i1> %626, %627, !dbg !112
  %.v43 = select <2 x i1> %628, <2 x i32> %624, <2 x i32> %.v42, !dbg !113
  %629 = bitcast <2 x i32> %.v43 to <2 x float>, !dbg !113
  %630 = extractelement <2 x i1> %605, i64 0, !dbg !114
  %631 = select i1 %630, i8 5, i8 %544, !dbg !114
  %632 = extractelement <2 x i1> %605, i64 1, !dbg !114
  %633 = select i1 %632, i8 5, i8 %546, !dbg !114
  %634 = extractelement <2 x i1> %612, i64 0, !dbg !115
  %635 = select i1 %634, i8 6, i8 %631, !dbg !115
  %636 = extractelement <2 x i1> %612, i64 1, !dbg !115
  %637 = select i1 %636, i8 6, i8 %633, !dbg !115
  %638 = extractelement <2 x i1> %619, i64 0, !dbg !116
  %639 = select i1 %638, i8 7, i8 %635, !dbg !116
  %640 = extractelement <2 x i1> %619, i64 1, !dbg !116
  %641 = select i1 %640, i8 7, i8 %637, !dbg !116
  %642 = extractelement <2 x i1> %626, i64 0, !dbg !117
  %643 = select i1 %642, i8 8, i8 %639, !dbg !117
  %644 = extractelement <2 x i1> %626, i64 1, !dbg !117
  %645 = select i1 %644, i8 8, i8 %641, !dbg !117
  %646 = fadd <2 x float> %629, zeroinitializer, !dbg !118
  %.v44 = select <2 x i1> %349, <2 x i32> %345, <2 x i32> %.v30, !dbg !93
  %647 = bitcast <2 x i32> %.v44 to <2 x float>, !dbg !93
  %648 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !73
  %649 = insertelement <2 x i32> %648, i32 %386, i64 1, !dbg !73
  %650 = bitcast <2 x i32> %649 to <2 x float>, !dbg !73
  %651 = fcmp olt <2 x float> %647, %650, !dbg !94
  %652 = fcmp uno <2 x float> %650, zeroinitializer, !dbg !96
  %653 = or <2 x i1> %651, %652, !dbg !97
  %.v45 = select <2 x i1> %653, <2 x i32> %649, <2 x i32> %.v44, !dbg !98
  %654 = bitcast <2 x i32> %.v45 to <2 x float>, !dbg !98
  %655 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !78
  %656 = insertelement <2 x i32> %655, i32 %420, i64 1, !dbg !78
  %657 = bitcast <2 x i32> %656 to <2 x float>, !dbg !78
  %658 = fcmp olt <2 x float> %654, %657, !dbg !99
  %659 = fcmp uno <2 x float> %657, zeroinitializer, !dbg !101
  %660 = or <2 x i1> %658, %659, !dbg !102
  %.v46 = select <2 x i1> %660, <2 x i32> %656, <2 x i32> %.v45, !dbg !103
  %661 = bitcast <2 x i32> %.v46 to <2 x float>, !dbg !103
  %662 = insertelement <2 x i32> poison, i32 %453, i64 0, !dbg !83
  %663 = insertelement <2 x i32> %662, i32 %454, i64 1, !dbg !83
  %664 = bitcast <2 x i32> %663 to <2 x float>, !dbg !83
  %665 = fcmp olt <2 x float> %661, %664, !dbg !104
  %666 = fcmp uno <2 x float> %664, zeroinitializer, !dbg !106
  %667 = or <2 x i1> %665, %666, !dbg !107
  %.v47 = select <2 x i1> %667, <2 x i32> %663, <2 x i32> %.v46, !dbg !108
  %668 = bitcast <2 x i32> %.v47 to <2 x float>, !dbg !108
  %669 = insertelement <2 x i32> poison, i32 %487, i64 0, !dbg !88
  %670 = insertelement <2 x i32> %669, i32 %488, i64 1, !dbg !88
  %671 = bitcast <2 x i32> %670 to <2 x float>, !dbg !88
  %672 = fcmp olt <2 x float> %668, %671, !dbg !109
  %673 = fcmp uno <2 x float> %671, zeroinitializer, !dbg !111
  %674 = or <2 x i1> %672, %673, !dbg !112
  %.v48 = select <2 x i1> %674, <2 x i32> %670, <2 x i32> %.v47, !dbg !113
  %675 = bitcast <2 x i32> %.v48 to <2 x float>, !dbg !113
  %676 = extractelement <2 x i1> %651, i64 0, !dbg !114
  %677 = select i1 %676, i8 5, i8 %548, !dbg !114
  %678 = extractelement <2 x i1> %651, i64 1, !dbg !114
  %679 = select i1 %678, i8 5, i8 %550, !dbg !114
  %680 = extractelement <2 x i1> %658, i64 0, !dbg !115
  %681 = select i1 %680, i8 6, i8 %677, !dbg !115
  %682 = extractelement <2 x i1> %658, i64 1, !dbg !115
  %683 = select i1 %682, i8 6, i8 %679, !dbg !115
  %684 = extractelement <2 x i1> %665, i64 0, !dbg !116
  %685 = select i1 %684, i8 7, i8 %681, !dbg !116
  %686 = extractelement <2 x i1> %665, i64 1, !dbg !116
  %687 = select i1 %686, i8 7, i8 %683, !dbg !116
  %688 = extractelement <2 x i1> %672, i64 0, !dbg !117
  %689 = select i1 %688, i8 8, i8 %685, !dbg !117
  %690 = extractelement <2 x i1> %672, i64 1, !dbg !117
  %691 = select i1 %690, i8 8, i8 %687, !dbg !117
  %692 = fadd <2 x float> %675, zeroinitializer, !dbg !118
  %.v49 = select <2 x i1> %355, <2 x i32> %351, <2 x i32> %.v33, !dbg !93
  %693 = bitcast <2 x i32> %.v49 to <2 x float>, !dbg !93
  %694 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !73
  %695 = insertelement <2 x i32> %694, i32 %388, i64 1, !dbg !73
  %696 = bitcast <2 x i32> %695 to <2 x float>, !dbg !73
  %697 = fcmp olt <2 x float> %693, %696, !dbg !94
  %698 = fcmp uno <2 x float> %696, zeroinitializer, !dbg !96
  %699 = or <2 x i1> %697, %698, !dbg !97
  %.v50 = select <2 x i1> %699, <2 x i32> %695, <2 x i32> %.v49, !dbg !98
  %700 = bitcast <2 x i32> %.v50 to <2 x float>, !dbg !98
  %701 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !78
  %702 = insertelement <2 x i32> %701, i32 %422, i64 1, !dbg !78
  %703 = bitcast <2 x i32> %702 to <2 x float>, !dbg !78
  %704 = fcmp olt <2 x float> %700, %703, !dbg !99
  %705 = fcmp uno <2 x float> %703, zeroinitializer, !dbg !101
  %706 = or <2 x i1> %704, %705, !dbg !102
  %.v51 = select <2 x i1> %706, <2 x i32> %702, <2 x i32> %.v50, !dbg !103
  %707 = bitcast <2 x i32> %.v51 to <2 x float>, !dbg !103
  %708 = insertelement <2 x i32> poison, i32 %455, i64 0, !dbg !83
  %709 = insertelement <2 x i32> %708, i32 %456, i64 1, !dbg !83
  %710 = bitcast <2 x i32> %709 to <2 x float>, !dbg !83
  %711 = fcmp olt <2 x float> %707, %710, !dbg !104
  %712 = fcmp uno <2 x float> %710, zeroinitializer, !dbg !106
  %713 = or <2 x i1> %711, %712, !dbg !107
  %.v52 = select <2 x i1> %713, <2 x i32> %709, <2 x i32> %.v51, !dbg !108
  %714 = bitcast <2 x i32> %.v52 to <2 x float>, !dbg !108
  %715 = insertelement <2 x i32> poison, i32 %489, i64 0, !dbg !88
  %716 = insertelement <2 x i32> %715, i32 %490, i64 1, !dbg !88
  %717 = bitcast <2 x i32> %716 to <2 x float>, !dbg !88
  %718 = fcmp olt <2 x float> %714, %717, !dbg !109
  %719 = fcmp uno <2 x float> %717, zeroinitializer, !dbg !111
  %720 = or <2 x i1> %718, %719, !dbg !112
  %.v53 = select <2 x i1> %720, <2 x i32> %716, <2 x i32> %.v52, !dbg !113
  %721 = bitcast <2 x i32> %.v53 to <2 x float>, !dbg !113
  %722 = extractelement <2 x i1> %697, i64 0, !dbg !114
  %723 = select i1 %722, i8 5, i8 %552, !dbg !114
  %724 = extractelement <2 x i1> %697, i64 1, !dbg !114
  %725 = select i1 %724, i8 5, i8 %554, !dbg !114
  %726 = extractelement <2 x i1> %704, i64 0, !dbg !115
  %727 = select i1 %726, i8 6, i8 %723, !dbg !115
  %728 = extractelement <2 x i1> %704, i64 1, !dbg !115
  %729 = select i1 %728, i8 6, i8 %725, !dbg !115
  %730 = extractelement <2 x i1> %711, i64 0, !dbg !116
  %731 = select i1 %730, i8 7, i8 %727, !dbg !116
  %732 = extractelement <2 x i1> %711, i64 1, !dbg !116
  %733 = select i1 %732, i8 7, i8 %729, !dbg !116
  %734 = extractelement <2 x i1> %718, i64 0, !dbg !117
  %735 = select i1 %734, i8 8, i8 %731, !dbg !117
  %736 = extractelement <2 x i1> %718, i64 1, !dbg !117
  %737 = select i1 %736, i8 8, i8 %733, !dbg !117
  %738 = fadd <2 x float> %721, zeroinitializer, !dbg !118
  %739 = shl i32 %18, 8, !dbg !119
  %740 = shl i32 %19, 8, !dbg !119
  %741 = shl i32 %20, 8, !dbg !119
  %742 = or disjoint i32 %739, %28, !dbg !120
  %743 = or disjoint i32 %740, %28, !dbg !120
  %744 = or disjoint i32 %741, %30, !dbg !120
  %745 = sext i32 %742 to i64, !dbg !121
  %746 = getelementptr float, ptr addrspace(1) %2, i64 %745, !dbg !121
  %747 = sext i32 %743 to i64, !dbg !121
  %748 = getelementptr float, ptr addrspace(1) %2, i64 %747, !dbg !121
  %749 = shl i32 %9, 8, !dbg !122
  %750 = and i32 %749, 3840, !dbg !122
  %751 = lshr i32 %9, 4, !dbg !122
  %752 = and i32 %751, 31, !dbg !122
  %753 = or disjoint i32 %752, %750, !dbg !122
  %754 = and i32 %27, 2044, !dbg !122
  %755 = lshr exact i32 %750, 5, !dbg !122
  %756 = lshr exact i32 %750, 4, !dbg !122
  %757 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %756, !dbg !122
  %758 = getelementptr float, ptr addrspace(3) %757, i32 %753, !dbg !122
  %759 = extractelement <2 x float> %583, i64 0, !dbg !122
  %760 = bitcast float %759 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %758, <1 x i32> %760, i1 true) #3, !dbg !122
  %761 = or disjoint i32 %753, 32, !dbg !122
  %762 = getelementptr float, ptr addrspace(3) %757, i32 %761, !dbg !122
  %763 = extractelement <2 x float> %583, i64 1, !dbg !122
  %764 = bitcast float %763 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %762, <1 x i32> %764, i1 true) #3, !dbg !122
  %765 = or disjoint i32 %753, 64, !dbg !122
  %766 = getelementptr float, ptr addrspace(3) %757, i32 %765, !dbg !122
  %767 = extractelement <2 x float> %629, i64 0, !dbg !122
  %768 = bitcast float %767 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %766, <1 x i32> %768, i1 true) #3, !dbg !122
  %769 = or disjoint i32 %753, 96, !dbg !122
  %770 = getelementptr float, ptr addrspace(3) %757, i32 %769, !dbg !122
  %771 = extractelement <2 x float> %629, i64 1, !dbg !122
  %772 = bitcast float %771 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %770, <1 x i32> %772, i1 true) #3, !dbg !122
  %773 = or disjoint i32 %753, 128, !dbg !122
  %774 = getelementptr float, ptr addrspace(3) %757, i32 %773, !dbg !122
  %775 = extractelement <2 x float> %675, i64 0, !dbg !122
  %776 = bitcast float %775 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %774, <1 x i32> %776, i1 true) #3, !dbg !122
  %777 = or disjoint i32 %753, 160, !dbg !122
  %778 = getelementptr float, ptr addrspace(3) %757, i32 %777, !dbg !122
  %779 = extractelement <2 x float> %675, i64 1, !dbg !122
  %780 = bitcast float %779 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %778, <1 x i32> %780, i1 true) #3, !dbg !122
  %781 = or disjoint i32 %753, 192, !dbg !122
  %782 = getelementptr float, ptr addrspace(3) %757, i32 %781, !dbg !122
  %783 = extractelement <2 x float> %721, i64 0, !dbg !122
  %784 = bitcast float %783 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %782, <1 x i32> %784, i1 true) #3, !dbg !122
  %785 = or disjoint i32 %753, 224, !dbg !122
  %786 = getelementptr float, ptr addrspace(3) %757, i32 %785, !dbg !122
  %787 = extractelement <2 x float> %721, i64 1, !dbg !122
  %788 = bitcast float %787 to <1 x i32>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %786, <1 x i32> %788, i1 true) #3, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %789 = lshr i32 %27, 6, !dbg !122
  %790 = and i32 %789, 28, !dbg !122
  %791 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %790, !dbg !122
  %792 = getelementptr inbounds float, ptr addrspace(3) %791, i32 %754, !dbg !122
  %793 = or disjoint i32 %754, 2048, !dbg !122
  %794 = lshr i32 %793, 6, !dbg !122
  %795 = and i32 %794, 60, !dbg !122
  %796 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %795, !dbg !122
  %797 = getelementptr inbounds float, ptr addrspace(3) %796, i32 %793, !dbg !122
  %798 = load <4 x i32>, ptr addrspace(3) %797, align 16, !dbg !122
  %.extract = load i32, ptr addrspace(3) %792, align 16, !dbg !122
  %799 = getelementptr inbounds i8, ptr addrspace(3) %792, i32 4, !dbg !122
  %.extract13 = load i32, ptr addrspace(3) %799, align 4, !dbg !122
  %800 = getelementptr inbounds i8, ptr addrspace(3) %792, i32 8, !dbg !122
  %.extract14 = load i32, ptr addrspace(3) %800, align 8, !dbg !122
  %801 = getelementptr inbounds i8, ptr addrspace(3) %792, i32 12, !dbg !122
  %.extract15 = load i32, ptr addrspace(3) %801, align 4, !dbg !122
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %746, i1 %22) #3, !dbg !122
  %.extract16 = extractelement <4 x i32> %798, i64 0, !dbg !122
  %.extract17 = extractelement <4 x i32> %798, i64 1, !dbg !122
  %.extract18 = extractelement <4 x i32> %798, i64 2, !dbg !122
  %.extract19 = extractelement <4 x i32> %798, i64 3, !dbg !122
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract16, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %748, i1 %23) #3, !dbg !122
  %802 = sext i32 %744 to i64, !dbg !123
  %803 = getelementptr i8, ptr addrspace(1) %3, i64 %802, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %804 = and i32 %29, 4088, !dbg !124
  %805 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %755, !dbg !124
  %806 = getelementptr i8, ptr addrspace(3) %805, i32 %753, !dbg !124
  %807 = insertelement <1 x i8> poison, i8 %597, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %806, <1 x i8> %807, i1 true) #3, !dbg !124
  %808 = getelementptr i8, ptr addrspace(3) %805, i32 %761, !dbg !124
  %809 = insertelement <1 x i8> poison, i8 %599, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %808, <1 x i8> %809, i1 true) #3, !dbg !124
  %810 = getelementptr i8, ptr addrspace(3) %805, i32 %765, !dbg !124
  %811 = insertelement <1 x i8> poison, i8 %643, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %810, <1 x i8> %811, i1 true) #3, !dbg !124
  %812 = getelementptr i8, ptr addrspace(3) %805, i32 %769, !dbg !124
  %813 = insertelement <1 x i8> poison, i8 %645, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %812, <1 x i8> %813, i1 true) #3, !dbg !124
  %814 = getelementptr i8, ptr addrspace(3) %805, i32 %773, !dbg !124
  %815 = insertelement <1 x i8> poison, i8 %689, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %814, <1 x i8> %815, i1 true) #3, !dbg !124
  %816 = getelementptr i8, ptr addrspace(3) %805, i32 %777, !dbg !124
  %817 = insertelement <1 x i8> poison, i8 %691, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %816, <1 x i8> %817, i1 true) #3, !dbg !124
  %818 = getelementptr i8, ptr addrspace(3) %805, i32 %781, !dbg !124
  %819 = insertelement <1 x i8> poison, i8 %735, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %818, <1 x i8> %819, i1 true) #3, !dbg !124
  %820 = getelementptr i8, ptr addrspace(3) %805, i32 %785, !dbg !124
  %821 = insertelement <1 x i8> poison, i8 %737, i64 0, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %820, <1 x i8> %821, i1 true) #3, !dbg !124
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %822 = lshr i32 %29, 5, !dbg !124
  %823 = and i32 %822, 120, !dbg !124
  %824 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %823, !dbg !124
  %825 = getelementptr inbounds i8, ptr addrspace(3) %824, i32 %804, !dbg !124
  %826 = load i32, ptr addrspace(3) %825, align 8, !dbg !124
  %827 = getelementptr inbounds i8, ptr addrspace(3) %825, i32 4, !dbg !124
  %828 = load i32, ptr addrspace(3) %827, align 4, !dbg !124
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %826, i32 %828, ptr addrspace(1) %803, i1 %24) #3, !dbg !124
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %shift = shufflevector <2 x float> %600, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %829 = fadd <2 x float> %600, %shift, !dbg !129
  %830 = fadd <2 x float> %829, %646, !dbg !129
  %shift20 = shufflevector <2 x float> %646, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %831 = fadd <2 x float> %830, %shift20, !dbg !129
  %832 = fadd <2 x float> %831, %692, !dbg !129
  %shift21 = shufflevector <2 x float> %692, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %833 = fadd <2 x float> %832, %shift21, !dbg !129
  %834 = fadd <2 x float> %833, %738, !dbg !129
  %shift22 = shufflevector <2 x float> %738, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %835 = fadd <2 x float> %834, %shift22, !dbg !129
  %836 = extractelement <2 x float> %835, i64 0, !dbg !129
  %837 = select i1 %21, float %836, float 0.000000e+00, !dbg !129
  %838 = bitcast float %837 to i32, !dbg !125
  %839 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %838, i32 16, i32 31), !dbg !125
  %840 = bitcast i32 %839 to float, !dbg !125
  %841 = fadd float %837, %840, !dbg !129
  %842 = lshr i32 %10, 4, !dbg !125
  %843 = icmp samesign ult i32 %10, 16, !dbg !125
  %844 = shl nuw nsw i32 %11, 4, !dbg !125
  %845 = or disjoint i32 %844, %16, !dbg !125
  %846 = getelementptr float, ptr addrspace(3) @global_smem, i32 %845, !dbg !125
  %847 = bitcast float %841 to <1 x i32>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %846, <1 x i32> %847, i1 %843) #3, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %848 = icmp slt i32 %9, 256, !dbg !125
  %849 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !125
  %850 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %849, i1 %848) #3, !dbg !125
  %851 = bitcast i32 %850 to float, !dbg !125
  %852 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %850, i32 8, i32 31), !dbg !125
  %853 = bitcast i32 %852 to float, !dbg !125
  %854 = fadd float %851, %853, !dbg !129
  %855 = bitcast float %854 to i32, !dbg !125
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 4, i32 31), !dbg !125
  %857 = bitcast i32 %856 to float, !dbg !125
  %858 = fadd float %854, %857, !dbg !129
  %859 = bitcast float %858 to i32, !dbg !125
  %860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %859, i32 2, i32 31), !dbg !125
  %861 = bitcast i32 %860 to float, !dbg !125
  %862 = fadd float %858, %861, !dbg !129
  %863 = bitcast float %862 to i32, !dbg !125
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 1, i32 31), !dbg !125
  %865 = bitcast i32 %864 to float, !dbg !125
  %866 = fadd float %862, %865, !dbg !129
  %867 = icmp eq i32 %11, 0, !dbg !125
  %868 = and i1 %848, %867, !dbg !125
  %869 = bitcast float %866 to <1 x i32>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %869, i1 %868) #3, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %870 = getelementptr float, ptr addrspace(3) @global_smem, i32 %844, !dbg !125
  %871 = load float, ptr addrspace(3) %870, align 16, !dbg !125
  %872 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %871, float 2.560000e+02) #3, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %873 = sext i32 %17 to i64, !dbg !133
  %874 = getelementptr float, ptr addrspace(1) %0, i64 %873, !dbg !133
  %875 = shl nuw nsw i32 %16, 1, !dbg !134
  %876 = or disjoint i32 %875, %842, !dbg !134
  %877 = icmp eq i32 %876, 0, !dbg !134
  %878 = bitcast float %872 to i32, !dbg !134
  %879 = and i1 %877, %21, !dbg !134
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %878, ptr addrspace(1) %874, i1 %879) #3, !dbg !134
  ret void, !dbg !135
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_pool2d_with_indices_mean_1", linkageName: "triton_red_fused_max_pool2d_with_indices_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 23, scope: !7)
!17 = !DILocation(line: 40, column: 24, scope: !7)
!18 = !DILocation(line: 40, column: 22, scope: !7)
!19 = !DILocation(line: 41, column: 23, scope: !7)
!20 = !DILocation(line: 44, column: 23, scope: !7)
!21 = !DILocation(line: 45, column: 43, scope: !7)
!22 = !DILocation(line: 45, column: 53, scope: !7)
!23 = !DILocation(line: 45, column: 50, scope: !7)
!24 = !DILocation(line: 45, column: 63, scope: !7)
!25 = !DILocation(line: 45, column: 58, scope: !7)
!26 = !DILocation(line: 45, column: 35, scope: !7)
!27 = !DILocation(line: 45, column: 84, scope: !7)
!28 = !DILocation(line: 45, column: 68, scope: !7)
!29 = !DILocation(line: 51, column: 43, scope: !7)
!30 = !DILocation(line: 51, column: 50, scope: !7)
!31 = !DILocation(line: 51, column: 58, scope: !7)
!32 = !DILocation(line: 51, column: 35, scope: !7)
!33 = !DILocation(line: 51, column: 84, scope: !7)
!34 = !DILocation(line: 51, column: 68, scope: !7)
!35 = !DILocation(line: 53, column: 20, scope: !7)
!36 = !DILocation(line: 58, column: 43, scope: !7)
!37 = !DILocation(line: 58, column: 50, scope: !7)
!38 = !DILocation(line: 58, column: 58, scope: !7)
!39 = !DILocation(line: 58, column: 35, scope: !7)
!40 = !DILocation(line: 58, column: 68, scope: !7)
!41 = !DILocation(line: 65, column: 49, scope: !7)
!42 = !DILocation(line: 65, column: 57, scope: !7)
!43 = !DILocation(line: 65, column: 35, scope: !7)
!44 = !DILocation(line: 65, column: 67, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 52, column: 46, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !53)
!53 = !DILocation(line: 59, column: 46, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !53)
!57 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 66, column: 46, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !58)
!62 = !DILocation(line: 68, column: 42, scope: !7)
!63 = !DILocation(line: 68, column: 50, scope: !7)
!64 = !DILocation(line: 68, column: 35, scope: !7)
!65 = !DILocation(line: 68, column: 60, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !67)
!67 = !DILocation(line: 69, column: 46, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !67)
!70 = !DILocation(line: 71, column: 46, scope: !7)
!71 = !DILocation(line: 71, column: 54, scope: !7)
!72 = !DILocation(line: 71, column: 35, scope: !7)
!73 = !DILocation(line: 71, column: 64, scope: !7)
!74 = !DILocation(line: 78, column: 40, scope: !7)
!75 = !DILocation(line: 78, column: 47, scope: !7)
!76 = !DILocation(line: 78, column: 55, scope: !7)
!77 = !DILocation(line: 78, column: 35, scope: !7)
!78 = !DILocation(line: 78, column: 65, scope: !7)
!79 = !DILocation(line: 81, column: 40, scope: !7)
!80 = !DILocation(line: 81, column: 47, scope: !7)
!81 = !DILocation(line: 81, column: 55, scope: !7)
!82 = !DILocation(line: 81, column: 35, scope: !7)
!83 = !DILocation(line: 81, column: 65, scope: !7)
!84 = !DILocation(line: 84, column: 40, scope: !7)
!85 = !DILocation(line: 84, column: 47, scope: !7)
!86 = !DILocation(line: 84, column: 55, scope: !7)
!87 = !DILocation(line: 84, column: 35, scope: !7)
!88 = !DILocation(line: 84, column: 65, scope: !7)
!89 = !DILocation(line: 89, column: 39, scope: !7)
!90 = !DILocation(line: 92, column: 39, scope: !7)
!91 = !DILocation(line: 95, column: 39, scope: !7)
!92 = !DILocation(line: 98, column: 39, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !67)
!94 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !95)
!95 = !DILocation(line: 72, column: 46, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !100)
!100 = !DILocation(line: 79, column: 46, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !105)
!105 = !DILocation(line: 82, column: 46, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !110)
!110 = !DILocation(line: 85, column: 46, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !110)
!114 = !DILocation(line: 101, column: 39, scope: !7)
!115 = !DILocation(line: 104, column: 39, scope: !7)
!116 = !DILocation(line: 107, column: 39, scope: !7)
!117 = !DILocation(line: 110, column: 39, scope: !7)
!118 = !DILocation(line: 112, column: 25, scope: !7)
!119 = !DILocation(line: 114, column: 38, scope: !7)
!120 = !DILocation(line: 114, column: 34, scope: !7)
!121 = !DILocation(line: 114, column: 29, scope: !7)
!122 = !DILocation(line: 114, column: 50, scope: !7)
!123 = !DILocation(line: 115, column: 29, scope: !7)
!124 = !DILocation(line: 115, column: 50, scope: !7)
!125 = !DILocation(line: 267, column: 36, scope: !126, inlinedAt: !128)
!126 = distinct !DILexicalBlockFile(scope: !7, file: !127, discriminator: 0)
!127 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!128 = !DILocation(line: 116, column: 27, scope: !7)
!129 = !DILocation(line: 256, column: 15, scope: !130, inlinedAt: !128)
!130 = distinct !DILexicalBlockFile(scope: !126, file: !127, discriminator: 0)
!131 = !DILocation(line: 118, column: 20, scope: !7)
!132 = !DILocation(line: 119, column: 4, scope: !7)
!133 = !DILocation(line: 120, column: 28, scope: !7)
!134 = !DILocation(line: 120, column: 40, scope: !7)
!135 = !DILocation(line: 120, column: 4, scope: !7)
