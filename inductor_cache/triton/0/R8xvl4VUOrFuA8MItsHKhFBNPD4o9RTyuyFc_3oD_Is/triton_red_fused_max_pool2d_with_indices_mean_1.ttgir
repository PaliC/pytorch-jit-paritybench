#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 16], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [8, 2], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [16, 1], order = [1, 0]}>
#loc = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)
#loc1 = loc(unknown)
#loc136 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:27)
#loc177 = loc(callsite(#loc1 at #loc136))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_max_pool2d_with_indices_mean_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<3> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<5> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<6> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<7> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<8> : tensor<16x256xi8, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<2.560000e+02> : tensor<16x1xf32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<0xFF800000> : tensor<16x256xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_11 = arith.constant dense<256> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<256> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<256> : tensor<16x1xi32, #blocked2> loc(#loc1)
    %cst_14 = arith.constant dense<256> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<256> : tensor<1x256xi32, #blocked2> loc(#loc1)
    %cst_17 = arith.constant dense<16> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_18 = arith.constant dense<2> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_19 = arith.constant dense<-1> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<0> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<32> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_22 = arith.constant dense<-33> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_23 = arith.constant dense<64> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_24 = arith.constant dense<1024> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_25 = arith.constant dense<-32> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_26 = arith.constant dense<1> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_27 = arith.constant dense<-31> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_28 = arith.constant dense<31> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_29 = arith.constant dense<32> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_30 = arith.constant dense<33> : tensor<1x256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<16x1xi32, #blocked2> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked2> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<16x1xi32, #blocked> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<16x1xi32, #blocked1> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<16x1xi32, #blocked2> loc(#loc5)
    %14 = arith.cmpi slt, %11, %cst_11 : tensor<16x1xi32, #blocked> loc(#loc6)
    %15 = arith.cmpi slt, %12, %cst_12 : tensor<16x1xi32, #blocked1> loc(#loc6)
    %16 = arith.cmpi slt, %13, %cst_13 : tensor<16x1xi32, #blocked2> loc(#loc6)
    %17 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %18 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %19 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc7)
    %20 = tt.expand_dims %17 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc7)
    %21 = tt.expand_dims %18 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc7)
    %22 = tt.expand_dims %19 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc7)
    %23 = arith.cmpi slt, %20, %cst_14 : tensor<1x256xi32, #blocked> loc(#loc8)
    %24 = arith.cmpi slt, %21, %cst_15 : tensor<1x256xi32, #blocked1> loc(#loc8)
    %25 = arith.cmpi slt, %22, %cst_16 : tensor<1x256xi32, #blocked2> loc(#loc8)
    %26 = arith.divsi %20, %cst_17 : tensor<1x256xi32, #blocked> loc(#loc9)
    %27 = arith.remsi %20, %cst_17 : tensor<1x256xi32, #blocked> loc(#loc10)
    %28 = arith.muli %26, %cst_18 : tensor<1x256xi32, #blocked> loc(#loc11)
    %29 = arith.addi %28, %cst_19 : tensor<1x256xi32, #blocked> loc(#loc12)
    %30 = arith.extsi %29 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc13)
    %31 = arith.cmpi sge, %30, %cst_20 : tensor<1x256xi64, #blocked> loc(#loc13)
    %32 = arith.cmpi slt, %30, %cst_21 : tensor<1x256xi64, #blocked> loc(#loc14)
    %33 = arith.andi %31, %32 : tensor<1x256xi1, #blocked> loc(#loc15)
    %34 = arith.muli %27, %cst_18 : tensor<1x256xi32, #blocked> loc(#loc16)
    %35 = arith.addi %34, %cst_19 : tensor<1x256xi32, #blocked> loc(#loc17)
    %36 = arith.extsi %35 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc18)
    %37 = arith.cmpi sge, %36, %cst_20 : tensor<1x256xi64, #blocked> loc(#loc18)
    %38 = arith.cmpi slt, %36, %cst_21 : tensor<1x256xi64, #blocked> loc(#loc19)
    %39 = arith.andi %37, %38 : tensor<1x256xi1, #blocked> loc(#loc20)
    %40 = arith.andi %33, %39 : tensor<1x256xi1, #blocked> loc(#loc21)
    %41 = arith.addi %34, %cst_22 : tensor<1x256xi32, #blocked> loc(#loc22)
    %42 = arith.muli %26, %cst_23 : tensor<1x256xi32, #blocked> loc(#loc23)
    %43 = arith.addi %41, %42 : tensor<1x256xi32, #blocked> loc(#loc24)
    %44 = arith.muli %11, %cst_24 : tensor<16x1xi32, #blocked> loc(#loc25)
    %45 = tt.broadcast %43 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc26)
    %46 = tt.broadcast %44 : tensor<16x1xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc26)
    %47 = arith.addi %45, %46 : tensor<16x256xi32, #blocked> loc(#loc26)
    %48 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %49 = tt.addptr %48, %47 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc27)
    %50 = arith.andi %23, %40 : tensor<1x256xi1, #blocked> loc(#loc28)
    %51 = tt.broadcast %50 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc29)
    %52 = tt.broadcast %14 : tensor<16x1xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc29)
    %53 = tt.broadcast %15 : tensor<16x1xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc29)
    %54 = tt.broadcast %16 : tensor<16x1xi1, #blocked2> -> tensor<16x256xi1, #blocked2> loc(#loc29)
    %55 = arith.andi %51, %52 : tensor<16x256xi1, #blocked> loc(#loc29)
    %56 = tt.load %49, %55, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc30)
    %57 = arith.extsi %34 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc31)
    %58 = arith.cmpi sge, %57, %cst_20 : tensor<1x256xi64, #blocked> loc(#loc31)
    %59 = arith.cmpi slt, %57, %cst_21 : tensor<1x256xi64, #blocked> loc(#loc32)
    %60 = arith.andi %58, %59 : tensor<1x256xi1, #blocked> loc(#loc33)
    %61 = arith.andi %33, %60 : tensor<1x256xi1, #blocked> loc(#loc34)
    %62 = arith.addi %34, %cst_25 : tensor<1x256xi32, #blocked> loc(#loc35)
    %63 = arith.addi %62, %42 : tensor<1x256xi32, #blocked> loc(#loc36)
    %64 = tt.broadcast %63 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc37)
    %65 = arith.addi %64, %46 : tensor<16x256xi32, #blocked> loc(#loc37)
    %66 = tt.addptr %48, %65 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc38)
    %67 = arith.andi %23, %61 : tensor<1x256xi1, #blocked> loc(#loc39)
    %68 = tt.broadcast %67 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc40)
    %69 = arith.andi %68, %52 : tensor<16x256xi1, #blocked> loc(#loc40)
    %70 = tt.load %66, %69, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc41)
    %71 = arith.cmpf ogt, %70, %56 : tensor<16x256xf32, #blocked> loc(#loc144)
    %72 = arith.cmpf une, %70, %70 : tensor<16x256xf32, #blocked> loc(#loc145)
    %73 = arith.ori %71, %72 : tensor<16x256xi1, #blocked> loc(#loc146)
    %74 = arith.select %73, %70, %56 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc147)
    %75 = arith.addi %34, %cst_26 : tensor<1x256xi32, #blocked> loc(#loc47)
    %76 = arith.extsi %75 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc48)
    %77 = arith.cmpi sge, %76, %cst_20 : tensor<1x256xi64, #blocked> loc(#loc48)
    %78 = arith.cmpi slt, %76, %cst_21 : tensor<1x256xi64, #blocked> loc(#loc49)
    %79 = arith.andi %77, %78 : tensor<1x256xi1, #blocked> loc(#loc50)
    %80 = arith.andi %33, %79 : tensor<1x256xi1, #blocked> loc(#loc51)
    %81 = arith.addi %34, %cst_27 : tensor<1x256xi32, #blocked> loc(#loc52)
    %82 = arith.addi %81, %42 : tensor<1x256xi32, #blocked> loc(#loc53)
    %83 = tt.broadcast %82 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc54)
    %84 = arith.addi %83, %46 : tensor<16x256xi32, #blocked> loc(#loc54)
    %85 = tt.addptr %48, %84 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc55)
    %86 = arith.andi %23, %80 : tensor<1x256xi1, #blocked> loc(#loc56)
    %87 = tt.broadcast %86 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc57)
    %88 = arith.andi %87, %52 : tensor<16x256xi1, #blocked> loc(#loc57)
    %89 = tt.load %85, %88, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc58)
    %90 = arith.cmpf ogt, %89, %74 : tensor<16x256xf32, #blocked> loc(#loc148)
    %91 = arith.cmpf une, %89, %89 : tensor<16x256xf32, #blocked> loc(#loc149)
    %92 = arith.ori %90, %91 : tensor<16x256xi1, #blocked> loc(#loc150)
    %93 = arith.select %92, %89, %74 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc151)
    %94 = arith.extsi %28 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc60)
    %95 = arith.cmpi sge, %94, %cst_20 : tensor<1x256xi64, #blocked> loc(#loc60)
    %96 = arith.cmpi slt, %94, %cst_21 : tensor<1x256xi64, #blocked> loc(#loc61)
    %97 = arith.andi %95, %96 : tensor<1x256xi1, #blocked> loc(#loc62)
    %98 = arith.andi %97, %39 : tensor<1x256xi1, #blocked> loc(#loc63)
    %99 = arith.addi %35, %42 : tensor<1x256xi32, #blocked> loc(#loc64)
    %100 = tt.broadcast %99 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc65)
    %101 = arith.addi %100, %46 : tensor<16x256xi32, #blocked> loc(#loc65)
    %102 = tt.addptr %48, %101 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc66)
    %103 = arith.andi %23, %98 : tensor<1x256xi1, #blocked> loc(#loc67)
    %104 = tt.broadcast %103 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc68)
    %105 = arith.andi %104, %52 : tensor<16x256xi1, #blocked> loc(#loc68)
    %106 = tt.load %102, %105, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc69)
    %107 = arith.cmpf ogt, %106, %93 : tensor<16x256xf32, #blocked> loc(#loc152)
    %108 = arith.cmpf une, %106, %106 : tensor<16x256xf32, #blocked> loc(#loc153)
    %109 = arith.ori %107, %108 : tensor<16x256xi1, #blocked> loc(#loc154)
    %110 = arith.select %109, %106, %93 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc155)
    %111 = arith.andi %97, %60 : tensor<1x256xi1, #blocked> loc(#loc71)
    %112 = arith.addi %34, %42 : tensor<1x256xi32, #blocked> loc(#loc72)
    %113 = tt.broadcast %112 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc73)
    %114 = arith.addi %113, %46 : tensor<16x256xi32, #blocked> loc(#loc73)
    %115 = tt.addptr %48, %114 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc74)
    %116 = arith.andi %23, %111 : tensor<1x256xi1, #blocked> loc(#loc75)
    %117 = tt.broadcast %116 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc76)
    %118 = arith.andi %117, %52 : tensor<16x256xi1, #blocked> loc(#loc76)
    %119 = tt.load %115, %118, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc77)
    %120 = arith.cmpf ogt, %119, %110 : tensor<16x256xf32, #blocked> loc(#loc156)
    %121 = arith.cmpf une, %119, %119 : tensor<16x256xf32, #blocked> loc(#loc157)
    %122 = arith.ori %120, %121 : tensor<16x256xi1, #blocked> loc(#loc158)
    %123 = arith.select %122, %119, %110 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc159)
    %124 = arith.andi %97, %79 : tensor<1x256xi1, #blocked> loc(#loc79)
    %125 = arith.addi %75, %42 : tensor<1x256xi32, #blocked> loc(#loc80)
    %126 = tt.broadcast %125 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc81)
    %127 = arith.addi %126, %46 : tensor<16x256xi32, #blocked> loc(#loc81)
    %128 = tt.addptr %48, %127 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc82)
    %129 = arith.andi %23, %124 : tensor<1x256xi1, #blocked> loc(#loc83)
    %130 = tt.broadcast %129 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc84)
    %131 = arith.andi %130, %52 : tensor<16x256xi1, #blocked> loc(#loc84)
    %132 = tt.load %128, %131, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc85)
    %133 = arith.cmpf ogt, %132, %123 : tensor<16x256xf32, #blocked> loc(#loc160)
    %134 = arith.cmpf une, %132, %132 : tensor<16x256xf32, #blocked> loc(#loc161)
    %135 = arith.ori %133, %134 : tensor<16x256xi1, #blocked> loc(#loc162)
    %136 = arith.select %135, %132, %123 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc163)
    %137 = arith.addi %28, %cst_26 : tensor<1x256xi32, #blocked> loc(#loc87)
    %138 = arith.extsi %137 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc88)
    %139 = arith.cmpi sge, %138, %cst_20 : tensor<1x256xi64, #blocked> loc(#loc88)
    %140 = arith.cmpi slt, %138, %cst_21 : tensor<1x256xi64, #blocked> loc(#loc89)
    %141 = arith.andi %139, %140 : tensor<1x256xi1, #blocked> loc(#loc90)
    %142 = arith.andi %141, %39 : tensor<1x256xi1, #blocked> loc(#loc91)
    %143 = arith.addi %34, %cst_28 : tensor<1x256xi32, #blocked> loc(#loc92)
    %144 = arith.addi %143, %42 : tensor<1x256xi32, #blocked> loc(#loc93)
    %145 = tt.broadcast %144 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc94)
    %146 = arith.addi %145, %46 : tensor<16x256xi32, #blocked> loc(#loc94)
    %147 = tt.addptr %48, %146 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc95)
    %148 = arith.andi %23, %142 : tensor<1x256xi1, #blocked> loc(#loc96)
    %149 = tt.broadcast %148 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc97)
    %150 = arith.andi %149, %52 : tensor<16x256xi1, #blocked> loc(#loc97)
    %151 = tt.load %147, %150, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc98)
    %152 = arith.cmpf ogt, %151, %136 : tensor<16x256xf32, #blocked> loc(#loc164)
    %153 = arith.cmpf une, %151, %151 : tensor<16x256xf32, #blocked> loc(#loc165)
    %154 = arith.ori %152, %153 : tensor<16x256xi1, #blocked> loc(#loc166)
    %155 = arith.select %154, %151, %136 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc167)
    %156 = arith.andi %141, %60 : tensor<1x256xi1, #blocked> loc(#loc100)
    %157 = arith.addi %34, %cst_29 : tensor<1x256xi32, #blocked> loc(#loc101)
    %158 = arith.addi %157, %42 : tensor<1x256xi32, #blocked> loc(#loc102)
    %159 = tt.broadcast %158 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc103)
    %160 = arith.addi %159, %46 : tensor<16x256xi32, #blocked> loc(#loc103)
    %161 = tt.addptr %48, %160 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc104)
    %162 = arith.andi %23, %156 : tensor<1x256xi1, #blocked> loc(#loc105)
    %163 = tt.broadcast %162 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc106)
    %164 = arith.andi %163, %52 : tensor<16x256xi1, #blocked> loc(#loc106)
    %165 = tt.load %161, %164, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc107)
    %166 = arith.cmpf ogt, %165, %155 : tensor<16x256xf32, #blocked> loc(#loc168)
    %167 = arith.cmpf une, %165, %165 : tensor<16x256xf32, #blocked> loc(#loc169)
    %168 = arith.ori %166, %167 : tensor<16x256xi1, #blocked> loc(#loc170)
    %169 = arith.select %168, %165, %155 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc171)
    %170 = arith.andi %141, %79 : tensor<1x256xi1, #blocked> loc(#loc109)
    %171 = arith.addi %34, %cst_30 : tensor<1x256xi32, #blocked> loc(#loc110)
    %172 = arith.addi %171, %42 : tensor<1x256xi32, #blocked> loc(#loc111)
    %173 = tt.broadcast %172 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc112)
    %174 = arith.addi %173, %46 : tensor<16x256xi32, #blocked> loc(#loc112)
    %175 = tt.addptr %48, %174 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc113)
    %176 = arith.andi %23, %170 : tensor<1x256xi1, #blocked> loc(#loc114)
    %177 = tt.broadcast %176 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc115)
    %178 = arith.andi %177, %52 : tensor<16x256xi1, #blocked> loc(#loc115)
    %179 = tt.load %175, %178, %cst_10 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc116)
    %180 = arith.cmpf ogt, %179, %169 : tensor<16x256xf32, #blocked> loc(#loc172)
    %181 = arith.cmpf une, %179, %179 : tensor<16x256xf32, #blocked> loc(#loc173)
    %182 = arith.ori %180, %181 : tensor<16x256xi1, #blocked> loc(#loc174)
    %183 = arith.select %182, %179, %169 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc175)
    %184 = arith.select %71, %cst_0, %cst_1 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc118)
    %185 = arith.select %90, %cst_2, %184 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc119)
    %186 = arith.select %107, %cst_3, %185 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc120)
    %187 = arith.select %120, %cst_4, %186 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc121)
    %188 = arith.select %133, %cst_5, %187 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc122)
    %189 = arith.select %152, %cst_6, %188 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc123)
    %190 = arith.select %166, %cst_7, %189 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc124)
    %191 = arith.select %180, %cst_8, %190 : tensor<16x256xi1, #blocked>, tensor<16x256xi8, #blocked> loc(#loc125)
    %192 = arith.addf %183, %cst : tensor<16x256xf32, #blocked> loc(#loc126)
    %193 = tt.broadcast %23 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc127)
    %194 = tt.broadcast %24 : tensor<1x256xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc127)
    %195 = tt.broadcast %25 : tensor<1x256xi1, #blocked2> -> tensor<16x256xi1, #blocked2> loc(#loc127)
    %196 = arith.andi %193, %52 : tensor<16x256xi1, #blocked> loc(#loc127)
    %197 = arith.andi %194, %53 : tensor<16x256xi1, #blocked1> loc(#loc127)
    %198 = arith.andi %195, %54 : tensor<16x256xi1, #blocked2> loc(#loc127)
    %199 = arith.select %196, %192, %cst : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc128)
    %200 = arith.muli %12, %cst_12 : tensor<16x1xi32, #blocked1> loc(#loc129)
    %201 = arith.muli %13, %cst_13 : tensor<16x1xi32, #blocked2> loc(#loc129)
    %202 = tt.broadcast %21 : tensor<1x256xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc130)
    %203 = tt.broadcast %22 : tensor<1x256xi32, #blocked2> -> tensor<16x256xi32, #blocked2> loc(#loc130)
    %204 = tt.broadcast %200 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc130)
    %205 = tt.broadcast %201 : tensor<16x1xi32, #blocked2> -> tensor<16x256xi32, #blocked2> loc(#loc130)
    %206 = arith.addi %202, %204 : tensor<16x256xi32, #blocked1> loc(#loc130)
    %207 = arith.addi %203, %205 : tensor<16x256xi32, #blocked2> loc(#loc130)
    %208 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc131)
    %209 = tt.addptr %208, %206 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc131)
    %210 = triton_gpu.convert_layout %183 : tensor<16x256xf32, #blocked> -> tensor<16x256xf32, #blocked1> loc(#loc132)
    tt.store %209, %210, %197 : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc132)
    %211 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<16x256x!tt.ptr<i8>, #blocked2> loc(#loc133)
    %212 = tt.addptr %211, %207 : tensor<16x256x!tt.ptr<i8>, #blocked2>, tensor<16x256xi32, #blocked2> loc(#loc133)
    %213 = triton_gpu.convert_layout %191 : tensor<16x256xi8, #blocked> -> tensor<16x256xi8, #blocked2> loc(#loc134)
    tt.store %212, %213, %198 : tensor<16x256x!tt.ptr<i8>, #blocked2> loc(#loc134)
    %214 = "tt.reduce"(%199) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc136)), %arg7: f32 loc(callsite(#loc1 at #loc136))):
      %219 = arith.addf %arg6, %arg7 : f32 loc(#loc179)
      tt.reduce.return %219 : f32 loc(#loc176)
    }) : (tensor<16x256xf32, #blocked>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc176)
    %215 = tt.expand_dims %214 {axis = 1 : i32} : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xf32, #blocked> loc(#loc138)
    %216 = arith.divf %215, %cst_9 : tensor<16x1xf32, #blocked> loc(#loc139)
    gpu.barrier loc(#loc140)
    %217 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc141)
    %218 = tt.addptr %217, %11 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc141)
    tt.store %218, %216, %14 : tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc142)
    tt.return loc(#loc143)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:28)
#loc3 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:33)
#loc4 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:44)
#loc5 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:23)
#loc6 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":24:21)
#loc7 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":25:33)
#loc8 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":30:25)
#loc9 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":31:23)
#loc10 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":32:23)
#loc11 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:24)
#loc12 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:22)
#loc13 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":36:23)
#loc14 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":38:22)
#loc15 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":39:22)
#loc16 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:24)
#loc17 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:22)
#loc18 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":41:23)
#loc19 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":42:22)
#loc20 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":43:22)
#loc21 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":44:23)
#loc22 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:43)
#loc23 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:53)
#loc24 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:50)
#loc25 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:63)
#loc26 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:58)
#loc27 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:35)
#loc28 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:76)
#loc29 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:84)
#loc30 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:68)
#loc31 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":47:25)
#loc32 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":48:24)
#loc33 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":49:24)
#loc34 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":50:23)
#loc35 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:43)
#loc36 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:50)
#loc37 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:58)
#loc38 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:35)
#loc39 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:76)
#loc40 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:84)
#loc41 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:68)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc43 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":52:46)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc47 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":53:20)
#loc48 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":54:25)
#loc49 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":55:24)
#loc50 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":56:24)
#loc51 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":57:23)
#loc52 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:43)
#loc53 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:50)
#loc54 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:58)
#loc55 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:35)
#loc56 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:76)
#loc57 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:84)
#loc58 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:68)
#loc59 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":59:46)
#loc60 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":61:25)
#loc61 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":62:24)
#loc62 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":63:24)
#loc63 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":64:24)
#loc64 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:49)
#loc65 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:57)
#loc66 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:35)
#loc67 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:75)
#loc68 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:83)
#loc69 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:67)
#loc70 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":66:46)
#loc71 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":67:24)
#loc72 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:42)
#loc73 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:50)
#loc74 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:35)
#loc75 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:68)
#loc76 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:76)
#loc77 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:60)
#loc78 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":69:46)
#loc79 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":70:24)
#loc80 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:46)
#loc81 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:54)
#loc82 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:35)
#loc83 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:72)
#loc84 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:80)
#loc85 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:64)
#loc86 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":72:46)
#loc87 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":73:20)
#loc88 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":74:25)
#loc89 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":75:24)
#loc90 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":76:24)
#loc91 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":77:24)
#loc92 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:40)
#loc93 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:47)
#loc94 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:55)
#loc95 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:35)
#loc96 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:73)
#loc97 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:81)
#loc98 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:65)
#loc99 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":79:46)
#loc100 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":80:24)
#loc101 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:40)
#loc102 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:47)
#loc103 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:55)
#loc104 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:35)
#loc105 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:73)
#loc106 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:81)
#loc107 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:65)
#loc108 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":82:46)
#loc109 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":83:24)
#loc110 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:40)
#loc111 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:47)
#loc112 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:55)
#loc113 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:35)
#loc114 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:73)
#loc115 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:81)
#loc116 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:65)
#loc117 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":85:46)
#loc118 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":89:39)
#loc119 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":92:39)
#loc120 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":95:39)
#loc121 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":98:39)
#loc122 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":101:39)
#loc123 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":104:39)
#loc124 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":107:39)
#loc125 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":110:39)
#loc126 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":112:25)
#loc127 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:34)
#loc128 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:48)
#loc129 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:38)
#loc130 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:34)
#loc131 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:29)
#loc132 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:50)
#loc133 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:29)
#loc134 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:50)
#loc135 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc137 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc138 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:30)
#loc139 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":118:20)
#loc140 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":119:4)
#loc141 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:28)
#loc142 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:40)
#loc143 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:4)
#loc144 = loc(callsite(#loc42 at #loc43))
#loc145 = loc(callsite(#loc44 at #loc43))
#loc146 = loc(callsite(#loc45 at #loc43))
#loc147 = loc(callsite(#loc46 at #loc43))
#loc148 = loc(callsite(#loc42 at #loc59))
#loc149 = loc(callsite(#loc44 at #loc59))
#loc150 = loc(callsite(#loc45 at #loc59))
#loc151 = loc(callsite(#loc46 at #loc59))
#loc152 = loc(callsite(#loc42 at #loc70))
#loc153 = loc(callsite(#loc44 at #loc70))
#loc154 = loc(callsite(#loc45 at #loc70))
#loc155 = loc(callsite(#loc46 at #loc70))
#loc156 = loc(callsite(#loc42 at #loc78))
#loc157 = loc(callsite(#loc44 at #loc78))
#loc158 = loc(callsite(#loc45 at #loc78))
#loc159 = loc(callsite(#loc46 at #loc78))
#loc160 = loc(callsite(#loc42 at #loc86))
#loc161 = loc(callsite(#loc44 at #loc86))
#loc162 = loc(callsite(#loc45 at #loc86))
#loc163 = loc(callsite(#loc46 at #loc86))
#loc164 = loc(callsite(#loc42 at #loc99))
#loc165 = loc(callsite(#loc44 at #loc99))
#loc166 = loc(callsite(#loc45 at #loc99))
#loc167 = loc(callsite(#loc46 at #loc99))
#loc168 = loc(callsite(#loc42 at #loc108))
#loc169 = loc(callsite(#loc44 at #loc108))
#loc170 = loc(callsite(#loc45 at #loc108))
#loc171 = loc(callsite(#loc46 at #loc108))
#loc172 = loc(callsite(#loc42 at #loc117))
#loc173 = loc(callsite(#loc44 at #loc117))
#loc174 = loc(callsite(#loc45 at #loc117))
#loc175 = loc(callsite(#loc46 at #loc117))
#loc176 = loc(callsite(#loc135 at #loc136))
#loc178 = loc(callsite(#loc137 at #loc135))
#loc179 = loc(callsite(#loc178 at #loc136))
