; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 4608, !dbg !14
  %18 = icmp slt i32 %16, 4608, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %.lobit4 = lshr i32 %11, 6, !dbg !17
  %21 = and i32 %.lobit4, 3, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %21, 8, !dbg !17
  %24 = or disjoint i32 %21, 12, !dbg !17
  %25 = or disjoint i32 %20, %21, !dbg !18
  %26 = or disjoint i32 %20, %22, !dbg !18
  %27 = or disjoint i32 %20, %23, !dbg !18
  %28 = or disjoint i32 %20, %24, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %29 = sdiv i32 %.frozen, 1152, !dbg !19
  %30 = mul i32 %29, 1152, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = srem i32 %16, 1152, !dbg !20
  %32 = mul i32 %25, 1152, !dbg !21
  %33 = mul i32 %26, 1152, !dbg !21
  %34 = mul i32 %27, 1152, !dbg !21
  %35 = mul i32 %28, 1152, !dbg !21
  %36 = mul i32 %29, 4718592, !dbg !22
  %37 = add i32 %36, %.decomposed, !dbg !23
  %38 = add i32 %37, %32, !dbg !24
  %39 = add i32 %37, %33, !dbg !24
  %40 = add i32 %37, %34, !dbg !24
  %41 = add i32 %37, %35, !dbg !24
  %42 = sext i32 %38 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %39 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %40 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %41 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %17) #4, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %17) #4, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %17) #4, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %17) #4, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = and i32 %12, 1020, !dbg !26
  %71 = lshr i32 %12, 6, !dbg !26
  %72 = and i32 %71, 12, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %70, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %51, i32 %52, i32 %53, i32 %54, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %77 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 1040, !dbg !26
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %79 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 2080, !dbg !26
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %81 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 3120, !dbg !26
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %83 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %84 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %85 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %86 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %87 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %88 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %89 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %90 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %91 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %92 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %93 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %94 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  %95 = sext i32 %31 to i64, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %18) #4, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %18) #4, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #4, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !33
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #4, !dbg !34
  %105 = fadd float %100, 0x3EE4F8B580000000, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %106, 0, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %107, 0, !dbg !36
  br i1 %.not.i, label %113, label %108, !dbg !36

108:                                              ; preds = %8
  br i1 %.not1.i, label %111, label %109, !dbg !36

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %109, %111, %114, %116
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !36
  %118 = bitcast i32 %97 to float, !dbg !28
  %119 = fsub float %94, %118, !dbg !37
  %120 = fsub float %93, %118, !dbg !37
  %121 = fsub float %92, %118, !dbg !37
  %122 = fsub float %91, %118, !dbg !37
  %123 = fsub float %90, %118, !dbg !37
  %124 = fsub float %89, %118, !dbg !37
  %125 = fsub float %88, %118, !dbg !37
  %126 = fsub float %87, %118, !dbg !37
  %127 = fsub float %86, %118, !dbg !37
  %128 = fsub float %85, %118, !dbg !37
  %129 = fsub float %84, %118, !dbg !37
  %130 = fsub float %83, %118, !dbg !37
  %131 = fsub float %82, %118, !dbg !37
  %132 = fsub float %80, %118, !dbg !37
  %133 = fsub float %78, %118, !dbg !37
  %134 = fsub float %76, %118, !dbg !37
  %135 = bitcast i32 %104 to float, !dbg !34
  %136 = bitcast i32 %102 to float, !dbg !32
  %137 = and i32 %12, 12, !dbg !12
  %138 = or disjoint i32 %20, %137, !dbg !18
  %139 = lshr i32 %11, 2, !dbg !12
  %140 = and i32 %139, 63, !dbg !12
  %141 = or disjoint i32 %140, %10, !dbg !13
  %142 = or disjoint i32 %141, 192, !dbg !13
  %143 = icmp slt i32 %142, 4608, !dbg !14
  %144 = or disjoint i32 %141, 128, !dbg !13
  %145 = icmp slt i32 %144, 4608, !dbg !14
  %146 = or disjoint i32 %141, 64, !dbg !13
  %147 = icmp slt i32 %146, 4608, !dbg !14
  %148 = icmp slt i32 %141, 4608, !dbg !14
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %150 = fmul float %134, %149, !dbg !39
  %151 = fmul float %133, %149, !dbg !39
  %152 = fmul float %132, %149, !dbg !39
  %153 = fmul float %131, %149, !dbg !39
  %154 = fmul float %130, %149, !dbg !39
  %155 = fmul float %129, %149, !dbg !39
  %156 = fmul float %128, %149, !dbg !39
  %157 = fmul float %127, %149, !dbg !39
  %158 = fmul float %126, %149, !dbg !39
  %159 = fmul float %125, %149, !dbg !39
  %160 = fmul float %124, %149, !dbg !39
  %161 = fmul float %123, %149, !dbg !39
  %162 = fmul float %122, %149, !dbg !39
  %163 = fmul float %121, %149, !dbg !39
  %164 = fmul float %120, %149, !dbg !39
  %165 = fmul float %119, %149, !dbg !39
  %166 = fmul float %150, %136, !dbg !40
  %167 = fmul float %151, %136, !dbg !40
  %168 = fmul float %152, %136, !dbg !40
  %169 = fmul float %153, %136, !dbg !40
  %170 = fmul float %154, %136, !dbg !40
  %171 = fmul float %155, %136, !dbg !40
  %172 = fmul float %156, %136, !dbg !40
  %173 = fmul float %157, %136, !dbg !40
  %174 = fmul float %158, %136, !dbg !40
  %175 = fmul float %159, %136, !dbg !40
  %176 = fmul float %160, %136, !dbg !40
  %177 = fmul float %161, %136, !dbg !40
  %178 = fmul float %162, %136, !dbg !40
  %179 = fmul float %163, %136, !dbg !40
  %180 = fmul float %164, %136, !dbg !40
  %181 = fmul float %165, %136, !dbg !40
  %182 = fadd float %166, %135, !dbg !41
  %183 = fadd float %167, %135, !dbg !41
  %184 = fadd float %168, %135, !dbg !41
  %185 = fadd float %169, %135, !dbg !41
  %186 = fadd float %170, %135, !dbg !41
  %187 = fadd float %171, %135, !dbg !41
  %188 = fadd float %172, %135, !dbg !41
  %189 = fadd float %173, %135, !dbg !41
  %190 = fadd float %174, %135, !dbg !41
  %191 = fadd float %175, %135, !dbg !41
  %192 = fadd float %176, %135, !dbg !41
  %193 = fadd float %177, %135, !dbg !41
  %194 = fadd float %178, %135, !dbg !41
  %195 = fadd float %179, %135, !dbg !41
  %196 = fadd float %180, %135, !dbg !41
  %197 = fadd float %181, %135, !dbg !41
  %198 = shl i32 %141, 12, !dbg !42
  %199 = shl i32 %146, 12, !dbg !42
  %200 = shl i32 %144, 12, !dbg !42
  %201 = shl i32 %142, 12, !dbg !42
  %202 = add i32 %138, %198, !dbg !43
  %203 = add i32 %138, %199, !dbg !43
  %204 = add i32 %138, %200, !dbg !43
  %205 = add i32 %138, %201, !dbg !43
  %206 = sext i32 %202 to i64, !dbg !44
  %207 = getelementptr float, ptr addrspace(1) %5, i64 %206, !dbg !44
  %208 = sext i32 %203 to i64, !dbg !44
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !44
  %210 = sext i32 %204 to i64, !dbg !44
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !44
  %212 = sext i32 %205 to i64, !dbg !44
  %213 = getelementptr float, ptr addrspace(1) %5, i64 %212, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %214 = shl i32 %11, 4, !dbg !45
  %215 = and i32 %214, 4080, !dbg !45
  %216 = lshr exact i32 %215, 2, !dbg !45
  %217 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %216, !dbg !45
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !45
  %219 = bitcast float %182 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !45
  %220 = or disjoint i32 %215, 1, !dbg !45
  %221 = getelementptr float, ptr addrspace(3) %217, i32 %220, !dbg !45
  %222 = bitcast float %183 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #4, !dbg !45
  %223 = or disjoint i32 %215, 2, !dbg !45
  %224 = getelementptr float, ptr addrspace(3) %217, i32 %223, !dbg !45
  %225 = bitcast float %184 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !45
  %226 = or disjoint i32 %215, 3, !dbg !45
  %227 = getelementptr float, ptr addrspace(3) %217, i32 %226, !dbg !45
  %228 = bitcast float %185 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !45
  %229 = or disjoint i32 %215, 4, !dbg !45
  %230 = getelementptr float, ptr addrspace(3) %217, i32 %229, !dbg !45
  %231 = bitcast float %186 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !45
  %232 = or disjoint i32 %215, 5, !dbg !45
  %233 = getelementptr float, ptr addrspace(3) %217, i32 %232, !dbg !45
  %234 = bitcast float %187 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !45
  %235 = or disjoint i32 %215, 6, !dbg !45
  %236 = getelementptr float, ptr addrspace(3) %217, i32 %235, !dbg !45
  %237 = bitcast float %188 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !45
  %238 = or disjoint i32 %215, 7, !dbg !45
  %239 = getelementptr float, ptr addrspace(3) %217, i32 %238, !dbg !45
  %240 = bitcast float %189 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #4, !dbg !45
  %241 = or disjoint i32 %215, 8, !dbg !45
  %242 = getelementptr float, ptr addrspace(3) %217, i32 %241, !dbg !45
  %243 = bitcast float %190 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !45
  %244 = or disjoint i32 %215, 9, !dbg !45
  %245 = getelementptr float, ptr addrspace(3) %217, i32 %244, !dbg !45
  %246 = bitcast float %191 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !45
  %247 = or disjoint i32 %215, 10, !dbg !45
  %248 = getelementptr float, ptr addrspace(3) %217, i32 %247, !dbg !45
  %249 = bitcast float %192 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !45
  %250 = or disjoint i32 %215, 11, !dbg !45
  %251 = getelementptr float, ptr addrspace(3) %217, i32 %250, !dbg !45
  %252 = bitcast float %193 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !45
  %253 = or disjoint i32 %215, 12, !dbg !45
  %254 = getelementptr float, ptr addrspace(3) %217, i32 %253, !dbg !45
  %255 = bitcast float %194 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !45
  %256 = or disjoint i32 %215, 13, !dbg !45
  %257 = getelementptr float, ptr addrspace(3) %217, i32 %256, !dbg !45
  %258 = bitcast float %195 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !45
  %259 = or disjoint i32 %215, 14, !dbg !45
  %260 = getelementptr float, ptr addrspace(3) %217, i32 %259, !dbg !45
  %261 = bitcast float %196 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !45
  %262 = or disjoint i32 %215, 15, !dbg !45
  %263 = getelementptr float, ptr addrspace(3) %217, i32 %262, !dbg !45
  %264 = bitcast float %197 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %265 = lshr i32 %70, 4, !dbg !45
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !45
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %70, !dbg !45
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !45
  %269 = or disjoint i32 %70, 1, !dbg !45
  %270 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %269, !dbg !45
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !45
  %272 = or disjoint i32 %70, 2, !dbg !45
  %273 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %272, !dbg !45
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !45
  %275 = or disjoint i32 %70, 3, !dbg !45
  %276 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %275, !dbg !45
  %277 = load i32, ptr addrspace(3) %276, align 4, !dbg !45
  %278 = or disjoint i32 %70, 1024, !dbg !45
  %279 = lshr i32 %278, 4, !dbg !45
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !45
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %278, !dbg !45
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !45
  %283 = or disjoint i32 %70, 1025, !dbg !45
  %284 = lshr i32 %283, 4, !dbg !45
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !45
  %286 = getelementptr inbounds float, ptr addrspace(3) %285, i32 %283, !dbg !45
  %287 = load i32, ptr addrspace(3) %286, align 4, !dbg !45
  %288 = or disjoint i32 %70, 1026, !dbg !45
  %289 = lshr i32 %288, 4, !dbg !45
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !45
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %288, !dbg !45
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !45
  %293 = or disjoint i32 %70, 1027, !dbg !45
  %294 = lshr i32 %293, 4, !dbg !45
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !45
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %293, !dbg !45
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !45
  %298 = or disjoint i32 %70, 2048, !dbg !45
  %299 = lshr i32 %298, 4, !dbg !45
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !45
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %298, !dbg !45
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !45
  %303 = or disjoint i32 %70, 2049, !dbg !45
  %304 = lshr i32 %303, 4, !dbg !45
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !45
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %303, !dbg !45
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !45
  %308 = or disjoint i32 %70, 2050, !dbg !45
  %309 = lshr i32 %308, 4, !dbg !45
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !45
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %308, !dbg !45
  %312 = load i32, ptr addrspace(3) %311, align 4, !dbg !45
  %313 = or disjoint i32 %70, 2051, !dbg !45
  %314 = lshr i32 %313, 4, !dbg !45
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !45
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %313, !dbg !45
  %317 = load i32, ptr addrspace(3) %316, align 4, !dbg !45
  %318 = or disjoint i32 %70, 3072, !dbg !45
  %319 = lshr i32 %318, 4, !dbg !45
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !45
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %318, !dbg !45
  %322 = load i32, ptr addrspace(3) %321, align 4, !dbg !45
  %323 = or disjoint i32 %70, 3073, !dbg !45
  %324 = lshr i32 %323, 4, !dbg !45
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !45
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !45
  %327 = load i32, ptr addrspace(3) %326, align 4, !dbg !45
  %328 = or disjoint i32 %70, 3074, !dbg !45
  %329 = lshr i32 %328, 4, !dbg !45
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !45
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %328, !dbg !45
  %332 = load i32, ptr addrspace(3) %331, align 4, !dbg !45
  %333 = or disjoint i32 %70, 3075, !dbg !45
  %334 = lshr i32 %333, 4, !dbg !45
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %334, !dbg !45
  %336 = getelementptr inbounds float, ptr addrspace(3) %335, i32 %333, !dbg !45
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %268, i32 %271, i32 %274, i32 %277, ptr addrspace(1) %207, i1 %148) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %282, i32 %287, i32 %292, i32 %297, ptr addrspace(1) %209, i1 %147) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %307, i32 %312, i32 %317, ptr addrspace(1) %211, i1 %145) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %322, i32 %327, i32 %332, i32 %337, ptr addrspace(1) %213, i1 %143) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ocwiuleqzntgzekup23gflhwa264nfoqcltloxkydgdq7eaeql.py", directory: "inductor_cache/7o")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 58, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 35, scope: !7)
!43 = !DILocation(line: 48, column: 30, scope: !7)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 47, scope: !7)
!46 = !DILocation(line: 48, column: 4, scope: !7)
