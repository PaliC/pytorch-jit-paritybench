; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_leaky_relu_backward_36(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %7, 3, !dbg !12
  %11 = and i32 %10, 24, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 16, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 512, !dbg !14
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = shl i32 %7, 2, !dbg !17
  %21 = and i32 %20, 28, !dbg !17
  %22 = lshr i32 %7, 2, !dbg !17
  %23 = and i32 %22, 31, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %19, %23, !dbg !18
  %26 = icmp slt i32 %24, 64, !dbg !19
  %27 = icmp slt i32 %25, 64, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %28 = sdiv i32 %.frozen, 128, !dbg !20
  %29 = mul i32 %28, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl i32 %12, 6, !dbg !22
  %31 = shl i32 %13, 6, !dbg !22
  %32 = add i32 %24, %30, !dbg !23
  %33 = add i32 %24, %31, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = and i1 %15, %26, !dbg !25
  %39 = and i1 %16, %26, !dbg !25
  %40 = and i1 %17, %27, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !26
  %52 = insertelement <8 x i32> %51, i32 %49, i64 1, !dbg !26
  %53 = insertelement <8 x i32> %52, i32 %48, i64 2, !dbg !26
  %54 = insertelement <8 x i32> %53, i32 %47, i64 3, !dbg !26
  %55 = insertelement <8 x i32> %54, i32 %45, i64 4, !dbg !26
  %56 = insertelement <8 x i32> %55, i32 %44, i64 5, !dbg !26
  %57 = insertelement <8 x i32> %56, i32 %43, i64 6, !dbg !26
  %58 = insertelement <8 x i32> %57, i32 %42, i64 7, !dbg !26
  %59 = bitcast <8 x i32> %58 to <8 x float>, !dbg !26
  %60 = fcmp ogt <8 x float> %59, zeroinitializer, !dbg !27
  %61 = shl i32 %25, 7, !dbg !28
  %62 = add i32 %61, %.decomposed, !dbg !29
  %63 = shl i32 %28, 13, !dbg !30
  %64 = add i32 %62, %63, !dbg !31
  %65 = sext i32 %64 to i64, !dbg !32
  %66 = getelementptr i1, ptr addrspace(1) %1, i64 %65, !dbg !32
  %67 = extractelement <8 x i1> %60, i64 7, !dbg !33
  %68 = zext i1 %67 to i8, !dbg !33
  %69 = extractelement <8 x i1> %60, i64 6, !dbg !33
  %70 = zext i1 %69 to i8, !dbg !33
  %71 = extractelement <8 x i1> %60, i64 5, !dbg !33
  %72 = zext i1 %71 to i8, !dbg !33
  %73 = extractelement <8 x i1> %60, i64 4, !dbg !33
  %74 = zext i1 %73 to i8, !dbg !33
  %75 = extractelement <8 x i1> %60, i64 3, !dbg !33
  %76 = zext i1 %75 to i8, !dbg !33
  %77 = extractelement <8 x i1> %60, i64 2, !dbg !33
  %78 = zext i1 %77 to i8, !dbg !33
  %79 = extractelement <8 x i1> %60, i64 1, !dbg !33
  %80 = zext i1 %79 to i8, !dbg !33
  %81 = extractelement <8 x i1> %60, i64 0, !dbg !33
  %82 = zext i1 %81 to i8, !dbg !33
  %83 = shl i32 %7, 7, !dbg !33
  %84 = and i32 %83, 896, !dbg !33
  %85 = or disjoint i32 %84, %9, !dbg !33
  %86 = and i32 %10, 1016, !dbg !33
  %87 = lshr exact i32 %84, 2, !dbg !33
  %88 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %87, !dbg !33
  %89 = getelementptr i8, ptr addrspace(3) %88, i32 %85, !dbg !33
  %90 = insertelement <1 x i8> poison, i8 %68, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %89, <1 x i8> %90, i1 true) #2, !dbg !33
  %91 = or disjoint i32 %85, 32, !dbg !33
  %92 = lshr i32 %91, 2, !dbg !33
  %93 = and i32 %92, 232, !dbg !33
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !33
  %95 = getelementptr i8, ptr addrspace(3) %94, i32 %91, !dbg !33
  %96 = insertelement <1 x i8> poison, i8 %70, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %95, <1 x i8> %96, i1 true) #2, !dbg !33
  %97 = or disjoint i32 %85, 64, !dbg !33
  %98 = lshr i32 %97, 2, !dbg !33
  %99 = and i32 %98, 240, !dbg !33
  %100 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %99, !dbg !33
  %101 = getelementptr i8, ptr addrspace(3) %100, i32 %97, !dbg !33
  %102 = insertelement <1 x i8> poison, i8 %72, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %101, <1 x i8> %102, i1 true) #2, !dbg !33
  %103 = or disjoint i32 %85, 96, !dbg !33
  %104 = lshr i32 %103, 2, !dbg !33
  %105 = and i32 %104, 248, !dbg !33
  %106 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %105, !dbg !33
  %107 = getelementptr i8, ptr addrspace(3) %106, i32 %103, !dbg !33
  %108 = insertelement <1 x i8> poison, i8 %74, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %107, <1 x i8> %108, i1 true) #2, !dbg !33
  %109 = or disjoint i32 %85, 16, !dbg !33
  %110 = getelementptr i8, ptr addrspace(3) %88, i32 %109, !dbg !33
  %111 = insertelement <1 x i8> poison, i8 %76, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %110, <1 x i8> %111, i1 true) #2, !dbg !33
  %112 = or disjoint i32 %85, 48, !dbg !33
  %113 = lshr i32 %112, 2, !dbg !33
  %114 = and i32 %113, 232, !dbg !33
  %115 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %114, !dbg !33
  %116 = getelementptr i8, ptr addrspace(3) %115, i32 %112, !dbg !33
  %117 = insertelement <1 x i8> poison, i8 %78, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %116, <1 x i8> %117, i1 true) #2, !dbg !33
  %118 = or disjoint i32 %85, 80, !dbg !33
  %119 = lshr i32 %118, 2, !dbg !33
  %120 = and i32 %119, 240, !dbg !33
  %121 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %120, !dbg !33
  %122 = getelementptr i8, ptr addrspace(3) %121, i32 %118, !dbg !33
  %123 = insertelement <1 x i8> poison, i8 %80, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %122, <1 x i8> %123, i1 true) #2, !dbg !33
  %124 = or disjoint i32 %85, 112, !dbg !33
  %125 = lshr i32 %124, 2, !dbg !33
  %126 = and i32 %125, 248, !dbg !33
  %127 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %126, !dbg !33
  %128 = getelementptr i8, ptr addrspace(3) %127, i32 %124, !dbg !33
  %129 = insertelement <1 x i8> poison, i8 %82, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %128, <1 x i8> %129, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %130 = lshr exact i32 %10, 2, !dbg !33
  %131 = and i32 %130, 248, !dbg !33
  %132 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %131, !dbg !33
  %133 = getelementptr inbounds i8, ptr addrspace(3) %132, i32 %86, !dbg !33
  %134 = load <2 x i32>, ptr addrspace(3) %133, align 8, !dbg !33
  %135 = bitcast <2 x i32> %134 to <64 x i1>, !dbg !33
  %136 = extractelement <64 x i1> %135, i64 24, !dbg !33
  %137 = extractelement <64 x i1> %135, i64 56, !dbg !33
  %138 = bitcast <2 x i32> %134 to <8 x i8>, !dbg !33
  %139 = extractelement <8 x i8> %138, i64 0, !dbg !33
  %140 = and i8 %139, 1, !dbg !33
  %141 = shufflevector <8 x i8> %138, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !33
  %142 = and <2 x i8> %141, splat (i8 1), !dbg !33
  %143 = zext i1 %136 to i8, !dbg !33
  %144 = extractelement <8 x i8> %138, i64 4, !dbg !33
  %145 = and i8 %144, 1, !dbg !33
  %146 = shufflevector <8 x i8> %138, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !33
  %147 = and <2 x i8> %146, splat (i8 1), !dbg !33
  %148 = zext i1 %137 to i8, !dbg !33
  %149 = insertelement <4 x i8> poison, i8 %140, i64 0, !dbg !33
  %150 = shufflevector <2 x i8> %142, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !33
  %151 = shufflevector <4 x i8> %149, <4 x i8> %150, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !33
  %152 = insertelement <4 x i8> %151, i8 %143, i64 3, !dbg !33
  %153 = bitcast <4 x i8> %152 to i32, !dbg !33
  %154 = insertelement <4 x i8> poison, i8 %145, i64 0, !dbg !33
  %155 = shufflevector <2 x i8> %147, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !33
  %156 = shufflevector <4 x i8> %154, <4 x i8> %155, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !33
  %157 = insertelement <4 x i8> %156, i8 %148, i64 3, !dbg !33
  %158 = bitcast <4 x i8> %157 to i32, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %153, i32 %158, ptr addrspace(1) %66, i1 %40) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdfdp4l4gt6fyvspydc2a5hmmxufdaxkjhdj7epe2oxvzobokd46.py", directory: "inductor_cache/df")
!4 = !{ptr @triton_poi_fused_leaky_relu_backward_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_backward_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_backward_36", linkageName: "triton_poi_fused_leaky_relu_backward_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 44, scope: !7)
!31 = !DILocation(line: 35, column: 39, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 55, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
