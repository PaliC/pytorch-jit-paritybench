; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 8, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = and i32 %15, 60, !dbg !17
  %23 = or disjoint i32 %21, %22, !dbg !18
  %24 = icmp slt i32 %23, 2048, !dbg !19
  %25 = sdiv i32 %16, 4, !dbg !20
  %26 = sdiv i32 %17, 4, !dbg !20
  %27 = shl i32 %16, 11, !dbg !21
  %28 = shl i32 %17, 11, !dbg !21
  %29 = add i32 %23, %27, !dbg !22
  %30 = add i32 %23, %28, !dbg !22
  %31 = sext i32 %29 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = and i1 %18, %24, !dbg !24
  %36 = and i1 %19, %24, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %35) #4, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %36) #4, !dbg !25
  %39 = shl i32 %25, 5, !dbg !26
  %40 = shl i32 %26, 5, !dbg !26
  %41 = sdiv i32 %23, 64, !dbg !27
  %42 = add i32 %39, %41, !dbg !28
  %43 = add i32 %41, %40, !dbg !28
  %44 = sext i32 %42 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !29
  %46 = sext i32 %43 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %35) #4, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %35) #4, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %35) #4, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %35) #4, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %36) #4, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %36) #4, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %36) #4, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %36) #4, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %35) #4, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %35) #4, !dbg !32
  %61 = bitcast i32 %60 to float, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %35) #4, !dbg !32
  %63 = bitcast i32 %62 to float, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %35) #4, !dbg !32
  %65 = bitcast i32 %64 to float, !dbg !32
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !32
  %73 = bitcast i32 %72 to float, !dbg !32
  %74 = sext i32 %23 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !33
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %24) #4, !dbg !34
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !35
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %24) #4, !dbg !36
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !37
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %35) #4, !dbg !38
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %36) #4, !dbg !38
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 2.560000e+02) #4, !dbg !39
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 2.560000e+02) #4, !dbg !39
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 2.560000e+02) #4, !dbg !39
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 2.560000e+02) #4, !dbg !39
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float 2.560000e+02) #4, !dbg !39
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 2.560000e+02) #4, !dbg !39
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 2.560000e+02) #4, !dbg !39
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 2.560000e+02) #4, !dbg !39
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !40
  %92 = fadd float %84, 0x3EE4F8B580000000, !dbg !40
  %93 = fadd float %85, 0x3EE4F8B580000000, !dbg !40
  %94 = fadd float %86, 0x3EE4F8B580000000, !dbg !40
  %95 = fadd float %87, 0x3EE4F8B580000000, !dbg !40
  %96 = fadd float %88, 0x3EE4F8B580000000, !dbg !40
  %97 = fadd float %89, 0x3EE4F8B580000000, !dbg !40
  %98 = fadd float %90, 0x3EE4F8B580000000, !dbg !40
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %99, 0, !dbg !41
  br i1 %.not.i, label %102, label %100, !dbg !41

100:                                              ; preds = %9
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

102:                                              ; preds = %9
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %100, %102
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], !dbg !41
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i18 = icmp eq i32 %104, 0, !dbg !41
  br i1 %.not.i18, label %107, label %105, !dbg !41

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !41
  br label %__nv_rsqrtf.exit20, !dbg !41

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !41
  br label %__nv_rsqrtf.exit20, !dbg !41

__nv_rsqrtf.exit20:                               ; preds = %105, %107
  %.0.i19 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !41
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i21 = icmp eq i32 %109, 0, !dbg !41
  br i1 %.not.i21, label %112, label %110, !dbg !41

110:                                              ; preds = %__nv_rsqrtf.exit20
  %111 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !41
  br label %__nv_rsqrtf.exit23, !dbg !41

112:                                              ; preds = %__nv_rsqrtf.exit20
  %113 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !41
  br label %__nv_rsqrtf.exit23, !dbg !41

__nv_rsqrtf.exit23:                               ; preds = %110, %112
  %.0.i22 = phi float [ %111, %110 ], [ %113, %112 ], !dbg !41
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i24 = icmp eq i32 %114, 0, !dbg !41
  br i1 %.not.i24, label %117, label %115, !dbg !41

115:                                              ; preds = %__nv_rsqrtf.exit23
  %116 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

117:                                              ; preds = %__nv_rsqrtf.exit23
  %118 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

__nv_rsqrtf.exit26:                               ; preds = %115, %117
  %.0.i25 = phi float [ %116, %115 ], [ %118, %117 ], !dbg !41
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i27 = icmp eq i32 %119, 0, !dbg !41
  br i1 %.not.i27, label %122, label %120, !dbg !41

120:                                              ; preds = %__nv_rsqrtf.exit26
  %121 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !41
  br label %__nv_rsqrtf.exit29, !dbg !41

122:                                              ; preds = %__nv_rsqrtf.exit26
  %123 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !41
  br label %__nv_rsqrtf.exit29, !dbg !41

__nv_rsqrtf.exit29:                               ; preds = %120, %122
  %.0.i28 = phi float [ %121, %120 ], [ %123, %122 ], !dbg !41
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i30 = icmp eq i32 %124, 0, !dbg !41
  br i1 %.not.i30, label %127, label %125, !dbg !41

125:                                              ; preds = %__nv_rsqrtf.exit29
  %126 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %96), !dbg !41
  br label %__nv_rsqrtf.exit32, !dbg !41

127:                                              ; preds = %__nv_rsqrtf.exit29
  %128 = tail call float @llvm.nvvm.rsqrt.approx.f(float %96), !dbg !41
  br label %__nv_rsqrtf.exit32, !dbg !41

__nv_rsqrtf.exit32:                               ; preds = %125, %127
  %.0.i31 = phi float [ %126, %125 ], [ %128, %127 ], !dbg !41
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i33 = icmp eq i32 %129, 0, !dbg !41
  br i1 %.not.i33, label %132, label %130, !dbg !41

130:                                              ; preds = %__nv_rsqrtf.exit32
  %131 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %97), !dbg !41
  br label %__nv_rsqrtf.exit35, !dbg !41

132:                                              ; preds = %__nv_rsqrtf.exit32
  %133 = tail call float @llvm.nvvm.rsqrt.approx.f(float %97), !dbg !41
  br label %__nv_rsqrtf.exit35, !dbg !41

__nv_rsqrtf.exit35:                               ; preds = %130, %132
  %.0.i34 = phi float [ %131, %130 ], [ %133, %132 ], !dbg !41
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i36 = icmp eq i32 %134, 0, !dbg !41
  br i1 %.not.i36, label %137, label %135, !dbg !41

135:                                              ; preds = %__nv_rsqrtf.exit35
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !41
  br label %__nv_rsqrtf.exit38, !dbg !41

137:                                              ; preds = %__nv_rsqrtf.exit35
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !41
  br label %__nv_rsqrtf.exit38, !dbg !41

__nv_rsqrtf.exit38:                               ; preds = %135, %137
  %.0.i37 = phi float [ %136, %135 ], [ %138, %137 ], !dbg !41
  %139 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %140 = insertelement <8 x i32> poison, i32 %55, i64 0, !dbg !30
  %141 = insertelement <8 x i32> %140, i32 %54, i64 1, !dbg !30
  %142 = insertelement <8 x i32> %141, i32 %53, i64 2, !dbg !30
  %143 = insertelement <8 x i32> %142, i32 %52, i64 3, !dbg !30
  %144 = insertelement <8 x i32> %143, i32 %51, i64 4, !dbg !30
  %145 = insertelement <8 x i32> %144, i32 %50, i64 5, !dbg !30
  %146 = insertelement <8 x i32> %145, i32 %49, i64 6, !dbg !30
  %147 = insertelement <8 x i32> %146, i32 %48, i64 7, !dbg !30
  %148 = bitcast <8 x i32> %147 to <8 x float>, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %150 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %151 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %152 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %153 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %154 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %155 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %156 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !38
  %158 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !38
  %159 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !38
  %160 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !38
  %161 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !38
  %162 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !38
  %163 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !38
  %164 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !36
  %167 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !34
  %172 = lshr i32 %12, 2, !dbg !17
  %173 = and i32 %172, 31, !dbg !17
  %174 = or disjoint i32 %173, %21, !dbg !18
  %175 = or disjoint i32 %174, 32, !dbg !18
  %176 = icmp slt i32 %175, 2048, !dbg !19
  %177 = and i32 %15, 12, !dbg !12
  %178 = or disjoint i32 %11, %177, !dbg !13
  %179 = icmp slt i32 %178, 16, !dbg !14
  %180 = and i1 %179, %176, !dbg !24
  %181 = icmp slt i32 %174, 2048, !dbg !19
  %182 = and i1 %179, %181, !dbg !24
  %183 = insertelement <8 x i32> poison, i32 %139, i64 0, !dbg !25
  %184 = insertelement <8 x i32> %183, i32 %149, i64 1, !dbg !25
  %185 = insertelement <8 x i32> %184, i32 %150, i64 2, !dbg !25
  %186 = insertelement <8 x i32> %185, i32 %151, i64 3, !dbg !25
  %187 = insertelement <8 x i32> %186, i32 %152, i64 4, !dbg !25
  %188 = insertelement <8 x i32> %187, i32 %153, i64 5, !dbg !25
  %189 = insertelement <8 x i32> %188, i32 %154, i64 6, !dbg !25
  %190 = insertelement <8 x i32> %189, i32 %155, i64 7, !dbg !25
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !25
  %192 = fsub <8 x float> %191, %148, !dbg !42
  %193 = insertelement <8 x i32> poison, i32 %156, i64 0, !dbg !38
  %194 = insertelement <8 x i32> %193, i32 %157, i64 1, !dbg !38
  %195 = insertelement <8 x i32> %194, i32 %158, i64 2, !dbg !38
  %196 = insertelement <8 x i32> %195, i32 %159, i64 3, !dbg !38
  %197 = insertelement <8 x i32> %196, i32 %160, i64 4, !dbg !38
  %198 = insertelement <8 x i32> %197, i32 %161, i64 5, !dbg !38
  %199 = insertelement <8 x i32> %198, i32 %162, i64 6, !dbg !38
  %200 = insertelement <8 x i32> %199, i32 %163, i64 7, !dbg !38
  %201 = bitcast <8 x i32> %200 to <8 x float>, !dbg !38
  %202 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !36
  %203 = insertelement <4 x i32> %202, i32 %165, i64 1, !dbg !36
  %204 = insertelement <4 x i32> %203, i32 %166, i64 2, !dbg !36
  %205 = insertelement <4 x i32> %204, i32 %167, i64 3, !dbg !36
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !36
  %207 = shufflevector <4 x float> %206, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %208 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !34
  %209 = insertelement <4 x i32> %208, i32 %169, i64 1, !dbg !34
  %210 = insertelement <4 x i32> %209, i32 %170, i64 2, !dbg !34
  %211 = insertelement <4 x i32> %210, i32 %171, i64 3, !dbg !34
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !34
  %213 = shufflevector <4 x float> %212, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %214 = insertelement <8 x float> poison, float %.0.i37, i64 0, !dbg !43
  %215 = insertelement <8 x float> %214, float %.0.i34, i64 1, !dbg !43
  %216 = insertelement <8 x float> %215, float %.0.i31, i64 2, !dbg !43
  %217 = insertelement <8 x float> %216, float %.0.i28, i64 3, !dbg !43
  %218 = insertelement <8 x float> %217, float %.0.i25, i64 4, !dbg !43
  %219 = insertelement <8 x float> %218, float %.0.i22, i64 5, !dbg !43
  %220 = insertelement <8 x float> %219, float %.0.i19, i64 6, !dbg !43
  %221 = insertelement <8 x float> %220, float %.0.i, i64 7, !dbg !43
  %222 = fmul <8 x float> %192, %221, !dbg !43
  %223 = fmul <8 x float> %222, %213, !dbg !44
  %224 = fadd <8 x float> %223, %207, !dbg !45
  %225 = fadd <8 x float> %224, %201, !dbg !46
  %226 = fcmp olt <8 x float> %225, zeroinitializer, !dbg !47
  %227 = extractelement <8 x i1> %226, i64 7, !dbg !51
  %228 = extractelement <8 x float> %225, i64 7, !dbg !51
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !51
  %230 = extractelement <8 x i1> %226, i64 6, !dbg !51
  %231 = extractelement <8 x float> %225, i64 6, !dbg !51
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !51
  %233 = extractelement <8 x i1> %226, i64 5, !dbg !51
  %234 = extractelement <8 x float> %225, i64 5, !dbg !51
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !51
  %236 = extractelement <8 x i1> %226, i64 4, !dbg !51
  %237 = extractelement <8 x float> %225, i64 4, !dbg !51
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !51
  %239 = extractelement <8 x i1> %226, i64 3, !dbg !51
  %240 = extractelement <8 x float> %225, i64 3, !dbg !51
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !51
  %242 = extractelement <8 x i1> %226, i64 2, !dbg !51
  %243 = extractelement <8 x float> %225, i64 2, !dbg !51
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !51
  %245 = extractelement <8 x i1> %226, i64 1, !dbg !51
  %246 = extractelement <8 x float> %225, i64 1, !dbg !51
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !51
  %248 = extractelement <8 x i1> %226, i64 0, !dbg !51
  %249 = extractelement <8 x float> %225, i64 0, !dbg !51
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !51
  %251 = shl i32 %174, 2, !dbg !52
  %252 = shl i32 %175, 2, !dbg !52
  %253 = shl i32 %178, 11, !dbg !53
  %254 = add i32 %251, %253, !dbg !54
  %255 = add i32 %252, %253, !dbg !54
  %256 = sext i32 %254 to i64, !dbg !55
  %257 = getelementptr float, ptr addrspace(1) %6, i64 %256, !dbg !55
  %258 = sext i32 %255 to i64, !dbg !55
  %259 = getelementptr float, ptr addrspace(1) %6, i64 %258, !dbg !55
  %260 = shl i32 %12, 6, !dbg !56
  %261 = and i32 %260, 960, !dbg !56
  %262 = or disjoint i32 %261, %14, !dbg !56
  %263 = and i32 %15, 508, !dbg !56
  %264 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %261, !dbg !56
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %262, !dbg !56
  %266 = bitcast float %229 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !56
  %267 = or disjoint i32 %262, 16, !dbg !56
  %268 = lshr i32 %267, 2, !dbg !56
  %269 = and i32 %268, 244, !dbg !56
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !56
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %267, !dbg !56
  %272 = bitcast float %232 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !56
  %273 = or disjoint i32 %262, 32, !dbg !56
  %274 = lshr i32 %273, 2, !dbg !56
  %275 = and i32 %274, 248, !dbg !56
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !56
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %273, !dbg !56
  %278 = bitcast float %235 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !56
  %279 = or disjoint i32 %262, 48, !dbg !56
  %280 = lshr i32 %279, 2, !dbg !56
  %281 = and i32 %280, 252, !dbg !56
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !56
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %279, !dbg !56
  %284 = bitcast float %238 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !56
  %285 = or disjoint i32 %262, 8, !dbg !56
  %286 = getelementptr float, ptr addrspace(3) %264, i32 %285, !dbg !56
  %287 = bitcast float %241 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !56
  %288 = or disjoint i32 %262, 24, !dbg !56
  %289 = lshr i32 %288, 2, !dbg !56
  %290 = and i32 %289, 244, !dbg !56
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !56
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !56
  %293 = bitcast float %244 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !56
  %294 = or disjoint i32 %262, 40, !dbg !56
  %295 = lshr i32 %294, 2, !dbg !56
  %296 = and i32 %295, 248, !dbg !56
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !56
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %294, !dbg !56
  %299 = bitcast float %247 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !56
  %300 = or disjoint i32 %262, 56, !dbg !56
  %301 = lshr i32 %300, 2, !dbg !56
  %302 = and i32 %301, 252, !dbg !56
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !56
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %300, !dbg !56
  %305 = bitcast float %250 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %306 = and i32 %12, 124, !dbg !56
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !56
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %263, !dbg !56
  %309 = or disjoint i32 %263, 512, !dbg !56
  %310 = lshr exact i32 %309, 2, !dbg !56
  %311 = and i32 %310, 252, !dbg !56
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !56
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %309, !dbg !56
  %314 = load <4 x i32>, ptr addrspace(3) %313, align 16, !dbg !56
  %.extract = load i32, ptr addrspace(3) %308, align 16, !dbg !56
  %315 = getelementptr inbounds i8, ptr addrspace(3) %308, i32 4, !dbg !56
  %.extract11 = load i32, ptr addrspace(3) %315, align 4, !dbg !56
  %316 = getelementptr inbounds i8, ptr addrspace(3) %308, i32 8, !dbg !56
  %.extract12 = load i32, ptr addrspace(3) %316, align 8, !dbg !56
  %317 = getelementptr inbounds i8, ptr addrspace(3) %308, i32 12, !dbg !56
  %.extract13 = load i32, ptr addrspace(3) %317, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %257, i1 %182) #4, !dbg !56
  %.extract14 = extractelement <4 x i32> %314, i64 0, !dbg !56
  %.extract15 = extractelement <4 x i32> %314, i64 1, !dbg !56
  %.extract16 = extractelement <4 x i32> %314, i64 2, !dbg !56
  %.extract17 = extractelement <4 x i32> %314, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %259, i1 %180) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clzze2exvpetcgbpl5nmicwkfymckfikdninaswf5jzalrkkjzo4.py", directory: "inductor_cache/lz")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_41", linkageName: "triton_poi_fused_add_native_group_norm_relu_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 53, scope: !7)
!25 = !DILocation(line: 32, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 33, scope: !7)
!27 = !DILocation(line: 33, column: 45, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 51, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 46, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 50, column: 32, scope: !7)
!53 = !DILocation(line: 50, column: 42, scope: !7)
!54 = !DILocation(line: 50, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 25, scope: !7)
!56 = !DILocation(line: 50, column: 54, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
