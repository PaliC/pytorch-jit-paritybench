; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_add_div_mean_pow_sub_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %19 = and i32 %18, 1, !dbg !10
  %20 = zext nneg i32 %19 to i64, !dbg !11
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !11
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !12
  %23 = bitcast i32 %22 to float, !dbg !12
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !13
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !14
  %26 = bitcast i32 %25 to float, !dbg !14
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !15
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !16
  %29 = bitcast i32 %28 to float, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !17
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !18
  %32 = bitcast i32 %31 to float, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #3, !dbg !20
  %36 = bitcast i32 %35 to float, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #3, !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #3, !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !25
  %46 = bitcast i32 %45 to float, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !29
  %54 = bitcast i32 %53 to float, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !30
  %56 = bitcast i32 %55 to float, !dbg !30
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %22, i32 1, i32 31), !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = fadd float %23, %58, !dbg !35
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 1, i32 31), !dbg !37
  %61 = bitcast i32 %60 to float, !dbg !37
  %62 = fadd float %26, %61, !dbg !39
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 1, i32 31), !dbg !40
  %64 = bitcast i32 %63 to float, !dbg !40
  %65 = fadd float %29, %64, !dbg !42
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 1, i32 31), !dbg !43
  %67 = bitcast i32 %66 to float, !dbg !43
  %68 = fadd float %32, %67, !dbg !45
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float 5.242880e+05) #3, !dbg !46
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 5.242880e+05) #3, !dbg !47
  %71 = fadd float %69, %70, !dbg !48
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 2.621440e+05) #3, !dbg !49
  %73 = fadd float %71, %72, !dbg !50
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 2.621440e+05) #3, !dbg !51
  %75 = fadd float %73, %74, !dbg !52
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 1.310720e+05) #3, !dbg !53
  %77 = fadd float %75, %76, !dbg !54
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 1.310720e+05) #3, !dbg !55
  %79 = fadd float %77, %78, !dbg !56
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 1.310720e+05) #3, !dbg !57
  %81 = fadd float %79, %80, !dbg !58
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 1.310720e+05) #3, !dbg !59
  %83 = fadd float %81, %82, !dbg !60
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 6.553600e+04) #3, !dbg !61
  %85 = fadd float %83, %84, !dbg !62
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 6.553600e+04) #3, !dbg !63
  %87 = fadd float %85, %86, !dbg !64
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 6.553600e+04) #3, !dbg !65
  %89 = fadd float %87, %88, !dbg !66
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 6.553600e+04) #3, !dbg !67
  %91 = fadd float %89, %90, !dbg !68
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 1.638400e+04) #3, !dbg !69
  %93 = fadd float %91, %92, !dbg !70
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 1.638400e+04) #3, !dbg !71
  %95 = fadd float %93, %94, !dbg !72
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 1.638400e+04) #3, !dbg !73
  %97 = fadd float %95, %96, !dbg !74
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 1.638400e+04) #3, !dbg !75
  %99 = fadd float %97, %98, !dbg !76
  %100 = fmul float %99, 6.250000e-02, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %101 = and i32 %18, 63, !dbg !79
  %102 = icmp eq i32 %101, 0, !dbg !79
  %103 = bitcast float %100 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %0, i1 %102) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2agkq3ralhccjtctdirssv2iftxmjdhky3uaclbdz2ddnwzaxyz.py", directory: "inductor_cache/2a")
!4 = !{ptr @triton_per_fused_add_div_mean_pow_sub_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_pow_sub_32, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_pow_sub_32", linkageName: "triton_per_fused_add_div_mean_pow_sub_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 30, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 31, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 20, scope: !7)
!20 = !DILocation(line: 36, column: 20, scope: !7)
!21 = !DILocation(line: 38, column: 20, scope: !7)
!22 = !DILocation(line: 40, column: 20, scope: !7)
!23 = !DILocation(line: 42, column: 20, scope: !7)
!24 = !DILocation(line: 44, column: 20, scope: !7)
!25 = !DILocation(line: 46, column: 20, scope: !7)
!26 = !DILocation(line: 48, column: 20, scope: !7)
!27 = !DILocation(line: 50, column: 20, scope: !7)
!28 = !DILocation(line: 52, column: 20, scope: !7)
!29 = !DILocation(line: 54, column: 20, scope: !7)
!30 = !DILocation(line: 56, column: 20, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 59, column: 24, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !38)
!38 = !DILocation(line: 61, column: 24, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !41)
!41 = !DILocation(line: 63, column: 25, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !41)
!43 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 65, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !44)
!46 = !DILocation(line: 67, column: 20, scope: !7)
!47 = !DILocation(line: 68, column: 20, scope: !7)
!48 = !DILocation(line: 69, column: 20, scope: !7)
!49 = !DILocation(line: 71, column: 20, scope: !7)
!50 = !DILocation(line: 72, column: 20, scope: !7)
!51 = !DILocation(line: 73, column: 20, scope: !7)
!52 = !DILocation(line: 74, column: 20, scope: !7)
!53 = !DILocation(line: 76, column: 20, scope: !7)
!54 = !DILocation(line: 77, column: 20, scope: !7)
!55 = !DILocation(line: 78, column: 20, scope: !7)
!56 = !DILocation(line: 79, column: 20, scope: !7)
!57 = !DILocation(line: 80, column: 20, scope: !7)
!58 = !DILocation(line: 81, column: 20, scope: !7)
!59 = !DILocation(line: 82, column: 20, scope: !7)
!60 = !DILocation(line: 83, column: 20, scope: !7)
!61 = !DILocation(line: 85, column: 20, scope: !7)
!62 = !DILocation(line: 86, column: 20, scope: !7)
!63 = !DILocation(line: 87, column: 20, scope: !7)
!64 = !DILocation(line: 88, column: 20, scope: !7)
!65 = !DILocation(line: 89, column: 20, scope: !7)
!66 = !DILocation(line: 90, column: 20, scope: !7)
!67 = !DILocation(line: 91, column: 20, scope: !7)
!68 = !DILocation(line: 92, column: 20, scope: !7)
!69 = !DILocation(line: 94, column: 19, scope: !7)
!70 = !DILocation(line: 95, column: 20, scope: !7)
!71 = !DILocation(line: 96, column: 19, scope: !7)
!72 = !DILocation(line: 97, column: 20, scope: !7)
!73 = !DILocation(line: 98, column: 20, scope: !7)
!74 = !DILocation(line: 99, column: 20, scope: !7)
!75 = !DILocation(line: 100, column: 20, scope: !7)
!76 = !DILocation(line: 101, column: 20, scope: !7)
!77 = !DILocation(line: 103, column: 20, scope: !7)
!78 = !DILocation(line: 104, column: 4, scope: !7)
!79 = !DILocation(line: 105, column: 71, scope: !7)
!80 = !DILocation(line: 105, column: 4, scope: !7)
