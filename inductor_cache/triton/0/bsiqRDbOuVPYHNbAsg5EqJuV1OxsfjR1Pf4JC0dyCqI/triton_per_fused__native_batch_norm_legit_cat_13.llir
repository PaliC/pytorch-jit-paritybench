; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %13, 1024, !dbg !14
  %15 = shl i32 %9, 2, !dbg !15
  %16 = and i32 %15, 60, !dbg !15
  %17 = shl i32 %13, 6, !dbg !16
  %18 = or disjoint i32 %17, %16, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !19
  %26 = bitcast i32 %22 to float, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = fadd float %26, %27, !dbg !20
  %31 = fadd float %30, %28, !dbg !20
  %32 = fadd float %31, %29, !dbg !20
  %33 = select i1 %14, float %32, float 0.000000e+00, !dbg !20
  %34 = bitcast float %33 to i32, !dbg !25
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = fadd float %33, %36, !dbg !20
  %38 = bitcast float %37 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 4, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %37, %40, !dbg !20
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !20
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !20
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %51 = bitcast float %49 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %53 = load float, ptr addrspace(3) %52, align 4, !dbg !26
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 6.400000e+01) #5, !dbg !26
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 6.400000e+01) #5, !dbg !26
  %56 = fsub float %26, %55, !dbg !27
  %57 = fsub float %27, %55, !dbg !27
  %58 = fsub float %28, %55, !dbg !27
  %59 = fsub float %29, %55, !dbg !27
  %60 = fmul float %56, %56, !dbg !28
  %61 = fmul float %57, %57, !dbg !28
  %62 = fmul float %58, %58, !dbg !28
  %63 = fmul float %59, %59, !dbg !28
  %64 = fadd float %60, %61, !dbg !29
  %65 = fadd float %62, %64, !dbg !29
  %66 = fadd float %63, %65, !dbg !29
  %67 = select i1 %14, float %66, float 0.000000e+00, !dbg !29
  %68 = bitcast float %67 to i32, !dbg !31
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = fadd float %67, %70, !dbg !29
  %72 = bitcast float %71 to i32, !dbg !31
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = fadd float %71, %74, !dbg !29
  %76 = bitcast float %75 to i32, !dbg !31
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = fadd float %75, %78, !dbg !29
  %80 = bitcast float %79 to i32, !dbg !31
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !31
  %82 = bitcast i32 %81 to float, !dbg !31
  %83 = fadd float %79, %82, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %84 = bitcast float %83 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %84, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %85 = load float, ptr addrspace(3) %52, align 4, !dbg !32
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 6.400000e+01) #5, !dbg !33
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 6.400000e+01) #5, !dbg !33
  %88 = fadd float %86, 0x3EE4F8B580000000, !dbg !34
  %89 = fadd float %87, 0x3EE4F8B580000000, !dbg !34
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %90, 0, !dbg !32
  br i1 %.not.i, label %93, label %91, !dbg !32

91:                                               ; preds = %6
  %92 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %88), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

93:                                               ; preds = %6
  %94 = tail call float @llvm.nvvm.rsqrt.approx.f(float %88), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %91, %93
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], !dbg !32
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i10 = icmp eq i32 %98, 0, !dbg !32
  br i1 %.not.i10, label %101, label %99, !dbg !32

99:                                               ; preds = %__nv_rsqrtf.exit
  %100 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !32
  br label %__nv_rsqrtf.exit12, !dbg !32

101:                                              ; preds = %__nv_rsqrtf.exit
  %102 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !32
  br label %__nv_rsqrtf.exit12, !dbg !32

__nv_rsqrtf.exit12:                               ; preds = %99, %101
  %.0.i11 = phi float [ %100, %99 ], [ %102, %101 ], !dbg !32
  %.frozen = freeze i32 %13, !dbg !35
  %103 = sdiv i32 %.frozen, 256, !dbg !35
  %104 = mul i32 %103, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %104, !dbg !36
  %105 = or disjoint i32 %8, %12, !dbg !13
  %106 = icmp slt i32 %105, 1024, !dbg !14
  %107 = fmul float %56, %.0.i11, !dbg !37
  %108 = fmul float %57, %.0.i11, !dbg !37
  %109 = fmul float %58, %.0.i11, !dbg !37
  %110 = fmul float %59, %.0.i11, !dbg !37
  %111 = fcmp ogt float %107, 0.000000e+00, !dbg !38
  %112 = fcmp ogt float %108, 0.000000e+00, !dbg !38
  %113 = fcmp ogt float %109, 0.000000e+00, !dbg !38
  %114 = fcmp ogt float %110, 0.000000e+00, !dbg !38
  %115 = fmul float %107, 0x3FC99999A0000000, !dbg !39
  %116 = fmul float %108, 0x3FC99999A0000000, !dbg !39
  %117 = fmul float %109, 0x3FC99999A0000000, !dbg !39
  %118 = fmul float %110, 0x3FC99999A0000000, !dbg !39
  %119 = select i1 %111, float %107, float %115, !dbg !40
  %120 = select i1 %112, float %108, float %116, !dbg !40
  %121 = select i1 %113, float %109, float %117, !dbg !40
  %122 = select i1 %114, float %110, float %118, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %123 = sext i32 %105 to i64, !dbg !42
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !42
  %125 = and i32 %9, 120, !dbg !43
  %126 = icmp eq i32 %125, 0, !dbg !43
  %127 = bitcast float %.0.i to i32, !dbg !43
  %128 = and i1 %126, %106, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %124, i1 %128) #5, !dbg !43
  %129 = shl nsw i32 %.decomposed, 6, !dbg !44
  %130 = or disjoint i32 %129, %16, !dbg !45
  %131 = shl i32 %103, 15, !dbg !46
  %132 = add i32 %130, %131, !dbg !47
  %133 = sext i32 %132 to i64, !dbg !48
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !48
  %135 = bitcast float %119 to i32, !dbg !49
  %136 = bitcast float %120 to i32, !dbg !49
  %137 = bitcast float %121 to i32, !dbg !49
  %138 = bitcast float %122 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %135, i32 %136, i32 %137, i32 %138, ptr addrspace(1) %134, i1 %14) #5, !dbg !49
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !50
  %140 = bitcast float %54 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %139, i1 %128) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_13", linkageName: "triton_per_fused__native_batch_norm_legit_cat_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 38, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 38, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 41, column: 19, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 43, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 46, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 51, column: 28, scope: !7)
!33 = !DILocation(line: 48, column: 20, scope: !7)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 32, column: 19, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 35, scope: !7)
!41 = !DILocation(line: 59, column: 4, scope: !7)
!42 = !DILocation(line: 60, column: 28, scope: !7)
!43 = !DILocation(line: 60, column: 40, scope: !7)
!44 = !DILocation(line: 61, column: 33, scope: !7)
!45 = !DILocation(line: 61, column: 30, scope: !7)
!46 = !DILocation(line: 61, column: 44, scope: !7)
!47 = !DILocation(line: 61, column: 38, scope: !7)
!48 = !DILocation(line: 61, column: 25, scope: !7)
!49 = !DILocation(line: 61, column: 56, scope: !7)
!50 = !DILocation(line: 62, column: 25, scope: !7)
!51 = !DILocation(line: 62, column: 37, scope: !7)
!52 = !DILocation(line: 62, column: 4, scope: !7)
