; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 3, !dbg !12
  %13 = and i32 %9, 7, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %.lobit23 = lshr i32 %9, 3, !dbg !17
  %20 = and i32 %.lobit23, 3, !dbg !17
  %21 = or disjoint i32 %19, %12, !dbg !18
  %22 = or disjoint i32 %19, %20, !dbg !18
  %23 = icmp slt i32 %21, 4, !dbg !19
  %24 = icmp slt i32 %22, 4, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %25 = sdiv i32 %.frozen, 4, !dbg !20
  %26 = mul i32 %25, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %.frozen4 = freeze i32 %15, !dbg !20
  %27 = sdiv i32 %.frozen4, 4, !dbg !20
  %28 = mul i32 %27, 4, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %28, !dbg !21
  %29 = shl nsw i32 %.decomposed, 2, !dbg !22
  %30 = add i32 %29, %21, !dbg !23
  %31 = mul i32 %25, 112, !dbg !24
  %32 = add i32 %30, %31, !dbg !25
  %33 = sext i32 %32 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = and i1 %16, %23, !dbg !27
  %36 = and i1 %17, %24, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %35) #2, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = add i32 %30, 4, !dbg !29
  %40 = add i32 %39, %31, !dbg !30
  %41 = sext i32 %40 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %35) #2, !dbg !32
  %44 = bitcast i32 %43 to float, !dbg !32
  %45 = add i32 %30, 8, !dbg !33
  %46 = add i32 %45, %31, !dbg !34
  %47 = sext i32 %46 to i64, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !35
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %35) #2, !dbg !36
  %50 = bitcast i32 %49 to float, !dbg !36
  %51 = add i32 %30, 12, !dbg !37
  %52 = add i32 %51, %31, !dbg !38
  %53 = sext i32 %52 to i64, !dbg !39
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !39
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %35) #2, !dbg !40
  %56 = bitcast i32 %55 to float, !dbg !40
  %57 = add i32 %30, 16, !dbg !41
  %58 = add i32 %57, %31, !dbg !42
  %59 = sext i32 %58 to i64, !dbg !43
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !43
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %35) #2, !dbg !44
  %62 = bitcast i32 %61 to float, !dbg !44
  %63 = add i32 %30, 20, !dbg !45
  %64 = add i32 %63, %31, !dbg !46
  %65 = sext i32 %64 to i64, !dbg !47
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !47
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %35) #2, !dbg !48
  %68 = bitcast i32 %67 to float, !dbg !48
  %69 = add i32 %30, 24, !dbg !49
  %70 = add i32 %69, %31, !dbg !50
  %71 = sext i32 %70 to i64, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !51
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %35) #2, !dbg !52
  %74 = bitcast i32 %73 to float, !dbg !52
  %75 = add i32 %30, 28, !dbg !53
  %76 = add i32 %75, %31, !dbg !54
  %77 = sext i32 %76 to i64, !dbg !55
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !55
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %35) #2, !dbg !56
  %80 = bitcast i32 %79 to float, !dbg !56
  %81 = add i32 %30, 32, !dbg !57
  %82 = add i32 %81, %31, !dbg !58
  %83 = sext i32 %82 to i64, !dbg !59
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !59
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %35) #2, !dbg !60
  %86 = bitcast i32 %85 to float, !dbg !60
  %87 = add i32 %30, 36, !dbg !61
  %88 = add i32 %87, %31, !dbg !62
  %89 = sext i32 %88 to i64, !dbg !63
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !63
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %35) #2, !dbg !64
  %92 = bitcast i32 %91 to float, !dbg !64
  %93 = add i32 %30, 40, !dbg !65
  %94 = add i32 %93, %31, !dbg !66
  %95 = sext i32 %94 to i64, !dbg !67
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !67
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %35) #2, !dbg !68
  %98 = bitcast i32 %97 to float, !dbg !68
  %99 = add i32 %30, 44, !dbg !69
  %100 = add i32 %99, %31, !dbg !70
  %101 = sext i32 %100 to i64, !dbg !71
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !71
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %35) #2, !dbg !72
  %104 = bitcast i32 %103 to float, !dbg !72
  %105 = add i32 %30, 48, !dbg !73
  %106 = add i32 %105, %31, !dbg !74
  %107 = sext i32 %106 to i64, !dbg !75
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !75
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %35) #2, !dbg !76
  %110 = bitcast i32 %109 to float, !dbg !76
  %111 = add i32 %30, 52, !dbg !77
  %112 = add i32 %111, %31, !dbg !78
  %113 = sext i32 %112 to i64, !dbg !79
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !79
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %35) #2, !dbg !80
  %116 = bitcast i32 %115 to float, !dbg !80
  %117 = add i32 %30, 56, !dbg !81
  %118 = add i32 %117, %31, !dbg !82
  %119 = sext i32 %118 to i64, !dbg !83
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !83
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %35) #2, !dbg !84
  %122 = bitcast i32 %121 to float, !dbg !84
  %123 = add i32 %30, 60, !dbg !85
  %124 = add i32 %123, %31, !dbg !86
  %125 = sext i32 %124 to i64, !dbg !87
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !87
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %35) #2, !dbg !88
  %128 = bitcast i32 %127 to float, !dbg !88
  %129 = add i32 %30, 64, !dbg !89
  %130 = add i32 %129, %31, !dbg !90
  %131 = sext i32 %130 to i64, !dbg !91
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !91
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %35) #2, !dbg !92
  %134 = bitcast i32 %133 to float, !dbg !92
  %135 = add i32 %30, 68, !dbg !93
  %136 = add i32 %135, %31, !dbg !94
  %137 = sext i32 %136 to i64, !dbg !95
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !95
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %35) #2, !dbg !96
  %140 = bitcast i32 %139 to float, !dbg !96
  %141 = add i32 %30, 72, !dbg !97
  %142 = add i32 %141, %31, !dbg !98
  %143 = sext i32 %142 to i64, !dbg !99
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !99
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %35) #2, !dbg !100
  %146 = bitcast i32 %145 to float, !dbg !100
  %147 = add i32 %30, 76, !dbg !101
  %148 = add i32 %147, %31, !dbg !102
  %149 = sext i32 %148 to i64, !dbg !103
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !103
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %35) #2, !dbg !104
  %152 = bitcast i32 %151 to float, !dbg !104
  %153 = add i32 %30, 80, !dbg !105
  %154 = add i32 %153, %31, !dbg !106
  %155 = sext i32 %154 to i64, !dbg !107
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !107
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %35) #2, !dbg !108
  %158 = bitcast i32 %157 to float, !dbg !108
  %159 = add i32 %30, 84, !dbg !109
  %160 = add i32 %159, %31, !dbg !110
  %161 = sext i32 %160 to i64, !dbg !111
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !111
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %35) #2, !dbg !112
  %164 = bitcast i32 %163 to float, !dbg !112
  %165 = add i32 %30, 88, !dbg !113
  %166 = add i32 %165, %31, !dbg !114
  %167 = sext i32 %166 to i64, !dbg !115
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !115
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %35) #2, !dbg !116
  %170 = bitcast i32 %169 to float, !dbg !116
  %171 = add i32 %30, 92, !dbg !117
  %172 = add i32 %171, %31, !dbg !118
  %173 = sext i32 %172 to i64, !dbg !119
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !119
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %35) #2, !dbg !120
  %176 = bitcast i32 %175 to float, !dbg !120
  %177 = add i32 %30, 96, !dbg !121
  %178 = add i32 %177, %31, !dbg !122
  %179 = sext i32 %178 to i64, !dbg !123
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !123
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %35) #2, !dbg !124
  %182 = bitcast i32 %181 to float, !dbg !124
  %183 = shl i32 %14, 2, !dbg !125
  %184 = add i32 %21, %183, !dbg !126
  %185 = sext i32 %184 to i64, !dbg !127
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !127
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %35) #2, !dbg !128
  %188 = bitcast i32 %187 to float, !dbg !128
  %189 = fadd float %38, %44, !dbg !129
  %190 = fadd float %189, %50, !dbg !130
  %191 = fadd float %190, %56, !dbg !131
  %192 = fadd float %191, %62, !dbg !132
  %193 = fadd float %192, %68, !dbg !133
  %194 = fadd float %193, %74, !dbg !134
  %195 = fadd float %194, %80, !dbg !135
  %196 = fadd float %195, %86, !dbg !136
  %197 = fadd float %196, %92, !dbg !137
  %198 = fadd float %197, %98, !dbg !138
  %199 = fadd float %198, %104, !dbg !139
  %200 = fadd float %199, %110, !dbg !140
  %201 = fadd float %200, %116, !dbg !141
  %202 = fadd float %201, %122, !dbg !142
  %203 = fadd float %202, %128, !dbg !143
  %204 = fadd float %203, %134, !dbg !144
  %205 = fadd float %204, %140, !dbg !145
  %206 = fadd float %205, %146, !dbg !146
  %207 = fadd float %206, %152, !dbg !147
  %208 = fadd float %207, %158, !dbg !148
  %209 = fadd float %208, %164, !dbg !149
  %210 = fadd float %209, %170, !dbg !150
  %211 = fadd float %210, %176, !dbg !151
  %212 = fadd float %211, %182, !dbg !152
  %213 = fmul float %212, 0x3FA47AE140000000, !dbg !153
  %214 = fsub float %188, %213, !dbg !154
  %215 = shl i32 %22, 2, !dbg !155
  %216 = add i32 %215, %.decomposed5, !dbg !156
  %217 = shl i32 %27, 4, !dbg !157
  %218 = add i32 %216, %217, !dbg !158
  %219 = sext i32 %218 to i64, !dbg !159
  %220 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !159
  %221 = shl i32 %9, 3, !dbg !160
  %222 = and i32 %221, 24, !dbg !160
  %223 = or disjoint i32 %222, %11, !dbg !160
  %224 = and i32 %9, 31, !dbg !160
  %225 = lshr exact i32 %222, 1, !dbg !160
  %226 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %225, !dbg !160
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %223, !dbg !160
  %228 = bitcast float %213 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %229 = lshr i32 %224, 3, !dbg !160
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !160
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %224, !dbg !160
  %232 = load i32, ptr addrspace(3) %231, align 4, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %232, ptr addrspace(1) %220, i1 %36) #2, !dbg !160
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %185, !dbg !161
  %234 = bitcast float %214 to i32, !dbg !162
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %233, i1 %35) #2, !dbg !162
  ret void, !dbg !163
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccvw4kt2kc6ilhttn7kdkz3vbvweu2sdss6g4o46skvyoos5tfax.py", directory: "inductor_cache/cv")
!4 = !{ptr @triton_poi_fused_avg_pool2d_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_sub_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_sub_1", linkageName: "triton_poi_fused_avg_pool2d_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 46, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 55, scope: !7)
!33 = !DILocation(line: 34, column: 39, scope: !7)
!34 = !DILocation(line: 34, column: 46, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 55, scope: !7)
!37 = !DILocation(line: 35, column: 40, scope: !7)
!38 = !DILocation(line: 35, column: 47, scope: !7)
!39 = !DILocation(line: 35, column: 30, scope: !7)
!40 = !DILocation(line: 35, column: 56, scope: !7)
!41 = !DILocation(line: 36, column: 40, scope: !7)
!42 = !DILocation(line: 36, column: 47, scope: !7)
!43 = !DILocation(line: 36, column: 30, scope: !7)
!44 = !DILocation(line: 36, column: 56, scope: !7)
!45 = !DILocation(line: 37, column: 40, scope: !7)
!46 = !DILocation(line: 37, column: 47, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 56, scope: !7)
!49 = !DILocation(line: 38, column: 41, scope: !7)
!50 = !DILocation(line: 38, column: 48, scope: !7)
!51 = !DILocation(line: 38, column: 31, scope: !7)
!52 = !DILocation(line: 38, column: 57, scope: !7)
!53 = !DILocation(line: 39, column: 41, scope: !7)
!54 = !DILocation(line: 39, column: 48, scope: !7)
!55 = !DILocation(line: 39, column: 31, scope: !7)
!56 = !DILocation(line: 39, column: 57, scope: !7)
!57 = !DILocation(line: 40, column: 41, scope: !7)
!58 = !DILocation(line: 40, column: 48, scope: !7)
!59 = !DILocation(line: 40, column: 31, scope: !7)
!60 = !DILocation(line: 40, column: 57, scope: !7)
!61 = !DILocation(line: 41, column: 41, scope: !7)
!62 = !DILocation(line: 41, column: 48, scope: !7)
!63 = !DILocation(line: 41, column: 31, scope: !7)
!64 = !DILocation(line: 41, column: 57, scope: !7)
!65 = !DILocation(line: 42, column: 41, scope: !7)
!66 = !DILocation(line: 42, column: 48, scope: !7)
!67 = !DILocation(line: 42, column: 31, scope: !7)
!68 = !DILocation(line: 42, column: 57, scope: !7)
!69 = !DILocation(line: 43, column: 41, scope: !7)
!70 = !DILocation(line: 43, column: 48, scope: !7)
!71 = !DILocation(line: 43, column: 31, scope: !7)
!72 = !DILocation(line: 43, column: 57, scope: !7)
!73 = !DILocation(line: 44, column: 41, scope: !7)
!74 = !DILocation(line: 44, column: 48, scope: !7)
!75 = !DILocation(line: 44, column: 31, scope: !7)
!76 = !DILocation(line: 44, column: 57, scope: !7)
!77 = !DILocation(line: 45, column: 41, scope: !7)
!78 = !DILocation(line: 45, column: 48, scope: !7)
!79 = !DILocation(line: 45, column: 31, scope: !7)
!80 = !DILocation(line: 45, column: 57, scope: !7)
!81 = !DILocation(line: 46, column: 41, scope: !7)
!82 = !DILocation(line: 46, column: 48, scope: !7)
!83 = !DILocation(line: 46, column: 31, scope: !7)
!84 = !DILocation(line: 46, column: 57, scope: !7)
!85 = !DILocation(line: 47, column: 41, scope: !7)
!86 = !DILocation(line: 47, column: 48, scope: !7)
!87 = !DILocation(line: 47, column: 31, scope: !7)
!88 = !DILocation(line: 47, column: 57, scope: !7)
!89 = !DILocation(line: 48, column: 41, scope: !7)
!90 = !DILocation(line: 48, column: 48, scope: !7)
!91 = !DILocation(line: 48, column: 31, scope: !7)
!92 = !DILocation(line: 48, column: 57, scope: !7)
!93 = !DILocation(line: 49, column: 41, scope: !7)
!94 = !DILocation(line: 49, column: 48, scope: !7)
!95 = !DILocation(line: 49, column: 31, scope: !7)
!96 = !DILocation(line: 49, column: 57, scope: !7)
!97 = !DILocation(line: 50, column: 41, scope: !7)
!98 = !DILocation(line: 50, column: 48, scope: !7)
!99 = !DILocation(line: 50, column: 31, scope: !7)
!100 = !DILocation(line: 50, column: 57, scope: !7)
!101 = !DILocation(line: 51, column: 41, scope: !7)
!102 = !DILocation(line: 51, column: 48, scope: !7)
!103 = !DILocation(line: 51, column: 31, scope: !7)
!104 = !DILocation(line: 51, column: 57, scope: !7)
!105 = !DILocation(line: 52, column: 41, scope: !7)
!106 = !DILocation(line: 52, column: 48, scope: !7)
!107 = !DILocation(line: 52, column: 31, scope: !7)
!108 = !DILocation(line: 52, column: 57, scope: !7)
!109 = !DILocation(line: 53, column: 41, scope: !7)
!110 = !DILocation(line: 53, column: 48, scope: !7)
!111 = !DILocation(line: 53, column: 31, scope: !7)
!112 = !DILocation(line: 53, column: 57, scope: !7)
!113 = !DILocation(line: 54, column: 41, scope: !7)
!114 = !DILocation(line: 54, column: 48, scope: !7)
!115 = !DILocation(line: 54, column: 31, scope: !7)
!116 = !DILocation(line: 54, column: 57, scope: !7)
!117 = !DILocation(line: 55, column: 41, scope: !7)
!118 = !DILocation(line: 55, column: 48, scope: !7)
!119 = !DILocation(line: 55, column: 31, scope: !7)
!120 = !DILocation(line: 55, column: 57, scope: !7)
!121 = !DILocation(line: 56, column: 41, scope: !7)
!122 = !DILocation(line: 56, column: 48, scope: !7)
!123 = !DILocation(line: 56, column: 31, scope: !7)
!124 = !DILocation(line: 56, column: 57, scope: !7)
!125 = !DILocation(line: 57, column: 38, scope: !7)
!126 = !DILocation(line: 57, column: 36, scope: !7)
!127 = !DILocation(line: 57, column: 31, scope: !7)
!128 = !DILocation(line: 57, column: 43, scope: !7)
!129 = !DILocation(line: 58, column: 18, scope: !7)
!130 = !DILocation(line: 59, column: 18, scope: !7)
!131 = !DILocation(line: 60, column: 18, scope: !7)
!132 = !DILocation(line: 61, column: 18, scope: !7)
!133 = !DILocation(line: 62, column: 19, scope: !7)
!134 = !DILocation(line: 63, column: 20, scope: !7)
!135 = !DILocation(line: 64, column: 20, scope: !7)
!136 = !DILocation(line: 65, column: 20, scope: !7)
!137 = !DILocation(line: 66, column: 20, scope: !7)
!138 = !DILocation(line: 67, column: 20, scope: !7)
!139 = !DILocation(line: 68, column: 20, scope: !7)
!140 = !DILocation(line: 69, column: 20, scope: !7)
!141 = !DILocation(line: 70, column: 20, scope: !7)
!142 = !DILocation(line: 71, column: 20, scope: !7)
!143 = !DILocation(line: 72, column: 20, scope: !7)
!144 = !DILocation(line: 73, column: 20, scope: !7)
!145 = !DILocation(line: 74, column: 20, scope: !7)
!146 = !DILocation(line: 75, column: 20, scope: !7)
!147 = !DILocation(line: 76, column: 20, scope: !7)
!148 = !DILocation(line: 77, column: 20, scope: !7)
!149 = !DILocation(line: 78, column: 20, scope: !7)
!150 = !DILocation(line: 79, column: 20, scope: !7)
!151 = !DILocation(line: 80, column: 20, scope: !7)
!152 = !DILocation(line: 81, column: 20, scope: !7)
!153 = !DILocation(line: 83, column: 20, scope: !7)
!154 = !DILocation(line: 84, column: 20, scope: !7)
!155 = !DILocation(line: 85, column: 32, scope: !7)
!156 = !DILocation(line: 85, column: 30, scope: !7)
!157 = !DILocation(line: 85, column: 40, scope: !7)
!158 = !DILocation(line: 85, column: 37, scope: !7)
!159 = !DILocation(line: 85, column: 25, scope: !7)
!160 = !DILocation(line: 85, column: 52, scope: !7)
!161 = !DILocation(line: 86, column: 25, scope: !7)
!162 = !DILocation(line: 86, column: 44, scope: !7)
!163 = !DILocation(line: 86, column: 4, scope: !7)
