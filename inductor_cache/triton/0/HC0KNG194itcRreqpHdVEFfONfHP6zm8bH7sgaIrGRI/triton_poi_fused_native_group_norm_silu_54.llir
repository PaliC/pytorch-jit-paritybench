; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_native_group_norm_silu_54(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = sdiv i32 %15, 256, !dbg !14
  %18 = srem i32 %16, 256, !dbg !15
  %19 = srem i32 %17, 256, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %29 = bitcast i32 %25 to float, !dbg !17
  %30 = bitcast i32 %26 to float, !dbg !17
  %31 = bitcast i32 %27 to float, !dbg !17
  %32 = bitcast i32 %28 to float, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %38 = bitcast i32 %34 to float, !dbg !17
  %39 = bitcast i32 %35 to float, !dbg !17
  %40 = bitcast i32 %36 to float, !dbg !17
  %41 = bitcast i32 %37 to float, !dbg !17
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !19
  %49 = bitcast i32 %45 to float, !dbg !19
  %50 = bitcast i32 %46 to float, !dbg !19
  %51 = bitcast i32 %47 to float, !dbg !19
  %52 = bitcast i32 %48 to float, !dbg !19
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !19
  %58 = bitcast i32 %54 to float, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = bitcast i32 %56 to float, !dbg !19
  %61 = bitcast i32 %57 to float, !dbg !19
  %62 = sdiv i32 %14, 2048, !dbg !20
  %63 = sdiv i32 %15, 2048, !dbg !20
  %64 = sext i32 %62 to i64, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !21
  %66 = sext i32 %63 to i64, !dbg !21
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !21
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !22
  %75 = bitcast i32 %74 to float, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !22
  %77 = bitcast i32 %76 to float, !dbg !22
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !22
  %79 = bitcast i32 %78 to float, !dbg !22
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !22
  %81 = bitcast i32 %80 to float, !dbg !22
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !22
  %83 = bitcast i32 %82 to float, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !23
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !23
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %89 = bitcast i32 %88 to float, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %93 = bitcast i32 %92 to float, !dbg !24
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !24
  %95 = bitcast i32 %94 to float, !dbg !24
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !24
  %97 = bitcast i32 %96 to float, !dbg !24
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !24
  %99 = bitcast i32 %98 to float, !dbg !24
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !24
  %101 = bitcast i32 %100 to float, !dbg !24
  %102 = sext i32 %18 to i64, !dbg !25
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !25
  %104 = sext i32 %19 to i64, !dbg !25
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %104, !dbg !25
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !26
  %109 = bitcast i32 %108 to float, !dbg !26
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !26
  %115 = bitcast i32 %114 to float, !dbg !26
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %102, !dbg !27
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %104, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !28
  %127 = bitcast i32 %126 to float, !dbg !28
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !28
  %135 = bitcast i32 %134 to float, !dbg !28
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !28
  %137 = bitcast i32 %136 to float, !dbg !28
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !28
  %139 = bitcast i32 %138 to float, !dbg !28
  %140 = fadd float %29, %49, !dbg !29
  %141 = fadd float %30, %50, !dbg !29
  %142 = fadd float %31, %51, !dbg !29
  %143 = fadd float %32, %52, !dbg !29
  %144 = fadd float %38, %58, !dbg !29
  %145 = fadd float %39, %59, !dbg !29
  %146 = fadd float %40, %60, !dbg !29
  %147 = fadd float %41, %61, !dbg !29
  %148 = fsub float %140, %69, !dbg !30
  %149 = fsub float %141, %71, !dbg !30
  %150 = fsub float %142, %73, !dbg !30
  %151 = fsub float %143, %75, !dbg !30
  %152 = fsub float %144, %77, !dbg !30
  %153 = fsub float %145, %79, !dbg !30
  %154 = fsub float %146, %81, !dbg !30
  %155 = fsub float %147, %83, !dbg !30
  %156 = fmul float %148, %87, !dbg !31
  %157 = fmul float %149, %89, !dbg !31
  %158 = fmul float %150, %91, !dbg !31
  %159 = fmul float %151, %93, !dbg !31
  %160 = fmul float %152, %95, !dbg !31
  %161 = fmul float %153, %97, !dbg !31
  %162 = fmul float %154, %99, !dbg !31
  %163 = fmul float %155, %101, !dbg !31
  %164 = fmul float %156, %107, !dbg !32
  %165 = fmul float %157, %109, !dbg !32
  %166 = fmul float %158, %111, !dbg !32
  %167 = fmul float %159, %113, !dbg !32
  %168 = fmul float %160, %115, !dbg !32
  %169 = fmul float %161, %117, !dbg !32
  %170 = fmul float %162, %119, !dbg !32
  %171 = fmul float %163, %121, !dbg !32
  %172 = fadd float %164, %125, !dbg !33
  %173 = fadd float %165, %127, !dbg !33
  %174 = fadd float %166, %129, !dbg !33
  %175 = fadd float %167, %131, !dbg !33
  %176 = fadd float %168, %133, !dbg !33
  %177 = fadd float %169, %135, !dbg !33
  %178 = fadd float %170, %137, !dbg !33
  %179 = fadd float %171, %139, !dbg !33
  %180 = fsub float 0.000000e+00, %172, !dbg !34
  %181 = fsub float 0.000000e+00, %173, !dbg !34
  %182 = fsub float 0.000000e+00, %174, !dbg !34
  %183 = fsub float 0.000000e+00, %175, !dbg !34
  %184 = fsub float 0.000000e+00, %176, !dbg !34
  %185 = fsub float 0.000000e+00, %177, !dbg !34
  %186 = fsub float 0.000000e+00, %178, !dbg !34
  %187 = fsub float 0.000000e+00, %179, !dbg !34
  %188 = fmul float %180, 0x3FF7154760000000, !dbg !38
  %189 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %188) #1, !dbg !38
  %190 = fmul float %181, 0x3FF7154760000000, !dbg !38
  %191 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %190) #1, !dbg !38
  %192 = fmul float %182, 0x3FF7154760000000, !dbg !38
  %193 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %192) #1, !dbg !38
  %194 = fmul float %183, 0x3FF7154760000000, !dbg !38
  %195 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %194) #1, !dbg !38
  %196 = fmul float %184, 0x3FF7154760000000, !dbg !38
  %197 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %196) #1, !dbg !38
  %198 = fmul float %185, 0x3FF7154760000000, !dbg !38
  %199 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %198) #1, !dbg !38
  %200 = fmul float %186, 0x3FF7154760000000, !dbg !38
  %201 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %200) #1, !dbg !38
  %202 = fmul float %187, 0x3FF7154760000000, !dbg !38
  %203 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %202) #1, !dbg !38
  %204 = fadd float %189, 1.000000e+00, !dbg !39
  %205 = fadd float %191, 1.000000e+00, !dbg !39
  %206 = fadd float %193, 1.000000e+00, !dbg !39
  %207 = fadd float %195, 1.000000e+00, !dbg !39
  %208 = fadd float %197, 1.000000e+00, !dbg !39
  %209 = fadd float %199, 1.000000e+00, !dbg !39
  %210 = fadd float %201, 1.000000e+00, !dbg !39
  %211 = fadd float %203, 1.000000e+00, !dbg !39
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %204) #1, !dbg !40
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %205) #1, !dbg !40
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %206) #1, !dbg !40
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %207) #1, !dbg !40
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %208) #1, !dbg !40
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %209) #1, !dbg !40
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %210) #1, !dbg !40
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %211) #1, !dbg !40
  %220 = fmul float %172, %212, !dbg !41
  %221 = fmul float %173, %213, !dbg !41
  %222 = fmul float %174, %214, !dbg !41
  %223 = fmul float %175, %215, !dbg !41
  %224 = fmul float %176, %216, !dbg !41
  %225 = fmul float %177, %217, !dbg !41
  %226 = fmul float %178, %218, !dbg !41
  %227 = fmul float %179, %219, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !42
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !42
  %230 = bitcast float %220 to i32, !dbg !43
  %231 = bitcast float %221 to i32, !dbg !43
  %232 = bitcast float %222 to i32, !dbg !43
  %233 = bitcast float %223 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %230, i32 %231, i32 %232, i32 %233, ptr addrspace(1) %228, i1 true) #1, !dbg !43
  %234 = bitcast float %224 to i32, !dbg !43
  %235 = bitcast float %225 to i32, !dbg !43
  %236 = bitcast float %226 to i32, !dbg !43
  %237 = bitcast float %227 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %235, i32 %236, i32 %237, ptr addrspace(1) %229, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuuhv354nprrwv5qesb3vp7nrf3s2niekwqnw54xomgrd3gauuaj.py", directory: "inductor_cache/uu")
!4 = !{ptr @triton_poi_fused_native_group_norm_silu_54, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_silu_54, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_silu_54", linkageName: "triton_poi_fused_native_group_norm_silu_54", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 19, scope: !7)
!34 = !DILocation(line: 47, column: 30, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 38, column: 23, scope: !7)
!38 = !DILocation(line: 47, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 47, column: 20, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 47, column: 16, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 39, column: 20, scope: !7)
!42 = !DILocation(line: 40, column: 28, scope: !7)
!43 = !DILocation(line: 40, column: 40, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
