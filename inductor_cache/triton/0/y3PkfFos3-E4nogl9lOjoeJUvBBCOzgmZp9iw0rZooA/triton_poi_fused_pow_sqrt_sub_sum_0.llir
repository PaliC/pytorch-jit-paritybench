; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pow_sqrt_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 16, !dbg !14
  %11 = shl i32 %9, 4, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %10) #3, !dbg !17
  %15 = bitcast i32 %14 to float, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !18
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %10) #3, !dbg !19
  %18 = bitcast i32 %17 to float, !dbg !19
  %19 = or disjoint i32 %11, 1, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %10) #3, !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #3, !dbg !24
  %26 = bitcast i32 %25 to float, !dbg !24
  %27 = or disjoint i32 %11, 2, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %10) #3, !dbg !27
  %31 = bitcast i32 %30 to float, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %10) #3, !dbg !29
  %34 = bitcast i32 %33 to float, !dbg !29
  %35 = or disjoint i32 %11, 3, !dbg !30
  %36 = sext i32 %35 to i64, !dbg !31
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %10) #3, !dbg !32
  %39 = bitcast i32 %38 to float, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !33
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %10) #3, !dbg !34
  %42 = bitcast i32 %41 to float, !dbg !34
  %43 = or disjoint i32 %11, 4, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !36
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %10) #3, !dbg !37
  %47 = bitcast i32 %46 to float, !dbg !37
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !38
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %10) #3, !dbg !39
  %50 = bitcast i32 %49 to float, !dbg !39
  %51 = or disjoint i32 %11, 5, !dbg !40
  %52 = sext i32 %51 to i64, !dbg !41
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !41
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %10) #3, !dbg !42
  %55 = bitcast i32 %54 to float, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !43
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %10) #3, !dbg !44
  %58 = bitcast i32 %57 to float, !dbg !44
  %59 = or disjoint i32 %11, 6, !dbg !45
  %60 = sext i32 %59 to i64, !dbg !46
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !46
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %10) #3, !dbg !47
  %63 = bitcast i32 %62 to float, !dbg !47
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !48
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %10) #3, !dbg !49
  %66 = bitcast i32 %65 to float, !dbg !49
  %67 = or disjoint i32 %11, 7, !dbg !50
  %68 = sext i32 %67 to i64, !dbg !51
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !51
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %10) #3, !dbg !52
  %71 = bitcast i32 %70 to float, !dbg !52
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !53
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %10) #3, !dbg !54
  %74 = bitcast i32 %73 to float, !dbg !54
  %75 = or disjoint i32 %11, 8, !dbg !55
  %76 = sext i32 %75 to i64, !dbg !56
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !56
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %10) #3, !dbg !57
  %79 = bitcast i32 %78 to float, !dbg !57
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !58
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %10) #3, !dbg !59
  %82 = bitcast i32 %81 to float, !dbg !59
  %83 = or disjoint i32 %11, 9, !dbg !60
  %84 = sext i32 %83 to i64, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !61
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %10) #3, !dbg !62
  %87 = bitcast i32 %86 to float, !dbg !62
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !63
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %10) #3, !dbg !64
  %90 = bitcast i32 %89 to float, !dbg !64
  %91 = or disjoint i32 %11, 10, !dbg !65
  %92 = sext i32 %91 to i64, !dbg !66
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !66
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %10) #3, !dbg !67
  %95 = bitcast i32 %94 to float, !dbg !67
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !68
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %10) #3, !dbg !69
  %98 = bitcast i32 %97 to float, !dbg !69
  %99 = or disjoint i32 %11, 11, !dbg !70
  %100 = sext i32 %99 to i64, !dbg !71
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !71
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %10) #3, !dbg !72
  %103 = bitcast i32 %102 to float, !dbg !72
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !73
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %10) #3, !dbg !74
  %106 = bitcast i32 %105 to float, !dbg !74
  %107 = or disjoint i32 %11, 12, !dbg !75
  %108 = sext i32 %107 to i64, !dbg !76
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !76
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %10) #3, !dbg !77
  %111 = bitcast i32 %110 to float, !dbg !77
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !78
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %10) #3, !dbg !79
  %114 = bitcast i32 %113 to float, !dbg !79
  %115 = or disjoint i32 %11, 13, !dbg !80
  %116 = sext i32 %115 to i64, !dbg !81
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !81
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %10) #3, !dbg !82
  %119 = bitcast i32 %118 to float, !dbg !82
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !83
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %10) #3, !dbg !84
  %122 = bitcast i32 %121 to float, !dbg !84
  %123 = or disjoint i32 %11, 14, !dbg !85
  %124 = sext i32 %123 to i64, !dbg !86
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !86
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %10) #3, !dbg !87
  %127 = bitcast i32 %126 to float, !dbg !87
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !88
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %10) #3, !dbg !89
  %130 = bitcast i32 %129 to float, !dbg !89
  %131 = or disjoint i32 %11, 15, !dbg !90
  %132 = sext i32 %131 to i64, !dbg !91
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !91
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %10) #3, !dbg !92
  %135 = bitcast i32 %134 to float, !dbg !92
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !93
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %10) #3, !dbg !94
  %138 = bitcast i32 %137 to float, !dbg !94
  %139 = fsub float %15, %18, !dbg !95
  %140 = fmul float %139, %139, !dbg !96
  %141 = fsub float %23, %26, !dbg !97
  %142 = fmul float %141, %141, !dbg !98
  %143 = fadd float %140, %142, !dbg !99
  %144 = fsub float %31, %34, !dbg !100
  %145 = fmul float %144, %144, !dbg !101
  %146 = fadd float %143, %145, !dbg !102
  %147 = fsub float %39, %42, !dbg !103
  %148 = fmul float %147, %147, !dbg !104
  %149 = fadd float %146, %148, !dbg !105
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !106
  %.not.i = icmp eq i32 %150, 0, !dbg !106
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !106
  %.not1.i = icmp eq i32 %151, 0, !dbg !106
  br i1 %.not.i, label %157, label %152, !dbg !106

152:                                              ; preds = %4
  br i1 %.not1.i, label %155, label %153, !dbg !106

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !106
  br label %__nv_sqrtf.exit, !dbg !106

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !106
  br label %__nv_sqrtf.exit, !dbg !106

157:                                              ; preds = %4
  br i1 %.not1.i, label %160, label %158, !dbg !106

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !106
  br label %__nv_sqrtf.exit, !dbg !106

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !106
  br label %__nv_sqrtf.exit, !dbg !106

__nv_sqrtf.exit:                                  ; preds = %153, %155, %158, %160
  %.0.i = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !106
  %162 = fsub float %47, %50, !dbg !107
  %163 = fmul float %162, %162, !dbg !108
  %164 = fsub float %55, %58, !dbg !109
  %165 = fmul float %164, %164, !dbg !110
  %166 = fadd float %163, %165, !dbg !111
  %167 = fsub float %63, %66, !dbg !112
  %168 = fmul float %167, %167, !dbg !113
  %169 = fadd float %166, %168, !dbg !114
  %170 = fsub float %71, %74, !dbg !115
  %171 = fmul float %170, %170, !dbg !116
  %172 = fadd float %169, %171, !dbg !117
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !118
  %.not.i1 = icmp eq i32 %173, 0, !dbg !118
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !118
  %.not1.i4 = icmp eq i32 %174, 0, !dbg !118
  br i1 %.not.i1, label %180, label %175, !dbg !118

175:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %178, label %176, !dbg !118

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !118
  br label %__nv_sqrtf.exit5, !dbg !118

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !118
  br label %__nv_sqrtf.exit5, !dbg !118

180:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %183, label %181, !dbg !118

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !118
  br label %__nv_sqrtf.exit5, !dbg !118

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !118
  br label %__nv_sqrtf.exit5, !dbg !118

__nv_sqrtf.exit5:                                 ; preds = %176, %178, %181, %183
  %.0.i3 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !118
  %185 = fsub float %79, %82, !dbg !119
  %186 = fmul float %185, %185, !dbg !120
  %187 = fsub float %87, %90, !dbg !121
  %188 = fmul float %187, %187, !dbg !122
  %189 = fadd float %186, %188, !dbg !123
  %190 = fsub float %95, %98, !dbg !124
  %191 = fmul float %190, %190, !dbg !125
  %192 = fadd float %189, %191, !dbg !126
  %193 = fsub float %103, %106, !dbg !127
  %194 = fmul float %193, %193, !dbg !128
  %195 = fadd float %192, %194, !dbg !129
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !130
  %.not.i6 = icmp eq i32 %196, 0, !dbg !130
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !130
  %.not1.i9 = icmp eq i32 %197, 0, !dbg !130
  br i1 %.not.i6, label %203, label %198, !dbg !130

198:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %201, label %199, !dbg !130

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !130
  br label %__nv_sqrtf.exit10, !dbg !130

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !130
  br label %__nv_sqrtf.exit10, !dbg !130

203:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %206, label %204, !dbg !130

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !130
  br label %__nv_sqrtf.exit10, !dbg !130

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !130
  br label %__nv_sqrtf.exit10, !dbg !130

__nv_sqrtf.exit10:                                ; preds = %199, %201, %204, %206
  %.0.i8 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !130
  %208 = fsub float %111, %114, !dbg !131
  %209 = fmul float %208, %208, !dbg !132
  %210 = fsub float %119, %122, !dbg !133
  %211 = fmul float %210, %210, !dbg !134
  %212 = fadd float %209, %211, !dbg !135
  %213 = fsub float %127, %130, !dbg !136
  %214 = fmul float %213, %213, !dbg !137
  %215 = fadd float %212, %214, !dbg !138
  %216 = fsub float %135, %138, !dbg !139
  %217 = fmul float %216, %216, !dbg !140
  %218 = fadd float %215, %217, !dbg !141
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !142
  %.not.i11 = icmp eq i32 %219, 0, !dbg !142
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !142
  %.not1.i14 = icmp eq i32 %220, 0, !dbg !142
  br i1 %.not.i11, label %226, label %221, !dbg !142

221:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %224, label %222, !dbg !142

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !142
  br label %__nv_sqrtf.exit15, !dbg !142

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !142
  br label %__nv_sqrtf.exit15, !dbg !142

226:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %229, label %227, !dbg !142

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !142
  br label %__nv_sqrtf.exit15, !dbg !142

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !142
  br label %__nv_sqrtf.exit15, !dbg !142

__nv_sqrtf.exit15:                                ; preds = %222, %224, %227, %229
  %.0.i13 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !142
  %231 = fadd float %.0.i, %.0.i3, !dbg !143
  %232 = fadd float %231, %.0.i8, !dbg !144
  %233 = and i32 %7, 16, !dbg !12
  %234 = fadd float %232, %.0.i13, !dbg !145
  %235 = sext i32 %9 to i64, !dbg !146
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !146
  %237 = icmp eq i32 %233, 0, !dbg !147
  %238 = bitcast float %234 to i32, !dbg !147
  %239 = and i1 %237, %10, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %236, i1 %239) #3, !dbg !147
  ret void, !dbg !148
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c27j7i7sfxbpbkakg75s6hl5f63g3llupzdszfmc56jhdnf7pavj.py", directory: "inductor_cache/27")
!4 = !{ptr @triton_poi_fused_pow_sqrt_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pow_sqrt_sub_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pow_sqrt_sub_sum_0", linkageName: "triton_poi_fused_pow_sqrt_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 38, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 38, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 42, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 42, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 43, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 43, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 43, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 43, scope: !7)
!40 = !DILocation(line: 35, column: 35, scope: !7)
!41 = !DILocation(line: 35, column: 31, scope: !7)
!42 = !DILocation(line: 35, column: 43, scope: !7)
!43 = !DILocation(line: 36, column: 31, scope: !7)
!44 = !DILocation(line: 36, column: 43, scope: !7)
!45 = !DILocation(line: 37, column: 35, scope: !7)
!46 = !DILocation(line: 37, column: 31, scope: !7)
!47 = !DILocation(line: 37, column: 43, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 43, scope: !7)
!50 = !DILocation(line: 39, column: 35, scope: !7)
!51 = !DILocation(line: 39, column: 31, scope: !7)
!52 = !DILocation(line: 39, column: 43, scope: !7)
!53 = !DILocation(line: 40, column: 31, scope: !7)
!54 = !DILocation(line: 40, column: 43, scope: !7)
!55 = !DILocation(line: 41, column: 35, scope: !7)
!56 = !DILocation(line: 41, column: 31, scope: !7)
!57 = !DILocation(line: 41, column: 43, scope: !7)
!58 = !DILocation(line: 42, column: 31, scope: !7)
!59 = !DILocation(line: 42, column: 43, scope: !7)
!60 = !DILocation(line: 43, column: 35, scope: !7)
!61 = !DILocation(line: 43, column: 31, scope: !7)
!62 = !DILocation(line: 43, column: 43, scope: !7)
!63 = !DILocation(line: 44, column: 31, scope: !7)
!64 = !DILocation(line: 44, column: 43, scope: !7)
!65 = !DILocation(line: 45, column: 36, scope: !7)
!66 = !DILocation(line: 45, column: 31, scope: !7)
!67 = !DILocation(line: 45, column: 44, scope: !7)
!68 = !DILocation(line: 46, column: 31, scope: !7)
!69 = !DILocation(line: 46, column: 44, scope: !7)
!70 = !DILocation(line: 47, column: 36, scope: !7)
!71 = !DILocation(line: 47, column: 31, scope: !7)
!72 = !DILocation(line: 47, column: 44, scope: !7)
!73 = !DILocation(line: 48, column: 31, scope: !7)
!74 = !DILocation(line: 48, column: 44, scope: !7)
!75 = !DILocation(line: 49, column: 36, scope: !7)
!76 = !DILocation(line: 49, column: 31, scope: !7)
!77 = !DILocation(line: 49, column: 44, scope: !7)
!78 = !DILocation(line: 50, column: 31, scope: !7)
!79 = !DILocation(line: 50, column: 44, scope: !7)
!80 = !DILocation(line: 51, column: 36, scope: !7)
!81 = !DILocation(line: 51, column: 31, scope: !7)
!82 = !DILocation(line: 51, column: 44, scope: !7)
!83 = !DILocation(line: 52, column: 31, scope: !7)
!84 = !DILocation(line: 52, column: 44, scope: !7)
!85 = !DILocation(line: 53, column: 36, scope: !7)
!86 = !DILocation(line: 53, column: 31, scope: !7)
!87 = !DILocation(line: 53, column: 44, scope: !7)
!88 = !DILocation(line: 54, column: 31, scope: !7)
!89 = !DILocation(line: 54, column: 44, scope: !7)
!90 = !DILocation(line: 55, column: 36, scope: !7)
!91 = !DILocation(line: 55, column: 31, scope: !7)
!92 = !DILocation(line: 55, column: 44, scope: !7)
!93 = !DILocation(line: 56, column: 31, scope: !7)
!94 = !DILocation(line: 56, column: 44, scope: !7)
!95 = !DILocation(line: 57, column: 18, scope: !7)
!96 = !DILocation(line: 58, column: 18, scope: !7)
!97 = !DILocation(line: 59, column: 18, scope: !7)
!98 = !DILocation(line: 60, column: 18, scope: !7)
!99 = !DILocation(line: 61, column: 18, scope: !7)
!100 = !DILocation(line: 62, column: 19, scope: !7)
!101 = !DILocation(line: 63, column: 20, scope: !7)
!102 = !DILocation(line: 64, column: 19, scope: !7)
!103 = !DILocation(line: 65, column: 20, scope: !7)
!104 = !DILocation(line: 66, column: 20, scope: !7)
!105 = !DILocation(line: 67, column: 20, scope: !7)
!106 = !DILocation(line: 68, column: 27, scope: !7)
!107 = !DILocation(line: 69, column: 20, scope: !7)
!108 = !DILocation(line: 70, column: 20, scope: !7)
!109 = !DILocation(line: 71, column: 20, scope: !7)
!110 = !DILocation(line: 72, column: 20, scope: !7)
!111 = !DILocation(line: 73, column: 20, scope: !7)
!112 = !DILocation(line: 74, column: 20, scope: !7)
!113 = !DILocation(line: 75, column: 20, scope: !7)
!114 = !DILocation(line: 76, column: 20, scope: !7)
!115 = !DILocation(line: 77, column: 20, scope: !7)
!116 = !DILocation(line: 78, column: 20, scope: !7)
!117 = !DILocation(line: 79, column: 20, scope: !7)
!118 = !DILocation(line: 80, column: 27, scope: !7)
!119 = !DILocation(line: 82, column: 20, scope: !7)
!120 = !DILocation(line: 83, column: 20, scope: !7)
!121 = !DILocation(line: 84, column: 20, scope: !7)
!122 = !DILocation(line: 85, column: 20, scope: !7)
!123 = !DILocation(line: 86, column: 20, scope: !7)
!124 = !DILocation(line: 87, column: 20, scope: !7)
!125 = !DILocation(line: 88, column: 20, scope: !7)
!126 = !DILocation(line: 89, column: 20, scope: !7)
!127 = !DILocation(line: 90, column: 20, scope: !7)
!128 = !DILocation(line: 91, column: 20, scope: !7)
!129 = !DILocation(line: 92, column: 20, scope: !7)
!130 = !DILocation(line: 93, column: 27, scope: !7)
!131 = !DILocation(line: 95, column: 20, scope: !7)
!132 = !DILocation(line: 96, column: 20, scope: !7)
!133 = !DILocation(line: 97, column: 20, scope: !7)
!134 = !DILocation(line: 98, column: 20, scope: !7)
!135 = !DILocation(line: 99, column: 20, scope: !7)
!136 = !DILocation(line: 100, column: 20, scope: !7)
!137 = !DILocation(line: 101, column: 20, scope: !7)
!138 = !DILocation(line: 102, column: 20, scope: !7)
!139 = !DILocation(line: 103, column: 20, scope: !7)
!140 = !DILocation(line: 104, column: 20, scope: !7)
!141 = !DILocation(line: 105, column: 20, scope: !7)
!142 = !DILocation(line: 106, column: 27, scope: !7)
!143 = !DILocation(line: 81, column: 20, scope: !7)
!144 = !DILocation(line: 94, column: 20, scope: !7)
!145 = !DILocation(line: 107, column: 20, scope: !7)
!146 = !DILocation(line: 108, column: 25, scope: !7)
!147 = !DILocation(line: 108, column: 37, scope: !7)
!148 = !DILocation(line: 108, column: 4, scope: !7)
