; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = and i32 %12, 3, !dbg !12
  %16 = and i32 %12, 31, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 2, !dbg !16
  %23 = lshr i32 %12, 5, !dbg !17
  %24 = and i32 %23, 3, !dbg !17
  %25 = or disjoint i32 %22, %15, !dbg !18
  %26 = or disjoint i32 %22, %24, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %29 = sdiv i32 %.frozen, 16, !dbg !20
  %30 = mul i32 %29, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen4 = freeze i32 %17, !dbg !20
  %31 = sdiv i32 %.frozen4, 16, !dbg !20
  %32 = shl i32 %26, 4, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = shl i32 %29, 6, !dbg !24
  %35 = add i32 %33, %34, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %19, %27, !dbg !27
  %39 = and i1 %20, %28, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %39) #4, !dbg !28
  %41 = shl i32 %12, 2, !dbg !28
  %42 = and i32 %41, 124, !dbg !28
  %43 = or disjoint i32 %42, %24, !dbg !28
  %44 = and i32 %12, 127, !dbg !28
  %45 = lshr exact i32 %42, 2, !dbg !28
  %46 = add nuw nsw i32 %43, %45, !dbg !28
  %47 = zext nneg i32 %46 to i64, !dbg !28
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47, !dbg !28
  %49 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %50 = lshr i32 %44, 2, !dbg !28
  %51 = add nuw nsw i32 %50, %44, !dbg !28
  %52 = zext nneg i32 %51 to i64, !dbg !28
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52, !dbg !28
  %54 = load float, ptr addrspace(3) %53, align 4, !dbg !28
  %55 = shl nsw i32 %31, 2, !dbg !29
  %56 = add i32 %55, %25, !dbg !30
  %57 = sext i32 %56 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %38) #4, !dbg !32
  %60 = sext i32 %17 to i64, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %19) #4, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %19) #4, !dbg !36
  %65 = bitcast i32 %64 to float, !dbg !36
  %66 = sext i32 %25 to i64, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %27) #4, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %27) #4, !dbg !40
  %71 = fadd float %65, 0x3EE4F8B580000000, !dbg !41
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %72, 0, !dbg !42
  br i1 %.not.i, label %75, label %73, !dbg !42

73:                                               ; preds = %9
  %74 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %71), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

75:                                               ; preds = %9
  %76 = tail call float @llvm.nvvm.rsqrt.approx.f(float %71), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %73, %75
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], !dbg !42
  %77 = bitcast i32 %59 to float, !dbg !32
  %78 = fadd float %54, %77, !dbg !43
  %79 = bitcast i32 %62 to float, !dbg !34
  %80 = fsub float %78, %79, !dbg !44
  %81 = bitcast i32 %70 to float, !dbg !40
  %82 = bitcast i32 %68 to float, !dbg !38
  %83 = mul i32 %31, 16, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %83, !dbg !21
  %84 = fmul float %80, %.0.i, !dbg !45
  %85 = fmul float %84, %82, !dbg !46
  %86 = fadd float %85, %81, !dbg !47
  %87 = shl nsw i32 %.decomposed5, 4, !dbg !48
  %88 = add i32 %56, %87, !dbg !49
  %89 = sext i32 %88 to i64, !dbg !50
  %90 = getelementptr float, ptr addrspace(1) %6, i64 %89, !dbg !50
  %91 = bitcast float %86 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %90, i1 %38) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c672w7wg4wxrrwhsh5zxeoupsxwbnjg6nz4wjbixysk6zjf2ixtw.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_1", linkageName: "triton_poi_fused_add_native_layer_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 27, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 19, scope: !7)
!47 = !DILocation(line: 45, column: 20, scope: !7)
!48 = !DILocation(line: 46, column: 40, scope: !7)
!49 = !DILocation(line: 46, column: 37, scope: !7)
!50 = !DILocation(line: 46, column: 25, scope: !7)
!51 = !DILocation(line: 46, column: 52, scope: !7)
!52 = !DILocation(line: 46, column: 4, scope: !7)
