; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 1024, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 8, !dbg !15
  %20 = srem i32 %19, 8, !dbg !16
  %21 = mul i32 %19, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = sdiv i32 %17, 64, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !19
  %24 = getelementptr i64, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %18) #1, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %18) #1, !dbg !20
  %27 = sext i32 %.decomposed to i64, !dbg !21
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !21
  %29 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 %18) #1, !dbg !22
  %30 = extractvalue { i64, i64 } %29, 0, !dbg !22
  %31 = extractvalue { i64, i64 } %29, 1, !dbg !22
  %32 = getelementptr i64, ptr addrspace(1) %6, i64 %23, !dbg !23
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %18) #1, !dbg !24
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %18) #1, !dbg !24
  %35 = getelementptr i64, ptr addrspace(1) %7, i64 %27, !dbg !25
  %36 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 %18) #1, !dbg !26
  %37 = extractvalue { i64, i64 } %36, 0, !dbg !26
  %38 = extractvalue { i64, i64 } %36, 1, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %18) #1, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #1, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #1, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = lshr i64 %25, 61, !dbg !31
  %49 = and i64 %48, 4, !dbg !31
  %50 = add i64 %49, %25, !dbg !31
  %51 = lshr i64 %30, 61, !dbg !32
  %52 = and i64 %51, 4, !dbg !32
  %53 = add i64 %52, %30, !dbg !32
  %54 = lshr i64 %31, 61, !dbg !32
  %55 = and i64 %54, 4, !dbg !32
  %56 = add i64 %55, %31, !dbg !32
  %57 = shl i64 %50, 2, !dbg !33
  %58 = shl nsw i32 %22, 4, !dbg !34
  %59 = sext i32 %58 to i64, !dbg !35
  %60 = add i64 %57, %59, !dbg !36
  %61 = add i64 %60, %53, !dbg !35
  %62 = add i64 %60, %56, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %18) #1, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %18) #1, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %18) #1, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #1, !dbg !40
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %62, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %18) #1, !dbg !42
  %74 = bitcast i32 %73 to float, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #1, !dbg !42
  %76 = bitcast i32 %75 to float, !dbg !42
  %77 = fsub float 0.000000e+00, %74, !dbg !43
  %78 = fsub float 0.000000e+00, %76, !dbg !43
  %79 = fmul float %77, 0x3FF7154760000000, !dbg !47
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !47
  %81 = fmul float %78, 0x3FF7154760000000, !dbg !47
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !47
  %83 = fadd float %80, 1.000000e+00, !dbg !48
  %84 = fadd float %82, 1.000000e+00, !dbg !48
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !49
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #1, !dbg !49
  %87 = lshr i64 %33, 61, !dbg !50
  %88 = and i64 %87, 4, !dbg !50
  %89 = add i64 %88, %33, !dbg !50
  %90 = shl i64 %89, 2, !dbg !51
  %91 = add i64 %90, %59, !dbg !52
  %92 = add i64 %91, %53, !dbg !53
  %93 = add i64 %91, %56, !dbg !53
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !54
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !54
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %18) #1, !dbg !55
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %18) #1, !dbg !55
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !56
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !56
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %18) #1, !dbg !57
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %18) #1, !dbg !57
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %92, !dbg !58
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !58
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %18) #1, !dbg !59
  %105 = bitcast i32 %104 to float, !dbg !59
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #1, !dbg !59
  %107 = bitcast i32 %106 to float, !dbg !59
  %108 = fsub float 0.000000e+00, %105, !dbg !60
  %109 = fsub float 0.000000e+00, %107, !dbg !60
  %110 = fmul float %108, 0x3FF7154760000000, !dbg !62
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #1, !dbg !62
  %112 = fmul float %109, 0x3FF7154760000000, !dbg !62
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #1, !dbg !62
  %114 = fadd float %111, 1.000000e+00, !dbg !63
  %115 = fadd float %113, 1.000000e+00, !dbg !63
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %114) #1, !dbg !64
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %115) #1, !dbg !64
  %118 = lshr i64 %37, 61, !dbg !65
  %119 = and i64 %118, 4, !dbg !65
  %120 = add i64 %119, %37, !dbg !65
  %121 = lshr i64 %38, 61, !dbg !65
  %122 = and i64 %121, 4, !dbg !65
  %123 = add i64 %122, %38, !dbg !65
  %124 = add i64 %91, %120, !dbg !66
  %125 = add i64 %91, %123, !dbg !66
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !67
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !67
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %18) #1, !dbg !68
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %18) #1, !dbg !68
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %124, !dbg !69
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %125, !dbg !69
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %18) #1, !dbg !70
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #1, !dbg !70
  %134 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !71
  %135 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !71
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %18) #1, !dbg !72
  %137 = bitcast i32 %136 to float, !dbg !72
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %18) #1, !dbg !72
  %139 = bitcast i32 %138 to float, !dbg !72
  %140 = fsub float 0.000000e+00, %137, !dbg !73
  %141 = fsub float 0.000000e+00, %139, !dbg !73
  %142 = fmul float %140, 0x3FF7154760000000, !dbg !75
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #1, !dbg !75
  %144 = fmul float %141, 0x3FF7154760000000, !dbg !75
  %145 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %144) #1, !dbg !75
  %146 = fadd float %143, 1.000000e+00, !dbg !76
  %147 = fadd float %145, 1.000000e+00, !dbg !76
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %146) #1, !dbg !77
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %147) #1, !dbg !77
  %150 = add i64 %60, %120, !dbg !78
  %151 = add i64 %60, %123, !dbg !78
  %152 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !79
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !79
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %18) #1, !dbg !80
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %18) #1, !dbg !80
  %156 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !81
  %157 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !81
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %18) #1, !dbg !82
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %18) #1, !dbg !82
  %160 = getelementptr float, ptr addrspace(1) %5, i64 %150, !dbg !83
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %151, !dbg !83
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %18) #1, !dbg !84
  %163 = bitcast i32 %162 to float, !dbg !84
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %18) #1, !dbg !84
  %165 = bitcast i32 %164 to float, !dbg !84
  %166 = fsub float 0.000000e+00, %163, !dbg !85
  %167 = fsub float 0.000000e+00, %165, !dbg !85
  %168 = fmul float %166, 0x3FF7154760000000, !dbg !87
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #1, !dbg !87
  %170 = fmul float %167, 0x3FF7154760000000, !dbg !87
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #1, !dbg !87
  %172 = fadd float %169, 1.000000e+00, !dbg !88
  %173 = fadd float %171, 1.000000e+00, !dbg !88
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %172) #1, !dbg !89
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %173) #1, !dbg !89
  %176 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !38
  %177 = insertelement <2 x i32> %176, i32 %96, i64 1, !dbg !38
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !38
  %179 = fcmp ogt <2 x float> %178, zeroinitializer, !dbg !90
  %180 = fmul <2 x float> %178, splat (float 0x3FA47AE140000000), !dbg !91
  %181 = select <2 x i1> %179, <2 x float> %178, <2 x float> %180, !dbg !92
  %182 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !40
  %183 = insertelement <2 x i32> %182, i32 %100, i64 1, !dbg !40
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !40
  %185 = fmul <2 x float> %181, %184, !dbg !93
  %186 = insertelement <2 x float> poison, float %85, i64 0, !dbg !94
  %187 = insertelement <2 x float> %186, float %116, i64 1, !dbg !94
  %188 = fadd <2 x float> %185, %187, !dbg !94
  %189 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !80
  %190 = insertelement <2 x i32> %189, i32 %128, i64 1, !dbg !80
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !80
  %192 = fcmp ogt <2 x float> %191, zeroinitializer, !dbg !95
  %193 = fmul <2 x float> %191, splat (float 0x3FA47AE140000000), !dbg !96
  %194 = select <2 x i1> %192, <2 x float> %191, <2 x float> %193, !dbg !97
  %195 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !82
  %196 = insertelement <2 x i32> %195, i32 %132, i64 1, !dbg !82
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !82
  %198 = fmul <2 x float> %194, %197, !dbg !98
  %199 = insertelement <2 x float> poison, float %174, i64 0, !dbg !99
  %200 = insertelement <2 x float> %199, float %148, i64 1, !dbg !99
  %201 = fadd <2 x float> %198, %200, !dbg !99
  %202 = fsub <2 x float> %201, %188, !dbg !100
  %203 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !101
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !101
  %205 = shufflevector <2 x float> %204, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %206 = fmul <2 x float> %202, %205, !dbg !101
  %207 = fadd <2 x float> %188, %206, !dbg !102
  %208 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !38
  %209 = insertelement <2 x i32> %208, i32 %97, i64 1, !dbg !38
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !38
  %211 = fcmp ogt <2 x float> %210, zeroinitializer, !dbg !90
  %212 = fmul <2 x float> %210, splat (float 0x3FA47AE140000000), !dbg !91
  %213 = select <2 x i1> %211, <2 x float> %210, <2 x float> %212, !dbg !92
  %214 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !40
  %215 = insertelement <2 x i32> %214, i32 %101, i64 1, !dbg !40
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !40
  %217 = fmul <2 x float> %213, %216, !dbg !93
  %218 = insertelement <2 x float> poison, float %86, i64 0, !dbg !94
  %219 = insertelement <2 x float> %218, float %117, i64 1, !dbg !94
  %220 = fadd <2 x float> %217, %219, !dbg !94
  %221 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !80
  %222 = insertelement <2 x i32> %221, i32 %129, i64 1, !dbg !80
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !80
  %224 = fcmp ogt <2 x float> %223, zeroinitializer, !dbg !95
  %225 = fmul <2 x float> %223, splat (float 0x3FA47AE140000000), !dbg !96
  %226 = select <2 x i1> %224, <2 x float> %223, <2 x float> %225, !dbg !97
  %227 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !82
  %228 = insertelement <2 x i32> %227, i32 %133, i64 1, !dbg !82
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !82
  %230 = fmul <2 x float> %226, %229, !dbg !98
  %231 = insertelement <2 x float> poison, float %175, i64 0, !dbg !99
  %232 = insertelement <2 x float> %231, float %149, i64 1, !dbg !99
  %233 = fadd <2 x float> %230, %232, !dbg !99
  %234 = fsub <2 x float> %233, %220, !dbg !100
  %235 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !101
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !101
  %237 = shufflevector <2 x float> %236, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %238 = fmul <2 x float> %234, %237, !dbg !101
  %239 = fadd <2 x float> %220, %238, !dbg !102
  %240 = extractelement <2 x float> %207, i64 0, !dbg !103
  %241 = extractelement <2 x float> %207, i64 1, !dbg !104
  %242 = fsub float %240, %241, !dbg !103
  %243 = extractelement <2 x float> %239, i64 0, !dbg !103
  %244 = extractelement <2 x float> %239, i64 1, !dbg !104
  %245 = fsub float %243, %244, !dbg !103
  %246 = fmul float %242, %45, !dbg !105
  %247 = fmul float %245, %47, !dbg !105
  %248 = fadd float %241, %246, !dbg !104
  %249 = fadd float %244, %247, !dbg !104
  %250 = sext i32 %17 to i64, !dbg !106
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !106
  %252 = bitcast float %248 to i32, !dbg !107
  %253 = bitcast float %249 to i32, !dbg !107
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %252, i32 %253, ptr addrspace(1) %251, i1 %18) #1, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpgmghyp3pelara5zqnvpmoa3pz4xrbdbkwfwcemb3wj4je3dylj.py", directory: "inductor_cache/pg")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8", linkageName: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 40, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 39, scope: !7)
!34 = !DILocation(line: 41, column: 49, scope: !7)
!35 = !DILocation(line: 41, column: 46, scope: !7)
!36 = !DILocation(line: 41, column: 37, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 54, scope: !7)
!39 = !DILocation(line: 47, column: 31, scope: !7)
!40 = !DILocation(line: 47, column: 55, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 55, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 50, column: 23, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 54, column: 35, scope: !7)
!51 = !DILocation(line: 55, column: 40, scope: !7)
!52 = !DILocation(line: 55, column: 38, scope: !7)
!53 = !DILocation(line: 55, column: 48, scope: !7)
!54 = !DILocation(line: 55, column: 31, scope: !7)
!55 = !DILocation(line: 55, column: 56, scope: !7)
!56 = !DILocation(line: 59, column: 31, scope: !7)
!57 = !DILocation(line: 59, column: 56, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 56, scope: !7)
!60 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !61)
!61 = !DILocation(line: 62, column: 23, scope: !7)
!62 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !61)
!63 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !61)
!64 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !61)
!65 = !DILocation(line: 66, column: 35, scope: !7)
!66 = !DILocation(line: 67, column: 49, scope: !7)
!67 = !DILocation(line: 67, column: 31, scope: !7)
!68 = !DILocation(line: 67, column: 57, scope: !7)
!69 = !DILocation(line: 71, column: 31, scope: !7)
!70 = !DILocation(line: 71, column: 57, scope: !7)
!71 = !DILocation(line: 73, column: 31, scope: !7)
!72 = !DILocation(line: 73, column: 57, scope: !7)
!73 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !74)
!74 = !DILocation(line: 74, column: 23, scope: !7)
!75 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !74)
!76 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !74)
!77 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !74)
!78 = !DILocation(line: 79, column: 48, scope: !7)
!79 = !DILocation(line: 79, column: 31, scope: !7)
!80 = !DILocation(line: 79, column: 56, scope: !7)
!81 = !DILocation(line: 83, column: 31, scope: !7)
!82 = !DILocation(line: 83, column: 56, scope: !7)
!83 = !DILocation(line: 85, column: 31, scope: !7)
!84 = !DILocation(line: 85, column: 56, scope: !7)
!85 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !86)
!86 = !DILocation(line: 86, column: 23, scope: !7)
!87 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !86)
!88 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !86)
!89 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !86)
!90 = !DILocation(line: 43, column: 19, scope: !7)
!91 = !DILocation(line: 45, column: 19, scope: !7)
!92 = !DILocation(line: 46, column: 34, scope: !7)
!93 = !DILocation(line: 48, column: 20, scope: !7)
!94 = !DILocation(line: 51, column: 20, scope: !7)
!95 = !DILocation(line: 80, column: 20, scope: !7)
!96 = !DILocation(line: 81, column: 20, scope: !7)
!97 = !DILocation(line: 82, column: 35, scope: !7)
!98 = !DILocation(line: 84, column: 20, scope: !7)
!99 = !DILocation(line: 87, column: 20, scope: !7)
!100 = !DILocation(line: 88, column: 20, scope: !7)
!101 = !DILocation(line: 89, column: 20, scope: !7)
!102 = !DILocation(line: 90, column: 20, scope: !7)
!103 = !DILocation(line: 91, column: 20, scope: !7)
!104 = !DILocation(line: 93, column: 20, scope: !7)
!105 = !DILocation(line: 92, column: 20, scope: !7)
!106 = !DILocation(line: 94, column: 28, scope: !7)
!107 = !DILocation(line: 94, column: 40, scope: !7)
!108 = !DILocation(line: 94, column: 4, scope: !7)
