; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = shl i32 %7, 2, !dbg !11
  %10 = and i32 %9, 2044, !dbg !11
  %11 = shl i32 %6, 12, !dbg !12
  %12 = or disjoint i32 %11, %10
  %13 = sext i32 %12 to i64, !dbg !13
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !13
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !14
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !14
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !14
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !14
  %20 = bitcast i32 %16 to float, !dbg !14
  %21 = bitcast i32 %17 to float, !dbg !14
  %22 = bitcast i32 %18 to float, !dbg !14
  %23 = bitcast i32 %19 to float, !dbg !14
  %24 = or disjoint i32 %12, 2048, !dbg !15
  %25 = sext i32 %24 to i64, !dbg !13
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !13
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !14
  %28 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !14
  %29 = bitcast i32 %28 to float, !dbg !14
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !14
  %31 = bitcast i32 %30 to float, !dbg !14
  %32 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !14
  %33 = bitcast i32 %32 to float, !dbg !14
  %34 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !14
  %35 = bitcast i32 %34 to float, !dbg !14
  %36 = fsub float %35, %20, !dbg !16
  %37 = fsub float %33, %21, !dbg !16
  %38 = fsub float %31, %22, !dbg !16
  %39 = fsub float %29, %23, !dbg !16
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 2.000000e+00) #5, !dbg !20
  %41 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 2.000000e+00) #5, !dbg !20
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 2.000000e+00) #5, !dbg !20
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 2.000000e+00) #5, !dbg !20
  %44 = fadd float %40, %20, !dbg !21
  %45 = fsub float %35, %44, !dbg !22
  %46 = fmul float %36, %45, !dbg !23
  %47 = fadd float %46, 0.000000e+00, !dbg !24
  %48 = fadd float %41, %21, !dbg !21
  %49 = fsub float %33, %48, !dbg !22
  %50 = fmul float %37, %49, !dbg !23
  %51 = fadd float %50, 0.000000e+00, !dbg !24
  %52 = fadd float %42, %22, !dbg !21
  %53 = fsub float %31, %52, !dbg !22
  %54 = fmul float %38, %53, !dbg !23
  %55 = fadd float %54, 0.000000e+00, !dbg !24
  %56 = fadd float %43, %23, !dbg !21
  %57 = fsub float %29, %56, !dbg !22
  %58 = fmul float %39, %57, !dbg !23
  %59 = fadd float %58, 0.000000e+00, !dbg !24
  %60 = lshr i32 %7, 5, !dbg !11
  %61 = fsub float %48, %44, !dbg !25
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 2.000000e+00, float 4.000000e+00) #5, !dbg !28
  %63 = fmul float %61, %62, !dbg !29
  %64 = fadd float %44, %63, !dbg !30
  %65 = fadd float %47, %51, !dbg !31
  %66 = fmul float %61, %61, !dbg !32
  %67 = fmul float %66, 2.000000e+00, !dbg !33
  %68 = fmul float %67, %62, !dbg !34
  %69 = fadd float %65, %68, !dbg !35
  %70 = fsub float %52, %64, !dbg !25
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 2.000000e+00, float 6.000000e+00) #5, !dbg !28
  %72 = fmul float %71, %70, !dbg !29
  %73 = fadd float %64, %72, !dbg !30
  %74 = fadd float %55, %69, !dbg !31
  %75 = fmul float %70, %70, !dbg !32
  %76 = fmul float %75, 4.000000e+00, !dbg !33
  %77 = fmul float %71, %76, !dbg !34
  %78 = fadd float %74, %77, !dbg !35
  %79 = fsub float %56, %73, !dbg !25
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 2.000000e+00, float 8.000000e+00) #5, !dbg !28
  %81 = fmul float %80, %79, !dbg !29
  %82 = fadd float %73, %81, !dbg !30
  %83 = fadd float %59, %78, !dbg !31
  %84 = fmul float %79, %79, !dbg !32
  %85 = fmul float %84, 6.000000e+00, !dbg !33
  %86 = fmul float %80, %85, !dbg !34
  %87 = fadd float %83, %86, !dbg !35
  %88 = bitcast float %82 to i32, !dbg !36
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !36
  %90 = bitcast i32 %89 to float, !dbg !36
  %91 = bitcast float %87 to i32, !dbg !36
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 16, i32 31), !dbg !36
  %93 = bitcast i32 %92 to float, !dbg !36
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 1090519040, i32 16, i32 31), !dbg !36
  %95 = bitcast i32 %94 to float, !dbg !36
  %96 = fsub float %90, %82, !dbg !25
  %97 = fadd float %95, 8.000000e+00, !dbg !37
  %98 = fcmp oeq float %97, 0.000000e+00, !dbg !38
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %97) #5, !dbg !28
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !39
  %101 = fmul float %100, %96, !dbg !29
  %102 = fadd float %82, %101, !dbg !30
  %103 = fadd float %87, %93, !dbg !31
  %104 = fmul float %96, %96, !dbg !32
  %105 = fmul float %104, 8.000000e+00, !dbg !33
  %106 = fmul float %100, %105, !dbg !34
  %107 = fadd float %103, %106, !dbg !35
  %108 = bitcast float %102 to i32, !dbg !36
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 8, i32 31), !dbg !36
  %110 = bitcast i32 %109 to float, !dbg !36
  %111 = bitcast float %107 to i32, !dbg !36
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !36
  %113 = bitcast i32 %112 to float, !dbg !36
  %114 = bitcast float %97 to i32, !dbg !36
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !36
  %116 = bitcast i32 %115 to float, !dbg !36
  %117 = fsub float %110, %102, !dbg !25
  %118 = fadd float %97, %116, !dbg !37
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !38
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %118) #5, !dbg !28
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !39
  %122 = fmul float %117, %121, !dbg !29
  %123 = fadd float %102, %122, !dbg !30
  %124 = fadd float %107, %113, !dbg !31
  %125 = fmul float %117, %117, !dbg !32
  %126 = fmul float %97, %125, !dbg !33
  %127 = fmul float %121, %126, !dbg !34
  %128 = fadd float %124, %127, !dbg !35
  %129 = bitcast float %123 to i32, !dbg !36
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !36
  %131 = bitcast i32 %130 to float, !dbg !36
  %132 = bitcast float %128 to i32, !dbg !36
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !36
  %134 = bitcast i32 %133 to float, !dbg !36
  %135 = bitcast float %118 to i32, !dbg !36
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = fsub float %131, %123, !dbg !25
  %139 = fadd float %118, %137, !dbg !37
  %140 = fcmp oeq float %139, 0.000000e+00, !dbg !38
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %139) #5, !dbg !28
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !39
  %143 = fmul float %138, %142, !dbg !29
  %144 = fadd float %123, %143, !dbg !30
  %145 = fadd float %128, %134, !dbg !31
  %146 = fmul float %138, %138, !dbg !32
  %147 = fmul float %118, %146, !dbg !33
  %148 = fmul float %142, %147, !dbg !34
  %149 = fadd float %145, %148, !dbg !35
  %150 = bitcast float %144 to i32, !dbg !36
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 2, i32 31), !dbg !36
  %152 = bitcast i32 %151 to float, !dbg !36
  %153 = bitcast float %149 to i32, !dbg !36
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !36
  %155 = bitcast i32 %154 to float, !dbg !36
  %156 = bitcast float %139 to i32, !dbg !36
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 2, i32 31), !dbg !36
  %158 = bitcast i32 %157 to float, !dbg !36
  %159 = fsub float %152, %144, !dbg !25
  %160 = fadd float %139, %158, !dbg !37
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !38
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float %160) #5, !dbg !28
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !39
  %164 = fmul float %159, %163, !dbg !29
  %165 = fadd float %144, %164, !dbg !30
  %166 = fadd float %149, %155, !dbg !31
  %167 = fmul float %159, %159, !dbg !32
  %168 = fmul float %139, %167, !dbg !33
  %169 = fmul float %163, %168, !dbg !34
  %170 = fadd float %166, %169, !dbg !35
  %171 = bitcast float %165 to i32, !dbg !36
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !36
  %173 = bitcast i32 %172 to float, !dbg !36
  %174 = bitcast float %170 to i32, !dbg !36
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !36
  %176 = bitcast i32 %175 to float, !dbg !36
  %177 = bitcast float %160 to i32, !dbg !36
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 1, i32 31), !dbg !36
  %179 = bitcast i32 %178 to float, !dbg !36
  %180 = fsub float %173, %165, !dbg !25
  %181 = fadd float %160, %179, !dbg !37
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !38
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %181) #5, !dbg !28
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !39
  %185 = fmul float %180, %184, !dbg !29
  %186 = fadd float %165, %185, !dbg !30
  %187 = fadd float %170, %176, !dbg !31
  %188 = fmul float %180, %180, !dbg !32
  %189 = fmul float %160, %188, !dbg !33
  %190 = fmul float %184, %189, !dbg !34
  %191 = fadd float %187, %190, !dbg !35
  %192 = icmp eq i32 %8, 0, !dbg !36
  %193 = and i32 %60, 15, !dbg !36
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !36
  %195 = bitcast float %186 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 %192) #5, !dbg !36
  %196 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %193, !dbg !36
  %197 = bitcast float %191 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 %192) #5, !dbg !36
  %198 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %193, !dbg !36
  %199 = bitcast float %181 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 %192) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %200 = icmp slt i32 %7, 16, !dbg !36
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !36
  %202 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %201, i1 %200) #5, !dbg !36
  %203 = bitcast i32 %202 to float, !dbg !36
  %204 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %7, !dbg !36
  %205 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %204, i1 %200) #5, !dbg !36
  %206 = bitcast i32 %205 to float, !dbg !36
  %207 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %7, !dbg !36
  %208 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %207, i1 %200) #5, !dbg !36
  %209 = bitcast i32 %208 to float, !dbg !36
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 8, i32 31), !dbg !36
  %211 = bitcast i32 %210 to float, !dbg !36
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !36
  %213 = bitcast i32 %212 to float, !dbg !36
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 8, i32 31), !dbg !36
  %215 = bitcast i32 %214 to float, !dbg !36
  %216 = fsub float %211, %203, !dbg !25
  %217 = fadd float %209, %215, !dbg !37
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !38
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %217) #5, !dbg !28
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !39
  %221 = fmul float %216, %220, !dbg !29
  %222 = fadd float %221, %203, !dbg !30
  %223 = fadd float %206, %213, !dbg !31
  %224 = fmul float %216, %216, !dbg !32
  %225 = fmul float %224, %209, !dbg !33
  %226 = fmul float %225, %220, !dbg !34
  %227 = fadd float %223, %226, !dbg !35
  %228 = bitcast float %222 to i32, !dbg !36
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !36
  %230 = bitcast i32 %229 to float, !dbg !36
  %231 = bitcast float %227 to i32, !dbg !36
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !36
  %233 = bitcast i32 %232 to float, !dbg !36
  %234 = bitcast float %217 to i32, !dbg !36
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !36
  %236 = bitcast i32 %235 to float, !dbg !36
  %237 = fsub float %230, %222, !dbg !25
  %238 = fadd float %217, %236, !dbg !37
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !38
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %238) #5, !dbg !28
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !39
  %242 = fmul float %237, %241, !dbg !29
  %243 = fadd float %222, %242, !dbg !30
  %244 = fadd float %227, %233, !dbg !31
  %245 = fmul float %237, %237, !dbg !32
  %246 = fmul float %217, %245, !dbg !33
  %247 = fmul float %241, %246, !dbg !34
  %248 = fadd float %244, %247, !dbg !35
  %249 = bitcast float %243 to i32, !dbg !36
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !36
  %251 = bitcast i32 %250 to float, !dbg !36
  %252 = bitcast float %248 to i32, !dbg !36
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !36
  %254 = bitcast i32 %253 to float, !dbg !36
  %255 = bitcast float %238 to i32, !dbg !36
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !36
  %257 = bitcast i32 %256 to float, !dbg !36
  %258 = fsub float %251, %243, !dbg !25
  %259 = fadd float %238, %257, !dbg !37
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !38
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %259) #5, !dbg !28
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !39
  %263 = fmul float %258, %262, !dbg !29
  %264 = fadd float %243, %263, !dbg !30
  %265 = fadd float %248, %254, !dbg !31
  %266 = fmul float %258, %258, !dbg !32
  %267 = fmul float %238, %266, !dbg !33
  %268 = fmul float %262, %267, !dbg !34
  %269 = fadd float %265, %268, !dbg !35
  %270 = bitcast float %264 to i32, !dbg !36
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !36
  %272 = bitcast i32 %271 to float, !dbg !36
  %273 = bitcast float %269 to i32, !dbg !36
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !36
  %275 = bitcast i32 %274 to float, !dbg !36
  %276 = bitcast float %259 to i32, !dbg !36
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !36
  %278 = bitcast i32 %277 to float, !dbg !36
  %279 = fsub float %272, %264, !dbg !25
  %280 = fadd float %259, %278, !dbg !37
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !38
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %280) #5, !dbg !28
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !39
  %284 = fmul float %279, %283, !dbg !29
  %285 = fadd float %264, %284, !dbg !30
  %286 = fadd float %269, %275, !dbg !31
  %287 = fmul float %279, %279, !dbg !32
  %288 = fmul float %259, %287, !dbg !33
  %289 = fmul float %283, %288, !dbg !34
  %290 = fadd float %286, %289, !dbg !35
  %291 = and i32 %7, 15, !dbg !36
  %292 = icmp eq i32 %291, 0, !dbg !36
  %293 = and i1 %200, %292, !dbg !36
  %294 = bitcast float %285 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %294, i1 %293) #5, !dbg !36
  %295 = bitcast float %290 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %295, i1 %293) #5, !dbg !36
  %296 = bitcast float %280 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %296, i1 %293) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %297 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %298 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !36
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float 4.096000e+03) #5, !dbg !40
  %300 = fadd float %299, 0x3DDB7CDFE0000000, !dbg !41
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %301, 0, !dbg !42
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i = icmp eq i32 %302, 0, !dbg !42
  br i1 %.not.i, label %308, label %303, !dbg !42

303:                                              ; preds = %5
  br i1 %.not1.i, label %306, label %304, !dbg !42

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

308:                                              ; preds = %5
  br i1 %.not1.i, label %311, label %309, !dbg !42

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %304, %306, %309, %311
  %.0.i = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !42
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i24 = icmp eq i32 %319, 0, !dbg !42
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i27 = icmp eq i32 %320, 0, !dbg !42
  br i1 %.not.i24, label %326, label %321, !dbg !42

321:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %324, label %322, !dbg !42

322:                                              ; preds = %321
  %323 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

324:                                              ; preds = %321
  %325 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

326:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %329, label %327, !dbg !42

327:                                              ; preds = %326
  %328 = tail call float @llvm.nvvm.sqrt.rn.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

329:                                              ; preds = %326
  %330 = tail call float @llvm.nvvm.sqrt.approx.f(float %300) #5, !dbg !42
  br label %__nv_sqrtf.exit28, !dbg !42

__nv_sqrtf.exit28:                                ; preds = %322, %324, %327, %329
  %.0.i26 = phi float [ %323, %322 ], [ %325, %324 ], [ %328, %327 ], [ %330, %329 ], !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %331 = sext i32 %6 to i64, !dbg !44
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !44
  %urem = and i32 %7, 511, !dbg !45
  %333 = icmp eq i32 %urem, 0, !dbg !45
  %334 = bitcast float %.0.i to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %332, i1 %333) #5, !dbg !45
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !46
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !46
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !46
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !46
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !46
  %340 = bitcast i32 %336 to float, !dbg !46
  %341 = bitcast i32 %337 to float, !dbg !46
  %342 = bitcast i32 %338 to float, !dbg !46
  %343 = bitcast i32 %339 to float, !dbg !46
  %344 = fsub float %340, %297, !dbg !47
  %345 = fsub float %341, %297, !dbg !47
  %346 = fsub float %342, %297, !dbg !47
  %347 = fsub float %343, %297, !dbg !47
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %344, float %.0.i26) #5, !dbg !48
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %.0.i26) #5, !dbg !48
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %346, float %.0.i26) #5, !dbg !48
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %.0.i26) #5, !dbg !48
  %352 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !49
  %353 = bitcast float %348 to i32, !dbg !50
  %354 = bitcast float %349 to i32, !dbg !50
  %355 = bitcast float %350 to i32, !dbg !50
  %356 = bitcast float %351 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %353, i32 %354, i32 %355, i32 %356, ptr addrspace(1) %352, i1 true) #5, !dbg !50
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !46
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !46
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !46
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !46
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !46
  %362 = bitcast i32 %358 to float, !dbg !46
  %363 = bitcast i32 %359 to float, !dbg !46
  %364 = bitcast i32 %360 to float, !dbg !46
  %365 = bitcast i32 %361 to float, !dbg !46
  %366 = fsub float %362, %297, !dbg !47
  %367 = fsub float %363, %297, !dbg !47
  %368 = fsub float %364, %297, !dbg !47
  %369 = fsub float %365, %297, !dbg !47
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %.0.i26) #5, !dbg !48
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %.0.i26) #5, !dbg !48
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %.0.i26) #5, !dbg !48
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float %.0.i26) #5, !dbg !48
  %374 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !49
  %375 = bitcast float %370 to i32, !dbg !50
  %376 = bitcast float %371 to i32, !dbg !50
  %377 = bitcast float %372 to i32, !dbg !50
  %378 = bitcast float %373 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %375, i32 %376, i32 %377, i32 %378, ptr addrspace(1) %374, i1 true) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc5kzdi76zhgedhyjosqicuxrvgex4dmxwuo7naqkk4rigrijw75.py", directory: "inductor_cache/c5")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_42, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_42, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_42", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 33, scope: !7)
!12 = !DILocation(line: 34, column: 44, scope: !7)
!13 = !DILocation(line: 34, column: 34, scope: !7)
!14 = !DILocation(line: 34, column: 49, scope: !7)
!15 = !DILocation(line: 34, column: 39, scope: !7)
!16 = !DILocation(line: 183, column: 24, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!19 = !DILocation(line: 37, column: 51, scope: !7)
!20 = !DILocation(line: 185, column: 34, scope: !17, inlinedAt: !19)
!21 = !DILocation(line: 185, column: 26, scope: !17, inlinedAt: !19)
!22 = !DILocation(line: 186, column: 39, scope: !17, inlinedAt: !19)
!23 = !DILocation(line: 186, column: 31, scope: !17, inlinedAt: !19)
!24 = !DILocation(line: 186, column: 22, scope: !17, inlinedAt: !19)
!25 = !DILocation(line: 192, column: 21, scope: !26, inlinedAt: !27)
!26 = distinct !DILexicalBlockFile(scope: !17, file: !18, discriminator: 0)
!27 = !DILocation(line: 43, column: 41, scope: !7)
!28 = !DILocation(line: 194, column: 60, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 196, column: 25, scope: !26, inlinedAt: !27)
!30 = !DILocation(line: 196, column: 17, scope: !26, inlinedAt: !27)
!31 = !DILocation(line: 197, column: 15, scope: !26, inlinedAt: !27)
!32 = !DILocation(line: 197, column: 30, scope: !26, inlinedAt: !27)
!33 = !DILocation(line: 197, column: 38, scope: !26, inlinedAt: !27)
!34 = !DILocation(line: 197, column: 49, scope: !26, inlinedAt: !27)
!35 = !DILocation(line: 197, column: 22, scope: !26, inlinedAt: !27)
!36 = !DILocation(line: 204, column: 46, scope: !17, inlinedAt: !27)
!37 = !DILocation(line: 193, column: 28, scope: !26, inlinedAt: !27)
!38 = !DILocation(line: 194, column: 39, scope: !26, inlinedAt: !27)
!39 = !DILocation(line: 194, column: 49, scope: !26, inlinedAt: !27)
!40 = !DILocation(line: 49, column: 18, scope: !7)
!41 = !DILocation(line: 51, column: 18, scope: !7)
!42 = !DILocation(line: 52, column: 26, scope: !7)
!43 = !DILocation(line: 53, column: 4, scope: !7)
!44 = !DILocation(line: 54, column: 28, scope: !7)
!45 = !DILocation(line: 54, column: 39, scope: !7)
!46 = !DILocation(line: 59, column: 50, scope: !7)
!47 = !DILocation(line: 60, column: 24, scope: !7)
!48 = !DILocation(line: 61, column: 24, scope: !7)
!49 = !DILocation(line: 62, column: 29, scope: !7)
!50 = !DILocation(line: 62, column: 51, scope: !7)
!51 = !DILocation(line: 55, column: 4, scope: !7)
