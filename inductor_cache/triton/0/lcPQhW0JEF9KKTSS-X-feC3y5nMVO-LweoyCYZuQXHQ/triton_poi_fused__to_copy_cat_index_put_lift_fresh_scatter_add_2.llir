; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/cj/ccj2vbkeqmpk4ypm35htgbvta6atf42n63adchdhjpqrwhu7jsif.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp152 < 16\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %8 = shl i32 %7, 7, !dbg !13
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %10 = and i32 %9, 127, !dbg !14
  %11 = or disjoint i32 %8, %10, !dbg !15
  %12 = icmp slt i32 %11, 256, !dbg !16
  %.frozen = freeze i32 %11, !dbg !17
  %13 = sdiv i32 %.frozen, 64, !dbg !17
  %14 = mul i32 %13, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %14, !dbg !18
  %15 = sext i32 %11 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #4, !dbg !20
  %18 = icmp slt i32 %.decomposed, 16, !dbg !21
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !22
  %19 = srem i8 %.lhs.trunc, 16, !dbg !22
  %20 = sext i8 %19 to i64, !dbg !23
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !24
  %22 = getelementptr i8, ptr addrspace(1) %21, i64 64, !dbg !24
  %23 = and i1 %12, %18, !dbg !25
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23) #4, !dbg !26
  %25 = bitcast i32 %24 to float, !dbg !26
  %26 = shl nsw i32 %13, 5, !dbg !27
  %27 = sext i32 %26 to i64, !dbg !28
  %28 = or disjoint i64 %27, 16, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !29
  %30 = getelementptr float, ptr addrspace(1) %29, i64 %20, !dbg !29
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %23, i32 0, i1 %23) #4, !dbg !30
  %32 = bitcast i32 %31 to float, !dbg !30
  %33 = fadd float %25, %32, !dbg !31
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %35 = tail call float @llvm.nvvm.floor.ftz.f(float %33), !dbg !32
  %36 = tail call float @llvm.nvvm.floor.f(float %33), !dbg !32
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %23, i32 0, i1 %23) #4, !dbg !33
  %38 = bitcast i32 %37 to float, !dbg !33
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %39, i64 %20, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %23, i32 0, i1 %23) #4, !dbg !35
  %42 = bitcast i32 %41 to float, !dbg !35
  %43 = fadd float %38, %42, !dbg !36
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %45 = tail call float @llvm.nvvm.floor.ftz.f(float %43), !dbg !37
  %46 = tail call float @llvm.nvvm.floor.f(float %43), !dbg !37
  %47 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !32
  %48 = insertelement <2 x i32> %47, i32 %44, i64 1, !dbg !32
  %49 = icmp eq <2 x i32> %48, zeroinitializer, !dbg !32
  %50 = insertelement <2 x float> poison, float %36, i64 0, !dbg !32
  %51 = insertelement <2 x float> %50, float %46, i64 1, !dbg !32
  %52 = insertelement <2 x float> poison, float %35, i64 0, !dbg !32
  %53 = insertelement <2 x float> %52, float %45, i64 1, !dbg !32
  %54 = select <2 x i1> %49, <2 x float> %51, <2 x float> %53, !dbg !32
  %55 = fadd <2 x float> %54, splat (float 1.000000e+00), !dbg !38
  %56 = fcmp ole <2 x float> %55, zeroinitializer, !dbg !39
  %57 = select <2 x i1> %56, <2 x float> zeroinitializer, <2 x float> %55, !dbg !39
  %58 = fcmp olt <2 x float> %57, splat (float 3.000000e+00), !dbg !43
  %59 = fcmp uno <2 x float> %57, zeroinitializer, !dbg !45
  %60 = or <2 x i1> %58, %59, !dbg !46
  %61 = select <2 x i1> %60, <2 x float> %57, <2 x float> splat (float 3.000000e+00), !dbg !47
  %62 = extractelement <2 x float> %61, i64 1, !dbg !48
  %63 = fmul float %62, 4.000000e+00, !dbg !48
  %64 = extractelement <2 x float> %61, i64 0, !dbg !49
  %65 = fadd float %64, %63, !dbg !49
  %66 = and i32 %.decomposed, -16, !dbg !50
  %67 = icmp eq i32 %66, 16, !dbg !50
  %.lhs.trunc23 = add nsw i8 %.lhs.trunc, -16, !dbg !51
  %68 = srem i8 %.lhs.trunc23, 16, !dbg !51
  %69 = sext i8 %68 to i64, !dbg !52
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !53
  %71 = getelementptr i8, ptr addrspace(1) %70, i64 64, !dbg !53
  %72 = and i1 %12, %67, !dbg !54
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 0, i1 %72) #4, !dbg !55
  %74 = bitcast i32 %73 to float, !dbg !55
  %75 = getelementptr float, ptr addrspace(1) %29, i64 %69, !dbg !56
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %72, i32 0, i1 %72) #4, !dbg !57
  %77 = bitcast i32 %76 to float, !dbg !57
  %78 = fadd float %74, %77, !dbg !58
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i11 = icmp eq i32 %79, 0, !dbg !59
  %80 = tail call float @llvm.nvvm.floor.ftz.f(float %78), !dbg !59
  %81 = tail call float @llvm.nvvm.floor.f(float %78), !dbg !59
  %.0.i12 = select i1 %.not.i11, float %81, float %80, !dbg !59
  %82 = fadd float %.0.i12, 1.000000e+00, !dbg !60
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %72, i32 0, i1 %72) #4, !dbg !61
  %84 = bitcast i32 %83 to float, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %39, i64 %69, !dbg !62
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %72, i32 0, i1 %72) #4, !dbg !63
  %87 = bitcast i32 %86 to float, !dbg !63
  %88 = fadd float %84, %87, !dbg !64
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !65
  %.not.i13 = icmp eq i32 %89, 0, !dbg !65
  %90 = tail call float @llvm.nvvm.floor.ftz.f(float %88), !dbg !65
  %91 = tail call float @llvm.nvvm.floor.f(float %88), !dbg !65
  %.0.i14 = select i1 %.not.i13, float %91, float %90, !dbg !65
  %92 = insertelement <2 x float> poison, float %82, i64 0, !dbg !66
  %93 = insertelement <2 x float> %92, float %.0.i14, i64 1, !dbg !66
  %94 = fcmp ole <2 x float> %93, zeroinitializer, !dbg !66
  %95 = select <2 x i1> %94, <2 x float> zeroinitializer, <2 x float> %93, !dbg !66
  %96 = fcmp olt <2 x float> %95, splat (float 3.000000e+00), !dbg !68
  %97 = fcmp uno <2 x float> %95, zeroinitializer, !dbg !70
  %98 = or <2 x i1> %96, %97, !dbg !71
  %99 = select <2 x i1> %98, <2 x float> %95, <2 x float> splat (float 3.000000e+00), !dbg !72
  %100 = extractelement <2 x float> %99, i64 1, !dbg !73
  %101 = fmul float %100, 4.000000e+00, !dbg !73
  %102 = extractelement <2 x float> %99, i64 0, !dbg !74
  %103 = fadd float %102, %101, !dbg !74
  %104 = icmp eq i32 %66, 32, !dbg !75
  %.lhs.trunc25 = add nsw i8 %.lhs.trunc, -32, !dbg !76
  %105 = srem i8 %.lhs.trunc25, 16, !dbg !76
  %106 = sext i8 %105 to i64, !dbg !77
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !78
  %108 = getelementptr i8, ptr addrspace(1) %107, i64 64, !dbg !78
  %109 = and i1 %12, %104, !dbg !79
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %109, i32 0, i1 %109) #4, !dbg !80
  %111 = bitcast i32 %110 to float, !dbg !80
  %112 = getelementptr float, ptr addrspace(1) %29, i64 %106, !dbg !81
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %109, i32 0, i1 %109) #4, !dbg !82
  %114 = bitcast i32 %113 to float, !dbg !82
  %115 = fadd float %111, %114, !dbg !83
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not.i15 = icmp eq i32 %116, 0, !dbg !84
  %117 = tail call float @llvm.nvvm.floor.ftz.f(float %115), !dbg !84
  %118 = tail call float @llvm.nvvm.floor.f(float %115), !dbg !84
  %.0.i16 = select i1 %.not.i15, float %118, float %117, !dbg !84
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %109, i32 0, i1 %109) #4, !dbg !85
  %120 = bitcast i32 %119 to float, !dbg !85
  %121 = getelementptr float, ptr addrspace(1) %39, i64 %106, !dbg !86
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %109, i32 0, i1 %109) #4, !dbg !87
  %123 = bitcast i32 %122 to float, !dbg !87
  %124 = fadd float %120, %123, !dbg !88
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !89
  %.not.i17 = icmp eq i32 %125, 0, !dbg !89
  %126 = tail call float @llvm.nvvm.floor.ftz.f(float %124), !dbg !89
  %127 = tail call float @llvm.nvvm.floor.f(float %124), !dbg !89
  %.0.i18 = select i1 %.not.i17, float %127, float %126, !dbg !89
  %128 = fadd float %.0.i18, 1.000000e+00, !dbg !90
  %129 = insertelement <2 x float> poison, float %.0.i16, i64 0, !dbg !91
  %130 = insertelement <2 x float> %129, float %128, i64 1, !dbg !91
  %131 = fcmp ole <2 x float> %130, zeroinitializer, !dbg !91
  %132 = select <2 x i1> %131, <2 x float> zeroinitializer, <2 x float> %130, !dbg !91
  %133 = fcmp olt <2 x float> %132, splat (float 3.000000e+00), !dbg !93
  %134 = fcmp uno <2 x float> %132, zeroinitializer, !dbg !95
  %135 = or <2 x i1> %133, %134, !dbg !96
  %136 = select <2 x i1> %135, <2 x float> %132, <2 x float> splat (float 3.000000e+00), !dbg !97
  %137 = extractelement <2 x float> %136, i64 1, !dbg !98
  %138 = fmul float %137, 4.000000e+00, !dbg !98
  %139 = extractelement <2 x float> %136, i64 0, !dbg !99
  %140 = fadd float %139, %138, !dbg !99
  %141 = icmp sgt i32 %.decomposed, 47, !dbg !100
  %.lhs.trunc27 = add nsw i8 %.lhs.trunc, -48, !dbg !101
  %142 = srem i8 %.lhs.trunc27, 16, !dbg !101
  %143 = sext i8 %142 to i64, !dbg !102
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !103
  %145 = getelementptr i8, ptr addrspace(1) %144, i64 64, !dbg !103
  %146 = and i1 %12, %141, !dbg !104
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %146, i32 0, i1 %146) #4, !dbg !105
  %148 = bitcast i32 %147 to float, !dbg !105
  %149 = getelementptr float, ptr addrspace(1) %29, i64 %143, !dbg !106
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %146, i32 0, i1 %146) #4, !dbg !107
  %151 = bitcast i32 %150 to float, !dbg !107
  %152 = fadd float %148, %151, !dbg !108
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !109
  %154 = tail call float @llvm.nvvm.floor.ftz.f(float %152), !dbg !109
  %155 = tail call float @llvm.nvvm.floor.f(float %152), !dbg !109
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %146, i32 0, i1 %146) #4, !dbg !110
  %157 = bitcast i32 %156 to float, !dbg !110
  %158 = getelementptr float, ptr addrspace(1) %39, i64 %143, !dbg !111
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %146, i32 0, i1 %146) #4, !dbg !112
  %160 = bitcast i32 %159 to float, !dbg !112
  %161 = fadd float %157, %160, !dbg !113
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !114
  %163 = tail call float @llvm.nvvm.floor.ftz.f(float %161), !dbg !114
  %164 = tail call float @llvm.nvvm.floor.f(float %161), !dbg !114
  %165 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !109
  %166 = insertelement <2 x i32> %165, i32 %162, i64 1, !dbg !109
  %167 = icmp eq <2 x i32> %166, zeroinitializer, !dbg !109
  %168 = insertelement <2 x float> poison, float %155, i64 0, !dbg !109
  %169 = insertelement <2 x float> %168, float %164, i64 1, !dbg !109
  %170 = insertelement <2 x float> poison, float %154, i64 0, !dbg !109
  %171 = insertelement <2 x float> %170, float %163, i64 1, !dbg !109
  %172 = select <2 x i1> %167, <2 x float> %169, <2 x float> %171, !dbg !109
  %173 = fcmp ole <2 x float> %172, zeroinitializer, !dbg !115
  %174 = select <2 x i1> %173, <2 x float> zeroinitializer, <2 x float> %172, !dbg !115
  %175 = fcmp olt <2 x float> %174, splat (float 3.000000e+00), !dbg !117
  %176 = fcmp uno <2 x float> %174, zeroinitializer, !dbg !119
  %177 = or <2 x i1> %175, %176, !dbg !120
  %178 = select <2 x i1> %177, <2 x float> %174, <2 x float> splat (float 3.000000e+00), !dbg !121
  %179 = extractelement <2 x float> %178, i64 1, !dbg !122
  %180 = fmul float %179, 4.000000e+00, !dbg !122
  %181 = extractelement <2 x float> %178, i64 0, !dbg !123
  %182 = fadd float %181, %180, !dbg !123
  %183 = select i1 %141, float %182, float 0.000000e+00, !dbg !124
  %184 = select i1 %104, float %140, float %183, !dbg !125
  %185 = select i1 %67, float %103, float %184, !dbg !125
  %186 = select i1 %18, float %65, float %185, !dbg !125
  %187 = fptosi float %186 to i64, !dbg !126
  %188 = icmp ugt i64 %187, 15, !dbg !127
  %.not8 = and i1 %12, %188, !dbg !128
  br i1 %.not8, label %189, label %190, !dbg !128

189:                                              ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 180, ptr nonnull @assertFunc_0, i64 1), !dbg !128
  unreachable, !dbg !128

190:                                              ; preds = %6
  %191 = fcmp une <2 x float> %55, %61, !dbg !129
  %shift = shufflevector <2 x i1> %191, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !130
  %192 = or <2 x i1> %191, %shift, !dbg !130
  %193 = extractelement <2 x i1> %192, i64 0, !dbg !130
  %194 = fcmp une <2 x float> %93, %99, !dbg !131
  %shift29 = shufflevector <2 x i1> %194, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !132
  %195 = or <2 x i1> %194, %shift29, !dbg !132
  %196 = extractelement <2 x i1> %195, i64 0, !dbg !132
  %197 = fcmp une <2 x float> %130, %136, !dbg !133
  %shift30 = shufflevector <2 x i1> %197, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !134
  %198 = or <2 x i1> %197, %shift30, !dbg !134
  %199 = extractelement <2 x i1> %198, i64 0, !dbg !134
  %200 = fcmp une <2 x float> %172, %178, !dbg !135
  %shift31 = shufflevector <2 x i1> %200, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !136
  %201 = or <2 x i1> %200, %shift31, !dbg !136
  %202 = extractelement <2 x i1> %201, i64 0, !dbg !136
  %203 = select i1 %141, i1 %202, i1 false, !dbg !137
  %204 = select i1 %104, i1 %199, i1 %203, !dbg !125
  %205 = select i1 %67, i1 %196, i1 %204, !dbg !125
  %206 = select i1 %18, i1 %193, i1 %205, !dbg !125
  %207 = bitcast i32 %17 to float, !dbg !20
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !139
  %210 = bitcast float %208 to i32, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %209, i1 %12) #4, !dbg !140
  %211 = shl nsw i32 %13, 4, !dbg !141
  %212 = sext i32 %211 to i64, !dbg !142
  %213 = getelementptr float, ptr addrspace(1) %4, i64 %187, !dbg !143
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %212, !dbg !143
  %215 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.relaxed.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %214, float %208, i1 %12) #4, !dbg !144
  ret void, !dbg !145
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccj2vbkeqmpk4ypm35htgbvta6atf42n63adchdhjpqrwhu7jsif.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2", linkageName: "triton_poi_fused__to_copy_cat_index_put_lift_fresh_scatter_add_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 27, column: 32, scope: !11)
!20 = !DILocation(line: 27, column: 37, scope: !11)
!21 = !DILocation(line: 32, column: 18, scope: !11)
!22 = !DILocation(line: 37, column: 49, scope: !11)
!23 = !DILocation(line: 37, column: 42, scope: !11)
!24 = !DILocation(line: 37, column: 30, scope: !11)
!25 = !DILocation(line: 37, column: 63, scope: !11)
!26 = !DILocation(line: 37, column: 56, scope: !11)
!27 = !DILocation(line: 38, column: 44, scope: !11)
!28 = !DILocation(line: 38, column: 41, scope: !11)
!29 = !DILocation(line: 38, column: 31, scope: !11)
!30 = !DILocation(line: 38, column: 65, scope: !11)
!31 = !DILocation(line: 39, column: 19, scope: !11)
!32 = !DILocation(line: 40, column: 28, scope: !11)
!33 = !DILocation(line: 49, column: 58, scope: !11)
!34 = !DILocation(line: 50, column: 31, scope: !11)
!35 = !DILocation(line: 50, column: 66, scope: !11)
!36 = !DILocation(line: 51, column: 20, scope: !11)
!37 = !DILocation(line: 52, column: 28, scope: !11)
!38 = !DILocation(line: 42, column: 20, scope: !11)
!39 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !11, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 42, scope: !11)
!43 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 46, column: 42, scope: !11)
!45 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !44)
!46 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !44)
!47 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !44)
!48 = !DILocation(line: 57, column: 20, scope: !11)
!49 = !DILocation(line: 58, column: 20, scope: !11)
!50 = !DILocation(line: 64, column: 20, scope: !11)
!51 = !DILocation(line: 69, column: 59, scope: !11)
!52 = !DILocation(line: 69, column: 44, scope: !11)
!53 = !DILocation(line: 69, column: 31, scope: !11)
!54 = !DILocation(line: 69, column: 74, scope: !11)
!55 = !DILocation(line: 69, column: 66, scope: !11)
!56 = !DILocation(line: 70, column: 31, scope: !11)
!57 = !DILocation(line: 70, column: 74, scope: !11)
!58 = !DILocation(line: 71, column: 20, scope: !11)
!59 = !DILocation(line: 72, column: 28, scope: !11)
!60 = !DILocation(line: 74, column: 20, scope: !11)
!61 = !DILocation(line: 81, column: 66, scope: !11)
!62 = !DILocation(line: 82, column: 31, scope: !11)
!63 = !DILocation(line: 82, column: 74, scope: !11)
!64 = !DILocation(line: 83, column: 20, scope: !11)
!65 = !DILocation(line: 84, column: 28, scope: !11)
!66 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !67)
!67 = !DILocation(line: 76, column: 42, scope: !11)
!68 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !69)
!69 = !DILocation(line: 78, column: 42, scope: !11)
!70 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !69)
!71 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !69)
!72 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !69)
!73 = !DILocation(line: 88, column: 20, scope: !11)
!74 = !DILocation(line: 89, column: 20, scope: !11)
!75 = !DILocation(line: 95, column: 20, scope: !11)
!76 = !DILocation(line: 100, column: 59, scope: !11)
!77 = !DILocation(line: 100, column: 44, scope: !11)
!78 = !DILocation(line: 100, column: 31, scope: !11)
!79 = !DILocation(line: 100, column: 74, scope: !11)
!80 = !DILocation(line: 100, column: 66, scope: !11)
!81 = !DILocation(line: 101, column: 31, scope: !11)
!82 = !DILocation(line: 101, column: 74, scope: !11)
!83 = !DILocation(line: 102, column: 20, scope: !11)
!84 = !DILocation(line: 103, column: 28, scope: !11)
!85 = !DILocation(line: 110, column: 66, scope: !11)
!86 = !DILocation(line: 111, column: 31, scope: !11)
!87 = !DILocation(line: 111, column: 74, scope: !11)
!88 = !DILocation(line: 112, column: 20, scope: !11)
!89 = !DILocation(line: 113, column: 28, scope: !11)
!90 = !DILocation(line: 115, column: 20, scope: !11)
!91 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !92)
!92 = !DILocation(line: 105, column: 42, scope: !11)
!93 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !94)
!94 = !DILocation(line: 107, column: 42, scope: !11)
!95 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !94)
!96 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !94)
!97 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !94)
!98 = !DILocation(line: 119, column: 20, scope: !11)
!99 = !DILocation(line: 120, column: 20, scope: !11)
!100 = !DILocation(line: 123, column: 20, scope: !11)
!101 = !DILocation(line: 130, column: 61, scope: !11)
!102 = !DILocation(line: 130, column: 46, scope: !11)
!103 = !DILocation(line: 130, column: 32, scope: !11)
!104 = !DILocation(line: 130, column: 76, scope: !11)
!105 = !DILocation(line: 130, column: 68, scope: !11)
!106 = !DILocation(line: 131, column: 32, scope: !11)
!107 = !DILocation(line: 131, column: 76, scope: !11)
!108 = !DILocation(line: 132, column: 22, scope: !11)
!109 = !DILocation(line: 133, column: 29, scope: !11)
!110 = !DILocation(line: 140, column: 68, scope: !11)
!111 = !DILocation(line: 141, column: 32, scope: !11)
!112 = !DILocation(line: 141, column: 76, scope: !11)
!113 = !DILocation(line: 142, column: 22, scope: !11)
!114 = !DILocation(line: 143, column: 29, scope: !11)
!115 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !116)
!116 = !DILocation(line: 135, column: 44, scope: !11)
!117 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !118)
!118 = !DILocation(line: 137, column: 44, scope: !11)
!119 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !118)
!120 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !118)
!121 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !118)
!122 = !DILocation(line: 147, column: 22, scope: !11)
!123 = !DILocation(line: 148, column: 22, scope: !11)
!124 = !DILocation(line: 150, column: 37, scope: !11)
!125 = !DILocation(line: 0, scope: !11)
!126 = !DILocation(line: 179, column: 23, scope: !11)
!127 = !DILocation(line: 180, column: 39, scope: !11)
!128 = !DILocation(line: 180, column: 65, scope: !11)
!129 = !DILocation(line: 154, column: 22, scope: !11)
!130 = !DILocation(line: 156, column: 22, scope: !11)
!131 = !DILocation(line: 159, column: 22, scope: !11)
!132 = !DILocation(line: 161, column: 22, scope: !11)
!133 = !DILocation(line: 164, column: 22, scope: !11)
!134 = !DILocation(line: 166, column: 22, scope: !11)
!135 = !DILocation(line: 169, column: 23, scope: !11)
!136 = !DILocation(line: 171, column: 22, scope: !11)
!137 = !DILocation(line: 173, column: 37, scope: !11)
!138 = !DILocation(line: 178, column: 38, scope: !11)
!139 = !DILocation(line: 181, column: 25, scope: !11)
!140 = !DILocation(line: 181, column: 38, scope: !11)
!141 = !DILocation(line: 182, column: 42, scope: !11)
!142 = !DILocation(line: 182, column: 39, scope: !11)
!143 = !DILocation(line: 182, column: 30, scope: !11)
!144 = !DILocation(line: 182, column: 55, scope: !11)
!145 = !DILocation(line: 182, column: 4, scope: !11)
