; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 1024, !dbg !14
  %19 = srem i32 %17, 64, !dbg !15
  %20 = sext i32 %17 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %18) #3, !dbg !17
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !17
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !17
  %25 = bitcast i32 %23 to float, !dbg !17
  %26 = bitcast i32 %24 to float, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !19
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !19
  %31 = bitcast i32 %29 to float, !dbg !19
  %32 = bitcast i32 %30 to float, !dbg !19
  %33 = sext i32 %19 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %38 = bitcast i32 %36 to float, !dbg !21
  %39 = bitcast i32 %37 to float, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !22
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !24
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !25
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !25
  %46 = bitcast i32 %44 to float, !dbg !25
  %47 = bitcast i32 %45 to float, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !26
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %18) #3, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !28
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %18) #3, !dbg !29
  %52 = fcmp oeq float %25, 0.000000e+00, !dbg !30
  %53 = fcmp oeq float %26, 0.000000e+00, !dbg !30
  %54 = select i1 %52, float 1.000000e+00, float %25, !dbg !31
  %55 = select i1 %53, float 1.000000e+00, float %26, !dbg !31
  %56 = fadd float %31, %38, !dbg !32
  %57 = fadd float %32, %39, !dbg !32
  %58 = fsub float %56, %38, !dbg !33
  %59 = fsub float %57, %39, !dbg !33
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %54) #3, !dbg !34
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %55) #3, !dbg !34
  %62 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %63 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %64, 0, !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %65, 0, !dbg !36
  br i1 %.not.i, label %71, label %66, !dbg !36

66:                                               ; preds = %11
  br i1 %.not1.i, label %69, label %67, !dbg !36

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

71:                                               ; preds = %11
  br i1 %.not1.i, label %74, label %72, !dbg !36

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %76, 0, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !36
  br i1 %.not.i1, label %83, label %78, !dbg !36

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !36
  %88 = fadd float %61, %39, !dbg !37
  %89 = select i1 %53, float 0.000000e+00, float %88, !dbg !38
  %90 = extractvalue { i32, i32 } %41, 1, !dbg !23
  %91 = bitcast i32 %90 to float, !dbg !23
  %92 = fsub float %89, %91, !dbg !39
  %93 = fadd float %60, %38, !dbg !37
  %94 = select i1 %52, float 0.000000e+00, float %93, !dbg !38
  %95 = extractvalue { i32, i32 } %41, 0, !dbg !23
  %96 = bitcast i32 %95 to float, !dbg !23
  %97 = fsub float %94, %96, !dbg !39
  %98 = select i1 %53, float 0.000000e+00, float 1.000000e+00, !dbg !40
  %99 = select i1 %52, float 0.000000e+00, float 1.000000e+00, !dbg !40
  %100 = extractvalue { i32, i32 } %51, 1, !dbg !29
  %101 = bitcast i32 %100 to float, !dbg !29
  %102 = extractvalue { i32, i32 } %51, 0, !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = extractvalue { i32, i32 } %49, 1, !dbg !27
  %105 = bitcast i32 %104 to float, !dbg !27
  %106 = extractvalue { i32, i32 } %49, 0, !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %110 = fmul float %97, %108, !dbg !42
  %111 = fmul float %92, %109, !dbg !42
  %112 = fmul float %110, %107, !dbg !43
  %113 = fmul float %111, %105, !dbg !43
  %114 = fadd float %112, %103, !dbg !44
  %115 = fadd float %113, %101, !dbg !44
  %116 = fcmp olt float %114, 0.000000e+00, !dbg !45
  %117 = fcmp olt float %115, 0.000000e+00, !dbg !45
  %118 = select i1 %116, float 0.000000e+00, float %114, !dbg !49
  %119 = select i1 %117, float 0.000000e+00, float %115, !dbg !49
  %120 = fmul float %99, %118, !dbg !50
  %121 = fmul float %98, %119, !dbg !50
  %122 = getelementptr i1, ptr addrspace(1) %7, i64 %20, !dbg !51
  %123 = zext i1 %52 to i8, !dbg !52
  %124 = zext i1 %53 to i8, !dbg !52
  %125 = insertelement <2 x i8> poison, i8 %123, i64 0, !dbg !52
  %126 = insertelement <2 x i8> %125, i8 %124, i64 1, !dbg !52
  %127 = bitcast <2 x i8> %126 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %127, ptr addrspace(1) %122, i1 %18) #3, !dbg !52
  %128 = bitcast float %54 to i32, !dbg !53
  %129 = bitcast float %55 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %21, i1 %18) #3, !dbg !53
  %130 = bitcast float %94 to i32, !dbg !54
  %131 = bitcast float %89 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %27, i1 %18) #3, !dbg !54
  %132 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !55
  %133 = bitcast float %99 to i32, !dbg !56
  %134 = bitcast float %98 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %134, ptr addrspace(1) %132, i1 %18) #3, !dbg !56
  %135 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !57
  %136 = bitcast float %120 to i32, !dbg !58
  %137 = bitcast float %121 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %137, ptr addrspace(1) %135, i1 %18) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clzqx6qb57jaodxn37o3a462sbseelfoculpeselqjqwc6nfazgu.py", directory: "inductor_cache/lz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 34, scope: !7)
!19 = !DILocation(line: 27, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 19, scope: !7)
!31 = !DILocation(line: 36, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 27, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 41, column: 33, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 42, column: 33, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 54, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 56, column: 36, scope: !7)
!53 = !DILocation(line: 57, column: 39, scope: !7)
!54 = !DILocation(line: 58, column: 40, scope: !7)
!55 = !DILocation(line: 59, column: 25, scope: !7)
!56 = !DILocation(line: 59, column: 37, scope: !7)
!57 = !DILocation(line: 60, column: 25, scope: !7)
!58 = !DILocation(line: 60, column: 37, scope: !7)
!59 = !DILocation(line: 60, column: 4, scope: !7)
