; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 1, !dbg !12
  %15 = shl nuw nsw i32 %14, 2, !dbg !12
  %16 = lshr i32 %13, 3, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = and i32 %13, 7, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %22 = icmp slt i32 %19, 256, !dbg !14
  %23 = lshr i32 %13, 1, !dbg !15
  %24 = shl i32 %13, 2, !dbg !15
  %25 = and i32 %24, 28, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %26 = sdiv i32 %.frozen, 64, !dbg !16
  %27 = mul i32 %26, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %27, !dbg !17
  %28 = shl i32 %23, 6, !dbg !18
  %29 = and i32 %28, 1984, !dbg !18
  %30 = add nsw i32 %.decomposed, %29, !dbg !19
  %31 = shl i32 %26, 11, !dbg !20
  %32 = add i32 %30, %31, !dbg !21
  %33 = sext i32 %32 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = shl nuw nsw i32 %14, 7, !dbg !23
  %41 = and i32 %23, 31, !dbg !23
  %42 = or disjoint i32 %40, %41, !dbg !23
  %43 = and i32 %24, 252, !dbg !23
  %.idx = shl nuw nsw i32 %14, 6, !dbg !23
  %44 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %45 = getelementptr inbounds float, ptr addrspace(3) %44, i32 %42, !dbg !23
  %46 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #5, !dbg !23
  %47 = or disjoint i32 %42, 32, !dbg !23
  %48 = lshr i32 %47, 3, !dbg !23
  %49 = and i32 %48, 20, !dbg !23
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %49, !dbg !23
  %51 = getelementptr float, ptr addrspace(3) %50, i32 %47, !dbg !23
  %52 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #5, !dbg !23
  %53 = or disjoint i32 %42, 64, !dbg !23
  %54 = lshr i32 %53, 3, !dbg !23
  %55 = and i32 %54, 24, !dbg !23
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !23
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %53, !dbg !23
  %58 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #5, !dbg !23
  %59 = or disjoint i32 %42, 96, !dbg !23
  %60 = lshr i32 %59, 3, !dbg !23
  %61 = and i32 %60, 28, !dbg !23
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !23
  %63 = getelementptr float, ptr addrspace(3) %62, i32 %59, !dbg !23
  %64 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %65 = lshr i32 %24, 3, !dbg !23
  %66 = and i32 %65, 28, !dbg !23
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !23
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %43, !dbg !23
  %69 = load float, ptr addrspace(3) %68, align 16, !dbg !23
  %70 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 4, !dbg !23
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !23
  %72 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 8, !dbg !23
  %73 = load float, ptr addrspace(3) %72, align 8, !dbg !23
  %74 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 12, !dbg !23
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !23
  %76 = shl i32 %20, 5, !dbg !24
  %77 = or disjoint i32 %76, %25, !dbg !25
  %78 = sext i32 %77 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !26
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !27
  %85 = bitcast i32 %81 to float, !dbg !27
  %86 = bitcast i32 %82 to float, !dbg !27
  %87 = bitcast i32 %83 to float, !dbg !27
  %88 = bitcast i32 %84 to float, !dbg !27
  %89 = zext nneg i32 %25 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !28
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #5, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !29
  %96 = bitcast i32 %92 to float, !dbg !29
  %97 = bitcast i32 %93 to float, !dbg !29
  %98 = bitcast i32 %94 to float, !dbg !29
  %99 = bitcast i32 %95 to float, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !30
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #5, !dbg !31
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !32
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #5, !dbg !33
  %104 = fadd float %85, %96, !dbg !34
  %105 = fadd float %86, %97, !dbg !34
  %106 = fadd float %87, %98, !dbg !34
  %107 = fadd float %88, %99, !dbg !34
  %108 = fadd float %69, %104, !dbg !35
  %109 = fadd float %71, %105, !dbg !35
  %110 = fadd float %73, %106, !dbg !35
  %111 = fadd float %75, %107, !dbg !35
  %112 = fadd float %108, %109, !dbg !36
  %113 = fadd float %110, %112, !dbg !36
  %114 = fadd float %111, %113, !dbg !36
  %115 = select i1 %21, float %114, float 0.000000e+00, !dbg !36
  %116 = bitcast float %115 to i32, !dbg !41
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !41
  %118 = bitcast i32 %117 to float, !dbg !41
  %119 = fadd float %115, %118, !dbg !36
  %120 = bitcast float %119 to i32, !dbg !41
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !41
  %122 = bitcast i32 %121 to float, !dbg !41
  %123 = fadd float %119, %122, !dbg !36
  %124 = bitcast float %123 to i32, !dbg !41
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !41
  %126 = bitcast i32 %125 to float, !dbg !41
  %127 = fadd float %123, %126, !dbg !36
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 3.200000e+01) #5, !dbg !42
  %129 = fsub float %108, %128, !dbg !43
  %130 = fsub float %109, %128, !dbg !43
  %131 = fsub float %110, %128, !dbg !43
  %132 = fsub float %111, %128, !dbg !43
  %133 = fmul float %129, %129, !dbg !44
  %134 = fmul float %130, %130, !dbg !44
  %135 = fmul float %131, %131, !dbg !44
  %136 = fmul float %132, %132, !dbg !44
  %137 = fadd float %133, %134, !dbg !45
  %138 = fadd float %135, %137, !dbg !45
  %139 = fadd float %136, %138, !dbg !45
  %140 = select i1 %21, float %139, float 0.000000e+00, !dbg !45
  %141 = bitcast float %140 to i32, !dbg !47
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !47
  %143 = bitcast i32 %142 to float, !dbg !47
  %144 = fadd float %140, %143, !dbg !45
  %145 = bitcast float %144 to i32, !dbg !47
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !47
  %147 = bitcast i32 %146 to float, !dbg !47
  %148 = fadd float %144, %147, !dbg !45
  %149 = bitcast float %148 to i32, !dbg !47
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !47
  %151 = bitcast i32 %150 to float, !dbg !47
  %152 = fadd float %148, %151, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !48
  %154 = bitcast float %152 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !48
  %156 = load float, ptr addrspace(3) %155, align 4, !dbg !48
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 3.200000e+01) #5, !dbg !49
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.200000e+01) #5, !dbg !49
  %159 = fadd float %157, 0x3EE4F8B580000000, !dbg !50
  %160 = fadd float %158, 0x3EE4F8B580000000, !dbg !50
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %161, 0, !dbg !51
  br i1 %.not.i, label %164, label %162, !dbg !51

162:                                              ; preds = %10
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

164:                                              ; preds = %10
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %162, %164
  %.0.i = phi float [ %163, %162 ], [ %165, %164 ], !dbg !51
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i16 = icmp eq i32 %169, 0, !dbg !51
  br i1 %.not.i16, label %172, label %170, !dbg !51

170:                                              ; preds = %__nv_rsqrtf.exit
  %171 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %160), !dbg !51
  br label %__nv_rsqrtf.exit18, !dbg !51

172:                                              ; preds = %__nv_rsqrtf.exit
  %173 = tail call float @llvm.nvvm.rsqrt.approx.f(float %160), !dbg !51
  br label %__nv_rsqrtf.exit18, !dbg !51

__nv_rsqrtf.exit18:                               ; preds = %170, %172
  %.0.i17 = phi float [ %171, %170 ], [ %173, %172 ], !dbg !51
  %174 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !33
  %175 = bitcast i32 %174 to float, !dbg !33
  %176 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !33
  %177 = bitcast i32 %176 to float, !dbg !33
  %178 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !33
  %179 = bitcast i32 %178 to float, !dbg !33
  %180 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !33
  %181 = bitcast i32 %180 to float, !dbg !33
  %182 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !31
  %183 = bitcast i32 %182 to float, !dbg !31
  %184 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !31
  %185 = bitcast i32 %184 to float, !dbg !31
  %186 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !31
  %187 = bitcast i32 %186 to float, !dbg !31
  %188 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !31
  %189 = bitcast i32 %188 to float, !dbg !31
  %190 = or disjoint i32 %12, %18, !dbg !13
  %191 = icmp slt i32 %190, 256, !dbg !14
  %192 = fmul float %129, %.0.i17, !dbg !52
  %193 = fmul float %130, %.0.i17, !dbg !52
  %194 = fmul float %131, %.0.i17, !dbg !52
  %195 = fmul float %132, %.0.i17, !dbg !52
  %196 = fmul float %192, %189, !dbg !53
  %197 = fmul float %193, %187, !dbg !53
  %198 = fmul float %194, %185, !dbg !53
  %199 = fmul float %195, %183, !dbg !53
  %200 = fadd float %196, %181, !dbg !54
  %201 = fadd float %197, %179, !dbg !54
  %202 = fadd float %198, %177, !dbg !54
  %203 = fadd float %199, %175, !dbg !54
  %204 = fmul float %.0.i, 3.125000e-02, !dbg !48
  %205 = getelementptr float, ptr addrspace(1) %5, i64 %78, !dbg !55
  %206 = bitcast float %192 to i32, !dbg !56
  %207 = bitcast float %193 to i32, !dbg !56
  %208 = bitcast float %194 to i32, !dbg !56
  %209 = bitcast float %195 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %207, i32 %208, i32 %209, ptr addrspace(1) %205, i1 %21) #5, !dbg !56
  %210 = getelementptr float, ptr addrspace(1) %6, i64 %78, !dbg !57
  %211 = bitcast float %200 to i32, !dbg !58
  %212 = bitcast float %201 to i32, !dbg !58
  %213 = bitcast float %202 to i32, !dbg !58
  %214 = bitcast float %203 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %212, i32 %213, i32 %214, ptr addrspace(1) %210, i1 %21) #5, !dbg !58
  %215 = sext i32 %190 to i64, !dbg !59
  %216 = getelementptr float, ptr addrspace(1) %7, i64 %215, !dbg !59
  %217 = and i32 %13, 56, !dbg !60
  %218 = icmp eq i32 %217, 0, !dbg !60
  %219 = bitcast float %204 to i32, !dbg !60
  %220 = and i1 %218, %191, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %216, i1 %220) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuikj2fj7dthoyhdafnokwdyuhlh7dg2nrrpeedhe6yomz4lhufr.py", directory: "inductor_cache/ui")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 44, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !46)
!46 = !DILocation(line: 52, column: 26, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !46)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 28, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 25, scope: !7)
!56 = !DILocation(line: 64, column: 45, scope: !7)
!57 = !DILocation(line: 65, column: 25, scope: !7)
!58 = !DILocation(line: 65, column: 45, scope: !7)
!59 = !DILocation(line: 66, column: 25, scope: !7)
!60 = !DILocation(line: 66, column: 37, scope: !7)
!61 = !DILocation(line: 66, column: 4, scope: !7)
