#loc = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":19:0)
#loc1 = loc(unknown)
#loc31 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":44:25)
#loc61 = loc(callsite(#loc1 at #loc31))
module {
  tt.func public @triton_red_fused_add_mul_pow_rsqrt_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":19:0)) attributes {noinline = false} {
    %c864_i32 = arith.constant 864 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<9.99999993E-9> : tensor<64x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<864> : tensor<64x1xi32> loc(#loc1)
    %cst_2 = arith.constant dense<9> : tensor<1x64xi32> loc(#loc1)
    %cst_3 = arith.constant dense<864> : tensor<1x64xi32> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %cst_5 = arith.constant dense<96> : tensor<64x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<384> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_6 : tensor<64x1xi32> loc(#loc7)
    %7 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc8)
    %8 = arith.remsi %5, %cst_5 : tensor<64x1xi32> loc(#loc9)
    %9 = arith.divsi %5, %cst_5 : tensor<64x1xi32> loc(#loc10)
    %10 = arith.muli %8, %cst_1 : tensor<64x1xi32> loc(#loc11)
    %11 = tt.broadcast %10 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc12)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc13)
    %13 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc14)
    %14 = arith.muli %9, %cst_5 : tensor<64x1xi32> loc(#loc15)
    %15 = tt.broadcast %14 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc16)
    %16 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc17)
    %17 = scf.for %arg6 = %c0_i32 to %c864_i32 step %c64_i32 iter_args(%arg7 = %cst_4) -> (tensor<64x64xf32>)  : i32 {
      %35 = tt.splat %arg6 : i32 -> tensor<1x64xi32> loc(#loc19)
      %36 = arith.addi %35, %7 : tensor<1x64xi32> loc(#loc19)
      %37 = arith.cmpi slt, %36, %cst_3 : tensor<1x64xi32> loc(#loc20)
      %38 = arith.divsi %36, %cst_2 : tensor<1x64xi32> loc(#loc21)
      %39 = tt.broadcast %36 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc12)
      %40 = arith.addi %39, %11 : tensor<64x64xi32> loc(#loc12)
      %41 = tt.addptr %12, %40 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc13)
      %42 = tt.broadcast %37 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc14)
      %43 = arith.andi %42, %13 : tensor<64x64xi1> loc(#loc14)
      %44 = tt.load %41, %43, %cst_4 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc22)
      %45 = tt.broadcast %38 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc16)
      %46 = arith.addi %45, %15 : tensor<64x64xi32> loc(#loc16)
      %47 = tt.addptr %16, %46 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc17)
      %48 = tt.load %47, %43, %cst_4 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc23)
      %49 = arith.addf %48, %cst_0 : tensor<64x64xf32> loc(#loc24)
      %50 = arith.mulf %44, %49 : tensor<64x64xf32> loc(#loc25)
      %51 = arith.mulf %50, %50 : tensor<64x64xf32> loc(#loc26)
      %52 = arith.addf %arg7, %51 : tensor<64x64xf32> loc(#loc27)
      %53 = arith.select %43, %52, %arg7 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc28)
      scf.yield %53 : tensor<64x64xf32> loc(#loc29)
    } loc(#loc18)
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc31)), %arg7: f32 loc(callsite(#loc1 at #loc31))):
      %35 = arith.addf %arg6, %arg7 : f32 loc(#loc63)
      tt.reduce.return %35 : f32 loc(#loc60)
    }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc60)
    %19 = tt.expand_dims %18 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc33)
    %20 = arith.addf %19, %cst : tensor<64x1xf32> loc(#loc34)
    %21 = tt.extern_elementwise %20 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32>) -> tensor<64x1xf32> loc(#loc35)
    gpu.barrier loc(#loc36)
    %22 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc37)
    %23 = tt.addptr %22, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc37)
    tt.store %23, %21, %6 : tensor<64x1x!tt.ptr<f32>> loc(#loc38)
    %24 = arith.muli %8, %cst_1 : tensor<64x1xi32> loc(#loc39)
    %25 = tt.broadcast %24 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc40)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc41)
    %27 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc42)
    %28 = arith.muli %9, %cst_5 : tensor<64x1xi32> loc(#loc43)
    %29 = tt.broadcast %28 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc44)
    %30 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc45)
    %31 = tt.broadcast %21 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc46)
    %32 = arith.muli %5, %cst_1 : tensor<64x1xi32> loc(#loc47)
    %33 = tt.broadcast %32 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc48)
    %34 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc49)
    scf.for %arg6 = %c0_i32 to %c864_i32 step %c64_i32  : i32 {
      %35 = tt.splat %arg6 : i32 -> tensor<1x64xi32> loc(#loc51)
      %36 = arith.addi %35, %7 : tensor<1x64xi32> loc(#loc51)
      %37 = arith.cmpi slt, %36, %cst_3 : tensor<1x64xi32> loc(#loc52)
      %38 = arith.divsi %36, %cst_2 : tensor<1x64xi32> loc(#loc53)
      %39 = tt.broadcast %36 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc40)
      %40 = arith.addi %39, %25 : tensor<64x64xi32> loc(#loc40)
      %41 = tt.addptr %26, %40 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc41)
      %42 = tt.broadcast %37 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc42)
      %43 = arith.andi %42, %27 : tensor<64x64xi1> loc(#loc42)
      %44 = tt.load %41, %43, %cst_4 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc54)
      %45 = tt.broadcast %38 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc44)
      %46 = arith.addi %45, %29 : tensor<64x64xi32> loc(#loc44)
      %47 = tt.addptr %30, %46 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc45)
      %48 = tt.load %47, %43, %cst_4 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc55)
      %49 = arith.addf %48, %cst_0 : tensor<64x64xf32> loc(#loc56)
      %50 = arith.mulf %44, %49 : tensor<64x64xf32> loc(#loc57)
      %51 = arith.mulf %50, %31 : tensor<64x64xf32> loc(#loc46)
      %52 = arith.addi %39, %33 : tensor<64x64xi32> loc(#loc48)
      %53 = tt.addptr %34, %52 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc49)
      tt.store %53, %51, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc58)
    } loc(#loc50)
    tt.return loc(#loc59)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":22:28)
#loc3 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":22:33)
#loc4 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":23:36)
#loc5 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":23:44)
#loc6 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":23:23)
#loc7 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":24:21)
#loc8 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":25:33)
#loc9 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":26:19)
#loc10 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":27:19)
#loc11 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":35:43)
#loc12 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":35:39)
#loc13 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":35:34)
#loc14 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":35:56)
#loc15 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":36:42)
#loc16 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":36:39)
#loc17 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":36:34)
#loc18 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":30:36)
#loc19 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":31:27)
#loc20 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":32:25)
#loc21 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":34:23)
#loc22 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":35:48)
#loc23 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":36:47)
#loc24 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":38:22)
#loc25 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":39:22)
#loc26 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":40:22)
#loc27 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":42:23)
#loc28 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":43:46)
#loc29 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":43:8)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc33 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":44:28)
#loc34 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":46:19)
#loc35 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":47:28)
#loc36 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":48:4)
#loc37 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":49:28)
#loc38 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":49:40)
#loc39 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":55:44)
#loc40 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":55:40)
#loc41 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":55:35)
#loc42 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":55:57)
#loc43 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":56:43)
#loc44 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":56:40)
#loc45 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":56:35)
#loc46 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":60:24)
#loc47 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":61:38)
#loc48 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":61:34)
#loc49 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":61:29)
#loc50 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":50:36)
#loc51 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":51:27)
#loc52 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":52:25)
#loc53 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":54:23)
#loc54 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":55:49)
#loc55 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":56:48)
#loc56 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":58:24)
#loc57 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":59:24)
#loc58 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":61:50)
#loc59 = loc("inductor_cache/hk/chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py":50:4)
#loc60 = loc(callsite(#loc30 at #loc31))
#loc62 = loc(callsite(#loc32 at #loc30))
#loc63 = loc(callsite(#loc62 at #loc31))
