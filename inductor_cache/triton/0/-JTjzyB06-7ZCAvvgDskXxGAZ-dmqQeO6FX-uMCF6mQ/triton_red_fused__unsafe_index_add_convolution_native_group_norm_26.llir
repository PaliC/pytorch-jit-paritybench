; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = icmp slt i32 %11, 256, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = shl i32 %13, 2, !dbg !12
  %19 = and i32 %18, 2044, !dbg !12
  %20 = or disjoint i32 %19, 2, !dbg !12
  %21 = srem i32 %11, 64, !dbg !13
  %22 = shl nsw i32 %21, 1, !dbg !14
  %23 = shl i32 %11, 13, !dbg !15
  %24 = shl i32 %11, 10, !dbg !16
  %25 = sext i32 %24 to i64, !dbg !17
  %26 = lshr i32 %13, 4
  %27 = and i32 %26, 15
  %28 = and i32 %18, 12
  %29 = and i32 %20, 14
  %30 = zext nneg i32 %27 to i64
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30
  %32 = zext nneg i32 %28 to i64
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32
  %34 = zext nneg i32 %29 to i64
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34
  %36 = or disjoint i32 %23, %19
  %37 = shl nuw nsw i32 %19, 1
  %38 = zext nneg i32 %37 to i64
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %38
  %40 = or disjoint i32 %37, 2
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41
  %43 = shl nuw nsw i32 %20, 1
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = or disjoint i32 %37, 6
  %47 = zext nneg i32 %46 to i64
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47
  %49 = shl nuw nsw i32 %14, 1
  %50 = zext nneg i32 %49 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = shl nuw nsw i32 %15, 1
  %53 = zext nneg i32 %52 to i64
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %55 = shl nuw nsw i32 %16, 1
  %56 = zext nneg i32 %55 to i64
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %56
  %58 = shl nuw nsw i32 %17, 1
  %59 = zext nneg i32 %58 to i64
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %59
  %61 = zext nneg i32 %14 to i64
  %62 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %61
  %63 = zext nneg i32 %15 to i64
  %64 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %63
  %65 = zext nneg i32 %16 to i64
  %66 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %65
  %67 = zext nneg i32 %17 to i64
  %68 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %67
  %69 = zext nneg i32 %19 to i64
  %70 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %69
  %71 = getelementptr inbounds i8, ptr addrspace(3) %70, i64 16
  %72 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %38
  %73 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %41
  %74 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %44
  %75 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %47
  %76 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %50
  %77 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %53
  %78 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %56
  %79 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %59
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %61
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %63
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %65
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %67
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %69
  %85 = sext i32 %36 to i64, !dbg !18
  %86 = getelementptr inbounds i8, ptr addrspace(3) %70, i64 8
  %87 = getelementptr inbounds i8, ptr addrspace(3) %70, i64 24
  %88 = getelementptr inbounds i8, ptr addrspace(3) %84, i64 4
  %89 = getelementptr inbounds i8, ptr addrspace(3) %84, i64 8
  %90 = getelementptr inbounds i8, ptr addrspace(3) %84, i64 12
  br label %91, !dbg !18

91:                                               ; preds = %10, %._crit_edge
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %10 ], [ %330, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %10 ], [ %331, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %10 ], [ %332, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %10 ], [ %333, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %10 ], [ %326, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %10 ], [ %327, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %10 ], [ %328, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %10 ], [ %329, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %10 ], [ %322, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %10 ], [ %323, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %10 ], [ %324, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %10 ], [ %325, %._crit_edge ]
  %104 = trunc i64 %indvars.iv to i32, !dbg !19
  %105 = or disjoint i32 %14, %104, !dbg !19
  %106 = lshr i32 %105, 8, !dbg !19
  %107 = and i32 %106, 9, !dbg !19
  %108 = trunc i64 %indvars.iv to i32, !dbg !19
  %109 = or disjoint i32 %15, %108, !dbg !19
  %110 = lshr i32 %109, 8, !dbg !19
  %111 = and i32 %110, 11, !dbg !19
  %112 = trunc i64 %indvars.iv to i32, !dbg !19
  %113 = or disjoint i32 %16, %112, !dbg !19
  %114 = lshr i32 %113, 8, !dbg !19
  %115 = and i32 %114, 13, !dbg !19
  %116 = trunc i64 %indvars.iv to i32, !dbg !19
  %117 = or disjoint i32 %17, %116, !dbg !19
  %118 = lshr i32 %117, 8, !dbg !19
  %119 = and i32 %118, 15, !dbg !19
  %120 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !20
  %121 = lshr i32 %120, 12, !dbg !20
  %122 = zext nneg i32 %107 to i64, !dbg !21
  %123 = getelementptr i64, ptr addrspace(1) %0, i64 %122, !dbg !21
  %124 = zext nneg i32 %111 to i64, !dbg !21
  %125 = getelementptr i64, ptr addrspace(1) %0, i64 %124, !dbg !21
  %126 = zext nneg i32 %115 to i64, !dbg !21
  %127 = getelementptr i64, ptr addrspace(1) %0, i64 %126, !dbg !21
  %128 = zext nneg i32 %119 to i64, !dbg !21
  %129 = getelementptr i64, ptr addrspace(1) %0, i64 %128, !dbg !21
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %123, i1 true, i1 true) #3, !dbg !22
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %125, i1 true, i1 true) #3, !dbg !22
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %127, i1 true, i1 true) #3, !dbg !22
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 true, i1 true) #3, !dbg !22
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 true, i1 true) #3, !dbg !23
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 true, i1 true) #3, !dbg !23
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 true, i1 true) #3, !dbg !23
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 true, i1 true) #3, !dbg !23
  %138 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %33, i1 true, i1 true, i1 true) #3, !dbg !24
  %139 = extractvalue { i64, i64 } %138, 0, !dbg !24
  %140 = extractvalue { i64, i64 } %138, 1, !dbg !24
  %141 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %35, i1 true, i1 true, i1 true) #3, !dbg !24
  %142 = extractvalue { i64, i64 } %141, 0, !dbg !24
  %143 = extractvalue { i64, i64 } %141, 1, !dbg !24
  %144 = add nuw nsw i32 %121, %22, !dbg !25
  %145 = sext i32 %144 to i64, !dbg !26
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !26
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %12, i32 0, i1 %12) #3, !dbg !27
  %148 = bitcast i32 %147 to float, !dbg !27
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %12, i32 0, i1 %12) #3, !dbg !27
  %150 = bitcast i32 %149 to float, !dbg !27
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %12, i32 0, i1 %12) #3, !dbg !27
  %152 = bitcast i32 %151 to float, !dbg !27
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %12, i32 0, i1 %12) #3, !dbg !27
  %154 = bitcast i32 %153 to float, !dbg !27
  %155 = add nuw nsw i64 %indvars.iv, %85, !dbg !28
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %155, !dbg !29
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !30
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !30
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !30
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %162 = insertelement <1 x i32> poison, i32 %158, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %162, i1 true) #3, !dbg !30
  %163 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %163, i1 true) #3, !dbg !30
  %164 = insertelement <1 x i32> poison, i32 %160, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %164, i1 true) #3, !dbg !30
  %165 = insertelement <1 x i32> poison, i32 %161, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %165, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %166 = load float, ptr addrspace(3) %51, align 8, !dbg !30
  %167 = load float, ptr addrspace(3) %54, align 8, !dbg !30
  %168 = load float, ptr addrspace(3) %57, align 8, !dbg !30
  %169 = load float, ptr addrspace(3) %60, align 8, !dbg !30
  %170 = lshr i64 %130, 60, !dbg !31
  %171 = and i64 %170, 8, !dbg !31
  %172 = add i64 %171, %130, !dbg !31
  %173 = lshr i64 %131, 60, !dbg !31
  %174 = and i64 %173, 8, !dbg !31
  %175 = add i64 %174, %131, !dbg !31
  %176 = lshr i64 %132, 60, !dbg !31
  %177 = and i64 %176, 8, !dbg !31
  %178 = add i64 %177, %132, !dbg !31
  %179 = lshr i64 %133, 60, !dbg !31
  %180 = and i64 %179, 8, !dbg !31
  %181 = add i64 %180, %133, !dbg !31
  %182 = lshr i64 %134, 60, !dbg !32
  %183 = and i64 %182, 8, !dbg !32
  %184 = add i64 %183, %134, !dbg !32
  %185 = lshr i64 %135, 60, !dbg !32
  %186 = and i64 %185, 8, !dbg !32
  %187 = add i64 %186, %135, !dbg !32
  %188 = lshr i64 %136, 60, !dbg !32
  %189 = and i64 %188, 8, !dbg !32
  %190 = add i64 %189, %136, !dbg !32
  %191 = lshr i64 %137, 60, !dbg !32
  %192 = and i64 %191, 8, !dbg !32
  %193 = add i64 %192, %137, !dbg !32
  %194 = lshr i64 %139, 60, !dbg !33
  %195 = and i64 %194, 8, !dbg !33
  %196 = lshr i64 %140, 60, !dbg !33
  %197 = and i64 %196, 8, !dbg !33
  %198 = lshr i64 %142, 60, !dbg !33
  %199 = and i64 %198, 8, !dbg !33
  %200 = lshr i64 %143, 60, !dbg !33
  %201 = and i64 %200, 8, !dbg !33
  %202 = shl i64 %184, 3, !dbg !34
  %203 = shl i64 %187, 3, !dbg !34
  %204 = shl i64 %190, 3, !dbg !34
  %205 = shl i64 %193, 3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %206 = insertelement <1 x i64> poison, i64 %202, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %62, <1 x i64> %206, i1 true) #3, !dbg !34
  %207 = insertelement <1 x i64> poison, i64 %203, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %64, <1 x i64> %207, i1 true) #3, !dbg !34
  %208 = insertelement <1 x i64> poison, i64 %204, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %66, <1 x i64> %208, i1 true) #3, !dbg !34
  %209 = insertelement <1 x i64> poison, i64 %205, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %68, <1 x i64> %209, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %210 = load i64, ptr addrspace(3) %70, align 16, !dbg !34
  %211 = load i64, ptr addrspace(3) %86, align 8, !dbg !34
  %212 = load i64, ptr addrspace(3) %71, align 16, !dbg !34
  %213 = load i64, ptr addrspace(3) %87, align 8, !dbg !34
  %214 = shl i64 %172, 6, !dbg !35
  %215 = shl i64 %175, 6, !dbg !35
  %216 = shl i64 %178, 6, !dbg !35
  %217 = shl i64 %181, 6, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %218 = insertelement <1 x i64> poison, i64 %214, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %62, <1 x i64> %218, i1 true) #3, !dbg !35
  %219 = insertelement <1 x i64> poison, i64 %215, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %64, <1 x i64> %219, i1 true) #3, !dbg !35
  %220 = insertelement <1 x i64> poison, i64 %216, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %66, <1 x i64> %220, i1 true) #3, !dbg !35
  %221 = insertelement <1 x i64> poison, i64 %217, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %68, <1 x i64> %221, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %222 = load i64, ptr addrspace(3) %70, align 16, !dbg !35
  %223 = load i64, ptr addrspace(3) %86, align 8, !dbg !35
  %224 = load i64, ptr addrspace(3) %71, align 16, !dbg !35
  %225 = load i64, ptr addrspace(3) %87, align 8, !dbg !35
  %226 = lshr exact i64 %indvars.iv, 3, !dbg !36
  %227 = and i64 %226, 512, !dbg !36
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !37
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %195, !dbg !37
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %210, !dbg !37
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %222, !dbg !37
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %227, !dbg !37
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %25, !dbg !37
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !37
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %197, !dbg !37
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %211, !dbg !37
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %223, !dbg !37
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %227, !dbg !37
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %25, !dbg !37
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !37
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %199, !dbg !37
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %212, !dbg !37
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %224, !dbg !37
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %227, !dbg !37
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %25, !dbg !37
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !37
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %201, !dbg !37
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %213, !dbg !37
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %225, !dbg !37
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %227, !dbg !37
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %25, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %252 = ptrtoint ptr addrspace(1) %233 to i64, !dbg !38
  %253 = ptrtoint ptr addrspace(1) %239 to i64, !dbg !38
  %254 = ptrtoint ptr addrspace(1) %245 to i64, !dbg !38
  %255 = ptrtoint ptr addrspace(1) %251 to i64, !dbg !38
  %256 = insertelement <1 x i64> poison, i64 %252, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %72, <1 x i64> %256, i1 true) #3, !dbg !38
  %257 = insertelement <1 x i64> poison, i64 %253, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %73, <1 x i64> %257, i1 true) #3, !dbg !38
  %258 = insertelement <1 x i64> poison, i64 %254, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %74, <1 x i64> %258, i1 true) #3, !dbg !38
  %259 = insertelement <1 x i64> poison, i64 %255, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %75, <1 x i64> %259, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %260 = load i64, ptr addrspace(3) %76, align 16, !dbg !38
  %261 = load i64, ptr addrspace(3) %77, align 16, !dbg !38
  %262 = load i64, ptr addrspace(3) %78, align 16, !dbg !38
  %263 = load i64, ptr addrspace(3) %79, align 16, !dbg !38
  %264 = inttoptr i64 %260 to ptr addrspace(1), !dbg !38
  %265 = inttoptr i64 %261 to ptr addrspace(1), !dbg !38
  %266 = inttoptr i64 %262 to ptr addrspace(1), !dbg !38
  %267 = inttoptr i64 %263 to ptr addrspace(1), !dbg !38
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %12, i32 0, i1 %12) #3, !dbg !38
  %269 = bitcast i32 %268 to float, !dbg !38
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %12, i32 0, i1 %12) #3, !dbg !38
  %271 = bitcast i32 %270 to float, !dbg !38
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %12, i32 0, i1 %12) #3, !dbg !38
  %273 = bitcast i32 %272 to float, !dbg !38
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %12, i32 0, i1 %12) #3, !dbg !38
  %275 = bitcast i32 %274 to float, !dbg !38
  %276 = fadd float %148, %269, !dbg !39
  %277 = fadd float %150, %271, !dbg !39
  %278 = fadd float %152, %273, !dbg !39
  %279 = fadd float %154, %275, !dbg !39
  %280 = fadd float %166, %276, !dbg !40
  %281 = fadd float %167, %277, !dbg !40
  %282 = fadd float %168, %278, !dbg !40
  %283 = fadd float %169, %279, !dbg !40
  %284 = icmp eq i64 %indvars.iv, 0, !dbg !41
  br i1 %284, label %._crit_edge, label %285, !dbg !42

285:                                              ; preds = %91
  %286 = fsub float %280, %100, !dbg !46
  %287 = fsub float %281, %101, !dbg !46
  %288 = fsub float %282, %102, !dbg !46
  %289 = fsub float %283, %103, !dbg !46
  %290 = fadd float %92, 1.000000e+00, !dbg !47
  %291 = fadd float %93, 1.000000e+00, !dbg !47
  %292 = fadd float %94, 1.000000e+00, !dbg !47
  %293 = fadd float %95, 1.000000e+00, !dbg !47
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %290) #3, !dbg !48
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %291) #3, !dbg !48
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %292) #3, !dbg !48
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %293) #3, !dbg !48
  %298 = fadd float %100, %294, !dbg !49
  %299 = fadd float %101, %295, !dbg !49
  %300 = fadd float %102, %296, !dbg !49
  %301 = fadd float %103, %297, !dbg !49
  %302 = fsub float %280, %298, !dbg !50
  %303 = fsub float %281, %299, !dbg !50
  %304 = fsub float %282, %300, !dbg !50
  %305 = fsub float %283, %301, !dbg !50
  %306 = fmul float %286, %302, !dbg !51
  %307 = fmul float %287, %303, !dbg !51
  %308 = fmul float %288, %304, !dbg !51
  %309 = fmul float %289, %305, !dbg !51
  %310 = fadd float %96, %306, !dbg !52
  %311 = fadd float %97, %307, !dbg !52
  %312 = fadd float %98, %308, !dbg !52
  %313 = fadd float %99, %309, !dbg !52
  br label %._crit_edge, !dbg !42

._crit_edge:                                      ; preds = %91, %285
  %314 = phi float [ %310, %285 ], [ 0.000000e+00, %91 ], !dbg !45
  %315 = phi float [ %311, %285 ], [ 0.000000e+00, %91 ], !dbg !45
  %316 = phi float [ %312, %285 ], [ 0.000000e+00, %91 ], !dbg !45
  %317 = phi float [ %313, %285 ], [ 0.000000e+00, %91 ], !dbg !45
  %.pn7 = phi float [ %298, %285 ], [ %280, %91 ]
  %.pn5 = phi float [ %299, %285 ], [ %281, %91 ]
  %.pn3 = phi float [ %300, %285 ], [ %282, %91 ]
  %.pn1 = phi float [ %301, %285 ], [ %283, %91 ]
  %318 = phi float [ %290, %285 ], [ 1.000000e+00, %91 ], !dbg !45
  %319 = phi float [ %291, %285 ], [ 1.000000e+00, %91 ], !dbg !45
  %320 = phi float [ %292, %285 ], [ 1.000000e+00, %91 ], !dbg !45
  %321 = phi float [ %293, %285 ], [ 1.000000e+00, %91 ], !dbg !45
  %322 = select i1 %12, float %.pn7, float %100, !dbg !53
  %323 = select i1 %12, float %.pn5, float %101, !dbg !53
  %324 = select i1 %12, float %.pn3, float %102, !dbg !53
  %325 = select i1 %12, float %.pn1, float %103, !dbg !53
  %326 = select i1 %12, float %314, float %96, !dbg !54
  %327 = select i1 %12, float %315, float %97, !dbg !54
  %328 = select i1 %12, float %316, float %98, !dbg !54
  %329 = select i1 %12, float %317, float %99, !dbg !54
  %330 = select i1 %12, float %318, float %92, !dbg !55
  %331 = select i1 %12, float %319, float %93, !dbg !55
  %332 = select i1 %12, float %320, float %94, !dbg !55
  %333 = select i1 %12, float %321, float %95, !dbg !55
  %334 = getelementptr float, ptr addrspace(1) %4, i64 %155, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %335 = bitcast float %280 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %335, i1 true) #3, !dbg !57
  %336 = bitcast float %281 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %336, i1 true) #3, !dbg !57
  %337 = bitcast float %282 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %337, i1 true) #3, !dbg !57
  %338 = bitcast float %283 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %338, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %.extract = load i32, ptr addrspace(3) %84, align 16, !dbg !57
  %.extract11 = load i32, ptr addrspace(3) %88, align 4, !dbg !57
  %.extract12 = load i32, ptr addrspace(3) %89, align 8, !dbg !57
  %.extract13 = load i32, ptr addrspace(3) %90, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %334, i1 %12) #3, !dbg !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !18
  %339 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !18
  br i1 %339, label %91, label %340, !dbg !18

340:                                              ; preds = %._crit_edge
  %341 = lshr i32 %13, 5, !dbg !12
  %342 = and i32 %13, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %343 = fsub float %323, %322, !dbg !60
  %344 = fadd float %330, %331, !dbg !62
  %345 = fcmp oeq float %344, 0.000000e+00, !dbg !63
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %344) #3, !dbg !64
  %347 = select i1 %345, float 0.000000e+00, float %346, !dbg !65
  %348 = fmul float %343, %347, !dbg !66
  %349 = fadd float %322, %348, !dbg !67
  %350 = fadd float %326, %327, !dbg !68
  %351 = fmul float %343, %343, !dbg !69
  %352 = fmul float %351, %330, !dbg !70
  %353 = fmul float %352, %347, !dbg !71
  %354 = fadd float %350, %353, !dbg !72
  %355 = fsub float %324, %349, !dbg !60
  %356 = fadd float %332, %344, !dbg !62
  %357 = fcmp oeq float %356, 0.000000e+00, !dbg !63
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %356) #3, !dbg !64
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !65
  %360 = fmul float %359, %355, !dbg !66
  %361 = fadd float %349, %360, !dbg !67
  %362 = fadd float %328, %354, !dbg !68
  %363 = fmul float %355, %355, !dbg !69
  %364 = fmul float %344, %363, !dbg !70
  %365 = fmul float %359, %364, !dbg !71
  %366 = fadd float %362, %365, !dbg !72
  %367 = fsub float %325, %361, !dbg !60
  %368 = fadd float %333, %356, !dbg !62
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !63
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %368) #3, !dbg !64
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !65
  %372 = fmul float %371, %367, !dbg !66
  %373 = fadd float %361, %372, !dbg !67
  %374 = fadd float %329, %366, !dbg !68
  %375 = fmul float %367, %367, !dbg !69
  %376 = fmul float %356, %375, !dbg !70
  %377 = fmul float %371, %376, !dbg !71
  %378 = fadd float %374, %377, !dbg !72
  %379 = bitcast float %373 to i32, !dbg !58
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 16, i32 31), !dbg !58
  %381 = bitcast i32 %380 to float, !dbg !58
  %382 = bitcast float %378 to i32, !dbg !58
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 16, i32 31), !dbg !58
  %384 = bitcast i32 %383 to float, !dbg !58
  %385 = bitcast float %368 to i32, !dbg !58
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 16, i32 31), !dbg !58
  %387 = bitcast i32 %386 to float, !dbg !58
  %388 = fsub float %381, %373, !dbg !60
  %389 = fadd float %368, %387, !dbg !62
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !63
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float %389) #3, !dbg !64
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !65
  %393 = fmul float %392, %388, !dbg !66
  %394 = fadd float %373, %393, !dbg !67
  %395 = fadd float %378, %384, !dbg !68
  %396 = fmul float %388, %388, !dbg !69
  %397 = fmul float %368, %396, !dbg !70
  %398 = fmul float %392, %397, !dbg !71
  %399 = fadd float %395, %398, !dbg !72
  %400 = bitcast float %394 to i32, !dbg !58
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 8, i32 31), !dbg !58
  %402 = bitcast i32 %401 to float, !dbg !58
  %403 = bitcast float %399 to i32, !dbg !58
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 8, i32 31), !dbg !58
  %405 = bitcast i32 %404 to float, !dbg !58
  %406 = bitcast float %389 to i32, !dbg !58
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 8, i32 31), !dbg !58
  %408 = bitcast i32 %407 to float, !dbg !58
  %409 = fsub float %402, %394, !dbg !60
  %410 = fadd float %389, %408, !dbg !62
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !63
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float %410) #3, !dbg !64
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !65
  %414 = fmul float %409, %413, !dbg !66
  %415 = fadd float %394, %414, !dbg !67
  %416 = fadd float %399, %405, !dbg !68
  %417 = fmul float %409, %409, !dbg !69
  %418 = fmul float %389, %417, !dbg !70
  %419 = fmul float %413, %418, !dbg !71
  %420 = fadd float %416, %419, !dbg !72
  %421 = bitcast float %415 to i32, !dbg !58
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 4, i32 31), !dbg !58
  %423 = bitcast i32 %422 to float, !dbg !58
  %424 = bitcast float %420 to i32, !dbg !58
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 4, i32 31), !dbg !58
  %426 = bitcast i32 %425 to float, !dbg !58
  %427 = bitcast float %410 to i32, !dbg !58
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 4, i32 31), !dbg !58
  %429 = bitcast i32 %428 to float, !dbg !58
  %430 = fsub float %423, %415, !dbg !60
  %431 = fadd float %410, %429, !dbg !62
  %432 = fcmp oeq float %431, 0.000000e+00, !dbg !63
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %431) #3, !dbg !64
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !65
  %435 = fmul float %430, %434, !dbg !66
  %436 = fadd float %415, %435, !dbg !67
  %437 = fadd float %420, %426, !dbg !68
  %438 = fmul float %430, %430, !dbg !69
  %439 = fmul float %410, %438, !dbg !70
  %440 = fmul float %434, %439, !dbg !71
  %441 = fadd float %437, %440, !dbg !72
  %442 = bitcast float %436 to i32, !dbg !58
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 2, i32 31), !dbg !58
  %444 = bitcast i32 %443 to float, !dbg !58
  %445 = bitcast float %441 to i32, !dbg !58
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !58
  %447 = bitcast i32 %446 to float, !dbg !58
  %448 = bitcast float %431 to i32, !dbg !58
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !58
  %450 = bitcast i32 %449 to float, !dbg !58
  %451 = fsub float %444, %436, !dbg !60
  %452 = fadd float %431, %450, !dbg !62
  %453 = fcmp oeq float %452, 0.000000e+00, !dbg !63
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %452) #3, !dbg !64
  %455 = select i1 %453, float 0.000000e+00, float %454, !dbg !65
  %456 = fmul float %451, %455, !dbg !66
  %457 = fadd float %436, %456, !dbg !67
  %458 = fadd float %441, %447, !dbg !68
  %459 = fmul float %451, %451, !dbg !69
  %460 = fmul float %431, %459, !dbg !70
  %461 = fmul float %455, %460, !dbg !71
  %462 = fadd float %458, %461, !dbg !72
  %463 = bitcast float %457 to i32, !dbg !58
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 1, i32 31), !dbg !58
  %465 = bitcast i32 %464 to float, !dbg !58
  %466 = bitcast float %462 to i32, !dbg !58
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 1, i32 31), !dbg !58
  %468 = bitcast i32 %467 to float, !dbg !58
  %469 = bitcast float %452 to i32, !dbg !58
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 1, i32 31), !dbg !58
  %471 = bitcast i32 %470 to float, !dbg !58
  %472 = fsub float %465, %457, !dbg !60
  %473 = fadd float %452, %471, !dbg !62
  %474 = fcmp oeq float %473, 0.000000e+00, !dbg !63
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %471, float %473) #3, !dbg !64
  %476 = select i1 %474, float 0.000000e+00, float %475, !dbg !65
  %477 = fmul float %472, %476, !dbg !66
  %478 = fadd float %457, %477, !dbg !67
  %479 = fadd float %462, %468, !dbg !68
  %480 = fmul float %472, %472, !dbg !69
  %481 = fmul float %452, %480, !dbg !70
  %482 = fmul float %476, %481, !dbg !71
  %483 = fadd float %479, %482, !dbg !72
  %484 = icmp eq i32 %342, 0, !dbg !58
  %485 = and i32 %341, 15, !dbg !58
  %486 = zext nneg i32 %485 to i64, !dbg !58
  %487 = getelementptr float, ptr addrspace(3) @global_smem, i64 %486, !dbg !58
  %488 = bitcast float %478 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %488, i1 %484) #3, !dbg !58
  %489 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %486, !dbg !58
  %490 = bitcast float %483 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %489, <1 x i32> %490, i1 %484) #3, !dbg !58
  %491 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %486, !dbg !58
  %492 = bitcast float %473 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %492, i1 %484) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %493 = icmp slt i32 %13, 16, !dbg !58
  %494 = sext i32 %13 to i64, !dbg !58
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i64 %494, !dbg !58
  %496 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %495, i1 %493) #3, !dbg !58
  %497 = bitcast i32 %496 to float, !dbg !58
  %498 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %494, !dbg !58
  %499 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %498, i1 %493) #3, !dbg !58
  %500 = bitcast i32 %499 to float, !dbg !58
  %501 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %494, !dbg !58
  %502 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %501, i1 %493) #3, !dbg !58
  %503 = bitcast i32 %502 to float, !dbg !58
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 8, i32 31), !dbg !58
  %505 = bitcast i32 %504 to float, !dbg !58
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 8, i32 31), !dbg !58
  %507 = bitcast i32 %506 to float, !dbg !58
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 8, i32 31), !dbg !58
  %509 = bitcast i32 %508 to float, !dbg !58
  %510 = fsub float %505, %497, !dbg !60
  %511 = fadd float %503, %509, !dbg !62
  %512 = fcmp oeq float %511, 0.000000e+00, !dbg !63
  %513 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %509, float %511) #3, !dbg !64
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !65
  %515 = fmul float %510, %514, !dbg !66
  %516 = fadd float %515, %497, !dbg !67
  %517 = fadd float %500, %507, !dbg !68
  %518 = fmul float %510, %510, !dbg !69
  %519 = fmul float %518, %503, !dbg !70
  %520 = fmul float %519, %514, !dbg !71
  %521 = fadd float %517, %520, !dbg !72
  %522 = bitcast float %516 to i32, !dbg !58
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 4, i32 31), !dbg !58
  %524 = bitcast i32 %523 to float, !dbg !58
  %525 = bitcast float %521 to i32, !dbg !58
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 4, i32 31), !dbg !58
  %527 = bitcast i32 %526 to float, !dbg !58
  %528 = bitcast float %511 to i32, !dbg !58
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 4, i32 31), !dbg !58
  %530 = bitcast i32 %529 to float, !dbg !58
  %531 = fsub float %524, %516, !dbg !60
  %532 = fadd float %511, %530, !dbg !62
  %533 = fcmp oeq float %532, 0.000000e+00, !dbg !63
  %534 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %530, float %532) #3, !dbg !64
  %535 = select i1 %533, float 0.000000e+00, float %534, !dbg !65
  %536 = fmul float %531, %535, !dbg !66
  %537 = fadd float %516, %536, !dbg !67
  %538 = fadd float %521, %527, !dbg !68
  %539 = fmul float %531, %531, !dbg !69
  %540 = fmul float %511, %539, !dbg !70
  %541 = fmul float %535, %540, !dbg !71
  %542 = fadd float %538, %541, !dbg !72
  %543 = bitcast float %537 to i32, !dbg !58
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 2, i32 31), !dbg !58
  %545 = bitcast i32 %544 to float, !dbg !58
  %546 = bitcast float %542 to i32, !dbg !58
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 2, i32 31), !dbg !58
  %548 = bitcast i32 %547 to float, !dbg !58
  %549 = bitcast float %532 to i32, !dbg !58
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 2, i32 31), !dbg !58
  %551 = bitcast i32 %550 to float, !dbg !58
  %552 = fsub float %545, %537, !dbg !60
  %553 = fadd float %532, %551, !dbg !62
  %554 = fcmp oeq float %553, 0.000000e+00, !dbg !63
  %555 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %551, float %553) #3, !dbg !64
  %556 = select i1 %554, float 0.000000e+00, float %555, !dbg !65
  %557 = fmul float %552, %556, !dbg !66
  %558 = fadd float %537, %557, !dbg !67
  %559 = fadd float %542, %548, !dbg !68
  %560 = fmul float %552, %552, !dbg !69
  %561 = fmul float %532, %560, !dbg !70
  %562 = fmul float %556, %561, !dbg !71
  %563 = fadd float %559, %562, !dbg !72
  %564 = bitcast float %558 to i32, !dbg !58
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 1, i32 31), !dbg !58
  %566 = bitcast i32 %565 to float, !dbg !58
  %567 = bitcast float %563 to i32, !dbg !58
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 1, i32 31), !dbg !58
  %569 = bitcast i32 %568 to float, !dbg !58
  %570 = bitcast float %553 to i32, !dbg !58
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 1, i32 31), !dbg !58
  %572 = bitcast i32 %571 to float, !dbg !58
  %573 = fsub float %566, %558, !dbg !60
  %574 = fadd float %553, %572, !dbg !62
  %575 = fcmp oeq float %574, 0.000000e+00, !dbg !63
  %576 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %572, float %574) #3, !dbg !64
  %577 = select i1 %575, float 0.000000e+00, float %576, !dbg !65
  %578 = fmul float %573, %577, !dbg !66
  %579 = fadd float %558, %578, !dbg !67
  %580 = fadd float %563, %569, !dbg !68
  %581 = fmul float %573, %573, !dbg !69
  %582 = fmul float %553, %581, !dbg !70
  %583 = fmul float %577, %582, !dbg !71
  %584 = fadd float %580, %583, !dbg !72
  %585 = and i32 %13, 15, !dbg !58
  %586 = icmp eq i32 %585, 0, !dbg !58
  %587 = and i1 %493, %586, !dbg !58
  %588 = bitcast float %579 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %588, i1 %587) #3, !dbg !58
  %589 = bitcast float %584 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %589, i1 %587) #3, !dbg !58
  %590 = bitcast float %574 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %590, i1 %587) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %591 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !58
  %592 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !58
  %593 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !58
  %594 = sext i32 %11 to i64, !dbg !73
  %595 = getelementptr float, ptr addrspace(1) %5, i64 %594, !dbg !73
  %596 = icmp eq i32 %14, 0, !dbg !74
  %597 = and i1 %596, %12, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %591, ptr addrspace(1) %595, i1 %597) #3, !dbg !74
  %598 = getelementptr float, ptr addrspace(1) %6, i64 %594, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %592, ptr addrspace(1) %598, i1 %597) #3, !dbg !76
  %599 = getelementptr float, ptr addrspace(1) %7, i64 %594, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %593, ptr addrspace(1) %599, i1 %597) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnhk2r467eoeoptdlq6oaxcbntq3dkpsvrynoq6gnxejh5fsqdg.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 42, column: 42, scope: !7)
!15 = !DILocation(line: 43, column: 45, scope: !7)
!16 = !DILocation(line: 54, column: 76, scope: !7)
!17 = !DILocation(line: 54, column: 71, scope: !7)
!18 = !DILocation(line: 31, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 37, column: 23, scope: !7)
!21 = !DILocation(line: 39, column: 34, scope: !7)
!22 = !DILocation(line: 39, column: 39, scope: !7)
!23 = !DILocation(line: 40, column: 39, scope: !7)
!24 = !DILocation(line: 41, column: 39, scope: !7)
!25 = !DILocation(line: 42, column: 40, scope: !7)
!26 = !DILocation(line: 42, column: 35, scope: !7)
!27 = !DILocation(line: 42, column: 47, scope: !7)
!28 = !DILocation(line: 43, column: 40, scope: !7)
!29 = !DILocation(line: 43, column: 35, scope: !7)
!30 = !DILocation(line: 43, column: 50, scope: !7)
!31 = !DILocation(line: 47, column: 36, scope: !7)
!32 = !DILocation(line: 50, column: 36, scope: !7)
!33 = !DILocation(line: 53, column: 39, scope: !7)
!34 = !DILocation(line: 54, column: 45, scope: !7)
!35 = !DILocation(line: 54, column: 55, scope: !7)
!36 = !DILocation(line: 54, column: 66, scope: !7)
!37 = !DILocation(line: 54, column: 35, scope: !7)
!38 = !DILocation(line: 54, column: 81, scope: !7)
!39 = !DILocation(line: 55, column: 24, scope: !7)
!40 = !DILocation(line: 56, column: 24, scope: !7)
!41 = !DILocation(line: 59, column: 66, scope: !7)
!42 = !DILocation(line: 178, column: 7, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 59, column: 55, scope: !7)
!46 = !DILocation(line: 183, column: 24, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 184, column: 30, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 185, column: 34, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 185, column: 26, scope: !43, inlinedAt: !45)
!50 = !DILocation(line: 186, column: 39, scope: !43, inlinedAt: !45)
!51 = !DILocation(line: 186, column: 31, scope: !43, inlinedAt: !45)
!52 = !DILocation(line: 186, column: 22, scope: !43, inlinedAt: !45)
!53 = !DILocation(line: 61, column: 62, scope: !7)
!54 = !DILocation(line: 62, column: 58, scope: !7)
!55 = !DILocation(line: 63, column: 66, scope: !7)
!56 = !DILocation(line: 64, column: 29, scope: !7)
!57 = !DILocation(line: 64, column: 51, scope: !7)
!58 = !DILocation(line: 204, column: 46, scope: !43, inlinedAt: !59)
!59 = !DILocation(line: 66, column: 44, scope: !7)
!60 = !DILocation(line: 192, column: 21, scope: !61, inlinedAt: !59)
!61 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!62 = !DILocation(line: 193, column: 28, scope: !61, inlinedAt: !59)
!63 = !DILocation(line: 194, column: 39, scope: !61, inlinedAt: !59)
!64 = !DILocation(line: 194, column: 60, scope: !61, inlinedAt: !59)
!65 = !DILocation(line: 194, column: 49, scope: !61, inlinedAt: !59)
!66 = !DILocation(line: 196, column: 25, scope: !61, inlinedAt: !59)
!67 = !DILocation(line: 196, column: 17, scope: !61, inlinedAt: !59)
!68 = !DILocation(line: 197, column: 15, scope: !61, inlinedAt: !59)
!69 = !DILocation(line: 197, column: 30, scope: !61, inlinedAt: !59)
!70 = !DILocation(line: 197, column: 38, scope: !61, inlinedAt: !59)
!71 = !DILocation(line: 197, column: 49, scope: !61, inlinedAt: !59)
!72 = !DILocation(line: 197, column: 22, scope: !61, inlinedAt: !59)
!73 = !DILocation(line: 71, column: 25, scope: !7)
!74 = !DILocation(line: 71, column: 37, scope: !7)
!75 = !DILocation(line: 72, column: 25, scope: !7)
!76 = !DILocation(line: 72, column: 37, scope: !7)
!77 = !DILocation(line: 73, column: 25, scope: !7)
!78 = !DILocation(line: 73, column: 37, scope: !7)
!79 = !DILocation(line: 73, column: 4, scope: !7)
